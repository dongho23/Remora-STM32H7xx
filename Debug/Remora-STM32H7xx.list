
Remora-STM32H7xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002552c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001588  080257d0  080257d0  000267d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08026d58  08026d58  00027d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   0000000c  08026d60  08026d60  00027d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08026d6c  08026d6c  00027d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000088  24000000  08026d70  00028000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000b84  24000088  08026df8  00028088  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000c0c  08026df8  00028c0c  2**0
                  ALLOC
  9 .dma_buffers  00000100  30000000  00000000  00001000  2**5
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00028088  2**0
                  CONTENTS, READONLY
 11 .debug_info   00190241  00000000  00000000  000280b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00017c12  00000000  00000000  001b82f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00007598  00000000  00000000  001cff10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000059c1  00000000  00000000  001d74a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00053cf1  00000000  00000000  001dce69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000874c4  00000000  00000000  00230b5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001c7385  00000000  00000000  002b801e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0047f3a3  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0002383c  00000000  00000000  0047f3e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000069  00000000  00000000  004a2c24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080257b4 	.word	0x080257b4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	080257b4 	.word	0x080257b4

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	@ 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_frsub>:
 8000728:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 800072c:	e002      	b.n	8000734 <__addsf3>
 800072e:	bf00      	nop

08000730 <__aeabi_fsub>:
 8000730:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000734 <__addsf3>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	bf1f      	itttt	ne
 8000738:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800073c:	ea92 0f03 	teqne	r2, r3
 8000740:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000744:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000748:	d06a      	beq.n	8000820 <__addsf3+0xec>
 800074a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800074e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000752:	bfc1      	itttt	gt
 8000754:	18d2      	addgt	r2, r2, r3
 8000756:	4041      	eorgt	r1, r0
 8000758:	4048      	eorgt	r0, r1
 800075a:	4041      	eorgt	r1, r0
 800075c:	bfb8      	it	lt
 800075e:	425b      	neglt	r3, r3
 8000760:	2b19      	cmp	r3, #25
 8000762:	bf88      	it	hi
 8000764:	4770      	bxhi	lr
 8000766:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800076a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800076e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000772:	bf18      	it	ne
 8000774:	4240      	negne	r0, r0
 8000776:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800077a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800077e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000782:	bf18      	it	ne
 8000784:	4249      	negne	r1, r1
 8000786:	ea92 0f03 	teq	r2, r3
 800078a:	d03f      	beq.n	800080c <__addsf3+0xd8>
 800078c:	f1a2 0201 	sub.w	r2, r2, #1
 8000790:	fa41 fc03 	asr.w	ip, r1, r3
 8000794:	eb10 000c 	adds.w	r0, r0, ip
 8000798:	f1c3 0320 	rsb	r3, r3, #32
 800079c:	fa01 f103 	lsl.w	r1, r1, r3
 80007a0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80007a4:	d502      	bpl.n	80007ac <__addsf3+0x78>
 80007a6:	4249      	negs	r1, r1
 80007a8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80007ac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80007b0:	d313      	bcc.n	80007da <__addsf3+0xa6>
 80007b2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80007b6:	d306      	bcc.n	80007c6 <__addsf3+0x92>
 80007b8:	0840      	lsrs	r0, r0, #1
 80007ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80007be:	f102 0201 	add.w	r2, r2, #1
 80007c2:	2afe      	cmp	r2, #254	@ 0xfe
 80007c4:	d251      	bcs.n	800086a <__addsf3+0x136>
 80007c6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80007ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007ce:	bf08      	it	eq
 80007d0:	f020 0001 	biceq.w	r0, r0, #1
 80007d4:	ea40 0003 	orr.w	r0, r0, r3
 80007d8:	4770      	bx	lr
 80007da:	0049      	lsls	r1, r1, #1
 80007dc:	eb40 0000 	adc.w	r0, r0, r0
 80007e0:	3a01      	subs	r2, #1
 80007e2:	bf28      	it	cs
 80007e4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80007e8:	d2ed      	bcs.n	80007c6 <__addsf3+0x92>
 80007ea:	fab0 fc80 	clz	ip, r0
 80007ee:	f1ac 0c08 	sub.w	ip, ip, #8
 80007f2:	ebb2 020c 	subs.w	r2, r2, ip
 80007f6:	fa00 f00c 	lsl.w	r0, r0, ip
 80007fa:	bfaa      	itet	ge
 80007fc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000800:	4252      	neglt	r2, r2
 8000802:	4318      	orrge	r0, r3
 8000804:	bfbc      	itt	lt
 8000806:	40d0      	lsrlt	r0, r2
 8000808:	4318      	orrlt	r0, r3
 800080a:	4770      	bx	lr
 800080c:	f092 0f00 	teq	r2, #0
 8000810:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000814:	bf06      	itte	eq
 8000816:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800081a:	3201      	addeq	r2, #1
 800081c:	3b01      	subne	r3, #1
 800081e:	e7b5      	b.n	800078c <__addsf3+0x58>
 8000820:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000824:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000828:	bf18      	it	ne
 800082a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800082e:	d021      	beq.n	8000874 <__addsf3+0x140>
 8000830:	ea92 0f03 	teq	r2, r3
 8000834:	d004      	beq.n	8000840 <__addsf3+0x10c>
 8000836:	f092 0f00 	teq	r2, #0
 800083a:	bf08      	it	eq
 800083c:	4608      	moveq	r0, r1
 800083e:	4770      	bx	lr
 8000840:	ea90 0f01 	teq	r0, r1
 8000844:	bf1c      	itt	ne
 8000846:	2000      	movne	r0, #0
 8000848:	4770      	bxne	lr
 800084a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800084e:	d104      	bne.n	800085a <__addsf3+0x126>
 8000850:	0040      	lsls	r0, r0, #1
 8000852:	bf28      	it	cs
 8000854:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000858:	4770      	bx	lr
 800085a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800085e:	bf3c      	itt	cc
 8000860:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000864:	4770      	bxcc	lr
 8000866:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800086a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800086e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000872:	4770      	bx	lr
 8000874:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000878:	bf16      	itet	ne
 800087a:	4608      	movne	r0, r1
 800087c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000880:	4601      	movne	r1, r0
 8000882:	0242      	lsls	r2, r0, #9
 8000884:	bf06      	itte	eq
 8000886:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800088a:	ea90 0f01 	teqeq	r0, r1
 800088e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000892:	4770      	bx	lr

08000894 <__aeabi_ui2f>:
 8000894:	f04f 0300 	mov.w	r3, #0
 8000898:	e004      	b.n	80008a4 <__aeabi_i2f+0x8>
 800089a:	bf00      	nop

0800089c <__aeabi_i2f>:
 800089c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80008a0:	bf48      	it	mi
 80008a2:	4240      	negmi	r0, r0
 80008a4:	ea5f 0c00 	movs.w	ip, r0
 80008a8:	bf08      	it	eq
 80008aa:	4770      	bxeq	lr
 80008ac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80008b0:	4601      	mov	r1, r0
 80008b2:	f04f 0000 	mov.w	r0, #0
 80008b6:	e01c      	b.n	80008f2 <__aeabi_l2f+0x2a>

080008b8 <__aeabi_ul2f>:
 80008b8:	ea50 0201 	orrs.w	r2, r0, r1
 80008bc:	bf08      	it	eq
 80008be:	4770      	bxeq	lr
 80008c0:	f04f 0300 	mov.w	r3, #0
 80008c4:	e00a      	b.n	80008dc <__aeabi_l2f+0x14>
 80008c6:	bf00      	nop

080008c8 <__aeabi_l2f>:
 80008c8:	ea50 0201 	orrs.w	r2, r0, r1
 80008cc:	bf08      	it	eq
 80008ce:	4770      	bxeq	lr
 80008d0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80008d4:	d502      	bpl.n	80008dc <__aeabi_l2f+0x14>
 80008d6:	4240      	negs	r0, r0
 80008d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008dc:	ea5f 0c01 	movs.w	ip, r1
 80008e0:	bf02      	ittt	eq
 80008e2:	4684      	moveq	ip, r0
 80008e4:	4601      	moveq	r1, r0
 80008e6:	2000      	moveq	r0, #0
 80008e8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80008ec:	bf08      	it	eq
 80008ee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80008f2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80008f6:	fabc f28c 	clz	r2, ip
 80008fa:	3a08      	subs	r2, #8
 80008fc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000900:	db10      	blt.n	8000924 <__aeabi_l2f+0x5c>
 8000902:	fa01 fc02 	lsl.w	ip, r1, r2
 8000906:	4463      	add	r3, ip
 8000908:	fa00 fc02 	lsl.w	ip, r0, r2
 800090c:	f1c2 0220 	rsb	r2, r2, #32
 8000910:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000914:	fa20 f202 	lsr.w	r2, r0, r2
 8000918:	eb43 0002 	adc.w	r0, r3, r2
 800091c:	bf08      	it	eq
 800091e:	f020 0001 	biceq.w	r0, r0, #1
 8000922:	4770      	bx	lr
 8000924:	f102 0220 	add.w	r2, r2, #32
 8000928:	fa01 fc02 	lsl.w	ip, r1, r2
 800092c:	f1c2 0220 	rsb	r2, r2, #32
 8000930:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000934:	fa21 f202 	lsr.w	r2, r1, r2
 8000938:	eb43 0002 	adc.w	r0, r3, r2
 800093c:	bf08      	it	eq
 800093e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000942:	4770      	bx	lr

08000944 <__aeabi_uldivmod>:
 8000944:	b953      	cbnz	r3, 800095c <__aeabi_uldivmod+0x18>
 8000946:	b94a      	cbnz	r2, 800095c <__aeabi_uldivmod+0x18>
 8000948:	2900      	cmp	r1, #0
 800094a:	bf08      	it	eq
 800094c:	2800      	cmpeq	r0, #0
 800094e:	bf1c      	itt	ne
 8000950:	f04f 31ff 	movne.w	r1, #4294967295
 8000954:	f04f 30ff 	movne.w	r0, #4294967295
 8000958:	f000 b96a 	b.w	8000c30 <__aeabi_idiv0>
 800095c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000960:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000964:	f000 f806 	bl	8000974 <__udivmoddi4>
 8000968:	f8dd e004 	ldr.w	lr, [sp, #4]
 800096c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000970:	b004      	add	sp, #16
 8000972:	4770      	bx	lr

08000974 <__udivmoddi4>:
 8000974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000978:	9d08      	ldr	r5, [sp, #32]
 800097a:	460c      	mov	r4, r1
 800097c:	2b00      	cmp	r3, #0
 800097e:	d14e      	bne.n	8000a1e <__udivmoddi4+0xaa>
 8000980:	4694      	mov	ip, r2
 8000982:	458c      	cmp	ip, r1
 8000984:	4686      	mov	lr, r0
 8000986:	fab2 f282 	clz	r2, r2
 800098a:	d962      	bls.n	8000a52 <__udivmoddi4+0xde>
 800098c:	b14a      	cbz	r2, 80009a2 <__udivmoddi4+0x2e>
 800098e:	f1c2 0320 	rsb	r3, r2, #32
 8000992:	4091      	lsls	r1, r2
 8000994:	fa20 f303 	lsr.w	r3, r0, r3
 8000998:	fa0c fc02 	lsl.w	ip, ip, r2
 800099c:	4319      	orrs	r1, r3
 800099e:	fa00 fe02 	lsl.w	lr, r0, r2
 80009a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009a6:	fa1f f68c 	uxth.w	r6, ip
 80009aa:	fbb1 f4f7 	udiv	r4, r1, r7
 80009ae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009b2:	fb07 1114 	mls	r1, r7, r4, r1
 80009b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009ba:	fb04 f106 	mul.w	r1, r4, r6
 80009be:	4299      	cmp	r1, r3
 80009c0:	d90a      	bls.n	80009d8 <__udivmoddi4+0x64>
 80009c2:	eb1c 0303 	adds.w	r3, ip, r3
 80009c6:	f104 30ff 	add.w	r0, r4, #4294967295
 80009ca:	f080 8112 	bcs.w	8000bf2 <__udivmoddi4+0x27e>
 80009ce:	4299      	cmp	r1, r3
 80009d0:	f240 810f 	bls.w	8000bf2 <__udivmoddi4+0x27e>
 80009d4:	3c02      	subs	r4, #2
 80009d6:	4463      	add	r3, ip
 80009d8:	1a59      	subs	r1, r3, r1
 80009da:	fa1f f38e 	uxth.w	r3, lr
 80009de:	fbb1 f0f7 	udiv	r0, r1, r7
 80009e2:	fb07 1110 	mls	r1, r7, r0, r1
 80009e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009ea:	fb00 f606 	mul.w	r6, r0, r6
 80009ee:	429e      	cmp	r6, r3
 80009f0:	d90a      	bls.n	8000a08 <__udivmoddi4+0x94>
 80009f2:	eb1c 0303 	adds.w	r3, ip, r3
 80009f6:	f100 31ff 	add.w	r1, r0, #4294967295
 80009fa:	f080 80fc 	bcs.w	8000bf6 <__udivmoddi4+0x282>
 80009fe:	429e      	cmp	r6, r3
 8000a00:	f240 80f9 	bls.w	8000bf6 <__udivmoddi4+0x282>
 8000a04:	4463      	add	r3, ip
 8000a06:	3802      	subs	r0, #2
 8000a08:	1b9b      	subs	r3, r3, r6
 8000a0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a0e:	2100      	movs	r1, #0
 8000a10:	b11d      	cbz	r5, 8000a1a <__udivmoddi4+0xa6>
 8000a12:	40d3      	lsrs	r3, r2
 8000a14:	2200      	movs	r2, #0
 8000a16:	e9c5 3200 	strd	r3, r2, [r5]
 8000a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a1e:	428b      	cmp	r3, r1
 8000a20:	d905      	bls.n	8000a2e <__udivmoddi4+0xba>
 8000a22:	b10d      	cbz	r5, 8000a28 <__udivmoddi4+0xb4>
 8000a24:	e9c5 0100 	strd	r0, r1, [r5]
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e7f5      	b.n	8000a1a <__udivmoddi4+0xa6>
 8000a2e:	fab3 f183 	clz	r1, r3
 8000a32:	2900      	cmp	r1, #0
 8000a34:	d146      	bne.n	8000ac4 <__udivmoddi4+0x150>
 8000a36:	42a3      	cmp	r3, r4
 8000a38:	d302      	bcc.n	8000a40 <__udivmoddi4+0xcc>
 8000a3a:	4290      	cmp	r0, r2
 8000a3c:	f0c0 80f0 	bcc.w	8000c20 <__udivmoddi4+0x2ac>
 8000a40:	1a86      	subs	r6, r0, r2
 8000a42:	eb64 0303 	sbc.w	r3, r4, r3
 8000a46:	2001      	movs	r0, #1
 8000a48:	2d00      	cmp	r5, #0
 8000a4a:	d0e6      	beq.n	8000a1a <__udivmoddi4+0xa6>
 8000a4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000a50:	e7e3      	b.n	8000a1a <__udivmoddi4+0xa6>
 8000a52:	2a00      	cmp	r2, #0
 8000a54:	f040 8090 	bne.w	8000b78 <__udivmoddi4+0x204>
 8000a58:	eba1 040c 	sub.w	r4, r1, ip
 8000a5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a60:	fa1f f78c 	uxth.w	r7, ip
 8000a64:	2101      	movs	r1, #1
 8000a66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000a72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a76:	fb07 f006 	mul.w	r0, r7, r6
 8000a7a:	4298      	cmp	r0, r3
 8000a7c:	d908      	bls.n	8000a90 <__udivmoddi4+0x11c>
 8000a7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a86:	d202      	bcs.n	8000a8e <__udivmoddi4+0x11a>
 8000a88:	4298      	cmp	r0, r3
 8000a8a:	f200 80cd 	bhi.w	8000c28 <__udivmoddi4+0x2b4>
 8000a8e:	4626      	mov	r6, r4
 8000a90:	1a1c      	subs	r4, r3, r0
 8000a92:	fa1f f38e 	uxth.w	r3, lr
 8000a96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000a9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000aa2:	fb00 f707 	mul.w	r7, r0, r7
 8000aa6:	429f      	cmp	r7, r3
 8000aa8:	d908      	bls.n	8000abc <__udivmoddi4+0x148>
 8000aaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000aae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ab2:	d202      	bcs.n	8000aba <__udivmoddi4+0x146>
 8000ab4:	429f      	cmp	r7, r3
 8000ab6:	f200 80b0 	bhi.w	8000c1a <__udivmoddi4+0x2a6>
 8000aba:	4620      	mov	r0, r4
 8000abc:	1bdb      	subs	r3, r3, r7
 8000abe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ac2:	e7a5      	b.n	8000a10 <__udivmoddi4+0x9c>
 8000ac4:	f1c1 0620 	rsb	r6, r1, #32
 8000ac8:	408b      	lsls	r3, r1
 8000aca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ace:	431f      	orrs	r7, r3
 8000ad0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ad4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ad8:	ea43 030c 	orr.w	r3, r3, ip
 8000adc:	40f4      	lsrs	r4, r6
 8000ade:	fa00 f801 	lsl.w	r8, r0, r1
 8000ae2:	0c38      	lsrs	r0, r7, #16
 8000ae4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ae8:	fbb4 fef0 	udiv	lr, r4, r0
 8000aec:	fa1f fc87 	uxth.w	ip, r7
 8000af0:	fb00 441e 	mls	r4, r0, lr, r4
 8000af4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000af8:	fb0e f90c 	mul.w	r9, lr, ip
 8000afc:	45a1      	cmp	r9, r4
 8000afe:	fa02 f201 	lsl.w	r2, r2, r1
 8000b02:	d90a      	bls.n	8000b1a <__udivmoddi4+0x1a6>
 8000b04:	193c      	adds	r4, r7, r4
 8000b06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b0a:	f080 8084 	bcs.w	8000c16 <__udivmoddi4+0x2a2>
 8000b0e:	45a1      	cmp	r9, r4
 8000b10:	f240 8081 	bls.w	8000c16 <__udivmoddi4+0x2a2>
 8000b14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b18:	443c      	add	r4, r7
 8000b1a:	eba4 0409 	sub.w	r4, r4, r9
 8000b1e:	fa1f f983 	uxth.w	r9, r3
 8000b22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b26:	fb00 4413 	mls	r4, r0, r3, r4
 8000b2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b32:	45a4      	cmp	ip, r4
 8000b34:	d907      	bls.n	8000b46 <__udivmoddi4+0x1d2>
 8000b36:	193c      	adds	r4, r7, r4
 8000b38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000b3c:	d267      	bcs.n	8000c0e <__udivmoddi4+0x29a>
 8000b3e:	45a4      	cmp	ip, r4
 8000b40:	d965      	bls.n	8000c0e <__udivmoddi4+0x29a>
 8000b42:	3b02      	subs	r3, #2
 8000b44:	443c      	add	r4, r7
 8000b46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000b4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000b4e:	eba4 040c 	sub.w	r4, r4, ip
 8000b52:	429c      	cmp	r4, r3
 8000b54:	46ce      	mov	lr, r9
 8000b56:	469c      	mov	ip, r3
 8000b58:	d351      	bcc.n	8000bfe <__udivmoddi4+0x28a>
 8000b5a:	d04e      	beq.n	8000bfa <__udivmoddi4+0x286>
 8000b5c:	b155      	cbz	r5, 8000b74 <__udivmoddi4+0x200>
 8000b5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000b62:	eb64 040c 	sbc.w	r4, r4, ip
 8000b66:	fa04 f606 	lsl.w	r6, r4, r6
 8000b6a:	40cb      	lsrs	r3, r1
 8000b6c:	431e      	orrs	r6, r3
 8000b6e:	40cc      	lsrs	r4, r1
 8000b70:	e9c5 6400 	strd	r6, r4, [r5]
 8000b74:	2100      	movs	r1, #0
 8000b76:	e750      	b.n	8000a1a <__udivmoddi4+0xa6>
 8000b78:	f1c2 0320 	rsb	r3, r2, #32
 8000b7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000b80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b84:	fa24 f303 	lsr.w	r3, r4, r3
 8000b88:	4094      	lsls	r4, r2
 8000b8a:	430c      	orrs	r4, r1
 8000b8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b94:	fa1f f78c 	uxth.w	r7, ip
 8000b98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000ba0:	0c23      	lsrs	r3, r4, #16
 8000ba2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba6:	fb00 f107 	mul.w	r1, r0, r7
 8000baa:	4299      	cmp	r1, r3
 8000bac:	d908      	bls.n	8000bc0 <__udivmoddi4+0x24c>
 8000bae:	eb1c 0303 	adds.w	r3, ip, r3
 8000bb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000bb6:	d22c      	bcs.n	8000c12 <__udivmoddi4+0x29e>
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	d92a      	bls.n	8000c12 <__udivmoddi4+0x29e>
 8000bbc:	3802      	subs	r0, #2
 8000bbe:	4463      	add	r3, ip
 8000bc0:	1a5b      	subs	r3, r3, r1
 8000bc2:	b2a4      	uxth	r4, r4
 8000bc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000bc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000bcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bd0:	fb01 f307 	mul.w	r3, r1, r7
 8000bd4:	42a3      	cmp	r3, r4
 8000bd6:	d908      	bls.n	8000bea <__udivmoddi4+0x276>
 8000bd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000be0:	d213      	bcs.n	8000c0a <__udivmoddi4+0x296>
 8000be2:	42a3      	cmp	r3, r4
 8000be4:	d911      	bls.n	8000c0a <__udivmoddi4+0x296>
 8000be6:	3902      	subs	r1, #2
 8000be8:	4464      	add	r4, ip
 8000bea:	1ae4      	subs	r4, r4, r3
 8000bec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000bf0:	e739      	b.n	8000a66 <__udivmoddi4+0xf2>
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	e6f0      	b.n	80009d8 <__udivmoddi4+0x64>
 8000bf6:	4608      	mov	r0, r1
 8000bf8:	e706      	b.n	8000a08 <__udivmoddi4+0x94>
 8000bfa:	45c8      	cmp	r8, r9
 8000bfc:	d2ae      	bcs.n	8000b5c <__udivmoddi4+0x1e8>
 8000bfe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c02:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c06:	3801      	subs	r0, #1
 8000c08:	e7a8      	b.n	8000b5c <__udivmoddi4+0x1e8>
 8000c0a:	4631      	mov	r1, r6
 8000c0c:	e7ed      	b.n	8000bea <__udivmoddi4+0x276>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	e799      	b.n	8000b46 <__udivmoddi4+0x1d2>
 8000c12:	4630      	mov	r0, r6
 8000c14:	e7d4      	b.n	8000bc0 <__udivmoddi4+0x24c>
 8000c16:	46d6      	mov	lr, sl
 8000c18:	e77f      	b.n	8000b1a <__udivmoddi4+0x1a6>
 8000c1a:	4463      	add	r3, ip
 8000c1c:	3802      	subs	r0, #2
 8000c1e:	e74d      	b.n	8000abc <__udivmoddi4+0x148>
 8000c20:	4606      	mov	r6, r0
 8000c22:	4623      	mov	r3, r4
 8000c24:	4608      	mov	r0, r1
 8000c26:	e70f      	b.n	8000a48 <__udivmoddi4+0xd4>
 8000c28:	3e02      	subs	r6, #2
 8000c2a:	4463      	add	r3, ip
 8000c2c:	e730      	b.n	8000a90 <__udivmoddi4+0x11c>
 8000c2e:	bf00      	nop

08000c30 <__aeabi_idiv0>:
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop

08000c34 <_ZN8rxData_tC1Ev>:
    uint8_t jointEnable;
    uint16_t outputs;
    uint8_t spare0;
  };

  rxData_t() {
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
      header = 0;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
      outputs = 0;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2200      	movs	r2, #0
 8000c46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      jointEnable = 0;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2200      	movs	r2, #0
 8000c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      for (uint8_t i=0;i<Config::joints;i++) {
 8000c58:	2300      	movs	r3, #0
 8000c5a:	73fb      	strb	r3, [r7, #15]
 8000c5c:	e008      	b.n	8000c70 <_ZN8rxData_tC1Ev+0x3c>
         jointFreqCmd[i] = 0;
 8000c5e:	7bfb      	ldrb	r3, [r7, #15]
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	4413      	add	r3, r2
 8000c66:	2200      	movs	r2, #0
 8000c68:	605a      	str	r2, [r3, #4]
      for (uint8_t i=0;i<Config::joints;i++) {
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	73fb      	strb	r3, [r7, #15]
 8000c70:	7bfb      	ldrb	r3, [r7, #15]
 8000c72:	2b07      	cmp	r3, #7
 8000c74:	d9f3      	bls.n	8000c5e <_ZN8rxData_tC1Ev+0x2a>
      }
      for (uint8_t i=0;i<Config::variables;i++) {
 8000c76:	2300      	movs	r3, #0
 8000c78:	73bb      	strb	r3, [r7, #14]
 8000c7a:	e00b      	b.n	8000c94 <_ZN8rxData_tC1Ev+0x60>
         setPoint[i] = 0.0;
 8000c7c:	7bbb      	ldrb	r3, [r7, #14]
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	3308      	adds	r3, #8
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	4413      	add	r3, r2
 8000c86:	3304      	adds	r3, #4
 8000c88:	f04f 0200 	mov.w	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
      for (uint8_t i=0;i<Config::variables;i++) {
 8000c8e:	7bbb      	ldrb	r3, [r7, #14]
 8000c90:	3301      	adds	r3, #1
 8000c92:	73bb      	strb	r3, [r7, #14]
 8000c94:	7bbb      	ldrb	r3, [r7, #14]
 8000c96:	2b05      	cmp	r3, #5
 8000c98:	d9f0      	bls.n	8000c7c <_ZN8rxData_tC1Ev+0x48>
     }
  }
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3714      	adds	r7, #20
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d005      	beq.n	8000cc4 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	2203      	movs	r2, #3
 8000cc2:	4798      	blx	r3
    }
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 8000cce:	b480      	push	{r7}
 8000cd0:	b083      	sub	sp, #12
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	bf0c      	ite	eq
 8000cde:	2301      	moveq	r3, #1
 8000ce0:	2300      	movne	r3, #0
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <_ZNK6Module17getUsesModulePostEv>:
		virtual void update();		// the standard interface for update of the module - use for stepgen, PWM etc
		virtual void updatePost();
		virtual void slowUpdate();	// the standard interface for the slow update - use for PID controller etc
        virtual void configure();   // the standard interface for one off configuration

        virtual bool getUsesModulePost() const { return usesModulePost; }
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	7d1b      	ldrb	r3, [r3, #20]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <_ZNK11ArduinoJson8V730HB226detail9RamStringixEj>:

  size_t size() const {
    return size_;
  }

  char operator[](size_t i) const {
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(str_ != 0);
    ARDUINOJSON_ASSERT(i <= size());
    return str_[i];
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	4413      	add	r3, r2
 8000d1a:	781b      	ldrb	r3, [r3, #0]
  }
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <_ZN14DMA_RxBuffer_tC1Ev>:
} __attribute__((aligned(32))) txData_t;


typedef struct {
    volatile rxData_t buffer[2]; // DMA RX buffers
} DMA_RxBuffer_t;
 8000d28:	b5b0      	push	{r4, r5, r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2401      	movs	r4, #1
 8000d34:	461d      	mov	r5, r3
 8000d36:	e004      	b.n	8000d42 <_ZN14DMA_RxBuffer_tC1Ev+0x1a>
 8000d38:	4628      	mov	r0, r5
 8000d3a:	f7ff ff7b 	bl	8000c34 <_ZN8rxData_tC1Ev>
 8000d3e:	3c01      	subs	r4, #1
 8000d40:	3540      	adds	r5, #64	@ 0x40
 8000d42:	2c00      	cmp	r4, #0
 8000d44:	daf8      	bge.n	8000d38 <_ZN14DMA_RxBuffer_tC1Ev+0x10>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bdb0      	pop	{r4, r5, r7, pc}

08000d50 <_ZNSt8functionIFvbEED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff ffa4 	bl	8000ca8 <_ZNSt14_Function_baseD1Ev>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <_ZN14CommsInterfaceD1Ev>:

#include <functional>

#include "../../modules/module.h"

class CommsInterface : public Module {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	4a08      	ldr	r2, [pc, #32]	@ (8000d98 <_ZN14CommsInterfaceD1Ev+0x2c>)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	3318      	adds	r3, #24
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff ffe6 	bl	8000d50 <_ZNSt8functionIFvbEED1Ev>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f00f fad0 	bl	801032c <_ZN6ModuleD1Ev>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	08026578 	.word	0x08026578

08000d9c <_ZN14CommsInterfaceD0Ev>:
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f7ff ffe1 	bl	8000d6c <_ZN14CommsInterfaceD1Ev>
 8000daa:	2128      	movs	r1, #40	@ 0x28
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f023 f846 	bl	8023e3e <_ZdlPvj>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4618      	mov	r0, r3
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <_ZN8SPICommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef>:
#include "SPIComms.h"

__attribute__((section(".DmaSection"))) volatile DMA_RxBuffer_t rxDMABuffer;


SPIComms::SPIComms(volatile rxData_t* _ptrRxData, volatile txData_t* _ptrTxData, SPI_TypeDef* _spiType) :
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
 8000dc8:	603b      	str	r3, [r7, #0]
	ptrRxData(_ptrRxData),
	ptrTxData(_ptrTxData),
	spiType(_spiType)
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f001 f9ab 	bl	8002128 <_ZN14CommsInterfaceC1Ev>
 8000dd2:	4a12      	ldr	r2, [pc, #72]	@ (8000e1c <_ZN8SPICommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef+0x60>)
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	601a      	str	r2, [r3, #0]
	ptrRxData(_ptrRxData),
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	629a      	str	r2, [r3, #40]	@ 0x28
	ptrTxData(_ptrTxData),
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	62da      	str	r2, [r3, #44]	@ 0x2c
	spiType(_spiType)
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	683a      	ldr	r2, [r7, #0]
 8000de8:	635a      	str	r2, [r3, #52]	@ 0x34
{
    spiHandle.Instance = spiType;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	651a      	str	r2, [r3, #80]	@ 0x50
    ptrRxDMABuffer = &rxDMABuffer;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	4a0a      	ldr	r2, [pc, #40]	@ (8000e20 <_ZN8SPICommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef+0x64>)
 8000df6:	631a      	str	r2, [r3, #48]	@ 0x30

    irqNss = EXTI4_IRQn;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	220a      	movs	r2, #10
 8000dfc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    irqDMAtx = DMA1_Stream0_IRQn;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	220b      	movs	r2, #11
 8000e04:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    irqDMArx = DMA1_Stream1_IRQn;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
}
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4618      	mov	r0, r3
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	08026548 	.word	0x08026548
 8000e20:	30000000 	.word	0x30000000

08000e24 <_ZN8SPICommsD1Ev>:

SPIComms::~SPIComms() {
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	4a05      	ldr	r2, [pc, #20]	@ (8000e44 <_ZN8SPICommsD1Ev+0x20>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	601a      	str	r2, [r3, #0]

}
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff99 	bl	8000d6c <_ZN14CommsInterfaceD1Ev>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	08026548 	.word	0x08026548

08000e48 <_ZN8SPICommsD0Ev>:
SPIComms::~SPIComms() {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
}
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f7ff ffe7 	bl	8000e24 <_ZN8SPICommsD1Ev>
 8000e56:	f44f 7111 	mov.w	r1, #580	@ 0x244
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f022 ffef 	bl	8023e3e <_ZdlPvj>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4618      	mov	r0, r3
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <_ZN8SPIComms4initEv>:

void SPIComms::init() {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08a      	sub	sp, #40	@ 0x28
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]

    if(spiHandle.Instance == SPI1)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000e88:	4ab1      	ldr	r2, [pc, #708]	@ (8001150 <_ZN8SPIComms4initEv+0x2e4>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	f040 815c 	bne.w	8001148 <_ZN8SPIComms4initEv+0x2dc>
    {
    	// Interrupt pin is the NSS pin
        // Configure GPIO pin : PA_4

        __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e90:	4bb0      	ldr	r3, [pc, #704]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e96:	4aaf      	ldr	r2, [pc, #700]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000e98:	f043 0304 	orr.w	r3, r3, #4
 8000e9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ea0:	4bac      	ldr	r3, [pc, #688]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ea6:	f003 0304 	and.w	r3, r3, #4
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	693b      	ldr	r3, [r7, #16]

        GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000eae:	2310      	movs	r3, #16
 8000eb0:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eb2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000eb6:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	48a5      	ldr	r0, [pc, #660]	@ (8001158 <_ZN8SPIComms4initEv+0x2ec>)
 8000ec4:	f018 ffbc 	bl	8019e40 <HAL_GPIO_Init>

        printf("	Initialising SPI1 slave\n");
 8000ec8:	48a4      	ldr	r0, [pc, #656]	@ (800115c <_ZN8SPIComms4initEv+0x2f0>)
 8000eca:	f023 fe05 	bl	8024ad8 <puts>

        spiHandle.Init.Mode           			= SPI_MODE_SLAVE;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	655a      	str	r2, [r3, #84]	@ 0x54
        spiHandle.Init.Direction      			= SPI_DIRECTION_2LINES;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	659a      	str	r2, [r3, #88]	@ 0x58
        spiHandle.Init.DataSize       			= SPI_DATASIZE_8BIT;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2207      	movs	r2, #7
 8000ede:	65da      	str	r2, [r3, #92]	@ 0x5c
        spiHandle.Init.CLKPolarity    			= SPI_POLARITY_LOW;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	661a      	str	r2, [r3, #96]	@ 0x60
        spiHandle.Init.CLKPhase       			= SPI_PHASE_1EDGE;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	665a      	str	r2, [r3, #100]	@ 0x64
        spiHandle.Init.NSS            			= SPI_NSS_HARD_INPUT;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	669a      	str	r2, [r3, #104]	@ 0x68
        spiHandle.Init.FirstBit       			= SPI_FIRSTBIT_MSB;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	671a      	str	r2, [r3, #112]	@ 0x70
        spiHandle.Init.TIMode         			= SPI_TIMODE_DISABLE;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2200      	movs	r2, #0
 8000efc:	675a      	str	r2, [r3, #116]	@ 0x74
        spiHandle.Init.CRCCalculation 			= SPI_CRCCALCULATION_DISABLE;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	679a      	str	r2, [r3, #120]	@ 0x78
        spiHandle.Init.CRCPolynomial  			= 0x0;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2200      	movs	r2, #0
 8000f08:	67da      	str	r2, [r3, #124]	@ 0x7c
        spiHandle.Init.NSSPMode 				= SPI_NSS_PULSE_DISABLE;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        spiHandle.Init.NSSPolarity 				= SPI_NSS_POLARITY_LOW;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2200      	movs	r2, #0
 8000f16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        spiHandle.Init.FifoThreshold 			= SPI_FIFO_THRESHOLD_01DATA;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        spiHandle.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        spiHandle.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        spiHandle.Init.MasterSSIdleness 		= SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        spiHandle.Init.MasterInterDataIdleness 	= SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        spiHandle.Init.MasterReceiverAutoSusp 	= SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2200      	movs	r2, #0
 8000f46:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        spiHandle.Init.MasterKeepIOState 		= SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        spiHandle.Init.IOSwap 					= SPI_IO_SWAP_DISABLE;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2200      	movs	r2, #0
 8000f56:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8

        HAL_SPI_Init(&this->spiHandle);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	3350      	adds	r3, #80	@ 0x50
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f01e fad2 	bl	801f508 <HAL_SPI_Init>

    	// Peripheral clock enable
    	__HAL_RCC_SPI1_CLK_ENABLE();
 8000f64:	4b7b      	ldr	r3, [pc, #492]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f6a:	4a7a      	ldr	r2, [pc, #488]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f6c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f70:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000f74:	4b77      	ldr	r3, [pc, #476]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]

		printf("	Initialising GPIO for SPI\n");
 8000f82:	4877      	ldr	r0, [pc, #476]	@ (8001160 <_ZN8SPIComms4initEv+0x2f4>)
 8000f84:	f023 fda8 	bl	8024ad8 <puts>

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f88:	4b72      	ldr	r3, [pc, #456]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f8e:	4a71      	ldr	r2, [pc, #452]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f98:	4b6e      	ldr	r3, [pc, #440]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
	    PA4     ------> SPI1_NSS
	    PA5     ------> SPI1_SCK
	    PA6     ------> SPI1_MISO
	    PA7     ------> SPI1_MOSI
	    */
    	GPIO_InitStruct = {0};
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
 8000fb4:	611a      	str	r2, [r3, #16]
	    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000fb6:	23f0      	movs	r3, #240	@ 0xf0
 8000fb8:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fc6:	2305      	movs	r3, #5
 8000fc8:	627b      	str	r3, [r7, #36]	@ 0x24
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4861      	ldr	r0, [pc, #388]	@ (8001158 <_ZN8SPIComms4initEv+0x2ec>)
 8000fd2:	f018 ff35 	bl	8019e40 <HAL_GPIO_Init>

        printf("	Initialising DMA for SPI\n");
 8000fd6:	4863      	ldr	r0, [pc, #396]	@ (8001164 <_ZN8SPIComms4initEv+0x2f8>)
 8000fd8:	f023 fd7e 	bl	8024ad8 <puts>

        hdma_spi_tx.Instance 					= DMA1_Stream0;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a62      	ldr	r2, [pc, #392]	@ (8001168 <_ZN8SPIComms4initEv+0x2fc>)
 8000fe0:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
        hdma_spi_tx.Init.Request 				= DMA_REQUEST_SPI1_TX;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2226      	movs	r2, #38	@ 0x26
 8000fe8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
        hdma_spi_tx.Init.Direction 				= DMA_MEMORY_TO_PERIPH;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2240      	movs	r2, #64	@ 0x40
 8000ff0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
        hdma_spi_tx.Init.PeriphInc 				= DMA_PINC_DISABLE;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
        hdma_spi_tx.Init.MemInc 				= DMA_MINC_ENABLE;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001002:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
        hdma_spi_tx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
        hdma_spi_tx.Init.MemDataAlignment 		= DMA_MDATAALIGN_BYTE;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
        hdma_spi_tx.Init.Mode 					= DMA_CIRCULAR;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800101c:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
        hdma_spi_tx.Init.Priority 				= DMA_PRIORITY_LOW;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
        hdma_spi_tx.Init.FIFOMode 				= DMA_FIFOMODE_DISABLE;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc

        HAL_DMA_Init(&hdma_spi_tx);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	33d8      	adds	r3, #216	@ 0xd8
 8001034:	4618      	mov	r0, r3
 8001036:	f016 fbc3 	bl	80177c0 <HAL_DMA_Init>
        __HAL_LINKDMA(&spiHandle, hdmatx, hdma_spi_tx);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f103 02d8 	add.w	r2, r3, #216	@ 0xd8
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110

        hdma_spi_rx.Instance 					= DMA1_Stream1;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a45      	ldr	r2, [pc, #276]	@ (800116c <_ZN8SPIComms4initEv+0x300>)
 8001056:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
        hdma_spi_rx.Init.Request 				= DMA_REQUEST_SPI1_RX;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2225      	movs	r2, #37	@ 0x25
 800105e:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
        hdma_spi_rx.Init.Direction 				= DMA_PERIPH_TO_MEMORY;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2200      	movs	r2, #0
 8001066:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
        hdma_spi_rx.Init.PeriphInc 				= DMA_PINC_DISABLE;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
        hdma_spi_rx.Init.MemInc 				= DMA_MINC_ENABLE;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001078:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
        hdma_spi_rx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
        hdma_spi_rx.Init.MemDataAlignment 		= DMA_MDATAALIGN_BYTE;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
        hdma_spi_rx.Init.Mode 					= DMA_CIRCULAR;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001092:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
        hdma_spi_rx.Init.Priority 				= DMA_PRIORITY_LOW;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2200      	movs	r2, #0
 800109a:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
        hdma_spi_rx.Init.FIFOMode 				= DMA_FIFOMODE_DISABLE;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174

        HAL_DMA_Init(&hdma_spi_rx);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80010ac:	4618      	mov	r0, r3
 80010ae:	f016 fb87 	bl	80177c0 <HAL_DMA_Init>
        __HAL_LINKDMA(&spiHandle, hdmarx, hdma_spi_rx);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f503 72a8 	add.w	r2, r3, #336	@ 0x150
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188

        printf("	Initialising DMA for Memory to Memory transfer\n");
 80010ca:	4829      	ldr	r0, [pc, #164]	@ (8001170 <_ZN8SPIComms4initEv+0x304>)
 80010cc:	f023 fd04 	bl	8024ad8 <puts>

        hdma_memtomem.Instance 					= DMA1_Stream2;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4a28      	ldr	r2, [pc, #160]	@ (8001174 <_ZN8SPIComms4initEv+0x308>)
 80010d4:	f8c3 21c8 	str.w	r2, [r3, #456]	@ 0x1c8
        hdma_memtomem.Init.Request 				= DMA_REQUEST_MEM2MEM;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	f8c3 21cc 	str.w	r2, [r3, #460]	@ 0x1cc
        hdma_memtomem.Init.Direction 			= DMA_MEMORY_TO_MEMORY;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2280      	movs	r2, #128	@ 0x80
 80010e4:	f8c3 21d0 	str.w	r2, [r3, #464]	@ 0x1d0
        hdma_memtomem.Init.PeriphInc 			= DMA_PINC_ENABLE;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010ee:	f8c3 21d4 	str.w	r2, [r3, #468]	@ 0x1d4
        hdma_memtomem.Init.MemInc 				= DMA_MINC_ENABLE;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010f8:	f8c3 21d8 	str.w	r2, [r3, #472]	@ 0x1d8
        hdma_memtomem.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2200      	movs	r2, #0
 8001100:	f8c3 21dc 	str.w	r2, [r3, #476]	@ 0x1dc
        hdma_memtomem.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
        hdma_memtomem.Init.Mode 				= DMA_NORMAL;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2200      	movs	r2, #0
 8001110:	f8c3 21e4 	str.w	r2, [r3, #484]	@ 0x1e4
        hdma_memtomem.Init.Priority 			= DMA_PRIORITY_LOW;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	f8c3 21e8 	str.w	r2, [r3, #488]	@ 0x1e8
        hdma_memtomem.Init.FIFOMode 			= DMA_FIFOMODE_ENABLE;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2204      	movs	r2, #4
 8001120:	f8c3 21ec 	str.w	r2, [r3, #492]	@ 0x1ec
        hdma_memtomem.Init.FIFOThreshold 		= DMA_FIFO_THRESHOLD_FULL;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2203      	movs	r2, #3
 8001128:	f8c3 21f0 	str.w	r2, [r3, #496]	@ 0x1f0
        hdma_memtomem.Init.MemBurst 			= DMA_MBURST_SINGLE;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2200      	movs	r2, #0
 8001130:	f8c3 21f4 	str.w	r2, [r3, #500]	@ 0x1f4
        hdma_memtomem.Init.PeriphBurst 			= DMA_PBURST_SINGLE;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	f8c3 21f8 	str.w	r2, [r3, #504]	@ 0x1f8

        HAL_DMA_Init(&hdma_memtomem);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8001142:	4618      	mov	r0, r3
 8001144:	f016 fb3c 	bl	80177c0 <HAL_DMA_Init>
    }
}
 8001148:	bf00      	nop
 800114a:	3728      	adds	r7, #40	@ 0x28
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40013000 	.word	0x40013000
 8001154:	58024400 	.word	0x58024400
 8001158:	58020000 	.word	0x58020000
 800115c:	080257d0 	.word	0x080257d0
 8001160:	080257ec 	.word	0x080257ec
 8001164:	08025808 	.word	0x08025808
 8001168:	40020010 	.word	0x40020010
 800116c:	40020028 	.word	0x40020028
 8001170:	08025824 	.word	0x08025824
 8001174:	40020040 	.word	0x40020040

08001178 <_ZN8SPIComms5startEv>:

void SPIComms::start() {
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b08f      	sub	sp, #60	@ 0x3c
 800117c:	af02      	add	r7, sp, #8
 800117e:	6078      	str	r0, [r7, #4]
    // Register the NSS (slave select) interrupt
    NssInterrupt = new ModuleInterrupt<SPIComms>(
        irqNss,
        this,
        &SPIComms::handleNssInterrupt
    );
 8001180:	2010      	movs	r0, #16
 8001182:	f022 fe6d 	bl	8023e60 <_Znwj>
 8001186:	4603      	mov	r3, r0
 8001188:	461c      	mov	r4, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f9b3 1048 	ldrsh.w	r1, [r3, #72]	@ 0x48
 8001190:	4b6d      	ldr	r3, [pc, #436]	@ (8001348 <_ZN8SPIComms5startEv+0x1d0>)
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	4620      	mov	r0, r4
 80011a2:	f000 fec5 	bl	8001f30 <_ZN15ModuleInterruptI8SPICommsEC1E9IRQn_TypePS0_MS0_FvvE>
    NssInterrupt = new ModuleInterrupt<SPIComms>(
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	63dc      	str	r4, [r3, #60]	@ 0x3c
    HAL_NVIC_SetPriority(irqNss, Config::spiNssIrqPriority, 0);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 80011b0:	2200      	movs	r2, #0
 80011b2:	2106      	movs	r1, #6
 80011b4:	4618      	mov	r0, r3
 80011b6:	f016 fa52 	bl	801765e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(irqNss);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 80011c0:	4618      	mov	r0, r3
 80011c2:	f016 fa66 	bl	8017692 <HAL_NVIC_EnableIRQ>
    // Register the DMA Rx interrupt
    dmaRxInterrupt = new ModuleInterrupt<SPIComms>(
        irqDMArx,
        this,
        &SPIComms::handleRxInterrupt
    );
 80011c6:	2010      	movs	r0, #16
 80011c8:	f022 fe4a 	bl	8023e60 <_Znwj>
 80011cc:	4603      	mov	r3, r0
 80011ce:	461c      	mov	r4, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f9b3 104a 	ldrsh.w	r1, [r3, #74]	@ 0x4a
 80011d6:	4b5d      	ldr	r3, [pc, #372]	@ (800134c <_ZN8SPIComms5startEv+0x1d4>)
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	4620      	mov	r0, r4
 80011e8:	f000 fea2 	bl	8001f30 <_ZN15ModuleInterruptI8SPICommsEC1E9IRQn_TypePS0_MS0_FvvE>
    dmaRxInterrupt = new ModuleInterrupt<SPIComms>(
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	645c      	str	r4, [r3, #68]	@ 0x44
    HAL_NVIC_SetPriority(irqDMArx, Config::spiDmaRxIrqPriority, 0);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	@ 0x4a
 80011f6:	2200      	movs	r2, #0
 80011f8:	2105      	movs	r1, #5
 80011fa:	4618      	mov	r0, r3
 80011fc:	f016 fa2f 	bl	801765e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(irqDMArx);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	@ 0x4a
 8001206:	4618      	mov	r0, r3
 8001208:	f016 fa43 	bl	8017692 <HAL_NVIC_EnableIRQ>
    // Register the DMA Tx interrupt
    dmaTxInterrupt = new ModuleInterrupt<SPIComms>(
        irqDMAtx,
        this,
        &SPIComms::handleTxInterrupt
    );
 800120c:	2010      	movs	r0, #16
 800120e:	f022 fe27 	bl	8023e60 <_Znwj>
 8001212:	4603      	mov	r3, r0
 8001214:	461c      	mov	r4, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f9b3 104c 	ldrsh.w	r1, [r3, #76]	@ 0x4c
 800121c:	4b4c      	ldr	r3, [pc, #304]	@ (8001350 <_ZN8SPIComms5startEv+0x1d8>)
 800121e:	61bb      	str	r3, [r7, #24]
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	4620      	mov	r0, r4
 800122e:	f000 fe7f 	bl	8001f30 <_ZN15ModuleInterruptI8SPICommsEC1E9IRQn_TypePS0_MS0_FvvE>
    dmaTxInterrupt = new ModuleInterrupt<SPIComms>(
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	641c      	str	r4, [r3, #64]	@ 0x40
    HAL_NVIC_SetPriority(irqDMAtx, Config::spiDmaTxIrqPriority, 0); // TX needs higher priority than RX
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	@ 0x4c
 800123c:	2200      	movs	r2, #0
 800123e:	2104      	movs	r1, #4
 8001240:	4618      	mov	r0, r3
 8001242:	f016 fa0c 	bl	801765e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(irqDMAtx);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	@ 0x4c
 800124c:	4618      	mov	r0, r3
 800124e:	f016 fa20 	bl	8017692 <HAL_NVIC_EnableIRQ>

    // Initialize the data buffers
    std::fill(std::begin(ptrTxData->txBuffer), std::end(ptrTxData->txBuffer), 0);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001256:	4618      	mov	r0, r3
 8001258:	f000 fe96 	bl	8001f88 <_ZSt5beginIVhLj64EEPT_RAT0__S1_>
 800125c:	4604      	mov	r4, r0
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001262:	4618      	mov	r0, r3
 8001264:	f000 fe9b 	bl	8001f9e <_ZSt3endIVhLj64EEPT_RAT0__S1_>
 8001268:	4601      	mov	r1, r0
 800126a:	2300      	movs	r3, #0
 800126c:	623b      	str	r3, [r7, #32]
 800126e:	f107 0320 	add.w	r3, r7, #32
 8001272:	461a      	mov	r2, r3
 8001274:	4620      	mov	r0, r4
 8001276:	f000 fe9e 	bl	8001fb6 <_ZSt4fillIPVhiEvT_S2_RKT0_>
    std::fill(std::begin(ptrRxData->rxBuffer), std::end(ptrRxData->rxBuffer), 0);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800127e:	4618      	mov	r0, r3
 8001280:	f000 fe82 	bl	8001f88 <_ZSt5beginIVhLj64EEPT_RAT0__S1_>
 8001284:	4604      	mov	r4, r0
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800128a:	4618      	mov	r0, r3
 800128c:	f000 fe87 	bl	8001f9e <_ZSt3endIVhLj64EEPT_RAT0__S1_>
 8001290:	4601      	mov	r1, r0
 8001292:	2300      	movs	r3, #0
 8001294:	627b      	str	r3, [r7, #36]	@ 0x24
 8001296:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800129a:	461a      	mov	r2, r3
 800129c:	4620      	mov	r0, r4
 800129e:	f000 fe8a 	bl	8001fb6 <_ZSt4fillIPVhiEvT_S2_RKT0_>
    std::fill(std::begin(ptrRxDMABuffer->buffer[0].rxBuffer), std::end(ptrRxDMABuffer->buffer[0].rxBuffer), 0);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 fe6e 	bl	8001f88 <_ZSt5beginIVhLj64EEPT_RAT0__S1_>
 80012ac:	4604      	mov	r4, r0
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 fe73 	bl	8001f9e <_ZSt3endIVhLj64EEPT_RAT0__S1_>
 80012b8:	4601      	mov	r1, r0
 80012ba:	2300      	movs	r3, #0
 80012bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80012be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012c2:	461a      	mov	r2, r3
 80012c4:	4620      	mov	r0, r4
 80012c6:	f000 fe76 	bl	8001fb6 <_ZSt4fillIPVhiEvT_S2_RKT0_>
    std::fill(std::begin(ptrRxDMABuffer->buffer[1].rxBuffer), std::end(ptrRxDMABuffer->buffer[1].rxBuffer), 0);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	3340      	adds	r3, #64	@ 0x40
 80012d0:	4618      	mov	r0, r3
 80012d2:	f000 fe59 	bl	8001f88 <_ZSt5beginIVhLj64EEPT_RAT0__S1_>
 80012d6:	4604      	mov	r4, r0
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012dc:	3340      	adds	r3, #64	@ 0x40
 80012de:	4618      	mov	r0, r3
 80012e0:	f000 fe5d 	bl	8001f9e <_ZSt3endIVhLj64EEPT_RAT0__S1_>
 80012e4:	4601      	mov	r1, r0
 80012e6:	2300      	movs	r3, #0
 80012e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012ee:	461a      	mov	r2, r3
 80012f0:	4620      	mov	r0, r4
 80012f2:	f000 fe60 	bl	8001fb6 <_ZSt4fillIPVhiEvT_S2_RKT0_>

    ptrTxData->header = Config::pruData;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012fa:	4a16      	ldr	r2, [pc, #88]	@ (8001354 <_ZN8SPIComms5startEv+0x1dc>)
 80012fc:	601a      	str	r2, [r3, #0]

    // Start the multi-buffer DMA SPI communication
    dmaStatus = startMultiBufferDMASPI(
        (uint8_t*)ptrTxData->txBuffer,
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001302:	4619      	mov	r1, r3
        (uint8_t*)ptrTxData->txBuffer,
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001308:	4618      	mov	r0, r3
        (uint8_t*)ptrRxDMABuffer->buffer[0].rxBuffer,
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	461c      	mov	r4, r3
        (uint8_t*)ptrRxDMABuffer->buffer[1].rxBuffer,
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001314:	3340      	adds	r3, #64	@ 0x40
    dmaStatus = startMultiBufferDMASPI(
 8001316:	2240      	movs	r2, #64	@ 0x40
 8001318:	9201      	str	r2, [sp, #4]
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	4623      	mov	r3, r4
 800131e:	4602      	mov	r2, r0
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f000 f81b 	bl	800135c <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t>
 8001326:	4603      	mov	r3, r0
 8001328:	461a      	mov	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f883 2240 	strb.w	r2, [r3, #576]	@ 0x240
        Config::dataBuffSize
    );

    // Check for DMA initialization errors
    if (dmaStatus != HAL_OK) {
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f893 3240 	ldrb.w	r3, [r3, #576]	@ 0x240
 8001336:	2b00      	cmp	r3, #0
 8001338:	d002      	beq.n	8001340 <_ZN8SPIComms5startEv+0x1c8>
        printf("DMA SPI error\n");
 800133a:	4807      	ldr	r0, [pc, #28]	@ (8001358 <_ZN8SPIComms5startEv+0x1e0>)
 800133c:	f023 fbcc 	bl	8024ad8 <puts>
    }
}
 8001340:	bf00      	nop
 8001342:	3734      	adds	r7, #52	@ 0x34
 8001344:	46bd      	mov	sp, r7
 8001346:	bd90      	pop	{r4, r7, pc}
 8001348:	08001d7f 	.word	0x08001d7f
 800134c:	08001dd5 	.word	0x08001dd5
 8001350:	08001dad 	.word	0x08001dad
 8001354:	64617461 	.word	0x64617461
 8001358:	08025854 	.word	0x08025854

0800135c <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t>:

HAL_StatusTypeDef SPIComms::startMultiBufferDMASPI(uint8_t *pTxBuffer0, uint8_t *pTxBuffer1,
                                                   uint8_t *pRxBuffer0, uint8_t *pRxBuffer1,
                                                   uint16_t Size)
{
 800135c:	b590      	push	{r4, r7, lr}
 800135e:	b087      	sub	sp, #28
 8001360:	af02      	add	r7, sp, #8
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
 8001368:	603b      	str	r3, [r7, #0]
    /* Check Direction parameter */
    assert_param(IS_SPI_DIRECTION_2LINES(spiHandle.Init.Direction));

    if (spiHandle.State != HAL_SPI_STATE_READY)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	f893 30d1 	ldrb.w	r3, [r3, #209]	@ 0xd1
 8001370:	b2db      	uxtb	r3, r3
 8001372:	2b01      	cmp	r3, #1
 8001374:	bf14      	ite	ne
 8001376:	2301      	movne	r3, #1
 8001378:	2300      	moveq	r3, #0
 800137a:	b2db      	uxtb	r3, r3
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x28>
    {
        return HAL_BUSY;
 8001380:	2302      	movs	r3, #2
 8001382:	e13e      	b.n	8001602 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    if ((pTxBuffer0 == NULL) || (pRxBuffer0 == NULL) || (Size == 0UL))
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d005      	beq.n	8001396 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x3a>
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d002      	beq.n	8001396 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x3a>
 8001390:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x3e>
    {
        return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e133      	b.n	8001602 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    /* If secondary Tx or Rx buffer is not provided, use the primary buffer */
    if (pTxBuffer1 == NULL)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d101      	bne.n	80013a4 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x48>
    {
        pTxBuffer1 = pTxBuffer0;
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	607b      	str	r3, [r7, #4]
    }

    if (pRxBuffer1 == NULL)
 80013a4:	6a3b      	ldr	r3, [r7, #32]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d101      	bne.n	80013ae <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x52>
    {
        pRxBuffer1 = pRxBuffer0;
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	623b      	str	r3, [r7, #32]
    }

    /* Lock the process */
    __HAL_LOCK(&spiHandle);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d101      	bne.n	80013bc <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x60>
 80013b8:	2302      	movs	r3, #2
 80013ba:	e122      	b.n	8001602 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2201      	movs	r2, #1
 80013c0:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0

    /* Set the transaction information */
    spiHandle.State       = HAL_SPI_STATE_BUSY_TX_RX;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2205      	movs	r2, #5
 80013c8:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
    spiHandle.ErrorCode   = HAL_SPI_ERROR_NONE;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2200      	movs	r2, #0
 80013d0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    spiHandle.TxXferSize  = Size;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80013d8:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
    spiHandle.TxXferCount = Size;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80013e0:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
    spiHandle.RxXferSize  = Size;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80013e8:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8
    spiHandle.RxXferCount = Size;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80013f0:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba

    /* Init unused fields in handle to zero */
    spiHandle.RxISR       = NULL;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2200      	movs	r2, #0
 80013f8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
    spiHandle.TxISR       = NULL;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2200      	movs	r2, #0
 8001400:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

    /* Set Full-Duplex mode */
    SPI_2LINES(&spiHandle);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001408:	68da      	ldr	r2, [r3, #12]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800140e:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8001412:	60da      	str	r2, [r3, #12]

    /* Reset the Tx/Rx DMA bits */
    CLEAR_BIT(spiHandle.Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001418:	689a      	ldr	r2, [r3, #8]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800141e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8001422:	609a      	str	r2, [r3, #8]

    /* Adjust XferCount according to DMA alignment / Data size */
    if (spiHandle.Init.DataSize <= SPI_DATASIZE_8BIT)
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001428:	2b07      	cmp	r3, #7
 800142a:	d820      	bhi.n	800146e <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x112>
    {
        if (hdma_spi_tx.Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001432:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001436:	d109      	bne.n	800144c <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0xf0>
        {
            spiHandle.TxXferCount = (spiHandle.TxXferCount + 1UL) >> 1UL;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 800143e:	b29b      	uxth	r3, r3
 8001440:	3301      	adds	r3, #1
 8001442:	085b      	lsrs	r3, r3, #1
 8001444:	b29a      	uxth	r2, r3
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
        }
        if (hdma_spi_rx.Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8001452:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001456:	d12e      	bne.n	80014b6 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
        {
            spiHandle.RxXferCount = (spiHandle.RxXferCount + 1UL) >> 1UL;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 800145e:	b29b      	uxth	r3, r3
 8001460:	3301      	adds	r3, #1
 8001462:	085b      	lsrs	r3, r3, #1
 8001464:	b29a      	uxth	r2, r3
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
 800146c:	e023      	b.n	80014b6 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
        }
    }
    else if (spiHandle.Init.DataSize <= SPI_DATASIZE_16BIT)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001472:	2b0f      	cmp	r3, #15
 8001474:	d81f      	bhi.n	80014b6 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
    {
        if (hdma_spi_tx.Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800147c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001480:	d109      	bne.n	8001496 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x13a>
        {
            spiHandle.TxXferCount = (spiHandle.TxXferCount + 1UL) >> 1UL;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 8001488:	b29b      	uxth	r3, r3
 800148a:	3301      	adds	r3, #1
 800148c:	085b      	lsrs	r3, r3, #1
 800148e:	b29a      	uxth	r2, r3
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
        }
        if (hdma_spi_rx.Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 800149c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80014a0:	d109      	bne.n	80014b6 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
        {
            spiHandle.RxXferCount = (spiHandle.RxXferCount + 1UL) >> 1UL;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	3301      	adds	r3, #1
 80014ac:	085b      	lsrs	r3, r3, #1
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
        }
    }

    /* Configure Tx DMA with Multi-Buffer */
    hdma_spi_tx.XferHalfCpltCallback = NULL;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
    hdma_spi_tx.XferCpltCallback     = NULL;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    hdma_spi_tx.XferErrorCallback    = NULL;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124

    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_tx,
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f103 00d8 	add.w	r0, r3, #216	@ 0xd8
 80014d4:	68b9      	ldr	r1, [r7, #8]
                                                (uint32_t)pTxBuffer0,
                                                (uint32_t)&spiHandle.Instance->TXDR,
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014da:	3320      	adds	r3, #32
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_tx,
 80014dc:	461c      	mov	r4, r3
 80014de:	687a      	ldr	r2, [r7, #4]
                                                (uint32_t)pTxBuffer1,
                                                spiHandle.TxXferCount))
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 80014e6:	b29b      	uxth	r3, r3
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_tx,
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	4613      	mov	r3, r2
 80014ec:	4622      	mov	r2, r4
 80014ee:	f018 f893 	bl	8019618 <HAL_DMAEx_MultiBufferStart_IT>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	bf14      	ite	ne
 80014f8:	2301      	movne	r3, #1
 80014fa:	2300      	moveq	r3, #0
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d005      	beq.n	800150e <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x1b2>
    {
        __HAL_UNLOCK(&spiHandle);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	2200      	movs	r2, #0
 8001506:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e079      	b.n	8001602 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    /* Configure Rx DMA with Multi-Buffer */
    hdma_spi_rx.XferHalfCpltCallback = NULL;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2200      	movs	r2, #0
 8001512:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
    hdma_spi_rx.XferCpltCallback     = NULL;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2200      	movs	r2, #0
 800151a:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
    hdma_spi_rx.XferErrorCallback    = NULL;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2200      	movs	r2, #0
 8001522:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c

    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_rx,
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f503 70a8 	add.w	r0, r3, #336	@ 0x150
                                                (uint32_t)&spiHandle.Instance->RXDR,
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001530:	3330      	adds	r3, #48	@ 0x30
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_rx,
 8001532:	461c      	mov	r4, r3
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	6a39      	ldr	r1, [r7, #32]
                                                (uint32_t)pRxBuffer0,
                                                (uint32_t)pRxBuffer1,
                                                spiHandle.RxXferCount))
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 800153e:	b29b      	uxth	r3, r3
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_rx,
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	460b      	mov	r3, r1
 8001544:	4621      	mov	r1, r4
 8001546:	f018 f867 	bl	8019618 <HAL_DMAEx_MultiBufferStart_IT>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	bf14      	ite	ne
 8001550:	2301      	movne	r3, #1
 8001552:	2300      	moveq	r3, #0
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b00      	cmp	r3, #0
 8001558:	d00a      	beq.n	8001570 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x214>
    {
        (void)HAL_DMA_Abort(&hdma_spi_tx);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	33d8      	adds	r3, #216	@ 0xd8
 800155e:	4618      	mov	r0, r3
 8001560:	f016 fdaa 	bl	80180b8 <HAL_DMA_Abort>
        __HAL_UNLOCK(&spiHandle);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2200      	movs	r2, #0
 8001568:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
        return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e048      	b.n	8001602 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    /* Configure SPI TSIZE for full transfer or circular mode */
    if (hdma_spi_rx.Init.Mode == DMA_CIRCULAR || hdma_spi_tx.Init.Mode == DMA_CIRCULAR)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8001576:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800157a:	d005      	beq.n	8001588 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x22c>
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001582:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001586:	d108      	bne.n	800159a <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x23e>
    {
        MODIFY_REG(spiHandle.Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800158c:	6859      	ldr	r1, [r3, #4]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001592:	4b1e      	ldr	r3, [pc, #120]	@ (800160c <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2b0>)
 8001594:	400b      	ands	r3, r1
 8001596:	6053      	str	r3, [r2, #4]
 8001598:	e009      	b.n	80015ae <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x252>
    }
    else
    {
        MODIFY_REG(spiHandle.Instance->CR2, SPI_CR2_TSIZE, Size);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	4b1a      	ldr	r3, [pc, #104]	@ (800160c <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2b0>)
 80015a2:	4013      	ands	r3, r2
 80015a4:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80015aa:	430b      	orrs	r3, r1
 80015ac:	6053      	str	r3, [r2, #4]
    }

    /* Enable Tx and Rx DMA Requests */
    SET_BIT(spiHandle.Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015b2:	689a      	ldr	r2, [r3, #8]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015b8:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80015bc:	609a      	str	r2, [r3, #8]

    /* Enable SPI error interrupt */
    __HAL_SPI_ENABLE_IT(&spiHandle, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015c2:	691a      	ldr	r2, [r3, #16]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015c8:	f442 7258 	orr.w	r2, r2, #864	@ 0x360
 80015cc:	611a      	str	r2, [r3, #16]

    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(&spiHandle);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015d8:	f042 0201 	orr.w	r2, r2, #1
 80015dc:	601a      	str	r2, [r3, #0]

    if (spiHandle.Init.Mode == SPI_MODE_MASTER)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80015e6:	d107      	bne.n	80015f8 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x29c>
    {
        SET_BIT(spiHandle.Instance->CR1, SPI_CR1_CSTART);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80015f6:	601a      	str	r2, [r3, #0]
    }

    __HAL_UNLOCK(&spiHandle);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0

    return HAL_OK;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	bd90      	pop	{r4, r7, pc}
 800160a:	bf00      	nop
 800160c:	ffff0000 	.word	0xffff0000

08001610 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef>:

int SPIComms::DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001610:	b480      	push	{r7}
 8001612:	b087      	sub	sp, #28
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr_dma;
  int interrupt;

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800161e:	613b      	str	r3, [r7, #16]

  tmpisr_dma  = regs_dma->ISR;
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	60fb      	str	r3, [r7, #12]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a5a      	ldr	r2, [pc, #360]	@ (8001794 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x184>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d04a      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a58      	ldr	r2, [pc, #352]	@ (8001798 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x188>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d045      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a57      	ldr	r2, [pc, #348]	@ (800179c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x18c>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d040      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a55      	ldr	r2, [pc, #340]	@ (80017a0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x190>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d03b      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a54      	ldr	r2, [pc, #336]	@ (80017a4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x194>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d036      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a52      	ldr	r2, [pc, #328]	@ (80017a8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x198>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d031      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a51      	ldr	r2, [pc, #324]	@ (80017ac <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x19c>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d02c      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a4f      	ldr	r2, [pc, #316]	@ (80017b0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a0>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d027      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a4e      	ldr	r2, [pc, #312]	@ (80017b4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a4>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d022      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a4c      	ldr	r2, [pc, #304]	@ (80017b8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a8>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d01d      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a4b      	ldr	r2, [pc, #300]	@ (80017bc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1ac>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d018      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a49      	ldr	r2, [pc, #292]	@ (80017c0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b0>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d013      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a48      	ldr	r2, [pc, #288]	@ (80017c4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b4>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d00e      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a46      	ldr	r2, [pc, #280]	@ (80017c8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b8>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d009      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a45      	ldr	r2, [pc, #276]	@ (80017cc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1bc>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d004      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a43      	ldr	r2, [pc, #268]	@ (80017d0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1c0>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d101      	bne.n	80016ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xba>
 80016c6:	2301      	movs	r3, #1
 80016c8:	e000      	b.n	80016cc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xbc>
 80016ca:	2300      	movs	r3, #0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f000 8338 	beq.w	8001d42 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x732>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016d6:	f003 031f 	and.w	r3, r3, #31
 80016da:	2208      	movs	r2, #8
 80016dc:	409a      	lsls	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	4013      	ands	r3, r2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f000 809a 	beq.w	800181c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x20c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a29      	ldr	r2, [pc, #164]	@ (8001794 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x184>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d04a      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a28      	ldr	r2, [pc, #160]	@ (8001798 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x188>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d045      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a26      	ldr	r2, [pc, #152]	@ (800179c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x18c>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d040      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a25      	ldr	r2, [pc, #148]	@ (80017a0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x190>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d03b      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a23      	ldr	r2, [pc, #140]	@ (80017a4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x194>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d036      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a22      	ldr	r2, [pc, #136]	@ (80017a8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x198>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d031      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a20      	ldr	r2, [pc, #128]	@ (80017ac <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x19c>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d02c      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a1f      	ldr	r2, [pc, #124]	@ (80017b0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a0>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d027      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a1d      	ldr	r2, [pc, #116]	@ (80017b4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a4>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d022      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a1c      	ldr	r2, [pc, #112]	@ (80017b8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a8>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d01d      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a1a      	ldr	r2, [pc, #104]	@ (80017bc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1ac>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d018      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a19      	ldr	r2, [pc, #100]	@ (80017c0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b0>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d013      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a17      	ldr	r2, [pc, #92]	@ (80017c4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b4>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d00e      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a16      	ldr	r2, [pc, #88]	@ (80017c8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b8>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d009      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a14      	ldr	r2, [pc, #80]	@ (80017cc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1bc>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d004      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a13      	ldr	r2, [pc, #76]	@ (80017d0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1c0>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d125      	bne.n	80017d4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1c4>
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0304 	and.w	r3, r3, #4
 8001792:	e024      	b.n	80017de <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1ce>
 8001794:	40020010 	.word	0x40020010
 8001798:	40020028 	.word	0x40020028
 800179c:	40020040 	.word	0x40020040
 80017a0:	40020058 	.word	0x40020058
 80017a4:	40020070 	.word	0x40020070
 80017a8:	40020088 	.word	0x40020088
 80017ac:	400200a0 	.word	0x400200a0
 80017b0:	400200b8 	.word	0x400200b8
 80017b4:	40020410 	.word	0x40020410
 80017b8:	40020428 	.word	0x40020428
 80017bc:	40020440 	.word	0x40020440
 80017c0:	40020458 	.word	0x40020458
 80017c4:	40020470 	.word	0x40020470
 80017c8:	40020488 	.word	0x40020488
 80017cc:	400204a0 	.word	0x400204a0
 80017d0:	400204b8 	.word	0x400204b8
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0308 	and.w	r3, r3, #8
 80017de:	2b00      	cmp	r3, #0
 80017e0:	bf14      	ite	ne
 80017e2:	2301      	movne	r3, #1
 80017e4:	2300      	moveq	r3, #0
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d017      	beq.n	800181c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x20c>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f022 0204 	bic.w	r2, r2, #4
 80017fa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001800:	f003 031f 	and.w	r3, r3, #31
 8001804:	2208      	movs	r2, #8
 8001806:	409a      	lsls	r2, r3
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001810:	f043 0201 	orr.w	r2, r3, #1
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	655a      	str	r2, [r3, #84]	@ 0x54
        interrupt =  DMA_OTHER;
 8001818:	2303      	movs	r3, #3
 800181a:	617b      	str	r3, [r7, #20]
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001820:	f003 031f 	and.w	r3, r3, #31
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	fa22 f303 	lsr.w	r3, r2, r3
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	2b00      	cmp	r3, #0
 8001830:	d070      	beq.n	8001914 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x304>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a68      	ldr	r2, [pc, #416]	@ (80019d8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3c8>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d04a      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a66      	ldr	r2, [pc, #408]	@ (80019dc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3cc>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d045      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a65      	ldr	r2, [pc, #404]	@ (80019e0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d0>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d040      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a63      	ldr	r2, [pc, #396]	@ (80019e4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d4>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d03b      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a62      	ldr	r2, [pc, #392]	@ (80019e8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d8>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d036      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a60      	ldr	r2, [pc, #384]	@ (80019ec <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3dc>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d031      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a5f      	ldr	r2, [pc, #380]	@ (80019f0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e0>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d02c      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a5d      	ldr	r2, [pc, #372]	@ (80019f4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e4>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d027      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a5c      	ldr	r2, [pc, #368]	@ (80019f8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e8>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d022      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a5a      	ldr	r2, [pc, #360]	@ (80019fc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ec>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d01d      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a59      	ldr	r2, [pc, #356]	@ (8001a00 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f0>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d018      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a57      	ldr	r2, [pc, #348]	@ (8001a04 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f4>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d013      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a56      	ldr	r2, [pc, #344]	@ (8001a08 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f8>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d00e      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a54      	ldr	r2, [pc, #336]	@ (8001a0c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3fc>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d009      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a53      	ldr	r2, [pc, #332]	@ (8001a10 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x400>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d004      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a51      	ldr	r2, [pc, #324]	@ (8001a14 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x404>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d105      	bne.n	80018de <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2ce>
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018dc:	e003      	b.n	80018e6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2d6>
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2300      	movs	r3, #0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	bf14      	ite	ne
 80018ea:	2301      	movne	r3, #1
 80018ec:	2300      	moveq	r3, #0
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d00f      	beq.n	8001914 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x304>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018f8:	f003 031f 	and.w	r3, r3, #31
 80018fc:	2201      	movs	r2, #1
 80018fe:	409a      	lsls	r2, r3
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001908:	f043 0202 	orr.w	r2, r3, #2
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	655a      	str	r2, [r3, #84]	@ 0x54
        interrupt =  DMA_OTHER;
 8001910:	2303      	movs	r3, #3
 8001912:	617b      	str	r3, [r7, #20]
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001918:	f003 031f 	and.w	r3, r3, #31
 800191c:	2204      	movs	r2, #4
 800191e:	409a      	lsls	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4013      	ands	r3, r2
 8001924:	2b00      	cmp	r3, #0
 8001926:	f000 8092 	beq.w	8001a4e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x43e>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a2a      	ldr	r2, [pc, #168]	@ (80019d8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3c8>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d04a      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a28      	ldr	r2, [pc, #160]	@ (80019dc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3cc>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d045      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a27      	ldr	r2, [pc, #156]	@ (80019e0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d0>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d040      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a25      	ldr	r2, [pc, #148]	@ (80019e4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d4>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d03b      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a24      	ldr	r2, [pc, #144]	@ (80019e8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d8>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d036      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a22      	ldr	r2, [pc, #136]	@ (80019ec <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3dc>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d031      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a21      	ldr	r2, [pc, #132]	@ (80019f0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e0>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d02c      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a1f      	ldr	r2, [pc, #124]	@ (80019f4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e4>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d027      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a1e      	ldr	r2, [pc, #120]	@ (80019f8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e8>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d022      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a1c      	ldr	r2, [pc, #112]	@ (80019fc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ec>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d01d      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a1b      	ldr	r2, [pc, #108]	@ (8001a00 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f0>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d018      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a19      	ldr	r2, [pc, #100]	@ (8001a04 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f4>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d013      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a18      	ldr	r2, [pc, #96]	@ (8001a08 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f8>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d00e      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a16      	ldr	r2, [pc, #88]	@ (8001a0c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3fc>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d009      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a15      	ldr	r2, [pc, #84]	@ (8001a10 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x400>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d004      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a13      	ldr	r2, [pc, #76]	@ (8001a14 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x404>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d126      	bne.n	8001a18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x408>
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	e024      	b.n	8001a20 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x410>
 80019d6:	bf00      	nop
 80019d8:	40020010 	.word	0x40020010
 80019dc:	40020028 	.word	0x40020028
 80019e0:	40020040 	.word	0x40020040
 80019e4:	40020058 	.word	0x40020058
 80019e8:	40020070 	.word	0x40020070
 80019ec:	40020088 	.word	0x40020088
 80019f0:	400200a0 	.word	0x400200a0
 80019f4:	400200b8 	.word	0x400200b8
 80019f8:	40020410 	.word	0x40020410
 80019fc:	40020428 	.word	0x40020428
 8001a00:	40020440 	.word	0x40020440
 8001a04:	40020458 	.word	0x40020458
 8001a08:	40020470 	.word	0x40020470
 8001a0c:	40020488 	.word	0x40020488
 8001a10:	400204a0 	.word	0x400204a0
 8001a14:	400204b8 	.word	0x400204b8
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2300      	movs	r3, #0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	bf14      	ite	ne
 8001a24:	2301      	movne	r3, #1
 8001a26:	2300      	moveq	r3, #0
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d00f      	beq.n	8001a4e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x43e>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a32:	f003 031f 	and.w	r3, r3, #31
 8001a36:	2204      	movs	r2, #4
 8001a38:	409a      	lsls	r2, r3
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a42:	f043 0204 	orr.w	r2, r3, #4
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	655a      	str	r2, [r3, #84]	@ 0x54
        interrupt =  DMA_OTHER;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	617b      	str	r3, [r7, #20]
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a52:	f003 031f 	and.w	r3, r3, #31
 8001a56:	2210      	movs	r2, #16
 8001a58:	409a      	lsls	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d07f      	beq.n	8001b62 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x552>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a6f      	ldr	r2, [pc, #444]	@ (8001c24 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x614>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d04a      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a6d      	ldr	r2, [pc, #436]	@ (8001c28 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x618>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d045      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a6c      	ldr	r2, [pc, #432]	@ (8001c2c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x61c>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d040      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a6a      	ldr	r2, [pc, #424]	@ (8001c30 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x620>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d03b      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a69      	ldr	r2, [pc, #420]	@ (8001c34 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x624>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d036      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a67      	ldr	r2, [pc, #412]	@ (8001c38 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x628>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d031      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a66      	ldr	r2, [pc, #408]	@ (8001c3c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x62c>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d02c      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a64      	ldr	r2, [pc, #400]	@ (8001c40 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x630>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d027      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a63      	ldr	r2, [pc, #396]	@ (8001c44 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x634>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d022      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a61      	ldr	r2, [pc, #388]	@ (8001c48 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x638>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d01d      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a60      	ldr	r2, [pc, #384]	@ (8001c4c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x63c>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d018      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a5e      	ldr	r2, [pc, #376]	@ (8001c50 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x640>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d013      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a5d      	ldr	r2, [pc, #372]	@ (8001c54 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x644>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d00e      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a5b      	ldr	r2, [pc, #364]	@ (8001c58 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x648>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d009      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a5a      	ldr	r2, [pc, #360]	@ (8001c5c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x64c>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d004      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a58      	ldr	r2, [pc, #352]	@ (8001c60 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x650>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d105      	bne.n	8001b0e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4fe>
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0308 	and.w	r3, r3, #8
 8001b0c:	e004      	b.n	8001b18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x508>
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	bf14      	ite	ne
 8001b1c:	2301      	movne	r3, #1
 8001b1e:	2300      	moveq	r3, #0
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d01b      	beq.n	8001b5e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x54e>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b2a:	f003 031f 	and.w	r3, r3, #31
 8001b2e:	2210      	movs	r2, #16
 8001b30:	409a      	lsls	r2, r3
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	609a      	str	r2, [r3, #8]

        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	bf0c      	ite	eq
 8001b44:	2301      	moveq	r3, #1
 8001b46:	2300      	movne	r3, #0
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d007      	beq.n	8001b5e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x54e>
        {
          /* Disable the half transfer interrupt */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f022 0208 	bic.w	r2, r2, #8
 8001b5c:	601a      	str	r2, [r3, #0]
        }

      }
      interrupt = DMA_HALF_TRANSFER;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	617b      	str	r3, [r7, #20]
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b66:	f003 031f 	and.w	r3, r3, #31
 8001b6a:	2220      	movs	r2, #32
 8001b6c:	409a      	lsls	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	4013      	ands	r3, r2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f000 80e5 	beq.w	8001d42 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x732>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a29      	ldr	r2, [pc, #164]	@ (8001c24 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x614>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d04a      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a28      	ldr	r2, [pc, #160]	@ (8001c28 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x618>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d045      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a26      	ldr	r2, [pc, #152]	@ (8001c2c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x61c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d040      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a25      	ldr	r2, [pc, #148]	@ (8001c30 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x620>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d03b      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a23      	ldr	r2, [pc, #140]	@ (8001c34 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x624>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d036      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a22      	ldr	r2, [pc, #136]	@ (8001c38 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x628>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d031      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a20      	ldr	r2, [pc, #128]	@ (8001c3c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x62c>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d02c      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a1f      	ldr	r2, [pc, #124]	@ (8001c40 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x630>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d027      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a1d      	ldr	r2, [pc, #116]	@ (8001c44 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x634>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d022      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a1c      	ldr	r2, [pc, #112]	@ (8001c48 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x638>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d01d      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a1a      	ldr	r2, [pc, #104]	@ (8001c4c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x63c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d018      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a19      	ldr	r2, [pc, #100]	@ (8001c50 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x640>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d013      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a17      	ldr	r2, [pc, #92]	@ (8001c54 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x644>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d00e      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a16      	ldr	r2, [pc, #88]	@ (8001c58 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x648>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d009      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a14      	ldr	r2, [pc, #80]	@ (8001c5c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x64c>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d004      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a13      	ldr	r2, [pc, #76]	@ (8001c60 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x650>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d125      	bne.n	8001c64 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x654>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0310 	and.w	r3, r3, #16
 8001c22:	e024      	b.n	8001c6e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x65e>
 8001c24:	40020010 	.word	0x40020010
 8001c28:	40020028 	.word	0x40020028
 8001c2c:	40020040 	.word	0x40020040
 8001c30:	40020058 	.word	0x40020058
 8001c34:	40020070 	.word	0x40020070
 8001c38:	40020088 	.word	0x40020088
 8001c3c:	400200a0 	.word	0x400200a0
 8001c40:	400200b8 	.word	0x400200b8
 8001c44:	40020410 	.word	0x40020410
 8001c48:	40020428 	.word	0x40020428
 8001c4c:	40020440 	.word	0x40020440
 8001c50:	40020458 	.word	0x40020458
 8001c54:	40020470 	.word	0x40020470
 8001c58:	40020488 	.word	0x40020488
 8001c5c:	400204a0 	.word	0x400204a0
 8001c60:	400204b8 	.word	0x400204b8
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	bf14      	ite	ne
 8001c72:	2301      	movne	r3, #1
 8001c74:	2300      	moveq	r3, #0
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d062      	beq.n	8001d42 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x732>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c80:	f003 031f 	and.w	r3, r3, #31
 8001c84:	2220      	movs	r2, #32
 8001c86:	409a      	lsls	r2, r3
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	bf0c      	ite	eq
 8001c98:	2301      	moveq	r3, #1
 8001c9a:	2300      	movne	r3, #0
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d031      	beq.n	8001d06 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x6f6>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 0216 	bic.w	r2, r2, #22
 8001cb0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	695a      	ldr	r2, [r3, #20]
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001cc0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d103      	bne.n	8001cd2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x6c2>
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d007      	beq.n	8001ce2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x6d2>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 0208 	bic.w	r2, r2, #8
 8001ce0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ce6:	f003 031f 	and.w	r3, r3, #31
 8001cea:	223f      	movs	r2, #63	@ 0x3f
 8001cec:	409a      	lsls	r2, r3
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          interrupt = DMA_TRANSFER_COMPLETE;
 8001d02:	2302      	movs	r3, #2
 8001d04:	617b      	str	r3, [r7, #20]
        }

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	bf0c      	ite	eq
 8001d14:	2301      	moveq	r3, #1
 8001d16:	2300      	movne	r3, #0
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00f      	beq.n	8001d3e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x72e>
        {
          /* Disable the transfer complete interrupt */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f022 0210 	bic.w	r2, r2, #16
 8001d2c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }
        interrupt =  2;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return interrupt;
 8001d42:	697b      	ldr	r3, [r7, #20]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	371c      	adds	r7, #28
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <_ZN8SPIComms18getActiveDMAmemoryEP19__DMA_HandleTypeDef>:

int SPIComms::getActiveDMAmemory(DMA_HandleTypeDef *hdma)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
    DMA_Stream_TypeDef *dmaStream = (DMA_Stream_TypeDef *)hdma->Instance;
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	60fb      	str	r3, [r7, #12]

    return (dmaStream->CR & DMA_SxCR_CT) ? 1 : 0;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <_ZN8SPIComms18getActiveDMAmemoryEP19__DMA_HandleTypeDef+0x20>
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e000      	b.n	8001d72 <_ZN8SPIComms18getActiveDMAmemoryEP19__DMA_HandleTypeDef+0x22>
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3714      	adds	r7, #20
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <_ZN8SPIComms18handleNssInterruptEv>:

void SPIComms::handleNssInterrupt()
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
	// SPI packet has been fully received
	// Flag the copy the RX buffer if new WRITE data has been received
	// DMA copy is performed during the servo thread update
	if (newWriteData)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 3242 	ldrb.w	r3, [r3, #578]	@ 0x242
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d007      	beq.n	8001da0 <_ZN8SPIComms18handleNssInterruptEv+0x22>
	{
		copyRXbuffer = true;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
		newWriteData = false;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 2242 	strb.w	r2, [r3, #578]	@ 0x242
	}
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <_ZN8SPIComms17handleTxInterruptEv>:

void SPIComms::handleTxInterrupt()
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
	DMA_IRQHandler(&hdma_spi_tx);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	33d8      	adds	r3, #216	@ 0xd8
 8001db8:	4619      	mov	r1, r3
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7ff fc28 	bl	8001610 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef>
	HAL_NVIC_EnableIRQ(irqDMAtx);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	@ 0x4c
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f015 fc63 	bl	8017692 <HAL_NVIC_EnableIRQ>
}
 8001dcc:	bf00      	nop
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <_ZN8SPIComms17handleRxInterruptEv>:

void SPIComms::handleRxInterrupt()
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
    // Handle the interrupt and determine the type of interrupt
    interruptType = DMA_IRQHandler(&hdma_spi_rx);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001de2:	4619      	mov	r1, r3
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff fc13 	bl	8001610 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef>
 8001dea:	4603      	mov	r3, r0
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f883 2241 	strb.w	r2, [r3, #577]	@ 0x241

    RxDMAmemoryIdx = getActiveDMAmemory(&hdma_spi_rx);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7ff ffa7 	bl	8001d50 <_ZN8SPIComms18getActiveDMAmemoryEP19__DMA_HandleTypeDef>
 8001e02:	4603      	mov	r3, r0
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    if (interruptType == DMA_HALF_TRANSFER) // Use the HTC interrupt to check the packet being received
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f893 3241 	ldrb.w	r3, [r3, #577]	@ 0x241
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d12d      	bne.n	8001e72 <_ZN8SPIComms17handleRxInterruptEv+0x9e>
    {
        switch (ptrRxDMABuffer->buffer[RxDMAmemoryIdx].header)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e20:	019b      	lsls	r3, r3, #6
 8001e22:	4413      	add	r3, r2
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a1c      	ldr	r2, [pc, #112]	@ (8001e98 <_ZN8SPIComms17handleRxInterruptEv+0xc4>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d003      	beq.n	8001e34 <_ZN8SPIComms17handleRxInterruptEv+0x60>
 8001e2c:	4a1b      	ldr	r2, [pc, #108]	@ (8001e9c <_ZN8SPIComms17handleRxInterruptEv+0xc8>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d007      	beq.n	8001e42 <_ZN8SPIComms17handleRxInterruptEv+0x6e>
 8001e32:	e017      	b.n	8001e64 <_ZN8SPIComms17handleRxInterruptEv+0x90>
        {
            case Config::pruRead:
                // No action needed for PRU_READ.
            	dataCallback(true);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3318      	adds	r3, #24
 8001e38:	2101      	movs	r1, #1
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f000 f8ca 	bl	8001fd4 <_ZNKSt8functionIFvbEEclEb>
                break;
 8001e40:	e01f      	b.n	8001e82 <_ZN8SPIComms17handleRxInterruptEv+0xae>

            case Config::pruWrite:
            	// Valid PRU_WRITE header, flag RX data transfer.
            	dataCallback(true);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	3318      	adds	r3, #24
 8001e46:	2101      	movs	r1, #1
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f000 f8c3 	bl	8001fd4 <_ZNKSt8functionIFvbEEclEb>
            	newWriteData = true;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2242 	strb.w	r2, [r3, #578]	@ 0x242
                RXbufferIdx = RxDMAmemoryIdx;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                break;
 8001e62:	e00e      	b.n	8001e82 <_ZN8SPIComms17handleRxInterruptEv+0xae>

            default:
            	dataCallback(false);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3318      	adds	r3, #24
 8001e68:	2100      	movs	r1, #0
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f000 f8b2 	bl	8001fd4 <_ZNKSt8functionIFvbEEclEb>
                break;
 8001e70:	e007      	b.n	8001e82 <_ZN8SPIComms17handleRxInterruptEv+0xae>
        }
    }
    else if (interruptType == DMA_TRANSFER_COMPLETE) // Transfer complete interrupt
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 3241 	ldrb.w	r3, [r3, #577]	@ 0x241
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d002      	beq.n	8001e82 <_ZN8SPIComms17handleRxInterruptEv+0xae>
    {
        // Placeholder for transfer complete handling if needed in the future.
    }
    else // Other interrupt sources
    {
        printf("DMA SPI Rx error\n");
 8001e7c:	4808      	ldr	r0, [pc, #32]	@ (8001ea0 <_ZN8SPIComms17handleRxInterruptEv+0xcc>)
 8001e7e:	f022 fe2b 	bl	8024ad8 <puts>
    }

    HAL_NVIC_EnableIRQ(irqDMArx);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	@ 0x4a
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f015 fc02 	bl	8017692 <HAL_NVIC_EnableIRQ>
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	72656164 	.word	0x72656164
 8001e9c:	77726974 	.word	0x77726974
 8001ea0:	08025864 	.word	0x08025864

08001ea4 <_ZN8SPIComms5tasksEv>:

void SPIComms::tasks() {
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]

	if (copyRXbuffer == true)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d138      	bne.n	8001f28 <_ZN8SPIComms5tasksEv+0x84>
    {
	    uint8_t* srcBuffer = (uint8_t*)ptrRxDMABuffer->buffer[RXbufferIdx].rxBuffer;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001ec0:	019b      	lsls	r3, r3, #6
 8001ec2:	4413      	add	r3, r2
 8001ec4:	60fb      	str	r3, [r7, #12]
	    uint8_t* destBuffer = (uint8_t*)ptrRxData->rxBuffer;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eca:	60bb      	str	r3, [r7, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ecc:	b672      	cpsid	i
}
 8001ece:	bf00      	nop

	    __disable_irq();

	    dmaStatus = HAL_DMA_Start(
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f503 70e4 	add.w	r0, r3, #456	@ 0x1c8
 8001ed6:	68f9      	ldr	r1, [r7, #12]
 8001ed8:	68ba      	ldr	r2, [r7, #8]
 8001eda:	2340      	movs	r3, #64	@ 0x40
 8001edc:	f015 ffcc 	bl	8017e78 <HAL_DMA_Start>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f883 2240 	strb.w	r2, [r3, #576]	@ 0x240
									(uint32_t)srcBuffer,
									(uint32_t)destBuffer,
									Config::dataBuffSize
	    							);

	    if (dmaStatus == HAL_OK) {
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 3240 	ldrb.w	r3, [r3, #576]	@ 0x240
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d10d      	bne.n	8001f10 <_ZN8SPIComms5tasksEv+0x6c>
	        dmaStatus = HAL_DMA_PollForTransfer(&hdma_memtomem, HAL_DMA_FULL_TRANSFER, HAL_MAX_DELAY);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8001efa:	f04f 32ff 	mov.w	r2, #4294967295
 8001efe:	2100      	movs	r1, #0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f016 fbf7 	bl	80186f4 <HAL_DMA_PollForTransfer>
 8001f06:	4603      	mov	r3, r0
 8001f08:	461a      	mov	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f883 2240 	strb.w	r2, [r3, #576]	@ 0x240
  __ASM volatile ("cpsie i" : : : "memory");
 8001f10:	b662      	cpsie	i
}
 8001f12:	bf00      	nop
	    }

	    __enable_irq();
	    HAL_DMA_Abort(&hdma_memtomem);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f016 f8cc 	bl	80180b8 <HAL_DMA_Abort>
		copyRXbuffer = false;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
}
 8001f28:	bf00      	nop
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <_ZN15ModuleInterruptI8SPICommsEC1E9IRQn_TypePS0_MS0_FvvE>:
private:
	DerivedModule* InterruptOwnerPtr;                                // Pointer to the owning module
	void (DerivedModule::*InterruptHandler)();                       // Member function pointer for the ISR
	
public:
    ModuleInterrupt(IRQn_Type interruptNumber, DerivedModule* ownerPtr, void (DerivedModule::*handler)())
 8001f30:	b082      	sub	sp, #8
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b084      	sub	sp, #16
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	60f8      	str	r0, [r7, #12]
 8001f3a:	607a      	str	r2, [r7, #4]
 8001f3c:	61fb      	str	r3, [r7, #28]
 8001f3e:	460b      	mov	r3, r1
 8001f40:	817b      	strh	r3, [r7, #10]
        : InterruptOwnerPtr(ownerPtr), InterruptHandler(handler)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f001 fec7 	bl	8003cd8 <_ZN9InterruptC1Ev>
 8001f4a:	4a0e      	ldr	r2, [pc, #56]	@ (8001f84 <_ZN15ModuleInterruptI8SPICommsEC1E9IRQn_TypePS0_MS0_FvvE+0x54>)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	3308      	adds	r3, #8
 8001f5a:	f107 021c 	add.w	r2, r7, #28
 8001f5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f62:	e883 0003 	stmia.w	r3, {r0, r1}
    {
        // Register the interrupt
        Interrupt::Register(interruptNumber, this);
 8001f66:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	4611      	mov	r1, r2
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f001 fec2 	bl	8003cf8 <_ZN9Interrupt8RegisterEiPS_>
    }
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4618      	mov	r0, r3
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001f80:	b002      	add	sp, #8
 8001f82:	4770      	bx	lr
 8001f84:	0802653c 	.word	0x0802653c

08001f88 <_ZSt5beginIVhLj64EEPT_RAT0__S1_>:
   *  @param  __arr  Array.
   */
  template<typename _Tp, size_t _Nm>
    [[__nodiscard__]]
    inline _GLIBCXX14_CONSTEXPR _Tp*
    begin(_Tp (&__arr)[_Nm]) noexcept
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
    { return __arr; }
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4618      	mov	r0, r3
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <_ZSt3endIVhLj64EEPT_RAT0__S1_>:
   *  @param  __arr  Array.
   */
  template<typename _Tp, size_t _Nm>
    [[__nodiscard__]]
    inline _GLIBCXX14_CONSTEXPR _Tp*
    end(_Tp (&__arr)[_Nm]) noexcept
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
    { return __arr + _Nm; }
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	3340      	adds	r3, #64	@ 0x40
 8001faa:	4618      	mov	r0, r3
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <_ZSt4fillIPVhiEvT_S2_RKT0_>:
   *  to @c memset or @c wmemset.
  */
  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b084      	sub	sp, #16
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	60f8      	str	r0, [r7, #12]
 8001fbe:	60b9      	str	r1, [r7, #8]
 8001fc0:	607a      	str	r2, [r7, #4]
      // concept requirements
      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
				  _ForwardIterator>)
      __glibcxx_requires_valid_range(__first, __last);

      std::__fill_a(__first, __last, __value);
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	68b9      	ldr	r1, [r7, #8]
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	f000 f82d 	bl	8002026 <_ZSt8__fill_aIPVhiEvT_S2_RKT0_>
    }
 8001fcc:	bf00      	nop
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <_ZNKSt8functionIFvbEEclEb>:
       *
       *  The function call operator invokes the target function object
       *  stored by `this`.
       */
      _Res
      operator()(_ArgTypes... __args) const
 8001fd4:	b5b0      	push	{r4, r5, r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	460b      	mov	r3, r1
 8001fde:	70fb      	strb	r3, [r7, #3]
      {
	if (_M_empty())
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7fe fe73 	bl	8000cce <_ZNKSt14_Function_base8_M_emptyEv>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <_ZNKSt8functionIFvbEEclEb+0x1e>
	  __throw_bad_function_call();
 8001fee:	f021 ff60 	bl	8023eb2 <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68dc      	ldr	r4, [r3, #12]
 8001ff6:	687d      	ldr	r5, [r7, #4]
 8001ff8:	1cfb      	adds	r3, r7, #3
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f000 f808 	bl	8002010 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8002000:	4603      	mov	r3, r0
 8002002:	4619      	mov	r1, r3
 8002004:	4628      	mov	r0, r5
 8002006:	47a0      	blx	r4
 8002008:	bf00      	nop
      }
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bdb0      	pop	{r4, r5, r7, pc}

08002010 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4618      	mov	r0, r3
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <_ZSt8__fill_aIPVhiEvT_S2_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 8002026:	b580      	push	{r7, lr}
 8002028:	b084      	sub	sp, #16
 800202a:	af00      	add	r7, sp, #0
 800202c:	60f8      	str	r0, [r7, #12]
 800202e:	60b9      	str	r1, [r7, #8]
 8002030:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	68b9      	ldr	r1, [r7, #8]
 8002036:	68f8      	ldr	r0, [r7, #12]
 8002038:	f000 f804 	bl	8002044 <_ZSt9__fill_a1IPVhiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_>
 800203c:	bf00      	nop
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <_ZSt9__fill_a1IPVhiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 8002044:	b480      	push	{r7}
 8002046:	b087      	sub	sp, #28
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __value;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first)
 8002056:	e006      	b.n	8002066 <_ZSt9__fill_a1IPVhiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_+0x22>
	*__first = __tmp;
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	b2da      	uxtb	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	701a      	strb	r2, [r3, #0]
      for (; __first != __last; ++__first)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	3301      	adds	r3, #1
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	429a      	cmp	r2, r3
 800206c:	d1f4      	bne.n	8002058 <_ZSt9__fill_a1IPVhiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_+0x14>
    }
 800206e:	bf00      	nop
 8002070:	bf00      	nop
 8002072:	371c      	adds	r7, #28
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <_Z41__static_initialization_and_destruction_0ii>:
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d107      	bne.n	800209c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002092:	4293      	cmp	r3, r2
 8002094:	d102      	bne.n	800209c <_Z41__static_initialization_and_destruction_0ii+0x20>
__attribute__((section(".DmaSection"))) volatile DMA_RxBuffer_t rxDMABuffer;
 8002096:	4803      	ldr	r0, [pc, #12]	@ (80020a4 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8002098:	f7fe fe46 	bl	8000d28 <_ZN14DMA_RxBuffer_tC1Ev>
}
 800209c:	bf00      	nop
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	30000000 	.word	0x30000000

080020a8 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv>:

    void ISR_Handler(void) {
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
        if (this->InterruptOwnerPtr && this->InterruptHandler) {
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d02a      	beq.n	800210e <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x66>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d107      	bne.n	80020d0 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x28>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x28>
 80020cc:	2301      	movs	r3, #1
 80020ce:	e000      	b.n	80020d2 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x2a>
 80020d0:	2300      	movs	r3, #0
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d01b      	beq.n	800210e <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x66>
            (this->InterruptOwnerPtr->*InterruptHandler)(); // Call the member function of the owner
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d102      	bne.n	80020e8 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x40>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	e00a      	b.n	80020fe <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x56>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	68d2      	ldr	r2, [r2, #12]
 80020f0:	1052      	asrs	r2, r2, #1
 80020f2:	4413      	add	r3, r2
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6892      	ldr	r2, [r2, #8]
 80020fa:	4413      	add	r3, r2
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	6852      	ldr	r2, [r2, #4]
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	68c9      	ldr	r1, [r1, #12]
 8002106:	1049      	asrs	r1, r1, #1
 8002108:	440a      	add	r2, r1
 800210a:	4610      	mov	r0, r2
 800210c:	4798      	blx	r3
        }
    }
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <_GLOBAL__sub_I_rxDMABuffer>:
 8002116:	b580      	push	{r7, lr}
 8002118:	af00      	add	r7, sp, #0
 800211a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800211e:	2001      	movs	r0, #1
 8002120:	f7ff ffac 	bl	800207c <_Z41__static_initialization_and_destruction_0ii>
 8002124:	bd80      	pop	{r7, pc}
	...

08002128 <_ZN14CommsInterfaceC1Ev>:
#include "commsInterface.h"

CommsInterface::CommsInterface() {
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4618      	mov	r0, r3
 8002134:	f00e f8de 	bl	80102f4 <_ZN6ModuleC1Ev>
 8002138:	4a06      	ldr	r2, [pc, #24]	@ (8002154 <_ZN14CommsInterfaceC1Ev+0x2c>)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	3318      	adds	r3, #24
 8002142:	4618      	mov	r0, r3
 8002144:	f000 f839 	bl	80021ba <_ZNSt8functionIFvbEEC1Ev>
    // Constructor implementation
}
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	08026578 	.word	0x08026578

08002158 <_ZN14CommsInterface4initEv>:

void CommsInterface::init(){}
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <_ZN14CommsInterface5startEv>:
void CommsInterface::start(){}
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <_ZN14CommsInterface5tasksEv>:
void CommsInterface::tasks(){}
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	461a      	mov	r2, r3
 80021a0:	2300      	movs	r3, #0
 80021a2:	6013      	str	r3, [r2, #0]
 80021a4:	6053      	str	r3, [r2, #4]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4618      	mov	r0, r3
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <_ZNSt8functionIFvbEEC1Ev>:
      function() noexcept
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	461a      	mov	r2, r3
 80021c6:	2300      	movs	r3, #0
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	6053      	str	r3, [r2, #4]
 80021cc:	6093      	str	r3, [r2, #8]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ffdf 	bl	8002194 <_ZNSt14_Function_baseC1Ev>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	60da      	str	r2, [r3, #12]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <_ZN14SoftwareSerial4idleEv>:
    bool listen(void);
    void tickerHandler(void);

    void enableTx(void);
    void enableRx(void);
    void idle() {__NOP();}
 80021e6:	b480      	push	{r7}
 80021e8:	b083      	sub	sp, #12
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
 80021ee:	bf00      	nop
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <_ZN14SoftwareSerialC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_>:
#include "SoftwareSerial.h"
#include <cstdint>



SoftwareSerial::SoftwareSerial(std::string tx, std::string rx)
 80021fc:	b590      	push	{r4, r7, lr}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	4618      	mov	r0, r3
 800220c:	f021 fef1 	bl	8023ff2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	3318      	adds	r3, #24
 8002214:	4618      	mov	r0, r3
 8002216:	f021 feec 	bl	8023ff2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
{
    if (!tx.empty()) TXportAndPin = tx;
 800221a:	68b8      	ldr	r0, [r7, #8]
 800221c:	f021 ffcf 	bl	80241be <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
 8002220:	4603      	mov	r3, r0
 8002222:	f083 0301 	eor.w	r3, r3, #1
 8002226:	b2db      	uxtb	r3, r3
 8002228:	2b00      	cmp	r3, #0
 800222a:	d004      	beq.n	8002236 <_ZN14SoftwareSerialC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x3a>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	68b9      	ldr	r1, [r7, #8]
 8002230:	4618      	mov	r0, r3
 8002232:	f021 ff66 	bl	8024102 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
    if (!rx.empty()) RXportAndPin = rx;
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f021 ffc1 	bl	80241be <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
 800223c:	4603      	mov	r3, r0
 800223e:	f083 0301 	eor.w	r3, r3, #1
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b00      	cmp	r3, #0
 8002246:	d005      	beq.n	8002254 <_ZN14SoftwareSerialC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x58>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	3318      	adds	r3, #24
 800224c:	6879      	ldr	r1, [r7, #4]
 800224e:	4618      	mov	r0, r3
 8002250:	f021 ff57 	bl	8024102 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
    halfDuplex = !TXportAndPin.compare(RXportAndPin);
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	3318      	adds	r3, #24
 800225a:	4619      	mov	r1, r3
 800225c:	4610      	mov	r0, r2
 800225e:	f022 f801 	bl	8024264 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	bf0c      	ite	eq
 8002268:	2301      	moveq	r3, #1
 800226a:	2300      	movne	r3, #0
 800226c:	b2da      	uxtb	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82

    if(halfDuplex)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 800227a:	2b00      	cmp	r3, #0
 800227c:	d015      	beq.n	80022aa <_ZN14SoftwareSerialC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0xae>
    {
        this->rxpin = new Pin(RXportAndPin,1);
 800227e:	2040      	movs	r0, #64	@ 0x40
 8002280:	f021 fdee 	bl	8023e60 <_Znwj>
 8002284:	4603      	mov	r3, r0
 8002286:	461c      	mov	r4, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	3318      	adds	r3, #24
 800228c:	2201      	movs	r2, #1
 800228e:	4619      	mov	r1, r3
 8002290:	4620      	mov	r0, r4
 8002292:	f001 fab1 	bl	80037f8 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	635c      	str	r4, [r3, #52]	@ 0x34
        this->txpin = this->rxpin;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	631a      	str	r2, [r3, #48]	@ 0x30
        setTX();
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f000 f848 	bl	8002338 <_ZN14SoftwareSerial5setTXEv>
 80022a8:	e020      	b.n	80022ec <_ZN14SoftwareSerialC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0xf0>
    }
    else
    {
        this->txpin = new Pin(TXportAndPin,0);
 80022aa:	2040      	movs	r0, #64	@ 0x40
 80022ac:	f021 fdd8 	bl	8023e60 <_Znwj>
 80022b0:	4603      	mov	r3, r0
 80022b2:	461c      	mov	r4, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2200      	movs	r2, #0
 80022b8:	4619      	mov	r1, r3
 80022ba:	4620      	mov	r0, r4
 80022bc:	f001 fa9c 	bl	80037f8 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	631c      	str	r4, [r3, #48]	@ 0x30
        setTX();
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f000 f837 	bl	8002338 <_ZN14SoftwareSerial5setTXEv>

        this->rxpin = new Pin(RXportAndPin,1);
 80022ca:	2040      	movs	r0, #64	@ 0x40
 80022cc:	f021 fdc8 	bl	8023e60 <_Znwj>
 80022d0:	4603      	mov	r3, r0
 80022d2:	461c      	mov	r4, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	3318      	adds	r3, #24
 80022d8:	2201      	movs	r2, #1
 80022da:	4619      	mov	r1, r3
 80022dc:	4620      	mov	r0, r4
 80022de:	f001 fa8b 	bl	80037f8 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	635c      	str	r4, [r3, #52]	@ 0x34
        setRX();
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f000 f839 	bl	800235e <_ZN14SoftwareSerial5setRXEv>
    }
    
    qin = 0;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
    qout = 0;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
    activeTx = false;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    activeRx = false;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
}
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	4618      	mov	r0, r3
 8002310:	3714      	adds	r7, #20
 8002312:	46bd      	mov	sp, r7
 8002314:	bd90      	pop	{r4, r7, pc}

08002316 <_ZN14SoftwareSerial5beginEi>:


void SoftwareSerial::begin(int baudrate)
{
 8002316:	b480      	push	{r7}
 8002318:	b083      	sub	sp, #12
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
 800231e:	6039      	str	r1, [r7, #0]
    #ifdef FORCE_BAUD_RATE
    baudrate = FORCE_BAUD_RATE;     // 19200 fastest stable baud rate
 8002320:	f644 4390 	movw	r3, #19600	@ 0x4c90
 8002324:	603b      	str	r3, [r7, #0]
    #endif
    baudRate = baudrate;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	67da      	str	r2, [r3, #124]	@ 0x7c
    //ticker.attach_us(callback(this, &SoftwareSerial::tickerHandler), 1000000.0 / (baudRate * 3.0));
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <_ZN14SoftwareSerial5setTXEv>:
    //ticker.attach_us(callback(this, &SoftwareSerial::tickerHandler), 1000000.0 / (baudrate * 3.0));
    this->baudRate = baudrate;
}

void SoftwareSerial::setTX(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
    // the pin would be output low for a short while before switching to
    // output hihg. Now, it is input with pullup for a short while, which
    // is fine. With inverse logic, either order is fine.

    //this->txpin->set(1);                  // works for LPC1768 but not STM32
    this->txpin->setAsOutput();
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002344:	4618      	mov	r0, r3
 8002346:	f001 fc18 	bl	8003b7a <_ZN3Pin11setAsOutputEv>
    this->txpin->set(1);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234e:	2101      	movs	r1, #1
 8002350:	4618      	mov	r0, r3
 8002352:	f001 fbfb 	bl	8003b4c <_ZN3Pin3setEb>
}
 8002356:	bf00      	nop
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <_ZN14SoftwareSerial5setRXEv>:

void SoftwareSerial::setRX(void)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b082      	sub	sp, #8
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]

    this->rxpin->setAsInput();
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800236a:	4618      	mov	r0, r3
 800236c:	f001 fc16 	bl	8003b9c <_ZN3Pin10setAsInputEv>
    this->rxpin->setPullUp();
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002374:	4618      	mov	r0, r3
 8002376:	f001 fc22 	bl	8003bbe <_ZN3Pin9setPullUpEv>
}
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <_ZN14SoftwareSerial7setRXTXEb>:

void SoftwareSerial::setRXTX(bool input)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b082      	sub	sp, #8
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
 800238a:	460b      	mov	r3, r1
 800238c:	70fb      	strb	r3, [r7, #3]
    if (halfDuplex)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8002394:	2b00      	cmp	r3, #0
 8002396:	d01f      	beq.n	80023d8 <_ZN14SoftwareSerial7setRXTXEb+0x56>
    {
        if (input)
 8002398:	78fb      	ldrb	r3, [r7, #3]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d010      	beq.n	80023c0 <_ZN14SoftwareSerial7setRXTXEb+0x3e>
        {
            setRX();
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7ff ffdd 	bl	800235e <_ZN14SoftwareSerial5setRXEv>
            rxBitCnt = -1;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f04f 32ff 	mov.w	r2, #4294967295
 80023aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
            rxTickCnt = 2;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2202      	movs	r2, #2
 80023b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            activeRx = true;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
                setTX();
                activeRx = false;
            }
        }
    }
}
 80023be:	e00b      	b.n	80023d8 <_ZN14SoftwareSerial7setRXTXEb+0x56>
            if (activeRx)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d006      	beq.n	80023d8 <_ZN14SoftwareSerial7setRXTXEb+0x56>
                setTX();
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7ff ffb4 	bl	8002338 <_ZN14SoftwareSerial5setTXEv>
                activeRx = false;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
}
 80023d8:	bf00      	nop
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <_ZN14SoftwareSerial6listenEv>:

bool SoftwareSerial::listen()
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
    if (rxpin != nullptr)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d005      	beq.n	80023fc <_ZN14SoftwareSerial6listenEv+0x1c>
    {
        setRXTX(true);
 80023f0:	2101      	movs	r1, #1
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f7ff ffc5 	bl	8002382 <_ZN14SoftwareSerial7setRXTXEb>
        return true;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e000      	b.n	80023fe <_ZN14SoftwareSerial6listenEv+0x1e>
    }
    return false;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <_ZN14SoftwareSerial13tickerHandlerEv>:
{
    
}

void SoftwareSerial::tickerHandler(void)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b082      	sub	sp, #8
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
    if (activeTx) this->send();
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8002414:	2b00      	cmp	r3, #0
 8002416:	d002      	beq.n	800241e <_ZN14SoftwareSerial13tickerHandlerEv+0x18>
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 f80c 	bl	8002436 <_ZN14SoftwareSerial4sendEv>
    if (activeRx) this->receive();
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8002424:	2b00      	cmp	r3, #0
 8002426:	d002      	beq.n	800242e <_ZN14SoftwareSerial13tickerHandlerEv+0x28>
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 f867 	bl	80024fc <_ZN14SoftwareSerial7receiveEv>
}
 800242e:	bf00      	nop
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <_ZN14SoftwareSerial4sendEv>:

void SoftwareSerial::send(void)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b082      	sub	sp, #8
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
    if (--txTickCnt <= 0)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002444:	1e5a      	subs	r2, r3, #1
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002452:	2b00      	cmp	r3, #0
 8002454:	bfd4      	ite	le
 8002456:	2301      	movle	r3, #1
 8002458:	2300      	movgt	r3, #0
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2b00      	cmp	r3, #0
 800245e:	d049      	beq.n	80024f4 <_ZN14SoftwareSerial4sendEv+0xbe>
    {
        if (txBitCnt++ < TX_BITS)   // count out the bits in the txBuffer
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002466:	1c59      	adds	r1, r3, #1
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
 800246e:	2b09      	cmp	r3, #9
 8002470:	bfd4      	ite	le
 8002472:	2301      	movle	r3, #1
 8002474:	2300      	movgt	r3, #0
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b00      	cmp	r3, #0
 800247a:	d01b      	beq.n	80024b4 <_ZN14SoftwareSerial4sendEv+0x7e>
        {
            this->txpin->set(txBuffer & 0x01);   // set output equal to the LSB in txBuffer
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	bf14      	ite	ne
 800248e:	2301      	movne	r3, #1
 8002490:	2300      	moveq	r3, #0
 8002492:	b2db      	uxtb	r3, r3
 8002494:	4619      	mov	r1, r3
 8002496:	4610      	mov	r0, r2
 8002498:	f001 fb58 	bl	8003b4c <_ZN3Pin3setEb>
            txBuffer >>= 1;                     // shift txBuffer to right
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024a2:	105a      	asrs	r2, r3, #1
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
            txTickCnt = Config::oversample;     // reset the tick counter
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2203      	movs	r2, #3
 80024ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
                }
                activeTx = false;
            }
        }
    }
}
 80024b2:	e01f      	b.n	80024f4 <_ZN14SoftwareSerial4sendEv+0xbe>
            txTickCnt = 1;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
            if (outputPending)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f893 3083 	ldrb.w	r3, [r3, #131]	@ 0x83
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d004      	beq.n	80024d0 <_ZN14SoftwareSerial4sendEv+0x9a>
                activeTx = false;    // output pending allow new byte to be written to txBuffer from write()
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
}
 80024ce:	e011      	b.n	80024f4 <_ZN14SoftwareSerial4sendEv+0xbe>
            else if (txBitCnt > 10 + Config::oversample*5)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024d6:	2b19      	cmp	r3, #25
 80024d8:	d90c      	bls.n	80024f4 <_ZN14SoftwareSerial4sendEv+0xbe>
                if (halfDuplex)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d003      	beq.n	80024ec <_ZN14SoftwareSerial4sendEv+0xb6>
                    setRXTX(true);        // switch to receive mode
 80024e4:	2101      	movs	r1, #1
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7ff ff4b 	bl	8002382 <_ZN14SoftwareSerial7setRXTXEb>
                activeTx = false;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
}
 80024f4:	bf00      	nop
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <_ZN14SoftwareSerial7receiveEv>:

void SoftwareSerial::receive()
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
    if (--rxTickCnt <= 0)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800250a:	1e5a      	subs	r2, r3, #1
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002518:	2b00      	cmp	r3, #0
 800251a:	bfd4      	ite	le
 800251c:	2301      	movle	r3, #1
 800251e:	2300      	movgt	r3, #0
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d06f      	beq.n	8002606 <_ZN14SoftwareSerial7receiveEv+0x10a>
    {
        uint8_t inbit = this->rxpin->get();   // read the rx line
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800252a:	4618      	mov	r0, r3
 800252c:	f001 faf8 	bl	8003b20 <_ZNK3Pin3getEv>
 8002530:	4603      	mov	r3, r0
 8002532:	73fb      	strb	r3, [r7, #15]
        if (rxBitCnt == -1)                 // waiting for start bit
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800253a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800253e:	d114      	bne.n	800256a <_ZN14SoftwareSerial7receiveEv+0x6e>
        {
            if (!inbit)
 8002540:	7bfb      	ldrb	r3, [r7, #15]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10c      	bne.n	8002560 <_ZN14SoftwareSerial7receiveEv+0x64>
            {
                // got a start bit
                rxBitCnt = 0;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
                rxTickCnt = Config::oversample + 1;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2204      	movs	r2, #4
 8002552:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                rxBuffer = 0;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
            if (inbit)  rxBuffer |= 0x80;
            rxBitCnt++;
            rxTickCnt = Config::oversample;
        }
    }
}
 800255e:	e052      	b.n	8002606 <_ZN14SoftwareSerial7receiveEv+0x10a>
                rxTickCnt = 1;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
}
 8002568:	e04d      	b.n	8002606 <_ZN14SoftwareSerial7receiveEv+0x10a>
        else if (rxBitCnt >= RX_BITS)     // full byte has been read
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002570:	2b07      	cmp	r3, #7
 8002572:	dd2b      	ble.n	80025cc <_ZN14SoftwareSerial7receiveEv+0xd0>
            inbuf[qin] = rxBuffer;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8002580:	4619      	mov	r1, r3
 8002582:	b2d2      	uxtb	r2, r2
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	440b      	add	r3, r1
 8002588:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
			if ( ++qin >= IN_BUF_SIZE )
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8002592:	3301      	adds	r3, #1
 8002594:	b2da      	uxtb	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 80025a2:	2b3f      	cmp	r3, #63	@ 0x3f
 80025a4:	bf8c      	ite	hi
 80025a6:	2301      	movhi	r3, #1
 80025a8:	2300      	movls	r3, #0
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d003      	beq.n	80025b8 <_ZN14SoftwareSerial7receiveEv+0xbc>
				qin = 0;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
            rxTickCnt = 1;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            rxBitCnt = -1;              // flag waiting for start bit
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f04f 32ff 	mov.w	r2, #4294967295
 80025c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
}
 80025ca:	e01c      	b.n	8002606 <_ZN14SoftwareSerial7receiveEv+0x10a>
            rxBuffer >>= 1;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80025d2:	105a      	asrs	r2, r3, #1
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
            if (inbit)  rxBuffer |= 0x80;
 80025da:	7bfb      	ldrb	r3, [r7, #15]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d007      	beq.n	80025f0 <_ZN14SoftwareSerial7receiveEv+0xf4>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80025e6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
            rxBitCnt++;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025f6:	1c5a      	adds	r2, r3, #1
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
            rxTickCnt = Config::oversample;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2203      	movs	r2, #3
 8002602:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
}
 8002606:	bf00      	nop
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <_ZN14SoftwareSerial9availableEv>:


int SoftwareSerial::available()
{
 800260e:	b480      	push	{r7}
 8002610:	b083      	sub	sp, #12
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
    return (qout - qin);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800261c:	461a      	mov	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8002624:	1ad3      	subs	r3, r2, r3
}
 8002626:	4618      	mov	r0, r3
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <_ZN14SoftwareSerial5writeEi>:
    }
}


void SoftwareSerial::write(int b)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b082      	sub	sp, #8
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
 800263a:	6039      	str	r1, [r7, #0]
    outputPending = true;               // notify ticker handler that there are more bytes to transmit after current
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
    while (activeTx)                    // wait for current transmission to complete
 8002644:	e002      	b.n	800264c <_ZN14SoftwareSerial5writeEi+0x1a>
    {
        idle();
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7ff fdcd 	bl	80021e6 <_ZN14SoftwareSerial4idleEv>
    while (activeTx)                    // wait for current transmission to complete
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1f7      	bne.n	8002646 <_ZN14SoftwareSerial5writeEi+0x14>
    }
    txBuffer =      (b << 1) | 0x200;   // add start and stop bits
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    txBitCnt =      0;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    txTickCnt =     Config::oversample;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2203      	movs	r2, #3
 8002670:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    if (halfDuplex) setRXTX(false);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 800267a:	2b00      	cmp	r3, #0
 800267c:	d003      	beq.n	8002686 <_ZN14SoftwareSerial5writeEi+0x54>
 800267e:	2100      	movs	r1, #0
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f7ff fe7e 	bl	8002382 <_ZN14SoftwareSerial7setRXTXEb>
    outputPending = false;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
    activeTx =      true;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
}
 8002696:	bf00      	nop
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <_ZN14SoftwareSerial4readEv>:

int16_t SoftwareSerial::read()
{
 800269e:	b480      	push	{r7}
 80026a0:	b085      	sub	sp, #20
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
    if (qout == qin) return -1;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 2079 	ldrb.w	r2, [r3, #121]	@ 0x79
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d102      	bne.n	80026bc <_ZN14SoftwareSerial4readEv+0x1e>
 80026b6:	f04f 33ff 	mov.w	r3, #4294967295
 80026ba:	e020      	b.n	80026fe <_ZN14SoftwareSerial4readEv+0x60>

    char d = inbuf[qout] & 0xFF;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80026c2:	461a      	mov	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4413      	add	r3, r2
 80026c8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80026cc:	73fb      	strb	r3, [r7, #15]

    if ( ++qout >= IN_BUF_SIZE ) {qout = 0;}
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80026d4:	3301      	adds	r3, #1
 80026d6:	b2da      	uxtb	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80026e4:	2b3f      	cmp	r3, #63	@ 0x3f
 80026e6:	bf8c      	ite	hi
 80026e8:	2301      	movhi	r3, #1
 80026ea:	2300      	movls	r3, #0
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <_ZN14SoftwareSerial4readEv+0x5c>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
    
    return d;
 80026fa:	7bfb      	ldrb	r3, [r7, #15]
 80026fc:	b21b      	sxth	r3, r3
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3714      	adds	r7, #20
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr

0800270a <_ZN14TMC2208Stepper8CHOPCONFEv>:
*/
void TMC2208Stepper::CHOPCONF(uint32_t input) {
    CHOPCONF_register.sr = input;
    write(CHOPCONF_register.address, CHOPCONF_register.sr);
}
uint32_t TMC2208Stepper::CHOPCONF() {
 800270a:	b580      	push	{r7, lr}
 800270c:	b082      	sub	sp, #8
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
    return read(CHOPCONF_register.address);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	3304      	adds	r3, #4
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	216c      	movs	r1, #108	@ 0x6c
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	4798      	blx	r3
 8002720:	4603      	mov	r3, r0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <_ZN14TMC2208Stepper4toffEh>:
void TMC2208Stepper::toff   ( uint8_t  B )  { SET_REG(toff);    }
 800272a:	b580      	push	{r7, lr}
 800272c:	b082      	sub	sp, #8
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
 8002732:	460b      	mov	r3, r1
 8002734:	70fb      	strb	r3, [r7, #3]
 8002736:	78fb      	ldrb	r3, [r7, #3]
 8002738:	f003 030f 	and.w	r3, r3, #15
 800273c:	b2d9      	uxtb	r1, r3
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	f892 302b 	ldrb.w	r3, [r2, #43]	@ 0x2b
 8002744:	f361 0303 	bfi	r3, r1, #0, #4
 8002748:	f882 302b 	strb.w	r3, [r2, #43]	@ 0x2b
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	f8d2 202b 	ldr.w	r2, [r2, #43]	@ 0x2b
 8002758:	216c      	movs	r1, #108	@ 0x6c
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	4798      	blx	r3
 800275e:	bf00      	nop
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <_ZN14TMC2208Stepper5hstrtEh>:
void TMC2208Stepper::hstrt  ( uint8_t  B )  { SET_REG(hstrt);   }
 8002766:	b580      	push	{r7, lr}
 8002768:	b082      	sub	sp, #8
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
 800276e:	460b      	mov	r3, r1
 8002770:	70fb      	strb	r3, [r7, #3]
 8002772:	78fb      	ldrb	r3, [r7, #3]
 8002774:	f003 0307 	and.w	r3, r3, #7
 8002778:	b2d9      	uxtb	r1, r3
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	f892 302b 	ldrb.w	r3, [r2, #43]	@ 0x2b
 8002780:	f361 1306 	bfi	r3, r1, #4, #3
 8002784:	f882 302b 	strb.w	r3, [r2, #43]	@ 0x2b
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	f8d2 202b 	ldr.w	r2, [r2, #43]	@ 0x2b
 8002794:	216c      	movs	r1, #108	@ 0x6c
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	4798      	blx	r3
 800279a:	bf00      	nop
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <_ZN14TMC2208Stepper4hendEh>:
void TMC2208Stepper::hend   ( uint8_t  B )  { SET_REG(hend);    }
 80027a2:	b590      	push	{r4, r7, lr}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
 80027aa:	460b      	mov	r3, r1
 80027ac:	70fb      	strb	r3, [r7, #3]
 80027ae:	78fb      	ldrb	r3, [r7, #3]
 80027b0:	f003 030f 	and.w	r3, r3, #15
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f002 0101 	and.w	r1, r2, #1
 80027bc:	01cc      	lsls	r4, r1, #7
 80027be:	f893 102b 	ldrb.w	r1, [r3, #43]	@ 0x2b
 80027c2:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 80027c6:	4608      	mov	r0, r1
 80027c8:	4621      	mov	r1, r4
 80027ca:	4301      	orrs	r1, r0
 80027cc:	f883 102b 	strb.w	r1, [r3, #43]	@ 0x2b
 80027d0:	0852      	lsrs	r2, r2, #1
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	f002 0207 	and.w	r2, r2, #7
 80027d8:	f002 0007 	and.w	r0, r2, #7
 80027dc:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80027e0:	f022 0207 	bic.w	r2, r2, #7
 80027e4:	4611      	mov	r1, r2
 80027e6:	4602      	mov	r2, r0
 80027e8:	430a      	orrs	r2, r1
 80027ea:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	f8d2 202b 	ldr.w	r2, [r2, #43]	@ 0x2b
 80027fa:	216c      	movs	r1, #108	@ 0x6c
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	4798      	blx	r3
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	bd90      	pop	{r4, r7, pc}

08002808 <_ZN14TMC2208Stepper3tblEh>:
void TMC2208Stepper::tbl    ( uint8_t  B )  { SET_REG(tbl);     }
 8002808:	b590      	push	{r4, r7, lr}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	460b      	mov	r3, r1
 8002812:	70fb      	strb	r3, [r7, #3]
 8002814:	78fb      	ldrb	r3, [r7, #3]
 8002816:	f003 0303 	and.w	r3, r3, #3
 800281a:	b2da      	uxtb	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f002 0101 	and.w	r1, r2, #1
 8002822:	01cc      	lsls	r4, r1, #7
 8002824:	f893 102c 	ldrb.w	r1, [r3, #44]	@ 0x2c
 8002828:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 800282c:	4608      	mov	r0, r1
 800282e:	4621      	mov	r1, r4
 8002830:	4301      	orrs	r1, r0
 8002832:	f883 102c 	strb.w	r1, [r3, #44]	@ 0x2c
 8002836:	0852      	lsrs	r2, r2, #1
 8002838:	b2d2      	uxtb	r2, r2
 800283a:	f002 0201 	and.w	r2, r2, #1
 800283e:	f002 0001 	and.w	r0, r2, #1
 8002842:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 8002846:	f022 0201 	bic.w	r2, r2, #1
 800284a:	4611      	mov	r1, r2
 800284c:	4602      	mov	r2, r0
 800284e:	430a      	orrs	r2, r1
 8002850:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	f8d2 202b 	ldr.w	r2, [r2, #43]	@ 0x2b
 8002860:	216c      	movs	r1, #108	@ 0x6c
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	4798      	blx	r3
 8002866:	bf00      	nop
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	bd90      	pop	{r4, r7, pc}

0800286e <_ZN14TMC2208Stepper6vsenseEb>:
void TMC2208Stepper::vsense ( bool     B )  { SET_REG(vsense);  }
 800286e:	b580      	push	{r7, lr}
 8002870:	b082      	sub	sp, #8
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
 8002876:	460b      	mov	r3, r1
 8002878:	70fb      	strb	r3, [r7, #3]
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	f892 302d 	ldrb.w	r3, [r2, #45]	@ 0x2d
 8002880:	78f9      	ldrb	r1, [r7, #3]
 8002882:	f361 0341 	bfi	r3, r1, #1, #1
 8002886:	f882 302d 	strb.w	r3, [r2, #45]	@ 0x2d
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	f8d2 202b 	ldr.w	r2, [r2, #43]	@ 0x2b
 8002896:	216c      	movs	r1, #108	@ 0x6c
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	4798      	blx	r3
 800289c:	bf00      	nop
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <_ZN14TMC2208Stepper4mresEh>:
void TMC2208Stepper::mres   ( uint8_t  B )  { SET_REG(mres);    }
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	460b      	mov	r3, r1
 80028ae:	70fb      	strb	r3, [r7, #3]
 80028b0:	78fb      	ldrb	r3, [r7, #3]
 80028b2:	f003 030f 	and.w	r3, r3, #15
 80028b6:	b2d9      	uxtb	r1, r3
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	f892 302e 	ldrb.w	r3, [r2, #46]	@ 0x2e
 80028be:	f361 0303 	bfi	r3, r1, #0, #4
 80028c2:	f882 302e 	strb.w	r3, [r2, #46]	@ 0x2e
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	f8d2 202b 	ldr.w	r2, [r2, #43]	@ 0x2b
 80028d2:	216c      	movs	r1, #108	@ 0x6c
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	4798      	blx	r3
 80028d8:	bf00      	nop
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <_ZN14TMC2208Stepper5hstrtEv>:
void TMC2208Stepper::dedge  ( bool     B )  { SET_REG(dedge);   }
void TMC2208Stepper::diss2g ( bool     B )  { SET_REG(diss2g);  }
void TMC2208Stepper::diss2vs( bool     B )  { SET_REG(diss2vs); }

uint8_t TMC2208Stepper::toff()      { TMC2208_n::CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.toff;     }
uint8_t TMC2208Stepper::hstrt()     { TMC2208_n::CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.hstrt;    }
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	2300      	movs	r3, #0
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f7ff ff0c 	bl	800270a <_ZN14TMC2208Stepper8CHOPCONFEv>
 80028f2:	4603      	mov	r3, r0
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	7b3b      	ldrb	r3, [r7, #12]
 80028f8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	4618      	mov	r0, r3
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <_ZN14TMC2208Stepper4hendEv>:
uint8_t TMC2208Stepper::hend()      { TMC2208_n::CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.hend;     }
 8002906:	b580      	push	{r7, lr}
 8002908:	b084      	sub	sp, #16
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
 800290e:	2300      	movs	r3, #0
 8002910:	60fb      	str	r3, [r7, #12]
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f7ff fef9 	bl	800270a <_ZN14TMC2208Stepper8CHOPCONFEv>
 8002918:	4603      	mov	r3, r0
 800291a:	60fb      	str	r3, [r7, #12]
 800291c:	89bb      	ldrh	r3, [r7, #12]
 800291e:	f3c3 13c3 	ubfx	r3, r3, #7, #4
 8002922:	b2db      	uxtb	r3, r3
 8002924:	4618      	mov	r0, r3
 8002926:	3710      	adds	r7, #16
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <_ZN14TMC2208Stepper3tblEv>:
uint8_t TMC2208Stepper::tbl()       { TMC2208_n::CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.tbl;      }
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	2300      	movs	r3, #0
 8002936:	60fb      	str	r3, [r7, #12]
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f7ff fee6 	bl	800270a <_ZN14TMC2208Stepper8CHOPCONFEv>
 800293e:	4603      	mov	r3, r0
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f3c3 33c1 	ubfx	r3, r3, #15, #2
 8002948:	b2db      	uxtb	r3, r3
 800294a:	4618      	mov	r0, r3
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <_ZN14TMC2208Stepper6vsenseEv>:
bool    TMC2208Stepper::vsense()    { TMC2208_n::CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.vsense;   }
 8002952:	b580      	push	{r7, lr}
 8002954:	b084      	sub	sp, #16
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
 800295a:	2300      	movs	r3, #0
 800295c:	60fb      	str	r3, [r7, #12]
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7ff fed3 	bl	800270a <_ZN14TMC2208Stepper8CHOPCONFEv>
 8002964:	4603      	mov	r3, r0
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	7bbb      	ldrb	r3, [r7, #14]
 800296a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800296e:	b2db      	uxtb	r3, r3
 8002970:	4618      	mov	r0, r3
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <_ZN14TMC2208Stepper4mresEv>:
uint8_t TMC2208Stepper::mres()      { TMC2208_n::CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.mres;     }
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	2300      	movs	r3, #0
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f7ff fec0 	bl	800270a <_ZN14TMC2208Stepper8CHOPCONFEv>
 800298a:	4603      	mov	r3, r0
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	7bfb      	ldrb	r3, [r7, #15]
 8002990:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002994:	b2db      	uxtb	r3, r3
 8002996:	4618      	mov	r0, r3
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <_ZN14TMC2209Stepper5seminEh>:
void TMC2209Stepper::COOLCONF(uint16_t input) {
	COOLCONF_register.sr = input;
	write(COOLCONF_register.address, COOLCONF_register.sr);
}

void TMC2209Stepper::semin(	uint8_t B )	{ SET_REG(semin);	}
 800299e:	b580      	push	{r7, lr}
 80029a0:	b082      	sub	sp, #8
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
 80029a6:	460b      	mov	r3, r1
 80029a8:	70fb      	strb	r3, [r7, #3]
 80029aa:	78fb      	ldrb	r3, [r7, #3]
 80029ac:	f003 030f 	and.w	r3, r3, #15
 80029b0:	b2d9      	uxtb	r1, r3
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80029b8:	f361 0303 	bfi	r3, r1, #0, #4
 80029bc:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	f8b2 2069 	ldrh.w	r2, [r2, #105]	@ 0x69
 80029ce:	b292      	uxth	r2, r2
 80029d0:	2142      	movs	r1, #66	@ 0x42
 80029d2:	4798      	blx	r3
 80029d4:	bf00      	nop
 80029d6:	3708      	adds	r7, #8
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <_ZN14TMC2209Stepper5semaxEh>:
void TMC2209Stepper::seup(	uint8_t B )	{ SET_REG(seup);	}
void TMC2209Stepper::semax(	uint8_t B )	{ SET_REG(semax);	}
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	460b      	mov	r3, r1
 80029e6:	70fb      	strb	r3, [r7, #3]
 80029e8:	78fb      	ldrb	r3, [r7, #3]
 80029ea:	f003 030f 	and.w	r3, r3, #15
 80029ee:	b2d9      	uxtb	r1, r3
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 80029f6:	f361 0303 	bfi	r3, r1, #0, #4
 80029fa:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	f8b2 2069 	ldrh.w	r2, [r2, #105]	@ 0x69
 8002a0c:	b292      	uxth	r2, r2
 8002a0e:	2142      	movs	r1, #66	@ 0x42
 8002a10:	4798      	blx	r3
 8002a12:	bf00      	nop
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <_ZN14TMC2209Stepper4sednEh>:
void TMC2209Stepper::sedn(	uint8_t B )	{ SET_REG(sedn);	}
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b082      	sub	sp, #8
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
 8002a22:	460b      	mov	r3, r1
 8002a24:	70fb      	strb	r3, [r7, #3]
 8002a26:	78fb      	ldrb	r3, [r7, #3]
 8002a28:	f003 0303 	and.w	r3, r3, #3
 8002a2c:	b2d9      	uxtb	r1, r3
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8002a34:	f361 1346 	bfi	r3, r1, #5, #2
 8002a38:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	f8b2 2069 	ldrh.w	r2, [r2, #105]	@ 0x69
 8002a4a:	b292      	uxth	r2, r2
 8002a4c:	2142      	movs	r1, #66	@ 0x42
 8002a4e:	4798      	blx	r3
 8002a50:	bf00      	nop
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <_ZN14TMC2208Stepper10DRV_STATUSEv>:
bool TMC2130Stepper::s2gb()         { GET_REG(TMC2130_n, s2gb);         }
bool TMC2130Stepper::ola()          { GET_REG(TMC2130_n, ola);          }
bool TMC2130Stepper::olb()          { GET_REG(TMC2130_n, olb);          }
bool TMC2130Stepper::stst()         { GET_REG(TMC2130_n, stst);         }
*/
uint32_t TMC2208Stepper::DRV_STATUS() {
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
    return read(TMC2208_n::DRV_STATUS_t::address);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	3304      	adds	r3, #4
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	216f      	movs	r1, #111	@ 0x6f
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	4798      	blx	r3
 8002a6e:	4603      	mov	r3, r0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3708      	adds	r7, #8
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <_ZN14TMC2208Stepper14en_spreadCycleEb>:
    write(GCONF_register.address, GCONF_register.sr);
}

void TMC2208Stepper::I_scale_analog(bool B)     { SET_REG(i_scale_analog);  }
void TMC2208Stepper::internal_Rsense(bool B)    { SET_REG(internal_rsense); }
void TMC2208Stepper::en_spreadCycle(bool B)     { SET_REG(en_spreadcycle);  }
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	460b      	mov	r3, r1
 8002a82:	70fb      	strb	r3, [r7, #3]
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8002a8a:	78f9      	ldrb	r1, [r7, #3]
 8002a8c:	f361 0382 	bfi	r3, r1, #2, #1
 8002a90:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	6a12      	ldr	r2, [r2, #32]
 8002a9e:	f3c2 2209 	ubfx	r2, r2, #8, #10
 8002aa2:	b292      	uxth	r2, r2
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	4798      	blx	r3
 8002aaa:	bf00      	nop
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <_ZN14TMC2208Stepper11pdn_disableEb>:
void TMC2208Stepper::shaft(bool B)              { SET_REG(shaft);           }
void TMC2208Stepper::index_otpw(bool B)         { SET_REG(index_otpw);      }
void TMC2208Stepper::index_step(bool B)         { SET_REG(index_step);      }
void TMC2208Stepper::pdn_disable(bool B)        { SET_REG(pdn_disable);     }
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b082      	sub	sp, #8
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
 8002aba:	460b      	mov	r3, r1
 8002abc:	70fb      	strb	r3, [r7, #3]
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8002ac4:	78f9      	ldrb	r1, [r7, #3]
 8002ac6:	f361 1386 	bfi	r3, r1, #6, #1
 8002aca:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	6a12      	ldr	r2, [r2, #32]
 8002ad8:	f3c2 2209 	ubfx	r2, r2, #8, #10
 8002adc:	b292      	uxth	r2, r2
 8002ade:	2100      	movs	r1, #0
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	4798      	blx	r3
 8002ae4:	bf00      	nop
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <_ZN14TMC2208Stepper16mstep_reg_selectEb>:
void TMC2208Stepper::mstep_reg_select(bool B)   { SET_REG(mstep_reg_select);}
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	460b      	mov	r3, r1
 8002af6:	70fb      	strb	r3, [r7, #3]
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8002afe:	78f9      	ldrb	r1, [r7, #3]
 8002b00:	f361 13c7 	bfi	r3, r1, #7, #1
 8002b04:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	6a12      	ldr	r2, [r2, #32]
 8002b12:	f3c2 2209 	ubfx	r2, r2, #8, #10
 8002b16:	b292      	uxth	r2, r2
 8002b18:	2100      	movs	r1, #0
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	4798      	blx	r3
 8002b1e:	bf00      	nop
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <_ZN10TMCStepper5iholdEh>:
void TMCStepper::IHOLD_IRUN(uint32_t input) {
    IHOLD_IRUN_register.sr = input;
    write(IHOLD_IRUN_register.address, IHOLD_IRUN_register.sr);
}

void    TMCStepper::ihold(uint8_t B)        { SET_REG(ihold);       }
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b082      	sub	sp, #8
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
 8002b2e:	460b      	mov	r3, r1
 8002b30:	70fb      	strb	r3, [r7, #3]
 8002b32:	78fb      	ldrb	r3, [r7, #3]
 8002b34:	f003 031f 	and.w	r3, r3, #31
 8002b38:	b2d9      	uxtb	r1, r3
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	7913      	ldrb	r3, [r2, #4]
 8002b3e:	f361 0304 	bfi	r3, r1, #0, #5
 8002b42:	7113      	strb	r3, [r2, #4]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	6852      	ldr	r2, [r2, #4]
 8002b4e:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8002b52:	2110      	movs	r1, #16
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	4798      	blx	r3
 8002b58:	bf00      	nop
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <_ZN10TMCStepper4irunEh>:
void    TMCStepper::irun(uint8_t B)         { SET_REG(irun);        }
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	460b      	mov	r3, r1
 8002b6a:	70fb      	strb	r3, [r7, #3]
 8002b6c:	78fb      	ldrb	r3, [r7, #3]
 8002b6e:	f003 031f 	and.w	r3, r3, #31
 8002b72:	b2d9      	uxtb	r1, r3
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	7953      	ldrb	r3, [r2, #5]
 8002b78:	f361 0304 	bfi	r3, r1, #0, #5
 8002b7c:	7153      	strb	r3, [r2, #5]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	6852      	ldr	r2, [r2, #4]
 8002b88:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8002b8c:	2110      	movs	r1, #16
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	4798      	blx	r3
 8002b92:	bf00      	nop
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <_ZN10TMCStepper10iholddelayEh>:
void    TMCStepper::iholddelay(uint8_t B)   { SET_REG(iholddelay);  }
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b082      	sub	sp, #8
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	70fb      	strb	r3, [r7, #3]
 8002ba6:	78fb      	ldrb	r3, [r7, #3]
 8002ba8:	f003 030f 	and.w	r3, r3, #15
 8002bac:	b2d9      	uxtb	r1, r3
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	7993      	ldrb	r3, [r2, #6]
 8002bb2:	f361 0303 	bfi	r3, r1, #0, #4
 8002bb6:	7193      	strb	r3, [r2, #6]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	6852      	ldr	r2, [r2, #4]
 8002bc2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8002bc6:	2110      	movs	r1, #16
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	4798      	blx	r3
 8002bcc:	bf00      	nop
 8002bce:	3708      	adds	r7, #8
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <_ZN14TMC2208Stepper13pwm_autoscaleEb>:
}

void TMC2208Stepper::pwm_ofs		( uint8_t B ) { PWMCONF_register.pwm_ofs = B; write(PWMCONF_register.address, PWMCONF_register.sr); }
void TMC2208Stepper::pwm_grad		( uint8_t B ) { PWMCONF_register.pwm_grad = B; write(PWMCONF_register.address, PWMCONF_register.sr); }
void TMC2208Stepper::pwm_freq		( uint8_t B ) { PWMCONF_register.pwm_freq = B; write(PWMCONF_register.address, PWMCONF_register.sr); }
void TMC2208Stepper::pwm_autoscale	( bool 	  B ) { PWMCONF_register.pwm_autoscale = B; write(PWMCONF_register.address, PWMCONF_register.sr); }
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	460b      	mov	r3, r1
 8002bde:	70fb      	strb	r3, [r7, #3]
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	f892 3031 	ldrb.w	r3, [r2, #49]	@ 0x31
 8002be6:	78f9      	ldrb	r1, [r7, #3]
 8002be8:	f361 0382 	bfi	r3, r1, #2, #1
 8002bec:	f882 3031 	strb.w	r3, [r2, #49]	@ 0x31
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	f8d2 202f 	ldr.w	r2, [r2, #47]	@ 0x2f
 8002bfc:	2170      	movs	r1, #112	@ 0x70
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	4798      	blx	r3
 8002c02:	bf00      	nop
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
	...

08002c0c <_ZN10TMCStepperC1Ef>:
        int16_t cur_b();

		//Timer tmcTimer;

    protected:
        TMCStepper(float RS) : Rsense(RS) {};
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	ed87 0a00 	vstr	s0, [r7]
 8002c18:	4a10      	ldr	r2, [pc, #64]	@ (8002c5c <_ZN10TMCStepperC1Ef+0x50>)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	601a      	str	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	3304      	adds	r3, #4
 8002c22:	2100      	movs	r1, #0
 8002c24:	460a      	mov	r2, r1
 8002c26:	801a      	strh	r2, [r3, #0]
 8002c28:	460a      	mov	r2, r1
 8002c2a:	709a      	strb	r2, [r3, #2]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	71da      	strb	r2, [r3, #7]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	811a      	strh	r2, [r3, #8]
 8002c38:	7a9a      	ldrb	r2, [r3, #10]
 8002c3a:	f022 020f 	bic.w	r2, r2, #15
 8002c3e:	729a      	strb	r2, [r3, #10]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	60da      	str	r2, [r3, #12]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8002c4c:	611a      	str	r2, [r3, #16]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4618      	mov	r0, r3
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr
 8002c5c:	080265e4 	.word	0x080265e4

08002c60 <_ZN14TMC2208StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_fh>:
#include "TMCStepper.h"
#include "TMC_MACROS.h"

// Protected
// addr needed for TMC2209
TMC2208Stepper::TMC2208Stepper(std::string SWRXpin, std::string SWTXpin, float RS, uint8_t addr) :
 8002c60:	b590      	push	{r4, r7, lr}
 8002c62:	b095      	sub	sp, #84	@ 0x54
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6178      	str	r0, [r7, #20]
 8002c68:	6139      	str	r1, [r7, #16]
 8002c6a:	60fa      	str	r2, [r7, #12]
 8002c6c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002c70:	71fb      	strb	r3, [r7, #7]
    SWRXpin(SWRXpin),
    SWTXpin(SWRXpin),
    TMCStepper(RS),
    //RXTX_pin(SW_RX_pin == SW_TX_pin ? SW_RX_pin : 0),
    slave_address(addr)
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	ed97 0a02 	vldr	s0, [r7, #8]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7ff ffc7 	bl	8002c0c <_ZN10TMCStepperC1Ef>
 8002c7e:	4a47      	ldr	r2, [pc, #284]	@ (8002d9c <_ZN14TMC2208StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_fh+0x13c>)
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	2200      	movs	r2, #0
 8002c88:	831a      	strh	r2, [r3, #24]
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	4a44      	ldr	r2, [pc, #272]	@ (8002da0 <_ZN14TMC2208StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_fh+0x140>)
 8002c8e:	61da      	str	r2, [r3, #28]
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 2020 	strb.w	r2, [r3, #32]
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8002ca0:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8002ca4:	f022 0203 	bic.w	r2, r2, #3
 8002ca8:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 8002cb4:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8002cb8:	f022 020f 	bic.w	r2, r2, #15
 8002cbc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    SWTXpin(SWRXpin),
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	3334      	adds	r3, #52	@ 0x34
 8002d20:	6939      	ldr	r1, [r7, #16]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f021 fac9 	bl	80242ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
    SWRXpin(SWRXpin),
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	334c      	adds	r3, #76	@ 0x4c
 8002d2c:	6939      	ldr	r1, [r7, #16]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f021 fac3 	bl	80242ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
    slave_address(addr)
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	79fa      	ldrb	r2, [r7, #7]
 8002d38:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
    {
        SoftwareSerial *SWSerialObj = new SoftwareSerial(SWRXpin, SWTXpin);
 8002d3c:	209c      	movs	r0, #156	@ 0x9c
 8002d3e:	f021 f88f 	bl	8023e60 <_Znwj>
 8002d42:	4603      	mov	r3, r0
 8002d44:	461c      	mov	r4, r3
 8002d46:	f107 031c 	add.w	r3, r7, #28
 8002d4a:	6939      	ldr	r1, [r7, #16]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f021 fab4 	bl	80242ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8002d52:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002d56:	68f9      	ldr	r1, [r7, #12]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f021 faae 	bl	80242ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8002d5e:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8002d62:	f107 031c 	add.w	r3, r7, #28
 8002d66:	4619      	mov	r1, r3
 8002d68:	4620      	mov	r0, r4
 8002d6a:	f7ff fa47 	bl	80021fc <_ZN14SoftwareSerialC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_>
 8002d6e:	64fc      	str	r4, [r7, #76]	@ 0x4c
 8002d70:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002d74:	4618      	mov	r0, r3
 8002d76:	f021 f962 	bl	802403e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002d7a:	f107 031c 	add.w	r3, r7, #28
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f021 f95d 	bl	802403e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        SWSerial = SWSerialObj;
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d88:	615a      	str	r2, [r3, #20]
        defaults();
 8002d8a:	6978      	ldr	r0, [r7, #20]
 8002d8c:	f000 f832 	bl	8002df4 <_ZN14TMC2208Stepper8defaultsEv>
    }
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	4618      	mov	r0, r3
 8002d94:	3754      	adds	r7, #84	@ 0x54
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd90      	pop	{r4, r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	080265a8 	.word	0x080265a8
 8002da0:	3de147ae 	.word	0x3de147ae

08002da4 <_ZN14TMC2208Stepper11beginSerialEm>:


void TMC2208Stepper::beginSerial(uint32_t baudrate) {
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]

    SWSerial->begin(baudrate);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	4611      	mov	r1, r2
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7ff faad 	bl	8002316 <_ZN14SoftwareSerial5beginEi>
}
 8002dbc:	bf00      	nop
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <_ZN14TMC2208Stepper5beginEv>:


void TMC2208Stepper::begin() {
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]

    beginSerial(19600);
 8002dcc:	f644 4190 	movw	r1, #19600	@ 0x4c90
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f7ff ffe7 	bl	8002da4 <_ZN14TMC2208Stepper11beginSerialEm>
    pdn_disable(true);
 8002dd6:	2101      	movs	r1, #1
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f7ff fe6a 	bl	8002ab2 <_ZN14TMC2208Stepper11pdn_disableEb>
    mstep_reg_select(true);
 8002dde:	2101      	movs	r1, #1
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f7ff fe83 	bl	8002aec <_ZN14TMC2208Stepper16mstep_reg_selectEb>
    //Wait to initialize
    HAL_Delay(replyDelay);
 8002de6:	2002      	movs	r0, #2
 8002de8:	f014 fb18 	bl	801741c <HAL_Delay>

}
 8002dec:	bf00      	nop
 8002dee:	3708      	adds	r7, #8
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <_ZN14TMC2208Stepper8defaultsEv>:

void TMC2208Stepper::defaults() {
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
    GCONF_register.i_scale_analog = 1;
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8002e02:	f043 0301 	orr.w	r3, r3, #1
 8002e06:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
    GCONF_register.internal_rsense = 0; // OTP
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8002e10:	f36f 0341 	bfc	r3, #1, #1
 8002e14:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
    GCONF_register.en_spreadcycle = 0; // OTP
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8002e1e:	f36f 0382 	bfc	r3, #2, #1
 8002e22:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
    GCONF_register.multistep_filt = 1; // OTP
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	f892 3022 	ldrb.w	r3, [r2, #34]	@ 0x22
 8002e2c:	f043 0301 	orr.w	r3, r3, #1
 8002e30:	f882 3022 	strb.w	r3, [r2, #34]	@ 0x22
    IHOLD_IRUN_register.iholddelay = 1; // OTP
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	7993      	ldrb	r3, [r2, #6]
 8002e38:	2101      	movs	r1, #1
 8002e3a:	f361 0303 	bfi	r3, r1, #0, #4
 8002e3e:	7193      	strb	r3, [r2, #6]
    TPOWERDOWN_register.sr = 20;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2214      	movs	r2, #20
 8002e44:	71da      	strb	r2, [r3, #7]
    CHOPCONF_register.sr = 0x10000053;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 8002e4e:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f042 0210 	orr.w	r2, r2, #16
 8002e64:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
    PWMCONF_register.sr = 0xC10D0024;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f042 0224 	orr.w	r2, r2, #36	@ 0x24
 8002e70:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f042 020d 	orr.w	r2, r2, #13
 8002e80:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8002e84:	2200      	movs	r2, #0
 8002e86:	f062 023e 	orn	r2, r2, #62	@ 0x3e
 8002e8a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  //MSLUT4_register.sr = ???;
  //MSLUT5_register.sr = ???;
  //MSLUT6_register.sr = ???;
  //MSLUT7_register.sr = ???;
  //MSLUTSTART_register.start_sin90 = 247;
}
 8002e8e:	bf00      	nop
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr

08002e9a <_ZN14TMC2208Stepper7calcCRCEPhh>:
    PWMCONF(PWMCONF_register.sr);
}

bool TMC2208Stepper::isEnabled() { return !enn() && toff(); }

uint8_t TMC2208Stepper::calcCRC(uint8_t datagram[], uint8_t len) {
 8002e9a:	b480      	push	{r7}
 8002e9c:	b087      	sub	sp, #28
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	60f8      	str	r0, [r7, #12]
 8002ea2:	60b9      	str	r1, [r7, #8]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	71fb      	strb	r3, [r7, #7]
    uint8_t crc = 0;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	75fb      	strb	r3, [r7, #23]
    for (uint8_t i = 0; i < len; i++) {
 8002eac:	2300      	movs	r3, #0
 8002eae:	75bb      	strb	r3, [r7, #22]
 8002eb0:	e027      	b.n	8002f02 <_ZN14TMC2208Stepper7calcCRCEPhh+0x68>
        uint8_t currentByte = datagram[i];
 8002eb2:	7dbb      	ldrb	r3, [r7, #22]
 8002eb4:	68ba      	ldr	r2, [r7, #8]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	757b      	strb	r3, [r7, #21]
        for (uint8_t j = 0; j < 8; j++) {
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	753b      	strb	r3, [r7, #20]
 8002ec0:	e019      	b.n	8002ef6 <_ZN14TMC2208Stepper7calcCRCEPhh+0x5c>
            if ((crc >> 7) ^ (currentByte & 0x01)) {
 8002ec2:	7dfb      	ldrb	r3, [r7, #23]
 8002ec4:	09db      	lsrs	r3, r3, #7
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	7d7b      	ldrb	r3, [r7, #21]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d007      	beq.n	8002ee4 <_ZN14TMC2208Stepper7calcCRCEPhh+0x4a>
                crc = (crc << 1) ^ 0x07;
 8002ed4:	7dfb      	ldrb	r3, [r7, #23]
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	b25b      	sxtb	r3, r3
 8002eda:	f083 0307 	eor.w	r3, r3, #7
 8002ede:	b25b      	sxtb	r3, r3
 8002ee0:	75fb      	strb	r3, [r7, #23]
 8002ee2:	e002      	b.n	8002eea <_ZN14TMC2208Stepper7calcCRCEPhh+0x50>
            } else {
                crc = (crc << 1);
 8002ee4:	7dfb      	ldrb	r3, [r7, #23]
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	75fb      	strb	r3, [r7, #23]
            }
            crc &= 0xff;
            currentByte = currentByte >> 1;
 8002eea:	7d7b      	ldrb	r3, [r7, #21]
 8002eec:	085b      	lsrs	r3, r3, #1
 8002eee:	757b      	strb	r3, [r7, #21]
        for (uint8_t j = 0; j < 8; j++) {
 8002ef0:	7d3b      	ldrb	r3, [r7, #20]
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	753b      	strb	r3, [r7, #20]
 8002ef6:	7d3b      	ldrb	r3, [r7, #20]
 8002ef8:	2b07      	cmp	r3, #7
 8002efa:	d9e2      	bls.n	8002ec2 <_ZN14TMC2208Stepper7calcCRCEPhh+0x28>
    for (uint8_t i = 0; i < len; i++) {
 8002efc:	7dbb      	ldrb	r3, [r7, #22]
 8002efe:	3301      	adds	r3, #1
 8002f00:	75bb      	strb	r3, [r7, #22]
 8002f02:	7dba      	ldrb	r2, [r7, #22]
 8002f04:	79fb      	ldrb	r3, [r7, #7]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d3d3      	bcc.n	8002eb2 <_ZN14TMC2208Stepper7calcCRCEPhh+0x18>
        }
    }
    return crc;
 8002f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	371c      	adds	r7, #28
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <_ZN14TMC2208Stepper9availableEv>:

__attribute__((weak))
int TMC2208Stepper::available() {
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
    int out = 0;
 8002f20:	2300      	movs	r3, #0
 8002f22:	60fb      	str	r3, [r7, #12]

	out = SWSerial->available();
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff fb70 	bl	800260e <_ZN14SoftwareSerial9availableEv>
 8002f2e:	60f8      	str	r0, [r7, #12]

    return out;
 8002f30:	68fb      	ldr	r3, [r7, #12]
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <_ZN14TMC2208Stepper21preWriteCommunicationEv>:


__attribute__((weak))
void TMC2208Stepper::preWriteCommunication() {
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
    //this->debug1->write(1);
}
 8002f42:	bf00      	nop
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr

08002f4e <_ZN14TMC2208Stepper20preReadCommunicationEv>:


__attribute__((weak))
void TMC2208Stepper::preReadCommunication() {
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b082      	sub	sp, #8
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]

	SWSerial->listen();	
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff fa40 	bl	80023e0 <_ZN14SoftwareSerial6listenEv>
    //this->debug2->write(1);				
}
 8002f60:	bf00      	nop
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <_ZN14TMC2208Stepper22postWriteCommunicationEv>:


__attribute__((weak))
void TMC2208Stepper::postWriteCommunication() {
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
    //this->debug1->write(0);
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <_ZN14TMC2208Stepper21postReadCommunicationEv>:


__attribute__((weak))
void TMC2208Stepper::postReadCommunication() {
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
    //this->debug2->write(0);
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <_ZN14TMC2208Stepper11serial_readEv>:


__attribute__((weak))
int16_t TMC2208Stepper::serial_read() {
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
    int16_t out = 0;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	81fb      	strh	r3, [r7, #14]
     
    out = SWSerial->read();
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7ff fb7c 	bl	800269e <_ZN14SoftwareSerial4readEv>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	81fb      	strh	r3, [r7, #14]

	return out;
 8002faa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <_ZN14TMC2208Stepper12serial_writeEh>:

__attribute__((weak))
uint8_t TMC2208Stepper::serial_write(const uint8_t data) {
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b084      	sub	sp, #16
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	70fb      	strb	r3, [r7, #3]
    int out = 0;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	60fb      	str	r3, [r7, #12]

    SWSerial->write(data);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	78fa      	ldrb	r2, [r7, #3]
 8002fcc:	4611      	mov	r1, r2
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7ff fb2f 	bl	8002632 <_ZN14SoftwareSerial5writeEi>

    return out;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	b2db      	uxtb	r3, r3
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3710      	adds	r7, #16
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <_ZN14TMC2208Stepper5writeEhm>:


void TMC2208Stepper::write(uint8_t addr, uint32_t regVal) {
 8002fe0:	b590      	push	{r4, r7, lr}
 8002fe2:	b089      	sub	sp, #36	@ 0x24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	460b      	mov	r3, r1
 8002fea:	607a      	str	r2, [r7, #4]
 8002fec:	72fb      	strb	r3, [r7, #11]
    uint8_t len = 7;
 8002fee:	2307      	movs	r3, #7
 8002ff0:	77bb      	strb	r3, [r7, #30]
    addr |= TMC_WRITE;
 8002ff2:	7afb      	ldrb	r3, [r7, #11]
 8002ff4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002ff8:	72fb      	strb	r3, [r7, #11]
    uint8_t datagram[] = {TMC2208_SYNC, slave_address, addr, (uint8_t)(regVal>>24), (uint8_t)(regVal>>16), (uint8_t)(regVal>>8), (uint8_t)(regVal>>0), 0x00};
 8002ffa:	f107 0314 	add.w	r3, r7, #20
 8002ffe:	2200      	movs	r2, #0
 8003000:	601a      	str	r2, [r3, #0]
 8003002:	605a      	str	r2, [r3, #4]
 8003004:	2305      	movs	r3, #5
 8003006:	753b      	strb	r3, [r7, #20]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 800300e:	757b      	strb	r3, [r7, #21]
 8003010:	7afb      	ldrb	r3, [r7, #11]
 8003012:	75bb      	strb	r3, [r7, #22]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	0e1b      	lsrs	r3, r3, #24
 8003018:	b2db      	uxtb	r3, r3
 800301a:	75fb      	strb	r3, [r7, #23]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	0c1b      	lsrs	r3, r3, #16
 8003020:	b2db      	uxtb	r3, r3
 8003022:	763b      	strb	r3, [r7, #24]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	0a1b      	lsrs	r3, r3, #8
 8003028:	b2db      	uxtb	r3, r3
 800302a:	767b      	strb	r3, [r7, #25]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	b2db      	uxtb	r3, r3
 8003030:	76bb      	strb	r3, [r7, #26]
	
    datagram[len] = calcCRC(datagram, len);
 8003032:	7fbc      	ldrb	r4, [r7, #30]
 8003034:	7fba      	ldrb	r2, [r7, #30]
 8003036:	f107 0314 	add.w	r3, r7, #20
 800303a:	4619      	mov	r1, r3
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f7ff ff2c 	bl	8002e9a <_ZN14TMC2208Stepper7calcCRCEPhh>
 8003042:	4603      	mov	r3, r0
 8003044:	461a      	mov	r2, r3
 8003046:	f104 0320 	add.w	r3, r4, #32
 800304a:	443b      	add	r3, r7
 800304c:	f803 2c0c 	strb.w	r2, [r3, #-12]
	
	//printf("write datagram = %x, %x, %x, %x, %x, %x, %x, %x\n", datagram[0], datagram[1], datagram[2], datagram[3], datagram[4], datagram[5], datagram[6], datagram[7]);
    
    preWriteCommunication();
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f7ff ff72 	bl	8002f3a <_ZN14TMC2208Stepper21preWriteCommunicationEv>

    for(uint8_t i=0; i<=len; i++) {
 8003056:	2300      	movs	r3, #0
 8003058:	77fb      	strb	r3, [r7, #31]
 800305a:	e013      	b.n	8003084 <_ZN14TMC2208Stepper5writeEhm+0xa4>
        bytesWritten += serial_write(datagram[i]);
 800305c:	7ffb      	ldrb	r3, [r7, #31]
 800305e:	3320      	adds	r3, #32
 8003060:	443b      	add	r3, r7
 8003062:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003066:	4619      	mov	r1, r3
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f7ff ffa4 	bl	8002fb6 <_ZN14TMC2208Stepper12serial_writeEh>
 800306e:	4603      	mov	r3, r0
 8003070:	461a      	mov	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	8b1b      	ldrh	r3, [r3, #24]
 8003076:	4413      	add	r3, r2
 8003078:	b29a      	uxth	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	831a      	strh	r2, [r3, #24]
    for(uint8_t i=0; i<=len; i++) {
 800307e:	7ffb      	ldrb	r3, [r7, #31]
 8003080:	3301      	adds	r3, #1
 8003082:	77fb      	strb	r3, [r7, #31]
 8003084:	7ffa      	ldrb	r2, [r7, #31]
 8003086:	7fbb      	ldrb	r3, [r7, #30]
 8003088:	429a      	cmp	r2, r3
 800308a:	d9e7      	bls.n	800305c <_ZN14TMC2208Stepper5writeEhm+0x7c>
    }
    postWriteCommunication();
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	f7ff ff6b 	bl	8002f68 <_ZN14TMC2208Stepper22postWriteCommunicationEv>

    //delay(replyDelay);
    //ThisThread::sleep_for(150);
    HAL_Delay(5);
 8003092:	2005      	movs	r0, #5
 8003094:	f014 f9c2 	bl	801741c <HAL_Delay>
}
 8003098:	bf00      	nop
 800309a:	3724      	adds	r7, #36	@ 0x24
 800309c:	46bd      	mov	sp, r7
 800309e:	bd90      	pop	{r4, r7, pc}

080030a0 <_ZN14TMC2208Stepper13_sendDatagramEPhht>:

uint64_t TMC2208Stepper::_sendDatagram(uint8_t datagram[], const uint8_t len, uint16_t timeout) {
 80030a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030a4:	b092      	sub	sp, #72	@ 0x48
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6178      	str	r0, [r7, #20]
 80030aa:	6139      	str	r1, [r7, #16]
 80030ac:	4611      	mov	r1, r2
 80030ae:	461a      	mov	r2, r3
 80030b0:	460b      	mov	r3, r1
 80030b2:	73fb      	strb	r3, [r7, #15]
 80030b4:	4613      	mov	r3, r2
 80030b6:	81bb      	strh	r3, [r7, #12]
	
    while (available() > 0) serial_read(); // Flush
 80030b8:	e002      	b.n	80030c0 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x20>
 80030ba:	6978      	ldr	r0, [r7, #20]
 80030bc:	f7ff ff68 	bl	8002f90 <_ZN14TMC2208Stepper11serial_readEv>
 80030c0:	6978      	ldr	r0, [r7, #20]
 80030c2:	f7ff ff29 	bl	8002f18 <_ZN14TMC2208Stepper9availableEv>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	bfcc      	ite	gt
 80030cc:	2301      	movgt	r3, #1
 80030ce:	2300      	movle	r3, #0
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1f1      	bne.n	80030ba <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x1a>

    preWriteCommunication();
 80030d6:	6978      	ldr	r0, [r7, #20]
 80030d8:	f7ff ff2f 	bl	8002f3a <_ZN14TMC2208Stepper21preWriteCommunicationEv>
	for(int i=0; i<=len; i++)
 80030dc:	2300      	movs	r3, #0
 80030de:	647b      	str	r3, [r7, #68]	@ 0x44
 80030e0:	e00a      	b.n	80030f8 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x58>
    {   
        serial_write(datagram[i]);
 80030e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	4413      	add	r3, r2
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	4619      	mov	r1, r3
 80030ec:	6978      	ldr	r0, [r7, #20]
 80030ee:	f7ff ff62 	bl	8002fb6 <_ZN14TMC2208Stepper12serial_writeEh>
	for(int i=0; i<=len; i++)
 80030f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030f4:	3301      	adds	r3, #1
 80030f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80030f8:	7bfb      	ldrb	r3, [r7, #15]
 80030fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80030fc:	429a      	cmp	r2, r3
 80030fe:	ddf0      	ble.n	80030e2 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x42>
    }
	//delay(replyDelay);
    //ThisThread::sleep_for(replyDelay);
    postWriteCommunication();
 8003100:	6978      	ldr	r0, [r7, #20]
 8003102:	f7ff ff31 	bl	8002f68 <_ZN14TMC2208Stepper22postWriteCommunicationEv>

	// scan for the rx frame and read it
	uint32_t ms = HAL_GetTick();
 8003106:	f014 f97d 	bl	8017404 <HAL_GetTick>
 800310a:	6438      	str	r0, [r7, #64]	@ 0x40
	uint32_t sync_target = (static_cast<uint32_t>(datagram[0])<<16) | 0xFF00 | datagram[2];
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	041b      	lsls	r3, r3, #16
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	3202      	adds	r2, #2
 8003116:	7812      	ldrb	r2, [r2, #0]
 8003118:	4313      	orrs	r3, r2
 800311a:	f443 437f 	orr.w	r3, r3, #65280	@ 0xff00
 800311e:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t sync = 0;
 8003120:	2300      	movs	r3, #0
 8003122:	63fb      	str	r3, [r7, #60]	@ 0x3c

	do {
		uint32_t ms2 = HAL_GetTick();
 8003124:	f014 f96e 	bl	8017404 <HAL_GetTick>
 8003128:	6278      	str	r0, [r7, #36]	@ 0x24
		if (ms2 != ms) {
 800312a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800312c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800312e:	429a      	cmp	r2, r3
 8003130:	d004      	beq.n	800313c <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x9c>
			// 1ms tick
			ms = ms2;
 8003132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003134:	643b      	str	r3, [r7, #64]	@ 0x40
			timeout--;
 8003136:	89bb      	ldrh	r3, [r7, #12]
 8003138:	3b01      	subs	r3, #1
 800313a:	81bb      	strh	r3, [r7, #12]
		}
		if (!timeout) return 0;
 800313c:	89bb      	ldrh	r3, [r7, #12]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d104      	bne.n	800314c <_ZN14TMC2208Stepper13_sendDatagramEPhht+0xac>
 8003142:	f04f 0200 	mov.w	r2, #0
 8003146:	f04f 0300 	mov.w	r3, #0
 800314a:	e080      	b.n	800324e <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x1ae>

		int16_t res = serial_read();
 800314c:	6978      	ldr	r0, [r7, #20]
 800314e:	f7ff ff1f 	bl	8002f90 <_ZN14TMC2208Stepper11serial_readEv>
 8003152:	4603      	mov	r3, r0
 8003154:	847b      	strh	r3, [r7, #34]	@ 0x22
		if (res < 0) continue;
 8003156:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800315a:	2b00      	cmp	r3, #0
 800315c:	db0c      	blt.n	8003178 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0xd8>

		sync <<= 8;
 800315e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003160:	021b      	lsls	r3, r3, #8
 8003162:	63fb      	str	r3, [r7, #60]	@ 0x3c
		sync |= res & 0xFF;
 8003164:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003166:	b2db      	uxtb	r3, r3
 8003168:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800316a:	4313      	orrs	r3, r2
 800316c:	63fb      	str	r3, [r7, #60]	@ 0x3c
		sync &= 0xFFFFFF;
 800316e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003170:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003174:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003176:	e000      	b.n	800317a <_ZN14TMC2208Stepper13_sendDatagramEPhht+0xda>
		if (res < 0) continue;
 8003178:	bf00      	nop

	} while (sync != sync_target);
 800317a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800317c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800317e:	429a      	cmp	r2, r3
 8003180:	d1d0      	bne.n	8003124 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x84>

	uint64_t out = sync;
 8003182:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003184:	2200      	movs	r2, #0
 8003186:	603b      	str	r3, [r7, #0]
 8003188:	607a      	str	r2, [r7, #4]
 800318a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800318e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	ms = HAL_GetTick();
 8003192:	f014 f937 	bl	8017404 <HAL_GetTick>
 8003196:	6438      	str	r0, [r7, #64]	@ 0x40
	timeout = this->abort_window;
 8003198:	2305      	movs	r3, #5
 800319a:	81bb      	strh	r3, [r7, #12]
		 
	for(uint8_t i=0; i<5;) {
 800319c:	2300      	movs	r3, #0
 800319e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80031a2:	e03f      	b.n	8003224 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x184>
		uint32_t ms2 = HAL_GetTick();
 80031a4:	f014 f92e 	bl	8017404 <HAL_GetTick>
 80031a8:	61f8      	str	r0, [r7, #28]
		if (ms2 != ms) {
 80031aa:	69fa      	ldr	r2, [r7, #28]
 80031ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d004      	beq.n	80031bc <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x11c>
			// 1ms tick
			ms = ms2;
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	643b      	str	r3, [r7, #64]	@ 0x40
			timeout--;
 80031b6:	89bb      	ldrh	r3, [r7, #12]
 80031b8:	3b01      	subs	r3, #1
 80031ba:	81bb      	strh	r3, [r7, #12]
		}
		if (!timeout) return 0;
 80031bc:	89bb      	ldrh	r3, [r7, #12]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d104      	bne.n	80031cc <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x12c>
 80031c2:	f04f 0200 	mov.w	r2, #0
 80031c6:	f04f 0300 	mov.w	r3, #0
 80031ca:	e040      	b.n	800324e <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x1ae>

		int16_t res = serial_read();
 80031cc:	6978      	ldr	r0, [r7, #20]
 80031ce:	f7ff fedf 	bl	8002f90 <_ZN14TMC2208Stepper11serial_readEv>
 80031d2:	4603      	mov	r3, r0
 80031d4:	837b      	strh	r3, [r7, #26]
		if (res < 0) continue;
 80031d6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	db21      	blt.n	8003222 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x182>

		out <<= 8;
 80031de:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80031e2:	f04f 0200 	mov.w	r2, #0
 80031e6:	f04f 0300 	mov.w	r3, #0
 80031ea:	020b      	lsls	r3, r1, #8
 80031ec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80031f0:	0202      	lsls	r2, r0, #8
 80031f2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		out |= res & 0xFF;
 80031f6:	8b7b      	ldrh	r3, [r7, #26]
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	2200      	movs	r2, #0
 80031fc:	469a      	mov	sl, r3
 80031fe:	4693      	mov	fp, r2
 8003200:	f00a 04ff 	and.w	r4, sl, #255	@ 0xff
 8003204:	2500      	movs	r5, #0
 8003206:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800320a:	ea42 0804 	orr.w	r8, r2, r4
 800320e:	ea43 0905 	orr.w	r9, r3, r5
 8003212:	e9c7 890c 	strd	r8, r9, [r7, #48]	@ 0x30
		i++;
 8003216:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800321a:	3301      	adds	r3, #1
 800321c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003220:	e000      	b.n	8003224 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x184>
		if (res < 0) continue;
 8003222:	bf00      	nop
	for(uint8_t i=0; i<5;) {
 8003224:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003228:	2b04      	cmp	r3, #4
 800322a:	d9bb      	bls.n	80031a4 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x104>
	}

	while (available() > 0) serial_read(); // Flush
 800322c:	e002      	b.n	8003234 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x194>
 800322e:	6978      	ldr	r0, [r7, #20]
 8003230:	f7ff feae 	bl	8002f90 <_ZN14TMC2208Stepper11serial_readEv>
 8003234:	6978      	ldr	r0, [r7, #20]
 8003236:	f7ff fe6f 	bl	8002f18 <_ZN14TMC2208Stepper9availableEv>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	bfcc      	ite	gt
 8003240:	2301      	movgt	r3, #1
 8003242:	2300      	movle	r3, #0
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1f1      	bne.n	800322e <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x18e>

	return out;
 800324a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
}
 800324e:	4610      	mov	r0, r2
 8003250:	4619      	mov	r1, r3
 8003252:	3748      	adds	r7, #72	@ 0x48
 8003254:	46bd      	mov	sp, r7
 8003256:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800325a <_ZN14TMC2208Stepper4readEh>:

uint32_t TMC2208Stepper::read(uint8_t addr) {
 800325a:	b580      	push	{r7, lr}
 800325c:	b088      	sub	sp, #32
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
 8003262:	460b      	mov	r3, r1
 8003264:	70fb      	strb	r3, [r7, #3]
    constexpr uint8_t len = 3;
 8003266:	2303      	movs	r3, #3
 8003268:	75bb      	strb	r3, [r7, #22]
    addr |= TMC_READ;
    uint8_t datagram[] = {TMC2208_SYNC, slave_address, addr, 0x00};
 800326a:	2300      	movs	r3, #0
 800326c:	613b      	str	r3, [r7, #16]
 800326e:	2305      	movs	r3, #5
 8003270:	743b      	strb	r3, [r7, #16]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8003278:	747b      	strb	r3, [r7, #17]
 800327a:	78fb      	ldrb	r3, [r7, #3]
 800327c:	74bb      	strb	r3, [r7, #18]
    datagram[len] = calcCRC(datagram, len);
 800327e:	f107 0310 	add.w	r3, r7, #16
 8003282:	2203      	movs	r2, #3
 8003284:	4619      	mov	r1, r3
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f7ff fe07 	bl	8002e9a <_ZN14TMC2208Stepper7calcCRCEPhh>
 800328c:	4603      	mov	r3, r0
 800328e:	74fb      	strb	r3, [r7, #19]
    uint64_t out = 0x00000000UL;
 8003290:	f04f 0200 	mov.w	r2, #0
 8003294:	f04f 0300 	mov.w	r3, #0
 8003298:	e9c7 2306 	strd	r2, r3, [r7, #24]

    for (uint8_t i = 0; i < max_retries; i++) {			 
 800329c:	2300      	movs	r3, #0
 800329e:	75fb      	strb	r3, [r7, #23]
 80032a0:	e080      	b.n	80033a4 <_ZN14TMC2208Stepper4readEh+0x14a>
        preReadCommunication();
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f7ff fe53 	bl	8002f4e <_ZN14TMC2208Stepper20preReadCommunicationEv>
        out = _sendDatagram(datagram, len, abort_window);
 80032a8:	f107 0110 	add.w	r1, r7, #16
 80032ac:	2305      	movs	r3, #5
 80032ae:	2203      	movs	r2, #3
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f7ff fef5 	bl	80030a0 <_ZN14TMC2208Stepper13_sendDatagramEPhht>
 80032b6:	e9c7 0106 	strd	r0, r1, [r7, #24]
        postReadCommunication();
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7ff fe5e 	bl	8002f7c <_ZN14TMC2208Stepper21postReadCommunicationEv>

//        delay(replyDelay);
        //ThisThread::sleep_for(replyDelay);
        HAL_Delay(5);
 80032c0:	2005      	movs	r0, #5
 80032c2:	f014 f8ab 	bl	801741c <HAL_Delay>

        CRCerror = false;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 2020 	strb.w	r2, [r3, #32]
        uint8_t out_datagram[] = {
            static_cast<uint8_t>(out>>56),
 80032ce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80032d2:	f04f 0200 	mov.w	r2, #0
 80032d6:	f04f 0300 	mov.w	r3, #0
 80032da:	0e0a      	lsrs	r2, r1, #24
 80032dc:	2300      	movs	r3, #0
            static_cast<uint8_t>(out>>32),
            static_cast<uint8_t>(out>>24),
            static_cast<uint8_t>(out>>16),
            static_cast<uint8_t>(out>> 8),
            static_cast<uint8_t>(out>> 0)
        };
 80032de:	b2d3      	uxtb	r3, r2
 80032e0:	723b      	strb	r3, [r7, #8]
            static_cast<uint8_t>(out>>48),
 80032e2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80032e6:	f04f 0200 	mov.w	r2, #0
 80032ea:	f04f 0300 	mov.w	r3, #0
 80032ee:	0c0a      	lsrs	r2, r1, #16
 80032f0:	2300      	movs	r3, #0
        };
 80032f2:	b2d3      	uxtb	r3, r2
 80032f4:	727b      	strb	r3, [r7, #9]
            static_cast<uint8_t>(out>>40),
 80032f6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80032fa:	f04f 0200 	mov.w	r2, #0
 80032fe:	f04f 0300 	mov.w	r3, #0
 8003302:	0a0a      	lsrs	r2, r1, #8
 8003304:	2300      	movs	r3, #0
        };
 8003306:	b2d3      	uxtb	r3, r2
 8003308:	72bb      	strb	r3, [r7, #10]
            static_cast<uint8_t>(out>>32),
 800330a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800330e:	f04f 0200 	mov.w	r2, #0
 8003312:	f04f 0300 	mov.w	r3, #0
 8003316:	000a      	movs	r2, r1
 8003318:	2300      	movs	r3, #0
        };
 800331a:	b2d3      	uxtb	r3, r2
 800331c:	72fb      	strb	r3, [r7, #11]
            static_cast<uint8_t>(out>>24),
 800331e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003322:	f04f 0200 	mov.w	r2, #0
 8003326:	f04f 0300 	mov.w	r3, #0
 800332a:	0e02      	lsrs	r2, r0, #24
 800332c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003330:	0e0b      	lsrs	r3, r1, #24
        };
 8003332:	b2d3      	uxtb	r3, r2
 8003334:	733b      	strb	r3, [r7, #12]
            static_cast<uint8_t>(out>>16),
 8003336:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800333a:	f04f 0200 	mov.w	r2, #0
 800333e:	f04f 0300 	mov.w	r3, #0
 8003342:	0c02      	lsrs	r2, r0, #16
 8003344:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003348:	0c0b      	lsrs	r3, r1, #16
        };
 800334a:	b2d3      	uxtb	r3, r2
 800334c:	737b      	strb	r3, [r7, #13]
            static_cast<uint8_t>(out>> 8),
 800334e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003352:	f04f 0200 	mov.w	r2, #0
 8003356:	f04f 0300 	mov.w	r3, #0
 800335a:	0a02      	lsrs	r2, r0, #8
 800335c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003360:	0a0b      	lsrs	r3, r1, #8
        };
 8003362:	b2d3      	uxtb	r3, r2
 8003364:	73bb      	strb	r3, [r7, #14]
 8003366:	7e3b      	ldrb	r3, [r7, #24]
 8003368:	73fb      	strb	r3, [r7, #15]
        //printf("read  datagram = %x, %x, %x, %x, %x, %x, %x, %x\n", out_datagram[0], out_datagram[1], out_datagram[2], out_datagram[3], out_datagram[4], out_datagram[5], out_datagram[6], out_datagram[7]);
		
        uint8_t crc = calcCRC(out_datagram, 7);
 800336a:	f107 0308 	add.w	r3, r7, #8
 800336e:	2207      	movs	r2, #7
 8003370:	4619      	mov	r1, r3
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f7ff fd91 	bl	8002e9a <_ZN14TMC2208Stepper7calcCRCEPhh>
 8003378:	4603      	mov	r3, r0
 800337a:	757b      	strb	r3, [r7, #21]
        if ((crc != static_cast<uint8_t>(out)) || crc == 0 ) {
 800337c:	7e3b      	ldrb	r3, [r7, #24]
 800337e:	7d7a      	ldrb	r2, [r7, #21]
 8003380:	429a      	cmp	r2, r3
 8003382:	d102      	bne.n	800338a <_ZN14TMC2208Stepper4readEh+0x130>
 8003384:	7d7b      	ldrb	r3, [r7, #21]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d110      	bne.n	80033ac <_ZN14TMC2208Stepper4readEh+0x152>
            CRCerror = true;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 2020 	strb.w	r2, [r3, #32]
            out = 0;
 8003392:	f04f 0200 	mov.w	r2, #0
 8003396:	f04f 0300 	mov.w	r3, #0
 800339a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (uint8_t i = 0; i < max_retries; i++) {			 
 800339e:	7dfb      	ldrb	r3, [r7, #23]
 80033a0:	3301      	adds	r3, #1
 80033a2:	75fb      	strb	r3, [r7, #23]
 80033a4:	7dfb      	ldrb	r3, [r7, #23]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	f67f af7b 	bls.w	80032a2 <_ZN14TMC2208Stepper4readEh+0x48>
        } else {
            break;
        }
    }

    return out>>8;
 80033ac:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80033b0:	f04f 0200 	mov.w	r2, #0
 80033b4:	f04f 0300 	mov.w	r3, #0
 80033b8:	0a02      	lsrs	r2, r0, #8
 80033ba:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80033be:	0a0b      	lsrs	r3, r1, #8
 80033c0:	4613      	mov	r3, r2
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3720      	adds	r7, #32
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <_ZN14TMC2209Stepper6SGTHRSEh>:
    CHOPCONF(CHOPCONF_register.sr);
    PWMCONF(PWMCONF_register.sr);
    TCOOLTHRS(TCOOLTHRS_register.sr);
}

void TMC2209Stepper::SGTHRS(uint8_t input) {
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b082      	sub	sp, #8
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
 80033d2:	460b      	mov	r3, r1
 80033d4:	70fb      	strb	r3, [r7, #3]
    SGTHRS_register.sr = input;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	78fa      	ldrb	r2, [r7, #3]
 80033da:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    write(SGTHRS_register.address, SGTHRS_register.sr);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	f892 2068 	ldrb.w	r2, [r2, #104]	@ 0x68
 80033ec:	2140      	movs	r1, #64	@ 0x40
 80033ee:	4798      	blx	r3
}
 80033f0:	bf00      	nop
 80033f2:	3708      	adds	r7, #8
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <_ZN14TMC2209Stepper9TCOOLTHRSEm>:
    return SGTHRS_register.sr;
}

// W: TCOOLTHRS
uint32_t TMC2209Stepper::TCOOLTHRS() { return TCOOLTHRS_register.sr; }
void TMC2209Stepper::TCOOLTHRS(uint32_t input) {
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  TCOOLTHRS_register.sr = input;
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	b2d1      	uxtb	r1, r2
 800340c:	2000      	movs	r0, #0
 800340e:	4301      	orrs	r1, r0
 8003410:	f883 1065 	strb.w	r1, [r3, #101]	@ 0x65
 8003414:	0a11      	lsrs	r1, r2, #8
 8003416:	b2c9      	uxtb	r1, r1
 8003418:	2000      	movs	r0, #0
 800341a:	4301      	orrs	r1, r0
 800341c:	f883 1066 	strb.w	r1, [r3, #102]	@ 0x66
 8003420:	0c12      	lsrs	r2, r2, #16
 8003422:	f002 020f 	and.w	r2, r2, #15
 8003426:	f002 000f 	and.w	r0, r2, #15
 800342a:	f893 2067 	ldrb.w	r2, [r3, #103]	@ 0x67
 800342e:	f022 020f 	bic.w	r2, r2, #15
 8003432:	4611      	mov	r1, r2
 8003434:	4602      	mov	r2, r0
 8003436:	430a      	orrs	r2, r1
 8003438:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
  write(TCOOLTHRS_register.address, TCOOLTHRS_register.sr);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8003448:	f3c2 2213 	ubfx	r2, r2, #8, #20
 800344c:	2114      	movs	r1, #20
 800344e:	4798      	blx	r3
}
 8003450:	bf00      	nop
 8003452:	3708      	adds	r7, #8
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <_ZN10TMCStepper11rms_currentEt>:

uint16_t TMCStepper::cs2rms(uint8_t CS) {
  return (float)(CS+1)/32.0 * (vsense() ? 0.180 : 0.325)/(Rsense+0.02) / 1.41421 * 1000;
}

void TMCStepper::rms_current(uint16_t mA) {
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	460b      	mov	r3, r1
 8003462:	817b      	strh	r3, [r7, #10]
  uint8_t CS = 32.0*1.41421*mA/1000.0*(Rsense+0.02)/0.325 - 1;
 8003464:	897b      	ldrh	r3, [r7, #10]
 8003466:	ee07 3a90 	vmov	s15, r3
 800346a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800346e:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 8003568 <_ZN10TMCStepper11rms_currentEt+0x110>
 8003472:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003476:	ed9f 5b3e 	vldr	d5, [pc, #248]	@ 8003570 <_ZN10TMCStepper11rms_currentEt+0x118>
 800347a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	edd3 7a03 	vldr	s15, [r3, #12]
 8003484:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003488:	ed9f 5b3b 	vldr	d5, [pc, #236]	@ 8003578 <_ZN10TMCStepper11rms_currentEt+0x120>
 800348c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8003490:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003494:	ed9f 5b3a 	vldr	d5, [pc, #232]	@ 8003580 <_ZN10TMCStepper11rms_currentEt+0x128>
 8003498:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800349c:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80034a0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80034a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80034a8:	edc7 7a01 	vstr	s15, [r7, #4]
 80034ac:	793b      	ldrb	r3, [r7, #4]
 80034ae:	75fb      	strb	r3, [r7, #23]
  // If Current Scale is too low, turn on high sensitivity R_sense and calculate again
  if (CS < 16) {
 80034b0:	7dfb      	ldrb	r3, [r7, #23]
 80034b2:	2b0f      	cmp	r3, #15
 80034b4:	d82d      	bhi.n	8003512 <_ZN10TMCStepper11rms_currentEt+0xba>
    vsense(true);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	3308      	adds	r3, #8
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2101      	movs	r1, #1
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	4798      	blx	r3
    CS = 32.0*1.41421*mA/1000.0*(Rsense+0.02)/0.180 - 1;
 80034c4:	897b      	ldrh	r3, [r7, #10]
 80034c6:	ee07 3a90 	vmov	s15, r3
 80034ca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80034ce:	ed9f 6b26 	vldr	d6, [pc, #152]	@ 8003568 <_ZN10TMCStepper11rms_currentEt+0x110>
 80034d2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80034d6:	ed9f 5b26 	vldr	d5, [pc, #152]	@ 8003570 <_ZN10TMCStepper11rms_currentEt+0x118>
 80034da:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	edd3 7a03 	vldr	s15, [r3, #12]
 80034e4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80034e8:	ed9f 5b23 	vldr	d5, [pc, #140]	@ 8003578 <_ZN10TMCStepper11rms_currentEt+0x120>
 80034ec:	ee37 7b05 	vadd.f64	d7, d7, d5
 80034f0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80034f4:	ed9f 5b24 	vldr	d5, [pc, #144]	@ 8003588 <_ZN10TMCStepper11rms_currentEt+0x130>
 80034f8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80034fc:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8003500:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003504:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003508:	edc7 7a01 	vstr	s15, [r7, #4]
 800350c:	793b      	ldrb	r3, [r7, #4]
 800350e:	75fb      	strb	r3, [r7, #23]
 8003510:	e006      	b.n	8003520 <_ZN10TMCStepper11rms_currentEt+0xc8>
  } else { // If CS >= 16, turn off high_sense_r
    vsense(false);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	3308      	adds	r3, #8
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2100      	movs	r1, #0
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	4798      	blx	r3
  }

  if (CS > 31)
 8003520:	7dfb      	ldrb	r3, [r7, #23]
 8003522:	2b1f      	cmp	r3, #31
 8003524:	d901      	bls.n	800352a <_ZN10TMCStepper11rms_currentEt+0xd2>
    CS = 31;
 8003526:	231f      	movs	r3, #31
 8003528:	75fb      	strb	r3, [r7, #23]

  irun(CS);
 800352a:	7dfb      	ldrb	r3, [r7, #23]
 800352c:	4619      	mov	r1, r3
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f7ff fb16 	bl	8002b60 <_ZN10TMCStepper4irunEh>
  ihold(CS*holdMultiplier);
 8003534:	7dfb      	ldrb	r3, [r7, #23]
 8003536:	ee07 3a90 	vmov	s15, r3
 800353a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	edd3 7a04 	vldr	s15, [r3, #16]
 8003544:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003548:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800354c:	edc7 7a01 	vstr	s15, [r7, #4]
 8003550:	793b      	ldrb	r3, [r7, #4]
 8003552:	b2db      	uxtb	r3, r3
 8003554:	4619      	mov	r1, r3
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f7ff fae5 	bl	8002b26 <_ZN10TMCStepper5iholdEh>
  //val_mA = mA;
}
 800355c:	bf00      	nop
 800355e:	3718      	adds	r7, #24
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	f3af 8000 	nop.w
 8003568:	aa3ad18d 	.word	0xaa3ad18d
 800356c:	4046a09a 	.word	0x4046a09a
 8003570:	00000000 	.word	0x00000000
 8003574:	408f4000 	.word	0x408f4000
 8003578:	47ae147b 	.word	0x47ae147b
 800357c:	3f947ae1 	.word	0x3f947ae1
 8003580:	cccccccd 	.word	0xcccccccd
 8003584:	3fd4cccc 	.word	0x3fd4cccc
 8003588:	70a3d70a 	.word	0x70a3d70a
 800358c:	3fc70a3d 	.word	0x3fc70a3d

08003590 <_ZN10TMCStepper15test_connectionEv>:

uint16_t TMCStepper::rms_current() {
  return cs2rms(irun());
}

uint8_t TMCStepper::test_connection() {
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t drv_status = DRV_STATUS();
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	3310      	adds	r3, #16
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	4798      	blx	r3
 80035a4:	60f8      	str	r0, [r7, #12]
  switch (drv_status) {
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d005      	beq.n	80035b8 <_ZN10TMCStepper15test_connectionEv+0x28>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b2:	d103      	bne.n	80035bc <_ZN10TMCStepper15test_connectionEv+0x2c>
      case 0xFFFFFFFF: return 1;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e002      	b.n	80035be <_ZN10TMCStepper15test_connectionEv+0x2e>
      case 0: return 2;
 80035b8:	2302      	movs	r3, #2
 80035ba:	e000      	b.n	80035be <_ZN10TMCStepper15test_connectionEv+0x2e>
      default: return 0;
 80035bc:	2300      	movs	r3, #0
  }
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
	...

080035c8 <_ZN10TMCStepper10microstepsEt>:
int8_t TMCStepper::hysteresis_end() { return hend()-3; };

void TMCStepper::hysteresis_start(uint8_t value) { hstrt(value-1); }
uint8_t TMCStepper::hysteresis_start() { return hstrt()+1; }

void TMCStepper::microsteps(uint16_t ms) {
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	460b      	mov	r3, r1
 80035d2:	807b      	strh	r3, [r7, #2]
  switch(ms) {
 80035d4:	887b      	ldrh	r3, [r7, #2]
 80035d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035da:	d058      	beq.n	800368e <_ZN10TMCStepper10microstepsEt+0xc6>
 80035dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035e0:	f300 809d 	bgt.w	800371e <_ZN10TMCStepper10microstepsEt+0x156>
 80035e4:	2b80      	cmp	r3, #128	@ 0x80
 80035e6:	d05a      	beq.n	800369e <_ZN10TMCStepper10microstepsEt+0xd6>
 80035e8:	2b80      	cmp	r3, #128	@ 0x80
 80035ea:	f300 8098 	bgt.w	800371e <_ZN10TMCStepper10microstepsEt+0x156>
 80035ee:	2b20      	cmp	r3, #32
 80035f0:	dc4a      	bgt.n	8003688 <_ZN10TMCStepper10microstepsEt+0xc0>
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f340 8093 	ble.w	800371e <_ZN10TMCStepper10microstepsEt+0x156>
 80035f8:	3b01      	subs	r3, #1
 80035fa:	2b1f      	cmp	r3, #31
 80035fc:	f200 808f 	bhi.w	800371e <_ZN10TMCStepper10microstepsEt+0x156>
 8003600:	a201      	add	r2, pc, #4	@ (adr r2, 8003608 <_ZN10TMCStepper10microstepsEt+0x40>)
 8003602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003606:	bf00      	nop
 8003608:	0800370f 	.word	0x0800370f
 800360c:	080036ff 	.word	0x080036ff
 8003610:	0800371f 	.word	0x0800371f
 8003614:	080036ef 	.word	0x080036ef
 8003618:	0800371f 	.word	0x0800371f
 800361c:	0800371f 	.word	0x0800371f
 8003620:	0800371f 	.word	0x0800371f
 8003624:	080036df 	.word	0x080036df
 8003628:	0800371f 	.word	0x0800371f
 800362c:	0800371f 	.word	0x0800371f
 8003630:	0800371f 	.word	0x0800371f
 8003634:	0800371f 	.word	0x0800371f
 8003638:	0800371f 	.word	0x0800371f
 800363c:	0800371f 	.word	0x0800371f
 8003640:	0800371f 	.word	0x0800371f
 8003644:	080036cf 	.word	0x080036cf
 8003648:	0800371f 	.word	0x0800371f
 800364c:	0800371f 	.word	0x0800371f
 8003650:	0800371f 	.word	0x0800371f
 8003654:	0800371f 	.word	0x0800371f
 8003658:	0800371f 	.word	0x0800371f
 800365c:	0800371f 	.word	0x0800371f
 8003660:	0800371f 	.word	0x0800371f
 8003664:	0800371f 	.word	0x0800371f
 8003668:	0800371f 	.word	0x0800371f
 800366c:	0800371f 	.word	0x0800371f
 8003670:	0800371f 	.word	0x0800371f
 8003674:	0800371f 	.word	0x0800371f
 8003678:	0800371f 	.word	0x0800371f
 800367c:	0800371f 	.word	0x0800371f
 8003680:	0800371f 	.word	0x0800371f
 8003684:	080036bf 	.word	0x080036bf
 8003688:	2b40      	cmp	r3, #64	@ 0x40
 800368a:	d010      	beq.n	80036ae <_ZN10TMCStepper10microstepsEt+0xe6>
    case  16: mres(4); break;
    case   8: mres(5); break;
    case   4: mres(6); break;
    case   2: mres(7); break;
    case   1: mres(8); break;
    default: break;
 800368c:	e047      	b.n	800371e <_ZN10TMCStepper10microstepsEt+0x156>
    case 256: mres(0); break;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	3324      	adds	r3, #36	@ 0x24
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2100      	movs	r1, #0
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	4798      	blx	r3
 800369c:	e040      	b.n	8003720 <_ZN10TMCStepper10microstepsEt+0x158>
    case 128: mres(1); break;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	3324      	adds	r3, #36	@ 0x24
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2101      	movs	r1, #1
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	4798      	blx	r3
 80036ac:	e038      	b.n	8003720 <_ZN10TMCStepper10microstepsEt+0x158>
    case  64: mres(2); break;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	3324      	adds	r3, #36	@ 0x24
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2102      	movs	r1, #2
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	4798      	blx	r3
 80036bc:	e030      	b.n	8003720 <_ZN10TMCStepper10microstepsEt+0x158>
    case  32: mres(3); break;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	3324      	adds	r3, #36	@ 0x24
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2103      	movs	r1, #3
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	4798      	blx	r3
 80036cc:	e028      	b.n	8003720 <_ZN10TMCStepper10microstepsEt+0x158>
    case  16: mres(4); break;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	3324      	adds	r3, #36	@ 0x24
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2104      	movs	r1, #4
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	4798      	blx	r3
 80036dc:	e020      	b.n	8003720 <_ZN10TMCStepper10microstepsEt+0x158>
    case   8: mres(5); break;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	3324      	adds	r3, #36	@ 0x24
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2105      	movs	r1, #5
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	4798      	blx	r3
 80036ec:	e018      	b.n	8003720 <_ZN10TMCStepper10microstepsEt+0x158>
    case   4: mres(6); break;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	3324      	adds	r3, #36	@ 0x24
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2106      	movs	r1, #6
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	4798      	blx	r3
 80036fc:	e010      	b.n	8003720 <_ZN10TMCStepper10microstepsEt+0x158>
    case   2: mres(7); break;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	3324      	adds	r3, #36	@ 0x24
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2107      	movs	r1, #7
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	4798      	blx	r3
 800370c:	e008      	b.n	8003720 <_ZN10TMCStepper10microstepsEt+0x158>
    case   1: mres(8); break;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	3324      	adds	r3, #36	@ 0x24
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2108      	movs	r1, #8
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	4798      	blx	r3
 800371c:	e000      	b.n	8003720 <_ZN10TMCStepper10microstepsEt+0x158>
    default: break;
 800371e:	bf00      	nop
  }
}
 8003720:	bf00      	nop
 8003722:	3708      	adds	r7, #8
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <_ZN10TMCStepper10blank_timeEh>:
    case 8: return   1;
  }
  return 1;
}

void TMCStepper::blank_time(uint8_t value) {
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	460b      	mov	r3, r1
 8003732:	70fb      	strb	r3, [r7, #3]
  switch (value) {
 8003734:	78fb      	ldrb	r3, [r7, #3]
 8003736:	2b36      	cmp	r3, #54	@ 0x36
 8003738:	d022      	beq.n	8003780 <_ZN10TMCStepper10blank_timeEh+0x58>
 800373a:	2b36      	cmp	r3, #54	@ 0x36
 800373c:	dc28      	bgt.n	8003790 <_ZN10TMCStepper10blank_timeEh+0x68>
 800373e:	2b24      	cmp	r3, #36	@ 0x24
 8003740:	d016      	beq.n	8003770 <_ZN10TMCStepper10blank_timeEh+0x48>
 8003742:	2b24      	cmp	r3, #36	@ 0x24
 8003744:	dc24      	bgt.n	8003790 <_ZN10TMCStepper10blank_timeEh+0x68>
 8003746:	2b10      	cmp	r3, #16
 8003748:	d002      	beq.n	8003750 <_ZN10TMCStepper10blank_timeEh+0x28>
 800374a:	2b18      	cmp	r3, #24
 800374c:	d008      	beq.n	8003760 <_ZN10TMCStepper10blank_timeEh+0x38>
    case 16: tbl(0b00); break;
    case 24: tbl(0b01); break;
    case 36: tbl(0b10); break;
    case 54: tbl(0b11); break;
  }
}
 800374e:	e01f      	b.n	8003790 <_ZN10TMCStepper10blank_timeEh+0x68>
    case 16: tbl(0b00); break;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	332c      	adds	r3, #44	@ 0x2c
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2100      	movs	r1, #0
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	4798      	blx	r3
 800375e:	e017      	b.n	8003790 <_ZN10TMCStepper10blank_timeEh+0x68>
    case 24: tbl(0b01); break;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	332c      	adds	r3, #44	@ 0x2c
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2101      	movs	r1, #1
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	4798      	blx	r3
 800376e:	e00f      	b.n	8003790 <_ZN10TMCStepper10blank_timeEh+0x68>
    case 36: tbl(0b10); break;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	332c      	adds	r3, #44	@ 0x2c
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2102      	movs	r1, #2
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	4798      	blx	r3
 800377e:	e007      	b.n	8003790 <_ZN10TMCStepper10blank_timeEh+0x68>
    case 54: tbl(0b11); break;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	332c      	adds	r3, #44	@ 0x2c
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2103      	movs	r1, #3
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	4798      	blx	r3
 800378e:	bf00      	nop
}
 8003790:	bf00      	nop
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <_ZN10TMCStepper10TPOWERDOWNEh>:
bool  TMCStepper::drv_err()  { GSTAT_t r; r.sr = GSTAT(); return r.drv_err; }
bool  TMCStepper::uv_cp()    { GSTAT_t r; r.sr = GSTAT(); return r.uv_cp; }
///////////////////////////////////////////////////////////////////////////////////////
// W: TPOWERDOWN
uint8_t TMCStepper::TPOWERDOWN() { return TPOWERDOWN_register.sr; }
void TMCStepper::TPOWERDOWN(uint8_t input) {
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	460b      	mov	r3, r1
 80037a2:	70fb      	strb	r3, [r7, #3]
  TPOWERDOWN_register.sr = input;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	78fa      	ldrb	r2, [r7, #3]
 80037a8:	71da      	strb	r2, [r3, #7]
  write(TPOWERDOWN_register.address, TPOWERDOWN_register.sr);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	79d2      	ldrb	r2, [r2, #7]
 80037b4:	2111      	movs	r1, #17
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	4798      	blx	r3
}
 80037ba:	bf00      	nop
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
	...

080037c4 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>:

#if _GLIBCXX_USE_C99_STDLIB
  // 21.4 Numeric Conversions [string.conversions].
  inline int
  stoi(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::strtol, "stoi", __str.c_str(),
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af02      	add	r7, sp, #8
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f020 fd45 	bl	8024260 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80037d6:	4602      	mov	r2, r0
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	9300      	str	r3, [sp, #0]
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	4904      	ldr	r1, [pc, #16]	@ (80037f0 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x2c>)
 80037e0:	4804      	ldr	r0, [pc, #16]	@ (80037f4 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x30>)
 80037e2:	f000 fa34 	bl	8003c4e <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>
 80037e6:	4603      	mov	r3, r0
					__idx, __base); }
 80037e8:	4618      	mov	r0, r3
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	08025878 	.word	0x08025878
 80037f4:	08024861 	.word	0x08024861

080037f8 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>:
#include "pin.h"
#include <cstdio>

Pin::Pin(const std::string& portAndPin, int dir) 
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	607a      	str	r2, [r7, #4]
    : portAndPin(portAndPin), dir(dir), modifier(NONE) {
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	68b9      	ldr	r1, [r7, #8]
 8003808:	4618      	mov	r0, r3
 800380a:	f020 fd56 	bl	80242ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	b2da      	uxtb	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	761a      	strb	r2, [r3, #24]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	765a      	strb	r2, [r3, #25]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	332c      	adds	r3, #44	@ 0x2c
 8003820:	2200      	movs	r2, #0
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	605a      	str	r2, [r3, #4]
 8003826:	609a      	str	r2, [r3, #8]
 8003828:	60da      	str	r2, [r3, #12]
 800382a:	611a      	str	r2, [r3, #16]
    configurePin();
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f000 f835 	bl	800389c <_ZN3Pin12configurePinEv>
    enableClock();
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f000 f8a8 	bl	8003988 <_ZN3Pin11enableClockEv>
    initialisePin();
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f000 f949 	bl	8003ad0 <_ZN3Pin13initialisePinEv>
}
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	4618      	mov	r0, r3
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii>:

Pin::Pin(const std::string& portAndPin, int dir, int modifier) 
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
 8003854:	603b      	str	r3, [r7, #0]
    : portAndPin(portAndPin), dir(dir), modifier(modifier) {
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	68b9      	ldr	r1, [r7, #8]
 800385a:	4618      	mov	r0, r3
 800385c:	f020 fd2d 	bl	80242ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	b2da      	uxtb	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	761a      	strb	r2, [r3, #24]
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	b2da      	uxtb	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	765a      	strb	r2, [r3, #25]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	332c      	adds	r3, #44	@ 0x2c
 8003874:	2200      	movs	r2, #0
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	605a      	str	r2, [r3, #4]
 800387a:	609a      	str	r2, [r3, #8]
 800387c:	60da      	str	r2, [r3, #12]
 800387e:	611a      	str	r2, [r3, #16]
    configurePin();
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f000 f80b 	bl	800389c <_ZN3Pin12configurePinEv>
    enableClock();
 8003886:	68f8      	ldr	r0, [r7, #12]
 8003888:	f000 f87e 	bl	8003988 <_ZN3Pin11enableClockEv>
    initialisePin();
 800388c:	68f8      	ldr	r0, [r7, #12]
 800388e:	f000 f91f 	bl	8003ad0 <_ZN3Pin13initialisePinEv>
}
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	4618      	mov	r0, r3
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <_ZN3Pin12configurePinEv>:

void Pin::configurePin() {
 800389c:	b5b0      	push	{r4, r5, r7, lr}
 800389e:	b090      	sub	sp, #64	@ 0x40
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
    GPIO_TypeDef* gpioPorts[8] = {GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, GPIOF, GPIOG, GPIOH};
 80038a4:	4b36      	ldr	r3, [pc, #216]	@ (8003980 <_ZN3Pin12configurePinEv+0xe4>)
 80038a6:	f107 0408 	add.w	r4, r7, #8
 80038aa:	461d      	mov	r5, r3
 80038ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038b0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80038b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    if (portAndPin[0] == 'P') {
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2100      	movs	r1, #0
 80038bc:	4618      	mov	r0, r3
 80038be:	f020 fc83 	bl	80241c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80038c2:	4603      	mov	r3, r0
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	2b50      	cmp	r3, #80	@ 0x50
 80038c8:	bf0c      	ite	eq
 80038ca:	2301      	moveq	r3, #1
 80038cc:	2300      	movne	r3, #0
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d042      	beq.n	800395a <_ZN3Pin12configurePinEv+0xbe>
        portIndex = portAndPin[1] - 'A';
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2101      	movs	r1, #1
 80038d8:	4618      	mov	r0, r3
 80038da:	f020 fc75 	bl	80241c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80038de:	4603      	mov	r3, r0
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	3b41      	subs	r3, #65	@ 0x41
 80038e4:	b2da      	uxtb	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	769a      	strb	r2, [r3, #26]
        pinNumber = std::stoi(portAndPin.substr(3));
 80038ea:	6879      	ldr	r1, [r7, #4]
 80038ec:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80038f0:	f04f 33ff 	mov.w	r3, #4294967295
 80038f4:	2203      	movs	r2, #3
 80038f6:	f020 fd11 	bl	802431c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 80038fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80038fe:	220a      	movs	r2, #10
 8003900:	2100      	movs	r1, #0
 8003902:	4618      	mov	r0, r3
 8003904:	f7ff ff5e 	bl	80037c4 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8003908:	4603      	mov	r3, r0
 800390a:	b29a      	uxth	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	839a      	strh	r2, [r3, #28]
 8003910:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003914:	4618      	mov	r0, r3
 8003916:	f020 fb92 	bl	802403e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        pin = 1 << pinNumber;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	8b9b      	ldrh	r3, [r3, #28]
 800391e:	461a      	mov	r2, r3
 8003920:	2301      	movs	r3, #1
 8003922:	4093      	lsls	r3, r2
 8003924:	b29a      	uxth	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	83da      	strh	r2, [r3, #30]
    } else {
        printf("Invalid port and pin definition\n");
        return;
    }
    
    GPIOx = gpioPorts[portIndex];
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	7e9b      	ldrb	r3, [r3, #26]
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	3340      	adds	r3, #64	@ 0x40
 8003932:	443b      	add	r3, r7
 8003934:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	629a      	str	r2, [r3, #40]	@ 0x28
    
    mode = (dir == INPUT) ? GPIO_MODE_INPUT : GPIO_MODE_OUTPUT_PP;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	7e1b      	ldrb	r3, [r3, #24]
 8003940:	2b00      	cmp	r3, #0
 8003942:	bf14      	ite	ne
 8003944:	2301      	movne	r3, #1
 8003946:	2300      	moveq	r3, #0
 8003948:	b2db      	uxtb	r3, r3
 800394a:	461a      	mov	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	621a      	str	r2, [r3, #32]
    pull = (modifier == PULLUP) ? GPIO_PULLUP :
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	7e5b      	ldrb	r3, [r3, #25]
 8003954:	2b02      	cmp	r3, #2
 8003956:	d00c      	beq.n	8003972 <_ZN3Pin12configurePinEv+0xd6>
 8003958:	e003      	b.n	8003962 <_ZN3Pin12configurePinEv+0xc6>
        printf("Invalid port and pin definition\n");
 800395a:	480a      	ldr	r0, [pc, #40]	@ (8003984 <_ZN3Pin12configurePinEv+0xe8>)
 800395c:	f021 f8bc 	bl	8024ad8 <puts>
 8003960:	e00a      	b.n	8003978 <_ZN3Pin12configurePinEv+0xdc>
           (modifier == PULLDOWN) ? GPIO_PULLDOWN :
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	7e5b      	ldrb	r3, [r3, #25]
    pull = (modifier == PULLUP) ? GPIO_PULLUP :
 8003966:	2b03      	cmp	r3, #3
 8003968:	d101      	bne.n	800396e <_ZN3Pin12configurePinEv+0xd2>
 800396a:	2302      	movs	r3, #2
 800396c:	e002      	b.n	8003974 <_ZN3Pin12configurePinEv+0xd8>
 800396e:	2300      	movs	r3, #0
 8003970:	e000      	b.n	8003974 <_ZN3Pin12configurePinEv+0xd8>
 8003972:	2301      	movs	r3, #1
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	6253      	str	r3, [r2, #36]	@ 0x24
           GPIO_NOPULL;
}
 8003978:	3740      	adds	r7, #64	@ 0x40
 800397a:	46bd      	mov	sp, r7
 800397c:	bdb0      	pop	{r4, r5, r7, pc}
 800397e:	bf00      	nop
 8003980:	080258a0 	.word	0x080258a0
 8003984:	08025880 	.word	0x08025880

08003988 <_ZN3Pin11enableClockEv>:

void Pin::enableClock() {
 8003988:	b480      	push	{r7}
 800398a:	b08b      	sub	sp, #44	@ 0x2c
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
    switch (portIndex) {
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	7e9b      	ldrb	r3, [r3, #26]
 8003994:	2b07      	cmp	r3, #7
 8003996:	f200 8093 	bhi.w	8003ac0 <_ZN3Pin11enableClockEv+0x138>
 800399a:	a201      	add	r2, pc, #4	@ (adr r2, 80039a0 <_ZN3Pin11enableClockEv+0x18>)
 800399c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a0:	080039c1 	.word	0x080039c1
 80039a4:	080039e1 	.word	0x080039e1
 80039a8:	08003a01 	.word	0x08003a01
 80039ac:	08003a21 	.word	0x08003a21
 80039b0:	08003a41 	.word	0x08003a41
 80039b4:	08003a61 	.word	0x08003a61
 80039b8:	08003a81 	.word	0x08003a81
 80039bc:	08003aa1 	.word	0x08003aa1
        case 0: __HAL_RCC_GPIOA_CLK_ENABLE(); break;
 80039c0:	4b42      	ldr	r3, [pc, #264]	@ (8003acc <_ZN3Pin11enableClockEv+0x144>)
 80039c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039c6:	4a41      	ldr	r2, [pc, #260]	@ (8003acc <_ZN3Pin11enableClockEv+0x144>)
 80039c8:	f043 0301 	orr.w	r3, r3, #1
 80039cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80039d0:	4b3e      	ldr	r3, [pc, #248]	@ (8003acc <_ZN3Pin11enableClockEv+0x144>)
 80039d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	627b      	str	r3, [r7, #36]	@ 0x24
 80039dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039de:	e06f      	b.n	8003ac0 <_ZN3Pin11enableClockEv+0x138>
        case 1: __HAL_RCC_GPIOB_CLK_ENABLE(); break;
 80039e0:	4b3a      	ldr	r3, [pc, #232]	@ (8003acc <_ZN3Pin11enableClockEv+0x144>)
 80039e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039e6:	4a39      	ldr	r2, [pc, #228]	@ (8003acc <_ZN3Pin11enableClockEv+0x144>)
 80039e8:	f043 0302 	orr.w	r3, r3, #2
 80039ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80039f0:	4b36      	ldr	r3, [pc, #216]	@ (8003acc <_ZN3Pin11enableClockEv+0x144>)
 80039f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	623b      	str	r3, [r7, #32]
 80039fc:	6a3b      	ldr	r3, [r7, #32]
 80039fe:	e05f      	b.n	8003ac0 <_ZN3Pin11enableClockEv+0x138>
        case 2: __HAL_RCC_GPIOC_CLK_ENABLE(); break;
 8003a00:	4b32      	ldr	r3, [pc, #200]	@ (8003acc <_ZN3Pin11enableClockEv+0x144>)
 8003a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a06:	4a31      	ldr	r2, [pc, #196]	@ (8003acc <_ZN3Pin11enableClockEv+0x144>)
 8003a08:	f043 0304 	orr.w	r3, r3, #4
 8003a0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003a10:	4b2e      	ldr	r3, [pc, #184]	@ (8003acc <_ZN3Pin11enableClockEv+0x144>)
 8003a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a16:	f003 0304 	and.w	r3, r3, #4
 8003a1a:	61fb      	str	r3, [r7, #28]
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	e04f      	b.n	8003ac0 <_ZN3Pin11enableClockEv+0x138>
        case 3: __HAL_RCC_GPIOD_CLK_ENABLE(); break;
 8003a20:	4b2a      	ldr	r3, [pc, #168]	@ (8003acc <_ZN3Pin11enableClockEv+0x144>)
 8003a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a26:	4a29      	ldr	r2, [pc, #164]	@ (8003acc <_ZN3Pin11enableClockEv+0x144>)
 8003a28:	f043 0308 	orr.w	r3, r3, #8
 8003a2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003a30:	4b26      	ldr	r3, [pc, #152]	@ (8003acc <_ZN3Pin11enableClockEv+0x144>)
 8003a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a36:	f003 0308 	and.w	r3, r3, #8
 8003a3a:	61bb      	str	r3, [r7, #24]
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	e03f      	b.n	8003ac0 <_ZN3Pin11enableClockEv+0x138>
        case 4: __HAL_RCC_GPIOE_CLK_ENABLE(); break;
 8003a40:	4b22      	ldr	r3, [pc, #136]	@ (8003acc <_ZN3Pin11enableClockEv+0x144>)
 8003a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a46:	4a21      	ldr	r2, [pc, #132]	@ (8003acc <_ZN3Pin11enableClockEv+0x144>)
 8003a48:	f043 0310 	orr.w	r3, r3, #16
 8003a4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003a50:	4b1e      	ldr	r3, [pc, #120]	@ (8003acc <_ZN3Pin11enableClockEv+0x144>)
 8003a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a56:	f003 0310 	and.w	r3, r3, #16
 8003a5a:	617b      	str	r3, [r7, #20]
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	e02f      	b.n	8003ac0 <_ZN3Pin11enableClockEv+0x138>
        case 5: __HAL_RCC_GPIOF_CLK_ENABLE(); break;
 8003a60:	4b1a      	ldr	r3, [pc, #104]	@ (8003acc <_ZN3Pin11enableClockEv+0x144>)
 8003a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a66:	4a19      	ldr	r2, [pc, #100]	@ (8003acc <_ZN3Pin11enableClockEv+0x144>)
 8003a68:	f043 0320 	orr.w	r3, r3, #32
 8003a6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003a70:	4b16      	ldr	r3, [pc, #88]	@ (8003acc <_ZN3Pin11enableClockEv+0x144>)
 8003a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a76:	f003 0320 	and.w	r3, r3, #32
 8003a7a:	613b      	str	r3, [r7, #16]
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	e01f      	b.n	8003ac0 <_ZN3Pin11enableClockEv+0x138>
        case 6: __HAL_RCC_GPIOG_CLK_ENABLE(); break;
 8003a80:	4b12      	ldr	r3, [pc, #72]	@ (8003acc <_ZN3Pin11enableClockEv+0x144>)
 8003a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a86:	4a11      	ldr	r2, [pc, #68]	@ (8003acc <_ZN3Pin11enableClockEv+0x144>)
 8003a88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003a90:	4b0e      	ldr	r3, [pc, #56]	@ (8003acc <_ZN3Pin11enableClockEv+0x144>)
 8003a92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a9a:	60fb      	str	r3, [r7, #12]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	e00f      	b.n	8003ac0 <_ZN3Pin11enableClockEv+0x138>
        case 7: __HAL_RCC_GPIOH_CLK_ENABLE(); break;
 8003aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8003acc <_ZN3Pin11enableClockEv+0x144>)
 8003aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003aa6:	4a09      	ldr	r2, [pc, #36]	@ (8003acc <_ZN3Pin11enableClockEv+0x144>)
 8003aa8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003aac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003ab0:	4b06      	ldr	r3, [pc, #24]	@ (8003acc <_ZN3Pin11enableClockEv+0x144>)
 8003ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ab6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aba:	60bb      	str	r3, [r7, #8]
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	bf00      	nop
    }
}
 8003ac0:	bf00      	nop
 8003ac2:	372c      	adds	r7, #44	@ 0x2c
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr
 8003acc:	58024400 	.word	0x58024400

08003ad0 <_ZN3Pin13initialisePinEv>:

void Pin::initialisePin() {
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(GPIOx, pin, GPIO_PIN_RESET);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	8bdb      	ldrh	r3, [r3, #30]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	f016 fb74 	bl	801a1d0 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = pin;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	8bdb      	ldrh	r3, [r3, #30]
 8003aec:	461a      	mov	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	62da      	str	r2, [r3, #44]	@ 0x2c
    GPIO_InitStruct.Mode = mode;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a1a      	ldr	r2, [r3, #32]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	631a      	str	r2, [r3, #48]	@ 0x30
    GPIO_InitStruct.Pull = pull;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	635a      	str	r2, [r3, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2202      	movs	r2, #2
 8003b06:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	332c      	adds	r3, #44	@ 0x2c
 8003b10:	4619      	mov	r1, r3
 8003b12:	4610      	mov	r0, r2
 8003b14:	f016 f994 	bl	8019e40 <HAL_GPIO_Init>
}
 8003b18:	bf00      	nop
 8003b1a:	3708      	adds	r7, #8
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <_ZNK3Pin3getEv>:

bool Pin::get() const {
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
    return HAL_GPIO_ReadPin(GPIOx, pin);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	8bdb      	ldrh	r3, [r3, #30]
 8003b30:	4619      	mov	r1, r3
 8003b32:	4610      	mov	r0, r2
 8003b34:	f016 fb34 	bl	801a1a0 <HAL_GPIO_ReadPin>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	bf14      	ite	ne
 8003b3e:	2301      	movne	r3, #1
 8003b40:	2300      	moveq	r3, #0
 8003b42:	b2db      	uxtb	r3, r3
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3708      	adds	r7, #8
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <_ZN3Pin3setEb>:

void Pin::set(bool value) {
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	460b      	mov	r3, r1
 8003b56:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(GPIOx, pin, value ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	8bd9      	ldrh	r1, [r3, #30]
 8003b60:	78fb      	ldrb	r3, [r7, #3]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <_ZN3Pin3setEb+0x1e>
 8003b66:	2301      	movs	r3, #1
 8003b68:	e000      	b.n	8003b6c <_ZN3Pin3setEb+0x20>
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	f016 fb2f 	bl	801a1d0 <HAL_GPIO_WritePin>
}
 8003b72:	bf00      	nop
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <_ZN3Pin11setAsOutputEv>:

void Pin::setAsOutput() {
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b082      	sub	sp, #8
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
    mode = GPIO_MODE_OUTPUT_PP;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	621a      	str	r2, [r3, #32]
    pull = GPIO_NOPULL;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	625a      	str	r2, [r3, #36]	@ 0x24
    initialisePin();
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f7ff ff9e 	bl	8003ad0 <_ZN3Pin13initialisePinEv>
}
 8003b94:	bf00      	nop
 8003b96:	3708      	adds	r7, #8
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <_ZN3Pin10setAsInputEv>:

void Pin::setAsInput() {
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
    mode = GPIO_MODE_INPUT;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	621a      	str	r2, [r3, #32]
    pull = GPIO_NOPULL;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	625a      	str	r2, [r3, #36]	@ 0x24
    initialisePin();
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f7ff ff8d 	bl	8003ad0 <_ZN3Pin13initialisePinEv>
}
 8003bb6:	bf00      	nop
 8003bb8:	3708      	adds	r7, #8
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <_ZN3Pin9setPullUpEv>:
void Pin::setPullNone() {
    pull = GPIO_NOPULL;
    initialisePin();
}

void Pin::setPullUp() {
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b082      	sub	sp, #8
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
    pull = GPIO_PULLUP;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	625a      	str	r2, [r3, #36]	@ 0x24
    initialisePin();
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f7ff ff7f 	bl	8003ad0 <_ZN3Pin13initialisePinEv>
}
 8003bd2:	bf00      	nop
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>:
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
	_Save_errno() : _M_errno(errno) { errno = 0; }
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b082      	sub	sp, #8
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
 8003be2:	f021 f925 	bl	8024e30 <__errno>
 8003be6:	4603      	mov	r3, r0
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	601a      	str	r2, [r3, #0]
 8003bee:	f021 f91f 	bl	8024e30 <__errno>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	601a      	str	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>:
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
 8003c02:	b590      	push	{r4, r7, lr}
 8003c04:	b083      	sub	sp, #12
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
 8003c0a:	f021 f911 	bl	8024e30 <__errno>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	bf0c      	ite	eq
 8003c16:	2301      	moveq	r3, #1
 8003c18:	2300      	movne	r3, #0
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d005      	beq.n	8003c2c <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev+0x2a>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681c      	ldr	r4, [r3, #0]
 8003c24:	f021 f904 	bl	8024e30 <__errno>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	601c      	str	r4, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd90      	pop	{r4, r7, pc}

08003c36 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb1EE>:
      struct _Range_chk {
	  static bool
	  _S_chk(_TRet, std::false_type) { return false; }

	  static bool
	  _S_chk(_TRet __val, std::true_type) // only called when _Ret is int
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
 8003c3e:	7039      	strb	r1, [r7, #0]
	  {
	    return __val < _TRet(__numeric_traits<int>::__min)
	      || __val > _TRet(__numeric_traits<int>::__max);
 8003c40:	2300      	movs	r3, #0
	  }
 8003c42:	4618      	mov	r0, r3
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>:
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
 8003c4e:	b590      	push	{r4, r7, lr}
 8003c50:	b08b      	sub	sp, #44	@ 0x2c
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	60f8      	str	r0, [r7, #12]
 8003c56:	60b9      	str	r1, [r7, #8]
 8003c58:	607a      	str	r2, [r7, #4]
 8003c5a:	603b      	str	r3, [r7, #0]
      } const __save_errno;
 8003c5c:	f107 0314 	add.w	r3, r7, #20
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7ff ffba 	bl	8003bda <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f107 0118 	add.w	r1, r7, #24
 8003c6c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	4798      	blx	r3
 8003c72:	6278      	str	r0, [r7, #36]	@ 0x24

      if (__endptr == __str)
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d102      	bne.n	8003c82 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x34>
	std::__throw_invalid_argument(__name);
 8003c7c:	68b8      	ldr	r0, [r7, #8]
 8003c7e:	f020 f90b 	bl	8023e98 <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
 8003c82:	f021 f8d5 	bl	8024e30 <__errno>
 8003c86:	4603      	mov	r3, r0
 8003c88:	681b      	ldr	r3, [r3, #0]
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 8003c8a:	2b22      	cmp	r3, #34	@ 0x22
 8003c8c:	d006      	beq.n	8003c9c <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x4e>
 8003c8e:	4621      	mov	r1, r4
 8003c90:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003c92:	f7ff ffd0 	bl	8003c36 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb1EE>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x52>
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e000      	b.n	8003ca2 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x54>
 8003ca0:	2300      	movs	r3, #0
      else if (errno == ERANGE
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d002      	beq.n	8003cac <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x5e>
	std::__throw_out_of_range(__name);
 8003ca6:	68b8      	ldr	r0, [r7, #8]
 8003ca8:	f020 f8fc 	bl	8023ea4 <_ZSt20__throw_out_of_rangePKc>
      else
	__ret = __tmp;
 8003cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cae:	623b      	str	r3, [r7, #32]

      if (__idx)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d005      	beq.n	8003cc2 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x74>
	*__idx = __endptr - __str;
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	601a      	str	r2, [r3, #0]

      return __ret;
 8003cc2:	6a3c      	ldr	r4, [r7, #32]
    }
 8003cc4:	f107 0314 	add.w	r3, r7, #20
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7ff ff9a 	bl	8003c02 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>
      return __ret;
 8003cce:	4623      	mov	r3, r4
    }
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	372c      	adds	r7, #44	@ 0x2c
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd90      	pop	{r4, r7, pc}

08003cd8 <_ZN9InterruptC1Ev>:

// Define the vector table, it is only declared in the class declaration
Interrupt* Interrupt::ISRVectorTable[] = {0};

// Constructor
Interrupt::Interrupt(void){}
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	4a04      	ldr	r2, [pc, #16]	@ (8003cf4 <_ZN9InterruptC1Ev+0x1c>)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	601a      	str	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr
 8003cf4:	08026620 	.word	0x08026620

08003cf8 <_ZN9Interrupt8RegisterEiPS_>:


// Methods

void Interrupt::Register(int interruptNumber, Interrupt* intThisPtr)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
	printf("Registering interrupt for interrupt number = %d\n", interruptNumber);
 8003d02:	6879      	ldr	r1, [r7, #4]
 8003d04:	4805      	ldr	r0, [pc, #20]	@ (8003d1c <_ZN9Interrupt8RegisterEiPS_+0x24>)
 8003d06:	f020 fe77 	bl	80249f8 <iprintf>
	ISRVectorTable[interruptNumber] = intThisPtr;
 8003d0a:	4905      	ldr	r1, [pc, #20]	@ (8003d20 <_ZN9Interrupt8RegisterEiPS_+0x28>)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003d14:	bf00      	nop
 8003d16:	3708      	adds	r7, #8
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	080258c0 	.word	0x080258c0
 8003d20:	240000a4 	.word	0x240000a4

08003d24 <_ZN9Interrupt13EXTI4_WrapperEv>:

void Interrupt::EXTI4_Wrapper(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	af00      	add	r7, sp, #0
	ISRVectorTable[EXTI4_IRQn]->ISR_Handler();
 8003d28:	4b04      	ldr	r3, [pc, #16]	@ (8003d3c <_ZN9Interrupt13EXTI4_WrapperEv+0x18>)
 8003d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a02      	ldr	r2, [pc, #8]	@ (8003d3c <_ZN9Interrupt13EXTI4_WrapperEv+0x18>)
 8003d32:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003d34:	4610      	mov	r0, r2
 8003d36:	4798      	blx	r3
}
 8003d38:	bf00      	nop
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	240000a4 	.word	0x240000a4

08003d40 <_ZN9Interrupt20DMA1_Stream0_WrapperEv>:

void Interrupt::DMA1_Stream0_Wrapper(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0
	ISRVectorTable[DMA1_Stream0_IRQn]->ISR_Handler();
 8003d44:	4b04      	ldr	r3, [pc, #16]	@ (8003d58 <_ZN9Interrupt20DMA1_Stream0_WrapperEv+0x18>)
 8003d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a02      	ldr	r2, [pc, #8]	@ (8003d58 <_ZN9Interrupt20DMA1_Stream0_WrapperEv+0x18>)
 8003d4e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003d50:	4610      	mov	r0, r2
 8003d52:	4798      	blx	r3
}
 8003d54:	bf00      	nop
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	240000a4 	.word	0x240000a4

08003d5c <_ZN9Interrupt20DMA1_Stream1_WrapperEv>:

void Interrupt::DMA1_Stream1_Wrapper(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
	ISRVectorTable[DMA1_Stream1_IRQn]->ISR_Handler();
 8003d60:	4b04      	ldr	r3, [pc, #16]	@ (8003d74 <_ZN9Interrupt20DMA1_Stream1_WrapperEv+0x18>)
 8003d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a02      	ldr	r2, [pc, #8]	@ (8003d74 <_ZN9Interrupt20DMA1_Stream1_WrapperEv+0x18>)
 8003d6a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003d6c:	4610      	mov	r0, r2
 8003d6e:	4798      	blx	r3
}
 8003d70:	bf00      	nop
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	240000a4 	.word	0x240000a4

08003d78 <_ZN9Interrupt12TIM2_WrapperEv>:


void Interrupt::TIM2_Wrapper(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM2_IRQn]->ISR_Handler();
 8003d7c:	4b04      	ldr	r3, [pc, #16]	@ (8003d90 <_ZN9Interrupt12TIM2_WrapperEv+0x18>)
 8003d7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a02      	ldr	r2, [pc, #8]	@ (8003d90 <_ZN9Interrupt12TIM2_WrapperEv+0x18>)
 8003d86:	6f12      	ldr	r2, [r2, #112]	@ 0x70
 8003d88:	4610      	mov	r0, r2
 8003d8a:	4798      	blx	r3
}
 8003d8c:	bf00      	nop
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	240000a4 	.word	0x240000a4

08003d94 <_ZN9Interrupt12TIM3_WrapperEv>:

void Interrupt::TIM3_Wrapper(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM3_IRQn]->ISR_Handler();
 8003d98:	4b04      	ldr	r3, [pc, #16]	@ (8003dac <_ZN9Interrupt12TIM3_WrapperEv+0x18>)
 8003d9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a02      	ldr	r2, [pc, #8]	@ (8003dac <_ZN9Interrupt12TIM3_WrapperEv+0x18>)
 8003da2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003da4:	4610      	mov	r0, r2
 8003da6:	4798      	blx	r3
}
 8003da8:	bf00      	nop
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	240000a4 	.word	0x240000a4

08003db0 <_ZN9Interrupt12TIM4_WrapperEv>:

void Interrupt::TIM4_Wrapper(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM4_IRQn]->ISR_Handler();
 8003db4:	4b04      	ldr	r3, [pc, #16]	@ (8003dc8 <_ZN9Interrupt12TIM4_WrapperEv+0x18>)
 8003db6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a02      	ldr	r2, [pc, #8]	@ (8003dc8 <_ZN9Interrupt12TIM4_WrapperEv+0x18>)
 8003dbe:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8003dc0:	4610      	mov	r0, r2
 8003dc2:	4798      	blx	r3
}
 8003dc4:	bf00      	nop
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	240000a4 	.word	0x240000a4

08003dcc <_ZSt23__is_constant_evaluatedv>:
  // This can be used without checking if the compiler supports the feature.
  // The macro _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED can be used to check if
  // the compiler support is present to make this function work as expected.
  _GLIBCXX_CONSTEXPR inline bool
  __is_constant_evaluated() _GLIBCXX_NOEXCEPT
  {
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
#if __cpp_if_consteval >= 202106L
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    if consteval { return true; } else { return false; }
#elif __cplusplus >= 201103L && __has_builtin(__builtin_is_constant_evaluated)
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    return __builtin_is_constant_evaluated();
 8003dd0:	2300      	movs	r3, #0
#else
    return false;
#endif
  }
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <_ZNSt11char_traitsIcE6lengthEPKc>:
#endif
	return __builtin_memcmp(__s1, __s2, __n);
      }

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus >= 201703L
	if (std::__is_constant_evaluated())
 8003de4:	f7ff fff2 	bl	8003dcc <_ZSt23__is_constant_evaluatedv>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d004      	beq.n	8003df8 <_ZNSt11char_traitsIcE6lengthEPKc+0x1c>
	  return __gnu_cxx::char_traits<char_type>::length(__s);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f002 f948 	bl	8006084 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>
 8003df4:	4603      	mov	r3, r0
 8003df6:	e004      	b.n	8003e02 <_ZNSt11char_traitsIcE6lengthEPKc+0x26>
#endif
	return __builtin_strlen(__s);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f7fc fad1 	bl	80003a0 <strlen>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	bf00      	nop
      }
 8003e02:	4618      	mov	r0, r3
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator8allocateEj>:
};

namespace detail {
class DefaultAllocator : public Allocator {
 public:
  void* allocate(size_t size) override {
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b082      	sub	sp, #8
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
 8003e12:	6039      	str	r1, [r7, #0]
    return malloc(size);
 8003e14:	6838      	ldr	r0, [r7, #0]
 8003e16:	f020 fbb5 	bl	8024584 <malloc>
 8003e1a:	4603      	mov	r3, r0
  }
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3708      	adds	r7, #8
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator10deallocateEPv>:

  void deallocate(void* ptr) override {
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
    free(ptr);
 8003e2e:	6838      	ldr	r0, [r7, #0]
 8003e30:	f020 fbb0 	bl	8024594 <free>
  }
 8003e34:	bf00      	nop
 8003e36:	3708      	adds	r7, #8
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator10reallocateEPvj>:

  void* reallocate(void* ptr, size_t new_size) override {
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
    return realloc(ptr, new_size);
 8003e48:	6879      	ldr	r1, [r7, #4]
 8003e4a:	68b8      	ldr	r0, [r7, #8]
 8003e4c:	f020 fc58 	bl	8024700 <realloc>
 8003e50:	4603      	mov	r3, r0
  }
 8003e52:	4618      	mov	r0, r3
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
	...

08003e5c <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator8instanceEv>:

  static Allocator* instance() {
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0
    static DefaultAllocator allocator;
    return &allocator;
 8003e60:	4b02      	ldr	r3, [pc, #8]	@ (8003e6c <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator8instanceEv+0x10>)
  }
 8003e62:	4618      	mov	r0, r3
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr
 8003e6c:	24000000 	.word	0x24000000

08003e70 <_ZN11ArduinoJson8V730HB226detail10StringNode13sizeForLengthEj>:
  length_type length;
  char data[1];

  static constexpr size_t maxLength = numeric_limits<length_type>::highest();

  static constexpr size_t sizeForLength(size_t n) {
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
    return n + 1 + offsetof(StringNode, data);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	3309      	adds	r3, #9
  }
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE>:

  static StringNode* create(size_t length, Allocator* allocator) {
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
    if (length > maxLength)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e98:	d301      	bcc.n	8003e9e <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x16>
      return nullptr;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	e01b      	b.n	8003ed6 <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x4e>
    auto size = sizeForLength(length);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7ff ffe6 	bl	8003e70 <_ZN11ArduinoJson8V730HB226detail10StringNode13sizeForLengthEj>
 8003ea4:	60f8      	str	r0, [r7, #12]
    if (size < length)  // integer overflow
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d201      	bcs.n	8003eb2 <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x2a>
      return nullptr;   // (not testable on 64-bit)
 8003eae:	2300      	movs	r3, #0
 8003eb0:	e011      	b.n	8003ed6 <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x4e>
    auto node = reinterpret_cast<StringNode*>(allocator->allocate(size));
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68f9      	ldr	r1, [r7, #12]
 8003eba:	6838      	ldr	r0, [r7, #0]
 8003ebc:	4798      	blx	r3
 8003ebe:	60b8      	str	r0, [r7, #8]
    if (node) {
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d006      	beq.n	8003ed4 <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x4c>
      node->length = length_type(length);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	80da      	strh	r2, [r3, #6]
      node->references = 1;
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	809a      	strh	r2, [r3, #4]
    }
    return node;
 8003ed4:	68bb      	ldr	r3, [r7, #8]
  }
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE>:

  static StringNode* resize(StringNode* node, size_t length,
 8003ede:	b5b0      	push	{r4, r5, r7, lr}
 8003ee0:	b086      	sub	sp, #24
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	60f8      	str	r0, [r7, #12]
 8003ee6:	60b9      	str	r1, [r7, #8]
 8003ee8:	607a      	str	r2, [r7, #4]
                            Allocator* allocator) {
    ARDUINOJSON_ASSERT(node != nullptr);
    StringNode* newNode;
    if (length <= maxLength)
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ef0:	d20e      	bcs.n	8003f10 <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE+0x32>
      newNode = reinterpret_cast<StringNode*>(
          allocator->reallocate(node, sizeForLength(length)));
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	3308      	adds	r3, #8
 8003ef8:	681c      	ldr	r4, [r3, #0]
 8003efa:	687d      	ldr	r5, [r7, #4]
 8003efc:	68b8      	ldr	r0, [r7, #8]
 8003efe:	f7ff ffb7 	bl	8003e70 <_ZN11ArduinoJson8V730HB226detail10StringNode13sizeForLengthEj>
 8003f02:	4603      	mov	r3, r0
 8003f04:	461a      	mov	r2, r3
 8003f06:	68f9      	ldr	r1, [r7, #12]
 8003f08:	4628      	mov	r0, r5
 8003f0a:	47a0      	blx	r4
 8003f0c:	6178      	str	r0, [r7, #20]
 8003f0e:	e001      	b.n	8003f14 <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE+0x36>
    else
      newNode = nullptr;
 8003f10:	2300      	movs	r3, #0
 8003f12:	617b      	str	r3, [r7, #20]
    if (newNode)
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d004      	beq.n	8003f24 <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE+0x46>
      newNode->length = length_type(length);
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	80da      	strh	r2, [r3, #6]
 8003f22:	e006      	b.n	8003f32 <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE+0x54>
    else
      allocator->deallocate(node);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	3304      	adds	r3, #4
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68f9      	ldr	r1, [r7, #12]
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	4798      	blx	r3
    return newNode;
 8003f32:	697b      	ldr	r3, [r7, #20]
  }
 8003f34:	4618      	mov	r0, r3
 8003f36:	3718      	adds	r7, #24
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bdb0      	pop	{r4, r5, r7, pc}

08003f3c <_ZN11ArduinoJson8V730HB226detail10StringNode7destroyEPS2_PNS0_9AllocatorE>:

  static void destroy(StringNode* node, Allocator* allocator) {
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
    allocator->deallocate(node);
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	3304      	adds	r3, #4
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	6879      	ldr	r1, [r7, #4]
 8003f50:	6838      	ldr	r0, [r7, #0]
 8003f52:	4798      	blx	r3
  }
 8003f54:	bf00      	nop
 8003f56:	3708      	adds	r7, #8
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>:
  RamString(const char* str, size_t sz, bool isStatic = false)
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
 8003f68:	70fb      	strb	r3, [r7, #3]
      : str_(str), size_(sz & sizeMask), static_(isStatic) {
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	605a      	str	r2, [r3, #4]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	78fa      	ldrb	r2, [r7, #3]
 8003f7a:	721a      	strb	r2, [r3, #8]
  }
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3714      	adds	r7, #20
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>:
  bool isNull() const {
 8003f8a:	b480      	push	{r7}
 8003f8c:	b083      	sub	sp, #12
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
    return !str_;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	bf0c      	ite	eq
 8003f9a:	2301      	moveq	r3, #1
 8003f9c:	2300      	movne	r3, #0
 8003f9e:	b2db      	uxtb	r3, r3
  }
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <_ZNK11ArduinoJson8V730HB226detail9RamString4sizeEv>:
  size_t size() const {
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
    return size_;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
  }
 8003fb8:	4618      	mov	r0, r3
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <_ZNK11ArduinoJson8V730HB226detail9RamString4dataEv>:

  const char* data() const {
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
    return str_;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
  }
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE>:

  friend void swap(StringPool& a, StringPool& b) {
    swap_(a.strings_, b.strings_);
  }

  void clear(Allocator* allocator) {
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
    while (strings_) {
 8003fe6:	e00a      	b.n	8003ffe <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE+0x22>
      auto node = strings_;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	60fb      	str	r3, [r7, #12]
      strings_ = node->next;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	601a      	str	r2, [r3, #0]
      StringNode::destroy(node, allocator);
 8003ff6:	6839      	ldr	r1, [r7, #0]
 8003ff8:	68f8      	ldr	r0, [r7, #12]
 8003ffa:	f7ff ff9f 	bl	8003f3c <_ZN11ArduinoJson8V730HB226detail10StringNode7destroyEPS2_PNS0_9AllocatorE>
    while (strings_) {
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1f0      	bne.n	8003fe8 <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE+0xc>
    }
  }
 8004006:	bf00      	nop
 8004008:	bf00      	nop
 800400a:	3710      	adds	r7, #16
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <_ZN11ArduinoJson8V730HB226detail10StringPool3addEPNS1_10StringNodeE>:
    node->data[n] = 0;  // force NUL terminator
    add(node);
    return node;
  }

  void add(StringNode* node) {
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(node != nullptr);
    node->next = strings_;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	601a      	str	r2, [r3, #0]
    strings_ = node;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	683a      	ldr	r2, [r7, #0]
 8004026:	601a      	str	r2, [r3, #0]
  }
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE>:
        return node;
    }
    return nullptr;
  }

  void dereference(const char* s, Allocator* allocator) {
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
    StringNode* prev = nullptr;
 8004040:	2300      	movs	r3, #0
 8004042:	617b      	str	r3, [r7, #20]
    for (auto node = strings_; node; node = node->next) {
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	613b      	str	r3, [r7, #16]
 800404a:	e029      	b.n	80040a0 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x6c>
      if (node->data == s) {
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	3308      	adds	r3, #8
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	429a      	cmp	r2, r3
 8004054:	d11f      	bne.n	8004096 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x62>
        if (--node->references == 0) {
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	889b      	ldrh	r3, [r3, #4]
 800405a:	3b01      	subs	r3, #1
 800405c:	b29a      	uxth	r2, r3
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	809a      	strh	r2, [r3, #4]
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	889b      	ldrh	r3, [r3, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	bf0c      	ite	eq
 800406a:	2301      	moveq	r3, #1
 800406c:	2300      	movne	r3, #0
 800406e:	b2db      	uxtb	r3, r3
 8004070:	2b00      	cmp	r3, #0
 8004072:	d019      	beq.n	80040a8 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x74>
          if (prev)
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d004      	beq.n	8004084 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x50>
            prev->next = node->next;
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	601a      	str	r2, [r3, #0]
 8004082:	e003      	b.n	800408c <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x58>
          else
            strings_ = node->next;
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	601a      	str	r2, [r3, #0]
          StringNode::destroy(node, allocator);
 800408c:	6879      	ldr	r1, [r7, #4]
 800408e:	6938      	ldr	r0, [r7, #16]
 8004090:	f7ff ff54 	bl	8003f3c <_ZN11ArduinoJson8V730HB226detail10StringNode7destroyEPS2_PNS0_9AllocatorE>
        }
        return;
 8004094:	e008      	b.n	80040a8 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x74>
      }
      prev = node;
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	617b      	str	r3, [r7, #20]
    for (auto node = strings_; node; node = node->next) {
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	613b      	str	r3, [r7, #16]
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1d2      	bne.n	800404c <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x18>
 80040a6:	e000      	b.n	80040aa <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x76>
        return;
 80040a8:	bf00      	nop
    }
  }
 80040aa:	3718      	adds	r7, #24
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <_ZN11ArduinoJson8V730HB2210JsonStringC1Ev>:
// https://arduinojson.org/v7/api/jsonstring/
class JsonString {
  friend struct detail::StringAdapter<JsonString>;

 public:
  JsonString() : str_(nullptr, 0, true) {}
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	2301      	movs	r3, #1
 80040bc:	2200      	movs	r2, #0
 80040be:	2100      	movs	r1, #0
 80040c0:	f7ff ff4c 	bl	8003f5c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4618      	mov	r0, r3
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <_ZN11ArduinoJson8V730HB2210JsonStringC1EPKcb>:

  JsonString(const char* data, bool isStatic = false)
 80040ce:	b590      	push	{r4, r7, lr}
 80040d0:	b085      	sub	sp, #20
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	60f8      	str	r0, [r7, #12]
 80040d6:	60b9      	str	r1, [r7, #8]
 80040d8:	4613      	mov	r3, r2
 80040da:	71fb      	strb	r3, [r7, #7]
      : str_(data, data ? ::strlen(data) : 0, isStatic) {}
 80040dc:	68fc      	ldr	r4, [r7, #12]
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d004      	beq.n	80040ee <_ZN11ArduinoJson8V730HB2210JsonStringC1EPKcb+0x20>
 80040e4:	68b8      	ldr	r0, [r7, #8]
 80040e6:	f7fc f95b 	bl	80003a0 <strlen>
 80040ea:	4602      	mov	r2, r0
 80040ec:	e000      	b.n	80040f0 <_ZN11ArduinoJson8V730HB2210JsonStringC1EPKcb+0x22>
 80040ee:	2200      	movs	r2, #0
 80040f0:	79fb      	ldrb	r3, [r7, #7]
 80040f2:	68b9      	ldr	r1, [r7, #8]
 80040f4:	4620      	mov	r0, r4
 80040f6:	f7ff ff31 	bl	8003f5c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	4618      	mov	r0, r3
 80040fe:	3714      	adds	r7, #20
 8004100:	46bd      	mov	sp, r7
 8004102:	bd90      	pop	{r4, r7, pc}

08004104 <_ZNK11ArduinoJson8V730HB2210JsonString5c_strEv>:
                                int> = 0>
  JsonString(const char* data, TSize sz, bool isStatic = false)
      : str_(data, size_t(sz), isStatic) {}

  // Returns a pointer to the characters.
  const char* c_str() const {
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
    return str_.data();
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4618      	mov	r0, r3
 8004110:	f7ff ff58 	bl	8003fc4 <_ZNK11ArduinoJson8V730HB226detail9RamString4dataEv>
 8004114:	4603      	mov	r3, r0
  }
 8004116:	4618      	mov	r0, r3
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <_ZN11ArduinoJson8V730HB226detail13StringAdapterINS0_10JsonStringEvE5adaptERKS3_>:
namespace detail {
template <>
struct StringAdapter<JsonString> {
  using AdaptedString = RamString;

  static const AdaptedString& adapt(const JsonString& s) {
 800411e:	b480      	push	{r7}
 8004120:	b083      	sub	sp, #12
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
    return s.str_;
 8004126:	687b      	ldr	r3, [r7, #4]
  }
 8004128:	4618      	mov	r0, r3
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1Ev>:

class CollectionIterator {
  friend class CollectionData;

 public:
  CollectionIterator() : slot_(nullptr), currentId_(NULL_SLOT) {}
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	601a      	str	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004148:	809a      	strh	r2, [r3, #4]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4618      	mov	r0, r3
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>:

  void next(const ResourceManager* resources);

  bool done() const {
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
    return slot_ == nullptr;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	bf0c      	ite	eq
 8004168:	2301      	moveq	r3, #1
 800416a:	2300      	movne	r3, #0
 800416c:	b2db      	uxtb	r3, r3
  }
 800416e:	4618      	mov	r0, r3
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <_ZNK11ArduinoJson8V730HB226detail18CollectionIteratorneERKS2_>:

  bool operator==(const CollectionIterator& other) const {
    return slot_ == other.slot_;
  }

  bool operator!=(const CollectionIterator& other) const {
 800417a:	b480      	push	{r7}
 800417c:	b083      	sub	sp, #12
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
 8004182:	6039      	str	r1, [r7, #0]
    return slot_ != other.slot_;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	429a      	cmp	r2, r3
 800418e:	bf14      	ite	ne
 8004190:	2301      	movne	r3, #1
 8004192:	2300      	moveq	r3, #0
 8004194:	b2db      	uxtb	r3, r3
  }
 8004196:	4618      	mov	r0, r3
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr

080041a2 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorptEv>:

  VariantData* operator->() {
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b082      	sub	sp, #8
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(slot_ != nullptr);
    return data();
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 f805 	bl	80041ba <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 80041b0:	4603      	mov	r3, r0
  }
 80041b2:	4618      	mov	r0, r3
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>:
  const VariantData& operator*() const {
    ARDUINOJSON_ASSERT(slot_ != nullptr);
    return *data();
  }

  VariantData* data() {
 80041ba:	b480      	push	{r7}
 80041bc:	b083      	sub	sp, #12
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<VariantData*>(slot_);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
  }
 80041c6:	4618      	mov	r0, r3
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <_ZN11ArduinoJson8V730HB226detail14CollectionDatanwEjPv>:
  SlotId head_ = NULL_SLOT;
  SlotId tail_ = NULL_SLOT;

 public:
  // Placement new
  static void* operator new(size_t, void* p) noexcept {
 80041d2:	b480      	push	{r7}
 80041d4:	b083      	sub	sp, #12
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
 80041da:	6039      	str	r1, [r7, #0]
    return p;
 80041dc:	683b      	ldr	r3, [r7, #0]
  }
 80041de:	4618      	mov	r0, r3
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <_ZN11ArduinoJson8V730HB226detail19collectionToVariantEPNS1_14CollectionDataE>:
    const CollectionData* collection) {
  const void* data = collection;  // prevent warning cast-align
  return reinterpret_cast<const VariantData*>(data);
}

inline VariantData* collectionToVariant(CollectionData* collection) {
 80041ea:	b480      	push	{r7}
 80041ec:	b085      	sub	sp, #20
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
  void* data = collection;  // prevent warning cast-align
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	60fb      	str	r3, [r7, #12]
  return reinterpret_cast<VariantData*>(data);
 80041f6:	68fb      	ldr	r3, [r7, #12]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3714      	adds	r7, #20
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>:
#endif
  Object = 0x20,
  Array = 0x40,
};

inline bool operator&(VariantType type, VariantTypeBits bit) {
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	4603      	mov	r3, r0
 800420c:	460a      	mov	r2, r1
 800420e:	71fb      	strb	r3, [r7, #7]
 8004210:	4613      	mov	r3, r2
 8004212:	71bb      	strb	r3, [r7, #6]
  return (uint8_t(type) & uint8_t(bit)) != 0;
 8004214:	79fa      	ldrb	r2, [r7, #7]
 8004216:	79bb      	ldrb	r3, [r7, #6]
 8004218:	4013      	ands	r3, r2
 800421a:	b2db      	uxtb	r3, r3
 800421c:	2b00      	cmp	r3, #0
 800421e:	bf14      	ite	ne
 8004220:	2301      	movne	r3, #1
 8004222:	2300      	moveq	r3, #0
 8004224:	b2db      	uxtb	r3, r3
}
 8004226:	4618      	mov	r0, r3
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <_ZN11ArduinoJson8V730HB226detail14VariantContentC1Ev>:

union VariantContent {
  VariantContent() {}
 8004232:	b480      	push	{r7}
 8004234:	b083      	sub	sp, #12
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4618      	mov	r0, r3
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <_ZN11ArduinoJson8V730HB226detail11VariantDatanwEjPv>:
  VariantType type_;
  SlotId next_;

 public:
  // Placement new
  static void* operator new(size_t, void* p) noexcept {
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
    return p;
 8004252:	683b      	ldr	r3, [r7, #0]
  }
 8004254:	4618      	mov	r0, r3
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <_ZN11ArduinoJson8V730HB226detail11VariantDataC1Ev>:

  static void operator delete(void*, void*) noexcept {}

  VariantData() : type_(VariantType::Null), next_(NULL_SLOT) {}
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4618      	mov	r0, r3
 800426c:	f7ff ffe1 	bl	8004232 <_ZN11ArduinoJson8V730HB226detail14VariantContentC1Ev>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	711a      	strb	r2, [r3, #4]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800427c:	80da      	strh	r2, [r3, #6]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4618      	mov	r0, r3
 8004282:	3708      	adds	r7, #8
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>:

  SlotId next() const {
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
    return next_;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	88db      	ldrh	r3, [r3, #6]
  }
 8004294:	4618      	mov	r0, r3
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <_ZN11ArduinoJson8V730HB226detail11VariantData7setNextEt>:

  void setNext(SlotId slot) {
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	460b      	mov	r3, r1
 80042aa:	807b      	strh	r3, [r7, #2]
    next_ = slot;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	887a      	ldrh	r2, [r7, #2]
 80042b0:	80da      	strh	r2, [r3, #6]
  }
 80042b2:	bf00      	nop
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr

080042be <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv>:
      default:
        return true;
    }
  }

  ArrayData* asArray() {
 80042be:	b580      	push	{r7, lr}
 80042c0:	b082      	sub	sp, #8
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
    return isArray() ? &content_.asArray : 0;
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 f85f 	bl	800438a <_ZNK11ArduinoJson8V730HB226detail11VariantData7isArrayEv>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d001      	beq.n	80042d6 <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv+0x18>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	e000      	b.n	80042d8 <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv+0x1a>
 80042d6:	2300      	movs	r3, #0
  }
 80042d8:	4618      	mov	r0, r3
 80042da:	3708      	adds	r7, #8
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <_ZN11ArduinoJson8V730HB226detail11VariantData12asCollectionEv>:

  const ArrayData* asArray() const {
    return const_cast<VariantData*>(this)->asArray();
  }

  CollectionData* asCollection() {
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
    return isCollection() ? &content_.asCollection : 0;
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 f85f 	bl	80043ac <_ZNK11ArduinoJson8V730HB226detail11VariantData12isCollectionEv>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d001      	beq.n	80042f8 <_ZN11ArduinoJson8V730HB226detail11VariantData12asCollectionEv+0x18>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	e000      	b.n	80042fa <_ZN11ArduinoJson8V730HB226detail11VariantData12asCollectionEv+0x1a>
 80042f8:	2300      	movs	r3, #0
  }
 80042fa:	4618      	mov	r0, r3
 80042fc:	3708      	adds	r7, #8
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv>:
      default:
        return 0;
    }
  }

  ObjectData* asObject() {
 8004302:	b580      	push	{r7, lr}
 8004304:	b082      	sub	sp, #8
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
    return isObject() ? &content_.asObject : 0;
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 f86c 	bl	80043e8 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isObjectEv>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv+0x18>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	e000      	b.n	800431c <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv+0x1a>
 800431a:	2300      	movs	r3, #0
  }
 800431c:	4618      	mov	r0, r3
 800431e:	3708      	adds	r7, #8
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asObjectEv>:

  const ObjectData* asObject() const {
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
    return const_cast<VariantData*>(this)->asObject();
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f7ff ffe8 	bl	8004302 <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv>
 8004332:	4603      	mov	r3, r0
  }
 8004334:	4618      	mov	r0, r3
 8004336:	3708      	adds	r7, #8
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv>:
      default:
        return JsonString();
    }
  }

  JsonString asString() const {
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
    switch (type_) {
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	791b      	ldrb	r3, [r3, #4]
 800434a:	2b04      	cmp	r3, #4
 800434c:	d002      	beq.n	8004354 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x18>
 800434e:	2b05      	cmp	r3, #5
 8004350:	d008      	beq.n	8004364 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x28>
 8004352:	e013      	b.n	800437c <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x40>
      case VariantType::LinkedString:
        return JsonString(content_.asLinkedString, true);
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2201      	movs	r2, #1
 800435a:	4619      	mov	r1, r3
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f7ff feb6 	bl	80040ce <_ZN11ArduinoJson8V730HB2210JsonStringC1EPKcb>
 8004362:	e00e      	b.n	8004382 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x46>
      case VariantType::OwnedString:
        return JsonString(content_.asOwnedString->data,
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f103 0108 	add.w	r1, r3, #8
                          content_.asOwnedString->length);
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	88da      	ldrh	r2, [r3, #6]
 8004372:	2300      	movs	r3, #0
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f001 fea5 	bl	80060c4 <_ZN11ArduinoJson8V730HB2210JsonStringC1ItLi0EEEPKcT_b>
 800437a:	e002      	b.n	8004382 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x46>
      default:
        return JsonString();
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f7ff fe97 	bl	80040b0 <_ZN11ArduinoJson8V730HB2210JsonStringC1Ev>
    }
  }
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	3708      	adds	r7, #8
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}

0800438a <_ZNK11ArduinoJson8V730HB226detail11VariantData7isArrayEv>:
    if (!obj)
      return nullptr;
    return obj->getOrAddMember(key, resources);
  }

  bool isArray() const {
 800438a:	b480      	push	{r7}
 800438c:	b083      	sub	sp, #12
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
    return type_ == VariantType::Array;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	791b      	ldrb	r3, [r3, #4]
 8004396:	2b40      	cmp	r3, #64	@ 0x40
 8004398:	bf0c      	ite	eq
 800439a:	2301      	moveq	r3, #1
 800439c:	2300      	movne	r3, #0
 800439e:	b2db      	uxtb	r3, r3
  }
 80043a0:	4618      	mov	r0, r3
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <_ZNK11ArduinoJson8V730HB226detail11VariantData12isCollectionEv>:

  bool isBoolean() const {
    return type_ == VariantType::Boolean;
  }

  bool isCollection() const {
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
    return type_ & VariantTypeBits::CollectionMask;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	791b      	ldrb	r3, [r3, #4]
 80043b8:	2160      	movs	r1, #96	@ 0x60
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7ff ff22 	bl	8004204 <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 80043c0:	4603      	mov	r3, r0
  }
 80043c2:	4618      	mov	r0, r3
 80043c4:	3708      	adds	r7, #8
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <_ZNK11ArduinoJson8V730HB226detail11VariantData7isFloatEv>:

  bool isFloat() const {
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b082      	sub	sp, #8
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
    return type_ & VariantTypeBits::NumberBit;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	791b      	ldrb	r3, [r3, #4]
 80043d6:	2108      	movs	r1, #8
 80043d8:	4618      	mov	r0, r3
 80043da:	f7ff ff13 	bl	8004204 <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 80043de:	4603      	mov	r3, r0
  }
 80043e0:	4618      	mov	r0, r3
 80043e2:	3708      	adds	r7, #8
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isObjectEv>:
    if (!var)
      return true;
    return var->isNull();
  }

  bool isObject() const {
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
    return type_ == VariantType::Object;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	791b      	ldrb	r3, [r3, #4]
 80043f4:	2b20      	cmp	r3, #32
 80043f6:	bf0c      	ite	eq
 80043f8:	2301      	moveq	r3, #1
 80043fa:	2300      	movne	r3, #0
 80043fc:	b2db      	uxtb	r3, r3
  }
 80043fe:	4618      	mov	r0, r3
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr

0800440a <_ZN11ArduinoJson8V730HB226detail11VariantData5resetEv>:
    if (!var)
      return;
    var->removeMember(key, resources);
  }

  void reset() {  // TODO: remove
 800440a:	b480      	push	{r7}
 800440c:	b083      	sub	sp, #12
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
    type_ = VariantType::Null;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	711a      	strb	r2, [r3, #4]
  }
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <_ZN11ArduinoJson8V730HB226detail11VariantData10setBooleanEb>:

  void setBoolean(bool value) {
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	460b      	mov	r3, r1
 800442e:	70fb      	strb	r3, [r7, #3]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    type_ = VariantType::Boolean;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2206      	movs	r2, #6
 8004434:	711a      	strb	r2, [r3, #4]
    content_.asBoolean = value;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	78fa      	ldrb	r2, [r7, #3]
 800443a:	701a      	strb	r2, [r3, #0]
  }
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringEPNS1_10StringNodeEPNS1_15ResourceManagerE>:
  }

  template <typename TAdaptedString>
  bool setString(TAdaptedString value, ResourceManager* resources);

  bool setString(StringNode* s, ResourceManager*) {
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
    setOwnedString(s);
 8004454:	68b9      	ldr	r1, [r7, #8]
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f000 f805 	bl	8004466 <_ZN11ArduinoJson8V730HB226detail11VariantData14setOwnedStringEPNS1_10StringNodeE>
    return true;
 800445c:	2301      	movs	r3, #1
  }
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <_ZN11ArduinoJson8V730HB226detail11VariantData14setOwnedStringEPNS1_10StringNodeE>:
    ARDUINOJSON_ASSERT(s);
    type_ = VariantType::LinkedString;
    content_.asLinkedString = s;
  }

  void setOwnedString(StringNode* s) {
 8004466:	b480      	push	{r7}
 8004468:	b083      	sub	sp, #12
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
 800446e:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    ARDUINOJSON_ASSERT(s);
    type_ = VariantType::OwnedString;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2205      	movs	r2, #5
 8004474:	711a      	strb	r2, [r3, #4]
    content_.asOwnedString = s;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	601a      	str	r2, [r3, #0]
  }
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <_ZN11ArduinoJson8V730HB226detail14CollectionDataC1Ev>:
class CollectionData {
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004496:	801a      	strh	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800449e:	805a      	strh	r2, [r3, #2]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4618      	mov	r0, r3
 80044a4:	370c      	adds	r7, #12
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr

080044ae <_ZN11ArduinoJson8V730HB226detail9ArrayDataC1Ev>:

#include <ArduinoJson/Collection/CollectionData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

class ArrayData : public CollectionData {
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b082      	sub	sp, #8
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7ff ffe5 	bl	8004488 <_ZN11ArduinoJson8V730HB226detail14CollectionDataC1Ev>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4618      	mov	r0, r3
 80044c2:	3708      	adds	r7, #8
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <_ZN11ArduinoJson8V730HB226detail11VariantData7toArrayEv>:

  static size_t size(const VariantData* var, const ResourceManager* resources) {
    return var != 0 ? var->size(resources) : 0;
  }

  ArrayData& toArray() {
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    type_ = VariantType::Array;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2240      	movs	r2, #64	@ 0x40
 80044d4:	711a      	strb	r2, [r3, #4]
    new (&content_.asArray) ArrayData();
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4619      	mov	r1, r3
 80044da:	2004      	movs	r0, #4
 80044dc:	f7ff fe79 	bl	80041d2 <_ZN11ArduinoJson8V730HB226detail14CollectionDatanwEjPv>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d006      	beq.n	80044f4 <_ZN11ArduinoJson8V730HB226detail11VariantData7toArrayEv+0x2c>
 80044e6:	2200      	movs	r2, #0
 80044e8:	801a      	strh	r2, [r3, #0]
 80044ea:	2200      	movs	r2, #0
 80044ec:	805a      	strh	r2, [r3, #2]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7ff ffdd 	bl	80044ae <_ZN11ArduinoJson8V730HB226detail9ArrayDataC1Ev>
    return content_.asArray;
 80044f4:	687b      	ldr	r3, [r7, #4]
  }
 80044f6:	4618      	mov	r0, r3
 80044f8:	3708      	adds	r7, #8
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <_ZN11ArduinoJson8V730HB226detail10ObjectDataC1Ev>:

#include <ArduinoJson/Collection/CollectionData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

class ObjectData : public CollectionData {
 80044fe:	b580      	push	{r7, lr}
 8004500:	b082      	sub	sp, #8
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4618      	mov	r0, r3
 800450a:	f7ff ffbd 	bl	8004488 <_ZN11ArduinoJson8V730HB226detail14CollectionDataC1Ev>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4618      	mov	r0, r3
 8004512:	3708      	adds	r7, #8
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <_ZN11ArduinoJson8V730HB226detail11VariantData8toObjectEv>:
      return 0;
    var->clear(resources);
    return &var->toArray();
  }

  ObjectData& toObject() {
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    type_ = VariantType::Object;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2220      	movs	r2, #32
 8004524:	711a      	strb	r2, [r3, #4]
    new (&content_.asObject) ObjectData();
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4619      	mov	r1, r3
 800452a:	2004      	movs	r0, #4
 800452c:	f7ff fe51 	bl	80041d2 <_ZN11ArduinoJson8V730HB226detail14CollectionDatanwEjPv>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d006      	beq.n	8004544 <_ZN11ArduinoJson8V730HB226detail11VariantData8toObjectEv+0x2c>
 8004536:	2200      	movs	r2, #0
 8004538:	801a      	strh	r2, [r3, #0]
 800453a:	2200      	movs	r2, #0
 800453c:	805a      	strh	r2, [r3, #2]
 800453e:	4618      	mov	r0, r3
 8004540:	f7ff ffdd 	bl	80044fe <_ZN11ArduinoJson8V730HB226detail10ObjectDataC1Ev>
    return content_.asObject;
 8004544:	687b      	ldr	r3, [r7, #4]
  }
 8004546:	4618      	mov	r0, r3
 8004548:	3708      	adds	r7, #8
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <_ZN11ArduinoJson8V730HB226detail10StringPoolC1Ev>:
  StringPool() = default;
 800454e:	b480      	push	{r7}
 8004550:	b083      	sub	sp, #12
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	601a      	str	r2, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4618      	mov	r0, r3
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr

0800456a <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEEC1Ev>:
  static_assert(sizeof(FreeSlot) <= sizeof(T), "T is too small");

 public:
  using Pool = MemoryPool<T>;

  MemoryPoolList() = default;
 800456a:	b480      	push	{r7}
 800456c:	b083      	sub	sp, #12
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	621a      	str	r2, [r3, #32]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	849a      	strh	r2, [r3, #36]	@ 0x24
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2204      	movs	r2, #4
 8004582:	84da      	strh	r2, [r3, #38]	@ 0x26
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800458a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4618      	mov	r0, r3
 8004590:	370c      	adds	r7, #12
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr

0800459a <_ZN11ArduinoJson8V730HB226detail15ResourceManagerC1EPNS0_9AllocatorE>:
  };

 public:
  constexpr static size_t slotSize = sizeof(SlotData);

  ResourceManager(Allocator* allocator = DefaultAllocator::instance())
 800459a:	b580      	push	{r7, lr}
 800459c:	b082      	sub	sp, #8
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
 80045a2:	6039      	str	r1, [r7, #0]
      : allocator_(allocator), overflowed_(false) {}
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	601a      	str	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	711a      	strb	r2, [r3, #4]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	3308      	adds	r3, #8
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7ff ffca 	bl	800454e <_ZN11ArduinoJson8V730HB226detail10StringPoolC1Ev>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	330c      	adds	r3, #12
 80045be:	4618      	mov	r0, r3
 80045c0:	f7ff ffd3 	bl	800456a <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEEC1Ev>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4618      	mov	r0, r3
 80045c8:	3708      	adds	r7, #8
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringEPNS1_10StringNodeE>:
      overflowed_ = true;

    return node;
  }

  void saveString(StringNode* node) {
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b082      	sub	sp, #8
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
 80045d6:	6039      	str	r1, [r7, #0]
    stringPool_.add(node);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	3308      	adds	r3, #8
 80045dc:	6839      	ldr	r1, [r7, #0]
 80045de:	4618      	mov	r0, r3
 80045e0:	f7ff fd16 	bl	8004010 <_ZN11ArduinoJson8V730HB226detail10StringPool3addEPNS1_10StringNodeE>
  }
 80045e4:	bf00      	nop
 80045e6:	3708      	adds	r7, #8
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <_ZN11ArduinoJson8V730HB226detail15ResourceManager12createStringEj>:
  template <typename TAdaptedString>
  StringNode* getString(const TAdaptedString& str) const {
    return stringPool_.get(str);
  }

  StringNode* createString(size_t length) {
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
    auto node = StringNode::create(length, allocator_);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4619      	mov	r1, r3
 80045fc:	6838      	ldr	r0, [r7, #0]
 80045fe:	f7ff fc43 	bl	8003e88 <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE>
 8004602:	60f8      	str	r0, [r7, #12]
    if (!node)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d102      	bne.n	8004610 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12createStringEj+0x24>
      overflowed_ = true;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2201      	movs	r2, #1
 800460e:	711a      	strb	r2, [r3, #4]
    return node;
 8004610:	68fb      	ldr	r3, [r7, #12]
  }
 8004612:	4618      	mov	r0, r3
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <_ZN11ArduinoJson8V730HB226detail15ResourceManager12resizeStringEPNS1_10StringNodeEj>:

  StringNode* resizeString(StringNode* node, size_t length) {
 800461a:	b580      	push	{r7, lr}
 800461c:	b084      	sub	sp, #16
 800461e:	af00      	add	r7, sp, #0
 8004620:	60f8      	str	r0, [r7, #12]
 8004622:	60b9      	str	r1, [r7, #8]
 8004624:	607a      	str	r2, [r7, #4]
    node = StringNode::resize(node, length, allocator_);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	461a      	mov	r2, r3
 800462c:	6879      	ldr	r1, [r7, #4]
 800462e:	68b8      	ldr	r0, [r7, #8]
 8004630:	f7ff fc55 	bl	8003ede <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE>
 8004634:	60b8      	str	r0, [r7, #8]
    if (!node)
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d102      	bne.n	8004642 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12resizeStringEPNS1_10StringNodeEj+0x28>
      overflowed_ = true;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2201      	movs	r2, #1
 8004640:	711a      	strb	r2, [r3, #4]
    return node;
 8004642:	68bb      	ldr	r3, [r7, #8]
  }
 8004644:	4618      	mov	r0, r3
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <_ZN11ArduinoJson8V730HB226detail15ResourceManager13destroyStringEPNS1_10StringNodeE>:

  void destroyString(StringNode* node) {
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
    StringNode::destroy(node, allocator_);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4619      	mov	r1, r3
 800465c:	6838      	ldr	r0, [r7, #0]
 800465e:	f7ff fc6d 	bl	8003f3c <_ZN11ArduinoJson8V730HB226detail10StringNode7destroyEPS2_PNS0_9AllocatorE>
  }
 8004662:	bf00      	nop
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <_ZN11ArduinoJson8V730HB226detail15ResourceManager17dereferenceStringEPKc>:

  void dereferenceString(const char* s) {
 800466a:	b580      	push	{r7, lr}
 800466c:	b082      	sub	sp, #8
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
 8004672:	6039      	str	r1, [r7, #0]
    stringPool_.dereference(s, allocator_);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f103 0008 	add.w	r0, r3, #8
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	461a      	mov	r2, r3
 8004680:	6839      	ldr	r1, [r7, #0]
 8004682:	f7ff fcd7 	bl	8004034 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE>
  }
 8004686:	bf00      	nop
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <_ZN11ArduinoJson8V730HB226detail15ResourceManager5clearEv>:

  void clear() {
 800468e:	b580      	push	{r7, lr}
 8004690:	b082      	sub	sp, #8
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
    variantPools_.clear(allocator_);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f103 020c 	add.w	r2, r3, #12
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4619      	mov	r1, r3
 80046a2:	4610      	mov	r0, r2
 80046a4:	f001 fd24 	bl	80060f0 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE>
    overflowed_ = false;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	711a      	strb	r2, [r3, #4]
    stringPool_.clear(allocator_);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f103 0208 	add.w	r2, r3, #8
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4619      	mov	r1, r3
 80046ba:	4610      	mov	r0, r2
 80046bc:	f7ff fc8e 	bl	8003fdc <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE>
  }
 80046c0:	bf00      	nop
 80046c2:	3708      	adds	r7, #8
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <_ZN11ArduinoJson8V730HB226detail15ResourceManager11shrinkToFitEv>:

  void shrinkToFit() {
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
    variantPools_.shrinkToFit(allocator_);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f103 020c 	add.w	r2, r3, #12
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4619      	mov	r1, r3
 80046dc:	4610      	mov	r0, r2
 80046de:	f001 fd3f 	bl	8006160 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE>
  }
 80046e2:	bf00      	nop
 80046e4:	3708      	adds	r7, #8
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>:
 public:
  // Creates an unbound reference.
  JsonVariantConst() : data_(nullptr), resources_(nullptr) {}

  // INTERNAL USE ONLY
  explicit JsonVariantConst(const detail::VariantData* data,
 80046ea:	b480      	push	{r7}
 80046ec:	b085      	sub	sp, #20
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	60f8      	str	r0, [r7, #12]
 80046f2:	60b9      	str	r1, [r7, #8]
 80046f4:	607a      	str	r2, [r7, #4]
                            const detail::ResourceManager* resources)
      : data_(data), resources_(resources) {}
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	68ba      	ldr	r2, [r7, #8]
 80046fa:	601a      	str	r2, [r3, #0]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	605a      	str	r2, [r3, #4]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	4618      	mov	r0, r3
 8004706:	3714      	adds	r7, #20
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <_ZNK11ArduinoJson8V730HB2216JsonVariantConst7getDataEv>:
  size_t memoryUsage() const {
    return 0;
  }

 protected:
  const detail::VariantData* getData() const {
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
    return data_;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
  }
 800471c:	4618      	mov	r0, r3
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <_ZNK11ArduinoJson8V730HB2216JsonVariantConst18getResourceManagerEv>:

  const detail::ResourceManager* getResourceManager() const {
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
    return resources_;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
  }
 8004734:	4618      	mov	r0, r3
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>:
 public:
  // Creates an unbound reference.
  JsonVariant() : data_(0), resources_(0) {}

  // INTERNAL USE ONLY
  JsonVariant(detail::VariantData* data, detail::ResourceManager* resources)
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
      : data_(data), resources_(resources) {}
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	68ba      	ldr	r2, [r7, #8]
 8004750:	601a      	str	r2, [r3, #0]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	605a      	str	r2, [r3, #4]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	4618      	mov	r0, r3
 800475c:	3714      	adds	r7, #20
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr

08004766 <_ZNK11ArduinoJson8V730HB2211JsonVariant18getResourceManagerEv>:

 private:
  detail::ResourceManager* getResourceManager() const {
 8004766:	b480      	push	{r7}
 8004768:	b083      	sub	sp, #12
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
    return resources_;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
  }
 8004772:	4618      	mov	r0, r3
 8004774:	370c      	adds	r7, #12
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr

0800477e <_ZNK11ArduinoJson8V730HB2211JsonVariant7getDataEv>:

  detail::VariantData* getData() const {
 800477e:	b480      	push	{r7}
 8004780:	b083      	sub	sp, #12
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
    return data_;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
  }
 800478a:	4618      	mov	r0, r3
 800478c:	370c      	adds	r7, #12
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr

08004796 <_ZN11ArduinoJson8V730HB229ConverterINS0_11JsonVariantEvE9checkJsonES2_>:

  static JsonVariant fromJson(JsonVariant src) {
    return src;
  }

  static bool checkJson(JsonVariant src) {
 8004796:	b580      	push	{r7, lr}
 8004798:	b084      	sub	sp, #16
 800479a:	af00      	add	r7, sp, #0
 800479c:	463b      	mov	r3, r7
 800479e:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 80047a2:	463b      	mov	r3, r7
 80047a4:	4618      	mov	r0, r3
 80047a6:	f001 fd13 	bl	80061d0 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 80047aa:	60f8      	str	r0, [r7, #12]
    return !!data;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	bf14      	ite	ne
 80047b2:	2301      	movne	r3, #1
 80047b4:	2300      	moveq	r3, #0
 80047b6:	b2db      	uxtb	r3, r3
  }
 80047b8:	4618      	mov	r0, r3
 80047ba:	3710      	adds	r7, #16
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1Ev>:

class JsonArrayIterator {
  friend class JsonArray;

 public:
  JsonArrayIterator() {}
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7ff fcb2 	bl	8004134 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1Ev>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4618      	mov	r0, r3
 80047d4:	3708      	adds	r7, #8
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1ENS0_6detail18CollectionIteratorEPNS2_15ResourceManagerE>:
  explicit JsonArrayIterator(detail::ArrayData::iterator iterator,
 80047da:	b480      	push	{r7}
 80047dc:	b085      	sub	sp, #20
 80047de:	af00      	add	r7, sp, #0
 80047e0:	60f8      	str	r0, [r7, #12]
 80047e2:	1d38      	adds	r0, r7, #4
 80047e4:	e880 0006 	stmia.w	r0, {r1, r2}
 80047e8:	603b      	str	r3, [r7, #0]
                             detail::ResourceManager* resources)
      : iterator_(iterator), resources_(resources) {}
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	461a      	mov	r2, r3
 80047ee:	1d3b      	adds	r3, r7, #4
 80047f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80047f4:	e882 0003 	stmia.w	r2, {r0, r1}
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	609a      	str	r2, [r3, #8]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	4618      	mov	r0, r3
 8004802:	3714      	adds	r7, #20
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <_ZN11ArduinoJson8V730HB2217JsonArrayIteratordeEv>:

  JsonVariant operator*() {
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
    return JsonVariant(iterator_.data(), resources_);
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	4618      	mov	r0, r3
 800481a:	f7ff fcce 	bl	80041ba <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 800481e:	4601      	mov	r1, r0
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	461a      	mov	r2, r3
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f7ff ff8a 	bl	8004740 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
  }
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	3708      	adds	r7, #8
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <_ZNK11ArduinoJson8V730HB2217JsonArrayIteratorneERKS1_>:

  bool operator==(const JsonArrayIterator& other) const {
    return iterator_ == other.iterator_;
  }

  bool operator!=(const JsonArrayIterator& other) const {
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
    return iterator_ != other.iterator_;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	4611      	mov	r1, r2
 8004844:	4618      	mov	r0, r3
 8004846:	f7ff fc98 	bl	800417a <_ZNK11ArduinoJson8V730HB226detail18CollectionIteratorneERKS2_>
 800484a:	4603      	mov	r3, r0
  }
 800484c:	4618      	mov	r0, r3
 800484e:	3708      	adds	r7, #8
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorppEv>:

  JsonArrayIterator& operator++() {
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
    iterator_.next(resources_);
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	4619      	mov	r1, r3
 8004864:	4610      	mov	r0, r2
 8004866:	f000 f936 	bl	8004ad6 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
    return *this;
 800486a:	687b      	ldr	r3, [r7, #4]
  }
 800486c:	4618      	mov	r0, r3
 800486e:	3708      	adds	r7, #8
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <_ZN11ArduinoJson8V730HB229JsonArrayC1Ev>:

 public:
  using iterator = JsonArrayIterator;

  // Constructs an unbound reference.
  JsonArray() : data_(0), resources_(0) {}
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	601a      	str	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	605a      	str	r2, [r3, #4]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4618      	mov	r0, r3
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr

08004896 <_ZN11ArduinoJson8V730HB229JsonArrayC1EPNS0_6detail9ArrayDataEPNS2_15ResourceManagerE>:

  // INTERNAL USE ONLY
  JsonArray(detail::ArrayData* data, detail::ResourceManager* resources)
 8004896:	b480      	push	{r7}
 8004898:	b085      	sub	sp, #20
 800489a:	af00      	add	r7, sp, #0
 800489c:	60f8      	str	r0, [r7, #12]
 800489e:	60b9      	str	r1, [r7, #8]
 80048a0:	607a      	str	r2, [r7, #4]
      : data_(data), resources_(resources) {}
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	68ba      	ldr	r2, [r7, #8]
 80048a6:	601a      	str	r2, [r3, #0]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	605a      	str	r2, [r3, #4]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	4618      	mov	r0, r3
 80048b2:	3714      	adds	r7, #20
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <_ZNK11ArduinoJson8V730HB229JsonArray5beginEv>:
    return detail::ArrayData::addValue(data_, value, resources_);
  }

  // Returns an iterator to the first element of the array.
  // https://arduinojson.org/v7/api/jsonarray/begin/
  iterator begin() const {
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
    if (!data_)
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d103      	bne.n	80048d6 <_ZNK11ArduinoJson8V730HB229JsonArray5beginEv+0x1a>
      return iterator();
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f7ff ff76 	bl	80047c0 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1Ev>
 80048d4:	e011      	b.n	80048fa <_ZNK11ArduinoJson8V730HB229JsonArray5beginEv+0x3e>
    return iterator(data_->createIterator(resources_), resources_);
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4619      	mov	r1, r3
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685a      	ldr	r2, [r3, #4]
 80048e0:	f107 0308 	add.w	r3, r7, #8
 80048e4:	4618      	mov	r0, r3
 80048e6:	f000 f919 	bl	8004b1c <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f107 0208 	add.w	r2, r7, #8
 80048f2:	ca06      	ldmia	r2, {r1, r2}
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f7ff ff70 	bl	80047da <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1ENS0_6detail18CollectionIteratorEPNS2_15ResourceManagerE>
  }
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	3710      	adds	r7, #16
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <_ZNK11ArduinoJson8V730HB229JsonArray3endEv>:

  // Returns an iterator following the last element of the array.
  // https://arduinojson.org/v7/api/jsonarray/end/
  iterator end() const {
 8004902:	b580      	push	{r7, lr}
 8004904:	b082      	sub	sp, #8
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
 800490a:	6039      	str	r1, [r7, #0]
    return iterator();
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f7ff ff57 	bl	80047c0 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1Ev>
  }
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	3708      	adds	r7, #8
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}

0800491a <_ZN11ArduinoJson8V730HB2210JsonObjectC1Ev>:

 public:
  using iterator = JsonObjectIterator;

  // Creates an unbound reference.
  JsonObject() : data_(0), resources_(0) {}
 800491a:	b480      	push	{r7}
 800491c:	b083      	sub	sp, #12
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	601a      	str	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	605a      	str	r2, [r3, #4]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4618      	mov	r0, r3
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <_ZN11ArduinoJson8V730HB2210JsonObjectC1EPNS0_6detail10ObjectDataEPNS2_15ResourceManagerE>:

  // INTERNAL USE ONLY
  JsonObject(detail::ObjectData* data, detail::ResourceManager* resource)
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	607a      	str	r2, [r7, #4]
      : data_(data), resources_(resource) {}
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	68ba      	ldr	r2, [r7, #8]
 800494c:	601a      	str	r2, [r3, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	605a      	str	r2, [r3, #4]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	4618      	mov	r0, r3
 8004958:	3714      	adds	r7, #20
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr

08004962 <_ZNK11ArduinoJson8V730HB2210JsonObject18getResourceManagerEv>:
  size_t memoryUsage() const {
    return 0;
  }

 private:
  detail::ResourceManager* getResourceManager() const {
 8004962:	b480      	push	{r7}
 8004964:	b083      	sub	sp, #12
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
    return resources_;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
  }
 800496e:	4618      	mov	r0, r3
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <_ZNK11ArduinoJson8V730HB2210JsonObject7getDataEv>:

  detail::VariantData* getData() const {
 800497a:	b580      	push	{r7, lr}
 800497c:	b082      	sub	sp, #8
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
    return detail::collectionToVariant(data_);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4618      	mov	r0, r3
 8004988:	f7ff fc2f 	bl	80041ea <_ZN11ArduinoJson8V730HB226detail19collectionToVariantEPNS1_14CollectionDataE>
 800498c:	4603      	mov	r3, r0
  }
 800498e:	4618      	mov	r0, r3
 8004990:	3708      	adds	r7, #8
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}

08004996 <_ZN11ArduinoJson8V730HB2212JsonDocumentC1EPNS0_9AllocatorE>:
// https://arduinojson.org/v7/api/jsondocument/
class JsonDocument : public detail::VariantOperators<const JsonDocument&> {
  friend class detail::VariantAttorney;

 public:
  explicit JsonDocument(Allocator* alloc = detail::DefaultAllocator::instance())
 8004996:	b580      	push	{r7, lr}
 8004998:	b082      	sub	sp, #8
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
 800499e:	6039      	str	r1, [r7, #0]
      : resources_(alloc) {}
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6839      	ldr	r1, [r7, #0]
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7ff fdf8 	bl	800459a <_ZN11ArduinoJson8V730HB226detail15ResourceManagerC1EPNS0_9AllocatorE>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	3338      	adds	r3, #56	@ 0x38
 80049ae:	4618      	mov	r0, r3
 80049b0:	f7ff fc56 	bl	8004260 <_ZN11ArduinoJson8V730HB226detail11VariantDataC1Ev>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4618      	mov	r0, r3
 80049b8:	3708      	adds	r7, #8
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}

080049be <_ZN11ArduinoJson8V730HB2212JsonDocument11shrinkToFitEv>:
    return resources_.allocator();
  }

  // Reduces the capacity of the memory pool to match the current usage.
  // https://arduinojson.org/v7/api/jsondocument/shrinktofit/
  void shrinkToFit() {
 80049be:	b580      	push	{r7, lr}
 80049c0:	b082      	sub	sp, #8
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
    resources_.shrinkToFit();
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7ff fe7d 	bl	80046c8 <_ZN11ArduinoJson8V730HB226detail15ResourceManager11shrinkToFitEv>
  }
 80049ce:	bf00      	nop
 80049d0:	3708      	adds	r7, #8
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}

080049d6 <_ZN11ArduinoJson8V730HB2212JsonDocument5clearEv>:
    return getVariant().template as<T>();
  }

  // Empties the document and resets the memory pool
  // https://arduinojson.org/v7/api/jsondocument/clear/
  void clear() {
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b082      	sub	sp, #8
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
    resources_.clear();
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7ff fe54 	bl	800468e <_ZN11ArduinoJson8V730HB226detail15ResourceManager5clearEv>
    data_.reset();
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	3338      	adds	r3, #56	@ 0x38
 80049ea:	4618      	mov	r0, r3
 80049ec:	f7ff fd0d 	bl	800440a <_ZN11ArduinoJson8V730HB226detail11VariantData5resetEv>
  }
 80049f0:	bf00      	nop
 80049f2:	3708      	adds	r7, #8
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <_ZN11ArduinoJson8V730HB2212JsonDocument18getResourceManagerEv>:

  JsonVariantConst getVariant() const {
    return JsonVariantConst(&data_, &resources_);
  }

  detail::ResourceManager* getResourceManager() {
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
    return &resources_;
 8004a00:	687b      	ldr	r3, [r7, #4]
  }
 8004a02:	4618      	mov	r0, r3
 8004a04:	370c      	adds	r7, #12
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr

08004a0e <_ZN11ArduinoJson8V730HB2212JsonDocument7getDataEv>:

  detail::VariantData* getData() {
 8004a0e:	b480      	push	{r7}
 8004a10:	b083      	sub	sp, #12
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
    return &data_;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	3338      	adds	r3, #56	@ 0x38
  }
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr

08004a26 <_ZN11ArduinoJson8V730HB2212JsonDocument15getOrCreateDataEv>:

  const detail::VariantData* getData() const {
    return &data_;
  }

  detail::VariantData* getOrCreateData() {
 8004a26:	b480      	push	{r7}
 8004a28:	b083      	sub	sp, #12
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
    return &data_;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	3338      	adds	r3, #56	@ 0x38
  }
 8004a32:	4618      	mov	r0, r3
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr

08004a3e <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE>:
    --index;
  }
  return it;
}

inline VariantData* ArrayData::addElement(ResourceManager* resources) {
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b084      	sub	sp, #16
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
 8004a46:	6039      	str	r1, [r7, #0]
  auto slot = resources->allocVariant();
 8004a48:	f107 0308 	add.w	r3, r7, #8
 8004a4c:	6839      	ldr	r1, [r7, #0]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 f93e 	bl	8004cd0 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!slot)
 8004a54:	f107 0308 	add.w	r3, r7, #8
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f001 fbdd 	bl	8006218 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	f083 0301 	eor.w	r3, r3, #1
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE+0x30>
    return nullptr;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	e00d      	b.n	8004a8a <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE+0x4c>
  CollectionData::appendOne(slot, resources);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	f107 0208 	add.w	r2, r7, #8
 8004a76:	ca06      	ldmia	r2, {r1, r2}
 8004a78:	f000 f867 	bl	8004b4a <_ZN11ArduinoJson8V730HB226detail14CollectionData9appendOneENS1_4SlotINS1_11VariantDataEEEPKNS1_15ResourceManagerE>
  return slot.ptr();
 8004a7c:	f107 0308 	add.w	r3, r7, #8
 8004a80:	4618      	mov	r0, r3
 8004a82:	f001 fbda 	bl	800623a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>
 8004a86:	4603      	mov	r3, r0
 8004a88:	bf00      	nop
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3710      	adds	r7, #16
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1EPNS1_11VariantDataEt>:
#include <ArduinoJson/Variant/VariantCompare.hpp>
#include <ArduinoJson/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

inline CollectionIterator::CollectionIterator(VariantData* slot, SlotId slotId)
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b084      	sub	sp, #16
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	60f8      	str	r0, [r7, #12]
 8004a9a:	60b9      	str	r1, [r7, #8]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	80fb      	strh	r3, [r7, #6]
    : slot_(slot), currentId_(slotId) {
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	601a      	str	r2, [r3, #0]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	88fa      	ldrh	r2, [r7, #6]
 8004aaa:	809a      	strh	r2, [r3, #4]
  nextId_ = slot_ ? slot_->next() : NULL_SLOT;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d007      	beq.n	8004ac4 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1EPNS1_11VariantDataEt+0x32>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7ff fbe5 	bl	8004288 <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	e001      	b.n	8004ac8 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1EPNS1_11VariantDataEt+0x36>
 8004ac4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	80da      	strh	r2, [r3, #6]
}
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3710      	adds	r7, #16
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>:

inline void CollectionIterator::next(const ResourceManager* resources) {
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b082      	sub	sp, #8
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
 8004ade:	6039      	str	r1, [r7, #0]
  ARDUINOJSON_ASSERT(currentId_ != NULL_SLOT);
  slot_ = resources->getVariant(nextId_);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	88db      	ldrh	r3, [r3, #6]
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	6838      	ldr	r0, [r7, #0]
 8004ae8:	f000 f965 	bl	8004db6 <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 8004aec:	4602      	mov	r2, r0
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	601a      	str	r2, [r3, #0]
  currentId_ = nextId_;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	88da      	ldrh	r2, [r3, #6]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	809a      	strh	r2, [r3, #4]
  if (slot_)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d008      	beq.n	8004b14 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE+0x3e>
    nextId_ = slot_->next();
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4618      	mov	r0, r3
 8004b08:	f7ff fbbe 	bl	8004288 <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	461a      	mov	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	80da      	strh	r2, [r3, #6]
}
 8004b14:	bf00      	nop
 8004b16:	3708      	adds	r7, #8
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>:

inline CollectionData::iterator CollectionData::createIterator(
    const ResourceManager* resources) const {
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
  return iterator(resources->getVariant(head_), head_);
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	881b      	ldrh	r3, [r3, #0]
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f941 	bl	8004db6 <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 8004b34:	4601      	mov	r1, r0
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	881b      	ldrh	r3, [r3, #0]
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f7ff ffa8 	bl	8004a92 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1EPNS1_11VariantDataEt>
}
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	3710      	adds	r7, #16
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}

08004b4a <_ZN11ArduinoJson8V730HB226detail14CollectionData9appendOneENS1_4SlotINS1_11VariantDataEEEPKNS1_15ResourceManagerE>:

inline void CollectionData::appendOne(Slot<VariantData> slot,
                                      const ResourceManager* resources) {
 8004b4a:	b590      	push	{r4, r7, lr}
 8004b4c:	b087      	sub	sp, #28
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	60f8      	str	r0, [r7, #12]
 8004b52:	1d38      	adds	r0, r7, #4
 8004b54:	e880 0006 	stmia.w	r0, {r1, r2}
 8004b58:	603b      	str	r3, [r7, #0]
  if (tail_ != NULL_SLOT) {
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	885b      	ldrh	r3, [r3, #2]
 8004b5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d019      	beq.n	8004b9a <_ZN11ArduinoJson8V730HB226detail14CollectionData9appendOneENS1_4SlotINS1_11VariantDataEEEPKNS1_15ResourceManagerE+0x50>
    auto tail = resources->getVariant(tail_);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	885b      	ldrh	r3, [r3, #2]
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	6838      	ldr	r0, [r7, #0]
 8004b6e:	f000 f922 	bl	8004db6 <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 8004b72:	6178      	str	r0, [r7, #20]
    tail->setNext(slot.id());
 8004b74:	697c      	ldr	r4, [r7, #20]
 8004b76:	1d3b      	adds	r3, r7, #4
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f001 fb6a 	bl	8006252 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	4619      	mov	r1, r3
 8004b82:	4620      	mov	r0, r4
 8004b84:	f7ff fb8c 	bl	80042a0 <_ZN11ArduinoJson8V730HB226detail11VariantData7setNextEt>
    tail_ = slot.id();
 8004b88:	1d3b      	adds	r3, r7, #4
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f001 fb61 	bl	8006252 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8004b90:	4603      	mov	r3, r0
 8004b92:	461a      	mov	r2, r3
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	805a      	strh	r2, [r3, #2]
  } else {
    head_ = slot.id();
    tail_ = slot.id();
  }
}
 8004b98:	e00f      	b.n	8004bba <_ZN11ArduinoJson8V730HB226detail14CollectionData9appendOneENS1_4SlotINS1_11VariantDataEEEPKNS1_15ResourceManagerE+0x70>
    head_ = slot.id();
 8004b9a:	1d3b      	adds	r3, r7, #4
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f001 fb58 	bl	8006252 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	801a      	strh	r2, [r3, #0]
    tail_ = slot.id();
 8004baa:	1d3b      	adds	r3, r7, #4
 8004bac:	4618      	mov	r0, r3
 8004bae:	f001 fb50 	bl	8006252 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	805a      	strh	r2, [r3, #2]
}
 8004bba:	bf00      	nop
 8004bbc:	371c      	adds	r7, #28
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd90      	pop	{r4, r7, pc}

08004bc2 <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE>:

inline void CollectionData::appendPair(Slot<VariantData> key,
                                       Slot<VariantData> value,
                                       const ResourceManager* resources) {
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	b590      	push	{r4, r7, lr}
 8004bc6:	b087      	sub	sp, #28
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	1d38      	adds	r0, r7, #4
 8004bce:	e880 0006 	stmia.w	r0, {r1, r2}
 8004bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  key->setNext(value.id());
 8004bd4:	1d3b      	adds	r3, r7, #4
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f001 fb47 	bl	800626a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>
 8004bdc:	4604      	mov	r4, r0
 8004bde:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004be2:	4618      	mov	r0, r3
 8004be4:	f001 fb35 	bl	8006252 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8004be8:	4603      	mov	r3, r0
 8004bea:	4619      	mov	r1, r3
 8004bec:	4620      	mov	r0, r4
 8004bee:	f7ff fb57 	bl	80042a0 <_ZN11ArduinoJson8V730HB226detail11VariantData7setNextEt>

  if (tail_ != NULL_SLOT) {
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	885b      	ldrh	r3, [r3, #2]
 8004bf6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d01a      	beq.n	8004c34 <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE+0x72>
    auto tail = resources->getVariant(tail_);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	885b      	ldrh	r3, [r3, #2]
 8004c02:	4619      	mov	r1, r3
 8004c04:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004c06:	f000 f8d6 	bl	8004db6 <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 8004c0a:	6178      	str	r0, [r7, #20]
    tail->setNext(key.id());
 8004c0c:	697c      	ldr	r4, [r7, #20]
 8004c0e:	1d3b      	adds	r3, r7, #4
 8004c10:	4618      	mov	r0, r3
 8004c12:	f001 fb1e 	bl	8006252 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8004c16:	4603      	mov	r3, r0
 8004c18:	4619      	mov	r1, r3
 8004c1a:	4620      	mov	r0, r4
 8004c1c:	f7ff fb40 	bl	80042a0 <_ZN11ArduinoJson8V730HB226detail11VariantData7setNextEt>
    tail_ = value.id();
 8004c20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004c24:	4618      	mov	r0, r3
 8004c26:	f001 fb14 	bl	8006252 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	805a      	strh	r2, [r3, #2]
  } else {
    head_ = key.id();
    tail_ = value.id();
  }
}
 8004c32:	e010      	b.n	8004c56 <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE+0x94>
    head_ = key.id();
 8004c34:	1d3b      	adds	r3, r7, #4
 8004c36:	4618      	mov	r0, r3
 8004c38:	f001 fb0b 	bl	8006252 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	461a      	mov	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	801a      	strh	r2, [r3, #0]
    tail_ = value.id();
 8004c44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f001 fb02 	bl	8006252 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	461a      	mov	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	805a      	strh	r2, [r3, #2]
}
 8004c56:	bf00      	nop
 8004c58:	371c      	adds	r7, #28
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004c60:	b002      	add	sp, #8
 8004c62:	4770      	bx	lr

08004c64 <_ZN11ArduinoJson8V730HB226detail14CollectionData5clearEPNS1_15ResourceManagerE>:

inline void CollectionData::clear(ResourceManager* resources) {
 8004c64:	b590      	push	{r4, r7, lr}
 8004c66:	b087      	sub	sp, #28
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
  auto next = head_;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	881b      	ldrh	r3, [r3, #0]
 8004c72:	82fb      	strh	r3, [r7, #22]
  while (next != NULL_SLOT) {
 8004c74:	e01b      	b.n	8004cae <_ZN11ArduinoJson8V730HB226detail14CollectionData5clearEPNS1_15ResourceManagerE+0x4a>
    auto currId = next;
 8004c76:	8afb      	ldrh	r3, [r7, #22]
 8004c78:	82bb      	strh	r3, [r7, #20]
    auto slot = resources->getVariant(next);
 8004c7a:	8afb      	ldrh	r3, [r7, #22]
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	6838      	ldr	r0, [r7, #0]
 8004c80:	f000 f899 	bl	8004db6 <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 8004c84:	6138      	str	r0, [r7, #16]
    next = slot->next();
 8004c86:	6938      	ldr	r0, [r7, #16]
 8004c88:	f7ff fafe 	bl	8004288 <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	82fb      	strh	r3, [r7, #22]
    resources->freeVariant({slot, currId});
 8004c90:	683c      	ldr	r4, [r7, #0]
 8004c92:	8aba      	ldrh	r2, [r7, #20]
 8004c94:	f107 0308 	add.w	r3, r7, #8
 8004c98:	6939      	ldr	r1, [r7, #16]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f001 faf1 	bl	8006282 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1EPS3_t>
 8004ca0:	f107 0308 	add.w	r3, r7, #8
 8004ca4:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004ca8:	4620      	mov	r0, r4
 8004caa:	f000 f851 	bl	8004d50 <_ZN11ArduinoJson8V730HB226detail15ResourceManager11freeVariantENS1_4SlotINS1_11VariantDataEEE>
  while (next != NULL_SLOT) {
 8004cae:	8afb      	ldrh	r3, [r7, #22]
 8004cb0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d1de      	bne.n	8004c76 <_ZN11ArduinoJson8V730HB226detail14CollectionData5clearEPNS1_15ResourceManagerE+0x12>
  }

  head_ = NULL_SLOT;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004cbe:	801a      	strh	r2, [r3, #0]
  tail_ = NULL_SLOT;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004cc6:	805a      	strh	r2, [r3, #2]
}
 8004cc8:	bf00      	nop
 8004cca:	371c      	adds	r7, #28
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd90      	pop	{r4, r7, pc}

08004cd0 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>:
#include <ArduinoJson/Polyfills/alias_cast.hpp>
#include <ArduinoJson/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

inline Slot<VariantData> ResourceManager::allocVariant() {
 8004cd0:	b590      	push	{r4, r7, lr}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  auto p = variantPools_.allocSlot(allocator_);
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	f103 010c 	add.w	r1, r3, #12
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	f107 0308 	add.w	r3, r7, #8
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f001 faf0 	bl	80062ce <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE>
  if (!p) {
 8004cee:	f107 0308 	add.w	r3, r7, #8
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f001 fb2e 	bl	8006354 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	f083 0301 	eor.w	r3, r3, #1
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d006      	beq.n	8004d12 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv+0x42>
    overflowed_ = true;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	2201      	movs	r2, #1
 8004d08:	711a      	strb	r2, [r3, #4]
    return {};
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f001 facd 	bl	80062aa <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1Ev>
 8004d10:	e01a      	b.n	8004d48 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv+0x78>
  }
  return {new (&p->variant) VariantData, p.id()};
 8004d12:	f107 0308 	add.w	r3, r7, #8
 8004d16:	4618      	mov	r0, r3
 8004d18:	f001 fb2d 	bl	8006376 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEptEv>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	4619      	mov	r1, r3
 8004d20:	2008      	movs	r0, #8
 8004d22:	f7ff fa91 	bl	8004248 <_ZN11ArduinoJson8V730HB226detail11VariantDatanwEjPv>
 8004d26:	4604      	mov	r4, r0
 8004d28:	2c00      	cmp	r4, #0
 8004d2a:	d002      	beq.n	8004d32 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv+0x62>
 8004d2c:	4620      	mov	r0, r4
 8004d2e:	f7ff fa97 	bl	8004260 <_ZN11ArduinoJson8V730HB226detail11VariantDataC1Ev>
 8004d32:	f107 0308 	add.w	r3, r7, #8
 8004d36:	4618      	mov	r0, r3
 8004d38:	f001 fb29 	bl	800638e <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	461a      	mov	r2, r3
 8004d40:	4621      	mov	r1, r4
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f001 fa9d 	bl	8006282 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1EPS3_t>
}
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	3714      	adds	r7, #20
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd90      	pop	{r4, r7, pc}

08004d50 <_ZN11ArduinoJson8V730HB226detail15ResourceManager11freeVariantENS1_4SlotINS1_11VariantDataEEE>:

inline void ResourceManager::freeVariant(Slot<VariantData> variant) {
 8004d50:	b5b0      	push	{r4, r5, r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	1d3b      	adds	r3, r7, #4
 8004d5a:	e883 0006 	stmia.w	r3, {r1, r2}
  variant->clear(this);
 8004d5e:	1d3b      	adds	r3, r7, #4
 8004d60:	4618      	mov	r0, r3
 8004d62:	f001 fa82 	bl	800626a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>
 8004d66:	4603      	mov	r3, r0
 8004d68:	68f9      	ldr	r1, [r7, #12]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f000 fa1c 	bl	80051a8 <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
  variantPools_.freeSlot({alias_cast<SlotData*>(variant.ptr()), variant.id()});
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f103 040c 	add.w	r4, r3, #12
 8004d76:	1d3b      	adds	r3, r7, #4
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f001 fa5e 	bl	800623a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	4618      	mov	r0, r3
 8004d82:	f001 fb10 	bl	80063a6 <_ZN11ArduinoJson8V730HB226detail10alias_castIPNS1_15ResourceManager8SlotDataEPNS1_11VariantDataEEET_T0_>
 8004d86:	4605      	mov	r5, r0
 8004d88:	1d3b      	adds	r3, r7, #4
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f001 fa61 	bl	8006252 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8004d90:	4603      	mov	r3, r0
 8004d92:	461a      	mov	r2, r3
 8004d94:	f107 0310 	add.w	r3, r7, #16
 8004d98:	4629      	mov	r1, r5
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f001 fb10 	bl	80063c0 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
 8004da0:	f107 0310 	add.w	r3, r7, #16
 8004da4:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004da8:	4620      	mov	r0, r4
 8004daa:	f001 fb1d 	bl	80063e8 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE8freeSlotENS1_4SlotIS4_EE>
}
 8004dae:	bf00      	nop
 8004db0:	3718      	adds	r7, #24
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bdb0      	pop	{r4, r5, r7, pc}

08004db6 <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>:

inline VariantData* ResourceManager::getVariant(SlotId id) const {
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b082      	sub	sp, #8
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	807b      	strh	r3, [r7, #2]
  return reinterpret_cast<VariantData*>(variantPools_.getSlot(id));
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	330c      	adds	r3, #12
 8004dc6:	887a      	ldrh	r2, [r7, #2]
 8004dc8:	4611      	mov	r1, r2
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f001 fb28 	bl	8006420 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt>
 8004dd0:	4603      	mov	r3, r0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3708      	adds	r7, #8
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>:

#if ARDUINOJSON_USE_EXTENSIONS
inline Slot<VariantExtension> ResourceManager::allocExtension() {
 8004dda:	b590      	push	{r4, r7, lr}
 8004ddc:	b085      	sub	sp, #20
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
 8004de2:	6039      	str	r1, [r7, #0]
  auto p = variantPools_.allocSlot(allocator_);
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	f103 010c 	add.w	r1, r3, #12
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	f107 0308 	add.w	r3, r7, #8
 8004df2:	4618      	mov	r0, r3
 8004df4:	f001 fa6b 	bl	80062ce <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE>
  if (!p) {
 8004df8:	f107 0308 	add.w	r3, r7, #8
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f001 faa9 	bl	8006354 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>
 8004e02:	4603      	mov	r3, r0
 8004e04:	f083 0301 	eor.w	r3, r3, #1
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d006      	beq.n	8004e1c <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv+0x42>
    overflowed_ = true;
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	2201      	movs	r2, #1
 8004e12:	711a      	strb	r2, [r3, #4]
    return {};
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f001 fb27 	bl	8006468 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEC1Ev>
 8004e1a:	e011      	b.n	8004e40 <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv+0x66>
  }
  return {&p->extension, p.id()};
 8004e1c:	f107 0308 	add.w	r3, r7, #8
 8004e20:	4618      	mov	r0, r3
 8004e22:	f001 faa8 	bl	8006376 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEptEv>
 8004e26:	4603      	mov	r3, r0
 8004e28:	461c      	mov	r4, r3
 8004e2a:	f107 0308 	add.w	r3, r7, #8
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f001 faad 	bl	800638e <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>
 8004e34:	4603      	mov	r3, r0
 8004e36:	461a      	mov	r2, r3
 8004e38:	4621      	mov	r1, r4
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f001 fb26 	bl	800648c <_ZN11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEC1EPS3_t>
}
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	3714      	adds	r7, #20
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd90      	pop	{r4, r7, pc}

08004e48 <_ZN11ArduinoJson8V730HB226detail15ResourceManager13freeExtensionEt>:

inline void ResourceManager::freeExtension(SlotId id) {
 8004e48:	b590      	push	{r4, r7, lr}
 8004e4a:	b087      	sub	sp, #28
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	460b      	mov	r3, r1
 8004e52:	807b      	strh	r3, [r7, #2]
  auto p = getExtension(id);
 8004e54:	887b      	ldrh	r3, [r7, #2]
 8004e56:	4619      	mov	r1, r3
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 f816 	bl	8004e8a <_ZNK11ArduinoJson8V730HB226detail15ResourceManager12getExtensionEt>
 8004e5e:	6178      	str	r0, [r7, #20]
  variantPools_.freeSlot({reinterpret_cast<SlotData*>(p), id});
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f103 040c 	add.w	r4, r3, #12
 8004e66:	887a      	ldrh	r2, [r7, #2]
 8004e68:	f107 030c 	add.w	r3, r7, #12
 8004e6c:	6979      	ldr	r1, [r7, #20]
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f001 faa6 	bl	80063c0 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
 8004e74:	f107 030c 	add.w	r3, r7, #12
 8004e78:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004e7c:	4620      	mov	r0, r4
 8004e7e:	f001 fab3 	bl	80063e8 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE8freeSlotENS1_4SlotIS4_EE>
}
 8004e82:	bf00      	nop
 8004e84:	371c      	adds	r7, #28
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd90      	pop	{r4, r7, pc}

08004e8a <_ZNK11ArduinoJson8V730HB226detail15ResourceManager12getExtensionEt>:

inline VariantExtension* ResourceManager::getExtension(SlotId id) const {
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b082      	sub	sp, #8
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
 8004e92:	460b      	mov	r3, r1
 8004e94:	807b      	strh	r3, [r7, #2]
  return &variantPools_.getSlot(id)->extension;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	330c      	adds	r3, #12
 8004e9a:	887a      	ldrh	r2, [r7, #2]
 8004e9c:	4611      	mov	r1, r2
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f001 fabe 	bl	8006420 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt>
 8004ea4:	4603      	mov	r3, r0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3708      	adds	r7, #8
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc>:
    }
    return p[0];
  }

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b084      	sub	sp, #16
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	71fb      	strb	r3, [r7, #7]
    const char* p = escapeTable(false);
 8004eb8:	2000      	movs	r0, #0
 8004eba:	f000 f819 	bl	8004ef0 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb>
 8004ebe:	60f8      	str	r0, [r7, #12]
    for (;;) {
      if (p[0] == '\0')
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d101      	bne.n	8004ecc <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x1e>
        return 0;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	e00c      	b.n	8004ee6 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x38>
      if (p[0] == c)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	79fa      	ldrb	r2, [r7, #7]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d103      	bne.n	8004ede <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x30>
        return p[1];
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	3301      	adds	r3, #1
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	e003      	b.n	8004ee6 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x38>
      p += 2;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	3302      	adds	r3, #2
 8004ee2:	60fb      	str	r3, [r7, #12]
      if (p[0] == '\0')
 8004ee4:	e7ec      	b.n	8004ec0 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x12>
    }
  }
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
	...

08004ef0 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb>:

 private:
  static const char* escapeTable(bool isSerializing) {
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	71fb      	strb	r3, [r7, #7]
    return &"//''\"\"\\\\b\bf\fn\nr\rt\t"[isSerializing ? 4 : 0];
 8004efa:	79fb      	ldrb	r3, [r7, #7]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d001      	beq.n	8004f04 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb+0x14>
 8004f00:	2304      	movs	r3, #4
 8004f02:	e000      	b.n	8004f06 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb+0x16>
 8004f04:	2300      	movs	r3, #0
 8004f06:	4a04      	ldr	r2, [pc, #16]	@ (8004f18 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb+0x28>)
 8004f08:	4413      	add	r3, r2
  }
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	370c      	adds	r7, #12
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	080258f4 	.word	0x080258f4

08004f1c <_ZN11ArduinoJson8V730HB226detail13StringBuilderC1EPNS1_15ResourceManagerE>:

class StringBuilder {
 public:
  static const size_t initialCapacity = 31;

  StringBuilder(ResourceManager* resources) : resources_(resources) {}
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	683a      	ldr	r2, [r7, #0]
 8004f2a:	601a      	str	r2, [r3, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	605a      	str	r2, [r3, #4]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	609a      	str	r2, [r3, #8]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	370c      	adds	r7, #12
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <_ZN11ArduinoJson8V730HB226detail13StringBuilderD1Ev>:

  ~StringBuilder() {
 8004f46:	b580      	push	{r7, lr}
 8004f48:	b082      	sub	sp, #8
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
    if (node_)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d007      	beq.n	8004f66 <_ZN11ArduinoJson8V730HB226detail13StringBuilderD1Ev+0x20>
      resources_->destroyString(node_);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	4619      	mov	r1, r3
 8004f60:	4610      	mov	r0, r2
 8004f62:	f7ff fb73 	bl	800464c <_ZN11ArduinoJson8V730HB226detail15ResourceManager13destroyStringEPNS1_10StringNodeE>
  }
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3708      	adds	r7, #8
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <_ZN11ArduinoJson8V730HB226detail13StringBuilder11startStringEv>:

  void startString() {
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
    size_ = 0;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	609a      	str	r2, [r3, #8]
    if (!node_)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d108      	bne.n	8004f98 <_ZN11ArduinoJson8V730HB226detail13StringBuilder11startStringEv+0x28>
      node_ = resources_->createString(initialCapacity);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	211f      	movs	r1, #31
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f7ff fb2d 	bl	80045ec <_ZN11ArduinoJson8V730HB226detail15ResourceManager12createStringEj>
 8004f92:	4602      	mov	r2, r0
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	605a      	str	r2, [r3, #4]
  }
 8004f98:	bf00      	nop
 8004f9a:	3708      	adds	r7, #8
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv>:

  StringNode* save() {
 8004fa0:	b590      	push	{r4, r7, lr}
 8004fa2:	b087      	sub	sp, #28
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(node_ != nullptr);
    node_->data[size_] = 0;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685a      	ldr	r2, [r3, #4]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	721a      	strb	r2, [r3, #8]
    StringNode* node = resources_->getString(adaptString(node_->data, size_));
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681c      	ldr	r4, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f103 0108 	add.w	r1, r3, #8
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	689a      	ldr	r2, [r3, #8]
 8004fc6:	f107 0308 	add.w	r3, r7, #8
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f001 fa72 	bl	80064b4 <_ZN11ArduinoJson8V730HB226detail11adaptStringIcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIPT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringES7_j>
 8004fd0:	f107 0308 	add.w	r3, r7, #8
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	4620      	mov	r0, r4
 8004fd8:	f001 fa7d 	bl	80064d6 <_ZNK11ArduinoJson8V730HB226detail15ResourceManager9getStringINS1_9RamStringEEEPNS1_10StringNodeERKT_>
 8004fdc:	6178      	str	r0, [r7, #20]
    if (!node) {
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d113      	bne.n	800500c <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv+0x6c>
      node = resources_->resizeString(node_, size_);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6818      	ldr	r0, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6859      	ldr	r1, [r3, #4]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	f7ff fb12 	bl	800461a <_ZN11ArduinoJson8V730HB226detail15ResourceManager12resizeStringEPNS1_10StringNodeEj>
 8004ff6:	6178      	str	r0, [r7, #20]
      ARDUINOJSON_ASSERT(node != nullptr);  // realloc to smaller can't fail
      resources_->saveString(node);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	6979      	ldr	r1, [r7, #20]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7ff fae5 	bl	80045ce <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringEPNS1_10StringNodeE>
      node_ = nullptr;  // next time we need a new string
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	605a      	str	r2, [r3, #4]
 800500a:	e005      	b.n	8005018 <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv+0x78>
    } else {
      node->references++;
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	889b      	ldrh	r3, [r3, #4]
 8005010:	3301      	adds	r3, #1
 8005012:	b29a      	uxth	r2, r3
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	809a      	strh	r2, [r3, #4]
    }
    return node;
 8005018:	697b      	ldr	r3, [r7, #20]
  }
 800501a:	4618      	mov	r0, r3
 800501c:	371c      	adds	r7, #28
 800501e:	46bd      	mov	sp, r7
 8005020:	bd90      	pop	{r4, r7, pc}

08005022 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>:
  void append(const char* s, size_t n) {
    while (n-- > 0)  // TODO: memcpy
      append(*s++);
  }

  void append(char c) {
 8005022:	b590      	push	{r4, r7, lr}
 8005024:	b083      	sub	sp, #12
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
 800502a:	460b      	mov	r3, r1
 800502c:	70fb      	strb	r3, [r7, #3]
    if (node_ && size_ == node_->length)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d014      	beq.n	8005060 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc+0x3e>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	6852      	ldr	r2, [r2, #4]
 800503e:	88d2      	ldrh	r2, [r2, #6]
 8005040:	4293      	cmp	r3, r2
 8005042:	d10d      	bne.n	8005060 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc+0x3e>
      node_ = resources_->resizeString(node_, size_ * 2U + 1);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6818      	ldr	r0, [r3, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6859      	ldr	r1, [r3, #4]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	005b      	lsls	r3, r3, #1
 8005052:	3301      	adds	r3, #1
 8005054:	461a      	mov	r2, r3
 8005056:	f7ff fae0 	bl	800461a <_ZN11ArduinoJson8V730HB226detail15ResourceManager12resizeStringEPNS1_10StringNodeEj>
 800505a:	4602      	mov	r2, r0
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	605a      	str	r2, [r3, #4]
    if (node_)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00a      	beq.n	800507e <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc+0x5c>
      node_->data[size_++] = c;
 8005068:	78fc      	ldrb	r4, [r7, #3]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685a      	ldr	r2, [r3, #4]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	1c58      	adds	r0, r3, #1
 8005074:	6879      	ldr	r1, [r7, #4]
 8005076:	6088      	str	r0, [r1, #8]
 8005078:	4413      	add	r3, r2
 800507a:	4622      	mov	r2, r4
 800507c:	721a      	strb	r2, [r3, #8]
  }
 800507e:	bf00      	nop
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	bd90      	pop	{r4, r7, pc}

08005086 <_ZNK11ArduinoJson8V730HB226detail13StringBuilder7isValidEv>:

  bool isValid() const {
 8005086:	b480      	push	{r7}
 8005088:	b083      	sub	sp, #12
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
    return node_ != nullptr;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	bf14      	ite	ne
 8005096:	2301      	movne	r3, #1
 8005098:	2300      	moveq	r3, #0
 800509a:	b2db      	uxtb	r3, r3
  }
 800509c:	4618      	mov	r0, r3
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <_ZNK11ArduinoJson8V730HB226detail13StringBuilder3strEv>:

  size_t size() const {
    return size_;
  }

  JsonString str() const {
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(node_ != nullptr);
    node_->data[size_] = 0;
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	685a      	ldr	r2, [r3, #4]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	4413      	add	r3, r2
 80050bc:	2200      	movs	r2, #0
 80050be:	721a      	strb	r2, [r3, #8]
    return JsonString(node_->data, size_);
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	f103 0108 	add.w	r1, r3, #8
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	689a      	ldr	r2, [r3, #8]
 80050cc:	2300      	movs	r3, #0
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f001 fa11 	bl	80064f6 <_ZN11ArduinoJson8V730HB2210JsonStringC1IjLi0EEEPKcT_b>
  }
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	3708      	adds	r7, #8
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE>:
  static void toJson(const char* src, JsonVariant dst) {
    detail::VariantData::setString(getData(dst), detail::adaptString(src),
                                   getResourceManager(dst));
  }

  static const char* fromJson(JsonVariantConst src) {
 80050dc:	b580      	push	{r7, lr}
 80050de:	b086      	sub	sp, #24
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	463b      	mov	r3, r7
 80050e4:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 80050e8:	463b      	mov	r3, r7
 80050ea:	4618      	mov	r0, r3
 80050ec:	f001 f87c 	bl	80061e8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 80050f0:	6178      	str	r0, [r7, #20]
    return data ? data->asString().c_str() : 0;
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00c      	beq.n	8005112 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE+0x36>
 80050f8:	f107 0308 	add.w	r3, r7, #8
 80050fc:	6979      	ldr	r1, [r7, #20]
 80050fe:	4618      	mov	r0, r3
 8005100:	f7ff f91c 	bl	800433c <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv>
 8005104:	f107 0308 	add.w	r3, r7, #8
 8005108:	4618      	mov	r0, r3
 800510a:	f7fe fffb 	bl	8004104 <_ZNK11ArduinoJson8V730HB2210JsonString5c_strEv>
 800510e:	4603      	mov	r3, r0
 8005110:	e000      	b.n	8005114 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE+0x38>
 8005112:	2300      	movs	r3, #0
  }
 8005114:	4618      	mov	r0, r3
 8005116:	3718      	adds	r7, #24
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <_ZN11ArduinoJson8V730HB229ConverterINS0_9JsonArrayEvE8fromJsonENS0_11JsonVariantE>:
      dst.set(nullptr);
    else
      dst.to<JsonArray>().set(src);
  }

  static JsonArray fromJson(JsonVariant src) {
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	1d3b      	adds	r3, r7, #4
 8005126:	e883 0006 	stmia.w	r3, {r1, r2}
    auto data = getData(src);
 800512a:	1d3b      	adds	r3, r7, #4
 800512c:	4618      	mov	r0, r3
 800512e:	f001 f84f 	bl	80061d0 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 8005132:	6178      	str	r0, [r7, #20]
    auto resources = getResourceManager(src);
 8005134:	1d3b      	adds	r3, r7, #4
 8005136:	4618      	mov	r0, r3
 8005138:	f001 f9ef 	bl	800651a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 800513c:	6138      	str	r0, [r7, #16]
    return JsonArray(data != 0 ? data->asArray() : 0, resources);
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d004      	beq.n	800514e <_ZN11ArduinoJson8V730HB229ConverterINS0_9JsonArrayEvE8fromJsonENS0_11JsonVariantE+0x32>
 8005144:	6978      	ldr	r0, [r7, #20]
 8005146:	f7ff f8ba 	bl	80042be <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv>
 800514a:	4603      	mov	r3, r0
 800514c:	e000      	b.n	8005150 <_ZN11ArduinoJson8V730HB229ConverterINS0_9JsonArrayEvE8fromJsonENS0_11JsonVariantE+0x34>
 800514e:	2300      	movs	r3, #0
 8005150:	693a      	ldr	r2, [r7, #16]
 8005152:	4619      	mov	r1, r3
 8005154:	68f8      	ldr	r0, [r7, #12]
 8005156:	f7ff fb9e 	bl	8004896 <_ZN11ArduinoJson8V730HB229JsonArrayC1EPNS0_6detail9ArrayDataEPNS2_15ResourceManagerE>
  }
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	3718      	adds	r7, #24
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonObjectEvE8fromJsonENS0_11JsonVariantE>:
      dst.set(nullptr);
    else
      dst.to<JsonObject>().set(src);
  }

  static JsonObject fromJson(JsonVariant src) {
 8005162:	b580      	push	{r7, lr}
 8005164:	b086      	sub	sp, #24
 8005166:	af00      	add	r7, sp, #0
 8005168:	60f8      	str	r0, [r7, #12]
 800516a:	1d3b      	adds	r3, r7, #4
 800516c:	e883 0006 	stmia.w	r3, {r1, r2}
    auto data = getData(src);
 8005170:	1d3b      	adds	r3, r7, #4
 8005172:	4618      	mov	r0, r3
 8005174:	f001 f82c 	bl	80061d0 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 8005178:	6178      	str	r0, [r7, #20]
    auto resources = getResourceManager(src);
 800517a:	1d3b      	adds	r3, r7, #4
 800517c:	4618      	mov	r0, r3
 800517e:	f001 f9cc 	bl	800651a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 8005182:	6138      	str	r0, [r7, #16]
    return JsonObject(data != 0 ? data->asObject() : 0, resources);
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d004      	beq.n	8005194 <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonObjectEvE8fromJsonENS0_11JsonVariantE+0x32>
 800518a:	6978      	ldr	r0, [r7, #20]
 800518c:	f7ff f8b9 	bl	8004302 <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv>
 8005190:	4603      	mov	r3, r0
 8005192:	e000      	b.n	8005196 <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonObjectEvE8fromJsonENS0_11JsonVariantE+0x34>
 8005194:	2300      	movs	r3, #0
 8005196:	693a      	ldr	r2, [r7, #16]
 8005198:	4619      	mov	r1, r3
 800519a:	68f8      	ldr	r0, [r7, #12]
 800519c:	f7ff fbce 	bl	800493c <_ZN11ArduinoJson8V730HB2210JsonObjectC1EPNS0_6detail10ObjectDataEPNS2_15ResourceManagerE>
  }
 80051a0:	68f8      	ldr	r0, [r7, #12]
 80051a2:	3718      	adds	r7, #24
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE>:
  }

  return false;
}

inline void VariantData::clear(ResourceManager* resources) {
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  if (type_ & VariantTypeBits::OwnedStringBit)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	791b      	ldrb	r3, [r3, #4]
 80051b6:	2101      	movs	r1, #1
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7ff f823 	bl	8004204 <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d006      	beq.n	80051d2 <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE+0x2a>
    resources->dereferenceString(content_.asOwnedString->data);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	3308      	adds	r3, #8
 80051ca:	4619      	mov	r1, r3
 80051cc:	6838      	ldr	r0, [r7, #0]
 80051ce:	f7ff fa4c 	bl	800466a <_ZN11ArduinoJson8V730HB226detail15ResourceManager17dereferenceStringEPKc>

#if ARDUINOJSON_USE_EXTENSIONS
  if (type_ & VariantTypeBits::ExtensionBit)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	791b      	ldrb	r3, [r3, #4]
 80051d6:	2110      	movs	r1, #16
 80051d8:	4618      	mov	r0, r3
 80051da:	f7ff f813 	bl	8004204 <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d005      	beq.n	80051f0 <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE+0x48>
    resources->freeExtension(content_.asSlotId);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	881b      	ldrh	r3, [r3, #0]
 80051e8:	4619      	mov	r1, r3
 80051ea:	6838      	ldr	r0, [r7, #0]
 80051ec:	f7ff fe2c 	bl	8004e48 <_ZN11ArduinoJson8V730HB226detail15ResourceManager13freeExtensionEt>
#endif

  auto collection = asCollection();
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f7ff f875 	bl	80042e0 <_ZN11ArduinoJson8V730HB226detail11VariantData12asCollectionEv>
 80051f6:	60f8      	str	r0, [r7, #12]
  if (collection)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d003      	beq.n	8005206 <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE+0x5e>
    collection->clear(resources);
 80051fe:	6839      	ldr	r1, [r7, #0]
 8005200:	68f8      	ldr	r0, [r7, #12]
 8005202:	f7ff fd2f 	bl	8004c64 <_ZN11ArduinoJson8V730HB226detail14CollectionData5clearEPNS1_15ResourceManagerE>

  type_ = VariantType::Null;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	711a      	strb	r2, [r3, #4]
}
 800520c:	bf00      	nop
 800520e:	3710      	adds	r7, #16
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>:

#if ARDUINOJSON_USE_EXTENSIONS
inline const VariantExtension* VariantData::getExtension(
    const ResourceManager* resources) const {
 8005214:	b580      	push	{r7, lr}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  return type_ & VariantTypeBits::ExtensionBit
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	791b      	ldrb	r3, [r3, #4]
 8005222:	2110      	movs	r1, #16
 8005224:	4618      	mov	r0, r3
 8005226:	f7fe ffed 	bl	8004204 <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 800522a:	4603      	mov	r3, r0
             ? resources->getExtension(content_.asSlotId)
 800522c:	2b00      	cmp	r3, #0
 800522e:	d007      	beq.n	8005240 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE+0x2c>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	881b      	ldrh	r3, [r3, #0]
 8005234:	4619      	mov	r1, r3
 8005236:	6838      	ldr	r0, [r7, #0]
 8005238:	f7ff fe27 	bl	8004e8a <_ZNK11ArduinoJson8V730HB226detail15ResourceManager12getExtensionEt>
 800523c:	4603      	mov	r3, r0
             : nullptr;
 800523e:	e000      	b.n	8005242 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE+0x2e>
             ? resources->getExtension(content_.asSlotId)
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3708      	adds	r7, #8
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}

0800524a <_ZN11ArduinoJson8V730HB2220DeserializationErrorC1ENS1_4CodeE>:
    NoMemory,
    TooDeep
  };

  DeserializationError() {}
  DeserializationError(Code c) : code_(c) {}
 800524a:	b480      	push	{r7}
 800524c:	b083      	sub	sp, #12
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
 8005252:	460b      	mov	r3, r1
 8005254:	70fb      	strb	r3, [r7, #3]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	78fa      	ldrb	r2, [r7, #3]
 800525a:	701a      	strb	r2, [r3, #0]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4618      	mov	r0, r3
 8005260:	370c      	adds	r7, #12
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <_ZNK11ArduinoJson8V730HB2220DeserializationError4codeEv>:
  explicit operator bool() const {
    return code_ != Ok;
  }

  // Returns internal enum, useful for switch statement
  Code code() const {
 800526a:	b480      	push	{r7}
 800526c:	b083      	sub	sp, #12
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
    return code_;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	781b      	ldrb	r3, [r3, #0]
  }
 8005276:	4618      	mov	r0, r3
 8005278:	370c      	adds	r7, #12
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
	...

08005284 <_ZNK11ArduinoJson8V730HB2220DeserializationError5c_strEv>:

  const char* c_str() const {
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
    static const char* messages[] = {
        "Ok",           "EmptyInput", "IncompleteInput",
        "InvalidInput", "NoMemory",   "TooDeep"};
    ARDUINOJSON_ASSERT(static_cast<size_t>(code_) <
                       sizeof(messages) / sizeof(messages[0]));
    return messages[code_];
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	461a      	mov	r2, r3
 8005292:	4b04      	ldr	r3, [pc, #16]	@ (80052a4 <_ZNK11ArduinoJson8V730HB2220DeserializationError5c_strEv+0x20>)
 8005294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  }
 8005298:	4618      	mov	r0, r3
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr
 80052a4:	24000004 	.word	0x24000004

080052a8 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter5allowEv>:
};
}  // namespace DeserializationOption

namespace detail {
struct AllowAllFilter {
  bool allow() const {
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
    return true;
 80052b0:	2301      	movs	r3, #1
  }
 80052b2:	4618      	mov	r0, r3
 80052b4:	370c      	adds	r7, #12
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr

080052be <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowArrayEv>:

  bool allowArray() const {
 80052be:	b480      	push	{r7}
 80052c0:	b083      	sub	sp, #12
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
    return true;
 80052c6:	2301      	movs	r3, #1
  }
 80052c8:	4618      	mov	r0, r3
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter11allowObjectEv>:

  bool allowObject() const {
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
    return true;
 80052dc:	2301      	movs	r3, #1
  }
 80052de:	4618      	mov	r0, r3
 80052e0:	370c      	adds	r7, #12
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr

080052ea <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>:

  bool allowValue() const {
 80052ea:	b480      	push	{r7}
 80052ec:	b083      	sub	sp, #12
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
    return true;
 80052f2:	2301      	movs	r3, #1
  }
 80052f4:	4618      	mov	r0, r3
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <_ZN11ArduinoJson8V730HB2221DeserializationOption12NestingLimitC1Ev>:
ARDUINOJSON_BEGIN_PUBLIC_NAMESPACE

namespace DeserializationOption {
class NestingLimit {
 public:
  NestingLimit() : value_(ARDUINOJSON_DEFAULT_NESTING_LIMIT) {}
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	220a      	movs	r2, #10
 800530c:	701a      	strb	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4618      	mov	r0, r3
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <_ZN11ArduinoJson8V730HB2221DeserializationOption12NestingLimitC1Eh>:
  explicit NestingLimit(uint8_t n) : value_(n) {}
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	460b      	mov	r3, r1
 8005326:	70fb      	strb	r3, [r7, #3]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	78fa      	ldrb	r2, [r7, #3]
 800532c:	701a      	strb	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4618      	mov	r0, r3
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>:

  NestingLimit decrement() const {
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(value_ > 0);
    return NestingLimit(static_cast<uint8_t>(value_ - 1));
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	3b01      	subs	r3, #1
 800534a:	b2da      	uxtb	r2, r3
 800534c:	f107 030c 	add.w	r3, r7, #12
 8005350:	4611      	mov	r1, r2
 8005352:	4618      	mov	r0, r3
 8005354:	f7ff ffe2 	bl	800531c <_ZN11ArduinoJson8V730HB2221DeserializationOption12NestingLimitC1Eh>
 8005358:	7b3b      	ldrb	r3, [r7, #12]
  }
 800535a:	4618      	mov	r0, r3
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}

08005362 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>:

  bool reached() const {
 8005362:	b480      	push	{r7}
 8005364:	b083      	sub	sp, #12
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
    return value_ == 0;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	2b00      	cmp	r3, #0
 8005370:	bf0c      	ite	eq
 8005372:	2301      	moveq	r3, #1
 8005374:	2300      	movne	r3, #0
 8005376:	b2db      	uxtb	r3, r3
  }
 8005378:	4618      	mov	r0, r3
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <_ZN11ArduinoJson8V730HB226detail26makeDeserializationOptionsENS0_21DeserializationOption12NestingLimitE>:
    DeserializationOption::NestingLimit nestingLimit, TFilter filter) {
  return {filter, nestingLimit};
}

inline DeserializationOptions<AllowAllFilter> makeDeserializationOptions(
    DeserializationOption::NestingLimit nestingLimit = {}) {
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	7138      	strb	r0, [r7, #4]
  return {{}, nestingLimit};
 800538c:	793b      	ldrb	r3, [r7, #4]
 800538e:	737b      	strb	r3, [r7, #13]
 8005390:	2300      	movs	r3, #0
 8005392:	7b3a      	ldrb	r2, [r7, #12]
 8005394:	f362 0307 	bfi	r3, r2, #0, #8
 8005398:	7b7a      	ldrb	r2, [r7, #13]
 800539a:	f362 230f 	bfi	r3, r2, #8, #8
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3714      	adds	r7, #20
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr

080053aa <_ZN11ArduinoJson8V730HB226detail18shrinkJsonDocumentERNS0_12JsonDocumentE>:
inline void shrinkJsonDocument(TDestination&) {
  // no-op by default
}

#if ARDUINOJSON_AUTO_SHRINK
inline void shrinkJsonDocument(JsonDocument& doc) {
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b082      	sub	sp, #8
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  doc.shrinkToFit();
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f7ff fb03 	bl	80049be <_ZN11ArduinoJson8V730HB2212JsonDocument11shrinkToFitEv>
}
 80053b8:	bf00      	nop
 80053ba:	3708      	adds	r7, #8
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt>:
#endif

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

namespace Utf16 {
inline bool isHighSurrogate(uint16_t codeunit) {
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	4603      	mov	r3, r0
 80053c8:	80fb      	strh	r3, [r7, #6]
  return codeunit >= 0xD800 && codeunit < 0xDC00;
 80053ca:	88fb      	ldrh	r3, [r7, #6]
 80053cc:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 80053d0:	d305      	bcc.n	80053de <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt+0x1e>
 80053d2:	88fb      	ldrh	r3, [r7, #6]
 80053d4:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 80053d8:	d201      	bcs.n	80053de <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt+0x1e>
 80053da:	2301      	movs	r3, #1
 80053dc:	e000      	b.n	80053e0 <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt+0x20>
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt>:

inline bool isLowSurrogate(uint16_t codeunit) {
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	4603      	mov	r3, r0
 80053f4:	80fb      	strh	r3, [r7, #6]
  return codeunit >= 0xDC00 && codeunit < 0xE000;
 80053f6:	88fb      	ldrh	r3, [r7, #6]
 80053f8:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 80053fc:	d305      	bcc.n	800540a <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt+0x1e>
 80053fe:	88fb      	ldrh	r3, [r7, #6]
 8005400:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 8005404:	d201      	bcs.n	800540a <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt+0x1e>
 8005406:	2301      	movs	r3, #1
 8005408:	e000      	b.n	800540c <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt+0x20>
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <_ZN11ArduinoJson8V730HB226detail5Utf169CodepointC1Ev>:

class Codepoint {
 public:
  Codepoint() : highSurrogate_(0), codepoint_(0) {}
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	801a      	strh	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	605a      	str	r2, [r3, #4]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4618      	mov	r0, r3
 8005430:	370c      	adds	r7, #12
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr

0800543a <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt>:

  bool append(uint16_t codeunit) {
 800543a:	b580      	push	{r7, lr}
 800543c:	b082      	sub	sp, #8
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
 8005442:	460b      	mov	r3, r1
 8005444:	807b      	strh	r3, [r7, #2]
    if (isHighSurrogate(codeunit)) {
 8005446:	887b      	ldrh	r3, [r7, #2]
 8005448:	4618      	mov	r0, r3
 800544a:	f7ff ffb9 	bl	80053c0 <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d007      	beq.n	8005464 <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt+0x2a>
      highSurrogate_ = codeunit & 0x3FF;
 8005454:	887b      	ldrh	r3, [r7, #2]
 8005456:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800545a:	b29a      	uxth	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	801a      	strh	r2, [r3, #0]
      return false;
 8005460:	2300      	movs	r3, #0
 8005462:	e018      	b.n	8005496 <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt+0x5c>
    }

    if (isLowSurrogate(codeunit)) {
 8005464:	887b      	ldrh	r3, [r7, #2]
 8005466:	4618      	mov	r0, r3
 8005468:	f7ff ffc0 	bl	80053ec <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00d      	beq.n	800548e <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt+0x54>
      codepoint_ =
          uint32_t(0x10000 + ((highSurrogate_ << 10) | (codeunit & 0x3FF)));
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	881b      	ldrh	r3, [r3, #0]
 8005476:	029a      	lsls	r2, r3, #10
 8005478:	887b      	ldrh	r3, [r7, #2]
 800547a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800547e:	4313      	orrs	r3, r2
 8005480:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005484:	461a      	mov	r2, r3
      codepoint_ =
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	605a      	str	r2, [r3, #4]
      return true;
 800548a:	2301      	movs	r3, #1
 800548c:	e003      	b.n	8005496 <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt+0x5c>
    }

    codepoint_ = codeunit;
 800548e:	887a      	ldrh	r2, [r7, #2]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	605a      	str	r2, [r3, #4]
    return true;
 8005494:	2301      	movs	r3, #1
  }
 8005496:	4618      	mov	r0, r3
 8005498:	3708      	adds	r7, #8
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}

0800549e <_ZNK11ArduinoJson8V730HB226detail5Utf169Codepoint5valueEv>:

  uint32_t value() const {
 800549e:	b480      	push	{r7}
 80054a0:	b083      	sub	sp, #12
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
    return codepoint_;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
  }
 80054aa:	4618      	mov	r0, r3
 80054ac:	370c      	adds	r7, #12
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr

080054b6 <_ZN11ArduinoJson8V730HB226detail7isdigitEc>:
#include <ArduinoJson/Namespace.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

#ifndef isdigit
inline bool isdigit(char c) {
 80054b6:	b480      	push	{r7}
 80054b8:	b083      	sub	sp, #12
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	4603      	mov	r3, r0
 80054be:	71fb      	strb	r3, [r7, #7]
  return '0' <= c && c <= '9';
 80054c0:	79fb      	ldrb	r3, [r7, #7]
 80054c2:	2b2f      	cmp	r3, #47	@ 0x2f
 80054c4:	d904      	bls.n	80054d0 <_ZN11ArduinoJson8V730HB226detail7isdigitEc+0x1a>
 80054c6:	79fb      	ldrb	r3, [r7, #7]
 80054c8:	2b39      	cmp	r3, #57	@ 0x39
 80054ca:	d801      	bhi.n	80054d0 <_ZN11ArduinoJson8V730HB226detail7isdigitEc+0x1a>
 80054cc:	2301      	movs	r3, #1
 80054ce:	e000      	b.n	80054d2 <_ZN11ArduinoJson8V730HB226detail7isdigitEc+0x1c>
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	370c      	adds	r7, #12
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr

080054de <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ev>:
  Double,
#endif
};

union NumberValue {
  NumberValue() {}
 80054de:	b480      	push	{r7}
 80054e0:	b083      	sub	sp, #12
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4618      	mov	r0, r3
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ef>:
  NumberValue(float x) : asFloat(x) {}
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	ed87 0a00 	vstr	s0, [r7]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	683a      	ldr	r2, [r7, #0]
 8005504:	601a      	str	r2, [r3, #0]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4618      	mov	r0, r3
 800550a:	370c      	adds	r7, #12
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ex>:
  NumberValue(JsonInteger x) : asSignedInteger(x) {}
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	e9c7 2300 	strd	r2, r3, [r7]
 8005520:	68f9      	ldr	r1, [r7, #12]
 8005522:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005526:	e9c1 2300 	strd	r2, r3, [r1]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	4618      	mov	r0, r3
 800552e:	3714      	adds	r7, #20
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ey>:
  NumberValue(JsonUInt x) : asUnsignedInteger(x) {}
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	e9c7 2300 	strd	r2, r3, [r7]
 8005544:	68f9      	ldr	r1, [r7, #12]
 8005546:	e9d7 2300 	ldrd	r2, r3, [r7]
 800554a:	e9c1 2300 	strd	r2, r3, [r1]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	4618      	mov	r0, r3
 8005552:	3714      	adds	r7, #20
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ed>:
#if ARDUINOJSON_USE_DOUBLE
  NumberValue(double x) : asDouble(x) {}
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	ed87 0b00 	vstr	d0, [r7]
 8005568:	68f9      	ldr	r1, [r7, #12]
 800556a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800556e:	e9c1 2300 	strd	r2, r3, [r1]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	4618      	mov	r0, r3
 8005576:	3714      	adds	r7, #20
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ev>:
class Number {
  NumberType type_;
  NumberValue value_;

 public:
  Number() : type_(NumberType::Invalid) {}
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	701a      	strb	r2, [r3, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	3308      	adds	r3, #8
 8005592:	4618      	mov	r0, r3
 8005594:	f7ff ffa3 	bl	80054de <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ev>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4618      	mov	r0, r3
 800559c:	3708      	adds	r7, #8
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ef>:
  Number(float value) : type_(NumberType::Float), value_(value) {}
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b082      	sub	sp, #8
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
 80055aa:	ed87 0a00 	vstr	s0, [r7]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2201      	movs	r2, #1
 80055b2:	701a      	strb	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	3308      	adds	r3, #8
 80055b8:	ed97 0a00 	vldr	s0, [r7]
 80055bc:	4618      	mov	r0, r3
 80055be:	f7ff ff99 	bl	80054f4 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ef>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4618      	mov	r0, r3
 80055c6:	3708      	adds	r7, #8
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <_ZN11ArduinoJson8V730HB226detail6NumberC1Ex>:
  Number(JsonInteger value) : type_(NumberType::SignedInteger), value_(value) {}
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	e9c7 2300 	strd	r2, r3, [r7]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2202      	movs	r2, #2
 80055dc:	701a      	strb	r2, [r3, #0]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f103 0108 	add.w	r1, r3, #8
 80055e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055e8:	4608      	mov	r0, r1
 80055ea:	f7ff ff93 	bl	8005514 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ex>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	4618      	mov	r0, r3
 80055f2:	3710      	adds	r7, #16
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ey>:
  Number(JsonUInt value) : type_(NumberType::UnsignedInteger), value_(value) {}
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	e9c7 2300 	strd	r2, r3, [r7]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2203      	movs	r2, #3
 8005608:	701a      	strb	r2, [r3, #0]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f103 0108 	add.w	r1, r3, #8
 8005610:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005614:	4608      	mov	r0, r1
 8005616:	f7ff ff8f 	bl	8005538 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ey>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	4618      	mov	r0, r3
 800561e:	3710      	adds	r7, #16
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ed>:
#if ARDUINOJSON_USE_DOUBLE
  Number(double value) : type_(NumberType::Double), value_(value) {}
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	ed87 0b00 	vstr	d0, [r7]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2204      	movs	r2, #4
 8005634:	701a      	strb	r2, [r3, #0]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	3308      	adds	r3, #8
 800563a:	ed97 0b00 	vldr	d0, [r7]
 800563e:	4618      	mov	r0, r3
 8005640:	f7ff ff8c 	bl	800555c <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ed>
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	4618      	mov	r0, r3
 8005648:	3710      	adds	r7, #16
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <_ZNK11ArduinoJson8V730HB226detail6Number4typeEv>:
      default:
        return T();
    }
  }

  NumberType type() const {
 800564e:	b480      	push	{r7}
 8005650:	b083      	sub	sp, #12
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
    return type_;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	781b      	ldrb	r3, [r3, #0]
  }
 800565a:	4618      	mov	r0, r3
 800565c:	370c      	adds	r7, #12
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr

08005666 <_ZNK11ArduinoJson8V730HB226detail6Number15asSignedIntegerEv>:

  JsonInteger asSignedInteger() const {
 8005666:	b480      	push	{r7}
 8005668:	b083      	sub	sp, #12
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == NumberType::SignedInteger);
    return value_.asSignedInteger;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
  }
 8005674:	4610      	mov	r0, r2
 8005676:	4619      	mov	r1, r3
 8005678:	370c      	adds	r7, #12
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr

08005682 <_ZNK11ArduinoJson8V730HB226detail6Number17asUnsignedIntegerEv>:

  JsonUInt asUnsignedInteger() const {
 8005682:	b480      	push	{r7}
 8005684:	b083      	sub	sp, #12
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == NumberType::UnsignedInteger);
    return value_.asUnsignedInteger;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
  }
 8005690:	4610      	mov	r0, r2
 8005692:	4619      	mov	r1, r3
 8005694:	370c      	adds	r7, #12
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr

0800569e <_ZNK11ArduinoJson8V730HB226detail6Number7asFloatEv>:

  float asFloat() const {
 800569e:	b480      	push	{r7}
 80056a0:	b083      	sub	sp, #12
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == NumberType::Float);
    return value_.asFloat;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	ee07 3a90 	vmov	s15, r3
  }
 80056ae:	eeb0 0a67 	vmov.f32	s0, s15
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <_ZNK11ArduinoJson8V730HB226detail6Number8asDoubleEv>:

#if ARDUINOJSON_USE_DOUBLE
  double asDouble() const {
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == NumberType::Double);
    return value_.asDouble;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80056ca:	ec43 2b17 	vmov	d7, r2, r3
  }
 80056ce:	eeb0 0b47 	vmov.f64	d0, d7
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>:
#endif
};

inline Number parseNumber(const char* s) {
 80056dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056e0:	b0a6      	sub	sp, #152	@ 0x98
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80056e6:	64b9      	str	r1, [r7, #72]	@ 0x48
  using mantissa_t = largest_type<traits::mantissa_type, JsonUInt>;
  using exponent_t = traits::exponent_type;

  ARDUINOJSON_ASSERT(s != 0);

  bool is_negative = false;
 80056e8:	2300      	movs	r3, #0
 80056ea:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  switch (*s) {
 80056ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	2b2b      	cmp	r3, #43	@ 0x2b
 80056f4:	d008      	beq.n	8005708 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x2c>
 80056f6:	2b2d      	cmp	r3, #45	@ 0x2d
 80056f8:	d10a      	bne.n	8005710 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x34>
    case '-':
      is_negative = true;
 80056fa:	2301      	movs	r3, #1
 80056fc:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      s++;
 8005700:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005702:	3301      	adds	r3, #1
 8005704:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005706:	e003      	b.n	8005710 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x34>
    case '+':
      s++;
 8005708:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800570a:	3301      	adds	r3, #1
 800570c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800570e:	bf00      	nop
  if (*s == 'i' || *s == 'I') {
    return Number(is_negative ? -traits::inf() : traits::inf());
  }
#endif

  if (!isdigit(*s) && *s != '.')
 8005710:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	4618      	mov	r0, r3
 8005716:	f7ff fece 	bl	80054b6 <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 800571a:	4603      	mov	r3, r0
 800571c:	f083 0301 	eor.w	r3, r3, #1
 8005720:	b2db      	uxtb	r3, r3
 8005722:	2b00      	cmp	r3, #0
 8005724:	d005      	beq.n	8005732 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x56>
 8005726:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	2b2e      	cmp	r3, #46	@ 0x2e
 800572c:	d001      	beq.n	8005732 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x56>
 800572e:	2301      	movs	r3, #1
 8005730:	e000      	b.n	8005734 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x58>
 8005732:	2300      	movs	r3, #0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d003      	beq.n	8005740 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x64>
    return Number();
 8005738:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800573a:	f7ff ff21 	bl	8005580 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ev>
 800573e:	e1f5      	b.n	8005b2c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>

  mantissa_t mantissa = 0;
 8005740:	f04f 0200 	mov.w	r2, #0
 8005744:	f04f 0300 	mov.w	r3, #0
 8005748:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
  exponent_t exponent_offset = 0;
 800574c:	2300      	movs	r3, #0
 800574e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
  const mantissa_t maxUint = JsonUInt(-1);
 8005752:	f04f 32ff 	mov.w	r2, #4294967295
 8005756:	f04f 33ff 	mov.w	r3, #4294967295
 800575a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  while (isdigit(*s)) {
 800575e:	e054      	b.n	800580a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x12e>
    uint8_t digit = uint8_t(*s - '0');
 8005760:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	3b30      	subs	r3, #48	@ 0x30
 8005766:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    if (mantissa > maxUint / 10)
 800576a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800576e:	f112 3f66 	cmn.w	r2, #1717986918	@ 0x66666666
 8005772:	49ae      	ldr	r1, [pc, #696]	@ (8005a2c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x350>)
 8005774:	418b      	sbcs	r3, r1
 8005776:	d251      	bcs.n	800581c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x140>
      break;
    mantissa *= 10;
 8005778:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 800577c:	4622      	mov	r2, r4
 800577e:	462b      	mov	r3, r5
 8005780:	f04f 0000 	mov.w	r0, #0
 8005784:	f04f 0100 	mov.w	r1, #0
 8005788:	0099      	lsls	r1, r3, #2
 800578a:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800578e:	0090      	lsls	r0, r2, #2
 8005790:	4602      	mov	r2, r0
 8005792:	460b      	mov	r3, r1
 8005794:	eb12 0804 	adds.w	r8, r2, r4
 8005798:	eb43 0905 	adc.w	r9, r3, r5
 800579c:	eb18 0308 	adds.w	r3, r8, r8
 80057a0:	61bb      	str	r3, [r7, #24]
 80057a2:	eb49 0309 	adc.w	r3, r9, r9
 80057a6:	61fb      	str	r3, [r7, #28]
 80057a8:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80057ac:	e9c7 8922 	strd	r8, r9, [r7, #136]	@ 0x88
    if (mantissa > maxUint - digit)
 80057b0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80057b4:	2200      	movs	r2, #0
 80057b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80057b8:	647a      	str	r2, [r7, #68]	@ 0x44
 80057ba:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80057be:	460b      	mov	r3, r1
 80057c0:	43db      	mvns	r3, r3
 80057c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80057c4:	4613      	mov	r3, r2
 80057c6:	43db      	mvns	r3, r3
 80057c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057ca:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80057ce:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 80057d2:	4621      	mov	r1, r4
 80057d4:	4291      	cmp	r1, r2
 80057d6:	4629      	mov	r1, r5
 80057d8:	eb71 0303 	sbcs.w	r3, r1, r3
 80057dc:	d320      	bcc.n	8005820 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x144>
      break;
    mantissa += digit;
 80057de:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80057e2:	2200      	movs	r2, #0
 80057e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80057e6:	637a      	str	r2, [r7, #52]	@ 0x34
 80057e8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80057ec:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80057f0:	4621      	mov	r1, r4
 80057f2:	1851      	adds	r1, r2, r1
 80057f4:	6139      	str	r1, [r7, #16]
 80057f6:	4629      	mov	r1, r5
 80057f8:	414b      	adcs	r3, r1
 80057fa:	617b      	str	r3, [r7, #20]
 80057fc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005800:	e9c7 3422 	strd	r3, r4, [r7, #136]	@ 0x88
    s++;
 8005804:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005806:	3301      	adds	r3, #1
 8005808:	64bb      	str	r3, [r7, #72]	@ 0x48
  while (isdigit(*s)) {
 800580a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	4618      	mov	r0, r3
 8005810:	f7ff fe51 	bl	80054b6 <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1a2      	bne.n	8005760 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x84>
 800581a:	e002      	b.n	8005822 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x146>
      break;
 800581c:	bf00      	nop
 800581e:	e000      	b.n	8005822 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x146>
      break;
 8005820:	bf00      	nop
  }

  if (*s == '\0') {
 8005822:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d136      	bne.n	8005898 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1bc>
    if (is_negative) {
 800582a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800582e:	2b00      	cmp	r3, #0
 8005830:	d019      	beq.n	8005866 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x18a>
      const mantissa_t sintMantissaMax = mantissa_t(1)
 8005832:	f04f 0200 	mov.w	r2, #0
 8005836:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800583a:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
                                         << (sizeof(JsonInteger) * 8 - 1);
      if (mantissa <= sintMantissaMax) {
 800583e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8005842:	2a01      	cmp	r2, #1
 8005844:	f173 4300 	sbcs.w	r3, r3, #2147483648	@ 0x80000000
 8005848:	d226      	bcs.n	8005898 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1bc>
        return Number(JsonInteger(~mantissa + 1));
 800584a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800584e:	2100      	movs	r1, #0
 8005850:	4250      	negs	r0, r2
 8005852:	62b8      	str	r0, [r7, #40]	@ 0x28
 8005854:	eb61 0303 	sbc.w	r3, r1, r3
 8005858:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800585a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800585e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005860:	f7ff feb4 	bl	80055cc <_ZN11ArduinoJson8V730HB226detail6NumberC1Ex>
 8005864:	e162      	b.n	8005b2c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
      }
    } else {
      return Number(JsonUInt(mantissa));
 8005866:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800586a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800586c:	f7ff fec4 	bl	80055f8 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ey>
 8005870:	e15c      	b.n	8005b2c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
    }
  }

  // avoid mantissa overflow
  while (mantissa > traits::mantissa_max) {
    mantissa /= 10;
 8005872:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8005876:	f04f 020a 	mov.w	r2, #10
 800587a:	f04f 0300 	mov.w	r3, #0
 800587e:	f7fb f861 	bl	8000944 <__aeabi_uldivmod>
 8005882:	4602      	mov	r2, r0
 8005884:	460b      	mov	r3, r1
 8005886:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
    exponent_offset++;
 800588a:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 800588e:	b29b      	uxth	r3, r3
 8005890:	3301      	adds	r3, #1
 8005892:	b29b      	uxth	r3, r3
 8005894:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
  while (mantissa > traits::mantissa_max) {
 8005898:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800589c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058a0:	d2e7      	bcs.n	8005872 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x196>
  }

  // remaing digits can't fit in the mantissa
  while (isdigit(*s)) {
 80058a2:	e009      	b.n	80058b8 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1dc>
    exponent_offset++;
 80058a4:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	3301      	adds	r3, #1
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    s++;
 80058b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058b4:	3301      	adds	r3, #1
 80058b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  while (isdigit(*s)) {
 80058b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	4618      	mov	r0, r3
 80058be:	f7ff fdfa 	bl	80054b6 <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d1ed      	bne.n	80058a4 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1c8>
  }

  if (*s == '.') {
 80058c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80058ce:	d14c      	bne.n	800596a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x28e>
    s++;
 80058d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058d2:	3301      	adds	r3, #1
 80058d4:	64bb      	str	r3, [r7, #72]	@ 0x48
    while (isdigit(*s)) {
 80058d6:	e040      	b.n	800595a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x27e>
      if (mantissa < traits::mantissa_max / 10) {
 80058d8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80058dc:	f1b2 3f99 	cmp.w	r2, #2576980377	@ 0x99999999
 80058e0:	4953      	ldr	r1, [pc, #332]	@ (8005a30 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x354>)
 80058e2:	418b      	sbcs	r3, r1
 80058e4:	d236      	bcs.n	8005954 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x278>
        mantissa = mantissa * 10 + uint8_t(*s - '0');
 80058e6:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 80058ea:	4622      	mov	r2, r4
 80058ec:	462b      	mov	r3, r5
 80058ee:	f04f 0000 	mov.w	r0, #0
 80058f2:	f04f 0100 	mov.w	r1, #0
 80058f6:	0099      	lsls	r1, r3, #2
 80058f8:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80058fc:	0090      	lsls	r0, r2, #2
 80058fe:	4602      	mov	r2, r0
 8005900:	460b      	mov	r3, r1
 8005902:	eb12 0a04 	adds.w	sl, r2, r4
 8005906:	eb43 0b05 	adc.w	fp, r3, r5
 800590a:	eb1a 030a 	adds.w	r3, sl, sl
 800590e:	60bb      	str	r3, [r7, #8]
 8005910:	eb4b 030b 	adc.w	r3, fp, fp
 8005914:	60fb      	str	r3, [r7, #12]
 8005916:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800591a:	4652      	mov	r2, sl
 800591c:	465b      	mov	r3, fp
 800591e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005920:	7809      	ldrb	r1, [r1, #0]
 8005922:	3930      	subs	r1, #48	@ 0x30
 8005924:	b2c9      	uxtb	r1, r1
 8005926:	b2c9      	uxtb	r1, r1
 8005928:	2000      	movs	r0, #0
 800592a:	6239      	str	r1, [r7, #32]
 800592c:	6278      	str	r0, [r7, #36]	@ 0x24
 800592e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005932:	4621      	mov	r1, r4
 8005934:	1851      	adds	r1, r2, r1
 8005936:	6039      	str	r1, [r7, #0]
 8005938:	4629      	mov	r1, r5
 800593a:	414b      	adcs	r3, r1
 800593c:	607b      	str	r3, [r7, #4]
 800593e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005942:	e9c7 3422 	strd	r3, r4, [r7, #136]	@ 0x88
        exponent_offset--;
 8005946:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 800594a:	b29b      	uxth	r3, r3
 800594c:	3b01      	subs	r3, #1
 800594e:	b29b      	uxth	r3, r3
 8005950:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
      }
      s++;
 8005954:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005956:	3301      	adds	r3, #1
 8005958:	64bb      	str	r3, [r7, #72]	@ 0x48
    while (isdigit(*s)) {
 800595a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	4618      	mov	r0, r3
 8005960:	f7ff fda9 	bl	80054b6 <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d1b6      	bne.n	80058d8 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1fc>
    }
  }

  int exponent = 0;
 800596a:	2300      	movs	r3, #0
 800596c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (*s == 'e' || *s == 'E') {
 8005970:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	2b65      	cmp	r3, #101	@ 0x65
 8005976:	d003      	beq.n	8005980 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x2a4>
 8005978:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	2b45      	cmp	r3, #69	@ 0x45
 800597e:	d171      	bne.n	8005a64 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x388>
    s++;
 8005980:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005982:	3301      	adds	r3, #1
 8005984:	64bb      	str	r3, [r7, #72]	@ 0x48
    bool negative_exponent = false;
 8005986:	2300      	movs	r3, #0
 8005988:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    if (*s == '-') {
 800598c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	2b2d      	cmp	r3, #45	@ 0x2d
 8005992:	d106      	bne.n	80059a2 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x2c6>
      negative_exponent = true;
 8005994:	2301      	movs	r3, #1
 8005996:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      s++;
 800599a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800599c:	3301      	adds	r3, #1
 800599e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059a0:	e04f      	b.n	8005a42 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x366>
    } else if (*s == '+') {
 80059a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	2b2b      	cmp	r3, #43	@ 0x2b
 80059a8:	d14b      	bne.n	8005a42 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x366>
      s++;
 80059aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059ac:	3301      	adds	r3, #1
 80059ae:	64bb      	str	r3, [r7, #72]	@ 0x48
    }

    while (isdigit(*s)) {
 80059b0:	e047      	b.n	8005a42 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x366>
      exponent = exponent * 10 + (*s - '0');
 80059b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80059b6:	4613      	mov	r3, r2
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	4413      	add	r3, r2
 80059bc:	005b      	lsls	r3, r3, #1
 80059be:	461a      	mov	r2, r3
 80059c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	3b30      	subs	r3, #48	@ 0x30
 80059c6:	4413      	add	r3, r2
 80059c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      if (exponent + exponent_offset > traits::exponent_max) {
 80059cc:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	@ 0x86
 80059d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80059d4:	4413      	add	r3, r2
 80059d6:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 80059da:	dd2f      	ble.n	8005a3c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x360>
        if (negative_exponent)
 80059dc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00e      	beq.n	8005a02 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x326>
          return Number(is_negative ? -0.0f : 0.0f);
 80059e4:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d002      	beq.n	80059f2 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x316>
 80059ec:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8005a34 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x358>
 80059f0:	e001      	b.n	80059f6 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x31a>
 80059f2:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8005a38 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x35c>
 80059f6:	eeb0 0a67 	vmov.f32	s0, s15
 80059fa:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80059fc:	f7ff fdd1 	bl	80055a2 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ef>
 8005a00:	e094      	b.n	8005b2c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
        else
          return Number(is_negative ? -traits::inf() : traits::inf());
 8005a02:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d006      	beq.n	8005a18 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x33c>
 8005a0a:	f000 fda7 	bl	800655c <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE3infEv>
 8005a0e:	eeb0 7b40 	vmov.f64	d7, d0
 8005a12:	eeb1 7b47 	vneg.f64	d7, d7
 8005a16:	e003      	b.n	8005a20 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x344>
 8005a18:	f000 fda0 	bl	800655c <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE3infEv>
 8005a1c:	eeb0 7b40 	vmov.f64	d7, d0
 8005a20:	eeb0 0b47 	vmov.f64	d0, d7
 8005a24:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005a26:	f7ff fdfd 	bl	8005624 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ed>
 8005a2a:	e07f      	b.n	8005b2c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
 8005a2c:	19999999 	.word	0x19999999
 8005a30:	00019999 	.word	0x00019999
 8005a34:	80000000 	.word	0x80000000
 8005a38:	00000000 	.word	0x00000000
      }
      s++;
 8005a3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a3e:	3301      	adds	r3, #1
 8005a40:	64bb      	str	r3, [r7, #72]	@ 0x48
    while (isdigit(*s)) {
 8005a42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7ff fd35 	bl	80054b6 <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1af      	bne.n	80059b2 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x2d6>
    }
    if (negative_exponent)
 8005a52:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d004      	beq.n	8005a64 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x388>
      exponent = -exponent;
 8005a5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005a5e:	425b      	negs	r3, r3
 8005a60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  }
  exponent += exponent_offset;
 8005a64:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 8005a68:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005a6c:	4413      	add	r3, r2
 8005a6e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

  // we should be at the end of the string, otherwise it's an error
  if (*s != '\0')
 8005a72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d003      	beq.n	8005a82 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3a6>
    return Number();
 8005a7a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005a7c:	f7ff fd80 	bl	8005580 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ev>
 8005a80:	e054      	b.n	8005b2c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>

#if ARDUINOJSON_USE_DOUBLE
  bool isDouble = exponent < -FloatTraits<float>::exponent_max ||
                  exponent > FloatTraits<float>::exponent_max ||
 8005a82:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005a86:	f113 0f26 	cmn.w	r3, #38	@ 0x26
 8005a8a:	db0a      	blt.n	8005aa2 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3c6>
  bool isDouble = exponent < -FloatTraits<float>::exponent_max ||
 8005a8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005a90:	2b26      	cmp	r3, #38	@ 0x26
 8005a92:	dc06      	bgt.n	8005aa2 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3c6>
                  exponent > FloatTraits<float>::exponent_max ||
 8005a94:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8005a98:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 8005a9c:	f173 0300 	sbcs.w	r3, r3, #0
 8005aa0:	d301      	bcc.n	8005aa6 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3ca>
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e000      	b.n	8005aa8 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3cc>
 8005aa6:	2300      	movs	r3, #0
  bool isDouble = exponent < -FloatTraits<float>::exponent_max ||
 8005aa8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                  mantissa > FloatTraits<float>::mantissa_max;
  if (isDouble) {
 8005aac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d01e      	beq.n	8005af2 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x416>
    auto final_result = make_float(double(mantissa), exponent);
 8005ab4:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8005ab8:	f7fa fe00 	bl	80006bc <__aeabi_ul2d>
 8005abc:	4602      	mov	r2, r0
 8005abe:	460b      	mov	r3, r1
 8005ac0:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8005ac4:	ec43 2b10 	vmov	d0, r2, r3
 8005ac8:	f000 fd56 	bl	8006578 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_>
 8005acc:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
    return Number(is_negative ? -final_result : final_result);
 8005ad0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d004      	beq.n	8005ae2 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x406>
 8005ad8:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8005adc:	eeb1 7b47 	vneg.f64	d7, d7
 8005ae0:	e001      	b.n	8005ae6 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x40a>
 8005ae2:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8005ae6:	eeb0 0b47 	vmov.f64	d0, d7
 8005aea:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005aec:	f7ff fd9a 	bl	8005624 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ed>
 8005af0:	e01c      	b.n	8005b2c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
  } else
#endif
  {
    auto final_result = make_float(float(mantissa), exponent);
 8005af2:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8005af6:	f7fa fedf 	bl	80008b8 <__aeabi_ul2f>
 8005afa:	4603      	mov	r3, r0
 8005afc:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8005b00:	ee00 3a10 	vmov	s0, r3
 8005b04:	f000 fd79 	bl	80065fa <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_>
 8005b08:	ed87 0a16 	vstr	s0, [r7, #88]	@ 0x58
    return Number(is_negative ? -final_result : final_result);
 8005b0c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d004      	beq.n	8005b1e <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x442>
 8005b14:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8005b18:	eef1 7a67 	vneg.f32	s15, s15
 8005b1c:	e001      	b.n	8005b22 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x446>
 8005b1e:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8005b22:	eeb0 0a67 	vmov.f32	s0, s15
 8005b26:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005b28:	f7ff fd3b 	bl	80055a2 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ef>
  }
}
 8005b2c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005b2e:	3798      	adds	r7, #152	@ 0x98
 8005b30:	46bd      	mov	sp, r7
 8005b32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b36:	bf00      	nop

08005b38 <_ZN6Remora11setBaseFreqEm>:

public:

	Remora();
	void run();
    void setBaseFreq(uint32_t freq) { baseFreq = freq; }
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	683a      	ldr	r2, [r7, #0]
 8005b46:	629a      	str	r2, [r3, #40]	@ 0x28
 8005b48:	bf00      	nop
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <_ZN6Remora12setServoFreqEm>:
    void setServoFreq(uint32_t freq) { servoFreq = freq; }
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	683a      	ldr	r2, [r7, #0]
 8005b62:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005b64:	bf00      	nop
 8005b66:	370c      	adds	r7, #12
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <_ZN17JsonConfigHandlerC1EP6Remora>:

#include "jsonConfigHandler.h"
#include "../remora.h"


JsonConfigHandler::JsonConfigHandler(Remora* _remora) :
 8005b70:	b590      	push	{r4, r7, lr}
 8005b72:	b085      	sub	sp, #20
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
	remoraInstance(_remora),
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	683a      	ldr	r2, [r7, #0]
 8005b7e:	601a      	str	r2, [r3, #0]
	configError(false)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	1d1c      	adds	r4, r3, #4
 8005b84:	f107 030c 	add.w	r3, r7, #12
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f01e f97a 	bl	8023e82 <_ZNSaIcEC1Ev>
 8005b8e:	f107 030c 	add.w	r3, r7, #12
 8005b92:	461a      	mov	r2, r3
 8005b94:	4914      	ldr	r1, [pc, #80]	@ (8005be8 <_ZN17JsonConfigHandlerC1EP6Remora+0x78>)
 8005b96:	4620      	mov	r0, r4
 8005b98:	f000 fd70 	bl	800667c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8005b9c:	f107 030c 	add.w	r3, r7, #12
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f01e f96f 	bl	8023e84 <_ZNSaIcED1Ev>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a10      	ldr	r2, [pc, #64]	@ (8005bec <_ZN17JsonConfigHandlerC1EP6Remora+0x7c>)
 8005baa:	61da      	str	r2, [r3, #28]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f103 0420 	add.w	r4, r3, #32
 8005bb2:	f7fe f953 	bl	8003e5c <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator8instanceEv>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	4619      	mov	r1, r3
 8005bba:	4620      	mov	r0, r4
 8005bbc:	f7fe feeb 	bl	8004996 <_ZN11ArduinoJson8V730HB2212JsonDocumentC1EPNS0_9AllocatorE>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	3360      	adds	r3, #96	@ 0x60
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f7fe fea8 	bl	800491a <_ZN11ArduinoJson8V730HB2210JsonObjectC1Ev>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
{
	loadConfiguration();
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 f80c 	bl	8005bf0 <_ZN17JsonConfigHandler17loadConfigurationEv>
    updateThreadFreq();
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 f82b 	bl	8005c34 <_ZN17JsonConfigHandler16updateThreadFreqEv>
}
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4618      	mov	r0, r3
 8005be2:	3714      	adds	r7, #20
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd90      	pop	{r4, r7, pc}
 8005be8:	0802594c 	.word	0x0802594c
 8005bec:	08025950 	.word	0x08025950

08005bf0 <_ZN17JsonConfigHandler17loadConfigurationEv>:

bool JsonConfigHandler::loadConfiguration() {
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
	// Clear any existing configuration
    jsonContent.clear();
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	3304      	adds	r3, #4
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f01e fad9 	bl	80241b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
    doc.clear();
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	3320      	adds	r3, #32
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7fe fee5 	bl	80049d6 <_ZN11ArduinoJson8V730HB2212JsonDocument5clearEv>

    // Read and parse the configuration file
    if (!readFileContents()) {
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 f903 	bl	8005e18 <_ZN17JsonConfigHandler16readFileContentsEv>
 8005c12:	4603      	mov	r3, r0
 8005c14:	f083 0301 	eor.w	r3, r3, #1
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d001      	beq.n	8005c22 <_ZN17JsonConfigHandler17loadConfigurationEv+0x32>
        return false;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	e003      	b.n	8005c2a <_ZN17JsonConfigHandler17loadConfigurationEv+0x3a>
    }
    parseJson();
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 f9c8 	bl	8005fb8 <_ZN17JsonConfigHandler9parseJsonEv>
    return true;
 8005c28:	2301      	movs	r3, #1
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3708      	adds	r7, #8
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
	...

08005c34 <_ZN17JsonConfigHandler16updateThreadFreqEv>:


void JsonConfigHandler::updateThreadFreq() {
 8005c34:	b590      	push	{r4, r7, lr}
 8005c36:	b0a1      	sub	sp, #132	@ 0x84
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
    if (configError) return;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	f040 808e 	bne.w	8005d64 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x130>

    printf("\n5. Updating thread frequencies\n");
 8005c48:	4848      	ldr	r0, [pc, #288]	@ (8005d6c <_ZN17JsonConfigHandler16updateThreadFreqEv+0x138>)
 8005c4a:	f01e ff45 	bl	8024ad8 <puts>

    JsonArray Threads = doc["Threads"];
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f103 0120 	add.w	r1, r3, #32
 8005c54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c58:	4a45      	ldr	r2, [pc, #276]	@ (8005d70 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x13c>)
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f000 fd38 	bl	80066d0 <_ZN11ArduinoJson8V730HB2212JsonDocumentixIA8_cLi0EEENS0_6detail11MemberProxyIRS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueESA_NS4_9remove_cvINS4_16remove_referenceISA_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKSA_>
 8005c60:	f107 031c 	add.w	r3, r7, #28
 8005c64:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8005c68:	4611      	mov	r1, r2
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f000 fd49 	bl	8006702 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEcvT_INS0_9JsonArrayELi0EEEv>

    // create objects from JSON data
    for (JsonArray::iterator it=Threads.begin(); it!=Threads.end(); ++it) {
 8005c70:	f107 0310 	add.w	r3, r7, #16
 8005c74:	f107 021c 	add.w	r2, r7, #28
 8005c78:	4611      	mov	r1, r2
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f7fe fe1e 	bl	80048bc <_ZNK11ArduinoJson8V730HB229JsonArray5beginEv>
 8005c80:	e05c      	b.n	8005d3c <_ZN17JsonConfigHandler16updateThreadFreqEv+0x108>
        thread = *it;
 8005c82:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005c86:	f107 0210 	add.w	r2, r7, #16
 8005c8a:	4611      	mov	r1, r2
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f7fe fdbd 	bl	800480c <_ZN11ArduinoJson8V730HB2217JsonArrayIteratordeEv>
 8005c92:	68fc      	ldr	r4, [r7, #12]
 8005c94:	463b      	mov	r3, r7
 8005c96:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8005c9a:	4611      	mov	r1, r2
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f000 fd3f 	bl	8006720 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 8005ca2:	f104 0360 	add.w	r3, r4, #96	@ 0x60
 8005ca6:	463a      	mov	r2, r7
 8005ca8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005cac:	e883 0003 	stmia.w	r3, {r0, r1}
        const char* configor = thread["Thread"];
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8005cb6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8005cba:	4a2e      	ldr	r2, [pc, #184]	@ (8005d74 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x140>)
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f000 fd3e 	bl	800673e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8005cc2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f000 fd5e 	bl	8006788 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8005ccc:	67f8      	str	r0, [r7, #124]	@ 0x7c
        uint32_t    freq = thread["Frequency"];
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8005cd4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005cd8:	4a27      	ldr	r2, [pc, #156]	@ (8005d78 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x144>)
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f000 fd60 	bl	80067a0 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA10_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8005ce0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f000 fd80 	bl	80067ea <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ImLi0EEEv>
 8005cea:	67b8      	str	r0, [r7, #120]	@ 0x78
        if (!strcmp(configor,"Base")) {
 8005cec:	4923      	ldr	r1, [pc, #140]	@ (8005d7c <_ZN17JsonConfigHandler16updateThreadFreqEv+0x148>)
 8005cee:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8005cf0:	f7fa faf6 	bl	80002e0 <strcmp>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d10a      	bne.n	8005d10 <_ZN17JsonConfigHandler16updateThreadFreqEv+0xdc>
            printf("	Setting BASE thread frequency to %lu\n", freq);
 8005cfa:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8005cfc:	4820      	ldr	r0, [pc, #128]	@ (8005d80 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x14c>)
 8005cfe:	f01e fe7b 	bl	80249f8 <iprintf>
            remoraInstance->setBaseFreq(freq);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f7ff ff15 	bl	8005b38 <_ZN6Remora11setBaseFreqEm>
 8005d0e:	e010      	b.n	8005d32 <_ZN17JsonConfigHandler16updateThreadFreqEv+0xfe>
        }
        else if (!strcmp(configor,"Servo")) {
 8005d10:	491c      	ldr	r1, [pc, #112]	@ (8005d84 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x150>)
 8005d12:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8005d14:	f7fa fae4 	bl	80002e0 <strcmp>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d109      	bne.n	8005d32 <_ZN17JsonConfigHandler16updateThreadFreqEv+0xfe>
            printf("	Setting SERVO thread frequency to %lu\n", freq);
 8005d1e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8005d20:	4819      	ldr	r0, [pc, #100]	@ (8005d88 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x154>)
 8005d22:	f01e fe69 	bl	80249f8 <iprintf>
            remoraInstance->setServoFreq(freq);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f7ff ff11 	bl	8005b54 <_ZN6Remora12setServoFreqEm>
    for (JsonArray::iterator it=Threads.begin(); it!=Threads.end(); ++it) {
 8005d32:	f107 0310 	add.w	r3, r7, #16
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7fe fd8c 	bl	8004854 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorppEv>
 8005d3c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8005d40:	f107 021c 	add.w	r2, r7, #28
 8005d44:	4611      	mov	r1, r2
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7fe fddb 	bl	8004902 <_ZNK11ArduinoJson8V730HB229JsonArray3endEv>
 8005d4c:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8005d50:	f107 0310 	add.w	r3, r7, #16
 8005d54:	4611      	mov	r1, r2
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7fe fd6c 	bl	8004834 <_ZNK11ArduinoJson8V730HB2217JsonArrayIteratorneERKS1_>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d18f      	bne.n	8005c82 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x4e>
 8005d62:	e000      	b.n	8005d66 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x132>
    if (configError) return;
 8005d64:	bf00      	nop
        }
    }
}
 8005d66:	3784      	adds	r7, #132	@ 0x84
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd90      	pop	{r4, r7, pc}
 8005d6c:	0802595c 	.word	0x0802595c
 8005d70:	0802597c 	.word	0x0802597c
 8005d74:	08025984 	.word	0x08025984
 8005d78:	0802598c 	.word	0x0802598c
 8005d7c:	08025998 	.word	0x08025998
 8005d80:	080259a0 	.word	0x080259a0
 8005d84:	080259c8 	.word	0x080259c8
 8005d88:	080259d0 	.word	0x080259d0

08005d8c <_ZN17JsonConfigHandler10getModulesEv>:


JsonArray JsonConfigHandler::getModules() {
 8005d8c:	b590      	push	{r4, r7, lr}
 8005d8e:	b08f      	sub	sp, #60	@ 0x3c
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
	if (doc["Modules"].is<JsonVariant>())
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	f103 0120 	add.w	r1, r3, #32
 8005d9c:	f107 0308 	add.w	r3, r7, #8
 8005da0:	4a1c      	ldr	r2, [pc, #112]	@ (8005e14 <_ZN17JsonConfigHandler10getModulesEv+0x88>)
 8005da2:	4618      	mov	r0, r3
 8005da4:	f000 fc94 	bl	80066d0 <_ZN11ArduinoJson8V730HB2212JsonDocumentixIA8_cLi0EEENS0_6detail11MemberProxyIRS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueESA_NS4_9remove_cvINS4_16remove_referenceISA_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKSA_>
 8005da8:	f107 0308 	add.w	r3, r7, #8
 8005dac:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005db0:	633b      	str	r3, [r7, #48]	@ 0x30
  return containsKey(key.template as<const char*>());
}

template <typename TDerived>
inline JsonVariant VariantRefBase<TDerived>::getVariant() const {
  return JsonVariant(getData(), getResourceManager());
 8005db2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005db4:	f001 fc9a 	bl	80076ec <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7getDataEv>
 8005db8:	4604      	mov	r4, r0
 8005dba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005dbc:	f001 fca6 	bl	800770c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE18getResourceManagerEv>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005dc6:	4621      	mov	r1, r4
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7fe fcb9 	bl	8004740 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
  }

  template <typename T>
  FORCE_INLINE enable_if_t<is_same<T, JsonVariant>::value, T> getVariant()
      const {
    return getVariant();
 8005dce:	bf00      	nop
template <typename TDerived>
template <typename T>
inline bool VariantRefBase<TDerived>::is() const {
  using variant_type =  // JsonVariantConst or JsonVariant?
      typename function_traits<decltype(&Converter<T>::checkJson)>::arg1_type;
  return Converter<T>::checkJson(getVariant<variant_type>());
 8005dd0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005dd4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005dd8:	f7fe fcdd 	bl	8004796 <_ZN11ArduinoJson8V730HB229ConverterINS0_11JsonVariantEvE9checkJsonES2_>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	bf00      	nop
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d010      	beq.n	8005e06 <_ZN17JsonConfigHandler10getModulesEv+0x7a>
        return doc["Modules"].as<JsonArray>();
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	f103 0120 	add.w	r1, r3, #32
 8005dea:	f107 0318 	add.w	r3, r7, #24
 8005dee:	4a09      	ldr	r2, [pc, #36]	@ (8005e14 <_ZN17JsonConfigHandler10getModulesEv+0x88>)
 8005df0:	4618      	mov	r0, r3
 8005df2:	f000 fc6d 	bl	80066d0 <_ZN11ArduinoJson8V730HB2212JsonDocumentixIA8_cLi0EEENS0_6detail11MemberProxyIRS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueESA_NS4_9remove_cvINS4_16remove_referenceISA_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKSA_>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f107 0218 	add.w	r2, r7, #24
 8005dfc:	4611      	mov	r1, r2
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f000 fcff 	bl	8006802 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE2asINS0_9JsonArrayEEET_v>
 8005e04:	e002      	b.n	8005e0c <_ZN17JsonConfigHandler10getModulesEv+0x80>
    else
        return JsonArray();
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f7fe fd34 	bl	8004874 <_ZN11ArduinoJson8V730HB229JsonArrayC1Ev>
}
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	373c      	adds	r7, #60	@ 0x3c
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd90      	pop	{r4, r7, pc}
 8005e14:	080259f8 	.word	0x080259f8

08005e18 <_ZN17JsonConfigHandler16readFileContentsEv>:
    }
    return JsonObject(); // Return empty object if not found
}
*/

bool JsonConfigHandler::readFileContents() {
 8005e18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005e1c:	b08f      	sub	sp, #60	@ 0x3c
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]

	uint32_t bytesread; // bytes read count


    printf("\n1. Reading JSON configuration file\n");
 8005e22:	485a      	ldr	r0, [pc, #360]	@ (8005f8c <_ZN17JsonConfigHandler16readFileContentsEv+0x174>)
 8005e24:	f01e fe58 	bl	8024ad8 <puts>

    // Try to mount the file system
    printf("	Mounting the file system... \n");
 8005e28:	4859      	ldr	r0, [pc, #356]	@ (8005f90 <_ZN17JsonConfigHandler16readFileContentsEv+0x178>)
 8005e2a:	f01e fe55 	bl	8024ad8 <puts>
    if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 8005e2e:	2200      	movs	r2, #0
 8005e30:	4958      	ldr	r1, [pc, #352]	@ (8005f94 <_ZN17JsonConfigHandler16readFileContentsEv+0x17c>)
 8005e32:	4859      	ldr	r0, [pc, #356]	@ (8005f98 <_ZN17JsonConfigHandler16readFileContentsEv+0x180>)
 8005e34:	f01d fbc0 	bl	80235b8 <f_mount>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	bf14      	ite	ne
 8005e3e:	2301      	movne	r3, #1
 8005e40:	2300      	moveq	r3, #0
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d005      	beq.n	8005e54 <_ZN17JsonConfigHandler16readFileContentsEv+0x3c>
	{
    	printf("	Failed to mount SD card\n\r");
 8005e48:	4854      	ldr	r0, [pc, #336]	@ (8005f9c <_ZN17JsonConfigHandler16readFileContentsEv+0x184>)
 8005e4a:	f01e fdd5 	bl	80249f8 <iprintf>
    	Error_Handler();
 8005e4e:	f003 fc4b 	bl	80096e8 <Error_Handler>
 8005e52:	e094      	b.n	8005f7e <_ZN17JsonConfigHandler16readFileContentsEv+0x166>
	}
    else
    {
		//Open file for reading
		if(f_open(&SDFile, filename, FA_READ) != FR_OK)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	69db      	ldr	r3, [r3, #28]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	4850      	ldr	r0, [pc, #320]	@ (8005fa0 <_ZN17JsonConfigHandler16readFileContentsEv+0x188>)
 8005e5e:	f01d fbf1 	bl	8023644 <f_open>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	bf14      	ite	ne
 8005e68:	2301      	movne	r3, #1
 8005e6a:	2300      	moveq	r3, #0
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d005      	beq.n	8005e7e <_ZN17JsonConfigHandler16readFileContentsEv+0x66>
		{
			printf("	Failed to open JSON config file\n");
 8005e72:	484c      	ldr	r0, [pc, #304]	@ (8005fa4 <_ZN17JsonConfigHandler16readFileContentsEv+0x18c>)
 8005e74:	f01e fe30 	bl	8024ad8 <puts>
			Error_Handler();
 8005e78:	f003 fc36 	bl	80096e8 <Error_Handler>
 8005e7c:	e07f      	b.n	8005f7e <_ZN17JsonConfigHandler16readFileContentsEv+0x166>
			    // Remove comments from next line to print out the JSON config file
			    printf("\n%s\n", jsonContent.c_str());
			}

			f_close(&SDFile);
		}
 8005e7e:	466b      	mov	r3, sp
 8005e80:	461e      	mov	r6, r3
			int32_t length = f_size(&SDFile);
 8005e82:	4b47      	ldr	r3, [pc, #284]	@ (8005fa0 <_ZN17JsonConfigHandler16readFileContentsEv+0x188>)
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	633b      	str	r3, [r7, #48]	@ 0x30
			printf("	JSON config file lenght = %2ld\n", length);
 8005e88:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005e8a:	4847      	ldr	r0, [pc, #284]	@ (8005fa8 <_ZN17JsonConfigHandler16readFileContentsEv+0x190>)
 8005e8c:	f01e fdb4 	bl	80249f8 <iprintf>
			__attribute__((aligned(32))) char rtext[length];
 8005e90:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005e92:	1e4b      	subs	r3, r1, #1
 8005e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e96:	460a      	mov	r2, r1
 8005e98:	2300      	movs	r3, #0
 8005e9a:	4690      	mov	r8, r2
 8005e9c:	4699      	mov	r9, r3
 8005e9e:	f04f 0200 	mov.w	r2, #0
 8005ea2:	f04f 0300 	mov.w	r3, #0
 8005ea6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005eaa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005eae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005eb2:	460a      	mov	r2, r1
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	4614      	mov	r4, r2
 8005eb8:	461d      	mov	r5, r3
 8005eba:	f04f 0200 	mov.w	r2, #0
 8005ebe:	f04f 0300 	mov.w	r3, #0
 8005ec2:	00eb      	lsls	r3, r5, #3
 8005ec4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ec8:	00e2      	lsls	r2, r4, #3
 8005eca:	460b      	mov	r3, r1
 8005ecc:	3318      	adds	r3, #24
 8005ece:	3307      	adds	r3, #7
 8005ed0:	08db      	lsrs	r3, r3, #3
 8005ed2:	00db      	lsls	r3, r3, #3
 8005ed4:	ebad 0d03 	sub.w	sp, sp, r3
 8005ed8:	466b      	mov	r3, sp
 8005eda:	331f      	adds	r3, #31
 8005edc:	095b      	lsrs	r3, r3, #5
 8005ede:	015b      	lsls	r3, r3, #5
 8005ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
			if(f_read(&SDFile, rtext, length, (UINT *)&bytesread) != FR_OK)
 8005ee2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ee4:	f107 030c 	add.w	r3, r7, #12
 8005ee8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005eea:	482d      	ldr	r0, [pc, #180]	@ (8005fa0 <_ZN17JsonConfigHandler16readFileContentsEv+0x188>)
 8005eec:	f01d fd64 	bl	80239b8 <f_read>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	bf14      	ite	ne
 8005ef6:	2301      	movne	r3, #1
 8005ef8:	2300      	moveq	r3, #0
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d003      	beq.n	8005f08 <_ZN17JsonConfigHandler16readFileContentsEv+0xf0>
				printf("	JSON config file read FAILURE\n");
 8005f00:	482a      	ldr	r0, [pc, #168]	@ (8005fac <_ZN17JsonConfigHandler16readFileContentsEv+0x194>)
 8005f02:	f01e fde9 	bl	8024ad8 <puts>
 8005f06:	e036      	b.n	8005f76 <_ZN17JsonConfigHandler16readFileContentsEv+0x15e>
				printf("	JSON config file read SUCCESS!\n");
 8005f08:	4829      	ldr	r0, [pc, #164]	@ (8005fb0 <_ZN17JsonConfigHandler16readFileContentsEv+0x198>)
 8005f0a:	f01e fde5 	bl	8024ad8 <puts>
				jsonContent.reserve(length + 1);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	1d1a      	adds	r2, r3, #4
 8005f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f14:	3301      	adds	r3, #1
 8005f16:	4619      	mov	r1, r3
 8005f18:	4610      	mov	r0, r2
 8005f1a:	f01e f930 	bl	802417e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>
			    for (int i = 0; i < length; i++) {
 8005f1e:	2300      	movs	r3, #0
 8005f20:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f22:	e01a      	b.n	8005f5a <_ZN17JsonConfigHandler16readFileContentsEv+0x142>
			    	jsonContent = jsonContent + rtext[i];
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	1d19      	adds	r1, r3, #4
 8005f28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f2c:	4413      	add	r3, r2
 8005f2e:	781a      	ldrb	r2, [r3, #0]
 8005f30:	f107 0310 	add.w	r3, r7, #16
 8005f34:	4618      	mov	r0, r3
 8005f36:	f000 fc88 	bl	800684a <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	3304      	adds	r3, #4
 8005f3e:	f107 0210 	add.w	r2, r7, #16
 8005f42:	4611      	mov	r1, r2
 8005f44:	4618      	mov	r0, r3
 8005f46:	f01e f880 	bl	802404a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8005f4a:	f107 0310 	add.w	r3, r7, #16
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f01e f875 	bl	802403e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			    for (int i = 0; i < length; i++) {
 8005f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f56:	3301      	adds	r3, #1
 8005f58:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f5a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	dbe0      	blt.n	8005f24 <_ZN17JsonConfigHandler16readFileContentsEv+0x10c>
			    printf("\n%s\n", jsonContent.c_str());
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	3304      	adds	r3, #4
 8005f66:	4618      	mov	r0, r3
 8005f68:	f01e f97a 	bl	8024260 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	4619      	mov	r1, r3
 8005f70:	4810      	ldr	r0, [pc, #64]	@ (8005fb4 <_ZN17JsonConfigHandler16readFileContentsEv+0x19c>)
 8005f72:	f01e fd41 	bl	80249f8 <iprintf>
			f_close(&SDFile);
 8005f76:	480a      	ldr	r0, [pc, #40]	@ (8005fa0 <_ZN17JsonConfigHandler16readFileContentsEv+0x188>)
 8005f78:	f01d fedb 	bl	8023d32 <f_close>
 8005f7c:	46b5      	mov	sp, r6
    }

	return true;
 8005f7e:	2301      	movs	r3, #1
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	373c      	adds	r7, #60	@ 0x3c
 8005f84:	46bd      	mov	sp, r7
 8005f86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f8a:	bf00      	nop
 8005f8c:	08025a00 	.word	0x08025a00
 8005f90:	08025a24 	.word	0x08025a24
 8005f94:	2400041c 	.word	0x2400041c
 8005f98:	24000420 	.word	0x24000420
 8005f9c:	08025a44 	.word	0x08025a44
 8005fa0:	24000650 	.word	0x24000650
 8005fa4:	08025a60 	.word	0x08025a60
 8005fa8:	08025a84 	.word	0x08025a84
 8005fac:	08025aa8 	.word	0x08025aa8
 8005fb0:	08025ac8 	.word	0x08025ac8
 8005fb4:	08025ae8 	.word	0x08025ae8

08005fb8 <_ZN17JsonConfigHandler9parseJsonEv>:


bool JsonConfigHandler::parseJson() {
 8005fb8:	b590      	push	{r4, r7, lr}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
	
	printf("\n3. Parsing json configuration file\n");
 8005fc0:	482a      	ldr	r0, [pc, #168]	@ (800606c <_ZN17JsonConfigHandler9parseJsonEv+0xb4>)
 8005fc2:	f01e fd89 	bl	8024ad8 <puts>
	
    // Clear any existing parsed data
    doc.clear();
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	3320      	adds	r3, #32
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7fe fd03 	bl	80049d6 <_ZN11ArduinoJson8V730HB2212JsonDocument5clearEv>

    // Parse JSON
    DeserializationError error = deserializeJson(doc, jsonContent.c_str());
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f103 0420 	add.w	r4, r3, #32
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	3304      	adds	r3, #4
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f01e f940 	bl	8024260 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	4620      	mov	r0, r4
 8005fe6:	f000 fc46 	bl	8006876 <_ZN11ArduinoJson8V730HB2215deserializeJsonIRNS0_12JsonDocumentEKcJELi0EEENS0_20DeserializationErrorEOT_PT0_DpOT1_>
 8005fea:	4603      	mov	r3, r0
 8005fec:	733b      	strb	r3, [r7, #12]

    printf("	Config deserialisation - ");
 8005fee:	4820      	ldr	r0, [pc, #128]	@ (8006070 <_ZN17JsonConfigHandler9parseJsonEv+0xb8>)
 8005ff0:	f01e fd02 	bl	80249f8 <iprintf>

    switch (error.code())
 8005ff4:	f107 030c 	add.w	r3, r7, #12
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f7ff f936 	bl	800526a <_ZNK11ArduinoJson8V730HB2220DeserializationError4codeEv>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b04      	cmp	r3, #4
 8006002:	d012      	beq.n	800602a <_ZN17JsonConfigHandler9parseJsonEv+0x72>
 8006004:	2b04      	cmp	r3, #4
 8006006:	dc18      	bgt.n	800603a <_ZN17JsonConfigHandler9parseJsonEv+0x82>
 8006008:	2b00      	cmp	r3, #0
 800600a:	d002      	beq.n	8006012 <_ZN17JsonConfigHandler9parseJsonEv+0x5a>
 800600c:	2b03      	cmp	r3, #3
 800600e:	d004      	beq.n	800601a <_ZN17JsonConfigHandler9parseJsonEv+0x62>
 8006010:	e013      	b.n	800603a <_ZN17JsonConfigHandler9parseJsonEv+0x82>
    {
        case DeserializationError::Ok:
            printf("Deserialization succeeded\n");
 8006012:	4818      	ldr	r0, [pc, #96]	@ (8006074 <_ZN17JsonConfigHandler9parseJsonEv+0xbc>)
 8006014:	f01e fd60 	bl	8024ad8 <puts>
            break;
 8006018:	e023      	b.n	8006062 <_ZN17JsonConfigHandler9parseJsonEv+0xaa>
        case DeserializationError::InvalidInput:
            printf("Invalid input!\n");
 800601a:	4817      	ldr	r0, [pc, #92]	@ (8006078 <_ZN17JsonConfigHandler9parseJsonEv+0xc0>)
 800601c:	f01e fd5c 	bl	8024ad8 <puts>
            configError = true;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            break;
 8006028:	e01b      	b.n	8006062 <_ZN17JsonConfigHandler9parseJsonEv+0xaa>
        case DeserializationError::NoMemory:
            printf("Not enough memory\n");
 800602a:	4814      	ldr	r0, [pc, #80]	@ (800607c <_ZN17JsonConfigHandler9parseJsonEv+0xc4>)
 800602c:	f01e fd54 	bl	8024ad8 <puts>
            configError = true;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            break;
 8006038:	e013      	b.n	8006062 <_ZN17JsonConfigHandler9parseJsonEv+0xaa>
        default:
            printf("Deserialization failed: ");
 800603a:	4811      	ldr	r0, [pc, #68]	@ (8006080 <_ZN17JsonConfigHandler9parseJsonEv+0xc8>)
 800603c:	f01e fcdc 	bl	80249f8 <iprintf>
            printf(error.c_str());
 8006040:	f107 030c 	add.w	r3, r7, #12
 8006044:	4618      	mov	r0, r3
 8006046:	f7ff f91d 	bl	8005284 <_ZNK11ArduinoJson8V730HB2220DeserializationError5c_strEv>
 800604a:	4603      	mov	r3, r0
 800604c:	4618      	mov	r0, r3
 800604e:	f01e fcd3 	bl	80249f8 <iprintf>
            printf("\n");
 8006052:	200a      	movs	r0, #10
 8006054:	f01e fce2 	bl	8024a1c <putchar>
            configError = true;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            break;
 8006060:	bf00      	nop
    }

    return true;
 8006062:	2301      	movs	r3, #1
}
 8006064:	4618      	mov	r0, r3
 8006066:	3714      	adds	r7, #20
 8006068:	46bd      	mov	sp, r7
 800606a:	bd90      	pop	{r4, r7, pc}
 800606c:	08025af0 	.word	0x08025af0
 8006070:	08025b14 	.word	0x08025b14
 8006074:	08025b30 	.word	0x08025b30
 8006078:	08025b4c 	.word	0x08025b4c
 800607c:	08025b5c 	.word	0x08025b5c
 8006080:	08025b70 	.word	0x08025b70

08006084 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>:
    char_traits<_CharT>::
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
      std::size_t __i = 0;
 800608c:	2300      	movs	r3, #0
 800608e:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 8006090:	e002      	b.n	8006098 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0x14>
        ++__i;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	3301      	adds	r3, #1
 8006096:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	4413      	add	r3, r2
 800609e:	2200      	movs	r2, #0
 80060a0:	72fa      	strb	r2, [r7, #11]
 80060a2:	f107 020b 	add.w	r2, r7, #11
 80060a6:	4611      	mov	r1, r2
 80060a8:	4618      	mov	r0, r3
 80060aa:	f000 fbf7 	bl	800689c <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>
 80060ae:	4603      	mov	r3, r0
 80060b0:	f083 0301 	eor.w	r3, r3, #1
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d1eb      	bne.n	8006092 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0xe>
      return __i;
 80060ba:	68fb      	ldr	r3, [r7, #12]
    }
 80060bc:	4618      	mov	r0, r3
 80060be:	3710      	adds	r7, #16
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <_ZN11ArduinoJson8V730HB2210JsonStringC1ItLi0EEEPKcT_b>:
  JsonString(const char* data, TSize sz, bool isStatic = false)
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	4611      	mov	r1, r2
 80060d0:	461a      	mov	r2, r3
 80060d2:	460b      	mov	r3, r1
 80060d4:	80fb      	strh	r3, [r7, #6]
 80060d6:	4613      	mov	r3, r2
 80060d8:	717b      	strb	r3, [r7, #5]
      : str_(data, size_t(sz), isStatic) {}
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	88fa      	ldrh	r2, [r7, #6]
 80060de:	797b      	ldrb	r3, [r7, #5]
 80060e0:	68b9      	ldr	r1, [r7, #8]
 80060e2:	f7fd ff3b 	bl	8003f5c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	4618      	mov	r0, r3
 80060ea:	3710      	adds	r7, #16
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE>:
    auto indexInPool = SlotId(id % ARDUINOJSON_POOL_CAPACITY);
    ARDUINOJSON_ASSERT(poolIndex < count_);
    return pools_[poolIndex].getSlot(indexInPool);
  }

  void clear(Allocator* allocator) {
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
    for (PoolCount i = 0; i < count_; i++)
 80060fa:	2300      	movs	r3, #0
 80060fc:	81fb      	strh	r3, [r7, #14]
 80060fe:	e00b      	b.n	8006118 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE+0x28>
      pools_[i].destroy(allocator);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a1a      	ldr	r2, [r3, #32]
 8006104:	89fb      	ldrh	r3, [r7, #14]
 8006106:	00db      	lsls	r3, r3, #3
 8006108:	4413      	add	r3, r2
 800610a:	6839      	ldr	r1, [r7, #0]
 800610c:	4618      	mov	r0, r3
 800610e:	f000 fc40 	bl	8006992 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7destroyEPNS0_9AllocatorE>
    for (PoolCount i = 0; i < count_; i++)
 8006112:	89fb      	ldrh	r3, [r7, #14]
 8006114:	3301      	adds	r3, #1
 8006116:	81fb      	strh	r3, [r7, #14]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800611c:	89fa      	ldrh	r2, [r7, #14]
 800611e:	429a      	cmp	r2, r3
 8006120:	d3ee      	bcc.n	8006100 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE+0x10>
    count_ = 0;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	849a      	strh	r2, [r3, #36]	@ 0x24
    freeList_ = NULL_SLOT;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800612e:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (pools_ != preallocatedPools_) {
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6a1a      	ldr	r2, [r3, #32]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	429a      	cmp	r2, r3
 8006138:	d00e      	beq.n	8006158 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE+0x68>
      allocator->deallocate(pools_);
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	3304      	adds	r3, #4
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	6a12      	ldr	r2, [r2, #32]
 8006146:	4611      	mov	r1, r2
 8006148:	6838      	ldr	r0, [r7, #0]
 800614a:	4798      	blx	r3
      pools_ = preallocatedPools_;
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	621a      	str	r2, [r3, #32]
      capacity_ = ARDUINOJSON_INITIAL_POOL_COUNT;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2204      	movs	r2, #4
 8006156:	84da      	strh	r2, [r3, #38]	@ 0x26
    }
  }
 8006158:	bf00      	nop
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE>:

  size_t size() const {
    return Pool::slotsToBytes(usage());
  }

  void shrinkToFit(Allocator* allocator) {
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
    if (count_ > 0)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00d      	beq.n	800618e <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE+0x2e>
      pools_[count_ - 1].shrinkToFit(allocator);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a1a      	ldr	r2, [r3, #32]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800617a:	4619      	mov	r1, r3
 800617c:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8006180:	440b      	add	r3, r1
 8006182:	00db      	lsls	r3, r3, #3
 8006184:	4413      	add	r3, r2
 8006186:	6839      	ldr	r1, [r7, #0]
 8006188:	4618      	mov	r0, r3
 800618a:	f000 fc2e 	bl	80069ea <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE>
    if (pools_ != preallocatedPools_ && count_ != capacity_) {
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a1a      	ldr	r2, [r3, #32]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	429a      	cmp	r2, r3
 8006196:	d017      	beq.n	80061c8 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE+0x68>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d011      	beq.n	80061c8 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE+0x68>
      pools_ = static_cast<Pool*>(
          allocator->reallocate(pools_, count_ * sizeof(Pool)));
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	3308      	adds	r3, #8
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	6a11      	ldr	r1, [r2, #32]
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 80061b4:	00d2      	lsls	r2, r2, #3
 80061b6:	6838      	ldr	r0, [r7, #0]
 80061b8:	4798      	blx	r3
 80061ba:	4602      	mov	r2, r0
      pools_ = static_cast<Pool*>(
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	621a      	str	r2, [r3, #32]
      ARDUINOJSON_ASSERT(pools_ != nullptr);  // realloc to smaller can't fail
      capacity_ = count_;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	84da      	strh	r2, [r3, #38]	@ 0x26
    }
  }
 80061c8:	bf00      	nop
 80061ca:	3708      	adds	r7, #8
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>:
      -> decltype(client.getResourceManager()) {
    return client.getResourceManager();
  }

  template <typename TClient>
  static auto getData(TClient& client) -> decltype(client.getData()) {
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
    return client.getData();
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f7fe fad0 	bl	800477e <_ZNK11ArduinoJson8V730HB2211JsonVariant7getDataEv>
 80061de:	4603      	mov	r3, r0
  }
 80061e0:	4618      	mov	r0, r3
 80061e2:	3708      	adds	r7, #8
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
    return client.getData();
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f7fe fa8d 	bl	8004710 <_ZNK11ArduinoJson8V730HB2216JsonVariantConst7getDataEv>
 80061f6:	4603      	mov	r3, r0
  }
 80061f8:	4618      	mov	r0, r3
 80061fa:	3708      	adds	r7, #8
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f7fe fa8d 	bl	8004728 <_ZNK11ArduinoJson8V730HB2216JsonVariantConst18getResourceManagerEv>
 800620e:	4603      	mov	r3, r0
  }
 8006210:	4618      	mov	r0, r3
 8006212:	3708      	adds	r7, #8
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>:
  Slot() : ptr_(nullptr), id_(NULL_SLOT) {}
  Slot(T* p, SlotId id) : ptr_(p), id_(id) {
    ARDUINOJSON_ASSERT((p == nullptr) == (id == NULL_SLOT));
  }

  explicit operator bool() const {
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
    return ptr_ != nullptr;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	bf14      	ite	ne
 8006228:	2301      	movne	r3, #1
 800622a:	2300      	moveq	r3, #0
 800622c:	b2db      	uxtb	r3, r3
  }
 800622e:	4618      	mov	r0, r3
 8006230:	370c      	adds	r7, #12
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr

0800623a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>:

  SlotId id() const {
    return id_;
  }

  T* ptr() const {
 800623a:	b480      	push	{r7}
 800623c:	b083      	sub	sp, #12
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
    return ptr_;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
  }
 8006246:	4618      	mov	r0, r3
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr

08006252 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>:
  SlotId id() const {
 8006252:	b480      	push	{r7}
 8006254:	b083      	sub	sp, #12
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
    return id_;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	889b      	ldrh	r3, [r3, #4]
  }
 800625e:	4618      	mov	r0, r3
 8006260:	370c      	adds	r7, #12
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr

0800626a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>:

  T* operator->() const {
 800626a:	b480      	push	{r7}
 800626c:	b083      	sub	sp, #12
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(ptr_ != nullptr);
    return ptr_;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
  }
 8006276:	4618      	mov	r0, r3
 8006278:	370c      	adds	r7, #12
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr

08006282 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1EPS3_t>:
  Slot(T* p, SlotId id) : ptr_(p), id_(id) {
 8006282:	b480      	push	{r7}
 8006284:	b085      	sub	sp, #20
 8006286:	af00      	add	r7, sp, #0
 8006288:	60f8      	str	r0, [r7, #12]
 800628a:	60b9      	str	r1, [r7, #8]
 800628c:	4613      	mov	r3, r2
 800628e:	80fb      	strh	r3, [r7, #6]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	68ba      	ldr	r2, [r7, #8]
 8006294:	601a      	str	r2, [r3, #0]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	88fa      	ldrh	r2, [r7, #6]
 800629a:	809a      	strh	r2, [r3, #4]
  }
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	4618      	mov	r0, r3
 80062a0:	3714      	adds	r7, #20
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr

080062aa <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1Ev>:
  Slot() : ptr_(nullptr), id_(NULL_SLOT) {}
 80062aa:	b480      	push	{r7}
 80062ac:	b083      	sub	sp, #12
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	601a      	str	r2, [r3, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80062be:	809a      	strh	r2, [r3, #4]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4618      	mov	r0, r3
 80062c4:	370c      	adds	r7, #12
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr

080062ce <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE>:
  Slot<T> allocSlot(Allocator* allocator) {
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b088      	sub	sp, #32
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	60f8      	str	r0, [r7, #12]
 80062d6:	60b9      	str	r1, [r7, #8]
 80062d8:	607a      	str	r2, [r7, #4]
    if (freeList_ != NULL_SLOT) {
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d005      	beq.n	80062f2 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x24>
      return allocFromFreeList();
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	68b9      	ldr	r1, [r7, #8]
 80062ea:	4618      	mov	r0, r3
 80062ec:	f000 fbda 	bl	8006aa4 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromFreeListEv>
 80062f0:	e02c      	b.n	800634c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x7e>
    if (count_) {
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d016      	beq.n	8006328 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x5a>
      auto slot = allocFromLastPool();
 80062fa:	f107 0314 	add.w	r3, r7, #20
 80062fe:	68b9      	ldr	r1, [r7, #8]
 8006300:	4618      	mov	r0, r3
 8006302:	f000 fbec 	bl	8006ade <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv>
      if (slot)
 8006306:	f107 0314 	add.w	r3, r7, #20
 800630a:	4618      	mov	r0, r3
 800630c:	f000 f822 	bl	8006354 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d008      	beq.n	8006328 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x5a>
        return slot;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	461a      	mov	r2, r3
 800631a:	f107 0314 	add.w	r3, r7, #20
 800631e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006322:	e882 0003 	stmia.w	r2, {r0, r1}
  }
 8006326:	e011      	b.n	800634c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x7e>
    auto pool = addPool(allocator);
 8006328:	6879      	ldr	r1, [r7, #4]
 800632a:	68b8      	ldr	r0, [r7, #8]
 800632c:	f000 fc14 	bl	8006b58 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE>
 8006330:	61f8      	str	r0, [r7, #28]
    if (!pool)
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d103      	bne.n	8006340 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x72>
      return {};
 8006338:	68f8      	ldr	r0, [r7, #12]
 800633a:	f000 fc49 	bl	8006bd0 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>
 800633e:	e005      	b.n	800634c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x7e>
    return allocFromLastPool();
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	68b9      	ldr	r1, [r7, #8]
 8006344:	4618      	mov	r0, r3
 8006346:	f000 fbca 	bl	8006ade <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv>
 800634a:	bf00      	nop
  }
 800634c:	68f8      	ldr	r0, [r7, #12]
 800634e:	3720      	adds	r7, #32
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>:
  explicit operator bool() const {
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
    return ptr_ != nullptr;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	bf14      	ite	ne
 8006364:	2301      	movne	r3, #1
 8006366:	2300      	moveq	r3, #0
 8006368:	b2db      	uxtb	r3, r3
  }
 800636a:	4618      	mov	r0, r3
 800636c:	370c      	adds	r7, #12
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr

08006376 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEptEv>:
  T* operator->() const {
 8006376:	b480      	push	{r7}
 8006378:	b083      	sub	sp, #12
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
    return ptr_;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
  }
 8006382:	4618      	mov	r0, r3
 8006384:	370c      	adds	r7, #12
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr

0800638e <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>:
  SlotId id() const {
 800638e:	b480      	push	{r7}
 8006390:	b083      	sub	sp, #12
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
    return id_;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	889b      	ldrh	r3, [r3, #4]
  }
 800639a:	4618      	mov	r0, r3
 800639c:	370c      	adds	r7, #12
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr

080063a6 <_ZN11ArduinoJson8V730HB226detail10alias_castIPNS1_15ResourceManager8SlotDataEPNS1_11VariantDataEEET_T0_>:
    T data;
  };
};

template <typename T, typename F>
T alias_cast(F raw_data) {
 80063a6:	b480      	push	{r7}
 80063a8:	b085      	sub	sp, #20
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
  alias_cast_t<T, F> ac;
  ac.raw = raw_data;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	60fb      	str	r3, [r7, #12]
  return ac.data;
 80063b2:	68fb      	ldr	r3, [r7, #12]
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3714      	adds	r7, #20
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>:
  Slot(T* p, SlotId id) : ptr_(p), id_(id) {
 80063c0:	b480      	push	{r7}
 80063c2:	b085      	sub	sp, #20
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	4613      	mov	r3, r2
 80063cc:	80fb      	strh	r3, [r7, #6]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	68ba      	ldr	r2, [r7, #8]
 80063d2:	601a      	str	r2, [r3, #0]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	88fa      	ldrh	r2, [r7, #6]
 80063d8:	809a      	strh	r2, [r3, #4]
  }
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	4618      	mov	r0, r3
 80063de:	3714      	adds	r7, #20
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE8freeSlotENS1_4SlotIS4_EE>:
  void freeSlot(Slot<T> slot) {
 80063e8:	b590      	push	{r4, r7, lr}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	1d3b      	adds	r3, r7, #4
 80063f2:	e883 0006 	stmia.w	r3, {r1, r2}
    reinterpret_cast<FreeSlot*>(slot.ptr())->next = freeList_;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	8d1c      	ldrh	r4, [r3, #40]	@ 0x28
 80063fa:	1d3b      	adds	r3, r7, #4
 80063fc:	4618      	mov	r0, r3
 80063fe:	f000 fbf9 	bl	8006bf4 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE3ptrEv>
 8006402:	4603      	mov	r3, r0
 8006404:	4622      	mov	r2, r4
 8006406:	801a      	strh	r2, [r3, #0]
    freeList_ = slot.id();
 8006408:	1d3b      	adds	r3, r7, #4
 800640a:	4618      	mov	r0, r3
 800640c:	f7ff ffbf 	bl	800638e <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>
 8006410:	4603      	mov	r3, r0
 8006412:	461a      	mov	r2, r3
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	851a      	strh	r2, [r3, #40]	@ 0x28
  }
 8006418:	bf00      	nop
 800641a:	3714      	adds	r7, #20
 800641c:	46bd      	mov	sp, r7
 800641e:	bd90      	pop	{r4, r7, pc}

08006420 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt>:
  T* getSlot(SlotId id) const {
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	460b      	mov	r3, r1
 800642a:	807b      	strh	r3, [r7, #2]
    if (id == NULL_SLOT)
 800642c:	887b      	ldrh	r3, [r7, #2]
 800642e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006432:	4293      	cmp	r3, r2
 8006434:	d101      	bne.n	800643a <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt+0x1a>
      return nullptr;
 8006436:	2300      	movs	r3, #0
 8006438:	e012      	b.n	8006460 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt+0x40>
    auto poolIndex = SlotId(id / ARDUINOJSON_POOL_CAPACITY);
 800643a:	887b      	ldrh	r3, [r7, #2]
 800643c:	09db      	lsrs	r3, r3, #7
 800643e:	81fb      	strh	r3, [r7, #14]
    auto indexInPool = SlotId(id % ARDUINOJSON_POOL_CAPACITY);
 8006440:	887b      	ldrh	r3, [r7, #2]
 8006442:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006446:	81bb      	strh	r3, [r7, #12]
    return pools_[poolIndex].getSlot(indexInPool);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6a1a      	ldr	r2, [r3, #32]
 800644c:	89fb      	ldrh	r3, [r7, #14]
 800644e:	00db      	lsls	r3, r3, #3
 8006450:	4413      	add	r3, r2
 8006452:	89ba      	ldrh	r2, [r7, #12]
 8006454:	4611      	mov	r1, r2
 8006456:	4618      	mov	r0, r3
 8006458:	f000 fbd8 	bl	8006c0c <_ZNK11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7getSlotEt>
 800645c:	4603      	mov	r3, r0
 800645e:	bf00      	nop
  }
 8006460:	4618      	mov	r0, r3
 8006462:	3710      	adds	r7, #16
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEC1Ev>:
  Slot() : ptr_(nullptr), id_(NULL_SLOT) {}
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	601a      	str	r2, [r3, #0]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800647c:	809a      	strh	r2, [r3, #4]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4618      	mov	r0, r3
 8006482:	370c      	adds	r7, #12
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <_ZN11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEC1EPS3_t>:
  Slot(T* p, SlotId id) : ptr_(p), id_(id) {
 800648c:	b480      	push	{r7}
 800648e:	b085      	sub	sp, #20
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	4613      	mov	r3, r2
 8006498:	80fb      	strh	r3, [r7, #6]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	68ba      	ldr	r2, [r7, #8]
 800649e:	601a      	str	r2, [r3, #0]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	88fa      	ldrh	r2, [r7, #6]
 80064a4:	809a      	strh	r2, [r3, #4]
  }
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	4618      	mov	r0, r3
 80064aa:	3714      	adds	r7, #20
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <_ZN11ArduinoJson8V730HB226detail11adaptStringIcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIPT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringES7_j>:
AdaptedString<TChar*> adaptString(TChar* p) {
  return StringAdapter<TChar*>::adapt(p);
}

template <typename TChar>
AdaptedString<TChar*> adaptString(TChar* p, size_t n) {
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	607a      	str	r2, [r7, #4]
  return SizedStringAdapter<TChar*>::adapt(p, n);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	68b9      	ldr	r1, [r7, #8]
 80064c6:	4618      	mov	r0, r3
 80064c8:	f000 fbe6 	bl	8006c98 <_ZN11ArduinoJson8V730HB226detail18SizedStringAdapterIPcvE5adaptEPKcj>
 80064cc:	bf00      	nop
}
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <_ZNK11ArduinoJson8V730HB226detail15ResourceManager9getStringINS1_9RamStringEEEPNS1_10StringNodeERKT_>:
  StringNode* getString(const TAdaptedString& str) const {
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b082      	sub	sp, #8
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
 80064de:	6039      	str	r1, [r7, #0]
    return stringPool_.get(str);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	3308      	adds	r3, #8
 80064e4:	6839      	ldr	r1, [r7, #0]
 80064e6:	4618      	mov	r0, r3
 80064e8:	f000 fbe6 	bl	8006cb8 <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_>
 80064ec:	4603      	mov	r3, r0
  }
 80064ee:	4618      	mov	r0, r3
 80064f0:	3708      	adds	r7, #8
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}

080064f6 <_ZN11ArduinoJson8V730HB2210JsonStringC1IjLi0EEEPKcT_b>:
  JsonString(const char* data, TSize sz, bool isStatic = false)
 80064f6:	b580      	push	{r7, lr}
 80064f8:	b084      	sub	sp, #16
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	60f8      	str	r0, [r7, #12]
 80064fe:	60b9      	str	r1, [r7, #8]
 8006500:	607a      	str	r2, [r7, #4]
 8006502:	70fb      	strb	r3, [r7, #3]
      : str_(data, size_t(sz), isStatic) {}
 8006504:	68f8      	ldr	r0, [r7, #12]
 8006506:	78fb      	ldrb	r3, [r7, #3]
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	68b9      	ldr	r1, [r7, #8]
 800650c:	f7fd fd26 	bl	8003f5c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	4618      	mov	r0, r3
 8006514:	3710      	adds	r7, #16
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}

0800651a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 800651a:	b580      	push	{r7, lr}
 800651c:	b082      	sub	sp, #8
 800651e:	af00      	add	r7, sp, #0
 8006520:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f7fe f91f 	bl	8004766 <_ZNK11ArduinoJson8V730HB2211JsonVariant18getResourceManagerEv>
 8006528:	4603      	mov	r3, r0
  }
 800652a:	4618      	mov	r0, r3
 800652c:	3708      	adds	r7, #8
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}

08006532 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRNS0_10JsonStringEEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES8_NS1_9remove_cvINS1_16remove_referenceIS8_E4typeEE4typeEE4typeEvE13AdaptedStringEOS8_>:
AdaptedString<TString> adaptString(TString&& s) {
 8006532:	b580      	push	{r7, lr}
 8006534:	b082      	sub	sp, #8
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
 800653a:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800653c:	6838      	ldr	r0, [r7, #0]
 800653e:	f000 fbf6 	bl	8006d2e <_ZN11ArduinoJson8V730HB226detail7forwardIRNS0_10JsonStringEEEOT_RNS1_16remove_referenceIS5_E4typeE>
 8006542:	4603      	mov	r3, r0
 8006544:	4618      	mov	r0, r3
 8006546:	f7fd fdea 	bl	800411e <_ZN11ArduinoJson8V730HB226detail13StringAdapterINS0_10JsonStringEvE5adaptERKS3_>
 800654a:	4602      	mov	r2, r0
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	ca07      	ldmia	r2, {r0, r1, r2}
 8006550:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	3708      	adds	r7, #8
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE3infEv>:

  static T nan() {
    return forge(0x7ff8000000000000);
  }

  static T inf() {
 800655c:	b580      	push	{r7, lr}
 800655e:	af00      	add	r7, sp, #0
    return forge(0x7ff0000000000000);
 8006560:	f04f 0000 	mov.w	r0, #0
 8006564:	4903      	ldr	r1, [pc, #12]	@ (8006574 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE3infEv+0x18>)
 8006566:	f000 fc0d 	bl	8006d84 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE5forgeEy>
 800656a:	eeb0 7b40 	vmov.f64	d7, d0
  }
 800656e:	eeb0 0b47 	vmov.f64	d0, d7
 8006572:	bd80      	pop	{r7, pc}
 8006574:	7ff00000 	.word	0x7ff00000

08006578 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_>:
    return forge(0xFf7fffff);
  }
};

template <typename TFloat, typename TExponent>
inline TFloat make_float(TFloat m, TExponent e) {
 8006578:	b580      	push	{r7, lr}
 800657a:	b086      	sub	sp, #24
 800657c:	af00      	add	r7, sp, #0
 800657e:	ed87 0b02 	vstr	d0, [r7, #8]
 8006582:	6078      	str	r0, [r7, #4]
  using traits = FloatTraits<TFloat>;

  auto powersOfTen = e > 0 ? traits::positiveBinaryPowersOfTen()
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2b00      	cmp	r3, #0
 8006588:	dd04      	ble.n	8006594 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x1c>
 800658a:	f000 fb51 	bl	8006c30 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>
 800658e:	4603      	mov	r3, r0
 8006590:	613b      	str	r3, [r7, #16]
 8006592:	e003      	b.n	800659c <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x24>
                           : traits::negativeBinaryPowersOfTen();
 8006594:	f000 fb70 	bl	8006c78 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>
 8006598:	4603      	mov	r3, r0
 800659a:	613b      	str	r3, [r7, #16]
  if (e <= 0)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	dc02      	bgt.n	80065a8 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x30>
    e = TExponent(-e);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	425b      	negs	r3, r3
 80065a6:	607b      	str	r3, [r7, #4]

  for (uint8_t index = 0; e != 0; index++) {
 80065a8:	2300      	movs	r3, #0
 80065aa:	75fb      	strb	r3, [r7, #23]
 80065ac:	e019      	b.n	80065e2 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x6a>
    if (e & 1)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f003 0301 	and.w	r3, r3, #1
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d00e      	beq.n	80065d6 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x5e>
      m *= powersOfTen[index];
 80065b8:	7dfa      	ldrb	r2, [r7, #23]
 80065ba:	f107 0310 	add.w	r3, r7, #16
 80065be:	4611      	mov	r1, r2
 80065c0:	4618      	mov	r0, r3
 80065c2:	f000 fb45 	bl	8006c50 <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIdEixEi>
 80065c6:	eeb0 6b40 	vmov.f64	d6, d0
 80065ca:	ed97 7b02 	vldr	d7, [r7, #8]
 80065ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 80065d2:	ed87 7b02 	vstr	d7, [r7, #8]
    e >>= 1;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	105b      	asrs	r3, r3, #1
 80065da:	607b      	str	r3, [r7, #4]
  for (uint8_t index = 0; e != 0; index++) {
 80065dc:	7dfb      	ldrb	r3, [r7, #23]
 80065de:	3301      	adds	r3, #1
 80065e0:	75fb      	strb	r3, [r7, #23]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d1e2      	bne.n	80065ae <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x36>
  }
  return m;
 80065e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80065ec:	ec43 2b17 	vmov	d7, r2, r3
}
 80065f0:	eeb0 0b47 	vmov.f64	d0, d7
 80065f4:	3718      	adds	r7, #24
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}

080065fa <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_>:
inline TFloat make_float(TFloat m, TExponent e) {
 80065fa:	b580      	push	{r7, lr}
 80065fc:	b084      	sub	sp, #16
 80065fe:	af00      	add	r7, sp, #0
 8006600:	ed87 0a01 	vstr	s0, [r7, #4]
 8006604:	6038      	str	r0, [r7, #0]
  auto powersOfTen = e > 0 ? traits::positiveBinaryPowersOfTen()
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	2b00      	cmp	r3, #0
 800660a:	dd04      	ble.n	8006616 <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x1c>
 800660c:	f000 fbca 	bl	8006da4 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25positiveBinaryPowersOfTenEv>
 8006610:	4603      	mov	r3, r0
 8006612:	60bb      	str	r3, [r7, #8]
 8006614:	e003      	b.n	800661e <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x24>
                           : traits::negativeBinaryPowersOfTen();
 8006616:	f000 fbd5 	bl	8006dc4 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25negativeBinaryPowersOfTenEv>
 800661a:	4603      	mov	r3, r0
 800661c:	60bb      	str	r3, [r7, #8]
  if (e <= 0)
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	dc02      	bgt.n	800662a <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x30>
    e = TExponent(-e);
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	425b      	negs	r3, r3
 8006628:	603b      	str	r3, [r7, #0]
  for (uint8_t index = 0; e != 0; index++) {
 800662a:	2300      	movs	r3, #0
 800662c:	73fb      	strb	r3, [r7, #15]
 800662e:	e019      	b.n	8006664 <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x6a>
    if (e & 1)
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	f003 0301 	and.w	r3, r3, #1
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00e      	beq.n	8006658 <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x5e>
      m *= powersOfTen[index];
 800663a:	7bfa      	ldrb	r2, [r7, #15]
 800663c:	f107 0308 	add.w	r3, r7, #8
 8006640:	4611      	mov	r1, r2
 8006642:	4618      	mov	r0, r3
 8006644:	f000 fbce 	bl	8006de4 <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIfEixEi>
 8006648:	eeb0 7a40 	vmov.f32	s14, s0
 800664c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006650:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006654:	edc7 7a01 	vstr	s15, [r7, #4]
    e >>= 1;
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	105b      	asrs	r3, r3, #1
 800665c:	603b      	str	r3, [r7, #0]
  for (uint8_t index = 0; e != 0; index++) {
 800665e:	7bfb      	ldrb	r3, [r7, #15]
 8006660:	3301      	adds	r3, #1
 8006662:	73fb      	strb	r3, [r7, #15]
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d1e2      	bne.n	8006630 <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x36>
  return m;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	ee07 3a90 	vmov	s15, r3
}
 8006670:	eeb0 0a67 	vmov.f32	s0, s15
 8006674:	3710      	adds	r7, #16
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
	...

0800667c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>:
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 800667c:	b5b0      	push	{r4, r5, r7, lr}
 800667e:	b086      	sub	sp, #24
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	607a      	str	r2, [r7, #4]
      : _M_dataplus(_M_local_data(), __a)
 8006688:	68fc      	ldr	r4, [r7, #12]
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	f01d fc27 	bl	8023ede <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8006690:	4603      	mov	r3, r0
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	4619      	mov	r1, r3
 8006696:	4620      	mov	r0, r4
 8006698:	f01d fdf2 	bl	8024280 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	if (__s == 0)
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d102      	bne.n	80066a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x2c>
	  std::__throw_logic_error(__N("basic_string: "
 80066a2:	480a      	ldr	r0, [pc, #40]	@ (80066cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x50>)
 80066a4:	f01d fbf5 	bl	8023e92 <_ZSt19__throw_logic_errorPKc>
	const _CharT* __end = __s + traits_type::length(__s);
 80066a8:	68b8      	ldr	r0, [r7, #8]
 80066aa:	f7fd fb97 	bl	8003ddc <_ZNSt11char_traitsIcE6lengthEPKc>
 80066ae:	4602      	mov	r2, r0
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	4413      	add	r3, r2
 80066b4:	617b      	str	r3, [r7, #20]
	_M_construct(__s, __end, forward_iterator_tag());
 80066b6:	462b      	mov	r3, r5
 80066b8:	697a      	ldr	r2, [r7, #20]
 80066ba:	68b9      	ldr	r1, [r7, #8]
 80066bc:	68f8      	ldr	r0, [r7, #12]
 80066be:	f000 f922 	bl	8006906 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
      }
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	4618      	mov	r0, r3
 80066c6:	3718      	adds	r7, #24
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bdb0      	pop	{r4, r5, r7, pc}
 80066cc:	08025b8c 	.word	0x08025b8c

080066d0 <_ZN11ArduinoJson8V730HB2212JsonDocumentixIA8_cLi0EEENS0_6detail11MemberProxyIRS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueESA_NS4_9remove_cvINS4_16remove_referenceISA_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKSA_>:
  detail::MemberProxy<JsonDocument&, detail::AdaptedString<TString>> operator[](
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b08a      	sub	sp, #40	@ 0x28
 80066d4:	af02      	add	r7, sp, #8
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 80066dc:	f107 0314 	add.w	r3, r7, #20
 80066e0:	6879      	ldr	r1, [r7, #4]
 80066e2:	4618      	mov	r0, r3
 80066e4:	f000 fb92 	bl	8006e0c <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA8_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	9300      	str	r3, [sp, #0]
 80066ec:	f107 0314 	add.w	r3, r7, #20
 80066f0:	cb0c      	ldmia	r3, {r2, r3}
 80066f2:	68b9      	ldr	r1, [r7, #8]
 80066f4:	68f8      	ldr	r0, [r7, #12]
 80066f6:	f000 fb9c 	bl	8006e32 <_ZN11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEC1ES4_S5_>
  }
 80066fa:	68f8      	ldr	r0, [r7, #12]
 80066fc:	3720      	adds	r7, #32
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}

08006702 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEcvT_INS0_9JsonArrayELi0EEEv>:
  operator T() const {
 8006702:	b580      	push	{r7, lr}
 8006704:	b082      	sub	sp, #8
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
 800670a:	6039      	str	r1, [r7, #0]
    return as<T>();
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6839      	ldr	r1, [r7, #0]
 8006710:	4618      	mov	r0, r3
 8006712:	f000 f876 	bl	8006802 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE2asINS0_9JsonArrayEEET_v>
 8006716:	bf00      	nop
  }
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	3708      	adds	r7, #8
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>:
  operator T() const {
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
    return as<T>();
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6839      	ldr	r1, [r7, #0]
 800672e:	4618      	mov	r0, r3
 8006730:	f000 fb9b 	bl	8006e6a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE2asINS0_10JsonObjectEEET_v>
 8006734:	bf00      	nop
  }
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	3708      	adds	r7, #8
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}

0800673e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 800673e:	b580      	push	{r7, lr}
 8006740:	b08c      	sub	sp, #48	@ 0x30
 8006742:	af02      	add	r7, sp, #8
 8006744:	60f8      	str	r0, [r7, #12]
 8006746:	60b9      	str	r1, [r7, #8]
 8006748:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 800674a:	68ba      	ldr	r2, [r7, #8]
 800674c:	f107 0314 	add.w	r3, r7, #20
 8006750:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006754:	e883 0003 	stmia.w	r3, {r0, r1}
 8006758:	f107 031c 	add.w	r3, r7, #28
 800675c:	6879      	ldr	r1, [r7, #4]
 800675e:	4618      	mov	r0, r3
 8006760:	f000 fba7 	bl	8006eb2 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA7_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8006764:	466a      	mov	r2, sp
 8006766:	f107 0320 	add.w	r3, r7, #32
 800676a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800676e:	e882 0003 	stmia.w	r2, {r0, r1}
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	f107 0214 	add.w	r2, r7, #20
 8006778:	ca06      	ldmia	r2, {r1, r2}
 800677a:	68f8      	ldr	r0, [r7, #12]
 800677c:	f000 f973 	bl	8006a66 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 8006780:	68f8      	ldr	r0, [r7, #12]
 8006782:	3728      	adds	r7, #40	@ 0x28
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>:
  operator T() const {
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
    return as<T>();
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 fba1 	bl	8006ed8 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIPKcEET_v>
 8006796:	4603      	mov	r3, r0
  }
 8006798:	4618      	mov	r0, r3
 800679a:	3708      	adds	r7, #8
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA10_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b08c      	sub	sp, #48	@ 0x30
 80067a4:	af02      	add	r7, sp, #8
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 80067ac:	68ba      	ldr	r2, [r7, #8]
 80067ae:	f107 0314 	add.w	r3, r7, #20
 80067b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80067b6:	e883 0003 	stmia.w	r3, {r0, r1}
 80067ba:	f107 031c 	add.w	r3, r7, #28
 80067be:	6879      	ldr	r1, [r7, #4]
 80067c0:	4618      	mov	r0, r3
 80067c2:	f000 fbab 	bl	8006f1c <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA10_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 80067c6:	466a      	mov	r2, sp
 80067c8:	f107 0320 	add.w	r3, r7, #32
 80067cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80067d0:	e882 0003 	stmia.w	r2, {r0, r1}
 80067d4:	69fb      	ldr	r3, [r7, #28]
 80067d6:	f107 0214 	add.w	r2, r7, #20
 80067da:	ca06      	ldmia	r2, {r1, r2}
 80067dc:	68f8      	ldr	r0, [r7, #12]
 80067de:	f000 f942 	bl	8006a66 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 80067e2:	68f8      	ldr	r0, [r7, #12]
 80067e4:	3728      	adds	r7, #40	@ 0x28
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}

080067ea <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ImLi0EEEv>:
  operator T() const {
 80067ea:	b580      	push	{r7, lr}
 80067ec:	b082      	sub	sp, #8
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
    return as<T>();
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 fba5 	bl	8006f42 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asImEET_v>
 80067f8:	4603      	mov	r3, r0
  }
 80067fa:	4618      	mov	r0, r3
 80067fc:	3708      	adds	r7, #8
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE2asINS0_9JsonArrayEEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 8006802:	b590      	push	{r4, r7, lr}
 8006804:	b087      	sub	sp, #28
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
 800680a:	6039      	str	r1, [r7, #0]
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	617b      	str	r3, [r7, #20]
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	613b      	str	r3, [r7, #16]
  return JsonVariant(getData(), getResourceManager());
 8006814:	6938      	ldr	r0, [r7, #16]
 8006816:	f000 ff69 	bl	80076ec <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7getDataEv>
 800681a:	4604      	mov	r4, r0
 800681c:	6938      	ldr	r0, [r7, #16]
 800681e:	f000 ff75 	bl	800770c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE18getResourceManagerEv>
 8006822:	4602      	mov	r2, r0
 8006824:	f107 0308 	add.w	r3, r7, #8
 8006828:	4621      	mov	r1, r4
 800682a:	4618      	mov	r0, r3
 800682c:	f7fd ff88 	bl	8004740 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
    return getVariant();
 8006830:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f107 0308 	add.w	r3, r7, #8
 8006838:	e893 0006 	ldmia.w	r3, {r1, r2}
 800683c:	f7fe fc6e 	bl	800511c <_ZN11ArduinoJson8V730HB229ConverterINS0_9JsonArrayEvE8fromJsonENS0_11JsonVariantE>
 8006840:	bf00      	nop
}
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	371c      	adds	r7, #28
 8006846:	46bd      	mov	sp, r7
 8006848:	bd90      	pop	{r4, r7, pc}

0800684a <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_>:
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
 800684a:	b580      	push	{r7, lr}
 800684c:	b084      	sub	sp, #16
 800684e:	af00      	add	r7, sp, #0
 8006850:	60f8      	str	r0, [r7, #12]
 8006852:	60b9      	str	r1, [r7, #8]
 8006854:	4613      	mov	r3, r2
 8006856:	71fb      	strb	r3, [r7, #7]
      __string_type __str(__lhs);
 8006858:	68b9      	ldr	r1, [r7, #8]
 800685a:	68f8      	ldr	r0, [r7, #12]
 800685c:	f01d fd2d 	bl	80242ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      __str.append(__size_type(1), __rhs);
 8006860:	79fb      	ldrb	r3, [r7, #7]
 8006862:	461a      	mov	r2, r3
 8006864:	2101      	movs	r1, #1
 8006866:	68f8      	ldr	r0, [r7, #12]
 8006868:	f01d fcf0 	bl	802424c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>
      return __str;
 800686c:	bf00      	nop
    }
 800686e:	68f8      	ldr	r0, [r7, #12]
 8006870:	3710      	adds	r7, #16
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}

08006876 <_ZN11ArduinoJson8V730HB2215deserializeJsonIRNS0_12JsonDocumentEKcJELi0EEENS0_20DeserializationErrorEOT_PT0_DpOT1_>:
// Parses a JSON input, filters, and puts the result in a JsonDocument.
// https://arduinojson.org/v7/api/json/deserializejson/
template <typename TDestination, typename TChar, typename... Args,
          detail::enable_if_t<
              detail::is_deserialize_destination<TDestination>::value, int> = 0>
inline DeserializationError deserializeJson(TDestination&& dst, TChar* input,
 8006876:	b580      	push	{r7, lr}
 8006878:	b082      	sub	sp, #8
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
 800687e:	6039      	str	r1, [r7, #0]
                                            Args&&... args) {
  using namespace detail;
  return deserialize<JsonDeserializer>(detail::forward<TDestination>(dst),
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 fb80 	bl	8006f86 <_ZN11ArduinoJson8V730HB226detail7forwardIRNS0_12JsonDocumentEEEOT_RNS1_16remove_referenceIS5_E4typeE>
 8006886:	4602      	mov	r2, r0
 8006888:	463b      	mov	r3, r7
 800688a:	4619      	mov	r1, r3
 800688c:	4610      	mov	r0, r2
 800688e:	f000 fb85 	bl	8006f9c <_ZN11ArduinoJson8V730HB226detail11deserializeINS1_16JsonDeserializerERNS0_12JsonDocumentERPKcJELi0EEENS0_20DeserializationErrorEOT0_OT1_DpT2_>
 8006892:	4603      	mov	r3, r0
                                       input, detail::forward<Args>(args)...);
}
 8006894:	4618      	mov	r0, r3
 8006896:	3708      	adds	r7, #8
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>:
      eq(const char_type& __c1, const char_type& __c2)
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
      { return __c1 == __c2; }
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	781a      	ldrb	r2, [r3, #0]
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	429a      	cmp	r2, r3
 80068b0:	bf0c      	ite	eq
 80068b2:	2301      	moveq	r3, #1
 80068b4:	2300      	movne	r3, #0
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	4618      	mov	r0, r3
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC1EPS4_>:

	// Check for out_of_range and length_error exceptions.
	struct _Guard
	{
	  _GLIBCXX20_CONSTEXPR
	  explicit _Guard(basic_string* __s) : _M_guarded(__s) { }
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	683a      	ldr	r2, [r7, #0]
 80068d2:	601a      	str	r2, [r3, #0]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4618      	mov	r0, r3
 80068d8:	370c      	adds	r7, #12
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr

080068e2 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev>:

	  _GLIBCXX20_CONSTEXPR
	  ~_Guard() { if (_M_guarded) _M_guarded->_M_dispose(); }
 80068e2:	b580      	push	{r7, lr}
 80068e4:	b082      	sub	sp, #8
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d004      	beq.n	80068fc <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev+0x1a>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4618      	mov	r0, r3
 80068f8:	f01d fb22 	bl	8023f40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4618      	mov	r0, r3
 8006900:	3708      	adds	r7, #8
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
      basic_string<_CharT, _Traits, _Alloc>::
 8006906:	b580      	push	{r7, lr}
 8006908:	b088      	sub	sp, #32
 800690a:	af00      	add	r7, sp, #0
 800690c:	60f8      	str	r0, [r7, #12]
 800690e:	60b9      	str	r1, [r7, #8]
 8006910:	607a      	str	r2, [r7, #4]
 8006912:	703b      	strb	r3, [r7, #0]
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8006914:	6879      	ldr	r1, [r7, #4]
 8006916:	68b8      	ldr	r0, [r7, #8]
 8006918:	f000 fb61 	bl	8006fde <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 800691c:	4603      	mov	r3, r0
 800691e:	61bb      	str	r3, [r7, #24]
	if (__dnew > size_type(_S_local_capacity))
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	2b0f      	cmp	r3, #15
 8006924:	d911      	bls.n	800694a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>
	    _M_data(_M_create(__dnew, size_type(0)));
 8006926:	f107 0318 	add.w	r3, r7, #24
 800692a:	2200      	movs	r2, #0
 800692c:	4619      	mov	r1, r3
 800692e:	68f8      	ldr	r0, [r7, #12]
 8006930:	f01d fae4 	bl	8023efc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8006934:	4603      	mov	r3, r0
 8006936:	4619      	mov	r1, r3
 8006938:	68f8      	ldr	r0, [r7, #12]
 800693a:	f01d facc 	bl	8023ed6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	4619      	mov	r1, r3
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	f01d facd 	bl	8023ee2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
 8006948:	e005      	b.n	8006956 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x50>
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	61fb      	str	r3, [r7, #28]
	return _M_local_data();
 800694e:	69f8      	ldr	r0, [r7, #28]
 8006950:	f01d fac5 	bl	8023ede <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8006954:	bf00      	nop

	  basic_string* _M_guarded;
	} __guard(this);
 8006956:	f107 0314 	add.w	r3, r7, #20
 800695a:	68f9      	ldr	r1, [r7, #12]
 800695c:	4618      	mov	r0, r3
 800695e:	f7ff ffb1 	bl	80068c4 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC1EPS4_>

	this->_S_copy_chars(_M_data(), __beg, __end);
 8006962:	68f8      	ldr	r0, [r7, #12]
 8006964:	f01d fab9 	bl	8023eda <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8006968:	4603      	mov	r3, r0
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	68b9      	ldr	r1, [r7, #8]
 800696e:	4618      	mov	r0, r3
 8006970:	f01d fb3a 	bl	8023fe8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>

	__guard._M_guarded = 0;
 8006974:	2300      	movs	r3, #0
 8006976:	617b      	str	r3, [r7, #20]

	_M_set_length(__dnew);
 8006978:	69bb      	ldr	r3, [r7, #24]
 800697a:	4619      	mov	r1, r3
 800697c:	68f8      	ldr	r0, [r7, #12]
 800697e:	f01d fab2 	bl	8023ee6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 8006982:	f107 0314 	add.w	r3, r7, #20
 8006986:	4618      	mov	r0, r3
 8006988:	f7ff ffab 	bl	80068e2 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev>
 800698c:	3720      	adds	r7, #32
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}

08006992 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7destroyEPNS0_9AllocatorE>:
    slots_ = reinterpret_cast<T*>(allocator->allocate(slotsToBytes(cap)));
    capacity_ = slots_ ? cap : 0;
    usage_ = 0;
  }

  void destroy(Allocator* allocator) {
 8006992:	b580      	push	{r7, lr}
 8006994:	b082      	sub	sp, #8
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
 800699a:	6039      	str	r1, [r7, #0]
    if (slots_)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d008      	beq.n	80069b6 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7destroyEPNS0_9AllocatorE+0x24>
      allocator->deallocate(slots_);
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	3304      	adds	r3, #4
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	6852      	ldr	r2, [r2, #4]
 80069b0:	4611      	mov	r1, r2
 80069b2:	6838      	ldr	r0, [r7, #0]
 80069b4:	4798      	blx	r3
    slots_ = nullptr;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	605a      	str	r2, [r3, #4]
    capacity_ = 0;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	801a      	strh	r2, [r3, #0]
    usage_ = 0;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	805a      	strh	r2, [r3, #2]
  }
 80069c8:	bf00      	nop
 80069ca:	3708      	adds	r7, #8
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE12slotsToBytesEt>:

  static SlotCount bytesToSlots(size_t n) {
    return static_cast<SlotCount>(n / sizeof(T));
  }

  static size_t slotsToBytes(SlotCount n) {
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	4603      	mov	r3, r0
 80069d8:	80fb      	strh	r3, [r7, #6]
    return n * sizeof(T);
 80069da:	88fb      	ldrh	r3, [r7, #6]
 80069dc:	00db      	lsls	r3, r3, #3
  }
 80069de:	4618      	mov	r0, r3
 80069e0:	370c      	adds	r7, #12
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr

080069ea <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE>:
  void shrinkToFit(Allocator* allocator) {
 80069ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069ec:	b085      	sub	sp, #20
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
 80069f2:	6039      	str	r1, [r7, #0]
        allocator->reallocate(slots_, slotsToBytes(usage_)));
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	3308      	adds	r3, #8
 80069fa:	681c      	ldr	r4, [r3, #0]
 80069fc:	683d      	ldr	r5, [r7, #0]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	685e      	ldr	r6, [r3, #4]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	885b      	ldrh	r3, [r3, #2]
 8006a06:	4618      	mov	r0, r3
 8006a08:	f7ff ffe2 	bl	80069d0 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE12slotsToBytesEt>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	461a      	mov	r2, r3
 8006a10:	4631      	mov	r1, r6
 8006a12:	4628      	mov	r0, r5
 8006a14:	47a0      	blx	r4
 8006a16:	60f8      	str	r0, [r7, #12]
    if (newSlots) {
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d006      	beq.n	8006a2c <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE+0x42>
      slots_ = newSlots;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	605a      	str	r2, [r3, #4]
      capacity_ = usage_;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	885a      	ldrh	r2, [r3, #2]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	801a      	strh	r2, [r3, #0]
  }
 8006a2c:	bf00      	nop
 8006a2e:	3714      	adds	r7, #20
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006a34 <_ZN11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataEPKS2_T_PKNS1_15ResourceManagerE>:
  template <typename TAdaptedString>
  VariantData* getMember(TAdaptedString key,
                         const ResourceManager* resources) const;

  template <typename TAdaptedString>
  static VariantData* getMember(const ObjectData* object, TAdaptedString key,
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b086      	sub	sp, #24
 8006a38:	af02      	add	r7, sp, #8
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	4638      	mov	r0, r7
 8006a3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
                                const ResourceManager* resources) {
    if (!object)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d101      	bne.n	8006a4c <_ZN11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataEPKS2_T_PKNS1_15ResourceManagerE+0x18>
      return nullptr;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	e008      	b.n	8006a5e <_ZN11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataEPKS2_T_PKNS1_15ResourceManagerE+0x2a>
    return object->getMember(key, resources);
 8006a4c:	68f8      	ldr	r0, [r7, #12]
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	9300      	str	r3, [sp, #0]
 8006a52:	463b      	mov	r3, r7
 8006a54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006a56:	f000 fad6 	bl	8007006 <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	bf00      	nop
  }
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3710      	adds	r7, #16
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}

08006a66 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>:

  template <typename>
  friend class ElementProxy;

 public:
  MemberProxy(TUpstream upstream, AdaptedString key)
 8006a66:	b082      	sub	sp, #8
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	1d38      	adds	r0, r7, #4
 8006a72:	e880 0006 	stmia.w	r0, {r1, r2}
 8006a76:	61fb      	str	r3, [r7, #28]
      : upstream_(upstream), key_(key) {}
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	3304      	adds	r3, #4
 8006a7c:	1d3a      	adds	r2, r7, #4
 8006a7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006a82:	e883 0003 	stmia.w	r3, {r0, r1}
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	330c      	adds	r3, #12
 8006a8a:	f107 021c 	add.w	r2, r7, #28
 8006a8e:	ca07      	ldmia	r2, {r0, r1, r2}
 8006a90:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	4618      	mov	r0, r3
 8006a98:	3714      	adds	r7, #20
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	b002      	add	sp, #8
 8006aa2:	4770      	bx	lr

08006aa4 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromFreeListEv>:

 private:
  Slot<T> allocFromFreeList() {
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(freeList_ != NULL_SLOT);
    auto id = freeList_;
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ab2:	81fb      	strh	r3, [r7, #14]
    auto slot = getSlot(freeList_);
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ab8:	4619      	mov	r1, r3
 8006aba:	6838      	ldr	r0, [r7, #0]
 8006abc:	f7ff fcb0 	bl	8006420 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt>
 8006ac0:	60b8      	str	r0, [r7, #8]
    freeList_ = reinterpret_cast<FreeSlot*>(slot)->next;
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	881a      	ldrh	r2, [r3, #0]
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	851a      	strh	r2, [r3, #40]	@ 0x28
    return {slot, id};
 8006aca:	89fb      	ldrh	r3, [r7, #14]
 8006acc:	461a      	mov	r2, r3
 8006ace:	68b9      	ldr	r1, [r7, #8]
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f7ff fc75 	bl	80063c0 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
  }
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	3710      	adds	r7, #16
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}

08006ade <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv>:

  Slot<T> allocFromLastPool() {
 8006ade:	b5b0      	push	{r4, r5, r7, lr}
 8006ae0:	b086      	sub	sp, #24
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
 8006ae6:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(count_ > 0);
    auto poolIndex = SlotId(count_ - 1);
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006aec:	3b01      	subs	r3, #1
 8006aee:	82fb      	strh	r3, [r7, #22]
    auto slot = pools_[poolIndex].allocSlot();
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	6a1a      	ldr	r2, [r3, #32]
 8006af4:	8afb      	ldrh	r3, [r7, #22]
 8006af6:	00db      	lsls	r3, r3, #3
 8006af8:	441a      	add	r2, r3
 8006afa:	f107 030c 	add.w	r3, r7, #12
 8006afe:	4611      	mov	r1, r2
 8006b00:	4618      	mov	r0, r3
 8006b02:	f000 faad 	bl	8007060 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv>
    if (!slot)
 8006b06:	f107 030c 	add.w	r3, r7, #12
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f7ff fc22 	bl	8006354 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>
 8006b10:	4603      	mov	r3, r0
 8006b12:	f083 0301 	eor.w	r3, r3, #1
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d003      	beq.n	8006b24 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv+0x46>
      return {};
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 f857 	bl	8006bd0 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>
 8006b22:	e015      	b.n	8006b50 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv+0x72>
    return {slot.ptr(),
            SlotId(poolIndex * ARDUINOJSON_POOL_CAPACITY + slot.id())};
 8006b24:	f107 030c 	add.w	r3, r7, #12
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f000 f863 	bl	8006bf4 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE3ptrEv>
 8006b2e:	4605      	mov	r5, r0
 8006b30:	8afb      	ldrh	r3, [r7, #22]
 8006b32:	01db      	lsls	r3, r3, #7
 8006b34:	b29c      	uxth	r4, r3
 8006b36:	f107 030c 	add.w	r3, r7, #12
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f7ff fc27 	bl	800638e <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>
 8006b40:	4603      	mov	r3, r0
 8006b42:	4423      	add	r3, r4
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	461a      	mov	r2, r3
 8006b48:	4629      	mov	r1, r5
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f7ff fc38 	bl	80063c0 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
  }
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	3718      	adds	r7, #24
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bdb0      	pop	{r4, r5, r7, pc}

08006b58 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE>:

  Pool* addPool(Allocator* allocator) {
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
    if (count_ == capacity_ && !increaseCapacity(allocator))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d10b      	bne.n	8006b86 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x2e>
 8006b6e:	6839      	ldr	r1, [r7, #0]
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 faa1 	bl	80070b8 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE>
 8006b76:	4603      	mov	r3, r0
 8006b78:	f083 0301 	eor.w	r3, r3, #1
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d001      	beq.n	8006b86 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x2e>
 8006b82:	2301      	movs	r3, #1
 8006b84:	e000      	b.n	8006b88 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x30>
 8006b86:	2300      	movs	r3, #0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d001      	beq.n	8006b90 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x38>
      return nullptr;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	e01b      	b.n	8006bc8 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x70>
    auto pool = &pools_[count_++];
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6a1a      	ldr	r2, [r3, #32]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006b98:	1c59      	adds	r1, r3, #1
 8006b9a:	b288      	uxth	r0, r1
 8006b9c:	6879      	ldr	r1, [r7, #4]
 8006b9e:	8488      	strh	r0, [r1, #36]	@ 0x24
 8006ba0:	00db      	lsls	r3, r3, #3
 8006ba2:	4413      	add	r3, r2
 8006ba4:	60bb      	str	r3, [r7, #8]
    SlotCount poolCapacity = ARDUINOJSON_POOL_CAPACITY;
 8006ba6:	2380      	movs	r3, #128	@ 0x80
 8006ba8:	81fb      	strh	r3, [r7, #14]
    if (count_ == maxPools)  // last pool is smaller because of NULL_SLOT
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006bae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bb2:	d102      	bne.n	8006bba <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x62>
      poolCapacity--;
 8006bb4:	89fb      	ldrh	r3, [r7, #14]
 8006bb6:	3b01      	subs	r3, #1
 8006bb8:	81fb      	strh	r3, [r7, #14]
    pool->create(poolCapacity, allocator);
 8006bba:	89fb      	ldrh	r3, [r7, #14]
 8006bbc:	683a      	ldr	r2, [r7, #0]
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	68b8      	ldr	r0, [r7, #8]
 8006bc2:	f000 fabe 	bl	8007142 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE6createEtPNS0_9AllocatorE>
    return pool;
 8006bc6:	68bb      	ldr	r3, [r7, #8]
  }
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3710      	adds	r7, #16
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>:
  Slot() : ptr_(nullptr), id_(NULL_SLOT) {}
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	601a      	str	r2, [r3, #0]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006be4:	809a      	strh	r2, [r3, #4]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4618      	mov	r0, r3
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE3ptrEv>:
  T* ptr() const {
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
    return ptr_;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
  }
 8006c00:	4618      	mov	r0, r3
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <_ZNK11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7getSlotEt>:
  T* getSlot(SlotId id) const {
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	460b      	mov	r3, r1
 8006c16:	807b      	strh	r3, [r7, #2]
    return slots_ + id;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	685a      	ldr	r2, [r3, #4]
 8006c1c:	887b      	ldrh	r3, [r7, #2]
 8006c1e:	00db      	lsls	r3, r3, #3
 8006c20:	4413      	add	r3, r2
  }
 8006c22:	4618      	mov	r0, r3
 8006c24:	370c      	adds	r7, #12
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr
	...

08006c30 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>:
  static pgm_ptr<T> positiveBinaryPowersOfTen() {
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 8006c36:	1d3b      	adds	r3, r7, #4
 8006c38:	4904      	ldr	r1, [pc, #16]	@ (8006c4c <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv+0x1c>)
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f000 faa7 	bl	800718e <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIdEC1EPKd>
 8006c40:	687b      	ldr	r3, [r7, #4]
  }
 8006c42:	4618      	mov	r0, r3
 8006c44:	3708      	adds	r7, #8
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	08026628 	.word	0x08026628

08006c50 <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIdEixEi>:
template <typename T>
class pgm_ptr {
 public:
  explicit pgm_ptr(const T* ptr) : ptr_(ptr) {}

  T operator[](intptr_t index) const {
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b082      	sub	sp, #8
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
    return pgm_read(ptr_ + index);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	00db      	lsls	r3, r3, #3
 8006c62:	4413      	add	r3, r2
 8006c64:	4618      	mov	r0, r3
 8006c66:	f000 faa1 	bl	80071ac <_ZN11ArduinoJson8V730HB226detail8pgm_readIdEET_PKS3_>
 8006c6a:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8006c6e:	eeb0 0b47 	vmov.f64	d0, d7
 8006c72:	3708      	adds	r7, #8
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>:
  static pgm_ptr<T> negativeBinaryPowersOfTen() {
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 8006c7e:	1d3b      	adds	r3, r7, #4
 8006c80:	4904      	ldr	r1, [pc, #16]	@ (8006c94 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv+0x1c>)
 8006c82:	4618      	mov	r0, r3
 8006c84:	f000 fa83 	bl	800718e <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIdEC1EPKd>
 8006c88:	687b      	ldr	r3, [r7, #4]
  }
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3708      	adds	r7, #8
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	08026670 	.word	0x08026670

08006c98 <_ZN11ArduinoJson8V730HB226detail18SizedStringAdapterIPcvE5adaptEPKcj>:

template <typename TChar>
struct SizedStringAdapter<TChar*, enable_if_t<IsChar<TChar>::value>> {
  using AdaptedString = RamString;

  static AdaptedString adapt(const TChar* p, size_t n) {
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	607a      	str	r2, [r7, #4]
    return AdaptedString(reinterpret_cast<const char*>(p), n);
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	68b9      	ldr	r1, [r7, #8]
 8006caa:	68f8      	ldr	r0, [r7, #12]
 8006cac:	f7fd f956 	bl	8003f5c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 8006cb0:	68f8      	ldr	r0, [r7, #12]
 8006cb2:	3710      	adds	r7, #16
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_>:
  StringNode* get(const TAdaptedString& str) const {
 8006cb8:	b590      	push	{r4, r7, lr}
 8006cba:	b089      	sub	sp, #36	@ 0x24
 8006cbc:	af02      	add	r7, sp, #8
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
    for (auto node = strings_; node; node = node->next) {
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	617b      	str	r3, [r7, #20]
 8006cc8:	e01e      	b.n	8006d08 <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_+0x50>
      if (stringEquals(str, adaptString(node->data, node->length)))
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	f103 0108 	add.w	r1, r3, #8
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	88db      	ldrh	r3, [r3, #6]
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	f107 0308 	add.w	r3, r7, #8
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f7ff fbea 	bl	80064b4 <_ZN11ArduinoJson8V730HB226detail11adaptStringIcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIPT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringES7_j>
 8006ce0:	683a      	ldr	r2, [r7, #0]
 8006ce2:	466c      	mov	r4, sp
 8006ce4:	f107 030c 	add.w	r3, r7, #12
 8006ce8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006cec:	e884 0003 	stmia.w	r4, {r0, r1}
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	ca07      	ldmia	r2, {r0, r1, r2}
 8006cf4:	f000 fa6a 	bl	80071cc <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d001      	beq.n	8006d02 <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_+0x4a>
        return node;
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	e006      	b.n	8006d10 <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_+0x58>
    for (auto node = strings_; node; node = node->next) {
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	617b      	str	r3, [r7, #20]
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d1dd      	bne.n	8006cca <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_+0x12>
    return nullptr;
 8006d0e:	2300      	movs	r3, #0
  }
 8006d10:	4618      	mov	r0, r3
 8006d12:	371c      	adds	r7, #28
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd90      	pop	{r4, r7, pc}

08006d18 <_ZN11ArduinoJson8V730HB226detail7forwardIRPKcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

using nullptr_t = decltype(nullptr);

template <class T>
T&& forward(remove_reference_t<T>& t) noexcept {
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8006d20:	687b      	ldr	r3, [r7, #4]
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	370c      	adds	r7, #12
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr

08006d2e <_ZN11ArduinoJson8V730HB226detail7forwardIRNS0_10JsonStringEEEOT_RNS1_16remove_referenceIS5_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8006d2e:	b480      	push	{r7}
 8006d30:	b083      	sub	sp, #12
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8006d36:	687b      	ldr	r3, [r7, #4]
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	370c      	adds	r7, #12
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 fa7f 	bl	8007250 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7derivedEv>
 8006d52:	4603      	mov	r3, r0
 8006d54:	4618      	mov	r0, r3
 8006d56:	f000 fa86 	bl	8007266 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 8006d5a:	4603      	mov	r3, r0
  }
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3708      	adds	r7, #8
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7getDataEv>:
  VariantData* getData() const {
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 fa6f 	bl	8007250 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7derivedEv>
 8006d72:	4603      	mov	r3, r0
 8006d74:	4618      	mov	r0, r3
 8006d76:	f000 fa82 	bl	800727e <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 8006d7a:	4603      	mov	r3, r0
  }
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3708      	adds	r7, #8
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE5forgeEy>:
  static T forge(uint64_t bits) {
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b082      	sub	sp, #8
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	e9c7 0100 	strd	r0, r1, [r7]
    return alias_cast<T>(bits);
 8006d8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d92:	f000 fa80 	bl	8007296 <_ZN11ArduinoJson8V730HB226detail10alias_castIdyEET_T0_>
 8006d96:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8006d9a:	eeb0 0b47 	vmov.f64	d0, d7
 8006d9e:	3708      	adds	r7, #8
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25positiveBinaryPowersOfTenEv>:
  static pgm_ptr<T> positiveBinaryPowersOfTen() {
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 8006daa:	1d3b      	adds	r3, r7, #4
 8006dac:	4904      	ldr	r1, [pc, #16]	@ (8006dc0 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25positiveBinaryPowersOfTenEv+0x1c>)
 8006dae:	4618      	mov	r0, r3
 8006db0:	f000 fa85 	bl	80072be <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIfEC1EPKf>
 8006db4:	687b      	ldr	r3, [r7, #4]
  }
 8006db6:	4618      	mov	r0, r3
 8006db8:	3708      	adds	r7, #8
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	080266b8 	.word	0x080266b8

08006dc4 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25negativeBinaryPowersOfTenEv>:
  static pgm_ptr<T> negativeBinaryPowersOfTen() {
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 8006dca:	1d3b      	adds	r3, r7, #4
 8006dcc:	4904      	ldr	r1, [pc, #16]	@ (8006de0 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25negativeBinaryPowersOfTenEv+0x1c>)
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f000 fa75 	bl	80072be <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIfEC1EPKf>
 8006dd4:	687b      	ldr	r3, [r7, #4]
  }
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3708      	adds	r7, #8
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	080266d0 	.word	0x080266d0

08006de4 <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIfEixEi>:
  T operator[](intptr_t index) const {
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b082      	sub	sp, #8
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
    return pgm_read(ptr_ + index);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	4413      	add	r3, r2
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f000 fa6f 	bl	80072dc <_ZN11ArduinoJson8V730HB226detail8pgm_readIfEET_PKS3_>
 8006dfe:	eef0 7a40 	vmov.f32	s15, s0
  }
 8006e02:	eeb0 0a67 	vmov.f32	s0, s15
 8006e06:	3708      	adds	r7, #8
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA8_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8006e16:	6838      	ldr	r0, [r7, #0]
 8006e18:	f000 fa6f 	bl	80072fa <_ZN11ArduinoJson8V730HB226detail7forwardIRA8_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4611      	mov	r1, r2
 8006e22:	4618      	mov	r0, r3
 8006e24:	f000 fa74 	bl	8007310 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA8_KcvE5adaptES5_>
 8006e28:	bf00      	nop
}
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	3708      	adds	r7, #8
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <_ZN11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEC1ES4_S5_>:
  MemberProxy(TUpstream upstream, AdaptedString key)
 8006e32:	b082      	sub	sp, #8
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
 8006e3e:	f107 0110 	add.w	r1, r7, #16
 8006e42:	e881 000c 	stmia.w	r1, {r2, r3}
      : upstream_(upstream), key_(key) {}
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	683a      	ldr	r2, [r7, #0]
 8006e4a:	601a      	str	r2, [r3, #0]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	3304      	adds	r3, #4
 8006e50:	f107 0210 	add.w	r2, r7, #16
 8006e54:	ca07      	ldmia	r2, {r0, r1, r2}
 8006e56:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	b002      	add	sp, #8
 8006e68:	4770      	bx	lr

08006e6a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE2asINS0_10JsonObjectEEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 8006e6a:	b590      	push	{r4, r7, lr}
 8006e6c:	b087      	sub	sp, #28
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
 8006e72:	6039      	str	r1, [r7, #0]
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	617b      	str	r3, [r7, #20]
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	613b      	str	r3, [r7, #16]
  return JsonVariant(getData(), getResourceManager());
 8006e7c:	6938      	ldr	r0, [r7, #16]
 8006e7e:	f7ff ff71 	bl	8006d64 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7getDataEv>
 8006e82:	4604      	mov	r4, r0
 8006e84:	6938      	ldr	r0, [r7, #16]
 8006e86:	f7ff ff5d 	bl	8006d44 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE18getResourceManagerEv>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	f107 0308 	add.w	r3, r7, #8
 8006e90:	4621      	mov	r1, r4
 8006e92:	4618      	mov	r0, r3
 8006e94:	f7fd fc54 	bl	8004740 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
    return getVariant();
 8006e98:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f107 0308 	add.w	r3, r7, #8
 8006ea0:	e893 0006 	ldmia.w	r3, {r1, r2}
 8006ea4:	f7fe f95d 	bl	8005162 <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonObjectEvE8fromJsonENS0_11JsonVariantE>
 8006ea8:	bf00      	nop
}
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	371c      	adds	r7, #28
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd90      	pop	{r4, r7, pc}

08006eb2 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA7_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b082      	sub	sp, #8
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
 8006eba:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8006ebc:	6838      	ldr	r0, [r7, #0]
 8006ebe:	f000 fa36 	bl	800732e <_ZN11ArduinoJson8V730HB226detail7forwardIRA7_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	4611      	mov	r1, r2
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f000 fa3b 	bl	8007344 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA7_KcvE5adaptES5_>
 8006ece:	bf00      	nop
}
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	3708      	adds	r7, #8
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIPKcEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 8006ed8:	b590      	push	{r4, r7, lr}
 8006eda:	b087      	sub	sp, #28
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	617b      	str	r3, [r7, #20]
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 8006ee8:	6938      	ldr	r0, [r7, #16]
 8006eea:	f000 fcce 	bl	800788a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 8006eee:	4604      	mov	r4, r0
 8006ef0:	6938      	ldr	r0, [r7, #16]
 8006ef2:	f000 fb58 	bl	80075a6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	f107 0308 	add.w	r3, r7, #8
 8006efc:	4621      	mov	r1, r4
 8006efe:	4618      	mov	r0, r3
 8006f00:	f7fd fbf3 	bl	80046ea <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 8006f04:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 8006f06:	f107 0308 	add.w	r3, r7, #8
 8006f0a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006f0e:	f7fe f8e5 	bl	80050dc <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE>
 8006f12:	4603      	mov	r3, r0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	371c      	adds	r7, #28
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd90      	pop	{r4, r7, pc}

08006f1c <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA10_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8006f26:	6838      	ldr	r0, [r7, #0]
 8006f28:	f000 fa1b 	bl	8007362 <_ZN11ArduinoJson8V730HB226detail7forwardIRA10_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4611      	mov	r1, r2
 8006f32:	4618      	mov	r0, r3
 8006f34:	f000 fa20 	bl	8007378 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA10_KcvE5adaptES5_>
 8006f38:	bf00      	nop
}
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	3708      	adds	r7, #8
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asImEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 8006f42:	b590      	push	{r4, r7, lr}
 8006f44:	b087      	sub	sp, #28
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	617b      	str	r3, [r7, #20]
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 8006f52:	6938      	ldr	r0, [r7, #16]
 8006f54:	f000 fc99 	bl	800788a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 8006f58:	4604      	mov	r4, r0
 8006f5a:	6938      	ldr	r0, [r7, #16]
 8006f5c:	f000 fb23 	bl	80075a6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 8006f60:	4602      	mov	r2, r0
 8006f62:	f107 0308 	add.w	r3, r7, #8
 8006f66:	4621      	mov	r1, r4
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f7fd fbbe 	bl	80046ea <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 8006f6e:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 8006f70:	f107 0308 	add.w	r3, r7, #8
 8006f74:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006f78:	f000 fa0d 	bl	8007396 <_ZN11ArduinoJson8V730HB229ConverterImvE8fromJsonENS0_16JsonVariantConstE>
 8006f7c:	4603      	mov	r3, r0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	371c      	adds	r7, #28
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd90      	pop	{r4, r7, pc}

08006f86 <_ZN11ArduinoJson8V730HB226detail7forwardIRNS0_12JsonDocumentEEEOT_RNS1_16remove_referenceIS5_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8006f86:	b480      	push	{r7}
 8006f88:	b083      	sub	sp, #12
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8006f8e:	687b      	ldr	r3, [r7, #4]
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	370c      	adds	r7, #12
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <_ZN11ArduinoJson8V730HB226detail11deserializeINS1_16JsonDeserializerERNS0_12JsonDocumentERPKcJELi0EEENS0_20DeserializationErrorEOT0_OT1_DpT2_>:
template <
    template <typename> class TDeserializer, typename TDestination,
    typename TStream, typename... Args,
    enable_if_t<  // issue #1897
        !is_integral<typename first_or_void<Args...>::type>::value, int> = 0>
DeserializationError deserialize(TDestination&& dst, TStream&& input,
 8006f9c:	b590      	push	{r4, r7, lr}
 8006f9e:	b085      	sub	sp, #20
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
                                 Args... args) {
  return doDeserialize<TDeserializer>(
 8006fa6:	6838      	ldr	r0, [r7, #0]
 8006fa8:	f7ff feb6 	bl	8006d18 <_ZN11ArduinoJson8V730HB226detail7forwardIRPKcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8006fac:	4603      	mov	r3, r0
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f000 fa0f 	bl	80073d2 <_ZN11ArduinoJson8V730HB226detail10makeReaderIRPKcEENS1_6ReaderINS1_16remove_referenceIT_E4typeEvEEOS8_>
 8006fb4:	4604      	mov	r4, r0
 8006fb6:	f107 0308 	add.w	r3, r7, #8
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f7fe f9a0 	bl	8005300 <_ZN11ArduinoJson8V730HB2221DeserializationOption12NestingLimitC1Ev>
 8006fc0:	7a38      	ldrb	r0, [r7, #8]
 8006fc2:	f7fe f9df 	bl	8005384 <_ZN11ArduinoJson8V730HB226detail26makeDeserializationOptionsENS0_21DeserializationOption12NestingLimitE>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	81bb      	strh	r3, [r7, #12]
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	4621      	mov	r1, r4
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 fa20 	bl	8007414 <_ZN11ArduinoJson8V730HB226detail13doDeserializeINS1_16JsonDeserializerERNS0_12JsonDocumentENS1_6ReaderIPKcvEENS1_22DeserializationOptionsINS1_14AllowAllFilterEEEEENS0_20DeserializationErrorEOT0_T1_T2_>
 8006fd4:	4603      	mov	r3, r0
      dst, makeReader(detail::forward<TStream>(input)),
      makeDeserializationOptions(args...));
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3714      	adds	r7, #20
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd90      	pop	{r4, r7, pc}

08006fde <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
  */
  template<typename _InputIterator>
    _GLIBCXX_NODISCARD
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8006fde:	b5b0      	push	{r4, r5, r7, lr}
 8006fe0:	b082      	sub	sp, #8
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
 8006fe6:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8006fe8:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8006fea:	1d3b      	adds	r3, r7, #4
 8006fec:	4618      	mov	r0, r3
 8006fee:	f000 fa4a 	bl	8007486 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 8006ff2:	462a      	mov	r2, r5
 8006ff4:	6839      	ldr	r1, [r7, #0]
 8006ff6:	4620      	mov	r0, r4
 8006ff8:	f000 fa4f 	bl	800749a <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 8006ffc:	4603      	mov	r3, r0
    }
 8006ffe:	4618      	mov	r0, r3
 8007000:	3708      	adds	r7, #8
 8007002:	46bd      	mov	sp, r7
 8007004:	bdb0      	pop	{r4, r5, r7, pc}

08007006 <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE>:
#include <ArduinoJson/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TAdaptedString>
inline VariantData* ObjectData::getMember(
 8007006:	b580      	push	{r7, lr}
 8007008:	b088      	sub	sp, #32
 800700a:	af02      	add	r7, sp, #8
 800700c:	60f8      	str	r0, [r7, #12]
 800700e:	4638      	mov	r0, r7
 8007010:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    TAdaptedString key, const ResourceManager* resources) const {
  auto it = findKey(key, resources);
 8007014:	f107 0010 	add.w	r0, r7, #16
 8007018:	6a3b      	ldr	r3, [r7, #32]
 800701a:	9301      	str	r3, [sp, #4]
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	9300      	str	r3, [sp, #0]
 8007020:	463b      	mov	r3, r7
 8007022:	cb0c      	ldmia	r3, {r2, r3}
 8007024:	68f9      	ldr	r1, [r7, #12]
 8007026:	f000 fa47 	bl	80074b8 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE>
  if (it.done())
 800702a:	f107 0310 	add.w	r3, r7, #16
 800702e:	4618      	mov	r0, r3
 8007030:	f7fd f892 	bl	8004158 <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 8007034:	4603      	mov	r3, r0
 8007036:	2b00      	cmp	r3, #0
 8007038:	d001      	beq.n	800703e <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE+0x38>
    return nullptr;
 800703a:	2300      	movs	r3, #0
 800703c:	e00c      	b.n	8007058 <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE+0x52>
  it.next(resources);
 800703e:	f107 0310 	add.w	r3, r7, #16
 8007042:	6a39      	ldr	r1, [r7, #32]
 8007044:	4618      	mov	r0, r3
 8007046:	f7fd fd46 	bl	8004ad6 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
  return it.data();
 800704a:	f107 0310 	add.w	r3, r7, #16
 800704e:	4618      	mov	r0, r3
 8007050:	f7fd f8b3 	bl	80041ba <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 8007054:	4603      	mov	r3, r0
 8007056:	bf00      	nop
}
 8007058:	4618      	mov	r0, r3
 800705a:	3718      	adds	r7, #24
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv>:
  Slot<T> allocSlot() {
 8007060:	b580      	push	{r7, lr}
 8007062:	b084      	sub	sp, #16
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
    if (!slots_)
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d103      	bne.n	800707a <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv+0x1a>
      return {};
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f7ff fdac 	bl	8006bd0 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>
 8007078:	e01a      	b.n	80070b0 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv+0x50>
    if (usage_ >= capacity_)
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	885a      	ldrh	r2, [r3, #2]
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	881b      	ldrh	r3, [r3, #0]
 8007082:	429a      	cmp	r2, r3
 8007084:	d303      	bcc.n	800708e <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv+0x2e>
      return {};
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f7ff fda2 	bl	8006bd0 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>
 800708c:	e010      	b.n	80070b0 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv+0x50>
    auto index = usage_++;
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	885b      	ldrh	r3, [r3, #2]
 8007092:	1c5a      	adds	r2, r3, #1
 8007094:	b291      	uxth	r1, r2
 8007096:	683a      	ldr	r2, [r7, #0]
 8007098:	8051      	strh	r1, [r2, #2]
 800709a:	81fb      	strh	r3, [r7, #14]
    return {slots_ + index, SlotId(index)};
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	685a      	ldr	r2, [r3, #4]
 80070a0:	89fb      	ldrh	r3, [r7, #14]
 80070a2:	00db      	lsls	r3, r3, #3
 80070a4:	4413      	add	r3, r2
 80070a6:	89fa      	ldrh	r2, [r7, #14]
 80070a8:	4619      	mov	r1, r3
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f7ff f988 	bl	80063c0 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
  }
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	3710      	adds	r7, #16
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE>:

  bool increaseCapacity(Allocator* allocator) {
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
    if (capacity_ == maxPools)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80070c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070ca:	d101      	bne.n	80070d0 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x18>
      return false;
 80070cc:	2300      	movs	r3, #0
 80070ce:	e034      	b.n	800713a <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x82>
    void* newPools;
    auto newCapacity = PoolCount(capacity_ * 2);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80070d4:	005b      	lsls	r3, r3, #1
 80070d6:	817b      	strh	r3, [r7, #10]

    if (pools_ == preallocatedPools_) {
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6a1a      	ldr	r2, [r3, #32]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	429a      	cmp	r2, r3
 80070e0:	d114      	bne.n	800710c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x54>
      newPools = allocator->allocate(newCapacity * sizeof(Pool));
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	897a      	ldrh	r2, [r7, #10]
 80070ea:	00d2      	lsls	r2, r2, #3
 80070ec:	4611      	mov	r1, r2
 80070ee:	6838      	ldr	r0, [r7, #0]
 80070f0:	4798      	blx	r3
 80070f2:	60f8      	str	r0, [r7, #12]
      if (!newPools)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d101      	bne.n	80070fe <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x46>
        return false;
 80070fa:	2300      	movs	r3, #0
 80070fc:	e01d      	b.n	800713a <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x82>
      memcpy(newPools, preallocatedPools_, sizeof(preallocatedPools_));
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2220      	movs	r2, #32
 8007102:	4619      	mov	r1, r3
 8007104:	68f8      	ldr	r0, [r7, #12]
 8007106:	f01d fec0 	bl	8024e8a <memcpy>
 800710a:	e00f      	b.n	800712c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x74>
    } else {
      newPools = allocator->reallocate(pools_, newCapacity * sizeof(Pool));
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	3308      	adds	r3, #8
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	6a11      	ldr	r1, [r2, #32]
 8007118:	897a      	ldrh	r2, [r7, #10]
 800711a:	00d2      	lsls	r2, r2, #3
 800711c:	6838      	ldr	r0, [r7, #0]
 800711e:	4798      	blx	r3
 8007120:	60f8      	str	r0, [r7, #12]
      if (!newPools)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d101      	bne.n	800712c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x74>
        return false;
 8007128:	2300      	movs	r3, #0
 800712a:	e006      	b.n	800713a <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x82>
    }

    pools_ = static_cast<Pool*>(newPools);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	68fa      	ldr	r2, [r7, #12]
 8007130:	621a      	str	r2, [r3, #32]
    capacity_ = newCapacity;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	897a      	ldrh	r2, [r7, #10]
 8007136:	84da      	strh	r2, [r3, #38]	@ 0x26
    return true;
 8007138:	2301      	movs	r3, #1
  }
 800713a:	4618      	mov	r0, r3
 800713c:	3710      	adds	r7, #16
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}

08007142 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE6createEtPNS0_9AllocatorE>:
  void create(SlotCount cap, Allocator* allocator) {
 8007142:	b5b0      	push	{r4, r5, r7, lr}
 8007144:	b084      	sub	sp, #16
 8007146:	af00      	add	r7, sp, #0
 8007148:	60f8      	str	r0, [r7, #12]
 800714a:	460b      	mov	r3, r1
 800714c:	607a      	str	r2, [r7, #4]
 800714e:	817b      	strh	r3, [r7, #10]
    slots_ = reinterpret_cast<T*>(allocator->allocate(slotsToBytes(cap)));
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	681c      	ldr	r4, [r3, #0]
 8007156:	687d      	ldr	r5, [r7, #4]
 8007158:	897b      	ldrh	r3, [r7, #10]
 800715a:	4618      	mov	r0, r3
 800715c:	f7ff fc38 	bl	80069d0 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE12slotsToBytesEt>
 8007160:	4603      	mov	r3, r0
 8007162:	4619      	mov	r1, r3
 8007164:	4628      	mov	r0, r5
 8007166:	47a0      	blx	r4
 8007168:	4602      	mov	r2, r0
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	605a      	str	r2, [r3, #4]
    capacity_ = slots_ ? cap : 0;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d001      	beq.n	800717a <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE6createEtPNS0_9AllocatorE+0x38>
 8007176:	897a      	ldrh	r2, [r7, #10]
 8007178:	e000      	b.n	800717c <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE6createEtPNS0_9AllocatorE+0x3a>
 800717a:	2200      	movs	r2, #0
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	801a      	strh	r2, [r3, #0]
    usage_ = 0;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2200      	movs	r2, #0
 8007184:	805a      	strh	r2, [r3, #2]
  }
 8007186:	bf00      	nop
 8007188:	3710      	adds	r7, #16
 800718a:	46bd      	mov	sp, r7
 800718c:	bdb0      	pop	{r4, r5, r7, pc}

0800718e <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIdEC1EPKd>:
  explicit pgm_ptr(const T* ptr) : ptr_(ptr) {}
 800718e:	b480      	push	{r7}
 8007190:	b083      	sub	sp, #12
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
 8007196:	6039      	str	r1, [r7, #0]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	683a      	ldr	r2, [r7, #0]
 800719c:	601a      	str	r2, [r3, #0]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4618      	mov	r0, r3
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <_ZN11ArduinoJson8V730HB226detail8pgm_readIdEET_PKS3_>:
inline T pgm_read(const T* p) {
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  return *p;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ba:	ec43 2b17 	vmov	d7, r2, r3
}
 80071be:	eeb0 0b47 	vmov.f64	d0, d7
 80071c2:	370c      	adds	r7, #12
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr

080071cc <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>:
  return -stringCompare(s2, s1);
}

template <typename TAdaptedString1, typename TAdaptedString2>
enable_if_t<TAdaptedString1::typeSortKey <= TAdaptedString2::typeSortKey, bool>
stringEquals(TAdaptedString1 s1, TAdaptedString2 s2) {
 80071cc:	b082      	sub	sp, #8
 80071ce:	b590      	push	{r4, r7, lr}
 80071d0:	b089      	sub	sp, #36	@ 0x24
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	1d3c      	adds	r4, r7, #4
 80071d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80071da:	637b      	str	r3, [r7, #52]	@ 0x34
  ARDUINOJSON_ASSERT(!s1.isNull());
  ARDUINOJSON_ASSERT(!s2.isNull());
  size_t size1 = s1.size();
 80071dc:	1d3b      	adds	r3, r7, #4
 80071de:	4618      	mov	r0, r3
 80071e0:	f7fc fee4 	bl	8003fac <_ZNK11ArduinoJson8V730HB226detail9RamString4sizeEv>
 80071e4:	61b8      	str	r0, [r7, #24]
  size_t size2 = s2.size();
 80071e6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7fc fede 	bl	8003fac <_ZNK11ArduinoJson8V730HB226detail9RamString4sizeEv>
 80071f0:	6178      	str	r0, [r7, #20]
  if (size1 != size2)
 80071f2:	69ba      	ldr	r2, [r7, #24]
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d001      	beq.n	80071fe <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x32>
    return false;
 80071fa:	2300      	movs	r3, #0
 80071fc:	e021      	b.n	8007242 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x76>
  for (size_t i = 0; i < size1; i++) {
 80071fe:	2300      	movs	r3, #0
 8007200:	61fb      	str	r3, [r7, #28]
 8007202:	e019      	b.n	8007238 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x6c>
    if (s1[i] != s2[i])
 8007204:	1d3b      	adds	r3, r7, #4
 8007206:	69f9      	ldr	r1, [r7, #28]
 8007208:	4618      	mov	r0, r3
 800720a:	f7f9 fd7d 	bl	8000d08 <_ZNK11ArduinoJson8V730HB226detail9RamStringixEj>
 800720e:	4603      	mov	r3, r0
 8007210:	461c      	mov	r4, r3
 8007212:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8007216:	69f9      	ldr	r1, [r7, #28]
 8007218:	4618      	mov	r0, r3
 800721a:	f7f9 fd75 	bl	8000d08 <_ZNK11ArduinoJson8V730HB226detail9RamStringixEj>
 800721e:	4603      	mov	r3, r0
 8007220:	429c      	cmp	r4, r3
 8007222:	bf14      	ite	ne
 8007224:	2301      	movne	r3, #1
 8007226:	2300      	moveq	r3, #0
 8007228:	b2db      	uxtb	r3, r3
 800722a:	2b00      	cmp	r3, #0
 800722c:	d001      	beq.n	8007232 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x66>
      return false;
 800722e:	2300      	movs	r3, #0
 8007230:	e007      	b.n	8007242 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x76>
  for (size_t i = 0; i < size1; i++) {
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	3301      	adds	r3, #1
 8007236:	61fb      	str	r3, [r7, #28]
 8007238:	69fa      	ldr	r2, [r7, #28]
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	429a      	cmp	r2, r3
 800723e:	d3e1      	bcc.n	8007204 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x38>
  }
  return true;
 8007240:	2301      	movs	r3, #1
}
 8007242:	4618      	mov	r0, r3
 8007244:	3724      	adds	r7, #36	@ 0x24
 8007246:	46bd      	mov	sp, r7
 8007248:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800724c:	b002      	add	sp, #8
 800724e:	4770      	bx	lr

08007250 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7derivedEv>:
  const TDerived& derived() const {
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 8007258:	687b      	ldr	r3, [r7, #4]
  }
 800725a:	4618      	mov	r0, r3
 800725c:	370c      	adds	r7, #12
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr

08007266 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8007266:	b580      	push	{r7, lr}
 8007268:	b082      	sub	sp, #8
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f7fd fa79 	bl	8004766 <_ZNK11ArduinoJson8V730HB2211JsonVariant18getResourceManagerEv>
 8007274:	4603      	mov	r3, r0
  }
 8007276:	4618      	mov	r0, r3
 8007278:	3708      	adds	r7, #8
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}

0800727e <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 800727e:	b580      	push	{r7, lr}
 8007280:	b082      	sub	sp, #8
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
    return client.getData();
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f7fd fa79 	bl	800477e <_ZNK11ArduinoJson8V730HB2211JsonVariant7getDataEv>
 800728c:	4603      	mov	r3, r0
  }
 800728e:	4618      	mov	r0, r3
 8007290:	3708      	adds	r7, #8
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}

08007296 <_ZN11ArduinoJson8V730HB226detail10alias_castIdyEET_T0_>:
T alias_cast(F raw_data) {
 8007296:	b480      	push	{r7}
 8007298:	b085      	sub	sp, #20
 800729a:	af00      	add	r7, sp, #0
 800729c:	e9c7 0100 	strd	r0, r1, [r7]
  ac.raw = raw_data;
 80072a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072a4:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ac.data;
 80072a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072ac:	ec43 2b17 	vmov	d7, r2, r3
}
 80072b0:	eeb0 0b47 	vmov.f64	d0, d7
 80072b4:	3714      	adds	r7, #20
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr

080072be <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIfEC1EPKf>:
  explicit pgm_ptr(const T* ptr) : ptr_(ptr) {}
 80072be:	b480      	push	{r7}
 80072c0:	b083      	sub	sp, #12
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
 80072c6:	6039      	str	r1, [r7, #0]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	683a      	ldr	r2, [r7, #0]
 80072cc:	601a      	str	r2, [r3, #0]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4618      	mov	r0, r3
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <_ZN11ArduinoJson8V730HB226detail8pgm_readIfEET_PKS3_>:
inline T pgm_read(const T* p) {
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  return *p;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	ee07 3a90 	vmov	s15, r3
}
 80072ec:	eeb0 0a67 	vmov.f32	s0, s15
 80072f0:	370c      	adds	r7, #12
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr

080072fa <_ZN11ArduinoJson8V730HB226detail7forwardIRA8_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 80072fa:	b480      	push	{r7}
 80072fc:	b083      	sub	sp, #12
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8007302:	687b      	ldr	r3, [r7, #4]
}
 8007304:	4618      	mov	r0, r3
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA8_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800731a:	2301      	movs	r3, #1
 800731c:	2207      	movs	r2, #7
 800731e:	6839      	ldr	r1, [r7, #0]
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f7fc fe1b 	bl	8003f5c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	3708      	adds	r7, #8
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}

0800732e <_ZN11ArduinoJson8V730HB226detail7forwardIRA7_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800732e:	b480      	push	{r7}
 8007330:	b083      	sub	sp, #12
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8007336:	687b      	ldr	r3, [r7, #4]
}
 8007338:	4618      	mov	r0, r3
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA7_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 8007344:	b580      	push	{r7, lr}
 8007346:	b082      	sub	sp, #8
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800734e:	2301      	movs	r3, #1
 8007350:	2206      	movs	r2, #6
 8007352:	6839      	ldr	r1, [r7, #0]
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f7fc fe01 	bl	8003f5c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	3708      	adds	r7, #8
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}

08007362 <_ZN11ArduinoJson8V730HB226detail7forwardIRA10_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8007362:	b480      	push	{r7}
 8007364:	b083      	sub	sp, #12
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800736a:	687b      	ldr	r3, [r7, #4]
}
 800736c:	4618      	mov	r0, r3
 800736e:	370c      	adds	r7, #12
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr

08007378 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA10_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 8007382:	2301      	movs	r3, #1
 8007384:	2209      	movs	r2, #9
 8007386:	6839      	ldr	r1, [r7, #0]
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f7fc fde7 	bl	8003f5c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	3708      	adds	r7, #8
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <_ZN11ArduinoJson8V730HB229ConverterImvE8fromJsonENS0_16JsonVariantConstE>:
  static T fromJson(JsonVariantConst src) {
 8007396:	b580      	push	{r7, lr}
 8007398:	b084      	sub	sp, #16
 800739a:	af00      	add	r7, sp, #0
 800739c:	463b      	mov	r3, r7
 800739e:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 80073a2:	463b      	mov	r3, r7
 80073a4:	4618      	mov	r0, r3
 80073a6:	f7fe ff1f 	bl	80061e8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 80073aa:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 80073ac:	463b      	mov	r3, r7
 80073ae:	4618      	mov	r0, r3
 80073b0:	f7fe ff26 	bl	8006200 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 80073b4:	60b8      	str	r0, [r7, #8]
    return data ? data->template asIntegral<T>(resources) : T();
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d005      	beq.n	80073c8 <_ZN11ArduinoJson8V730HB229ConverterImvE8fromJsonENS0_16JsonVariantConstE+0x32>
 80073bc:	68b9      	ldr	r1, [r7, #8]
 80073be:	68f8      	ldr	r0, [r7, #12]
 80073c0:	f000 f902 	bl	80075c8 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE>
 80073c4:	4603      	mov	r3, r0
 80073c6:	e000      	b.n	80073ca <_ZN11ArduinoJson8V730HB229ConverterImvE8fromJsonENS0_16JsonVariantConstE+0x34>
 80073c8:	2300      	movs	r3, #0
  }
 80073ca:	4618      	mov	r0, r3
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}

080073d2 <_ZN11ArduinoJson8V730HB226detail10makeReaderIRPKcEENS1_6ReaderINS1_16remove_referenceIT_E4typeEvEEOS8_>:
#endif

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TInput>
Reader<remove_reference_t<TInput>> makeReader(TInput&& input) {
 80073d2:	b580      	push	{r7, lr}
 80073d4:	b084      	sub	sp, #16
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
  return Reader<remove_reference_t<TInput>>{detail::forward<TInput>(input)};
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f7ff fc9c 	bl	8006d18 <_ZN11ArduinoJson8V730HB226detail7forwardIRPKcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 80073e0:	4603      	mov	r3, r0
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	f107 030c 	add.w	r3, r7, #12
 80073e8:	4611      	mov	r1, r2
 80073ea:	4618      	mov	r0, r3
 80073ec:	f000 f99e 	bl	800772c <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv>
 80073f0:	68fb      	ldr	r3, [r7, #12]
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3710      	adds	r7, #16
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}

080073fa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEED1Ev>:
class JsonDeserializer {
 80073fa:	b580      	push	{r7, lr}
 80073fc:	b082      	sub	sp, #8
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4618      	mov	r0, r3
 8007406:	f7fd fd9e 	bl	8004f46 <_ZN11ArduinoJson8V730HB226detail13StringBuilderD1Ev>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4618      	mov	r0, r3
 800740e:	3708      	adds	r7, #8
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <_ZN11ArduinoJson8V730HB226detail13doDeserializeINS1_16JsonDeserializerERNS0_12JsonDocumentENS1_6ReaderIPKcvEENS1_22DeserializationOptionsINS1_14AllowAllFilterEEEEENS0_20DeserializationErrorEOT0_T1_T2_>:
DeserializationError doDeserialize(TDestination&& dst, TReader reader,
 8007414:	b590      	push	{r4, r7, lr}
 8007416:	b0a1      	sub	sp, #132	@ 0x84
 8007418:	af00      	add	r7, sp, #0
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	80ba      	strh	r2, [r7, #4]
  auto data = VariantAttorney::getOrCreateData(dst);
 8007420:	68f8      	ldr	r0, [r7, #12]
 8007422:	f000 f999 	bl	8007758 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataINS0_12JsonDocumentEEEPNS1_11VariantDataERT_>
 8007426:	67f8      	str	r0, [r7, #124]	@ 0x7c
  if (!data)
 8007428:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800742a:	2b00      	cmp	r3, #0
 800742c:	d107      	bne.n	800743e <_ZN11ArduinoJson8V730HB226detail13doDeserializeINS1_16JsonDeserializerERNS0_12JsonDocumentENS1_6ReaderIPKcvEENS1_22DeserializationOptionsINS1_14AllowAllFilterEEEEENS0_20DeserializationErrorEOT0_T1_T2_+0x2a>
    return DeserializationError::NoMemory;
 800742e:	f107 0318 	add.w	r3, r7, #24
 8007432:	2104      	movs	r1, #4
 8007434:	4618      	mov	r0, r3
 8007436:	f7fd ff08 	bl	800524a <_ZN11ArduinoJson8V730HB2220DeserializationErrorC1ENS1_4CodeE>
 800743a:	7e3b      	ldrb	r3, [r7, #24]
 800743c:	e01f      	b.n	800747e <_ZN11ArduinoJson8V730HB226detail13doDeserializeINS1_16JsonDeserializerERNS0_12JsonDocumentENS1_6ReaderIPKcvEENS1_22DeserializationOptionsINS1_14AllowAllFilterEEEEENS0_20DeserializationErrorEOT0_T1_T2_+0x6a>
  auto resources = VariantAttorney::getResourceManager(dst);
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	f000 f996 	bl	8007770 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_12JsonDocumentEEEDTcldtfp_18getResourceManagerEERT_>
 8007444:	67b8      	str	r0, [r7, #120]	@ 0x78
  dst.clear();
 8007446:	68f8      	ldr	r0, [r7, #12]
 8007448:	f7fd fac5 	bl	80049d6 <_ZN11ArduinoJson8V730HB2212JsonDocument5clearEv>
  auto err = TDeserializer<TReader>(resources, reader)
 800744c:	f107 031c 	add.w	r3, r7, #28
 8007450:	68ba      	ldr	r2, [r7, #8]
 8007452:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007454:	4618      	mov	r0, r3
 8007456:	f000 f997 	bl	8007788 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEEC1EPNS1_15ResourceManagerES6_>
                 .parse(*data, options.filter, options.nestingLimit);
 800745a:	f107 001c 	add.w	r0, r7, #28
 800745e:	797b      	ldrb	r3, [r7, #5]
 8007460:	4622      	mov	r2, r4
 8007462:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007464:	f000 f9ac 	bl	80077c0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 8007468:	4603      	mov	r3, r0
 800746a:	753b      	strb	r3, [r7, #20]
  auto err = TDeserializer<TReader>(resources, reader)
 800746c:	f107 031c 	add.w	r3, r7, #28
 8007470:	4618      	mov	r0, r3
 8007472:	f7ff ffc2 	bl	80073fa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEED1Ev>
  shrinkJsonDocument(dst);
 8007476:	68f8      	ldr	r0, [r7, #12]
 8007478:	f7fd ff97 	bl	80053aa <_ZN11ArduinoJson8V730HB226detail18shrinkJsonDocumentERNS0_12JsonDocumentE>
  return err;
 800747c:	7d3b      	ldrb	r3, [r7, #20]
}
 800747e:	4618      	mov	r0, r3
 8007480:	3784      	adds	r7, #132	@ 0x84
 8007482:	46bd      	mov	sp, r7
 8007484:	bd90      	pop	{r4, r7, pc}

08007486 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8007486:	b480      	push	{r7}
 8007488:	b083      	sub	sp, #12
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800748e:	4618      	mov	r0, r3
 8007490:	370c      	adds	r7, #12
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr

0800749a <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800749a:	b480      	push	{r7}
 800749c:	b085      	sub	sp, #20
 800749e:	af00      	add	r7, sp, #0
 80074a0:	60f8      	str	r0, [r7, #12]
 80074a2:	60b9      	str	r1, [r7, #8]
 80074a4:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 80074a6:	68ba      	ldr	r2, [r7, #8]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	1ad3      	subs	r3, r2, r3
    }
 80074ac:	4618      	mov	r0, r3
 80074ae:	3714      	adds	r7, #20
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE>:
    return data;
  return addMember(key, resources);
}

template <typename TAdaptedString>
inline ObjectData::iterator ObjectData::findKey(
 80074b8:	b082      	sub	sp, #8
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b08e      	sub	sp, #56	@ 0x38
 80074be:	af02      	add	r7, sp, #8
 80074c0:	6078      	str	r0, [r7, #4]
 80074c2:	6039      	str	r1, [r7, #0]
 80074c4:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80074c8:	e881 000c 	stmia.w	r1, {r2, r3}
    TAdaptedString key, const ResourceManager* resources) const {
  if (key.isNull())
 80074cc:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 80074d0:	f7fc fd5b 	bl	8003f8a <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>
 80074d4:	4603      	mov	r3, r0
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d003      	beq.n	80074e2 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x2a>
    return iterator();
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f7fc fe2a 	bl	8004134 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1Ev>
 80074e0:	e05a      	b.n	8007598 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xe0>
  bool isKey = true;
 80074e2:	2301      	movs	r3, #1
 80074e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  for (auto it = createIterator(resources); !it.done(); it.next(resources)) {
 80074e8:	6839      	ldr	r1, [r7, #0]
 80074ea:	f107 030c 	add.w	r3, r7, #12
 80074ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80074f0:	4618      	mov	r0, r3
 80074f2:	f7fd fb13 	bl	8004b1c <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
 80074f6:	e041      	b.n	800757c <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xc4>
    if (isKey && stringEquals(key, adaptString(it->asString())))
 80074f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d025      	beq.n	800754c <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x94>
 8007500:	f107 030c 	add.w	r3, r7, #12
 8007504:	4618      	mov	r0, r3
 8007506:	f7fc fe4c 	bl	80041a2 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorptEv>
 800750a:	4602      	mov	r2, r0
 800750c:	f107 0314 	add.w	r3, r7, #20
 8007510:	4611      	mov	r1, r2
 8007512:	4618      	mov	r0, r3
 8007514:	f7fc ff12 	bl	800433c <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv>
 8007518:	f107 0320 	add.w	r3, r7, #32
 800751c:	f107 0214 	add.w	r2, r7, #20
 8007520:	4611      	mov	r1, r2
 8007522:	4618      	mov	r0, r3
 8007524:	f000 f985 	bl	8007832 <_ZN11ArduinoJson8V730HB226detail11adaptStringINS0_10JsonStringEEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringEOS7_>
 8007528:	466a      	mov	r2, sp
 800752a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800752e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007532:	e882 0003 	stmia.w	r2, {r0, r1}
 8007536:	6a3b      	ldr	r3, [r7, #32]
 8007538:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800753c:	ca07      	ldmia	r2, {r0, r1, r2}
 800753e:	f7ff fe45 	bl	80071cc <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>
 8007542:	4603      	mov	r3, r0
 8007544:	2b00      	cmp	r3, #0
 8007546:	d001      	beq.n	800754c <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x94>
 8007548:	2301      	movs	r3, #1
 800754a:	e000      	b.n	800754e <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x96>
 800754c:	2300      	movs	r3, #0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d008      	beq.n	8007564 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xac>
      return it;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	461a      	mov	r2, r3
 8007556:	f107 030c 	add.w	r3, r7, #12
 800755a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800755e:	e882 0003 	stmia.w	r2, {r0, r1}
    isKey = !isKey;
  }
  return iterator();
}
 8007562:	e019      	b.n	8007598 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xe0>
    isKey = !isKey;
 8007564:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007568:	f083 0301 	eor.w	r3, r3, #1
 800756c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  for (auto it = createIterator(resources); !it.done(); it.next(resources)) {
 8007570:	f107 030c 	add.w	r3, r7, #12
 8007574:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007576:	4618      	mov	r0, r3
 8007578:	f7fd faad 	bl	8004ad6 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
 800757c:	f107 030c 	add.w	r3, r7, #12
 8007580:	4618      	mov	r0, r3
 8007582:	f7fc fde9 	bl	8004158 <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 8007586:	4603      	mov	r3, r0
 8007588:	f083 0301 	eor.w	r3, r3, #1
 800758c:	b2db      	uxtb	r3, r3
 800758e:	2b00      	cmp	r3, #0
 8007590:	d1b2      	bne.n	80074f8 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x40>
  return iterator();
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f7fc fdce 	bl	8004134 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1Ev>
}
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	3730      	adds	r7, #48	@ 0x30
 800759c:	46bd      	mov	sp, r7
 800759e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80075a2:	b002      	add	sp, #8
 80075a4:	4770      	bx	lr

080075a6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b082      	sub	sp, #8
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 f954 	bl	800785c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7derivedEv>
 80075b4:	4603      	mov	r3, r0
 80075b6:	4618      	mov	r0, r3
 80075b8:	f000 f95b 	bl	8007872 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>
 80075bc:	4603      	mov	r3, r0
  }
 80075be:	4618      	mov	r0, r3
 80075c0:	3708      	adds	r7, #8
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
	...

080075c8 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE>:
  T asIntegral(const ResourceManager* resources) const {
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 80075d2:	6839      	ldr	r1, [r7, #0]
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f7fd fe1d 	bl	8005214 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 80075da:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	791b      	ldrb	r3, [r3, #4]
 80075e0:	3b04      	subs	r3, #4
 80075e2:	2b1a      	cmp	r3, #26
 80075e4:	d87c      	bhi.n	80076e0 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x118>
 80075e6:	a201      	add	r2, pc, #4	@ (adr r2, 80075ec <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x24>)
 80075e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ec:	0800769f 	.word	0x0800769f
 80075f0:	080076ad 	.word	0x080076ad
 80075f4:	08007659 	.word	0x08007659
 80075f8:	080076e1 	.word	0x080076e1
 80075fc:	080076e1 	.word	0x080076e1
 8007600:	080076e1 	.word	0x080076e1
 8007604:	0800765f 	.word	0x0800765f
 8007608:	080076e1 	.word	0x080076e1
 800760c:	0800766d 	.word	0x0800766d
 8007610:	080076e1 	.word	0x080076e1
 8007614:	080076bd 	.word	0x080076bd
 8007618:	080076e1 	.word	0x080076e1
 800761c:	080076e1 	.word	0x080076e1
 8007620:	080076e1 	.word	0x080076e1
 8007624:	080076e1 	.word	0x080076e1
 8007628:	080076e1 	.word	0x080076e1
 800762c:	080076e1 	.word	0x080076e1
 8007630:	080076e1 	.word	0x080076e1
 8007634:	080076e1 	.word	0x080076e1
 8007638:	080076e1 	.word	0x080076e1
 800763c:	080076e1 	.word	0x080076e1
 8007640:	080076e1 	.word	0x080076e1
 8007644:	0800767b 	.word	0x0800767b
 8007648:	080076e1 	.word	0x080076e1
 800764c:	0800768d 	.word	0x0800768d
 8007650:	080076e1 	.word	0x080076e1
 8007654:	080076cf 	.word	0x080076cf
        return content_.asBoolean;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	e041      	b.n	80076e2 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asUint32);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4618      	mov	r0, r3
 8007664:	f000 f921 	bl	80078aa <_ZN11ArduinoJson8V730HB226detail13convertNumberImmEET_T0_>
 8007668:	4603      	mov	r3, r0
 800766a:	e03a      	b.n	80076e2 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asInt32);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4618      	mov	r0, r3
 8007672:	f000 f92b 	bl	80078cc <_ZN11ArduinoJson8V730HB226detail13convertNumberImlEET_T0_>
 8007676:	4603      	mov	r3, r0
 8007678:	e033      	b.n	80076e2 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asUint64);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007680:	4610      	mov	r0, r2
 8007682:	4619      	mov	r1, r3
 8007684:	f000 f933 	bl	80078ee <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_>
 8007688:	4603      	mov	r3, r0
 800768a:	e02a      	b.n	80076e2 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asInt64);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007692:	4610      	mov	r0, r2
 8007694:	4619      	mov	r1, r3
 8007696:	f000 f93d 	bl	8007914 <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_>
 800769a:	4603      	mov	r3, r0
 800769c:	e021      	b.n	80076e2 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asLinkedString);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4618      	mov	r0, r3
 80076a4:	f000 f949 	bl	800793a <_ZN11ArduinoJson8V730HB226detail11parseNumberImEET_PKc>
 80076a8:	4603      	mov	r3, r0
 80076aa:	e01a      	b.n	80076e2 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asOwnedString->data);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	3308      	adds	r3, #8
 80076b2:	4618      	mov	r0, r3
 80076b4:	f000 f941 	bl	800793a <_ZN11ArduinoJson8V730HB226detail11parseNumberImEET_PKc>
 80076b8:	4603      	mov	r3, r0
 80076ba:	e012      	b.n	80076e2 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asFloat);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	edd3 7a00 	vldr	s15, [r3]
 80076c2:	eeb0 0a67 	vmov.f32	s0, s15
 80076c6:	f000 f94c 	bl	8007962 <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_>
 80076ca:	4603      	mov	r3, r0
 80076cc:	e009      	b.n	80076e2 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asDouble);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	ed93 7b00 	vldr	d7, [r3]
 80076d4:	eeb0 0b47 	vmov.f64	d0, d7
 80076d8:	f000 f95b 	bl	8007992 <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_>
 80076dc:	4603      	mov	r3, r0
 80076de:	e000      	b.n	80076e2 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return 0;
 80076e0:	2300      	movs	r3, #0
  }
 80076e2:	4618      	mov	r0, r3
 80076e4:	3710      	adds	r7, #16
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	bf00      	nop

080076ec <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7getDataEv>:
  VariantData* getData() const {
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b082      	sub	sp, #8
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 f964 	bl	80079c2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7derivedEv>
 80076fa:	4603      	mov	r3, r0
 80076fc:	4618      	mov	r0, r3
 80076fe:	f000 f96b 	bl	80079d8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>
 8007702:	4603      	mov	r3, r0
  }
 8007704:	4618      	mov	r0, r3
 8007706:	3708      	adds	r7, #8
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 800770c:	b580      	push	{r7, lr}
 800770e:	b082      	sub	sp, #8
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 f954 	bl	80079c2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7derivedEv>
 800771a:	4603      	mov	r3, r0
 800771c:	4618      	mov	r0, r3
 800771e:	f000 f967 	bl	80079f0 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>
 8007722:	4603      	mov	r3, r0
  }
 8007724:	4618      	mov	r0, r3
 8007726:	3708      	adds	r7, #8
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv>:
template <typename TSource>
struct Reader<TSource*, enable_if_t<IsCharOrVoid<TSource>::value>> {
  const char* ptr_;

 public:
  explicit Reader(const void* ptr)
 800772c:	b480      	push	{r7}
 800772e:	b083      	sub	sp, #12
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
      : ptr_(ptr ? reinterpret_cast<const char*>(ptr) : "") {}
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d001      	beq.n	8007740 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv+0x14>
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	e000      	b.n	8007742 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv+0x16>
 8007740:	4b04      	ldr	r3, [pc, #16]	@ (8007754 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv+0x28>)
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	6013      	str	r3, [r2, #0]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4618      	mov	r0, r3
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr
 8007754:	0802594c 	.word	0x0802594c

08007758 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataINS0_12JsonDocumentEEEPNS1_11VariantDataERT_>:

  template <typename TClient>
  static VariantData* getOrCreateData(TClient& client) {
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
    return client.getOrCreateData();
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f7fd f960 	bl	8004a26 <_ZN11ArduinoJson8V730HB2212JsonDocument15getOrCreateDataEv>
 8007766:	4603      	mov	r3, r0
  }
 8007768:	4618      	mov	r0, r3
 800776a:	3708      	adds	r7, #8
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_12JsonDocumentEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f7fd f93d 	bl	80049f8 <_ZN11ArduinoJson8V730HB2212JsonDocument18getResourceManagerEv>
 800777e:	4603      	mov	r3, r0
  }
 8007780:	4618      	mov	r0, r3
 8007782:	3708      	adds	r7, #8
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEEC1EPNS1_15ResourceManagerES6_>:
  JsonDeserializer(ResourceManager* resources, TReader reader)
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	607a      	str	r2, [r7, #4]
      : stringBuilder_(resources),
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	68b9      	ldr	r1, [r7, #8]
 8007798:	4618      	mov	r0, r3
 800779a:	f7fd fbbf 	bl	8004f1c <_ZN11ArduinoJson8V730HB226detail13StringBuilderC1EPNS1_15ResourceManagerE>
        foundSomething_(false),
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2200      	movs	r2, #0
 80077a2:	731a      	strb	r2, [r3, #12]
        latch_(reader),
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	3310      	adds	r3, #16
 80077a8:	6879      	ldr	r1, [r7, #4]
 80077aa:	4618      	mov	r0, r3
 80077ac:	f000 f92c 	bl	8007a08 <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEEC1ES6_>
        resources_(resources) {}
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	68ba      	ldr	r2, [r7, #8]
 80077b4:	619a      	str	r2, [r3, #24]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	4618      	mov	r0, r3
 80077ba:	3710      	adds	r7, #16
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError parse(VariantData& variant, TFilter filter,
 80077c0:	b590      	push	{r4, r7, lr}
 80077c2:	b089      	sub	sp, #36	@ 0x24
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	713a      	strb	r2, [r7, #4]
 80077cc:	703b      	strb	r3, [r7, #0]
    err = parseVariant(variant, filter, nestingLimit);
 80077ce:	783b      	ldrb	r3, [r7, #0]
 80077d0:	4622      	mov	r2, r4
 80077d2:	68b9      	ldr	r1, [r7, #8]
 80077d4:	68f8      	ldr	r0, [r7, #12]
 80077d6:	f000 f929 	bl	8007a2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 80077da:	4603      	mov	r3, r0
 80077dc:	75fb      	strb	r3, [r7, #23]
    if (!err && latch_.last() != 0 && variant.isFloat()) {
 80077de:	7dfb      	ldrb	r3, [r7, #23]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d10f      	bne.n	8007804 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x44>
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	3310      	adds	r3, #16
 80077e8:	4618      	mov	r0, r3
 80077ea:	f000 fa0d 	bl	8007c08 <_ZNK11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE4lastEv>
 80077ee:	4603      	mov	r3, r0
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d007      	beq.n	8007804 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x44>
 80077f4:	68b8      	ldr	r0, [r7, #8]
 80077f6:	f7fc fde8 	bl	80043ca <_ZNK11ArduinoJson8V730HB226detail11VariantData7isFloatEv>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d001      	beq.n	8007804 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x44>
 8007800:	2301      	movs	r3, #1
 8007802:	e000      	b.n	8007806 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x46>
 8007804:	2300      	movs	r3, #0
 8007806:	2b00      	cmp	r3, #0
 8007808:	d007      	beq.n	800781a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x5a>
      return DeserializationError::InvalidInput;
 800780a:	f107 0318 	add.w	r3, r7, #24
 800780e:	2103      	movs	r1, #3
 8007810:	4618      	mov	r0, r3
 8007812:	f7fd fd1a 	bl	800524a <_ZN11ArduinoJson8V730HB2220DeserializationErrorC1ENS1_4CodeE>
 8007816:	7e3b      	ldrb	r3, [r7, #24]
 8007818:	e007      	b.n	800782a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x6a>
    return err;
 800781a:	7dfa      	ldrb	r2, [r7, #23]
 800781c:	f107 031c 	add.w	r3, r7, #28
 8007820:	4611      	mov	r1, r2
 8007822:	4618      	mov	r0, r3
 8007824:	f7fd fd11 	bl	800524a <_ZN11ArduinoJson8V730HB2220DeserializationErrorC1ENS1_4CodeE>
 8007828:	7f3b      	ldrb	r3, [r7, #28]
  }
 800782a:	4618      	mov	r0, r3
 800782c:	3724      	adds	r7, #36	@ 0x24
 800782e:	46bd      	mov	sp, r7
 8007830:	bd90      	pop	{r4, r7, pc}

08007832 <_ZN11ArduinoJson8V730HB226detail11adaptStringINS0_10JsonStringEEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringEOS7_>:
AdaptedString<TString> adaptString(TString&& s) {
 8007832:	b580      	push	{r7, lr}
 8007834:	b082      	sub	sp, #8
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
 800783a:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800783c:	6838      	ldr	r0, [r7, #0]
 800783e:	f000 f9ef 	bl	8007c20 <_ZN11ArduinoJson8V730HB226detail7forwardINS0_10JsonStringEEEOT_RNS1_16remove_referenceIS4_E4typeE>
 8007842:	4603      	mov	r3, r0
 8007844:	4618      	mov	r0, r3
 8007846:	f7fc fc6a 	bl	800411e <_ZN11ArduinoJson8V730HB226detail13StringAdapterINS0_10JsonStringEvE5adaptERKS3_>
 800784a:	4602      	mov	r2, r0
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	ca07      	ldmia	r2, {r0, r1, r2}
 8007850:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	3708      	adds	r7, #8
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7derivedEv>:
  const TDerived& derived() const {
 800785c:	b480      	push	{r7}
 800785e:	b083      	sub	sp, #12
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 8007864:	687b      	ldr	r3, [r7, #4]
  }
 8007866:	4618      	mov	r0, r3
 8007868:	370c      	adds	r7, #12
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr

08007872 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8007872:	b580      	push	{r7, lr}
 8007874:	b082      	sub	sp, #8
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 f9db 	bl	8007c36 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEE18getResourceManagerEv>
 8007880:	4603      	mov	r3, r0
  }
 8007882:	4618      	mov	r0, r3
 8007884:	3708      	adds	r7, #8
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}

0800788a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>:
  VariantData* getData() const {
 800788a:	b580      	push	{r7, lr}
 800788c:	b082      	sub	sp, #8
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f7ff ffe2 	bl	800785c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7derivedEv>
 8007898:	4603      	mov	r3, r0
 800789a:	4618      	mov	r0, r3
 800789c:	f000 f9d9 	bl	8007c52 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>
 80078a0:	4603      	mov	r3, r0
  }
 80078a2:	4618      	mov	r0, r3
 80078a4:	3708      	adds	r7, #8
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}

080078aa <_ZN11ArduinoJson8V730HB226detail13convertNumberImmEET_T0_>:
canConvertNumber(TIn) {
  return true;
}

template <typename TOut, typename TIn>
TOut convertNumber(TIn value) {
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b082      	sub	sp, #8
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 f9d9 	bl	8007c6a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d001      	beq.n	80078c2 <_ZN11ArduinoJson8V730HB226detail13convertNumberImmEET_T0_+0x18>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	e000      	b.n	80078c4 <_ZN11ArduinoJson8V730HB226detail13convertNumberImmEET_T0_+0x1a>
 80078c2:	2300      	movs	r3, #0
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3708      	adds	r7, #8
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <_ZN11ArduinoJson8V730HB226detail13convertNumberImlEET_T0_>:
TOut convertNumber(TIn value) {
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 f9d9 	bl	8007c8c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_>
 80078da:	4603      	mov	r3, r0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d001      	beq.n	80078e4 <_ZN11ArduinoJson8V730HB226detail13convertNumberImlEET_T0_+0x18>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	e000      	b.n	80078e6 <_ZN11ArduinoJson8V730HB226detail13convertNumberImlEET_T0_+0x1a>
 80078e4:	2300      	movs	r3, #0
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3708      	adds	r7, #8
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}

080078ee <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_>:
TOut convertNumber(TIn value) {
 80078ee:	b580      	push	{r7, lr}
 80078f0:	b082      	sub	sp, #8
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80078f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078fc:	f000 f9dc 	bl	8007cb8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 8007900:	4603      	mov	r3, r0
 8007902:	2b00      	cmp	r3, #0
 8007904:	d001      	beq.n	800790a <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_+0x1c>
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	e000      	b.n	800790c <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_+0x1e>
 800790a:	2300      	movs	r3, #0
}
 800790c:	4618      	mov	r0, r3
 800790e:	3708      	adds	r7, #8
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_>:
TOut convertNumber(TIn value) {
 8007914:	b580      	push	{r7, lr}
 8007916:	b082      	sub	sp, #8
 8007918:	af00      	add	r7, sp, #0
 800791a:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800791e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007922:	f000 f9e1 	bl	8007ce8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>
 8007926:	4603      	mov	r3, r0
 8007928:	2b00      	cmp	r3, #0
 800792a:	d001      	beq.n	8007930 <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_+0x1c>
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	e000      	b.n	8007932 <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_+0x1e>
 8007930:	2300      	movs	r3, #0
}
 8007932:	4618      	mov	r0, r3
 8007934:	3708      	adds	r7, #8
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <_ZN11ArduinoJson8V730HB226detail11parseNumberImEET_PKc>:

template <typename T>
inline T parseNumber(const char* s) {
 800793a:	b580      	push	{r7, lr}
 800793c:	b086      	sub	sp, #24
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
  return parseNumber(s).convertTo<T>();
 8007942:	f107 0308 	add.w	r3, r7, #8
 8007946:	6879      	ldr	r1, [r7, #4]
 8007948:	4618      	mov	r0, r3
 800794a:	f7fd fec7 	bl	80056dc <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>
 800794e:	f107 0308 	add.w	r3, r7, #8
 8007952:	4618      	mov	r0, r3
 8007954:	f000 f9e6 	bl	8007d24 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v>
 8007958:	4603      	mov	r3, r0
}
 800795a:	4618      	mov	r0, r3
 800795c:	3718      	adds	r7, #24
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}

08007962 <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_>:
TOut convertNumber(TIn value) {
 8007962:	b580      	push	{r7, lr}
 8007964:	b082      	sub	sp, #8
 8007966:	af00      	add	r7, sp, #0
 8007968:	ed87 0a01 	vstr	s0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800796c:	ed97 0a01 	vldr	s0, [r7, #4]
 8007970:	f000 fa1e 	bl	8007db0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_>
 8007974:	4603      	mov	r3, r0
 8007976:	2b00      	cmp	r3, #0
 8007978:	d006      	beq.n	8007988 <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_+0x26>
 800797a:	edd7 7a01 	vldr	s15, [r7, #4]
 800797e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007982:	ee17 3a90 	vmov	r3, s15
 8007986:	e000      	b.n	800798a <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_+0x28>
 8007988:	2300      	movs	r3, #0
}
 800798a:	4618      	mov	r0, r3
 800798c:	3708      	adds	r7, #8
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_>:
TOut convertNumber(TIn value) {
 8007992:	b580      	push	{r7, lr}
 8007994:	b082      	sub	sp, #8
 8007996:	af00      	add	r7, sp, #0
 8007998:	ed87 0b00 	vstr	d0, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800799c:	ed97 0b00 	vldr	d0, [r7]
 80079a0:	f000 fa34 	bl	8007e0c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 80079a4:	4603      	mov	r3, r0
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d006      	beq.n	80079b8 <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_+0x26>
 80079aa:	ed97 7b00 	vldr	d7, [r7]
 80079ae:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80079b2:	ee17 3a90 	vmov	r3, s15
 80079b6:	e000      	b.n	80079ba <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_+0x28>
 80079b8:	2300      	movs	r3, #0
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3708      	adds	r7, #8
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7derivedEv>:
  const TDerived& derived() const {
 80079c2:	b480      	push	{r7}
 80079c4:	b083      	sub	sp, #12
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 80079ca:	687b      	ldr	r3, [r7, #4]
  }
 80079cc:	4618      	mov	r0, r3
 80079ce:	370c      	adds	r7, #12
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 80079d8:	b580      	push	{r7, lr}
 80079da:	b082      	sub	sp, #8
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
    return client.getData();
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 fa39 	bl	8007e58 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEE7getDataEv>
 80079e6:	4603      	mov	r3, r0
  }
 80079e8:	4618      	mov	r0, r3
 80079ea:	3708      	adds	r7, #8
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 fa49 	bl	8007e90 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEE18getResourceManagerEv>
 80079fe:	4603      	mov	r3, r0
  }
 8007a00:	4618      	mov	r0, r3
 8007a02:	3708      	adds	r7, #8
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEEC1ES6_>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TReader>
class Latch {
 public:
  Latch(TReader reader) : reader_(reader), loaded_(false) {
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	683a      	ldr	r2, [r7, #0]
 8007a16:	601a      	str	r2, [r3, #0]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	715a      	strb	r2, [r3, #5]
#if ARDUINOJSON_DEBUG
    ended_ = false;
#endif
  }
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4618      	mov	r0, r3
 8007a22:	370c      	adds	r7, #12
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code parseVariant(
 8007a2c:	b5b0      	push	{r4, r5, r7, lr}
 8007a2e:	b086      	sub	sp, #24
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	60f8      	str	r0, [r7, #12]
 8007a34:	60b9      	str	r1, [r7, #8]
 8007a36:	713a      	strb	r2, [r7, #4]
 8007a38:	703b      	strb	r3, [r7, #0]
    err = skipSpacesAndComments();
 8007a3a:	68f8      	ldr	r0, [r7, #12]
 8007a3c:	f000 fa36 	bl	8007eac <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8007a40:	4603      	mov	r3, r0
 8007a42:	75fb      	strb	r3, [r7, #23]
    if (err)
 8007a44:	7dfb      	ldrb	r3, [r7, #23]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d001      	beq.n	8007a4e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x22>
      return err;
 8007a4a:	7dfb      	ldrb	r3, [r7, #23]
 8007a4c:	e0d2      	b.n	8007bf4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
    switch (current()) {
 8007a4e:	68f8      	ldr	r0, [r7, #12]
 8007a50:	f000 fa62 	bl	8007f18 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8007a54:	4603      	mov	r3, r0
 8007a56:	2b7b      	cmp	r3, #123	@ 0x7b
 8007a58:	f300 80ba 	bgt.w	8007bd0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1a4>
 8007a5c:	2b5b      	cmp	r3, #91	@ 0x5b
 8007a5e:	da04      	bge.n	8007a6a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x3e>
 8007a60:	2b22      	cmp	r3, #34	@ 0x22
 8007a62:	d07b      	beq.n	8007b5c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x130>
 8007a64:	2b27      	cmp	r3, #39	@ 0x27
 8007a66:	d079      	beq.n	8007b5c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x130>
 8007a68:	e0b2      	b.n	8007bd0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1a4>
 8007a6a:	3b5b      	subs	r3, #91	@ 0x5b
 8007a6c:	2b20      	cmp	r3, #32
 8007a6e:	f200 80af 	bhi.w	8007bd0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1a4>
 8007a72:	a201      	add	r2, pc, #4	@ (adr r2, 8007a78 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x4c>)
 8007a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a78:	08007afd 	.word	0x08007afd
 8007a7c:	08007bd1 	.word	0x08007bd1
 8007a80:	08007bd1 	.word	0x08007bd1
 8007a84:	08007bd1 	.word	0x08007bd1
 8007a88:	08007bd1 	.word	0x08007bd1
 8007a8c:	08007bd1 	.word	0x08007bd1
 8007a90:	08007bd1 	.word	0x08007bd1
 8007a94:	08007bd1 	.word	0x08007bd1
 8007a98:	08007bd1 	.word	0x08007bd1
 8007a9c:	08007bd1 	.word	0x08007bd1
 8007aa0:	08007bd1 	.word	0x08007bd1
 8007aa4:	08007ba3 	.word	0x08007ba3
 8007aa8:	08007bd1 	.word	0x08007bd1
 8007aac:	08007bd1 	.word	0x08007bd1
 8007ab0:	08007bd1 	.word	0x08007bd1
 8007ab4:	08007bd1 	.word	0x08007bd1
 8007ab8:	08007bd1 	.word	0x08007bd1
 8007abc:	08007bd1 	.word	0x08007bd1
 8007ac0:	08007bd1 	.word	0x08007bd1
 8007ac4:	08007bc5 	.word	0x08007bc5
 8007ac8:	08007bd1 	.word	0x08007bd1
 8007acc:	08007bd1 	.word	0x08007bd1
 8007ad0:	08007bd1 	.word	0x08007bd1
 8007ad4:	08007bd1 	.word	0x08007bd1
 8007ad8:	08007bd1 	.word	0x08007bd1
 8007adc:	08007b81 	.word	0x08007b81
 8007ae0:	08007bd1 	.word	0x08007bd1
 8007ae4:	08007bd1 	.word	0x08007bd1
 8007ae8:	08007bd1 	.word	0x08007bd1
 8007aec:	08007bd1 	.word	0x08007bd1
 8007af0:	08007bd1 	.word	0x08007bd1
 8007af4:	08007bd1 	.word	0x08007bd1
 8007af8:	08007b2d 	.word	0x08007b2d
        if (filter.allowArray())
 8007afc:	1d3b      	adds	r3, r7, #4
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7fd fbdd 	bl	80052be <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowArrayEv>
 8007b04:	4603      	mov	r3, r0
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d00a      	beq.n	8007b20 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0xf4>
          return parseArray(variant.toArray(), filter, nestingLimit);
 8007b0a:	68b8      	ldr	r0, [r7, #8]
 8007b0c:	f7fc fcdc 	bl	80044c8 <_ZN11ArduinoJson8V730HB226detail11VariantData7toArrayEv>
 8007b10:	4601      	mov	r1, r0
 8007b12:	783b      	ldrb	r3, [r7, #0]
 8007b14:	462a      	mov	r2, r5
 8007b16:	68f8      	ldr	r0, [r7, #12]
 8007b18:	f000 fa15 	bl	8007f46 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	e069      	b.n	8007bf4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipArray(nestingLimit);
 8007b20:	7839      	ldrb	r1, [r7, #0]
 8007b22:	68f8      	ldr	r0, [r7, #12]
 8007b24:	f000 fa95 	bl	8008052 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	e063      	b.n	8007bf4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowObject())
 8007b2c:	1d3b      	adds	r3, r7, #4
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f7fd fbd0 	bl	80052d4 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter11allowObjectEv>
 8007b34:	4603      	mov	r3, r0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d00a      	beq.n	8007b50 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x124>
          return parseObject(variant.toObject(), filter, nestingLimit);
 8007b3a:	68b8      	ldr	r0, [r7, #8]
 8007b3c:	f7fc fcec 	bl	8004518 <_ZN11ArduinoJson8V730HB226detail11VariantData8toObjectEv>
 8007b40:	4601      	mov	r1, r0
 8007b42:	783b      	ldrb	r3, [r7, #0]
 8007b44:	4622      	mov	r2, r4
 8007b46:	68f8      	ldr	r0, [r7, #12]
 8007b48:	f000 fac6 	bl	80080d8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	e051      	b.n	8007bf4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipObject(nestingLimit);
 8007b50:	7839      	ldrb	r1, [r7, #0]
 8007b52:	68f8      	ldr	r0, [r7, #12]
 8007b54:	f000 fbac 	bl	80082b0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	e04b      	b.n	8007bf4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 8007b5c:	1d3b      	adds	r3, r7, #4
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7fd fbc3 	bl	80052ea <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>
 8007b64:	4603      	mov	r3, r0
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d005      	beq.n	8007b76 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x14a>
          return parseStringValue(variant);
 8007b6a:	68b9      	ldr	r1, [r7, #8]
 8007b6c:	68f8      	ldr	r0, [r7, #12]
 8007b6e:	f000 fc1f 	bl	80083b0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16parseStringValueERNS1_11VariantDataE>
 8007b72:	4603      	mov	r3, r0
 8007b74:	e03e      	b.n	8007bf4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipQuotedString();
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	f000 fc3b 	bl	80083f2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	e039      	b.n	8007bf4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 8007b80:	1d3b      	adds	r3, r7, #4
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7fd fbb1 	bl	80052ea <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d003      	beq.n	8007b96 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x16a>
          variant.setBoolean(true);
 8007b8e:	2101      	movs	r1, #1
 8007b90:	68b8      	ldr	r0, [r7, #8]
 8007b92:	f7fc fc47 	bl	8004424 <_ZN11ArduinoJson8V730HB226detail11VariantData10setBooleanEb>
        return skipKeyword("true");
 8007b96:	4919      	ldr	r1, [pc, #100]	@ (8007bfc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>)
 8007b98:	68f8      	ldr	r0, [r7, #12]
 8007b9a:	f000 fc5f 	bl	800845c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	e028      	b.n	8007bf4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 8007ba2:	1d3b      	adds	r3, r7, #4
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f7fd fba0 	bl	80052ea <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d003      	beq.n	8007bb8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x18c>
          variant.setBoolean(false);
 8007bb0:	2100      	movs	r1, #0
 8007bb2:	68b8      	ldr	r0, [r7, #8]
 8007bb4:	f7fc fc36 	bl	8004424 <_ZN11ArduinoJson8V730HB226detail11VariantData10setBooleanEb>
        return skipKeyword("false");
 8007bb8:	4911      	ldr	r1, [pc, #68]	@ (8007c00 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1d4>)
 8007bba:	68f8      	ldr	r0, [r7, #12]
 8007bbc:	f000 fc4e 	bl	800845c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	e017      	b.n	8007bf4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        return skipKeyword("null");
 8007bc4:	490f      	ldr	r1, [pc, #60]	@ (8007c04 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1d8>)
 8007bc6:	68f8      	ldr	r0, [r7, #12]
 8007bc8:	f000 fc48 	bl	800845c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	e011      	b.n	8007bf4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 8007bd0:	1d3b      	adds	r3, r7, #4
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f7fd fb89 	bl	80052ea <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d005      	beq.n	8007bea <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1be>
          return parseNumericValue(variant);
 8007bde:	68b9      	ldr	r1, [r7, #8]
 8007be0:	68f8      	ldr	r0, [r7, #12]
 8007be2:	f000 fc61 	bl	80084a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE>
 8007be6:	4603      	mov	r3, r0
 8007be8:	e004      	b.n	8007bf4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipNumericValue();
 8007bea:	68f8      	ldr	r0, [r7, #12]
 8007bec:	f000 fd04 	bl	80085f8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	bf00      	nop
  }
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3718      	adds	r7, #24
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bdb0      	pop	{r4, r5, r7, pc}
 8007bfc:	08025bc0 	.word	0x08025bc0
 8007c00:	08025bc8 	.word	0x08025bc8
 8007c04:	08025bd0 	.word	0x08025bd0

08007c08 <_ZNK11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE4lastEv>:

  void clear() {
    loaded_ = false;
  }

  int last() const {
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
    return current_;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	791b      	ldrb	r3, [r3, #4]
  }
 8007c14:	4618      	mov	r0, r3
 8007c16:	370c      	adds	r7, #12
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <_ZN11ArduinoJson8V730HB226detail7forwardINS0_10JsonStringEEEOT_RNS1_16remove_referenceIS4_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8007c28:	687b      	ldr	r3, [r7, #4]
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	370c      	adds	r7, #12
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr

08007c36 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEE18getResourceManagerEv>:
  // clang-format off
  MemberProxy(const MemberProxy& src) // Error here? See https://arduinojson.org/v7/proxy-non-copyable/
      : upstream_(src.upstream_), key_(src.key_) {}
  // clang-format on

  ResourceManager* getResourceManager() const {
 8007c36:	b580      	push	{r7, lr}
 8007c38:	b082      	sub	sp, #8
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(upstream_);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	3304      	adds	r3, #4
 8007c42:	4618      	mov	r0, r3
 8007c44:	f000 fcf6 	bl	8008634 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_10JsonObjectEEEDTcldtfp_18getResourceManagerEERT_>
 8007c48:	4603      	mov	r3, r0
  }
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3708      	adds	r7, #8
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}

08007c52 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 8007c52:	b580      	push	{r7, lr}
 8007c54:	b082      	sub	sp, #8
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
    return client.getData();
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 fd04 	bl	8008668 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEE7getDataEv>
 8007c60:	4603      	mov	r3, r0
  }
 8007c62:	4618      	mov	r0, r3
 8007c64:	3708      	adds	r7, #8
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}

08007c6a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b082      	sub	sp, #8
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
  return value <= TIn(numeric_limits<TOut>::highest());
 8007c72:	f000 f8c2 	bl	8007dfa <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 8007c76:	4602      	mov	r2, r0
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	bf94      	ite	ls
 8007c7e:	2301      	movls	r3, #1
 8007c80:	2300      	movhi	r3, #0
 8007c82:	b2db      	uxtb	r3, r3
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3708      	adds	r7, #8
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b082      	sub	sp, #8
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  if (value < 0)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	da01      	bge.n	8007c9e <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_+0x12>
    return false;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	e008      	b.n	8007cb0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_+0x24>
  return TOut(value) <= numeric_limits<TOut>::highest();
 8007c9e:	f000 f8ac 	bl	8007dfa <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	bf2c      	ite	cs
 8007caa:	2301      	movcs	r3, #1
 8007cac:	2300      	movcc	r3, #0
 8007cae:	b2db      	uxtb	r3, r3
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3708      	adds	r7, #8
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8007cb8:	b5b0      	push	{r4, r5, r7, lr}
 8007cba:	b082      	sub	sp, #8
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	e9c7 0100 	strd	r0, r1, [r7]
  return value <= TIn(numeric_limits<TOut>::highest());
 8007cc2:	f000 f89a 	bl	8007dfa <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2200      	movs	r2, #0
 8007cca:	461c      	mov	r4, r3
 8007ccc:	4615      	mov	r5, r2
 8007cce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cd2:	4294      	cmp	r4, r2
 8007cd4:	eb75 0303 	sbcs.w	r3, r5, r3
 8007cd8:	bf2c      	ite	cs
 8007cda:	2301      	movcs	r3, #1
 8007cdc:	2300      	movcc	r3, #0
 8007cde:	b2db      	uxtb	r3, r3
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3708      	adds	r7, #8
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bdb0      	pop	{r4, r5, r7, pc}

08007ce8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8007ce8:	b5b0      	push	{r4, r5, r7, lr}
 8007cea:	b082      	sub	sp, #8
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	e9c7 0100 	strd	r0, r1, [r7]
  if (value < 0)
 8007cf2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	da01      	bge.n	8007cfe <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x16>
    return false;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	e00e      	b.n	8007d1c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x34>
  return value <= TIn(numeric_limits<TOut>::highest());
 8007cfe:	f000 f87c 	bl	8007dfa <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 8007d02:	4603      	mov	r3, r0
 8007d04:	2200      	movs	r2, #0
 8007d06:	461c      	mov	r4, r3
 8007d08:	4615      	mov	r5, r2
 8007d0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d0e:	4294      	cmp	r4, r2
 8007d10:	eb75 0303 	sbcs.w	r3, r5, r3
 8007d14:	bfac      	ite	ge
 8007d16:	2301      	movge	r3, #1
 8007d18:	2300      	movlt	r3, #0
 8007d1a:	b2db      	uxtb	r3, r3
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3708      	adds	r7, #8
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bdb0      	pop	{r4, r5, r7, pc}

08007d24 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v>:
  T convertTo() const {
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
    switch (type_) {
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	3b01      	subs	r3, #1
 8007d32:	2b03      	cmp	r3, #3
 8007d34:	d82e      	bhi.n	8007d94 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x70>
 8007d36:	a201      	add	r2, pc, #4	@ (adr r2, 8007d3c <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x18>)
 8007d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d3c:	08007d4d 	.word	0x08007d4d
 8007d40:	08007d5f 	.word	0x08007d5f
 8007d44:	08007d71 	.word	0x08007d71
 8007d48:	08007d83 	.word	0x08007d83
        return convertNumber<T>(value_.asFloat);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	edd3 7a02 	vldr	s15, [r3, #8]
 8007d52:	eeb0 0a67 	vmov.f32	s0, s15
 8007d56:	f7ff fe04 	bl	8007962 <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	e01b      	b.n	8007d96 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x72>
        return convertNumber<T>(value_.asSignedInteger);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007d64:	4610      	mov	r0, r2
 8007d66:	4619      	mov	r1, r3
 8007d68:	f7ff fdd4 	bl	8007914 <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	e012      	b.n	8007d96 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x72>
        return convertNumber<T>(value_.asUnsignedInteger);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007d76:	4610      	mov	r0, r2
 8007d78:	4619      	mov	r1, r3
 8007d7a:	f7ff fdb8 	bl	80078ee <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	e009      	b.n	8007d96 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x72>
        return convertNumber<T>(value_.asDouble);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	ed93 7b02 	vldr	d7, [r3, #8]
 8007d88:	eeb0 0b47 	vmov.f64	d0, d7
 8007d8c:	f7ff fe01 	bl	8007992 <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_>
 8007d90:	4603      	mov	r3, r0
 8007d92:	e000      	b.n	8007d96 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x72>
        return T();
 8007d94:	2300      	movs	r3, #0
  }
 8007d96:	4618      	mov	r0, r3
 8007d98:	3708      	adds	r7, #8
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop

08007da0 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE6lowestEv>:
template <typename T, typename Enable = void>
struct numeric_limits;

template <typename T>
struct numeric_limits<T, enable_if_t<is_unsigned<T>::value>> {
  static constexpr T lowest() {
 8007da0:	b480      	push	{r7}
 8007da2:	af00      	add	r7, sp, #0
    return 0;
 8007da4:	2300      	movs	r3, #0
  }
 8007da6:	4618      	mov	r0, r3
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr

08007db0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	ed87 0a01 	vstr	s0, [r7, #4]
  return value >= numeric_limits<TOut>::lowest() &&
 8007dba:	f7ff fff1 	bl	8007da0 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE6lowestEv>
 8007dbe:	ee07 0a90 	vmov	s15, r0
 8007dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dc6:	ed97 7a01 	vldr	s14, [r7, #4]
 8007dca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dd2:	db0d      	blt.n	8007df0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x40>
         value <= FloatTraits<TIn>::template highest_for<TOut>();
 8007dd4:	2000      	movs	r0, #0
 8007dd6:	f000 fc63 	bl	80086a0 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forImEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_11is_unsignedIS7_EE5valueeqstS7_Li4EEjE4typeE>
 8007dda:	eeb0 7a40 	vmov.f32	s14, s0
  return value >= numeric_limits<TOut>::lowest() &&
 8007dde:	edd7 7a01 	vldr	s15, [r7, #4]
 8007de2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dea:	d801      	bhi.n	8007df0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x40>
 8007dec:	2301      	movs	r3, #1
 8007dee:	e000      	b.n	8007df2 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x42>
 8007df0:	2300      	movs	r3, #0
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3708      	adds	r7, #8
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>:
  static constexpr T highest() {
 8007dfa:	b480      	push	{r7}
 8007dfc:	af00      	add	r7, sp, #0
    return T(-1);
 8007dfe:	f04f 33ff 	mov.w	r3, #4294967295
  }
 8007e02:	4618      	mov	r0, r3
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	ed87 0b00 	vstr	d0, [r7]
  return value >= numeric_limits<TOut>::lowest() &&
 8007e16:	f7ff ffc3 	bl	8007da0 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE6lowestEv>
 8007e1a:	ee07 0a90 	vmov	s15, r0
 8007e1e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007e22:	ed97 6b00 	vldr	d6, [r7]
 8007e26:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e2e:	db0e      	blt.n	8007e4e <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x42>
         value <= numeric_limits<TOut>::highest();
 8007e30:	f7ff ffe3 	bl	8007dfa <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 8007e34:	ee07 0a90 	vmov	s15, r0
 8007e38:	eeb8 7b67 	vcvt.f64.u32	d7, s15
  return value >= numeric_limits<TOut>::lowest() &&
 8007e3c:	ed97 6b00 	vldr	d6, [r7]
 8007e40:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e48:	d801      	bhi.n	8007e4e <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x42>
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e000      	b.n	8007e50 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x44>
 8007e4e:	2300      	movs	r3, #0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3708      	adds	r7, #8
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEE7getDataEv>:

  VariantData* getData() const {
 8007e58:	b590      	push	{r4, r7, lr}
 8007e5a:	b085      	sub	sp, #20
 8007e5c:	af02      	add	r7, sp, #8
 8007e5e:	6078      	str	r0, [r7, #4]
    return VariantData::getMember(
        VariantAttorney::getData(upstream_), key_,
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4618      	mov	r0, r3
 8007e66:	f000 fc2b 	bl	80086c0 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_12JsonDocumentEEEDTcldtfp_7getDataEERT_>
 8007e6a:	4604      	mov	r4, r0
        VariantAttorney::getResourceManager(upstream_));
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4618      	mov	r0, r3
 8007e72:	f7ff fc7d 	bl	8007770 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_12JsonDocumentEEEDTcldtfp_18getResourceManagerEERT_>
 8007e76:	4602      	mov	r2, r0
    return VariantData::getMember(
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	9200      	str	r2, [sp, #0]
 8007e7c:	3304      	adds	r3, #4
 8007e7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007e80:	4620      	mov	r0, r4
 8007e82:	f000 fc29 	bl	80086d8 <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE>
 8007e86:	4603      	mov	r3, r0
  }
 8007e88:	4618      	mov	r0, r3
 8007e8a:	370c      	adds	r7, #12
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd90      	pop	{r4, r7, pc}

08007e90 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b082      	sub	sp, #8
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(upstream_);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f7ff fc67 	bl	8007770 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_12JsonDocumentEEEDTcldtfp_18getResourceManagerEERT_>
 8007ea2:	4603      	mov	r3, r0
  }
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3708      	adds	r7, #8
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>:
  DeserializationError::Code skipSpacesAndComments() {
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b082      	sub	sp, #8
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
      switch (current()) {
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 f82f 	bl	8007f18 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d013      	beq.n	8007ee8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x3c>
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	db1d      	blt.n	8007f00 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x54>
 8007ec4:	2b20      	cmp	r3, #32
 8007ec6:	dc1b      	bgt.n	8007f00 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x54>
 8007ec8:	2b09      	cmp	r3, #9
 8007eca:	db19      	blt.n	8007f00 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x54>
 8007ecc:	3b09      	subs	r3, #9
 8007ece:	4a11      	ldr	r2, [pc, #68]	@ (8007f14 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x68>)
 8007ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8007ed4:	f003 0301 	and.w	r3, r3, #1
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	bf14      	ite	ne
 8007edc:	2301      	movne	r3, #1
 8007ede:	2300      	moveq	r3, #0
 8007ee0:	b2db      	uxtb	r3, r3
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d108      	bne.n	8007ef8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x4c>
 8007ee6:	e00b      	b.n	8007f00 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x54>
          return foundSomething_ ? DeserializationError::IncompleteInput
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	7b1b      	ldrb	r3, [r3, #12]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d001      	beq.n	8007ef4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x48>
 8007ef0:	2302      	movs	r3, #2
                                 : DeserializationError::EmptyInput;
 8007ef2:	e00b      	b.n	8007f0c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x60>
          return foundSomething_ ? DeserializationError::IncompleteInput
 8007ef4:	2301      	movs	r3, #1
                                 : DeserializationError::EmptyInput;
 8007ef6:	e009      	b.n	8007f0c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x60>
          move();
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 fc06 	bl	800870a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
          continue;
 8007efe:	e004      	b.n	8007f0a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x5e>
          foundSomething_ = true;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	731a      	strb	r2, [r3, #12]
          return DeserializationError::Ok;
 8007f06:	2300      	movs	r3, #0
 8007f08:	e000      	b.n	8007f0c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x60>
      switch (current()) {
 8007f0a:	e7d3      	b.n	8007eb4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x8>
  }
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3708      	adds	r7, #8
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	00800013 	.word	0x00800013

08007f18 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>:
  char current() {
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
    return latch_.current();
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	3310      	adds	r3, #16
 8007f24:	60fb      	str	r3, [r7, #12]

  FORCE_INLINE char current() {
    if (!loaded_) {
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	795b      	ldrb	r3, [r3, #5]
 8007f2a:	f083 0301 	eor.w	r3, r3, #1
 8007f2e:	b2db      	uxtb	r3, r3
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d002      	beq.n	8007f3a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv+0x22>
      load();
 8007f34:	68f8      	ldr	r0, [r7, #12]
 8007f36:	f000 ff1a 	bl	8008d6e <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE4loadEv>
    }
    return current_;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	791b      	ldrb	r3, [r3, #4]
  }
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3710      	adds	r7, #16
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}

08007f46 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code parseArray(
 8007f46:	b590      	push	{r4, r7, lr}
 8007f48:	b089      	sub	sp, #36	@ 0x24
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	60f8      	str	r0, [r7, #12]
 8007f4e:	60b9      	str	r1, [r7, #8]
 8007f50:	713a      	strb	r2, [r7, #4]
 8007f52:	703b      	strb	r3, [r7, #0]
    if (nestingLimit.reached())
 8007f54:	463b      	mov	r3, r7
 8007f56:	4618      	mov	r0, r3
 8007f58:	f7fd fa03 	bl	8005362 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d001      	beq.n	8007f66 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x20>
      return DeserializationError::TooDeep;
 8007f62:	2305      	movs	r3, #5
 8007f64:	e071      	b.n	800804a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
    move();
 8007f66:	68f8      	ldr	r0, [r7, #12]
 8007f68:	f000 fbcf 	bl	800870a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    err = skipSpacesAndComments();
 8007f6c:	68f8      	ldr	r0, [r7, #12]
 8007f6e:	f7ff ff9d 	bl	8007eac <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8007f72:	4603      	mov	r3, r0
 8007f74:	77fb      	strb	r3, [r7, #31]
    if (err)
 8007f76:	7ffb      	ldrb	r3, [r7, #31]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d001      	beq.n	8007f80 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x3a>
      return err;
 8007f7c:	7ffb      	ldrb	r3, [r7, #31]
 8007f7e:	e064      	b.n	800804a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
    if (eat(']'))
 8007f80:	215d      	movs	r1, #93	@ 0x5d
 8007f82:	68f8      	ldr	r0, [r7, #12]
 8007f84:	f000 fbce 	bl	8008724 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d001      	beq.n	8007f92 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x4c>
      return DeserializationError::Ok;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	e05b      	b.n	800804a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
    TFilter elementFilter = filter[0UL];
 8007f92:	2300      	movs	r3, #0
 8007f94:	617b      	str	r3, [r7, #20]
 8007f96:	f107 0214 	add.w	r2, r7, #20
 8007f9a:	1d3b      	adds	r3, r7, #4
 8007f9c:	4611      	mov	r1, r2
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f000 fbdd 	bl	800875e <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilterixImEES2_RKT_>
      if (elementFilter.allow()) {
 8007fa4:	f107 0310 	add.w	r3, r7, #16
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f7fd f97d 	bl	80052a8 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter5allowEv>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d01c      	beq.n	8007fee <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xa8>
        VariantData* value = array.addElement(resources_);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	699b      	ldr	r3, [r3, #24]
 8007fb8:	4619      	mov	r1, r3
 8007fba:	68b8      	ldr	r0, [r7, #8]
 8007fbc:	f7fc fd3f 	bl	8004a3e <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE>
 8007fc0:	61b8      	str	r0, [r7, #24]
        if (!value)
 8007fc2:	69bb      	ldr	r3, [r7, #24]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d101      	bne.n	8007fcc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x86>
          return DeserializationError::NoMemory;
 8007fc8:	2304      	movs	r3, #4
 8007fca:	e03e      	b.n	800804a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
        err = parseVariant(*value, elementFilter, nestingLimit.decrement());
 8007fcc:	463b      	mov	r3, r7
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7fd f9b4 	bl	800533c <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	4622      	mov	r2, r4
 8007fd8:	69b9      	ldr	r1, [r7, #24]
 8007fda:	68f8      	ldr	r0, [r7, #12]
 8007fdc:	f7ff fd26 	bl	8007a2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	77fb      	strb	r3, [r7, #31]
        if (err)
 8007fe4:	7ffb      	ldrb	r3, [r7, #31]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d011      	beq.n	800800e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xc8>
          return err;
 8007fea:	7ffb      	ldrb	r3, [r7, #31]
 8007fec:	e02d      	b.n	800804a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
        err = skipVariant(nestingLimit.decrement());
 8007fee:	463b      	mov	r3, r7
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f7fd f9a3 	bl	800533c <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	68f8      	ldr	r0, [r7, #12]
 8007ffc:	f000 fbbc 	bl	8008778 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 8008000:	4603      	mov	r3, r0
 8008002:	77fb      	strb	r3, [r7, #31]
        if (err)
 8008004:	7ffb      	ldrb	r3, [r7, #31]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d001      	beq.n	800800e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xc8>
          return err;
 800800a:	7ffb      	ldrb	r3, [r7, #31]
 800800c:	e01d      	b.n	800804a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
      err = skipSpacesAndComments();
 800800e:	68f8      	ldr	r0, [r7, #12]
 8008010:	f7ff ff4c 	bl	8007eac <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8008014:	4603      	mov	r3, r0
 8008016:	77fb      	strb	r3, [r7, #31]
      if (err)
 8008018:	7ffb      	ldrb	r3, [r7, #31]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d001      	beq.n	8008022 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xdc>
        return err;
 800801e:	7ffb      	ldrb	r3, [r7, #31]
 8008020:	e013      	b.n	800804a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
      if (eat(']'))
 8008022:	215d      	movs	r1, #93	@ 0x5d
 8008024:	68f8      	ldr	r0, [r7, #12]
 8008026:	f000 fb7d 	bl	8008724 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 800802a:	4603      	mov	r3, r0
 800802c:	2b00      	cmp	r3, #0
 800802e:	d001      	beq.n	8008034 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xee>
        return DeserializationError::Ok;
 8008030:	2300      	movs	r3, #0
 8008032:	e00a      	b.n	800804a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
      if (!eat(','))
 8008034:	212c      	movs	r1, #44	@ 0x2c
 8008036:	68f8      	ldr	r0, [r7, #12]
 8008038:	f000 fb74 	bl	8008724 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 800803c:	4603      	mov	r3, r0
 800803e:	f083 0301 	eor.w	r3, r3, #1
 8008042:	b2db      	uxtb	r3, r3
 8008044:	2b00      	cmp	r3, #0
 8008046:	d0ad      	beq.n	8007fa4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x5e>
        return DeserializationError::InvalidInput;
 8008048:	2303      	movs	r3, #3
  }
 800804a:	4618      	mov	r0, r3
 800804c:	3724      	adds	r7, #36	@ 0x24
 800804e:	46bd      	mov	sp, r7
 8008050:	bd90      	pop	{r4, r7, pc}

08008052 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code skipArray(
 8008052:	b580      	push	{r7, lr}
 8008054:	b084      	sub	sp, #16
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
 800805a:	7039      	strb	r1, [r7, #0]
    if (nestingLimit.reached())
 800805c:	463b      	mov	r3, r7
 800805e:	4618      	mov	r0, r3
 8008060:	f7fd f97f 	bl	8005362 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>
 8008064:	4603      	mov	r3, r0
 8008066:	2b00      	cmp	r3, #0
 8008068:	d001      	beq.n	800806e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x1c>
      return DeserializationError::TooDeep;
 800806a:	2305      	movs	r3, #5
 800806c:	e030      	b.n	80080d0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
    move();
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 fb4b 	bl	800870a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      err = skipVariant(nestingLimit.decrement());
 8008074:	463b      	mov	r3, r7
 8008076:	4618      	mov	r0, r3
 8008078:	f7fd f960 	bl	800533c <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 800807c:	4603      	mov	r3, r0
 800807e:	4619      	mov	r1, r3
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 fb79 	bl	8008778 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 8008086:	4603      	mov	r3, r0
 8008088:	73fb      	strb	r3, [r7, #15]
      if (err)
 800808a:	7bfb      	ldrb	r3, [r7, #15]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d001      	beq.n	8008094 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x42>
        return err;
 8008090:	7bfb      	ldrb	r3, [r7, #15]
 8008092:	e01d      	b.n	80080d0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
      err = skipSpacesAndComments();
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f7ff ff09 	bl	8007eac <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 800809a:	4603      	mov	r3, r0
 800809c:	73fb      	strb	r3, [r7, #15]
      if (err)
 800809e:	7bfb      	ldrb	r3, [r7, #15]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d001      	beq.n	80080a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x56>
        return err;
 80080a4:	7bfb      	ldrb	r3, [r7, #15]
 80080a6:	e013      	b.n	80080d0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
      if (eat(']'))
 80080a8:	215d      	movs	r1, #93	@ 0x5d
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 fb3a 	bl	8008724 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 80080b0:	4603      	mov	r3, r0
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d001      	beq.n	80080ba <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x68>
        return DeserializationError::Ok;
 80080b6:	2300      	movs	r3, #0
 80080b8:	e00a      	b.n	80080d0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
      if (!eat(','))
 80080ba:	212c      	movs	r1, #44	@ 0x2c
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 fb31 	bl	8008724 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 80080c2:	4603      	mov	r3, r0
 80080c4:	f083 0301 	eor.w	r3, r3, #1
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d0d2      	beq.n	8008074 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x22>
        return DeserializationError::InvalidInput;
 80080ce:	2303      	movs	r3, #3
  }
 80080d0:	4618      	mov	r0, r3
 80080d2:	3710      	adds	r7, #16
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code parseObject(
 80080d8:	b590      	push	{r4, r7, lr}
 80080da:	b091      	sub	sp, #68	@ 0x44
 80080dc:	af02      	add	r7, sp, #8
 80080de:	60f8      	str	r0, [r7, #12]
 80080e0:	60b9      	str	r1, [r7, #8]
 80080e2:	713a      	strb	r2, [r7, #4]
 80080e4:	703b      	strb	r3, [r7, #0]
    if (nestingLimit.reached())
 80080e6:	463b      	mov	r3, r7
 80080e8:	4618      	mov	r0, r3
 80080ea:	f7fd f93a 	bl	8005362 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>
 80080ee:	4603      	mov	r3, r0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d001      	beq.n	80080f8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x20>
      return DeserializationError::TooDeep;
 80080f4:	2305      	movs	r3, #5
 80080f6:	e0d7      	b.n	80082a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
    move();
 80080f8:	68f8      	ldr	r0, [r7, #12]
 80080fa:	f000 fb06 	bl	800870a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    err = skipSpacesAndComments();
 80080fe:	68f8      	ldr	r0, [r7, #12]
 8008100:	f7ff fed4 	bl	8007eac <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8008104:	4603      	mov	r3, r0
 8008106:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (err)
 800810a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800810e:	2b00      	cmp	r3, #0
 8008110:	d002      	beq.n	8008118 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x40>
      return err;
 8008112:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008116:	e0c7      	b.n	80082a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
    if (eat('}'))
 8008118:	217d      	movs	r1, #125	@ 0x7d
 800811a:	68f8      	ldr	r0, [r7, #12]
 800811c:	f000 fb02 	bl	8008724 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8008120:	4603      	mov	r3, r0
 8008122:	2b00      	cmp	r3, #0
 8008124:	d001      	beq.n	800812a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x52>
      return DeserializationError::Ok;
 8008126:	2300      	movs	r3, #0
 8008128:	e0be      	b.n	80082a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      err = parseKey();
 800812a:	68f8      	ldr	r0, [r7, #12]
 800812c:	f000 fbba 	bl	80088a4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE8parseKeyEv>
 8008130:	4603      	mov	r3, r0
 8008132:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      if (err)
 8008136:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800813a:	2b00      	cmp	r3, #0
 800813c:	d002      	beq.n	8008144 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x6c>
        return err;
 800813e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008142:	e0b1      	b.n	80082a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      err = skipSpacesAndComments();
 8008144:	68f8      	ldr	r0, [r7, #12]
 8008146:	f7ff feb1 	bl	8007eac <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 800814a:	4603      	mov	r3, r0
 800814c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      if (err)
 8008150:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008154:	2b00      	cmp	r3, #0
 8008156:	d002      	beq.n	800815e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x86>
        return err;
 8008158:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800815c:	e0a4      	b.n	80082a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      if (!eat(':'))
 800815e:	213a      	movs	r1, #58	@ 0x3a
 8008160:	68f8      	ldr	r0, [r7, #12]
 8008162:	f000 fadf 	bl	8008724 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8008166:	4603      	mov	r3, r0
 8008168:	f083 0301 	eor.w	r3, r3, #1
 800816c:	b2db      	uxtb	r3, r3
 800816e:	2b00      	cmp	r3, #0
 8008170:	d001      	beq.n	8008176 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x9e>
        return DeserializationError::InvalidInput;
 8008172:	2303      	movs	r3, #3
 8008174:	e098      	b.n	80082a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      JsonString key = stringBuilder_.str();
 8008176:	68fa      	ldr	r2, [r7, #12]
 8008178:	f107 0314 	add.w	r3, r7, #20
 800817c:	4611      	mov	r1, r2
 800817e:	4618      	mov	r0, r3
 8008180:	f7fc ff92 	bl	80050a8 <_ZNK11ArduinoJson8V730HB226detail13StringBuilder3strEv>
      TFilter memberFilter = filter[key];
 8008184:	f107 0214 	add.w	r2, r7, #20
 8008188:	1d3b      	adds	r3, r7, #4
 800818a:	4611      	mov	r1, r2
 800818c:	4618      	mov	r0, r3
 800818e:	f000 fba9 	bl	80088e4 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilterixINS0_10JsonStringEEES2_RKT_>
      if (memberFilter.allow()) {
 8008192:	f107 0310 	add.w	r3, r7, #16
 8008196:	4618      	mov	r0, r3
 8008198:	f7fd f886 	bl	80052a8 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter5allowEv>
 800819c:	4603      	mov	r3, r0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d040      	beq.n	8008224 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x14c>
        auto member = object.getMember(adaptString(key), resources_);
 80081a2:	f107 0320 	add.w	r3, r7, #32
 80081a6:	f107 0214 	add.w	r2, r7, #20
 80081aa:	4611      	mov	r1, r2
 80081ac:	4618      	mov	r0, r3
 80081ae:	f7fe f9c0 	bl	8006532 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRNS0_10JsonStringEEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES8_NS1_9remove_cvINS1_16remove_referenceIS8_E4typeEE4typeEE4typeEvE13AdaptedStringEOS8_>
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	699b      	ldr	r3, [r3, #24]
 80081b6:	9300      	str	r3, [sp, #0]
 80081b8:	f107 0320 	add.w	r3, r7, #32
 80081bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80081be:	68b8      	ldr	r0, [r7, #8]
 80081c0:	f7fe ff21 	bl	8007006 <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE>
 80081c4:	6378      	str	r0, [r7, #52]	@ 0x34
        if (!member) {
 80081c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d111      	bne.n	80081f0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x118>
          auto savedKey = stringBuilder_.save();
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	4618      	mov	r0, r3
 80081d0:	f7fc fee6 	bl	8004fa0 <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv>
 80081d4:	62f8      	str	r0, [r7, #44]	@ 0x2c
          member = object.addMember(savedKey, resources_);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	699b      	ldr	r3, [r3, #24]
 80081da:	461a      	mov	r2, r3
 80081dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80081de:	68b8      	ldr	r0, [r7, #8]
 80081e0:	f000 fb8c 	bl	80088fc <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>
 80081e4:	6378      	str	r0, [r7, #52]	@ 0x34
          if (!member)
 80081e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d107      	bne.n	80081fc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x124>
            return DeserializationError::NoMemory;
 80081ec:	2304      	movs	r3, #4
 80081ee:	e05b      	b.n	80082a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
          member->clear(resources_);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	699b      	ldr	r3, [r3, #24]
 80081f4:	4619      	mov	r1, r3
 80081f6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80081f8:	f7fc ffd6 	bl	80051a8 <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
        err = parseVariant(*member, memberFilter, nestingLimit.decrement());
 80081fc:	463b      	mov	r3, r7
 80081fe:	4618      	mov	r0, r3
 8008200:	f7fd f89c 	bl	800533c <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 8008204:	4603      	mov	r3, r0
 8008206:	4622      	mov	r2, r4
 8008208:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800820a:	68f8      	ldr	r0, [r7, #12]
 800820c:	f7ff fc0e 	bl	8007a2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 8008210:	4603      	mov	r3, r0
 8008212:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (err)
 8008216:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800821a:	2b00      	cmp	r3, #0
 800821c:	d015      	beq.n	800824a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x172>
          return err;
 800821e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008222:	e041      	b.n	80082a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
        err = skipVariant(nestingLimit.decrement());
 8008224:	463b      	mov	r3, r7
 8008226:	4618      	mov	r0, r3
 8008228:	f7fd f888 	bl	800533c <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 800822c:	4603      	mov	r3, r0
 800822e:	4619      	mov	r1, r3
 8008230:	68f8      	ldr	r0, [r7, #12]
 8008232:	f000 faa1 	bl	8008778 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 8008236:	4603      	mov	r3, r0
 8008238:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (err)
 800823c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008240:	2b00      	cmp	r3, #0
 8008242:	d002      	beq.n	800824a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x172>
          return err;
 8008244:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008248:	e02e      	b.n	80082a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      err = skipSpacesAndComments();
 800824a:	68f8      	ldr	r0, [r7, #12]
 800824c:	f7ff fe2e 	bl	8007eac <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8008250:	4603      	mov	r3, r0
 8008252:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      if (err)
 8008256:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800825a:	2b00      	cmp	r3, #0
 800825c:	d002      	beq.n	8008264 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x18c>
        return err;
 800825e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008262:	e021      	b.n	80082a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      if (eat('}'))
 8008264:	217d      	movs	r1, #125	@ 0x7d
 8008266:	68f8      	ldr	r0, [r7, #12]
 8008268:	f000 fa5c 	bl	8008724 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 800826c:	4603      	mov	r3, r0
 800826e:	2b00      	cmp	r3, #0
 8008270:	d001      	beq.n	8008276 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x19e>
        return DeserializationError::Ok;
 8008272:	2300      	movs	r3, #0
 8008274:	e018      	b.n	80082a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      if (!eat(','))
 8008276:	212c      	movs	r1, #44	@ 0x2c
 8008278:	68f8      	ldr	r0, [r7, #12]
 800827a:	f000 fa53 	bl	8008724 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 800827e:	4603      	mov	r3, r0
 8008280:	f083 0301 	eor.w	r3, r3, #1
 8008284:	b2db      	uxtb	r3, r3
 8008286:	2b00      	cmp	r3, #0
 8008288:	d001      	beq.n	800828e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1b6>
        return DeserializationError::InvalidInput;
 800828a:	2303      	movs	r3, #3
 800828c:	e00c      	b.n	80082a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      err = skipSpacesAndComments();
 800828e:	68f8      	ldr	r0, [r7, #12]
 8008290:	f7ff fe0c 	bl	8007eac <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8008294:	4603      	mov	r3, r0
 8008296:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      if (err)
 800829a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800829e:	2b00      	cmp	r3, #0
 80082a0:	f43f af43 	beq.w	800812a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x52>
        return err;
 80082a4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
  }
 80082a8:	4618      	mov	r0, r3
 80082aa:	373c      	adds	r7, #60	@ 0x3c
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd90      	pop	{r4, r7, pc}

080082b0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code skipObject(
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b084      	sub	sp, #16
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	7039      	strb	r1, [r7, #0]
    if (nestingLimit.reached())
 80082ba:	463b      	mov	r3, r7
 80082bc:	4618      	mov	r0, r3
 80082be:	f7fd f850 	bl	8005362 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>
 80082c2:	4603      	mov	r3, r0
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d001      	beq.n	80082cc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x1c>
      return DeserializationError::TooDeep;
 80082c8:	2305      	movs	r3, #5
 80082ca:	e06d      	b.n	80083a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
    move();
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f000 fa1c 	bl	800870a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    err = skipSpacesAndComments();
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f7ff fdea 	bl	8007eac <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 80082d8:	4603      	mov	r3, r0
 80082da:	73fb      	strb	r3, [r7, #15]
    if (err)
 80082dc:	7bfb      	ldrb	r3, [r7, #15]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d001      	beq.n	80082e6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x36>
      return err;
 80082e2:	7bfb      	ldrb	r3, [r7, #15]
 80082e4:	e060      	b.n	80083a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
    if (eat('}'))
 80082e6:	217d      	movs	r1, #125	@ 0x7d
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 fa1b 	bl	8008724 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 80082ee:	4603      	mov	r3, r0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d001      	beq.n	80082f8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x48>
      return DeserializationError::Ok;
 80082f4:	2300      	movs	r3, #0
 80082f6:	e057      	b.n	80083a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipKey();
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 fb54 	bl	80089a6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7skipKeyEv>
 80082fe:	4603      	mov	r3, r0
 8008300:	73fb      	strb	r3, [r7, #15]
      if (err)
 8008302:	7bfb      	ldrb	r3, [r7, #15]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d001      	beq.n	800830c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x5c>
        return err;
 8008308:	7bfb      	ldrb	r3, [r7, #15]
 800830a:	e04d      	b.n	80083a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipSpacesAndComments();
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f7ff fdcd 	bl	8007eac <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8008312:	4603      	mov	r3, r0
 8008314:	73fb      	strb	r3, [r7, #15]
      if (err)
 8008316:	7bfb      	ldrb	r3, [r7, #15]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d001      	beq.n	8008320 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x70>
        return err;
 800831c:	7bfb      	ldrb	r3, [r7, #15]
 800831e:	e043      	b.n	80083a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      if (!eat(':'))
 8008320:	213a      	movs	r1, #58	@ 0x3a
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 f9fe 	bl	8008724 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8008328:	4603      	mov	r3, r0
 800832a:	f083 0301 	eor.w	r3, r3, #1
 800832e:	b2db      	uxtb	r3, r3
 8008330:	2b00      	cmp	r3, #0
 8008332:	d001      	beq.n	8008338 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x88>
        return DeserializationError::InvalidInput;
 8008334:	2303      	movs	r3, #3
 8008336:	e037      	b.n	80083a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipVariant(nestingLimit.decrement());
 8008338:	463b      	mov	r3, r7
 800833a:	4618      	mov	r0, r3
 800833c:	f7fc fffe 	bl	800533c <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 8008340:	4603      	mov	r3, r0
 8008342:	4619      	mov	r1, r3
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 fa17 	bl	8008778 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 800834a:	4603      	mov	r3, r0
 800834c:	73fb      	strb	r3, [r7, #15]
      if (err)
 800834e:	7bfb      	ldrb	r3, [r7, #15]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d001      	beq.n	8008358 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xa8>
        return err;
 8008354:	7bfb      	ldrb	r3, [r7, #15]
 8008356:	e027      	b.n	80083a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipSpacesAndComments();
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f7ff fda7 	bl	8007eac <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 800835e:	4603      	mov	r3, r0
 8008360:	73fb      	strb	r3, [r7, #15]
      if (err)
 8008362:	7bfb      	ldrb	r3, [r7, #15]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d001      	beq.n	800836c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xbc>
        return err;
 8008368:	7bfb      	ldrb	r3, [r7, #15]
 800836a:	e01d      	b.n	80083a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      if (eat('}'))
 800836c:	217d      	movs	r1, #125	@ 0x7d
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 f9d8 	bl	8008724 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8008374:	4603      	mov	r3, r0
 8008376:	2b00      	cmp	r3, #0
 8008378:	d001      	beq.n	800837e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xce>
        return DeserializationError::Ok;
 800837a:	2300      	movs	r3, #0
 800837c:	e014      	b.n	80083a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      if (!eat(','))
 800837e:	212c      	movs	r1, #44	@ 0x2c
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f000 f9cf 	bl	8008724 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8008386:	4603      	mov	r3, r0
 8008388:	f083 0301 	eor.w	r3, r3, #1
 800838c:	b2db      	uxtb	r3, r3
 800838e:	2b00      	cmp	r3, #0
 8008390:	d001      	beq.n	8008396 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xe6>
        return DeserializationError::InvalidInput;
 8008392:	2303      	movs	r3, #3
 8008394:	e008      	b.n	80083a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipSpacesAndComments();
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f7ff fd88 	bl	8007eac <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 800839c:	4603      	mov	r3, r0
 800839e:	73fb      	strb	r3, [r7, #15]
      if (err)
 80083a0:	7bfb      	ldrb	r3, [r7, #15]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d0a8      	beq.n	80082f8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x48>
        return err;
 80083a6:	7bfb      	ldrb	r3, [r7, #15]
  }
 80083a8:	4618      	mov	r0, r3
 80083aa:	3710      	adds	r7, #16
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16parseStringValueERNS1_11VariantDataE>:
  DeserializationError::Code parseStringValue(VariantData& variant) {
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	6039      	str	r1, [r7, #0]
    stringBuilder_.startString();
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	4618      	mov	r0, r3
 80083be:	f7fc fdd7 	bl	8004f70 <_ZN11ArduinoJson8V730HB226detail13StringBuilder11startStringEv>
    err = parseQuotedString();
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 fb0b 	bl	80089de <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv>
 80083c8:	4603      	mov	r3, r0
 80083ca:	73fb      	strb	r3, [r7, #15]
    if (err)
 80083cc:	7bfb      	ldrb	r3, [r7, #15]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d001      	beq.n	80083d6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16parseStringValueERNS1_11VariantDataE+0x26>
      return err;
 80083d2:	7bfb      	ldrb	r3, [r7, #15]
 80083d4:	e009      	b.n	80083ea <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16parseStringValueERNS1_11VariantDataE+0x3a>
    variant.setOwnedString(stringBuilder_.save());
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	4618      	mov	r0, r3
 80083da:	f7fc fde1 	bl	8004fa0 <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv>
 80083de:	4603      	mov	r3, r0
 80083e0:	4619      	mov	r1, r3
 80083e2:	6838      	ldr	r0, [r7, #0]
 80083e4:	f7fc f83f 	bl	8004466 <_ZN11ArduinoJson8V730HB226detail11VariantData14setOwnedStringEPNS1_10StringNodeE>
    return DeserializationError::Ok;
 80083e8:	2300      	movs	r3, #0
  }
 80083ea:	4618      	mov	r0, r3
 80083ec:	3710      	adds	r7, #16
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}

080083f2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv>:
  DeserializationError::Code skipQuotedString() {
 80083f2:	b580      	push	{r7, lr}
 80083f4:	b084      	sub	sp, #16
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
    const char stopChar = current();
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f7ff fd8c 	bl	8007f18 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8008400:	4603      	mov	r3, r0
 8008402:	73fb      	strb	r3, [r7, #15]
    move();
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 f980 	bl	800870a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      char c = current();
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f7ff fd84 	bl	8007f18 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8008410:	4603      	mov	r3, r0
 8008412:	73bb      	strb	r3, [r7, #14]
      move();
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 f978 	bl	800870a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      if (c == stopChar)
 800841a:	7bba      	ldrb	r2, [r7, #14]
 800841c:	7bfb      	ldrb	r3, [r7, #15]
 800841e:	429a      	cmp	r2, r3
 8008420:	d016      	beq.n	8008450 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x5e>
      if (c == '\0')
 8008422:	7bbb      	ldrb	r3, [r7, #14]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d101      	bne.n	800842c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x3a>
        return DeserializationError::IncompleteInput;
 8008428:	2302      	movs	r3, #2
 800842a:	e013      	b.n	8008454 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x62>
      if (c == '\\') {
 800842c:	7bbb      	ldrb	r3, [r7, #14]
 800842e:	2b5c      	cmp	r3, #92	@ 0x5c
 8008430:	d1eb      	bne.n	800840a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x18>
        if (current() != '\0')
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f7ff fd70 	bl	8007f18 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8008438:	4603      	mov	r3, r0
 800843a:	2b00      	cmp	r3, #0
 800843c:	bf14      	ite	ne
 800843e:	2301      	movne	r3, #1
 8008440:	2300      	moveq	r3, #0
 8008442:	b2db      	uxtb	r3, r3
 8008444:	2b00      	cmp	r3, #0
 8008446:	d0e0      	beq.n	800840a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x18>
          move();
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 f95e 	bl	800870a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    for (;;) {
 800844e:	e7dc      	b.n	800840a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x18>
        break;
 8008450:	bf00      	nop
    return DeserializationError::Ok;
 8008452:	2300      	movs	r3, #0
  }
 8008454:	4618      	mov	r0, r3
 8008456:	3710      	adds	r7, #16
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>:
  DeserializationError::Code skipKeyword(const char* s) {
 800845c:	b580      	push	{r7, lr}
 800845e:	b084      	sub	sp, #16
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	6039      	str	r1, [r7, #0]
    while (*s) {
 8008466:	e016      	b.n	8008496 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x3a>
      char c = current();
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f7ff fd55 	bl	8007f18 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 800846e:	4603      	mov	r3, r0
 8008470:	73fb      	strb	r3, [r7, #15]
      if (c == '\0')
 8008472:	7bfb      	ldrb	r3, [r7, #15]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d101      	bne.n	800847c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x20>
        return DeserializationError::IncompleteInput;
 8008478:	2302      	movs	r3, #2
 800847a:	e011      	b.n	80084a0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x44>
      if (*s != c)
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	7bfa      	ldrb	r2, [r7, #15]
 8008482:	429a      	cmp	r2, r3
 8008484:	d001      	beq.n	800848a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x2e>
        return DeserializationError::InvalidInput;
 8008486:	2303      	movs	r3, #3
 8008488:	e00a      	b.n	80084a0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x44>
      ++s;
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	3301      	adds	r3, #1
 800848e:	603b      	str	r3, [r7, #0]
      move();
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 f93a 	bl	800870a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    while (*s) {
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d1e4      	bne.n	8008468 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0xc>
    return DeserializationError::Ok;
 800849e:	2300      	movs	r3, #0
  }
 80084a0:	4618      	mov	r0, r3
 80084a2:	3710      	adds	r7, #16
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE>:
  DeserializationError::Code parseNumericValue(VariantData& result) {
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b08a      	sub	sp, #40	@ 0x28
 80084ac:	af02      	add	r7, sp, #8
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	6039      	str	r1, [r7, #0]
    uint8_t n = 0;
 80084b2:	2300      	movs	r3, #0
 80084b4:	77fb      	strb	r3, [r7, #31]
    char c = current();
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f7ff fd2e 	bl	8007f18 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 80084bc:	4603      	mov	r3, r0
 80084be:	77bb      	strb	r3, [r7, #30]
    while (canBeInNumber(c) && n < 63) {
 80084c0:	e00f      	b.n	80084e2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x3a>
      move();
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 f921 	bl	800870a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      buffer_[n++] = c;
 80084c8:	7fba      	ldrb	r2, [r7, #30]
 80084ca:	7ffb      	ldrb	r3, [r7, #31]
 80084cc:	1c59      	adds	r1, r3, #1
 80084ce:	77f9      	strb	r1, [r7, #31]
 80084d0:	4619      	mov	r1, r3
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	440b      	add	r3, r1
 80084d6:	771a      	strb	r2, [r3, #28]
      c = current();
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f7ff fd1d 	bl	8007f18 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 80084de:	4603      	mov	r3, r0
 80084e0:	77bb      	strb	r3, [r7, #30]
    while (canBeInNumber(c) && n < 63) {
 80084e2:	7fbb      	ldrb	r3, [r7, #30]
 80084e4:	4618      	mov	r0, r3
 80084e6:	f000 fafb 	bl	8008ae0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc>
 80084ea:	4603      	mov	r3, r0
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d004      	beq.n	80084fa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x52>
 80084f0:	7ffb      	ldrb	r3, [r7, #31]
 80084f2:	2b3e      	cmp	r3, #62	@ 0x3e
 80084f4:	d801      	bhi.n	80084fa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x52>
 80084f6:	2301      	movs	r3, #1
 80084f8:	e000      	b.n	80084fc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x54>
 80084fa:	2300      	movs	r3, #0
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d1e0      	bne.n	80084c2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x1a>
    buffer_[n] = 0;
 8008500:	7ffb      	ldrb	r3, [r7, #31]
 8008502:	687a      	ldr	r2, [r7, #4]
 8008504:	4413      	add	r3, r2
 8008506:	2200      	movs	r2, #0
 8008508:	771a      	strb	r2, [r3, #28]
    auto number = parseNumber(buffer_);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f103 021c 	add.w	r2, r3, #28
 8008510:	f107 0308 	add.w	r3, r7, #8
 8008514:	4611      	mov	r1, r2
 8008516:	4618      	mov	r0, r3
 8008518:	f7fd f8e0 	bl	80056dc <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>
    switch (number.type()) {
 800851c:	f107 0308 	add.w	r3, r7, #8
 8008520:	4618      	mov	r0, r3
 8008522:	f7fd f894 	bl	800564e <_ZNK11ArduinoJson8V730HB226detail6Number4typeEv>
 8008526:	4603      	mov	r3, r0
 8008528:	3b01      	subs	r3, #1
 800852a:	2b03      	cmp	r3, #3
 800852c:	d85e      	bhi.n	80085ec <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x144>
 800852e:	a201      	add	r2, pc, #4	@ (adr r2, 8008534 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x8c>)
 8008530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008534:	08008595 	.word	0x08008595
 8008538:	0800856d 	.word	0x0800856d
 800853c:	08008545 	.word	0x08008545
 8008540:	080085c1 	.word	0x080085c1
        if (result.setInteger(number.asUnsignedInteger(), resources_))
 8008544:	f107 0308 	add.w	r3, r7, #8
 8008548:	4618      	mov	r0, r3
 800854a:	f7fd f89a 	bl	8005682 <_ZNK11ArduinoJson8V730HB226detail6Number17asUnsignedIntegerEv>
 800854e:	4602      	mov	r2, r0
 8008550:	460b      	mov	r3, r1
 8008552:	6879      	ldr	r1, [r7, #4]
 8008554:	6989      	ldr	r1, [r1, #24]
 8008556:	9100      	str	r1, [sp, #0]
 8008558:	6838      	ldr	r0, [r7, #0]
 800855a:	f000 fae5 	bl	8008b28 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>
 800855e:	4603      	mov	r3, r0
 8008560:	2b00      	cmp	r3, #0
 8008562:	d001      	beq.n	8008568 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0xc0>
          return DeserializationError::Ok;
 8008564:	2300      	movs	r3, #0
 8008566:	e042      	b.n	80085ee <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
          return DeserializationError::NoMemory;
 8008568:	2304      	movs	r3, #4
 800856a:	e040      	b.n	80085ee <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
        if (result.setInteger(number.asSignedInteger(), resources_))
 800856c:	f107 0308 	add.w	r3, r7, #8
 8008570:	4618      	mov	r0, r3
 8008572:	f7fd f878 	bl	8005666 <_ZNK11ArduinoJson8V730HB226detail6Number15asSignedIntegerEv>
 8008576:	4602      	mov	r2, r0
 8008578:	460b      	mov	r3, r1
 800857a:	6879      	ldr	r1, [r7, #4]
 800857c:	6989      	ldr	r1, [r1, #24]
 800857e:	9100      	str	r1, [sp, #0]
 8008580:	6838      	ldr	r0, [r7, #0]
 8008582:	f000 fb13 	bl	8008bac <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>
 8008586:	4603      	mov	r3, r0
 8008588:	2b00      	cmp	r3, #0
 800858a:	d001      	beq.n	8008590 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0xe8>
          return DeserializationError::Ok;
 800858c:	2300      	movs	r3, #0
 800858e:	e02e      	b.n	80085ee <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
          return DeserializationError::NoMemory;
 8008590:	2304      	movs	r3, #4
 8008592:	e02c      	b.n	80085ee <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
        if (result.setFloat(number.asFloat(), resources_))
 8008594:	f107 0308 	add.w	r3, r7, #8
 8008598:	4618      	mov	r0, r3
 800859a:	f7fd f880 	bl	800569e <_ZNK11ArduinoJson8V730HB226detail6Number7asFloatEv>
 800859e:	eef0 7a40 	vmov.f32	s15, s0
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	699b      	ldr	r3, [r3, #24]
 80085a6:	4619      	mov	r1, r3
 80085a8:	eeb0 0a67 	vmov.f32	s0, s15
 80085ac:	6838      	ldr	r0, [r7, #0]
 80085ae:	f000 fb3f 	bl	8008c30 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIfEENS1_9enable_ifIXeqstT_Li4EEbE4typeES5_PNS1_15ResourceManagerE>
 80085b2:	4603      	mov	r3, r0
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d001      	beq.n	80085bc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x114>
          return DeserializationError::Ok;
 80085b8:	2300      	movs	r3, #0
 80085ba:	e018      	b.n	80085ee <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
          return DeserializationError::NoMemory;
 80085bc:	2304      	movs	r3, #4
 80085be:	e016      	b.n	80085ee <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
        if (result.setFloat(number.asDouble(), resources_))
 80085c0:	f107 0308 	add.w	r3, r7, #8
 80085c4:	4618      	mov	r0, r3
 80085c6:	f7fd f879 	bl	80056bc <_ZNK11ArduinoJson8V730HB226detail6Number8asDoubleEv>
 80085ca:	eeb0 7b40 	vmov.f64	d7, d0
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	699b      	ldr	r3, [r3, #24]
 80085d2:	4619      	mov	r1, r3
 80085d4:	eeb0 0b47 	vmov.f64	d0, d7
 80085d8:	6838      	ldr	r0, [r7, #0]
 80085da:	f000 fb3d 	bl	8008c58 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE>
 80085de:	4603      	mov	r3, r0
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d001      	beq.n	80085e8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x140>
          return DeserializationError::Ok;
 80085e4:	2300      	movs	r3, #0
 80085e6:	e002      	b.n	80085ee <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
          return DeserializationError::NoMemory;
 80085e8:	2304      	movs	r3, #4
 80085ea:	e000      	b.n	80085ee <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
        return DeserializationError::InvalidInput;
 80085ec:	2303      	movs	r3, #3
  }
 80085ee:	4618      	mov	r0, r3
 80085f0:	3720      	adds	r7, #32
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop

080085f8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv>:
  DeserializationError::Code skipNumericValue() {
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b084      	sub	sp, #16
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
    char c = current();
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f7ff fc89 	bl	8007f18 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8008606:	4603      	mov	r3, r0
 8008608:	73fb      	strb	r3, [r7, #15]
    while (canBeInNumber(c)) {
 800860a:	e007      	b.n	800861c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv+0x24>
      move();
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 f87c 	bl	800870a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      c = current();
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f7ff fc80 	bl	8007f18 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8008618:	4603      	mov	r3, r0
 800861a:	73fb      	strb	r3, [r7, #15]
    while (canBeInNumber(c)) {
 800861c:	7bfb      	ldrb	r3, [r7, #15]
 800861e:	4618      	mov	r0, r3
 8008620:	f000 fa5e 	bl	8008ae0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc>
 8008624:	4603      	mov	r3, r0
 8008626:	2b00      	cmp	r3, #0
 8008628:	d1f0      	bne.n	800860c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv+0x14>
    return DeserializationError::Ok;
 800862a:	2300      	movs	r3, #0
  }
 800862c:	4618      	mov	r0, r3
 800862e:	3710      	adds	r7, #16
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_10JsonObjectEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8008634:	b580      	push	{r7, lr}
 8008636:	b082      	sub	sp, #8
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f7fc f990 	bl	8004962 <_ZNK11ArduinoJson8V730HB2210JsonObject18getResourceManagerEv>
 8008642:	4603      	mov	r3, r0
  }
 8008644:	4618      	mov	r0, r3
 8008646:	3708      	adds	r7, #8
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE5forgeEm>:
  static T forge(uint32_t bits) {
 800864c:	b580      	push	{r7, lr}
 800864e:	b082      	sub	sp, #8
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
    return alias_cast<T>(bits);
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 fb4c 	bl	8008cf2 <_ZN11ArduinoJson8V730HB226detail10alias_castIfmEET_T0_>
 800865a:	eef0 7a40 	vmov.f32	s15, s0
  }
 800865e:	eeb0 0a67 	vmov.f32	s0, s15
 8008662:	3708      	adds	r7, #8
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}

08008668 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEE7getDataEv>:
  VariantData* getData() const {
 8008668:	b590      	push	{r4, r7, lr}
 800866a:	b085      	sub	sp, #20
 800866c:	af02      	add	r7, sp, #8
 800866e:	6078      	str	r0, [r7, #4]
        VariantAttorney::getData(upstream_), key_,
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	3304      	adds	r3, #4
 8008674:	4618      	mov	r0, r3
 8008676:	f000 fb4c 	bl	8008d12 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_10JsonObjectEEEDTcldtfp_7getDataEERT_>
 800867a:	4604      	mov	r4, r0
        VariantAttorney::getResourceManager(upstream_));
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	3304      	adds	r3, #4
 8008680:	4618      	mov	r0, r3
 8008682:	f7ff ffd7 	bl	8008634 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_10JsonObjectEEEDTcldtfp_18getResourceManagerEERT_>
 8008686:	4602      	mov	r2, r0
    return VariantData::getMember(
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	9200      	str	r2, [sp, #0]
 800868c:	330c      	adds	r3, #12
 800868e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008690:	4620      	mov	r0, r4
 8008692:	f000 f821 	bl	80086d8 <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE>
 8008696:	4603      	mov	r3, r0
  }
 8008698:	4618      	mov	r0, r3
 800869a:	370c      	adds	r7, #12
 800869c:	46bd      	mov	sp, r7
 800869e:	bd90      	pop	{r4, r7, pc}

080086a0 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forImEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_11is_unsignedIS7_EE5valueeqstS7_Li4EEjE4typeE>:
  static T highest_for(
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b082      	sub	sp, #8
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
    return forge(0x4F7FFFFF);  // 4.29496704E9
 80086a8:	4804      	ldr	r0, [pc, #16]	@ (80086bc <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forImEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_11is_unsignedIS7_EE5valueeqstS7_Li4EEjE4typeE+0x1c>)
 80086aa:	f7ff ffcf 	bl	800864c <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE5forgeEm>
 80086ae:	eef0 7a40 	vmov.f32	s15, s0
  }
 80086b2:	eeb0 0a67 	vmov.f32	s0, s15
 80086b6:	3708      	adds	r7, #8
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	4f7fffff 	.word	0x4f7fffff

080086c0 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_12JsonDocumentEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
    return client.getData();
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f7fc f9a0 	bl	8004a0e <_ZN11ArduinoJson8V730HB2212JsonDocument7getDataEv>
 80086ce:	4603      	mov	r3, r0
  }
 80086d0:	4618      	mov	r0, r3
 80086d2:	3708      	adds	r7, #8
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE>:
  static VariantData* getMember(const VariantData* var, TAdaptedString key,
 80086d8:	b580      	push	{r7, lr}
 80086da:	b086      	sub	sp, #24
 80086dc:	af02      	add	r7, sp, #8
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	4638      	mov	r0, r7
 80086e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (!var)
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d101      	bne.n	80086f0 <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE+0x18>
      return 0;
 80086ec:	2300      	movs	r3, #0
 80086ee:	e008      	b.n	8008702 <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE+0x2a>
    return var->getMember(key, resources);
 80086f0:	68f8      	ldr	r0, [r7, #12]
 80086f2:	69bb      	ldr	r3, [r7, #24]
 80086f4:	9300      	str	r3, [sp, #0]
 80086f6:	463b      	mov	r3, r7
 80086f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80086fa:	f000 fb16 	bl	8008d2a <_ZNK11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_T_PKNS1_15ResourceManagerE>
 80086fe:	4603      	mov	r3, r0
 8008700:	bf00      	nop
  }
 8008702:	4618      	mov	r0, r3
 8008704:	3710      	adds	r7, #16
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}

0800870a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>:
  void move() {
 800870a:	b580      	push	{r7, lr}
 800870c:	b082      	sub	sp, #8
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
    latch_.clear();
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	3310      	adds	r3, #16
 8008716:	4618      	mov	r0, r3
 8008718:	f000 fb1c 	bl	8008d54 <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE5clearEv>
  }
 800871c:	bf00      	nop
 800871e:	3708      	adds	r7, #8
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>:
  bool eat(char charToSkip) {
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	460b      	mov	r3, r1
 800872e:	70fb      	strb	r3, [r7, #3]
    if (current() != charToSkip)
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f7ff fbf1 	bl	8007f18 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8008736:	4603      	mov	r3, r0
 8008738:	461a      	mov	r2, r3
 800873a:	78fb      	ldrb	r3, [r7, #3]
 800873c:	4293      	cmp	r3, r2
 800873e:	bf14      	ite	ne
 8008740:	2301      	movne	r3, #1
 8008742:	2300      	moveq	r3, #0
 8008744:	b2db      	uxtb	r3, r3
 8008746:	2b00      	cmp	r3, #0
 8008748:	d001      	beq.n	800874e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc+0x2a>
      return false;
 800874a:	2300      	movs	r3, #0
 800874c:	e003      	b.n	8008756 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc+0x32>
    move();
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f7ff ffdb 	bl	800870a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    return true;
 8008754:	2301      	movs	r3, #1
  }
 8008756:	4618      	mov	r0, r3
 8008758:	3708      	adds	r7, #8
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}

0800875e <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilterixImEES2_RKT_>:

  template <typename TKey>
  AllowAllFilter operator[](const TKey&) const {
 800875e:	b480      	push	{r7}
 8008760:	b083      	sub	sp, #12
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
 8008766:	6039      	str	r1, [r7, #0]
    return AllowAllFilter();
 8008768:	bf00      	nop
  }
 800876a:	4618      	mov	r0, r3
 800876c:	370c      	adds	r7, #12
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr
	...

08008778 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code skipVariant(
 8008778:	b580      	push	{r7, lr}
 800877a:	b084      	sub	sp, #16
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	7039      	strb	r1, [r7, #0]
    err = skipSpacesAndComments();
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f7ff fb92 	bl	8007eac <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8008788:	4603      	mov	r3, r0
 800878a:	73fb      	strb	r3, [r7, #15]
    if (err)
 800878c:	7bfb      	ldrb	r3, [r7, #15]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d001      	beq.n	8008796 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x1e>
      return err;
 8008792:	7bfb      	ldrb	r3, [r7, #15]
 8008794:	e07c      	b.n	8008890 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
    switch (current()) {
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f7ff fbbe 	bl	8007f18 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 800879c:	4603      	mov	r3, r0
 800879e:	2b7b      	cmp	r3, #123	@ 0x7b
 80087a0:	dc71      	bgt.n	8008886 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x10e>
 80087a2:	2b5b      	cmp	r3, #91	@ 0x5b
 80087a4:	da04      	bge.n	80087b0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x38>
 80087a6:	2b22      	cmp	r3, #34	@ 0x22
 80087a8:	d056      	beq.n	8008858 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0xe0>
 80087aa:	2b27      	cmp	r3, #39	@ 0x27
 80087ac:	d054      	beq.n	8008858 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0xe0>
 80087ae:	e06a      	b.n	8008886 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x10e>
 80087b0:	3b5b      	subs	r3, #91	@ 0x5b
 80087b2:	2b20      	cmp	r3, #32
 80087b4:	d867      	bhi.n	8008886 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x10e>
 80087b6:	a201      	add	r2, pc, #4	@ (adr r2, 80087bc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x44>)
 80087b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087bc:	08008841 	.word	0x08008841
 80087c0:	08008887 	.word	0x08008887
 80087c4:	08008887 	.word	0x08008887
 80087c8:	08008887 	.word	0x08008887
 80087cc:	08008887 	.word	0x08008887
 80087d0:	08008887 	.word	0x08008887
 80087d4:	08008887 	.word	0x08008887
 80087d8:	08008887 	.word	0x08008887
 80087dc:	08008887 	.word	0x08008887
 80087e0:	08008887 	.word	0x08008887
 80087e4:	08008887 	.word	0x08008887
 80087e8:	0800886f 	.word	0x0800886f
 80087ec:	08008887 	.word	0x08008887
 80087f0:	08008887 	.word	0x08008887
 80087f4:	08008887 	.word	0x08008887
 80087f8:	08008887 	.word	0x08008887
 80087fc:	08008887 	.word	0x08008887
 8008800:	08008887 	.word	0x08008887
 8008804:	08008887 	.word	0x08008887
 8008808:	0800887b 	.word	0x0800887b
 800880c:	08008887 	.word	0x08008887
 8008810:	08008887 	.word	0x08008887
 8008814:	08008887 	.word	0x08008887
 8008818:	08008887 	.word	0x08008887
 800881c:	08008887 	.word	0x08008887
 8008820:	08008863 	.word	0x08008863
 8008824:	08008887 	.word	0x08008887
 8008828:	08008887 	.word	0x08008887
 800882c:	08008887 	.word	0x08008887
 8008830:	08008887 	.word	0x08008887
 8008834:	08008887 	.word	0x08008887
 8008838:	08008887 	.word	0x08008887
 800883c:	0800884d 	.word	0x0800884d
        return skipArray(nestingLimit);
 8008840:	7839      	ldrb	r1, [r7, #0]
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f7ff fc05 	bl	8008052 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE>
 8008848:	4603      	mov	r3, r0
 800884a:	e021      	b.n	8008890 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipObject(nestingLimit);
 800884c:	7839      	ldrb	r1, [r7, #0]
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f7ff fd2e 	bl	80082b0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE>
 8008854:	4603      	mov	r3, r0
 8008856:	e01b      	b.n	8008890 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipQuotedString();
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f7ff fdca 	bl	80083f2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv>
 800885e:	4603      	mov	r3, r0
 8008860:	e016      	b.n	8008890 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipKeyword("true");
 8008862:	490d      	ldr	r1, [pc, #52]	@ (8008898 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x120>)
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f7ff fdf9 	bl	800845c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 800886a:	4603      	mov	r3, r0
 800886c:	e010      	b.n	8008890 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipKeyword("false");
 800886e:	490b      	ldr	r1, [pc, #44]	@ (800889c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x124>)
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f7ff fdf3 	bl	800845c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8008876:	4603      	mov	r3, r0
 8008878:	e00a      	b.n	8008890 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipKeyword("null");
 800887a:	4909      	ldr	r1, [pc, #36]	@ (80088a0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x128>)
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f7ff fded 	bl	800845c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8008882:	4603      	mov	r3, r0
 8008884:	e004      	b.n	8008890 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipNumericValue();
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f7ff feb6 	bl	80085f8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv>
 800888c:	4603      	mov	r3, r0
 800888e:	bf00      	nop
  }
 8008890:	4618      	mov	r0, r3
 8008892:	3710      	adds	r7, #16
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}
 8008898:	08025bc0 	.word	0x08025bc0
 800889c:	08025bc8 	.word	0x08025bc8
 80088a0:	08025bd0 	.word	0x08025bd0

080088a4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE8parseKeyEv>:
  DeserializationError::Code parseKey() {
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
    stringBuilder_.startString();
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7fc fb5e 	bl	8004f70 <_ZN11ArduinoJson8V730HB226detail13StringBuilder11startStringEv>
    if (isQuote(current())) {
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f7ff fb2f 	bl	8007f18 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 80088ba:	4603      	mov	r3, r0
 80088bc:	4618      	mov	r0, r3
 80088be:	f000 fa6c 	bl	8008d9a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc>
 80088c2:	4603      	mov	r3, r0
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d004      	beq.n	80088d2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE8parseKeyEv+0x2e>
      return parseQuotedString();
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 f888 	bl	80089de <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv>
 80088ce:	4603      	mov	r3, r0
 80088d0:	e004      	b.n	80088dc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE8parseKeyEv+0x38>
      return parseNonQuotedString();
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 fa75 	bl	8008dc2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv>
 80088d8:	4603      	mov	r3, r0
 80088da:	bf00      	nop
  }
 80088dc:	4618      	mov	r0, r3
 80088de:	3708      	adds	r7, #8
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilterixINS0_10JsonStringEEES2_RKT_>:
  AllowAllFilter operator[](const TKey&) const {
 80088e4:	b480      	push	{r7}
 80088e6:	b083      	sub	sp, #12
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	6039      	str	r1, [r7, #0]
    return AllowAllFilter();
 80088ee:	bf00      	nop
  }
 80088f0:	4618      	mov	r0, r3
 80088f2:	370c      	adds	r7, #12
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr

080088fc <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>:
                                     ResourceManager* resources) {
  remove(findKey(key, resources), resources);
}

template <typename TAdaptedString>
inline VariantData* ObjectData::addMember(TAdaptedString key,
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b08a      	sub	sp, #40	@ 0x28
 8008900:	af02      	add	r7, sp, #8
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	60b9      	str	r1, [r7, #8]
 8008906:	607a      	str	r2, [r7, #4]
                                          ResourceManager* resources) {
  auto keySlot = resources->allocVariant();
 8008908:	f107 0318 	add.w	r3, r7, #24
 800890c:	6879      	ldr	r1, [r7, #4]
 800890e:	4618      	mov	r0, r3
 8008910:	f7fc f9de 	bl	8004cd0 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!keySlot)
 8008914:	f107 0318 	add.w	r3, r7, #24
 8008918:	4618      	mov	r0, r3
 800891a:	f7fd fc7d 	bl	8006218 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 800891e:	4603      	mov	r3, r0
 8008920:	f083 0301 	eor.w	r3, r3, #1
 8008924:	b2db      	uxtb	r3, r3
 8008926:	2b00      	cmp	r3, #0
 8008928:	d001      	beq.n	800892e <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x32>
    return nullptr;
 800892a:	2300      	movs	r3, #0
 800892c:	e037      	b.n	800899e <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa2>

  auto valueSlot = resources->allocVariant();
 800892e:	f107 0310 	add.w	r3, r7, #16
 8008932:	6879      	ldr	r1, [r7, #4]
 8008934:	4618      	mov	r0, r3
 8008936:	f7fc f9cb 	bl	8004cd0 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!valueSlot)
 800893a:	f107 0310 	add.w	r3, r7, #16
 800893e:	4618      	mov	r0, r3
 8008940:	f7fd fc6a 	bl	8006218 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 8008944:	4603      	mov	r3, r0
 8008946:	f083 0301 	eor.w	r3, r3, #1
 800894a:	b2db      	uxtb	r3, r3
 800894c:	2b00      	cmp	r3, #0
 800894e:	d001      	beq.n	8008954 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x58>
    return nullptr;
 8008950:	2300      	movs	r3, #0
 8008952:	e024      	b.n	800899e <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa2>

  if (!keySlot->setString(key, resources))
 8008954:	f107 0318 	add.w	r3, r7, #24
 8008958:	4618      	mov	r0, r3
 800895a:	f7fd fc86 	bl	800626a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>
 800895e:	4603      	mov	r3, r0
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	68b9      	ldr	r1, [r7, #8]
 8008964:	4618      	mov	r0, r3
 8008966:	f7fb fd6f 	bl	8004448 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringEPNS1_10StringNodeEPNS1_15ResourceManagerE>
 800896a:	4603      	mov	r3, r0
 800896c:	f083 0301 	eor.w	r3, r3, #1
 8008970:	b2db      	uxtb	r3, r3
 8008972:	2b00      	cmp	r3, #0
 8008974:	d001      	beq.n	800897a <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x7e>
    return nullptr;
 8008976:	2300      	movs	r3, #0
 8008978:	e011      	b.n	800899e <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa2>

  CollectionData::appendPair(keySlot, valueSlot, resources);
 800897a:	68f8      	ldr	r0, [r7, #12]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	9301      	str	r3, [sp, #4]
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	9300      	str	r3, [sp, #0]
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	f107 0218 	add.w	r2, r7, #24
 800898a:	ca06      	ldmia	r2, {r1, r2}
 800898c:	f7fc f919 	bl	8004bc2 <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE>

  return valueSlot.ptr();
 8008990:	f107 0310 	add.w	r3, r7, #16
 8008994:	4618      	mov	r0, r3
 8008996:	f7fd fc50 	bl	800623a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>
 800899a:	4603      	mov	r3, r0
 800899c:	bf00      	nop
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3720      	adds	r7, #32
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}

080089a6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7skipKeyEv>:
  DeserializationError::Code skipKey() {
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b082      	sub	sp, #8
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
    if (isQuote(current())) {
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f7ff fab2 	bl	8007f18 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 80089b4:	4603      	mov	r3, r0
 80089b6:	4618      	mov	r0, r3
 80089b8:	f000 f9ef 	bl	8008d9a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc>
 80089bc:	4603      	mov	r3, r0
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d004      	beq.n	80089cc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7skipKeyEv+0x26>
      return skipQuotedString();
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f7ff fd15 	bl	80083f2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv>
 80089c8:	4603      	mov	r3, r0
 80089ca:	e004      	b.n	80089d6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7skipKeyEv+0x30>
      return skipNonQuotedString();
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f000 fa31 	bl	8008e34 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE19skipNonQuotedStringEv>
 80089d2:	4603      	mov	r3, r0
 80089d4:	bf00      	nop
  }
 80089d6:	4618      	mov	r0, r3
 80089d8:	3708      	adds	r7, #8
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}

080089de <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv>:
  DeserializationError::Code parseQuotedString() {
 80089de:	b580      	push	{r7, lr}
 80089e0:	b086      	sub	sp, #24
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	6078      	str	r0, [r7, #4]
    Utf16::Codepoint codepoint;
 80089e6:	f107 030c 	add.w	r3, r7, #12
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7fc fd14 	bl	8005418 <_ZN11ArduinoJson8V730HB226detail5Utf169CodepointC1Ev>
    const char stopChar = current();
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f7ff fa91 	bl	8007f18 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 80089f6:	4603      	mov	r3, r0
 80089f8:	75bb      	strb	r3, [r7, #22]
    move();
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f7ff fe85 	bl	800870a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      char c = current();
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f7ff fa89 	bl	8007f18 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8008a06:	4603      	mov	r3, r0
 8008a08:	75fb      	strb	r3, [r7, #23]
      move();
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f7ff fe7d 	bl	800870a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      if (c == stopChar)
 8008a10:	7dfa      	ldrb	r2, [r7, #23]
 8008a12:	7dbb      	ldrb	r3, [r7, #22]
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d051      	beq.n	8008abc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xde>
      if (c == '\0')
 8008a18:	7dfb      	ldrb	r3, [r7, #23]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d101      	bne.n	8008a22 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x44>
        return DeserializationError::IncompleteInput;
 8008a1e:	2302      	movs	r3, #2
 8008a20:	e05a      	b.n	8008ad8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
      if (c == '\\') {
 8008a22:	7dfb      	ldrb	r3, [r7, #23]
 8008a24:	2b5c      	cmp	r3, #92	@ 0x5c
 8008a26:	d140      	bne.n	8008aaa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xcc>
        c = current();
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f7ff fa75 	bl	8007f18 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	75fb      	strb	r3, [r7, #23]
        if (c == '\0')
 8008a32:	7dfb      	ldrb	r3, [r7, #23]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d101      	bne.n	8008a3c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x5e>
          return DeserializationError::IncompleteInput;
 8008a38:	2302      	movs	r3, #2
 8008a3a:	e04d      	b.n	8008ad8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
        if (c == 'u') {
 8008a3c:	7dfb      	ldrb	r3, [r7, #23]
 8008a3e:	2b75      	cmp	r3, #117	@ 0x75
 8008a40:	d125      	bne.n	8008a8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xb0>
          move();
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f7ff fe61 	bl	800870a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
          err = parseHex4(codeunit);
 8008a48:	f107 030a 	add.w	r3, r7, #10
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 fa0e 	bl	8008e70 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt>
 8008a54:	4603      	mov	r3, r0
 8008a56:	757b      	strb	r3, [r7, #21]
          if (err)
 8008a58:	7d7b      	ldrb	r3, [r7, #21]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d001      	beq.n	8008a62 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x84>
            return err;
 8008a5e:	7d7b      	ldrb	r3, [r7, #21]
 8008a60:	e03a      	b.n	8008ad8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
          if (codepoint.append(codeunit))
 8008a62:	897a      	ldrh	r2, [r7, #10]
 8008a64:	f107 030c 	add.w	r3, r7, #12
 8008a68:	4611      	mov	r1, r2
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f7fc fce5 	bl	800543a <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt>
 8008a70:	4603      	mov	r3, r0
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d020      	beq.n	8008ab8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xda>
            Utf8::encodeCodepoint(codepoint.value(), stringBuilder_);
 8008a76:	f107 030c 	add.w	r3, r7, #12
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f7fc fd0f 	bl	800549e <_ZNK11ArduinoJson8V730HB226detail5Utf169Codepoint5valueEv>
 8008a80:	4602      	mov	r2, r0
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	4619      	mov	r1, r3
 8008a86:	4610      	mov	r0, r2
 8008a88:	f000 fa2b 	bl	8008ee2 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_>
 8008a8c:	e7b8      	b.n	8008a00 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x22>
        c = EscapeSequence::unescapeChar(c);
 8008a8e:	7dfb      	ldrb	r3, [r7, #23]
 8008a90:	4618      	mov	r0, r3
 8008a92:	f7fc fa0c 	bl	8004eae <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc>
 8008a96:	4603      	mov	r3, r0
 8008a98:	75fb      	strb	r3, [r7, #23]
        if (c == '\0')
 8008a9a:	7dfb      	ldrb	r3, [r7, #23]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d101      	bne.n	8008aa4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xc6>
          return DeserializationError::InvalidInput;
 8008aa0:	2303      	movs	r3, #3
 8008aa2:	e019      	b.n	8008ad8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
        move();
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f7ff fe30 	bl	800870a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      stringBuilder_.append(c);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	7dfa      	ldrb	r2, [r7, #23]
 8008aae:	4611      	mov	r1, r2
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f7fc fab6 	bl	8005022 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>
 8008ab6:	e7a3      	b.n	8008a00 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x22>
          continue;
 8008ab8:	bf00      	nop
    for (;;) {
 8008aba:	e7a1      	b.n	8008a00 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x22>
        break;
 8008abc:	bf00      	nop
    if (!stringBuilder_.isValid())
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f7fc fae0 	bl	8005086 <_ZNK11ArduinoJson8V730HB226detail13StringBuilder7isValidEv>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	f083 0301 	eor.w	r3, r3, #1
 8008acc:	b2db      	uxtb	r3, r3
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d001      	beq.n	8008ad6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xf8>
      return DeserializationError::NoMemory;
 8008ad2:	2304      	movs	r3, #4
 8008ad4:	e000      	b.n	8008ad8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
    return DeserializationError::Ok;
 8008ad6:	2300      	movs	r3, #0
  }
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3718      	adds	r7, #24
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc>:
  static inline bool canBeInNumber(char c) {
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	71fb      	strb	r3, [r7, #7]
    return isBetween(c, '0', '9') || c == '+' || c == '-' || c == '.' ||
 8008aea:	79fb      	ldrb	r3, [r7, #7]
 8008aec:	2239      	movs	r2, #57	@ 0x39
 8008aee:	2130      	movs	r1, #48	@ 0x30
 8008af0:	4618      	mov	r0, r3
 8008af2:	f000 fa7a 	bl	8008fea <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>
 8008af6:	4603      	mov	r3, r0
           c == 'e' || c == 'E';
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d10e      	bne.n	8008b1a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
    return isBetween(c, '0', '9') || c == '+' || c == '-' || c == '.' ||
 8008afc:	79fb      	ldrb	r3, [r7, #7]
 8008afe:	2b2b      	cmp	r3, #43	@ 0x2b
 8008b00:	d00b      	beq.n	8008b1a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
 8008b02:	79fb      	ldrb	r3, [r7, #7]
 8008b04:	2b2d      	cmp	r3, #45	@ 0x2d
 8008b06:	d008      	beq.n	8008b1a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
 8008b08:	79fb      	ldrb	r3, [r7, #7]
 8008b0a:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b0c:	d005      	beq.n	8008b1a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
 8008b0e:	79fb      	ldrb	r3, [r7, #7]
 8008b10:	2b65      	cmp	r3, #101	@ 0x65
 8008b12:	d002      	beq.n	8008b1a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
           c == 'e' || c == 'E';
 8008b14:	79fb      	ldrb	r3, [r7, #7]
 8008b16:	2b45      	cmp	r3, #69	@ 0x45
 8008b18:	d101      	bne.n	8008b1e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3e>
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	e000      	b.n	8008b20 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x40>
 8008b1e:	2300      	movs	r3, #0
  }
 8008b20:	4618      	mov	r0, r3
 8008b22:	3708      	adds	r7, #8
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>:
#endif
  return true;
}

template <typename T>
enable_if_t<is_unsigned<T>::value, bool> VariantData::setInteger(
 8008b28:	b5b0      	push	{r4, r5, r7, lr}
 8008b2a:	b086      	sub	sp, #24
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	60f8      	str	r0, [r7, #12]
 8008b30:	e9c7 2300 	strd	r2, r3, [r7]
    T value, ResourceManager* resources) {
  ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
  (void)resources;                                 // silence warning

  if (canConvertNumber<uint32_t>(value)) {
 8008b34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b38:	f7ff f8be 	bl	8007cb8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d006      	beq.n	8008b50 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x28>
    type_ = VariantType::Uint32;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	220a      	movs	r2, #10
 8008b46:	711a      	strb	r2, [r3, #4]
    content_.asUint32 = static_cast<uint32_t>(value);
 8008b48:	683a      	ldr	r2, [r7, #0]
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	601a      	str	r2, [r3, #0]
 8008b4e:	e028      	b.n	8008ba2 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7a>
  }
#if ARDUINOJSON_USE_LONG_LONG
  else {
    auto extension = resources->allocExtension();
 8008b50:	f107 0310 	add.w	r3, r7, #16
 8008b54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b56:	4618      	mov	r0, r3
 8008b58:	f7fc f93f 	bl	8004dda <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 8008b5c:	f107 0310 	add.w	r3, r7, #16
 8008b60:	4618      	mov	r0, r3
 8008b62:	f000 fa5c 	bl	800901e <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 8008b66:	4603      	mov	r3, r0
 8008b68:	f083 0301 	eor.w	r3, r3, #1
 8008b6c:	b2db      	uxtb	r3, r3
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d001      	beq.n	8008b76 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x4e>
      return false;
 8008b72:	2300      	movs	r3, #0
 8008b74:	e016      	b.n	8008ba4 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7c>
    type_ = VariantType::Uint64;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	221a      	movs	r2, #26
 8008b7a:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 8008b7c:	f107 0310 	add.w	r3, r7, #16
 8008b80:	4618      	mov	r0, r3
 8008b82:	f000 fa5d 	bl	8009040 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 8008b86:	4603      	mov	r3, r0
 8008b88:	461a      	mov	r2, r3
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	801a      	strh	r2, [r3, #0]
    extension->asUint64 = value;
 8008b8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008b92:	f107 0310 	add.w	r3, r7, #16
 8008b96:	4618      	mov	r0, r3
 8008b98:	f000 fa5e 	bl	8009058 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	e9c3 4500 	strd	r4, r5, [r3]
  }
#endif
  return true;
 8008ba2:	2301      	movs	r3, #1
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3718      	adds	r7, #24
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bdb0      	pop	{r4, r5, r7, pc}

08008bac <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>:
enable_if_t<is_signed<T>::value, bool> VariantData::setInteger(
 8008bac:	b5b0      	push	{r4, r5, r7, lr}
 8008bae:	b086      	sub	sp, #24
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	60f8      	str	r0, [r7, #12]
 8008bb4:	e9c7 2300 	strd	r2, r3, [r7]
  if (canConvertNumber<int32_t>(value)) {
 8008bb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008bbc:	f000 fa58 	bl	8009070 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d006      	beq.n	8008bd4 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x28>
    type_ = VariantType::Int32;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	220c      	movs	r2, #12
 8008bca:	711a      	strb	r2, [r3, #4]
    content_.asInt32 = static_cast<int32_t>(value);
 8008bcc:	683a      	ldr	r2, [r7, #0]
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	601a      	str	r2, [r3, #0]
 8008bd2:	e028      	b.n	8008c26 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7a>
    auto extension = resources->allocExtension();
 8008bd4:	f107 0310 	add.w	r3, r7, #16
 8008bd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f7fc f8fd 	bl	8004dda <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 8008be0:	f107 0310 	add.w	r3, r7, #16
 8008be4:	4618      	mov	r0, r3
 8008be6:	f000 fa1a 	bl	800901e <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 8008bea:	4603      	mov	r3, r0
 8008bec:	f083 0301 	eor.w	r3, r3, #1
 8008bf0:	b2db      	uxtb	r3, r3
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d001      	beq.n	8008bfa <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x4e>
      return false;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	e016      	b.n	8008c28 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7c>
    type_ = VariantType::Int64;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	221c      	movs	r2, #28
 8008bfe:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 8008c00:	f107 0310 	add.w	r3, r7, #16
 8008c04:	4618      	mov	r0, r3
 8008c06:	f000 fa1b 	bl	8009040 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	801a      	strh	r2, [r3, #0]
    extension->asInt64 = value;
 8008c12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008c16:	f107 0310 	add.w	r3, r7, #16
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f000 fa1c 	bl	8009058 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>
 8008c20:	4603      	mov	r3, r0
 8008c22:	e9c3 4500 	strd	r4, r5, [r3]
  return true;
 8008c26:	2301      	movs	r3, #1
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3718      	adds	r7, #24
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bdb0      	pop	{r4, r5, r7, pc}

08008c30 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIfEENS1_9enable_ifIXeqstT_Li4EEbE4typeES5_PNS1_15ResourceManagerE>:
  enable_if_t<sizeof(T) == 4, bool> setFloat(T value, ResourceManager*) {
 8008c30:	b480      	push	{r7}
 8008c32:	b085      	sub	sp, #20
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	60f8      	str	r0, [r7, #12]
 8008c38:	ed87 0a02 	vstr	s0, [r7, #8]
 8008c3c:	6079      	str	r1, [r7, #4]
    type_ = VariantType::Float;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	220e      	movs	r2, #14
 8008c42:	711a      	strb	r2, [r3, #4]
    content_.asFloat = value;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	68ba      	ldr	r2, [r7, #8]
 8008c48:	601a      	str	r2, [r3, #0]
    return true;
 8008c4a:	2301      	movs	r3, #1
  }
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3714      	adds	r7, #20
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr

08008c58 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE>:
enable_if_t<sizeof(T) == 8, bool> VariantData::setFloat(
 8008c58:	b5b0      	push	{r4, r5, r7, lr}
 8008c5a:	b088      	sub	sp, #32
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	60f8      	str	r0, [r7, #12]
 8008c60:	ed87 0b00 	vstr	d0, [r7]
 8008c64:	60b9      	str	r1, [r7, #8]
  float valueAsFloat = static_cast<float>(value);
 8008c66:	ed97 7b00 	vldr	d7, [r7]
 8008c6a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8008c6e:	edc7 7a07 	vstr	s15, [r7, #28]
  if (value == valueAsFloat) {
 8008c72:	edd7 7a07 	vldr	s15, [r7, #28]
 8008c76:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008c7a:	ed97 6b00 	vldr	d6, [r7]
 8008c7e:	eeb4 6b47 	vcmp.f64	d6, d7
 8008c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c86:	d106      	bne.n	8008c96 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE+0x3e>
    type_ = VariantType::Float;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	220e      	movs	r2, #14
 8008c8c:	711a      	strb	r2, [r3, #4]
    content_.asFloat = valueAsFloat;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	69fa      	ldr	r2, [r7, #28]
 8008c92:	601a      	str	r2, [r3, #0]
 8008c94:	e028      	b.n	8008ce8 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE+0x90>
    auto extension = resources->allocExtension();
 8008c96:	f107 0314 	add.w	r3, r7, #20
 8008c9a:	68b9      	ldr	r1, [r7, #8]
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f7fc f89c 	bl	8004dda <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 8008ca2:	f107 0314 	add.w	r3, r7, #20
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f000 f9b9 	bl	800901e <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 8008cac:	4603      	mov	r3, r0
 8008cae:	f083 0301 	eor.w	r3, r3, #1
 8008cb2:	b2db      	uxtb	r3, r3
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d001      	beq.n	8008cbc <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE+0x64>
      return false;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	e016      	b.n	8008cea <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE+0x92>
    type_ = VariantType::Double;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	221e      	movs	r2, #30
 8008cc0:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 8008cc2:	f107 0314 	add.w	r3, r7, #20
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f000 f9ba 	bl	8009040 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	461a      	mov	r2, r3
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	801a      	strh	r2, [r3, #0]
    extension->asDouble = value;
 8008cd4:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008cd8:	f107 0314 	add.w	r3, r7, #20
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f000 f9bb 	bl	8009058 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	e9c3 4500 	strd	r4, r5, [r3]
  return true;
 8008ce8:	2301      	movs	r3, #1
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3720      	adds	r7, #32
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bdb0      	pop	{r4, r5, r7, pc}

08008cf2 <_ZN11ArduinoJson8V730HB226detail10alias_castIfmEET_T0_>:
T alias_cast(F raw_data) {
 8008cf2:	b480      	push	{r7}
 8008cf4:	b085      	sub	sp, #20
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
  ac.raw = raw_data;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	60fb      	str	r3, [r7, #12]
  return ac.data;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	ee07 3a90 	vmov	s15, r3
}
 8008d04:	eeb0 0a67 	vmov.f32	s0, s15
 8008d08:	3714      	adds	r7, #20
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr

08008d12 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_10JsonObjectEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 8008d12:	b580      	push	{r7, lr}
 8008d14:	b082      	sub	sp, #8
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
    return client.getData();
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f7fb fe2d 	bl	800497a <_ZNK11ArduinoJson8V730HB2210JsonObject7getDataEv>
 8008d20:	4603      	mov	r3, r0
  }
 8008d22:	4618      	mov	r0, r3
 8008d24:	3708      	adds	r7, #8
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}

08008d2a <_ZNK11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_T_PKNS1_15ResourceManagerE>:
  VariantData* getMember(TAdaptedString key,
 8008d2a:	b580      	push	{r7, lr}
 8008d2c:	b086      	sub	sp, #24
 8008d2e:	af02      	add	r7, sp, #8
 8008d30:	60f8      	str	r0, [r7, #12]
 8008d32:	4638      	mov	r0, r7
 8008d34:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    return ObjectData::getMember(asObject(), key, resources);
 8008d38:	68f8      	ldr	r0, [r7, #12]
 8008d3a:	f7fb faf3 	bl	8004324 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asObjectEv>
 8008d3e:	69bb      	ldr	r3, [r7, #24]
 8008d40:	9300      	str	r3, [sp, #0]
 8008d42:	463b      	mov	r3, r7
 8008d44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008d46:	f7fd fe75 	bl	8006a34 <_ZN11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataEPKS2_T_PKNS1_15ResourceManagerE>
 8008d4a:	4603      	mov	r3, r0
  }
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3710      	adds	r7, #16
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE5clearEv>:
  void clear() {
 8008d54:	b480      	push	{r7}
 8008d56:	b083      	sub	sp, #12
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
    loaded_ = false;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	715a      	strb	r2, [r3, #5]
  }
 8008d62:	bf00      	nop
 8008d64:	370c      	adds	r7, #12
 8008d66:	46bd      	mov	sp, r7
 8008d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6c:	4770      	bx	lr

08008d6e <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE4loadEv>:
  }

 private:
  void load() {
 8008d6e:	b580      	push	{r7, lr}
 8008d70:	b084      	sub	sp, #16
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(!ended_);
    int c = reader_.read();
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f000 f99f 	bl	80090bc <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvE4readEv>
 8008d7e:	60f8      	str	r0, [r7, #12]
#if ARDUINOJSON_DEBUG
    if (c <= 0)
      ended_ = true;
#endif
    current_ = static_cast<char>(c > 0 ? c : 0);
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008d86:	b2da      	uxtb	r2, r3
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	711a      	strb	r2, [r3, #4]
    loaded_ = true;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	715a      	strb	r2, [r3, #5]
  }
 8008d92:	bf00      	nop
 8008d94:	3710      	adds	r7, #16
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}

08008d9a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc>:
  static inline bool isQuote(char c) {
 8008d9a:	b480      	push	{r7}
 8008d9c:	b083      	sub	sp, #12
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	4603      	mov	r3, r0
 8008da2:	71fb      	strb	r3, [r7, #7]
    return c == '\'' || c == '\"';
 8008da4:	79fb      	ldrb	r3, [r7, #7]
 8008da6:	2b27      	cmp	r3, #39	@ 0x27
 8008da8:	d002      	beq.n	8008db0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc+0x16>
 8008daa:	79fb      	ldrb	r3, [r7, #7]
 8008dac:	2b22      	cmp	r3, #34	@ 0x22
 8008dae:	d101      	bne.n	8008db4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc+0x1a>
 8008db0:	2301      	movs	r3, #1
 8008db2:	e000      	b.n	8008db6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc+0x1c>
 8008db4:	2300      	movs	r3, #0
  }
 8008db6:	4618      	mov	r0, r3
 8008db8:	370c      	adds	r7, #12
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc0:	4770      	bx	lr

08008dc2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv>:
  DeserializationError::Code parseNonQuotedString() {
 8008dc2:	b580      	push	{r7, lr}
 8008dc4:	b084      	sub	sp, #16
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	6078      	str	r0, [r7, #4]
    char c = current();
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f7ff f8a4 	bl	8007f18 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	73fb      	strb	r3, [r7, #15]
    if (canBeInNonQuotedString(c)) {  // no quotes
 8008dd4:	7bfb      	ldrb	r3, [r7, #15]
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f000 f980 	bl	80090dc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d015      	beq.n	8008e0e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x4c>
        move();
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f7ff fc91 	bl	800870a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
        stringBuilder_.append(c);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	7bfa      	ldrb	r2, [r7, #15]
 8008dec:	4611      	mov	r1, r2
 8008dee:	4618      	mov	r0, r3
 8008df0:	f7fc f917 	bl	8005022 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>
        c = current();
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f7ff f88f 	bl	8007f18 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	73fb      	strb	r3, [r7, #15]
      } while (canBeInNonQuotedString(c));
 8008dfe:	7bfb      	ldrb	r3, [r7, #15]
 8008e00:	4618      	mov	r0, r3
 8008e02:	f000 f96b 	bl	80090dc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc>
 8008e06:	4603      	mov	r3, r0
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d1ea      	bne.n	8008de2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x20>
 8008e0c:	e001      	b.n	8008e12 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x50>
      return DeserializationError::InvalidInput;
 8008e0e:	2303      	movs	r3, #3
 8008e10:	e00c      	b.n	8008e2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x6a>
    if (!stringBuilder_.isValid())
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	4618      	mov	r0, r3
 8008e16:	f7fc f936 	bl	8005086 <_ZNK11ArduinoJson8V730HB226detail13StringBuilder7isValidEv>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	f083 0301 	eor.w	r3, r3, #1
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d001      	beq.n	8008e2a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x68>
      return DeserializationError::NoMemory;
 8008e26:	2304      	movs	r3, #4
 8008e28:	e000      	b.n	8008e2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x6a>
    return DeserializationError::Ok;
 8008e2a:	2300      	movs	r3, #0
  }
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3710      	adds	r7, #16
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE19skipNonQuotedStringEv>:
  DeserializationError::Code skipNonQuotedString() {
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b084      	sub	sp, #16
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
    char c = current();
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f7ff f86b 	bl	8007f18 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8008e42:	4603      	mov	r3, r0
 8008e44:	73fb      	strb	r3, [r7, #15]
    while (canBeInNonQuotedString(c)) {
 8008e46:	e007      	b.n	8008e58 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE19skipNonQuotedStringEv+0x24>
      move();
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f7ff fc5e 	bl	800870a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      c = current();
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f7ff f862 	bl	8007f18 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8008e54:	4603      	mov	r3, r0
 8008e56:	73fb      	strb	r3, [r7, #15]
    while (canBeInNonQuotedString(c)) {
 8008e58:	7bfb      	ldrb	r3, [r7, #15]
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f000 f93e 	bl	80090dc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc>
 8008e60:	4603      	mov	r3, r0
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d1f0      	bne.n	8008e48 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE19skipNonQuotedStringEv+0x14>
    return DeserializationError::Ok;
 8008e66:	2300      	movs	r3, #0
  }
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3710      	adds	r7, #16
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt>:
  DeserializationError::Code parseHex4(uint16_t& result) {
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b084      	sub	sp, #16
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	6039      	str	r1, [r7, #0]
    result = 0;
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; ++i) {
 8008e80:	2300      	movs	r3, #0
 8008e82:	73fb      	strb	r3, [r7, #15]
 8008e84:	e025      	b.n	8008ed2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x62>
      char digit = current();
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f7ff f846 	bl	8007f18 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	73bb      	strb	r3, [r7, #14]
      if (!digit)
 8008e90:	7bbb      	ldrb	r3, [r7, #14]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d101      	bne.n	8008e9a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x2a>
        return DeserializationError::IncompleteInput;
 8008e96:	2302      	movs	r3, #2
 8008e98:	e01f      	b.n	8008eda <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x6a>
      uint8_t value = decodeHex(digit);
 8008e9a:	7bbb      	ldrb	r3, [r7, #14]
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f000 f944 	bl	800912a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9decodeHexEc>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	737b      	strb	r3, [r7, #13]
      if (value > 0x0F)
 8008ea6:	7b7b      	ldrb	r3, [r7, #13]
 8008ea8:	2b0f      	cmp	r3, #15
 8008eaa:	d901      	bls.n	8008eb0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x40>
        return DeserializationError::InvalidInput;
 8008eac:	2303      	movs	r3, #3
 8008eae:	e014      	b.n	8008eda <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x6a>
      result = uint16_t((result << 4) | value);
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	881b      	ldrh	r3, [r3, #0]
 8008eb4:	011b      	lsls	r3, r3, #4
 8008eb6:	b21a      	sxth	r2, r3
 8008eb8:	7b7b      	ldrb	r3, [r7, #13]
 8008eba:	b21b      	sxth	r3, r3
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	b21b      	sxth	r3, r3
 8008ec0:	b29a      	uxth	r2, r3
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	801a      	strh	r2, [r3, #0]
      move();
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f7ff fc1f 	bl	800870a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    for (uint8_t i = 0; i < 4; ++i) {
 8008ecc:	7bfb      	ldrb	r3, [r7, #15]
 8008ece:	3301      	adds	r3, #1
 8008ed0:	73fb      	strb	r3, [r7, #15]
 8008ed2:	7bfb      	ldrb	r3, [r7, #15]
 8008ed4:	2b03      	cmp	r3, #3
 8008ed6:	d9d6      	bls.n	8008e86 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x16>
    return DeserializationError::Ok;
 8008ed8:	2300      	movs	r3, #0
  }
 8008eda:	4618      	mov	r0, r3
 8008edc:	3710      	adds	r7, #16
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}

08008ee2 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_>:

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

namespace Utf8 {
template <typename TStringBuilder>
inline void encodeCodepoint(uint32_t codepoint32, TStringBuilder& str) {
 8008ee2:	b580      	push	{r7, lr}
 8008ee4:	b086      	sub	sp, #24
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
 8008eea:	6039      	str	r1, [r7, #0]
  // this function was optimize for code size on AVR

  if (codepoint32 < 0x80) {
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2b7f      	cmp	r3, #127	@ 0x7f
 8008ef0:	d806      	bhi.n	8008f00 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0x1e>
    str.append(char(codepoint32));
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	b2db      	uxtb	r3, r3
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	6838      	ldr	r0, [r7, #0]
 8008efa:	f7fc f892 	bl	8005022 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>

    while (*(--p)) {
      str.append(*p);
    }
  }
}
 8008efe:	e070      	b.n	8008fe2 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0x100>
    char* p = buf;
 8008f00:	f107 030c 	add.w	r3, r7, #12
 8008f04:	617b      	str	r3, [r7, #20]
    *(p++) = 0;
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	1c5a      	adds	r2, r3, #1
 8008f0a:	617a      	str	r2, [r7, #20]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	701a      	strb	r2, [r3, #0]
    *(p++) = char((codepoint32 | 0x80) & 0xBF);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	b2db      	uxtb	r3, r3
 8008f14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008f18:	b2db      	uxtb	r3, r3
 8008f1a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008f1e:	b2d9      	uxtb	r1, r3
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	1c5a      	adds	r2, r3, #1
 8008f24:	617a      	str	r2, [r7, #20]
 8008f26:	460a      	mov	r2, r1
 8008f28:	701a      	strb	r2, [r3, #0]
    uint16_t codepoint16 = uint16_t(codepoint32 >> 6);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	099b      	lsrs	r3, r3, #6
 8008f2e:	827b      	strh	r3, [r7, #18]
    if (codepoint16 < 0x20) {  // 0x800
 8008f30:	8a7b      	ldrh	r3, [r7, #18]
 8008f32:	2b1f      	cmp	r3, #31
 8008f34:	d80a      	bhi.n	8008f4c <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0x6a>
      *(p++) = char(codepoint16 | 0xC0);
 8008f36:	8a7b      	ldrh	r3, [r7, #18]
 8008f38:	b2db      	uxtb	r3, r3
 8008f3a:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8008f3e:	b2d9      	uxtb	r1, r3
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	1c5a      	adds	r2, r3, #1
 8008f44:	617a      	str	r2, [r7, #20]
 8008f46:	460a      	mov	r2, r1
 8008f48:	701a      	strb	r2, [r3, #0]
 8008f4a:	e03e      	b.n	8008fca <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xe8>
      *(p++) = char((codepoint16 | 0x80) & 0xBF);
 8008f4c:	8a7b      	ldrh	r3, [r7, #18]
 8008f4e:	b2db      	uxtb	r3, r3
 8008f50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008f54:	b2db      	uxtb	r3, r3
 8008f56:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008f5a:	b2d9      	uxtb	r1, r3
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	1c5a      	adds	r2, r3, #1
 8008f60:	617a      	str	r2, [r7, #20]
 8008f62:	460a      	mov	r2, r1
 8008f64:	701a      	strb	r2, [r3, #0]
      codepoint16 = uint16_t(codepoint16 >> 6);
 8008f66:	8a7b      	ldrh	r3, [r7, #18]
 8008f68:	099b      	lsrs	r3, r3, #6
 8008f6a:	827b      	strh	r3, [r7, #18]
      if (codepoint16 < 0x10) {  // 0x10000
 8008f6c:	8a7b      	ldrh	r3, [r7, #18]
 8008f6e:	2b0f      	cmp	r3, #15
 8008f70:	d80a      	bhi.n	8008f88 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xa6>
        *(p++) = char(codepoint16 | 0xE0);
 8008f72:	8a7b      	ldrh	r3, [r7, #18]
 8008f74:	b2db      	uxtb	r3, r3
 8008f76:	f063 031f 	orn	r3, r3, #31
 8008f7a:	b2d9      	uxtb	r1, r3
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	1c5a      	adds	r2, r3, #1
 8008f80:	617a      	str	r2, [r7, #20]
 8008f82:	460a      	mov	r2, r1
 8008f84:	701a      	strb	r2, [r3, #0]
 8008f86:	e020      	b.n	8008fca <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xe8>
        *(p++) = char((codepoint16 | 0x80) & 0xBF);
 8008f88:	8a7b      	ldrh	r3, [r7, #18]
 8008f8a:	b2db      	uxtb	r3, r3
 8008f8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008f96:	b2d9      	uxtb	r1, r3
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	1c5a      	adds	r2, r3, #1
 8008f9c:	617a      	str	r2, [r7, #20]
 8008f9e:	460a      	mov	r2, r1
 8008fa0:	701a      	strb	r2, [r3, #0]
        codepoint16 = uint16_t(codepoint16 >> 6);
 8008fa2:	8a7b      	ldrh	r3, [r7, #18]
 8008fa4:	099b      	lsrs	r3, r3, #6
 8008fa6:	827b      	strh	r3, [r7, #18]
        *(p++) = char(codepoint16 | 0xF0);
 8008fa8:	8a7b      	ldrh	r3, [r7, #18]
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	f063 030f 	orn	r3, r3, #15
 8008fb0:	b2d9      	uxtb	r1, r3
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	1c5a      	adds	r2, r3, #1
 8008fb6:	617a      	str	r2, [r7, #20]
 8008fb8:	460a      	mov	r2, r1
 8008fba:	701a      	strb	r2, [r3, #0]
    while (*(--p)) {
 8008fbc:	e005      	b.n	8008fca <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xe8>
      str.append(*p);
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	6838      	ldr	r0, [r7, #0]
 8008fc6:	f7fc f82c 	bl	8005022 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>
    while (*(--p)) {
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	3b01      	subs	r3, #1
 8008fce:	617b      	str	r3, [r7, #20]
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	bf14      	ite	ne
 8008fd8:	2301      	movne	r3, #1
 8008fda:	2300      	moveq	r3, #0
 8008fdc:	b2db      	uxtb	r3, r3
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d1ed      	bne.n	8008fbe <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xdc>
}
 8008fe2:	bf00      	nop
 8008fe4:	3718      	adds	r7, #24
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}

08008fea <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>:
  static inline bool isBetween(char c, char min, char max) {
 8008fea:	b480      	push	{r7}
 8008fec:	b083      	sub	sp, #12
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	71fb      	strb	r3, [r7, #7]
 8008ff4:	460b      	mov	r3, r1
 8008ff6:	71bb      	strb	r3, [r7, #6]
 8008ff8:	4613      	mov	r3, r2
 8008ffa:	717b      	strb	r3, [r7, #5]
    return min <= c && c <= max;
 8008ffc:	79ba      	ldrb	r2, [r7, #6]
 8008ffe:	79fb      	ldrb	r3, [r7, #7]
 8009000:	429a      	cmp	r2, r3
 8009002:	d805      	bhi.n	8009010 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc+0x26>
 8009004:	79fa      	ldrb	r2, [r7, #7]
 8009006:	797b      	ldrb	r3, [r7, #5]
 8009008:	429a      	cmp	r2, r3
 800900a:	d801      	bhi.n	8009010 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc+0x26>
 800900c:	2301      	movs	r3, #1
 800900e:	e000      	b.n	8009012 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc+0x28>
 8009010:	2300      	movs	r3, #0
  }
 8009012:	4618      	mov	r0, r3
 8009014:	370c      	adds	r7, #12
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr

0800901e <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>:
  explicit operator bool() const {
 800901e:	b480      	push	{r7}
 8009020:	b083      	sub	sp, #12
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
    return ptr_ != nullptr;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	2b00      	cmp	r3, #0
 800902c:	bf14      	ite	ne
 800902e:	2301      	movne	r3, #1
 8009030:	2300      	moveq	r3, #0
 8009032:	b2db      	uxtb	r3, r3
  }
 8009034:	4618      	mov	r0, r3
 8009036:	370c      	adds	r7, #12
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr

08009040 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>:
  SlotId id() const {
 8009040:	b480      	push	{r7}
 8009042:	b083      	sub	sp, #12
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
    return id_;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	889b      	ldrh	r3, [r3, #4]
  }
 800904c:	4618      	mov	r0, r3
 800904e:	370c      	adds	r7, #12
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr

08009058 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>:
  T* operator->() const {
 8009058:	b480      	push	{r7}
 800905a:	b083      	sub	sp, #12
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
    return ptr_;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
  }
 8009064:	4618      	mov	r0, r3
 8009066:	370c      	adds	r7, #12
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr

08009070 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8009070:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009074:	b082      	sub	sp, #8
 8009076:	af00      	add	r7, sp, #0
 8009078:	e9c7 0100 	strd	r0, r1, [r7]
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 800907c:	f000 f86e 	bl	800915c <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE6lowestEv>
 8009080:	4603      	mov	r3, r0
 8009082:	17da      	asrs	r2, r3, #31
 8009084:	4698      	mov	r8, r3
 8009086:	4691      	mov	r9, r2
 8009088:	e9d7 2300 	ldrd	r2, r3, [r7]
 800908c:	4542      	cmp	r2, r8
 800908e:	eb73 0309 	sbcs.w	r3, r3, r9
 8009092:	db0d      	blt.n	80090b0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x40>
         value <= TIn(numeric_limits<TOut>::highest());
 8009094:	f000 f86b 	bl	800916e <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE7highestEv>
 8009098:	4603      	mov	r3, r0
 800909a:	17da      	asrs	r2, r3, #31
 800909c:	461c      	mov	r4, r3
 800909e:	4615      	mov	r5, r2
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 80090a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090a4:	4294      	cmp	r4, r2
 80090a6:	eb75 0303 	sbcs.w	r3, r5, r3
 80090aa:	db01      	blt.n	80090b0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x40>
 80090ac:	2301      	movs	r3, #1
 80090ae:	e000      	b.n	80090b2 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x42>
 80090b0:	2300      	movs	r3, #0
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3708      	adds	r7, #8
 80090b6:	46bd      	mov	sp, r7
 80090b8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080090bc <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvE4readEv>:

  int read() {
 80090bc:	b480      	push	{r7}
 80090be:	b083      	sub	sp, #12
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
    return static_cast<unsigned char>(*ptr_++);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	1c59      	adds	r1, r3, #1
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	6011      	str	r1, [r2, #0]
 80090ce:	781b      	ldrb	r3, [r3, #0]
  }
 80090d0:	4618      	mov	r0, r3
 80090d2:	370c      	adds	r7, #12
 80090d4:	46bd      	mov	sp, r7
 80090d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090da:	4770      	bx	lr

080090dc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc>:
  static inline bool canBeInNonQuotedString(char c) {
 80090dc:	b580      	push	{r7, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	4603      	mov	r3, r0
 80090e4:	71fb      	strb	r3, [r7, #7]
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 80090e6:	79fb      	ldrb	r3, [r7, #7]
 80090e8:	2239      	movs	r2, #57	@ 0x39
 80090ea:	2130      	movs	r1, #48	@ 0x30
 80090ec:	4618      	mov	r0, r3
 80090ee:	f7ff ff7c 	bl	8008fea <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>
 80090f2:	4603      	mov	r3, r0
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d111      	bne.n	800911c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc+0x40>
 80090f8:	79fb      	ldrb	r3, [r7, #7]
 80090fa:	227a      	movs	r2, #122	@ 0x7a
 80090fc:	215f      	movs	r1, #95	@ 0x5f
 80090fe:	4618      	mov	r0, r3
 8009100:	f7ff ff73 	bl	8008fea <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>
 8009104:	4603      	mov	r3, r0
 8009106:	2b00      	cmp	r3, #0
 8009108:	d108      	bne.n	800911c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc+0x40>
           isBetween(c, 'A', 'Z');
 800910a:	79fb      	ldrb	r3, [r7, #7]
 800910c:	225a      	movs	r2, #90	@ 0x5a
 800910e:	2141      	movs	r1, #65	@ 0x41
 8009110:	4618      	mov	r0, r3
 8009112:	f7ff ff6a 	bl	8008fea <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>
 8009116:	4603      	mov	r3, r0
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 8009118:	2b00      	cmp	r3, #0
 800911a:	d001      	beq.n	8009120 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc+0x44>
 800911c:	2301      	movs	r3, #1
 800911e:	e000      	b.n	8009122 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc+0x46>
 8009120:	2300      	movs	r3, #0
  }
 8009122:	4618      	mov	r0, r3
 8009124:	3708      	adds	r7, #8
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}

0800912a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9decodeHexEc>:
  static inline uint8_t decodeHex(char c) {
 800912a:	b480      	push	{r7}
 800912c:	b083      	sub	sp, #12
 800912e:	af00      	add	r7, sp, #0
 8009130:	4603      	mov	r3, r0
 8009132:	71fb      	strb	r3, [r7, #7]
    if (c < 'A')
 8009134:	79fb      	ldrb	r3, [r7, #7]
 8009136:	2b40      	cmp	r3, #64	@ 0x40
 8009138:	d803      	bhi.n	8009142 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9decodeHexEc+0x18>
      return uint8_t(c - '0');
 800913a:	79fb      	ldrb	r3, [r7, #7]
 800913c:	3b30      	subs	r3, #48	@ 0x30
 800913e:	b2db      	uxtb	r3, r3
 8009140:	e006      	b.n	8009150 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9decodeHexEc+0x26>
    c = char(c & ~0x20);  // uppercase
 8009142:	79fb      	ldrb	r3, [r7, #7]
 8009144:	f023 0320 	bic.w	r3, r3, #32
 8009148:	71fb      	strb	r3, [r7, #7]
    return uint8_t(c - 'A' + 10);
 800914a:	79fb      	ldrb	r3, [r7, #7]
 800914c:	3b37      	subs	r3, #55	@ 0x37
 800914e:	b2db      	uxtb	r3, r3
  }
 8009150:	4618      	mov	r0, r3
 8009152:	370c      	adds	r7, #12
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr

0800915c <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE6lowestEv>:
};

template <typename T>
struct numeric_limits<
    T, enable_if_t<is_integral<T>::value && is_signed<T>::value>> {
  static constexpr T lowest() {
 800915c:	b480      	push	{r7}
 800915e:	af00      	add	r7, sp, #0
    return T(T(1) << (sizeof(T) * 8 - 1));
 8009160:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
  }
 8009164:	4618      	mov	r0, r3
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr

0800916e <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE7highestEv>:
  static constexpr T highest() {
 800916e:	b580      	push	{r7, lr}
 8009170:	af00      	add	r7, sp, #0
    return T(~lowest());
 8009172:	f7ff fff3 	bl	800915c <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE6lowestEv>
 8009176:	4603      	mov	r3, r0
 8009178:	43db      	mvns	r3, r3
  }
 800917a:	4618      	mov	r0, r3
 800917c:	bd80      	pop	{r7, pc}
	...

08009180 <__io_putchar>:


// re-target printf to UART1 by redeclaring week function in syscalls.c
extern "C" {
	int __io_putchar(int ch)
	{
 8009180:	b580      	push	{r7, lr}
 8009182:	b082      	sub	sp, #8
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
	  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8009188:	1d39      	adds	r1, r7, #4
 800918a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800918e:	2201      	movs	r2, #1
 8009190:	4803      	ldr	r0, [pc, #12]	@ (80091a0 <__io_putchar+0x20>)
 8009192:	f016 fb52 	bl	801f83a <HAL_UART_Transmit>
	  return ch;
 8009196:	687b      	ldr	r3, [r7, #4]
	}
 8009198:	4618      	mov	r0, r3
 800919a:	3708      	adds	r7, #8
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}
 80091a0:	24000374 	.word	0x24000374

080091a4 <main>:
}

int main(void)
{
 80091a4:	b590      	push	{r4, r7, lr}
 80091a6:	b083      	sub	sp, #12
 80091a8:	af00      	add	r7, sp, #0
	MPU_Config();
 80091aa:	f000 fa55 	bl	8009658 <_ZL10MPU_Configv>
	//SCB->VTOR = 0x08000000;
	HAL_Init();
 80091ae:	f00e f8a3 	bl	80172f8 <HAL_Init>
	SystemClock_Config();
 80091b2:	f000 f867 	bl	8009284 <_Z18SystemClock_Configv>
	PeriphCommonClock_Config();
 80091b6:	f000 f92f 	bl	8009418 <_Z24PeriphCommonClock_Configv>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80091ba:	f3bf 8f4f 	dsb	sy
}
 80091be:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80091c0:	f3bf 8f6f 	isb	sy
}
 80091c4:	bf00      	nop
__STATIC_FORCEINLINE void SCB_InvalidateICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;
 80091c6:	4b2d      	ldr	r3, [pc, #180]	@ (800927c <main+0xd8>)
 80091c8:	2200      	movs	r2, #0
 80091ca:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80091ce:	f3bf 8f4f 	dsb	sy
}
 80091d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80091d4:	f3bf 8f6f 	isb	sy
}
 80091d8:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80091da:	bf00      	nop
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80091dc:	4b27      	ldr	r3, [pc, #156]	@ (800927c <main+0xd8>)
 80091de:	695b      	ldr	r3, [r3, #20]
 80091e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	bf14      	ite	ne
 80091e8:	2301      	movne	r3, #1
 80091ea:	2300      	moveq	r3, #0
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d11b      	bne.n	800922a <main+0x86>
  __ASM volatile ("dsb 0xF":::"memory");
 80091f2:	f3bf 8f4f 	dsb	sy
}
 80091f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80091f8:	f3bf 8f6f 	isb	sy
}
 80091fc:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80091fe:	4b1f      	ldr	r3, [pc, #124]	@ (800927c <main+0xd8>)
 8009200:	2200      	movs	r2, #0
 8009202:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8009206:	f3bf 8f4f 	dsb	sy
}
 800920a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800920c:	f3bf 8f6f 	isb	sy
}
 8009210:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8009212:	4b1a      	ldr	r3, [pc, #104]	@ (800927c <main+0xd8>)
 8009214:	695b      	ldr	r3, [r3, #20]
 8009216:	4a19      	ldr	r2, [pc, #100]	@ (800927c <main+0xd8>)
 8009218:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800921c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800921e:	f3bf 8f4f 	dsb	sy
}
 8009222:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009224:	f3bf 8f6f 	isb	sy
}
 8009228:	e000      	b.n	800922c <main+0x88>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800922a:	bf00      	nop
	SCB_InvalidateICache();
	SCB_EnableICache();
	//SCB_InvalidateDCache();
	//SCB_EnableDCache();

    __HAL_RCC_DMA1_CLK_ENABLE();
 800922c:	4b14      	ldr	r3, [pc, #80]	@ (8009280 <main+0xdc>)
 800922e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009232:	4a13      	ldr	r2, [pc, #76]	@ (8009280 <main+0xdc>)
 8009234:	f043 0301 	orr.w	r3, r3, #1
 8009238:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800923c:	4b10      	ldr	r3, [pc, #64]	@ (8009280 <main+0xdc>)
 800923e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009242:	f003 0301 	and.w	r3, r3, #1
 8009246:	603b      	str	r3, [r7, #0]
 8009248:	683b      	ldr	r3, [r7, #0]

	MX_GPIO_Init(); 			// used for SD card detect
 800924a:	f000 f9a9 	bl	80095a0 <_ZL12MX_GPIO_Initv>
	MX_USART1_UART_Init();
 800924e:	f000 f947 	bl	80094e0 <_ZL19MX_USART1_UART_Initv>
	MX_SDMMC1_SD_Init();		// uncomment line 62 #define ENABLE_SD_DMA_CACHE_MAINTENANCE  1 in FATFT/Target/sd_diskio.c
 8009252:	f000 f919 	bl	8009488 <_ZL17MX_SDMMC1_SD_Initv>
	MX_FATFS_Init();
 8009256:	f018 f9d5 	bl	8021604 <MX_FATFS_Init>

	Remora *remora = new Remora();
 800925a:	2038      	movs	r0, #56	@ 0x38
 800925c:	f01a fe00 	bl	8023e60 <_Znwj>
 8009260:	4603      	mov	r3, r0
 8009262:	461c      	mov	r4, r3
 8009264:	4620      	mov	r0, r4
 8009266:	f000 fe27 	bl	8009eb8 <_ZN6RemoraC1Ev>
 800926a:	607c      	str	r4, [r7, #4]
	remora->run();
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f001 f88b 	bl	800a388 <_ZN6Remora3runEv>
}
 8009272:	2300      	movs	r3, #0
 8009274:	4618      	mov	r0, r3
 8009276:	370c      	adds	r7, #12
 8009278:	46bd      	mov	sp, r7
 800927a:	bd90      	pop	{r4, r7, pc}
 800927c:	e000ed00 	.word	0xe000ed00
 8009280:	58024400 	.word	0x58024400

08009284 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b09e      	sub	sp, #120	@ 0x78
 8009288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800928a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800928e:	224c      	movs	r2, #76	@ 0x4c
 8009290:	2100      	movs	r1, #0
 8009292:	4618      	mov	r0, r3
 8009294:	f01b fd2a 	bl	8024cec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009298:	f107 030c 	add.w	r3, r7, #12
 800929c:	2220      	movs	r2, #32
 800929e:	2100      	movs	r1, #0
 80092a0:	4618      	mov	r0, r3
 80092a2:	f01b fd23 	bl	8024cec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80092a6:	2002      	movs	r0, #2
 80092a8:	f010 ffac 	bl	801a204 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80092ac:	2300      	movs	r3, #0
 80092ae:	60bb      	str	r3, [r7, #8]
 80092b0:	4b56      	ldr	r3, [pc, #344]	@ (800940c <_Z18SystemClock_Configv+0x188>)
 80092b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092b4:	4a55      	ldr	r2, [pc, #340]	@ (800940c <_Z18SystemClock_Configv+0x188>)
 80092b6:	f023 0301 	bic.w	r3, r3, #1
 80092ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80092bc:	4b53      	ldr	r3, [pc, #332]	@ (800940c <_Z18SystemClock_Configv+0x188>)
 80092be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092c0:	f003 0301 	and.w	r3, r3, #1
 80092c4:	60bb      	str	r3, [r7, #8]
 80092c6:	4b52      	ldr	r3, [pc, #328]	@ (8009410 <_Z18SystemClock_Configv+0x18c>)
 80092c8:	699b      	ldr	r3, [r3, #24]
 80092ca:	4a51      	ldr	r2, [pc, #324]	@ (8009410 <_Z18SystemClock_Configv+0x18c>)
 80092cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80092d0:	6193      	str	r3, [r2, #24]
 80092d2:	4b4f      	ldr	r3, [pc, #316]	@ (8009410 <_Z18SystemClock_Configv+0x18c>)
 80092d4:	699b      	ldr	r3, [r3, #24]
 80092d6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80092da:	60bb      	str	r3, [r7, #8]
 80092dc:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80092de:	bf00      	nop
 80092e0:	4b4b      	ldr	r3, [pc, #300]	@ (8009410 <_Z18SystemClock_Configv+0x18c>)
 80092e2:	699b      	ldr	r3, [r3, #24]
 80092e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80092e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092ec:	bf14      	ite	ne
 80092ee:	2301      	movne	r3, #1
 80092f0:	2300      	moveq	r3, #0
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d1f3      	bne.n	80092e0 <_Z18SystemClock_Configv+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80092f8:	4b46      	ldr	r3, [pc, #280]	@ (8009414 <_Z18SystemClock_Configv+0x190>)
 80092fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80092fe:	4a45      	ldr	r2, [pc, #276]	@ (8009414 <_Z18SystemClock_Configv+0x190>)
 8009300:	f043 0302 	orr.w	r3, r3, #2
 8009304:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8009308:	4b42      	ldr	r3, [pc, #264]	@ (8009414 <_Z18SystemClock_Configv+0x190>)
 800930a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800930e:	f003 0302 	and.w	r3, r3, #2
 8009312:	607b      	str	r3, [r7, #4]
 8009314:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8009316:	2300      	movs	r3, #0
 8009318:	603b      	str	r3, [r7, #0]
 800931a:	4b3d      	ldr	r3, [pc, #244]	@ (8009410 <_Z18SystemClock_Configv+0x18c>)
 800931c:	699b      	ldr	r3, [r3, #24]
 800931e:	4a3c      	ldr	r2, [pc, #240]	@ (8009410 <_Z18SystemClock_Configv+0x18c>)
 8009320:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009324:	6193      	str	r3, [r2, #24]
 8009326:	4b3a      	ldr	r3, [pc, #232]	@ (8009410 <_Z18SystemClock_Configv+0x18c>)
 8009328:	699b      	ldr	r3, [r3, #24]
 800932a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800932e:	603b      	str	r3, [r7, #0]
 8009330:	4b36      	ldr	r3, [pc, #216]	@ (800940c <_Z18SystemClock_Configv+0x188>)
 8009332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009334:	4a35      	ldr	r2, [pc, #212]	@ (800940c <_Z18SystemClock_Configv+0x188>)
 8009336:	f043 0301 	orr.w	r3, r3, #1
 800933a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800933c:	4b33      	ldr	r3, [pc, #204]	@ (800940c <_Z18SystemClock_Configv+0x188>)
 800933e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009340:	f003 0301 	and.w	r3, r3, #1
 8009344:	603b      	str	r3, [r7, #0]
 8009346:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8009348:	bf00      	nop
 800934a:	4b31      	ldr	r3, [pc, #196]	@ (8009410 <_Z18SystemClock_Configv+0x18c>)
 800934c:	699b      	ldr	r3, [r3, #24]
 800934e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009352:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009356:	bf14      	ite	ne
 8009358:	2301      	movne	r3, #1
 800935a:	2300      	moveq	r3, #0
 800935c:	b2db      	uxtb	r3, r3
 800935e:	2b00      	cmp	r3, #0
 8009360:	d1f3      	bne.n	800934a <_Z18SystemClock_Configv+0xc6>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8009362:	4b2c      	ldr	r3, [pc, #176]	@ (8009414 <_Z18SystemClock_Configv+0x190>)
 8009364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009366:	f023 0303 	bic.w	r3, r3, #3
 800936a:	4a2a      	ldr	r2, [pc, #168]	@ (8009414 <_Z18SystemClock_Configv+0x190>)
 800936c:	f043 0302 	orr.w	r3, r3, #2
 8009370:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009372:	2301      	movs	r3, #1
 8009374:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009376:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800937a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800937c:	2302      	movs	r3, #2
 800937e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009380:	2302      	movs	r3, #2
 8009382:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8009384:	2305      	movs	r3, #5
 8009386:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8009388:	23c0      	movs	r3, #192	@ 0xc0
 800938a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 800938c:	2302      	movs	r3, #2
 800938e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8009390:	2304      	movs	r3, #4
 8009392:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8009394:	2302      	movs	r3, #2
 8009396:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8009398:	2308      	movs	r3, #8
 800939a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800939c:	2300      	movs	r3, #0
 800939e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80093a0:	2300      	movs	r3, #0
 80093a2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80093a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80093a8:	4618      	mov	r0, r3
 80093aa:	f010 ff65 	bl	801a278 <HAL_RCC_OscConfig>
 80093ae:	4603      	mov	r3, r0
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	bf14      	ite	ne
 80093b4:	2301      	movne	r3, #1
 80093b6:	2300      	moveq	r3, #0
 80093b8:	b2db      	uxtb	r3, r3
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d001      	beq.n	80093c2 <_Z18SystemClock_Configv+0x13e>
  {
    Error_Handler();
 80093be:	f000 f993 	bl	80096e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80093c2:	233f      	movs	r3, #63	@ 0x3f
 80093c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80093c6:	2303      	movs	r3, #3
 80093c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80093ca:	2300      	movs	r3, #0
 80093cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80093ce:	2308      	movs	r3, #8
 80093d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80093d2:	2340      	movs	r3, #64	@ 0x40
 80093d4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80093d6:	2340      	movs	r3, #64	@ 0x40
 80093d8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80093da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80093de:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80093e0:	2340      	movs	r3, #64	@ 0x40
 80093e2:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80093e4:	f107 030c 	add.w	r3, r7, #12
 80093e8:	2104      	movs	r1, #4
 80093ea:	4618      	mov	r0, r3
 80093ec:	f011 fb9e 	bl	801ab2c <HAL_RCC_ClockConfig>
 80093f0:	4603      	mov	r3, r0
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	bf14      	ite	ne
 80093f6:	2301      	movne	r3, #1
 80093f8:	2300      	moveq	r3, #0
 80093fa:	b2db      	uxtb	r3, r3
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d001      	beq.n	8009404 <_Z18SystemClock_Configv+0x180>
  {
    Error_Handler();
 8009400:	f000 f972 	bl	80096e8 <Error_Handler>
  }
}
 8009404:	bf00      	nop
 8009406:	3778      	adds	r7, #120	@ 0x78
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}
 800940c:	58000400 	.word	0x58000400
 8009410:	58024800 	.word	0x58024800
 8009414:	58024400 	.word	0x58024400

08009418 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b0b0      	sub	sp, #192	@ 0xc0
 800941c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800941e:	463b      	mov	r3, r7
 8009420:	22c0      	movs	r2, #192	@ 0xc0
 8009422:	2100      	movs	r1, #0
 8009424:	4618      	mov	r0, r3
 8009426:	f01b fc61 	bl	8024cec <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SPI1;
 800942a:	f44f 3288 	mov.w	r2, #69632	@ 0x11000
 800942e:	f04f 0300 	mov.w	r3, #0
 8009432:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8009436:	2302      	movs	r3, #2
 8009438:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 800943a:	230c      	movs	r3, #12
 800943c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 800943e:	2301      	movs	r3, #1
 8009440:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 10;
 8009442:	230a      	movs	r3, #10
 8009444:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8009446:	2302      	movs	r3, #2
 8009448:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800944a:	23c0      	movs	r3, #192	@ 0xc0
 800944c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800944e:	2320      	movs	r3, #32
 8009450:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8009452:	2300      	movs	r3, #0
 8009454:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8009456:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800945a:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800945c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009460:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009462:	463b      	mov	r3, r7
 8009464:	4618      	mov	r0, r3
 8009466:	f011 feed 	bl	801b244 <HAL_RCCEx_PeriphCLKConfig>
 800946a:	4603      	mov	r3, r0
 800946c:	2b00      	cmp	r3, #0
 800946e:	bf14      	ite	ne
 8009470:	2301      	movne	r3, #1
 8009472:	2300      	moveq	r3, #0
 8009474:	b2db      	uxtb	r3, r3
 8009476:	2b00      	cmp	r3, #0
 8009478:	d001      	beq.n	800947e <_Z24PeriphCommonClock_Configv+0x66>
  {
    Error_Handler();
 800947a:	f000 f935 	bl	80096e8 <Error_Handler>
  }
}
 800947e:	bf00      	nop
 8009480:	37c0      	adds	r7, #192	@ 0xc0
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
	...

08009488 <_ZL17MX_SDMMC1_SD_Initv>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800948c:	4b11      	ldr	r3, [pc, #68]	@ (80094d4 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800948e:	4a12      	ldr	r2, [pc, #72]	@ (80094d8 <_ZL17MX_SDMMC1_SD_Initv+0x50>)
 8009490:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8009492:	4b10      	ldr	r3, [pc, #64]	@ (80094d4 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8009494:	2200      	movs	r2, #0
 8009496:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_ENABLE;
 8009498:	4b0e      	ldr	r3, [pc, #56]	@ (80094d4 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800949a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800949e:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80094a0:	4b0c      	ldr	r3, [pc, #48]	@ (80094d4 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 80094a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80094a6:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80094a8:	4b0a      	ldr	r3, [pc, #40]	@ (80094d4 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 80094aa:	2200      	movs	r2, #0
 80094ac:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 8;
 80094ae:	4b09      	ldr	r3, [pc, #36]	@ (80094d4 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 80094b0:	2208      	movs	r2, #8
 80094b2:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 80094b4:	4807      	ldr	r0, [pc, #28]	@ (80094d4 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 80094b6:	f014 fbc3 	bl	801dc40 <HAL_SD_Init>
 80094ba:	4603      	mov	r3, r0
 80094bc:	2b00      	cmp	r3, #0
 80094be:	bf14      	ite	ne
 80094c0:	2301      	movne	r3, #1
 80094c2:	2300      	moveq	r3, #0
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d002      	beq.n	80094d0 <_ZL17MX_SDMMC1_SD_Initv+0x48>
  {
      printf("SD_Init error\n");
 80094ca:	4804      	ldr	r0, [pc, #16]	@ (80094dc <_ZL17MX_SDMMC1_SD_Initv+0x54>)
 80094cc:	f01b fb04 	bl	8024ad8 <puts>
  }
  /* USER CODE END SDMMC1_Init 2 */

}
 80094d0:	bf00      	nop
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	240002f8 	.word	0x240002f8
 80094d8:	52007000 	.word	0x52007000
 80094dc:	08025bd8 	.word	0x08025bd8

080094e0 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80094e4:	4b2c      	ldr	r3, [pc, #176]	@ (8009598 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80094e6:	4a2d      	ldr	r2, [pc, #180]	@ (800959c <_ZL19MX_USART1_UART_Initv+0xbc>)
 80094e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = Config::pcBaud;
 80094ea:	4b2b      	ldr	r3, [pc, #172]	@ (8009598 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80094ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80094f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80094f2:	4b29      	ldr	r3, [pc, #164]	@ (8009598 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80094f4:	2200      	movs	r2, #0
 80094f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80094f8:	4b27      	ldr	r3, [pc, #156]	@ (8009598 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80094fa:	2200      	movs	r2, #0
 80094fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80094fe:	4b26      	ldr	r3, [pc, #152]	@ (8009598 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8009500:	2200      	movs	r2, #0
 8009502:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009504:	4b24      	ldr	r3, [pc, #144]	@ (8009598 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8009506:	220c      	movs	r2, #12
 8009508:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800950a:	4b23      	ldr	r3, [pc, #140]	@ (8009598 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800950c:	2200      	movs	r2, #0
 800950e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009510:	4b21      	ldr	r3, [pc, #132]	@ (8009598 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8009512:	2200      	movs	r2, #0
 8009514:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009516:	4b20      	ldr	r3, [pc, #128]	@ (8009598 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8009518:	2200      	movs	r2, #0
 800951a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800951c:	4b1e      	ldr	r3, [pc, #120]	@ (8009598 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800951e:	2200      	movs	r2, #0
 8009520:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009522:	4b1d      	ldr	r3, [pc, #116]	@ (8009598 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8009524:	2200      	movs	r2, #0
 8009526:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009528:	481b      	ldr	r0, [pc, #108]	@ (8009598 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800952a:	f016 f936 	bl	801f79a <HAL_UART_Init>
 800952e:	4603      	mov	r3, r0
 8009530:	2b00      	cmp	r3, #0
 8009532:	bf14      	ite	ne
 8009534:	2301      	movne	r3, #1
 8009536:	2300      	moveq	r3, #0
 8009538:	b2db      	uxtb	r3, r3
 800953a:	2b00      	cmp	r3, #0
 800953c:	d001      	beq.n	8009542 <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 800953e:	f000 f8d3 	bl	80096e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009542:	2100      	movs	r1, #0
 8009544:	4814      	ldr	r0, [pc, #80]	@ (8009598 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8009546:	f017 f9c8 	bl	80208da <HAL_UARTEx_SetTxFifoThreshold>
 800954a:	4603      	mov	r3, r0
 800954c:	2b00      	cmp	r3, #0
 800954e:	bf14      	ite	ne
 8009550:	2301      	movne	r3, #1
 8009552:	2300      	moveq	r3, #0
 8009554:	b2db      	uxtb	r3, r3
 8009556:	2b00      	cmp	r3, #0
 8009558:	d001      	beq.n	800955e <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 800955a:	f000 f8c5 	bl	80096e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800955e:	2100      	movs	r1, #0
 8009560:	480d      	ldr	r0, [pc, #52]	@ (8009598 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8009562:	f017 f9f8 	bl	8020956 <HAL_UARTEx_SetRxFifoThreshold>
 8009566:	4603      	mov	r3, r0
 8009568:	2b00      	cmp	r3, #0
 800956a:	bf14      	ite	ne
 800956c:	2301      	movne	r3, #1
 800956e:	2300      	moveq	r3, #0
 8009570:	b2db      	uxtb	r3, r3
 8009572:	2b00      	cmp	r3, #0
 8009574:	d001      	beq.n	800957a <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 8009576:	f000 f8b7 	bl	80096e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800957a:	4807      	ldr	r0, [pc, #28]	@ (8009598 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800957c:	f017 f974 	bl	8020868 <HAL_UARTEx_DisableFifoMode>
 8009580:	4603      	mov	r3, r0
 8009582:	2b00      	cmp	r3, #0
 8009584:	bf14      	ite	ne
 8009586:	2301      	movne	r3, #1
 8009588:	2300      	moveq	r3, #0
 800958a:	b2db      	uxtb	r3, r3
 800958c:	2b00      	cmp	r3, #0
 800958e:	d001      	beq.n	8009594 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8009590:	f000 f8aa 	bl	80096e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8009594:	bf00      	nop
 8009596:	bd80      	pop	{r7, pc}
 8009598:	24000374 	.word	0x24000374
 800959c:	40011000 	.word	0x40011000

080095a0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b08a      	sub	sp, #40	@ 0x28
 80095a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80095a6:	f107 0314 	add.w	r3, r7, #20
 80095aa:	2200      	movs	r2, #0
 80095ac:	601a      	str	r2, [r3, #0]
 80095ae:	605a      	str	r2, [r3, #4]
 80095b0:	609a      	str	r2, [r3, #8]
 80095b2:	60da      	str	r2, [r3, #12]
 80095b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80095b6:	4b26      	ldr	r3, [pc, #152]	@ (8009650 <_ZL12MX_GPIO_Initv+0xb0>)
 80095b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80095bc:	4a24      	ldr	r2, [pc, #144]	@ (8009650 <_ZL12MX_GPIO_Initv+0xb0>)
 80095be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80095c6:	4b22      	ldr	r3, [pc, #136]	@ (8009650 <_ZL12MX_GPIO_Initv+0xb0>)
 80095c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80095cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095d0:	613b      	str	r3, [r7, #16]
 80095d2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80095d4:	4b1e      	ldr	r3, [pc, #120]	@ (8009650 <_ZL12MX_GPIO_Initv+0xb0>)
 80095d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80095da:	4a1d      	ldr	r2, [pc, #116]	@ (8009650 <_ZL12MX_GPIO_Initv+0xb0>)
 80095dc:	f043 0304 	orr.w	r3, r3, #4
 80095e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80095e4:	4b1a      	ldr	r3, [pc, #104]	@ (8009650 <_ZL12MX_GPIO_Initv+0xb0>)
 80095e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80095ea:	f003 0304 	and.w	r3, r3, #4
 80095ee:	60fb      	str	r3, [r7, #12]
 80095f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80095f2:	4b17      	ldr	r3, [pc, #92]	@ (8009650 <_ZL12MX_GPIO_Initv+0xb0>)
 80095f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80095f8:	4a15      	ldr	r2, [pc, #84]	@ (8009650 <_ZL12MX_GPIO_Initv+0xb0>)
 80095fa:	f043 0301 	orr.w	r3, r3, #1
 80095fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8009602:	4b13      	ldr	r3, [pc, #76]	@ (8009650 <_ZL12MX_GPIO_Initv+0xb0>)
 8009604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009608:	f003 0301 	and.w	r3, r3, #1
 800960c:	60bb      	str	r3, [r7, #8]
 800960e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009610:	4b0f      	ldr	r3, [pc, #60]	@ (8009650 <_ZL12MX_GPIO_Initv+0xb0>)
 8009612:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009616:	4a0e      	ldr	r2, [pc, #56]	@ (8009650 <_ZL12MX_GPIO_Initv+0xb0>)
 8009618:	f043 0308 	orr.w	r3, r3, #8
 800961c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8009620:	4b0b      	ldr	r3, [pc, #44]	@ (8009650 <_ZL12MX_GPIO_Initv+0xb0>)
 8009622:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009626:	f003 0308 	and.w	r3, r3, #8
 800962a:	607b      	str	r3, [r7, #4]
 800962c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800962e:	2310      	movs	r3, #16
 8009630:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009632:	2300      	movs	r3, #0
 8009634:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009636:	2300      	movs	r3, #0
 8009638:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800963a:	f107 0314 	add.w	r3, r7, #20
 800963e:	4619      	mov	r1, r3
 8009640:	4804      	ldr	r0, [pc, #16]	@ (8009654 <_ZL12MX_GPIO_Initv+0xb4>)
 8009642:	f010 fbfd 	bl	8019e40 <HAL_GPIO_Init>

}
 8009646:	bf00      	nop
 8009648:	3728      	adds	r7, #40	@ 0x28
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}
 800964e:	bf00      	nop
 8009650:	58024400 	.word	0x58024400
 8009654:	58020800 	.word	0x58020800

08009658 <_ZL10MPU_Configv>:
/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

void MPU_Config(void)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800965e:	463b      	mov	r3, r7
 8009660:	2200      	movs	r2, #0
 8009662:	601a      	str	r2, [r3, #0]
 8009664:	605a      	str	r2, [r3, #4]
 8009666:	609a      	str	r2, [r3, #8]
 8009668:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800966a:	f00e f831 	bl	80176d0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800966e:	2301      	movs	r3, #1
 8009670:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8009672:	2300      	movs	r3, #0
 8009674:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8009676:	2300      	movs	r3, #0
 8009678:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800967a:	231f      	movs	r3, #31
 800967c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800967e:	2387      	movs	r3, #135	@ 0x87
 8009680:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8009682:	2300      	movs	r3, #0
 8009684:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8009686:	2300      	movs	r3, #0
 8009688:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800968a:	2301      	movs	r3, #1
 800968c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800968e:	2301      	movs	r3, #1
 8009690:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8009692:	2300      	movs	r3, #0
 8009694:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8009696:	2300      	movs	r3, #0
 8009698:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800969a:	463b      	mov	r3, r7
 800969c:	4618      	mov	r0, r3
 800969e:	f00e f84f 	bl	8017740 <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes as Device not cacheable
     for DMA buffers */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80096a2:	2301      	movs	r3, #1
 80096a4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x30000000;
 80096a6:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80096aa:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 80096ac:	2307      	movs	r3, #7
 80096ae:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80096b0:	2303      	movs	r3, #3
 80096b2:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80096b4:	2301      	movs	r3, #1
 80096b6:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80096b8:	2300      	movs	r3, #0
 80096ba:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80096bc:	2300      	movs	r3, #0
 80096be:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80096c0:	2301      	movs	r3, #1
 80096c2:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80096c4:	2300      	movs	r3, #0
 80096c6:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 80096c8:	2300      	movs	r3, #0
 80096ca:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80096cc:	2300      	movs	r3, #0
 80096ce:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80096d0:	463b      	mov	r3, r7
 80096d2:	4618      	mov	r0, r3
 80096d4:	f00e f834 	bl	8017740 <HAL_MPU_ConfigRegion>

  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80096d8:	2004      	movs	r0, #4
 80096da:	f00e f811 	bl	8017700 <HAL_MPU_Enable>

}
 80096de:	bf00      	nop
 80096e0:	3710      	adds	r7, #16
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}
	...

080096e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	printf("error\n\r");
 80096ec:	4803      	ldr	r0, [pc, #12]	@ (80096fc <Error_Handler+0x14>)
 80096ee:	f01b f983 	bl	80249f8 <iprintf>
  __ASM volatile ("cpsid i" : : : "memory");
 80096f2:	b672      	cpsid	i
}
 80096f4:	bf00      	nop

  __disable_irq();
  while (1)
 80096f6:	bf00      	nop
 80096f8:	e7fd      	b.n	80096f6 <Error_Handler+0xe>
 80096fa:	bf00      	nop
 80096fc:	08025be8 	.word	0x08025be8

08009700 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8009700:	b480      	push	{r7}
 8009702:	b083      	sub	sp, #12
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	6039      	str	r1, [r7, #0]
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	4618      	mov	r0, r3
 800970e:	370c      	adds	r7, #12
 8009710:	46bd      	mov	sp, r7
 8009712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009716:	4770      	bx	lr

08009718 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>:
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 8009718:	b480      	push	{r7}
 800971a:	b083      	sub	sp, #12
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	1c5a      	adds	r2, r3, #1
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	605a      	str	r2, [r3, #4]
 800972a:	bf00      	nop
 800972c:	370c      	adds	r7, #12
 800972e:	46bd      	mov	sp, r7
 8009730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009734:	4770      	bx	lr

08009736 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
 8009736:	b580      	push	{r7, lr}
 8009738:	b082      	sub	sp, #8
 800973a:	af00      	add	r7, sp, #0
 800973c:	6078      	str	r0, [r7, #4]
      if (--_M_use_count == 0)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	1e5a      	subs	r2, r3, #1
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	605a      	str	r2, [r3, #4]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	685b      	ldr	r3, [r3, #4]
 800974c:	2b00      	cmp	r3, #0
 800974e:	bf0c      	ite	eq
 8009750:	2301      	moveq	r3, #1
 8009752:	2300      	movne	r3, #0
 8009754:	b2db      	uxtb	r3, r3
 8009756:	2b00      	cmp	r3, #0
 8009758:	d019      	beq.n	800978e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
        {
          _M_dispose();
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	3308      	adds	r3, #8
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	689b      	ldr	r3, [r3, #8]
 800976a:	1e5a      	subs	r2, r3, #1
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	609a      	str	r2, [r3, #8]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	689b      	ldr	r3, [r3, #8]
 8009774:	2b00      	cmp	r3, #0
 8009776:	bf0c      	ite	eq
 8009778:	2301      	moveq	r3, #1
 800977a:	2300      	movne	r3, #0
 800977c:	b2db      	uxtb	r3, r3
 800977e:	2b00      	cmp	r3, #0
 8009780:	d005      	beq.n	800978e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
            _M_destroy();
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	330c      	adds	r3, #12
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	4798      	blx	r3
        }
    }
 800978e:	bf00      	nop
 8009790:	3708      	adds	r7, #8
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
	...

08009798 <_ZNSt19_Sp_make_shared_tag5_S_tiEv>:
  private:
    template<typename _Tp, typename _Alloc, _Lock_policy _Lp>
      friend class _Sp_counted_ptr_inplace;

    static const type_info&
    _S_ti() noexcept _GLIBCXX_VISIBILITY(default)
 8009798:	b480      	push	{r7}
 800979a:	af00      	add	r7, sp, #0
    {
      alignas(type_info) static constexpr char __tag[sizeof(type_info)] = { };
      return reinterpret_cast<const type_info&>(__tag);
 800979c:	4b02      	ldr	r3, [pc, #8]	@ (80097a8 <_ZNSt19_Sp_make_shared_tag5_S_tiEv+0x10>)
    }
 800979e:	4618      	mov	r0, r3
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr
 80097a8:	080266fc 	.word	0x080266fc

080097ac <_ZN8txData_tC1Ev>:
    int32_t jointFeedback[Config::joints];	  // Base thread feedback ??
    float processVariable[Config::variables];		     // Servo thread feedback ??
	uint16_t inputs;
  };

  txData_t() {
 80097ac:	b480      	push	{r7}
 80097ae:	b085      	sub	sp, #20
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
      header = 0;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2200      	movs	r2, #0
 80097b8:	601a      	str	r2, [r3, #0]
      inputs = 0;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2200      	movs	r2, #0
 80097be:	879a      	strh	r2, [r3, #60]	@ 0x3c
      for (uint8_t i=0;i<Config::joints;i++) {
 80097c0:	2300      	movs	r3, #0
 80097c2:	73fb      	strb	r3, [r7, #15]
 80097c4:	e008      	b.n	80097d8 <_ZN8txData_tC1Ev+0x2c>
         jointFeedback[i] = 0;
 80097c6:	7bfb      	ldrb	r3, [r7, #15]
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	009b      	lsls	r3, r3, #2
 80097cc:	4413      	add	r3, r2
 80097ce:	2200      	movs	r2, #0
 80097d0:	605a      	str	r2, [r3, #4]
      for (uint8_t i=0;i<Config::joints;i++) {
 80097d2:	7bfb      	ldrb	r3, [r7, #15]
 80097d4:	3301      	adds	r3, #1
 80097d6:	73fb      	strb	r3, [r7, #15]
 80097d8:	7bfb      	ldrb	r3, [r7, #15]
 80097da:	2b07      	cmp	r3, #7
 80097dc:	d9f3      	bls.n	80097c6 <_ZN8txData_tC1Ev+0x1a>
      }
      for (uint8_t i=0;i<Config::variables;i++) {
 80097de:	2300      	movs	r3, #0
 80097e0:	73bb      	strb	r3, [r7, #14]
 80097e2:	e00b      	b.n	80097fc <_ZN8txData_tC1Ev+0x50>
         processVariable[i] = 0.0;
 80097e4:	7bbb      	ldrb	r3, [r7, #14]
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	3308      	adds	r3, #8
 80097ea:	009b      	lsls	r3, r3, #2
 80097ec:	4413      	add	r3, r2
 80097ee:	3304      	adds	r3, #4
 80097f0:	f04f 0200 	mov.w	r2, #0
 80097f4:	601a      	str	r2, [r3, #0]
      for (uint8_t i=0;i<Config::variables;i++) {
 80097f6:	7bbb      	ldrb	r3, [r7, #14]
 80097f8:	3301      	adds	r3, #1
 80097fa:	73bb      	strb	r3, [r7, #14]
 80097fc:	7bbb      	ldrb	r3, [r7, #14]
 80097fe:	2b05      	cmp	r3, #5
 8009800:	d9f0      	bls.n	80097e4 <_ZN8txData_tC1Ev+0x38>
     }
  }
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	4618      	mov	r0, r3
 8009806:	3714      	adds	r7, #20
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr

08009810 <_ZNK11ArduinoJson8V730HB226detail9RamString8isStaticEv>:
  bool isStatic() const {
 8009810:	b480      	push	{r7}
 8009812:	b083      	sub	sp, #12
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
    return static_;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	7a1b      	ldrb	r3, [r3, #8]
  }
 800981c:	4618      	mov	r0, r3
 800981e:	370c      	adds	r7, #12
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr

08009828 <_ZN11ArduinoJson8V730HB226detail10StringPoolD1Ev>:
  ~StringPool() {
 8009828:	b480      	push	{r7}
 800982a:	b083      	sub	sp, #12
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  }
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	4618      	mov	r0, r3
 8009834:	370c      	adds	r7, #12
 8009836:	46bd      	mov	sp, r7
 8009838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983c:	4770      	bx	lr

0800983e <_ZN11ArduinoJson8V730HB226detail9ArrayData10getElementEPKS2_jPKNS1_15ResourceManagerE>:

  VariantData* getOrAddElement(size_t index, ResourceManager* resources);

  VariantData* getElement(size_t index, const ResourceManager* resources) const;

  static VariantData* getElement(const ArrayData* array, size_t index,
 800983e:	b580      	push	{r7, lr}
 8009840:	b084      	sub	sp, #16
 8009842:	af00      	add	r7, sp, #0
 8009844:	60f8      	str	r0, [r7, #12]
 8009846:	60b9      	str	r1, [r7, #8]
 8009848:	607a      	str	r2, [r7, #4]
                                 const ResourceManager* resources) {
    if (!array)
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d101      	bne.n	8009854 <_ZN11ArduinoJson8V730HB226detail9ArrayData10getElementEPKS2_jPKNS1_15ResourceManagerE+0x16>
      return nullptr;
 8009850:	2300      	movs	r3, #0
 8009852:	e006      	b.n	8009862 <_ZN11ArduinoJson8V730HB226detail9ArrayData10getElementEPKS2_jPKNS1_15ResourceManagerE+0x24>
    return array->getElement(index, resources);
 8009854:	687a      	ldr	r2, [r7, #4]
 8009856:	68b9      	ldr	r1, [r7, #8]
 8009858:	68f8      	ldr	r0, [r7, #12]
 800985a:	f000 f9ab 	bl	8009bb4 <_ZNK11ArduinoJson8V730HB226detail9ArrayData10getElementEjPKNS1_15ResourceManagerE>
 800985e:	4603      	mov	r3, r0
 8009860:	bf00      	nop
  }
 8009862:	4618      	mov	r0, r3
 8009864:	3710      	adds	r7, #16
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}

0800986a <_ZNK11ArduinoJson8V730HB226detail11VariantData7asArrayEv>:
  const ArrayData* asArray() const {
 800986a:	b580      	push	{r7, lr}
 800986c:	b082      	sub	sp, #8
 800986e:	af00      	add	r7, sp, #0
 8009870:	6078      	str	r0, [r7, #4]
    return const_cast<VariantData*>(this)->asArray();
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f7fa fd23 	bl	80042be <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv>
 8009878:	4603      	mov	r3, r0
  }
 800987a:	4618      	mov	r0, r3
 800987c:	3708      	adds	r7, #8
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}

08009882 <_ZNK11ArduinoJson8V730HB226detail11VariantData10getElementEjPKNS1_15ResourceManagerE>:
  VariantData* getElement(size_t index,
 8009882:	b580      	push	{r7, lr}
 8009884:	b084      	sub	sp, #16
 8009886:	af00      	add	r7, sp, #0
 8009888:	60f8      	str	r0, [r7, #12]
 800988a:	60b9      	str	r1, [r7, #8]
 800988c:	607a      	str	r2, [r7, #4]
    return ArrayData::getElement(asArray(), index, resources);
 800988e:	68f8      	ldr	r0, [r7, #12]
 8009890:	f7ff ffeb 	bl	800986a <_ZNK11ArduinoJson8V730HB226detail11VariantData7asArrayEv>
 8009894:	4603      	mov	r3, r0
 8009896:	687a      	ldr	r2, [r7, #4]
 8009898:	68b9      	ldr	r1, [r7, #8]
 800989a:	4618      	mov	r0, r3
 800989c:	f7ff ffcf 	bl	800983e <_ZN11ArduinoJson8V730HB226detail9ArrayData10getElementEPKS2_jPKNS1_15ResourceManagerE>
 80098a0:	4603      	mov	r3, r0
  }
 80098a2:	4618      	mov	r0, r3
 80098a4:	3710      	adds	r7, #16
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}

080098aa <_ZN11ArduinoJson8V730HB226detail11VariantData10getElementEPKS2_jPKNS1_15ResourceManagerE>:
  static VariantData* getElement(const VariantData* var, size_t index,
 80098aa:	b580      	push	{r7, lr}
 80098ac:	b084      	sub	sp, #16
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	60f8      	str	r0, [r7, #12]
 80098b2:	60b9      	str	r1, [r7, #8]
 80098b4:	607a      	str	r2, [r7, #4]
    return var != 0 ? var->getElement(index, resources) : 0;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d006      	beq.n	80098ca <_ZN11ArduinoJson8V730HB226detail11VariantData10getElementEPKS2_jPKNS1_15ResourceManagerE+0x20>
 80098bc:	687a      	ldr	r2, [r7, #4]
 80098be:	68b9      	ldr	r1, [r7, #8]
 80098c0:	68f8      	ldr	r0, [r7, #12]
 80098c2:	f7ff ffde 	bl	8009882 <_ZNK11ArduinoJson8V730HB226detail11VariantData10getElementEjPKNS1_15ResourceManagerE>
 80098c6:	4603      	mov	r3, r0
 80098c8:	e000      	b.n	80098cc <_ZN11ArduinoJson8V730HB226detail11VariantData10getElementEPKS2_jPKNS1_15ResourceManagerE+0x22>
 80098ca:	2300      	movs	r3, #0
  }
 80098cc:	4618      	mov	r0, r3
 80098ce:	3710      	adds	r7, #16
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE>:
  VariantData* getOrAddElement(size_t index, ResourceManager* resources) {
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b086      	sub	sp, #24
 80098d8:	af00      	add	r7, sp, #0
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	60b9      	str	r1, [r7, #8]
 80098de:	607a      	str	r2, [r7, #4]
    auto array = isNull() ? &toArray() : asArray();
 80098e0:	68f8      	ldr	r0, [r7, #12]
 80098e2:	f000 f81d 	bl	8009920 <_ZNK11ArduinoJson8V730HB226detail11VariantData6isNullEv>
 80098e6:	4603      	mov	r3, r0
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d004      	beq.n	80098f6 <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE+0x22>
 80098ec:	68f8      	ldr	r0, [r7, #12]
 80098ee:	f7fa fdeb 	bl	80044c8 <_ZN11ArduinoJson8V730HB226detail11VariantData7toArrayEv>
 80098f2:	4603      	mov	r3, r0
 80098f4:	e003      	b.n	80098fe <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE+0x2a>
 80098f6:	68f8      	ldr	r0, [r7, #12]
 80098f8:	f7fa fce1 	bl	80042be <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv>
 80098fc:	4603      	mov	r3, r0
 80098fe:	617b      	str	r3, [r7, #20]
    if (!array)
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d101      	bne.n	800990a <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE+0x36>
      return nullptr;
 8009906:	2300      	movs	r3, #0
 8009908:	e006      	b.n	8009918 <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE+0x44>
    return array->getOrAddElement(index, resources);
 800990a:	687a      	ldr	r2, [r7, #4]
 800990c:	68b9      	ldr	r1, [r7, #8]
 800990e:	6978      	ldr	r0, [r7, #20]
 8009910:	f000 f8ff 	bl	8009b12 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE>
 8009914:	4603      	mov	r3, r0
 8009916:	bf00      	nop
  }
 8009918:	4618      	mov	r0, r3
 800991a:	3718      	adds	r7, #24
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}

08009920 <_ZNK11ArduinoJson8V730HB226detail11VariantData6isNullEv>:
  bool isNull() const {
 8009920:	b480      	push	{r7}
 8009922:	b083      	sub	sp, #12
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
    return type_ == VariantType::Null;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	791b      	ldrb	r3, [r3, #4]
 800992c:	2b00      	cmp	r3, #0
 800992e:	bf0c      	ite	eq
 8009930:	2301      	moveq	r3, #1
 8009932:	2300      	movne	r3, #0
 8009934:	b2db      	uxtb	r3, r3
  }
 8009936:	4618      	mov	r0, r3
 8009938:	370c      	adds	r7, #12
 800993a:	46bd      	mov	sp, r7
 800993c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009940:	4770      	bx	lr

08009942 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv>:
  bool isString() const {
 8009942:	b480      	push	{r7}
 8009944:	b083      	sub	sp, #12
 8009946:	af00      	add	r7, sp, #0
 8009948:	6078      	str	r0, [r7, #4]
    return type_ == VariantType::LinkedString ||
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	791b      	ldrb	r3, [r3, #4]
 800994e:	2b04      	cmp	r3, #4
 8009950:	d003      	beq.n	800995a <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv+0x18>
           type_ == VariantType::OwnedString;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	791b      	ldrb	r3, [r3, #4]
    return type_ == VariantType::LinkedString ||
 8009956:	2b05      	cmp	r3, #5
 8009958:	d101      	bne.n	800995e <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv+0x1c>
 800995a:	2301      	movs	r3, #1
 800995c:	e000      	b.n	8009960 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv+0x1e>
 800995e:	2300      	movs	r3, #0
  }
 8009960:	4618      	mov	r0, r3
 8009962:	370c      	adds	r7, #12
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr

0800996c <_ZN11ArduinoJson8V730HB226detail11VariantData15setLinkedStringEPKc>:
  void setLinkedString(const char* s) {
 800996c:	b480      	push	{r7}
 800996e:	b083      	sub	sp, #12
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	6039      	str	r1, [r7, #0]
    type_ = VariantType::LinkedString;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2204      	movs	r2, #4
 800997a:	711a      	strb	r2, [r3, #4]
    content_.asLinkedString = s;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	683a      	ldr	r2, [r7, #0]
 8009980:	601a      	str	r2, [r3, #0]
  }
 8009982:	bf00      	nop
 8009984:	370c      	adds	r7, #12
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr

0800998e <_ZN11ArduinoJson8V730HB226detail15ResourceManagerD1Ev>:
  ~ResourceManager() {
 800998e:	b580      	push	{r7, lr}
 8009990:	b082      	sub	sp, #8
 8009992:	af00      	add	r7, sp, #0
 8009994:	6078      	str	r0, [r7, #4]
    stringPool_.clear(allocator_);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f103 0208 	add.w	r2, r3, #8
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4619      	mov	r1, r3
 80099a2:	4610      	mov	r0, r2
 80099a4:	f7fa fb1a 	bl	8003fdc <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE>
    variantPools_.clear(allocator_);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f103 020c 	add.w	r2, r3, #12
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	4619      	mov	r1, r3
 80099b4:	4610      	mov	r0, r2
 80099b6:	f7fc fb9b 	bl	80060f0 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE>
  }
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	330c      	adds	r3, #12
 80099be:	4618      	mov	r0, r3
 80099c0:	f000 fff3 	bl	800a9aa <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEED1Ev>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	3308      	adds	r3, #8
 80099c8:	4618      	mov	r0, r3
 80099ca:	f7ff ff2d 	bl	8009828 <_ZN11ArduinoJson8V730HB226detail10StringPoolD1Ev>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	4618      	mov	r0, r3
 80099d2:	3708      	adds	r7, #8
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}

080099d8 <_ZN11ArduinoJson8V730HB229ConverterINS0_11JsonVariantEvE8fromJsonES2_>:
  static JsonVariant fromJson(JsonVariant src) {
 80099d8:	b480      	push	{r7}
 80099da:	b085      	sub	sp, #20
 80099dc:	af00      	add	r7, sp, #0
 80099de:	60f8      	str	r0, [r7, #12]
 80099e0:	1d3b      	adds	r3, r7, #4
 80099e2:	e883 0006 	stmia.w	r3, {r1, r2}
    return src;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	461a      	mov	r2, r3
 80099ea:	1d3b      	adds	r3, r7, #4
 80099ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 80099f0:	e882 0003 	stmia.w	r2, {r0, r1}
  }
 80099f4:	68f8      	ldr	r0, [r7, #12]
 80099f6:	3714      	adds	r7, #20
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr

08009a00 <_ZNK11ArduinoJson8V730HB229JsonArray6isNullEv>:
    return JsonVariantConst(collectionToVariant(data_), resources_);
  }

  // Returns true if the reference is unbound.
  // https://arduinojson.org/v7/api/jsonarray/isnull/
  bool isNull() const {
 8009a00:	b480      	push	{r7}
 8009a02:	b083      	sub	sp, #12
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
    return data_ == 0;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	bf0c      	ite	eq
 8009a10:	2301      	moveq	r3, #1
 8009a12:	2300      	movne	r3, #0
 8009a14:	b2db      	uxtb	r3, r3
  }
 8009a16:	4618      	mov	r0, r3
 8009a18:	370c      	adds	r7, #12
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a20:	4770      	bx	lr

08009a22 <_ZNK11ArduinoJson8V730HB229JsonArray4sizeEv>:
    return detail::VariantData::nesting(collectionToVariant(data_), resources_);
  }

  // Returns the number of elements in the array.
  // https://arduinojson.org/v7/api/jsonarray/size/
  size_t size() const {
 8009a22:	b580      	push	{r7, lr}
 8009a24:	b082      	sub	sp, #8
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	6078      	str	r0, [r7, #4]
    return data_ ? data_->size(resources_) : 0;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d00a      	beq.n	8009a48 <_ZNK11ArduinoJson8V730HB229JsonArray4sizeEv+0x26>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	461a      	mov	r2, r3
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	685b      	ldr	r3, [r3, #4]
 8009a3c:	4619      	mov	r1, r3
 8009a3e:	4610      	mov	r0, r2
 8009a40:	f000 f8cf 	bl	8009be2 <_ZNK11ArduinoJson8V730HB226detail14CollectionData4sizeEPKNS1_15ResourceManagerE>
 8009a44:	4603      	mov	r3, r0
 8009a46:	e000      	b.n	8009a4a <_ZNK11ArduinoJson8V730HB229JsonArray4sizeEv+0x28>
 8009a48:	2300      	movs	r3, #0
  }
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3708      	adds	r7, #8
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}

08009a52 <_ZNK11ArduinoJson8V730HB229JsonArray18getResourceManagerEv>:
  size_t memoryUsage() const {
    return 0;
  }

 private:
  detail::ResourceManager* getResourceManager() const {
 8009a52:	b480      	push	{r7}
 8009a54:	b083      	sub	sp, #12
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	6078      	str	r0, [r7, #4]
    return resources_;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	685b      	ldr	r3, [r3, #4]
  }
 8009a5e:	4618      	mov	r0, r3
 8009a60:	370c      	adds	r7, #12
 8009a62:	46bd      	mov	sp, r7
 8009a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a68:	4770      	bx	lr

08009a6a <_ZNK11ArduinoJson8V730HB229JsonArray7getDataEv>:

  detail::VariantData* getData() const {
 8009a6a:	b580      	push	{r7, lr}
 8009a6c:	b082      	sub	sp, #8
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	6078      	str	r0, [r7, #4]
    return collectionToVariant(data_);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	4618      	mov	r0, r3
 8009a78:	f7fa fbb7 	bl	80041ea <_ZN11ArduinoJson8V730HB226detail19collectionToVariantEPNS1_14CollectionDataE>
 8009a7c:	4603      	mov	r3, r0
  }
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3708      	adds	r7, #8
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}

08009a86 <_ZNK11ArduinoJson8V730HB229JsonArray15getOrCreateDataEv>:

  detail::VariantData* getOrCreateData() const {
 8009a86:	b580      	push	{r7, lr}
 8009a88:	b082      	sub	sp, #8
 8009a8a:	af00      	add	r7, sp, #0
 8009a8c:	6078      	str	r0, [r7, #4]
    return collectionToVariant(data_);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4618      	mov	r0, r3
 8009a94:	f7fa fba9 	bl	80041ea <_ZN11ArduinoJson8V730HB226detail19collectionToVariantEPNS1_14CollectionDataE>
 8009a98:	4603      	mov	r3, r0
  }
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3708      	adds	r7, #8
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}

08009aa2 <_ZN11ArduinoJson8V730HB2212JsonDocumentD1Ev>:

ARDUINOJSON_BEGIN_PUBLIC_NAMESPACE

// A JSON document.
// https://arduinojson.org/v7/api/jsondocument/
class JsonDocument : public detail::VariantOperators<const JsonDocument&> {
 8009aa2:	b580      	push	{r7, lr}
 8009aa4:	b082      	sub	sp, #8
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	6078      	str	r0, [r7, #4]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	4618      	mov	r0, r3
 8009aae:	f7ff ff6e 	bl	800998e <_ZN11ArduinoJson8V730HB226detail15ResourceManagerD1Ev>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3708      	adds	r7, #8
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}

08009abc <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE>:
#include <ArduinoJson/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

inline ArrayData::iterator ArrayData::at(
    size_t index, const ResourceManager* resources) const {
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b084      	sub	sp, #16
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	60f8      	str	r0, [r7, #12]
 8009ac4:	60b9      	str	r1, [r7, #8]
 8009ac6:	607a      	str	r2, [r7, #4]
 8009ac8:	603b      	str	r3, [r7, #0]
  auto it = createIterator(resources);
 8009aca:	68b9      	ldr	r1, [r7, #8]
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	683a      	ldr	r2, [r7, #0]
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f7fb f823 	bl	8004b1c <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
  while (!it.done() && index) {
 8009ad6:	e006      	b.n	8009ae6 <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x2a>
    it.next(resources);
 8009ad8:	6839      	ldr	r1, [r7, #0]
 8009ada:	68f8      	ldr	r0, [r7, #12]
 8009adc:	f7fa fffb 	bl	8004ad6 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
    --index;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	3b01      	subs	r3, #1
 8009ae4:	607b      	str	r3, [r7, #4]
  while (!it.done() && index) {
 8009ae6:	68f8      	ldr	r0, [r7, #12]
 8009ae8:	f7fa fb36 	bl	8004158 <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 8009aec:	4603      	mov	r3, r0
 8009aee:	f083 0301 	eor.w	r3, r3, #1
 8009af2:	b2db      	uxtb	r3, r3
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d004      	beq.n	8009b02 <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x46>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d001      	beq.n	8009b02 <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x46>
 8009afe:	2301      	movs	r3, #1
 8009b00:	e000      	b.n	8009b04 <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x48>
 8009b02:	2300      	movs	r3, #0
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d1e7      	bne.n	8009ad8 <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x1c>
  }
  return it;
 8009b08:	bf00      	nop
}
 8009b0a:	68f8      	ldr	r0, [r7, #12]
 8009b0c:	3710      	adds	r7, #16
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}

08009b12 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE>:
  CollectionData::appendOne(slot, resources);
  return slot.ptr();
}

inline VariantData* ArrayData::getOrAddElement(size_t index,
                                               ResourceManager* resources) {
 8009b12:	b580      	push	{r7, lr}
 8009b14:	b088      	sub	sp, #32
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	60f8      	str	r0, [r7, #12]
 8009b1a:	60b9      	str	r1, [r7, #8]
 8009b1c:	607a      	str	r2, [r7, #4]
  auto it = createIterator(resources);
 8009b1e:	68f9      	ldr	r1, [r7, #12]
 8009b20:	f107 0314 	add.w	r3, r7, #20
 8009b24:	687a      	ldr	r2, [r7, #4]
 8009b26:	4618      	mov	r0, r3
 8009b28:	f7fa fff8 	bl	8004b1c <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
  while (!it.done() && index > 0) {
 8009b2c:	e008      	b.n	8009b40 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x2e>
    it.next(resources);
 8009b2e:	f107 0314 	add.w	r3, r7, #20
 8009b32:	6879      	ldr	r1, [r7, #4]
 8009b34:	4618      	mov	r0, r3
 8009b36:	f7fa ffce 	bl	8004ad6 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
    index--;
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	3b01      	subs	r3, #1
 8009b3e:	60bb      	str	r3, [r7, #8]
  while (!it.done() && index > 0) {
 8009b40:	f107 0314 	add.w	r3, r7, #20
 8009b44:	4618      	mov	r0, r3
 8009b46:	f7fa fb07 	bl	8004158 <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	f083 0301 	eor.w	r3, r3, #1
 8009b50:	b2db      	uxtb	r3, r3
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d004      	beq.n	8009b60 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x4e>
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d001      	beq.n	8009b60 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x4e>
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	e000      	b.n	8009b62 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x50>
 8009b60:	2300      	movs	r3, #0
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d1e3      	bne.n	8009b2e <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x1c>
  }
  if (it.done())
 8009b66:	f107 0314 	add.w	r3, r7, #20
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f7fa faf4 	bl	8004158 <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 8009b70:	4603      	mov	r3, r0
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d002      	beq.n	8009b7c <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x6a>
    index++;
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	3301      	adds	r3, #1
 8009b7a:	60bb      	str	r3, [r7, #8]
  VariantData* element = it.data();
 8009b7c:	f107 0314 	add.w	r3, r7, #20
 8009b80:	4618      	mov	r0, r3
 8009b82:	f7fa fb1a 	bl	80041ba <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 8009b86:	61f8      	str	r0, [r7, #28]
  while (index > 0) {
 8009b88:	e00c      	b.n	8009ba4 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x92>
    element = addElement(resources);
 8009b8a:	6879      	ldr	r1, [r7, #4]
 8009b8c:	68f8      	ldr	r0, [r7, #12]
 8009b8e:	f7fa ff56 	bl	8004a3e <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE>
 8009b92:	61f8      	str	r0, [r7, #28]
    if (!element)
 8009b94:	69fb      	ldr	r3, [r7, #28]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d101      	bne.n	8009b9e <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x8c>
      return nullptr;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	e006      	b.n	8009bac <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x9a>
    index--;
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	3b01      	subs	r3, #1
 8009ba2:	60bb      	str	r3, [r7, #8]
  while (index > 0) {
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d1ef      	bne.n	8009b8a <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x78>
  }
  return element;
 8009baa:	69fb      	ldr	r3, [r7, #28]
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3720      	adds	r7, #32
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}

08009bb4 <_ZNK11ArduinoJson8V730HB226detail9ArrayData10getElementEjPKNS1_15ResourceManagerE>:

inline VariantData* ArrayData::getElement(
    size_t index, const ResourceManager* resources) const {
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b086      	sub	sp, #24
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	60f8      	str	r0, [r7, #12]
 8009bbc:	60b9      	str	r1, [r7, #8]
 8009bbe:	607a      	str	r2, [r7, #4]
  return at(index, resources).data();
 8009bc0:	f107 0010 	add.w	r0, r7, #16
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	68ba      	ldr	r2, [r7, #8]
 8009bc8:	68f9      	ldr	r1, [r7, #12]
 8009bca:	f7ff ff77 	bl	8009abc <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE>
 8009bce:	f107 0310 	add.w	r3, r7, #16
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f7fa faf1 	bl	80041ba <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 8009bd8:	4603      	mov	r3, r0
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	3718      	adds	r7, #24
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}

08009be2 <_ZNK11ArduinoJson8V730HB226detail14CollectionData4sizeEPKNS1_15ResourceManagerE>:
      maxChildNesting = childNesting;
  }
  return maxChildNesting + 1;
}

inline size_t CollectionData::size(const ResourceManager* resources) const {
 8009be2:	b580      	push	{r7, lr}
 8009be4:	b086      	sub	sp, #24
 8009be6:	af00      	add	r7, sp, #0
 8009be8:	6078      	str	r0, [r7, #4]
 8009bea:	6039      	str	r1, [r7, #0]
  size_t count = 0;
 8009bec:	2300      	movs	r3, #0
 8009bee:	617b      	str	r3, [r7, #20]
  for (auto it = createIterator(resources); !it.done(); it.next(resources))
 8009bf0:	f107 030c 	add.w	r3, r7, #12
 8009bf4:	683a      	ldr	r2, [r7, #0]
 8009bf6:	6879      	ldr	r1, [r7, #4]
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f7fa ff8f 	bl	8004b1c <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
 8009bfe:	e008      	b.n	8009c12 <_ZNK11ArduinoJson8V730HB226detail14CollectionData4sizeEPKNS1_15ResourceManagerE+0x30>
    count++;
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	3301      	adds	r3, #1
 8009c04:	617b      	str	r3, [r7, #20]
  for (auto it = createIterator(resources); !it.done(); it.next(resources))
 8009c06:	f107 030c 	add.w	r3, r7, #12
 8009c0a:	6839      	ldr	r1, [r7, #0]
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f7fa ff62 	bl	8004ad6 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
 8009c12:	f107 030c 	add.w	r3, r7, #12
 8009c16:	4618      	mov	r0, r3
 8009c18:	f7fa fa9e 	bl	8004158 <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	f083 0301 	eor.w	r3, r3, #1
 8009c22:	b2db      	uxtb	r3, r3
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d1eb      	bne.n	8009c00 <_ZNK11ArduinoJson8V730HB226detail14CollectionData4sizeEPKNS1_15ResourceManagerE+0x1e>
  return count;
 8009c28:	697b      	ldr	r3, [r7, #20]
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3718      	adds	r7, #24
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}

08009c32 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE>:
  static const char* fromJson(JsonVariantConst src) {
    auto data = getData(src);
    return data ? data->asString().c_str() : 0;
  }

  static bool checkJson(JsonVariantConst src) {
 8009c32:	b580      	push	{r7, lr}
 8009c34:	b084      	sub	sp, #16
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	463b      	mov	r3, r7
 8009c3a:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 8009c3e:	463b      	mov	r3, r7
 8009c40:	4618      	mov	r0, r3
 8009c42:	f7fc fad1 	bl	80061e8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8009c46:	60f8      	str	r0, [r7, #12]
    return data && data->isString();
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d007      	beq.n	8009c5e <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE+0x2c>
 8009c4e:	68f8      	ldr	r0, [r7, #12]
 8009c50:	f7ff fe77 	bl	8009942 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv>
 8009c54:	4603      	mov	r3, r0
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d001      	beq.n	8009c5e <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE+0x2c>
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	e000      	b.n	8009c60 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE+0x2e>
 8009c5e:	2300      	movs	r3, #0
  }
 8009c60:	4618      	mov	r0, r3
 8009c62:	3710      	adds	r7, #16
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}

08009c68 <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>:
	    bool = is_move_assignable<_Dp>::value>
    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
      __uniq_ptr_data(__uniq_ptr_data&&) = default;
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b082      	sub	sp, #8
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
 8009c70:	6039      	str	r1, [r7, #0]
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	683a      	ldr	r2, [r7, #0]
 8009c76:	4611      	mov	r1, r2
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f000 feac 	bl	800a9d6 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEaSEOS3_>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	4618      	mov	r0, r3
 8009c82:	3708      	adds	r7, #8
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}

08009c88 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEaSEOS3_>:

      /** @brief Move assignment operator.
       *
       * Invokes the deleter if this object owns a pointer.
       */
      unique_ptr& operator=(unique_ptr&&) = default;
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b082      	sub	sp, #8
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	6039      	str	r1, [r7, #0]
 8009c92:	683a      	ldr	r2, [r7, #0]
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	4611      	mov	r1, r2
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f7ff ffe5 	bl	8009c68 <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3708      	adds	r7, #8
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}

08009ca8 <_ZN12CommsHandler12setInterfaceESt10unique_ptrI14CommsInterfaceSt14default_deleteIS1_EE>:
	virtual ~CommsHandler();

	void update(void) override;
	void tasks();

    void setInterface(std::unique_ptr<CommsInterface> commsInterface) {
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b082      	sub	sp, #8
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	6039      	str	r1, [r7, #0]
        interface = std::move(commsInterface);
 8009cb2:	6838      	ldr	r0, [r7, #0]
 8009cb4:	f000 fe84 	bl	800a9c0 <_ZSt4moveIRSt10unique_ptrI14CommsInterfaceSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 8009cb8:	4602      	mov	r2, r0
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	3318      	adds	r3, #24
 8009cbe:	4611      	mov	r1, r2
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f7ff ffe1 	bl	8009c88 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEaSEOS3_>
    }
 8009cc6:	bf00      	nop
 8009cc8:	3708      	adds	r7, #8
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}

08009cce <_ZNK12CommsHandler9getStatusEv>:
    void setNoDataCount(int count) { noDataCount = count; }
    void setStatus(bool value) { status = value; }

    bool getData() const { return data; }
    int getNoDataCount() const { return noDataCount; }
    bool getStatus() const { return status; }
 8009cce:	b480      	push	{r7}
 8009cd0:	b083      	sub	sp, #12
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	6078      	str	r0, [r7, #4]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	7f9b      	ldrb	r3, [r3, #30]
 8009cda:	4618      	mov	r0, r3
 8009cdc:	370c      	adds	r7, #12
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce4:	4770      	bx	lr

08009ce6 <EXTI4_IRQHandler>:
#include "interrupt.h"

extern "C" {

	void EXTI4_IRQHandler()
	{
 8009ce6:	b580      	push	{r7, lr}
 8009ce8:	af00      	add	r7, sp, #0
		// Chip select pin is PA_4 (EXTI4 PIN 4)
		if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
 8009cea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009cf2:	f003 0310 	and.w	r3, r3, #16
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	bf14      	ite	ne
 8009cfa:	2301      	movne	r3, #1
 8009cfc:	2300      	moveq	r3, #0
 8009cfe:	b2db      	uxtb	r3, r3
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d006      	beq.n	8009d12 <EXTI4_IRQHandler+0x2c>
		{
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 8009d04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009d08:	2210      	movs	r2, #16
 8009d0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
		Interrupt::EXTI4_Wrapper();
 8009d0e:	f7fa f809 	bl	8003d24 <_ZN9Interrupt13EXTI4_WrapperEv>
		}
	}
 8009d12:	bf00      	nop
 8009d14:	bd80      	pop	{r7, pc}

08009d16 <DMA1_Stream0_IRQHandler>:

	void DMA1_Stream0_IRQHandler()
	{
 8009d16:	b580      	push	{r7, lr}
 8009d18:	af00      	add	r7, sp, #0
		// DMA interrupt management in the moduelInterrupt handleInterrupt() routine
		Interrupt::DMA1_Stream0_Wrapper();
 8009d1a:	f7fa f811 	bl	8003d40 <_ZN9Interrupt20DMA1_Stream0_WrapperEv>
	}
 8009d1e:	bf00      	nop
 8009d20:	bd80      	pop	{r7, pc}

08009d22 <DMA1_Stream1_IRQHandler>:

	void DMA1_Stream1_IRQHandler()
	{
 8009d22:	b580      	push	{r7, lr}
 8009d24:	af00      	add	r7, sp, #0
		// DMA interrupt management in the moduelInterrupt handleInterrupt() routine
		Interrupt::DMA1_Stream1_Wrapper();
 8009d26:	f7fa f819 	bl	8003d5c <_ZN9Interrupt20DMA1_Stream1_WrapperEv>
	}
 8009d2a:	bf00      	nop
 8009d2c:	bd80      	pop	{r7, pc}

08009d2e <TIM2_IRQHandler>:


	void TIM2_IRQHandler()
	{
 8009d2e:	b580      	push	{r7, lr}
 8009d30:	af00      	add	r7, sp, #0
	  if(TIM2->SR & TIM_SR_UIF) // if UIF flag is set
 8009d32:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009d36:	691b      	ldr	r3, [r3, #16]
 8009d38:	f003 0301 	and.w	r3, r3, #1
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	bf14      	ite	ne
 8009d40:	2301      	movne	r3, #1
 8009d42:	2300      	moveq	r3, #0
 8009d44:	b2db      	uxtb	r3, r3
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d009      	beq.n	8009d5e <TIM2_IRQHandler+0x30>
	  {
		TIM2->SR &= ~TIM_SR_UIF; // clear UIF flag
 8009d4a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009d4e:	691b      	ldr	r3, [r3, #16]
 8009d50:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8009d54:	f023 0301 	bic.w	r3, r3, #1
 8009d58:	6113      	str	r3, [r2, #16]

		Interrupt::TIM2_Wrapper();
 8009d5a:	f7fa f80d 	bl	8003d78 <_ZN9Interrupt12TIM2_WrapperEv>
	  }
	}
 8009d5e:	bf00      	nop
 8009d60:	bd80      	pop	{r7, pc}
	...

08009d64 <TIM3_IRQHandler>:


	void TIM3_IRQHandler()
	{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	af00      	add	r7, sp, #0
	  if(TIM3->SR & TIM_SR_UIF) // if UIF flag is set
 8009d68:	4b0a      	ldr	r3, [pc, #40]	@ (8009d94 <TIM3_IRQHandler+0x30>)
 8009d6a:	691b      	ldr	r3, [r3, #16]
 8009d6c:	f003 0301 	and.w	r3, r3, #1
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	bf14      	ite	ne
 8009d74:	2301      	movne	r3, #1
 8009d76:	2300      	moveq	r3, #0
 8009d78:	b2db      	uxtb	r3, r3
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d007      	beq.n	8009d8e <TIM3_IRQHandler+0x2a>
	  {
		TIM3->SR &= ~TIM_SR_UIF; // clear UIF flag
 8009d7e:	4b05      	ldr	r3, [pc, #20]	@ (8009d94 <TIM3_IRQHandler+0x30>)
 8009d80:	691b      	ldr	r3, [r3, #16]
 8009d82:	4a04      	ldr	r2, [pc, #16]	@ (8009d94 <TIM3_IRQHandler+0x30>)
 8009d84:	f023 0301 	bic.w	r3, r3, #1
 8009d88:	6113      	str	r3, [r2, #16]

		Interrupt::TIM3_Wrapper();
 8009d8a:	f7fa f803 	bl	8003d94 <_ZN9Interrupt12TIM3_WrapperEv>
	  }
	}
 8009d8e:	bf00      	nop
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	40000400 	.word	0x40000400

08009d98 <TIM4_IRQHandler>:

	void TIM4_IRQHandler()
	{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	af00      	add	r7, sp, #0
	  if(TIM4->SR & TIM_SR_UIF) // if UIF flag is set
 8009d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8009dc8 <TIM4_IRQHandler+0x30>)
 8009d9e:	691b      	ldr	r3, [r3, #16]
 8009da0:	f003 0301 	and.w	r3, r3, #1
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	bf14      	ite	ne
 8009da8:	2301      	movne	r3, #1
 8009daa:	2300      	moveq	r3, #0
 8009dac:	b2db      	uxtb	r3, r3
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d007      	beq.n	8009dc2 <TIM4_IRQHandler+0x2a>
	  {
		TIM4->SR &= ~TIM_SR_UIF; // clear UIF flag
 8009db2:	4b05      	ldr	r3, [pc, #20]	@ (8009dc8 <TIM4_IRQHandler+0x30>)
 8009db4:	691b      	ldr	r3, [r3, #16]
 8009db6:	4a04      	ldr	r2, [pc, #16]	@ (8009dc8 <TIM4_IRQHandler+0x30>)
 8009db8:	f023 0301 	bic.w	r3, r3, #1
 8009dbc:	6113      	str	r3, [r2, #16]

		Interrupt::TIM4_Wrapper();
 8009dbe:	f7f9 fff7 	bl	8003db0 <_ZN9Interrupt12TIM4_WrapperEv>
	  }
	}
 8009dc2:	bf00      	nop
 8009dc4:	bd80      	pop	{r7, pc}
 8009dc6:	bf00      	nop
 8009dc8:	40000800 	.word	0x40000800

08009dcc <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
	  __r._M_ptr = nullptr;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b082      	sub	sp, #8
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	3304      	adds	r3, #4
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f000 fe7e 	bl	800aada <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	4618      	mov	r0, r3
 8009de2:	3708      	adds	r7, #8
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}

08009de8 <_ZNSt10shared_ptrI12CommsHandlerED1Ev>:
   * the stored pointer returned by `get()`, not the owned pointer.
   * To test whether two `shared_ptr` objects share ownership of the same
   * pointer see `std::shared_ptr::owner_before` and `std::owner_less`.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b082      	sub	sp, #8
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	4618      	mov	r0, r3
 8009df4:	f7ff ffea 	bl	8009dcc <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3708      	adds	r7, #8
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}

08009e02 <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>:
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 8009e02:	b580      	push	{r7, lr}
 8009e04:	b082      	sub	sp, #8
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	6078      	str	r0, [r7, #4]
 8009e0a:	6039      	str	r1, [r7, #0]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	683a      	ldr	r2, [r7, #0]
 8009e10:	4611      	mov	r1, r2
 8009e12:	4618      	mov	r0, r3
 8009e14:	f000 feda 	bl	800abcc <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEaSEOS3_>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3708      	adds	r7, #8
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}

08009e22 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEaSEOS3_>:
      unique_ptr& operator=(unique_ptr&&) = default;
 8009e22:	b580      	push	{r7, lr}
 8009e24:	b082      	sub	sp, #8
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
 8009e2a:	6039      	str	r1, [r7, #0]
 8009e2c:	683a      	ldr	r2, [r7, #0]
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	4611      	mov	r1, r2
 8009e32:	4618      	mov	r0, r3
 8009e34:	f7ff ffe5 	bl	8009e02 <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3708      	adds	r7, #8
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}

08009e42 <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>:
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 8009e42:	b580      	push	{r7, lr}
 8009e44:	b082      	sub	sp, #8
 8009e46:	af00      	add	r7, sp, #0
 8009e48:	6078      	str	r0, [r7, #4]
 8009e4a:	6039      	str	r1, [r7, #0]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	683a      	ldr	r2, [r7, #0]
 8009e50:	4611      	mov	r1, r2
 8009e52:	4618      	mov	r0, r3
 8009e54:	f000 fff9 	bl	800ae4a <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEaSEOS3_>
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3708      	adds	r7, #8
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}

08009e62 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEaSEOS3_>:
      unique_ptr& operator=(unique_ptr&&) = default;
 8009e62:	b580      	push	{r7, lr}
 8009e64:	b082      	sub	sp, #8
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	6078      	str	r0, [r7, #4]
 8009e6a:	6039      	str	r1, [r7, #0]
 8009e6c:	683a      	ldr	r2, [r7, #0]
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	4611      	mov	r1, r2
 8009e72:	4618      	mov	r0, r3
 8009e74:	f7ff ffe5 	bl	8009e42 <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3708      	adds	r7, #8
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}

08009e82 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 8009e82:	b580      	push	{r7, lr}
 8009e84:	b082      	sub	sp, #8
 8009e86:	af00      	add	r7, sp, #0
 8009e88:	6078      	str	r0, [r7, #4]
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	3304      	adds	r3, #4
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f000 fe23 	bl	800aada <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	4618      	mov	r0, r3
 8009e98:	3708      	adds	r7, #8
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}

08009e9e <_ZNSt10shared_ptrI6ModuleED1Ev>:
 8009e9e:	b580      	push	{r7, lr}
 8009ea0:	b082      	sub	sp, #8
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f7ff ffea 	bl	8009e82 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3708      	adds	r7, #8
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}

08009eb8 <_ZN6RemoraC1Ev>:

// unions for TX and RX data
__attribute__((section(".DmaSection"))) volatile txData_t txData;
__attribute__((section(".DmaSection"))) volatile rxData_t rxData;

Remora::Remora() :
 8009eb8:	b590      	push	{r4, r7, lr}
 8009eba:	b097      	sub	sp, #92	@ 0x5c
 8009ebc:	af02      	add	r7, sp, #8
 8009ebe:	6078      	str	r0, [r7, #4]
	baseFreq(Config::pruBaseFreq),
	servoFreq(Config::pruServoFreq),
	serialFreq(Config::pruSerialFreq)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	3310      	adds	r3, #16
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f000 fdc9 	bl	800aa5c <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEC1IS2_vEEv>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	3314      	adds	r3, #20
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f000 fdf6 	bl	800aac0 <_ZNSt10shared_ptrI12CommsHandlerEC1Ev>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	331c      	adds	r3, #28
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f000 fe2a 	bl	800ab32 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEv>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	3320      	adds	r3, #32
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f000 fe25 	bl	800ab32 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEv>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	3324      	adds	r3, #36	@ 0x24
 8009eec:	4618      	mov	r0, r3
 8009eee:	f000 fe20 	bl	800ab32 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEv>
	baseFreq(Config::pruBaseFreq),
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8009ef8:	629a      	str	r2, [r3, #40]	@ 0x28
	servoFreq(Config::pruServoFreq),
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009f00:	62da      	str	r2, [r3, #44]	@ 0x2c
	serialFreq(Config::pruSerialFreq)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8009f08:	631a      	str	r2, [r3, #48]	@ 0x30
{
	threadsRunning = false;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	currentState = ST_SETUP;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2200      	movs	r2, #0
 8009f16:	701a      	strb	r2, [r3, #0]
	prevState = ST_RESET;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2205      	movs	r2, #5
 8009f1c:	705a      	strb	r2, [r3, #1]

	configHandler = std::make_unique<JsonConfigHandler>(this);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	613b      	str	r3, [r7, #16]
 8009f22:	f107 030c 	add.w	r3, r7, #12
 8009f26:	f107 0210 	add.w	r2, r7, #16
 8009f2a:	4611      	mov	r1, r2
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f000 fe32 	bl	800ab96 <_ZSt11make_uniqueI17JsonConfigHandlerJP6RemoraEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	3310      	adds	r3, #16
 8009f36:	f107 020c 	add.w	r2, r7, #12
 8009f3a:	4611      	mov	r1, r2
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f7ff ff70 	bl	8009e22 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEaSEOS3_>
 8009f42:	f107 030c 	add.w	r3, r7, #12
 8009f46:	4618      	mov	r0, r3
 8009f48:	f000 fd98 	bl	800aa7c <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EED1Ev>

    ptrTxData = &txData;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	4a6c      	ldr	r2, [pc, #432]	@ (800a100 <_ZN6RemoraC1Ev+0x248>)
 8009f50:	605a      	str	r2, [r3, #4]
    ptrRxData = &rxData;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	4a6b      	ldr	r2, [pc, #428]	@ (800a104 <_ZN6RemoraC1Ev+0x24c>)
 8009f56:	609a      	str	r2, [r3, #8]

	auto spiComms = std::make_unique<SPIComms>(ptrRxData, ptrTxData, SPI1);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f103 0108 	add.w	r1, r3, #8
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	1d1a      	adds	r2, r3, #4
 8009f62:	4b69      	ldr	r3, [pc, #420]	@ (800a108 <_ZN6RemoraC1Ev+0x250>)
 8009f64:	617b      	str	r3, [r7, #20]
 8009f66:	f107 0008 	add.w	r0, r7, #8
 8009f6a:	f107 0314 	add.w	r3, r7, #20
 8009f6e:	f000 fe49 	bl	800ac04 <_ZSt11make_uniqueI8SPICommsJRPV8rxData_tRPV8txData_tP11SPI_TypeDefEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>

	comms = std::make_shared<CommsHandler>();
 8009f72:	f107 0318 	add.w	r3, r7, #24
 8009f76:	4618      	mov	r0, r3
 8009f78:	f000 fe8f 	bl	800ac9a <_ZSt11make_sharedI12CommsHandlerJEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueES4_E4typeEEDpOT0_>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	3314      	adds	r3, #20
 8009f80:	f107 0218 	add.w	r2, r7, #24
 8009f84:	4611      	mov	r1, r2
 8009f86:	4618      	mov	r0, r3
 8009f88:	f000 fe95 	bl	800acb6 <_ZNSt10shared_ptrI12CommsHandlerEaSEOS1_>
 8009f8c:	f107 0318 	add.w	r3, r7, #24
 8009f90:	4618      	mov	r0, r3
 8009f92:	f7ff ff29 	bl	8009de8 <_ZNSt10shared_ptrI12CommsHandlerED1Ev>
	comms->setInterface(std::move(spiComms));
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	3314      	adds	r3, #20
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f000 fe9e 	bl	800acdc <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8009fa0:	4604      	mov	r4, r0
 8009fa2:	f107 0308 	add.w	r3, r7, #8
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f000 fea4 	bl	800acf4 <_ZSt4moveIRSt10unique_ptrI8SPICommsSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 8009fac:	4602      	mov	r2, r0
 8009fae:	f107 0320 	add.w	r3, r7, #32
 8009fb2:	4611      	mov	r1, r2
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f000 feb9 	bl	800ad2c <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEC1I8SPICommsS1_IS5_EvEEOS_IT_T0_E>
 8009fba:	f107 0320 	add.w	r3, r7, #32
 8009fbe:	4619      	mov	r1, r3
 8009fc0:	4620      	mov	r0, r4
 8009fc2:	f7ff fe71 	bl	8009ca8 <_ZN12CommsHandler12setInterfaceESt10unique_ptrI14CommsInterfaceSt14default_deleteIS1_EE>
 8009fc6:	f107 0320 	add.w	r3, r7, #32
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f000 feca 	bl	800ad64 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EED1Ev>
	comms->init();
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	3314      	adds	r3, #20
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f000 fe81 	bl	800acdc <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	4618      	mov	r0, r3
 8009fde:	f004 fe54 	bl	800ec8a <_ZN12CommsHandler4initEv>
	comms->start();
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	3314      	adds	r3, #20
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f000 fe78 	bl	800acdc <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8009fec:	4603      	mov	r3, r0
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f004 fe79 	bl	800ece6 <_ZN12CommsHandler5startEv>

    baseThread = make_unique<pruThread>(
    									"Base",
										TIM3,
 8009ff4:	4b45      	ldr	r3, [pc, #276]	@ (800a10c <_ZN6RemoraC1Ev+0x254>)
 8009ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
										TIM3_IRQn,
 8009ff8:	231d      	movs	r3, #29
 8009ffa:	85fb      	strh	r3, [r7, #46]	@ 0x2e
										baseFreq,
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	3328      	adds	r3, #40	@ 0x28
    baseThread = make_unique<pruThread>(
 800a000:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a004:	f107 012e 	add.w	r1, r7, #46	@ 0x2e
 800a008:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800a00c:	4c40      	ldr	r4, [pc, #256]	@ (800a110 <_ZN6RemoraC1Ev+0x258>)
 800a00e:	9401      	str	r4, [sp, #4]
 800a010:	9300      	str	r3, [sp, #0]
 800a012:	460b      	mov	r3, r1
 800a014:	493f      	ldr	r1, [pc, #252]	@ (800a114 <_ZN6RemoraC1Ev+0x25c>)
 800a016:	f000 fec7 	bl	800ada8 <_ZSt11make_uniqueI9pruThreadJRA5_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
										Config::baseThreadIrqPriority
										);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	331c      	adds	r3, #28
 800a01e:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800a022:	4611      	mov	r1, r2
 800a024:	4618      	mov	r0, r3
 800a026:	f7ff ff1c 	bl	8009e62 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEaSEOS3_>
    baseThread = make_unique<pruThread>(
 800a02a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a02e:	4618      	mov	r0, r3
 800a030:	f000 fd8f 	bl	800ab52 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EED1Ev>
    servoThread = make_unique<pruThread>(
    									"Servo",
										TIM2,
 800a034:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a038:	637b      	str	r3, [r7, #52]	@ 0x34
										TIM2_IRQn,
 800a03a:	231c      	movs	r3, #28
 800a03c:	877b      	strh	r3, [r7, #58]	@ 0x3a
										servoFreq,
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	332c      	adds	r3, #44	@ 0x2c
    servoThread = make_unique<pruThread>(
 800a042:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 800a046:	f107 013a 	add.w	r1, r7, #58	@ 0x3a
 800a04a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800a04e:	4c32      	ldr	r4, [pc, #200]	@ (800a118 <_ZN6RemoraC1Ev+0x260>)
 800a050:	9401      	str	r4, [sp, #4]
 800a052:	9300      	str	r3, [sp, #0]
 800a054:	460b      	mov	r3, r1
 800a056:	4931      	ldr	r1, [pc, #196]	@ (800a11c <_ZN6RemoraC1Ev+0x264>)
 800a058:	f000 ff13 	bl	800ae82 <_ZSt11make_uniqueI9pruThreadJRA6_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
										Config::servoThreadIrqPriority
										);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	3320      	adds	r3, #32
 800a060:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800a064:	4611      	mov	r1, r2
 800a066:	4618      	mov	r0, r3
 800a068:	f7ff fefb 	bl	8009e62 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEaSEOS3_>
    servoThread = make_unique<pruThread>(
 800a06c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800a070:	4618      	mov	r0, r3
 800a072:	f000 fd6e 	bl	800ab52 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EED1Ev>
    serialThread = make_unique<pruThread>(
    									"Serial",
										TIM4,
 800a076:	4b2a      	ldr	r3, [pc, #168]	@ (800a120 <_ZN6RemoraC1Ev+0x268>)
 800a078:	643b      	str	r3, [r7, #64]	@ 0x40
										TIM4_IRQn,
 800a07a:	231e      	movs	r3, #30
 800a07c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
										serialFreq,
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	3330      	adds	r3, #48	@ 0x30
    serialThread = make_unique<pruThread>(
 800a084:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 800a088:	f107 0146 	add.w	r1, r7, #70	@ 0x46
 800a08c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800a090:	4c24      	ldr	r4, [pc, #144]	@ (800a124 <_ZN6RemoraC1Ev+0x26c>)
 800a092:	9401      	str	r4, [sp, #4]
 800a094:	9300      	str	r3, [sp, #0]
 800a096:	460b      	mov	r3, r1
 800a098:	4923      	ldr	r1, [pc, #140]	@ (800a128 <_ZN6RemoraC1Ev+0x270>)
 800a09a:	f000 ff43 	bl	800af24 <_ZSt11make_uniqueI9pruThreadJRA7_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
										Config::commsThreadIrqPriority
										);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	3324      	adds	r3, #36	@ 0x24
 800a0a2:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800a0a6:	4611      	mov	r1, r2
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f7ff feda 	bl	8009e62 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEaSEOS3_>
    serialThread = make_unique<pruThread>(
 800a0ae:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f000 fd4d 	bl	800ab52 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EED1Ev>

    servoThread->registerModule(comms);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	3320      	adds	r3, #32
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f000 ff82 	bl	800afc6 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 800a0c2:	4604      	mov	r4, r0
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f103 0214 	add.w	r2, r3, #20
 800a0ca:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800a0ce:	4611      	mov	r1, r2
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f000 ff84 	bl	800afde <_ZNSt10shared_ptrI6ModuleEC1I12CommsHandlervEERKS_IT_E>
 800a0d6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800a0da:	4619      	mov	r1, r3
 800a0dc:	4620      	mov	r0, r4
 800a0de:	f00b ff25 	bl	8015f2c <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE>
 800a0e2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f7ff fed9 	bl	8009e9e <_ZNSt10shared_ptrI6ModuleED1Ev>
}
 800a0ec:	f107 0308 	add.w	r3, r7, #8
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f000 fdb0 	bl	800ac56 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EED1Ev>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3754      	adds	r7, #84	@ 0x54
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd90      	pop	{r4, r7, pc}
 800a100:	30000080 	.word	0x30000080
 800a104:	300000c0 	.word	0x300000c0
 800a108:	40013000 	.word	0x40013000
 800a10c:	40000400 	.word	0x40000400
 800a110:	08026704 	.word	0x08026704
 800a114:	08025bf0 	.word	0x08025bf0
 800a118:	08026708 	.word	0x08026708
 800a11c:	08025bf8 	.word	0x08025bf8
 800a120:	40000800 	.word	0x40000800
 800a124:	0802670c 	.word	0x0802670c
 800a128:	08025c00 	.word	0x08025c00

0800a12c <_ZN6Remora17transitionToStateENS_5StateE>:

void Remora::transitionToState(State newState) {
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b082      	sub	sp, #8
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
 800a134:	460b      	mov	r3, r1
 800a136:	70fb      	strb	r3, [r7, #3]
    if (currentState != newState) {
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	781b      	ldrb	r3, [r3, #0]
 800a13c:	78fa      	ldrb	r2, [r7, #3]
 800a13e:	429a      	cmp	r2, r3
 800a140:	d00e      	beq.n	800a160 <_ZN6Remora17transitionToStateENS_5StateE+0x34>
        printf("\n## Transitioning from state %d to state %d\n", currentState, newState);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	781b      	ldrb	r3, [r3, #0]
 800a146:	4619      	mov	r1, r3
 800a148:	78fb      	ldrb	r3, [r7, #3]
 800a14a:	461a      	mov	r2, r3
 800a14c:	4806      	ldr	r0, [pc, #24]	@ (800a168 <_ZN6Remora17transitionToStateENS_5StateE+0x3c>)
 800a14e:	f01a fc53 	bl	80249f8 <iprintf>
        prevState = currentState;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	781a      	ldrb	r2, [r3, #0]
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	705a      	strb	r2, [r3, #1]
        currentState = newState;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	78fa      	ldrb	r2, [r7, #3]
 800a15e:	701a      	strb	r2, [r3, #0]
    }
}
 800a160:	bf00      	nop
 800a162:	3708      	adds	r7, #8
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}
 800a168:	08025c08 	.word	0x08025c08

0800a16c <_ZN6Remora16handleSetupStateEv>:

void Remora::handleSetupState() {
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b082      	sub	sp, #8
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
    if (currentState != prevState) {
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	781a      	ldrb	r2, [r3, #0]
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	785b      	ldrb	r3, [r3, #1]
 800a17c:	429a      	cmp	r2, r3
 800a17e:	d002      	beq.n	800a186 <_ZN6Remora16handleSetupStateEv+0x1a>
        printf("\n## Entering SETUP state\n");
 800a180:	4808      	ldr	r0, [pc, #32]	@ (800a1a4 <_ZN6Remora16handleSetupStateEv+0x38>)
 800a182:	f01a fca9 	bl	8024ad8 <puts>
    }
    prevState = currentState;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	781a      	ldrb	r2, [r3, #0]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	705a      	strb	r2, [r3, #1]

    loadModules();
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f000 f962 	bl	800a458 <_ZN6Remora11loadModulesEv>
    transitionToState(ST_START);
 800a194:	2101      	movs	r1, #1
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f7ff ffc8 	bl	800a12c <_ZN6Remora17transitionToStateENS_5StateE>
}
 800a19c:	bf00      	nop
 800a19e:	3708      	adds	r7, #8
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}
 800a1a4:	08025c38 	.word	0x08025c38

0800a1a8 <_ZN6Remora16handleStartStateEv>:

void Remora::handleStartState() {
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b082      	sub	sp, #8
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
    if (currentState != prevState) {
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	781a      	ldrb	r2, [r3, #0]
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	785b      	ldrb	r3, [r3, #1]
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d002      	beq.n	800a1c2 <_ZN6Remora16handleStartStateEv+0x1a>
        printf("\n## Entering START state\n");
 800a1bc:	4814      	ldr	r0, [pc, #80]	@ (800a210 <_ZN6Remora16handleStartStateEv+0x68>)
 800a1be:	f01a fc8b 	bl	8024ad8 <puts>
    }
    prevState = currentState;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	781a      	ldrb	r2, [r3, #0]
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	705a      	strb	r2, [r3, #1]

    if (!threadsRunning) {
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a1d0:	f083 0301 	eor.w	r3, r3, #1
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d011      	beq.n	800a1fe <_ZN6Remora16handleStartStateEv+0x56>
        startThread(servoThread, "SERVO");
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	3320      	adds	r3, #32
 800a1de:	4a0d      	ldr	r2, [pc, #52]	@ (800a214 <_ZN6Remora16handleStartStateEv+0x6c>)
 800a1e0:	4619      	mov	r1, r3
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f000 f8a8 	bl	800a338 <_ZN6Remora11startThreadERKSt10unique_ptrI9pruThreadSt14default_deleteIS1_EEPKc>
        startThread(baseThread, "BASE");
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	331c      	adds	r3, #28
 800a1ec:	4a0a      	ldr	r2, [pc, #40]	@ (800a218 <_ZN6Remora16handleStartStateEv+0x70>)
 800a1ee:	4619      	mov	r1, r3
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f000 f8a1 	bl	800a338 <_ZN6Remora11startThreadERKSt10unique_ptrI9pruThreadSt14default_deleteIS1_EEPKc>
        threadsRunning = true;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2201      	movs	r2, #1
 800a1fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    transitionToState(ST_IDLE);
 800a1fe:	2102      	movs	r1, #2
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f7ff ff93 	bl	800a12c <_ZN6Remora17transitionToStateENS_5StateE>
}
 800a206:	bf00      	nop
 800a208:	3708      	adds	r7, #8
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}
 800a20e:	bf00      	nop
 800a210:	08025c54 	.word	0x08025c54
 800a214:	08025c70 	.word	0x08025c70
 800a218:	08025c78 	.word	0x08025c78

0800a21c <_ZN6Remora15handleIdleStateEv>:

void Remora::handleIdleState() {
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b082      	sub	sp, #8
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
    if (currentState != prevState) {
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	781a      	ldrb	r2, [r3, #0]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	785b      	ldrb	r3, [r3, #1]
 800a22c:	429a      	cmp	r2, r3
 800a22e:	d002      	beq.n	800a236 <_ZN6Remora15handleIdleStateEv+0x1a>
        printf("\n## Entering IDLE state\n");
 800a230:	480d      	ldr	r0, [pc, #52]	@ (800a268 <_ZN6Remora15handleIdleStateEv+0x4c>)
 800a232:	f01a fc51 	bl	8024ad8 <puts>
    }
    prevState = currentState;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	781a      	ldrb	r2, [r3, #0]
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	705a      	strb	r2, [r3, #1]

    if (comms->getStatus()) {
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	3314      	adds	r3, #20
 800a242:	4618      	mov	r0, r3
 800a244:	f000 fd4a 	bl	800acdc <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800a248:	4603      	mov	r3, r0
 800a24a:	4618      	mov	r0, r3
 800a24c:	f7ff fd3f 	bl	8009cce <_ZNK12CommsHandler9getStatusEv>
 800a250:	4603      	mov	r3, r0
 800a252:	2b00      	cmp	r3, #0
 800a254:	d003      	beq.n	800a25e <_ZN6Remora15handleIdleStateEv+0x42>
        transitionToState(ST_RUNNING);
 800a256:	2103      	movs	r1, #3
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f7ff ff67 	bl	800a12c <_ZN6Remora17transitionToStateENS_5StateE>
    }
}
 800a25e:	bf00      	nop
 800a260:	3708      	adds	r7, #8
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}
 800a266:	bf00      	nop
 800a268:	08025c80 	.word	0x08025c80

0800a26c <_ZN6Remora18handleRunningStateEv>:

void Remora::handleRunningState() {
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b082      	sub	sp, #8
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
    if (currentState != prevState) {
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	781a      	ldrb	r2, [r3, #0]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	785b      	ldrb	r3, [r3, #1]
 800a27c:	429a      	cmp	r2, r3
 800a27e:	d002      	beq.n	800a286 <_ZN6Remora18handleRunningStateEv+0x1a>
        printf("\n## Entering RUNNING state\n");
 800a280:	4813      	ldr	r0, [pc, #76]	@ (800a2d0 <_ZN6Remora18handleRunningStateEv+0x64>)
 800a282:	f01a fc29 	bl	8024ad8 <puts>
    }
    prevState = currentState;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	781a      	ldrb	r2, [r3, #0]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	705a      	strb	r2, [r3, #1]

    if (!comms->getStatus()) {
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	3314      	adds	r3, #20
 800a292:	4618      	mov	r0, r3
 800a294:	f000 fd22 	bl	800acdc <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800a298:	4603      	mov	r3, r0
 800a29a:	4618      	mov	r0, r3
 800a29c:	f7ff fd17 	bl	8009cce <_ZNK12CommsHandler9getStatusEv>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	f083 0301 	eor.w	r3, r3, #1
 800a2a6:	b2db      	uxtb	r3, r3
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d003      	beq.n	800a2b4 <_ZN6Remora18handleRunningStateEv+0x48>
        transitionToState(ST_RESET);
 800a2ac:	2105      	movs	r1, #5
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f7ff ff3c 	bl	800a12c <_ZN6Remora17transitionToStateENS_5StateE>
    }

    if (reset) {
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	7b1b      	ldrb	r3, [r3, #12]
 800a2b8:	b2db      	uxtb	r3, r3
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d003      	beq.n	800a2c6 <_ZN6Remora18handleRunningStateEv+0x5a>
    	transitionToState(ST_SYSRESET);
 800a2be:	2106      	movs	r1, #6
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f7ff ff33 	bl	800a12c <_ZN6Remora17transitionToStateENS_5StateE>
    }
}
 800a2c6:	bf00      	nop
 800a2c8:	3708      	adds	r7, #8
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
 800a2ce:	bf00      	nop
 800a2d0:	08025c98 	.word	0x08025c98

0800a2d4 <_ZN6Remora16handleResetStateEv>:

void Remora::handleResetState() {
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b082      	sub	sp, #8
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
    if (currentState != prevState) {
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	781a      	ldrb	r2, [r3, #0]
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	785b      	ldrb	r3, [r3, #1]
 800a2e4:	429a      	cmp	r2, r3
 800a2e6:	d002      	beq.n	800a2ee <_ZN6Remora16handleResetStateEv+0x1a>
        printf("\n## Entering RESET state\n");
 800a2e8:	480c      	ldr	r0, [pc, #48]	@ (800a31c <_ZN6Remora16handleResetStateEv+0x48>)
 800a2ea:	f01a fbf5 	bl	8024ad8 <puts>
    }
    prevState = currentState;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	781a      	ldrb	r2, [r3, #0]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	705a      	strb	r2, [r3, #1]

    printf("   Resetting rxBuffer\n");
 800a2f6:	480a      	ldr	r0, [pc, #40]	@ (800a320 <_ZN6Remora16handleResetStateEv+0x4c>)
 800a2f8:	f01a fbee 	bl	8024ad8 <puts>
    resetBuffer(ptrRxData->rxBuffer, Config::dataBuffSize);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	689b      	ldr	r3, [r3, #8]
 800a300:	2240      	movs	r2, #64	@ 0x40
 800a302:	4619      	mov	r1, r3
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f000 f82f 	bl	800a368 <_ZN6Remora11resetBufferEPVhj>
    transitionToState(ST_IDLE);
 800a30a:	2102      	movs	r1, #2
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	f7ff ff0d 	bl	800a12c <_ZN6Remora17transitionToStateENS_5StateE>
}
 800a312:	bf00      	nop
 800a314:	3708      	adds	r7, #8
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}
 800a31a:	bf00      	nop
 800a31c:	08025cb4 	.word	0x08025cb4
 800a320:	08025cd0 	.word	0x08025cd0

0800a324 <_ZN6Remora19handleSysResetStateEv>:

void Remora::handleSysResetState() {
 800a324:	b580      	push	{r7, lr}
 800a326:	b082      	sub	sp, #8
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
	HAL_NVIC_SystemReset();
 800a32c:	f00d f9bf 	bl	80176ae <HAL_NVIC_SystemReset>
}
 800a330:	bf00      	nop
 800a332:	3708      	adds	r7, #8
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}

0800a338 <_ZN6Remora11startThreadERKSt10unique_ptrI9pruThreadSt14default_deleteIS1_EEPKc>:

void Remora::startThread(const std::unique_ptr<pruThread>& thread, const char* name) {
 800a338:	b580      	push	{r7, lr}
 800a33a:	b084      	sub	sp, #16
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	60f8      	str	r0, [r7, #12]
 800a340:	60b9      	str	r1, [r7, #8]
 800a342:	607a      	str	r2, [r7, #4]
    printf("Starting the %s thread\n", name);
 800a344:	6879      	ldr	r1, [r7, #4]
 800a346:	4807      	ldr	r0, [pc, #28]	@ (800a364 <_ZN6Remora11startThreadERKSt10unique_ptrI9pruThreadSt14default_deleteIS1_EEPKc+0x2c>)
 800a348:	f01a fb56 	bl	80249f8 <iprintf>
    thread->startThread();
 800a34c:	68b8      	ldr	r0, [r7, #8]
 800a34e:	f000 fe3a 	bl	800afc6 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 800a352:	4603      	mov	r3, r0
 800a354:	4618      	mov	r0, r3
 800a356:	f00b fe7d 	bl	8016054 <_ZN9pruThread11startThreadEv>
}
 800a35a:	bf00      	nop
 800a35c:	3710      	adds	r7, #16
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
 800a362:	bf00      	nop
 800a364:	08025ce8 	.word	0x08025ce8

0800a368 <_ZN6Remora11resetBufferEPVhj>:

void Remora::resetBuffer(volatile uint8_t* buffer, size_t size) {
 800a368:	b580      	push	{r7, lr}
 800a36a:	b084      	sub	sp, #16
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	60f8      	str	r0, [r7, #12]
 800a370:	60b9      	str	r1, [r7, #8]
 800a372:	607a      	str	r2, [r7, #4]
    memset((void*)buffer, 0, size);
 800a374:	687a      	ldr	r2, [r7, #4]
 800a376:	2100      	movs	r1, #0
 800a378:	68b8      	ldr	r0, [r7, #8]
 800a37a:	f01a fcb7 	bl	8024cec <memset>
}
 800a37e:	bf00      	nop
 800a380:	3710      	adds	r7, #16
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}
	...

0800a388 <_ZN6Remora3runEv>:

void Remora::run() {
 800a388:	b580      	push	{r7, lr}
 800a38a:	b082      	sub	sp, #8
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
    while (true) {
        switch (currentState) {
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	781b      	ldrb	r3, [r3, #0]
 800a394:	2b06      	cmp	r3, #6
 800a396:	d829      	bhi.n	800a3ec <_ZN6Remora3runEv+0x64>
 800a398:	a201      	add	r2, pc, #4	@ (adr r2, 800a3a0 <_ZN6Remora3runEv+0x18>)
 800a39a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a39e:	bf00      	nop
 800a3a0:	0800a3bd 	.word	0x0800a3bd
 800a3a4:	0800a3c5 	.word	0x0800a3c5
 800a3a8:	0800a3cd 	.word	0x0800a3cd
 800a3ac:	0800a3d5 	.word	0x0800a3d5
 800a3b0:	0800a3ed 	.word	0x0800a3ed
 800a3b4:	0800a3dd 	.word	0x0800a3dd
 800a3b8:	0800a3e5 	.word	0x0800a3e5
            case ST_SETUP:
                handleSetupState();
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f7ff fed5 	bl	800a16c <_ZN6Remora16handleSetupStateEv>
                break;
 800a3c2:	e017      	b.n	800a3f4 <_ZN6Remora3runEv+0x6c>
            case ST_START:
                handleStartState();
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f7ff feef 	bl	800a1a8 <_ZN6Remora16handleStartStateEv>
                break;
 800a3ca:	e013      	b.n	800a3f4 <_ZN6Remora3runEv+0x6c>
            case ST_IDLE:
                handleIdleState();
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f7ff ff25 	bl	800a21c <_ZN6Remora15handleIdleStateEv>
                break;
 800a3d2:	e00f      	b.n	800a3f4 <_ZN6Remora3runEv+0x6c>
            case ST_RUNNING:
                handleRunningState();
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f7ff ff49 	bl	800a26c <_ZN6Remora18handleRunningStateEv>
                break;
 800a3da:	e00b      	b.n	800a3f4 <_ZN6Remora3runEv+0x6c>
            case ST_RESET:
                handleResetState();
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f7ff ff79 	bl	800a2d4 <_ZN6Remora16handleResetStateEv>
                break;
 800a3e2:	e007      	b.n	800a3f4 <_ZN6Remora3runEv+0x6c>
            case ST_SYSRESET:
                handleSysResetState();
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f7ff ff9d 	bl	800a324 <_ZN6Remora19handleSysResetStateEv>
                break;
 800a3ea:	e003      	b.n	800a3f4 <_ZN6Remora3runEv+0x6c>
            default:
                printf("Error: Invalid state\n");
 800a3ec:	4806      	ldr	r0, [pc, #24]	@ (800a408 <_ZN6Remora3runEv+0x80>)
 800a3ee:	f01a fb73 	bl	8024ad8 <puts>
                break;
 800a3f2:	bf00      	nop
        }
        comms->tasks();
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	3314      	adds	r3, #20
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f000 fc6f 	bl	800acdc <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800a3fe:	4603      	mov	r3, r0
 800a400:	4618      	mov	r0, r3
 800a402:	f004 fc83 	bl	800ed0c <_ZN12CommsHandler5tasksEv>
        switch (currentState) {
 800a406:	e7c3      	b.n	800a390 <_ZN6Remora3runEv+0x8>
 800a408:	08025d00 	.word	0x08025d00

0800a40c <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b082      	sub	sp, #8
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	6039      	str	r1, [r7, #0]
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	681a      	ldr	r2, [r3, #0]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	601a      	str	r2, [r3, #0]
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	1d1a      	adds	r2, r3, #4
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	3304      	adds	r3, #4
 800a426:	4619      	mov	r1, r3
 800a428:	4610      	mov	r0, r2
 800a42a:	f000 fe4a 	bl	800b0c2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	4618      	mov	r0, r3
 800a432:	3708      	adds	r7, #8
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}

0800a438 <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>:
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 800a438:	b580      	push	{r7, lr}
 800a43a:	b082      	sub	sp, #8
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	6039      	str	r1, [r7, #0]
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	683a      	ldr	r2, [r7, #0]
 800a446:	4611      	mov	r1, r2
 800a448:	4618      	mov	r0, r3
 800a44a:	f7ff ffdf 	bl	800a40c <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	4618      	mov	r0, r3
 800a452:	3708      	adds	r7, #8
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}

0800a458 <_ZN6Remora11loadModulesEv>:
    }
}

void Remora::loadModules() {
 800a458:	b5b0      	push	{r4, r5, r7, lr}
 800a45a:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 800a45e:	af04      	add	r7, sp, #16
 800a460:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800a464:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800a468:	6018      	str	r0, [r3, #0]
    ModuleFactory* factory = ModuleFactory::getInstance();
 800a46a:	f006 f8af 	bl	80105cc <_ZN13ModuleFactory11getInstanceEv>
 800a46e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
    JsonArray modules = configHandler->getModules();
 800a472:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800a476:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	3310      	adds	r3, #16
 800a47e:	4618      	mov	r0, r3
 800a480:	f000 fdbd 	bl	800affe <_ZNKSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEptEv>
 800a484:	4602      	mov	r2, r0
 800a486:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800a48a:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 800a48e:	4611      	mov	r1, r2
 800a490:	4618      	mov	r0, r3
 800a492:	f7fb fc7b 	bl	8005d8c <_ZN17JsonConfigHandler10getModulesEv>
    if (modules.isNull()) {
 800a496:	f107 0318 	add.w	r3, r7, #24
 800a49a:	4618      	mov	r0, r3
 800a49c:	f7ff fab0 	bl	8009a00 <_ZNK11ArduinoJson8V730HB229JsonArray6isNullEv>
      //printf something here
    }

    for (size_t i = 0; i < modules.size(); i++) {
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 800a4a6:	e254      	b.n	800a952 <_ZN6Remora11loadModulesEv+0x4fa>
        //if (modules[i].containsKey("Thread") && modules[i].containsKey("Type")) {
    	if (modules[i]["Thread"].is<const char*>() && modules[i]["Type"].is<const char*>()) {
 800a4a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800a4ac:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 800a4b0:	f107 0118 	add.w	r1, r7, #24
 800a4b4:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f000 fdac 	bl	800b016 <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 800a4be:	f107 0420 	add.w	r4, r7, #32

template <typename TDerived>
template <typename TString, enable_if_t<IsString<TString>::value, int>>
inline MemberProxy<TDerived, AdaptedString<TString>>
VariantRefBase<TDerived>::operator[](const TString& key) const {
  return {derived(), adaptString(key)};
 800a4c2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f001 fa13 	bl	800b8f2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 800a4cc:	4602      	mov	r2, r0
 800a4ce:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 800a4d2:	4611      	mov	r1, r2
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f001 fa17 	bl	800b908 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 800a4da:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800a4de:	49c3      	ldr	r1, [pc, #780]	@ (800a7ec <_ZN6Remora11loadModulesEv+0x394>)
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f7fc fce6 	bl	8006eb2 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA7_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800a4e6:	f507 71ae 	add.w	r1, r7, #348	@ 0x15c
 800a4ea:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800a4ee:	9300      	str	r3, [sp, #0]
 800a4f0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800a4f4:	cb0c      	ldmia	r3, {r2, r3}
 800a4f6:	4620      	mov	r0, r4
 800a4f8:	f001 fa1e 	bl	800b938 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 800a4fc:	f107 0320 	add.w	r3, r7, #32
 800a500:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 800a504:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800a508:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 800a50c:	f8d7 01ec 	ldr.w	r0, [r7, #492]	@ 0x1ec
 800a510:	f001 fea7 	bl	800c262 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7getDataEv>
 800a514:	4604      	mov	r4, r0
 800a516:	f8d7 01ec 	ldr.w	r0, [r7, #492]	@ 0x1ec
 800a51a:	f001 feb2 	bl	800c282 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>
 800a51e:	4602      	mov	r2, r0
 800a520:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800a524:	4621      	mov	r1, r4
 800a526:	4618      	mov	r0, r3
 800a528:	f7fa f8df 	bl	80046ea <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 800a52c:	bf00      	nop
  return Converter<T>::checkJson(getVariant<variant_type>());
 800a52e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800a532:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a536:	f7ff fb7c 	bl	8009c32 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE>
 800a53a:	4603      	mov	r3, r0
 800a53c:	bf00      	nop
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d04e      	beq.n	800a5e0 <_ZN6Remora11loadModulesEv+0x188>
 800a542:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800a546:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800a54a:	f107 0118 	add.w	r1, r7, #24
 800a54e:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 800a552:	4618      	mov	r0, r3
 800a554:	f000 fd5f 	bl	800b016 <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 800a558:	f107 0450 	add.w	r4, r7, #80	@ 0x50
  return {derived(), adaptString(key)};
 800a55c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800a560:	4618      	mov	r0, r3
 800a562:	f001 f9c6 	bl	800b8f2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 800a566:	4602      	mov	r2, r0
 800a568:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a56c:	4611      	mov	r1, r2
 800a56e:	4618      	mov	r0, r3
 800a570:	f001 f9ca 	bl	800b908 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 800a574:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 800a578:	499d      	ldr	r1, [pc, #628]	@ (800a7f0 <_ZN6Remora11loadModulesEv+0x398>)
 800a57a:	4618      	mov	r0, r3
 800a57c:	f001 f9fb 	bl	800b976 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA5_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800a580:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 800a584:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800a588:	9300      	str	r3, [sp, #0]
 800a58a:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 800a58e:	cb0c      	ldmia	r3, {r2, r3}
 800a590:	4620      	mov	r0, r4
 800a592:	f001 f9d1 	bl	800b938 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 800a596:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800a59a:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 800a59e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800a5a2:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 800a5a6:	f8d7 01e4 	ldr.w	r0, [r7, #484]	@ 0x1e4
 800a5aa:	f001 fe5a 	bl	800c262 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7getDataEv>
 800a5ae:	4604      	mov	r4, r0
 800a5b0:	f8d7 01e4 	ldr.w	r0, [r7, #484]	@ 0x1e4
 800a5b4:	f001 fe65 	bl	800c282 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>
 800a5b8:	4602      	mov	r2, r0
 800a5ba:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 800a5be:	4621      	mov	r1, r4
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f7fa f892 	bl	80046ea <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 800a5c6:	bf00      	nop
  return Converter<T>::checkJson(getVariant<variant_type>());
 800a5c8:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 800a5cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a5d0:	f7ff fb2f 	bl	8009c32 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	bf00      	nop
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d001      	beq.n	800a5e0 <_ZN6Remora11loadModulesEv+0x188>
 800a5dc:	2301      	movs	r3, #1
 800a5de:	e000      	b.n	800a5e2 <_ZN6Remora11loadModulesEv+0x18a>
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	f000 81b0 	beq.w	800a948 <_ZN6Remora11loadModulesEv+0x4f0>
            const char* threadName = modules[i]["Thread"];
 800a5e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800a5ec:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800a5f0:	f107 0118 	add.w	r1, r7, #24
 800a5f4:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f000 fd0c 	bl	800b016 <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 800a5fe:	f107 0480 	add.w	r4, r7, #128	@ 0x80
  return {derived(), adaptString(key)};
 800a602:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800a606:	4618      	mov	r0, r3
 800a608:	f001 f973 	bl	800b8f2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 800a60c:	4602      	mov	r2, r0
 800a60e:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800a612:	4611      	mov	r1, r2
 800a614:	4618      	mov	r0, r3
 800a616:	f001 f977 	bl	800b908 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 800a61a:	f507 73d6 	add.w	r3, r7, #428	@ 0x1ac
 800a61e:	4973      	ldr	r1, [pc, #460]	@ (800a7ec <_ZN6Remora11loadModulesEv+0x394>)
 800a620:	4618      	mov	r0, r3
 800a622:	f7fc fc46 	bl	8006eb2 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA7_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800a626:	f507 71dc 	add.w	r1, r7, #440	@ 0x1b8
 800a62a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800a62e:	9300      	str	r3, [sp, #0]
 800a630:	f507 73d6 	add.w	r3, r7, #428	@ 0x1ac
 800a634:	cb0c      	ldmia	r3, {r2, r3}
 800a636:	4620      	mov	r0, r4
 800a638:	f001 f97e 	bl	800b938 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 800a63c:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800a640:	4618      	mov	r0, r3
 800a642:	f000 fcf8 	bl	800b036 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800a646:	f8c7 01fc 	str.w	r0, [r7, #508]	@ 0x1fc
            const char* moduleType = modules[i]["Type"];
 800a64a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800a64e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800a652:	f107 0118 	add.w	r1, r7, #24
 800a656:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 800a65a:	4618      	mov	r0, r3
 800a65c:	f000 fcdb 	bl	800b016 <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 800a660:	f107 04b0 	add.w	r4, r7, #176	@ 0xb0
 800a664:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800a668:	4618      	mov	r0, r3
 800a66a:	f001 f942 	bl	800b8f2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 800a66e:	4602      	mov	r2, r0
 800a670:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
 800a674:	4611      	mov	r1, r2
 800a676:	4618      	mov	r0, r3
 800a678:	f001 f946 	bl	800b908 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 800a67c:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800a680:	495b      	ldr	r1, [pc, #364]	@ (800a7f0 <_ZN6Remora11loadModulesEv+0x398>)
 800a682:	4618      	mov	r0, r3
 800a684:	f001 f977 	bl	800b976 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA5_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800a688:	f507 71ce 	add.w	r1, r7, #412	@ 0x19c
 800a68c:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 800a690:	9300      	str	r3, [sp, #0]
 800a692:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800a696:	cb0c      	ldmia	r3, {r2, r3}
 800a698:	4620      	mov	r0, r4
 800a69a:	f001 f94d 	bl	800b938 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 800a69e:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f000 fcc7 	bl	800b036 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800a6a8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
            uint32_t threadFreq = 0;
 800a6ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800a6b0:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	601a      	str	r2, [r3, #0]

            // Determine the thread frequency based on the thread name
            if (strcmp(threadName, "Servo") == 0) {
 800a6b8:	494e      	ldr	r1, [pc, #312]	@ (800a7f4 <_ZN6Remora11loadModulesEv+0x39c>)
 800a6ba:	f8d7 01fc 	ldr.w	r0, [r7, #508]	@ 0x1fc
 800a6be:	f7f5 fe0f 	bl	80002e0 <strcmp>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d10b      	bne.n	800a6e0 <_ZN6Remora11loadModulesEv+0x288>
                threadFreq = servoFreq;
 800a6c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800a6cc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800a6d8:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800a6dc:	601a      	str	r2, [r3, #0]
 800a6de:	e012      	b.n	800a706 <_ZN6Remora11loadModulesEv+0x2ae>
            } else if (strcmp(threadName, "Base") == 0) {
 800a6e0:	4945      	ldr	r1, [pc, #276]	@ (800a7f8 <_ZN6Remora11loadModulesEv+0x3a0>)
 800a6e2:	f8d7 01fc 	ldr.w	r0, [r7, #508]	@ 0x1fc
 800a6e6:	f7f5 fdfb 	bl	80002e0 <strcmp>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d10a      	bne.n	800a706 <_ZN6Remora11loadModulesEv+0x2ae>
                threadFreq = baseFreq;
 800a6f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800a6f4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a6fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800a700:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800a704:	601a      	str	r2, [r3, #0]
            }

            // Add the "ThreadFreq" key and its value to the module's JSON object
            modules[i]["ThreadFreq"] = threadFreq;
 800a706:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800a70a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a70e:	f107 0118 	add.w	r1, r7, #24
 800a712:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 800a716:	4618      	mov	r0, r3
 800a718:	f000 fc7d 	bl	800b016 <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 800a71c:	f107 04e0 	add.w	r4, r7, #224	@ 0xe0
 800a720:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800a724:	4618      	mov	r0, r3
 800a726:	f001 f8e4 	bl	800b8f2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 800a72a:	4602      	mov	r2, r0
 800a72c:	f507 73ea 	add.w	r3, r7, #468	@ 0x1d4
 800a730:	4611      	mov	r1, r2
 800a732:	4618      	mov	r0, r3
 800a734:	f001 f8e8 	bl	800b908 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 800a738:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 800a73c:	492f      	ldr	r1, [pc, #188]	@ (800a7fc <_ZN6Remora11loadModulesEv+0x3a4>)
 800a73e:	4618      	mov	r0, r3
 800a740:	f001 f94e 	bl	800b9e0 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA11_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800a744:	f507 71ea 	add.w	r1, r7, #468	@ 0x1d4
 800a748:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800a74c:	9300      	str	r3, [sp, #0]
 800a74e:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 800a752:	cb0c      	ldmia	r3, {r2, r3}
 800a754:	4620      	mov	r0, r4
 800a756:	f001 f8ef 	bl	800b938 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 800a75a:	f107 0214 	add.w	r2, r7, #20
 800a75e:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800a762:	4611      	mov	r1, r2
 800a764:	4618      	mov	r0, r3
 800a766:	f000 fc72 	bl	800b04e <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEaSImEERS7_RKT_>

            // Create module using factory
            std::shared_ptr<Module> _mod = factory->createModule(threadName, moduleType, modules[i], this);
 800a76a:	f8d7 5200 	ldr.w	r5, [r7, #512]	@ 0x200
 800a76e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a772:	f107 0118 	add.w	r1, r7, #24
 800a776:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 800a77a:	4618      	mov	r0, r3
 800a77c:	f000 fc4b 	bl	800b016 <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 800a780:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a784:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800a788:	4611      	mov	r1, r2
 800a78a:	4618      	mov	r0, r3
 800a78c:	f000 fc6d 	bl	800b06a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEEcvT_INS0_11JsonVariantELi0EEEv>
 800a790:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800a794:	f5a3 74fe 	sub.w	r4, r3, #508	@ 0x1fc
 800a798:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800a79c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	9302      	str	r3, [sp, #8]
 800a7a4:	466a      	mov	r2, sp
 800a7a6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a7aa:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a7ae:	e882 0003 	stmia.w	r2, {r0, r1}
 800a7b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800a7b6:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 800a7ba:	4629      	mov	r1, r5
 800a7bc:	4620      	mov	r0, r4
 800a7be:	f005 fe2b 	bl	8010418 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora>

            // Check if the module creation was successful
            if (!_mod) {
 800a7c2:	f107 030c 	add.w	r3, r7, #12
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f000 fc5e 	bl	800b088 <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	f083 0301 	eor.w	r3, r3, #1
 800a7d2:	b2db      	uxtb	r3, r3
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d015      	beq.n	800a804 <_ZN6Remora11loadModulesEv+0x3ac>
            	printf("Error: Failed to create module of type '%s' for thread '%s'. Skipping registration.\n",
 800a7d8:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 800a7dc:	f8d7 11f8 	ldr.w	r1, [r7, #504]	@ 0x1f8
 800a7e0:	4807      	ldr	r0, [pc, #28]	@ (800a800 <_ZN6Remora11loadModulesEv+0x3a8>)
 800a7e2:	f01a f909 	bl	80249f8 <iprintf>
						moduleType, threadName);
				continue; // Skip to the next iteration
 800a7e6:	2400      	movs	r4, #0
 800a7e8:	e0a8      	b.n	800a93c <_ZN6Remora11loadModulesEv+0x4e4>
 800a7ea:	bf00      	nop
 800a7ec:	08025d18 	.word	0x08025d18
 800a7f0:	08025d20 	.word	0x08025d20
 800a7f4:	08025bf8 	.word	0x08025bf8
 800a7f8:	08025bf0 	.word	0x08025bf0
 800a7fc:	08025d28 	.word	0x08025d28
 800a800:	08025d34 	.word	0x08025d34
			}

            bool _modPost = _mod->getUsesModulePost();
 800a804:	f107 030c 	add.w	r3, r7, #12
 800a808:	4618      	mov	r0, r3
 800a80a:	f000 fc4e 	bl	800b0aa <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800a80e:	4603      	mov	r3, r0
 800a810:	681a      	ldr	r2, [r3, #0]
 800a812:	3218      	adds	r2, #24
 800a814:	6812      	ldr	r2, [r2, #0]
 800a816:	4618      	mov	r0, r3
 800a818:	4790      	blx	r2
 800a81a:	4603      	mov	r3, r0
 800a81c:	f887 31f7 	strb.w	r3, [r7, #503]	@ 0x1f7

            if (strcmp(threadName, "Servo") == 0) {
 800a820:	4957      	ldr	r1, [pc, #348]	@ (800a980 <_ZN6Remora11loadModulesEv+0x528>)
 800a822:	f8d7 01fc 	ldr.w	r0, [r7, #508]	@ 0x1fc
 800a826:	f7f5 fd5b 	bl	80002e0 <strcmp>
 800a82a:	4603      	mov	r3, r0
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d13e      	bne.n	800a8ae <_ZN6Remora11loadModulesEv+0x456>
                servoThread->registerModule(_mod);
 800a830:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800a834:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	3320      	adds	r3, #32
 800a83c:	4618      	mov	r0, r3
 800a83e:	f000 fbc2 	bl	800afc6 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 800a842:	4604      	mov	r4, r0
 800a844:	f107 020c 	add.w	r2, r7, #12
 800a848:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800a84c:	4611      	mov	r1, r2
 800a84e:	4618      	mov	r0, r3
 800a850:	f7ff fdf2 	bl	800a438 <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>
 800a854:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800a858:	4619      	mov	r1, r3
 800a85a:	4620      	mov	r0, r4
 800a85c:	f00b fb66 	bl	8015f2c <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE>
 800a860:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800a864:	4618      	mov	r0, r3
 800a866:	f7ff fb1a 	bl	8009e9e <_ZNSt10shared_ptrI6ModuleED1Ev>
            	if (_modPost) {
 800a86a:	f897 31f7 	ldrb.w	r3, [r7, #503]	@ 0x1f7
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d063      	beq.n	800a93a <_ZN6Remora11loadModulesEv+0x4e2>
            		servoThread->registerModulePost(_mod);
 800a872:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800a876:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	3320      	adds	r3, #32
 800a87e:	4618      	mov	r0, r3
 800a880:	f000 fba1 	bl	800afc6 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 800a884:	4604      	mov	r4, r0
 800a886:	f107 020c 	add.w	r2, r7, #12
 800a88a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a88e:	4611      	mov	r1, r2
 800a890:	4618      	mov	r0, r3
 800a892:	f7ff fdd1 	bl	800a438 <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>
 800a896:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a89a:	4619      	mov	r1, r3
 800a89c:	4620      	mov	r0, r4
 800a89e:	f00b fb61 	bl	8015f64 <_ZN9pruThread18registerModulePostESt10shared_ptrI6ModuleE>
 800a8a2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f7ff faf9 	bl	8009e9e <_ZNSt10shared_ptrI6ModuleED1Ev>
 800a8ac:	e045      	b.n	800a93a <_ZN6Remora11loadModulesEv+0x4e2>
            	}
            }
            else if (strcmp(threadName, "Base") == 0) {
 800a8ae:	4935      	ldr	r1, [pc, #212]	@ (800a984 <_ZN6Remora11loadModulesEv+0x52c>)
 800a8b0:	f8d7 01fc 	ldr.w	r0, [r7, #508]	@ 0x1fc
 800a8b4:	f7f5 fd14 	bl	80002e0 <strcmp>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d13d      	bne.n	800a93a <_ZN6Remora11loadModulesEv+0x4e2>
                baseThread->registerModule(_mod);
 800a8be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800a8c2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	331c      	adds	r3, #28
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f000 fb7b 	bl	800afc6 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 800a8d0:	4604      	mov	r4, r0
 800a8d2:	f107 020c 	add.w	r2, r7, #12
 800a8d6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a8da:	4611      	mov	r1, r2
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f7ff fdab 	bl	800a438 <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>
 800a8e2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a8e6:	4619      	mov	r1, r3
 800a8e8:	4620      	mov	r0, r4
 800a8ea:	f00b fb1f 	bl	8015f2c <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE>
 800a8ee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f7ff fad3 	bl	8009e9e <_ZNSt10shared_ptrI6ModuleED1Ev>
            	if (_modPost) {
 800a8f8:	f897 31f7 	ldrb.w	r3, [r7, #503]	@ 0x1f7
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d01c      	beq.n	800a93a <_ZN6Remora11loadModulesEv+0x4e2>
            		servoThread->registerModulePost(_mod);
 800a900:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800a904:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	3320      	adds	r3, #32
 800a90c:	4618      	mov	r0, r3
 800a90e:	f000 fb5a 	bl	800afc6 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 800a912:	4604      	mov	r4, r0
 800a914:	f107 020c 	add.w	r2, r7, #12
 800a918:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a91c:	4611      	mov	r1, r2
 800a91e:	4618      	mov	r0, r3
 800a920:	f7ff fd8a 	bl	800a438 <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>
 800a924:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a928:	4619      	mov	r1, r3
 800a92a:	4620      	mov	r0, r4
 800a92c:	f00b fb1a 	bl	8015f64 <_ZN9pruThread18registerModulePostESt10shared_ptrI6ModuleE>
 800a930:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a934:	4618      	mov	r0, r3
 800a936:	f7ff fab2 	bl	8009e9e <_ZNSt10shared_ptrI6ModuleED1Ev>
            	}
            }
            else {
                //onLoad.push_back(move(_mod));
            }
        }
 800a93a:	2401      	movs	r4, #1
 800a93c:	f107 030c 	add.w	r3, r7, #12
 800a940:	4618      	mov	r0, r3
 800a942:	f7ff faac 	bl	8009e9e <_ZNSt10shared_ptrI6ModuleED1Ev>
 800a946:	2c01      	cmp	r4, #1
    for (size_t i = 0; i < modules.size(); i++) {
 800a948:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 800a94c:	3301      	adds	r3, #1
 800a94e:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 800a952:	f107 0318 	add.w	r3, r7, #24
 800a956:	4618      	mov	r0, r3
 800a958:	f7ff f863 	bl	8009a22 <_ZNK11ArduinoJson8V730HB229JsonArray4sizeEv>
 800a95c:	4602      	mov	r2, r0
 800a95e:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 800a962:	4293      	cmp	r3, r2
 800a964:	bf34      	ite	cc
 800a966:	2301      	movcc	r3, #1
 800a968:	2300      	movcs	r3, #0
 800a96a:	b2db      	uxtb	r3, r3
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	f47f ad9b 	bne.w	800a4a8 <_ZN6Remora11loadModulesEv+0x50>
    }

}
 800a972:	bf00      	nop
 800a974:	bf00      	nop
 800a976:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bdb0      	pop	{r4, r5, r7, pc}
 800a97e:	bf00      	nop
 800a980:	08025bf8 	.word	0x08025bf8
 800a984:	08025bf0 	.word	0x08025bf0

0800a988 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800a988:	b580      	push	{r7, lr}
 800a98a:	b082      	sub	sp, #8
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
      { delete this; }
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d005      	beq.n	800a9a2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x1a>
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	3304      	adds	r3, #4
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	4798      	blx	r3
 800a9a2:	bf00      	nop
 800a9a4:	3708      	adds	r7, #8
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}

0800a9aa <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEED1Ev>:
  ~MemoryPoolList() {
 800a9aa:	b480      	push	{r7}
 800a9ac:	b083      	sub	sp, #12
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	6078      	str	r0, [r7, #4]
  }
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	370c      	adds	r7, #12
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9be:	4770      	bx	lr

0800a9c0 <_ZSt4moveIRSt10unique_ptrI14CommsInterfaceSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800a9c0:	b480      	push	{r7}
 800a9c2:	b083      	sub	sp, #12
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	370c      	adds	r7, #12
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d4:	4770      	bx	lr

0800a9d6 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEaSEOS3_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 800a9d6:	b580      	push	{r7, lr}
 800a9d8:	b082      	sub	sp, #8
 800a9da:	af00      	add	r7, sp, #0
 800a9dc:	6078      	str	r0, [r7, #4]
 800a9de:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 800a9e0:	6838      	ldr	r0, [r7, #0]
 800a9e2:	f000 fbfb 	bl	800b1dc <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE7releaseEv>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	4619      	mov	r1, r3
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f000 fbd6 	bl	800b19c <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE5resetEPS0_>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 800a9f0:	6838      	ldr	r0, [r7, #0]
 800a9f2:	f000 fc08 	bl	800b206 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE10_M_deleterEv>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f000 fc11 	bl	800b220 <_ZSt7forwardISt14default_deleteI14CommsInterfaceEEOT_RNSt16remove_referenceIS3_E4typeE>
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f000 fc01 	bl	800b206 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE10_M_deleterEv>
	return *this;
 800aa04:	687b      	ldr	r3, [r7, #4]
      }
 800aa06:	4618      	mov	r0, r3
 800aa08:	3708      	adds	r7, #8
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}

0800aa0e <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EE3getEv>:
      }

      /// Return the stored pointer.
      _GLIBCXX23_CONSTEXPR
      pointer
      get() const noexcept
 800aa0e:	b580      	push	{r7, lr}
 800aa10:	b082      	sub	sp, #8
 800aa12:	af00      	add	r7, sp, #0
 800aa14:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f000 fc0c 	bl	800b236 <_ZNKSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	4618      	mov	r0, r3
 800aa22:	3708      	adds	r7, #8
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}

0800aa28 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEC1Ev>:
      __uniq_ptr_impl() = default;
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b082      	sub	sp, #8
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	4618      	mov	r0, r3
 800aa34:	f000 fc0d 	bl	800b252 <_ZNSt5tupleIJP17JsonConfigHandlerSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3708      	adds	r7, #8
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}

0800aa42 <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800aa42:	b580      	push	{r7, lr}
 800aa44:	b082      	sub	sp, #8
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	6078      	str	r0, [r7, #4]
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f7ff ffeb 	bl	800aa28 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEC1Ev>
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	4618      	mov	r0, r3
 800aa56:	3708      	adds	r7, #8
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd80      	pop	{r7, pc}

0800aa5c <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEC1IS2_vEEv>:
	constexpr unique_ptr() noexcept
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b082      	sub	sp, #8
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
	: _M_t()
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2200      	movs	r2, #0
 800aa68:	601a      	str	r2, [r3, #0]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f7ff ffe8 	bl	800aa42 <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>
	{ }
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	4618      	mov	r0, r3
 800aa76:	3708      	adds	r7, #8
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800aa7c:	b590      	push	{r4, r7, lr}
 800aa7e:	b085      	sub	sp, #20
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	4618      	mov	r0, r3
 800aa88:	f000 fbf0 	bl	800b26c <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800aa8c:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d00c      	beq.n	800aab0 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f000 fbf5 	bl	800b286 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EE11get_deleterEv>
 800aa9c:	4604      	mov	r4, r0
 800aa9e:	68f8      	ldr	r0, [r7, #12]
 800aaa0:	f000 fbfe 	bl	800b2a0 <_ZSt4moveIRP17JsonConfigHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	4619      	mov	r1, r3
 800aaaa:	4620      	mov	r0, r4
 800aaac:	f000 fc16 	bl	800b2dc <_ZNKSt14default_deleteI17JsonConfigHandlerEclEPS0_>
	__ptr = pointer();
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	2200      	movs	r2, #0
 800aab4:	601a      	str	r2, [r3, #0]
      }
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	4618      	mov	r0, r3
 800aaba:	3714      	adds	r7, #20
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd90      	pop	{r4, r7, pc}

0800aac0 <_ZNSt10shared_ptrI12CommsHandlerEC1Ev>:
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b082      	sub	sp, #8
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	4618      	mov	r0, r3
 800aacc:	f000 fc19 	bl	800b302 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	4618      	mov	r0, r3
 800aad4:	3708      	adds	r7, #8
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}

0800aada <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 800aada:	b580      	push	{r7, lr}
 800aadc:	b082      	sub	sp, #8
 800aade:	af00      	add	r7, sp, #0
 800aae0:	6078      	str	r0, [r7, #4]
	if (_M_pi != nullptr)
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d004      	beq.n	800aaf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1a>
	  _M_pi->_M_release();
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f7fe fe21 	bl	8009736 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3708      	adds	r7, #8
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}

0800aafe <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEC1Ev>:
      __uniq_ptr_impl() = default;
 800aafe:	b580      	push	{r7, lr}
 800ab00:	b082      	sub	sp, #8
 800ab02:	af00      	add	r7, sp, #0
 800ab04:	6078      	str	r0, [r7, #4]
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f000 fc0b 	bl	800b324 <_ZNSt5tupleIJP9pruThreadSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	4618      	mov	r0, r3
 800ab12:	3708      	adds	r7, #8
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}

0800ab18 <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b082      	sub	sp, #8
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	4618      	mov	r0, r3
 800ab24:	f7ff ffeb 	bl	800aafe <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEC1Ev>
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	3708      	adds	r7, #8
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}

0800ab32 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEv>:
	constexpr unique_ptr() noexcept
 800ab32:	b580      	push	{r7, lr}
 800ab34:	b082      	sub	sp, #8
 800ab36:	af00      	add	r7, sp, #0
 800ab38:	6078      	str	r0, [r7, #4]
	: _M_t()
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	601a      	str	r2, [r3, #0]
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	4618      	mov	r0, r3
 800ab44:	f7ff ffe8 	bl	800ab18 <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>
	{ }
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3708      	adds	r7, #8
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}

0800ab52 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800ab52:	b590      	push	{r4, r7, lr}
 800ab54:	b085      	sub	sp, #20
 800ab56:	af00      	add	r7, sp, #0
 800ab58:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f000 fbee 	bl	800b33e <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800ab62:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d00c      	beq.n	800ab86 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f000 fbf3 	bl	800b358 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EE11get_deleterEv>
 800ab72:	4604      	mov	r4, r0
 800ab74:	68f8      	ldr	r0, [r7, #12]
 800ab76:	f000 fbfc 	bl	800b372 <_ZSt4moveIRP9pruThreadEONSt16remove_referenceIT_E4typeEOS4_>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	4619      	mov	r1, r3
 800ab80:	4620      	mov	r0, r4
 800ab82:	f000 fc18 	bl	800b3b6 <_ZNKSt14default_deleteI9pruThreadEclEPS0_>
	__ptr = pointer();
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	601a      	str	r2, [r3, #0]
      }
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3714      	adds	r7, #20
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd90      	pop	{r4, r7, pc}

0800ab96 <_ZSt11make_uniqueI17JsonConfigHandlerJP6RemoraEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
   *  @relates unique_ptr
   */
  template<typename _Tp, typename... _Args>
    _GLIBCXX23_CONSTEXPR
    inline __detail::__unique_ptr_t<_Tp>
    make_unique(_Args&&... __args)
 800ab96:	b590      	push	{r4, r7, lr}
 800ab98:	b083      	sub	sp, #12
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	6078      	str	r0, [r7, #4]
 800ab9e:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800aba0:	206c      	movs	r0, #108	@ 0x6c
 800aba2:	f019 f95d 	bl	8023e60 <_Znwj>
 800aba6:	4603      	mov	r3, r0
 800aba8:	461c      	mov	r4, r3
 800abaa:	6838      	ldr	r0, [r7, #0]
 800abac:	f000 fc16 	bl	800b3dc <_ZSt7forwardIP6RemoraEOT_RNSt16remove_referenceIS2_E4typeE>
 800abb0:	4603      	mov	r3, r0
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	4619      	mov	r1, r3
 800abb6:	4620      	mov	r0, r4
 800abb8:	f7fa ffda 	bl	8005b70 <_ZN17JsonConfigHandlerC1EP6Remora>
 800abbc:	4621      	mov	r1, r4
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f000 fc27 	bl	800b412 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	370c      	adds	r7, #12
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd90      	pop	{r4, r7, pc}

0800abcc <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEaSEOS3_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 800abcc:	b580      	push	{r7, lr}
 800abce:	b082      	sub	sp, #8
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
 800abd4:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 800abd6:	6838      	ldr	r0, [r7, #0]
 800abd8:	f000 fc4a 	bl	800b470 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE7releaseEv>
 800abdc:	4603      	mov	r3, r0
 800abde:	4619      	mov	r1, r3
 800abe0:	6878      	ldr	r0, [r7, #4]
 800abe2:	f000 fc25 	bl	800b430 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE5resetEPS0_>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 800abe6:	6838      	ldr	r0, [r7, #0]
 800abe8:	f000 fc57 	bl	800b49a <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE10_M_deleterEv>
 800abec:	4603      	mov	r3, r0
 800abee:	4618      	mov	r0, r3
 800abf0:	f000 fc60 	bl	800b4b4 <_ZSt7forwardISt14default_deleteI17JsonConfigHandlerEEOT_RNSt16remove_referenceIS3_E4typeE>
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	f000 fc50 	bl	800b49a <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE10_M_deleterEv>
	return *this;
 800abfa:	687b      	ldr	r3, [r7, #4]
      }
 800abfc:	4618      	mov	r0, r3
 800abfe:	3708      	adds	r7, #8
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd80      	pop	{r7, pc}

0800ac04 <_ZSt11make_uniqueI8SPICommsJRPV8rxData_tRPV8txData_tP11SPI_TypeDefEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800ac04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac06:	b085      	sub	sp, #20
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	60f8      	str	r0, [r7, #12]
 800ac0c:	60b9      	str	r1, [r7, #8]
 800ac0e:	607a      	str	r2, [r7, #4]
 800ac10:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800ac12:	f44f 7011 	mov.w	r0, #580	@ 0x244
 800ac16:	f019 f923 	bl	8023e60 <_Znwj>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	461e      	mov	r6, r3
 800ac1e:	68b8      	ldr	r0, [r7, #8]
 800ac20:	f000 fc53 	bl	800b4ca <_ZSt7forwardIRPV8rxData_tEOT_RNSt16remove_referenceIS4_E4typeE>
 800ac24:	4603      	mov	r3, r0
 800ac26:	681c      	ldr	r4, [r3, #0]
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	f000 fc59 	bl	800b4e0 <_ZSt7forwardIRPV8txData_tEOT_RNSt16remove_referenceIS4_E4typeE>
 800ac2e:	4603      	mov	r3, r0
 800ac30:	681d      	ldr	r5, [r3, #0]
 800ac32:	6838      	ldr	r0, [r7, #0]
 800ac34:	f000 fc5f 	bl	800b4f6 <_ZSt7forwardIP11SPI_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	462a      	mov	r2, r5
 800ac3e:	4621      	mov	r1, r4
 800ac40:	4630      	mov	r0, r6
 800ac42:	f7f6 f8bb 	bl	8000dbc <_ZN8SPICommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef>
 800ac46:	4631      	mov	r1, r6
 800ac48:	68f8      	ldr	r0, [r7, #12]
 800ac4a:	f000 fc6f 	bl	800b52c <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800ac4e:	68f8      	ldr	r0, [r7, #12]
 800ac50:	3714      	adds	r7, #20
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ac56 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800ac56:	b590      	push	{r4, r7, lr}
 800ac58:	b085      	sub	sp, #20
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	4618      	mov	r0, r3
 800ac62:	f000 fc72 	bl	800b54a <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE6_M_ptrEv>
 800ac66:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d00c      	beq.n	800ac8a <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f000 fc77 	bl	800b564 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EE11get_deleterEv>
 800ac76:	4604      	mov	r4, r0
 800ac78:	68f8      	ldr	r0, [r7, #12]
 800ac7a:	f000 fc80 	bl	800b57e <_ZSt4moveIRP8SPICommsEONSt16remove_referenceIT_E4typeEOS4_>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	4619      	mov	r1, r3
 800ac84:	4620      	mov	r0, r4
 800ac86:	f000 fc85 	bl	800b594 <_ZNKSt14default_deleteI8SPICommsEclEPS0_>
	__ptr = pointer();
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	601a      	str	r2, [r3, #0]
      }
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	4618      	mov	r0, r3
 800ac94:	3714      	adds	r7, #20
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd90      	pop	{r4, r7, pc}

0800ac9a <_ZSt11make_sharedI12CommsHandlerJEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueES4_E4typeEEDpOT0_>:
   *  @throw  std::bad_alloc, or an exception thrown from the
   *          constructor of @a _Tp.
   */
  template<typename _Tp, typename... _Args>
    inline shared_ptr<_NonArray<_Tp>>
    make_shared(_Args&&... __args)
 800ac9a:	b580      	push	{r7, lr}
 800ac9c:	b084      	sub	sp, #16
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	6078      	str	r0, [r7, #4]
    {
      using _Alloc = allocator<void>;
      _Alloc __a;
      return shared_ptr<_Tp>(_Sp_alloc_shared_tag<_Alloc>{__a},
			     std::forward<_Args>(__args)...);
 800aca2:	f107 030c 	add.w	r3, r7, #12
 800aca6:	4619      	mov	r1, r3
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f000 fc84 	bl	800b5b6 <_ZNSt10shared_ptrI12CommsHandlerEC1ISaIvEJEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
    }
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	3710      	adds	r7, #16
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}

0800acb6 <_ZNSt10shared_ptrI12CommsHandlerEaSEOS1_>:
      operator=(shared_ptr&& __r) noexcept
 800acb6:	b590      	push	{r4, r7, lr}
 800acb8:	b083      	sub	sp, #12
 800acba:	af00      	add	r7, sp, #0
 800acbc:	6078      	str	r0, [r7, #4]
 800acbe:	6039      	str	r1, [r7, #0]
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
 800acc0:	687c      	ldr	r4, [r7, #4]
 800acc2:	6838      	ldr	r0, [r7, #0]
 800acc4:	f000 fc86 	bl	800b5d4 <_ZSt4moveIRSt10shared_ptrI12CommsHandlerEEONSt16remove_referenceIT_E4typeEOS5_>
 800acc8:	4603      	mov	r3, r0
 800acca:	4619      	mov	r1, r3
 800accc:	4620      	mov	r0, r4
 800acce:	f000 fc8c 	bl	800b5ea <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>
	return *this;
 800acd2:	687b      	ldr	r3, [r7, #4]
      }
 800acd4:	4618      	mov	r0, r3
 800acd6:	370c      	adds	r7, #12
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd90      	pop	{r4, r7, pc}

0800acdc <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 800acdc:	b580      	push	{r7, lr}
 800acde:	b082      	sub	sp, #8
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
	return _M_get();
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f000 fc9f 	bl	800b628 <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 800acea:	4603      	mov	r3, r0
      }
 800acec:	4618      	mov	r0, r3
 800acee:	3708      	adds	r7, #8
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}

0800acf4 <_ZSt4moveIRSt10unique_ptrI8SPICommsSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800acf4:	b480      	push	{r7}
 800acf6:	b083      	sub	sp, #12
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	4618      	mov	r0, r3
 800ad00:	370c      	adds	r7, #12
 800ad02:	46bd      	mov	sp, r7
 800ad04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad08:	4770      	bx	lr

0800ad0a <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EIS1_I8SPICommsEEEPS0_OT_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800ad0a:	b580      	push	{r7, lr}
 800ad0c:	b084      	sub	sp, #16
 800ad0e:	af00      	add	r7, sp, #0
 800ad10:	60f8      	str	r0, [r7, #12]
 800ad12:	60b9      	str	r1, [r7, #8]
 800ad14:	607a      	str	r2, [r7, #4]
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	68b9      	ldr	r1, [r7, #8]
 800ad1a:	687a      	ldr	r2, [r7, #4]
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	f000 fca7 	bl	800b670 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEC1IS1_I8SPICommsEEEPS0_OT_>
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	4618      	mov	r0, r3
 800ad26:	3710      	adds	r7, #16
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}

0800ad2c <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEC1I8SPICommsS1_IS5_EvEEOS_IT_T0_E>:
	unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
 800ad2c:	b5b0      	push	{r4, r5, r7, lr}
 800ad2e:	b082      	sub	sp, #8
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
 800ad34:	6039      	str	r1, [r7, #0]
	: _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
 800ad36:	687c      	ldr	r4, [r7, #4]
 800ad38:	6838      	ldr	r0, [r7, #0]
 800ad3a:	f000 fc81 	bl	800b640 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EE7releaseEv>
 800ad3e:	4605      	mov	r5, r0
 800ad40:	6838      	ldr	r0, [r7, #0]
 800ad42:	f000 fc0f 	bl	800b564 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EE11get_deleterEv>
 800ad46:	4603      	mov	r3, r0
 800ad48:	4618      	mov	r0, r3
 800ad4a:	f000 fc86 	bl	800b65a <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	461a      	mov	r2, r3
 800ad52:	4629      	mov	r1, r5
 800ad54:	4620      	mov	r0, r4
 800ad56:	f7ff ffd8 	bl	800ad0a <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EIS1_I8SPICommsEEEPS0_OT_>
	{ }
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3708      	adds	r7, #8
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bdb0      	pop	{r4, r5, r7, pc}

0800ad64 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800ad64:	b590      	push	{r4, r7, lr}
 800ad66:	b085      	sub	sp, #20
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f000 fc94 	bl	800b69c <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 800ad74:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d00c      	beq.n	800ad98 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f000 fc99 	bl	800b6b6 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EE11get_deleterEv>
 800ad84:	4604      	mov	r4, r0
 800ad86:	68f8      	ldr	r0, [r7, #12]
 800ad88:	f000 fca2 	bl	800b6d0 <_ZSt4moveIRP14CommsInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	4619      	mov	r1, r3
 800ad92:	4620      	mov	r0, r4
 800ad94:	f000 fca7 	bl	800b6e6 <_ZNKSt14default_deleteI14CommsInterfaceEclEPS0_>
	__ptr = pointer();
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	601a      	str	r2, [r3, #0]
      }
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	4618      	mov	r0, r3
 800ada2:	3714      	adds	r7, #20
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd90      	pop	{r4, r7, pc}

0800ada8 <_ZSt11make_uniqueI9pruThreadJRA5_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800ada8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adac:	b08e      	sub	sp, #56	@ 0x38
 800adae:	af02      	add	r7, sp, #8
 800adb0:	60f8      	str	r0, [r7, #12]
 800adb2:	60b9      	str	r1, [r7, #8]
 800adb4:	607a      	str	r2, [r7, #4]
 800adb6:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800adb8:	2044      	movs	r0, #68	@ 0x44
 800adba:	f019 f851 	bl	8023e60 <_Znwj>
 800adbe:	4603      	mov	r3, r0
 800adc0:	4698      	mov	r8, r3
 800adc2:	68b8      	ldr	r0, [r7, #8]
 800adc4:	f000 fca0 	bl	800b708 <_ZSt7forwardIRA5_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 800adc8:	4604      	mov	r4, r0
 800adca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800adce:	4618      	mov	r0, r3
 800add0:	f019 f857 	bl	8023e82 <_ZNSaIcEC1Ev>
 800add4:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800add8:	f107 0314 	add.w	r3, r7, #20
 800addc:	4621      	mov	r1, r4
 800adde:	4618      	mov	r0, r3
 800ade0:	f7fb fc4c 	bl	800667c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f000 fc9a 	bl	800b71e <_ZSt7forwardIP11TIM_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800adea:	4603      	mov	r3, r0
 800adec:	681d      	ldr	r5, [r3, #0]
 800adee:	6838      	ldr	r0, [r7, #0]
 800adf0:	f000 fca0 	bl	800b734 <_ZSt7forwardI9IRQn_TypeEOT_RNSt16remove_referenceIS1_E4typeE>
 800adf4:	4603      	mov	r3, r0
 800adf6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800adfa:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800adfc:	f000 fca5 	bl	800b74a <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
 800ae00:	4603      	mov	r3, r0
 800ae02:	681c      	ldr	r4, [r3, #0]
 800ae04:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800ae06:	f000 fcab 	bl	800b760 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	b2db      	uxtb	r3, r3
 800ae10:	f107 0114 	add.w	r1, r7, #20
 800ae14:	9301      	str	r3, [sp, #4]
 800ae16:	9400      	str	r4, [sp, #0]
 800ae18:	4633      	mov	r3, r6
 800ae1a:	462a      	mov	r2, r5
 800ae1c:	4640      	mov	r0, r8
 800ae1e:	f00a ffc9 	bl	8015db4 <_ZN9pruThreadC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP11TIM_TypeDef9IRQn_Typemh>
 800ae22:	4641      	mov	r1, r8
 800ae24:	68f8      	ldr	r0, [r7, #12]
 800ae26:	f000 fcb6 	bl	800b796 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800ae2a:	f107 0314 	add.w	r3, r7, #20
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f019 f905 	bl	802403e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800ae34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f019 f823 	bl	8023e84 <_ZNSaIcED1Ev>
 800ae3e:	bf00      	nop
 800ae40:	68f8      	ldr	r0, [r7, #12]
 800ae42:	3730      	adds	r7, #48	@ 0x30
 800ae44:	46bd      	mov	sp, r7
 800ae46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ae4a <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEaSEOS3_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 800ae4a:	b580      	push	{r7, lr}
 800ae4c:	b082      	sub	sp, #8
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	6078      	str	r0, [r7, #4]
 800ae52:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 800ae54:	6838      	ldr	r0, [r7, #0]
 800ae56:	f000 fccd 	bl	800b7f4 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE7releaseEv>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	4619      	mov	r1, r3
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f000 fca8 	bl	800b7b4 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE5resetEPS0_>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 800ae64:	6838      	ldr	r0, [r7, #0]
 800ae66:	f000 fcda 	bl	800b81e <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f000 fce3 	bl	800b838 <_ZSt7forwardISt14default_deleteI9pruThreadEEOT_RNSt16remove_referenceIS3_E4typeE>
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f000 fcd3 	bl	800b81e <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>
	return *this;
 800ae78:	687b      	ldr	r3, [r7, #4]
      }
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3708      	adds	r7, #8
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}

0800ae82 <_ZSt11make_uniqueI9pruThreadJRA6_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800ae82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae86:	b08e      	sub	sp, #56	@ 0x38
 800ae88:	af02      	add	r7, sp, #8
 800ae8a:	60f8      	str	r0, [r7, #12]
 800ae8c:	60b9      	str	r1, [r7, #8]
 800ae8e:	607a      	str	r2, [r7, #4]
 800ae90:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800ae92:	2044      	movs	r0, #68	@ 0x44
 800ae94:	f018 ffe4 	bl	8023e60 <_Znwj>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	4698      	mov	r8, r3
 800ae9c:	68b8      	ldr	r0, [r7, #8]
 800ae9e:	f000 fcd6 	bl	800b84e <_ZSt7forwardIRA6_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 800aea2:	4604      	mov	r4, r0
 800aea4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f018 ffea 	bl	8023e82 <_ZNSaIcEC1Ev>
 800aeae:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800aeb2:	f107 0314 	add.w	r3, r7, #20
 800aeb6:	4621      	mov	r1, r4
 800aeb8:	4618      	mov	r0, r3
 800aeba:	f7fb fbdf 	bl	800667c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	f000 fc2d 	bl	800b71e <_ZSt7forwardIP11TIM_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800aec4:	4603      	mov	r3, r0
 800aec6:	681d      	ldr	r5, [r3, #0]
 800aec8:	6838      	ldr	r0, [r7, #0]
 800aeca:	f000 fc33 	bl	800b734 <_ZSt7forwardI9IRQn_TypeEOT_RNSt16remove_referenceIS1_E4typeE>
 800aece:	4603      	mov	r3, r0
 800aed0:	f9b3 6000 	ldrsh.w	r6, [r3]
 800aed4:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800aed6:	f000 fc38 	bl	800b74a <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
 800aeda:	4603      	mov	r3, r0
 800aedc:	681c      	ldr	r4, [r3, #0]
 800aede:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800aee0:	f000 fc3e 	bl	800b760 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 800aee4:	4603      	mov	r3, r0
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	b2db      	uxtb	r3, r3
 800aeea:	f107 0114 	add.w	r1, r7, #20
 800aeee:	9301      	str	r3, [sp, #4]
 800aef0:	9400      	str	r4, [sp, #0]
 800aef2:	4633      	mov	r3, r6
 800aef4:	462a      	mov	r2, r5
 800aef6:	4640      	mov	r0, r8
 800aef8:	f00a ff5c 	bl	8015db4 <_ZN9pruThreadC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP11TIM_TypeDef9IRQn_Typemh>
 800aefc:	4641      	mov	r1, r8
 800aefe:	68f8      	ldr	r0, [r7, #12]
 800af00:	f000 fc49 	bl	800b796 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800af04:	f107 0314 	add.w	r3, r7, #20
 800af08:	4618      	mov	r0, r3
 800af0a:	f019 f898 	bl	802403e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800af0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800af12:	4618      	mov	r0, r3
 800af14:	f018 ffb6 	bl	8023e84 <_ZNSaIcED1Ev>
 800af18:	bf00      	nop
 800af1a:	68f8      	ldr	r0, [r7, #12]
 800af1c:	3730      	adds	r7, #48	@ 0x30
 800af1e:	46bd      	mov	sp, r7
 800af20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800af24 <_ZSt11make_uniqueI9pruThreadJRA7_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800af24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af28:	b08e      	sub	sp, #56	@ 0x38
 800af2a:	af02      	add	r7, sp, #8
 800af2c:	60f8      	str	r0, [r7, #12]
 800af2e:	60b9      	str	r1, [r7, #8]
 800af30:	607a      	str	r2, [r7, #4]
 800af32:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800af34:	2044      	movs	r0, #68	@ 0x44
 800af36:	f018 ff93 	bl	8023e60 <_Znwj>
 800af3a:	4603      	mov	r3, r0
 800af3c:	4698      	mov	r8, r3
 800af3e:	68b8      	ldr	r0, [r7, #8]
 800af40:	f000 fc90 	bl	800b864 <_ZSt7forwardIRA7_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 800af44:	4604      	mov	r4, r0
 800af46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800af4a:	4618      	mov	r0, r3
 800af4c:	f018 ff99 	bl	8023e82 <_ZNSaIcEC1Ev>
 800af50:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800af54:	f107 0314 	add.w	r3, r7, #20
 800af58:	4621      	mov	r1, r4
 800af5a:	4618      	mov	r0, r3
 800af5c:	f7fb fb8e 	bl	800667c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f000 fbdc 	bl	800b71e <_ZSt7forwardIP11TIM_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800af66:	4603      	mov	r3, r0
 800af68:	681d      	ldr	r5, [r3, #0]
 800af6a:	6838      	ldr	r0, [r7, #0]
 800af6c:	f000 fbe2 	bl	800b734 <_ZSt7forwardI9IRQn_TypeEOT_RNSt16remove_referenceIS1_E4typeE>
 800af70:	4603      	mov	r3, r0
 800af72:	f9b3 6000 	ldrsh.w	r6, [r3]
 800af76:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800af78:	f000 fbe7 	bl	800b74a <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
 800af7c:	4603      	mov	r3, r0
 800af7e:	681c      	ldr	r4, [r3, #0]
 800af80:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800af82:	f000 fbed 	bl	800b760 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 800af86:	4603      	mov	r3, r0
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	b2db      	uxtb	r3, r3
 800af8c:	f107 0114 	add.w	r1, r7, #20
 800af90:	9301      	str	r3, [sp, #4]
 800af92:	9400      	str	r4, [sp, #0]
 800af94:	4633      	mov	r3, r6
 800af96:	462a      	mov	r2, r5
 800af98:	4640      	mov	r0, r8
 800af9a:	f00a ff0b 	bl	8015db4 <_ZN9pruThreadC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP11TIM_TypeDef9IRQn_Typemh>
 800af9e:	4641      	mov	r1, r8
 800afa0:	68f8      	ldr	r0, [r7, #12]
 800afa2:	f000 fbf8 	bl	800b796 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800afa6:	f107 0314 	add.w	r3, r7, #20
 800afaa:	4618      	mov	r0, r3
 800afac:	f019 f847 	bl	802403e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800afb0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800afb4:	4618      	mov	r0, r3
 800afb6:	f018 ff65 	bl	8023e84 <_ZNSaIcED1Ev>
 800afba:	bf00      	nop
 800afbc:	68f8      	ldr	r0, [r7, #12]
 800afbe:	3730      	adds	r7, #48	@ 0x30
 800afc0:	46bd      	mov	sp, r7
 800afc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800afc6 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800afc6:	b580      	push	{r7, lr}
 800afc8:	b082      	sub	sp, #8
 800afca:	af00      	add	r7, sp, #0
 800afcc:	6078      	str	r0, [r7, #4]
	return get();
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f7ff fd1d 	bl	800aa0e <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EE3getEv>
 800afd4:	4603      	mov	r3, r0
      }
 800afd6:	4618      	mov	r0, r3
 800afd8:	3708      	adds	r7, #8
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}

0800afde <_ZNSt10shared_ptrI6ModuleEC1I12CommsHandlervEERKS_IT_E>:
	shared_ptr(const shared_ptr<_Yp>& __r) noexcept
 800afde:	b580      	push	{r7, lr}
 800afe0:	b082      	sub	sp, #8
 800afe2:	af00      	add	r7, sp, #0
 800afe4:	6078      	str	r0, [r7, #4]
 800afe6:	6039      	str	r1, [r7, #0]
        : __shared_ptr<_Tp>(__r) { }
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	683a      	ldr	r2, [r7, #0]
 800afec:	4611      	mov	r1, r2
 800afee:	4618      	mov	r0, r3
 800aff0:	f000 fc43 	bl	800b87a <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I12CommsHandlervEERKS_IT_LS2_0EE>
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	4618      	mov	r0, r3
 800aff8:	3708      	adds	r7, #8
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}

0800affe <_ZNKSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800affe:	b580      	push	{r7, lr}
 800b000:	b082      	sub	sp, #8
 800b002:	af00      	add	r7, sp, #0
 800b004:	6078      	str	r0, [r7, #4]
	return get();
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f000 fc4d 	bl	800b8a6 <_ZNKSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EE3getEv>
 800b00c:	4603      	mov	r3, r0
      }
 800b00e:	4618      	mov	r0, r3
 800b010:	3708      	adds	r7, #8
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}

0800b016 <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>:
  detail::ElementProxy<JsonArray> operator[](T index) const {
 800b016:	b580      	push	{r7, lr}
 800b018:	b084      	sub	sp, #16
 800b01a:	af00      	add	r7, sp, #0
 800b01c:	60f8      	str	r0, [r7, #12]
 800b01e:	60b9      	str	r1, [r7, #8]
 800b020:	607a      	str	r2, [r7, #4]
    return {*this, size_t(index)};
 800b022:	68ba      	ldr	r2, [r7, #8]
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	ca06      	ldmia	r2, {r1, r2}
 800b028:	68f8      	ldr	r0, [r7, #12]
 800b02a:	f000 fc49 	bl	800b8c0 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ES3_j>
  }
 800b02e:	68f8      	ldr	r0, [r7, #12]
 800b030:	3710      	adds	r7, #16
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}

0800b036 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEcvT_IPKcLi0EEEv>:
  operator T() const {
 800b036:	b580      	push	{r7, lr}
 800b038:	b082      	sub	sp, #8
 800b03a:	af00      	add	r7, sp, #0
 800b03c:	6078      	str	r0, [r7, #4]
    return as<T>();
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f000 fcac 	bl	800b99c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE2asIPKcEET_v>
 800b044:	4603      	mov	r3, r0
  }
 800b046:	4618      	mov	r0, r3
 800b048:	3708      	adds	r7, #8
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}

0800b04e <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEaSImEERS7_RKT_>:
  MemberProxy& operator=(const T& src) {
 800b04e:	b580      	push	{r7, lr}
 800b050:	b082      	sub	sp, #8
 800b052:	af00      	add	r7, sp, #0
 800b054:	6078      	str	r0, [r7, #4]
 800b056:	6039      	str	r1, [r7, #0]
    this->set(src);
 800b058:	6839      	ldr	r1, [r7, #0]
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f000 fcd3 	bl	800ba06 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE3setImEEbRKT_>
    return *this;
 800b060:	687b      	ldr	r3, [r7, #4]
  }
 800b062:	4618      	mov	r0, r3
 800b064:	3708      	adds	r7, #8
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}

0800b06a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEEcvT_INS0_11JsonVariantELi0EEEv>:
  operator T() const {
 800b06a:	b580      	push	{r7, lr}
 800b06c:	b082      	sub	sp, #8
 800b06e:	af00      	add	r7, sp, #0
 800b070:	6078      	str	r0, [r7, #4]
 800b072:	6039      	str	r1, [r7, #0]
    return as<T>();
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6839      	ldr	r1, [r7, #0]
 800b078:	4618      	mov	r0, r3
 800b07a:	f000 fcd2 	bl	800ba22 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE2asINS0_11JsonVariantEEET_v>
 800b07e:	bf00      	nop
  }
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	3708      	adds	r7, #8
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}

0800b088 <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>:
      element_type*
      get() const noexcept
      { return _M_ptr; }

      /// Return true if the stored pointer is not null.
      explicit operator bool() const noexcept
 800b088:	b480      	push	{r7}
 800b08a:	b083      	sub	sp, #12
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
      { return _M_ptr != nullptr; }
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	2b00      	cmp	r3, #0
 800b096:	bf14      	ite	ne
 800b098:	2301      	movne	r3, #1
 800b09a:	2300      	moveq	r3, #0
 800b09c:	b2db      	uxtb	r3, r3
 800b09e:	4618      	mov	r0, r3
 800b0a0:	370c      	adds	r7, #12
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a8:	4770      	bx	lr

0800b0aa <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 800b0aa:	b580      	push	{r7, lr}
 800b0ac:	b082      	sub	sp, #8
 800b0ae:	af00      	add	r7, sp, #0
 800b0b0:	6078      	str	r0, [r7, #4]
	return _M_get();
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f000 fcd9 	bl	800ba6a <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 800b0b8:	4603      	mov	r3, r0
      }
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	3708      	adds	r7, #8
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}

0800b0c2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      __shared_count(const __shared_count& __r) noexcept
 800b0c2:	b580      	push	{r7, lr}
 800b0c4:	b082      	sub	sp, #8
 800b0c6:	af00      	add	r7, sp, #0
 800b0c8:	6078      	str	r0, [r7, #4]
 800b0ca:	6039      	str	r1, [r7, #0]
      : _M_pi(__r._M_pi)
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	681a      	ldr	r2, [r3, #0]
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	601a      	str	r2, [r3, #0]
	if (_M_pi != nullptr)
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d004      	beq.n	800b0e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0x24>
	  _M_pi->_M_add_ref_copy();
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f7fe fb19 	bl	8009718 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>
      }
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	3708      	adds	r7, #8
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}

0800b0f0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_base() noexcept
 800b0f0:	b480      	push	{r7}
 800b0f2:	b083      	sub	sp, #12
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
      { }
 800b0f8:	4a04      	ldr	r2, [pc, #16]	@ (800b10c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1c>)
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	601a      	str	r2, [r3, #0]
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	4618      	mov	r0, r3
 800b102:	370c      	adds	r7, #12
 800b104:	46bd      	mov	sp, r7
 800b106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10a:	4770      	bx	lr
 800b10c:	08026734 	.word	0x08026734

0800b110 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_base() noexcept
 800b110:	b580      	push	{r7, lr}
 800b112:	b082      	sub	sp, #8
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
      { }
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f7ff ffe9 	bl	800b0f0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800b11e:	210c      	movs	r1, #12
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f018 fe8c 	bl	8023e3e <_ZdlPvj>
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	4618      	mov	r0, r3
 800b12a:	3708      	adds	r7, #8
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}

0800b130 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE>:
  if (dup)
    setRawString(dup);
}

template <typename TAdaptedString>
inline bool VariantData::setString(TAdaptedString value,
 800b130:	b580      	push	{r7, lr}
 800b132:	b086      	sub	sp, #24
 800b134:	af00      	add	r7, sp, #0
 800b136:	60f8      	str	r0, [r7, #12]
 800b138:	4638      	mov	r0, r7
 800b13a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
                                   ResourceManager* resources) {
  ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first

  if (value.isNull())
 800b13e:	463b      	mov	r3, r7
 800b140:	4618      	mov	r0, r3
 800b142:	f7f8 ff22 	bl	8003f8a <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>
 800b146:	4603      	mov	r3, r0
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d001      	beq.n	800b150 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x20>
    return false;
 800b14c:	2300      	movs	r3, #0
 800b14e:	e021      	b.n	800b194 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x64>

  if (value.isStatic()) {
 800b150:	463b      	mov	r3, r7
 800b152:	4618      	mov	r0, r3
 800b154:	f7fe fb5c 	bl	8009810 <_ZNK11ArduinoJson8V730HB226detail9RamString8isStaticEv>
 800b158:	4603      	mov	r3, r0
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d00a      	beq.n	800b174 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x44>
    setLinkedString(value.data());
 800b15e:	463b      	mov	r3, r7
 800b160:	4618      	mov	r0, r3
 800b162:	f7f8 ff2f 	bl	8003fc4 <_ZNK11ArduinoJson8V730HB226detail9RamString4dataEv>
 800b166:	4603      	mov	r3, r0
 800b168:	4619      	mov	r1, r3
 800b16a:	68f8      	ldr	r0, [r7, #12]
 800b16c:	f7fe fbfe 	bl	800996c <_ZN11ArduinoJson8V730HB226detail11VariantData15setLinkedStringEPKc>
    return true;
 800b170:	2301      	movs	r3, #1
 800b172:	e00f      	b.n	800b194 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x64>
  }

  auto dup = resources->saveString(value);
 800b174:	6a38      	ldr	r0, [r7, #32]
 800b176:	463b      	mov	r3, r7
 800b178:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b17a:	f000 fc82 	bl	800ba82 <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_>
 800b17e:	6178      	str	r0, [r7, #20]
  if (dup) {
 800b180:	697b      	ldr	r3, [r7, #20]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d005      	beq.n	800b192 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x62>
    setOwnedString(dup);
 800b186:	6979      	ldr	r1, [r7, #20]
 800b188:	68f8      	ldr	r0, [r7, #12]
 800b18a:	f7f9 f96c 	bl	8004466 <_ZN11ArduinoJson8V730HB226detail11VariantData14setOwnedStringEPNS1_10StringNodeE>
    return true;
 800b18e:	2301      	movs	r3, #1
 800b190:	e000      	b.n	800b194 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x64>
  }

  return false;
 800b192:	2300      	movs	r3, #0
}
 800b194:	4618      	mov	r0, r3
 800b196:	3718      	adds	r7, #24
 800b198:	46bd      	mov	sp, r7
 800b19a:	bd80      	pop	{r7, pc}

0800b19c <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 800b19c:	b590      	push	{r4, r7, lr}
 800b19e:	b085      	sub	sp, #20
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
 800b1a4:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f000 fa78 	bl	800b69c <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 800b1b2:	683c      	ldr	r4, [r7, #0]
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f000 fa71 	bl	800b69c <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	601c      	str	r4, [r3, #0]
	if (__old_p)
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d007      	beq.n	800b1d4 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f000 f81e 	bl	800b206 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE10_M_deleterEv>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	68f9      	ldr	r1, [r7, #12]
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f000 fa89 	bl	800b6e6 <_ZNKSt14default_deleteI14CommsInterfaceEclEPS0_>
      }
 800b1d4:	bf00      	nop
 800b1d6:	3714      	adds	r7, #20
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd90      	pop	{r4, r7, pc}

0800b1dc <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b084      	sub	sp, #16
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f000 fa59 	bl	800b69c <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800b1f0:	6878      	ldr	r0, [r7, #4]
 800b1f2:	f000 fa53 	bl	800b69c <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	601a      	str	r2, [r3, #0]
	return __p;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
      }
 800b1fe:	4618      	mov	r0, r3
 800b200:	3710      	adds	r7, #16
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}

0800b206 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800b206:	b580      	push	{r7, lr}
 800b208:	b082      	sub	sp, #8
 800b20a:	af00      	add	r7, sp, #0
 800b20c:	6078      	str	r0, [r7, #4]
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	4618      	mov	r0, r3
 800b212:	f000 fc5c 	bl	800bace <_ZSt3getILj1EJP14CommsInterfaceSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800b216:	4603      	mov	r3, r0
 800b218:	4618      	mov	r0, r3
 800b21a:	3708      	adds	r7, #8
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd80      	pop	{r7, pc}

0800b220 <_ZSt7forwardISt14default_deleteI14CommsInterfaceEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b220:	b480      	push	{r7}
 800b222:	b083      	sub	sp, #12
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	4618      	mov	r0, r3
 800b22c:	370c      	adds	r7, #12
 800b22e:	46bd      	mov	sp, r7
 800b230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b234:	4770      	bx	lr

0800b236 <_ZNKSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800b236:	b580      	push	{r7, lr}
 800b238:	b082      	sub	sp, #8
 800b23a:	af00      	add	r7, sp, #0
 800b23c:	6078      	str	r0, [r7, #4]
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	4618      	mov	r0, r3
 800b242:	f000 fc50 	bl	800bae6 <_ZSt3getILj0EJP9pruThreadSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800b246:	4603      	mov	r3, r0
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	4618      	mov	r0, r3
 800b24c:	3708      	adds	r7, #8
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}

0800b252 <_ZNSt5tupleIJP17JsonConfigHandlerSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:

    public:
      template<bool _Dummy = true,
	       _ImplicitDefaultCtor<_Dummy, _T1, _T2> = true>
	constexpr
	tuple()
 800b252:	b580      	push	{r7, lr}
 800b254:	b082      	sub	sp, #8
 800b256:	af00      	add	r7, sp, #0
 800b258:	6078      	str	r0, [r7, #4]
	noexcept(__nothrow_default_constructible())
	: _Inherited() { }
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	4618      	mov	r0, r3
 800b25e:	f000 fc4f 	bl	800bb00 <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEEC1Ev>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	4618      	mov	r0, r3
 800b266:	3708      	adds	r7, #8
 800b268:	46bd      	mov	sp, r7
 800b26a:	bd80      	pop	{r7, pc}

0800b26c <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b082      	sub	sp, #8
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	4618      	mov	r0, r3
 800b278:	f000 fc52 	bl	800bb20 <_ZSt3getILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800b27c:	4603      	mov	r3, r0
 800b27e:	4618      	mov	r0, r3
 800b280:	3708      	adds	r7, #8
 800b282:	46bd      	mov	sp, r7
 800b284:	bd80      	pop	{r7, pc}

0800b286 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800b286:	b580      	push	{r7, lr}
 800b288:	b082      	sub	sp, #8
 800b28a:	af00      	add	r7, sp, #0
 800b28c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	4618      	mov	r0, r3
 800b292:	f000 f902 	bl	800b49a <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE10_M_deleterEv>
 800b296:	4603      	mov	r3, r0
 800b298:	4618      	mov	r0, r3
 800b29a:	3708      	adds	r7, #8
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}

0800b2a0 <_ZSt4moveIRP17JsonConfigHandlerEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800b2a0:	b480      	push	{r7}
 800b2a2:	b083      	sub	sp, #12
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	370c      	adds	r7, #12
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b4:	4770      	bx	lr

0800b2b6 <_ZN17JsonConfigHandlerD1Ev>:
#include "../lib/ArduinoJson7/ArduinoJson.h"
#include "fatfs.h"

class Remora; //forward declaration

class JsonConfigHandler {
 800b2b6:	b580      	push	{r7, lr}
 800b2b8:	b082      	sub	sp, #8
 800b2ba:	af00      	add	r7, sp, #0
 800b2bc:	6078      	str	r0, [r7, #4]
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	3320      	adds	r3, #32
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	f7fe fbed 	bl	8009aa2 <_ZN11ArduinoJson8V730HB2212JsonDocumentD1Ev>
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	3304      	adds	r3, #4
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	f018 feb6 	bl	802403e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	3708      	adds	r7, #8
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}

0800b2dc <_ZNKSt14default_deleteI17JsonConfigHandlerEclEPS0_>:
      operator()(_Tp* __ptr) const
 800b2dc:	b590      	push	{r4, r7, lr}
 800b2de:	b083      	sub	sp, #12
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
 800b2e4:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800b2e6:	683c      	ldr	r4, [r7, #0]
 800b2e8:	2c00      	cmp	r4, #0
 800b2ea:	d006      	beq.n	800b2fa <_ZNKSt14default_deleteI17JsonConfigHandlerEclEPS0_+0x1e>
 800b2ec:	4620      	mov	r0, r4
 800b2ee:	f7ff ffe2 	bl	800b2b6 <_ZN17JsonConfigHandlerD1Ev>
 800b2f2:	216c      	movs	r1, #108	@ 0x6c
 800b2f4:	4620      	mov	r0, r4
 800b2f6:	f018 fda2 	bl	8023e3e <_ZdlPvj>
      }
 800b2fa:	bf00      	nop
 800b2fc:	370c      	adds	r7, #12
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd90      	pop	{r4, r7, pc}

0800b302 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_ptr() noexcept
 800b302:	b580      	push	{r7, lr}
 800b304:	b082      	sub	sp, #8
 800b306:	af00      	add	r7, sp, #0
 800b308:	6078      	str	r0, [r7, #4]
      : _M_ptr(0), _M_refcount()
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2200      	movs	r2, #0
 800b30e:	601a      	str	r2, [r3, #0]
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	3304      	adds	r3, #4
 800b314:	4618      	mov	r0, r3
 800b316:	f000 fc10 	bl	800bb3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
      { }
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	4618      	mov	r0, r3
 800b31e:	3708      	adds	r7, #8
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}

0800b324 <_ZNSt5tupleIJP9pruThreadSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800b324:	b580      	push	{r7, lr}
 800b326:	b082      	sub	sp, #8
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	4618      	mov	r0, r3
 800b330:	f000 fc11 	bl	800bb56 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEEC1Ev>
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	4618      	mov	r0, r3
 800b338:	3708      	adds	r7, #8
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}

0800b33e <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800b33e:	b580      	push	{r7, lr}
 800b340:	b082      	sub	sp, #8
 800b342:	af00      	add	r7, sp, #0
 800b344:	6078      	str	r0, [r7, #4]
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	4618      	mov	r0, r3
 800b34a:	f000 fc14 	bl	800bb76 <_ZSt3getILj0EJP9pruThreadSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800b34e:	4603      	mov	r3, r0
 800b350:	4618      	mov	r0, r3
 800b352:	3708      	adds	r7, #8
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}

0800b358 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800b358:	b580      	push	{r7, lr}
 800b35a:	b082      	sub	sp, #8
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	4618      	mov	r0, r3
 800b364:	f000 fa5b 	bl	800b81e <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>
 800b368:	4603      	mov	r3, r0
 800b36a:	4618      	mov	r0, r3
 800b36c:	3708      	adds	r7, #8
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}

0800b372 <_ZSt4moveIRP9pruThreadEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800b372:	b480      	push	{r7}
 800b374:	b083      	sub	sp, #12
 800b376:	af00      	add	r7, sp, #0
 800b378:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	4618      	mov	r0, r3
 800b37e:	370c      	adds	r7, #12
 800b380:	46bd      	mov	sp, r7
 800b382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b386:	4770      	bx	lr

0800b388 <_ZN9pruThreadD1Ev>:

using namespace std;

class Module;

class pruThread
 800b388:	b580      	push	{r7, lr}
 800b38a:	b082      	sub	sp, #8
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	3338      	adds	r3, #56	@ 0x38
 800b394:	4618      	mov	r0, r3
 800b396:	f000 fbfb 	bl	800bb90 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EED1Ev>
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	332c      	adds	r3, #44	@ 0x2c
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f000 fbf6 	bl	800bb90 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EED1Ev>
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f018 fe49 	bl	802403e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3708      	adds	r7, #8
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}

0800b3b6 <_ZNKSt14default_deleteI9pruThreadEclEPS0_>:
      operator()(_Tp* __ptr) const
 800b3b6:	b590      	push	{r4, r7, lr}
 800b3b8:	b083      	sub	sp, #12
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	6078      	str	r0, [r7, #4]
 800b3be:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800b3c0:	683c      	ldr	r4, [r7, #0]
 800b3c2:	2c00      	cmp	r4, #0
 800b3c4:	d006      	beq.n	800b3d4 <_ZNKSt14default_deleteI9pruThreadEclEPS0_+0x1e>
 800b3c6:	4620      	mov	r0, r4
 800b3c8:	f7ff ffde 	bl	800b388 <_ZN9pruThreadD1Ev>
 800b3cc:	2144      	movs	r1, #68	@ 0x44
 800b3ce:	4620      	mov	r0, r4
 800b3d0:	f018 fd35 	bl	8023e3e <_ZdlPvj>
      }
 800b3d4:	bf00      	nop
 800b3d6:	370c      	adds	r7, #12
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd90      	pop	{r4, r7, pc}

0800b3dc <_ZSt7forwardIP6RemoraEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b3dc:	b480      	push	{r7}
 800b3de:	b083      	sub	sp, #12
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	370c      	adds	r7, #12
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f0:	4770      	bx	lr

0800b3f2 <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800b3f2:	b580      	push	{r7, lr}
 800b3f4:	b082      	sub	sp, #8
 800b3f6:	af00      	add	r7, sp, #0
 800b3f8:	6078      	str	r0, [r7, #4]
 800b3fa:	6039      	str	r1, [r7, #0]
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	683a      	ldr	r2, [r7, #0]
 800b400:	4611      	mov	r1, r2
 800b402:	4618      	mov	r0, r3
 800b404:	f000 fbdf 	bl	800bbc6 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEC1EPS0_>
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	4618      	mov	r0, r3
 800b40c:	3708      	adds	r7, #8
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}

0800b412 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800b412:	b580      	push	{r7, lr}
 800b414:	b082      	sub	sp, #8
 800b416:	af00      	add	r7, sp, #0
 800b418:	6078      	str	r0, [r7, #4]
 800b41a:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6839      	ldr	r1, [r7, #0]
 800b420:	4618      	mov	r0, r3
 800b422:	f7ff ffe6 	bl	800b3f2 <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	4618      	mov	r0, r3
 800b42a:	3708      	adds	r7, #8
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}

0800b430 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 800b430:	b590      	push	{r4, r7, lr}
 800b432:	b085      	sub	sp, #20
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
 800b438:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f7ff ff16 	bl	800b26c <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800b440:	4603      	mov	r3, r0
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 800b446:	683c      	ldr	r4, [r7, #0]
 800b448:	6878      	ldr	r0, [r7, #4]
 800b44a:	f7ff ff0f 	bl	800b26c <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800b44e:	4603      	mov	r3, r0
 800b450:	601c      	str	r4, [r3, #0]
	if (__old_p)
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d007      	beq.n	800b468 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	f000 f81e 	bl	800b49a <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE10_M_deleterEv>
 800b45e:	4603      	mov	r3, r0
 800b460:	68f9      	ldr	r1, [r7, #12]
 800b462:	4618      	mov	r0, r3
 800b464:	f7ff ff3a 	bl	800b2dc <_ZNKSt14default_deleteI17JsonConfigHandlerEclEPS0_>
      }
 800b468:	bf00      	nop
 800b46a:	3714      	adds	r7, #20
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd90      	pop	{r4, r7, pc}

0800b470 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800b470:	b580      	push	{r7, lr}
 800b472:	b084      	sub	sp, #16
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f7ff fef7 	bl	800b26c <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800b47e:	4603      	mov	r3, r0
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800b484:	6878      	ldr	r0, [r7, #4]
 800b486:	f7ff fef1 	bl	800b26c <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800b48a:	4603      	mov	r3, r0
 800b48c:	2200      	movs	r2, #0
 800b48e:	601a      	str	r2, [r3, #0]
	return __p;
 800b490:	68fb      	ldr	r3, [r7, #12]
      }
 800b492:	4618      	mov	r0, r3
 800b494:	3710      	adds	r7, #16
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}

0800b49a <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800b49a:	b580      	push	{r7, lr}
 800b49c:	b082      	sub	sp, #8
 800b49e:	af00      	add	r7, sp, #0
 800b4a0:	6078      	str	r0, [r7, #4]
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f000 fba2 	bl	800bbee <_ZSt3getILj1EJP17JsonConfigHandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3708      	adds	r7, #8
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}

0800b4b4 <_ZSt7forwardISt14default_deleteI17JsonConfigHandlerEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b4b4:	b480      	push	{r7}
 800b4b6:	b083      	sub	sp, #12
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	4618      	mov	r0, r3
 800b4c0:	370c      	adds	r7, #12
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c8:	4770      	bx	lr

0800b4ca <_ZSt7forwardIRPV8rxData_tEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b4ca:	b480      	push	{r7}
 800b4cc:	b083      	sub	sp, #12
 800b4ce:	af00      	add	r7, sp, #0
 800b4d0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	370c      	adds	r7, #12
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr

0800b4e0 <_ZSt7forwardIRPV8txData_tEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b4e0:	b480      	push	{r7}
 800b4e2:	b083      	sub	sp, #12
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	370c      	adds	r7, #12
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f4:	4770      	bx	lr

0800b4f6 <_ZSt7forwardIP11SPI_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b4f6:	b480      	push	{r7}
 800b4f8:	b083      	sub	sp, #12
 800b4fa:	af00      	add	r7, sp, #0
 800b4fc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	4618      	mov	r0, r3
 800b502:	370c      	adds	r7, #12
 800b504:	46bd      	mov	sp, r7
 800b506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50a:	4770      	bx	lr

0800b50c <_ZNSt15__uniq_ptr_dataI8SPICommsSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b082      	sub	sp, #8
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	6039      	str	r1, [r7, #0]
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	683a      	ldr	r2, [r7, #0]
 800b51a:	4611      	mov	r1, r2
 800b51c:	4618      	mov	r0, r3
 800b51e:	f000 fb72 	bl	800bc06 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EEC1EPS0_>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	4618      	mov	r0, r3
 800b526:	3708      	adds	r7, #8
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}

0800b52c <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b082      	sub	sp, #8
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
 800b534:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6839      	ldr	r1, [r7, #0]
 800b53a:	4618      	mov	r0, r3
 800b53c:	f7ff ffe6 	bl	800b50c <_ZNSt15__uniq_ptr_dataI8SPICommsSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	4618      	mov	r0, r3
 800b544:	3708      	adds	r7, #8
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}

0800b54a <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800b54a:	b580      	push	{r7, lr}
 800b54c:	b082      	sub	sp, #8
 800b54e:	af00      	add	r7, sp, #0
 800b550:	6078      	str	r0, [r7, #4]
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	4618      	mov	r0, r3
 800b556:	f000 fb6a 	bl	800bc2e <_ZSt3getILj0EJP8SPICommsSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800b55a:	4603      	mov	r3, r0
 800b55c:	4618      	mov	r0, r3
 800b55e:	3708      	adds	r7, #8
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}

0800b564 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800b564:	b580      	push	{r7, lr}
 800b566:	b082      	sub	sp, #8
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	4618      	mov	r0, r3
 800b570:	f000 fb6a 	bl	800bc48 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE10_M_deleterEv>
 800b574:	4603      	mov	r3, r0
 800b576:	4618      	mov	r0, r3
 800b578:	3708      	adds	r7, #8
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}

0800b57e <_ZSt4moveIRP8SPICommsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800b57e:	b480      	push	{r7}
 800b580:	b083      	sub	sp, #12
 800b582:	af00      	add	r7, sp, #0
 800b584:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	4618      	mov	r0, r3
 800b58a:	370c      	adds	r7, #12
 800b58c:	46bd      	mov	sp, r7
 800b58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b592:	4770      	bx	lr

0800b594 <_ZNKSt14default_deleteI8SPICommsEclEPS0_>:
      operator()(_Tp* __ptr) const
 800b594:	b580      	push	{r7, lr}
 800b596:	b082      	sub	sp, #8
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
 800b59c:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d004      	beq.n	800b5ae <_ZNKSt14default_deleteI8SPICommsEclEPS0_+0x1a>
 800b5a4:	681a      	ldr	r2, [r3, #0]
 800b5a6:	3204      	adds	r2, #4
 800b5a8:	6812      	ldr	r2, [r2, #0]
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	4790      	blx	r2
      }
 800b5ae:	bf00      	nop
 800b5b0:	3708      	adds	r7, #8
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}

0800b5b6 <_ZNSt10shared_ptrI12CommsHandlerEC1ISaIvEJEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 800b5b6:	b580      	push	{r7, lr}
 800b5b8:	b082      	sub	sp, #8
 800b5ba:	af00      	add	r7, sp, #0
 800b5bc:	6078      	str	r0, [r7, #4]
 800b5be:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	6839      	ldr	r1, [r7, #0]
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f000 fb4c 	bl	800bc62 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
	{ }
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	3708      	adds	r7, #8
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}

0800b5d4 <_ZSt4moveIRSt10shared_ptrI12CommsHandlerEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800b5d4:	b480      	push	{r7}
 800b5d6:	b083      	sub	sp, #12
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	4618      	mov	r0, r3
 800b5e0:	370c      	adds	r7, #12
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e8:	4770      	bx	lr

0800b5ea <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>:
      operator=(__shared_ptr&& __r) noexcept
 800b5ea:	b580      	push	{r7, lr}
 800b5ec:	b084      	sub	sp, #16
 800b5ee:	af00      	add	r7, sp, #0
 800b5f0:	6078      	str	r0, [r7, #4]
 800b5f2:	6039      	str	r1, [r7, #0]
	__shared_ptr(std::move(__r)).swap(*this);
 800b5f4:	6838      	ldr	r0, [r7, #0]
 800b5f6:	f000 fb4e 	bl	800bc96 <_ZSt4moveIRSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>
 800b5fa:	4602      	mov	r2, r0
 800b5fc:	f107 0308 	add.w	r3, r7, #8
 800b600:	4611      	mov	r1, r2
 800b602:	4618      	mov	r0, r3
 800b604:	f000 fb52 	bl	800bcac <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>
 800b608:	f107 0308 	add.w	r3, r7, #8
 800b60c:	6879      	ldr	r1, [r7, #4]
 800b60e:	4618      	mov	r0, r3
 800b610:	f000 fb6a 	bl	800bce8 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>
 800b614:	f107 0308 	add.w	r3, r7, #8
 800b618:	4618      	mov	r0, r3
 800b61a:	f7fe fbd7 	bl	8009dcc <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EED1Ev>
	return *this;
 800b61e:	687b      	ldr	r3, [r7, #4]
      }
 800b620:	4618      	mov	r0, r3
 800b622:	3710      	adds	r7, #16
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}

0800b628 <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 800b628:	b580      	push	{r7, lr}
 800b62a:	b082      	sub	sp, #8
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f000 fb70 	bl	800bd16 <_ZNKSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 800b636:	4603      	mov	r3, r0
 800b638:	4618      	mov	r0, r3
 800b63a:	3708      	adds	r7, #8
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}

0800b640 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 800b640:	b580      	push	{r7, lr}
 800b642:	b082      	sub	sp, #8
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	4618      	mov	r0, r3
 800b64c:	f000 fb6f 	bl	800bd2e <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE7releaseEv>
 800b650:	4603      	mov	r3, r0
 800b652:	4618      	mov	r0, r3
 800b654:	3708      	adds	r7, #8
 800b656:	46bd      	mov	sp, r7
 800b658:	bd80      	pop	{r7, pc}

0800b65a <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b65a:	b480      	push	{r7}
 800b65c:	b083      	sub	sp, #12
 800b65e:	af00      	add	r7, sp, #0
 800b660:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	4618      	mov	r0, r3
 800b666:	370c      	adds	r7, #12
 800b668:	46bd      	mov	sp, r7
 800b66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66e:	4770      	bx	lr

0800b670 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEC1IS1_I8SPICommsEEEPS0_OT_>:
	__uniq_ptr_impl(pointer __p, _Del&& __d)
 800b670:	b590      	push	{r4, r7, lr}
 800b672:	b085      	sub	sp, #20
 800b674:	af00      	add	r7, sp, #0
 800b676:	60f8      	str	r0, [r7, #12]
 800b678:	60b9      	str	r1, [r7, #8]
 800b67a:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800b67c:	68fc      	ldr	r4, [r7, #12]
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f7ff ffeb 	bl	800b65a <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800b684:	4602      	mov	r2, r0
 800b686:	f107 0308 	add.w	r3, r7, #8
 800b68a:	4619      	mov	r1, r3
 800b68c:	4620      	mov	r0, r4
 800b68e:	f000 fb63 	bl	800bd58 <_ZNSt5tupleIJP14CommsInterfaceSt14default_deleteIS0_EEEC1IRS1_S2_I8SPICommsELb1EEEOT_OT0_>
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	4618      	mov	r0, r3
 800b696:	3714      	adds	r7, #20
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd90      	pop	{r4, r7, pc}

0800b69c <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b082      	sub	sp, #8
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f000 fb6f 	bl	800bd8a <_ZSt3getILj0EJP14CommsInterfaceSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3708      	adds	r7, #8
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd80      	pop	{r7, pc}

0800b6b6 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800b6b6:	b580      	push	{r7, lr}
 800b6b8:	b082      	sub	sp, #8
 800b6ba:	af00      	add	r7, sp, #0
 800b6bc:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	f7ff fda0 	bl	800b206 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE10_M_deleterEv>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	3708      	adds	r7, #8
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}

0800b6d0 <_ZSt4moveIRP14CommsInterfaceEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800b6d0:	b480      	push	{r7}
 800b6d2:	b083      	sub	sp, #12
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	4618      	mov	r0, r3
 800b6dc:	370c      	adds	r7, #12
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e4:	4770      	bx	lr

0800b6e6 <_ZNKSt14default_deleteI14CommsInterfaceEclEPS0_>:
      operator()(_Tp* __ptr) const
 800b6e6:	b580      	push	{r7, lr}
 800b6e8:	b082      	sub	sp, #8
 800b6ea:	af00      	add	r7, sp, #0
 800b6ec:	6078      	str	r0, [r7, #4]
 800b6ee:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d004      	beq.n	800b700 <_ZNKSt14default_deleteI14CommsInterfaceEclEPS0_+0x1a>
 800b6f6:	681a      	ldr	r2, [r3, #0]
 800b6f8:	3204      	adds	r2, #4
 800b6fa:	6812      	ldr	r2, [r2, #0]
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	4790      	blx	r2
      }
 800b700:	bf00      	nop
 800b702:	3708      	adds	r7, #8
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}

0800b708 <_ZSt7forwardIRA5_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b708:	b480      	push	{r7}
 800b70a:	b083      	sub	sp, #12
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	4618      	mov	r0, r3
 800b714:	370c      	adds	r7, #12
 800b716:	46bd      	mov	sp, r7
 800b718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71c:	4770      	bx	lr

0800b71e <_ZSt7forwardIP11TIM_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b71e:	b480      	push	{r7}
 800b720:	b083      	sub	sp, #12
 800b722:	af00      	add	r7, sp, #0
 800b724:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	4618      	mov	r0, r3
 800b72a:	370c      	adds	r7, #12
 800b72c:	46bd      	mov	sp, r7
 800b72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b732:	4770      	bx	lr

0800b734 <_ZSt7forwardI9IRQn_TypeEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b734:	b480      	push	{r7}
 800b736:	b083      	sub	sp, #12
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	4618      	mov	r0, r3
 800b740:	370c      	adds	r7, #12
 800b742:	46bd      	mov	sp, r7
 800b744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b748:	4770      	bx	lr

0800b74a <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b74a:	b480      	push	{r7}
 800b74c:	b083      	sub	sp, #12
 800b74e:	af00      	add	r7, sp, #0
 800b750:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	4618      	mov	r0, r3
 800b756:	370c      	adds	r7, #12
 800b758:	46bd      	mov	sp, r7
 800b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75e:	4770      	bx	lr

0800b760 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b760:	b480      	push	{r7}
 800b762:	b083      	sub	sp, #12
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	4618      	mov	r0, r3
 800b76c:	370c      	adds	r7, #12
 800b76e:	46bd      	mov	sp, r7
 800b770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b774:	4770      	bx	lr

0800b776 <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800b776:	b580      	push	{r7, lr}
 800b778:	b082      	sub	sp, #8
 800b77a:	af00      	add	r7, sp, #0
 800b77c:	6078      	str	r0, [r7, #4]
 800b77e:	6039      	str	r1, [r7, #0]
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	683a      	ldr	r2, [r7, #0]
 800b784:	4611      	mov	r1, r2
 800b786:	4618      	mov	r0, r3
 800b788:	f000 fb0c 	bl	800bda4 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEC1EPS0_>
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	4618      	mov	r0, r3
 800b790:	3708      	adds	r7, #8
 800b792:	46bd      	mov	sp, r7
 800b794:	bd80      	pop	{r7, pc}

0800b796 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800b796:	b580      	push	{r7, lr}
 800b798:	b082      	sub	sp, #8
 800b79a:	af00      	add	r7, sp, #0
 800b79c:	6078      	str	r0, [r7, #4]
 800b79e:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	6839      	ldr	r1, [r7, #0]
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f7ff ffe6 	bl	800b776 <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	3708      	adds	r7, #8
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}

0800b7b4 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 800b7b4:	b590      	push	{r4, r7, lr}
 800b7b6:	b085      	sub	sp, #20
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
 800b7bc:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f7ff fdbd 	bl	800b33e <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 800b7ca:	683c      	ldr	r4, [r7, #0]
 800b7cc:	6878      	ldr	r0, [r7, #4]
 800b7ce:	f7ff fdb6 	bl	800b33e <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	601c      	str	r4, [r3, #0]
	if (__old_p)
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d007      	beq.n	800b7ec <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f000 f81e 	bl	800b81e <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	68f9      	ldr	r1, [r7, #12]
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f7ff fde5 	bl	800b3b6 <_ZNKSt14default_deleteI9pruThreadEclEPS0_>
      }
 800b7ec:	bf00      	nop
 800b7ee:	3714      	adds	r7, #20
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd90      	pop	{r4, r7, pc}

0800b7f4 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b084      	sub	sp, #16
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	f7ff fd9e 	bl	800b33e <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800b802:	4603      	mov	r3, r0
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f7ff fd98 	bl	800b33e <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800b80e:	4603      	mov	r3, r0
 800b810:	2200      	movs	r2, #0
 800b812:	601a      	str	r2, [r3, #0]
	return __p;
 800b814:	68fb      	ldr	r3, [r7, #12]
      }
 800b816:	4618      	mov	r0, r3
 800b818:	3710      	adds	r7, #16
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}

0800b81e <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800b81e:	b580      	push	{r7, lr}
 800b820:	b082      	sub	sp, #8
 800b822:	af00      	add	r7, sp, #0
 800b824:	6078      	str	r0, [r7, #4]
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	4618      	mov	r0, r3
 800b82a:	f000 facf 	bl	800bdcc <_ZSt3getILj1EJP9pruThreadSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800b82e:	4603      	mov	r3, r0
 800b830:	4618      	mov	r0, r3
 800b832:	3708      	adds	r7, #8
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}

0800b838 <_ZSt7forwardISt14default_deleteI9pruThreadEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b838:	b480      	push	{r7}
 800b83a:	b083      	sub	sp, #12
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	4618      	mov	r0, r3
 800b844:	370c      	adds	r7, #12
 800b846:	46bd      	mov	sp, r7
 800b848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84c:	4770      	bx	lr

0800b84e <_ZSt7forwardIRA6_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b84e:	b480      	push	{r7}
 800b850:	b083      	sub	sp, #12
 800b852:	af00      	add	r7, sp, #0
 800b854:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	4618      	mov	r0, r3
 800b85a:	370c      	adds	r7, #12
 800b85c:	46bd      	mov	sp, r7
 800b85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b862:	4770      	bx	lr

0800b864 <_ZSt7forwardIRA7_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b864:	b480      	push	{r7}
 800b866:	b083      	sub	sp, #12
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	4618      	mov	r0, r3
 800b870:	370c      	adds	r7, #12
 800b872:	46bd      	mov	sp, r7
 800b874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b878:	4770      	bx	lr

0800b87a <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I12CommsHandlervEERKS_IT_LS2_0EE>:
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
 800b87a:	b580      	push	{r7, lr}
 800b87c:	b082      	sub	sp, #8
 800b87e:	af00      	add	r7, sp, #0
 800b880:	6078      	str	r0, [r7, #4]
 800b882:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	681a      	ldr	r2, [r3, #0]
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	601a      	str	r2, [r3, #0]
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	1d1a      	adds	r2, r3, #4
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	3304      	adds	r3, #4
 800b894:	4619      	mov	r1, r3
 800b896:	4610      	mov	r0, r2
 800b898:	f7ff fc13 	bl	800b0c2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	{ }
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	4618      	mov	r0, r3
 800b8a0:	3708      	adds	r7, #8
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}

0800b8a6 <_ZNKSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800b8a6:	b580      	push	{r7, lr}
 800b8a8:	b082      	sub	sp, #8
 800b8aa:	af00      	add	r7, sp, #0
 800b8ac:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	f000 fa97 	bl	800bde4 <_ZNKSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	3708      	adds	r7, #8
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}

0800b8c0 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ES3_j>:

  template <typename>
  friend class ElementProxy;

 public:
  ElementProxy(TUpstream upstream, size_t index)
 800b8c0:	b480      	push	{r7}
 800b8c2:	b085      	sub	sp, #20
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	60f8      	str	r0, [r7, #12]
 800b8c8:	1d38      	adds	r0, r7, #4
 800b8ca:	e880 0006 	stmia.w	r0, {r1, r2}
 800b8ce:	603b      	str	r3, [r7, #0]
      : upstream_(upstream), index_(index) {}
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	3304      	adds	r3, #4
 800b8d4:	1d3a      	adds	r2, r7, #4
 800b8d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b8da:	e883 0003 	stmia.w	r3, {r0, r1}
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	683a      	ldr	r2, [r7, #0]
 800b8e2:	60da      	str	r2, [r3, #12]
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	3714      	adds	r7, #20
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f0:	4770      	bx	lr

0800b8f2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>:
  const TDerived& derived() const {
 800b8f2:	b480      	push	{r7}
 800b8f4:	b083      	sub	sp, #12
 800b8f6:	af00      	add	r7, sp, #0
 800b8f8:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 800b8fa:	687b      	ldr	r3, [r7, #4]
  }
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	370c      	adds	r7, #12
 800b900:	46bd      	mov	sp, r7
 800b902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b906:	4770      	bx	lr

0800b908 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>:
    return *this;
  }

 private:
  // clang-format off
  ElementProxy(const ElementProxy& src)  // Error here? See https://arduinojson.org/v7/proxy-non-copyable/
 800b908:	b480      	push	{r7}
 800b90a:	b083      	sub	sp, #12
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
 800b910:	6039      	str	r1, [r7, #0]
      : upstream_(src.upstream_), index_(src.index_) {}
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	683a      	ldr	r2, [r7, #0]
 800b916:	3304      	adds	r3, #4
 800b918:	3204      	adds	r2, #4
 800b91a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b91e:	e883 0003 	stmia.w	r3, {r0, r1}
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	68da      	ldr	r2, [r3, #12]
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	60da      	str	r2, [r3, #12]
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	4618      	mov	r0, r3
 800b92e:	370c      	adds	r7, #12
 800b930:	46bd      	mov	sp, r7
 800b932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b936:	4770      	bx	lr

0800b938 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>:
  MemberProxy(TUpstream upstream, AdaptedString key)
 800b938:	b082      	sub	sp, #8
 800b93a:	b580      	push	{r7, lr}
 800b93c:	b082      	sub	sp, #8
 800b93e:	af00      	add	r7, sp, #0
 800b940:	6078      	str	r0, [r7, #4]
 800b942:	6039      	str	r1, [r7, #0]
 800b944:	f107 0110 	add.w	r1, r7, #16
 800b948:	e881 000c 	stmia.w	r1, {r2, r3}
      : upstream_(upstream), key_(key) {}
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	3304      	adds	r3, #4
 800b950:	6839      	ldr	r1, [r7, #0]
 800b952:	4618      	mov	r0, r3
 800b954:	f7ff ffd8 	bl	800b908 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	3314      	adds	r3, #20
 800b95c:	f107 0210 	add.w	r2, r7, #16
 800b960:	ca07      	ldmia	r2, {r0, r1, r2}
 800b962:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	4618      	mov	r0, r3
 800b96a:	3708      	adds	r7, #8
 800b96c:	46bd      	mov	sp, r7
 800b96e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b972:	b002      	add	sp, #8
 800b974:	4770      	bx	lr

0800b976 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA5_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 800b976:	b580      	push	{r7, lr}
 800b978:	b082      	sub	sp, #8
 800b97a:	af00      	add	r7, sp, #0
 800b97c:	6078      	str	r0, [r7, #4]
 800b97e:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800b980:	6838      	ldr	r0, [r7, #0]
 800b982:	f000 fa3d 	bl	800be00 <_ZN11ArduinoJson8V730HB226detail7forwardIRA5_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 800b986:	4602      	mov	r2, r0
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	4611      	mov	r1, r2
 800b98c:	4618      	mov	r0, r3
 800b98e:	f000 fa42 	bl	800be16 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA5_KcvE5adaptES5_>
 800b992:	bf00      	nop
}
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	3708      	adds	r7, #8
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}

0800b99c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE2asIPKcEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 800b99c:	b590      	push	{r4, r7, lr}
 800b99e:	b087      	sub	sp, #28
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	617b      	str	r3, [r7, #20]
 800b9a8:	697b      	ldr	r3, [r7, #20]
 800b9aa:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 800b9ac:	6938      	ldr	r0, [r7, #16]
 800b9ae:	f000 fc58 	bl	800c262 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7getDataEv>
 800b9b2:	4604      	mov	r4, r0
 800b9b4:	6938      	ldr	r0, [r7, #16]
 800b9b6:	f000 fc64 	bl	800c282 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>
 800b9ba:	4602      	mov	r2, r0
 800b9bc:	f107 0308 	add.w	r3, r7, #8
 800b9c0:	4621      	mov	r1, r4
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f7f8 fe91 	bl	80046ea <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 800b9c8:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 800b9ca:	f107 0308 	add.w	r3, r7, #8
 800b9ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b9d2:	f7f9 fb83 	bl	80050dc <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE>
 800b9d6:	4603      	mov	r3, r0
}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	371c      	adds	r7, #28
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd90      	pop	{r4, r7, pc}

0800b9e0 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA11_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b082      	sub	sp, #8
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
 800b9e8:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800b9ea:	6838      	ldr	r0, [r7, #0]
 800b9ec:	f000 fa22 	bl	800be34 <_ZN11ArduinoJson8V730HB226detail7forwardIRA11_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 800b9f0:	4602      	mov	r2, r0
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	4611      	mov	r1, r2
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f000 fa27 	bl	800be4a <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA11_KcvE5adaptES5_>
 800b9fc:	bf00      	nop
}
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	3708      	adds	r7, #8
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}

0800ba06 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE3setImEEbRKT_>:
  bool set(const T& value) const {
 800ba06:	b580      	push	{r7, lr}
 800ba08:	b082      	sub	sp, #8
 800ba0a:	af00      	add	r7, sp, #0
 800ba0c:	6078      	str	r0, [r7, #4]
 800ba0e:	6039      	str	r1, [r7, #0]
    return doSet<Converter<TypeForConverter>>(value);
 800ba10:	6839      	ldr	r1, [r7, #0]
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f000 fa28 	bl	800be68 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE5doSetINS0_9ConverterImvEEmEEbRKT0_>
 800ba18:	4603      	mov	r3, r0
  }
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	3708      	adds	r7, #8
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}

0800ba22 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE2asINS0_11JsonVariantEEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 800ba22:	b590      	push	{r4, r7, lr}
 800ba24:	b087      	sub	sp, #28
 800ba26:	af00      	add	r7, sp, #0
 800ba28:	6078      	str	r0, [r7, #4]
 800ba2a:	6039      	str	r1, [r7, #0]
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	617b      	str	r3, [r7, #20]
 800ba30:	697b      	ldr	r3, [r7, #20]
 800ba32:	613b      	str	r3, [r7, #16]
  return JsonVariant(getData(), getResourceManager());
 800ba34:	6938      	ldr	r0, [r7, #16]
 800ba36:	f000 fe57 	bl	800c6e8 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7getDataEv>
 800ba3a:	4604      	mov	r4, r0
 800ba3c:	6938      	ldr	r0, [r7, #16]
 800ba3e:	f000 fe63 	bl	800c708 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE18getResourceManagerEv>
 800ba42:	4602      	mov	r2, r0
 800ba44:	f107 0308 	add.w	r3, r7, #8
 800ba48:	4621      	mov	r1, r4
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f7f8 fe78 	bl	8004740 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
    return getVariant();
 800ba50:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f107 0308 	add.w	r3, r7, #8
 800ba58:	e893 0006 	ldmia.w	r3, {r1, r2}
 800ba5c:	f7fd ffbc 	bl	80099d8 <_ZN11ArduinoJson8V730HB229ConverterINS0_11JsonVariantEvE8fromJsonES2_>
 800ba60:	bf00      	nop
}
 800ba62:	6878      	ldr	r0, [r7, #4]
 800ba64:	371c      	adds	r7, #28
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd90      	pop	{r4, r7, pc}

0800ba6a <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 800ba6a:	b580      	push	{r7, lr}
 800ba6c:	b082      	sub	sp, #8
 800ba6e:	af00      	add	r7, sp, #0
 800ba70:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f000 fa07 	bl	800be86 <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	3708      	adds	r7, #8
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}

0800ba82 <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_>:
  StringNode* saveString(TAdaptedString str) {
 800ba82:	b580      	push	{r7, lr}
 800ba84:	b088      	sub	sp, #32
 800ba86:	af02      	add	r7, sp, #8
 800ba88:	60f8      	str	r0, [r7, #12]
 800ba8a:	4638      	mov	r0, r7
 800ba8c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (str.isNull())
 800ba90:	463b      	mov	r3, r7
 800ba92:	4618      	mov	r0, r3
 800ba94:	f7f8 fa79 	bl	8003f8a <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d001      	beq.n	800baa2 <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_+0x20>
      return 0;
 800ba9e:	2300      	movs	r3, #0
 800baa0:	e011      	b.n	800bac6 <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_+0x44>
    auto node = stringPool_.add(str, allocator_);
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	f103 0008 	add.w	r0, r3, #8
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	9300      	str	r3, [sp, #0]
 800baae:	463b      	mov	r3, r7
 800bab0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bab2:	f000 f9f4 	bl	800be9e <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE>
 800bab6:	6178      	str	r0, [r7, #20]
    if (!node)
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d102      	bne.n	800bac4 <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_+0x42>
      overflowed_ = true;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	2201      	movs	r2, #1
 800bac2:	711a      	strb	r2, [r3, #4]
    return node;
 800bac4:	697b      	ldr	r3, [r7, #20]
  }
 800bac6:	4618      	mov	r0, r3
 800bac8:	3718      	adds	r7, #24
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd80      	pop	{r7, pc}

0800bace <_ZSt3getILj1EJP14CommsInterfaceSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 800bace:	b580      	push	{r7, lr}
 800bad0:	b082      	sub	sp, #8
 800bad2:	af00      	add	r7, sp, #0
 800bad4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	f000 fa21 	bl	800bf1e <_ZSt12__get_helperILj1ESt14default_deleteI14CommsInterfaceEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800badc:	4603      	mov	r3, r0
 800bade:	4618      	mov	r0, r3
 800bae0:	3708      	adds	r7, #8
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}

0800bae6 <_ZSt3getILj0EJP9pruThreadSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 800bae6:	b580      	push	{r7, lr}
 800bae8:	b082      	sub	sp, #8
 800baea:	af00      	add	r7, sp, #0
 800baec:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	4618      	mov	r0, r3
 800baf2:	f000 fa20 	bl	800bf36 <_ZSt12__get_helperILj0EP9pruThreadJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800baf6:	4603      	mov	r3, r0
 800baf8:	4618      	mov	r0, r3
 800bafa:	3708      	adds	r7, #8
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}

0800bb00 <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b082      	sub	sp, #8
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f000 fa20 	bl	800bf4e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17JsonConfigHandlerEEEC1Ev>
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	4618      	mov	r0, r3
 800bb12:	f000 fa28 	bl	800bf66 <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EEC1Ev>
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	4618      	mov	r0, r3
 800bb1a:	3708      	adds	r7, #8
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}

0800bb20 <_ZSt3getILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b082      	sub	sp, #8
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f000 fa29 	bl	800bf82 <_ZSt12__get_helperILj0EP17JsonConfigHandlerJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800bb30:	4603      	mov	r3, r0
 800bb32:	4618      	mov	r0, r3
 800bb34:	3708      	adds	r7, #8
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}

0800bb3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_count() noexcept : _M_pi(0)
 800bb3a:	b480      	push	{r7}
 800bb3c:	b083      	sub	sp, #12
 800bb3e:	af00      	add	r7, sp, #0
 800bb40:	6078      	str	r0, [r7, #4]
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2200      	movs	r2, #0
 800bb46:	601a      	str	r2, [r3, #0]
      { }
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	370c      	adds	r7, #12
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb54:	4770      	bx	lr

0800bb56 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800bb56:	b580      	push	{r7, lr}
 800bb58:	b082      	sub	sp, #8
 800bb5a:	af00      	add	r7, sp, #0
 800bb5c:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f000 fa1b 	bl	800bf9a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9pruThreadEEEC1Ev>
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	4618      	mov	r0, r3
 800bb68:	f000 fa23 	bl	800bfb2 <_ZNSt10_Head_baseILj0EP9pruThreadLb0EEC1Ev>
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	4618      	mov	r0, r3
 800bb70:	3708      	adds	r7, #8
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}

0800bb76 <_ZSt3getILj0EJP9pruThreadSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800bb76:	b580      	push	{r7, lr}
 800bb78:	b082      	sub	sp, #8
 800bb7a:	af00      	add	r7, sp, #0
 800bb7c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	4618      	mov	r0, r3
 800bb82:	f000 fa24 	bl	800bfce <_ZSt12__get_helperILj0EP9pruThreadJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800bb86:	4603      	mov	r3, r0
 800bb88:	4618      	mov	r0, r3
 800bb8a:	3708      	adds	r7, #8
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	bd80      	pop	{r7, pc}

0800bb90 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EED1Ev>:
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT
 800bb90:	b5b0      	push	{r4, r5, r7, lr}
 800bb92:	b082      	sub	sp, #8
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681c      	ldr	r4, [r3, #0]
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	4618      	mov	r0, r3
 800bba4:	f000 fa44 	bl	800c030 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 800bba8:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800bbaa:	461a      	mov	r2, r3
 800bbac:	4629      	mov	r1, r5
 800bbae:	4620      	mov	r0, r4
 800bbb0:	f000 fa49 	bl	800c046 <_ZSt8_DestroyIPSt10shared_ptrI6ModuleES2_EvT_S4_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f000 fa21 	bl	800bffe <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EED1Ev>
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	3708      	adds	r7, #8
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bdb0      	pop	{r4, r5, r7, pc}

0800bbc6 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800bbc6:	b590      	push	{r4, r7, lr}
 800bbc8:	b083      	sub	sp, #12
 800bbca:	af00      	add	r7, sp, #0
 800bbcc:	6078      	str	r0, [r7, #4]
 800bbce:	6039      	str	r1, [r7, #0]
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f7ff fb3d 	bl	800b252 <_ZNSt5tupleIJP17JsonConfigHandlerSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800bbd8:	683c      	ldr	r4, [r7, #0]
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f7ff fb46 	bl	800b26c <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	601c      	str	r4, [r3, #0]
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	370c      	adds	r7, #12
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd90      	pop	{r4, r7, pc}

0800bbee <_ZSt3getILj1EJP17JsonConfigHandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800bbee:	b580      	push	{r7, lr}
 800bbf0:	b082      	sub	sp, #8
 800bbf2:	af00      	add	r7, sp, #0
 800bbf4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f000 fa33 	bl	800c062 <_ZSt12__get_helperILj1ESt14default_deleteI17JsonConfigHandlerEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	4618      	mov	r0, r3
 800bc00:	3708      	adds	r7, #8
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}

0800bc06 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EEC1EPS0_>:
 800bc06:	b590      	push	{r4, r7, lr}
 800bc08:	b083      	sub	sp, #12
 800bc0a:	af00      	add	r7, sp, #0
 800bc0c:	6078      	str	r0, [r7, #4]
 800bc0e:	6039      	str	r1, [r7, #0]
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	4618      	mov	r0, r3
 800bc14:	f000 fa31 	bl	800c07a <_ZNSt5tupleIJP8SPICommsSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800bc18:	683c      	ldr	r4, [r7, #0]
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	f7ff fc95 	bl	800b54a <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE6_M_ptrEv>
 800bc20:	4603      	mov	r3, r0
 800bc22:	601c      	str	r4, [r3, #0]
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	4618      	mov	r0, r3
 800bc28:	370c      	adds	r7, #12
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bd90      	pop	{r4, r7, pc}

0800bc2e <_ZSt3getILj0EJP8SPICommsSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800bc2e:	b580      	push	{r7, lr}
 800bc30:	b082      	sub	sp, #8
 800bc32:	af00      	add	r7, sp, #0
 800bc34:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	4618      	mov	r0, r3
 800bc3a:	f000 fa2b 	bl	800c094 <_ZSt12__get_helperILj0EP8SPICommsJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800bc3e:	4603      	mov	r3, r0
 800bc40:	4618      	mov	r0, r3
 800bc42:	3708      	adds	r7, #8
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd80      	pop	{r7, pc}

0800bc48 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b082      	sub	sp, #8
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	4618      	mov	r0, r3
 800bc54:	f000 fa2a 	bl	800c0ac <_ZSt3getILj1EJP8SPICommsSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3708      	adds	r7, #8
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}

0800bc62 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
      /// @}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 800bc62:	b580      	push	{r7, lr}
 800bc64:	b082      	sub	sp, #8
 800bc66:	af00      	add	r7, sp, #0
 800bc68:	6078      	str	r0, [r7, #4]
 800bc6a:	6039      	str	r1, [r7, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2200      	movs	r2, #0
 800bc70:	601a      	str	r2, [r3, #0]
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	3304      	adds	r3, #4
 800bc76:	6879      	ldr	r1, [r7, #4]
 800bc78:	683a      	ldr	r2, [r7, #0]
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	f000 fa22 	bl	800c0c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I12CommsHandlerSaIvEJEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>
	{ _M_enable_shared_from_this_with(_M_ptr); }
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	4619      	mov	r1, r3
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f000 fa60 	bl	800c14c <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	4618      	mov	r0, r3
 800bc90:	3708      	adds	r7, #8
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}

0800bc96 <_ZSt4moveIRSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800bc96:	b480      	push	{r7}
 800bc98:	b083      	sub	sp, #12
 800bc9a:	af00      	add	r7, sp, #0
 800bc9c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	4618      	mov	r0, r3
 800bca2:	370c      	adds	r7, #12
 800bca4:	46bd      	mov	sp, r7
 800bca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcaa:	4770      	bx	lr

0800bcac <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b082      	sub	sp, #8
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
 800bcb4:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	681a      	ldr	r2, [r3, #0]
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	601a      	str	r2, [r3, #0]
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	3304      	adds	r3, #4
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f7ff ff39 	bl	800bb3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	1d1a      	adds	r2, r3, #4
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	3304      	adds	r3, #4
 800bcd0:	4619      	mov	r1, r3
 800bcd2:	4610      	mov	r0, r2
 800bcd4:	f000 fa45 	bl	800c162 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = nullptr;
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	2200      	movs	r2, #0
 800bcdc:	601a      	str	r2, [r3, #0]
      }
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	4618      	mov	r0, r3
 800bce2:	3708      	adds	r7, #8
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}

0800bce8 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>:
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b082      	sub	sp, #8
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	6039      	str	r1, [r7, #0]
	std::swap(_M_ptr, __other._M_ptr);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	683a      	ldr	r2, [r7, #0]
 800bcf6:	4611      	mov	r1, r2
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	f000 fa47 	bl	800c18c <_ZSt4swapIP12CommsHandlerENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>
	_M_refcount._M_swap(__other._M_refcount);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	1d1a      	adds	r2, r3, #4
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	3304      	adds	r3, #4
 800bd06:	4619      	mov	r1, r3
 800bd08:	4610      	mov	r0, r2
 800bd0a:	f000 fa2a 	bl	800c162 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
      }
 800bd0e:	bf00      	nop
 800bd10:	3708      	adds	r7, #8
 800bd12:	46bd      	mov	sp, r7
 800bd14:	bd80      	pop	{r7, pc}

0800bd16 <_ZNKSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 800bd16:	b480      	push	{r7}
 800bd18:	b083      	sub	sp, #12
 800bd1a:	af00      	add	r7, sp, #0
 800bd1c:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	4618      	mov	r0, r3
 800bd24:	370c      	adds	r7, #12
 800bd26:	46bd      	mov	sp, r7
 800bd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2c:	4770      	bx	lr

0800bd2e <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800bd2e:	b580      	push	{r7, lr}
 800bd30:	b084      	sub	sp, #16
 800bd32:	af00      	add	r7, sp, #0
 800bd34:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	f7ff fc07 	bl	800b54a <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE6_M_ptrEv>
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800bd42:	6878      	ldr	r0, [r7, #4]
 800bd44:	f7ff fc01 	bl	800b54a <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE6_M_ptrEv>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	601a      	str	r2, [r3, #0]
	return __p;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
      }
 800bd50:	4618      	mov	r0, r3
 800bd52:	3710      	adds	r7, #16
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}

0800bd58 <_ZNSt5tupleIJP14CommsInterfaceSt14default_deleteIS0_EEEC1IRS1_S2_I8SPICommsELb1EEEOT_OT0_>:
	tuple(_U1&& __a1, _U2&& __a2)
 800bd58:	b5b0      	push	{r4, r5, r7, lr}
 800bd5a:	b084      	sub	sp, #16
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	60f8      	str	r0, [r7, #12]
 800bd60:	60b9      	str	r1, [r7, #8]
 800bd62:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800bd64:	68fc      	ldr	r4, [r7, #12]
 800bd66:	68b8      	ldr	r0, [r7, #8]
 800bd68:	f000 fa2f 	bl	800c1ca <_ZSt7forwardIRP14CommsInterfaceEOT_RNSt16remove_referenceIS3_E4typeE>
 800bd6c:	4605      	mov	r5, r0
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f7ff fc73 	bl	800b65a <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800bd74:	4603      	mov	r3, r0
 800bd76:	461a      	mov	r2, r3
 800bd78:	4629      	mov	r1, r5
 800bd7a:	4620      	mov	r0, r4
 800bd7c:	f000 fa30 	bl	800c1e0 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEEC1IRS1_JS2_I8SPICommsEEvEEOT_DpOT0_>
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	4618      	mov	r0, r3
 800bd84:	3710      	adds	r7, #16
 800bd86:	46bd      	mov	sp, r7
 800bd88:	bdb0      	pop	{r4, r5, r7, pc}

0800bd8a <_ZSt3getILj0EJP14CommsInterfaceSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800bd8a:	b580      	push	{r7, lr}
 800bd8c:	b082      	sub	sp, #8
 800bd8e:	af00      	add	r7, sp, #0
 800bd90:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	4618      	mov	r0, r3
 800bd96:	f000 fa3f 	bl	800c218 <_ZSt12__get_helperILj0EP14CommsInterfaceJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	3708      	adds	r7, #8
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}

0800bda4 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800bda4:	b590      	push	{r4, r7, lr}
 800bda6:	b083      	sub	sp, #12
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
 800bdac:	6039      	str	r1, [r7, #0]
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	f7ff fab7 	bl	800b324 <_ZNSt5tupleIJP9pruThreadSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800bdb6:	683c      	ldr	r4, [r7, #0]
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	f7ff fac0 	bl	800b33e <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	601c      	str	r4, [r3, #0]
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	370c      	adds	r7, #12
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd90      	pop	{r4, r7, pc}

0800bdcc <_ZSt3getILj1EJP9pruThreadSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b082      	sub	sp, #8
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800bdd4:	6878      	ldr	r0, [r7, #4]
 800bdd6:	f000 fa2b 	bl	800c230 <_ZSt12__get_helperILj1ESt14default_deleteI9pruThreadEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800bdda:	4603      	mov	r3, r0
 800bddc:	4618      	mov	r0, r3
 800bdde:	3708      	adds	r7, #8
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}

0800bde4 <_ZNKSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b082      	sub	sp, #8
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f000 fa2a 	bl	800c248 <_ZSt3getILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	3708      	adds	r7, #8
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	bd80      	pop	{r7, pc}

0800be00 <_ZN11ArduinoJson8V730HB226detail7forwardIRA5_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800be00:	b480      	push	{r7}
 800be02:	b083      	sub	sp, #12
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800be08:	687b      	ldr	r3, [r7, #4]
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	370c      	adds	r7, #12
 800be0e:	46bd      	mov	sp, r7
 800be10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be14:	4770      	bx	lr

0800be16 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA5_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 800be16:	b580      	push	{r7, lr}
 800be18:	b082      	sub	sp, #8
 800be1a:	af00      	add	r7, sp, #0
 800be1c:	6078      	str	r0, [r7, #4]
 800be1e:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800be20:	2301      	movs	r3, #1
 800be22:	2204      	movs	r2, #4
 800be24:	6839      	ldr	r1, [r7, #0]
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	f7f8 f898 	bl	8003f5c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800be2c:	6878      	ldr	r0, [r7, #4]
 800be2e:	3708      	adds	r7, #8
 800be30:	46bd      	mov	sp, r7
 800be32:	bd80      	pop	{r7, pc}

0800be34 <_ZN11ArduinoJson8V730HB226detail7forwardIRA11_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800be34:	b480      	push	{r7}
 800be36:	b083      	sub	sp, #12
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800be3c:	687b      	ldr	r3, [r7, #4]
}
 800be3e:	4618      	mov	r0, r3
 800be40:	370c      	adds	r7, #12
 800be42:	46bd      	mov	sp, r7
 800be44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be48:	4770      	bx	lr

0800be4a <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA11_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 800be4a:	b580      	push	{r7, lr}
 800be4c:	b082      	sub	sp, #8
 800be4e:	af00      	add	r7, sp, #0
 800be50:	6078      	str	r0, [r7, #4]
 800be52:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800be54:	2301      	movs	r3, #1
 800be56:	220a      	movs	r2, #10
 800be58:	6839      	ldr	r1, [r7, #0]
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	f7f8 f87e 	bl	8003f5c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800be60:	6878      	ldr	r0, [r7, #4]
 800be62:	3708      	adds	r7, #8
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}

0800be68 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE5doSetINS0_9ConverterImvEEmEEbRKT0_>:
  }

  template <typename TConverter, typename T>
  bool doSet(const T& value) const {
 800be68:	b580      	push	{r7, lr}
 800be6a:	b084      	sub	sp, #16
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
 800be70:	6039      	str	r1, [r7, #0]
    return doSet<TConverter>(
 800be72:	461a      	mov	r2, r3
 800be74:	6839      	ldr	r1, [r7, #0]
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	f000 fa13 	bl	800c2a2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE5doSetINS0_9ConverterImvEEmEEbRKT0_NS1_17integral_constantIbLb1EEE>
 800be7c:	4603      	mov	r3, r0
        value, is_same<typename function_traits<
                           decltype(&TConverter::toJson)>::return_type,
                       bool>{});
  }
 800be7e:	4618      	mov	r0, r3
 800be80:	3710      	adds	r7, #16
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}

0800be86 <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 800be86:	b480      	push	{r7}
 800be88:	b083      	sub	sp, #12
 800be8a:	af00      	add	r7, sp, #0
 800be8c:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	4618      	mov	r0, r3
 800be94:	370c      	adds	r7, #12
 800be96:	46bd      	mov	sp, r7
 800be98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9c:	4770      	bx	lr

0800be9e <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE>:
  StringNode* add(TAdaptedString str, Allocator* allocator) {
 800be9e:	b580      	push	{r7, lr}
 800bea0:	b088      	sub	sp, #32
 800bea2:	af02      	add	r7, sp, #8
 800bea4:	60f8      	str	r0, [r7, #12]
 800bea6:	4638      	mov	r0, r7
 800bea8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    auto node = get(str);
 800beac:	463b      	mov	r3, r7
 800beae:	4619      	mov	r1, r3
 800beb0:	68f8      	ldr	r0, [r7, #12]
 800beb2:	f7fa ff01 	bl	8006cb8 <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_>
 800beb6:	6178      	str	r0, [r7, #20]
    if (node) {
 800beb8:	697b      	ldr	r3, [r7, #20]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d007      	beq.n	800bece <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x30>
      node->references++;
 800bebe:	697b      	ldr	r3, [r7, #20]
 800bec0:	889b      	ldrh	r3, [r3, #4]
 800bec2:	3301      	adds	r3, #1
 800bec4:	b29a      	uxth	r2, r3
 800bec6:	697b      	ldr	r3, [r7, #20]
 800bec8:	809a      	strh	r2, [r3, #4]
      return node;
 800beca:	697b      	ldr	r3, [r7, #20]
 800becc:	e023      	b.n	800bf16 <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x78>
    size_t n = str.size();
 800bece:	463b      	mov	r3, r7
 800bed0:	4618      	mov	r0, r3
 800bed2:	f7f8 f86b 	bl	8003fac <_ZNK11ArduinoJson8V730HB226detail9RamString4sizeEv>
 800bed6:	6138      	str	r0, [r7, #16]
    node = StringNode::create(n, allocator);
 800bed8:	6a39      	ldr	r1, [r7, #32]
 800beda:	6938      	ldr	r0, [r7, #16]
 800bedc:	f7f7 ffd4 	bl	8003e88 <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE>
 800bee0:	6178      	str	r0, [r7, #20]
    if (!node)
 800bee2:	697b      	ldr	r3, [r7, #20]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d101      	bne.n	800beec <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x4e>
      return nullptr;
 800bee8:	2300      	movs	r3, #0
 800beea:	e014      	b.n	800bf16 <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x78>
    stringGetChars(str, node->data, n);
 800beec:	697b      	ldr	r3, [r7, #20]
 800beee:	f103 0208 	add.w	r2, r3, #8
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	9300      	str	r3, [sp, #0]
 800bef6:	4613      	mov	r3, r2
 800bef8:	463a      	mov	r2, r7
 800befa:	ca07      	ldmia	r2, {r0, r1, r2}
 800befc:	f000 f9eb 	bl	800c2d6 <_ZN11ArduinoJson8V730HB226detailL14stringGetCharsINS1_9RamStringEEEvT_Pcj>
    node->data[n] = 0;  // force NUL terminator
 800bf00:	697a      	ldr	r2, [r7, #20]
 800bf02:	693b      	ldr	r3, [r7, #16]
 800bf04:	4413      	add	r3, r2
 800bf06:	3308      	adds	r3, #8
 800bf08:	2200      	movs	r2, #0
 800bf0a:	701a      	strb	r2, [r3, #0]
    add(node);
 800bf0c:	6979      	ldr	r1, [r7, #20]
 800bf0e:	68f8      	ldr	r0, [r7, #12]
 800bf10:	f7f8 f87e 	bl	8004010 <_ZN11ArduinoJson8V730HB226detail10StringPool3addEPNS1_10StringNodeE>
    return node;
 800bf14:	697b      	ldr	r3, [r7, #20]
  }
 800bf16:	4618      	mov	r0, r3
 800bf18:	3718      	adds	r7, #24
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}

0800bf1e <_ZSt12__get_helperILj1ESt14default_deleteI14CommsInterfaceEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800bf1e:	b580      	push	{r7, lr}
 800bf20:	b082      	sub	sp, #8
 800bf22:	af00      	add	r7, sp, #0
 800bf24:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f000 f9f5 	bl	800c316 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEE7_M_headERS3_>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	4618      	mov	r0, r3
 800bf30:	3708      	adds	r7, #8
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}

0800bf36 <_ZSt12__get_helperILj0EP9pruThreadJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800bf36:	b580      	push	{r7, lr}
 800bf38:	b082      	sub	sp, #8
 800bf3a:	af00      	add	r7, sp, #0
 800bf3c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f000 f9f5 	bl	800c32e <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEE7_M_headERKS4_>
 800bf44:	4603      	mov	r3, r0
 800bf46:	4618      	mov	r0, r3
 800bf48:	3708      	adds	r7, #8
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}

0800bf4e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17JsonConfigHandlerEEEC1Ev>:
      _Tuple_impl()
 800bf4e:	b580      	push	{r7, lr}
 800bf50:	b082      	sub	sp, #8
 800bf52:	af00      	add	r7, sp, #0
 800bf54:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f000 f9f6 	bl	800c348 <_ZNSt10_Head_baseILj1ESt14default_deleteI17JsonConfigHandlerELb1EEC1Ev>
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	4618      	mov	r0, r3
 800bf60:	3708      	adds	r7, #8
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}

0800bf66 <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EEC1Ev>:
      constexpr _Head_base()
 800bf66:	b480      	push	{r7}
 800bf68:	b083      	sub	sp, #12
 800bf6a:	af00      	add	r7, sp, #0
 800bf6c:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2200      	movs	r2, #0
 800bf72:	601a      	str	r2, [r3, #0]
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	4618      	mov	r0, r3
 800bf78:	370c      	adds	r7, #12
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf80:	4770      	bx	lr

0800bf82 <_ZSt12__get_helperILj0EP17JsonConfigHandlerJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800bf82:	b580      	push	{r7, lr}
 800bf84:	b082      	sub	sp, #8
 800bf86:	af00      	add	r7, sp, #0
 800bf88:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f000 f9e7 	bl	800c35e <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEE7_M_headERS4_>
 800bf90:	4603      	mov	r3, r0
 800bf92:	4618      	mov	r0, r3
 800bf94:	3708      	adds	r7, #8
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}

0800bf9a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9pruThreadEEEC1Ev>:
      _Tuple_impl()
 800bf9a:	b580      	push	{r7, lr}
 800bf9c:	b082      	sub	sp, #8
 800bf9e:	af00      	add	r7, sp, #0
 800bfa0:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	f000 f9e8 	bl	800c378 <_ZNSt10_Head_baseILj1ESt14default_deleteI9pruThreadELb1EEC1Ev>
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	4618      	mov	r0, r3
 800bfac:	3708      	adds	r7, #8
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	bd80      	pop	{r7, pc}

0800bfb2 <_ZNSt10_Head_baseILj0EP9pruThreadLb0EEC1Ev>:
      constexpr _Head_base()
 800bfb2:	b480      	push	{r7}
 800bfb4:	b083      	sub	sp, #12
 800bfb6:	af00      	add	r7, sp, #0
 800bfb8:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	601a      	str	r2, [r3, #0]
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	370c      	adds	r7, #12
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfcc:	4770      	bx	lr

0800bfce <_ZSt12__get_helperILj0EP9pruThreadJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800bfce:	b580      	push	{r7, lr}
 800bfd0:	b082      	sub	sp, #8
 800bfd2:	af00      	add	r7, sp, #0
 800bfd4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f000 f9d9 	bl	800c38e <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEE7_M_headERS4_>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	4618      	mov	r0, r3
 800bfe0:	3708      	adds	r7, #8
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}

0800bfe6 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800bfe6:	b580      	push	{r7, lr}
 800bfe8:	b082      	sub	sp, #8
 800bfea:	af00      	add	r7, sp, #0
 800bfec:	6078      	str	r0, [r7, #4]
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f000 f9da 	bl	800c3a8 <_ZNSaISt10shared_ptrI6ModuleEED1Ev>
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	4618      	mov	r0, r3
 800bff8:	3708      	adds	r7, #8
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd80      	pop	{r7, pc}

0800bffe <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800bffe:	b580      	push	{r7, lr}
 800c000:	b082      	sub	sp, #8
 800c002:	af00      	add	r7, sp, #0
 800c004:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	689a      	ldr	r2, [r3, #8]
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	1ad3      	subs	r3, r2, r3
 800c014:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 800c016:	461a      	mov	r2, r3
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f000 f9d1 	bl	800c3c0 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE13_M_deallocateEPS2_j>
      }
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	4618      	mov	r0, r3
 800c022:	f7ff ffe0 	bl	800bfe6 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE12_Vector_implD1Ev>
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	4618      	mov	r0, r3
 800c02a:	3708      	adds	r7, #8
 800c02c:	46bd      	mov	sp, r7
 800c02e:	bd80      	pop	{r7, pc}

0800c030 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800c030:	b480      	push	{r7}
 800c032:	b083      	sub	sp, #12
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	4618      	mov	r0, r3
 800c03c:	370c      	adds	r7, #12
 800c03e:	46bd      	mov	sp, r7
 800c040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c044:	4770      	bx	lr

0800c046 <_ZSt8_DestroyIPSt10shared_ptrI6ModuleES2_EvT_S4_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800c046:	b580      	push	{r7, lr}
 800c048:	b084      	sub	sp, #16
 800c04a:	af00      	add	r7, sp, #0
 800c04c:	60f8      	str	r0, [r7, #12]
 800c04e:	60b9      	str	r1, [r7, #8]
 800c050:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 800c052:	68b9      	ldr	r1, [r7, #8]
 800c054:	68f8      	ldr	r0, [r7, #12]
 800c056:	f000 f9c6 	bl	800c3e6 <_ZSt8_DestroyIPSt10shared_ptrI6ModuleEEvT_S4_>
    }
 800c05a:	bf00      	nop
 800c05c:	3710      	adds	r7, #16
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd80      	pop	{r7, pc}

0800c062 <_ZSt12__get_helperILj1ESt14default_deleteI17JsonConfigHandlerEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800c062:	b580      	push	{r7, lr}
 800c064:	b082      	sub	sp, #8
 800c066:	af00      	add	r7, sp, #0
 800c068:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f000 f9c8 	bl	800c400 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17JsonConfigHandlerEEE7_M_headERS3_>
 800c070:	4603      	mov	r3, r0
 800c072:	4618      	mov	r0, r3
 800c074:	3708      	adds	r7, #8
 800c076:	46bd      	mov	sp, r7
 800c078:	bd80      	pop	{r7, pc}

0800c07a <_ZNSt5tupleIJP8SPICommsSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800c07a:	b580      	push	{r7, lr}
 800c07c:	b082      	sub	sp, #8
 800c07e:	af00      	add	r7, sp, #0
 800c080:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	4618      	mov	r0, r3
 800c086:	f000 f9c7 	bl	800c418 <_ZNSt11_Tuple_implILj0EJP8SPICommsSt14default_deleteIS0_EEEC1Ev>
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	4618      	mov	r0, r3
 800c08e:	3708      	adds	r7, #8
 800c090:	46bd      	mov	sp, r7
 800c092:	bd80      	pop	{r7, pc}

0800c094 <_ZSt12__get_helperILj0EP8SPICommsJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800c094:	b580      	push	{r7, lr}
 800c096:	b082      	sub	sp, #8
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800c09c:	6878      	ldr	r0, [r7, #4]
 800c09e:	f000 f9cb 	bl	800c438 <_ZNSt11_Tuple_implILj0EJP8SPICommsSt14default_deleteIS0_EEE7_M_headERS4_>
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	3708      	adds	r7, #8
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	bd80      	pop	{r7, pc}

0800c0ac <_ZSt3getILj1EJP8SPICommsSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b082      	sub	sp, #8
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	f000 f9cc 	bl	800c452 <_ZSt12__get_helperILj1ESt14default_deleteI8SPICommsEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	4618      	mov	r0, r3
 800c0be:	3708      	adds	r7, #8
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}

0800c0c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I12CommsHandlerSaIvEJEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>:
	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
 800c0c4:	b5b0      	push	{r4, r5, r7, lr}
 800c0c6:	b08a      	sub	sp, #40	@ 0x28
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	60f8      	str	r0, [r7, #12]
 800c0cc:	60b9      	str	r1, [r7, #8]
 800c0ce:	607a      	str	r2, [r7, #4]
	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 800c0d0:	687a      	ldr	r2, [r7, #4]
 800c0d2:	f107 031c 	add.w	r3, r7, #28
 800c0d6:	4611      	mov	r1, r2
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f000 f9c6 	bl	800c46a <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	  auto __guard = std::__allocate_guarded(__a2);
 800c0de:	f107 0314 	add.w	r3, r7, #20
 800c0e2:	f107 021c 	add.w	r2, r7, #28
 800c0e6:	4611      	mov	r1, r2
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f000 f9d7 	bl	800c49c <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>
	  _Sp_cp_type* __mem = __guard.get();
 800c0ee:	f107 0314 	add.w	r3, r7, #20
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	f000 f9fa 	bl	800c4ec <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>
 800c0f8:	6278      	str	r0, [r7, #36]	@ 0x24
	  auto __pi = ::new (__mem)
 800c0fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0fc:	4619      	mov	r1, r3
 800c0fe:	202c      	movs	r0, #44	@ 0x2c
 800c100:	f7fd fafe 	bl	8009700 <_ZnwjPv>
 800c104:	4604      	mov	r4, r0
 800c106:	4629      	mov	r1, r5
 800c108:	4620      	mov	r0, r4
 800c10a:	f000 f9fd 	bl	800c508 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJEEES1_DpOT_>
 800c10e:	623c      	str	r4, [r7, #32]
	  __guard = nullptr;
 800c110:	f107 0314 	add.w	r3, r7, #20
 800c114:	2100      	movs	r1, #0
 800c116:	4618      	mov	r0, r3
 800c118:	f000 fa18 	bl	800c54c <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>
	  _M_pi = __pi;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	6a3a      	ldr	r2, [r7, #32]
 800c120:	601a      	str	r2, [r3, #0]
	  __p = __pi->_M_ptr();
 800c122:	6a38      	ldr	r0, [r7, #32]
 800c124:	f000 fa21 	bl	800c56a <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800c128:	4602      	mov	r2, r0
 800c12a:	68bb      	ldr	r3, [r7, #8]
 800c12c:	601a      	str	r2, [r3, #0]
	}
 800c12e:	f107 0314 	add.w	r3, r7, #20
 800c132:	4618      	mov	r0, r3
 800c134:	f000 f9c5 	bl	800c4c2 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 800c138:	f107 031c 	add.w	r3, r7, #28
 800c13c:	4618      	mov	r0, r3
 800c13e:	f000 f9a1 	bl	800c484 <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	4618      	mov	r0, r3
 800c146:	3728      	adds	r7, #40	@ 0x28
 800c148:	46bd      	mov	sp, r7
 800c14a:	bdb0      	pop	{r4, r5, r7, pc}

0800c14c <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	    __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
	}

      template<typename _Yp, typename _Yp2 = typename remove_cv<_Yp>::type>
	typename enable_if<!__has_esft_base<_Yp2>::value>::type
	_M_enable_shared_from_this_with(_Yp*) noexcept
 800c14c:	b480      	push	{r7}
 800c14e:	b083      	sub	sp, #12
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
 800c154:	6039      	str	r1, [r7, #0]
	{ }
 800c156:	bf00      	nop
 800c158:	370c      	adds	r7, #12
 800c15a:	46bd      	mov	sp, r7
 800c15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c160:	4770      	bx	lr

0800c162 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>:
      _M_swap(__shared_count& __r) noexcept
 800c162:	b480      	push	{r7}
 800c164:	b085      	sub	sp, #20
 800c166:	af00      	add	r7, sp, #0
 800c168:	6078      	str	r0, [r7, #4]
 800c16a:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	60fb      	str	r3, [r7, #12]
	__r._M_pi = _M_pi;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681a      	ldr	r2, [r3, #0]
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	601a      	str	r2, [r3, #0]
	_M_pi = __tmp;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	68fa      	ldr	r2, [r7, #12]
 800c17e:	601a      	str	r2, [r3, #0]
      }
 800c180:	bf00      	nop
 800c182:	3714      	adds	r7, #20
 800c184:	46bd      	mov	sp, r7
 800c186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18a:	4770      	bx	lr

0800c18c <_ZSt4swapIP12CommsHandlerENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b084      	sub	sp, #16
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
 800c194:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800c196:	6878      	ldr	r0, [r7, #4]
 800c198:	f000 f9f5 	bl	800c586 <_ZSt4moveIRP12CommsHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 800c19c:	4603      	mov	r3, r0
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800c1a2:	6838      	ldr	r0, [r7, #0]
 800c1a4:	f000 f9ef 	bl	800c586 <_ZSt4moveIRP12CommsHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	681a      	ldr	r2, [r3, #0]
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800c1b0:	f107 030c 	add.w	r3, r7, #12
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f000 f9e6 	bl	800c586 <_ZSt4moveIRP12CommsHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	681a      	ldr	r2, [r3, #0]
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	601a      	str	r2, [r3, #0]
    }
 800c1c2:	bf00      	nop
 800c1c4:	3710      	adds	r7, #16
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd80      	pop	{r7, pc}

0800c1ca <_ZSt7forwardIRP14CommsInterfaceEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c1ca:	b480      	push	{r7}
 800c1cc:	b083      	sub	sp, #12
 800c1ce:	af00      	add	r7, sp, #0
 800c1d0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	370c      	adds	r7, #12
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1de:	4770      	bx	lr

0800c1e0 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEEC1IRS1_JS2_I8SPICommsEEvEEOT_DpOT0_>:
	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800c1e0:	b590      	push	{r4, r7, lr}
 800c1e2:	b085      	sub	sp, #20
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	60f8      	str	r0, [r7, #12]
 800c1e8:	60b9      	str	r1, [r7, #8]
 800c1ea:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head))
 800c1ec:	6878      	ldr	r0, [r7, #4]
 800c1ee:	f7ff fa34 	bl	800b65a <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	4619      	mov	r1, r3
 800c1f6:	68f8      	ldr	r0, [r7, #12]
 800c1f8:	f000 f9d0 	bl	800c59c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEEC1IS0_I8SPICommsEEEOT_>
 800c1fc:	68fc      	ldr	r4, [r7, #12]
 800c1fe:	68b8      	ldr	r0, [r7, #8]
 800c200:	f7ff ffe3 	bl	800c1ca <_ZSt7forwardIRP14CommsInterfaceEOT_RNSt16remove_referenceIS3_E4typeE>
 800c204:	4603      	mov	r3, r0
 800c206:	4619      	mov	r1, r3
 800c208:	4620      	mov	r0, r4
 800c20a:	f000 f9d9 	bl	800c5c0 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EEC1IRS1_EEOT_>
	{ }
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	4618      	mov	r0, r3
 800c212:	3714      	adds	r7, #20
 800c214:	46bd      	mov	sp, r7
 800c216:	bd90      	pop	{r4, r7, pc}

0800c218 <_ZSt12__get_helperILj0EP14CommsInterfaceJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800c218:	b580      	push	{r7, lr}
 800c21a:	b082      	sub	sp, #8
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800c220:	6878      	ldr	r0, [r7, #4]
 800c222:	f000 f9de 	bl	800c5e2 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEE7_M_headERS4_>
 800c226:	4603      	mov	r3, r0
 800c228:	4618      	mov	r0, r3
 800c22a:	3708      	adds	r7, #8
 800c22c:	46bd      	mov	sp, r7
 800c22e:	bd80      	pop	{r7, pc}

0800c230 <_ZSt12__get_helperILj1ESt14default_deleteI9pruThreadEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800c230:	b580      	push	{r7, lr}
 800c232:	b082      	sub	sp, #8
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f000 f9df 	bl	800c5fc <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9pruThreadEEE7_M_headERS3_>
 800c23e:	4603      	mov	r3, r0
 800c240:	4618      	mov	r0, r3
 800c242:	3708      	adds	r7, #8
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}

0800c248 <_ZSt3getILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800c248:	b580      	push	{r7, lr}
 800c24a:	b082      	sub	sp, #8
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	4618      	mov	r0, r3
 800c254:	f000 f9de 	bl	800c614 <_ZSt12__get_helperILj0EP17JsonConfigHandlerJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800c258:	4603      	mov	r3, r0
 800c25a:	4618      	mov	r0, r3
 800c25c:	3708      	adds	r7, #8
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}

0800c262 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7getDataEv>:
  VariantData* getData() const {
 800c262:	b580      	push	{r7, lr}
 800c264:	b082      	sub	sp, #8
 800c266:	af00      	add	r7, sp, #0
 800c268:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	f000 f9de 	bl	800c62c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7derivedEv>
 800c270:	4603      	mov	r3, r0
 800c272:	4618      	mov	r0, r3
 800c274:	f000 f9e5 	bl	800c642 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>
 800c278:	4603      	mov	r3, r0
  }
 800c27a:	4618      	mov	r0, r3
 800c27c:	3708      	adds	r7, #8
 800c27e:	46bd      	mov	sp, r7
 800c280:	bd80      	pop	{r7, pc}

0800c282 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 800c282:	b580      	push	{r7, lr}
 800c284:	b082      	sub	sp, #8
 800c286:	af00      	add	r7, sp, #0
 800c288:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f000 f9ce 	bl	800c62c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7derivedEv>
 800c290:	4603      	mov	r3, r0
 800c292:	4618      	mov	r0, r3
 800c294:	f000 f9e1 	bl	800c65a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>
 800c298:	4603      	mov	r3, r0
  }
 800c29a:	4618      	mov	r0, r3
 800c29c:	3708      	adds	r7, #8
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	bd80      	pop	{r7, pc}

0800c2a2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE5doSetINS0_9ConverterImvEEmEEbRKT0_NS1_17integral_constantIbLb1EEE>:
  return resources && !resources->overflowed();
}

template <typename TDerived>
template <typename TConverter, typename T>
inline bool VariantRefBase<TDerived>::doSet(const T& value, true_type) const {
 800c2a2:	b590      	push	{r4, r7, lr}
 800c2a4:	b087      	sub	sp, #28
 800c2a6:	af00      	add	r7, sp, #0
 800c2a8:	60f8      	str	r0, [r7, #12]
 800c2aa:	60b9      	str	r1, [r7, #8]
 800c2ac:	713a      	strb	r2, [r7, #4]
  return TConverter::toJson(value, getOrCreateVariant());
 800c2ae:	68bb      	ldr	r3, [r7, #8]
 800c2b0:	681c      	ldr	r4, [r3, #0]
 800c2b2:	f107 0310 	add.w	r3, r7, #16
 800c2b6:	68f9      	ldr	r1, [r7, #12]
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	f000 f9da 	bl	800c672 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getOrCreateVariantEv>
 800c2be:	f107 0310 	add.w	r3, r7, #16
 800c2c2:	e893 0006 	ldmia.w	r3, {r1, r2}
 800c2c6:	4620      	mov	r0, r4
 800c2c8:	f000 f9e9 	bl	800c69e <_ZN11ArduinoJson8V730HB229ConverterImvE6toJsonEmNS0_11JsonVariantE>
 800c2cc:	4603      	mov	r3, r0
}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	371c      	adds	r7, #28
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	bd90      	pop	{r4, r7, pc}

0800c2d6 <_ZN11ArduinoJson8V730HB226detailL14stringGetCharsINS1_9RamStringEEEvT_Pcj>:
stringEquals(TAdaptedString1 s1, TAdaptedString2 s2) {
  return stringEquals(s2, s1);
}

template <typename TAdaptedString>
static void stringGetChars(TAdaptedString s, char* p, size_t n) {
 800c2d6:	b590      	push	{r4, r7, lr}
 800c2d8:	b087      	sub	sp, #28
 800c2da:	af00      	add	r7, sp, #0
 800c2dc:	1d3c      	adds	r4, r7, #4
 800c2de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c2e2:	603b      	str	r3, [r7, #0]
  ARDUINOJSON_ASSERT(s.size() <= n);
  for (size_t i = 0; i < n; i++) {
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	617b      	str	r3, [r7, #20]
 800c2e8:	e00c      	b.n	800c304 <_ZN11ArduinoJson8V730HB226detailL14stringGetCharsINS1_9RamStringEEEvT_Pcj+0x2e>
    p[i] = s[i];
 800c2ea:	683a      	ldr	r2, [r7, #0]
 800c2ec:	697b      	ldr	r3, [r7, #20]
 800c2ee:	18d4      	adds	r4, r2, r3
 800c2f0:	1d3b      	adds	r3, r7, #4
 800c2f2:	6979      	ldr	r1, [r7, #20]
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	f7f4 fd07 	bl	8000d08 <_ZNK11ArduinoJson8V730HB226detail9RamStringixEj>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	7023      	strb	r3, [r4, #0]
  for (size_t i = 0; i < n; i++) {
 800c2fe:	697b      	ldr	r3, [r7, #20]
 800c300:	3301      	adds	r3, #1
 800c302:	617b      	str	r3, [r7, #20]
 800c304:	697a      	ldr	r2, [r7, #20]
 800c306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c308:	429a      	cmp	r2, r3
 800c30a:	d3ee      	bcc.n	800c2ea <_ZN11ArduinoJson8V730HB226detailL14stringGetCharsINS1_9RamStringEEEvT_Pcj+0x14>
  }
}
 800c30c:	bf00      	nop
 800c30e:	bf00      	nop
 800c310:	371c      	adds	r7, #28
 800c312:	46bd      	mov	sp, r7
 800c314:	bd90      	pop	{r4, r7, pc}

0800c316 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800c316:	b580      	push	{r7, lr}
 800c318:	b082      	sub	sp, #8
 800c31a:	af00      	add	r7, sp, #0
 800c31c:	6078      	str	r0, [r7, #4]
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f000 fa02 	bl	800c728 <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EE7_M_headERS3_>
 800c324:	4603      	mov	r3, r0
 800c326:	4618      	mov	r0, r3
 800c328:	3708      	adds	r7, #8
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}

0800c32e <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800c32e:	b580      	push	{r7, lr}
 800c330:	b082      	sub	sp, #8
 800c332:	af00      	add	r7, sp, #0
 800c334:	6078      	str	r0, [r7, #4]
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	4618      	mov	r0, r3
 800c33a:	f000 fa00 	bl	800c73e <_ZNSt10_Head_baseILj0EP9pruThreadLb0EE7_M_headERKS2_>
 800c33e:	4603      	mov	r3, r0
 800c340:	4618      	mov	r0, r3
 800c342:	3708      	adds	r7, #8
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}

0800c348 <_ZNSt10_Head_baseILj1ESt14default_deleteI17JsonConfigHandlerELb1EEC1Ev>:
      constexpr _Head_base()
 800c348:	b480      	push	{r7}
 800c34a:	b083      	sub	sp, #12
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	4618      	mov	r0, r3
 800c354:	370c      	adds	r7, #12
 800c356:	46bd      	mov	sp, r7
 800c358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35c:	4770      	bx	lr

0800c35e <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800c35e:	b580      	push	{r7, lr}
 800c360:	b082      	sub	sp, #8
 800c362:	af00      	add	r7, sp, #0
 800c364:	6078      	str	r0, [r7, #4]
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	4618      	mov	r0, r3
 800c36a:	f000 f9f3 	bl	800c754 <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EE7_M_headERS2_>
 800c36e:	4603      	mov	r3, r0
 800c370:	4618      	mov	r0, r3
 800c372:	3708      	adds	r7, #8
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}

0800c378 <_ZNSt10_Head_baseILj1ESt14default_deleteI9pruThreadELb1EEC1Ev>:
      constexpr _Head_base()
 800c378:	b480      	push	{r7}
 800c37a:	b083      	sub	sp, #12
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	4618      	mov	r0, r3
 800c384:	370c      	adds	r7, #12
 800c386:	46bd      	mov	sp, r7
 800c388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38c:	4770      	bx	lr

0800c38e <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800c38e:	b580      	push	{r7, lr}
 800c390:	b082      	sub	sp, #8
 800c392:	af00      	add	r7, sp, #0
 800c394:	6078      	str	r0, [r7, #4]
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	4618      	mov	r0, r3
 800c39a:	f000 f9e6 	bl	800c76a <_ZNSt10_Head_baseILj0EP9pruThreadLb0EE7_M_headERS2_>
 800c39e:	4603      	mov	r3, r0
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	3708      	adds	r7, #8
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	bd80      	pop	{r7, pc}

0800c3a8 <_ZNSaISt10shared_ptrI6ModuleEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b082      	sub	sp, #8
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
 800c3b0:	6878      	ldr	r0, [r7, #4]
 800c3b2:	f000 f9e5 	bl	800c780 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEED1Ev>
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	3708      	adds	r7, #8
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bd80      	pop	{r7, pc}

0800c3c0 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE13_M_deallocateEPS2_j>:
      _M_deallocate(pointer __p, size_t __n)
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b084      	sub	sp, #16
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	60f8      	str	r0, [r7, #12]
 800c3c8:	60b9      	str	r1, [r7, #8]
 800c3ca:	607a      	str	r2, [r7, #4]
	if (__p)
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d005      	beq.n	800c3de <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE13_M_deallocateEPS2_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	687a      	ldr	r2, [r7, #4]
 800c3d6:	68b9      	ldr	r1, [r7, #8]
 800c3d8:	4618      	mov	r0, r3
 800c3da:	f000 f9dc 	bl	800c796 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE10deallocateERS3_PS2_j>
      }
 800c3de:	bf00      	nop
 800c3e0:	3710      	adds	r7, #16
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}

0800c3e6 <_ZSt8_DestroyIPSt10shared_ptrI6ModuleEEvT_S4_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800c3e6:	b580      	push	{r7, lr}
 800c3e8:	b082      	sub	sp, #8
 800c3ea:	af00      	add	r7, sp, #0
 800c3ec:	6078      	str	r0, [r7, #4]
 800c3ee:	6039      	str	r1, [r7, #0]
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 800c3f0:	6839      	ldr	r1, [r7, #0]
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	f000 f9de 	bl	800c7b4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrI6ModuleEEEvT_S6_>
    }
 800c3f8:	bf00      	nop
 800c3fa:	3708      	adds	r7, #8
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bd80      	pop	{r7, pc}

0800c400 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17JsonConfigHandlerEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800c400:	b580      	push	{r7, lr}
 800c402:	b082      	sub	sp, #8
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
 800c408:	6878      	ldr	r0, [r7, #4]
 800c40a:	f000 f9ec 	bl	800c7e6 <_ZNSt10_Head_baseILj1ESt14default_deleteI17JsonConfigHandlerELb1EE7_M_headERS3_>
 800c40e:	4603      	mov	r3, r0
 800c410:	4618      	mov	r0, r3
 800c412:	3708      	adds	r7, #8
 800c414:	46bd      	mov	sp, r7
 800c416:	bd80      	pop	{r7, pc}

0800c418 <_ZNSt11_Tuple_implILj0EJP8SPICommsSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800c418:	b580      	push	{r7, lr}
 800c41a:	b082      	sub	sp, #8
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800c420:	6878      	ldr	r0, [r7, #4]
 800c422:	f000 f9eb 	bl	800c7fc <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8SPICommsEEEC1Ev>
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	4618      	mov	r0, r3
 800c42a:	f000 f9f3 	bl	800c814 <_ZNSt10_Head_baseILj0EP8SPICommsLb0EEC1Ev>
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	4618      	mov	r0, r3
 800c432:	3708      	adds	r7, #8
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}

0800c438 <_ZNSt11_Tuple_implILj0EJP8SPICommsSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800c438:	b580      	push	{r7, lr}
 800c43a:	b082      	sub	sp, #8
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	4618      	mov	r0, r3
 800c444:	f000 f9f4 	bl	800c830 <_ZNSt10_Head_baseILj0EP8SPICommsLb0EE7_M_headERS2_>
 800c448:	4603      	mov	r3, r0
 800c44a:	4618      	mov	r0, r3
 800c44c:	3708      	adds	r7, #8
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}

0800c452 <_ZSt12__get_helperILj1ESt14default_deleteI8SPICommsEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800c452:	b580      	push	{r7, lr}
 800c454:	b082      	sub	sp, #8
 800c456:	af00      	add	r7, sp, #0
 800c458:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f000 f9f3 	bl	800c846 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8SPICommsEEE7_M_headERS3_>
 800c460:	4603      	mov	r3, r0
 800c462:	4618      	mov	r0, r3
 800c464:	3708      	adds	r7, #8
 800c466:	46bd      	mov	sp, r7
 800c468:	bd80      	pop	{r7, pc}

0800c46a <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800c46a:	b580      	push	{r7, lr}
 800c46c:	b082      	sub	sp, #8
 800c46e:	af00      	add	r7, sp, #0
 800c470:	6078      	str	r0, [r7, #4]
 800c472:	6039      	str	r1, [r7, #0]
 800c474:	6878      	ldr	r0, [r7, #4]
 800c476:	f000 f9f2 	bl	800c85e <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	4618      	mov	r0, r3
 800c47e:	3708      	adds	r7, #8
 800c480:	46bd      	mov	sp, r7
 800c482:	bd80      	pop	{r7, pc}

0800c484 <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800c484:	b580      	push	{r7, lr}
 800c486:	b082      	sub	sp, #8
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
 800c48c:	6878      	ldr	r0, [r7, #4]
 800c48e:	f000 f9f1 	bl	800c874 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	4618      	mov	r0, r3
 800c496:	3708      	adds	r7, #8
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}

0800c49c <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>:
    };

  /// Allocate space for a single object using __a
  template<typename _Alloc>
    __allocated_ptr<_Alloc>
    __allocate_guarded(_Alloc& __a)
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b082      	sub	sp, #8
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
 800c4a4:	6039      	str	r1, [r7, #0]
    {
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 800c4a6:	2101      	movs	r1, #1
 800c4a8:	6838      	ldr	r0, [r7, #0]
 800c4aa:	f000 f9ee 	bl	800c88a <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	461a      	mov	r2, r3
 800c4b2:	6839      	ldr	r1, [r7, #0]
 800c4b4:	6878      	ldr	r0, [r7, #4]
 800c4b6:	f000 f9f7 	bl	800c8a8 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
    }
 800c4ba:	6878      	ldr	r0, [r7, #4]
 800c4bc:	3708      	adds	r7, #8
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bd80      	pop	{r7, pc}

0800c4c2 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 800c4c2:	b580      	push	{r7, lr}
 800c4c4:	b082      	sub	sp, #8
 800c4c6:	af00      	add	r7, sp, #0
 800c4c8:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	685b      	ldr	r3, [r3, #4]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d007      	beq.n	800c4e2 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	6818      	ldr	r0, [r3, #0]
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	685b      	ldr	r3, [r3, #4]
 800c4da:	2201      	movs	r2, #1
 800c4dc:	4619      	mov	r1, r3
 800c4de:	f000 f9f7 	bl	800c8d0 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>
      }
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	3708      	adds	r7, #8
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bd80      	pop	{r7, pc}

0800c4ec <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>:
      value_type* get() { return std::__to_address(_M_ptr); }
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b082      	sub	sp, #8
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	685b      	ldr	r3, [r3, #4]
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	f000 f9f8 	bl	800c8ee <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>
 800c4fe:	4603      	mov	r3, r0
 800c500:	4618      	mov	r0, r3
 800c502:	3708      	adds	r7, #8
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}

0800c508 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJEEES1_DpOT_>:
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 800c508:	b590      	push	{r4, r7, lr}
 800c50a:	b083      	sub	sp, #12
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
 800c510:	7039      	strb	r1, [r7, #0]
	: _M_impl(__a)
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	4618      	mov	r0, r3
 800c516:	f000 f9f5 	bl	800c904 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800c51a:	4a0b      	ldr	r2, [pc, #44]	@ (800c548 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJEEES1_DpOT_+0x40>)
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	601a      	str	r2, [r3, #0]
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	330c      	adds	r3, #12
 800c524:	4621      	mov	r1, r4
 800c526:	4618      	mov	r0, r3
 800c528:	f000 fa02 	bl	800c930 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	f000 f81c 	bl	800c56a <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800c532:	4602      	mov	r2, r0
 800c534:	463b      	mov	r3, r7
 800c536:	4611      	mov	r1, r2
 800c538:	4618      	mov	r0, r3
 800c53a:	f000 fa08 	bl	800c94e <_ZNSt16allocator_traitsISaIvEE9constructI12CommsHandlerJEEEvRS0_PT_DpOT0_>
	}
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	4618      	mov	r0, r3
 800c542:	370c      	adds	r7, #12
 800c544:	46bd      	mov	sp, r7
 800c546:	bd90      	pop	{r4, r7, pc}
 800c548:	08026718 	.word	0x08026718

0800c54c <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 800c54c:	b480      	push	{r7}
 800c54e:	b083      	sub	sp, #12
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
 800c554:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2200      	movs	r2, #0
 800c55a:	605a      	str	r2, [r3, #4]
	return *this;
 800c55c:	687b      	ldr	r3, [r7, #4]
      }
 800c55e:	4618      	mov	r0, r3
 800c560:	370c      	adds	r7, #12
 800c562:	46bd      	mov	sp, r7
 800c564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c568:	4770      	bx	lr

0800c56a <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>:
      _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }
 800c56a:	b580      	push	{r7, lr}
 800c56c:	b082      	sub	sp, #8
 800c56e:	af00      	add	r7, sp, #0
 800c570:	6078      	str	r0, [r7, #4]
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	330c      	adds	r3, #12
 800c576:	4618      	mov	r0, r3
 800c578:	f000 f9f5 	bl	800c966 <_ZN9__gnu_cxx16__aligned_bufferI12CommsHandlerE6_M_ptrEv>
 800c57c:	4603      	mov	r3, r0
 800c57e:	4618      	mov	r0, r3
 800c580:	3708      	adds	r7, #8
 800c582:	46bd      	mov	sp, r7
 800c584:	bd80      	pop	{r7, pc}

0800c586 <_ZSt4moveIRP12CommsHandlerEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800c586:	b480      	push	{r7}
 800c588:	b083      	sub	sp, #12
 800c58a:	af00      	add	r7, sp, #0
 800c58c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	4618      	mov	r0, r3
 800c592:	370c      	adds	r7, #12
 800c594:	46bd      	mov	sp, r7
 800c596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59a:	4770      	bx	lr

0800c59c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEEC1IS0_I8SPICommsEEEOT_>:
	_Tuple_impl(_UHead&& __head)
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b082      	sub	sp, #8
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
 800c5a4:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 800c5a6:	6838      	ldr	r0, [r7, #0]
 800c5a8:	f7ff f857 	bl	800b65a <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	4619      	mov	r1, r3
 800c5b0:	6878      	ldr	r0, [r7, #4]
 800c5b2:	f000 f9e4 	bl	800c97e <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EEC1IS0_I8SPICommsEEEOT_>
	{ }
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	3708      	adds	r7, #8
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bd80      	pop	{r7, pc}

0800c5c0 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b082      	sub	sp, #8
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
 800c5c8:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800c5ca:	6838      	ldr	r0, [r7, #0]
 800c5cc:	f7ff fdfd 	bl	800c1ca <_ZSt7forwardIRP14CommsInterfaceEOT_RNSt16remove_referenceIS3_E4typeE>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	681a      	ldr	r2, [r3, #0]
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	601a      	str	r2, [r3, #0]
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	4618      	mov	r0, r3
 800c5dc:	3708      	adds	r7, #8
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd80      	pop	{r7, pc}

0800c5e2 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800c5e2:	b580      	push	{r7, lr}
 800c5e4:	b082      	sub	sp, #8
 800c5e6:	af00      	add	r7, sp, #0
 800c5e8:	6078      	str	r0, [r7, #4]
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f000 f9d9 	bl	800c9a4 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EE7_M_headERS2_>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	3708      	adds	r7, #8
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	bd80      	pop	{r7, pc}

0800c5fc <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9pruThreadEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b082      	sub	sp, #8
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
 800c604:	6878      	ldr	r0, [r7, #4]
 800c606:	f000 f9d8 	bl	800c9ba <_ZNSt10_Head_baseILj1ESt14default_deleteI9pruThreadELb1EE7_M_headERS3_>
 800c60a:	4603      	mov	r3, r0
 800c60c:	4618      	mov	r0, r3
 800c60e:	3708      	adds	r7, #8
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}

0800c614 <_ZSt12__get_helperILj0EP17JsonConfigHandlerJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800c614:	b580      	push	{r7, lr}
 800c616:	b082      	sub	sp, #8
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800c61c:	6878      	ldr	r0, [r7, #4]
 800c61e:	f000 f9d7 	bl	800c9d0 <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEE7_M_headERKS4_>
 800c622:	4603      	mov	r3, r0
 800c624:	4618      	mov	r0, r3
 800c626:	3708      	adds	r7, #8
 800c628:	46bd      	mov	sp, r7
 800c62a:	bd80      	pop	{r7, pc}

0800c62c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7derivedEv>:
  const TDerived& derived() const {
 800c62c:	b480      	push	{r7}
 800c62e:	b083      	sub	sp, #12
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 800c634:	687b      	ldr	r3, [r7, #4]
  }
 800c636:	4618      	mov	r0, r3
 800c638:	370c      	adds	r7, #12
 800c63a:	46bd      	mov	sp, r7
 800c63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c640:	4770      	bx	lr

0800c642 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 800c642:	b580      	push	{r7, lr}
 800c644:	b082      	sub	sp, #8
 800c646:	af00      	add	r7, sp, #0
 800c648:	6078      	str	r0, [r7, #4]
    return client.getData();
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	f000 f9cd 	bl	800c9ea <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE7getDataEv>
 800c650:	4603      	mov	r3, r0
  }
 800c652:	4618      	mov	r0, r3
 800c654:	3708      	adds	r7, #8
 800c656:	46bd      	mov	sp, r7
 800c658:	bd80      	pop	{r7, pc}

0800c65a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 800c65a:	b580      	push	{r7, lr}
 800c65c:	b082      	sub	sp, #8
 800c65e:	af00      	add	r7, sp, #0
 800c660:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 800c662:	6878      	ldr	r0, [r7, #4]
 800c664:	f000 f9dd 	bl	800ca22 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE18getResourceManagerEv>
 800c668:	4603      	mov	r3, r0
  }
 800c66a:	4618      	mov	r0, r3
 800c66c:	3708      	adds	r7, #8
 800c66e:	46bd      	mov	sp, r7
 800c670:	bd80      	pop	{r7, pc}

0800c672 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getOrCreateVariantEv>:
inline JsonVariant VariantRefBase<TDerived>::getOrCreateVariant() const {
 800c672:	b590      	push	{r4, r7, lr}
 800c674:	b083      	sub	sp, #12
 800c676:	af00      	add	r7, sp, #0
 800c678:	6078      	str	r0, [r7, #4]
 800c67a:	6039      	str	r1, [r7, #0]
  return JsonVariant(getOrCreateData(), getResourceManager());
 800c67c:	6838      	ldr	r0, [r7, #0]
 800c67e:	f000 f9de 	bl	800ca3e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE15getOrCreateDataEv>
 800c682:	4604      	mov	r4, r0
 800c684:	6838      	ldr	r0, [r7, #0]
 800c686:	f7ff fdfc 	bl	800c282 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>
 800c68a:	4603      	mov	r3, r0
 800c68c:	461a      	mov	r2, r3
 800c68e:	4621      	mov	r1, r4
 800c690:	6878      	ldr	r0, [r7, #4]
 800c692:	f7f8 f855 	bl	8004740 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
}
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	370c      	adds	r7, #12
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd90      	pop	{r4, r7, pc}

0800c69e <_ZN11ArduinoJson8V730HB229ConverterImvE6toJsonEmNS0_11JsonVariantE>:
  static bool toJson(T src, JsonVariant dst) {
 800c69e:	b580      	push	{r7, lr}
 800c6a0:	b086      	sub	sp, #24
 800c6a2:	af00      	add	r7, sp, #0
 800c6a4:	60f8      	str	r0, [r7, #12]
 800c6a6:	1d3b      	adds	r3, r7, #4
 800c6a8:	e883 0006 	stmia.w	r3, {r1, r2}
    auto data = getData(dst);
 800c6ac:	1d3b      	adds	r3, r7, #4
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f7f9 fd8e 	bl	80061d0 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 800c6b4:	6178      	str	r0, [r7, #20]
    if (!data)
 800c6b6:	697b      	ldr	r3, [r7, #20]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d101      	bne.n	800c6c0 <_ZN11ArduinoJson8V730HB229ConverterImvE6toJsonEmNS0_11JsonVariantE+0x22>
      return false;
 800c6bc:	2300      	movs	r3, #0
 800c6be:	e00f      	b.n	800c6e0 <_ZN11ArduinoJson8V730HB229ConverterImvE6toJsonEmNS0_11JsonVariantE+0x42>
    auto resources = getResourceManager(dst);
 800c6c0:	1d3b      	adds	r3, r7, #4
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	f7f9 ff29 	bl	800651a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 800c6c8:	6138      	str	r0, [r7, #16]
    data->clear(resources);
 800c6ca:	6939      	ldr	r1, [r7, #16]
 800c6cc:	6978      	ldr	r0, [r7, #20]
 800c6ce:	f7f8 fd6b 	bl	80051a8 <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
    return data->setInteger(src, resources);
 800c6d2:	693a      	ldr	r2, [r7, #16]
 800c6d4:	68f9      	ldr	r1, [r7, #12]
 800c6d6:	6978      	ldr	r0, [r7, #20]
 800c6d8:	f000 f9c1 	bl	800ca5e <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	bf00      	nop
  }
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	3718      	adds	r7, #24
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	bd80      	pop	{r7, pc}

0800c6e8 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7getDataEv>:
  VariantData* getData() const {
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b082      	sub	sp, #8
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	f7ff f8fe 	bl	800b8f2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f000 f9f3 	bl	800cae4 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_7getDataEERT_>
 800c6fe:	4603      	mov	r3, r0
  }
 800c700:	4618      	mov	r0, r3
 800c702:	3708      	adds	r7, #8
 800c704:	46bd      	mov	sp, r7
 800c706:	bd80      	pop	{r7, pc}

0800c708 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 800c708:	b580      	push	{r7, lr}
 800c70a:	b082      	sub	sp, #8
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 800c710:	6878      	ldr	r0, [r7, #4]
 800c712:	f7ff f8ee 	bl	800b8f2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 800c716:	4603      	mov	r3, r0
 800c718:	4618      	mov	r0, r3
 800c71a:	f000 fa02 	bl	800cb22 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>
 800c71e:	4603      	mov	r3, r0
  }
 800c720:	4618      	mov	r0, r3
 800c722:	3708      	adds	r7, #8
 800c724:	46bd      	mov	sp, r7
 800c726:	bd80      	pop	{r7, pc}

0800c728 <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800c728:	b480      	push	{r7}
 800c72a:	b083      	sub	sp, #12
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	4618      	mov	r0, r3
 800c734:	370c      	adds	r7, #12
 800c736:	46bd      	mov	sp, r7
 800c738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73c:	4770      	bx	lr

0800c73e <_ZNSt10_Head_baseILj0EP9pruThreadLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800c73e:	b480      	push	{r7}
 800c740:	b083      	sub	sp, #12
 800c742:	af00      	add	r7, sp, #0
 800c744:	6078      	str	r0, [r7, #4]
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	4618      	mov	r0, r3
 800c74a:	370c      	adds	r7, #12
 800c74c:	46bd      	mov	sp, r7
 800c74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c752:	4770      	bx	lr

0800c754 <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800c754:	b480      	push	{r7}
 800c756:	b083      	sub	sp, #12
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	4618      	mov	r0, r3
 800c760:	370c      	adds	r7, #12
 800c762:	46bd      	mov	sp, r7
 800c764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c768:	4770      	bx	lr

0800c76a <_ZNSt10_Head_baseILj0EP9pruThreadLb0EE7_M_headERS2_>:
 800c76a:	b480      	push	{r7}
 800c76c:	b083      	sub	sp, #12
 800c76e:	af00      	add	r7, sp, #0
 800c770:	6078      	str	r0, [r7, #4]
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	4618      	mov	r0, r3
 800c776:	370c      	adds	r7, #12
 800c778:	46bd      	mov	sp, r7
 800c77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77e:	4770      	bx	lr

0800c780 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800c780:	b480      	push	{r7}
 800c782:	b083      	sub	sp, #12
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	4618      	mov	r0, r3
 800c78c:	370c      	adds	r7, #12
 800c78e:	46bd      	mov	sp, r7
 800c790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c794:	4770      	bx	lr

0800c796 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800c796:	b580      	push	{r7, lr}
 800c798:	b084      	sub	sp, #16
 800c79a:	af00      	add	r7, sp, #0
 800c79c:	60f8      	str	r0, [r7, #12]
 800c79e:	60b9      	str	r1, [r7, #8]
 800c7a0:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800c7a2:	687a      	ldr	r2, [r7, #4]
 800c7a4:	68b9      	ldr	r1, [r7, #8]
 800c7a6:	68f8      	ldr	r0, [r7, #12]
 800c7a8:	f000 f9c7 	bl	800cb3a <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE10deallocateEPS2_j>
 800c7ac:	bf00      	nop
 800c7ae:	3710      	adds	r7, #16
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	bd80      	pop	{r7, pc}

0800c7b4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrI6ModuleEEEvT_S6_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b082      	sub	sp, #8
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
 800c7bc:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800c7be:	e009      	b.n	800c7d4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrI6ModuleEEEvT_S6_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 800c7c0:	6878      	ldr	r0, [r7, #4]
 800c7c2:	f000 f9c9 	bl	800cb58 <_ZSt11__addressofISt10shared_ptrI6ModuleEEPT_RS3_>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	f000 f9d0 	bl	800cb6e <_ZSt8_DestroyISt10shared_ptrI6ModuleEEvPT_>
	  for (; __first != __last; ++__first)
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	3308      	adds	r3, #8
 800c7d2:	607b      	str	r3, [r7, #4]
 800c7d4:	687a      	ldr	r2, [r7, #4]
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	429a      	cmp	r2, r3
 800c7da:	d1f1      	bne.n	800c7c0 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrI6ModuleEEEvT_S6_+0xc>
	}
 800c7dc:	bf00      	nop
 800c7de:	bf00      	nop
 800c7e0:	3708      	adds	r7, #8
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bd80      	pop	{r7, pc}

0800c7e6 <_ZNSt10_Head_baseILj1ESt14default_deleteI17JsonConfigHandlerELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800c7e6:	b480      	push	{r7}
 800c7e8:	b083      	sub	sp, #12
 800c7ea:	af00      	add	r7, sp, #0
 800c7ec:	6078      	str	r0, [r7, #4]
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	370c      	adds	r7, #12
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fa:	4770      	bx	lr

0800c7fc <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8SPICommsEEEC1Ev>:
      _Tuple_impl()
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b082      	sub	sp, #8
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800c804:	6878      	ldr	r0, [r7, #4]
 800c806:	f000 f9bd 	bl	800cb84 <_ZNSt10_Head_baseILj1ESt14default_deleteI8SPICommsELb1EEC1Ev>
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	4618      	mov	r0, r3
 800c80e:	3708      	adds	r7, #8
 800c810:	46bd      	mov	sp, r7
 800c812:	bd80      	pop	{r7, pc}

0800c814 <_ZNSt10_Head_baseILj0EP8SPICommsLb0EEC1Ev>:
      constexpr _Head_base()
 800c814:	b480      	push	{r7}
 800c816:	b083      	sub	sp, #12
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2200      	movs	r2, #0
 800c820:	601a      	str	r2, [r3, #0]
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	4618      	mov	r0, r3
 800c826:	370c      	adds	r7, #12
 800c828:	46bd      	mov	sp, r7
 800c82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82e:	4770      	bx	lr

0800c830 <_ZNSt10_Head_baseILj0EP8SPICommsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800c830:	b480      	push	{r7}
 800c832:	b083      	sub	sp, #12
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	4618      	mov	r0, r3
 800c83c:	370c      	adds	r7, #12
 800c83e:	46bd      	mov	sp, r7
 800c840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c844:	4770      	bx	lr

0800c846 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8SPICommsEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800c846:	b580      	push	{r7, lr}
 800c848:	b082      	sub	sp, #8
 800c84a:	af00      	add	r7, sp, #0
 800c84c:	6078      	str	r0, [r7, #4]
 800c84e:	6878      	ldr	r0, [r7, #4]
 800c850:	f000 f9a3 	bl	800cb9a <_ZNSt10_Head_baseILj1ESt14default_deleteI8SPICommsELb1EE7_M_headERS3_>
 800c854:	4603      	mov	r3, r0
 800c856:	4618      	mov	r0, r3
 800c858:	3708      	adds	r7, #8
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}

0800c85e <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800c85e:	b480      	push	{r7}
 800c860:	b083      	sub	sp, #12
 800c862:	af00      	add	r7, sp, #0
 800c864:	6078      	str	r0, [r7, #4]
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	4618      	mov	r0, r3
 800c86a:	370c      	adds	r7, #12
 800c86c:	46bd      	mov	sp, r7
 800c86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c872:	4770      	bx	lr

0800c874 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800c874:	b480      	push	{r7}
 800c876:	b083      	sub	sp, #12
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	4618      	mov	r0, r3
 800c880:	370c      	adds	r7, #12
 800c882:	46bd      	mov	sp, r7
 800c884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c888:	4770      	bx	lr

0800c88a <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 800c88a:	b580      	push	{r7, lr}
 800c88c:	b082      	sub	sp, #8
 800c88e:	af00      	add	r7, sp, #0
 800c890:	6078      	str	r0, [r7, #4]
 800c892:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800c894:	2200      	movs	r2, #0
 800c896:	6839      	ldr	r1, [r7, #0]
 800c898:	6878      	ldr	r0, [r7, #4]
 800c89a:	f000 f989 	bl	800cbb0 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 800c89e:	4603      	mov	r3, r0
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	3708      	adds	r7, #8
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}

0800c8a8 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b084      	sub	sp, #16
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	60f8      	str	r0, [r7, #12]
 800c8b0:	60b9      	str	r1, [r7, #8]
 800c8b2:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800c8b4:	68b8      	ldr	r0, [r7, #8]
 800c8b6:	f000 f9a9 	bl	800cc0c <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>
 800c8ba:	4602      	mov	r2, r0
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	601a      	str	r2, [r3, #0]
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	687a      	ldr	r2, [r7, #4]
 800c8c4:	605a      	str	r2, [r3, #4]
      { }
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	3710      	adds	r7, #16
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}

0800c8d0 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b084      	sub	sp, #16
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	60f8      	str	r0, [r7, #12]
 800c8d8:	60b9      	str	r1, [r7, #8]
 800c8da:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800c8dc:	687a      	ldr	r2, [r7, #4]
 800c8de:	68b9      	ldr	r1, [r7, #8]
 800c8e0:	68f8      	ldr	r0, [r7, #12]
 800c8e2:	f000 f99e 	bl	800cc22 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>
 800c8e6:	bf00      	nop
 800c8e8:	3710      	adds	r7, #16
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}

0800c8ee <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>:
  template<typename _Ptr, typename _Tp>
    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;

  template<typename _Tp>
    constexpr _Tp*
    __to_address(_Tp* __ptr) noexcept
 800c8ee:	b480      	push	{r7}
 800c8f0:	b083      	sub	sp, #12
 800c8f2:	af00      	add	r7, sp, #0
 800c8f4:	6078      	str	r0, [r7, #4]
    {
      static_assert(!std::is_function<_Tp>::value, "not a function pointer");
      return __ptr;
 800c8f6:	687b      	ldr	r3, [r7, #4]
    }
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	370c      	adds	r7, #12
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c902:	4770      	bx	lr

0800c904 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      _Sp_counted_base() noexcept
 800c904:	b480      	push	{r7}
 800c906:	b083      	sub	sp, #12
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
      : _M_use_count(1), _M_weak_count(1) { }
 800c90c:	4a07      	ldr	r2, [pc, #28]	@ (800c92c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev+0x28>)
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	601a      	str	r2, [r3, #0]
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	2201      	movs	r2, #1
 800c916:	605a      	str	r2, [r3, #4]
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2201      	movs	r2, #1
 800c91c:	609a      	str	r2, [r3, #8]
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	4618      	mov	r0, r3
 800c922:	370c      	adds	r7, #12
 800c924:	46bd      	mov	sp, r7
 800c926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92a:	4770      	bx	lr
 800c92c:	08026734 	.word	0x08026734

0800c930 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>:
	explicit _Impl(_Alloc __a) noexcept : _A_base(__a) { }
 800c930:	b580      	push	{r7, lr}
 800c932:	b082      	sub	sp, #8
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
 800c938:	7039      	strb	r1, [r7, #0]
 800c93a:	463b      	mov	r3, r7
 800c93c:	4619      	mov	r1, r3
 800c93e:	6878      	ldr	r0, [r7, #4]
 800c940:	f000 f980 	bl	800cc44 <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EEC1ERKS0_>
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	4618      	mov	r0, r3
 800c948:	3708      	adds	r7, #8
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bd80      	pop	{r7, pc}

0800c94e <_ZNSt16allocator_traitsISaIvEE9constructI12CommsHandlerJEEEvRS0_PT_DpOT0_>:
	construct(allocator_type&, _Up* __p, _Args&&... __args)
 800c94e:	b580      	push	{r7, lr}
 800c950:	b082      	sub	sp, #8
 800c952:	af00      	add	r7, sp, #0
 800c954:	6078      	str	r0, [r7, #4]
 800c956:	6039      	str	r1, [r7, #0]
	{ std::_Construct(__p, std::forward<_Args>(__args)...); }
 800c958:	6838      	ldr	r0, [r7, #0]
 800c95a:	f000 f97f 	bl	800cc5c <_ZSt10_ConstructI12CommsHandlerJEEvPT_DpOT0_>
 800c95e:	bf00      	nop
 800c960:	3708      	adds	r7, #8
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}

0800c966 <_ZN9__gnu_cxx16__aligned_bufferI12CommsHandlerE6_M_ptrEv>:
      {
        return static_cast<const void*>(&_M_storage);
      }

      _Tp*
      _M_ptr() noexcept
 800c966:	b580      	push	{r7, lr}
 800c968:	b082      	sub	sp, #8
 800c96a:	af00      	add	r7, sp, #0
 800c96c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f000 f985 	bl	800cc7e <_ZN9__gnu_cxx16__aligned_bufferI12CommsHandlerE7_M_addrEv>
 800c974:	4603      	mov	r3, r0
 800c976:	4618      	mov	r0, r3
 800c978:	3708      	adds	r7, #8
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}

0800c97e <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EEC1IS0_I8SPICommsEEEOT_>:
	constexpr _Head_base(_UHead&& __h)
 800c97e:	b590      	push	{r4, r7, lr}
 800c980:	b083      	sub	sp, #12
 800c982:	af00      	add	r7, sp, #0
 800c984:	6078      	str	r0, [r7, #4]
 800c986:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800c988:	687c      	ldr	r4, [r7, #4]
 800c98a:	6838      	ldr	r0, [r7, #0]
 800c98c:	f7fe fe65 	bl	800b65a <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800c990:	4603      	mov	r3, r0
 800c992:	4619      	mov	r1, r3
 800c994:	4620      	mov	r0, r4
 800c996:	f000 f97d 	bl	800cc94 <_ZNSt14default_deleteI14CommsInterfaceEC1I8SPICommsvEERKS_IT_E>
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	4618      	mov	r0, r3
 800c99e:	370c      	adds	r7, #12
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd90      	pop	{r4, r7, pc}

0800c9a4 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800c9a4:	b480      	push	{r7}
 800c9a6:	b083      	sub	sp, #12
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	370c      	adds	r7, #12
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b8:	4770      	bx	lr

0800c9ba <_ZNSt10_Head_baseILj1ESt14default_deleteI9pruThreadELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800c9ba:	b480      	push	{r7}
 800c9bc:	b083      	sub	sp, #12
 800c9be:	af00      	add	r7, sp, #0
 800c9c0:	6078      	str	r0, [r7, #4]
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	370c      	adds	r7, #12
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ce:	4770      	bx	lr

0800c9d0 <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b082      	sub	sp, #8
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f000 f966 	bl	800ccac <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EE7_M_headERKS2_>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	3708      	adds	r7, #8
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	bd80      	pop	{r7, pc}

0800c9ea <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE7getDataEv>:
  VariantData* getData() const {
 800c9ea:	b590      	push	{r4, r7, lr}
 800c9ec:	b085      	sub	sp, #20
 800c9ee:	af02      	add	r7, sp, #8
 800c9f0:	6078      	str	r0, [r7, #4]
        VariantAttorney::getData(upstream_), key_,
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	3304      	adds	r3, #4
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	f000 f874 	bl	800cae4 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_7getDataEERT_>
 800c9fc:	4604      	mov	r4, r0
        VariantAttorney::getResourceManager(upstream_));
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	3304      	adds	r3, #4
 800ca02:	4618      	mov	r0, r3
 800ca04:	f000 f88d 	bl	800cb22 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>
 800ca08:	4602      	mov	r2, r0
    return VariantData::getMember(
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	9200      	str	r2, [sp, #0]
 800ca0e:	3314      	adds	r3, #20
 800ca10:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ca12:	4620      	mov	r0, r4
 800ca14:	f7fb fe60 	bl	80086d8 <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE>
 800ca18:	4603      	mov	r3, r0
  }
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	370c      	adds	r7, #12
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd90      	pop	{r4, r7, pc}

0800ca22 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 800ca22:	b580      	push	{r7, lr}
 800ca24:	b082      	sub	sp, #8
 800ca26:	af00      	add	r7, sp, #0
 800ca28:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(upstream_);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	3304      	adds	r3, #4
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f000 f877 	bl	800cb22 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>
 800ca34:	4603      	mov	r3, r0
  }
 800ca36:	4618      	mov	r0, r3
 800ca38:	3708      	adds	r7, #8
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}

0800ca3e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE15getOrCreateDataEv>:
  VariantData* getOrCreateData() const {
 800ca3e:	b580      	push	{r7, lr}
 800ca40:	b082      	sub	sp, #8
 800ca42:	af00      	add	r7, sp, #0
 800ca44:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getOrCreateData(derived());
 800ca46:	6878      	ldr	r0, [r7, #4]
 800ca48:	f7ff fdf0 	bl	800c62c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7derivedEv>
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	4618      	mov	r0, r3
 800ca50:	f000 f937 	bl	800ccc2 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEPNS1_11VariantDataERT_>
 800ca54:	4603      	mov	r3, r0
  }
 800ca56:	4618      	mov	r0, r3
 800ca58:	3708      	adds	r7, #8
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}

0800ca5e <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>:
#endif
  return true;
}

template <typename T>
enable_if_t<is_unsigned<T>::value, bool> VariantData::setInteger(
 800ca5e:	b5b0      	push	{r4, r5, r7, lr}
 800ca60:	b086      	sub	sp, #24
 800ca62:	af00      	add	r7, sp, #0
 800ca64:	60f8      	str	r0, [r7, #12]
 800ca66:	60b9      	str	r1, [r7, #8]
 800ca68:	607a      	str	r2, [r7, #4]
    T value, ResourceManager* resources) {
  ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
  (void)resources;                                 // silence warning

  if (canConvertNumber<uint32_t>(value)) {
 800ca6a:	68b8      	ldr	r0, [r7, #8]
 800ca6c:	f7fb f8fd 	bl	8007c6a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 800ca70:	4603      	mov	r3, r0
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d006      	beq.n	800ca84 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x26>
    type_ = VariantType::Uint32;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	220a      	movs	r2, #10
 800ca7a:	711a      	strb	r2, [r3, #4]
    content_.asUint32 = static_cast<uint32_t>(value);
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	68ba      	ldr	r2, [r7, #8]
 800ca80:	601a      	str	r2, [r3, #0]
 800ca82:	e02a      	b.n	800cada <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7c>
  }
#if ARDUINOJSON_USE_LONG_LONG
  else {
    auto extension = resources->allocExtension();
 800ca84:	f107 0310 	add.w	r3, r7, #16
 800ca88:	6879      	ldr	r1, [r7, #4]
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	f7f8 f9a5 	bl	8004dda <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 800ca90:	f107 0310 	add.w	r3, r7, #16
 800ca94:	4618      	mov	r0, r3
 800ca96:	f7fc fac2 	bl	800901e <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	f083 0301 	eor.w	r3, r3, #1
 800caa0:	b2db      	uxtb	r3, r3
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d001      	beq.n	800caaa <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x4c>
      return false;
 800caa6:	2300      	movs	r3, #0
 800caa8:	e018      	b.n	800cadc <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7e>
    type_ = VariantType::Uint64;
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	221a      	movs	r2, #26
 800caae:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 800cab0:	f107 0310 	add.w	r3, r7, #16
 800cab4:	4618      	mov	r0, r3
 800cab6:	f7fc fac3 	bl	8009040 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 800caba:	4603      	mov	r3, r0
 800cabc:	461a      	mov	r2, r3
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	801a      	strh	r2, [r3, #0]
    extension->asUint64 = value;
 800cac2:	68bb      	ldr	r3, [r7, #8]
 800cac4:	2200      	movs	r2, #0
 800cac6:	461c      	mov	r4, r3
 800cac8:	4615      	mov	r5, r2
 800caca:	f107 0310 	add.w	r3, r7, #16
 800cace:	4618      	mov	r0, r3
 800cad0:	f7fc fac2 	bl	8009058 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>
 800cad4:	4603      	mov	r3, r0
 800cad6:	e9c3 4500 	strd	r4, r5, [r3]
  }
#endif
  return true;
 800cada:	2301      	movs	r3, #1
}
 800cadc:	4618      	mov	r0, r3
 800cade:	3718      	adds	r7, #24
 800cae0:	46bd      	mov	sp, r7
 800cae2:	bdb0      	pop	{r4, r5, r7, pc}

0800cae4 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 800cae4:	b5b0      	push	{r4, r5, r7, lr}
 800cae6:	b084      	sub	sp, #16
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	60fb      	str	r3, [r7, #12]
    return VariantAttorney::getResourceManager(upstream_);
  }

  FORCE_INLINE VariantData* getData() const {
    return VariantData::getElement(
        VariantAttorney::getData(upstream_), index_,
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	3304      	adds	r3, #4
 800caf4:	4618      	mov	r0, r3
 800caf6:	f000 f962 	bl	800cdbe <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_9JsonArrayEEEDTcldtfp_7getDataEERT_>
 800cafa:	4605      	mov	r5, r0
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	68dc      	ldr	r4, [r3, #12]
        VariantAttorney::getResourceManager(upstream_));
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	3304      	adds	r3, #4
 800cb04:	4618      	mov	r0, r3
 800cb06:	f000 f966 	bl	800cdd6 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_9JsonArrayEEEDTcldtfp_18getResourceManagerEERT_>
 800cb0a:	4603      	mov	r3, r0
    return VariantData::getElement(
 800cb0c:	461a      	mov	r2, r3
 800cb0e:	4621      	mov	r1, r4
 800cb10:	4628      	mov	r0, r5
 800cb12:	f7fc feca 	bl	80098aa <_ZN11ArduinoJson8V730HB226detail11VariantData10getElementEPKS2_jPKNS1_15ResourceManagerE>
 800cb16:	4603      	mov	r3, r0
        VariantAttorney::getResourceManager(upstream_));
 800cb18:	bf00      	nop
  }
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	3710      	adds	r7, #16
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	bdb0      	pop	{r4, r5, r7, pc}

0800cb22 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 800cb22:	b580      	push	{r7, lr}
 800cb24:	b082      	sub	sp, #8
 800cb26:	af00      	add	r7, sp, #0
 800cb28:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f000 f8d5 	bl	800ccda <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE18getResourceManagerEv>
 800cb30:	4603      	mov	r3, r0
  }
 800cb32:	4618      	mov	r0, r3
 800cb34:	3708      	adds	r7, #8
 800cb36:	46bd      	mov	sp, r7
 800cb38:	bd80      	pop	{r7, pc}

0800cb3a <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE10deallocateEPS2_j>:
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 800cb3a:	b580      	push	{r7, lr}
 800cb3c:	b084      	sub	sp, #16
 800cb3e:	af00      	add	r7, sp, #0
 800cb40:	60f8      	str	r0, [r7, #12]
 800cb42:	60b9      	str	r1, [r7, #8]
 800cb44:	607a      	str	r2, [r7, #4]
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	00db      	lsls	r3, r3, #3
 800cb4a:	4619      	mov	r1, r3
 800cb4c:	68b8      	ldr	r0, [r7, #8]
 800cb4e:	f017 f976 	bl	8023e3e <_ZdlPvj>
      }
 800cb52:	3710      	adds	r7, #16
 800cb54:	46bd      	mov	sp, r7
 800cb56:	bd80      	pop	{r7, pc}

0800cb58 <_ZSt11__addressofISt10shared_ptrI6ModuleEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800cb58:	b480      	push	{r7}
 800cb5a:	b083      	sub	sp, #12
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	4618      	mov	r0, r3
 800cb64:	370c      	adds	r7, #12
 800cb66:	46bd      	mov	sp, r7
 800cb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6c:	4770      	bx	lr

0800cb6e <_ZSt8_DestroyISt10shared_ptrI6ModuleEEvPT_>:
    _Destroy(_Tp* __pointer)
 800cb6e:	b580      	push	{r7, lr}
 800cb70:	b082      	sub	sp, #8
 800cb72:	af00      	add	r7, sp, #0
 800cb74:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	f7fd f991 	bl	8009e9e <_ZNSt10shared_ptrI6ModuleED1Ev>
    }
 800cb7c:	bf00      	nop
 800cb7e:	3708      	adds	r7, #8
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bd80      	pop	{r7, pc}

0800cb84 <_ZNSt10_Head_baseILj1ESt14default_deleteI8SPICommsELb1EEC1Ev>:
      constexpr _Head_base()
 800cb84:	b480      	push	{r7}
 800cb86:	b083      	sub	sp, #12
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	4618      	mov	r0, r3
 800cb90:	370c      	adds	r7, #12
 800cb92:	46bd      	mov	sp, r7
 800cb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb98:	4770      	bx	lr

0800cb9a <_ZNSt10_Head_baseILj1ESt14default_deleteI8SPICommsELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800cb9a:	b480      	push	{r7}
 800cb9c:	b083      	sub	sp, #12
 800cb9e:	af00      	add	r7, sp, #0
 800cba0:	6078      	str	r0, [r7, #4]
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	4618      	mov	r0, r3
 800cba6:	370c      	adds	r7, #12
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbae:	4770      	bx	lr

0800cbb0 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b084      	sub	sp, #16
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	60f8      	str	r0, [r7, #12]
 800cbb8:	60b9      	str	r1, [r7, #8]
 800cbba:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800cbbc:	68f8      	ldr	r0, [r7, #12]
 800cbbe:	f000 f8cd 	bl	800cd5c <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 800cbc2:	4602      	mov	r2, r0
 800cbc4:	68bb      	ldr	r3, [r7, #8]
 800cbc6:	4293      	cmp	r3, r2
 800cbc8:	bf8c      	ite	hi
 800cbca:	2301      	movhi	r3, #1
 800cbcc:	2300      	movls	r3, #0
 800cbce:	b2db      	uxtb	r3, r3
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	bf14      	ite	ne
 800cbd4:	2301      	movne	r3, #1
 800cbd6:	2300      	moveq	r3, #0
 800cbd8:	b2db      	uxtb	r3, r3
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d007      	beq.n	800cbee <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800cbde:	68bb      	ldr	r3, [r7, #8]
 800cbe0:	4a09      	ldr	r2, [pc, #36]	@ (800cc08 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x58>)
 800cbe2:	4293      	cmp	r3, r2
 800cbe4:	d901      	bls.n	800cbea <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800cbe6:	f017 f951 	bl	8023e8c <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800cbea:	f017 f94c 	bl	8023e86 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800cbee:	68bb      	ldr	r3, [r7, #8]
 800cbf0:	222c      	movs	r2, #44	@ 0x2c
 800cbf2:	fb02 f303 	mul.w	r3, r2, r3
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	f017 f932 	bl	8023e60 <_Znwj>
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	bf00      	nop
      }
 800cc00:	4618      	mov	r0, r3
 800cc02:	3710      	adds	r7, #16
 800cc04:	46bd      	mov	sp, r7
 800cc06:	bd80      	pop	{r7, pc}
 800cc08:	05d1745d 	.word	0x05d1745d

0800cc0c <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800cc0c:	b480      	push	{r7}
 800cc0e:	b083      	sub	sp, #12
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	4618      	mov	r0, r3
 800cc18:	370c      	adds	r7, #12
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc20:	4770      	bx	lr

0800cc22 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 800cc22:	b580      	push	{r7, lr}
 800cc24:	b084      	sub	sp, #16
 800cc26:	af00      	add	r7, sp, #0
 800cc28:	60f8      	str	r0, [r7, #12]
 800cc2a:	60b9      	str	r1, [r7, #8]
 800cc2c:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	222c      	movs	r2, #44	@ 0x2c
 800cc32:	fb02 f303 	mul.w	r3, r2, r3
 800cc36:	4619      	mov	r1, r3
 800cc38:	68b8      	ldr	r0, [r7, #8]
 800cc3a:	f017 f900 	bl	8023e3e <_ZdlPvj>
      }
 800cc3e:	3710      	adds	r7, #16
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}

0800cc44 <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EEC1ERKS0_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 800cc44:	b480      	push	{r7}
 800cc46:	b083      	sub	sp, #12
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
 800cc4c:	6039      	str	r1, [r7, #0]
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	4618      	mov	r0, r3
 800cc52:	370c      	adds	r7, #12
 800cc54:	46bd      	mov	sp, r7
 800cc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5a:	4770      	bx	lr

0800cc5c <_ZSt10_ConstructI12CommsHandlerJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b082      	sub	sp, #8
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	4619      	mov	r1, r3
 800cc68:	2020      	movs	r0, #32
 800cc6a:	f7fc fd49 	bl	8009700 <_ZnwjPv>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	4618      	mov	r0, r3
 800cc72:	f001 ffb1 	bl	800ebd8 <_ZN12CommsHandlerC1Ev>
    }
 800cc76:	bf00      	nop
 800cc78:	3708      	adds	r7, #8
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}

0800cc7e <_ZN9__gnu_cxx16__aligned_bufferI12CommsHandlerE7_M_addrEv>:
      _M_addr() noexcept
 800cc7e:	b480      	push	{r7}
 800cc80:	b083      	sub	sp, #12
 800cc82:	af00      	add	r7, sp, #0
 800cc84:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 800cc86:	687b      	ldr	r3, [r7, #4]
      }
 800cc88:	4618      	mov	r0, r3
 800cc8a:	370c      	adds	r7, #12
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc92:	4770      	bx	lr

0800cc94 <_ZNSt14default_deleteI14CommsInterfaceEC1I8SPICommsvEERKS_IT_E>:
        default_delete(const default_delete<_Up>&) noexcept { }
 800cc94:	b480      	push	{r7}
 800cc96:	b083      	sub	sp, #12
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
 800cc9c:	6039      	str	r1, [r7, #0]
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	4618      	mov	r0, r3
 800cca2:	370c      	adds	r7, #12
 800cca4:	46bd      	mov	sp, r7
 800cca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccaa:	4770      	bx	lr

0800ccac <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800ccac:	b480      	push	{r7}
 800ccae:	b083      	sub	sp, #12
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	370c      	adds	r7, #12
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc0:	4770      	bx	lr

0800ccc2 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEPNS1_11VariantDataERT_>:
  static VariantData* getOrCreateData(TClient& client) {
 800ccc2:	b580      	push	{r7, lr}
 800ccc4:	b082      	sub	sp, #8
 800ccc6:	af00      	add	r7, sp, #0
 800ccc8:	6078      	str	r0, [r7, #4]
    return client.getOrCreateData();
 800ccca:	6878      	ldr	r0, [r7, #4]
 800cccc:	f000 f854 	bl	800cd78 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE15getOrCreateDataEv>
 800ccd0:	4603      	mov	r3, r0
  }
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	3708      	adds	r7, #8
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	bd80      	pop	{r7, pc}

0800ccda <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 800ccda:	b580      	push	{r7, lr}
 800ccdc:	b082      	sub	sp, #8
 800ccde:	af00      	add	r7, sp, #0
 800cce0:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(upstream_);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	3304      	adds	r3, #4
 800cce6:	4618      	mov	r0, r3
 800cce8:	f000 f875 	bl	800cdd6 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_9JsonArrayEEEDTcldtfp_18getResourceManagerEERT_>
 800ccec:	4603      	mov	r3, r0
  }
 800ccee:	4618      	mov	r0, r3
 800ccf0:	3708      	adds	r7, #8
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd80      	pop	{r7, pc}

0800ccf6 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE>:
  VariantData* getOrAddMember(TAdaptedString key, ResourceManager* resources) {
 800ccf6:	b580      	push	{r7, lr}
 800ccf8:	b088      	sub	sp, #32
 800ccfa:	af02      	add	r7, sp, #8
 800ccfc:	60f8      	str	r0, [r7, #12]
 800ccfe:	4638      	mov	r0, r7
 800cd00:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (key.isNull())
 800cd04:	463b      	mov	r3, r7
 800cd06:	4618      	mov	r0, r3
 800cd08:	f7f7 f93f 	bl	8003f8a <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>
 800cd0c:	4603      	mov	r3, r0
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d001      	beq.n	800cd16 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x20>
      return nullptr;
 800cd12:	2300      	movs	r3, #0
 800cd14:	e01d      	b.n	800cd52 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x5c>
    auto obj = isNull() ? &toObject() : asObject();
 800cd16:	68f8      	ldr	r0, [r7, #12]
 800cd18:	f7fc fe02 	bl	8009920 <_ZNK11ArduinoJson8V730HB226detail11VariantData6isNullEv>
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d004      	beq.n	800cd2c <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x36>
 800cd22:	68f8      	ldr	r0, [r7, #12]
 800cd24:	f7f7 fbf8 	bl	8004518 <_ZN11ArduinoJson8V730HB226detail11VariantData8toObjectEv>
 800cd28:	4603      	mov	r3, r0
 800cd2a:	e003      	b.n	800cd34 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x3e>
 800cd2c:	68f8      	ldr	r0, [r7, #12]
 800cd2e:	f7f7 fae8 	bl	8004302 <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv>
 800cd32:	4603      	mov	r3, r0
 800cd34:	617b      	str	r3, [r7, #20]
    if (!obj)
 800cd36:	697b      	ldr	r3, [r7, #20]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d101      	bne.n	800cd40 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x4a>
      return nullptr;
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	e008      	b.n	800cd52 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x5c>
    return obj->getOrAddMember(key, resources);
 800cd40:	6978      	ldr	r0, [r7, #20]
 800cd42:	6a3b      	ldr	r3, [r7, #32]
 800cd44:	9300      	str	r3, [sp, #0]
 800cd46:	463b      	mov	r3, r7
 800cd48:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cd4a:	f000 f850 	bl	800cdee <_ZN11ArduinoJson8V730HB226detail10ObjectData14getOrAddMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>
 800cd4e:	4603      	mov	r3, r0
 800cd50:	bf00      	nop
  }
 800cd52:	4618      	mov	r0, r3
 800cd54:	3718      	adds	r7, #24
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bd80      	pop	{r7, pc}
	...

0800cd5c <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800cd5c:	b480      	push	{r7}
 800cd5e:	b083      	sub	sp, #12
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800cd64:	4b03      	ldr	r3, [pc, #12]	@ (800cd74 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 800cd66:	4618      	mov	r0, r3
 800cd68:	370c      	adds	r7, #12
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd70:	4770      	bx	lr
 800cd72:	bf00      	nop
 800cd74:	02e8ba2e 	.word	0x02e8ba2e

0800cd78 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE15getOrCreateDataEv>:

  VariantData* getOrCreateData() const {
 800cd78:	b590      	push	{r4, r7, lr}
 800cd7a:	b087      	sub	sp, #28
 800cd7c:	af02      	add	r7, sp, #8
 800cd7e:	6078      	str	r0, [r7, #4]
    auto data = VariantAttorney::getOrCreateData(upstream_);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	3304      	adds	r3, #4
 800cd84:	4618      	mov	r0, r3
 800cd86:	f000 f853 	bl	800ce30 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEPNS1_11VariantDataERT_>
 800cd8a:	60f8      	str	r0, [r7, #12]
    if (!data)
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d101      	bne.n	800cd96 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE15getOrCreateDataEv+0x1e>
      return nullptr;
 800cd92:	2300      	movs	r3, #0
 800cd94:	e00f      	b.n	800cdb6 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE15getOrCreateDataEv+0x3e>
    return data->getOrAddMember(key_,
 800cd96:	68fc      	ldr	r4, [r7, #12]
                                VariantAttorney::getResourceManager(upstream_));
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	3304      	adds	r3, #4
    return data->getOrAddMember(key_,
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	f7ff fec0 	bl	800cb22 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>
 800cda2:	4602      	mov	r2, r0
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	9200      	str	r2, [sp, #0]
 800cda8:	3314      	adds	r3, #20
 800cdaa:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cdac:	4620      	mov	r0, r4
 800cdae:	f7ff ffa2 	bl	800ccf6 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE>
 800cdb2:	4603      	mov	r3, r0
                                VariantAttorney::getResourceManager(upstream_));
 800cdb4:	bf00      	nop
  }
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	3714      	adds	r7, #20
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	bd90      	pop	{r4, r7, pc}

0800cdbe <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_9JsonArrayEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 800cdbe:	b580      	push	{r7, lr}
 800cdc0:	b082      	sub	sp, #8
 800cdc2:	af00      	add	r7, sp, #0
 800cdc4:	6078      	str	r0, [r7, #4]
    return client.getData();
 800cdc6:	6878      	ldr	r0, [r7, #4]
 800cdc8:	f7fc fe4f 	bl	8009a6a <_ZNK11ArduinoJson8V730HB229JsonArray7getDataEv>
 800cdcc:	4603      	mov	r3, r0
  }
 800cdce:	4618      	mov	r0, r3
 800cdd0:	3708      	adds	r7, #8
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bd80      	pop	{r7, pc}

0800cdd6 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_9JsonArrayEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 800cdd6:	b580      	push	{r7, lr}
 800cdd8:	b082      	sub	sp, #8
 800cdda:	af00      	add	r7, sp, #0
 800cddc:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	f7fc fe37 	bl	8009a52 <_ZNK11ArduinoJson8V730HB229JsonArray18getResourceManagerEv>
 800cde4:	4603      	mov	r3, r0
  }
 800cde6:	4618      	mov	r0, r3
 800cde8:	3708      	adds	r7, #8
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}

0800cdee <_ZN11ArduinoJson8V730HB226detail10ObjectData14getOrAddMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>:
  it.next(resources);
  return it.data();
}

template <typename TAdaptedString>
VariantData* ObjectData::getOrAddMember(TAdaptedString key,
 800cdee:	b580      	push	{r7, lr}
 800cdf0:	b088      	sub	sp, #32
 800cdf2:	af02      	add	r7, sp, #8
 800cdf4:	60f8      	str	r0, [r7, #12]
 800cdf6:	4638      	mov	r0, r7
 800cdf8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
                                        ResourceManager* resources) {
  auto data = getMember(key, resources);
 800cdfc:	6a3b      	ldr	r3, [r7, #32]
 800cdfe:	9300      	str	r3, [sp, #0]
 800ce00:	463b      	mov	r3, r7
 800ce02:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ce04:	68f8      	ldr	r0, [r7, #12]
 800ce06:	f7fa f8fe 	bl	8007006 <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE>
 800ce0a:	6178      	str	r0, [r7, #20]
  if (data)
 800ce0c:	697b      	ldr	r3, [r7, #20]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d001      	beq.n	800ce16 <_ZN11ArduinoJson8V730HB226detail10ObjectData14getOrAddMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x28>
    return data;
 800ce12:	697b      	ldr	r3, [r7, #20]
 800ce14:	e008      	b.n	800ce28 <_ZN11ArduinoJson8V730HB226detail10ObjectData14getOrAddMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x3a>
  return addMember(key, resources);
 800ce16:	6a3b      	ldr	r3, [r7, #32]
 800ce18:	9300      	str	r3, [sp, #0]
 800ce1a:	463b      	mov	r3, r7
 800ce1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ce1e:	68f8      	ldr	r0, [r7, #12]
 800ce20:	f000 f812 	bl	800ce48 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>
 800ce24:	4603      	mov	r3, r0
 800ce26:	bf00      	nop
}
 800ce28:	4618      	mov	r0, r3
 800ce2a:	3718      	adds	r7, #24
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}

0800ce30 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEPNS1_11VariantDataERT_>:
  static VariantData* getOrCreateData(TClient& client) {
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b082      	sub	sp, #8
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
    return client.getOrCreateData();
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	f000 f85b 	bl	800cef4 <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE15getOrCreateDataEv>
 800ce3e:	4603      	mov	r3, r0
  }
 800ce40:	4618      	mov	r0, r3
 800ce42:	3708      	adds	r7, #8
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bd80      	pop	{r7, pc}

0800ce48 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>:
                                     ResourceManager* resources) {
  remove(findKey(key, resources), resources);
}

template <typename TAdaptedString>
inline VariantData* ObjectData::addMember(TAdaptedString key,
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b08a      	sub	sp, #40	@ 0x28
 800ce4c:	af02      	add	r7, sp, #8
 800ce4e:	60f8      	str	r0, [r7, #12]
 800ce50:	4638      	mov	r0, r7
 800ce52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
                                          ResourceManager* resources) {
  auto keySlot = resources->allocVariant();
 800ce56:	f107 0318 	add.w	r3, r7, #24
 800ce5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	f7f7 ff37 	bl	8004cd0 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!keySlot)
 800ce62:	f107 0318 	add.w	r3, r7, #24
 800ce66:	4618      	mov	r0, r3
 800ce68:	f7f9 f9d6 	bl	8006218 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 800ce6c:	4603      	mov	r3, r0
 800ce6e:	f083 0301 	eor.w	r3, r3, #1
 800ce72:	b2db      	uxtb	r3, r3
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d001      	beq.n	800ce7c <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x34>
    return nullptr;
 800ce78:	2300      	movs	r3, #0
 800ce7a:	e037      	b.n	800ceec <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa4>

  auto valueSlot = resources->allocVariant();
 800ce7c:	f107 0310 	add.w	r3, r7, #16
 800ce80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ce82:	4618      	mov	r0, r3
 800ce84:	f7f7 ff24 	bl	8004cd0 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!valueSlot)
 800ce88:	f107 0310 	add.w	r3, r7, #16
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	f7f9 f9c3 	bl	8006218 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 800ce92:	4603      	mov	r3, r0
 800ce94:	f083 0301 	eor.w	r3, r3, #1
 800ce98:	b2db      	uxtb	r3, r3
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d001      	beq.n	800cea2 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x5a>
    return nullptr;
 800ce9e:	2300      	movs	r3, #0
 800cea0:	e024      	b.n	800ceec <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa4>

  if (!keySlot->setString(key, resources))
 800cea2:	f107 0318 	add.w	r3, r7, #24
 800cea6:	4618      	mov	r0, r3
 800cea8:	f7f9 f9df 	bl	800626a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>
 800ceac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ceae:	9300      	str	r3, [sp, #0]
 800ceb0:	463b      	mov	r3, r7
 800ceb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ceb4:	f7fe f93c 	bl	800b130 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	f083 0301 	eor.w	r3, r3, #1
 800cebe:	b2db      	uxtb	r3, r3
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d001      	beq.n	800cec8 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x80>
    return nullptr;
 800cec4:	2300      	movs	r3, #0
 800cec6:	e011      	b.n	800ceec <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa4>

  CollectionData::appendPair(keySlot, valueSlot, resources);
 800cec8:	68f8      	ldr	r0, [r7, #12]
 800ceca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cecc:	9301      	str	r3, [sp, #4]
 800cece:	697b      	ldr	r3, [r7, #20]
 800ced0:	9300      	str	r3, [sp, #0]
 800ced2:	693b      	ldr	r3, [r7, #16]
 800ced4:	f107 0218 	add.w	r2, r7, #24
 800ced8:	ca06      	ldmia	r2, {r1, r2}
 800ceda:	f7f7 fe72 	bl	8004bc2 <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE>

  return valueSlot.ptr();
 800cede:	f107 0310 	add.w	r3, r7, #16
 800cee2:	4618      	mov	r0, r3
 800cee4:	f7f9 f9a9 	bl	800623a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>
 800cee8:	4603      	mov	r3, r0
 800ceea:	bf00      	nop
}
 800ceec:	4618      	mov	r0, r3
 800ceee:	3720      	adds	r7, #32
 800cef0:	46bd      	mov	sp, r7
 800cef2:	bd80      	pop	{r7, pc}

0800cef4 <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE15getOrCreateDataEv>:
  }

  VariantData* getOrCreateData() const {
 800cef4:	b5b0      	push	{r4, r5, r7, lr}
 800cef6:	b084      	sub	sp, #16
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
    auto data = VariantAttorney::getOrCreateData(upstream_);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	3304      	adds	r3, #4
 800cf00:	4618      	mov	r0, r3
 800cf02:	f000 f81a 	bl	800cf3a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS0_9JsonArrayEEEPNS1_11VariantDataERT_>
 800cf06:	60f8      	str	r0, [r7, #12]
    if (!data)
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d101      	bne.n	800cf12 <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE15getOrCreateDataEv+0x1e>
      return nullptr;
 800cf0e:	2300      	movs	r3, #0
 800cf10:	e00f      	b.n	800cf32 <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE15getOrCreateDataEv+0x3e>
    return data->getOrAddElement(
 800cf12:	68fc      	ldr	r4, [r7, #12]
        index_, VariantAttorney::getResourceManager(upstream_));
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	68dd      	ldr	r5, [r3, #12]
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	3304      	adds	r3, #4
    return data->getOrAddElement(
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	f7ff ff5a 	bl	800cdd6 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_9JsonArrayEEEDTcldtfp_18getResourceManagerEERT_>
 800cf22:	4603      	mov	r3, r0
 800cf24:	461a      	mov	r2, r3
 800cf26:	4629      	mov	r1, r5
 800cf28:	4620      	mov	r0, r4
 800cf2a:	f7fc fcd3 	bl	80098d4 <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE>
 800cf2e:	4603      	mov	r3, r0
        index_, VariantAttorney::getResourceManager(upstream_));
 800cf30:	bf00      	nop
  }
 800cf32:	4618      	mov	r0, r3
 800cf34:	3710      	adds	r7, #16
 800cf36:	46bd      	mov	sp, r7
 800cf38:	bdb0      	pop	{r4, r5, r7, pc}

0800cf3a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS0_9JsonArrayEEEPNS1_11VariantDataERT_>:
  static VariantData* getOrCreateData(TClient& client) {
 800cf3a:	b580      	push	{r7, lr}
 800cf3c:	b082      	sub	sp, #8
 800cf3e:	af00      	add	r7, sp, #0
 800cf40:	6078      	str	r0, [r7, #4]
    return client.getOrCreateData();
 800cf42:	6878      	ldr	r0, [r7, #4]
 800cf44:	f7fc fd9f 	bl	8009a86 <_ZNK11ArduinoJson8V730HB229JsonArray15getOrCreateDataEv>
 800cf48:	4603      	mov	r3, r0
  }
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	3708      	adds	r7, #8
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	bd80      	pop	{r7, pc}
	...

0800cf54 <_Z41__static_initialization_and_destruction_0ii>:
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b082      	sub	sp, #8
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
 800cf5c:	6039      	str	r1, [r7, #0]
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	2b01      	cmp	r3, #1
 800cf62:	d10a      	bne.n	800cf7a <_Z41__static_initialization_and_destruction_0ii+0x26>
 800cf64:	683b      	ldr	r3, [r7, #0]
 800cf66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800cf6a:	4293      	cmp	r3, r2
 800cf6c:	d105      	bne.n	800cf7a <_Z41__static_initialization_and_destruction_0ii+0x26>
__attribute__((section(".DmaSection"))) volatile txData_t txData;
 800cf6e:	4805      	ldr	r0, [pc, #20]	@ (800cf84 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800cf70:	f7fc fc1c 	bl	80097ac <_ZN8txData_tC1Ev>
__attribute__((section(".DmaSection"))) volatile rxData_t rxData;
 800cf74:	4804      	ldr	r0, [pc, #16]	@ (800cf88 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800cf76:	f7f3 fe5d 	bl	8000c34 <_ZN8rxData_tC1Ev>
}
 800cf7a:	bf00      	nop
 800cf7c:	3708      	adds	r7, #8
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bd80      	pop	{r7, pc}
 800cf82:	bf00      	nop
 800cf84:	30000080 	.word	0x30000080
 800cf88:	300000c0 	.word	0x300000c0

0800cf8c <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b082      	sub	sp, #8
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
 800cf94:	4a05      	ldr	r2, [pc, #20]	@ (800cfac <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	601a      	str	r2, [r3, #0]
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	f7fe f8a7 	bl	800b0f0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	3708      	adds	r7, #8
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	bd80      	pop	{r7, pc}
 800cfac:	08026718 	.word	0x08026718

0800cfb0 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b082      	sub	sp, #8
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
 800cfb8:	6878      	ldr	r0, [r7, #4]
 800cfba:	f7ff ffe7 	bl	800cf8c <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800cfbe:	212c      	movs	r1, #44	@ 0x2c
 800cfc0:	6878      	ldr	r0, [r7, #4]
 800cfc2:	f016 ff3c 	bl	8023e3e <_ZdlPvj>
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	4618      	mov	r0, r3
 800cfca:	3708      	adds	r7, #8
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	bd80      	pop	{r7, pc}

0800cfd0 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800cfd0:	b590      	push	{r4, r7, lr}
 800cfd2:	b083      	sub	sp, #12
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
	allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	330c      	adds	r3, #12
 800cfdc:	4618      	mov	r0, r3
 800cfde:	f000 f856 	bl	800d08e <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 800cfe2:	4604      	mov	r4, r0
 800cfe4:	6878      	ldr	r0, [r7, #4]
 800cfe6:	f7ff fac0 	bl	800c56a <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800cfea:	4603      	mov	r3, r0
 800cfec:	4619      	mov	r1, r3
 800cfee:	4620      	mov	r0, r4
 800cff0:	f000 f859 	bl	800d0a6 <_ZNSt16allocator_traitsISaIvEE7destroyI12CommsHandlerEEvRS0_PT_>
      }
 800cff4:	bf00      	nop
 800cff6:	370c      	adds	r7, #12
 800cff8:	46bd      	mov	sp, r7
 800cffa:	bd90      	pop	{r4, r7, pc}

0800cffc <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b086      	sub	sp, #24
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	330c      	adds	r3, #12
 800d008:	4618      	mov	r0, r3
 800d00a:	f000 f840 	bl	800d08e <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 800d00e:	4602      	mov	r2, r0
 800d010:	f107 0314 	add.w	r3, r7, #20
 800d014:	4611      	mov	r1, r2
 800d016:	4618      	mov	r0, r3
 800d018:	f7ff fa27 	bl	800c46a <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800d01c:	f107 0114 	add.w	r1, r7, #20
 800d020:	f107 030c 	add.w	r3, r7, #12
 800d024:	687a      	ldr	r2, [r7, #4]
 800d026:	4618      	mov	r0, r3
 800d028:	f7ff fc3e 	bl	800c8a8 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
	this->~_Sp_counted_ptr_inplace();
 800d02c:	6878      	ldr	r0, [r7, #4]
 800d02e:	f7ff ffad 	bl	800cf8c <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 800d032:	f107 030c 	add.w	r3, r7, #12
 800d036:	4618      	mov	r0, r3
 800d038:	f7ff fa43 	bl	800c4c2 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 800d03c:	f107 0314 	add.w	r3, r7, #20
 800d040:	4618      	mov	r0, r3
 800d042:	f7ff fa1f 	bl	800c484 <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800d046:	3718      	adds	r7, #24
 800d048:	46bd      	mov	sp, r7
 800d04a:	bd80      	pop	{r7, pc}

0800d04c <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b084      	sub	sp, #16
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
 800d054:	6039      	str	r1, [r7, #0]
	auto __ptr = const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());
 800d056:	6878      	ldr	r0, [r7, #4]
 800d058:	f7ff fa87 	bl	800c56a <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800d05c:	60f8      	str	r0, [r7, #12]
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 800d05e:	f7fc fb9b 	bl	8009798 <_ZNSt19_Sp_make_shared_tag5_S_tiEv>
 800d062:	4602      	mov	r2, r0
	    ||
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	4293      	cmp	r3, r2
 800d068:	d005      	beq.n	800d076 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 800d06a:	6838      	ldr	r0, [r7, #0]
 800d06c:	f016 ff24 	bl	8023eb8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
 800d070:	4603      	mov	r3, r0
	    ||
 800d072:	2b00      	cmp	r3, #0
 800d074:	d001      	beq.n	800d07a <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2e>
 800d076:	2301      	movs	r3, #1
 800d078:	e000      	b.n	800d07c <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x30>
 800d07a:	2300      	movs	r3, #0
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d001      	beq.n	800d084 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x38>
	  return __ptr;
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	e000      	b.n	800d086 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x3a>
	return nullptr;
 800d084:	2300      	movs	r3, #0
      }
 800d086:	4618      	mov	r0, r3
 800d088:	3710      	adds	r7, #16
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bd80      	pop	{r7, pc}

0800d08e <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _A_base::_S_get(*this); }
 800d08e:	b580      	push	{r7, lr}
 800d090:	b082      	sub	sp, #8
 800d092:	af00      	add	r7, sp, #0
 800d094:	6078      	str	r0, [r7, #4]
 800d096:	6878      	ldr	r0, [r7, #4]
 800d098:	f000 f811 	bl	800d0be <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EE6_S_getERS1_>
 800d09c:	4603      	mov	r3, r0
 800d09e:	4618      	mov	r0, r3
 800d0a0:	3708      	adds	r7, #8
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	bd80      	pop	{r7, pc}

0800d0a6 <_ZNSt16allocator_traitsISaIvEE7destroyI12CommsHandlerEEvRS0_PT_>:
	destroy(allocator_type&, _Up* __p)
 800d0a6:	b580      	push	{r7, lr}
 800d0a8:	b082      	sub	sp, #8
 800d0aa:	af00      	add	r7, sp, #0
 800d0ac:	6078      	str	r0, [r7, #4]
 800d0ae:	6039      	str	r1, [r7, #0]
	{ std::_Destroy(__p); }
 800d0b0:	6838      	ldr	r0, [r7, #0]
 800d0b2:	f000 f80f 	bl	800d0d4 <_ZSt8_DestroyI12CommsHandlerEvPT_>
 800d0b6:	bf00      	nop
 800d0b8:	3708      	adds	r7, #8
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	bd80      	pop	{r7, pc}

0800d0be <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EE6_S_getERS1_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 800d0be:	b480      	push	{r7}
 800d0c0:	b083      	sub	sp, #12
 800d0c2:	af00      	add	r7, sp, #0
 800d0c4:	6078      	str	r0, [r7, #4]
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	370c      	adds	r7, #12
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d2:	4770      	bx	lr

0800d0d4 <_ZSt8_DestroyI12CommsHandlerEvPT_>:
    _Destroy(_Tp* __pointer)
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b082      	sub	sp, #8
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	6878      	ldr	r0, [r7, #4]
 800d0e4:	4798      	blx	r3
    }
 800d0e6:	bf00      	nop
 800d0e8:	3708      	adds	r7, #8
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	bd80      	pop	{r7, pc}

0800d0ee <_GLOBAL__sub_I_EXTI4_IRQHandler>:
 800d0ee:	b580      	push	{r7, lr}
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800d0f6:	2001      	movs	r0, #1
 800d0f8:	f7ff ff2c 	bl	800cf54 <_Z41__static_initialization_and_destruction_0ii>
 800d0fc:	bd80      	pop	{r7, pc}
	...

0800d100 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d100:	b480      	push	{r7}
 800d102:	b083      	sub	sp, #12
 800d104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d106:	4b0a      	ldr	r3, [pc, #40]	@ (800d130 <HAL_MspInit+0x30>)
 800d108:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d10c:	4a08      	ldr	r2, [pc, #32]	@ (800d130 <HAL_MspInit+0x30>)
 800d10e:	f043 0302 	orr.w	r3, r3, #2
 800d112:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800d116:	4b06      	ldr	r3, [pc, #24]	@ (800d130 <HAL_MspInit+0x30>)
 800d118:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d11c:	f003 0302 	and.w	r3, r3, #2
 800d120:	607b      	str	r3, [r7, #4]
 800d122:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d124:	bf00      	nop
 800d126:	370c      	adds	r7, #12
 800d128:	46bd      	mov	sp, r7
 800d12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12e:	4770      	bx	lr
 800d130:	58024400 	.word	0x58024400

0800d134 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b0bc      	sub	sp, #240	@ 0xf0
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d13c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800d140:	2200      	movs	r2, #0
 800d142:	601a      	str	r2, [r3, #0]
 800d144:	605a      	str	r2, [r3, #4]
 800d146:	609a      	str	r2, [r3, #8]
 800d148:	60da      	str	r2, [r3, #12]
 800d14a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d14c:	f107 0318 	add.w	r3, r7, #24
 800d150:	22c0      	movs	r2, #192	@ 0xc0
 800d152:	2100      	movs	r1, #0
 800d154:	4618      	mov	r0, r3
 800d156:	f017 fdc9 	bl	8024cec <memset>
  if(hsd->Instance==SDMMC1)
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	4a3c      	ldr	r2, [pc, #240]	@ (800d250 <HAL_SD_MspInit+0x11c>)
 800d160:	4293      	cmp	r3, r2
 800d162:	d171      	bne.n	800d248 <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 800d164:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800d168:	f04f 0300 	mov.w	r3, #0
 800d16c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800d170:	2300      	movs	r3, #0
 800d172:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d174:	f107 0318 	add.w	r3, r7, #24
 800d178:	4618      	mov	r0, r3
 800d17a:	f00e f863 	bl	801b244 <HAL_RCCEx_PeriphCLKConfig>
 800d17e:	4603      	mov	r3, r0
 800d180:	2b00      	cmp	r3, #0
 800d182:	d001      	beq.n	800d188 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 800d184:	f7fc fab0 	bl	80096e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800d188:	4b32      	ldr	r3, [pc, #200]	@ (800d254 <HAL_SD_MspInit+0x120>)
 800d18a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800d18e:	4a31      	ldr	r2, [pc, #196]	@ (800d254 <HAL_SD_MspInit+0x120>)
 800d190:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d194:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800d198:	4b2e      	ldr	r3, [pc, #184]	@ (800d254 <HAL_SD_MspInit+0x120>)
 800d19a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800d19e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d1a2:	617b      	str	r3, [r7, #20]
 800d1a4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d1a6:	4b2b      	ldr	r3, [pc, #172]	@ (800d254 <HAL_SD_MspInit+0x120>)
 800d1a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d1ac:	4a29      	ldr	r2, [pc, #164]	@ (800d254 <HAL_SD_MspInit+0x120>)
 800d1ae:	f043 0304 	orr.w	r3, r3, #4
 800d1b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800d1b6:	4b27      	ldr	r3, [pc, #156]	@ (800d254 <HAL_SD_MspInit+0x120>)
 800d1b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d1bc:	f003 0304 	and.w	r3, r3, #4
 800d1c0:	613b      	str	r3, [r7, #16]
 800d1c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800d1c4:	4b23      	ldr	r3, [pc, #140]	@ (800d254 <HAL_SD_MspInit+0x120>)
 800d1c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d1ca:	4a22      	ldr	r2, [pc, #136]	@ (800d254 <HAL_SD_MspInit+0x120>)
 800d1cc:	f043 0308 	orr.w	r3, r3, #8
 800d1d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800d1d4:	4b1f      	ldr	r3, [pc, #124]	@ (800d254 <HAL_SD_MspInit+0x120>)
 800d1d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d1da:	f003 0308 	and.w	r3, r3, #8
 800d1de:	60fb      	str	r3, [r7, #12]
 800d1e0:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800d1e2:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800d1e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d1ea:	2302      	movs	r3, #2
 800d1ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d1f6:	2303      	movs	r3, #3
 800d1f8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800d1fc:	230c      	movs	r3, #12
 800d1fe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d202:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800d206:	4619      	mov	r1, r3
 800d208:	4813      	ldr	r0, [pc, #76]	@ (800d258 <HAL_SD_MspInit+0x124>)
 800d20a:	f00c fe19 	bl	8019e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800d20e:	2304      	movs	r3, #4
 800d210:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d214:	2302      	movs	r3, #2
 800d216:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d21a:	2300      	movs	r3, #0
 800d21c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d220:	2303      	movs	r3, #3
 800d222:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800d226:	230c      	movs	r3, #12
 800d228:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800d22c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800d230:	4619      	mov	r1, r3
 800d232:	480a      	ldr	r0, [pc, #40]	@ (800d25c <HAL_SD_MspInit+0x128>)
 800d234:	f00c fe04 	bl	8019e40 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800d238:	2200      	movs	r2, #0
 800d23a:	2100      	movs	r1, #0
 800d23c:	2031      	movs	r0, #49	@ 0x31
 800d23e:	f00a fa0e 	bl	801765e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800d242:	2031      	movs	r0, #49	@ 0x31
 800d244:	f00a fa25 	bl	8017692 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 800d248:	bf00      	nop
 800d24a:	37f0      	adds	r7, #240	@ 0xf0
 800d24c:	46bd      	mov	sp, r7
 800d24e:	bd80      	pop	{r7, pc}
 800d250:	52007000 	.word	0x52007000
 800d254:	58024400 	.word	0x58024400
 800d258:	58020800 	.word	0x58020800
 800d25c:	58020c00 	.word	0x58020c00

0800d260 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b0ba      	sub	sp, #232	@ 0xe8
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d268:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800d26c:	2200      	movs	r2, #0
 800d26e:	601a      	str	r2, [r3, #0]
 800d270:	605a      	str	r2, [r3, #4]
 800d272:	609a      	str	r2, [r3, #8]
 800d274:	60da      	str	r2, [r3, #12]
 800d276:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d278:	f107 0310 	add.w	r3, r7, #16
 800d27c:	22c0      	movs	r2, #192	@ 0xc0
 800d27e:	2100      	movs	r1, #0
 800d280:	4618      	mov	r0, r3
 800d282:	f017 fd33 	bl	8024cec <memset>
  if(huart->Instance==USART1)
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	4a27      	ldr	r2, [pc, #156]	@ (800d328 <HAL_UART_MspInit+0xc8>)
 800d28c:	4293      	cmp	r3, r2
 800d28e:	d146      	bne.n	800d31e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800d290:	f04f 0201 	mov.w	r2, #1
 800d294:	f04f 0300 	mov.w	r3, #0
 800d298:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800d29c:	2300      	movs	r3, #0
 800d29e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d2a2:	f107 0310 	add.w	r3, r7, #16
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	f00d ffcc 	bl	801b244 <HAL_RCCEx_PeriphCLKConfig>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d001      	beq.n	800d2b6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800d2b2:	f7fc fa19 	bl	80096e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800d2b6:	4b1d      	ldr	r3, [pc, #116]	@ (800d32c <HAL_UART_MspInit+0xcc>)
 800d2b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d2bc:	4a1b      	ldr	r2, [pc, #108]	@ (800d32c <HAL_UART_MspInit+0xcc>)
 800d2be:	f043 0310 	orr.w	r3, r3, #16
 800d2c2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800d2c6:	4b19      	ldr	r3, [pc, #100]	@ (800d32c <HAL_UART_MspInit+0xcc>)
 800d2c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d2cc:	f003 0310 	and.w	r3, r3, #16
 800d2d0:	60fb      	str	r3, [r7, #12]
 800d2d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d2d4:	4b15      	ldr	r3, [pc, #84]	@ (800d32c <HAL_UART_MspInit+0xcc>)
 800d2d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d2da:	4a14      	ldr	r2, [pc, #80]	@ (800d32c <HAL_UART_MspInit+0xcc>)
 800d2dc:	f043 0301 	orr.w	r3, r3, #1
 800d2e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800d2e4:	4b11      	ldr	r3, [pc, #68]	@ (800d32c <HAL_UART_MspInit+0xcc>)
 800d2e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d2ea:	f003 0301 	and.w	r3, r3, #1
 800d2ee:	60bb      	str	r3, [r7, #8]
 800d2f0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800d2f2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800d2f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d2fa:	2302      	movs	r3, #2
 800d2fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d300:	2300      	movs	r3, #0
 800d302:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d306:	2300      	movs	r3, #0
 800d308:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800d30c:	2307      	movs	r3, #7
 800d30e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d312:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800d316:	4619      	mov	r1, r3
 800d318:	4805      	ldr	r0, [pc, #20]	@ (800d330 <HAL_UART_MspInit+0xd0>)
 800d31a:	f00c fd91 	bl	8019e40 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800d31e:	bf00      	nop
 800d320:	37e8      	adds	r7, #232	@ 0xe8
 800d322:	46bd      	mov	sp, r7
 800d324:	bd80      	pop	{r7, pc}
 800d326:	bf00      	nop
 800d328:	40011000 	.word	0x40011000
 800d32c:	58024400 	.word	0x58024400
 800d330:	58020000 	.word	0x58020000

0800d334 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800d334:	b480      	push	{r7}
 800d336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800d338:	bf00      	nop
 800d33a:	e7fd      	b.n	800d338 <NMI_Handler+0x4>

0800d33c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d33c:	b480      	push	{r7}
 800d33e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800d340:	bf00      	nop
 800d342:	e7fd      	b.n	800d340 <HardFault_Handler+0x4>

0800d344 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800d344:	b480      	push	{r7}
 800d346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800d348:	bf00      	nop
 800d34a:	e7fd      	b.n	800d348 <MemManage_Handler+0x4>

0800d34c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800d34c:	b480      	push	{r7}
 800d34e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800d350:	bf00      	nop
 800d352:	e7fd      	b.n	800d350 <BusFault_Handler+0x4>

0800d354 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800d354:	b480      	push	{r7}
 800d356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800d358:	bf00      	nop
 800d35a:	e7fd      	b.n	800d358 <UsageFault_Handler+0x4>

0800d35c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800d35c:	b480      	push	{r7}
 800d35e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800d360:	bf00      	nop
 800d362:	46bd      	mov	sp, r7
 800d364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d368:	4770      	bx	lr

0800d36a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800d36a:	b480      	push	{r7}
 800d36c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800d36e:	bf00      	nop
 800d370:	46bd      	mov	sp, r7
 800d372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d376:	4770      	bx	lr

0800d378 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800d378:	b480      	push	{r7}
 800d37a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800d37c:	bf00      	nop
 800d37e:	46bd      	mov	sp, r7
 800d380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d384:	4770      	bx	lr

0800d386 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800d386:	b580      	push	{r7, lr}
 800d388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800d38a:	f00a f827 	bl	80173dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800d38e:	bf00      	nop
 800d390:	bd80      	pop	{r7, pc}
	...

0800d394 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800d394:	b580      	push	{r7, lr}
 800d396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800d398:	4802      	ldr	r0, [pc, #8]	@ (800d3a4 <SDMMC1_IRQHandler+0x10>)
 800d39a:	f010 fec1 	bl	801e120 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800d39e:	bf00      	nop
 800d3a0:	bd80      	pop	{r7, pc}
 800d3a2:	bf00      	nop
 800d3a4:	240002f8 	.word	0x240002f8

0800d3a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800d3a8:	b480      	push	{r7}
 800d3aa:	af00      	add	r7, sp, #0
	return 1;
 800d3ac:	2301      	movs	r3, #1
}
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b6:	4770      	bx	lr

0800d3b8 <_kill>:

int _kill(int pid, int sig)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b082      	sub	sp, #8
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
 800d3c0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800d3c2:	f017 fd35 	bl	8024e30 <__errno>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	2216      	movs	r2, #22
 800d3ca:	601a      	str	r2, [r3, #0]
	return -1;
 800d3cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	3708      	adds	r7, #8
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	bd80      	pop	{r7, pc}

0800d3d8 <_exit>:

void _exit (int status)
{
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b082      	sub	sp, #8
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800d3e0:	f04f 31ff 	mov.w	r1, #4294967295
 800d3e4:	6878      	ldr	r0, [r7, #4]
 800d3e6:	f7ff ffe7 	bl	800d3b8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800d3ea:	bf00      	nop
 800d3ec:	e7fd      	b.n	800d3ea <_exit+0x12>

0800d3ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800d3ee:	b580      	push	{r7, lr}
 800d3f0:	b086      	sub	sp, #24
 800d3f2:	af00      	add	r7, sp, #0
 800d3f4:	60f8      	str	r0, [r7, #12]
 800d3f6:	60b9      	str	r1, [r7, #8]
 800d3f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	617b      	str	r3, [r7, #20]
 800d3fe:	e00a      	b.n	800d416 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800d400:	f3af 8000 	nop.w
 800d404:	4601      	mov	r1, r0
 800d406:	68bb      	ldr	r3, [r7, #8]
 800d408:	1c5a      	adds	r2, r3, #1
 800d40a:	60ba      	str	r2, [r7, #8]
 800d40c:	b2ca      	uxtb	r2, r1
 800d40e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d410:	697b      	ldr	r3, [r7, #20]
 800d412:	3301      	adds	r3, #1
 800d414:	617b      	str	r3, [r7, #20]
 800d416:	697a      	ldr	r2, [r7, #20]
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	429a      	cmp	r2, r3
 800d41c:	dbf0      	blt.n	800d400 <_read+0x12>
	}

return len;
 800d41e:	687b      	ldr	r3, [r7, #4]
}
 800d420:	4618      	mov	r0, r3
 800d422:	3718      	adds	r7, #24
 800d424:	46bd      	mov	sp, r7
 800d426:	bd80      	pop	{r7, pc}

0800d428 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b086      	sub	sp, #24
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	60f8      	str	r0, [r7, #12]
 800d430:	60b9      	str	r1, [r7, #8]
 800d432:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d434:	2300      	movs	r3, #0
 800d436:	617b      	str	r3, [r7, #20]
 800d438:	e009      	b.n	800d44e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800d43a:	68bb      	ldr	r3, [r7, #8]
 800d43c:	1c5a      	adds	r2, r3, #1
 800d43e:	60ba      	str	r2, [r7, #8]
 800d440:	781b      	ldrb	r3, [r3, #0]
 800d442:	4618      	mov	r0, r3
 800d444:	f7fb fe9c 	bl	8009180 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d448:	697b      	ldr	r3, [r7, #20]
 800d44a:	3301      	adds	r3, #1
 800d44c:	617b      	str	r3, [r7, #20]
 800d44e:	697a      	ldr	r2, [r7, #20]
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	429a      	cmp	r2, r3
 800d454:	dbf1      	blt.n	800d43a <_write+0x12>
	}
	return len;
 800d456:	687b      	ldr	r3, [r7, #4]
}
 800d458:	4618      	mov	r0, r3
 800d45a:	3718      	adds	r7, #24
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}

0800d460 <_close>:

int _close(int file)
{
 800d460:	b480      	push	{r7}
 800d462:	b083      	sub	sp, #12
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
	return -1;
 800d468:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d46c:	4618      	mov	r0, r3
 800d46e:	370c      	adds	r7, #12
 800d470:	46bd      	mov	sp, r7
 800d472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d476:	4770      	bx	lr

0800d478 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800d478:	b480      	push	{r7}
 800d47a:	b083      	sub	sp, #12
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
 800d480:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800d482:	683b      	ldr	r3, [r7, #0]
 800d484:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800d488:	605a      	str	r2, [r3, #4]
	return 0;
 800d48a:	2300      	movs	r3, #0
}
 800d48c:	4618      	mov	r0, r3
 800d48e:	370c      	adds	r7, #12
 800d490:	46bd      	mov	sp, r7
 800d492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d496:	4770      	bx	lr

0800d498 <_isatty>:

int _isatty(int file)
{
 800d498:	b480      	push	{r7}
 800d49a:	b083      	sub	sp, #12
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
	return 1;
 800d4a0:	2301      	movs	r3, #1
}
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	370c      	adds	r7, #12
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ac:	4770      	bx	lr

0800d4ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800d4ae:	b480      	push	{r7}
 800d4b0:	b085      	sub	sp, #20
 800d4b2:	af00      	add	r7, sp, #0
 800d4b4:	60f8      	str	r0, [r7, #12]
 800d4b6:	60b9      	str	r1, [r7, #8]
 800d4b8:	607a      	str	r2, [r7, #4]
	return 0;
 800d4ba:	2300      	movs	r3, #0
}
 800d4bc:	4618      	mov	r0, r3
 800d4be:	3714      	adds	r7, #20
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c6:	4770      	bx	lr

0800d4c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b086      	sub	sp, #24
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800d4d0:	4a14      	ldr	r2, [pc, #80]	@ (800d524 <_sbrk+0x5c>)
 800d4d2:	4b15      	ldr	r3, [pc, #84]	@ (800d528 <_sbrk+0x60>)
 800d4d4:	1ad3      	subs	r3, r2, r3
 800d4d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800d4d8:	697b      	ldr	r3, [r7, #20]
 800d4da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800d4dc:	4b13      	ldr	r3, [pc, #76]	@ (800d52c <_sbrk+0x64>)
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d102      	bne.n	800d4ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800d4e4:	4b11      	ldr	r3, [pc, #68]	@ (800d52c <_sbrk+0x64>)
 800d4e6:	4a12      	ldr	r2, [pc, #72]	@ (800d530 <_sbrk+0x68>)
 800d4e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800d4ea:	4b10      	ldr	r3, [pc, #64]	@ (800d52c <_sbrk+0x64>)
 800d4ec:	681a      	ldr	r2, [r3, #0]
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	4413      	add	r3, r2
 800d4f2:	693a      	ldr	r2, [r7, #16]
 800d4f4:	429a      	cmp	r2, r3
 800d4f6:	d207      	bcs.n	800d508 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800d4f8:	f017 fc9a 	bl	8024e30 <__errno>
 800d4fc:	4603      	mov	r3, r0
 800d4fe:	220c      	movs	r2, #12
 800d500:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800d502:	f04f 33ff 	mov.w	r3, #4294967295
 800d506:	e009      	b.n	800d51c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800d508:	4b08      	ldr	r3, [pc, #32]	@ (800d52c <_sbrk+0x64>)
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800d50e:	4b07      	ldr	r3, [pc, #28]	@ (800d52c <_sbrk+0x64>)
 800d510:	681a      	ldr	r2, [r3, #0]
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	4413      	add	r3, r2
 800d516:	4a05      	ldr	r2, [pc, #20]	@ (800d52c <_sbrk+0x64>)
 800d518:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800d51a:	68fb      	ldr	r3, [r7, #12]
}
 800d51c:	4618      	mov	r0, r3
 800d51e:	3718      	adds	r7, #24
 800d520:	46bd      	mov	sp, r7
 800d522:	bd80      	pop	{r7, pc}
 800d524:	24080000 	.word	0x24080000
 800d528:	00000400 	.word	0x00000400
 800d52c:	24000408 	.word	0x24000408
 800d530:	24000c10 	.word	0x24000c10

0800d534 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800d534:	b480      	push	{r7}
 800d536:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800d538:	4b37      	ldr	r3, [pc, #220]	@ (800d618 <SystemInit+0xe4>)
 800d53a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d53e:	4a36      	ldr	r2, [pc, #216]	@ (800d618 <SystemInit+0xe4>)
 800d540:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d544:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800d548:	4b34      	ldr	r3, [pc, #208]	@ (800d61c <SystemInit+0xe8>)
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	f003 030f 	and.w	r3, r3, #15
 800d550:	2b06      	cmp	r3, #6
 800d552:	d807      	bhi.n	800d564 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800d554:	4b31      	ldr	r3, [pc, #196]	@ (800d61c <SystemInit+0xe8>)
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	f023 030f 	bic.w	r3, r3, #15
 800d55c:	4a2f      	ldr	r2, [pc, #188]	@ (800d61c <SystemInit+0xe8>)
 800d55e:	f043 0307 	orr.w	r3, r3, #7
 800d562:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800d564:	4b2e      	ldr	r3, [pc, #184]	@ (800d620 <SystemInit+0xec>)
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	4a2d      	ldr	r2, [pc, #180]	@ (800d620 <SystemInit+0xec>)
 800d56a:	f043 0301 	orr.w	r3, r3, #1
 800d56e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800d570:	4b2b      	ldr	r3, [pc, #172]	@ (800d620 <SystemInit+0xec>)
 800d572:	2200      	movs	r2, #0
 800d574:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800d576:	4b2a      	ldr	r3, [pc, #168]	@ (800d620 <SystemInit+0xec>)
 800d578:	681a      	ldr	r2, [r3, #0]
 800d57a:	4929      	ldr	r1, [pc, #164]	@ (800d620 <SystemInit+0xec>)
 800d57c:	4b29      	ldr	r3, [pc, #164]	@ (800d624 <SystemInit+0xf0>)
 800d57e:	4013      	ands	r3, r2
 800d580:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800d582:	4b26      	ldr	r3, [pc, #152]	@ (800d61c <SystemInit+0xe8>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	f003 0308 	and.w	r3, r3, #8
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d007      	beq.n	800d59e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800d58e:	4b23      	ldr	r3, [pc, #140]	@ (800d61c <SystemInit+0xe8>)
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	f023 030f 	bic.w	r3, r3, #15
 800d596:	4a21      	ldr	r2, [pc, #132]	@ (800d61c <SystemInit+0xe8>)
 800d598:	f043 0307 	orr.w	r3, r3, #7
 800d59c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800d59e:	4b20      	ldr	r3, [pc, #128]	@ (800d620 <SystemInit+0xec>)
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800d5a4:	4b1e      	ldr	r3, [pc, #120]	@ (800d620 <SystemInit+0xec>)
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800d5aa:	4b1d      	ldr	r3, [pc, #116]	@ (800d620 <SystemInit+0xec>)
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800d5b0:	4b1b      	ldr	r3, [pc, #108]	@ (800d620 <SystemInit+0xec>)
 800d5b2:	4a1d      	ldr	r2, [pc, #116]	@ (800d628 <SystemInit+0xf4>)
 800d5b4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800d5b6:	4b1a      	ldr	r3, [pc, #104]	@ (800d620 <SystemInit+0xec>)
 800d5b8:	4a1c      	ldr	r2, [pc, #112]	@ (800d62c <SystemInit+0xf8>)
 800d5ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800d5bc:	4b18      	ldr	r3, [pc, #96]	@ (800d620 <SystemInit+0xec>)
 800d5be:	4a1c      	ldr	r2, [pc, #112]	@ (800d630 <SystemInit+0xfc>)
 800d5c0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800d5c2:	4b17      	ldr	r3, [pc, #92]	@ (800d620 <SystemInit+0xec>)
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800d5c8:	4b15      	ldr	r3, [pc, #84]	@ (800d620 <SystemInit+0xec>)
 800d5ca:	4a19      	ldr	r2, [pc, #100]	@ (800d630 <SystemInit+0xfc>)
 800d5cc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800d5ce:	4b14      	ldr	r3, [pc, #80]	@ (800d620 <SystemInit+0xec>)
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800d5d4:	4b12      	ldr	r3, [pc, #72]	@ (800d620 <SystemInit+0xec>)
 800d5d6:	4a16      	ldr	r2, [pc, #88]	@ (800d630 <SystemInit+0xfc>)
 800d5d8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800d5da:	4b11      	ldr	r3, [pc, #68]	@ (800d620 <SystemInit+0xec>)
 800d5dc:	2200      	movs	r2, #0
 800d5de:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800d5e0:	4b0f      	ldr	r3, [pc, #60]	@ (800d620 <SystemInit+0xec>)
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	4a0e      	ldr	r2, [pc, #56]	@ (800d620 <SystemInit+0xec>)
 800d5e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d5ea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800d5ec:	4b0c      	ldr	r3, [pc, #48]	@ (800d620 <SystemInit+0xec>)
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800d5f2:	4b10      	ldr	r3, [pc, #64]	@ (800d634 <SystemInit+0x100>)
 800d5f4:	681a      	ldr	r2, [r3, #0]
 800d5f6:	4b10      	ldr	r3, [pc, #64]	@ (800d638 <SystemInit+0x104>)
 800d5f8:	4013      	ands	r3, r2
 800d5fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d5fe:	d202      	bcs.n	800d606 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800d600:	4b0e      	ldr	r3, [pc, #56]	@ (800d63c <SystemInit+0x108>)
 800d602:	2201      	movs	r2, #1
 800d604:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800d606:	4b0e      	ldr	r3, [pc, #56]	@ (800d640 <SystemInit+0x10c>)
 800d608:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800d60c:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800d60e:	bf00      	nop
 800d610:	46bd      	mov	sp, r7
 800d612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d616:	4770      	bx	lr
 800d618:	e000ed00 	.word	0xe000ed00
 800d61c:	52002000 	.word	0x52002000
 800d620:	58024400 	.word	0x58024400
 800d624:	eaf6ed7f 	.word	0xeaf6ed7f
 800d628:	02020200 	.word	0x02020200
 800d62c:	01ff0000 	.word	0x01ff0000
 800d630:	01010280 	.word	0x01010280
 800d634:	5c001000 	.word	0x5c001000
 800d638:	ffff0000 	.word	0xffff0000
 800d63c:	51008108 	.word	0x51008108
 800d640:	52004000 	.word	0x52004000

0800d644 <_ZN5Blink6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>:
#include "blink.h"


shared_ptr<Module> Blink::create(const JsonObject& config, Remora* instance) {
 800d644:	b580      	push	{r7, lr}
 800d646:	b09a      	sub	sp, #104	@ 0x68
 800d648:	af00      	add	r7, sp, #0
 800d64a:	60f8      	str	r0, [r7, #12]
 800d64c:	60b9      	str	r1, [r7, #8]
 800d64e:	607a      	str	r2, [r7, #4]
    const char* pin = config["Pin"];
 800d650:	f107 031c 	add.w	r3, r7, #28
 800d654:	4a23      	ldr	r2, [pc, #140]	@ (800d6e4 <_ZN5Blink6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xa0>)
 800d656:	68b9      	ldr	r1, [r7, #8]
 800d658:	4618      	mov	r0, r3
 800d65a:	f000 f8b7 	bl	800d7cc <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA4_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800d65e:	f107 031c 	add.w	r3, r7, #28
 800d662:	4618      	mov	r0, r3
 800d664:	f7f9 f890 	bl	8006788 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800d668:	4603      	mov	r3, r0
 800d66a:	61bb      	str	r3, [r7, #24]
    int frequency = config["Frequency"];
 800d66c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800d670:	4a1d      	ldr	r2, [pc, #116]	@ (800d6e8 <_ZN5Blink6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xa4>)
 800d672:	68b9      	ldr	r1, [r7, #8]
 800d674:	4618      	mov	r0, r3
 800d676:	f7f9 f893 	bl	80067a0 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA10_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800d67a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800d67e:	4618      	mov	r0, r3
 800d680:	f000 f8c9 	bl	800d816 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>
 800d684:	4603      	mov	r3, r0
 800d686:	617b      	str	r3, [r7, #20]
    uint32_t threadFreq = config["ThreadFreq"];
 800d688:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800d68c:	4a17      	ldr	r2, [pc, #92]	@ (800d6ec <_ZN5Blink6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xa8>)
 800d68e:	68b9      	ldr	r1, [r7, #8]
 800d690:	4618      	mov	r0, r3
 800d692:	f000 f8cc 	bl	800d82e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800d696:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800d69a:	4618      	mov	r0, r3
 800d69c:	f7f9 f8a5 	bl	80067ea <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ImLi0EEEv>
 800d6a0:	4603      	mov	r3, r0
 800d6a2:	613b      	str	r3, [r7, #16]
    
    printf("Creating Blink module on pin %s with frequency %d Hz\n", pin, frequency);
 800d6a4:	69bb      	ldr	r3, [r7, #24]
 800d6a6:	697a      	ldr	r2, [r7, #20]
 800d6a8:	4619      	mov	r1, r3
 800d6aa:	4811      	ldr	r0, [pc, #68]	@ (800d6f0 <_ZN5Blink6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xac>)
 800d6ac:	f017 f9a4 	bl	80249f8 <iprintf>
	return std::make_unique<Blink>(pin, threadFreq, frequency);
 800d6b0:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 800d6b4:	f107 0314 	add.w	r3, r7, #20
 800d6b8:	f107 0210 	add.w	r2, r7, #16
 800d6bc:	f107 0118 	add.w	r1, r7, #24
 800d6c0:	f000 f8da 	bl	800d878 <_ZSt11make_uniqueI5BlinkJRPKcRmRiEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 800d6c4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800d6c8:	4619      	mov	r1, r3
 800d6ca:	68f8      	ldr	r0, [r7, #12]
 800d6cc:	f000 f937 	bl	800d93e <_ZNSt10shared_ptrI6ModuleEC1I5BlinkSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>
 800d6d0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	f000 f910 	bl	800d8fa <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EED1Ev>
 800d6da:	bf00      	nop
}
 800d6dc:	68f8      	ldr	r0, [r7, #12]
 800d6de:	3768      	adds	r7, #104	@ 0x68
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	bd80      	pop	{r7, pc}
 800d6e4:	08025dc0 	.word	0x08025dc0
 800d6e8:	08025dc4 	.word	0x08025dc4
 800d6ec:	08025dd0 	.word	0x08025dd0
 800d6f0:	08025ddc 	.word	0x08025ddc

0800d6f4 <_ZN5BlinkC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmm>:
 * @brief Constructs a Blink module.
 * 
 * Initializes the blink pin and sets up the toggle period based on the 
 * servo thread frequency and desired blink frequency.
 */
Blink::Blink(std::string _portAndPin, uint32_t _threadFreq, uint32_t _freq) :
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b086      	sub	sp, #24
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	60f8      	str	r0, [r7, #12]
 800d6fc:	60b9      	str	r1, [r7, #8]
 800d6fe:	607a      	str	r2, [r7, #4]
 800d700:	603b      	str	r3, [r7, #0]
	bState(false),
    periodCount(_threadFreq / _freq),
    blinkCount(0),
    blinkPin(std::make_unique<Pin>(_portAndPin, OUTPUT))
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	4618      	mov	r0, r3
 800d706:	f002 fdf5 	bl	80102f4 <_ZN6ModuleC1Ev>
 800d70a:	4a15      	ldr	r2, [pc, #84]	@ (800d760 <_ZN5BlinkC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmm+0x6c>)
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	601a      	str	r2, [r3, #0]
	bState(false),
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	2200      	movs	r2, #0
 800d714:	755a      	strb	r2, [r3, #21]
    periodCount(_threadFreq / _freq),
 800d716:	687a      	ldr	r2, [r7, #4]
 800d718:	683b      	ldr	r3, [r7, #0]
 800d71a:	fbb2 f2f3 	udiv	r2, r2, r3
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	619a      	str	r2, [r3, #24]
    blinkCount(0),
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	2200      	movs	r2, #0
 800d726:	61da      	str	r2, [r3, #28]
    blinkPin(std::make_unique<Pin>(_portAndPin, OUTPUT))
 800d728:	2301      	movs	r3, #1
 800d72a:	617b      	str	r3, [r7, #20]
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	3320      	adds	r3, #32
 800d730:	f107 0214 	add.w	r2, r7, #20
 800d734:	68b9      	ldr	r1, [r7, #8]
 800d736:	4618      	mov	r0, r3
 800d738:	f000 f914 	bl	800d964 <_ZSt11make_uniqueI3PinJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
{
	blinkPin->set(bState);
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	3320      	adds	r3, #32
 800d740:	4618      	mov	r0, r3
 800d742:	f000 f952 	bl	800d9ea <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EEptEv>
 800d746:	4602      	mov	r2, r0
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	7d5b      	ldrb	r3, [r3, #21]
 800d74c:	4619      	mov	r1, r3
 800d74e:	4610      	mov	r0, r2
 800d750:	f7f6 f9fc 	bl	8003b4c <_ZN3Pin3setEb>
}
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	4618      	mov	r0, r3
 800d758:	3718      	adds	r7, #24
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bd80      	pop	{r7, pc}
 800d75e:	bf00      	nop
 800d760:	0802677c 	.word	0x0802677c

0800d764 <_ZN5Blink6updateEv>:

void Blink::update(void)
{
 800d764:	b580      	push	{r7, lr}
 800d766:	b082      	sub	sp, #8
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
	++blinkCount;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	69db      	ldr	r3, [r3, #28]
 800d770:	1c5a      	adds	r2, r3, #1
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	61da      	str	r2, [r3, #28]
	if (blinkCount >= periodCount / 2)
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	69da      	ldr	r2, [r3, #28]
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	699b      	ldr	r3, [r3, #24]
 800d77e:	085b      	lsrs	r3, r3, #1
 800d780:	429a      	cmp	r2, r3
 800d782:	d315      	bcc.n	800d7b0 <_ZN5Blink6updateEv+0x4c>
	{
        bState = !bState;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	7d5b      	ldrb	r3, [r3, #21]
 800d788:	f083 0301 	eor.w	r3, r3, #1
 800d78c:	b2da      	uxtb	r2, r3
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	755a      	strb	r2, [r3, #21]
        blinkPin->set(bState);
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	3320      	adds	r3, #32
 800d796:	4618      	mov	r0, r3
 800d798:	f000 f927 	bl	800d9ea <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EEptEv>
 800d79c:	4602      	mov	r2, r0
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	7d5b      	ldrb	r3, [r3, #21]
 800d7a2:	4619      	mov	r1, r3
 800d7a4:	4610      	mov	r0, r2
 800d7a6:	f7f6 f9d1 	bl	8003b4c <_ZN3Pin3setEb>
        blinkCount = 0;
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	61da      	str	r2, [r3, #28]
	}
}
 800d7b0:	bf00      	nop
 800d7b2:	3708      	adds	r7, #8
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	bd80      	pop	{r7, pc}

0800d7b8 <_ZN5Blink10slowUpdateEv>:

void Blink::slowUpdate(void)
{
 800d7b8:	b480      	push	{r7}
 800d7ba:	b083      	sub	sp, #12
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
	return;
 800d7c0:	bf00      	nop
}
 800d7c2:	370c      	adds	r7, #12
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ca:	4770      	bx	lr

0800d7cc <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA4_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:

  // Gets or sets the member with specified key.
  // https://arduinojson.org/v7/api/jsonobject/subscript/
  template <typename TString,
            detail::enable_if_t<detail::IsString<TString>::value, int> = 0>
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b08c      	sub	sp, #48	@ 0x30
 800d7d0:	af02      	add	r7, sp, #8
 800d7d2:	60f8      	str	r0, [r7, #12]
 800d7d4:	60b9      	str	r1, [r7, #8]
 800d7d6:	607a      	str	r2, [r7, #4]
      const TString& key) const {
    return {*this, detail::adaptString(key)};
 800d7d8:	68ba      	ldr	r2, [r7, #8]
 800d7da:	f107 0314 	add.w	r3, r7, #20
 800d7de:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d7e2:	e883 0003 	stmia.w	r3, {r0, r1}
 800d7e6:	f107 031c 	add.w	r3, r7, #28
 800d7ea:	6879      	ldr	r1, [r7, #4]
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	f000 f913 	bl	800da18 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA4_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800d7f2:	466a      	mov	r2, sp
 800d7f4:	f107 0320 	add.w	r3, r7, #32
 800d7f8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d7fc:	e882 0003 	stmia.w	r2, {r0, r1}
 800d800:	69fb      	ldr	r3, [r7, #28]
 800d802:	f107 0214 	add.w	r2, r7, #20
 800d806:	ca06      	ldmia	r2, {r1, r2}
 800d808:	68f8      	ldr	r0, [r7, #12]
 800d80a:	f7f9 f92c 	bl	8006a66 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 800d80e:	68f8      	ldr	r0, [r7, #12]
 800d810:	3728      	adds	r7, #40	@ 0x28
 800d812:	46bd      	mov	sp, r7
 800d814:	bd80      	pop	{r7, pc}

0800d816 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>:
  operator T() const {
 800d816:	b580      	push	{r7, lr}
 800d818:	b082      	sub	sp, #8
 800d81a:	af00      	add	r7, sp, #0
 800d81c:	6078      	str	r0, [r7, #4]
    return as<T>();
 800d81e:	6878      	ldr	r0, [r7, #4]
 800d820:	f000 f90d 	bl	800da3e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIiEET_v>
 800d824:	4603      	mov	r3, r0
  }
 800d826:	4618      	mov	r0, r3
 800d828:	3708      	adds	r7, #8
 800d82a:	46bd      	mov	sp, r7
 800d82c:	bd80      	pop	{r7, pc}

0800d82e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 800d82e:	b580      	push	{r7, lr}
 800d830:	b08c      	sub	sp, #48	@ 0x30
 800d832:	af02      	add	r7, sp, #8
 800d834:	60f8      	str	r0, [r7, #12]
 800d836:	60b9      	str	r1, [r7, #8]
 800d838:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 800d83a:	68ba      	ldr	r2, [r7, #8]
 800d83c:	f107 0314 	add.w	r3, r7, #20
 800d840:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d844:	e883 0003 	stmia.w	r3, {r0, r1}
 800d848:	f107 031c 	add.w	r3, r7, #28
 800d84c:	6879      	ldr	r1, [r7, #4]
 800d84e:	4618      	mov	r0, r3
 800d850:	f7fe f8c6 	bl	800b9e0 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA11_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800d854:	466a      	mov	r2, sp
 800d856:	f107 0320 	add.w	r3, r7, #32
 800d85a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d85e:	e882 0003 	stmia.w	r2, {r0, r1}
 800d862:	69fb      	ldr	r3, [r7, #28]
 800d864:	f107 0214 	add.w	r2, r7, #20
 800d868:	ca06      	ldmia	r2, {r1, r2}
 800d86a:	68f8      	ldr	r0, [r7, #12]
 800d86c:	f7f9 f8fb 	bl	8006a66 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 800d870:	68f8      	ldr	r0, [r7, #12]
 800d872:	3728      	adds	r7, #40	@ 0x28
 800d874:	46bd      	mov	sp, r7
 800d876:	bd80      	pop	{r7, pc}

0800d878 <_ZSt11make_uniqueI5BlinkJRPKcRmRiEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800d878:	b5b0      	push	{r4, r5, r7, lr}
 800d87a:	b08c      	sub	sp, #48	@ 0x30
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	60f8      	str	r0, [r7, #12]
 800d880:	60b9      	str	r1, [r7, #8]
 800d882:	607a      	str	r2, [r7, #4]
 800d884:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800d886:	2024      	movs	r0, #36	@ 0x24
 800d888:	f016 faea 	bl	8023e60 <_Znwj>
 800d88c:	4603      	mov	r3, r0
 800d88e:	461d      	mov	r5, r3
 800d890:	68b8      	ldr	r0, [r7, #8]
 800d892:	f000 f8f6 	bl	800da82 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 800d896:	4603      	mov	r3, r0
 800d898:	681c      	ldr	r4, [r3, #0]
 800d89a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d89e:	4618      	mov	r0, r3
 800d8a0:	f016 faef 	bl	8023e82 <_ZNSaIcEC1Ev>
 800d8a4:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800d8a8:	f107 0314 	add.w	r3, r7, #20
 800d8ac:	4621      	mov	r1, r4
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	f7f8 fee4 	bl	800667c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800d8b4:	6878      	ldr	r0, [r7, #4]
 800d8b6:	f7fd ff48 	bl	800b74a <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	681c      	ldr	r4, [r3, #0]
 800d8be:	6838      	ldr	r0, [r7, #0]
 800d8c0:	f000 f8ea 	bl	800da98 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	f107 0114 	add.w	r1, r7, #20
 800d8cc:	4622      	mov	r2, r4
 800d8ce:	4628      	mov	r0, r5
 800d8d0:	f7ff ff10 	bl	800d6f4 <_ZN5BlinkC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmm>
 800d8d4:	4629      	mov	r1, r5
 800d8d6:	68f8      	ldr	r0, [r7, #12]
 800d8d8:	f000 f8f9 	bl	800dace <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800d8dc:	f107 0314 	add.w	r3, r7, #20
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	f016 fbac 	bl	802403e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800d8e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f016 faca 	bl	8023e84 <_ZNSaIcED1Ev>
 800d8f0:	bf00      	nop
 800d8f2:	68f8      	ldr	r0, [r7, #12]
 800d8f4:	3730      	adds	r7, #48	@ 0x30
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bdb0      	pop	{r4, r5, r7, pc}

0800d8fa <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800d8fa:	b590      	push	{r4, r7, lr}
 800d8fc:	b085      	sub	sp, #20
 800d8fe:	af00      	add	r7, sp, #0
 800d900:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	4618      	mov	r0, r3
 800d906:	f000 f8f1 	bl	800daec <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 800d90a:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d00c      	beq.n	800d92e <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800d914:	6878      	ldr	r0, [r7, #4]
 800d916:	f000 f8f6 	bl	800db06 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE11get_deleterEv>
 800d91a:	4604      	mov	r4, r0
 800d91c:	68f8      	ldr	r0, [r7, #12]
 800d91e:	f000 f8ff 	bl	800db20 <_ZSt4moveIRP5BlinkEONSt16remove_referenceIT_E4typeEOS4_>
 800d922:	4603      	mov	r3, r0
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	4619      	mov	r1, r3
 800d928:	4620      	mov	r0, r4
 800d92a:	f000 f92d 	bl	800db88 <_ZNKSt14default_deleteI5BlinkEclEPS0_>
	__ptr = pointer();
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	2200      	movs	r2, #0
 800d932:	601a      	str	r2, [r3, #0]
      }
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	4618      	mov	r0, r3
 800d938:	3714      	adds	r7, #20
 800d93a:	46bd      	mov	sp, r7
 800d93c:	bd90      	pop	{r4, r7, pc}

0800d93e <_ZNSt10shared_ptrI6ModuleEC1I5BlinkSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>:
	shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 800d93e:	b590      	push	{r4, r7, lr}
 800d940:	b083      	sub	sp, #12
 800d942:	af00      	add	r7, sp, #0
 800d944:	6078      	str	r0, [r7, #4]
 800d946:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 800d948:	687c      	ldr	r4, [r7, #4]
 800d94a:	6838      	ldr	r0, [r7, #0]
 800d94c:	f000 f92d 	bl	800dbaa <_ZSt4moveIRSt10unique_ptrI5BlinkSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800d950:	4603      	mov	r3, r0
 800d952:	4619      	mov	r1, r3
 800d954:	4620      	mov	r0, r4
 800d956:	f000 f933 	bl	800dbc0 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	4618      	mov	r0, r3
 800d95e:	370c      	adds	r7, #12
 800d960:	46bd      	mov	sp, r7
 800d962:	bd90      	pop	{r4, r7, pc}

0800d964 <_ZSt11make_uniqueI3PinJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800d964:	b5b0      	push	{r4, r5, r7, lr}
 800d966:	b084      	sub	sp, #16
 800d968:	af00      	add	r7, sp, #0
 800d96a:	60f8      	str	r0, [r7, #12]
 800d96c:	60b9      	str	r1, [r7, #8]
 800d96e:	607a      	str	r2, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800d970:	2040      	movs	r0, #64	@ 0x40
 800d972:	f016 fa75 	bl	8023e60 <_Znwj>
 800d976:	4603      	mov	r3, r0
 800d978:	461c      	mov	r4, r3
 800d97a:	68b8      	ldr	r0, [r7, #8]
 800d97c:	f000 f958 	bl	800dc30 <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800d980:	4605      	mov	r5, r0
 800d982:	6878      	ldr	r0, [r7, #4]
 800d984:	f000 f83d 	bl	800da02 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 800d988:	4603      	mov	r3, r0
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	461a      	mov	r2, r3
 800d98e:	4629      	mov	r1, r5
 800d990:	4620      	mov	r0, r4
 800d992:	f7f5 ff31 	bl	80037f8 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 800d996:	4621      	mov	r1, r4
 800d998:	68f8      	ldr	r0, [r7, #12]
 800d99a:	f000 f964 	bl	800dc66 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800d99e:	68f8      	ldr	r0, [r7, #12]
 800d9a0:	3710      	adds	r7, #16
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	bdb0      	pop	{r4, r5, r7, pc}

0800d9a6 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800d9a6:	b590      	push	{r4, r7, lr}
 800d9a8:	b085      	sub	sp, #20
 800d9aa:	af00      	add	r7, sp, #0
 800d9ac:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	f000 f967 	bl	800dc84 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>
 800d9b6:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d00c      	beq.n	800d9da <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800d9c0:	6878      	ldr	r0, [r7, #4]
 800d9c2:	f000 f96c 	bl	800dc9e <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EE11get_deleterEv>
 800d9c6:	4604      	mov	r4, r0
 800d9c8:	68f8      	ldr	r0, [r7, #12]
 800d9ca:	f000 f975 	bl	800dcb8 <_ZSt4moveIRP3PinEONSt16remove_referenceIT_E4typeEOS4_>
 800d9ce:	4603      	mov	r3, r0
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	4619      	mov	r1, r3
 800d9d4:	4620      	mov	r0, r4
 800d9d6:	f000 f987 	bl	800dce8 <_ZNKSt14default_deleteI3PinEclEPS0_>
	__ptr = pointer();
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	2200      	movs	r2, #0
 800d9de:	601a      	str	r2, [r3, #0]
      }
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	3714      	adds	r7, #20
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	bd90      	pop	{r4, r7, pc}

0800d9ea <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800d9ea:	b580      	push	{r7, lr}
 800d9ec:	b082      	sub	sp, #8
 800d9ee:	af00      	add	r7, sp, #0
 800d9f0:	6078      	str	r0, [r7, #4]
	return get();
 800d9f2:	6878      	ldr	r0, [r7, #4]
 800d9f4:	f000 f98b 	bl	800dd0e <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EE3getEv>
 800d9f8:	4603      	mov	r3, r0
      }
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	3708      	adds	r7, #8
 800d9fe:	46bd      	mov	sp, r7
 800da00:	bd80      	pop	{r7, pc}

0800da02 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800da02:	b480      	push	{r7}
 800da04:	b083      	sub	sp, #12
 800da06:	af00      	add	r7, sp, #0
 800da08:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	4618      	mov	r0, r3
 800da0e:	370c      	adds	r7, #12
 800da10:	46bd      	mov	sp, r7
 800da12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da16:	4770      	bx	lr

0800da18 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA4_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 800da18:	b580      	push	{r7, lr}
 800da1a:	b082      	sub	sp, #8
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
 800da20:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800da22:	6838      	ldr	r0, [r7, #0]
 800da24:	f000 f980 	bl	800dd28 <_ZN11ArduinoJson8V730HB226detail7forwardIRA4_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 800da28:	4602      	mov	r2, r0
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	4611      	mov	r1, r2
 800da2e:	4618      	mov	r0, r3
 800da30:	f000 f985 	bl	800dd3e <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA4_KcvE5adaptES5_>
 800da34:	bf00      	nop
}
 800da36:	6878      	ldr	r0, [r7, #4]
 800da38:	3708      	adds	r7, #8
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd80      	pop	{r7, pc}

0800da3e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIiEET_v>:
  return add<JsonVariant>();
}

template <typename TDerived>
template <typename T>
inline T VariantRefBase<TDerived>::as() const {
 800da3e:	b590      	push	{r4, r7, lr}
 800da40:	b087      	sub	sp, #28
 800da42:	af00      	add	r7, sp, #0
 800da44:	6078      	str	r0, [r7, #4]
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	617b      	str	r3, [r7, #20]
 800da4a:	697b      	ldr	r3, [r7, #20]
 800da4c:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 800da4e:	6938      	ldr	r0, [r7, #16]
 800da50:	f7f9 ff1b 	bl	800788a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 800da54:	4604      	mov	r4, r0
 800da56:	6938      	ldr	r0, [r7, #16]
 800da58:	f7f9 fda5 	bl	80075a6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 800da5c:	4602      	mov	r2, r0
 800da5e:	f107 0308 	add.w	r3, r7, #8
 800da62:	4621      	mov	r1, r4
 800da64:	4618      	mov	r0, r3
 800da66:	f7f6 fe40 	bl	80046ea <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 800da6a:	bf00      	nop
  using variant_type =  // JsonVariantConst or JsonVariant?
      typename function_traits<decltype(&Converter<T>::fromJson)>::arg1_type;
  return Converter<T>::fromJson(getVariant<variant_type>());
 800da6c:	f107 0308 	add.w	r3, r7, #8
 800da70:	e893 0003 	ldmia.w	r3, {r0, r1}
 800da74:	f000 f972 	bl	800dd5c <_ZN11ArduinoJson8V730HB229ConverterIivE8fromJsonENS0_16JsonVariantConstE>
 800da78:	4603      	mov	r3, r0
}
 800da7a:	4618      	mov	r0, r3
 800da7c:	371c      	adds	r7, #28
 800da7e:	46bd      	mov	sp, r7
 800da80:	bd90      	pop	{r4, r7, pc}

0800da82 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800da82:	b480      	push	{r7}
 800da84:	b083      	sub	sp, #12
 800da86:	af00      	add	r7, sp, #0
 800da88:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	4618      	mov	r0, r3
 800da8e:	370c      	adds	r7, #12
 800da90:	46bd      	mov	sp, r7
 800da92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da96:	4770      	bx	lr

0800da98 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800da98:	b480      	push	{r7}
 800da9a:	b083      	sub	sp, #12
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	4618      	mov	r0, r3
 800daa4:	370c      	adds	r7, #12
 800daa6:	46bd      	mov	sp, r7
 800daa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daac:	4770      	bx	lr

0800daae <_ZNSt15__uniq_ptr_dataI5BlinkSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800daae:	b580      	push	{r7, lr}
 800dab0:	b082      	sub	sp, #8
 800dab2:	af00      	add	r7, sp, #0
 800dab4:	6078      	str	r0, [r7, #4]
 800dab6:	6039      	str	r1, [r7, #0]
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	683a      	ldr	r2, [r7, #0]
 800dabc:	4611      	mov	r1, r2
 800dabe:	4618      	mov	r0, r3
 800dac0:	f000 f96a 	bl	800dd98 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EEC1EPS0_>
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	4618      	mov	r0, r3
 800dac8:	3708      	adds	r7, #8
 800daca:	46bd      	mov	sp, r7
 800dacc:	bd80      	pop	{r7, pc}

0800dace <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800dace:	b580      	push	{r7, lr}
 800dad0:	b082      	sub	sp, #8
 800dad2:	af00      	add	r7, sp, #0
 800dad4:	6078      	str	r0, [r7, #4]
 800dad6:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	6839      	ldr	r1, [r7, #0]
 800dadc:	4618      	mov	r0, r3
 800dade:	f7ff ffe6 	bl	800daae <_ZNSt15__uniq_ptr_dataI5BlinkSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	4618      	mov	r0, r3
 800dae6:	3708      	adds	r7, #8
 800dae8:	46bd      	mov	sp, r7
 800daea:	bd80      	pop	{r7, pc}

0800daec <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800daec:	b580      	push	{r7, lr}
 800daee:	b082      	sub	sp, #8
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	4618      	mov	r0, r3
 800daf8:	f000 f962 	bl	800ddc0 <_ZSt3getILj0EJP5BlinkSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800dafc:	4603      	mov	r3, r0
 800dafe:	4618      	mov	r0, r3
 800db00:	3708      	adds	r7, #8
 800db02:	46bd      	mov	sp, r7
 800db04:	bd80      	pop	{r7, pc}

0800db06 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800db06:	b580      	push	{r7, lr}
 800db08:	b082      	sub	sp, #8
 800db0a:	af00      	add	r7, sp, #0
 800db0c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	4618      	mov	r0, r3
 800db12:	f000 f962 	bl	800ddda <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE10_M_deleterEv>
 800db16:	4603      	mov	r3, r0
 800db18:	4618      	mov	r0, r3
 800db1a:	3708      	adds	r7, #8
 800db1c:	46bd      	mov	sp, r7
 800db1e:	bd80      	pop	{r7, pc}

0800db20 <_ZSt4moveIRP5BlinkEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800db20:	b480      	push	{r7}
 800db22:	b083      	sub	sp, #12
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	4618      	mov	r0, r3
 800db2c:	370c      	adds	r7, #12
 800db2e:	46bd      	mov	sp, r7
 800db30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db34:	4770      	bx	lr
	...

0800db38 <_ZN5BlinkD1Ev>:
 * @class Blink
 * @brief A module for toggling a pin at a specific frequency.
 * 
 * The Blink class controls a GPIO pin, toggling its state at a specified frequency.
 */
class Blink : public Module
 800db38:	b580      	push	{r7, lr}
 800db3a:	b082      	sub	sp, #8
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
 800db40:	4a08      	ldr	r2, [pc, #32]	@ (800db64 <_ZN5BlinkD1Ev+0x2c>)
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	601a      	str	r2, [r3, #0]
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	3320      	adds	r3, #32
 800db4a:	4618      	mov	r0, r3
 800db4c:	f7ff ff2b 	bl	800d9a6 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EED1Ev>
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	4618      	mov	r0, r3
 800db54:	f002 fbea 	bl	801032c <_ZN6ModuleD1Ev>
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	4618      	mov	r0, r3
 800db5c:	3708      	adds	r7, #8
 800db5e:	46bd      	mov	sp, r7
 800db60:	bd80      	pop	{r7, pc}
 800db62:	bf00      	nop
 800db64:	0802677c 	.word	0x0802677c

0800db68 <_ZN5BlinkD0Ev>:
 800db68:	b580      	push	{r7, lr}
 800db6a:	b082      	sub	sp, #8
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
 800db70:	6878      	ldr	r0, [r7, #4]
 800db72:	f7ff ffe1 	bl	800db38 <_ZN5BlinkD1Ev>
 800db76:	2124      	movs	r1, #36	@ 0x24
 800db78:	6878      	ldr	r0, [r7, #4]
 800db7a:	f016 f960 	bl	8023e3e <_ZdlPvj>
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	4618      	mov	r0, r3
 800db82:	3708      	adds	r7, #8
 800db84:	46bd      	mov	sp, r7
 800db86:	bd80      	pop	{r7, pc}

0800db88 <_ZNKSt14default_deleteI5BlinkEclEPS0_>:
      operator()(_Tp* __ptr) const
 800db88:	b580      	push	{r7, lr}
 800db8a:	b082      	sub	sp, #8
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
 800db90:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800db92:	683b      	ldr	r3, [r7, #0]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d004      	beq.n	800dba2 <_ZNKSt14default_deleteI5BlinkEclEPS0_+0x1a>
 800db98:	681a      	ldr	r2, [r3, #0]
 800db9a:	3204      	adds	r2, #4
 800db9c:	6812      	ldr	r2, [r2, #0]
 800db9e:	4618      	mov	r0, r3
 800dba0:	4790      	blx	r2
      }
 800dba2:	bf00      	nop
 800dba4:	3708      	adds	r7, #8
 800dba6:	46bd      	mov	sp, r7
 800dba8:	bd80      	pop	{r7, pc}

0800dbaa <_ZSt4moveIRSt10unique_ptrI5BlinkSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800dbaa:	b480      	push	{r7}
 800dbac:	b083      	sub	sp, #12
 800dbae:	af00      	add	r7, sp, #0
 800dbb0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	370c      	adds	r7, #12
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbbe:	4770      	bx	lr

0800dbc0 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>:
	__shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b084      	sub	sp, #16
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
 800dbc8:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r.get()), _M_refcount()
 800dbca:	6838      	ldr	r0, [r7, #0]
 800dbcc:	f000 f912 	bl	800ddf4 <_ZNKSt10unique_ptrI5BlinkSt14default_deleteIS0_EE3getEv>
 800dbd0:	4602      	mov	r2, r0
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	601a      	str	r2, [r3, #0]
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	3304      	adds	r3, #4
 800dbda:	4618      	mov	r0, r3
 800dbdc:	f7fd ffad 	bl	800bb3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  auto __raw = __to_address(__r.get());
 800dbe0:	6838      	ldr	r0, [r7, #0]
 800dbe2:	f000 f907 	bl	800ddf4 <_ZNKSt10unique_ptrI5BlinkSt14default_deleteIS0_EE3getEv>
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	4618      	mov	r0, r3
 800dbea:	f000 f910 	bl	800de0e <_ZSt12__to_addressI5BlinkEPT_S2_>
 800dbee:	60f8      	str	r0, [r7, #12]
	  _M_refcount = __shared_count<_Lp>(std::move(__r));
 800dbf0:	6838      	ldr	r0, [r7, #0]
 800dbf2:	f7ff ffda 	bl	800dbaa <_ZSt4moveIRSt10unique_ptrI5BlinkSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800dbf6:	4602      	mov	r2, r0
 800dbf8:	f107 0308 	add.w	r3, r7, #8
 800dbfc:	4611      	mov	r1, r2
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f000 f910 	bl	800de24 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	3304      	adds	r3, #4
 800dc08:	f107 0208 	add.w	r2, r7, #8
 800dc0c:	4611      	mov	r1, r2
 800dc0e:	4618      	mov	r0, r3
 800dc10:	f000 f94a 	bl	800dea8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 800dc14:	f107 0308 	add.w	r3, r7, #8
 800dc18:	4618      	mov	r0, r3
 800dc1a:	f7fc ff5e 	bl	800aada <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  _M_enable_shared_from_this_with(__raw);
 800dc1e:	68f9      	ldr	r1, [r7, #12]
 800dc20:	6878      	ldr	r0, [r7, #4]
 800dc22:	f000 f965 	bl	800def0 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI5BlinkS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	4618      	mov	r0, r3
 800dc2a:	3710      	adds	r7, #16
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd80      	pop	{r7, pc}

0800dc30 <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800dc30:	b480      	push	{r7}
 800dc32:	b083      	sub	sp, #12
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	370c      	adds	r7, #12
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc44:	4770      	bx	lr

0800dc46 <_ZNSt15__uniq_ptr_dataI3PinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800dc46:	b580      	push	{r7, lr}
 800dc48:	b082      	sub	sp, #8
 800dc4a:	af00      	add	r7, sp, #0
 800dc4c:	6078      	str	r0, [r7, #4]
 800dc4e:	6039      	str	r1, [r7, #0]
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	683a      	ldr	r2, [r7, #0]
 800dc54:	4611      	mov	r1, r2
 800dc56:	4618      	mov	r0, r3
 800dc58:	f000 f955 	bl	800df06 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EEC1EPS0_>
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	4618      	mov	r0, r3
 800dc60:	3708      	adds	r7, #8
 800dc62:	46bd      	mov	sp, r7
 800dc64:	bd80      	pop	{r7, pc}

0800dc66 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800dc66:	b580      	push	{r7, lr}
 800dc68:	b082      	sub	sp, #8
 800dc6a:	af00      	add	r7, sp, #0
 800dc6c:	6078      	str	r0, [r7, #4]
 800dc6e:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	6839      	ldr	r1, [r7, #0]
 800dc74:	4618      	mov	r0, r3
 800dc76:	f7ff ffe6 	bl	800dc46 <_ZNSt15__uniq_ptr_dataI3PinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	3708      	adds	r7, #8
 800dc80:	46bd      	mov	sp, r7
 800dc82:	bd80      	pop	{r7, pc}

0800dc84 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b082      	sub	sp, #8
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	4618      	mov	r0, r3
 800dc90:	f000 f94d 	bl	800df2e <_ZSt3getILj0EJP3PinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800dc94:	4603      	mov	r3, r0
 800dc96:	4618      	mov	r0, r3
 800dc98:	3708      	adds	r7, #8
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	bd80      	pop	{r7, pc}

0800dc9e <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800dc9e:	b580      	push	{r7, lr}
 800dca0:	b082      	sub	sp, #8
 800dca2:	af00      	add	r7, sp, #0
 800dca4:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	4618      	mov	r0, r3
 800dcaa:	f000 f94d 	bl	800df48 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE10_M_deleterEv>
 800dcae:	4603      	mov	r3, r0
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	3708      	adds	r7, #8
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bd80      	pop	{r7, pc}

0800dcb8 <_ZSt4moveIRP3PinEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800dcb8:	b480      	push	{r7}
 800dcba:	b083      	sub	sp, #12
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	370c      	adds	r7, #12
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dccc:	4770      	bx	lr

0800dcce <_ZN3PinD1Ev>:
#define OPENDRAIN   0b001
#define PULLUP      0b010
#define PULLDOWN    0b011
#define PULLNONE    0b100

class Pin {
 800dcce:	b580      	push	{r7, lr}
 800dcd0:	b082      	sub	sp, #8
 800dcd2:	af00      	add	r7, sp, #0
 800dcd4:	6078      	str	r0, [r7, #4]
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	4618      	mov	r0, r3
 800dcda:	f016 f9b0 	bl	802403e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	4618      	mov	r0, r3
 800dce2:	3708      	adds	r7, #8
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bd80      	pop	{r7, pc}

0800dce8 <_ZNKSt14default_deleteI3PinEclEPS0_>:
      operator()(_Tp* __ptr) const
 800dce8:	b590      	push	{r4, r7, lr}
 800dcea:	b083      	sub	sp, #12
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
 800dcf0:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800dcf2:	683c      	ldr	r4, [r7, #0]
 800dcf4:	2c00      	cmp	r4, #0
 800dcf6:	d006      	beq.n	800dd06 <_ZNKSt14default_deleteI3PinEclEPS0_+0x1e>
 800dcf8:	4620      	mov	r0, r4
 800dcfa:	f7ff ffe8 	bl	800dcce <_ZN3PinD1Ev>
 800dcfe:	2140      	movs	r1, #64	@ 0x40
 800dd00:	4620      	mov	r0, r4
 800dd02:	f016 f89c 	bl	8023e3e <_ZdlPvj>
      }
 800dd06:	bf00      	nop
 800dd08:	370c      	adds	r7, #12
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	bd90      	pop	{r4, r7, pc}

0800dd0e <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800dd0e:	b580      	push	{r7, lr}
 800dd10:	b082      	sub	sp, #8
 800dd12:	af00      	add	r7, sp, #0
 800dd14:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	4618      	mov	r0, r3
 800dd1a:	f000 f922 	bl	800df62 <_ZNKSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>
 800dd1e:	4603      	mov	r3, r0
 800dd20:	4618      	mov	r0, r3
 800dd22:	3708      	adds	r7, #8
 800dd24:	46bd      	mov	sp, r7
 800dd26:	bd80      	pop	{r7, pc}

0800dd28 <_ZN11ArduinoJson8V730HB226detail7forwardIRA4_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800dd28:	b480      	push	{r7}
 800dd2a:	b083      	sub	sp, #12
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800dd30:	687b      	ldr	r3, [r7, #4]
}
 800dd32:	4618      	mov	r0, r3
 800dd34:	370c      	adds	r7, #12
 800dd36:	46bd      	mov	sp, r7
 800dd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3c:	4770      	bx	lr

0800dd3e <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA4_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 800dd3e:	b580      	push	{r7, lr}
 800dd40:	b082      	sub	sp, #8
 800dd42:	af00      	add	r7, sp, #0
 800dd44:	6078      	str	r0, [r7, #4]
 800dd46:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800dd48:	2301      	movs	r3, #1
 800dd4a:	2203      	movs	r2, #3
 800dd4c:	6839      	ldr	r1, [r7, #0]
 800dd4e:	6878      	ldr	r0, [r7, #4]
 800dd50:	f7f6 f904 	bl	8003f5c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800dd54:	6878      	ldr	r0, [r7, #4]
 800dd56:	3708      	adds	r7, #8
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	bd80      	pop	{r7, pc}

0800dd5c <_ZN11ArduinoJson8V730HB229ConverterIivE8fromJsonENS0_16JsonVariantConstE>:
    auto resources = getResourceManager(dst);
    data->clear(resources);
    return data->setInteger(src, resources);
  }

  static T fromJson(JsonVariantConst src) {
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b084      	sub	sp, #16
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	463b      	mov	r3, r7
 800dd64:	e883 0003 	stmia.w	r3, {r0, r1}
    ARDUINOJSON_ASSERT_INTEGER_TYPE_IS_SUPPORTED(T);
    auto data = getData(src);
 800dd68:	463b      	mov	r3, r7
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	f7f8 fa3c 	bl	80061e8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 800dd70:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 800dd72:	463b      	mov	r3, r7
 800dd74:	4618      	mov	r0, r3
 800dd76:	f7f8 fa43 	bl	8006200 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 800dd7a:	60b8      	str	r0, [r7, #8]
    return data ? data->template asIntegral<T>(resources) : T();
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d005      	beq.n	800dd8e <_ZN11ArduinoJson8V730HB229ConverterIivE8fromJsonENS0_16JsonVariantConstE+0x32>
 800dd82:	68b9      	ldr	r1, [r7, #8]
 800dd84:	68f8      	ldr	r0, [r7, #12]
 800dd86:	f000 f8fb 	bl	800df80 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE>
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	e000      	b.n	800dd90 <_ZN11ArduinoJson8V730HB229ConverterIivE8fromJsonENS0_16JsonVariantConstE+0x34>
 800dd8e:	2300      	movs	r3, #0
  }
 800dd90:	4618      	mov	r0, r3
 800dd92:	3710      	adds	r7, #16
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bd80      	pop	{r7, pc}

0800dd98 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800dd98:	b590      	push	{r4, r7, lr}
 800dd9a:	b083      	sub	sp, #12
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
 800dda0:	6039      	str	r1, [r7, #0]
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	4618      	mov	r0, r3
 800dda6:	f000 f97d 	bl	800e0a4 <_ZNSt5tupleIJP5BlinkSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800ddaa:	683c      	ldr	r4, [r7, #0]
 800ddac:	6878      	ldr	r0, [r7, #4]
 800ddae:	f7ff fe9d 	bl	800daec <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	601c      	str	r4, [r3, #0]
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	4618      	mov	r0, r3
 800ddba:	370c      	adds	r7, #12
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	bd90      	pop	{r4, r7, pc}

0800ddc0 <_ZSt3getILj0EJP5BlinkSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b082      	sub	sp, #8
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	4618      	mov	r0, r3
 800ddcc:	f000 f977 	bl	800e0be <_ZSt12__get_helperILj0EP5BlinkJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800ddd0:	4603      	mov	r3, r0
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	3708      	adds	r7, #8
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	bd80      	pop	{r7, pc}

0800ddda <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800ddda:	b580      	push	{r7, lr}
 800dddc:	b082      	sub	sp, #8
 800ddde:	af00      	add	r7, sp, #0
 800dde0:	6078      	str	r0, [r7, #4]
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	4618      	mov	r0, r3
 800dde6:	f000 f976 	bl	800e0d6 <_ZSt3getILj1EJP5BlinkSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800ddea:	4603      	mov	r3, r0
 800ddec:	4618      	mov	r0, r3
 800ddee:	3708      	adds	r7, #8
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	bd80      	pop	{r7, pc}

0800ddf4 <_ZNKSt10unique_ptrI5BlinkSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b082      	sub	sp, #8
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	4618      	mov	r0, r3
 800de00:	f000 f975 	bl	800e0ee <_ZNKSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 800de04:	4603      	mov	r3, r0
 800de06:	4618      	mov	r0, r3
 800de08:	3708      	adds	r7, #8
 800de0a:	46bd      	mov	sp, r7
 800de0c:	bd80      	pop	{r7, pc}

0800de0e <_ZSt12__to_addressI5BlinkEPT_S2_>:
    __to_address(_Tp* __ptr) noexcept
 800de0e:	b480      	push	{r7}
 800de10:	b083      	sub	sp, #12
 800de12:	af00      	add	r7, sp, #0
 800de14:	6078      	str	r0, [r7, #4]
      return __ptr;
 800de16:	687b      	ldr	r3, [r7, #4]
    }
 800de18:	4618      	mov	r0, r3
 800de1a:	370c      	adds	r7, #12
 800de1c:	46bd      	mov	sp, r7
 800de1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de22:	4770      	bx	lr

0800de24 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>:
	__shared_count(std::unique_ptr<_Tp, _Del>&& __r) : _M_pi(0)
 800de24:	b580      	push	{r7, lr}
 800de26:	b086      	sub	sp, #24
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
 800de2c:	6039      	str	r1, [r7, #0]
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	2200      	movs	r2, #0
 800de32:	601a      	str	r2, [r3, #0]
	  if (__r.get() == nullptr)
 800de34:	6838      	ldr	r0, [r7, #0]
 800de36:	f7ff ffdd 	bl	800ddf4 <_ZNKSt10unique_ptrI5BlinkSt14default_deleteIS0_EE3getEv>
 800de3a:	4603      	mov	r3, r0
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	bf0c      	ite	eq
 800de40:	2301      	moveq	r3, #1
 800de42:	2300      	movne	r3, #0
 800de44:	b2db      	uxtb	r3, r3
 800de46:	2b00      	cmp	r3, #0
 800de48:	d128      	bne.n	800de9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x78>
	  _Alloc __a;
 800de4a:	f107 030c 	add.w	r3, r7, #12
 800de4e:	4618      	mov	r0, r3
 800de50:	f000 f95b 	bl	800e10a <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
	  _Sp_cd_type* __mem = _Alloc_traits::allocate(__a, 1);
 800de54:	f107 030c 	add.w	r3, r7, #12
 800de58:	2101      	movs	r1, #1
 800de5a:	4618      	mov	r0, r3
 800de5c:	f000 f96d 	bl	800e13a <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>
 800de60:	6178      	str	r0, [r7, #20]
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 800de62:	6838      	ldr	r0, [r7, #0]
 800de64:	f000 f978 	bl	800e158 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE7releaseEv>
 800de68:	4603      	mov	r3, r0
 800de6a:	613b      	str	r3, [r7, #16]
				   std::forward<_Del>(__r.get_deleter()));
 800de6c:	6838      	ldr	r0, [r7, #0]
 800de6e:	f7ff fe4a 	bl	800db06 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE11get_deleterEv>
 800de72:	4603      	mov	r3, r0
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 800de74:	4618      	mov	r0, r3
 800de76:	f000 f97c 	bl	800e172 <_ZSt7forwardISt14default_deleteI5BlinkEEOT_RNSt16remove_referenceIS3_E4typeE>
 800de7a:	4603      	mov	r3, r0
 800de7c:	f107 0210 	add.w	r2, r7, #16
 800de80:	f107 000c 	add.w	r0, r7, #12
 800de84:	6979      	ldr	r1, [r7, #20]
 800de86:	f000 f97f 	bl	800e188 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>
	  _M_pi = __mem;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	697a      	ldr	r2, [r7, #20]
 800de8e:	601a      	str	r2, [r3, #0]
	}
 800de90:	f107 030c 	add.w	r3, r7, #12
 800de94:	4618      	mov	r0, r3
 800de96:	f000 f944 	bl	800e122 <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800de9a:	e000      	b.n	800de9e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x7a>
	    return;
 800de9c:	bf00      	nop
	}
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	4618      	mov	r0, r3
 800dea2:	3718      	adds	r7, #24
 800dea4:	46bd      	mov	sp, r7
 800dea6:	bd80      	pop	{r7, pc}

0800dea8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
      operator=(const __shared_count& __r) noexcept
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b084      	sub	sp, #16
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
 800deb0:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 800deb2:	683b      	ldr	r3, [r7, #0]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	60fb      	str	r3, [r7, #12]
	if (__tmp != _M_pi)
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	68fa      	ldr	r2, [r7, #12]
 800debe:	429a      	cmp	r2, r3
 800dec0:	d011      	beq.n	800dee6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x3e>
	    if (__tmp != nullptr)
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d002      	beq.n	800dece <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	      __tmp->_M_add_ref_copy();
 800dec8:	68f8      	ldr	r0, [r7, #12]
 800deca:	f7fb fc25 	bl	8009718 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>
	    if (_M_pi != nullptr)
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d004      	beq.n	800dee0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x38>
	      _M_pi->_M_release();
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	4618      	mov	r0, r3
 800dedc:	f7fb fc2b 	bl	8009736 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	68fa      	ldr	r2, [r7, #12]
 800dee4:	601a      	str	r2, [r3, #0]
	return *this;
 800dee6:	687b      	ldr	r3, [r7, #4]
      }
 800dee8:	4618      	mov	r0, r3
 800deea:	3710      	adds	r7, #16
 800deec:	46bd      	mov	sp, r7
 800deee:	bd80      	pop	{r7, pc}

0800def0 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI5BlinkS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 800def0:	b480      	push	{r7}
 800def2:	b083      	sub	sp, #12
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
 800def8:	6039      	str	r1, [r7, #0]
	{ }
 800defa:	bf00      	nop
 800defc:	370c      	adds	r7, #12
 800defe:	46bd      	mov	sp, r7
 800df00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df04:	4770      	bx	lr

0800df06 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800df06:	b590      	push	{r4, r7, lr}
 800df08:	b083      	sub	sp, #12
 800df0a:	af00      	add	r7, sp, #0
 800df0c:	6078      	str	r0, [r7, #4]
 800df0e:	6039      	str	r1, [r7, #0]
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	4618      	mov	r0, r3
 800df14:	f000 f950 	bl	800e1b8 <_ZNSt5tupleIJP3PinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800df18:	683c      	ldr	r4, [r7, #0]
 800df1a:	6878      	ldr	r0, [r7, #4]
 800df1c:	f7ff feb2 	bl	800dc84 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>
 800df20:	4603      	mov	r3, r0
 800df22:	601c      	str	r4, [r3, #0]
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	4618      	mov	r0, r3
 800df28:	370c      	adds	r7, #12
 800df2a:	46bd      	mov	sp, r7
 800df2c:	bd90      	pop	{r4, r7, pc}

0800df2e <_ZSt3getILj0EJP3PinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800df2e:	b580      	push	{r7, lr}
 800df30:	b082      	sub	sp, #8
 800df32:	af00      	add	r7, sp, #0
 800df34:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	4618      	mov	r0, r3
 800df3a:	f000 f94a 	bl	800e1d2 <_ZSt12__get_helperILj0EP3PinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800df3e:	4603      	mov	r3, r0
 800df40:	4618      	mov	r0, r3
 800df42:	3708      	adds	r7, #8
 800df44:	46bd      	mov	sp, r7
 800df46:	bd80      	pop	{r7, pc}

0800df48 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800df48:	b580      	push	{r7, lr}
 800df4a:	b082      	sub	sp, #8
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	4618      	mov	r0, r3
 800df54:	f000 f949 	bl	800e1ea <_ZSt3getILj1EJP3PinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800df58:	4603      	mov	r3, r0
 800df5a:	4618      	mov	r0, r3
 800df5c:	3708      	adds	r7, #8
 800df5e:	46bd      	mov	sp, r7
 800df60:	bd80      	pop	{r7, pc}

0800df62 <_ZNKSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800df62:	b580      	push	{r7, lr}
 800df64:	b082      	sub	sp, #8
 800df66:	af00      	add	r7, sp, #0
 800df68:	6078      	str	r0, [r7, #4]
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	4618      	mov	r0, r3
 800df6e:	f000 f948 	bl	800e202 <_ZSt3getILj0EJP3PinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800df72:	4603      	mov	r3, r0
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	4618      	mov	r0, r3
 800df78:	3708      	adds	r7, #8
 800df7a:	46bd      	mov	sp, r7
 800df7c:	bd80      	pop	{r7, pc}
	...

0800df80 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE>:
  T asIntegral(const ResourceManager* resources) const {
 800df80:	b580      	push	{r7, lr}
 800df82:	b084      	sub	sp, #16
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
 800df88:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 800df8a:	6839      	ldr	r1, [r7, #0]
 800df8c:	6878      	ldr	r0, [r7, #4]
 800df8e:	f7f7 f941 	bl	8005214 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 800df92:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	791b      	ldrb	r3, [r3, #4]
 800df98:	3b04      	subs	r3, #4
 800df9a:	2b1a      	cmp	r3, #26
 800df9c:	d87c      	bhi.n	800e098 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x118>
 800df9e:	a201      	add	r2, pc, #4	@ (adr r2, 800dfa4 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x24>)
 800dfa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfa4:	0800e057 	.word	0x0800e057
 800dfa8:	0800e065 	.word	0x0800e065
 800dfac:	0800e011 	.word	0x0800e011
 800dfb0:	0800e099 	.word	0x0800e099
 800dfb4:	0800e099 	.word	0x0800e099
 800dfb8:	0800e099 	.word	0x0800e099
 800dfbc:	0800e017 	.word	0x0800e017
 800dfc0:	0800e099 	.word	0x0800e099
 800dfc4:	0800e025 	.word	0x0800e025
 800dfc8:	0800e099 	.word	0x0800e099
 800dfcc:	0800e075 	.word	0x0800e075
 800dfd0:	0800e099 	.word	0x0800e099
 800dfd4:	0800e099 	.word	0x0800e099
 800dfd8:	0800e099 	.word	0x0800e099
 800dfdc:	0800e099 	.word	0x0800e099
 800dfe0:	0800e099 	.word	0x0800e099
 800dfe4:	0800e099 	.word	0x0800e099
 800dfe8:	0800e099 	.word	0x0800e099
 800dfec:	0800e099 	.word	0x0800e099
 800dff0:	0800e099 	.word	0x0800e099
 800dff4:	0800e099 	.word	0x0800e099
 800dff8:	0800e099 	.word	0x0800e099
 800dffc:	0800e033 	.word	0x0800e033
 800e000:	0800e099 	.word	0x0800e099
 800e004:	0800e045 	.word	0x0800e045
 800e008:	0800e099 	.word	0x0800e099
 800e00c:	0800e087 	.word	0x0800e087
        return content_.asBoolean;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	781b      	ldrb	r3, [r3, #0]
 800e014:	e041      	b.n	800e09a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asUint32);
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	4618      	mov	r0, r3
 800e01c:	f000 f8fe 	bl	800e21c <_ZN11ArduinoJson8V730HB226detail13convertNumberIimEET_T0_>
 800e020:	4603      	mov	r3, r0
 800e022:	e03a      	b.n	800e09a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asInt32);
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	4618      	mov	r0, r3
 800e02a:	f000 f908 	bl	800e23e <_ZN11ArduinoJson8V730HB226detail13convertNumberIilEET_T0_>
 800e02e:	4603      	mov	r3, r0
 800e030:	e033      	b.n	800e09a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asUint64);
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e038:	4610      	mov	r0, r2
 800e03a:	4619      	mov	r1, r3
 800e03c:	f000 f910 	bl	800e260 <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_>
 800e040:	4603      	mov	r3, r0
 800e042:	e02a      	b.n	800e09a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asInt64);
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e04a:	4610      	mov	r0, r2
 800e04c:	4619      	mov	r1, r3
 800e04e:	f000 f91a 	bl	800e286 <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_>
 800e052:	4603      	mov	r3, r0
 800e054:	e021      	b.n	800e09a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asLinkedString);
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	4618      	mov	r0, r3
 800e05c:	f000 f926 	bl	800e2ac <_ZN11ArduinoJson8V730HB226detail11parseNumberIiEET_PKc>
 800e060:	4603      	mov	r3, r0
 800e062:	e01a      	b.n	800e09a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asOwnedString->data);
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	3308      	adds	r3, #8
 800e06a:	4618      	mov	r0, r3
 800e06c:	f000 f91e 	bl	800e2ac <_ZN11ArduinoJson8V730HB226detail11parseNumberIiEET_PKc>
 800e070:	4603      	mov	r3, r0
 800e072:	e012      	b.n	800e09a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asFloat);
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	edd3 7a00 	vldr	s15, [r3]
 800e07a:	eeb0 0a67 	vmov.f32	s0, s15
 800e07e:	f000 f929 	bl	800e2d4 <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_>
 800e082:	4603      	mov	r3, r0
 800e084:	e009      	b.n	800e09a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asDouble);
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	ed93 7b00 	vldr	d7, [r3]
 800e08c:	eeb0 0b47 	vmov.f64	d0, d7
 800e090:	f000 f938 	bl	800e304 <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_>
 800e094:	4603      	mov	r3, r0
 800e096:	e000      	b.n	800e09a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return 0;
 800e098:	2300      	movs	r3, #0
  }
 800e09a:	4618      	mov	r0, r3
 800e09c:	3710      	adds	r7, #16
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	bd80      	pop	{r7, pc}
 800e0a2:	bf00      	nop

0800e0a4 <_ZNSt5tupleIJP5BlinkSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b082      	sub	sp, #8
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	f000 f940 	bl	800e334 <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEEC1Ev>
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	3708      	adds	r7, #8
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	bd80      	pop	{r7, pc}

0800e0be <_ZSt12__get_helperILj0EP5BlinkJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e0be:	b580      	push	{r7, lr}
 800e0c0:	b082      	sub	sp, #8
 800e0c2:	af00      	add	r7, sp, #0
 800e0c4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e0c6:	6878      	ldr	r0, [r7, #4]
 800e0c8:	f000 f944 	bl	800e354 <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEE7_M_headERS4_>
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	3708      	adds	r7, #8
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	bd80      	pop	{r7, pc}

0800e0d6 <_ZSt3getILj1EJP5BlinkSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800e0d6:	b580      	push	{r7, lr}
 800e0d8:	b082      	sub	sp, #8
 800e0da:	af00      	add	r7, sp, #0
 800e0dc:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800e0de:	6878      	ldr	r0, [r7, #4]
 800e0e0:	f000 f945 	bl	800e36e <_ZSt12__get_helperILj1ESt14default_deleteI5BlinkEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800e0e4:	4603      	mov	r3, r0
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	3708      	adds	r7, #8
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	bd80      	pop	{r7, pc}

0800e0ee <_ZNKSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>:
 800e0ee:	b580      	push	{r7, lr}
 800e0f0:	b082      	sub	sp, #8
 800e0f2:	af00      	add	r7, sp, #0
 800e0f4:	6078      	str	r0, [r7, #4]
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	f000 f944 	bl	800e386 <_ZSt3getILj0EJP5BlinkSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800e0fe:	4603      	mov	r3, r0
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	4618      	mov	r0, r3
 800e104:	3708      	adds	r7, #8
 800e106:	46bd      	mov	sp, r7
 800e108:	bd80      	pop	{r7, pc}

0800e10a <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800e10a:	b580      	push	{r7, lr}
 800e10c:	b082      	sub	sp, #8
 800e10e:	af00      	add	r7, sp, #0
 800e110:	6078      	str	r0, [r7, #4]
 800e112:	6878      	ldr	r0, [r7, #4]
 800e114:	f000 f944 	bl	800e3a0 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	4618      	mov	r0, r3
 800e11c:	3708      	adds	r7, #8
 800e11e:	46bd      	mov	sp, r7
 800e120:	bd80      	pop	{r7, pc}

0800e122 <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800e122:	b580      	push	{r7, lr}
 800e124:	b082      	sub	sp, #8
 800e126:	af00      	add	r7, sp, #0
 800e128:	6078      	str	r0, [r7, #4]
 800e12a:	6878      	ldr	r0, [r7, #4]
 800e12c:	f000 f943 	bl	800e3b6 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	4618      	mov	r0, r3
 800e134:	3708      	adds	r7, #8
 800e136:	46bd      	mov	sp, r7
 800e138:	bd80      	pop	{r7, pc}

0800e13a <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 800e13a:	b580      	push	{r7, lr}
 800e13c:	b082      	sub	sp, #8
 800e13e:	af00      	add	r7, sp, #0
 800e140:	6078      	str	r0, [r7, #4]
 800e142:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800e144:	2200      	movs	r2, #0
 800e146:	6839      	ldr	r1, [r7, #0]
 800e148:	6878      	ldr	r0, [r7, #4]
 800e14a:	f000 f93f 	bl	800e3cc <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 800e14e:	4603      	mov	r3, r0
 800e150:	4618      	mov	r0, r3
 800e152:	3708      	adds	r7, #8
 800e154:	46bd      	mov	sp, r7
 800e156:	bd80      	pop	{r7, pc}

0800e158 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 800e158:	b580      	push	{r7, lr}
 800e15a:	b082      	sub	sp, #8
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	4618      	mov	r0, r3
 800e164:	f000 f95c 	bl	800e420 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE7releaseEv>
 800e168:	4603      	mov	r3, r0
 800e16a:	4618      	mov	r0, r3
 800e16c:	3708      	adds	r7, #8
 800e16e:	46bd      	mov	sp, r7
 800e170:	bd80      	pop	{r7, pc}

0800e172 <_ZSt7forwardISt14default_deleteI5BlinkEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e172:	b480      	push	{r7}
 800e174:	b083      	sub	sp, #12
 800e176:	af00      	add	r7, sp, #0
 800e178:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	4618      	mov	r0, r3
 800e17e:	370c      	adds	r7, #12
 800e180:	46bd      	mov	sp, r7
 800e182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e186:	4770      	bx	lr

0800e188 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800e188:	b590      	push	{r4, r7, lr}
 800e18a:	b085      	sub	sp, #20
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	60f8      	str	r0, [r7, #12]
 800e190:	60b9      	str	r1, [r7, #8]
 800e192:	607a      	str	r2, [r7, #4]
 800e194:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800e196:	6878      	ldr	r0, [r7, #4]
 800e198:	f000 f957 	bl	800e44a <_ZSt7forwardIP5BlinkEOT_RNSt16remove_referenceIS2_E4typeE>
 800e19c:	4604      	mov	r4, r0
 800e19e:	6838      	ldr	r0, [r7, #0]
 800e1a0:	f7ff ffe7 	bl	800e172 <_ZSt7forwardISt14default_deleteI5BlinkEEOT_RNSt16remove_referenceIS3_E4typeE>
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	4622      	mov	r2, r4
 800e1a8:	68b9      	ldr	r1, [r7, #8]
 800e1aa:	68f8      	ldr	r0, [r7, #12]
 800e1ac:	f000 f958 	bl	800e460 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>
	}
 800e1b0:	bf00      	nop
 800e1b2:	3714      	adds	r7, #20
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	bd90      	pop	{r4, r7, pc}

0800e1b8 <_ZNSt5tupleIJP3PinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b082      	sub	sp, #8
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	f000 f96a 	bl	800e49c <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEEC1Ev>
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	3708      	adds	r7, #8
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	bd80      	pop	{r7, pc}

0800e1d2 <_ZSt12__get_helperILj0EP3PinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e1d2:	b580      	push	{r7, lr}
 800e1d4:	b082      	sub	sp, #8
 800e1d6:	af00      	add	r7, sp, #0
 800e1d8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e1da:	6878      	ldr	r0, [r7, #4]
 800e1dc:	f000 f96e 	bl	800e4bc <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEE7_M_headERS4_>
 800e1e0:	4603      	mov	r3, r0
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	3708      	adds	r7, #8
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	bd80      	pop	{r7, pc}

0800e1ea <_ZSt3getILj1EJP3PinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800e1ea:	b580      	push	{r7, lr}
 800e1ec:	b082      	sub	sp, #8
 800e1ee:	af00      	add	r7, sp, #0
 800e1f0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800e1f2:	6878      	ldr	r0, [r7, #4]
 800e1f4:	f000 f96f 	bl	800e4d6 <_ZSt12__get_helperILj1ESt14default_deleteI3PinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800e1f8:	4603      	mov	r3, r0
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	3708      	adds	r7, #8
 800e1fe:	46bd      	mov	sp, r7
 800e200:	bd80      	pop	{r7, pc}

0800e202 <_ZSt3getILj0EJP3PinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800e202:	b580      	push	{r7, lr}
 800e204:	b082      	sub	sp, #8
 800e206:	af00      	add	r7, sp, #0
 800e208:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	4618      	mov	r0, r3
 800e20e:	f000 f96e 	bl	800e4ee <_ZSt12__get_helperILj0EP3PinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800e212:	4603      	mov	r3, r0
 800e214:	4618      	mov	r0, r3
 800e216:	3708      	adds	r7, #8
 800e218:	46bd      	mov	sp, r7
 800e21a:	bd80      	pop	{r7, pc}

0800e21c <_ZN11ArduinoJson8V730HB226detail13convertNumberIimEET_T0_>:
TOut convertNumber(TIn value) {
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b082      	sub	sp, #8
 800e220:	af00      	add	r7, sp, #0
 800e222:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800e224:	6878      	ldr	r0, [r7, #4]
 800e226:	f000 f96e 	bl	800e506 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIimEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 800e22a:	4603      	mov	r3, r0
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d001      	beq.n	800e234 <_ZN11ArduinoJson8V730HB226detail13convertNumberIimEET_T0_+0x18>
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	e000      	b.n	800e236 <_ZN11ArduinoJson8V730HB226detail13convertNumberIimEET_T0_+0x1a>
 800e234:	2300      	movs	r3, #0
}
 800e236:	4618      	mov	r0, r3
 800e238:	3708      	adds	r7, #8
 800e23a:	46bd      	mov	sp, r7
 800e23c:	bd80      	pop	{r7, pc}

0800e23e <_ZN11ArduinoJson8V730HB226detail13convertNumberIilEET_T0_>:
TOut convertNumber(TIn value) {
 800e23e:	b580      	push	{r7, lr}
 800e240:	b082      	sub	sp, #8
 800e242:	af00      	add	r7, sp, #0
 800e244:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800e246:	6878      	ldr	r0, [r7, #4]
 800e248:	f000 f96f 	bl	800e52a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIilEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valuelestS5_stS9_EbE4typeES5_>
 800e24c:	4603      	mov	r3, r0
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d001      	beq.n	800e256 <_ZN11ArduinoJson8V730HB226detail13convertNumberIilEET_T0_+0x18>
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	e000      	b.n	800e258 <_ZN11ArduinoJson8V730HB226detail13convertNumberIilEET_T0_+0x1a>
 800e256:	2300      	movs	r3, #0
}
 800e258:	4618      	mov	r0, r3
 800e25a:	3708      	adds	r7, #8
 800e25c:	46bd      	mov	sp, r7
 800e25e:	bd80      	pop	{r7, pc}

0800e260 <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_>:
TOut convertNumber(TIn value) {
 800e260:	b580      	push	{r7, lr}
 800e262:	b082      	sub	sp, #8
 800e264:	af00      	add	r7, sp, #0
 800e266:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800e26a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e26e:	f000 f967 	bl	800e540 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIiyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 800e272:	4603      	mov	r3, r0
 800e274:	2b00      	cmp	r3, #0
 800e276:	d001      	beq.n	800e27c <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_+0x1c>
 800e278:	683b      	ldr	r3, [r7, #0]
 800e27a:	e000      	b.n	800e27e <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_+0x1e>
 800e27c:	2300      	movs	r3, #0
}
 800e27e:	4618      	mov	r0, r3
 800e280:	3708      	adds	r7, #8
 800e282:	46bd      	mov	sp, r7
 800e284:	bd80      	pop	{r7, pc}

0800e286 <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_>:
TOut convertNumber(TIn value) {
 800e286:	b580      	push	{r7, lr}
 800e288:	b082      	sub	sp, #8
 800e28a:	af00      	add	r7, sp, #0
 800e28c:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800e290:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e294:	f000 f96c 	bl	800e570 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>
 800e298:	4603      	mov	r3, r0
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d001      	beq.n	800e2a2 <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_+0x1c>
 800e29e:	683b      	ldr	r3, [r7, #0]
 800e2a0:	e000      	b.n	800e2a4 <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_+0x1e>
 800e2a2:	2300      	movs	r3, #0
}
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	3708      	adds	r7, #8
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	bd80      	pop	{r7, pc}

0800e2ac <_ZN11ArduinoJson8V730HB226detail11parseNumberIiEET_PKc>:
inline T parseNumber(const char* s) {
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b086      	sub	sp, #24
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
  return parseNumber(s).convertTo<T>();
 800e2b4:	f107 0308 	add.w	r3, r7, #8
 800e2b8:	6879      	ldr	r1, [r7, #4]
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	f7f7 fa0e 	bl	80056dc <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>
 800e2c0:	f107 0308 	add.w	r3, r7, #8
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	f000 f979 	bl	800e5bc <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v>
 800e2ca:	4603      	mov	r3, r0
}
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	3718      	adds	r7, #24
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	bd80      	pop	{r7, pc}

0800e2d4 <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_>:
TOut convertNumber(TIn value) {
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b082      	sub	sp, #8
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	ed87 0a01 	vstr	s0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800e2de:	ed97 0a01 	vldr	s0, [r7, #4]
 800e2e2:	f000 f9b2 	bl	800e64a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_>
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d006      	beq.n	800e2fa <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_+0x26>
 800e2ec:	edd7 7a01 	vldr	s15, [r7, #4]
 800e2f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e2f4:	ee17 3a90 	vmov	r3, s15
 800e2f8:	e000      	b.n	800e2fc <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_+0x28>
 800e2fa:	2300      	movs	r3, #0
}
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	3708      	adds	r7, #8
 800e300:	46bd      	mov	sp, r7
 800e302:	bd80      	pop	{r7, pc}

0800e304 <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_>:
TOut convertNumber(TIn value) {
 800e304:	b580      	push	{r7, lr}
 800e306:	b082      	sub	sp, #8
 800e308:	af00      	add	r7, sp, #0
 800e30a:	ed87 0b00 	vstr	d0, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800e30e:	ed97 0b00 	vldr	d0, [r7]
 800e312:	f000 f9c7 	bl	800e6a4 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 800e316:	4603      	mov	r3, r0
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d006      	beq.n	800e32a <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_+0x26>
 800e31c:	ed97 7b00 	vldr	d7, [r7]
 800e320:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800e324:	ee17 3a90 	vmov	r3, s15
 800e328:	e000      	b.n	800e32c <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_+0x28>
 800e32a:	2300      	movs	r3, #0
}
 800e32c:	4618      	mov	r0, r3
 800e32e:	3708      	adds	r7, #8
 800e330:	46bd      	mov	sp, r7
 800e332:	bd80      	pop	{r7, pc}

0800e334 <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800e334:	b580      	push	{r7, lr}
 800e336:	b082      	sub	sp, #8
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800e33c:	6878      	ldr	r0, [r7, #4]
 800e33e:	f000 f9d7 	bl	800e6f0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5BlinkEEEC1Ev>
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	4618      	mov	r0, r3
 800e346:	f000 f9df 	bl	800e708 <_ZNSt10_Head_baseILj0EP5BlinkLb0EEC1Ev>
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	4618      	mov	r0, r3
 800e34e:	3708      	adds	r7, #8
 800e350:	46bd      	mov	sp, r7
 800e352:	bd80      	pop	{r7, pc}

0800e354 <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800e354:	b580      	push	{r7, lr}
 800e356:	b082      	sub	sp, #8
 800e358:	af00      	add	r7, sp, #0
 800e35a:	6078      	str	r0, [r7, #4]
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	4618      	mov	r0, r3
 800e360:	f000 f9e0 	bl	800e724 <_ZNSt10_Head_baseILj0EP5BlinkLb0EE7_M_headERS2_>
 800e364:	4603      	mov	r3, r0
 800e366:	4618      	mov	r0, r3
 800e368:	3708      	adds	r7, #8
 800e36a:	46bd      	mov	sp, r7
 800e36c:	bd80      	pop	{r7, pc}

0800e36e <_ZSt12__get_helperILj1ESt14default_deleteI5BlinkEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e36e:	b580      	push	{r7, lr}
 800e370:	b082      	sub	sp, #8
 800e372:	af00      	add	r7, sp, #0
 800e374:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e376:	6878      	ldr	r0, [r7, #4]
 800e378:	f000 f9df 	bl	800e73a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5BlinkEEE7_M_headERS3_>
 800e37c:	4603      	mov	r3, r0
 800e37e:	4618      	mov	r0, r3
 800e380:	3708      	adds	r7, #8
 800e382:	46bd      	mov	sp, r7
 800e384:	bd80      	pop	{r7, pc}

0800e386 <_ZSt3getILj0EJP5BlinkSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800e386:	b580      	push	{r7, lr}
 800e388:	b082      	sub	sp, #8
 800e38a:	af00      	add	r7, sp, #0
 800e38c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	4618      	mov	r0, r3
 800e392:	f000 f9de 	bl	800e752 <_ZSt12__get_helperILj0EP5BlinkJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800e396:	4603      	mov	r3, r0
 800e398:	4618      	mov	r0, r3
 800e39a:	3708      	adds	r7, #8
 800e39c:	46bd      	mov	sp, r7
 800e39e:	bd80      	pop	{r7, pc}

0800e3a0 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800e3a0:	b480      	push	{r7}
 800e3a2:	b083      	sub	sp, #12
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	370c      	adds	r7, #12
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b4:	4770      	bx	lr

0800e3b6 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800e3b6:	b480      	push	{r7}
 800e3b8:	b083      	sub	sp, #12
 800e3ba:	af00      	add	r7, sp, #0
 800e3bc:	6078      	str	r0, [r7, #4]
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	370c      	adds	r7, #12
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ca:	4770      	bx	lr

0800e3cc <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b084      	sub	sp, #16
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	60f8      	str	r0, [r7, #12]
 800e3d4:	60b9      	str	r1, [r7, #8]
 800e3d6:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800e3d8:	68f8      	ldr	r0, [r7, #12]
 800e3da:	f000 f9c6 	bl	800e76a <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 800e3de:	4602      	mov	r2, r0
 800e3e0:	68bb      	ldr	r3, [r7, #8]
 800e3e2:	4293      	cmp	r3, r2
 800e3e4:	bf8c      	ite	hi
 800e3e6:	2301      	movhi	r3, #1
 800e3e8:	2300      	movls	r3, #0
 800e3ea:	b2db      	uxtb	r3, r3
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	bf14      	ite	ne
 800e3f0:	2301      	movne	r3, #1
 800e3f2:	2300      	moveq	r3, #0
 800e3f4:	b2db      	uxtb	r3, r3
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d007      	beq.n	800e40a <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800e3fa:	68bb      	ldr	r3, [r7, #8]
 800e3fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e400:	d301      	bcc.n	800e406 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800e402:	f015 fd43 	bl	8023e8c <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800e406:	f015 fd3e 	bl	8023e86 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800e40a:	68bb      	ldr	r3, [r7, #8]
 800e40c:	011b      	lsls	r3, r3, #4
 800e40e:	4618      	mov	r0, r3
 800e410:	f015 fd26 	bl	8023e60 <_Znwj>
 800e414:	4603      	mov	r3, r0
 800e416:	bf00      	nop
      }
 800e418:	4618      	mov	r0, r3
 800e41a:	3710      	adds	r7, #16
 800e41c:	46bd      	mov	sp, r7
 800e41e:	bd80      	pop	{r7, pc}

0800e420 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800e420:	b580      	push	{r7, lr}
 800e422:	b084      	sub	sp, #16
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800e428:	6878      	ldr	r0, [r7, #4]
 800e42a:	f7ff fb5f 	bl	800daec <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 800e42e:	4603      	mov	r3, r0
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800e434:	6878      	ldr	r0, [r7, #4]
 800e436:	f7ff fb59 	bl	800daec <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 800e43a:	4603      	mov	r3, r0
 800e43c:	2200      	movs	r2, #0
 800e43e:	601a      	str	r2, [r3, #0]
	return __p;
 800e440:	68fb      	ldr	r3, [r7, #12]
      }
 800e442:	4618      	mov	r0, r3
 800e444:	3710      	adds	r7, #16
 800e446:	46bd      	mov	sp, r7
 800e448:	bd80      	pop	{r7, pc}

0800e44a <_ZSt7forwardIP5BlinkEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e44a:	b480      	push	{r7}
 800e44c:	b083      	sub	sp, #12
 800e44e:	af00      	add	r7, sp, #0
 800e450:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	4618      	mov	r0, r3
 800e456:	370c      	adds	r7, #12
 800e458:	46bd      	mov	sp, r7
 800e45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e45e:	4770      	bx	lr

0800e460 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800e460:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e462:	b085      	sub	sp, #20
 800e464:	af00      	add	r7, sp, #0
 800e466:	60f8      	str	r0, [r7, #12]
 800e468:	60b9      	str	r1, [r7, #8]
 800e46a:	607a      	str	r2, [r7, #4]
 800e46c:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800e46e:	68bb      	ldr	r3, [r7, #8]
 800e470:	4619      	mov	r1, r3
 800e472:	2010      	movs	r0, #16
 800e474:	f7fb f944 	bl	8009700 <_ZnwjPv>
 800e478:	4605      	mov	r5, r0
 800e47a:	6878      	ldr	r0, [r7, #4]
 800e47c:	f7ff ffe5 	bl	800e44a <_ZSt7forwardIP5BlinkEOT_RNSt16remove_referenceIS2_E4typeE>
 800e480:	4603      	mov	r3, r0
 800e482:	681c      	ldr	r4, [r3, #0]
 800e484:	6838      	ldr	r0, [r7, #0]
 800e486:	f7ff fe74 	bl	800e172 <_ZSt7forwardISt14default_deleteI5BlinkEEOT_RNSt16remove_referenceIS3_E4typeE>
 800e48a:	4632      	mov	r2, r6
 800e48c:	4621      	mov	r1, r4
 800e48e:	4628      	mov	r0, r5
 800e490:	f000 f978 	bl	800e784 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>
 800e494:	bf00      	nop
 800e496:	3714      	adds	r7, #20
 800e498:	46bd      	mov	sp, r7
 800e49a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e49c <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b082      	sub	sp, #8
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800e4a4:	6878      	ldr	r0, [r7, #4]
 800e4a6:	f000 f98f 	bl	800e7c8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI3PinEEEC1Ev>
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	f000 f997 	bl	800e7e0 <_ZNSt10_Head_baseILj0EP3PinLb0EEC1Ev>
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	3708      	adds	r7, #8
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	bd80      	pop	{r7, pc}

0800e4bc <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b082      	sub	sp, #8
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	f000 f998 	bl	800e7fc <_ZNSt10_Head_baseILj0EP3PinLb0EE7_M_headERS2_>
 800e4cc:	4603      	mov	r3, r0
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	3708      	adds	r7, #8
 800e4d2:	46bd      	mov	sp, r7
 800e4d4:	bd80      	pop	{r7, pc}

0800e4d6 <_ZSt12__get_helperILj1ESt14default_deleteI3PinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e4d6:	b580      	push	{r7, lr}
 800e4d8:	b082      	sub	sp, #8
 800e4da:	af00      	add	r7, sp, #0
 800e4dc:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e4de:	6878      	ldr	r0, [r7, #4]
 800e4e0:	f000 f997 	bl	800e812 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI3PinEEE7_M_headERS3_>
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	3708      	adds	r7, #8
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	bd80      	pop	{r7, pc}

0800e4ee <_ZSt12__get_helperILj0EP3PinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e4ee:	b580      	push	{r7, lr}
 800e4f0:	b082      	sub	sp, #8
 800e4f2:	af00      	add	r7, sp, #0
 800e4f4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e4f6:	6878      	ldr	r0, [r7, #4]
 800e4f8:	f000 f997 	bl	800e82a <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEE7_M_headERKS4_>
 800e4fc:	4603      	mov	r3, r0
 800e4fe:	4618      	mov	r0, r3
 800e500:	3708      	adds	r7, #8
 800e502:	46bd      	mov	sp, r7
 800e504:	bd80      	pop	{r7, pc}

0800e506 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIimEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800e506:	b580      	push	{r7, lr}
 800e508:	b082      	sub	sp, #8
 800e50a:	af00      	add	r7, sp, #0
 800e50c:	6078      	str	r0, [r7, #4]
  return value <= TIn(numeric_limits<TOut>::highest());
 800e50e:	f000 f8c1 	bl	800e694 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>
 800e512:	4603      	mov	r3, r0
 800e514:	461a      	mov	r2, r3
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	4293      	cmp	r3, r2
 800e51a:	bf94      	ite	ls
 800e51c:	2301      	movls	r3, #1
 800e51e:	2300      	movhi	r3, #0
 800e520:	b2db      	uxtb	r3, r3
}
 800e522:	4618      	mov	r0, r3
 800e524:	3708      	adds	r7, #8
 800e526:	46bd      	mov	sp, r7
 800e528:	bd80      	pop	{r7, pc}

0800e52a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIilEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valuelestS5_stS9_EbE4typeES5_>:
canConvertNumber(TIn) {
 800e52a:	b480      	push	{r7}
 800e52c:	b083      	sub	sp, #12
 800e52e:	af00      	add	r7, sp, #0
 800e530:	6078      	str	r0, [r7, #4]
  return true;
 800e532:	2301      	movs	r3, #1
}
 800e534:	4618      	mov	r0, r3
 800e536:	370c      	adds	r7, #12
 800e538:	46bd      	mov	sp, r7
 800e53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e53e:	4770      	bx	lr

0800e540 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIiyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800e540:	b5b0      	push	{r4, r5, r7, lr}
 800e542:	b082      	sub	sp, #8
 800e544:	af00      	add	r7, sp, #0
 800e546:	e9c7 0100 	strd	r0, r1, [r7]
  return value <= TIn(numeric_limits<TOut>::highest());
 800e54a:	f000 f8a3 	bl	800e694 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>
 800e54e:	4603      	mov	r3, r0
 800e550:	17da      	asrs	r2, r3, #31
 800e552:	461c      	mov	r4, r3
 800e554:	4615      	mov	r5, r2
 800e556:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e55a:	4294      	cmp	r4, r2
 800e55c:	eb75 0303 	sbcs.w	r3, r5, r3
 800e560:	bf2c      	ite	cs
 800e562:	2301      	movcs	r3, #1
 800e564:	2300      	movcc	r3, #0
 800e566:	b2db      	uxtb	r3, r3
}
 800e568:	4618      	mov	r0, r3
 800e56a:	3708      	adds	r7, #8
 800e56c:	46bd      	mov	sp, r7
 800e56e:	bdb0      	pop	{r4, r5, r7, pc}

0800e570 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800e570:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800e574:	b082      	sub	sp, #8
 800e576:	af00      	add	r7, sp, #0
 800e578:	e9c7 0100 	strd	r0, r1, [r7]
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 800e57c:	f000 f85c 	bl	800e638 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>
 800e580:	4603      	mov	r3, r0
 800e582:	17da      	asrs	r2, r3, #31
 800e584:	4698      	mov	r8, r3
 800e586:	4691      	mov	r9, r2
 800e588:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e58c:	4542      	cmp	r2, r8
 800e58e:	eb73 0309 	sbcs.w	r3, r3, r9
 800e592:	db0d      	blt.n	800e5b0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x40>
         value <= TIn(numeric_limits<TOut>::highest());
 800e594:	f000 f87e 	bl	800e694 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>
 800e598:	4603      	mov	r3, r0
 800e59a:	17da      	asrs	r2, r3, #31
 800e59c:	461c      	mov	r4, r3
 800e59e:	4615      	mov	r5, r2
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 800e5a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e5a4:	4294      	cmp	r4, r2
 800e5a6:	eb75 0303 	sbcs.w	r3, r5, r3
 800e5aa:	db01      	blt.n	800e5b0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x40>
 800e5ac:	2301      	movs	r3, #1
 800e5ae:	e000      	b.n	800e5b2 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x42>
 800e5b0:	2300      	movs	r3, #0
}
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	3708      	adds	r7, #8
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800e5bc <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v>:
  T convertTo() const {
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	b082      	sub	sp, #8
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	6078      	str	r0, [r7, #4]
    switch (type_) {
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	781b      	ldrb	r3, [r3, #0]
 800e5c8:	3b01      	subs	r3, #1
 800e5ca:	2b03      	cmp	r3, #3
 800e5cc:	d82e      	bhi.n	800e62c <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x70>
 800e5ce:	a201      	add	r2, pc, #4	@ (adr r2, 800e5d4 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x18>)
 800e5d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5d4:	0800e5e5 	.word	0x0800e5e5
 800e5d8:	0800e5f7 	.word	0x0800e5f7
 800e5dc:	0800e609 	.word	0x0800e609
 800e5e0:	0800e61b 	.word	0x0800e61b
        return convertNumber<T>(value_.asFloat);
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	edd3 7a02 	vldr	s15, [r3, #8]
 800e5ea:	eeb0 0a67 	vmov.f32	s0, s15
 800e5ee:	f7ff fe71 	bl	800e2d4 <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_>
 800e5f2:	4603      	mov	r3, r0
 800e5f4:	e01b      	b.n	800e62e <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x72>
        return convertNumber<T>(value_.asSignedInteger);
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800e5fc:	4610      	mov	r0, r2
 800e5fe:	4619      	mov	r1, r3
 800e600:	f7ff fe41 	bl	800e286 <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_>
 800e604:	4603      	mov	r3, r0
 800e606:	e012      	b.n	800e62e <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x72>
        return convertNumber<T>(value_.asUnsignedInteger);
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800e60e:	4610      	mov	r0, r2
 800e610:	4619      	mov	r1, r3
 800e612:	f7ff fe25 	bl	800e260 <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_>
 800e616:	4603      	mov	r3, r0
 800e618:	e009      	b.n	800e62e <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x72>
        return convertNumber<T>(value_.asDouble);
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	ed93 7b02 	vldr	d7, [r3, #8]
 800e620:	eeb0 0b47 	vmov.f64	d0, d7
 800e624:	f7ff fe6e 	bl	800e304 <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_>
 800e628:	4603      	mov	r3, r0
 800e62a:	e000      	b.n	800e62e <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x72>
        return T();
 800e62c:	2300      	movs	r3, #0
  }
 800e62e:	4618      	mov	r0, r3
 800e630:	3708      	adds	r7, #8
 800e632:	46bd      	mov	sp, r7
 800e634:	bd80      	pop	{r7, pc}
 800e636:	bf00      	nop

0800e638 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>:
  static constexpr T lowest() {
 800e638:	b480      	push	{r7}
 800e63a:	af00      	add	r7, sp, #0
    return T(T(1) << (sizeof(T) * 8 - 1));
 800e63c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
  }
 800e640:	4618      	mov	r0, r3
 800e642:	46bd      	mov	sp, r7
 800e644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e648:	4770      	bx	lr

0800e64a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800e64a:	b580      	push	{r7, lr}
 800e64c:	b082      	sub	sp, #8
 800e64e:	af00      	add	r7, sp, #0
 800e650:	ed87 0a01 	vstr	s0, [r7, #4]
  return value >= numeric_limits<TOut>::lowest() &&
 800e654:	f7ff fff0 	bl	800e638 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>
 800e658:	ee07 0a90 	vmov	s15, r0
 800e65c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e660:	ed97 7a01 	vldr	s14, [r7, #4]
 800e664:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e66c:	db0d      	blt.n	800e68a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x40>
         value <= FloatTraits<TIn>::template highest_for<TOut>();
 800e66e:	2000      	movs	r0, #0
 800e670:	f000 f8e8 	bl	800e844 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forIiEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_9is_signedIS7_EE5valueeqstS7_Li4EEiE4typeE>
 800e674:	eeb0 7a40 	vmov.f32	s14, s0
  return value >= numeric_limits<TOut>::lowest() &&
 800e678:	edd7 7a01 	vldr	s15, [r7, #4]
 800e67c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e684:	d801      	bhi.n	800e68a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x40>
 800e686:	2301      	movs	r3, #1
 800e688:	e000      	b.n	800e68c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x42>
 800e68a:	2300      	movs	r3, #0
}
 800e68c:	4618      	mov	r0, r3
 800e68e:	3708      	adds	r7, #8
 800e690:	46bd      	mov	sp, r7
 800e692:	bd80      	pop	{r7, pc}

0800e694 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>:
  static constexpr T highest() {
 800e694:	b580      	push	{r7, lr}
 800e696:	af00      	add	r7, sp, #0
    return T(~lowest());
 800e698:	f7ff ffce 	bl	800e638 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>
 800e69c:	4603      	mov	r3, r0
 800e69e:	43db      	mvns	r3, r3
  }
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	bd80      	pop	{r7, pc}

0800e6a4 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b082      	sub	sp, #8
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	ed87 0b00 	vstr	d0, [r7]
  return value >= numeric_limits<TOut>::lowest() &&
 800e6ae:	f7ff ffc3 	bl	800e638 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>
 800e6b2:	ee07 0a90 	vmov	s15, r0
 800e6b6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e6ba:	ed97 6b00 	vldr	d6, [r7]
 800e6be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e6c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6c6:	db0e      	blt.n	800e6e6 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x42>
         value <= numeric_limits<TOut>::highest();
 800e6c8:	f7ff ffe4 	bl	800e694 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>
 800e6cc:	ee07 0a90 	vmov	s15, r0
 800e6d0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
  return value >= numeric_limits<TOut>::lowest() &&
 800e6d4:	ed97 6b00 	vldr	d6, [r7]
 800e6d8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e6dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6e0:	d801      	bhi.n	800e6e6 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x42>
 800e6e2:	2301      	movs	r3, #1
 800e6e4:	e000      	b.n	800e6e8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x44>
 800e6e6:	2300      	movs	r3, #0
}
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	3708      	adds	r7, #8
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	bd80      	pop	{r7, pc}

0800e6f0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5BlinkEEEC1Ev>:
      _Tuple_impl()
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b082      	sub	sp, #8
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800e6f8:	6878      	ldr	r0, [r7, #4]
 800e6fa:	f000 f8b2 	bl	800e862 <_ZNSt10_Head_baseILj1ESt14default_deleteI5BlinkELb1EEC1Ev>
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	4618      	mov	r0, r3
 800e702:	3708      	adds	r7, #8
 800e704:	46bd      	mov	sp, r7
 800e706:	bd80      	pop	{r7, pc}

0800e708 <_ZNSt10_Head_baseILj0EP5BlinkLb0EEC1Ev>:
      constexpr _Head_base()
 800e708:	b480      	push	{r7}
 800e70a:	b083      	sub	sp, #12
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	2200      	movs	r2, #0
 800e714:	601a      	str	r2, [r3, #0]
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	4618      	mov	r0, r3
 800e71a:	370c      	adds	r7, #12
 800e71c:	46bd      	mov	sp, r7
 800e71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e722:	4770      	bx	lr

0800e724 <_ZNSt10_Head_baseILj0EP5BlinkLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800e724:	b480      	push	{r7}
 800e726:	b083      	sub	sp, #12
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	4618      	mov	r0, r3
 800e730:	370c      	adds	r7, #12
 800e732:	46bd      	mov	sp, r7
 800e734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e738:	4770      	bx	lr

0800e73a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5BlinkEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800e73a:	b580      	push	{r7, lr}
 800e73c:	b082      	sub	sp, #8
 800e73e:	af00      	add	r7, sp, #0
 800e740:	6078      	str	r0, [r7, #4]
 800e742:	6878      	ldr	r0, [r7, #4]
 800e744:	f000 f898 	bl	800e878 <_ZNSt10_Head_baseILj1ESt14default_deleteI5BlinkELb1EE7_M_headERS3_>
 800e748:	4603      	mov	r3, r0
 800e74a:	4618      	mov	r0, r3
 800e74c:	3708      	adds	r7, #8
 800e74e:	46bd      	mov	sp, r7
 800e750:	bd80      	pop	{r7, pc}

0800e752 <_ZSt12__get_helperILj0EP5BlinkJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e752:	b580      	push	{r7, lr}
 800e754:	b082      	sub	sp, #8
 800e756:	af00      	add	r7, sp, #0
 800e758:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e75a:	6878      	ldr	r0, [r7, #4]
 800e75c:	f000 f897 	bl	800e88e <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEE7_M_headERKS4_>
 800e760:	4603      	mov	r3, r0
 800e762:	4618      	mov	r0, r3
 800e764:	3708      	adds	r7, #8
 800e766:	46bd      	mov	sp, r7
 800e768:	bd80      	pop	{r7, pc}

0800e76a <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800e76a:	b480      	push	{r7}
 800e76c:	b083      	sub	sp, #12
 800e76e:	af00      	add	r7, sp, #0
 800e770:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800e772:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      }
 800e776:	4618      	mov	r0, r3
 800e778:	370c      	adds	r7, #12
 800e77a:	46bd      	mov	sp, r7
 800e77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e780:	4770      	bx	lr
	...

0800e784 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
 800e784:	b5b0      	push	{r4, r5, r7, lr}
 800e786:	b086      	sub	sp, #24
 800e788:	af00      	add	r7, sp, #0
 800e78a:	60f8      	str	r0, [r7, #12]
 800e78c:	60b9      	str	r1, [r7, #8]
 800e78e:	713a      	strb	r2, [r7, #4]
      : _M_impl(__p, std::move(__d), _Alloc()) { }
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	4618      	mov	r0, r3
 800e794:	f7fe f8b6 	bl	800c904 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800e798:	4a0a      	ldr	r2, [pc, #40]	@ (800e7c4 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_+0x40>)
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	601a      	str	r2, [r3, #0]
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	f103 040c 	add.w	r4, r3, #12
 800e7a4:	1d3b      	adds	r3, r7, #4
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	f000 f87e 	bl	800e8a8 <_ZSt4moveIRSt14default_deleteI5BlinkEEONSt16remove_referenceIT_E4typeEOS5_>
 800e7ac:	f107 0314 	add.w	r3, r7, #20
 800e7b0:	462a      	mov	r2, r5
 800e7b2:	68b9      	ldr	r1, [r7, #8]
 800e7b4:	4620      	mov	r0, r4
 800e7b6:	f000 f882 	bl	800e8be <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	4618      	mov	r0, r3
 800e7be:	3718      	adds	r7, #24
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	bdb0      	pop	{r4, r5, r7, pc}
 800e7c4:	08026760 	.word	0x08026760

0800e7c8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI3PinEEEC1Ev>:
      _Tuple_impl()
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b082      	sub	sp, #8
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800e7d0:	6878      	ldr	r0, [r7, #4]
 800e7d2:	f000 f890 	bl	800e8f6 <_ZNSt10_Head_baseILj1ESt14default_deleteI3PinELb1EEC1Ev>
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	4618      	mov	r0, r3
 800e7da:	3708      	adds	r7, #8
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	bd80      	pop	{r7, pc}

0800e7e0 <_ZNSt10_Head_baseILj0EP3PinLb0EEC1Ev>:
      constexpr _Head_base()
 800e7e0:	b480      	push	{r7}
 800e7e2:	b083      	sub	sp, #12
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	601a      	str	r2, [r3, #0]
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	370c      	adds	r7, #12
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fa:	4770      	bx	lr

0800e7fc <_ZNSt10_Head_baseILj0EP3PinLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800e7fc:	b480      	push	{r7}
 800e7fe:	b083      	sub	sp, #12
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	4618      	mov	r0, r3
 800e808:	370c      	adds	r7, #12
 800e80a:	46bd      	mov	sp, r7
 800e80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e810:	4770      	bx	lr

0800e812 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI3PinEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800e812:	b580      	push	{r7, lr}
 800e814:	b082      	sub	sp, #8
 800e816:	af00      	add	r7, sp, #0
 800e818:	6078      	str	r0, [r7, #4]
 800e81a:	6878      	ldr	r0, [r7, #4]
 800e81c:	f000 f876 	bl	800e90c <_ZNSt10_Head_baseILj1ESt14default_deleteI3PinELb1EE7_M_headERS3_>
 800e820:	4603      	mov	r3, r0
 800e822:	4618      	mov	r0, r3
 800e824:	3708      	adds	r7, #8
 800e826:	46bd      	mov	sp, r7
 800e828:	bd80      	pop	{r7, pc}

0800e82a <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800e82a:	b580      	push	{r7, lr}
 800e82c:	b082      	sub	sp, #8
 800e82e:	af00      	add	r7, sp, #0
 800e830:	6078      	str	r0, [r7, #4]
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	4618      	mov	r0, r3
 800e836:	f000 f874 	bl	800e922 <_ZNSt10_Head_baseILj0EP3PinLb0EE7_M_headERKS2_>
 800e83a:	4603      	mov	r3, r0
 800e83c:	4618      	mov	r0, r3
 800e83e:	3708      	adds	r7, #8
 800e840:	46bd      	mov	sp, r7
 800e842:	bd80      	pop	{r7, pc}

0800e844 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forIiEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_9is_signedIS7_EE5valueeqstS7_Li4EEiE4typeE>:
  static T highest_for(
 800e844:	b580      	push	{r7, lr}
 800e846:	b082      	sub	sp, #8
 800e848:	af00      	add	r7, sp, #0
 800e84a:	6078      	str	r0, [r7, #4]
    return forge(0x4EFFFFFF);  // 2.14748352E9
 800e84c:	f06f 4031 	mvn.w	r0, #2969567232	@ 0xb1000000
 800e850:	f7f9 fefc 	bl	800864c <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE5forgeEm>
 800e854:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e858:	eeb0 0a67 	vmov.f32	s0, s15
 800e85c:	3708      	adds	r7, #8
 800e85e:	46bd      	mov	sp, r7
 800e860:	bd80      	pop	{r7, pc}

0800e862 <_ZNSt10_Head_baseILj1ESt14default_deleteI5BlinkELb1EEC1Ev>:
      constexpr _Head_base()
 800e862:	b480      	push	{r7}
 800e864:	b083      	sub	sp, #12
 800e866:	af00      	add	r7, sp, #0
 800e868:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	4618      	mov	r0, r3
 800e86e:	370c      	adds	r7, #12
 800e870:	46bd      	mov	sp, r7
 800e872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e876:	4770      	bx	lr

0800e878 <_ZNSt10_Head_baseILj1ESt14default_deleteI5BlinkELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800e878:	b480      	push	{r7}
 800e87a:	b083      	sub	sp, #12
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	4618      	mov	r0, r3
 800e884:	370c      	adds	r7, #12
 800e886:	46bd      	mov	sp, r7
 800e888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88c:	4770      	bx	lr

0800e88e <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800e88e:	b580      	push	{r7, lr}
 800e890:	b082      	sub	sp, #8
 800e892:	af00      	add	r7, sp, #0
 800e894:	6078      	str	r0, [r7, #4]
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	4618      	mov	r0, r3
 800e89a:	f000 f84d 	bl	800e938 <_ZNSt10_Head_baseILj0EP5BlinkLb0EE7_M_headERKS2_>
 800e89e:	4603      	mov	r3, r0
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	3708      	adds	r7, #8
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	bd80      	pop	{r7, pc}

0800e8a8 <_ZSt4moveIRSt14default_deleteI5BlinkEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800e8a8:	b480      	push	{r7}
 800e8aa:	b083      	sub	sp, #12
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	370c      	adds	r7, #12
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8bc:	4770      	bx	lr

0800e8be <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800e8be:	b580      	push	{r7, lr}
 800e8c0:	b084      	sub	sp, #16
 800e8c2:	af00      	add	r7, sp, #0
 800e8c4:	60f8      	str	r0, [r7, #12]
 800e8c6:	60b9      	str	r1, [r7, #8]
 800e8c8:	713a      	strb	r2, [r7, #4]
 800e8ca:	603b      	str	r3, [r7, #0]
	: _Del_base(std::move(__d)), _Alloc_base(__a), _M_ptr(__p)
 800e8cc:	1d3b      	adds	r3, r7, #4
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	f7ff ffea 	bl	800e8a8 <_ZSt4moveIRSt14default_deleteI5BlinkEEONSt16remove_referenceIT_E4typeEOS5_>
 800e8d4:	4603      	mov	r3, r0
 800e8d6:	4619      	mov	r1, r3
 800e8d8:	68f8      	ldr	r0, [r7, #12]
 800e8da:	f000 f838 	bl	800e94e <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI5BlinkELb1EEC1EOS2_>
 800e8de:	6839      	ldr	r1, [r7, #0]
 800e8e0:	68f8      	ldr	r0, [r7, #12]
 800e8e2:	f000 f841 	bl	800e968 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EEC1ERKS0_>
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	68ba      	ldr	r2, [r7, #8]
 800e8ea:	601a      	str	r2, [r3, #0]
	{ }
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	3710      	adds	r7, #16
 800e8f2:	46bd      	mov	sp, r7
 800e8f4:	bd80      	pop	{r7, pc}

0800e8f6 <_ZNSt10_Head_baseILj1ESt14default_deleteI3PinELb1EEC1Ev>:
      constexpr _Head_base()
 800e8f6:	b480      	push	{r7}
 800e8f8:	b083      	sub	sp, #12
 800e8fa:	af00      	add	r7, sp, #0
 800e8fc:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	4618      	mov	r0, r3
 800e902:	370c      	adds	r7, #12
 800e904:	46bd      	mov	sp, r7
 800e906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90a:	4770      	bx	lr

0800e90c <_ZNSt10_Head_baseILj1ESt14default_deleteI3PinELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800e90c:	b480      	push	{r7}
 800e90e:	b083      	sub	sp, #12
 800e910:	af00      	add	r7, sp, #0
 800e912:	6078      	str	r0, [r7, #4]
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	4618      	mov	r0, r3
 800e918:	370c      	adds	r7, #12
 800e91a:	46bd      	mov	sp, r7
 800e91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e920:	4770      	bx	lr

0800e922 <_ZNSt10_Head_baseILj0EP3PinLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800e922:	b480      	push	{r7}
 800e924:	b083      	sub	sp, #12
 800e926:	af00      	add	r7, sp, #0
 800e928:	6078      	str	r0, [r7, #4]
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	4618      	mov	r0, r3
 800e92e:	370c      	adds	r7, #12
 800e930:	46bd      	mov	sp, r7
 800e932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e936:	4770      	bx	lr

0800e938 <_ZNSt10_Head_baseILj0EP5BlinkLb0EE7_M_headERKS2_>:
 800e938:	b480      	push	{r7}
 800e93a:	b083      	sub	sp, #12
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	4618      	mov	r0, r3
 800e944:	370c      	adds	r7, #12
 800e946:	46bd      	mov	sp, r7
 800e948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e94c:	4770      	bx	lr

0800e94e <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI5BlinkELb1EEC1EOS2_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _Tp(std::move(__tp)) { }
 800e94e:	b580      	push	{r7, lr}
 800e950:	b082      	sub	sp, #8
 800e952:	af00      	add	r7, sp, #0
 800e954:	6078      	str	r0, [r7, #4]
 800e956:	6039      	str	r1, [r7, #0]
 800e958:	6838      	ldr	r0, [r7, #0]
 800e95a:	f7ff ffa5 	bl	800e8a8 <_ZSt4moveIRSt14default_deleteI5BlinkEEONSt16remove_referenceIT_E4typeEOS5_>
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	4618      	mov	r0, r3
 800e962:	3708      	adds	r7, #8
 800e964:	46bd      	mov	sp, r7
 800e966:	bd80      	pop	{r7, pc}

0800e968 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EEC1ERKS0_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 800e968:	b480      	push	{r7}
 800e96a:	b083      	sub	sp, #12
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
 800e970:	6039      	str	r1, [r7, #0]
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	4618      	mov	r0, r3
 800e976:	370c      	adds	r7, #12
 800e978:	46bd      	mov	sp, r7
 800e97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e97e:	4770      	bx	lr

0800e980 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 800e980:	b580      	push	{r7, lr}
 800e982:	b082      	sub	sp, #8
 800e984:	af00      	add	r7, sp, #0
 800e986:	6078      	str	r0, [r7, #4]
 800e988:	4a05      	ldr	r2, [pc, #20]	@ (800e9a0 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	601a      	str	r2, [r3, #0]
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	4618      	mov	r0, r3
 800e992:	f7fc fbad 	bl	800b0f0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	4618      	mov	r0, r3
 800e99a:	3708      	adds	r7, #8
 800e99c:	46bd      	mov	sp, r7
 800e99e:	bd80      	pop	{r7, pc}
 800e9a0:	08026760 	.word	0x08026760

0800e9a4 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b082      	sub	sp, #8
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]
 800e9ac:	6878      	ldr	r0, [r7, #4]
 800e9ae:	f7ff ffe7 	bl	800e980 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800e9b2:	2110      	movs	r1, #16
 800e9b4:	6878      	ldr	r0, [r7, #4]
 800e9b6:	f015 fa42 	bl	8023e3e <_ZdlPvj>
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	4618      	mov	r0, r3
 800e9be:	3708      	adds	r7, #8
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	bd80      	pop	{r7, pc}

0800e9c4 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b082      	sub	sp, #8
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	330c      	adds	r3, #12
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	f000 f83f 	bl	800ea54 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>
 800e9d6:	4602      	mov	r2, r0
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	68db      	ldr	r3, [r3, #12]
 800e9dc:	4619      	mov	r1, r3
 800e9de:	4610      	mov	r0, r2
 800e9e0:	f7ff f8d2 	bl	800db88 <_ZNKSt14default_deleteI5BlinkEclEPS0_>
 800e9e4:	bf00      	nop
 800e9e6:	3708      	adds	r7, #8
 800e9e8:	46bd      	mov	sp, r7
 800e9ea:	bd80      	pop	{r7, pc}

0800e9ec <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b086      	sub	sp, #24
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	330c      	adds	r3, #12
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	f000 f837 	bl	800ea6c <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 800e9fe:	4602      	mov	r2, r0
 800ea00:	f107 0314 	add.w	r3, r7, #20
 800ea04:	4611      	mov	r1, r2
 800ea06:	4618      	mov	r0, r3
 800ea08:	f000 f83c 	bl	800ea84 <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800ea0c:	f107 0114 	add.w	r1, r7, #20
 800ea10:	f107 030c 	add.w	r3, r7, #12
 800ea14:	687a      	ldr	r2, [r7, #4]
 800ea16:	4618      	mov	r0, r3
 800ea18:	f000 f841 	bl	800ea9e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>
	this->~_Sp_counted_deleter();
 800ea1c:	6878      	ldr	r0, [r7, #4]
 800ea1e:	f7ff ffaf 	bl	800e980 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 800ea22:	f107 030c 	add.w	r3, r7, #12
 800ea26:	4618      	mov	r0, r3
 800ea28:	f000 f84d 	bl	800eac6 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 800ea2c:	f107 0314 	add.w	r3, r7, #20
 800ea30:	4618      	mov	r0, r3
 800ea32:	f7ff fb76 	bl	800e122 <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800ea36:	3718      	adds	r7, #24
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	bd80      	pop	{r7, pc}

0800ea3c <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const type_info& __ti [[__gnu__::__unused__]]) noexcept
 800ea3c:	b480      	push	{r7}
 800ea3e:	b083      	sub	sp, #12
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
 800ea44:	6039      	str	r1, [r7, #0]
        return nullptr;
 800ea46:	2300      	movs	r3, #0
      }
 800ea48:	4618      	mov	r0, r3
 800ea4a:	370c      	adds	r7, #12
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea52:	4770      	bx	lr

0800ea54 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b082      	sub	sp, #8
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
 800ea5c:	6878      	ldr	r0, [r7, #4]
 800ea5e:	f000 f847 	bl	800eaf0 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI5BlinkELb1EE6_S_getERS3_>
 800ea62:	4603      	mov	r3, r0
 800ea64:	4618      	mov	r0, r3
 800ea66:	3708      	adds	r7, #8
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	bd80      	pop	{r7, pc}

0800ea6c <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b082      	sub	sp, #8
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
 800ea74:	6878      	ldr	r0, [r7, #4]
 800ea76:	f000 f846 	bl	800eb06 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EE6_S_getERS1_>
 800ea7a:	4603      	mov	r3, r0
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	3708      	adds	r7, #8
 800ea80:	46bd      	mov	sp, r7
 800ea82:	bd80      	pop	{r7, pc}

0800ea84 <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b082      	sub	sp, #8
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]
 800ea8c:	6039      	str	r1, [r7, #0]
 800ea8e:	6878      	ldr	r0, [r7, #4]
 800ea90:	f7ff fc86 	bl	800e3a0 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	4618      	mov	r0, r3
 800ea98:	3708      	adds	r7, #8
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	bd80      	pop	{r7, pc}

0800ea9e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800ea9e:	b580      	push	{r7, lr}
 800eaa0:	b084      	sub	sp, #16
 800eaa2:	af00      	add	r7, sp, #0
 800eaa4:	60f8      	str	r0, [r7, #12]
 800eaa6:	60b9      	str	r1, [r7, #8]
 800eaa8:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800eaaa:	68b8      	ldr	r0, [r7, #8]
 800eaac:	f000 f836 	bl	800eb1c <_ZSt11__addressofISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>
 800eab0:	4602      	mov	r2, r0
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	601a      	str	r2, [r3, #0]
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	687a      	ldr	r2, [r7, #4]
 800eaba:	605a      	str	r2, [r3, #4]
      { }
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	4618      	mov	r0, r3
 800eac0:	3710      	adds	r7, #16
 800eac2:	46bd      	mov	sp, r7
 800eac4:	bd80      	pop	{r7, pc}

0800eac6 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 800eac6:	b580      	push	{r7, lr}
 800eac8:	b082      	sub	sp, #8
 800eaca:	af00      	add	r7, sp, #0
 800eacc:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	685b      	ldr	r3, [r3, #4]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d007      	beq.n	800eae6 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	6818      	ldr	r0, [r3, #0]
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	685b      	ldr	r3, [r3, #4]
 800eade:	2201      	movs	r2, #1
 800eae0:	4619      	mov	r1, r3
 800eae2:	f000 f826 	bl	800eb32 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>
      }
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	4618      	mov	r0, r3
 800eaea:	3708      	adds	r7, #8
 800eaec:	46bd      	mov	sp, r7
 800eaee:	bd80      	pop	{r7, pc}

0800eaf0 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI5BlinkELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 800eaf0:	b480      	push	{r7}
 800eaf2:	b083      	sub	sp, #12
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	4618      	mov	r0, r3
 800eafc:	370c      	adds	r7, #12
 800eafe:	46bd      	mov	sp, r7
 800eb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb04:	4770      	bx	lr

0800eb06 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EE6_S_getERS1_>:
 800eb06:	b480      	push	{r7}
 800eb08:	b083      	sub	sp, #12
 800eb0a:	af00      	add	r7, sp, #0
 800eb0c:	6078      	str	r0, [r7, #4]
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	4618      	mov	r0, r3
 800eb12:	370c      	adds	r7, #12
 800eb14:	46bd      	mov	sp, r7
 800eb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb1a:	4770      	bx	lr

0800eb1c <_ZSt11__addressofISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800eb1c:	b480      	push	{r7}
 800eb1e:	b083      	sub	sp, #12
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	4618      	mov	r0, r3
 800eb28:	370c      	adds	r7, #12
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb30:	4770      	bx	lr

0800eb32 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800eb32:	b580      	push	{r7, lr}
 800eb34:	b084      	sub	sp, #16
 800eb36:	af00      	add	r7, sp, #0
 800eb38:	60f8      	str	r0, [r7, #12]
 800eb3a:	60b9      	str	r1, [r7, #8]
 800eb3c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800eb3e:	687a      	ldr	r2, [r7, #4]
 800eb40:	68b9      	ldr	r1, [r7, #8]
 800eb42:	68f8      	ldr	r0, [r7, #12]
 800eb44:	f000 f804 	bl	800eb50 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>
 800eb48:	bf00      	nop
 800eb4a:	3710      	adds	r7, #16
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	bd80      	pop	{r7, pc}

0800eb50 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b084      	sub	sp, #16
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	60f8      	str	r0, [r7, #12]
 800eb58:	60b9      	str	r1, [r7, #8]
 800eb5a:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	011b      	lsls	r3, r3, #4
 800eb60:	4619      	mov	r1, r3
 800eb62:	68b8      	ldr	r0, [r7, #8]
 800eb64:	f015 f96b 	bl	8023e3e <_ZdlPvj>
      }
 800eb68:	3710      	adds	r7, #16
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	bd80      	pop	{r7, pc}

0800eb6e <_ZNSt9_Any_data9_M_accessEv>:
    void*       _M_access()       noexcept { return &_M_pod_data[0]; }
 800eb6e:	b480      	push	{r7}
 800eb70:	b083      	sub	sp, #12
 800eb72:	af00      	add	r7, sp, #0
 800eb74:	6078      	str	r0, [r7, #4]
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	4618      	mov	r0, r3
 800eb7a:	370c      	adds	r7, #12
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb82:	4770      	bx	lr

0800eb84 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const noexcept { return &_M_pod_data[0]; }
 800eb84:	b480      	push	{r7}
 800eb86:	b083      	sub	sp, #12
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	4618      	mov	r0, r3
 800eb90:	370c      	adds	r7, #12
 800eb92:	46bd      	mov	sp, r7
 800eb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb98:	4770      	bx	lr

0800eb9a <_ZN14CommsInterface15setDataCallbackERKSt8functionIFvbEE>:

	virtual void init(void);
	virtual void start(void);
	virtual void tasks(void);

    void setDataCallback(const std::function<void(bool)>& callback) {
 800eb9a:	b580      	push	{r7, lr}
 800eb9c:	b082      	sub	sp, #8
 800eb9e:	af00      	add	r7, sp, #0
 800eba0:	6078      	str	r0, [r7, #4]
 800eba2:	6039      	str	r1, [r7, #0]
        dataCallback = callback;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	3318      	adds	r3, #24
 800eba8:	6839      	ldr	r1, [r7, #0]
 800ebaa:	4618      	mov	r0, r3
 800ebac:	f000 f8e9 	bl	800ed82 <_ZNSt8functionIFvbEEaSERKS1_>
    }
 800ebb0:	bf00      	nop
 800ebb2:	3708      	adds	r7, #8
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	bd80      	pop	{r7, pc}

0800ebb8 <_ZN12CommsHandler7setDataEb>:
    void setData(bool value) { data = value; }
 800ebb8:	b480      	push	{r7}
 800ebba:	b083      	sub	sp, #12
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
 800ebc0:	460b      	mov	r3, r1
 800ebc2:	70fb      	strb	r3, [r7, #3]
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	78fa      	ldrb	r2, [r7, #3]
 800ebc8:	771a      	strb	r2, [r3, #28]
 800ebca:	bf00      	nop
 800ebcc:	370c      	adds	r7, #12
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd4:	4770      	bx	lr
	...

0800ebd8 <_ZN12CommsHandlerC1Ev>:
#include "commsHandler.h"
#include "../../remora.h"

CommsHandler::CommsHandler() : data(false), noDataCount(0), status(false) {
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b082      	sub	sp, #8
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	f001 fb86 	bl	80102f4 <_ZN6ModuleC1Ev>
 800ebe8:	4a0a      	ldr	r2, [pc, #40]	@ (800ec14 <_ZN12CommsHandlerC1Ev+0x3c>)
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	601a      	str	r2, [r3, #0]
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	3318      	adds	r3, #24
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	f000 f8fa 	bl	800edec <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEC1IS2_vEEv>
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	771a      	strb	r2, [r3, #28]
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	2200      	movs	r2, #0
 800ec02:	775a      	strb	r2, [r3, #29]
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	2200      	movs	r2, #0
 800ec08:	779a      	strb	r2, [r3, #30]

}
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	3708      	adds	r7, #8
 800ec10:	46bd      	mov	sp, r7
 800ec12:	bd80      	pop	{r7, pc}
 800ec14:	080267a0 	.word	0x080267a0

0800ec18 <_ZN12CommsHandlerD1Ev>:

CommsHandler::~CommsHandler() {}
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b082      	sub	sp, #8
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	6078      	str	r0, [r7, #4]
 800ec20:	4a08      	ldr	r2, [pc, #32]	@ (800ec44 <_ZN12CommsHandlerD1Ev+0x2c>)
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	601a      	str	r2, [r3, #0]
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	3318      	adds	r3, #24
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	f7fc f89a 	bl	800ad64 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EED1Ev>
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	4618      	mov	r0, r3
 800ec34:	f001 fb7a 	bl	801032c <_ZN6ModuleD1Ev>
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	3708      	adds	r7, #8
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	bd80      	pop	{r7, pc}
 800ec42:	bf00      	nop
 800ec44:	080267a0 	.word	0x080267a0

0800ec48 <_ZN12CommsHandlerD0Ev>:
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b082      	sub	sp, #8
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	6078      	str	r0, [r7, #4]
 800ec50:	6878      	ldr	r0, [r7, #4]
 800ec52:	f7ff ffe1 	bl	800ec18 <_ZN12CommsHandlerD1Ev>
 800ec56:	2120      	movs	r1, #32
 800ec58:	6878      	ldr	r0, [r7, #4]
 800ec5a:	f015 f8f0 	bl	8023e3e <_ZdlPvj>
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	4618      	mov	r0, r3
 800ec62:	3708      	adds	r7, #8
 800ec64:	46bd      	mov	sp, r7
 800ec66:	bd80      	pop	{r7, pc}

0800ec68 <_ZZN12CommsHandler4initEvENKUlbE_clEb>:

void CommsHandler::init() {
    interface->setDataCallback([this](bool dataReceived) {
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b082      	sub	sp, #8
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
 800ec70:	460b      	mov	r3, r1
 800ec72:	70fb      	strb	r3, [r7, #3]
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	681b      	ldr	r3, [r3, #0]
        this->setData(dataReceived);
 800ec78:	78fa      	ldrb	r2, [r7, #3]
 800ec7a:	4611      	mov	r1, r2
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	f7ff ff9b 	bl	800ebb8 <_ZN12CommsHandler7setDataEb>
    });
 800ec82:	bf00      	nop
 800ec84:	3708      	adds	r7, #8
 800ec86:	46bd      	mov	sp, r7
 800ec88:	bd80      	pop	{r7, pc}

0800ec8a <_ZN12CommsHandler4initEv>:
void CommsHandler::init() {
 800ec8a:	b590      	push	{r4, r7, lr}
 800ec8c:	b089      	sub	sp, #36	@ 0x24
 800ec8e:	af00      	add	r7, sp, #0
 800ec90:	6078      	str	r0, [r7, #4]
    interface->setDataCallback([this](bool dataReceived) {
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	3318      	adds	r3, #24
 800ec96:	4618      	mov	r0, r3
 800ec98:	f000 f8b8 	bl	800ee0c <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEptEv>
 800ec9c:	4604      	mov	r4, r0
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	61fb      	str	r3, [r7, #28]
 800eca2:	f107 021c 	add.w	r2, r7, #28
 800eca6:	f107 030c 	add.w	r3, r7, #12
 800ecaa:	4611      	mov	r1, r2
 800ecac:	4618      	mov	r0, r3
 800ecae:	f000 f8b9 	bl	800ee24 <_ZNSt8functionIFvbEEC1IZN12CommsHandler4initEvEUlbE_vEEOT_>
 800ecb2:	f107 030c 	add.w	r3, r7, #12
 800ecb6:	4619      	mov	r1, r3
 800ecb8:	4620      	mov	r0, r4
 800ecba:	f7ff ff6e 	bl	800eb9a <_ZN14CommsInterface15setDataCallbackERKSt8functionIFvbEE>
 800ecbe:	f107 030c 	add.w	r3, r7, #12
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	f7f2 f844 	bl	8000d50 <_ZNSt8functionIFvbEED1Ev>

    interface->init();
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	3318      	adds	r3, #24
 800eccc:	4618      	mov	r0, r3
 800ecce:	f000 f89d 	bl	800ee0c <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEptEv>
 800ecd2:	4603      	mov	r3, r0
 800ecd4:	681a      	ldr	r2, [r3, #0]
 800ecd6:	321c      	adds	r2, #28
 800ecd8:	6812      	ldr	r2, [r2, #0]
 800ecda:	4618      	mov	r0, r3
 800ecdc:	4790      	blx	r2
}
 800ecde:	bf00      	nop
 800ece0:	3724      	adds	r7, #36	@ 0x24
 800ece2:	46bd      	mov	sp, r7
 800ece4:	bd90      	pop	{r4, r7, pc}

0800ece6 <_ZN12CommsHandler5startEv>:

void CommsHandler::start() {
 800ece6:	b580      	push	{r7, lr}
 800ece8:	b082      	sub	sp, #8
 800ecea:	af00      	add	r7, sp, #0
 800ecec:	6078      	str	r0, [r7, #4]
	interface->start();
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	3318      	adds	r3, #24
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	f000 f88a 	bl	800ee0c <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEptEv>
 800ecf8:	4603      	mov	r3, r0
 800ecfa:	681a      	ldr	r2, [r3, #0]
 800ecfc:	3220      	adds	r2, #32
 800ecfe:	6812      	ldr	r2, [r2, #0]
 800ed00:	4618      	mov	r0, r3
 800ed02:	4790      	blx	r2
}
 800ed04:	bf00      	nop
 800ed06:	3708      	adds	r7, #8
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	bd80      	pop	{r7, pc}

0800ed0c <_ZN12CommsHandler5tasksEv>:

// tasks is run in the main loop to do polling tasks, eg Ethernet, processing data etc
void CommsHandler::tasks() {
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b082      	sub	sp, #8
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]
	interface->tasks();
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	3318      	adds	r3, #24
 800ed18:	4618      	mov	r0, r3
 800ed1a:	f000 f877 	bl	800ee0c <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEptEv>
 800ed1e:	4603      	mov	r3, r0
 800ed20:	681a      	ldr	r2, [r3, #0]
 800ed22:	3224      	adds	r2, #36	@ 0x24
 800ed24:	6812      	ldr	r2, [r2, #0]
 800ed26:	4618      	mov	r0, r3
 800ed28:	4790      	blx	r2
}
 800ed2a:	bf00      	nop
 800ed2c:	3708      	adds	r7, #8
 800ed2e:	46bd      	mov	sp, r7
 800ed30:	bd80      	pop	{r7, pc}

0800ed32 <_ZN12CommsHandler6updateEv>:

// update it run in the servo thread to monitor communications
void CommsHandler::update() {
 800ed32:	b480      	push	{r7}
 800ed34:	b083      	sub	sp, #12
 800ed36:	af00      	add	r7, sp, #0
 800ed38:	6078      	str	r0, [r7, #4]
	if (data)
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	7f1b      	ldrb	r3, [r3, #28]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d006      	beq.n	800ed50 <_ZN12CommsHandler6updateEv+0x1e>
	{
		noDataCount = 0;
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	2200      	movs	r2, #0
 800ed46:	775a      	strb	r2, [r3, #29]
		status = true;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	2201      	movs	r2, #1
 800ed4c:	779a      	strb	r2, [r3, #30]
 800ed4e:	e005      	b.n	800ed5c <_ZN12CommsHandler6updateEv+0x2a>
	}
	else
	{
		noDataCount++;
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	7f5b      	ldrb	r3, [r3, #29]
 800ed54:	3301      	adds	r3, #1
 800ed56:	b2da      	uxtb	r2, r3
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	775a      	strb	r2, [r3, #29]
	}

	if (noDataCount > Config::dataErrMax)
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	7f5b      	ldrb	r3, [r3, #29]
 800ed60:	2b64      	cmp	r3, #100	@ 0x64
 800ed62:	d905      	bls.n	800ed70 <_ZN12CommsHandler6updateEv+0x3e>
	{
		noDataCount = 0;
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	2200      	movs	r2, #0
 800ed68:	775a      	strb	r2, [r3, #29]
		status = false;
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	2200      	movs	r2, #0
 800ed6e:	779a      	strb	r2, [r3, #30]
	}

	data = false;
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	2200      	movs	r2, #0
 800ed74:	771a      	strb	r2, [r3, #28]
}
 800ed76:	bf00      	nop
 800ed78:	370c      	adds	r7, #12
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed80:	4770      	bx	lr

0800ed82 <_ZNSt8functionIFvbEEaSERKS1_>:
      operator=(const function& __x)
 800ed82:	b580      	push	{r7, lr}
 800ed84:	b086      	sub	sp, #24
 800ed86:	af00      	add	r7, sp, #0
 800ed88:	6078      	str	r0, [r7, #4]
 800ed8a:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 800ed8c:	f107 0308 	add.w	r3, r7, #8
 800ed90:	6839      	ldr	r1, [r7, #0]
 800ed92:	4618      	mov	r0, r3
 800ed94:	f000 f876 	bl	800ee84 <_ZNSt8functionIFvbEEC1ERKS1_>
 800ed98:	f107 0308 	add.w	r3, r7, #8
 800ed9c:	6879      	ldr	r1, [r7, #4]
 800ed9e:	4618      	mov	r0, r3
 800eda0:	f000 f89b 	bl	800eeda <_ZNSt8functionIFvbEE4swapERS1_>
 800eda4:	f107 0308 	add.w	r3, r7, #8
 800eda8:	4618      	mov	r0, r3
 800edaa:	f7f1 ffd1 	bl	8000d50 <_ZNSt8functionIFvbEED1Ev>
	return *this;
 800edae:	687b      	ldr	r3, [r7, #4]
      }
 800edb0:	4618      	mov	r0, r3
 800edb2:	3718      	adds	r7, #24
 800edb4:	46bd      	mov	sp, r7
 800edb6:	bd80      	pop	{r7, pc}

0800edb8 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEC1Ev>:
      __uniq_ptr_impl() = default;
 800edb8:	b580      	push	{r7, lr}
 800edba:	b082      	sub	sp, #8
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	4618      	mov	r0, r3
 800edc4:	f000 f8aa 	bl	800ef1c <_ZNSt5tupleIJP14CommsInterfaceSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	4618      	mov	r0, r3
 800edcc:	3708      	adds	r7, #8
 800edce:	46bd      	mov	sp, r7
 800edd0:	bd80      	pop	{r7, pc}

0800edd2 <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800edd2:	b580      	push	{r7, lr}
 800edd4:	b082      	sub	sp, #8
 800edd6:	af00      	add	r7, sp, #0
 800edd8:	6078      	str	r0, [r7, #4]
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	4618      	mov	r0, r3
 800edde:	f7ff ffeb 	bl	800edb8 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEC1Ev>
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	4618      	mov	r0, r3
 800ede6:	3708      	adds	r7, #8
 800ede8:	46bd      	mov	sp, r7
 800edea:	bd80      	pop	{r7, pc}

0800edec <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEC1IS2_vEEv>:
	constexpr unique_ptr() noexcept
 800edec:	b580      	push	{r7, lr}
 800edee:	b082      	sub	sp, #8
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
	: _M_t()
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	2200      	movs	r2, #0
 800edf8:	601a      	str	r2, [r3, #0]
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	4618      	mov	r0, r3
 800edfe:	f7ff ffe8 	bl	800edd2 <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>
	{ }
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	4618      	mov	r0, r3
 800ee06:	3708      	adds	r7, #8
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	bd80      	pop	{r7, pc}

0800ee0c <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b082      	sub	sp, #8
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
	return get();
 800ee14:	6878      	ldr	r0, [r7, #4]
 800ee16:	f000 f88e 	bl	800ef36 <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EE3getEv>
 800ee1a:	4603      	mov	r3, r0
      }
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	3708      	adds	r7, #8
 800ee20:	46bd      	mov	sp, r7
 800ee22:	bd80      	pop	{r7, pc}

0800ee24 <_ZNSt8functionIFvbEEC1IZN12CommsHandler4initEvEUlbE_vEEOT_>:
	function(_Functor&& __f)
 800ee24:	b590      	push	{r4, r7, lr}
 800ee26:	b083      	sub	sp, #12
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
 800ee2c:	6039      	str	r1, [r7, #0]
	: _Function_base()
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	461a      	mov	r2, r3
 800ee32:	2300      	movs	r3, #0
 800ee34:	6013      	str	r3, [r2, #0]
 800ee36:	6053      	str	r3, [r2, #4]
 800ee38:	6093      	str	r3, [r2, #8]
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	f7f3 f9a9 	bl	8002194 <_ZNSt14_Function_baseC1Ev>
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	2200      	movs	r2, #0
 800ee46:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 800ee48:	6838      	ldr	r0, [r7, #0]
 800ee4a:	f000 f881 	bl	800ef50 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E21_M_not_empty_functionIS2_EEbRKT_>
 800ee4e:	4603      	mov	r3, r0
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d00e      	beq.n	800ee72 <_ZNSt8functionIFvbEEC1IZN12CommsHandler4initEvEUlbE_vEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 800ee54:	687c      	ldr	r4, [r7, #4]
 800ee56:	6838      	ldr	r0, [r7, #0]
 800ee58:	f000 f885 	bl	800ef66 <_ZSt7forwardIZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS2_E4typeE>
 800ee5c:	4603      	mov	r3, r0
 800ee5e:	4619      	mov	r1, r3
 800ee60:	4620      	mov	r0, r4
 800ee62:	f000 f88b 	bl	800ef7c <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E15_M_init_functorIS2_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	4a04      	ldr	r2, [pc, #16]	@ (800ee7c <_ZNSt8functionIFvbEEC1IZN12CommsHandler4initEvEUlbE_vEEOT_+0x58>)
 800ee6a:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	4a04      	ldr	r2, [pc, #16]	@ (800ee80 <_ZNSt8functionIFvbEEC1IZN12CommsHandler4initEvEUlbE_vEEOT_+0x5c>)
 800ee70:	609a      	str	r2, [r3, #8]
	}
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	4618      	mov	r0, r3
 800ee76:	370c      	adds	r7, #12
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	bd90      	pop	{r4, r7, pc}
 800ee7c:	0800efa1 	.word	0x0800efa1
 800ee80:	0800efcb 	.word	0x0800efcb

0800ee84 <_ZNSt8functionIFvbEEC1ERKS1_>:
      function(const function& __x)
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b082      	sub	sp, #8
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
 800ee8c:	6039      	str	r1, [r7, #0]
      : _Function_base()
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	461a      	mov	r2, r3
 800ee92:	2300      	movs	r3, #0
 800ee94:	6013      	str	r3, [r2, #0]
 800ee96:	6053      	str	r3, [r2, #4]
 800ee98:	6093      	str	r3, [r2, #8]
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	f7f3 f979 	bl	8002194 <_ZNSt14_Function_baseC1Ev>
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	2200      	movs	r2, #0
 800eea6:	60da      	str	r2, [r3, #12]
	if (static_cast<bool>(__x))
 800eea8:	6838      	ldr	r0, [r7, #0]
 800eeaa:	f000 f8ad 	bl	800f008 <_ZNKSt8functionIFvbEEcvbEv>
 800eeae:	4603      	mov	r3, r0
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d00d      	beq.n	800eed0 <_ZNSt8functionIFvbEEC1ERKS1_+0x4c>
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 800eeb4:	683b      	ldr	r3, [r7, #0]
 800eeb6:	689b      	ldr	r3, [r3, #8]
 800eeb8:	6878      	ldr	r0, [r7, #4]
 800eeba:	6839      	ldr	r1, [r7, #0]
 800eebc:	2202      	movs	r2, #2
 800eebe:	4798      	blx	r3
	    _M_invoker = __x._M_invoker;
 800eec0:	683b      	ldr	r3, [r7, #0]
 800eec2:	68da      	ldr	r2, [r3, #12]
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	60da      	str	r2, [r3, #12]
	    _M_manager = __x._M_manager;
 800eec8:	683b      	ldr	r3, [r7, #0]
 800eeca:	689a      	ldr	r2, [r3, #8]
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	609a      	str	r2, [r3, #8]
      }
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	4618      	mov	r0, r3
 800eed4:	3708      	adds	r7, #8
 800eed6:	46bd      	mov	sp, r7
 800eed8:	bd80      	pop	{r7, pc}

0800eeda <_ZNSt8functionIFvbEE4swapERS1_>:
      void swap(function& __x) noexcept
 800eeda:	b580      	push	{r7, lr}
 800eedc:	b082      	sub	sp, #8
 800eede:	af00      	add	r7, sp, #0
 800eee0:	6078      	str	r0, [r7, #4]
 800eee2:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	683a      	ldr	r2, [r7, #0]
 800eee8:	4611      	mov	r1, r2
 800eeea:	4618      	mov	r0, r3
 800eeec:	f000 f89c 	bl	800f028 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	f103 0208 	add.w	r2, r3, #8
 800eef6:	683b      	ldr	r3, [r7, #0]
 800eef8:	3308      	adds	r3, #8
 800eefa:	4619      	mov	r1, r3
 800eefc:	4610      	mov	r0, r2
 800eefe:	f000 f8ba 	bl	800f076 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	f103 020c 	add.w	r2, r3, #12
 800ef08:	683b      	ldr	r3, [r7, #0]
 800ef0a:	330c      	adds	r3, #12
 800ef0c:	4619      	mov	r1, r3
 800ef0e:	4610      	mov	r0, r2
 800ef10:	f000 f8d0 	bl	800f0b4 <_ZSt4swapIPFvRKSt9_Any_dataObEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>
      }
 800ef14:	bf00      	nop
 800ef16:	3708      	adds	r7, #8
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	bd80      	pop	{r7, pc}

0800ef1c <_ZNSt5tupleIJP14CommsInterfaceSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b082      	sub	sp, #8
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	4618      	mov	r0, r3
 800ef28:	f000 f8e3 	bl	800f0f2 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEEC1Ev>
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	4618      	mov	r0, r3
 800ef30:	3708      	adds	r7, #8
 800ef32:	46bd      	mov	sp, r7
 800ef34:	bd80      	pop	{r7, pc}

0800ef36 <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800ef36:	b580      	push	{r7, lr}
 800ef38:	b082      	sub	sp, #8
 800ef3a:	af00      	add	r7, sp, #0
 800ef3c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	4618      	mov	r0, r3
 800ef42:	f000 f8e6 	bl	800f112 <_ZNKSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 800ef46:	4603      	mov	r3, r0
 800ef48:	4618      	mov	r0, r3
 800ef4a:	3708      	adds	r7, #8
 800ef4c:	46bd      	mov	sp, r7
 800ef4e:	bd80      	pop	{r7, pc}

0800ef50 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E21_M_not_empty_functionIS2_EEbRKT_>:
	  _M_not_empty_function(const _Tp&) noexcept
 800ef50:	b480      	push	{r7}
 800ef52:	b083      	sub	sp, #12
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	6078      	str	r0, [r7, #4]
	  { return true; }
 800ef58:	2301      	movs	r3, #1
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	370c      	adds	r7, #12
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef64:	4770      	bx	lr

0800ef66 <_ZSt7forwardIZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ef66:	b480      	push	{r7}
 800ef68:	b083      	sub	sp, #12
 800ef6a:	af00      	add	r7, sp, #0
 800ef6c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	4618      	mov	r0, r3
 800ef72:	370c      	adds	r7, #12
 800ef74:	46bd      	mov	sp, r7
 800ef76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef7a:	4770      	bx	lr

0800ef7c <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E15_M_init_functorIS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800ef7c:	b590      	push	{r4, r7, lr}
 800ef7e:	b083      	sub	sp, #12
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	6078      	str	r0, [r7, #4]
 800ef84:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 800ef86:	6838      	ldr	r0, [r7, #0]
 800ef88:	f7ff ffed 	bl	800ef66 <_ZSt7forwardIZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS2_E4typeE>
 800ef8c:	4603      	mov	r3, r0
 800ef8e:	4622      	mov	r2, r4
 800ef90:	4619      	mov	r1, r3
 800ef92:	6878      	ldr	r0, [r7, #4]
 800ef94:	f000 f8cb 	bl	800f12e <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E9_M_createIS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 800ef98:	bf00      	nop
 800ef9a:	370c      	adds	r7, #12
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	bd90      	pop	{r4, r7, pc}

0800efa0 <_ZNSt17_Function_handlerIFvbEZN12CommsHandler4initEvEUlbE_E9_M_invokeERKSt9_Any_dataOb>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800efa0:	b590      	push	{r4, r7, lr}
 800efa2:	b083      	sub	sp, #12
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
 800efa8:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800efaa:	6878      	ldr	r0, [r7, #4]
 800efac:	f000 f8d8 	bl	800f160 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E14_M_get_pointerERKSt9_Any_data>
 800efb0:	4604      	mov	r4, r0
 800efb2:	6838      	ldr	r0, [r7, #0]
 800efb4:	f7f3 f82c 	bl	8002010 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 800efb8:	4603      	mov	r3, r0
 800efba:	4619      	mov	r1, r3
 800efbc:	4620      	mov	r0, r4
 800efbe:	f000 f8df 	bl	800f180 <_ZSt10__invoke_rIvRZN12CommsHandler4initEvEUlbE_JbEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
				     std::forward<_ArgTypes>(__args)...);
 800efc2:	bf00      	nop
      }
 800efc4:	370c      	adds	r7, #12
 800efc6:	46bd      	mov	sp, r7
 800efc8:	bd90      	pop	{r4, r7, pc}

0800efca <_ZNSt17_Function_handlerIFvbEZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800efca:	b590      	push	{r4, r7, lr}
 800efcc:	b085      	sub	sp, #20
 800efce:	af00      	add	r7, sp, #0
 800efd0:	60f8      	str	r0, [r7, #12]
 800efd2:	60b9      	str	r1, [r7, #8]
 800efd4:	4613      	mov	r3, r2
 800efd6:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800efd8:	79fb      	ldrb	r3, [r7, #7]
 800efda:	2b01      	cmp	r3, #1
 800efdc:	d109      	bne.n	800eff2 <_ZNSt17_Function_handlerIFvbEZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800efde:	68b8      	ldr	r0, [r7, #8]
 800efe0:	f000 f8be 	bl	800f160 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E14_M_get_pointerERKSt9_Any_data>
 800efe4:	4604      	mov	r4, r0
 800efe6:	68f8      	ldr	r0, [r7, #12]
 800efe8:	f000 f8e0 	bl	800f1ac <_ZNSt9_Any_data9_M_accessIPZN12CommsHandler4initEvEUlbE_EERT_v>
 800efec:	4603      	mov	r3, r0
 800efee:	601c      	str	r4, [r3, #0]
	    break;
 800eff0:	e005      	b.n	800effe <_ZNSt17_Function_handlerIFvbEZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800eff2:	79fb      	ldrb	r3, [r7, #7]
 800eff4:	461a      	mov	r2, r3
 800eff6:	68b9      	ldr	r1, [r7, #8]
 800eff8:	68f8      	ldr	r0, [r7, #12]
 800effa:	f000 f8e3 	bl	800f1c4 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 800effe:	2300      	movs	r3, #0
      }
 800f000:	4618      	mov	r0, r3
 800f002:	3714      	adds	r7, #20
 800f004:	46bd      	mov	sp, r7
 800f006:	bd90      	pop	{r4, r7, pc}

0800f008 <_ZNKSt8functionIFvbEEcvbEv>:
      explicit operator bool() const noexcept
 800f008:	b580      	push	{r7, lr}
 800f00a:	b082      	sub	sp, #8
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	4618      	mov	r0, r3
 800f014:	f7f1 fe5b 	bl	8000cce <_ZNKSt14_Function_base8_M_emptyEv>
 800f018:	4603      	mov	r3, r0
 800f01a:	f083 0301 	eor.w	r3, r3, #1
 800f01e:	b2db      	uxtb	r3, r3
 800f020:	4618      	mov	r0, r3
 800f022:	3708      	adds	r7, #8
 800f024:	46bd      	mov	sp, r7
 800f026:	bd80      	pop	{r7, pc}

0800f028 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 800f028:	b580      	push	{r7, lr}
 800f02a:	b084      	sub	sp, #16
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
 800f030:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800f032:	6878      	ldr	r0, [r7, #4]
 800f034:	f000 f900 	bl	800f238 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800f038:	4602      	mov	r2, r0
 800f03a:	f107 0308 	add.w	r3, r7, #8
 800f03e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f042:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 800f046:	6838      	ldr	r0, [r7, #0]
 800f048:	f000 f8f6 	bl	800f238 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800f04c:	4602      	mov	r2, r0
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f054:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800f058:	f107 0308 	add.w	r3, r7, #8
 800f05c:	4618      	mov	r0, r3
 800f05e:	f000 f8eb 	bl	800f238 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800f062:	4602      	mov	r2, r0
 800f064:	683b      	ldr	r3, [r7, #0]
 800f066:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f06a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800f06e:	bf00      	nop
 800f070:	3710      	adds	r7, #16
 800f072:	46bd      	mov	sp, r7
 800f074:	bd80      	pop	{r7, pc}

0800f076 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 800f076:	b580      	push	{r7, lr}
 800f078:	b084      	sub	sp, #16
 800f07a:	af00      	add	r7, sp, #0
 800f07c:	6078      	str	r0, [r7, #4]
 800f07e:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800f080:	6878      	ldr	r0, [r7, #4]
 800f082:	f000 f8e4 	bl	800f24e <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800f086:	4603      	mov	r3, r0
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800f08c:	6838      	ldr	r0, [r7, #0]
 800f08e:	f000 f8de 	bl	800f24e <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800f092:	4603      	mov	r3, r0
 800f094:	681a      	ldr	r2, [r3, #0]
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800f09a:	f107 030c 	add.w	r3, r7, #12
 800f09e:	4618      	mov	r0, r3
 800f0a0:	f000 f8d5 	bl	800f24e <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800f0a4:	4603      	mov	r3, r0
 800f0a6:	681a      	ldr	r2, [r3, #0]
 800f0a8:	683b      	ldr	r3, [r7, #0]
 800f0aa:	601a      	str	r2, [r3, #0]
    }
 800f0ac:	bf00      	nop
 800f0ae:	3710      	adds	r7, #16
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	bd80      	pop	{r7, pc}

0800f0b4 <_ZSt4swapIPFvRKSt9_Any_dataObEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>:
    swap(_Tp& __a, _Tp& __b)
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	b084      	sub	sp, #16
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
 800f0bc:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800f0be:	6878      	ldr	r0, [r7, #4]
 800f0c0:	f000 f8d0 	bl	800f264 <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>
 800f0c4:	4603      	mov	r3, r0
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800f0ca:	6838      	ldr	r0, [r7, #0]
 800f0cc:	f000 f8ca 	bl	800f264 <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>
 800f0d0:	4603      	mov	r3, r0
 800f0d2:	681a      	ldr	r2, [r3, #0]
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800f0d8:	f107 030c 	add.w	r3, r7, #12
 800f0dc:	4618      	mov	r0, r3
 800f0de:	f000 f8c1 	bl	800f264 <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	681a      	ldr	r2, [r3, #0]
 800f0e6:	683b      	ldr	r3, [r7, #0]
 800f0e8:	601a      	str	r2, [r3, #0]
    }
 800f0ea:	bf00      	nop
 800f0ec:	3710      	adds	r7, #16
 800f0ee:	46bd      	mov	sp, r7
 800f0f0:	bd80      	pop	{r7, pc}

0800f0f2 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800f0f2:	b580      	push	{r7, lr}
 800f0f4:	b082      	sub	sp, #8
 800f0f6:	af00      	add	r7, sp, #0
 800f0f8:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800f0fa:	6878      	ldr	r0, [r7, #4]
 800f0fc:	f000 f8bd 	bl	800f27a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEEC1Ev>
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	4618      	mov	r0, r3
 800f104:	f000 f8c5 	bl	800f292 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EEC1Ev>
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	4618      	mov	r0, r3
 800f10c:	3708      	adds	r7, #8
 800f10e:	46bd      	mov	sp, r7
 800f110:	bd80      	pop	{r7, pc}

0800f112 <_ZNKSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800f112:	b580      	push	{r7, lr}
 800f114:	b082      	sub	sp, #8
 800f116:	af00      	add	r7, sp, #0
 800f118:	6078      	str	r0, [r7, #4]
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	4618      	mov	r0, r3
 800f11e:	f000 f8c6 	bl	800f2ae <_ZSt3getILj0EJP14CommsInterfaceSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800f122:	4603      	mov	r3, r0
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	4618      	mov	r0, r3
 800f128:	3708      	adds	r7, #8
 800f12a:	46bd      	mov	sp, r7
 800f12c:	bd80      	pop	{r7, pc}

0800f12e <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E9_M_createIS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 800f12e:	b590      	push	{r4, r7, lr}
 800f130:	b085      	sub	sp, #20
 800f132:	af00      	add	r7, sp, #0
 800f134:	60f8      	str	r0, [r7, #12]
 800f136:	60b9      	str	r1, [r7, #8]
 800f138:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800f13a:	68f8      	ldr	r0, [r7, #12]
 800f13c:	f7ff fd17 	bl	800eb6e <_ZNSt9_Any_data9_M_accessEv>
 800f140:	4603      	mov	r3, r0
 800f142:	4619      	mov	r1, r3
 800f144:	2004      	movs	r0, #4
 800f146:	f7fa fadb 	bl	8009700 <_ZnwjPv>
 800f14a:	4604      	mov	r4, r0
 800f14c:	68b8      	ldr	r0, [r7, #8]
 800f14e:	f7ff ff0a 	bl	800ef66 <_ZSt7forwardIZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS2_E4typeE>
 800f152:	4603      	mov	r3, r0
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	6023      	str	r3, [r4, #0]
	  }
 800f158:	bf00      	nop
 800f15a:	3714      	adds	r7, #20
 800f15c:	46bd      	mov	sp, r7
 800f15e:	bd90      	pop	{r4, r7, pc}

0800f160 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 800f160:	b580      	push	{r7, lr}
 800f162:	b084      	sub	sp, #16
 800f164:	af00      	add	r7, sp, #0
 800f166:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800f168:	6878      	ldr	r0, [r7, #4]
 800f16a:	f000 f8ad 	bl	800f2c8 <_ZNKSt9_Any_data9_M_accessIZN12CommsHandler4initEvEUlbE_EERKT_v>
 800f16e:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800f170:	68f8      	ldr	r0, [r7, #12]
 800f172:	f000 f8b5 	bl	800f2e0 <_ZSt11__addressofIKZN12CommsHandler4initEvEUlbE_EPT_RS3_>
 800f176:	4603      	mov	r3, r0
	}
 800f178:	4618      	mov	r0, r3
 800f17a:	3710      	adds	r7, #16
 800f17c:	46bd      	mov	sp, r7
 800f17e:	bd80      	pop	{r7, pc}

0800f180 <_ZSt10__invoke_rIvRZN12CommsHandler4initEvEUlbE_JbEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:

#if __cplusplus >= 201703L
  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr enable_if_t<is_invocable_r_v<_Res, _Callable, _Args...>, _Res>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800f180:	b5b0      	push	{r4, r5, r7, lr}
 800f182:	b082      	sub	sp, #8
 800f184:	af00      	add	r7, sp, #0
 800f186:	6078      	str	r0, [r7, #4]
 800f188:	6039      	str	r1, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      if constexpr (is_void_v<_Res>)
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800f18a:	6878      	ldr	r0, [r7, #4]
 800f18c:	f000 f8b3 	bl	800f2f6 <_ZSt7forwardIRZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS3_E4typeE>
 800f190:	4604      	mov	r4, r0
 800f192:	6838      	ldr	r0, [r7, #0]
 800f194:	f7f2 ff3c 	bl	8002010 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 800f198:	4603      	mov	r3, r0
 800f19a:	461a      	mov	r2, r3
 800f19c:	4621      	mov	r1, r4
 800f19e:	4628      	mov	r0, r5
 800f1a0:	f000 f8b4 	bl	800f30c <_ZSt13__invoke_implIvRZN12CommsHandler4initEvEUlbE_JbEET_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
      else
	return std::__invoke_impl<__type>(__tag{},
					  std::forward<_Callable>(__fn),
					  std::forward<_Args>(__args)...);
    }
 800f1a4:	bf00      	nop
 800f1a6:	3708      	adds	r7, #8
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	bdb0      	pop	{r4, r5, r7, pc}

0800f1ac <_ZNSt9_Any_data9_M_accessIPZN12CommsHandler4initEvEUlbE_EERT_v>:
      _M_access() noexcept
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b082      	sub	sp, #8
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800f1b4:	6878      	ldr	r0, [r7, #4]
 800f1b6:	f7ff fcda 	bl	800eb6e <_ZNSt9_Any_data9_M_accessEv>
 800f1ba:	4603      	mov	r3, r0
 800f1bc:	4618      	mov	r0, r3
 800f1be:	3708      	adds	r7, #8
 800f1c0:	46bd      	mov	sp, r7
 800f1c2:	bd80      	pop	{r7, pc}

0800f1c4 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800f1c4:	b590      	push	{r4, r7, lr}
 800f1c6:	b085      	sub	sp, #20
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	60f8      	str	r0, [r7, #12]
 800f1cc:	60b9      	str	r1, [r7, #8]
 800f1ce:	4613      	mov	r3, r2
 800f1d0:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800f1d2:	79fb      	ldrb	r3, [r7, #7]
 800f1d4:	2b03      	cmp	r3, #3
 800f1d6:	d82a      	bhi.n	800f22e <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
 800f1d8:	a201      	add	r2, pc, #4	@ (adr r2, 800f1e0 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x1c>)
 800f1da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1de:	bf00      	nop
 800f1e0:	0800f1f1 	.word	0x0800f1f1
 800f1e4:	0800f1ff 	.word	0x0800f1ff
 800f1e8:	0800f213 	.word	0x0800f213
 800f1ec:	0800f225 	.word	0x0800f225
	      __dest._M_access<const type_info*>() = nullptr;
 800f1f0:	68f8      	ldr	r0, [r7, #12]
 800f1f2:	f000 f8a2 	bl	800f33a <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 800f1f6:	4603      	mov	r3, r0
 800f1f8:	2200      	movs	r2, #0
 800f1fa:	601a      	str	r2, [r3, #0]
	      break;
 800f1fc:	e017      	b.n	800f22e <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800f1fe:	68b8      	ldr	r0, [r7, #8]
 800f200:	f7ff ffae 	bl	800f160 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E14_M_get_pointerERKSt9_Any_data>
 800f204:	4604      	mov	r4, r0
 800f206:	68f8      	ldr	r0, [r7, #12]
 800f208:	f7ff ffd0 	bl	800f1ac <_ZNSt9_Any_data9_M_accessIPZN12CommsHandler4initEvEUlbE_EERT_v>
 800f20c:	4603      	mov	r3, r0
 800f20e:	601c      	str	r4, [r3, #0]
	      break;
 800f210:	e00d      	b.n	800f22e <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 800f212:	68b8      	ldr	r0, [r7, #8]
 800f214:	f7ff ffa4 	bl	800f160 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E14_M_get_pointerERKSt9_Any_data>
 800f218:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 800f21a:	4619      	mov	r1, r3
 800f21c:	68f8      	ldr	r0, [r7, #12]
 800f21e:	f000 f898 	bl	800f352 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>
	      break;
 800f222:	e004      	b.n	800f22e <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 800f224:	4621      	mov	r1, r4
 800f226:	68f8      	ldr	r0, [r7, #12]
 800f228:	f000 f8a5 	bl	800f376 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 800f22c:	bf00      	nop
	  return false;
 800f22e:	2300      	movs	r3, #0
	}
 800f230:	4618      	mov	r0, r3
 800f232:	3714      	adds	r7, #20
 800f234:	46bd      	mov	sp, r7
 800f236:	bd90      	pop	{r4, r7, pc}

0800f238 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800f238:	b480      	push	{r7}
 800f23a:	b083      	sub	sp, #12
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	4618      	mov	r0, r3
 800f244:	370c      	adds	r7, #12
 800f246:	46bd      	mov	sp, r7
 800f248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f24c:	4770      	bx	lr

0800f24e <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 800f24e:	b480      	push	{r7}
 800f250:	b083      	sub	sp, #12
 800f252:	af00      	add	r7, sp, #0
 800f254:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	4618      	mov	r0, r3
 800f25a:	370c      	adds	r7, #12
 800f25c:	46bd      	mov	sp, r7
 800f25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f262:	4770      	bx	lr

0800f264 <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 800f264:	b480      	push	{r7}
 800f266:	b083      	sub	sp, #12
 800f268:	af00      	add	r7, sp, #0
 800f26a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	4618      	mov	r0, r3
 800f270:	370c      	adds	r7, #12
 800f272:	46bd      	mov	sp, r7
 800f274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f278:	4770      	bx	lr

0800f27a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEEC1Ev>:
      _Tuple_impl()
 800f27a:	b580      	push	{r7, lr}
 800f27c:	b082      	sub	sp, #8
 800f27e:	af00      	add	r7, sp, #0
 800f280:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800f282:	6878      	ldr	r0, [r7, #4]
 800f284:	f000 f883 	bl	800f38e <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EEC1Ev>
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	4618      	mov	r0, r3
 800f28c:	3708      	adds	r7, #8
 800f28e:	46bd      	mov	sp, r7
 800f290:	bd80      	pop	{r7, pc}

0800f292 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EEC1Ev>:
      constexpr _Head_base()
 800f292:	b480      	push	{r7}
 800f294:	b083      	sub	sp, #12
 800f296:	af00      	add	r7, sp, #0
 800f298:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	2200      	movs	r2, #0
 800f29e:	601a      	str	r2, [r3, #0]
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	370c      	adds	r7, #12
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ac:	4770      	bx	lr

0800f2ae <_ZSt3getILj0EJP14CommsInterfaceSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800f2ae:	b580      	push	{r7, lr}
 800f2b0:	b082      	sub	sp, #8
 800f2b2:	af00      	add	r7, sp, #0
 800f2b4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	f000 f873 	bl	800f3a4 <_ZSt12__get_helperILj0EP14CommsInterfaceJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800f2be:	4603      	mov	r3, r0
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	3708      	adds	r7, #8
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	bd80      	pop	{r7, pc}

0800f2c8 <_ZNKSt9_Any_data9_M_accessIZN12CommsHandler4initEvEUlbE_EERKT_v>:
      _M_access() const noexcept
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	b082      	sub	sp, #8
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800f2d0:	6878      	ldr	r0, [r7, #4]
 800f2d2:	f7ff fc57 	bl	800eb84 <_ZNKSt9_Any_data9_M_accessEv>
 800f2d6:	4603      	mov	r3, r0
 800f2d8:	4618      	mov	r0, r3
 800f2da:	3708      	adds	r7, #8
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	bd80      	pop	{r7, pc}

0800f2e0 <_ZSt11__addressofIKZN12CommsHandler4initEvEUlbE_EPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800f2e0:	b480      	push	{r7}
 800f2e2:	b083      	sub	sp, #12
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	370c      	adds	r7, #12
 800f2ee:	46bd      	mov	sp, r7
 800f2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f4:	4770      	bx	lr

0800f2f6 <_ZSt7forwardIRZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f2f6:	b480      	push	{r7}
 800f2f8:	b083      	sub	sp, #12
 800f2fa:	af00      	add	r7, sp, #0
 800f2fc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	4618      	mov	r0, r3
 800f302:	370c      	adds	r7, #12
 800f304:	46bd      	mov	sp, r7
 800f306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30a:	4770      	bx	lr

0800f30c <_ZSt13__invoke_implIvRZN12CommsHandler4initEvEUlbE_JbEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800f30c:	b590      	push	{r4, r7, lr}
 800f30e:	b085      	sub	sp, #20
 800f310:	af00      	add	r7, sp, #0
 800f312:	7338      	strb	r0, [r7, #12]
 800f314:	60b9      	str	r1, [r7, #8]
 800f316:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800f318:	68b8      	ldr	r0, [r7, #8]
 800f31a:	f7ff ffec 	bl	800f2f6 <_ZSt7forwardIRZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS3_E4typeE>
 800f31e:	4604      	mov	r4, r0
 800f320:	6878      	ldr	r0, [r7, #4]
 800f322:	f7f2 fe75 	bl	8002010 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 800f326:	4603      	mov	r3, r0
 800f328:	781b      	ldrb	r3, [r3, #0]
 800f32a:	4619      	mov	r1, r3
 800f32c:	4620      	mov	r0, r4
 800f32e:	f7ff fc9b 	bl	800ec68 <_ZZN12CommsHandler4initEvENKUlbE_clEb>
 800f332:	bf00      	nop
 800f334:	3714      	adds	r7, #20
 800f336:	46bd      	mov	sp, r7
 800f338:	bd90      	pop	{r4, r7, pc}

0800f33a <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access() noexcept
 800f33a:	b580      	push	{r7, lr}
 800f33c:	b082      	sub	sp, #8
 800f33e:	af00      	add	r7, sp, #0
 800f340:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800f342:	6878      	ldr	r0, [r7, #4]
 800f344:	f7ff fc13 	bl	800eb6e <_ZNSt9_Any_data9_M_accessEv>
 800f348:	4603      	mov	r3, r0
 800f34a:	4618      	mov	r0, r3
 800f34c:	3708      	adds	r7, #8
 800f34e:	46bd      	mov	sp, r7
 800f350:	bd80      	pop	{r7, pc}

0800f352 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800f352:	b590      	push	{r4, r7, lr}
 800f354:	b083      	sub	sp, #12
 800f356:	af00      	add	r7, sp, #0
 800f358:	6078      	str	r0, [r7, #4]
 800f35a:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 800f35c:	6838      	ldr	r0, [r7, #0]
 800f35e:	f000 f82d 	bl	800f3bc <_ZSt7forwardIRKZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS4_E4typeE>
 800f362:	4603      	mov	r3, r0
 800f364:	4622      	mov	r2, r4
 800f366:	4619      	mov	r1, r3
 800f368:	6878      	ldr	r0, [r7, #4]
 800f36a:	f000 f832 	bl	800f3d2 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 800f36e:	bf00      	nop
 800f370:	370c      	adds	r7, #12
 800f372:	46bd      	mov	sp, r7
 800f374:	bd90      	pop	{r4, r7, pc}

0800f376 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800f376:	b580      	push	{r7, lr}
 800f378:	b082      	sub	sp, #8
 800f37a:	af00      	add	r7, sp, #0
 800f37c:	6078      	str	r0, [r7, #4]
 800f37e:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800f380:	6878      	ldr	r0, [r7, #4]
 800f382:	f000 f83f 	bl	800f404 <_ZNSt9_Any_data9_M_accessIZN12CommsHandler4initEvEUlbE_EERT_v>
	}
 800f386:	bf00      	nop
 800f388:	3708      	adds	r7, #8
 800f38a:	46bd      	mov	sp, r7
 800f38c:	bd80      	pop	{r7, pc}

0800f38e <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EEC1Ev>:
      constexpr _Head_base()
 800f38e:	b480      	push	{r7}
 800f390:	b083      	sub	sp, #12
 800f392:	af00      	add	r7, sp, #0
 800f394:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	4618      	mov	r0, r3
 800f39a:	370c      	adds	r7, #12
 800f39c:	46bd      	mov	sp, r7
 800f39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a2:	4770      	bx	lr

0800f3a4 <_ZSt12__get_helperILj0EP14CommsInterfaceJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b082      	sub	sp, #8
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800f3ac:	6878      	ldr	r0, [r7, #4]
 800f3ae:	f000 f835 	bl	800f41c <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEE7_M_headERKS4_>
 800f3b2:	4603      	mov	r3, r0
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	3708      	adds	r7, #8
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	bd80      	pop	{r7, pc}

0800f3bc <_ZSt7forwardIRKZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f3bc:	b480      	push	{r7}
 800f3be:	b083      	sub	sp, #12
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	370c      	adds	r7, #12
 800f3ca:	46bd      	mov	sp, r7
 800f3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d0:	4770      	bx	lr

0800f3d2 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 800f3d2:	b590      	push	{r4, r7, lr}
 800f3d4:	b085      	sub	sp, #20
 800f3d6:	af00      	add	r7, sp, #0
 800f3d8:	60f8      	str	r0, [r7, #12]
 800f3da:	60b9      	str	r1, [r7, #8]
 800f3dc:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800f3de:	68f8      	ldr	r0, [r7, #12]
 800f3e0:	f7ff fbc5 	bl	800eb6e <_ZNSt9_Any_data9_M_accessEv>
 800f3e4:	4603      	mov	r3, r0
 800f3e6:	4619      	mov	r1, r3
 800f3e8:	2004      	movs	r0, #4
 800f3ea:	f7fa f989 	bl	8009700 <_ZnwjPv>
 800f3ee:	4604      	mov	r4, r0
 800f3f0:	68b8      	ldr	r0, [r7, #8]
 800f3f2:	f7ff ffe3 	bl	800f3bc <_ZSt7forwardIRKZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS4_E4typeE>
 800f3f6:	4603      	mov	r3, r0
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	6023      	str	r3, [r4, #0]
	  }
 800f3fc:	bf00      	nop
 800f3fe:	3714      	adds	r7, #20
 800f400:	46bd      	mov	sp, r7
 800f402:	bd90      	pop	{r4, r7, pc}

0800f404 <_ZNSt9_Any_data9_M_accessIZN12CommsHandler4initEvEUlbE_EERT_v>:
      _M_access() noexcept
 800f404:	b580      	push	{r7, lr}
 800f406:	b082      	sub	sp, #8
 800f408:	af00      	add	r7, sp, #0
 800f40a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800f40c:	6878      	ldr	r0, [r7, #4]
 800f40e:	f7ff fbae 	bl	800eb6e <_ZNSt9_Any_data9_M_accessEv>
 800f412:	4603      	mov	r3, r0
 800f414:	4618      	mov	r0, r3
 800f416:	3708      	adds	r7, #8
 800f418:	46bd      	mov	sp, r7
 800f41a:	bd80      	pop	{r7, pc}

0800f41c <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b082      	sub	sp, #8
 800f420:	af00      	add	r7, sp, #0
 800f422:	6078      	str	r0, [r7, #4]
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	4618      	mov	r0, r3
 800f428:	f000 f805 	bl	800f436 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EE7_M_headERKS2_>
 800f42c:	4603      	mov	r3, r0
 800f42e:	4618      	mov	r0, r3
 800f430:	3708      	adds	r7, #8
 800f432:	46bd      	mov	sp, r7
 800f434:	bd80      	pop	{r7, pc}

0800f436 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800f436:	b480      	push	{r7}
 800f438:	b083      	sub	sp, #12
 800f43a:	af00      	add	r7, sp, #0
 800f43c:	6078      	str	r0, [r7, #4]
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	4618      	mov	r0, r3
 800f442:	370c      	adds	r7, #12
 800f444:	46bd      	mov	sp, r7
 800f446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44a:	4770      	bx	lr

0800f44c <_ZN6Remora9getTxDataEv>:
	Remora();
	void run();
    void setBaseFreq(uint32_t freq) { baseFreq = freq; }
    void setServoFreq(uint32_t freq) { servoFreq = freq; }

    volatile txData_t* getTxData() { return &txData; }
 800f44c:	b480      	push	{r7}
 800f44e:	b083      	sub	sp, #12
 800f450:	af00      	add	r7, sp, #0
 800f452:	6078      	str	r0, [r7, #4]
 800f454:	4b03      	ldr	r3, [pc, #12]	@ (800f464 <_ZN6Remora9getTxDataEv+0x18>)
 800f456:	4618      	mov	r0, r3
 800f458:	370c      	adds	r7, #12
 800f45a:	46bd      	mov	sp, r7
 800f45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f460:	4770      	bx	lr
 800f462:	bf00      	nop
 800f464:	30000080 	.word	0x30000080

0800f468 <_ZN6Remora9getRxDataEv>:
    volatile rxData_t* getRxData() { return &rxData; }
 800f468:	b480      	push	{r7}
 800f46a:	b083      	sub	sp, #12
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	6078      	str	r0, [r7, #4]
 800f470:	4b03      	ldr	r3, [pc, #12]	@ (800f480 <_ZN6Remora9getRxDataEv+0x18>)
 800f472:	4618      	mov	r0, r3
 800f474:	370c      	adds	r7, #12
 800f476:	46bd      	mov	sp, r7
 800f478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f47c:	4770      	bx	lr
 800f47e:	bf00      	nop
 800f480:	300000c0 	.word	0x300000c0

0800f484 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>:
#include "digitalPin.h"

std::shared_ptr<Module> DigitalPin::create(const JsonObject& config, Remora* instance) {
 800f484:	b580      	push	{r7, lr}
 800f486:	b0b0      	sub	sp, #192	@ 0xc0
 800f488:	af04      	add	r7, sp, #16
 800f48a:	60f8      	str	r0, [r7, #12]
 800f48c:	60b9      	str	r1, [r7, #8]
 800f48e:	607a      	str	r2, [r7, #4]
	const char* pin = config["Pin"];
 800f490:	f107 0320 	add.w	r3, r7, #32
 800f494:	4a65      	ldr	r2, [pc, #404]	@ (800f62c <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1a8>)
 800f496:	68b9      	ldr	r1, [r7, #8]
 800f498:	4618      	mov	r0, r3
 800f49a:	f7fe f997 	bl	800d7cc <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA4_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800f49e:	f107 0320 	add.w	r3, r7, #32
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	f7f7 f970 	bl	8006788 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800f4a8:	4603      	mov	r3, r0
 800f4aa:	61fb      	str	r3, [r7, #28]
	const char* mode = config["Mode"];
 800f4ac:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800f4b0:	4a5f      	ldr	r2, [pc, #380]	@ (800f630 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1ac>)
 800f4b2:	68b9      	ldr	r1, [r7, #8]
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	f000 f985 	bl	800f7c4 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA5_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800f4ba:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800f4be:	4618      	mov	r0, r3
 800f4c0:	f7f7 f962 	bl	8006788 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800f4c4:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
	const char* invert = config["Invert"];
 800f4c8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800f4cc:	4a59      	ldr	r2, [pc, #356]	@ (800f634 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1b0>)
 800f4ce:	68b9      	ldr	r1, [r7, #8]
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	f7f7 f934 	bl	800673e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800f4d6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800f4da:	4618      	mov	r0, r3
 800f4dc:	f7f7 f954 	bl	8006788 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800f4e0:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
	const char* modifier = config["Modifier"];
 800f4e4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f4e8:	4a53      	ldr	r2, [pc, #332]	@ (800f638 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1b4>)
 800f4ea:	68b9      	ldr	r1, [r7, #8]
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	f000 f98e 	bl	800f80e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA9_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800f4f2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	f7f7 f946 	bl	8006788 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800f4fc:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
	int dataBit = config["Data Bit"];
 800f500:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800f504:	4a4d      	ldr	r2, [pc, #308]	@ (800f63c <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1b8>)
 800f506:	68b9      	ldr	r1, [r7, #8]
 800f508:	4618      	mov	r0, r3
 800f50a:	f000 f980 	bl	800f80e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA9_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800f50e:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800f512:	4618      	mov	r0, r3
 800f514:	f7fe f97f 	bl	800d816 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>
 800f518:	4603      	mov	r3, r0
 800f51a:	61bb      	str	r3, [r7, #24]

	int mod;
	bool inv;

	if (!strcmp(modifier, "Open Drain")) {
 800f51c:	4948      	ldr	r1, [pc, #288]	@ (800f640 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1bc>)
 800f51e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800f522:	f7f0 fedd 	bl	80002e0 <strcmp>
 800f526:	4603      	mov	r3, r0
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d102      	bne.n	800f532 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xae>
		mod = OPENDRAIN;
 800f52c:	2301      	movs	r3, #1
 800f52e:	617b      	str	r3, [r7, #20]
 800f530:	e022      	b.n	800f578 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xf4>
	} else if (!strcmp(modifier, "Pull Up")) {
 800f532:	4944      	ldr	r1, [pc, #272]	@ (800f644 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1c0>)
 800f534:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800f538:	f7f0 fed2 	bl	80002e0 <strcmp>
 800f53c:	4603      	mov	r3, r0
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d102      	bne.n	800f548 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xc4>
		mod = PULLUP;
 800f542:	2302      	movs	r3, #2
 800f544:	617b      	str	r3, [r7, #20]
 800f546:	e017      	b.n	800f578 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xf4>
	} else if (!strcmp(modifier, "Pull Down")) {
 800f548:	493f      	ldr	r1, [pc, #252]	@ (800f648 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1c4>)
 800f54a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800f54e:	f7f0 fec7 	bl	80002e0 <strcmp>
 800f552:	4603      	mov	r3, r0
 800f554:	2b00      	cmp	r3, #0
 800f556:	d102      	bne.n	800f55e <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xda>
		mod = PULLDOWN;
 800f558:	2303      	movs	r3, #3
 800f55a:	617b      	str	r3, [r7, #20]
 800f55c:	e00c      	b.n	800f578 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xf4>
	} else if (!strcmp(modifier, "Pull None")) {
 800f55e:	493b      	ldr	r1, [pc, #236]	@ (800f64c <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1c8>)
 800f560:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800f564:	f7f0 febc 	bl	80002e0 <strcmp>
 800f568:	4603      	mov	r3, r0
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d102      	bne.n	800f574 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xf0>
		mod = PULLNONE;
 800f56e:	2304      	movs	r3, #4
 800f570:	617b      	str	r3, [r7, #20]
 800f572:	e001      	b.n	800f578 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xf4>
	} else {
		mod = NONE;
 800f574:	2300      	movs	r3, #0
 800f576:	617b      	str	r3, [r7, #20]
	}

	inv = !strcmp(invert, "True");
 800f578:	4935      	ldr	r1, [pc, #212]	@ (800f650 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1cc>)
 800f57a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 800f57e:	f7f0 feaf 	bl	80002e0 <strcmp>
 800f582:	4603      	mov	r3, r0
 800f584:	2b00      	cmp	r3, #0
 800f586:	bf0c      	ite	eq
 800f588:	2301      	moveq	r3, #1
 800f58a:	2300      	movne	r3, #0
 800f58c:	b2db      	uxtb	r3, r3
 800f58e:	74fb      	strb	r3, [r7, #19]

	volatile uint16_t* ptrData = (!strcmp(mode, "Output")) ? &instance->getRxData()->outputs : &instance->getTxData()->inputs;
 800f590:	4930      	ldr	r1, [pc, #192]	@ (800f654 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1d0>)
 800f592:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 800f596:	f7f0 fea3 	bl	80002e0 <strcmp>
 800f59a:	4603      	mov	r3, r0
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d105      	bne.n	800f5ac <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x128>
 800f5a0:	6878      	ldr	r0, [r7, #4]
 800f5a2:	f7ff ff61 	bl	800f468 <_ZN6Remora9getRxDataEv>
 800f5a6:	4603      	mov	r3, r0
 800f5a8:	333d      	adds	r3, #61	@ 0x3d
 800f5aa:	e004      	b.n	800f5b6 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x132>
 800f5ac:	6878      	ldr	r0, [r7, #4]
 800f5ae:	f7ff ff4d 	bl	800f44c <_ZN6Remora9getTxDataEv>
 800f5b2:	4603      	mov	r3, r0
 800f5b4:	333c      	adds	r3, #60	@ 0x3c
 800f5b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

	printf("Creating DigitalPin module: Mode=%s, Pin=%s\n", mode, pin);
 800f5ba:	69fb      	ldr	r3, [r7, #28]
 800f5bc:	461a      	mov	r2, r3
 800f5be:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 800f5c2:	4825      	ldr	r0, [pc, #148]	@ (800f658 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1d4>)
 800f5c4:	f015 fa18 	bl	80249f8 <iprintf>
	return std::make_unique<DigitalPin>(*ptrData, (!strcmp(mode, "Output")) ? 1 : 0, pin, dataBit, inv, mod);
 800f5c8:	4922      	ldr	r1, [pc, #136]	@ (800f654 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1d0>)
 800f5ca:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 800f5ce:	f7f0 fe87 	bl	80002e0 <strcmp>
 800f5d2:	4603      	mov	r3, r0
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d101      	bne.n	800f5dc <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x158>
 800f5d8:	2301      	movs	r3, #1
 800f5da:	e000      	b.n	800f5de <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x15a>
 800f5dc:	2300      	movs	r3, #0
 800f5de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800f5e2:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 800f5e6:	f107 011c 	add.w	r1, r7, #28
 800f5ea:	f107 029c 	add.w	r2, r7, #156	@ 0x9c
 800f5ee:	f107 0314 	add.w	r3, r7, #20
 800f5f2:	9302      	str	r3, [sp, #8]
 800f5f4:	f107 0313 	add.w	r3, r7, #19
 800f5f8:	9301      	str	r3, [sp, #4]
 800f5fa:	f107 0318 	add.w	r3, r7, #24
 800f5fe:	9300      	str	r3, [sp, #0]
 800f600:	460b      	mov	r3, r1
 800f602:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 800f606:	f000 f927 	bl	800f858 <_ZSt11make_uniqueI10DigitalPinJRVtiRPKcRiRbS6_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 800f60a:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800f60e:	4619      	mov	r1, r3
 800f610:	68f8      	ldr	r0, [r7, #12]
 800f612:	f000 f999 	bl	800f948 <_ZNSt10shared_ptrI6ModuleEC1I10DigitalPinSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>
 800f616:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800f61a:	4618      	mov	r0, r3
 800f61c:	f000 f972 	bl	800f904 <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EED1Ev>
 800f620:	bf00      	nop
}
 800f622:	68f8      	ldr	r0, [r7, #12]
 800f624:	37b0      	adds	r7, #176	@ 0xb0
 800f626:	46bd      	mov	sp, r7
 800f628:	bd80      	pop	{r7, pc}
 800f62a:	bf00      	nop
 800f62c:	08025e48 	.word	0x08025e48
 800f630:	08025e4c 	.word	0x08025e4c
 800f634:	08025e54 	.word	0x08025e54
 800f638:	08025e5c 	.word	0x08025e5c
 800f63c:	08025e68 	.word	0x08025e68
 800f640:	08025e74 	.word	0x08025e74
 800f644:	08025e80 	.word	0x08025e80
 800f648:	08025e88 	.word	0x08025e88
 800f64c:	08025e94 	.word	0x08025e94
 800f650:	08025ea0 	.word	0x08025ea0
 800f654:	08025ea8 	.word	0x08025ea8
 800f658:	08025eb0 	.word	0x08025eb0

0800f65c <_ZN10DigitalPinC1ERVtiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEibi>:

DigitalPin::DigitalPin(volatile uint16_t& _ptrData, int _mode, std::string _portAndPin, 
 800f65c:	b590      	push	{r4, r7, lr}
 800f65e:	b085      	sub	sp, #20
 800f660:	af00      	add	r7, sp, #0
 800f662:	60f8      	str	r0, [r7, #12]
 800f664:	60b9      	str	r1, [r7, #8]
 800f666:	607a      	str	r2, [r7, #4]
 800f668:	603b      	str	r3, [r7, #0]
    portAndPin(std::move(_portAndPin)),
    bitNumber(_bitNumber),
    invert(_invert),
    modifier(_modifier),
    pin(std::make_unique<Pin>(portAndPin, mode, modifier)),
    mask(1 << bitNumber)
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	4618      	mov	r0, r3
 800f66e:	f000 fe41 	bl	80102f4 <_ZN6ModuleC1Ev>
 800f672:	4a1c      	ldr	r2, [pc, #112]	@ (800f6e4 <_ZN10DigitalPinC1ERVtiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEibi+0x88>)
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	601a      	str	r2, [r3, #0]
    ptrData(&_ptrData),
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	68ba      	ldr	r2, [r7, #8]
 800f67c:	619a      	str	r2, [r3, #24]
    mode(_mode),
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	687a      	ldr	r2, [r7, #4]
 800f682:	61da      	str	r2, [r3, #28]
    portAndPin(std::move(_portAndPin)),
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	f103 0420 	add.w	r4, r3, #32
 800f68a:	6838      	ldr	r0, [r7, #0]
 800f68c:	f000 f96f 	bl	800f96e <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 800f690:	4603      	mov	r3, r0
 800f692:	4619      	mov	r1, r3
 800f694:	4620      	mov	r0, r4
 800f696:	f014 fcb3 	bl	8024000 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
    bitNumber(_bitNumber),
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	6a3a      	ldr	r2, [r7, #32]
 800f69e:	639a      	str	r2, [r3, #56]	@ 0x38
    invert(_invert),
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800f6a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    modifier(_modifier),
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f6ae:	641a      	str	r2, [r3, #64]	@ 0x40
    pin(std::make_unique<Pin>(portAndPin, mode, modifier)),
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	f103 0120 	add.w	r1, r3, #32
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	f103 021c 	add.w	r2, r3, #28
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	f103 0044 	add.w	r0, r3, #68	@ 0x44
 800f6c8:	4623      	mov	r3, r4
 800f6ca:	f000 f95b 	bl	800f984 <_ZSt11make_uniqueI3PinJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERiS8_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
    mask(1 << bitNumber)
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f6d2:	2201      	movs	r2, #1
 800f6d4:	409a      	lsls	r2, r3
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	649a      	str	r2, [r3, #72]	@ 0x48
{
}
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	4618      	mov	r0, r3
 800f6de:	3714      	adds	r7, #20
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	bd90      	pop	{r4, r7, pc}
 800f6e4:	080267e0 	.word	0x080267e0

0800f6e8 <_ZN10DigitalPin6updateEv>:

void DigitalPin::update()
{
 800f6e8:	b580      	push	{r7, lr}
 800f6ea:	b084      	sub	sp, #16
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	6078      	str	r0, [r7, #4]
    bool pinState;
    if (mode == 0) {  // Input mode
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	69db      	ldr	r3, [r3, #28]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d136      	bne.n	800f766 <_ZN10DigitalPin6updateEv+0x7e>
        pinState = pin->get();
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	3344      	adds	r3, #68	@ 0x44
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	f7fe f974 	bl	800d9ea <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EEptEv>
 800f702:	4603      	mov	r3, r0
 800f704:	4618      	mov	r0, r3
 800f706:	f7f4 fa0b 	bl	8003b20 <_ZNK3Pin3getEv>
 800f70a:	4603      	mov	r3, r0
 800f70c:	73fb      	strb	r3, [r7, #15]
        if (invert) {
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f714:	2b00      	cmp	r3, #0
 800f716:	d003      	beq.n	800f720 <_ZN10DigitalPin6updateEv+0x38>
            pinState = !pinState;
 800f718:	7bfb      	ldrb	r3, [r7, #15]
 800f71a:	f083 0301 	eor.w	r3, r3, #1
 800f71e:	73fb      	strb	r3, [r7, #15]
        }
        if (pinState) {
 800f720:	7bfb      	ldrb	r3, [r7, #15]
 800f722:	2b00      	cmp	r3, #0
 800f724:	d00e      	beq.n	800f744 <_ZN10DigitalPin6updateEv+0x5c>
            *ptrData |= mask;
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	699b      	ldr	r3, [r3, #24]
 800f72a:	881b      	ldrh	r3, [r3, #0]
 800f72c:	b29b      	uxth	r3, r3
 800f72e:	b21a      	sxth	r2, r3
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f734:	b21b      	sxth	r3, r3
 800f736:	4313      	orrs	r3, r2
 800f738:	b21a      	sxth	r2, r3
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	699b      	ldr	r3, [r3, #24]
 800f73e:	b292      	uxth	r2, r2
 800f740:	801a      	strh	r2, [r3, #0]
        if (invert) {
            pinState = !pinState;
        }
        pin->set(pinState);
    }
}
 800f742:	e031      	b.n	800f7a8 <_ZN10DigitalPin6updateEv+0xc0>
            *ptrData &= ~mask;
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	699b      	ldr	r3, [r3, #24]
 800f748:	881b      	ldrh	r3, [r3, #0]
 800f74a:	b29b      	uxth	r3, r3
 800f74c:	b21a      	sxth	r2, r3
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f752:	b21b      	sxth	r3, r3
 800f754:	43db      	mvns	r3, r3
 800f756:	b21b      	sxth	r3, r3
 800f758:	4013      	ands	r3, r2
 800f75a:	b21a      	sxth	r2, r3
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	699b      	ldr	r3, [r3, #24]
 800f760:	b292      	uxth	r2, r2
 800f762:	801a      	strh	r2, [r3, #0]
}
 800f764:	e020      	b.n	800f7a8 <_ZN10DigitalPin6updateEv+0xc0>
        pinState = (*ptrData & mask) ? true : false;
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	699b      	ldr	r3, [r3, #24]
 800f76a:	881b      	ldrh	r3, [r3, #0]
 800f76c:	b29b      	uxth	r3, r3
 800f76e:	461a      	mov	r2, r3
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f774:	4013      	ands	r3, r2
 800f776:	2b00      	cmp	r3, #0
 800f778:	bf14      	ite	ne
 800f77a:	2301      	movne	r3, #1
 800f77c:	2300      	moveq	r3, #0
 800f77e:	73fb      	strb	r3, [r7, #15]
        if (invert) {
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f786:	2b00      	cmp	r3, #0
 800f788:	d003      	beq.n	800f792 <_ZN10DigitalPin6updateEv+0xaa>
            pinState = !pinState;
 800f78a:	7bfb      	ldrb	r3, [r7, #15]
 800f78c:	f083 0301 	eor.w	r3, r3, #1
 800f790:	73fb      	strb	r3, [r7, #15]
        pin->set(pinState);
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	3344      	adds	r3, #68	@ 0x44
 800f796:	4618      	mov	r0, r3
 800f798:	f7fe f927 	bl	800d9ea <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EEptEv>
 800f79c:	4602      	mov	r2, r0
 800f79e:	7bfb      	ldrb	r3, [r7, #15]
 800f7a0:	4619      	mov	r1, r3
 800f7a2:	4610      	mov	r0, r2
 800f7a4:	f7f4 f9d2 	bl	8003b4c <_ZN3Pin3setEb>
}
 800f7a8:	bf00      	nop
 800f7aa:	3710      	adds	r7, #16
 800f7ac:	46bd      	mov	sp, r7
 800f7ae:	bd80      	pop	{r7, pc}

0800f7b0 <_ZN10DigitalPin10slowUpdateEv>:

void DigitalPin::slowUpdate()
{
 800f7b0:	b480      	push	{r7}
 800f7b2:	b083      	sub	sp, #12
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	6078      	str	r0, [r7, #4]
    return;
 800f7b8:	bf00      	nop
}
 800f7ba:	370c      	adds	r7, #12
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c2:	4770      	bx	lr

0800f7c4 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA5_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:

  // Gets or sets the member with specified key.
  // https://arduinojson.org/v7/api/jsonobject/subscript/
  template <typename TString,
            detail::enable_if_t<detail::IsString<TString>::value, int> = 0>
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b08c      	sub	sp, #48	@ 0x30
 800f7c8:	af02      	add	r7, sp, #8
 800f7ca:	60f8      	str	r0, [r7, #12]
 800f7cc:	60b9      	str	r1, [r7, #8]
 800f7ce:	607a      	str	r2, [r7, #4]
      const TString& key) const {
    return {*this, detail::adaptString(key)};
 800f7d0:	68ba      	ldr	r2, [r7, #8]
 800f7d2:	f107 0314 	add.w	r3, r7, #20
 800f7d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f7da:	e883 0003 	stmia.w	r3, {r0, r1}
 800f7de:	f107 031c 	add.w	r3, r7, #28
 800f7e2:	6879      	ldr	r1, [r7, #4]
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	f7fc f8c6 	bl	800b976 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA5_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800f7ea:	466a      	mov	r2, sp
 800f7ec:	f107 0320 	add.w	r3, r7, #32
 800f7f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f7f4:	e882 0003 	stmia.w	r2, {r0, r1}
 800f7f8:	69fb      	ldr	r3, [r7, #28]
 800f7fa:	f107 0214 	add.w	r2, r7, #20
 800f7fe:	ca06      	ldmia	r2, {r1, r2}
 800f800:	68f8      	ldr	r0, [r7, #12]
 800f802:	f7f7 f930 	bl	8006a66 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 800f806:	68f8      	ldr	r0, [r7, #12]
 800f808:	3728      	adds	r7, #40	@ 0x28
 800f80a:	46bd      	mov	sp, r7
 800f80c:	bd80      	pop	{r7, pc}

0800f80e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA9_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 800f80e:	b580      	push	{r7, lr}
 800f810:	b08c      	sub	sp, #48	@ 0x30
 800f812:	af02      	add	r7, sp, #8
 800f814:	60f8      	str	r0, [r7, #12]
 800f816:	60b9      	str	r1, [r7, #8]
 800f818:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 800f81a:	68ba      	ldr	r2, [r7, #8]
 800f81c:	f107 0314 	add.w	r3, r7, #20
 800f820:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f824:	e883 0003 	stmia.w	r3, {r0, r1}
 800f828:	f107 031c 	add.w	r3, r7, #28
 800f82c:	6879      	ldr	r1, [r7, #4]
 800f82e:	4618      	mov	r0, r3
 800f830:	f000 f8cf 	bl	800f9d2 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA9_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800f834:	466a      	mov	r2, sp
 800f836:	f107 0320 	add.w	r3, r7, #32
 800f83a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f83e:	e882 0003 	stmia.w	r2, {r0, r1}
 800f842:	69fb      	ldr	r3, [r7, #28]
 800f844:	f107 0214 	add.w	r2, r7, #20
 800f848:	ca06      	ldmia	r2, {r1, r2}
 800f84a:	68f8      	ldr	r0, [r7, #12]
 800f84c:	f7f7 f90b 	bl	8006a66 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 800f850:	68f8      	ldr	r0, [r7, #12]
 800f852:	3728      	adds	r7, #40	@ 0x28
 800f854:	46bd      	mov	sp, r7
 800f856:	bd80      	pop	{r7, pc}

0800f858 <_ZSt11make_uniqueI10DigitalPinJRVtiRPKcRiRbS6_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800f858:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f85c:	b091      	sub	sp, #68	@ 0x44
 800f85e:	af04      	add	r7, sp, #16
 800f860:	60f8      	str	r0, [r7, #12]
 800f862:	60b9      	str	r1, [r7, #8]
 800f864:	607a      	str	r2, [r7, #4]
 800f866:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800f868:	204c      	movs	r0, #76	@ 0x4c
 800f86a:	f014 faf9 	bl	8023e60 <_Znwj>
 800f86e:	4603      	mov	r3, r0
 800f870:	4698      	mov	r8, r3
 800f872:	68b8      	ldr	r0, [r7, #8]
 800f874:	f000 f8c0 	bl	800f9f8 <_ZSt7forwardIRVtEOT_RNSt16remove_referenceIS2_E4typeE>
 800f878:	4681      	mov	r9, r0
 800f87a:	6878      	ldr	r0, [r7, #4]
 800f87c:	f7fe f8c1 	bl	800da02 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 800f880:	4603      	mov	r3, r0
 800f882:	681e      	ldr	r6, [r3, #0]
 800f884:	6838      	ldr	r0, [r7, #0]
 800f886:	f7fe f8fc 	bl	800da82 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 800f88a:	4603      	mov	r3, r0
 800f88c:	681c      	ldr	r4, [r3, #0]
 800f88e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800f892:	4618      	mov	r0, r3
 800f894:	f014 faf5 	bl	8023e82 <_ZNSaIcEC1Ev>
 800f898:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800f89c:	f107 0314 	add.w	r3, r7, #20
 800f8a0:	4621      	mov	r1, r4
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	f7f6 feea 	bl	800667c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800f8a8:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800f8aa:	f7fe f8f5 	bl	800da98 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 800f8ae:	4603      	mov	r3, r0
 800f8b0:	681c      	ldr	r4, [r3, #0]
 800f8b2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800f8b4:	f000 f8ab 	bl	800fa0e <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 800f8b8:	4603      	mov	r3, r0
 800f8ba:	781d      	ldrb	r5, [r3, #0]
 800f8bc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800f8be:	f7fe f8eb 	bl	800da98 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 800f8c2:	4603      	mov	r3, r0
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	f107 0214 	add.w	r2, r7, #20
 800f8ca:	9302      	str	r3, [sp, #8]
 800f8cc:	9501      	str	r5, [sp, #4]
 800f8ce:	9400      	str	r4, [sp, #0]
 800f8d0:	4613      	mov	r3, r2
 800f8d2:	4632      	mov	r2, r6
 800f8d4:	4649      	mov	r1, r9
 800f8d6:	4640      	mov	r0, r8
 800f8d8:	f7ff fec0 	bl	800f65c <_ZN10DigitalPinC1ERVtiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEibi>
 800f8dc:	4641      	mov	r1, r8
 800f8de:	68f8      	ldr	r0, [r7, #12]
 800f8e0:	f000 f8b0 	bl	800fa44 <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800f8e4:	f107 0314 	add.w	r3, r7, #20
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	f014 fba8 	bl	802403e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800f8ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	f014 fac6 	bl	8023e84 <_ZNSaIcED1Ev>
 800f8f8:	bf00      	nop
 800f8fa:	68f8      	ldr	r0, [r7, #12]
 800f8fc:	3734      	adds	r7, #52	@ 0x34
 800f8fe:	46bd      	mov	sp, r7
 800f900:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800f904 <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800f904:	b590      	push	{r4, r7, lr}
 800f906:	b085      	sub	sp, #20
 800f908:	af00      	add	r7, sp, #0
 800f90a:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	4618      	mov	r0, r3
 800f910:	f000 f8a7 	bl	800fa62 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE6_M_ptrEv>
 800f914:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d00c      	beq.n	800f938 <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800f91e:	6878      	ldr	r0, [r7, #4]
 800f920:	f000 f8ac 	bl	800fa7c <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE11get_deleterEv>
 800f924:	4604      	mov	r4, r0
 800f926:	68f8      	ldr	r0, [r7, #12]
 800f928:	f000 f8b5 	bl	800fa96 <_ZSt4moveIRP10DigitalPinEONSt16remove_referenceIT_E4typeEOS4_>
 800f92c:	4603      	mov	r3, r0
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	4619      	mov	r1, r3
 800f932:	4620      	mov	r0, r4
 800f934:	f000 f8e6 	bl	800fb04 <_ZNKSt14default_deleteI10DigitalPinEclEPS0_>
	__ptr = pointer();
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	2200      	movs	r2, #0
 800f93c:	601a      	str	r2, [r3, #0]
      }
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	4618      	mov	r0, r3
 800f942:	3714      	adds	r7, #20
 800f944:	46bd      	mov	sp, r7
 800f946:	bd90      	pop	{r4, r7, pc}

0800f948 <_ZNSt10shared_ptrI6ModuleEC1I10DigitalPinSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>:
	shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 800f948:	b590      	push	{r4, r7, lr}
 800f94a:	b083      	sub	sp, #12
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
 800f950:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 800f952:	687c      	ldr	r4, [r7, #4]
 800f954:	6838      	ldr	r0, [r7, #0]
 800f956:	f000 f8e6 	bl	800fb26 <_ZSt4moveIRSt10unique_ptrI10DigitalPinSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800f95a:	4603      	mov	r3, r0
 800f95c:	4619      	mov	r1, r3
 800f95e:	4620      	mov	r0, r4
 800f960:	f000 f8ec 	bl	800fb3c <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I10DigitalPinSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	4618      	mov	r0, r3
 800f968:	370c      	adds	r7, #12
 800f96a:	46bd      	mov	sp, r7
 800f96c:	bd90      	pop	{r4, r7, pc}

0800f96e <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 800f96e:	b480      	push	{r7}
 800f970:	b083      	sub	sp, #12
 800f972:	af00      	add	r7, sp, #0
 800f974:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	4618      	mov	r0, r3
 800f97a:	370c      	adds	r7, #12
 800f97c:	46bd      	mov	sp, r7
 800f97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f982:	4770      	bx	lr

0800f984 <_ZSt11make_uniqueI3PinJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERiS8_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800f984:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f986:	b085      	sub	sp, #20
 800f988:	af00      	add	r7, sp, #0
 800f98a:	60f8      	str	r0, [r7, #12]
 800f98c:	60b9      	str	r1, [r7, #8]
 800f98e:	607a      	str	r2, [r7, #4]
 800f990:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800f992:	2040      	movs	r0, #64	@ 0x40
 800f994:	f014 fa64 	bl	8023e60 <_Znwj>
 800f998:	4603      	mov	r3, r0
 800f99a:	461d      	mov	r5, r3
 800f99c:	68b8      	ldr	r0, [r7, #8]
 800f99e:	f7fe f947 	bl	800dc30 <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800f9a2:	4606      	mov	r6, r0
 800f9a4:	6878      	ldr	r0, [r7, #4]
 800f9a6:	f7fe f877 	bl	800da98 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 800f9aa:	4603      	mov	r3, r0
 800f9ac:	681c      	ldr	r4, [r3, #0]
 800f9ae:	6838      	ldr	r0, [r7, #0]
 800f9b0:	f7fe f872 	bl	800da98 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 800f9b4:	4603      	mov	r3, r0
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	4622      	mov	r2, r4
 800f9ba:	4631      	mov	r1, r6
 800f9bc:	4628      	mov	r0, r5
 800f9be:	f7f3 ff43 	bl	8003848 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii>
 800f9c2:	4629      	mov	r1, r5
 800f9c4:	68f8      	ldr	r0, [r7, #12]
 800f9c6:	f7fe f94e 	bl	800dc66 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800f9ca:	68f8      	ldr	r0, [r7, #12]
 800f9cc:	3714      	adds	r7, #20
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f9d2 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA9_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 800f9d2:	b580      	push	{r7, lr}
 800f9d4:	b082      	sub	sp, #8
 800f9d6:	af00      	add	r7, sp, #0
 800f9d8:	6078      	str	r0, [r7, #4]
 800f9da:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800f9dc:	6838      	ldr	r0, [r7, #0]
 800f9de:	f000 f8e5 	bl	800fbac <_ZN11ArduinoJson8V730HB226detail7forwardIRA9_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 800f9e2:	4602      	mov	r2, r0
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	4611      	mov	r1, r2
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	f000 f8ea 	bl	800fbc2 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA9_KcvE5adaptES5_>
 800f9ee:	bf00      	nop
}
 800f9f0:	6878      	ldr	r0, [r7, #4]
 800f9f2:	3708      	adds	r7, #8
 800f9f4:	46bd      	mov	sp, r7
 800f9f6:	bd80      	pop	{r7, pc}

0800f9f8 <_ZSt7forwardIRVtEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f9f8:	b480      	push	{r7}
 800f9fa:	b083      	sub	sp, #12
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	4618      	mov	r0, r3
 800fa04:	370c      	adds	r7, #12
 800fa06:	46bd      	mov	sp, r7
 800fa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa0c:	4770      	bx	lr

0800fa0e <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800fa0e:	b480      	push	{r7}
 800fa10:	b083      	sub	sp, #12
 800fa12:	af00      	add	r7, sp, #0
 800fa14:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	4618      	mov	r0, r3
 800fa1a:	370c      	adds	r7, #12
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa22:	4770      	bx	lr

0800fa24 <_ZNSt15__uniq_ptr_dataI10DigitalPinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800fa24:	b580      	push	{r7, lr}
 800fa26:	b082      	sub	sp, #8
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]
 800fa2c:	6039      	str	r1, [r7, #0]
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	683a      	ldr	r2, [r7, #0]
 800fa32:	4611      	mov	r1, r2
 800fa34:	4618      	mov	r0, r3
 800fa36:	f000 f8d3 	bl	800fbe0 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EEC1EPS0_>
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	4618      	mov	r0, r3
 800fa3e:	3708      	adds	r7, #8
 800fa40:	46bd      	mov	sp, r7
 800fa42:	bd80      	pop	{r7, pc}

0800fa44 <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800fa44:	b580      	push	{r7, lr}
 800fa46:	b082      	sub	sp, #8
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	6078      	str	r0, [r7, #4]
 800fa4c:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	6839      	ldr	r1, [r7, #0]
 800fa52:	4618      	mov	r0, r3
 800fa54:	f7ff ffe6 	bl	800fa24 <_ZNSt15__uniq_ptr_dataI10DigitalPinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	3708      	adds	r7, #8
 800fa5e:	46bd      	mov	sp, r7
 800fa60:	bd80      	pop	{r7, pc}

0800fa62 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800fa62:	b580      	push	{r7, lr}
 800fa64:	b082      	sub	sp, #8
 800fa66:	af00      	add	r7, sp, #0
 800fa68:	6078      	str	r0, [r7, #4]
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	f000 f8cb 	bl	800fc08 <_ZSt3getILj0EJP10DigitalPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800fa72:	4603      	mov	r3, r0
 800fa74:	4618      	mov	r0, r3
 800fa76:	3708      	adds	r7, #8
 800fa78:	46bd      	mov	sp, r7
 800fa7a:	bd80      	pop	{r7, pc}

0800fa7c <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800fa7c:	b580      	push	{r7, lr}
 800fa7e:	b082      	sub	sp, #8
 800fa80:	af00      	add	r7, sp, #0
 800fa82:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	4618      	mov	r0, r3
 800fa88:	f000 f8cb 	bl	800fc22 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE10_M_deleterEv>
 800fa8c:	4603      	mov	r3, r0
 800fa8e:	4618      	mov	r0, r3
 800fa90:	3708      	adds	r7, #8
 800fa92:	46bd      	mov	sp, r7
 800fa94:	bd80      	pop	{r7, pc}

0800fa96 <_ZSt4moveIRP10DigitalPinEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800fa96:	b480      	push	{r7}
 800fa98:	b083      	sub	sp, #12
 800fa9a:	af00      	add	r7, sp, #0
 800fa9c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	4618      	mov	r0, r3
 800faa2:	370c      	adds	r7, #12
 800faa4:	46bd      	mov	sp, r7
 800faa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faaa:	4770      	bx	lr

0800faac <_ZN10DigitalPinD1Ev>:
 * @brief Digital I/O pin control module.
 * 
 * The DigitalPin class manages digital input and output operations, allowing
 * interaction with external devices via GPIO.
 */
class DigitalPin : public Module
 800faac:	b580      	push	{r7, lr}
 800faae:	b082      	sub	sp, #8
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	6078      	str	r0, [r7, #4]
 800fab4:	4a0a      	ldr	r2, [pc, #40]	@ (800fae0 <_ZN10DigitalPinD1Ev+0x34>)
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	601a      	str	r2, [r3, #0]
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	3344      	adds	r3, #68	@ 0x44
 800fabe:	4618      	mov	r0, r3
 800fac0:	f7fd ff71 	bl	800d9a6 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EED1Ev>
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	3320      	adds	r3, #32
 800fac8:	4618      	mov	r0, r3
 800faca:	f014 fab8 	bl	802403e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	4618      	mov	r0, r3
 800fad2:	f000 fc2b 	bl	801032c <_ZN6ModuleD1Ev>
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	4618      	mov	r0, r3
 800fada:	3708      	adds	r7, #8
 800fadc:	46bd      	mov	sp, r7
 800fade:	bd80      	pop	{r7, pc}
 800fae0:	080267e0 	.word	0x080267e0

0800fae4 <_ZN10DigitalPinD0Ev>:
 800fae4:	b580      	push	{r7, lr}
 800fae6:	b082      	sub	sp, #8
 800fae8:	af00      	add	r7, sp, #0
 800faea:	6078      	str	r0, [r7, #4]
 800faec:	6878      	ldr	r0, [r7, #4]
 800faee:	f7ff ffdd 	bl	800faac <_ZN10DigitalPinD1Ev>
 800faf2:	214c      	movs	r1, #76	@ 0x4c
 800faf4:	6878      	ldr	r0, [r7, #4]
 800faf6:	f014 f9a2 	bl	8023e3e <_ZdlPvj>
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	4618      	mov	r0, r3
 800fafe:	3708      	adds	r7, #8
 800fb00:	46bd      	mov	sp, r7
 800fb02:	bd80      	pop	{r7, pc}

0800fb04 <_ZNKSt14default_deleteI10DigitalPinEclEPS0_>:
      operator()(_Tp* __ptr) const
 800fb04:	b580      	push	{r7, lr}
 800fb06:	b082      	sub	sp, #8
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	6078      	str	r0, [r7, #4]
 800fb0c:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800fb0e:	683b      	ldr	r3, [r7, #0]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d004      	beq.n	800fb1e <_ZNKSt14default_deleteI10DigitalPinEclEPS0_+0x1a>
 800fb14:	681a      	ldr	r2, [r3, #0]
 800fb16:	3204      	adds	r2, #4
 800fb18:	6812      	ldr	r2, [r2, #0]
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	4790      	blx	r2
      }
 800fb1e:	bf00      	nop
 800fb20:	3708      	adds	r7, #8
 800fb22:	46bd      	mov	sp, r7
 800fb24:	bd80      	pop	{r7, pc}

0800fb26 <_ZSt4moveIRSt10unique_ptrI10DigitalPinSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800fb26:	b480      	push	{r7}
 800fb28:	b083      	sub	sp, #12
 800fb2a:	af00      	add	r7, sp, #0
 800fb2c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	4618      	mov	r0, r3
 800fb32:	370c      	adds	r7, #12
 800fb34:	46bd      	mov	sp, r7
 800fb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb3a:	4770      	bx	lr

0800fb3c <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I10DigitalPinSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>:
	__shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 800fb3c:	b580      	push	{r7, lr}
 800fb3e:	b084      	sub	sp, #16
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	6078      	str	r0, [r7, #4]
 800fb44:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r.get()), _M_refcount()
 800fb46:	6838      	ldr	r0, [r7, #0]
 800fb48:	f000 f878 	bl	800fc3c <_ZNKSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE3getEv>
 800fb4c:	4602      	mov	r2, r0
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	601a      	str	r2, [r3, #0]
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	3304      	adds	r3, #4
 800fb56:	4618      	mov	r0, r3
 800fb58:	f7fb ffef 	bl	800bb3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  auto __raw = __to_address(__r.get());
 800fb5c:	6838      	ldr	r0, [r7, #0]
 800fb5e:	f000 f86d 	bl	800fc3c <_ZNKSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE3getEv>
 800fb62:	4603      	mov	r3, r0
 800fb64:	4618      	mov	r0, r3
 800fb66:	f000 f876 	bl	800fc56 <_ZSt12__to_addressI10DigitalPinEPT_S2_>
 800fb6a:	60f8      	str	r0, [r7, #12]
	  _M_refcount = __shared_count<_Lp>(std::move(__r));
 800fb6c:	6838      	ldr	r0, [r7, #0]
 800fb6e:	f7ff ffda 	bl	800fb26 <_ZSt4moveIRSt10unique_ptrI10DigitalPinSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800fb72:	4602      	mov	r2, r0
 800fb74:	f107 0308 	add.w	r3, r7, #8
 800fb78:	4611      	mov	r1, r2
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	f000 f876 	bl	800fc6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I10DigitalPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	3304      	adds	r3, #4
 800fb84:	f107 0208 	add.w	r2, r7, #8
 800fb88:	4611      	mov	r1, r2
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	f7fe f98c 	bl	800dea8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 800fb90:	f107 0308 	add.w	r3, r7, #8
 800fb94:	4618      	mov	r0, r3
 800fb96:	f7fa ffa0 	bl	800aada <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  _M_enable_shared_from_this_with(__raw);
 800fb9a:	68f9      	ldr	r1, [r7, #12]
 800fb9c:	6878      	ldr	r0, [r7, #4]
 800fb9e:	f000 f8a7 	bl	800fcf0 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI10DigitalPinS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	4618      	mov	r0, r3
 800fba6:	3710      	adds	r7, #16
 800fba8:	46bd      	mov	sp, r7
 800fbaa:	bd80      	pop	{r7, pc}

0800fbac <_ZN11ArduinoJson8V730HB226detail7forwardIRA9_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800fbac:	b480      	push	{r7}
 800fbae:	b083      	sub	sp, #12
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800fbb4:	687b      	ldr	r3, [r7, #4]
}
 800fbb6:	4618      	mov	r0, r3
 800fbb8:	370c      	adds	r7, #12
 800fbba:	46bd      	mov	sp, r7
 800fbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc0:	4770      	bx	lr

0800fbc2 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA9_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 800fbc2:	b580      	push	{r7, lr}
 800fbc4:	b082      	sub	sp, #8
 800fbc6:	af00      	add	r7, sp, #0
 800fbc8:	6078      	str	r0, [r7, #4]
 800fbca:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800fbcc:	2301      	movs	r3, #1
 800fbce:	2208      	movs	r2, #8
 800fbd0:	6839      	ldr	r1, [r7, #0]
 800fbd2:	6878      	ldr	r0, [r7, #4]
 800fbd4:	f7f4 f9c2 	bl	8003f5c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800fbd8:	6878      	ldr	r0, [r7, #4]
 800fbda:	3708      	adds	r7, #8
 800fbdc:	46bd      	mov	sp, r7
 800fbde:	bd80      	pop	{r7, pc}

0800fbe0 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800fbe0:	b590      	push	{r4, r7, lr}
 800fbe2:	b083      	sub	sp, #12
 800fbe4:	af00      	add	r7, sp, #0
 800fbe6:	6078      	str	r0, [r7, #4]
 800fbe8:	6039      	str	r1, [r7, #0]
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	4618      	mov	r0, r3
 800fbee:	f000 f88a 	bl	800fd06 <_ZNSt5tupleIJP10DigitalPinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800fbf2:	683c      	ldr	r4, [r7, #0]
 800fbf4:	6878      	ldr	r0, [r7, #4]
 800fbf6:	f7ff ff34 	bl	800fa62 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE6_M_ptrEv>
 800fbfa:	4603      	mov	r3, r0
 800fbfc:	601c      	str	r4, [r3, #0]
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	4618      	mov	r0, r3
 800fc02:	370c      	adds	r7, #12
 800fc04:	46bd      	mov	sp, r7
 800fc06:	bd90      	pop	{r4, r7, pc}

0800fc08 <_ZSt3getILj0EJP10DigitalPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b082      	sub	sp, #8
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	4618      	mov	r0, r3
 800fc14:	f000 f884 	bl	800fd20 <_ZSt12__get_helperILj0EP10DigitalPinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800fc18:	4603      	mov	r3, r0
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	3708      	adds	r7, #8
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	bd80      	pop	{r7, pc}

0800fc22 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800fc22:	b580      	push	{r7, lr}
 800fc24:	b082      	sub	sp, #8
 800fc26:	af00      	add	r7, sp, #0
 800fc28:	6078      	str	r0, [r7, #4]
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	f000 f883 	bl	800fd38 <_ZSt3getILj1EJP10DigitalPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800fc32:	4603      	mov	r3, r0
 800fc34:	4618      	mov	r0, r3
 800fc36:	3708      	adds	r7, #8
 800fc38:	46bd      	mov	sp, r7
 800fc3a:	bd80      	pop	{r7, pc}

0800fc3c <_ZNKSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	b082      	sub	sp, #8
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	4618      	mov	r0, r3
 800fc48:	f000 f882 	bl	800fd50 <_ZNKSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE6_M_ptrEv>
 800fc4c:	4603      	mov	r3, r0
 800fc4e:	4618      	mov	r0, r3
 800fc50:	3708      	adds	r7, #8
 800fc52:	46bd      	mov	sp, r7
 800fc54:	bd80      	pop	{r7, pc}

0800fc56 <_ZSt12__to_addressI10DigitalPinEPT_S2_>:
    __to_address(_Tp* __ptr) noexcept
 800fc56:	b480      	push	{r7}
 800fc58:	b083      	sub	sp, #12
 800fc5a:	af00      	add	r7, sp, #0
 800fc5c:	6078      	str	r0, [r7, #4]
      return __ptr;
 800fc5e:	687b      	ldr	r3, [r7, #4]
    }
 800fc60:	4618      	mov	r0, r3
 800fc62:	370c      	adds	r7, #12
 800fc64:	46bd      	mov	sp, r7
 800fc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc6a:	4770      	bx	lr

0800fc6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I10DigitalPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>:
	__shared_count(std::unique_ptr<_Tp, _Del>&& __r) : _M_pi(0)
 800fc6c:	b580      	push	{r7, lr}
 800fc6e:	b086      	sub	sp, #24
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	6078      	str	r0, [r7, #4]
 800fc74:	6039      	str	r1, [r7, #0]
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	2200      	movs	r2, #0
 800fc7a:	601a      	str	r2, [r3, #0]
	  if (__r.get() == nullptr)
 800fc7c:	6838      	ldr	r0, [r7, #0]
 800fc7e:	f7ff ffdd 	bl	800fc3c <_ZNKSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE3getEv>
 800fc82:	4603      	mov	r3, r0
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	bf0c      	ite	eq
 800fc88:	2301      	moveq	r3, #1
 800fc8a:	2300      	movne	r3, #0
 800fc8c:	b2db      	uxtb	r3, r3
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d128      	bne.n	800fce4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I10DigitalPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x78>
	  _Alloc __a;
 800fc92:	f107 030c 	add.w	r3, r7, #12
 800fc96:	4618      	mov	r0, r3
 800fc98:	f000 f868 	bl	800fd6c <_ZNSaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
	  _Sp_cd_type* __mem = _Alloc_traits::allocate(__a, 1);
 800fc9c:	f107 030c 	add.w	r3, r7, #12
 800fca0:	2101      	movs	r1, #1
 800fca2:	4618      	mov	r0, r3
 800fca4:	f000 f87a 	bl	800fd9c <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>
 800fca8:	6178      	str	r0, [r7, #20]
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 800fcaa:	6838      	ldr	r0, [r7, #0]
 800fcac:	f000 f885 	bl	800fdba <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE7releaseEv>
 800fcb0:	4603      	mov	r3, r0
 800fcb2:	613b      	str	r3, [r7, #16]
				   std::forward<_Del>(__r.get_deleter()));
 800fcb4:	6838      	ldr	r0, [r7, #0]
 800fcb6:	f7ff fee1 	bl	800fa7c <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE11get_deleterEv>
 800fcba:	4603      	mov	r3, r0
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	f000 f889 	bl	800fdd4 <_ZSt7forwardISt14default_deleteI10DigitalPinEEOT_RNSt16remove_referenceIS3_E4typeE>
 800fcc2:	4603      	mov	r3, r0
 800fcc4:	f107 0210 	add.w	r2, r7, #16
 800fcc8:	f107 000c 	add.w	r0, r7, #12
 800fccc:	6979      	ldr	r1, [r7, #20]
 800fcce:	f000 f88c 	bl	800fdea <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>
	  _M_pi = __mem;
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	697a      	ldr	r2, [r7, #20]
 800fcd6:	601a      	str	r2, [r3, #0]
	}
 800fcd8:	f107 030c 	add.w	r3, r7, #12
 800fcdc:	4618      	mov	r0, r3
 800fcde:	f000 f851 	bl	800fd84 <_ZNSaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800fce2:	e000      	b.n	800fce6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I10DigitalPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x7a>
	    return;
 800fce4:	bf00      	nop
	}
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	4618      	mov	r0, r3
 800fcea:	3718      	adds	r7, #24
 800fcec:	46bd      	mov	sp, r7
 800fcee:	bd80      	pop	{r7, pc}

0800fcf0 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI10DigitalPinS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 800fcf0:	b480      	push	{r7}
 800fcf2:	b083      	sub	sp, #12
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	6078      	str	r0, [r7, #4]
 800fcf8:	6039      	str	r1, [r7, #0]
	{ }
 800fcfa:	bf00      	nop
 800fcfc:	370c      	adds	r7, #12
 800fcfe:	46bd      	mov	sp, r7
 800fd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd04:	4770      	bx	lr

0800fd06 <_ZNSt5tupleIJP10DigitalPinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800fd06:	b580      	push	{r7, lr}
 800fd08:	b082      	sub	sp, #8
 800fd0a:	af00      	add	r7, sp, #0
 800fd0c:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	4618      	mov	r0, r3
 800fd12:	f000 f882 	bl	800fe1a <_ZNSt11_Tuple_implILj0EJP10DigitalPinSt14default_deleteIS0_EEEC1Ev>
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	4618      	mov	r0, r3
 800fd1a:	3708      	adds	r7, #8
 800fd1c:	46bd      	mov	sp, r7
 800fd1e:	bd80      	pop	{r7, pc}

0800fd20 <_ZSt12__get_helperILj0EP10DigitalPinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800fd20:	b580      	push	{r7, lr}
 800fd22:	b082      	sub	sp, #8
 800fd24:	af00      	add	r7, sp, #0
 800fd26:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800fd28:	6878      	ldr	r0, [r7, #4]
 800fd2a:	f000 f886 	bl	800fe3a <_ZNSt11_Tuple_implILj0EJP10DigitalPinSt14default_deleteIS0_EEE7_M_headERS4_>
 800fd2e:	4603      	mov	r3, r0
 800fd30:	4618      	mov	r0, r3
 800fd32:	3708      	adds	r7, #8
 800fd34:	46bd      	mov	sp, r7
 800fd36:	bd80      	pop	{r7, pc}

0800fd38 <_ZSt3getILj1EJP10DigitalPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800fd38:	b580      	push	{r7, lr}
 800fd3a:	b082      	sub	sp, #8
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800fd40:	6878      	ldr	r0, [r7, #4]
 800fd42:	f000 f887 	bl	800fe54 <_ZSt12__get_helperILj1ESt14default_deleteI10DigitalPinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800fd46:	4603      	mov	r3, r0
 800fd48:	4618      	mov	r0, r3
 800fd4a:	3708      	adds	r7, #8
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	bd80      	pop	{r7, pc}

0800fd50 <_ZNKSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b082      	sub	sp, #8
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	f000 f886 	bl	800fe6c <_ZSt3getILj0EJP10DigitalPinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800fd60:	4603      	mov	r3, r0
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	4618      	mov	r0, r3
 800fd66:	3708      	adds	r7, #8
 800fd68:	46bd      	mov	sp, r7
 800fd6a:	bd80      	pop	{r7, pc}

0800fd6c <_ZNSaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	b082      	sub	sp, #8
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	6078      	str	r0, [r7, #4]
 800fd74:	6878      	ldr	r0, [r7, #4]
 800fd76:	f000 f886 	bl	800fe86 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	3708      	adds	r7, #8
 800fd80:	46bd      	mov	sp, r7
 800fd82:	bd80      	pop	{r7, pc}

0800fd84 <_ZNSaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800fd84:	b580      	push	{r7, lr}
 800fd86:	b082      	sub	sp, #8
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	6078      	str	r0, [r7, #4]
 800fd8c:	6878      	ldr	r0, [r7, #4]
 800fd8e:	f000 f885 	bl	800fe9c <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	4618      	mov	r0, r3
 800fd96:	3708      	adds	r7, #8
 800fd98:	46bd      	mov	sp, r7
 800fd9a:	bd80      	pop	{r7, pc}

0800fd9c <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 800fd9c:	b580      	push	{r7, lr}
 800fd9e:	b082      	sub	sp, #8
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	6078      	str	r0, [r7, #4]
 800fda4:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800fda6:	2200      	movs	r2, #0
 800fda8:	6839      	ldr	r1, [r7, #0]
 800fdaa:	6878      	ldr	r0, [r7, #4]
 800fdac:	f000 f881 	bl	800feb2 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 800fdb0:	4603      	mov	r3, r0
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	3708      	adds	r7, #8
 800fdb6:	46bd      	mov	sp, r7
 800fdb8:	bd80      	pop	{r7, pc}

0800fdba <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 800fdba:	b580      	push	{r7, lr}
 800fdbc:	b082      	sub	sp, #8
 800fdbe:	af00      	add	r7, sp, #0
 800fdc0:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	f000 f89e 	bl	800ff06 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE7releaseEv>
 800fdca:	4603      	mov	r3, r0
 800fdcc:	4618      	mov	r0, r3
 800fdce:	3708      	adds	r7, #8
 800fdd0:	46bd      	mov	sp, r7
 800fdd2:	bd80      	pop	{r7, pc}

0800fdd4 <_ZSt7forwardISt14default_deleteI10DigitalPinEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800fdd4:	b480      	push	{r7}
 800fdd6:	b083      	sub	sp, #12
 800fdd8:	af00      	add	r7, sp, #0
 800fdda:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	4618      	mov	r0, r3
 800fde0:	370c      	adds	r7, #12
 800fde2:	46bd      	mov	sp, r7
 800fde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde8:	4770      	bx	lr

0800fdea <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800fdea:	b590      	push	{r4, r7, lr}
 800fdec:	b085      	sub	sp, #20
 800fdee:	af00      	add	r7, sp, #0
 800fdf0:	60f8      	str	r0, [r7, #12]
 800fdf2:	60b9      	str	r1, [r7, #8]
 800fdf4:	607a      	str	r2, [r7, #4]
 800fdf6:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800fdf8:	6878      	ldr	r0, [r7, #4]
 800fdfa:	f000 f899 	bl	800ff30 <_ZSt7forwardIP10DigitalPinEOT_RNSt16remove_referenceIS2_E4typeE>
 800fdfe:	4604      	mov	r4, r0
 800fe00:	6838      	ldr	r0, [r7, #0]
 800fe02:	f7ff ffe7 	bl	800fdd4 <_ZSt7forwardISt14default_deleteI10DigitalPinEEOT_RNSt16remove_referenceIS3_E4typeE>
 800fe06:	4603      	mov	r3, r0
 800fe08:	4622      	mov	r2, r4
 800fe0a:	68b9      	ldr	r1, [r7, #8]
 800fe0c:	68f8      	ldr	r0, [r7, #12]
 800fe0e:	f000 f89a 	bl	800ff46 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>
	}
 800fe12:	bf00      	nop
 800fe14:	3714      	adds	r7, #20
 800fe16:	46bd      	mov	sp, r7
 800fe18:	bd90      	pop	{r4, r7, pc}

0800fe1a <_ZNSt11_Tuple_implILj0EJP10DigitalPinSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800fe1a:	b580      	push	{r7, lr}
 800fe1c:	b082      	sub	sp, #8
 800fe1e:	af00      	add	r7, sp, #0
 800fe20:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800fe22:	6878      	ldr	r0, [r7, #4]
 800fe24:	f000 f8ad 	bl	800ff82 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI10DigitalPinEEEC1Ev>
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	4618      	mov	r0, r3
 800fe2c:	f000 f8b5 	bl	800ff9a <_ZNSt10_Head_baseILj0EP10DigitalPinLb0EEC1Ev>
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	4618      	mov	r0, r3
 800fe34:	3708      	adds	r7, #8
 800fe36:	46bd      	mov	sp, r7
 800fe38:	bd80      	pop	{r7, pc}

0800fe3a <_ZNSt11_Tuple_implILj0EJP10DigitalPinSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800fe3a:	b580      	push	{r7, lr}
 800fe3c:	b082      	sub	sp, #8
 800fe3e:	af00      	add	r7, sp, #0
 800fe40:	6078      	str	r0, [r7, #4]
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	4618      	mov	r0, r3
 800fe46:	f000 f8b6 	bl	800ffb6 <_ZNSt10_Head_baseILj0EP10DigitalPinLb0EE7_M_headERS2_>
 800fe4a:	4603      	mov	r3, r0
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	3708      	adds	r7, #8
 800fe50:	46bd      	mov	sp, r7
 800fe52:	bd80      	pop	{r7, pc}

0800fe54 <_ZSt12__get_helperILj1ESt14default_deleteI10DigitalPinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800fe54:	b580      	push	{r7, lr}
 800fe56:	b082      	sub	sp, #8
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800fe5c:	6878      	ldr	r0, [r7, #4]
 800fe5e:	f000 f8b5 	bl	800ffcc <_ZNSt11_Tuple_implILj1EJSt14default_deleteI10DigitalPinEEE7_M_headERS3_>
 800fe62:	4603      	mov	r3, r0
 800fe64:	4618      	mov	r0, r3
 800fe66:	3708      	adds	r7, #8
 800fe68:	46bd      	mov	sp, r7
 800fe6a:	bd80      	pop	{r7, pc}

0800fe6c <_ZSt3getILj0EJP10DigitalPinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800fe6c:	b580      	push	{r7, lr}
 800fe6e:	b082      	sub	sp, #8
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	4618      	mov	r0, r3
 800fe78:	f000 f8b4 	bl	800ffe4 <_ZSt12__get_helperILj0EP10DigitalPinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800fe7c:	4603      	mov	r3, r0
 800fe7e:	4618      	mov	r0, r3
 800fe80:	3708      	adds	r7, #8
 800fe82:	46bd      	mov	sp, r7
 800fe84:	bd80      	pop	{r7, pc}

0800fe86 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800fe86:	b480      	push	{r7}
 800fe88:	b083      	sub	sp, #12
 800fe8a:	af00      	add	r7, sp, #0
 800fe8c:	6078      	str	r0, [r7, #4]
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	4618      	mov	r0, r3
 800fe92:	370c      	adds	r7, #12
 800fe94:	46bd      	mov	sp, r7
 800fe96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9a:	4770      	bx	lr

0800fe9c <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800fe9c:	b480      	push	{r7}
 800fe9e:	b083      	sub	sp, #12
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	6078      	str	r0, [r7, #4]
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	4618      	mov	r0, r3
 800fea8:	370c      	adds	r7, #12
 800feaa:	46bd      	mov	sp, r7
 800feac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb0:	4770      	bx	lr

0800feb2 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800feb2:	b580      	push	{r7, lr}
 800feb4:	b084      	sub	sp, #16
 800feb6:	af00      	add	r7, sp, #0
 800feb8:	60f8      	str	r0, [r7, #12]
 800feba:	60b9      	str	r1, [r7, #8]
 800febc:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800febe:	68f8      	ldr	r0, [r7, #12]
 800fec0:	f000 f89c 	bl	800fffc <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 800fec4:	4602      	mov	r2, r0
 800fec6:	68bb      	ldr	r3, [r7, #8]
 800fec8:	4293      	cmp	r3, r2
 800feca:	bf8c      	ite	hi
 800fecc:	2301      	movhi	r3, #1
 800fece:	2300      	movls	r3, #0
 800fed0:	b2db      	uxtb	r3, r3
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	bf14      	ite	ne
 800fed6:	2301      	movne	r3, #1
 800fed8:	2300      	moveq	r3, #0
 800feda:	b2db      	uxtb	r3, r3
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d007      	beq.n	800fef0 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800fee0:	68bb      	ldr	r3, [r7, #8]
 800fee2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fee6:	d301      	bcc.n	800feec <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800fee8:	f013 ffd0 	bl	8023e8c <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800feec:	f013 ffcb 	bl	8023e86 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800fef0:	68bb      	ldr	r3, [r7, #8]
 800fef2:	011b      	lsls	r3, r3, #4
 800fef4:	4618      	mov	r0, r3
 800fef6:	f013 ffb3 	bl	8023e60 <_Znwj>
 800fefa:	4603      	mov	r3, r0
 800fefc:	bf00      	nop
      }
 800fefe:	4618      	mov	r0, r3
 800ff00:	3710      	adds	r7, #16
 800ff02:	46bd      	mov	sp, r7
 800ff04:	bd80      	pop	{r7, pc}

0800ff06 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800ff06:	b580      	push	{r7, lr}
 800ff08:	b084      	sub	sp, #16
 800ff0a:	af00      	add	r7, sp, #0
 800ff0c:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800ff0e:	6878      	ldr	r0, [r7, #4]
 800ff10:	f7ff fda7 	bl	800fa62 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE6_M_ptrEv>
 800ff14:	4603      	mov	r3, r0
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800ff1a:	6878      	ldr	r0, [r7, #4]
 800ff1c:	f7ff fda1 	bl	800fa62 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE6_M_ptrEv>
 800ff20:	4603      	mov	r3, r0
 800ff22:	2200      	movs	r2, #0
 800ff24:	601a      	str	r2, [r3, #0]
	return __p;
 800ff26:	68fb      	ldr	r3, [r7, #12]
      }
 800ff28:	4618      	mov	r0, r3
 800ff2a:	3710      	adds	r7, #16
 800ff2c:	46bd      	mov	sp, r7
 800ff2e:	bd80      	pop	{r7, pc}

0800ff30 <_ZSt7forwardIP10DigitalPinEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ff30:	b480      	push	{r7}
 800ff32:	b083      	sub	sp, #12
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	370c      	adds	r7, #12
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff44:	4770      	bx	lr

0800ff46 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800ff46:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff48:	b085      	sub	sp, #20
 800ff4a:	af00      	add	r7, sp, #0
 800ff4c:	60f8      	str	r0, [r7, #12]
 800ff4e:	60b9      	str	r1, [r7, #8]
 800ff50:	607a      	str	r2, [r7, #4]
 800ff52:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800ff54:	68bb      	ldr	r3, [r7, #8]
 800ff56:	4619      	mov	r1, r3
 800ff58:	2010      	movs	r0, #16
 800ff5a:	f7f9 fbd1 	bl	8009700 <_ZnwjPv>
 800ff5e:	4605      	mov	r5, r0
 800ff60:	6878      	ldr	r0, [r7, #4]
 800ff62:	f7ff ffe5 	bl	800ff30 <_ZSt7forwardIP10DigitalPinEOT_RNSt16remove_referenceIS2_E4typeE>
 800ff66:	4603      	mov	r3, r0
 800ff68:	681c      	ldr	r4, [r3, #0]
 800ff6a:	6838      	ldr	r0, [r7, #0]
 800ff6c:	f7ff ff32 	bl	800fdd4 <_ZSt7forwardISt14default_deleteI10DigitalPinEEOT_RNSt16remove_referenceIS3_E4typeE>
 800ff70:	4632      	mov	r2, r6
 800ff72:	4621      	mov	r1, r4
 800ff74:	4628      	mov	r0, r5
 800ff76:	f000 f84d 	bl	8010014 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>
 800ff7a:	bf00      	nop
 800ff7c:	3714      	adds	r7, #20
 800ff7e:	46bd      	mov	sp, r7
 800ff80:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ff82 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI10DigitalPinEEEC1Ev>:
      _Tuple_impl()
 800ff82:	b580      	push	{r7, lr}
 800ff84:	b082      	sub	sp, #8
 800ff86:	af00      	add	r7, sp, #0
 800ff88:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800ff8a:	6878      	ldr	r0, [r7, #4]
 800ff8c:	f000 f864 	bl	8010058 <_ZNSt10_Head_baseILj1ESt14default_deleteI10DigitalPinELb1EEC1Ev>
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	4618      	mov	r0, r3
 800ff94:	3708      	adds	r7, #8
 800ff96:	46bd      	mov	sp, r7
 800ff98:	bd80      	pop	{r7, pc}

0800ff9a <_ZNSt10_Head_baseILj0EP10DigitalPinLb0EEC1Ev>:
      constexpr _Head_base()
 800ff9a:	b480      	push	{r7}
 800ff9c:	b083      	sub	sp, #12
 800ff9e:	af00      	add	r7, sp, #0
 800ffa0:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	2200      	movs	r2, #0
 800ffa6:	601a      	str	r2, [r3, #0]
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	4618      	mov	r0, r3
 800ffac:	370c      	adds	r7, #12
 800ffae:	46bd      	mov	sp, r7
 800ffb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb4:	4770      	bx	lr

0800ffb6 <_ZNSt10_Head_baseILj0EP10DigitalPinLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800ffb6:	b480      	push	{r7}
 800ffb8:	b083      	sub	sp, #12
 800ffba:	af00      	add	r7, sp, #0
 800ffbc:	6078      	str	r0, [r7, #4]
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	370c      	adds	r7, #12
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffca:	4770      	bx	lr

0800ffcc <_ZNSt11_Tuple_implILj1EJSt14default_deleteI10DigitalPinEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800ffcc:	b580      	push	{r7, lr}
 800ffce:	b082      	sub	sp, #8
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	6078      	str	r0, [r7, #4]
 800ffd4:	6878      	ldr	r0, [r7, #4]
 800ffd6:	f000 f84a 	bl	801006e <_ZNSt10_Head_baseILj1ESt14default_deleteI10DigitalPinELb1EE7_M_headERS3_>
 800ffda:	4603      	mov	r3, r0
 800ffdc:	4618      	mov	r0, r3
 800ffde:	3708      	adds	r7, #8
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	bd80      	pop	{r7, pc}

0800ffe4 <_ZSt12__get_helperILj0EP10DigitalPinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800ffe4:	b580      	push	{r7, lr}
 800ffe6:	b082      	sub	sp, #8
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800ffec:	6878      	ldr	r0, [r7, #4]
 800ffee:	f000 f849 	bl	8010084 <_ZNSt11_Tuple_implILj0EJP10DigitalPinSt14default_deleteIS0_EEE7_M_headERKS4_>
 800fff2:	4603      	mov	r3, r0
 800fff4:	4618      	mov	r0, r3
 800fff6:	3708      	adds	r7, #8
 800fff8:	46bd      	mov	sp, r7
 800fffa:	bd80      	pop	{r7, pc}

0800fffc <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800fffc:	b480      	push	{r7}
 800fffe:	b083      	sub	sp, #12
 8010000:	af00      	add	r7, sp, #0
 8010002:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8010004:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      }
 8010008:	4618      	mov	r0, r3
 801000a:	370c      	adds	r7, #12
 801000c:	46bd      	mov	sp, r7
 801000e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010012:	4770      	bx	lr

08010014 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
 8010014:	b5b0      	push	{r4, r5, r7, lr}
 8010016:	b086      	sub	sp, #24
 8010018:	af00      	add	r7, sp, #0
 801001a:	60f8      	str	r0, [r7, #12]
 801001c:	60b9      	str	r1, [r7, #8]
 801001e:	713a      	strb	r2, [r7, #4]
      : _M_impl(__p, std::move(__d), _Alloc()) { }
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	4618      	mov	r0, r3
 8010024:	f7fc fc6e 	bl	800c904 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8010028:	4a0a      	ldr	r2, [pc, #40]	@ (8010054 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_+0x40>)
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	601a      	str	r2, [r3, #0]
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	f103 040c 	add.w	r4, r3, #12
 8010034:	1d3b      	adds	r3, r7, #4
 8010036:	4618      	mov	r0, r3
 8010038:	f000 f831 	bl	801009e <_ZSt4moveIRSt14default_deleteI10DigitalPinEEONSt16remove_referenceIT_E4typeEOS5_>
 801003c:	f107 0314 	add.w	r3, r7, #20
 8010040:	462a      	mov	r2, r5
 8010042:	68b9      	ldr	r1, [r7, #8]
 8010044:	4620      	mov	r0, r4
 8010046:	f000 f835 	bl	80100b4 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	4618      	mov	r0, r3
 801004e:	3718      	adds	r7, #24
 8010050:	46bd      	mov	sp, r7
 8010052:	bdb0      	pop	{r4, r5, r7, pc}
 8010054:	080267c4 	.word	0x080267c4

08010058 <_ZNSt10_Head_baseILj1ESt14default_deleteI10DigitalPinELb1EEC1Ev>:
      constexpr _Head_base()
 8010058:	b480      	push	{r7}
 801005a:	b083      	sub	sp, #12
 801005c:	af00      	add	r7, sp, #0
 801005e:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	4618      	mov	r0, r3
 8010064:	370c      	adds	r7, #12
 8010066:	46bd      	mov	sp, r7
 8010068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006c:	4770      	bx	lr

0801006e <_ZNSt10_Head_baseILj1ESt14default_deleteI10DigitalPinELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 801006e:	b480      	push	{r7}
 8010070:	b083      	sub	sp, #12
 8010072:	af00      	add	r7, sp, #0
 8010074:	6078      	str	r0, [r7, #4]
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	4618      	mov	r0, r3
 801007a:	370c      	adds	r7, #12
 801007c:	46bd      	mov	sp, r7
 801007e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010082:	4770      	bx	lr

08010084 <_ZNSt11_Tuple_implILj0EJP10DigitalPinSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8010084:	b580      	push	{r7, lr}
 8010086:	b082      	sub	sp, #8
 8010088:	af00      	add	r7, sp, #0
 801008a:	6078      	str	r0, [r7, #4]
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	4618      	mov	r0, r3
 8010090:	f000 f82c 	bl	80100ec <_ZNSt10_Head_baseILj0EP10DigitalPinLb0EE7_M_headERKS2_>
 8010094:	4603      	mov	r3, r0
 8010096:	4618      	mov	r0, r3
 8010098:	3708      	adds	r7, #8
 801009a:	46bd      	mov	sp, r7
 801009c:	bd80      	pop	{r7, pc}

0801009e <_ZSt4moveIRSt14default_deleteI10DigitalPinEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 801009e:	b480      	push	{r7}
 80100a0:	b083      	sub	sp, #12
 80100a2:	af00      	add	r7, sp, #0
 80100a4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	4618      	mov	r0, r3
 80100aa:	370c      	adds	r7, #12
 80100ac:	46bd      	mov	sp, r7
 80100ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b2:	4770      	bx	lr

080100b4 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 80100b4:	b580      	push	{r7, lr}
 80100b6:	b084      	sub	sp, #16
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	60f8      	str	r0, [r7, #12]
 80100bc:	60b9      	str	r1, [r7, #8]
 80100be:	713a      	strb	r2, [r7, #4]
 80100c0:	603b      	str	r3, [r7, #0]
	: _Del_base(std::move(__d)), _Alloc_base(__a), _M_ptr(__p)
 80100c2:	1d3b      	adds	r3, r7, #4
 80100c4:	4618      	mov	r0, r3
 80100c6:	f7ff ffea 	bl	801009e <_ZSt4moveIRSt14default_deleteI10DigitalPinEEONSt16remove_referenceIT_E4typeEOS5_>
 80100ca:	4603      	mov	r3, r0
 80100cc:	4619      	mov	r1, r3
 80100ce:	68f8      	ldr	r0, [r7, #12]
 80100d0:	f000 f817 	bl	8010102 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI10DigitalPinELb1EEC1EOS2_>
 80100d4:	6839      	ldr	r1, [r7, #0]
 80100d6:	68f8      	ldr	r0, [r7, #12]
 80100d8:	f7fe fc46 	bl	800e968 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EEC1ERKS0_>
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	68ba      	ldr	r2, [r7, #8]
 80100e0:	601a      	str	r2, [r3, #0]
	{ }
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	4618      	mov	r0, r3
 80100e6:	3710      	adds	r7, #16
 80100e8:	46bd      	mov	sp, r7
 80100ea:	bd80      	pop	{r7, pc}

080100ec <_ZNSt10_Head_baseILj0EP10DigitalPinLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 80100ec:	b480      	push	{r7}
 80100ee:	b083      	sub	sp, #12
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	6078      	str	r0, [r7, #4]
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	4618      	mov	r0, r3
 80100f8:	370c      	adds	r7, #12
 80100fa:	46bd      	mov	sp, r7
 80100fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010100:	4770      	bx	lr

08010102 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI10DigitalPinELb1EEC1EOS2_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _Tp(std::move(__tp)) { }
 8010102:	b580      	push	{r7, lr}
 8010104:	b082      	sub	sp, #8
 8010106:	af00      	add	r7, sp, #0
 8010108:	6078      	str	r0, [r7, #4]
 801010a:	6039      	str	r1, [r7, #0]
 801010c:	6838      	ldr	r0, [r7, #0]
 801010e:	f7ff ffc6 	bl	801009e <_ZSt4moveIRSt14default_deleteI10DigitalPinEEONSt16remove_referenceIT_E4typeEOS5_>
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	4618      	mov	r0, r3
 8010116:	3708      	adds	r7, #8
 8010118:	46bd      	mov	sp, r7
 801011a:	bd80      	pop	{r7, pc}

0801011c <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 801011c:	b580      	push	{r7, lr}
 801011e:	b082      	sub	sp, #8
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
 8010124:	4a05      	ldr	r2, [pc, #20]	@ (801013c <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	601a      	str	r2, [r3, #0]
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	4618      	mov	r0, r3
 801012e:	f7fa ffdf 	bl	800b0f0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	4618      	mov	r0, r3
 8010136:	3708      	adds	r7, #8
 8010138:	46bd      	mov	sp, r7
 801013a:	bd80      	pop	{r7, pc}
 801013c:	080267c4 	.word	0x080267c4

08010140 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 8010140:	b580      	push	{r7, lr}
 8010142:	b082      	sub	sp, #8
 8010144:	af00      	add	r7, sp, #0
 8010146:	6078      	str	r0, [r7, #4]
 8010148:	6878      	ldr	r0, [r7, #4]
 801014a:	f7ff ffe7 	bl	801011c <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 801014e:	2110      	movs	r1, #16
 8010150:	6878      	ldr	r0, [r7, #4]
 8010152:	f013 fe74 	bl	8023e3e <_ZdlPvj>
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	4618      	mov	r0, r3
 801015a:	3708      	adds	r7, #8
 801015c:	46bd      	mov	sp, r7
 801015e:	bd80      	pop	{r7, pc}

08010160 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8010160:	b580      	push	{r7, lr}
 8010162:	b082      	sub	sp, #8
 8010164:	af00      	add	r7, sp, #0
 8010166:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	330c      	adds	r3, #12
 801016c:	4618      	mov	r0, r3
 801016e:	f000 f83f 	bl	80101f0 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>
 8010172:	4602      	mov	r2, r0
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	68db      	ldr	r3, [r3, #12]
 8010178:	4619      	mov	r1, r3
 801017a:	4610      	mov	r0, r2
 801017c:	f7ff fcc2 	bl	800fb04 <_ZNKSt14default_deleteI10DigitalPinEclEPS0_>
 8010180:	bf00      	nop
 8010182:	3708      	adds	r7, #8
 8010184:	46bd      	mov	sp, r7
 8010186:	bd80      	pop	{r7, pc}

08010188 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8010188:	b580      	push	{r7, lr}
 801018a:	b086      	sub	sp, #24
 801018c:	af00      	add	r7, sp, #0
 801018e:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	330c      	adds	r3, #12
 8010194:	4618      	mov	r0, r3
 8010196:	f000 f837 	bl	8010208 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 801019a:	4602      	mov	r2, r0
 801019c:	f107 0314 	add.w	r3, r7, #20
 80101a0:	4611      	mov	r1, r2
 80101a2:	4618      	mov	r0, r3
 80101a4:	f000 f83c 	bl	8010220 <_ZNSaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 80101a8:	f107 0114 	add.w	r1, r7, #20
 80101ac:	f107 030c 	add.w	r3, r7, #12
 80101b0:	687a      	ldr	r2, [r7, #4]
 80101b2:	4618      	mov	r0, r3
 80101b4:	f000 f841 	bl	801023a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>
	this->~_Sp_counted_deleter();
 80101b8:	6878      	ldr	r0, [r7, #4]
 80101ba:	f7ff ffaf 	bl	801011c <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 80101be:	f107 030c 	add.w	r3, r7, #12
 80101c2:	4618      	mov	r0, r3
 80101c4:	f000 f84d 	bl	8010262 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 80101c8:	f107 0314 	add.w	r3, r7, #20
 80101cc:	4618      	mov	r0, r3
 80101ce:	f7ff fdd9 	bl	800fd84 <_ZNSaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 80101d2:	3718      	adds	r7, #24
 80101d4:	46bd      	mov	sp, r7
 80101d6:	bd80      	pop	{r7, pc}

080101d8 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const type_info& __ti [[__gnu__::__unused__]]) noexcept
 80101d8:	b480      	push	{r7}
 80101da:	b083      	sub	sp, #12
 80101dc:	af00      	add	r7, sp, #0
 80101de:	6078      	str	r0, [r7, #4]
 80101e0:	6039      	str	r1, [r7, #0]
        return nullptr;
 80101e2:	2300      	movs	r3, #0
      }
 80101e4:	4618      	mov	r0, r3
 80101e6:	370c      	adds	r7, #12
 80101e8:	46bd      	mov	sp, r7
 80101ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ee:	4770      	bx	lr

080101f0 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 80101f0:	b580      	push	{r7, lr}
 80101f2:	b082      	sub	sp, #8
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	6078      	str	r0, [r7, #4]
 80101f8:	6878      	ldr	r0, [r7, #4]
 80101fa:	f000 f847 	bl	801028c <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI10DigitalPinELb1EE6_S_getERS3_>
 80101fe:	4603      	mov	r3, r0
 8010200:	4618      	mov	r0, r3
 8010202:	3708      	adds	r7, #8
 8010204:	46bd      	mov	sp, r7
 8010206:	bd80      	pop	{r7, pc}

08010208 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 8010208:	b580      	push	{r7, lr}
 801020a:	b082      	sub	sp, #8
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]
 8010210:	6878      	ldr	r0, [r7, #4]
 8010212:	f7fe fc78 	bl	800eb06 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EE6_S_getERS1_>
 8010216:	4603      	mov	r3, r0
 8010218:	4618      	mov	r0, r3
 801021a:	3708      	adds	r7, #8
 801021c:	46bd      	mov	sp, r7
 801021e:	bd80      	pop	{r7, pc}

08010220 <_ZNSaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8010220:	b580      	push	{r7, lr}
 8010222:	b082      	sub	sp, #8
 8010224:	af00      	add	r7, sp, #0
 8010226:	6078      	str	r0, [r7, #4]
 8010228:	6039      	str	r1, [r7, #0]
 801022a:	6878      	ldr	r0, [r7, #4]
 801022c:	f7ff fe2b 	bl	800fe86 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	4618      	mov	r0, r3
 8010234:	3708      	adds	r7, #8
 8010236:	46bd      	mov	sp, r7
 8010238:	bd80      	pop	{r7, pc}

0801023a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 801023a:	b580      	push	{r7, lr}
 801023c:	b084      	sub	sp, #16
 801023e:	af00      	add	r7, sp, #0
 8010240:	60f8      	str	r0, [r7, #12]
 8010242:	60b9      	str	r1, [r7, #8]
 8010244:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8010246:	68b8      	ldr	r0, [r7, #8]
 8010248:	f000 f82b 	bl	80102a2 <_ZSt11__addressofISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>
 801024c:	4602      	mov	r2, r0
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	601a      	str	r2, [r3, #0]
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	687a      	ldr	r2, [r7, #4]
 8010256:	605a      	str	r2, [r3, #4]
      { }
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	4618      	mov	r0, r3
 801025c:	3710      	adds	r7, #16
 801025e:	46bd      	mov	sp, r7
 8010260:	bd80      	pop	{r7, pc}

08010262 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 8010262:	b580      	push	{r7, lr}
 8010264:	b082      	sub	sp, #8
 8010266:	af00      	add	r7, sp, #0
 8010268:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	685b      	ldr	r3, [r3, #4]
 801026e:	2b00      	cmp	r3, #0
 8010270:	d007      	beq.n	8010282 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	6818      	ldr	r0, [r3, #0]
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	685b      	ldr	r3, [r3, #4]
 801027a:	2201      	movs	r2, #1
 801027c:	4619      	mov	r1, r3
 801027e:	f000 f81b 	bl	80102b8 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>
      }
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	4618      	mov	r0, r3
 8010286:	3708      	adds	r7, #8
 8010288:	46bd      	mov	sp, r7
 801028a:	bd80      	pop	{r7, pc}

0801028c <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI10DigitalPinELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 801028c:	b480      	push	{r7}
 801028e:	b083      	sub	sp, #12
 8010290:	af00      	add	r7, sp, #0
 8010292:	6078      	str	r0, [r7, #4]
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	4618      	mov	r0, r3
 8010298:	370c      	adds	r7, #12
 801029a:	46bd      	mov	sp, r7
 801029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a0:	4770      	bx	lr

080102a2 <_ZSt11__addressofISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80102a2:	b480      	push	{r7}
 80102a4:	b083      	sub	sp, #12
 80102a6:	af00      	add	r7, sp, #0
 80102a8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	4618      	mov	r0, r3
 80102ae:	370c      	adds	r7, #12
 80102b0:	46bd      	mov	sp, r7
 80102b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b6:	4770      	bx	lr

080102b8 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80102b8:	b580      	push	{r7, lr}
 80102ba:	b084      	sub	sp, #16
 80102bc:	af00      	add	r7, sp, #0
 80102be:	60f8      	str	r0, [r7, #12]
 80102c0:	60b9      	str	r1, [r7, #8]
 80102c2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80102c4:	687a      	ldr	r2, [r7, #4]
 80102c6:	68b9      	ldr	r1, [r7, #8]
 80102c8:	68f8      	ldr	r0, [r7, #12]
 80102ca:	f000 f804 	bl	80102d6 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>
 80102ce:	bf00      	nop
 80102d0:	3710      	adds	r7, #16
 80102d2:	46bd      	mov	sp, r7
 80102d4:	bd80      	pop	{r7, pc}

080102d6 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 80102d6:	b580      	push	{r7, lr}
 80102d8:	b084      	sub	sp, #16
 80102da:	af00      	add	r7, sp, #0
 80102dc:	60f8      	str	r0, [r7, #12]
 80102de:	60b9      	str	r1, [r7, #8]
 80102e0:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	011b      	lsls	r3, r3, #4
 80102e6:	4619      	mov	r1, r3
 80102e8:	68b8      	ldr	r0, [r7, #8]
 80102ea:	f013 fda8 	bl	8023e3e <_ZdlPvj>
      }
 80102ee:	3710      	adds	r7, #16
 80102f0:	46bd      	mov	sp, r7
 80102f2:	bd80      	pop	{r7, pc}

080102f4 <_ZN6ModuleC1Ev>:
#include "module.h"

#include <cstdio>

Module::Module()
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b082      	sub	sp, #8
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
 80102fc:	4a09      	ldr	r2, [pc, #36]	@ (8010324 <_ZN6ModuleC1Ev+0x30>)
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	601a      	str	r2, [r3, #0]
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	2200      	movs	r2, #0
 8010306:	751a      	strb	r2, [r3, #20]
{
	this->counter = 0;
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	2200      	movs	r2, #0
 801030c:	611a      	str	r2, [r3, #16]
	this->updateCount = 1;
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	2201      	movs	r2, #1
 8010312:	60da      	str	r2, [r3, #12]
	printf("\nCreating a std module\n");
 8010314:	4804      	ldr	r0, [pc, #16]	@ (8010328 <_ZN6ModuleC1Ev+0x34>)
 8010316:	f014 fbdf 	bl	8024ad8 <puts>
}
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	4618      	mov	r0, r3
 801031e:	3708      	adds	r7, #8
 8010320:	46bd      	mov	sp, r7
 8010322:	bd80      	pop	{r7, pc}
 8010324:	08026804 	.word	0x08026804
 8010328:	08025f14 	.word	0x08025f14

0801032c <_ZN6ModuleD1Ev>:
	this->counter = 0;
	this->updateCount = this->threadFreq / this->slowUpdateFreq;
	printf("\nCreating a slower module, updating every %ld thread cycles\n",this->updateCount);
}

Module::~Module(){}
 801032c:	b480      	push	{r7}
 801032e:	b083      	sub	sp, #12
 8010330:	af00      	add	r7, sp, #0
 8010332:	6078      	str	r0, [r7, #4]
 8010334:	4a04      	ldr	r2, [pc, #16]	@ (8010348 <_ZN6ModuleD1Ev+0x1c>)
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	601a      	str	r2, [r3, #0]
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	4618      	mov	r0, r3
 801033e:	370c      	adds	r7, #12
 8010340:	46bd      	mov	sp, r7
 8010342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010346:	4770      	bx	lr
 8010348:	08026804 	.word	0x08026804

0801034c <_ZN6ModuleD0Ev>:
 801034c:	b580      	push	{r7, lr}
 801034e:	b082      	sub	sp, #8
 8010350:	af00      	add	r7, sp, #0
 8010352:	6078      	str	r0, [r7, #4]
 8010354:	6878      	ldr	r0, [r7, #4]
 8010356:	f7ff ffe9 	bl	801032c <_ZN6ModuleD1Ev>
 801035a:	2118      	movs	r1, #24
 801035c:	6878      	ldr	r0, [r7, #4]
 801035e:	f013 fd6e 	bl	8023e3e <_ZdlPvj>
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	4618      	mov	r0, r3
 8010366:	3708      	adds	r7, #8
 8010368:	46bd      	mov	sp, r7
 801036a:	bd80      	pop	{r7, pc}

0801036c <_ZN6Module9runModuleEv>:


void Module::runModule()
{
 801036c:	b580      	push	{r7, lr}
 801036e:	b082      	sub	sp, #8
 8010370:	af00      	add	r7, sp, #0
 8010372:	6078      	str	r0, [r7, #4]
	++this->counter;
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	691b      	ldr	r3, [r3, #16]
 8010378:	1c5a      	adds	r2, r3, #1
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	611a      	str	r2, [r3, #16]

	if (this->counter >= this->updateCount)
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	691a      	ldr	r2, [r3, #16]
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	68db      	ldr	r3, [r3, #12]
 8010386:	429a      	cmp	r2, r3
 8010388:	db08      	blt.n	801039c <_ZN6Module9runModuleEv+0x30>
	{
		this->slowUpdate();
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	3310      	adds	r3, #16
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	6878      	ldr	r0, [r7, #4]
 8010394:	4798      	blx	r3
		this->counter = 0;
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	2200      	movs	r2, #0
 801039a:	611a      	str	r2, [r3, #16]
	}

	this->update();
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	3308      	adds	r3, #8
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	6878      	ldr	r0, [r7, #4]
 80103a6:	4798      	blx	r3
}
 80103a8:	bf00      	nop
 80103aa:	3708      	adds	r7, #8
 80103ac:	46bd      	mov	sp, r7
 80103ae:	bd80      	pop	{r7, pc}

080103b0 <_ZN6Module6updateEv>:
void Module::runModulePost()
{
	this->updatePost();
}

void Module::update(){}
 80103b0:	b480      	push	{r7}
 80103b2:	b083      	sub	sp, #12
 80103b4:	af00      	add	r7, sp, #0
 80103b6:	6078      	str	r0, [r7, #4]
 80103b8:	bf00      	nop
 80103ba:	370c      	adds	r7, #12
 80103bc:	46bd      	mov	sp, r7
 80103be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c2:	4770      	bx	lr

080103c4 <_ZN6Module10updatePostEv>:
void Module::updatePost(){}
 80103c4:	b480      	push	{r7}
 80103c6:	b083      	sub	sp, #12
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	6078      	str	r0, [r7, #4]
 80103cc:	bf00      	nop
 80103ce:	370c      	adds	r7, #12
 80103d0:	46bd      	mov	sp, r7
 80103d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d6:	4770      	bx	lr

080103d8 <_ZN6Module10slowUpdateEv>:
void Module::slowUpdate(){}
 80103d8:	b480      	push	{r7}
 80103da:	b083      	sub	sp, #12
 80103dc:	af00      	add	r7, sp, #0
 80103de:	6078      	str	r0, [r7, #4]
 80103e0:	bf00      	nop
 80103e2:	370c      	adds	r7, #12
 80103e4:	46bd      	mov	sp, r7
 80103e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ea:	4770      	bx	lr

080103ec <_ZN6Module9configureEv>:
void Module::configure(){}
 80103ec:	b480      	push	{r7}
 80103ee:	b083      	sub	sp, #12
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	6078      	str	r0, [r7, #4]
 80103f4:	bf00      	nop
 80103f6:	370c      	adds	r7, #12
 80103f8:	46bd      	mov	sp, r7
 80103fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103fe:	4770      	bx	lr

08010400 <_ZN13ModuleFactoryC1Ev>:

class ModuleFactory {
private:

    // Private constructor for singleton
    ModuleFactory() {};
 8010400:	b480      	push	{r7}
 8010402:	b083      	sub	sp, #12
 8010404:	af00      	add	r7, sp, #0
 8010406:	6078      	str	r0, [r7, #4]
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	4618      	mov	r0, r3
 801040c:	370c      	adds	r7, #12
 801040e:	46bd      	mov	sp, r7
 8010410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010414:	4770      	bx	lr
	...

08010418 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora>:

// Create module based on thread and type
std::shared_ptr<Module> ModuleFactory::createModule(const char* _tname,
                                   const char* _mtype,
                                   const JsonVariant config,
                                   Remora* instance) {
 8010418:	b580      	push	{r7, lr}
 801041a:	b092      	sub	sp, #72	@ 0x48
 801041c:	af00      	add	r7, sp, #0
 801041e:	60f8      	str	r0, [r7, #12]
 8010420:	60b9      	str	r1, [r7, #8]
 8010422:	607a      	str	r2, [r7, #4]
 8010424:	603b      	str	r3, [r7, #0]
    if (strcmp(_tname, "Base") == 0) {
 8010426:	495e      	ldr	r1, [pc, #376]	@ (80105a0 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x188>)
 8010428:	6878      	ldr	r0, [r7, #4]
 801042a:	f7ef ff59 	bl	80002e0 <strcmp>
 801042e:	4603      	mov	r3, r0
 8010430:	2b00      	cmp	r3, #0
 8010432:	d116      	bne.n	8010462 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x4a>
        if (strcmp(_mtype, "Stepgen") == 0) {
 8010434:	495b      	ldr	r1, [pc, #364]	@ (80105a4 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x18c>)
 8010436:	6838      	ldr	r0, [r7, #0]
 8010438:	f7ef ff52 	bl	80002e0 <strcmp>
 801043c:	4603      	mov	r3, r0
 801043e:	2b00      	cmp	r3, #0
 8010440:	f040 80a6 	bne.w	8010590 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x178>
            return Stepgen::create(config, instance);
 8010444:	f107 0310 	add.w	r3, r7, #16
 8010448:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 801044c:	4618      	mov	r0, r3
 801044e:	f7f6 f967 	bl	8006720 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	f107 0110 	add.w	r1, r7, #16
 8010458:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801045a:	4618      	mov	r0, r3
 801045c:	f001 fe3c 	bl	80120d8 <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>
    } else {
        printf("Error: Unknown thread type '%s' or module type '%s'\n", _tname, _mtype);
    }

    return nullptr;
}
 8010460:	e09a      	b.n	8010598 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x180>
    } else if (strcmp(_tname, "Servo") == 0) {
 8010462:	4951      	ldr	r1, [pc, #324]	@ (80105a8 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x190>)
 8010464:	6878      	ldr	r0, [r7, #4]
 8010466:	f7ef ff3b 	bl	80002e0 <strcmp>
 801046a:	4603      	mov	r3, r0
 801046c:	2b00      	cmp	r3, #0
 801046e:	d157      	bne.n	8010520 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x108>
        if (strcmp(_mtype, "Blink") == 0) {
 8010470:	494e      	ldr	r1, [pc, #312]	@ (80105ac <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x194>)
 8010472:	6838      	ldr	r0, [r7, #0]
 8010474:	f7ef ff34 	bl	80002e0 <strcmp>
 8010478:	4603      	mov	r3, r0
 801047a:	2b00      	cmp	r3, #0
 801047c:	d10e      	bne.n	801049c <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x84>
            return Blink::create(config, instance);
 801047e:	f107 0318 	add.w	r3, r7, #24
 8010482:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8010486:	4618      	mov	r0, r3
 8010488:	f7f6 f94a 	bl	8006720 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	f107 0118 	add.w	r1, r7, #24
 8010492:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010494:	4618      	mov	r0, r3
 8010496:	f7fd f8d5 	bl	800d644 <_ZN5Blink6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>
}
 801049a:	e07d      	b.n	8010598 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x180>
        } else if (strcmp(_mtype, "Reset Pin") == 0) {
 801049c:	4944      	ldr	r1, [pc, #272]	@ (80105b0 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x198>)
 801049e:	6838      	ldr	r0, [r7, #0]
 80104a0:	f7ef ff1e 	bl	80002e0 <strcmp>
 80104a4:	4603      	mov	r3, r0
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d10e      	bne.n	80104c8 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0xb0>
            return ResetPin::create(config, instance);
 80104aa:	f107 0320 	add.w	r3, r7, #32
 80104ae:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 80104b2:	4618      	mov	r0, r3
 80104b4:	f7f6 f934 	bl	8006720 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	f107 0120 	add.w	r1, r7, #32
 80104be:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80104c0:	4618      	mov	r0, r3
 80104c2:	f000 f8eb 	bl	801069c <_ZN8ResetPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>
}
 80104c6:	e067      	b.n	8010598 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x180>
        } else if (strcmp(_mtype, "Digital Pin") == 0) {
 80104c8:	493a      	ldr	r1, [pc, #232]	@ (80105b4 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x19c>)
 80104ca:	6838      	ldr	r0, [r7, #0]
 80104cc:	f7ef ff08 	bl	80002e0 <strcmp>
 80104d0:	4603      	mov	r3, r0
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d10e      	bne.n	80104f4 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0xdc>
            return DigitalPin::create(config, instance);
 80104d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80104da:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 80104de:	4618      	mov	r0, r3
 80104e0:	f7f6 f91e 	bl	8006720 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80104ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80104ec:	4618      	mov	r0, r3
 80104ee:	f7fe ffc9 	bl	800f484 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>
}
 80104f2:	e051      	b.n	8010598 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x180>
        } else if (strcmp(_mtype, "Sigma Delta") == 0) {
 80104f4:	4930      	ldr	r1, [pc, #192]	@ (80105b8 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1a0>)
 80104f6:	6838      	ldr	r0, [r7, #0]
 80104f8:	f7ef fef2 	bl	80002e0 <strcmp>
 80104fc:	4603      	mov	r3, r0
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d146      	bne.n	8010590 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x178>
            return SigmaDelta::create(config, instance);
 8010502:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8010506:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 801050a:	4618      	mov	r0, r3
 801050c:	f7f6 f908 	bl	8006720 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8010516:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010518:	4618      	mov	r0, r3
 801051a:	f000 fe59 	bl	80111d0 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>
}
 801051e:	e03b      	b.n	8010598 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x180>
    } else if (strcmp(_tname, "On load") == 0) {
 8010520:	4926      	ldr	r1, [pc, #152]	@ (80105bc <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1a4>)
 8010522:	6878      	ldr	r0, [r7, #4]
 8010524:	f7ef fedc 	bl	80002e0 <strcmp>
 8010528:	4603      	mov	r3, r0
 801052a:	2b00      	cmp	r3, #0
 801052c:	d12b      	bne.n	8010586 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x16e>
    	if (strcmp(_mtype, "TMC2208") == 0) {
 801052e:	4924      	ldr	r1, [pc, #144]	@ (80105c0 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1a8>)
 8010530:	6838      	ldr	r0, [r7, #0]
 8010532:	f7ef fed5 	bl	80002e0 <strcmp>
 8010536:	4603      	mov	r3, r0
 8010538:	2b00      	cmp	r3, #0
 801053a:	d10e      	bne.n	801055a <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x142>
   	        return TMC2208::create(config, instance);
 801053c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8010540:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8010544:	4618      	mov	r0, r3
 8010546:	f7f6 f8eb 	bl	8006720 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8010550:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010552:	4618      	mov	r0, r3
 8010554:	f002 fe22 	bl	801319c <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>
}
 8010558:	e01e      	b.n	8010598 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x180>
    	else if (strcmp(_mtype, "TMC2209") == 0) {
 801055a:	491a      	ldr	r1, [pc, #104]	@ (80105c4 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1ac>)
 801055c:	6838      	ldr	r0, [r7, #0]
 801055e:	f7ef febf 	bl	80002e0 <strcmp>
 8010562:	4603      	mov	r3, r0
 8010564:	2b00      	cmp	r3, #0
 8010566:	d113      	bne.n	8010590 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x178>
    		return TMC2209::create(config, instance);
 8010568:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801056c:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8010570:	4618      	mov	r0, r3
 8010572:	f7f6 f8d5 	bl	8006720 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 801057c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801057e:	4618      	mov	r0, r3
 8010580:	f004 fc02 	bl	8014d88 <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>
}
 8010584:	e008      	b.n	8010598 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x180>
        printf("Error: Unknown thread type '%s' or module type '%s'\n", _tname, _mtype);
 8010586:	683a      	ldr	r2, [r7, #0]
 8010588:	6879      	ldr	r1, [r7, #4]
 801058a:	480f      	ldr	r0, [pc, #60]	@ (80105c8 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1b0>)
 801058c:	f014 fa34 	bl	80249f8 <iprintf>
    return nullptr;
 8010590:	2100      	movs	r1, #0
 8010592:	68f8      	ldr	r0, [r7, #12]
 8010594:	f000 f84a 	bl	801062c <_ZNSt10shared_ptrI6ModuleEC1EDn>
}
 8010598:	68f8      	ldr	r0, [r7, #12]
 801059a:	3748      	adds	r7, #72	@ 0x48
 801059c:	46bd      	mov	sp, r7
 801059e:	bd80      	pop	{r7, pc}
 80105a0:	08025f6c 	.word	0x08025f6c
 80105a4:	08025f74 	.word	0x08025f74
 80105a8:	08025f7c 	.word	0x08025f7c
 80105ac:	08025f84 	.word	0x08025f84
 80105b0:	08025f8c 	.word	0x08025f8c
 80105b4:	08025f98 	.word	0x08025f98
 80105b8:	08025fa4 	.word	0x08025fa4
 80105bc:	08025fb0 	.word	0x08025fb0
 80105c0:	08025fb8 	.word	0x08025fb8
 80105c4:	08025fc0 	.word	0x08025fc0
 80105c8:	08025fc8 	.word	0x08025fc8

080105cc <_ZN13ModuleFactory11getInstanceEv>:


// Static instance accessor
ModuleFactory* ModuleFactory::getInstance() {
 80105cc:	b598      	push	{r3, r4, r7, lr}
 80105ce:	af00      	add	r7, sp, #0
    static ModuleFactory* instance = new ModuleFactory();
 80105d0:	4b14      	ldr	r3, [pc, #80]	@ (8010624 <_ZN13ModuleFactory11getInstanceEv+0x58>)
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	f3bf 8f5b 	dmb	ish
 80105d8:	f003 0301 	and.w	r3, r3, #1
 80105dc:	2b00      	cmp	r3, #0
 80105de:	bf0c      	ite	eq
 80105e0:	2301      	moveq	r3, #1
 80105e2:	2300      	movne	r3, #0
 80105e4:	b2db      	uxtb	r3, r3
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d017      	beq.n	801061a <_ZN13ModuleFactory11getInstanceEv+0x4e>
 80105ea:	480e      	ldr	r0, [pc, #56]	@ (8010624 <_ZN13ModuleFactory11getInstanceEv+0x58>)
 80105ec:	f013 fc29 	bl	8023e42 <__cxa_guard_acquire>
 80105f0:	4603      	mov	r3, r0
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	bf14      	ite	ne
 80105f6:	2301      	movne	r3, #1
 80105f8:	2300      	moveq	r3, #0
 80105fa:	b2db      	uxtb	r3, r3
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d00c      	beq.n	801061a <_ZN13ModuleFactory11getInstanceEv+0x4e>
 8010600:	2001      	movs	r0, #1
 8010602:	f013 fc2d 	bl	8023e60 <_Znwj>
 8010606:	4603      	mov	r3, r0
 8010608:	461c      	mov	r4, r3
 801060a:	4620      	mov	r0, r4
 801060c:	f7ff fef8 	bl	8010400 <_ZN13ModuleFactoryC1Ev>
 8010610:	4b05      	ldr	r3, [pc, #20]	@ (8010628 <_ZN13ModuleFactory11getInstanceEv+0x5c>)
 8010612:	601c      	str	r4, [r3, #0]
 8010614:	4803      	ldr	r0, [pc, #12]	@ (8010624 <_ZN13ModuleFactory11getInstanceEv+0x58>)
 8010616:	f013 fc20 	bl	8023e5a <__cxa_guard_release>
    return instance;
 801061a:	4b03      	ldr	r3, [pc, #12]	@ (8010628 <_ZN13ModuleFactory11getInstanceEv+0x5c>)
 801061c:	681b      	ldr	r3, [r3, #0]
}
 801061e:	4618      	mov	r0, r3
 8010620:	bd98      	pop	{r3, r4, r7, pc}
 8010622:	bf00      	nop
 8010624:	24000410 	.word	0x24000410
 8010628:	2400040c 	.word	0x2400040c

0801062c <_ZNSt10shared_ptrI6ModuleEC1EDn>:
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }
 801062c:	b580      	push	{r7, lr}
 801062e:	b082      	sub	sp, #8
 8010630:	af00      	add	r7, sp, #0
 8010632:	6078      	str	r0, [r7, #4]
 8010634:	6039      	str	r1, [r7, #0]
 8010636:	6878      	ldr	r0, [r7, #4]
 8010638:	f000 f805 	bl	8010646 <_ZNSt10shared_ptrI6ModuleEC1Ev>
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	4618      	mov	r0, r3
 8010640:	3708      	adds	r7, #8
 8010642:	46bd      	mov	sp, r7
 8010644:	bd80      	pop	{r7, pc}

08010646 <_ZNSt10shared_ptrI6ModuleEC1Ev>:
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }
 8010646:	b580      	push	{r7, lr}
 8010648:	b082      	sub	sp, #8
 801064a:	af00      	add	r7, sp, #0
 801064c:	6078      	str	r0, [r7, #4]
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	4618      	mov	r0, r3
 8010652:	f000 f805 	bl	8010660 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	4618      	mov	r0, r3
 801065a:	3708      	adds	r7, #8
 801065c:	46bd      	mov	sp, r7
 801065e:	bd80      	pop	{r7, pc}

08010660 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_ptr() noexcept
 8010660:	b580      	push	{r7, lr}
 8010662:	b082      	sub	sp, #8
 8010664:	af00      	add	r7, sp, #0
 8010666:	6078      	str	r0, [r7, #4]
      : _M_ptr(0), _M_refcount()
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	2200      	movs	r2, #0
 801066c:	601a      	str	r2, [r3, #0]
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	3304      	adds	r3, #4
 8010672:	4618      	mov	r0, r3
 8010674:	f7fb fa61 	bl	800bb3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
      { }
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	4618      	mov	r0, r3
 801067c:	3708      	adds	r7, #8
 801067e:	46bd      	mov	sp, r7
 8010680:	bd80      	pop	{r7, pc}

08010682 <_ZN6Remora8getResetEv>:
    void setBaseFreq(uint32_t freq) { baseFreq = freq; }
    void setServoFreq(uint32_t freq) { servoFreq = freq; }

    volatile txData_t* getTxData() { return &txData; }
    volatile rxData_t* getRxData() { return &rxData; }
    volatile bool* getReset() { return &reset; };
 8010682:	b480      	push	{r7}
 8010684:	b083      	sub	sp, #12
 8010686:	af00      	add	r7, sp, #0
 8010688:	6078      	str	r0, [r7, #4]
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	330c      	adds	r3, #12
 801068e:	4618      	mov	r0, r3
 8010690:	370c      	adds	r7, #12
 8010692:	46bd      	mov	sp, r7
 8010694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010698:	4770      	bx	lr
	...

0801069c <_ZN8ResetPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>:
#include "resetPin.h"
#include <cstdio>

std::shared_ptr<Module> ResetPin::create(const JsonObject& config, Remora* instance) {
 801069c:	b580      	push	{r7, lr}
 801069e:	b094      	sub	sp, #80	@ 0x50
 80106a0:	af00      	add	r7, sp, #0
 80106a2:	60f8      	str	r0, [r7, #12]
 80106a4:	60b9      	str	r1, [r7, #8]
 80106a6:	607a      	str	r2, [r7, #4]
	const char* comment = config["Comment"];
 80106a8:	f107 0314 	add.w	r3, r7, #20
 80106ac:	4a1f      	ldr	r2, [pc, #124]	@ (801072c <_ZN8ResetPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x90>)
 80106ae:	68b9      	ldr	r1, [r7, #8]
 80106b0:	4618      	mov	r0, r3
 80106b2:	f000 f886 	bl	80107c2 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 80106b6:	f107 0314 	add.w	r3, r7, #20
 80106ba:	4618      	mov	r0, r3
 80106bc:	f7f6 f864 	bl	8006788 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 80106c0:	64f8      	str	r0, [r7, #76]	@ 0x4c
	printf("%s\n", comment);
 80106c2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80106c4:	f014 fa08 	bl	8024ad8 <puts>

	const char* pin = config["Pin"];
 80106c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80106cc:	4a18      	ldr	r2, [pc, #96]	@ (8010730 <_ZN8ResetPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x94>)
 80106ce:	68b9      	ldr	r1, [r7, #8]
 80106d0:	4618      	mov	r0, r3
 80106d2:	f7fd f87b 	bl	800d7cc <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA4_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 80106d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80106da:	4618      	mov	r0, r3
 80106dc:	f7f6 f854 	bl	8006788 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 80106e0:	4603      	mov	r3, r0
 80106e2:	613b      	str	r3, [r7, #16]
	printf("Make Reset Pin at pin %s\n", pin);
 80106e4:	693b      	ldr	r3, [r7, #16]
 80106e6:	4619      	mov	r1, r3
 80106e8:	4812      	ldr	r0, [pc, #72]	@ (8010734 <_ZN8ResetPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x98>)
 80106ea:	f014 f985 	bl	80249f8 <iprintf>

	return std::make_unique<ResetPin>(instance->getReset(), pin);
 80106ee:	6878      	ldr	r0, [r7, #4]
 80106f0:	f7ff ffc7 	bl	8010682 <_ZN6Remora8getResetEv>
 80106f4:	4603      	mov	r3, r0
 80106f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80106f8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80106fc:	f107 0210 	add.w	r2, r7, #16
 8010700:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8010704:	4618      	mov	r0, r3
 8010706:	f000 f881 	bl	801080c <_ZSt11make_uniqueI8ResetPinJPVbRPKcEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 801070a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801070e:	4619      	mov	r1, r3
 8010710:	68f8      	ldr	r0, [r7, #12]
 8010712:	f000 f8d9 	bl	80108c8 <_ZNSt10shared_ptrI6ModuleEC1I8ResetPinSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>
 8010716:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801071a:	4618      	mov	r0, r3
 801071c:	f000 f8b2 	bl	8010884 <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EED1Ev>
 8010720:	bf00      	nop
}
 8010722:	68f8      	ldr	r0, [r7, #12]
 8010724:	3750      	adds	r7, #80	@ 0x50
 8010726:	46bd      	mov	sp, r7
 8010728:	bd80      	pop	{r7, pc}
 801072a:	bf00      	nop
 801072c:	08026000 	.word	0x08026000
 8010730:	08026008 	.word	0x08026008
 8010734:	0802600c 	.word	0x0802600c

08010738 <_ZN8ResetPinC1EPVbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

ResetPin::ResetPin(volatile bool* ptrReset, const std::string& portAndPin) :
 8010738:	b590      	push	{r4, r7, lr}
 801073a:	b085      	sub	sp, #20
 801073c:	af00      	add	r7, sp, #0
 801073e:	60f8      	str	r0, [r7, #12]
 8010740:	60b9      	str	r1, [r7, #8]
 8010742:	607a      	str	r2, [r7, #4]
    ptrReset(ptrReset),
    portAndPin(portAndPin),
    pin(new Pin(portAndPin, 0)) {}  // Input mode (0x0)
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	4618      	mov	r0, r3
 8010748:	f7ff fdd4 	bl	80102f4 <_ZN6ModuleC1Ev>
 801074c:	4a0e      	ldr	r2, [pc, #56]	@ (8010788 <_ZN8ResetPinC1EPVbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x50>)
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	601a      	str	r2, [r3, #0]
    ptrReset(ptrReset),
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	68ba      	ldr	r2, [r7, #8]
 8010756:	619a      	str	r2, [r3, #24]
    portAndPin(portAndPin),
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	331c      	adds	r3, #28
 801075c:	6879      	ldr	r1, [r7, #4]
 801075e:	4618      	mov	r0, r3
 8010760:	f013 fdab 	bl	80242ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
    pin(new Pin(portAndPin, 0)) {}  // Input mode (0x0)
 8010764:	2040      	movs	r0, #64	@ 0x40
 8010766:	f013 fb7b 	bl	8023e60 <_Znwj>
 801076a:	4603      	mov	r3, r0
 801076c:	461c      	mov	r4, r3
 801076e:	2200      	movs	r2, #0
 8010770:	6879      	ldr	r1, [r7, #4]
 8010772:	4620      	mov	r0, r4
 8010774:	f7f3 f840 	bl	80037f8 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	635c      	str	r4, [r3, #52]	@ 0x34
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	4618      	mov	r0, r3
 8010780:	3714      	adds	r7, #20
 8010782:	46bd      	mov	sp, r7
 8010784:	bd90      	pop	{r4, r7, pc}
 8010786:	bf00      	nop
 8010788:	08026844 	.word	0x08026844

0801078c <_ZN8ResetPin6updateEv>:

void ResetPin::update() {
 801078c:	b590      	push	{r4, r7, lr}
 801078e:	b083      	sub	sp, #12
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]
    *ptrReset = pin->get();
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	699c      	ldr	r4, [r3, #24]
 801079c:	4610      	mov	r0, r2
 801079e:	f7f3 f9bf 	bl	8003b20 <_ZNK3Pin3getEv>
 80107a2:	4603      	mov	r3, r0
 80107a4:	7023      	strb	r3, [r4, #0]
}
 80107a6:	bf00      	nop
 80107a8:	370c      	adds	r7, #12
 80107aa:	46bd      	mov	sp, r7
 80107ac:	bd90      	pop	{r4, r7, pc}

080107ae <_ZN8ResetPin10slowUpdateEv>:

void ResetPin::slowUpdate() {
 80107ae:	b480      	push	{r7}
 80107b0:	b083      	sub	sp, #12
 80107b2:	af00      	add	r7, sp, #0
 80107b4:	6078      	str	r0, [r7, #4]
    return;
 80107b6:	bf00      	nop
}
 80107b8:	370c      	adds	r7, #12
 80107ba:	46bd      	mov	sp, r7
 80107bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c0:	4770      	bx	lr

080107c2 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:

  // Gets or sets the member with specified key.
  // https://arduinojson.org/v7/api/jsonobject/subscript/
  template <typename TString,
            detail::enable_if_t<detail::IsString<TString>::value, int> = 0>
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 80107c2:	b580      	push	{r7, lr}
 80107c4:	b08c      	sub	sp, #48	@ 0x30
 80107c6:	af02      	add	r7, sp, #8
 80107c8:	60f8      	str	r0, [r7, #12]
 80107ca:	60b9      	str	r1, [r7, #8]
 80107cc:	607a      	str	r2, [r7, #4]
      const TString& key) const {
    return {*this, detail::adaptString(key)};
 80107ce:	68ba      	ldr	r2, [r7, #8]
 80107d0:	f107 0314 	add.w	r3, r7, #20
 80107d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80107d8:	e883 0003 	stmia.w	r3, {r0, r1}
 80107dc:	f107 031c 	add.w	r3, r7, #28
 80107e0:	6879      	ldr	r1, [r7, #4]
 80107e2:	4618      	mov	r0, r3
 80107e4:	f7f6 fb12 	bl	8006e0c <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA8_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 80107e8:	466a      	mov	r2, sp
 80107ea:	f107 0320 	add.w	r3, r7, #32
 80107ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 80107f2:	e882 0003 	stmia.w	r2, {r0, r1}
 80107f6:	69fb      	ldr	r3, [r7, #28]
 80107f8:	f107 0214 	add.w	r2, r7, #20
 80107fc:	ca06      	ldmia	r2, {r1, r2}
 80107fe:	68f8      	ldr	r0, [r7, #12]
 8010800:	f7f6 f931 	bl	8006a66 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 8010804:	68f8      	ldr	r0, [r7, #12]
 8010806:	3728      	adds	r7, #40	@ 0x28
 8010808:	46bd      	mov	sp, r7
 801080a:	bd80      	pop	{r7, pc}

0801080c <_ZSt11make_uniqueI8ResetPinJPVbRPKcEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 801080c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801080e:	b08d      	sub	sp, #52	@ 0x34
 8010810:	af00      	add	r7, sp, #0
 8010812:	60f8      	str	r0, [r7, #12]
 8010814:	60b9      	str	r1, [r7, #8]
 8010816:	607a      	str	r2, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8010818:	2038      	movs	r0, #56	@ 0x38
 801081a:	f013 fb21 	bl	8023e60 <_Znwj>
 801081e:	4603      	mov	r3, r0
 8010820:	461e      	mov	r6, r3
 8010822:	68b8      	ldr	r0, [r7, #8]
 8010824:	f000 f863 	bl	80108ee <_ZSt7forwardIPVbEOT_RNSt16remove_referenceIS2_E4typeE>
 8010828:	4603      	mov	r3, r0
 801082a:	681c      	ldr	r4, [r3, #0]
 801082c:	6878      	ldr	r0, [r7, #4]
 801082e:	f7fd f928 	bl	800da82 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8010832:	4603      	mov	r3, r0
 8010834:	681d      	ldr	r5, [r3, #0]
 8010836:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801083a:	4618      	mov	r0, r3
 801083c:	f013 fb21 	bl	8023e82 <_ZNSaIcEC1Ev>
 8010840:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8010844:	f107 0314 	add.w	r3, r7, #20
 8010848:	4629      	mov	r1, r5
 801084a:	4618      	mov	r0, r3
 801084c:	f7f5 ff16 	bl	800667c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8010850:	f107 0314 	add.w	r3, r7, #20
 8010854:	461a      	mov	r2, r3
 8010856:	4621      	mov	r1, r4
 8010858:	4630      	mov	r0, r6
 801085a:	f7ff ff6d 	bl	8010738 <_ZN8ResetPinC1EPVbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 801085e:	4631      	mov	r1, r6
 8010860:	68f8      	ldr	r0, [r7, #12]
 8010862:	f000 f85f 	bl	8010924 <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8010866:	f107 0314 	add.w	r3, r7, #20
 801086a:	4618      	mov	r0, r3
 801086c:	f013 fbe7 	bl	802403e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8010870:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8010874:	4618      	mov	r0, r3
 8010876:	f013 fb05 	bl	8023e84 <_ZNSaIcED1Ev>
 801087a:	bf00      	nop
 801087c:	68f8      	ldr	r0, [r7, #12]
 801087e:	3734      	adds	r7, #52	@ 0x34
 8010880:	46bd      	mov	sp, r7
 8010882:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010884 <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8010884:	b590      	push	{r4, r7, lr}
 8010886:	b085      	sub	sp, #20
 8010888:	af00      	add	r7, sp, #0
 801088a:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	4618      	mov	r0, r3
 8010890:	f000 f857 	bl	8010942 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE6_M_ptrEv>
 8010894:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	2b00      	cmp	r3, #0
 801089c:	d00c      	beq.n	80108b8 <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 801089e:	6878      	ldr	r0, [r7, #4]
 80108a0:	f000 f85c 	bl	801095c <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE11get_deleterEv>
 80108a4:	4604      	mov	r4, r0
 80108a6:	68f8      	ldr	r0, [r7, #12]
 80108a8:	f000 f865 	bl	8010976 <_ZSt4moveIRP8ResetPinEONSt16remove_referenceIT_E4typeEOS4_>
 80108ac:	4603      	mov	r3, r0
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	4619      	mov	r1, r3
 80108b2:	4620      	mov	r0, r4
 80108b4:	f000 f892 	bl	80109dc <_ZNKSt14default_deleteI8ResetPinEclEPS0_>
	__ptr = pointer();
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	2200      	movs	r2, #0
 80108bc:	601a      	str	r2, [r3, #0]
      }
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	4618      	mov	r0, r3
 80108c2:	3714      	adds	r7, #20
 80108c4:	46bd      	mov	sp, r7
 80108c6:	bd90      	pop	{r4, r7, pc}

080108c8 <_ZNSt10shared_ptrI6ModuleEC1I8ResetPinSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>:
	shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 80108c8:	b590      	push	{r4, r7, lr}
 80108ca:	b083      	sub	sp, #12
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	6078      	str	r0, [r7, #4]
 80108d0:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 80108d2:	687c      	ldr	r4, [r7, #4]
 80108d4:	6838      	ldr	r0, [r7, #0]
 80108d6:	f000 f892 	bl	80109fe <_ZSt4moveIRSt10unique_ptrI8ResetPinSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 80108da:	4603      	mov	r3, r0
 80108dc:	4619      	mov	r1, r3
 80108de:	4620      	mov	r0, r4
 80108e0:	f000 f898 	bl	8010a14 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I8ResetPinSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	4618      	mov	r0, r3
 80108e8:	370c      	adds	r7, #12
 80108ea:	46bd      	mov	sp, r7
 80108ec:	bd90      	pop	{r4, r7, pc}

080108ee <_ZSt7forwardIPVbEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80108ee:	b480      	push	{r7}
 80108f0:	b083      	sub	sp, #12
 80108f2:	af00      	add	r7, sp, #0
 80108f4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	4618      	mov	r0, r3
 80108fa:	370c      	adds	r7, #12
 80108fc:	46bd      	mov	sp, r7
 80108fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010902:	4770      	bx	lr

08010904 <_ZNSt15__uniq_ptr_dataI8ResetPinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8010904:	b580      	push	{r7, lr}
 8010906:	b082      	sub	sp, #8
 8010908:	af00      	add	r7, sp, #0
 801090a:	6078      	str	r0, [r7, #4]
 801090c:	6039      	str	r1, [r7, #0]
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	683a      	ldr	r2, [r7, #0]
 8010912:	4611      	mov	r1, r2
 8010914:	4618      	mov	r0, r3
 8010916:	f000 f8b5 	bl	8010a84 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EEC1EPS0_>
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	4618      	mov	r0, r3
 801091e:	3708      	adds	r7, #8
 8010920:	46bd      	mov	sp, r7
 8010922:	bd80      	pop	{r7, pc}

08010924 <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8010924:	b580      	push	{r7, lr}
 8010926:	b082      	sub	sp, #8
 8010928:	af00      	add	r7, sp, #0
 801092a:	6078      	str	r0, [r7, #4]
 801092c:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	6839      	ldr	r1, [r7, #0]
 8010932:	4618      	mov	r0, r3
 8010934:	f7ff ffe6 	bl	8010904 <_ZNSt15__uniq_ptr_dataI8ResetPinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	4618      	mov	r0, r3
 801093c:	3708      	adds	r7, #8
 801093e:	46bd      	mov	sp, r7
 8010940:	bd80      	pop	{r7, pc}

08010942 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8010942:	b580      	push	{r7, lr}
 8010944:	b082      	sub	sp, #8
 8010946:	af00      	add	r7, sp, #0
 8010948:	6078      	str	r0, [r7, #4]
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	4618      	mov	r0, r3
 801094e:	f000 f8ad 	bl	8010aac <_ZSt3getILj0EJP8ResetPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8010952:	4603      	mov	r3, r0
 8010954:	4618      	mov	r0, r3
 8010956:	3708      	adds	r7, #8
 8010958:	46bd      	mov	sp, r7
 801095a:	bd80      	pop	{r7, pc}

0801095c <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 801095c:	b580      	push	{r7, lr}
 801095e:	b082      	sub	sp, #8
 8010960:	af00      	add	r7, sp, #0
 8010962:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	4618      	mov	r0, r3
 8010968:	f000 f8ad 	bl	8010ac6 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE10_M_deleterEv>
 801096c:	4603      	mov	r3, r0
 801096e:	4618      	mov	r0, r3
 8010970:	3708      	adds	r7, #8
 8010972:	46bd      	mov	sp, r7
 8010974:	bd80      	pop	{r7, pc}

08010976 <_ZSt4moveIRP8ResetPinEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8010976:	b480      	push	{r7}
 8010978:	b083      	sub	sp, #12
 801097a:	af00      	add	r7, sp, #0
 801097c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	4618      	mov	r0, r3
 8010982:	370c      	adds	r7, #12
 8010984:	46bd      	mov	sp, r7
 8010986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801098a:	4770      	bx	lr

0801098c <_ZN8ResetPinD1Ev>:
#include "../../drivers/pin/pin.h"

// Global PRUreset variable (declared in extern.h or another source file)
extern volatile bool PRUreset;

class ResetPin : public Module {
 801098c:	b580      	push	{r7, lr}
 801098e:	b082      	sub	sp, #8
 8010990:	af00      	add	r7, sp, #0
 8010992:	6078      	str	r0, [r7, #4]
 8010994:	4a08      	ldr	r2, [pc, #32]	@ (80109b8 <_ZN8ResetPinD1Ev+0x2c>)
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	601a      	str	r2, [r3, #0]
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	331c      	adds	r3, #28
 801099e:	4618      	mov	r0, r3
 80109a0:	f013 fb4d 	bl	802403e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	4618      	mov	r0, r3
 80109a8:	f7ff fcc0 	bl	801032c <_ZN6ModuleD1Ev>
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	4618      	mov	r0, r3
 80109b0:	3708      	adds	r7, #8
 80109b2:	46bd      	mov	sp, r7
 80109b4:	bd80      	pop	{r7, pc}
 80109b6:	bf00      	nop
 80109b8:	08026844 	.word	0x08026844

080109bc <_ZN8ResetPinD0Ev>:
 80109bc:	b580      	push	{r7, lr}
 80109be:	b082      	sub	sp, #8
 80109c0:	af00      	add	r7, sp, #0
 80109c2:	6078      	str	r0, [r7, #4]
 80109c4:	6878      	ldr	r0, [r7, #4]
 80109c6:	f7ff ffe1 	bl	801098c <_ZN8ResetPinD1Ev>
 80109ca:	2138      	movs	r1, #56	@ 0x38
 80109cc:	6878      	ldr	r0, [r7, #4]
 80109ce:	f013 fa36 	bl	8023e3e <_ZdlPvj>
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	4618      	mov	r0, r3
 80109d6:	3708      	adds	r7, #8
 80109d8:	46bd      	mov	sp, r7
 80109da:	bd80      	pop	{r7, pc}

080109dc <_ZNKSt14default_deleteI8ResetPinEclEPS0_>:
      operator()(_Tp* __ptr) const
 80109dc:	b580      	push	{r7, lr}
 80109de:	b082      	sub	sp, #8
 80109e0:	af00      	add	r7, sp, #0
 80109e2:	6078      	str	r0, [r7, #4]
 80109e4:	6039      	str	r1, [r7, #0]
	delete __ptr;
 80109e6:	683b      	ldr	r3, [r7, #0]
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d004      	beq.n	80109f6 <_ZNKSt14default_deleteI8ResetPinEclEPS0_+0x1a>
 80109ec:	681a      	ldr	r2, [r3, #0]
 80109ee:	3204      	adds	r2, #4
 80109f0:	6812      	ldr	r2, [r2, #0]
 80109f2:	4618      	mov	r0, r3
 80109f4:	4790      	blx	r2
      }
 80109f6:	bf00      	nop
 80109f8:	3708      	adds	r7, #8
 80109fa:	46bd      	mov	sp, r7
 80109fc:	bd80      	pop	{r7, pc}

080109fe <_ZSt4moveIRSt10unique_ptrI8ResetPinSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 80109fe:	b480      	push	{r7}
 8010a00:	b083      	sub	sp, #12
 8010a02:	af00      	add	r7, sp, #0
 8010a04:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	4618      	mov	r0, r3
 8010a0a:	370c      	adds	r7, #12
 8010a0c:	46bd      	mov	sp, r7
 8010a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a12:	4770      	bx	lr

08010a14 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I8ResetPinSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>:
	__shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 8010a14:	b580      	push	{r7, lr}
 8010a16:	b084      	sub	sp, #16
 8010a18:	af00      	add	r7, sp, #0
 8010a1a:	6078      	str	r0, [r7, #4]
 8010a1c:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r.get()), _M_refcount()
 8010a1e:	6838      	ldr	r0, [r7, #0]
 8010a20:	f000 f85e 	bl	8010ae0 <_ZNKSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE3getEv>
 8010a24:	4602      	mov	r2, r0
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	601a      	str	r2, [r3, #0]
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	3304      	adds	r3, #4
 8010a2e:	4618      	mov	r0, r3
 8010a30:	f7fb f883 	bl	800bb3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  auto __raw = __to_address(__r.get());
 8010a34:	6838      	ldr	r0, [r7, #0]
 8010a36:	f000 f853 	bl	8010ae0 <_ZNKSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE3getEv>
 8010a3a:	4603      	mov	r3, r0
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	f000 f85c 	bl	8010afa <_ZSt12__to_addressI8ResetPinEPT_S2_>
 8010a42:	60f8      	str	r0, [r7, #12]
	  _M_refcount = __shared_count<_Lp>(std::move(__r));
 8010a44:	6838      	ldr	r0, [r7, #0]
 8010a46:	f7ff ffda 	bl	80109fe <_ZSt4moveIRSt10unique_ptrI8ResetPinSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 8010a4a:	4602      	mov	r2, r0
 8010a4c:	f107 0308 	add.w	r3, r7, #8
 8010a50:	4611      	mov	r1, r2
 8010a52:	4618      	mov	r0, r3
 8010a54:	f000 f85c 	bl	8010b10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I8ResetPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	3304      	adds	r3, #4
 8010a5c:	f107 0208 	add.w	r2, r7, #8
 8010a60:	4611      	mov	r1, r2
 8010a62:	4618      	mov	r0, r3
 8010a64:	f7fd fa20 	bl	800dea8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 8010a68:	f107 0308 	add.w	r3, r7, #8
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	f7fa f834 	bl	800aada <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  _M_enable_shared_from_this_with(__raw);
 8010a72:	68f9      	ldr	r1, [r7, #12]
 8010a74:	6878      	ldr	r0, [r7, #4]
 8010a76:	f000 f88d 	bl	8010b94 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI8ResetPinS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	3710      	adds	r7, #16
 8010a80:	46bd      	mov	sp, r7
 8010a82:	bd80      	pop	{r7, pc}

08010a84 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8010a84:	b590      	push	{r4, r7, lr}
 8010a86:	b083      	sub	sp, #12
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	6078      	str	r0, [r7, #4]
 8010a8c:	6039      	str	r1, [r7, #0]
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	4618      	mov	r0, r3
 8010a92:	f000 f88a 	bl	8010baa <_ZNSt5tupleIJP8ResetPinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8010a96:	683c      	ldr	r4, [r7, #0]
 8010a98:	6878      	ldr	r0, [r7, #4]
 8010a9a:	f7ff ff52 	bl	8010942 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE6_M_ptrEv>
 8010a9e:	4603      	mov	r3, r0
 8010aa0:	601c      	str	r4, [r3, #0]
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	4618      	mov	r0, r3
 8010aa6:	370c      	adds	r7, #12
 8010aa8:	46bd      	mov	sp, r7
 8010aaa:	bd90      	pop	{r4, r7, pc}

08010aac <_ZSt3getILj0EJP8ResetPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8010aac:	b580      	push	{r7, lr}
 8010aae:	b082      	sub	sp, #8
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	4618      	mov	r0, r3
 8010ab8:	f000 f884 	bl	8010bc4 <_ZSt12__get_helperILj0EP8ResetPinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8010abc:	4603      	mov	r3, r0
 8010abe:	4618      	mov	r0, r3
 8010ac0:	3708      	adds	r7, #8
 8010ac2:	46bd      	mov	sp, r7
 8010ac4:	bd80      	pop	{r7, pc}

08010ac6 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8010ac6:	b580      	push	{r7, lr}
 8010ac8:	b082      	sub	sp, #8
 8010aca:	af00      	add	r7, sp, #0
 8010acc:	6078      	str	r0, [r7, #4]
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	4618      	mov	r0, r3
 8010ad2:	f000 f883 	bl	8010bdc <_ZSt3getILj1EJP8ResetPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8010ad6:	4603      	mov	r3, r0
 8010ad8:	4618      	mov	r0, r3
 8010ada:	3708      	adds	r7, #8
 8010adc:	46bd      	mov	sp, r7
 8010ade:	bd80      	pop	{r7, pc}

08010ae0 <_ZNKSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8010ae0:	b580      	push	{r7, lr}
 8010ae2:	b082      	sub	sp, #8
 8010ae4:	af00      	add	r7, sp, #0
 8010ae6:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	4618      	mov	r0, r3
 8010aec:	f000 f882 	bl	8010bf4 <_ZNKSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE6_M_ptrEv>
 8010af0:	4603      	mov	r3, r0
 8010af2:	4618      	mov	r0, r3
 8010af4:	3708      	adds	r7, #8
 8010af6:	46bd      	mov	sp, r7
 8010af8:	bd80      	pop	{r7, pc}

08010afa <_ZSt12__to_addressI8ResetPinEPT_S2_>:
    __to_address(_Tp* __ptr) noexcept
 8010afa:	b480      	push	{r7}
 8010afc:	b083      	sub	sp, #12
 8010afe:	af00      	add	r7, sp, #0
 8010b00:	6078      	str	r0, [r7, #4]
      return __ptr;
 8010b02:	687b      	ldr	r3, [r7, #4]
    }
 8010b04:	4618      	mov	r0, r3
 8010b06:	370c      	adds	r7, #12
 8010b08:	46bd      	mov	sp, r7
 8010b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b0e:	4770      	bx	lr

08010b10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I8ResetPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>:
	__shared_count(std::unique_ptr<_Tp, _Del>&& __r) : _M_pi(0)
 8010b10:	b580      	push	{r7, lr}
 8010b12:	b086      	sub	sp, #24
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	6078      	str	r0, [r7, #4]
 8010b18:	6039      	str	r1, [r7, #0]
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	2200      	movs	r2, #0
 8010b1e:	601a      	str	r2, [r3, #0]
	  if (__r.get() == nullptr)
 8010b20:	6838      	ldr	r0, [r7, #0]
 8010b22:	f7ff ffdd 	bl	8010ae0 <_ZNKSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE3getEv>
 8010b26:	4603      	mov	r3, r0
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	bf0c      	ite	eq
 8010b2c:	2301      	moveq	r3, #1
 8010b2e:	2300      	movne	r3, #0
 8010b30:	b2db      	uxtb	r3, r3
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d128      	bne.n	8010b88 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I8ResetPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x78>
	  _Alloc __a;
 8010b36:	f107 030c 	add.w	r3, r7, #12
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	f000 f868 	bl	8010c10 <_ZNSaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
	  _Sp_cd_type* __mem = _Alloc_traits::allocate(__a, 1);
 8010b40:	f107 030c 	add.w	r3, r7, #12
 8010b44:	2101      	movs	r1, #1
 8010b46:	4618      	mov	r0, r3
 8010b48:	f000 f87a 	bl	8010c40 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>
 8010b4c:	6178      	str	r0, [r7, #20]
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 8010b4e:	6838      	ldr	r0, [r7, #0]
 8010b50:	f000 f885 	bl	8010c5e <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE7releaseEv>
 8010b54:	4603      	mov	r3, r0
 8010b56:	613b      	str	r3, [r7, #16]
				   std::forward<_Del>(__r.get_deleter()));
 8010b58:	6838      	ldr	r0, [r7, #0]
 8010b5a:	f7ff feff 	bl	801095c <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE11get_deleterEv>
 8010b5e:	4603      	mov	r3, r0
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 8010b60:	4618      	mov	r0, r3
 8010b62:	f000 f889 	bl	8010c78 <_ZSt7forwardISt14default_deleteI8ResetPinEEOT_RNSt16remove_referenceIS3_E4typeE>
 8010b66:	4603      	mov	r3, r0
 8010b68:	f107 0210 	add.w	r2, r7, #16
 8010b6c:	f107 000c 	add.w	r0, r7, #12
 8010b70:	6979      	ldr	r1, [r7, #20]
 8010b72:	f000 f88c 	bl	8010c8e <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>
	  _M_pi = __mem;
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	697a      	ldr	r2, [r7, #20]
 8010b7a:	601a      	str	r2, [r3, #0]
	}
 8010b7c:	f107 030c 	add.w	r3, r7, #12
 8010b80:	4618      	mov	r0, r3
 8010b82:	f000 f851 	bl	8010c28 <_ZNSaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8010b86:	e000      	b.n	8010b8a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I8ResetPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x7a>
	    return;
 8010b88:	bf00      	nop
	}
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	3718      	adds	r7, #24
 8010b90:	46bd      	mov	sp, r7
 8010b92:	bd80      	pop	{r7, pc}

08010b94 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI8ResetPinS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 8010b94:	b480      	push	{r7}
 8010b96:	b083      	sub	sp, #12
 8010b98:	af00      	add	r7, sp, #0
 8010b9a:	6078      	str	r0, [r7, #4]
 8010b9c:	6039      	str	r1, [r7, #0]
	{ }
 8010b9e:	bf00      	nop
 8010ba0:	370c      	adds	r7, #12
 8010ba2:	46bd      	mov	sp, r7
 8010ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba8:	4770      	bx	lr

08010baa <_ZNSt5tupleIJP8ResetPinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 8010baa:	b580      	push	{r7, lr}
 8010bac:	b082      	sub	sp, #8
 8010bae:	af00      	add	r7, sp, #0
 8010bb0:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	f000 f882 	bl	8010cbe <_ZNSt11_Tuple_implILj0EJP8ResetPinSt14default_deleteIS0_EEEC1Ev>
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	3708      	adds	r7, #8
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	bd80      	pop	{r7, pc}

08010bc4 <_ZSt12__get_helperILj0EP8ResetPinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8010bc4:	b580      	push	{r7, lr}
 8010bc6:	b082      	sub	sp, #8
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8010bcc:	6878      	ldr	r0, [r7, #4]
 8010bce:	f000 f886 	bl	8010cde <_ZNSt11_Tuple_implILj0EJP8ResetPinSt14default_deleteIS0_EEE7_M_headERS4_>
 8010bd2:	4603      	mov	r3, r0
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	3708      	adds	r7, #8
 8010bd8:	46bd      	mov	sp, r7
 8010bda:	bd80      	pop	{r7, pc}

08010bdc <_ZSt3getILj1EJP8ResetPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	b082      	sub	sp, #8
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8010be4:	6878      	ldr	r0, [r7, #4]
 8010be6:	f000 f887 	bl	8010cf8 <_ZSt12__get_helperILj1ESt14default_deleteI8ResetPinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8010bea:	4603      	mov	r3, r0
 8010bec:	4618      	mov	r0, r3
 8010bee:	3708      	adds	r7, #8
 8010bf0:	46bd      	mov	sp, r7
 8010bf2:	bd80      	pop	{r7, pc}

08010bf4 <_ZNKSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 8010bf4:	b580      	push	{r7, lr}
 8010bf6:	b082      	sub	sp, #8
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	6078      	str	r0, [r7, #4]
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	4618      	mov	r0, r3
 8010c00:	f000 f886 	bl	8010d10 <_ZSt3getILj0EJP8ResetPinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8010c04:	4603      	mov	r3, r0
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	4618      	mov	r0, r3
 8010c0a:	3708      	adds	r7, #8
 8010c0c:	46bd      	mov	sp, r7
 8010c0e:	bd80      	pop	{r7, pc}

08010c10 <_ZNSaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8010c10:	b580      	push	{r7, lr}
 8010c12:	b082      	sub	sp, #8
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	6078      	str	r0, [r7, #4]
 8010c18:	6878      	ldr	r0, [r7, #4]
 8010c1a:	f000 f886 	bl	8010d2a <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	4618      	mov	r0, r3
 8010c22:	3708      	adds	r7, #8
 8010c24:	46bd      	mov	sp, r7
 8010c26:	bd80      	pop	{r7, pc}

08010c28 <_ZNSaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8010c28:	b580      	push	{r7, lr}
 8010c2a:	b082      	sub	sp, #8
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	6078      	str	r0, [r7, #4]
 8010c30:	6878      	ldr	r0, [r7, #4]
 8010c32:	f000 f885 	bl	8010d40 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	4618      	mov	r0, r3
 8010c3a:	3708      	adds	r7, #8
 8010c3c:	46bd      	mov	sp, r7
 8010c3e:	bd80      	pop	{r7, pc}

08010c40 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 8010c40:	b580      	push	{r7, lr}
 8010c42:	b082      	sub	sp, #8
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	6078      	str	r0, [r7, #4]
 8010c48:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8010c4a:	2200      	movs	r2, #0
 8010c4c:	6839      	ldr	r1, [r7, #0]
 8010c4e:	6878      	ldr	r0, [r7, #4]
 8010c50:	f000 f881 	bl	8010d56 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 8010c54:	4603      	mov	r3, r0
 8010c56:	4618      	mov	r0, r3
 8010c58:	3708      	adds	r7, #8
 8010c5a:	46bd      	mov	sp, r7
 8010c5c:	bd80      	pop	{r7, pc}

08010c5e <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 8010c5e:	b580      	push	{r7, lr}
 8010c60:	b082      	sub	sp, #8
 8010c62:	af00      	add	r7, sp, #0
 8010c64:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	4618      	mov	r0, r3
 8010c6a:	f000 f89e 	bl	8010daa <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE7releaseEv>
 8010c6e:	4603      	mov	r3, r0
 8010c70:	4618      	mov	r0, r3
 8010c72:	3708      	adds	r7, #8
 8010c74:	46bd      	mov	sp, r7
 8010c76:	bd80      	pop	{r7, pc}

08010c78 <_ZSt7forwardISt14default_deleteI8ResetPinEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010c78:	b480      	push	{r7}
 8010c7a:	b083      	sub	sp, #12
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	4618      	mov	r0, r3
 8010c84:	370c      	adds	r7, #12
 8010c86:	46bd      	mov	sp, r7
 8010c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c8c:	4770      	bx	lr

08010c8e <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8010c8e:	b590      	push	{r4, r7, lr}
 8010c90:	b085      	sub	sp, #20
 8010c92:	af00      	add	r7, sp, #0
 8010c94:	60f8      	str	r0, [r7, #12]
 8010c96:	60b9      	str	r1, [r7, #8]
 8010c98:	607a      	str	r2, [r7, #4]
 8010c9a:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8010c9c:	6878      	ldr	r0, [r7, #4]
 8010c9e:	f000 f899 	bl	8010dd4 <_ZSt7forwardIP8ResetPinEOT_RNSt16remove_referenceIS2_E4typeE>
 8010ca2:	4604      	mov	r4, r0
 8010ca4:	6838      	ldr	r0, [r7, #0]
 8010ca6:	f7ff ffe7 	bl	8010c78 <_ZSt7forwardISt14default_deleteI8ResetPinEEOT_RNSt16remove_referenceIS3_E4typeE>
 8010caa:	4603      	mov	r3, r0
 8010cac:	4622      	mov	r2, r4
 8010cae:	68b9      	ldr	r1, [r7, #8]
 8010cb0:	68f8      	ldr	r0, [r7, #12]
 8010cb2:	f000 f89a 	bl	8010dea <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>
	}
 8010cb6:	bf00      	nop
 8010cb8:	3714      	adds	r7, #20
 8010cba:	46bd      	mov	sp, r7
 8010cbc:	bd90      	pop	{r4, r7, pc}

08010cbe <_ZNSt11_Tuple_implILj0EJP8ResetPinSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8010cbe:	b580      	push	{r7, lr}
 8010cc0:	b082      	sub	sp, #8
 8010cc2:	af00      	add	r7, sp, #0
 8010cc4:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8010cc6:	6878      	ldr	r0, [r7, #4]
 8010cc8:	f000 f8ad 	bl	8010e26 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8ResetPinEEEC1Ev>
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	4618      	mov	r0, r3
 8010cd0:	f000 f8b5 	bl	8010e3e <_ZNSt10_Head_baseILj0EP8ResetPinLb0EEC1Ev>
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	4618      	mov	r0, r3
 8010cd8:	3708      	adds	r7, #8
 8010cda:	46bd      	mov	sp, r7
 8010cdc:	bd80      	pop	{r7, pc}

08010cde <_ZNSt11_Tuple_implILj0EJP8ResetPinSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8010cde:	b580      	push	{r7, lr}
 8010ce0:	b082      	sub	sp, #8
 8010ce2:	af00      	add	r7, sp, #0
 8010ce4:	6078      	str	r0, [r7, #4]
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	4618      	mov	r0, r3
 8010cea:	f000 f8b6 	bl	8010e5a <_ZNSt10_Head_baseILj0EP8ResetPinLb0EE7_M_headERS2_>
 8010cee:	4603      	mov	r3, r0
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	3708      	adds	r7, #8
 8010cf4:	46bd      	mov	sp, r7
 8010cf6:	bd80      	pop	{r7, pc}

08010cf8 <_ZSt12__get_helperILj1ESt14default_deleteI8ResetPinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8010cf8:	b580      	push	{r7, lr}
 8010cfa:	b082      	sub	sp, #8
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8010d00:	6878      	ldr	r0, [r7, #4]
 8010d02:	f000 f8b5 	bl	8010e70 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8ResetPinEEE7_M_headERS3_>
 8010d06:	4603      	mov	r3, r0
 8010d08:	4618      	mov	r0, r3
 8010d0a:	3708      	adds	r7, #8
 8010d0c:	46bd      	mov	sp, r7
 8010d0e:	bd80      	pop	{r7, pc}

08010d10 <_ZSt3getILj0EJP8ResetPinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 8010d10:	b580      	push	{r7, lr}
 8010d12:	b082      	sub	sp, #8
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	f000 f8b4 	bl	8010e88 <_ZSt12__get_helperILj0EP8ResetPinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8010d20:	4603      	mov	r3, r0
 8010d22:	4618      	mov	r0, r3
 8010d24:	3708      	adds	r7, #8
 8010d26:	46bd      	mov	sp, r7
 8010d28:	bd80      	pop	{r7, pc}

08010d2a <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8010d2a:	b480      	push	{r7}
 8010d2c:	b083      	sub	sp, #12
 8010d2e:	af00      	add	r7, sp, #0
 8010d30:	6078      	str	r0, [r7, #4]
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	4618      	mov	r0, r3
 8010d36:	370c      	adds	r7, #12
 8010d38:	46bd      	mov	sp, r7
 8010d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d3e:	4770      	bx	lr

08010d40 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8010d40:	b480      	push	{r7}
 8010d42:	b083      	sub	sp, #12
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	6078      	str	r0, [r7, #4]
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	370c      	adds	r7, #12
 8010d4e:	46bd      	mov	sp, r7
 8010d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d54:	4770      	bx	lr

08010d56 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8010d56:	b580      	push	{r7, lr}
 8010d58:	b084      	sub	sp, #16
 8010d5a:	af00      	add	r7, sp, #0
 8010d5c:	60f8      	str	r0, [r7, #12]
 8010d5e:	60b9      	str	r1, [r7, #8]
 8010d60:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8010d62:	68f8      	ldr	r0, [r7, #12]
 8010d64:	f000 f89c 	bl	8010ea0 <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 8010d68:	4602      	mov	r2, r0
 8010d6a:	68bb      	ldr	r3, [r7, #8]
 8010d6c:	4293      	cmp	r3, r2
 8010d6e:	bf8c      	ite	hi
 8010d70:	2301      	movhi	r3, #1
 8010d72:	2300      	movls	r3, #0
 8010d74:	b2db      	uxtb	r3, r3
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	bf14      	ite	ne
 8010d7a:	2301      	movne	r3, #1
 8010d7c:	2300      	moveq	r3, #0
 8010d7e:	b2db      	uxtb	r3, r3
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d007      	beq.n	8010d94 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8010d84:	68bb      	ldr	r3, [r7, #8]
 8010d86:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010d8a:	d301      	bcc.n	8010d90 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8010d8c:	f013 f87e 	bl	8023e8c <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8010d90:	f013 f879 	bl	8023e86 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8010d94:	68bb      	ldr	r3, [r7, #8]
 8010d96:	011b      	lsls	r3, r3, #4
 8010d98:	4618      	mov	r0, r3
 8010d9a:	f013 f861 	bl	8023e60 <_Znwj>
 8010d9e:	4603      	mov	r3, r0
 8010da0:	bf00      	nop
      }
 8010da2:	4618      	mov	r0, r3
 8010da4:	3710      	adds	r7, #16
 8010da6:	46bd      	mov	sp, r7
 8010da8:	bd80      	pop	{r7, pc}

08010daa <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 8010daa:	b580      	push	{r7, lr}
 8010dac:	b084      	sub	sp, #16
 8010dae:	af00      	add	r7, sp, #0
 8010db0:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8010db2:	6878      	ldr	r0, [r7, #4]
 8010db4:	f7ff fdc5 	bl	8010942 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE6_M_ptrEv>
 8010db8:	4603      	mov	r3, r0
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8010dbe:	6878      	ldr	r0, [r7, #4]
 8010dc0:	f7ff fdbf 	bl	8010942 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE6_M_ptrEv>
 8010dc4:	4603      	mov	r3, r0
 8010dc6:	2200      	movs	r2, #0
 8010dc8:	601a      	str	r2, [r3, #0]
	return __p;
 8010dca:	68fb      	ldr	r3, [r7, #12]
      }
 8010dcc:	4618      	mov	r0, r3
 8010dce:	3710      	adds	r7, #16
 8010dd0:	46bd      	mov	sp, r7
 8010dd2:	bd80      	pop	{r7, pc}

08010dd4 <_ZSt7forwardIP8ResetPinEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010dd4:	b480      	push	{r7}
 8010dd6:	b083      	sub	sp, #12
 8010dd8:	af00      	add	r7, sp, #0
 8010dda:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	4618      	mov	r0, r3
 8010de0:	370c      	adds	r7, #12
 8010de2:	46bd      	mov	sp, r7
 8010de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de8:	4770      	bx	lr

08010dea <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8010dea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010dec:	b085      	sub	sp, #20
 8010dee:	af00      	add	r7, sp, #0
 8010df0:	60f8      	str	r0, [r7, #12]
 8010df2:	60b9      	str	r1, [r7, #8]
 8010df4:	607a      	str	r2, [r7, #4]
 8010df6:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8010df8:	68bb      	ldr	r3, [r7, #8]
 8010dfa:	4619      	mov	r1, r3
 8010dfc:	2010      	movs	r0, #16
 8010dfe:	f7f8 fc7f 	bl	8009700 <_ZnwjPv>
 8010e02:	4605      	mov	r5, r0
 8010e04:	6878      	ldr	r0, [r7, #4]
 8010e06:	f7ff ffe5 	bl	8010dd4 <_ZSt7forwardIP8ResetPinEOT_RNSt16remove_referenceIS2_E4typeE>
 8010e0a:	4603      	mov	r3, r0
 8010e0c:	681c      	ldr	r4, [r3, #0]
 8010e0e:	6838      	ldr	r0, [r7, #0]
 8010e10:	f7ff ff32 	bl	8010c78 <_ZSt7forwardISt14default_deleteI8ResetPinEEOT_RNSt16remove_referenceIS3_E4typeE>
 8010e14:	4632      	mov	r2, r6
 8010e16:	4621      	mov	r1, r4
 8010e18:	4628      	mov	r0, r5
 8010e1a:	f000 f84d 	bl	8010eb8 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>
 8010e1e:	bf00      	nop
 8010e20:	3714      	adds	r7, #20
 8010e22:	46bd      	mov	sp, r7
 8010e24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010e26 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8ResetPinEEEC1Ev>:
      _Tuple_impl()
 8010e26:	b580      	push	{r7, lr}
 8010e28:	b082      	sub	sp, #8
 8010e2a:	af00      	add	r7, sp, #0
 8010e2c:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8010e2e:	6878      	ldr	r0, [r7, #4]
 8010e30:	f000 f864 	bl	8010efc <_ZNSt10_Head_baseILj1ESt14default_deleteI8ResetPinELb1EEC1Ev>
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	4618      	mov	r0, r3
 8010e38:	3708      	adds	r7, #8
 8010e3a:	46bd      	mov	sp, r7
 8010e3c:	bd80      	pop	{r7, pc}

08010e3e <_ZNSt10_Head_baseILj0EP8ResetPinLb0EEC1Ev>:
      constexpr _Head_base()
 8010e3e:	b480      	push	{r7}
 8010e40:	b083      	sub	sp, #12
 8010e42:	af00      	add	r7, sp, #0
 8010e44:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	2200      	movs	r2, #0
 8010e4a:	601a      	str	r2, [r3, #0]
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	4618      	mov	r0, r3
 8010e50:	370c      	adds	r7, #12
 8010e52:	46bd      	mov	sp, r7
 8010e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e58:	4770      	bx	lr

08010e5a <_ZNSt10_Head_baseILj0EP8ResetPinLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8010e5a:	b480      	push	{r7}
 8010e5c:	b083      	sub	sp, #12
 8010e5e:	af00      	add	r7, sp, #0
 8010e60:	6078      	str	r0, [r7, #4]
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	4618      	mov	r0, r3
 8010e66:	370c      	adds	r7, #12
 8010e68:	46bd      	mov	sp, r7
 8010e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e6e:	4770      	bx	lr

08010e70 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8ResetPinEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8010e70:	b580      	push	{r7, lr}
 8010e72:	b082      	sub	sp, #8
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	6078      	str	r0, [r7, #4]
 8010e78:	6878      	ldr	r0, [r7, #4]
 8010e7a:	f000 f84a 	bl	8010f12 <_ZNSt10_Head_baseILj1ESt14default_deleteI8ResetPinELb1EE7_M_headERS3_>
 8010e7e:	4603      	mov	r3, r0
 8010e80:	4618      	mov	r0, r3
 8010e82:	3708      	adds	r7, #8
 8010e84:	46bd      	mov	sp, r7
 8010e86:	bd80      	pop	{r7, pc}

08010e88 <_ZSt12__get_helperILj0EP8ResetPinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8010e88:	b580      	push	{r7, lr}
 8010e8a:	b082      	sub	sp, #8
 8010e8c:	af00      	add	r7, sp, #0
 8010e8e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8010e90:	6878      	ldr	r0, [r7, #4]
 8010e92:	f000 f849 	bl	8010f28 <_ZNSt11_Tuple_implILj0EJP8ResetPinSt14default_deleteIS0_EEE7_M_headERKS4_>
 8010e96:	4603      	mov	r3, r0
 8010e98:	4618      	mov	r0, r3
 8010e9a:	3708      	adds	r7, #8
 8010e9c:	46bd      	mov	sp, r7
 8010e9e:	bd80      	pop	{r7, pc}

08010ea0 <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8010ea0:	b480      	push	{r7}
 8010ea2:	b083      	sub	sp, #12
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8010ea8:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      }
 8010eac:	4618      	mov	r0, r3
 8010eae:	370c      	adds	r7, #12
 8010eb0:	46bd      	mov	sp, r7
 8010eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb6:	4770      	bx	lr

08010eb8 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
 8010eb8:	b5b0      	push	{r4, r5, r7, lr}
 8010eba:	b086      	sub	sp, #24
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	60f8      	str	r0, [r7, #12]
 8010ec0:	60b9      	str	r1, [r7, #8]
 8010ec2:	713a      	strb	r2, [r7, #4]
      : _M_impl(__p, std::move(__d), _Alloc()) { }
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	f7fb fd1c 	bl	800c904 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8010ecc:	4a0a      	ldr	r2, [pc, #40]	@ (8010ef8 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_+0x40>)
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	601a      	str	r2, [r3, #0]
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	f103 040c 	add.w	r4, r3, #12
 8010ed8:	1d3b      	adds	r3, r7, #4
 8010eda:	4618      	mov	r0, r3
 8010edc:	f000 f831 	bl	8010f42 <_ZSt4moveIRSt14default_deleteI8ResetPinEEONSt16remove_referenceIT_E4typeEOS5_>
 8010ee0:	f107 0314 	add.w	r3, r7, #20
 8010ee4:	462a      	mov	r2, r5
 8010ee6:	68b9      	ldr	r1, [r7, #8]
 8010ee8:	4620      	mov	r0, r4
 8010eea:	f000 f835 	bl	8010f58 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	3718      	adds	r7, #24
 8010ef4:	46bd      	mov	sp, r7
 8010ef6:	bdb0      	pop	{r4, r5, r7, pc}
 8010ef8:	08026828 	.word	0x08026828

08010efc <_ZNSt10_Head_baseILj1ESt14default_deleteI8ResetPinELb1EEC1Ev>:
      constexpr _Head_base()
 8010efc:	b480      	push	{r7}
 8010efe:	b083      	sub	sp, #12
 8010f00:	af00      	add	r7, sp, #0
 8010f02:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	4618      	mov	r0, r3
 8010f08:	370c      	adds	r7, #12
 8010f0a:	46bd      	mov	sp, r7
 8010f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f10:	4770      	bx	lr

08010f12 <_ZNSt10_Head_baseILj1ESt14default_deleteI8ResetPinELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8010f12:	b480      	push	{r7}
 8010f14:	b083      	sub	sp, #12
 8010f16:	af00      	add	r7, sp, #0
 8010f18:	6078      	str	r0, [r7, #4]
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	370c      	adds	r7, #12
 8010f20:	46bd      	mov	sp, r7
 8010f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f26:	4770      	bx	lr

08010f28 <_ZNSt11_Tuple_implILj0EJP8ResetPinSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8010f28:	b580      	push	{r7, lr}
 8010f2a:	b082      	sub	sp, #8
 8010f2c:	af00      	add	r7, sp, #0
 8010f2e:	6078      	str	r0, [r7, #4]
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	4618      	mov	r0, r3
 8010f34:	f000 f82c 	bl	8010f90 <_ZNSt10_Head_baseILj0EP8ResetPinLb0EE7_M_headERKS2_>
 8010f38:	4603      	mov	r3, r0
 8010f3a:	4618      	mov	r0, r3
 8010f3c:	3708      	adds	r7, #8
 8010f3e:	46bd      	mov	sp, r7
 8010f40:	bd80      	pop	{r7, pc}

08010f42 <_ZSt4moveIRSt14default_deleteI8ResetPinEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8010f42:	b480      	push	{r7}
 8010f44:	b083      	sub	sp, #12
 8010f46:	af00      	add	r7, sp, #0
 8010f48:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	370c      	adds	r7, #12
 8010f50:	46bd      	mov	sp, r7
 8010f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f56:	4770      	bx	lr

08010f58 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8010f58:	b580      	push	{r7, lr}
 8010f5a:	b084      	sub	sp, #16
 8010f5c:	af00      	add	r7, sp, #0
 8010f5e:	60f8      	str	r0, [r7, #12]
 8010f60:	60b9      	str	r1, [r7, #8]
 8010f62:	713a      	strb	r2, [r7, #4]
 8010f64:	603b      	str	r3, [r7, #0]
	: _Del_base(std::move(__d)), _Alloc_base(__a), _M_ptr(__p)
 8010f66:	1d3b      	adds	r3, r7, #4
 8010f68:	4618      	mov	r0, r3
 8010f6a:	f7ff ffea 	bl	8010f42 <_ZSt4moveIRSt14default_deleteI8ResetPinEEONSt16remove_referenceIT_E4typeEOS5_>
 8010f6e:	4603      	mov	r3, r0
 8010f70:	4619      	mov	r1, r3
 8010f72:	68f8      	ldr	r0, [r7, #12]
 8010f74:	f000 f817 	bl	8010fa6 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI8ResetPinELb1EEC1EOS2_>
 8010f78:	6839      	ldr	r1, [r7, #0]
 8010f7a:	68f8      	ldr	r0, [r7, #12]
 8010f7c:	f7fd fcf4 	bl	800e968 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EEC1ERKS0_>
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	68ba      	ldr	r2, [r7, #8]
 8010f84:	601a      	str	r2, [r3, #0]
	{ }
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	4618      	mov	r0, r3
 8010f8a:	3710      	adds	r7, #16
 8010f8c:	46bd      	mov	sp, r7
 8010f8e:	bd80      	pop	{r7, pc}

08010f90 <_ZNSt10_Head_baseILj0EP8ResetPinLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8010f90:	b480      	push	{r7}
 8010f92:	b083      	sub	sp, #12
 8010f94:	af00      	add	r7, sp, #0
 8010f96:	6078      	str	r0, [r7, #4]
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	4618      	mov	r0, r3
 8010f9c:	370c      	adds	r7, #12
 8010f9e:	46bd      	mov	sp, r7
 8010fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fa4:	4770      	bx	lr

08010fa6 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI8ResetPinELb1EEC1EOS2_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _Tp(std::move(__tp)) { }
 8010fa6:	b580      	push	{r7, lr}
 8010fa8:	b082      	sub	sp, #8
 8010faa:	af00      	add	r7, sp, #0
 8010fac:	6078      	str	r0, [r7, #4]
 8010fae:	6039      	str	r1, [r7, #0]
 8010fb0:	6838      	ldr	r0, [r7, #0]
 8010fb2:	f7ff ffc6 	bl	8010f42 <_ZSt4moveIRSt14default_deleteI8ResetPinEEONSt16remove_referenceIT_E4typeEOS5_>
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	4618      	mov	r0, r3
 8010fba:	3708      	adds	r7, #8
 8010fbc:	46bd      	mov	sp, r7
 8010fbe:	bd80      	pop	{r7, pc}

08010fc0 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 8010fc0:	b580      	push	{r7, lr}
 8010fc2:	b082      	sub	sp, #8
 8010fc4:	af00      	add	r7, sp, #0
 8010fc6:	6078      	str	r0, [r7, #4]
 8010fc8:	4a05      	ldr	r2, [pc, #20]	@ (8010fe0 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	601a      	str	r2, [r3, #0]
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	4618      	mov	r0, r3
 8010fd2:	f7fa f88d 	bl	800b0f0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	4618      	mov	r0, r3
 8010fda:	3708      	adds	r7, #8
 8010fdc:	46bd      	mov	sp, r7
 8010fde:	bd80      	pop	{r7, pc}
 8010fe0:	08026828 	.word	0x08026828

08010fe4 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 8010fe4:	b580      	push	{r7, lr}
 8010fe6:	b082      	sub	sp, #8
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	6078      	str	r0, [r7, #4]
 8010fec:	6878      	ldr	r0, [r7, #4]
 8010fee:	f7ff ffe7 	bl	8010fc0 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8010ff2:	2110      	movs	r1, #16
 8010ff4:	6878      	ldr	r0, [r7, #4]
 8010ff6:	f012 ff22 	bl	8023e3e <_ZdlPvj>
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	3708      	adds	r7, #8
 8011000:	46bd      	mov	sp, r7
 8011002:	bd80      	pop	{r7, pc}

08011004 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8011004:	b580      	push	{r7, lr}
 8011006:	b082      	sub	sp, #8
 8011008:	af00      	add	r7, sp, #0
 801100a:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	330c      	adds	r3, #12
 8011010:	4618      	mov	r0, r3
 8011012:	f000 f83f 	bl	8011094 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>
 8011016:	4602      	mov	r2, r0
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	68db      	ldr	r3, [r3, #12]
 801101c:	4619      	mov	r1, r3
 801101e:	4610      	mov	r0, r2
 8011020:	f7ff fcdc 	bl	80109dc <_ZNKSt14default_deleteI8ResetPinEclEPS0_>
 8011024:	bf00      	nop
 8011026:	3708      	adds	r7, #8
 8011028:	46bd      	mov	sp, r7
 801102a:	bd80      	pop	{r7, pc}

0801102c <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 801102c:	b580      	push	{r7, lr}
 801102e:	b086      	sub	sp, #24
 8011030:	af00      	add	r7, sp, #0
 8011032:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	330c      	adds	r3, #12
 8011038:	4618      	mov	r0, r3
 801103a:	f000 f837 	bl	80110ac <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 801103e:	4602      	mov	r2, r0
 8011040:	f107 0314 	add.w	r3, r7, #20
 8011044:	4611      	mov	r1, r2
 8011046:	4618      	mov	r0, r3
 8011048:	f000 f83c 	bl	80110c4 <_ZNSaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 801104c:	f107 0114 	add.w	r1, r7, #20
 8011050:	f107 030c 	add.w	r3, r7, #12
 8011054:	687a      	ldr	r2, [r7, #4]
 8011056:	4618      	mov	r0, r3
 8011058:	f000 f841 	bl	80110de <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>
	this->~_Sp_counted_deleter();
 801105c:	6878      	ldr	r0, [r7, #4]
 801105e:	f7ff ffaf 	bl	8010fc0 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 8011062:	f107 030c 	add.w	r3, r7, #12
 8011066:	4618      	mov	r0, r3
 8011068:	f000 f84d 	bl	8011106 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 801106c:	f107 0314 	add.w	r3, r7, #20
 8011070:	4618      	mov	r0, r3
 8011072:	f7ff fdd9 	bl	8010c28 <_ZNSaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8011076:	3718      	adds	r7, #24
 8011078:	46bd      	mov	sp, r7
 801107a:	bd80      	pop	{r7, pc}

0801107c <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const type_info& __ti [[__gnu__::__unused__]]) noexcept
 801107c:	b480      	push	{r7}
 801107e:	b083      	sub	sp, #12
 8011080:	af00      	add	r7, sp, #0
 8011082:	6078      	str	r0, [r7, #4]
 8011084:	6039      	str	r1, [r7, #0]
        return nullptr;
 8011086:	2300      	movs	r3, #0
      }
 8011088:	4618      	mov	r0, r3
 801108a:	370c      	adds	r7, #12
 801108c:	46bd      	mov	sp, r7
 801108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011092:	4770      	bx	lr

08011094 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 8011094:	b580      	push	{r7, lr}
 8011096:	b082      	sub	sp, #8
 8011098:	af00      	add	r7, sp, #0
 801109a:	6078      	str	r0, [r7, #4]
 801109c:	6878      	ldr	r0, [r7, #4]
 801109e:	f000 f847 	bl	8011130 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI8ResetPinELb1EE6_S_getERS3_>
 80110a2:	4603      	mov	r3, r0
 80110a4:	4618      	mov	r0, r3
 80110a6:	3708      	adds	r7, #8
 80110a8:	46bd      	mov	sp, r7
 80110aa:	bd80      	pop	{r7, pc}

080110ac <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 80110ac:	b580      	push	{r7, lr}
 80110ae:	b082      	sub	sp, #8
 80110b0:	af00      	add	r7, sp, #0
 80110b2:	6078      	str	r0, [r7, #4]
 80110b4:	6878      	ldr	r0, [r7, #4]
 80110b6:	f7fd fd26 	bl	800eb06 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EE6_S_getERS1_>
 80110ba:	4603      	mov	r3, r0
 80110bc:	4618      	mov	r0, r3
 80110be:	3708      	adds	r7, #8
 80110c0:	46bd      	mov	sp, r7
 80110c2:	bd80      	pop	{r7, pc}

080110c4 <_ZNSaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 80110c4:	b580      	push	{r7, lr}
 80110c6:	b082      	sub	sp, #8
 80110c8:	af00      	add	r7, sp, #0
 80110ca:	6078      	str	r0, [r7, #4]
 80110cc:	6039      	str	r1, [r7, #0]
 80110ce:	6878      	ldr	r0, [r7, #4]
 80110d0:	f7ff fe2b 	bl	8010d2a <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	4618      	mov	r0, r3
 80110d8:	3708      	adds	r7, #8
 80110da:	46bd      	mov	sp, r7
 80110dc:	bd80      	pop	{r7, pc}

080110de <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 80110de:	b580      	push	{r7, lr}
 80110e0:	b084      	sub	sp, #16
 80110e2:	af00      	add	r7, sp, #0
 80110e4:	60f8      	str	r0, [r7, #12]
 80110e6:	60b9      	str	r1, [r7, #8]
 80110e8:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 80110ea:	68b8      	ldr	r0, [r7, #8]
 80110ec:	f000 f82b 	bl	8011146 <_ZSt11__addressofISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>
 80110f0:	4602      	mov	r2, r0
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	601a      	str	r2, [r3, #0]
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	687a      	ldr	r2, [r7, #4]
 80110fa:	605a      	str	r2, [r3, #4]
      { }
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	4618      	mov	r0, r3
 8011100:	3710      	adds	r7, #16
 8011102:	46bd      	mov	sp, r7
 8011104:	bd80      	pop	{r7, pc}

08011106 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 8011106:	b580      	push	{r7, lr}
 8011108:	b082      	sub	sp, #8
 801110a:	af00      	add	r7, sp, #0
 801110c:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	685b      	ldr	r3, [r3, #4]
 8011112:	2b00      	cmp	r3, #0
 8011114:	d007      	beq.n	8011126 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	6818      	ldr	r0, [r3, #0]
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	685b      	ldr	r3, [r3, #4]
 801111e:	2201      	movs	r2, #1
 8011120:	4619      	mov	r1, r3
 8011122:	f000 f81b 	bl	801115c <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>
      }
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	4618      	mov	r0, r3
 801112a:	3708      	adds	r7, #8
 801112c:	46bd      	mov	sp, r7
 801112e:	bd80      	pop	{r7, pc}

08011130 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI8ResetPinELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 8011130:	b480      	push	{r7}
 8011132:	b083      	sub	sp, #12
 8011134:	af00      	add	r7, sp, #0
 8011136:	6078      	str	r0, [r7, #4]
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	4618      	mov	r0, r3
 801113c:	370c      	adds	r7, #12
 801113e:	46bd      	mov	sp, r7
 8011140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011144:	4770      	bx	lr

08011146 <_ZSt11__addressofISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8011146:	b480      	push	{r7}
 8011148:	b083      	sub	sp, #12
 801114a:	af00      	add	r7, sp, #0
 801114c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	4618      	mov	r0, r3
 8011152:	370c      	adds	r7, #12
 8011154:	46bd      	mov	sp, r7
 8011156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801115a:	4770      	bx	lr

0801115c <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 801115c:	b580      	push	{r7, lr}
 801115e:	b084      	sub	sp, #16
 8011160:	af00      	add	r7, sp, #0
 8011162:	60f8      	str	r0, [r7, #12]
 8011164:	60b9      	str	r1, [r7, #8]
 8011166:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8011168:	687a      	ldr	r2, [r7, #4]
 801116a:	68b9      	ldr	r1, [r7, #8]
 801116c:	68f8      	ldr	r0, [r7, #12]
 801116e:	f000 f804 	bl	801117a <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>
 8011172:	bf00      	nop
 8011174:	3710      	adds	r7, #16
 8011176:	46bd      	mov	sp, r7
 8011178:	bd80      	pop	{r7, pc}

0801117a <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 801117a:	b580      	push	{r7, lr}
 801117c:	b084      	sub	sp, #16
 801117e:	af00      	add	r7, sp, #0
 8011180:	60f8      	str	r0, [r7, #12]
 8011182:	60b9      	str	r1, [r7, #8]
 8011184:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	011b      	lsls	r3, r3, #4
 801118a:	4619      	mov	r1, r3
 801118c:	68b8      	ldr	r0, [r7, #8]
 801118e:	f012 fe56 	bl	8023e3e <_ZdlPvj>
      }
 8011192:	3710      	adds	r7, #16
 8011194:	46bd      	mov	sp, r7
 8011196:	bd80      	pop	{r7, pc}

08011198 <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 8011198:	b580      	push	{r7, lr}
 801119a:	b082      	sub	sp, #8
 801119c:	af00      	add	r7, sp, #0
 801119e:	6078      	str	r0, [r7, #4]
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	3304      	adds	r3, #4
 80111a4:	4618      	mov	r0, r3
 80111a6:	f7f9 fc98 	bl	800aada <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	4618      	mov	r0, r3
 80111ae:	3708      	adds	r7, #8
 80111b0:	46bd      	mov	sp, r7
 80111b2:	bd80      	pop	{r7, pc}

080111b4 <_ZNSt10shared_ptrI10SigmaDeltaED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 80111b4:	b580      	push	{r7, lr}
 80111b6:	b082      	sub	sp, #8
 80111b8:	af00      	add	r7, sp, #0
 80111ba:	6078      	str	r0, [r7, #4]
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	4618      	mov	r0, r3
 80111c0:	f7ff ffea 	bl	8011198 <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	4618      	mov	r0, r3
 80111c8:	3708      	adds	r7, #8
 80111ca:	46bd      	mov	sp, r7
 80111cc:	bd80      	pop	{r7, pc}
	...

080111d0 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>:
#include <cstdio>

#define CONFINE(value, min, max) (((value) < (min)) ? (min) : (((value) > (max)) ? (max) : (value)))
#define PID_SD_MAX 256 // 8-bit resolution

std::shared_ptr<Module> SigmaDelta::create(const JsonObject& config, Remora* instance) {
 80111d0:	b590      	push	{r4, r7, lr}
 80111d2:	b0b1      	sub	sp, #196	@ 0xc4
 80111d4:	af00      	add	r7, sp, #0
 80111d6:	60f8      	str	r0, [r7, #12]
 80111d8:	60b9      	str	r1, [r7, #8]
 80111da:	607a      	str	r2, [r7, #4]
    const char* comment = config["Comment"];
 80111dc:	f107 0320 	add.w	r3, r7, #32
 80111e0:	4a55      	ldr	r2, [pc, #340]	@ (8011338 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x168>)
 80111e2:	68b9      	ldr	r1, [r7, #8]
 80111e4:	4618      	mov	r0, r3
 80111e6:	f7ff faec 	bl	80107c2 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 80111ea:	f107 0320 	add.w	r3, r7, #32
 80111ee:	4618      	mov	r0, r3
 80111f0:	f7f5 faca 	bl	8006788 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 80111f4:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
    printf("%s\n", comment);
 80111f8:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 80111fc:	f013 fc6c 	bl	8024ad8 <puts>

    int spIndex = config["SP[i]"];
 8011200:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8011204:	4a4d      	ldr	r2, [pc, #308]	@ (801133c <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x16c>)
 8011206:	68b9      	ldr	r1, [r7, #8]
 8011208:	4618      	mov	r0, r3
 801120a:	f000 f9bb 	bl	8011584 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA6_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 801120e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8011212:	4618      	mov	r0, r3
 8011214:	f7fc faff 	bl	800d816 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>
 8011218:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
    const char* pin = config["SD Pin"];
 801121c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8011220:	4a47      	ldr	r2, [pc, #284]	@ (8011340 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x170>)
 8011222:	68b9      	ldr	r1, [r7, #8]
 8011224:	4618      	mov	r0, r3
 8011226:	f7f5 fa8a 	bl	800673e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 801122a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 801122e:	4618      	mov	r0, r3
 8011230:	f7f5 faaa 	bl	8006788 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8011234:	4603      	mov	r3, r0
 8011236:	61fb      	str	r3, [r7, #28]

    // Get pointer to the setpoint from the Remora instance
    volatile float* ptrSP = &instance->getRxData()->setPoint[spIndex];
 8011238:	6878      	ldr	r0, [r7, #4]
 801123a:	f7fe f915 	bl	800f468 <_ZN6Remora9getRxDataEv>
 801123e:	4602      	mov	r2, r0
 8011240:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8011244:	3308      	adds	r3, #8
 8011246:	009b      	lsls	r3, r3, #2
 8011248:	4413      	add	r3, r2
 801124a:	3304      	adds	r3, #4
 801124c:	61bb      	str	r3, [r7, #24]

    printf("Creating SigmaDelta module: Pin=%s, SP Index=%d\n", pin, spIndex);
 801124e:	69fb      	ldr	r3, [r7, #28]
 8011250:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8011254:	4619      	mov	r1, r3
 8011256:	483b      	ldr	r0, [pc, #236]	@ (8011344 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x174>)
 8011258:	f013 fbce 	bl	80249f8 <iprintf>

    // Check if "SD Max" exists in the config
    if (config["SD Max"].is<int>()) {
 801125c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8011260:	4a39      	ldr	r2, [pc, #228]	@ (8011348 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x178>)
 8011262:	68b9      	ldr	r1, [r7, #8]
 8011264:	4618      	mov	r0, r3
 8011266:	f7f5 fa6a 	bl	800673e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 801126a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 801126e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8011272:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011276:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 801127a:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 801127e:	f7f6 fb04 	bl	800788a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 8011282:	4604      	mov	r4, r0
 8011284:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8011288:	f7f6 f98d 	bl	80075a6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 801128c:	4602      	mov	r2, r0
 801128e:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8011292:	4621      	mov	r1, r4
 8011294:	4618      	mov	r0, r3
 8011296:	f7f3 fa28 	bl	80046ea <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 801129a:	bf00      	nop
template <typename TDerived>
template <typename T>
inline bool VariantRefBase<TDerived>::is() const {
  using variant_type =  // JsonVariantConst or JsonVariant?
      typename function_traits<decltype(&Converter<T>::checkJson)>::arg1_type;
  return Converter<T>::checkJson(getVariant<variant_type>());
 801129c:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80112a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80112a4:	f000 f9f4 	bl	8011690 <_ZN11ArduinoJson8V730HB229ConverterIivE9checkJsonENS0_16JsonVariantConstE>
 80112a8:	4603      	mov	r3, r0
 80112aa:	bf00      	nop
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d028      	beq.n	8011302 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x132>
        int SDmax = config["SD Max"];
 80112b0:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80112b4:	4a24      	ldr	r2, [pc, #144]	@ (8011348 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x178>)
 80112b6:	68b9      	ldr	r1, [r7, #8]
 80112b8:	4618      	mov	r0, r3
 80112ba:	f7f5 fa40 	bl	800673e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 80112be:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80112c2:	4618      	mov	r0, r3
 80112c4:	f7fc faa7 	bl	800d816 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>
 80112c8:	4603      	mov	r3, r0
 80112ca:	617b      	str	r3, [r7, #20]
        printf("Using SD Max=%d\n", SDmax);
 80112cc:	697b      	ldr	r3, [r7, #20]
 80112ce:	4619      	mov	r1, r3
 80112d0:	481e      	ldr	r0, [pc, #120]	@ (801134c <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x17c>)
 80112d2:	f013 fb91 	bl	80249f8 <iprintf>
        return std::make_shared<SigmaDelta>(pin, ptrSP, SDmax);
 80112d6:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 80112da:	f107 0314 	add.w	r3, r7, #20
 80112de:	f107 0218 	add.w	r2, r7, #24
 80112e2:	f107 011c 	add.w	r1, r7, #28
 80112e6:	f000 f972 	bl	80115ce <_ZSt11make_sharedI10SigmaDeltaJRPKcRPVfRiEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESB_E4typeEEDpOT0_>
 80112ea:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80112ee:	4619      	mov	r1, r3
 80112f0:	68f8      	ldr	r0, [r7, #12]
 80112f2:	f000 f98d 	bl	8011610 <_ZNSt10shared_ptrI6ModuleEC1I10SigmaDeltavEEOS_IT_E>
 80112f6:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80112fa:	4618      	mov	r0, r3
 80112fc:	f7ff ff5a 	bl	80111b4 <_ZNSt10shared_ptrI10SigmaDeltaED1Ev>
    } else {
        printf("Using default SD Max\n");
        return std::make_shared<SigmaDelta>(pin, ptrSP);
    }
}
 8011300:	e016      	b.n	8011330 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x160>
        printf("Using default SD Max\n");
 8011302:	4813      	ldr	r0, [pc, #76]	@ (8011350 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x180>)
 8011304:	f013 fbe8 	bl	8024ad8 <puts>
        return std::make_shared<SigmaDelta>(pin, ptrSP);
 8011308:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 801130c:	f107 0218 	add.w	r2, r7, #24
 8011310:	f107 011c 	add.w	r1, r7, #28
 8011314:	4618      	mov	r0, r3
 8011316:	f000 f98e 	bl	8011636 <_ZSt11make_sharedI10SigmaDeltaJRPKcRPVfEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESA_E4typeEEDpOT0_>
 801131a:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 801131e:	4619      	mov	r1, r3
 8011320:	68f8      	ldr	r0, [r7, #12]
 8011322:	f000 f975 	bl	8011610 <_ZNSt10shared_ptrI6ModuleEC1I10SigmaDeltavEEOS_IT_E>
 8011326:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 801132a:	4618      	mov	r0, r3
 801132c:	f7ff ff42 	bl	80111b4 <_ZNSt10shared_ptrI10SigmaDeltaED1Ev>
}
 8011330:	68f8      	ldr	r0, [r7, #12]
 8011332:	37c4      	adds	r7, #196	@ 0xc4
 8011334:	46bd      	mov	sp, r7
 8011336:	bd90      	pop	{r4, r7, pc}
 8011338:	0802605c 	.word	0x0802605c
 801133c:	08026064 	.word	0x08026064
 8011340:	0802606c 	.word	0x0802606c
 8011344:	08026074 	.word	0x08026074
 8011348:	080260a8 	.word	0x080260a8
 801134c:	080260b0 	.word	0x080260b0
 8011350:	080260c4 	.word	0x080260c4

08011354 <_ZN10SigmaDeltaC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPVf>:

SigmaDelta::SigmaDelta(const std::string& pin, volatile float* ptrSP) :
 8011354:	b590      	push	{r4, r7, lr}
 8011356:	b085      	sub	sp, #20
 8011358:	af00      	add	r7, sp, #0
 801135a:	60f8      	str	r0, [r7, #12]
 801135c:	60b9      	str	r1, [r7, #8]
 801135e:	607a      	str	r2, [r7, #4]
    SDmax(PID_SD_MAX - 1),
    setPoint(0),
    SDaccumulator(0),
    SDdirection(false),
    SDpin(new Pin(pin, OUTPUT)),
    ptrSP(ptrSP) {}
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	4618      	mov	r0, r3
 8011364:	f7fe ffc6 	bl	80102f4 <_ZN6ModuleC1Ev>
 8011368:	4a14      	ldr	r2, [pc, #80]	@ (80113bc <_ZN10SigmaDeltaC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPVf+0x68>)
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	601a      	str	r2, [r3, #0]
    pin(pin),
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	3318      	adds	r3, #24
 8011372:	68b9      	ldr	r1, [r7, #8]
 8011374:	4618      	mov	r0, r3
 8011376:	f012 ffa0 	bl	80242ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
    SDmax(PID_SD_MAX - 1),
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	22ff      	movs	r2, #255	@ 0xff
 801137e:	631a      	str	r2, [r3, #48]	@ 0x30
    setPoint(0),
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	2200      	movs	r2, #0
 8011384:	635a      	str	r2, [r3, #52]	@ 0x34
    SDaccumulator(0),
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	2200      	movs	r2, #0
 801138a:	639a      	str	r2, [r3, #56]	@ 0x38
    SDdirection(false),
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	2200      	movs	r2, #0
 8011390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    SDpin(new Pin(pin, OUTPUT)),
 8011394:	2040      	movs	r0, #64	@ 0x40
 8011396:	f012 fd63 	bl	8023e60 <_Znwj>
 801139a:	4603      	mov	r3, r0
 801139c:	461c      	mov	r4, r3
 801139e:	2201      	movs	r2, #1
 80113a0:	68b9      	ldr	r1, [r7, #8]
 80113a2:	4620      	mov	r0, r4
 80113a4:	f7f2 fa28 	bl	80037f8 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	641c      	str	r4, [r3, #64]	@ 0x40
    ptrSP(ptrSP) {}
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	687a      	ldr	r2, [r7, #4]
 80113b0:	645a      	str	r2, [r3, #68]	@ 0x44
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	4618      	mov	r0, r3
 80113b6:	3714      	adds	r7, #20
 80113b8:	46bd      	mov	sp, r7
 80113ba:	bd90      	pop	{r4, r7, pc}
 80113bc:	08026884 	.word	0x08026884

080113c0 <_ZN10SigmaDeltaC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPVfi>:

SigmaDelta::SigmaDelta(const std::string& pin, volatile float* ptrSP, int SDmax) :
 80113c0:	b590      	push	{r4, r7, lr}
 80113c2:	b085      	sub	sp, #20
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	60f8      	str	r0, [r7, #12]
 80113c8:	60b9      	str	r1, [r7, #8]
 80113ca:	607a      	str	r2, [r7, #4]
 80113cc:	603b      	str	r3, [r7, #0]
    SDmax(CONFINE(SDmax, 0, PID_SD_MAX - 1)),
    setPoint(0),
    SDaccumulator(0),
    SDdirection(false),
    SDpin(new Pin(pin, OUTPUT)),
    ptrSP(ptrSP) {}
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	4618      	mov	r0, r3
 80113d2:	f7fe ff8f 	bl	80102f4 <_ZN6ModuleC1Ev>
 80113d6:	4a19      	ldr	r2, [pc, #100]	@ (801143c <_ZN10SigmaDeltaC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPVfi+0x7c>)
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	601a      	str	r2, [r3, #0]
    pin(pin),
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	3318      	adds	r3, #24
 80113e0:	68b9      	ldr	r1, [r7, #8]
 80113e2:	4618      	mov	r0, r3
 80113e4:	f012 ff69 	bl	80242ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
    SDmax(CONFINE(SDmax, 0, PID_SD_MAX - 1)),
 80113e8:	683b      	ldr	r3, [r7, #0]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	db04      	blt.n	80113f8 <_ZN10SigmaDeltaC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPVfi+0x38>
 80113ee:	683b      	ldr	r3, [r7, #0]
 80113f0:	2bff      	cmp	r3, #255	@ 0xff
 80113f2:	bfa8      	it	ge
 80113f4:	23ff      	movge	r3, #255	@ 0xff
 80113f6:	e000      	b.n	80113fa <_ZN10SigmaDeltaC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPVfi+0x3a>
 80113f8:	2300      	movs	r3, #0
 80113fa:	68fa      	ldr	r2, [r7, #12]
 80113fc:	6313      	str	r3, [r2, #48]	@ 0x30
    setPoint(0),
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	2200      	movs	r2, #0
 8011402:	635a      	str	r2, [r3, #52]	@ 0x34
    SDaccumulator(0),
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	2200      	movs	r2, #0
 8011408:	639a      	str	r2, [r3, #56]	@ 0x38
    SDdirection(false),
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	2200      	movs	r2, #0
 801140e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    SDpin(new Pin(pin, OUTPUT)),
 8011412:	2040      	movs	r0, #64	@ 0x40
 8011414:	f012 fd24 	bl	8023e60 <_Znwj>
 8011418:	4603      	mov	r3, r0
 801141a:	461c      	mov	r4, r3
 801141c:	2201      	movs	r2, #1
 801141e:	68b9      	ldr	r1, [r7, #8]
 8011420:	4620      	mov	r0, r4
 8011422:	f7f2 f9e9 	bl	80037f8 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	641c      	str	r4, [r3, #64]	@ 0x40
    ptrSP(ptrSP) {}
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	687a      	ldr	r2, [r7, #4]
 801142e:	645a      	str	r2, [r3, #68]	@ 0x44
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	4618      	mov	r0, r3
 8011434:	3714      	adds	r7, #20
 8011436:	46bd      	mov	sp, r7
 8011438:	bd90      	pop	{r4, r7, pc}
 801143a:	bf00      	nop
 801143c:	08026884 	.word	0x08026884

08011440 <_ZN10SigmaDelta6updateEv>:
    newSdSP = CONFINE(newSdSP, 0, 100);
    // Scale the percentage to fit within the range of PID_SD_MAX
    this->setPoint = (newSdSP * (PID_SD_MAX - 1)) / 100;
}

void SigmaDelta::update() {
 8011440:	b580      	push	{r7, lr}
 8011442:	b084      	sub	sp, #16
 8011444:	af00      	add	r7, sp, #0
 8011446:	6078      	str	r0, [r7, #4]
    // Read set point from the data source
    float newSP = *ptrSP;
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	60fb      	str	r3, [r7, #12]

    // Scale from 0-100% to 0-SDmax
    int scaledSP = static_cast<int>((newSP / 100.0f) * SDmax);
 8011450:	edd7 7a03 	vldr	s15, [r7, #12]
 8011454:	eddf 6a45 	vldr	s13, [pc, #276]	@ 801156c <_ZN10SigmaDelta6updateEv+0x12c>
 8011458:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011460:	ee07 3a90 	vmov	s15, r3
 8011464:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011468:	ee67 7a27 	vmul.f32	s15, s14, s15
 801146c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011470:	ee17 3a90 	vmov	r3, s15
 8011474:	60bb      	str	r3, [r7, #8]

    // Check if the setpoint has changed
    if (scaledSP != setPoint) {
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801147a:	68ba      	ldr	r2, [r7, #8]
 801147c:	429a      	cmp	r2, r3
 801147e:	d00f      	beq.n	80114a0 <_ZN10SigmaDelta6updateEv+0x60>
        setPoint = CONFINE(scaledSP, 0, SDmax);
 8011480:	68bb      	ldr	r3, [r7, #8]
 8011482:	2b00      	cmp	r3, #0
 8011484:	db09      	blt.n	801149a <_ZN10SigmaDelta6updateEv+0x5a>
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801148a:	68ba      	ldr	r2, [r7, #8]
 801148c:	429a      	cmp	r2, r3
 801148e:	dd02      	ble.n	8011496 <_ZN10SigmaDelta6updateEv+0x56>
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011494:	e002      	b.n	801149c <_ZN10SigmaDelta6updateEv+0x5c>
 8011496:	68bb      	ldr	r3, [r7, #8]
 8011498:	e000      	b.n	801149c <_ZN10SigmaDelta6updateEv+0x5c>
 801149a:	2300      	movs	r3, #0
 801149c:	687a      	ldr	r2, [r7, #4]
 801149e:	6353      	str	r3, [r2, #52]	@ 0x34
    }

    // Sigma-Delta modulation logic
    if (setPoint <= 0) {
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	dc06      	bgt.n	80114b6 <_ZN10SigmaDelta6updateEv+0x76>
        SDpin->set(false);
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80114ac:	2100      	movs	r1, #0
 80114ae:	4618      	mov	r0, r3
 80114b0:	f7f2 fb4c 	bl	8003b4c <_ZN3Pin3setEb>
        return;
 80114b4:	e057      	b.n	8011566 <_ZN10SigmaDelta6updateEv+0x126>
    } else if (setPoint >= SDmax) {
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80114be:	429a      	cmp	r2, r3
 80114c0:	db06      	blt.n	80114d0 <_ZN10SigmaDelta6updateEv+0x90>
        SDpin->set(true);
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80114c6:	2101      	movs	r1, #1
 80114c8:	4618      	mov	r0, r3
 80114ca:	f7f2 fb3f 	bl	8003b4c <_ZN3Pin3setEb>
        return;
 80114ce:	e04a      	b.n	8011566 <_ZN10SigmaDelta6updateEv+0x126>
    }

    SDaccumulator = CONFINE(SDaccumulator, -SDmax, SDmax << 1);
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80114d8:	425b      	negs	r3, r3
 80114da:	429a      	cmp	r2, r3
 80114dc:	da03      	bge.n	80114e6 <_ZN10SigmaDelta6updateEv+0xa6>
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80114e2:	425b      	negs	r3, r3
 80114e4:	e007      	b.n	80114f6 <_ZN10SigmaDelta6updateEv+0xb6>
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80114ee:	005b      	lsls	r3, r3, #1
 80114f0:	4293      	cmp	r3, r2
 80114f2:	bfa8      	it	ge
 80114f4:	4613      	movge	r3, r2
 80114f6:	687a      	ldr	r2, [r7, #4]
 80114f8:	6393      	str	r3, [r2, #56]	@ 0x38

    if (!SDdirection) {
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011500:	f083 0301 	eor.w	r3, r3, #1
 8011504:	b2db      	uxtb	r3, r3
 8011506:	2b00      	cmp	r3, #0
 8011508:	d012      	beq.n	8011530 <_ZN10SigmaDelta6updateEv+0xf0>
        SDaccumulator += setPoint;
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011512:	441a      	add	r2, r3
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	639a      	str	r2, [r3, #56]	@ 0x38
        if (SDaccumulator >= (SDmax >> 1)) {
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011520:	105b      	asrs	r3, r3, #1
 8011522:	429a      	cmp	r2, r3
 8011524:	db16      	blt.n	8011554 <_ZN10SigmaDelta6updateEv+0x114>
            SDdirection = true;
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	2201      	movs	r2, #1
 801152a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 801152e:	e011      	b.n	8011554 <_ZN10SigmaDelta6updateEv+0x114>
        }
    } else {
        SDaccumulator -= (SDmax - setPoint);
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801153c:	1acb      	subs	r3, r1, r3
 801153e:	1ad2      	subs	r2, r2, r3
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	639a      	str	r2, [r3, #56]	@ 0x38
        if (SDaccumulator <= 0) {
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011548:	2b00      	cmp	r3, #0
 801154a:	dc03      	bgt.n	8011554 <_ZN10SigmaDelta6updateEv+0x114>
            SDdirection = false;
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	2200      	movs	r2, #0
 8011550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        }
    }

    SDpin->set(SDdirection);
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801155e:	4619      	mov	r1, r3
 8011560:	4610      	mov	r0, r2
 8011562:	f7f2 faf3 	bl	8003b4c <_ZN3Pin3setEb>
}
 8011566:	3710      	adds	r7, #16
 8011568:	46bd      	mov	sp, r7
 801156a:	bd80      	pop	{r7, pc}
 801156c:	42c80000 	.word	0x42c80000

08011570 <_ZN10SigmaDelta10slowUpdateEv>:

void SigmaDelta::slowUpdate() {}
 8011570:	b480      	push	{r7}
 8011572:	b083      	sub	sp, #12
 8011574:	af00      	add	r7, sp, #0
 8011576:	6078      	str	r0, [r7, #4]
 8011578:	bf00      	nop
 801157a:	370c      	adds	r7, #12
 801157c:	46bd      	mov	sp, r7
 801157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011582:	4770      	bx	lr

08011584 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA6_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:

  // Gets or sets the member with specified key.
  // https://arduinojson.org/v7/api/jsonobject/subscript/
  template <typename TString,
            detail::enable_if_t<detail::IsString<TString>::value, int> = 0>
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 8011584:	b580      	push	{r7, lr}
 8011586:	b08c      	sub	sp, #48	@ 0x30
 8011588:	af02      	add	r7, sp, #8
 801158a:	60f8      	str	r0, [r7, #12]
 801158c:	60b9      	str	r1, [r7, #8]
 801158e:	607a      	str	r2, [r7, #4]
      const TString& key) const {
    return {*this, detail::adaptString(key)};
 8011590:	68ba      	ldr	r2, [r7, #8]
 8011592:	f107 0314 	add.w	r3, r7, #20
 8011596:	e892 0003 	ldmia.w	r2, {r0, r1}
 801159a:	e883 0003 	stmia.w	r3, {r0, r1}
 801159e:	f107 031c 	add.w	r3, r7, #28
 80115a2:	6879      	ldr	r1, [r7, #4]
 80115a4:	4618      	mov	r0, r3
 80115a6:	f000 f860 	bl	801166a <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA6_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 80115aa:	466a      	mov	r2, sp
 80115ac:	f107 0320 	add.w	r3, r7, #32
 80115b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80115b4:	e882 0003 	stmia.w	r2, {r0, r1}
 80115b8:	69fb      	ldr	r3, [r7, #28]
 80115ba:	f107 0214 	add.w	r2, r7, #20
 80115be:	ca06      	ldmia	r2, {r1, r2}
 80115c0:	68f8      	ldr	r0, [r7, #12]
 80115c2:	f7f5 fa50 	bl	8006a66 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 80115c6:	68f8      	ldr	r0, [r7, #12]
 80115c8:	3728      	adds	r7, #40	@ 0x28
 80115ca:	46bd      	mov	sp, r7
 80115cc:	bd80      	pop	{r7, pc}

080115ce <_ZSt11make_sharedI10SigmaDeltaJRPKcRPVfRiEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESB_E4typeEEDpOT0_>:
    make_shared(_Args&&... __args)
 80115ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80115d0:	b089      	sub	sp, #36	@ 0x24
 80115d2:	af02      	add	r7, sp, #8
 80115d4:	60f8      	str	r0, [r7, #12]
 80115d6:	60b9      	str	r1, [r7, #8]
 80115d8:	607a      	str	r2, [r7, #4]
 80115da:	603b      	str	r3, [r7, #0]
			     std::forward<_Args>(__args)...);
 80115dc:	f107 0314 	add.w	r3, r7, #20
 80115e0:	461e      	mov	r6, r3
 80115e2:	68b8      	ldr	r0, [r7, #8]
 80115e4:	f7fc fa4d 	bl	800da82 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 80115e8:	4604      	mov	r4, r0
 80115ea:	6878      	ldr	r0, [r7, #4]
 80115ec:	f000 f871 	bl	80116d2 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 80115f0:	4605      	mov	r5, r0
 80115f2:	6838      	ldr	r0, [r7, #0]
 80115f4:	f7fc fa50 	bl	800da98 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 80115f8:	4603      	mov	r3, r0
 80115fa:	9300      	str	r3, [sp, #0]
 80115fc:	462b      	mov	r3, r5
 80115fe:	4622      	mov	r2, r4
 8011600:	4631      	mov	r1, r6
 8011602:	68f8      	ldr	r0, [r7, #12]
 8011604:	f000 f870 	bl	80116e8 <_ZNSt10shared_ptrI10SigmaDeltaEC1ISaIvEJRPKcRPVfRiEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
    }
 8011608:	68f8      	ldr	r0, [r7, #12]
 801160a:	371c      	adds	r7, #28
 801160c:	46bd      	mov	sp, r7
 801160e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011610 <_ZNSt10shared_ptrI6ModuleEC1I10SigmaDeltavEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 8011610:	b590      	push	{r4, r7, lr}
 8011612:	b083      	sub	sp, #12
 8011614:	af00      	add	r7, sp, #0
 8011616:	6078      	str	r0, [r7, #4]
 8011618:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 801161a:	687c      	ldr	r4, [r7, #4]
 801161c:	6838      	ldr	r0, [r7, #0]
 801161e:	f000 f883 	bl	8011728 <_ZSt4moveIRSt10shared_ptrI10SigmaDeltaEEONSt16remove_referenceIT_E4typeEOS5_>
 8011622:	4603      	mov	r3, r0
 8011624:	4619      	mov	r1, r3
 8011626:	4620      	mov	r0, r4
 8011628:	f000 f889 	bl	801173e <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I10SigmaDeltavEEOS_IT_LS2_0EE>
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	4618      	mov	r0, r3
 8011630:	370c      	adds	r7, #12
 8011632:	46bd      	mov	sp, r7
 8011634:	bd90      	pop	{r4, r7, pc}

08011636 <_ZSt11make_sharedI10SigmaDeltaJRPKcRPVfEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESA_E4typeEEDpOT0_>:
    make_shared(_Args&&... __args)
 8011636:	b5b0      	push	{r4, r5, r7, lr}
 8011638:	b086      	sub	sp, #24
 801163a:	af00      	add	r7, sp, #0
 801163c:	60f8      	str	r0, [r7, #12]
 801163e:	60b9      	str	r1, [r7, #8]
 8011640:	607a      	str	r2, [r7, #4]
			     std::forward<_Args>(__args)...);
 8011642:	f107 0314 	add.w	r3, r7, #20
 8011646:	461d      	mov	r5, r3
 8011648:	68b8      	ldr	r0, [r7, #8]
 801164a:	f7fc fa1a 	bl	800da82 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 801164e:	4604      	mov	r4, r0
 8011650:	6878      	ldr	r0, [r7, #4]
 8011652:	f000 f83e 	bl	80116d2 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 8011656:	4603      	mov	r3, r0
 8011658:	4622      	mov	r2, r4
 801165a:	4629      	mov	r1, r5
 801165c:	68f8      	ldr	r0, [r7, #12]
 801165e:	f000 f88c 	bl	801177a <_ZNSt10shared_ptrI10SigmaDeltaEC1ISaIvEJRPKcRPVfEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
    }
 8011662:	68f8      	ldr	r0, [r7, #12]
 8011664:	3718      	adds	r7, #24
 8011666:	46bd      	mov	sp, r7
 8011668:	bdb0      	pop	{r4, r5, r7, pc}

0801166a <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA6_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 801166a:	b580      	push	{r7, lr}
 801166c:	b082      	sub	sp, #8
 801166e:	af00      	add	r7, sp, #0
 8011670:	6078      	str	r0, [r7, #4]
 8011672:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8011674:	6838      	ldr	r0, [r7, #0]
 8011676:	f000 f89a 	bl	80117ae <_ZN11ArduinoJson8V730HB226detail7forwardIRA6_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 801167a:	4602      	mov	r2, r0
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	4611      	mov	r1, r2
 8011680:	4618      	mov	r0, r3
 8011682:	f000 f89f 	bl	80117c4 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA6_KcvE5adaptES5_>
 8011686:	bf00      	nop
}
 8011688:	6878      	ldr	r0, [r7, #4]
 801168a:	3708      	adds	r7, #8
 801168c:	46bd      	mov	sp, r7
 801168e:	bd80      	pop	{r7, pc}

08011690 <_ZN11ArduinoJson8V730HB229ConverterIivE9checkJsonENS0_16JsonVariantConstE>:
    auto data = getData(src);
    auto resources = getResourceManager(src);
    return data ? data->template asIntegral<T>(resources) : T();
  }

  static bool checkJson(JsonVariantConst src) {
 8011690:	b580      	push	{r7, lr}
 8011692:	b084      	sub	sp, #16
 8011694:	af00      	add	r7, sp, #0
 8011696:	463b      	mov	r3, r7
 8011698:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 801169c:	463b      	mov	r3, r7
 801169e:	4618      	mov	r0, r3
 80116a0:	f7f4 fda2 	bl	80061e8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 80116a4:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 80116a6:	463b      	mov	r3, r7
 80116a8:	4618      	mov	r0, r3
 80116aa:	f7f4 fda9 	bl	8006200 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 80116ae:	60b8      	str	r0, [r7, #8]
    return data && data->template isInteger<T>(resources);
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d008      	beq.n	80116c8 <_ZN11ArduinoJson8V730HB229ConverterIivE9checkJsonENS0_16JsonVariantConstE+0x38>
 80116b6:	68b9      	ldr	r1, [r7, #8]
 80116b8:	68f8      	ldr	r0, [r7, #12]
 80116ba:	f000 f893 	bl	80117e4 <_ZNK11ArduinoJson8V730HB226detail11VariantData9isIntegerIiEEbPKNS1_15ResourceManagerE>
 80116be:	4603      	mov	r3, r0
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d001      	beq.n	80116c8 <_ZN11ArduinoJson8V730HB229ConverterIivE9checkJsonENS0_16JsonVariantConstE+0x38>
 80116c4:	2301      	movs	r3, #1
 80116c6:	e000      	b.n	80116ca <_ZN11ArduinoJson8V730HB229ConverterIivE9checkJsonENS0_16JsonVariantConstE+0x3a>
 80116c8:	2300      	movs	r3, #0
  }
 80116ca:	4618      	mov	r0, r3
 80116cc:	3710      	adds	r7, #16
 80116ce:	46bd      	mov	sp, r7
 80116d0:	bd80      	pop	{r7, pc}

080116d2 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80116d2:	b480      	push	{r7}
 80116d4:	b083      	sub	sp, #12
 80116d6:	af00      	add	r7, sp, #0
 80116d8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	4618      	mov	r0, r3
 80116de:	370c      	adds	r7, #12
 80116e0:	46bd      	mov	sp, r7
 80116e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116e6:	4770      	bx	lr

080116e8 <_ZNSt10shared_ptrI10SigmaDeltaEC1ISaIvEJRPKcRPVfRiEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 80116e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80116ea:	b087      	sub	sp, #28
 80116ec:	af02      	add	r7, sp, #8
 80116ee:	60f8      	str	r0, [r7, #12]
 80116f0:	60b9      	str	r1, [r7, #8]
 80116f2:	607a      	str	r2, [r7, #4]
 80116f4:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 80116f6:	68fc      	ldr	r4, [r7, #12]
 80116f8:	6878      	ldr	r0, [r7, #4]
 80116fa:	f7fc f9c2 	bl	800da82 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 80116fe:	4605      	mov	r5, r0
 8011700:	6838      	ldr	r0, [r7, #0]
 8011702:	f7ff ffe6 	bl	80116d2 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 8011706:	4606      	mov	r6, r0
 8011708:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801170a:	f7fc f9c5 	bl	800da98 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 801170e:	4603      	mov	r3, r0
 8011710:	9300      	str	r3, [sp, #0]
 8011712:	4633      	mov	r3, r6
 8011714:	462a      	mov	r2, r5
 8011716:	68b9      	ldr	r1, [r7, #8]
 8011718:	4620      	mov	r0, r4
 801171a:	f000 f8c1 	bl	80118a0 <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJRPKcRPVfRiEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
	{ }
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	4618      	mov	r0, r3
 8011722:	3714      	adds	r7, #20
 8011724:	46bd      	mov	sp, r7
 8011726:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011728 <_ZSt4moveIRSt10shared_ptrI10SigmaDeltaEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8011728:	b480      	push	{r7}
 801172a:	b083      	sub	sp, #12
 801172c:	af00      	add	r7, sp, #0
 801172e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	4618      	mov	r0, r3
 8011734:	370c      	adds	r7, #12
 8011736:	46bd      	mov	sp, r7
 8011738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801173c:	4770      	bx	lr

0801173e <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I10SigmaDeltavEEOS_IT_LS2_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 801173e:	b580      	push	{r7, lr}
 8011740:	b082      	sub	sp, #8
 8011742:	af00      	add	r7, sp, #0
 8011744:	6078      	str	r0, [r7, #4]
 8011746:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 8011748:	683b      	ldr	r3, [r7, #0]
 801174a:	681a      	ldr	r2, [r3, #0]
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	601a      	str	r2, [r3, #0]
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	3304      	adds	r3, #4
 8011754:	4618      	mov	r0, r3
 8011756:	f7fa f9f0 	bl	800bb3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	1d1a      	adds	r2, r3, #4
 801175e:	683b      	ldr	r3, [r7, #0]
 8011760:	3304      	adds	r3, #4
 8011762:	4619      	mov	r1, r3
 8011764:	4610      	mov	r0, r2
 8011766:	f7fa fcfc 	bl	800c162 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = nullptr;
 801176a:	683b      	ldr	r3, [r7, #0]
 801176c:	2200      	movs	r2, #0
 801176e:	601a      	str	r2, [r3, #0]
	}
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	4618      	mov	r0, r3
 8011774:	3708      	adds	r7, #8
 8011776:	46bd      	mov	sp, r7
 8011778:	bd80      	pop	{r7, pc}

0801177a <_ZNSt10shared_ptrI10SigmaDeltaEC1ISaIvEJRPKcRPVfEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 801177a:	b5b0      	push	{r4, r5, r7, lr}
 801177c:	b084      	sub	sp, #16
 801177e:	af00      	add	r7, sp, #0
 8011780:	60f8      	str	r0, [r7, #12]
 8011782:	60b9      	str	r1, [r7, #8]
 8011784:	607a      	str	r2, [r7, #4]
 8011786:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 8011788:	68fc      	ldr	r4, [r7, #12]
 801178a:	6878      	ldr	r0, [r7, #4]
 801178c:	f7fc f979 	bl	800da82 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8011790:	4605      	mov	r5, r0
 8011792:	6838      	ldr	r0, [r7, #0]
 8011794:	f7ff ff9d 	bl	80116d2 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 8011798:	4603      	mov	r3, r0
 801179a:	462a      	mov	r2, r5
 801179c:	68b9      	ldr	r1, [r7, #8]
 801179e:	4620      	mov	r0, r4
 80117a0:	f000 f8ac 	bl	80118fc <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJRPKcRPVfEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
	{ }
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	4618      	mov	r0, r3
 80117a8:	3710      	adds	r7, #16
 80117aa:	46bd      	mov	sp, r7
 80117ac:	bdb0      	pop	{r4, r5, r7, pc}

080117ae <_ZN11ArduinoJson8V730HB226detail7forwardIRA6_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 80117ae:	b480      	push	{r7}
 80117b0:	b083      	sub	sp, #12
 80117b2:	af00      	add	r7, sp, #0
 80117b4:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 80117b6:	687b      	ldr	r3, [r7, #4]
}
 80117b8:	4618      	mov	r0, r3
 80117ba:	370c      	adds	r7, #12
 80117bc:	46bd      	mov	sp, r7
 80117be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c2:	4770      	bx	lr

080117c4 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA6_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 80117c4:	b580      	push	{r7, lr}
 80117c6:	b082      	sub	sp, #8
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	6078      	str	r0, [r7, #4]
 80117cc:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 80117ce:	2301      	movs	r3, #1
 80117d0:	2205      	movs	r2, #5
 80117d2:	6839      	ldr	r1, [r7, #0]
 80117d4:	6878      	ldr	r0, [r7, #4]
 80117d6:	f7f2 fbc1 	bl	8003f5c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 80117da:	6878      	ldr	r0, [r7, #4]
 80117dc:	3708      	adds	r7, #8
 80117de:	46bd      	mov	sp, r7
 80117e0:	bd80      	pop	{r7, pc}
	...

080117e4 <_ZNK11ArduinoJson8V730HB226detail11VariantData9isIntegerIiEEbPKNS1_15ResourceManagerE>:
  bool isInteger(const ResourceManager* resources) const {
 80117e4:	b580      	push	{r7, lr}
 80117e6:	b084      	sub	sp, #16
 80117e8:	af00      	add	r7, sp, #0
 80117ea:	6078      	str	r0, [r7, #4]
 80117ec:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 80117ee:	6839      	ldr	r1, [r7, #0]
 80117f0:	6878      	ldr	r0, [r7, #4]
 80117f2:	f7f3 fd0f 	bl	8005214 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 80117f6:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	791b      	ldrb	r3, [r3, #4]
 80117fc:	3b0a      	subs	r3, #10
 80117fe:	2b12      	cmp	r3, #18
 8011800:	d848      	bhi.n	8011894 <_ZNK11ArduinoJson8V730HB226detail11VariantData9isIntegerIiEEbPKNS1_15ResourceManagerE+0xb0>
 8011802:	a201      	add	r2, pc, #4	@ (adr r2, 8011808 <_ZNK11ArduinoJson8V730HB226detail11VariantData9isIntegerIiEEbPKNS1_15ResourceManagerE+0x24>)
 8011804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011808:	08011855 	.word	0x08011855
 801180c:	08011895 	.word	0x08011895
 8011810:	08011863 	.word	0x08011863
 8011814:	08011895 	.word	0x08011895
 8011818:	08011895 	.word	0x08011895
 801181c:	08011895 	.word	0x08011895
 8011820:	08011895 	.word	0x08011895
 8011824:	08011895 	.word	0x08011895
 8011828:	08011895 	.word	0x08011895
 801182c:	08011895 	.word	0x08011895
 8011830:	08011895 	.word	0x08011895
 8011834:	08011895 	.word	0x08011895
 8011838:	08011895 	.word	0x08011895
 801183c:	08011895 	.word	0x08011895
 8011840:	08011895 	.word	0x08011895
 8011844:	08011895 	.word	0x08011895
 8011848:	08011871 	.word	0x08011871
 801184c:	08011895 	.word	0x08011895
 8011850:	08011883 	.word	0x08011883
        return canConvertNumber<T>(content_.asUint32);
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	4618      	mov	r0, r3
 801185a:	f7fc fe54 	bl	800e506 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIimEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 801185e:	4603      	mov	r3, r0
 8011860:	e019      	b.n	8011896 <_ZNK11ArduinoJson8V730HB226detail11VariantData9isIntegerIiEEbPKNS1_15ResourceManagerE+0xb2>
        return canConvertNumber<T>(content_.asInt32);
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	4618      	mov	r0, r3
 8011868:	f7fc fe5f 	bl	800e52a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIilEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valuelestS5_stS9_EbE4typeES5_>
 801186c:	4603      	mov	r3, r0
 801186e:	e012      	b.n	8011896 <_ZNK11ArduinoJson8V730HB226detail11VariantData9isIntegerIiEEbPKNS1_15ResourceManagerE+0xb2>
        return canConvertNumber<T>(extension->asUint64);
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011876:	4610      	mov	r0, r2
 8011878:	4619      	mov	r1, r3
 801187a:	f7fc fe61 	bl	800e540 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIiyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 801187e:	4603      	mov	r3, r0
 8011880:	e009      	b.n	8011896 <_ZNK11ArduinoJson8V730HB226detail11VariantData9isIntegerIiEEbPKNS1_15ResourceManagerE+0xb2>
        return canConvertNumber<T>(extension->asInt64);
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011888:	4610      	mov	r0, r2
 801188a:	4619      	mov	r1, r3
 801188c:	f7fc fe70 	bl	800e570 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>
 8011890:	4603      	mov	r3, r0
 8011892:	e000      	b.n	8011896 <_ZNK11ArduinoJson8V730HB226detail11VariantData9isIntegerIiEEbPKNS1_15ResourceManagerE+0xb2>
        return false;
 8011894:	2300      	movs	r3, #0
  }
 8011896:	4618      	mov	r0, r3
 8011898:	3710      	adds	r7, #16
 801189a:	46bd      	mov	sp, r7
 801189c:	bd80      	pop	{r7, pc}
 801189e:	bf00      	nop

080118a0 <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJRPKcRPVfRiEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 80118a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118a4:	b086      	sub	sp, #24
 80118a6:	af02      	add	r7, sp, #8
 80118a8:	60f8      	str	r0, [r7, #12]
 80118aa:	60b9      	str	r1, [r7, #8]
 80118ac:	607a      	str	r2, [r7, #4]
 80118ae:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	2200      	movs	r2, #0
 80118b4:	601a      	str	r2, [r3, #0]
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	1d1c      	adds	r4, r3, #4
 80118ba:	68fd      	ldr	r5, [r7, #12]
 80118bc:	6878      	ldr	r0, [r7, #4]
 80118be:	f7fc f8e0 	bl	800da82 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 80118c2:	4680      	mov	r8, r0
 80118c4:	6838      	ldr	r0, [r7, #0]
 80118c6:	f7ff ff04 	bl	80116d2 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 80118ca:	4606      	mov	r6, r0
 80118cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80118ce:	f7fc f8e3 	bl	800da98 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 80118d2:	4603      	mov	r3, r0
 80118d4:	9301      	str	r3, [sp, #4]
 80118d6:	9600      	str	r6, [sp, #0]
 80118d8:	4643      	mov	r3, r8
 80118da:	68ba      	ldr	r2, [r7, #8]
 80118dc:	4629      	mov	r1, r5
 80118de:	4620      	mov	r0, r4
 80118e0:	f000 f833 	bl	801194a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I10SigmaDeltaSaIvEJRPKcRPVfRiEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>
	{ _M_enable_shared_from_this_with(_M_ptr); }
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	4619      	mov	r1, r3
 80118ea:	68f8      	ldr	r0, [r7, #12]
 80118ec:	f000 f883 	bl	80119f6 <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	4618      	mov	r0, r3
 80118f4:	3710      	adds	r7, #16
 80118f6:	46bd      	mov	sp, r7
 80118f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080118fc <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJRPKcRPVfEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 80118fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80118fe:	b087      	sub	sp, #28
 8011900:	af02      	add	r7, sp, #8
 8011902:	60f8      	str	r0, [r7, #12]
 8011904:	60b9      	str	r1, [r7, #8]
 8011906:	607a      	str	r2, [r7, #4]
 8011908:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	2200      	movs	r2, #0
 801190e:	601a      	str	r2, [r3, #0]
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	1d1c      	adds	r4, r3, #4
 8011914:	68fd      	ldr	r5, [r7, #12]
 8011916:	6878      	ldr	r0, [r7, #4]
 8011918:	f7fc f8b3 	bl	800da82 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 801191c:	4606      	mov	r6, r0
 801191e:	6838      	ldr	r0, [r7, #0]
 8011920:	f7ff fed7 	bl	80116d2 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 8011924:	4603      	mov	r3, r0
 8011926:	9300      	str	r3, [sp, #0]
 8011928:	4633      	mov	r3, r6
 801192a:	68ba      	ldr	r2, [r7, #8]
 801192c:	4629      	mov	r1, r5
 801192e:	4620      	mov	r0, r4
 8011930:	f000 f86c 	bl	8011a0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I10SigmaDeltaSaIvEJRPKcRPVfEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>
	{ _M_enable_shared_from_this_with(_M_ptr); }
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	4619      	mov	r1, r3
 801193a:	68f8      	ldr	r0, [r7, #12]
 801193c:	f000 f85b 	bl	80119f6 <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	4618      	mov	r0, r3
 8011944:	3714      	adds	r7, #20
 8011946:	46bd      	mov	sp, r7
 8011948:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801194a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I10SigmaDeltaSaIvEJRPKcRPVfRiEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>:
	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
 801194a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801194e:	b08c      	sub	sp, #48	@ 0x30
 8011950:	af02      	add	r7, sp, #8
 8011952:	60f8      	str	r0, [r7, #12]
 8011954:	60b9      	str	r1, [r7, #8]
 8011956:	607a      	str	r2, [r7, #4]
 8011958:	603b      	str	r3, [r7, #0]
	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 801195a:	687a      	ldr	r2, [r7, #4]
 801195c:	f107 031c 	add.w	r3, r7, #28
 8011960:	4611      	mov	r1, r2
 8011962:	4618      	mov	r0, r3
 8011964:	f000 f8a0 	bl	8011aa8 <_ZNSaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	  auto __guard = std::__allocate_guarded(__a2);
 8011968:	f107 0314 	add.w	r3, r7, #20
 801196c:	f107 021c 	add.w	r2, r7, #28
 8011970:	4611      	mov	r1, r2
 8011972:	4618      	mov	r0, r3
 8011974:	f000 f8b1 	bl	8011ada <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>
	  _Sp_cp_type* __mem = __guard.get();
 8011978:	f107 0314 	add.w	r3, r7, #20
 801197c:	4618      	mov	r0, r3
 801197e:	f000 f8d4 	bl	8011b2a <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>
 8011982:	6278      	str	r0, [r7, #36]	@ 0x24
	  auto __pi = ::new (__mem)
 8011984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011986:	4619      	mov	r1, r3
 8011988:	2054      	movs	r0, #84	@ 0x54
 801198a:	f7f7 feb9 	bl	8009700 <_ZnwjPv>
 801198e:	4604      	mov	r4, r0
 8011990:	6838      	ldr	r0, [r7, #0]
 8011992:	f7fc f876 	bl	800da82 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8011996:	4605      	mov	r5, r0
 8011998:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801199a:	f7ff fe9a 	bl	80116d2 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 801199e:	4606      	mov	r6, r0
 80119a0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80119a2:	f7fc f879 	bl	800da98 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 80119a6:	4603      	mov	r3, r0
 80119a8:	9300      	str	r3, [sp, #0]
 80119aa:	4633      	mov	r3, r6
 80119ac:	462a      	mov	r2, r5
 80119ae:	4641      	mov	r1, r8
 80119b0:	4620      	mov	r0, r4
 80119b2:	f000 f8c9 	bl	8011b48 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcRPVfRiEEES1_DpOT_>
 80119b6:	623c      	str	r4, [r7, #32]
	  __guard = nullptr;
 80119b8:	f107 0314 	add.w	r3, r7, #20
 80119bc:	2100      	movs	r1, #0
 80119be:	4618      	mov	r0, r3
 80119c0:	f000 f8f6 	bl	8011bb0 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>
	  _M_pi = __pi;
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	6a3a      	ldr	r2, [r7, #32]
 80119c8:	601a      	str	r2, [r3, #0]
	  __p = __pi->_M_ptr();
 80119ca:	6a38      	ldr	r0, [r7, #32]
 80119cc:	f000 f8ff 	bl	8011bce <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 80119d0:	4602      	mov	r2, r0
 80119d2:	68bb      	ldr	r3, [r7, #8]
 80119d4:	601a      	str	r2, [r3, #0]
	}
 80119d6:	f107 0314 	add.w	r3, r7, #20
 80119da:	4618      	mov	r0, r3
 80119dc:	f000 f890 	bl	8011b00 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 80119e0:	f107 031c 	add.w	r3, r7, #28
 80119e4:	4618      	mov	r0, r3
 80119e6:	f000 f86c 	bl	8011ac2 <_ZNSaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	4618      	mov	r0, r3
 80119ee:	3728      	adds	r7, #40	@ 0x28
 80119f0:	46bd      	mov	sp, r7
 80119f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080119f6 <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 80119f6:	b480      	push	{r7}
 80119f8:	b083      	sub	sp, #12
 80119fa:	af00      	add	r7, sp, #0
 80119fc:	6078      	str	r0, [r7, #4]
 80119fe:	6039      	str	r1, [r7, #0]
	{ }
 8011a00:	bf00      	nop
 8011a02:	370c      	adds	r7, #12
 8011a04:	46bd      	mov	sp, r7
 8011a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a0a:	4770      	bx	lr

08011a0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I10SigmaDeltaSaIvEJRPKcRPVfEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>:
	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
 8011a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a0e:	b08b      	sub	sp, #44	@ 0x2c
 8011a10:	af00      	add	r7, sp, #0
 8011a12:	60f8      	str	r0, [r7, #12]
 8011a14:	60b9      	str	r1, [r7, #8]
 8011a16:	607a      	str	r2, [r7, #4]
 8011a18:	603b      	str	r3, [r7, #0]
	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 8011a1a:	687a      	ldr	r2, [r7, #4]
 8011a1c:	f107 031c 	add.w	r3, r7, #28
 8011a20:	4611      	mov	r1, r2
 8011a22:	4618      	mov	r0, r3
 8011a24:	f000 f840 	bl	8011aa8 <_ZNSaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	  auto __guard = std::__allocate_guarded(__a2);
 8011a28:	f107 0314 	add.w	r3, r7, #20
 8011a2c:	f107 021c 	add.w	r2, r7, #28
 8011a30:	4611      	mov	r1, r2
 8011a32:	4618      	mov	r0, r3
 8011a34:	f000 f851 	bl	8011ada <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>
	  _Sp_cp_type* __mem = __guard.get();
 8011a38:	f107 0314 	add.w	r3, r7, #20
 8011a3c:	4618      	mov	r0, r3
 8011a3e:	f000 f874 	bl	8011b2a <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>
 8011a42:	6278      	str	r0, [r7, #36]	@ 0x24
	  auto __pi = ::new (__mem)
 8011a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a46:	4619      	mov	r1, r3
 8011a48:	2054      	movs	r0, #84	@ 0x54
 8011a4a:	f7f7 fe59 	bl	8009700 <_ZnwjPv>
 8011a4e:	4604      	mov	r4, r0
 8011a50:	6838      	ldr	r0, [r7, #0]
 8011a52:	f7fc f816 	bl	800da82 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8011a56:	4605      	mov	r5, r0
 8011a58:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8011a5a:	f7ff fe3a 	bl	80116d2 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 8011a5e:	4603      	mov	r3, r0
 8011a60:	462a      	mov	r2, r5
 8011a62:	4631      	mov	r1, r6
 8011a64:	4620      	mov	r0, r4
 8011a66:	f000 f8c1 	bl	8011bec <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcRPVfEEES1_DpOT_>
 8011a6a:	623c      	str	r4, [r7, #32]
	  __guard = nullptr;
 8011a6c:	f107 0314 	add.w	r3, r7, #20
 8011a70:	2100      	movs	r1, #0
 8011a72:	4618      	mov	r0, r3
 8011a74:	f000 f89c 	bl	8011bb0 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>
	  _M_pi = __pi;
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	6a3a      	ldr	r2, [r7, #32]
 8011a7c:	601a      	str	r2, [r3, #0]
	  __p = __pi->_M_ptr();
 8011a7e:	6a38      	ldr	r0, [r7, #32]
 8011a80:	f000 f8a5 	bl	8011bce <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8011a84:	4602      	mov	r2, r0
 8011a86:	68bb      	ldr	r3, [r7, #8]
 8011a88:	601a      	str	r2, [r3, #0]
	}
 8011a8a:	f107 0314 	add.w	r3, r7, #20
 8011a8e:	4618      	mov	r0, r3
 8011a90:	f000 f836 	bl	8011b00 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 8011a94:	f107 031c 	add.w	r3, r7, #28
 8011a98:	4618      	mov	r0, r3
 8011a9a:	f000 f812 	bl	8011ac2 <_ZNSaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	4618      	mov	r0, r3
 8011aa2:	372c      	adds	r7, #44	@ 0x2c
 8011aa4:	46bd      	mov	sp, r7
 8011aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011aa8 <_ZNSaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
 8011aa8:	b580      	push	{r7, lr}
 8011aaa:	b082      	sub	sp, #8
 8011aac:	af00      	add	r7, sp, #0
 8011aae:	6078      	str	r0, [r7, #4]
 8011ab0:	6039      	str	r1, [r7, #0]
 8011ab2:	6878      	ldr	r0, [r7, #4]
 8011ab4:	f000 f8c8 	bl	8011c48 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	4618      	mov	r0, r3
 8011abc:	3708      	adds	r7, #8
 8011abe:	46bd      	mov	sp, r7
 8011ac0:	bd80      	pop	{r7, pc}

08011ac2 <_ZNSaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8011ac2:	b580      	push	{r7, lr}
 8011ac4:	b082      	sub	sp, #8
 8011ac6:	af00      	add	r7, sp, #0
 8011ac8:	6078      	str	r0, [r7, #4]
 8011aca:	6878      	ldr	r0, [r7, #4]
 8011acc:	f000 f8c7 	bl	8011c5e <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	4618      	mov	r0, r3
 8011ad4:	3708      	adds	r7, #8
 8011ad6:	46bd      	mov	sp, r7
 8011ad8:	bd80      	pop	{r7, pc}

08011ada <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>:
    __allocate_guarded(_Alloc& __a)
 8011ada:	b580      	push	{r7, lr}
 8011adc:	b082      	sub	sp, #8
 8011ade:	af00      	add	r7, sp, #0
 8011ae0:	6078      	str	r0, [r7, #4]
 8011ae2:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8011ae4:	2101      	movs	r1, #1
 8011ae6:	6838      	ldr	r0, [r7, #0]
 8011ae8:	f000 f8c4 	bl	8011c74 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>
 8011aec:	4603      	mov	r3, r0
 8011aee:	461a      	mov	r2, r3
 8011af0:	6839      	ldr	r1, [r7, #0]
 8011af2:	6878      	ldr	r0, [r7, #4]
 8011af4:	f000 f8cd 	bl	8011c92 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
    }
 8011af8:	6878      	ldr	r0, [r7, #4]
 8011afa:	3708      	adds	r7, #8
 8011afc:	46bd      	mov	sp, r7
 8011afe:	bd80      	pop	{r7, pc}

08011b00 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 8011b00:	b580      	push	{r7, lr}
 8011b02:	b082      	sub	sp, #8
 8011b04:	af00      	add	r7, sp, #0
 8011b06:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	685b      	ldr	r3, [r3, #4]
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d007      	beq.n	8011b20 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	6818      	ldr	r0, [r3, #0]
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	685b      	ldr	r3, [r3, #4]
 8011b18:	2201      	movs	r2, #1
 8011b1a:	4619      	mov	r1, r3
 8011b1c:	f000 f8cd 	bl	8011cba <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>
      }
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	4618      	mov	r0, r3
 8011b24:	3708      	adds	r7, #8
 8011b26:	46bd      	mov	sp, r7
 8011b28:	bd80      	pop	{r7, pc}

08011b2a <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>:
      value_type* get() { return std::__to_address(_M_ptr); }
 8011b2a:	b580      	push	{r7, lr}
 8011b2c:	b082      	sub	sp, #8
 8011b2e:	af00      	add	r7, sp, #0
 8011b30:	6078      	str	r0, [r7, #4]
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	685b      	ldr	r3, [r3, #4]
 8011b36:	4618      	mov	r0, r3
 8011b38:	f000 f8ce 	bl	8011cd8 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>
 8011b3c:	4603      	mov	r3, r0
 8011b3e:	4618      	mov	r0, r3
 8011b40:	3708      	adds	r7, #8
 8011b42:	46bd      	mov	sp, r7
 8011b44:	bd80      	pop	{r7, pc}
	...

08011b48 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcRPVfRiEEES1_DpOT_>:
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 8011b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b4a:	b087      	sub	sp, #28
 8011b4c:	af02      	add	r7, sp, #8
 8011b4e:	60f8      	str	r0, [r7, #12]
 8011b50:	7239      	strb	r1, [r7, #8]
 8011b52:	607a      	str	r2, [r7, #4]
 8011b54:	603b      	str	r3, [r7, #0]
	: _M_impl(__a)
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	4618      	mov	r0, r3
 8011b5a:	f7fa fed3 	bl	800c904 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8011b5e:	4a13      	ldr	r2, [pc, #76]	@ (8011bac <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcRPVfRiEEES1_DpOT_+0x64>)
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	601a      	str	r2, [r3, #0]
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	330c      	adds	r3, #12
 8011b68:	4621      	mov	r1, r4
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	f000 f8bf 	bl	8011cee <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
 8011b70:	68f8      	ldr	r0, [r7, #12]
 8011b72:	f000 f82c 	bl	8011bce <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8011b76:	4604      	mov	r4, r0
 8011b78:	6878      	ldr	r0, [r7, #4]
 8011b7a:	f7fb ff82 	bl	800da82 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8011b7e:	4605      	mov	r5, r0
 8011b80:	6838      	ldr	r0, [r7, #0]
 8011b82:	f7ff fda6 	bl	80116d2 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 8011b86:	4606      	mov	r6, r0
 8011b88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011b8a:	f7fb ff85 	bl	800da98 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 8011b8e:	4603      	mov	r3, r0
 8011b90:	f107 0008 	add.w	r0, r7, #8
 8011b94:	9300      	str	r3, [sp, #0]
 8011b96:	4633      	mov	r3, r6
 8011b98:	462a      	mov	r2, r5
 8011b9a:	4621      	mov	r1, r4
 8011b9c:	f000 f8b6 	bl	8011d0c <_ZNSt16allocator_traitsISaIvEE9constructI10SigmaDeltaJRPKcRPVfRiEEEvRS0_PT_DpOT0_>
	}
 8011ba0:	68fb      	ldr	r3, [r7, #12]
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	3714      	adds	r7, #20
 8011ba6:	46bd      	mov	sp, r7
 8011ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011baa:	bf00      	nop
 8011bac:	08026868 	.word	0x08026868

08011bb0 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8011bb0:	b480      	push	{r7}
 8011bb2:	b083      	sub	sp, #12
 8011bb4:	af00      	add	r7, sp, #0
 8011bb6:	6078      	str	r0, [r7, #4]
 8011bb8:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	2200      	movs	r2, #0
 8011bbe:	605a      	str	r2, [r3, #4]
	return *this;
 8011bc0:	687b      	ldr	r3, [r7, #4]
      }
 8011bc2:	4618      	mov	r0, r3
 8011bc4:	370c      	adds	r7, #12
 8011bc6:	46bd      	mov	sp, r7
 8011bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bcc:	4770      	bx	lr

08011bce <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>:
      _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }
 8011bce:	b580      	push	{r7, lr}
 8011bd0:	b082      	sub	sp, #8
 8011bd2:	af00      	add	r7, sp, #0
 8011bd4:	6078      	str	r0, [r7, #4]
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	330c      	adds	r3, #12
 8011bda:	4618      	mov	r0, r3
 8011bdc:	f000 f8b2 	bl	8011d44 <_ZN9__gnu_cxx16__aligned_bufferI10SigmaDeltaE6_M_ptrEv>
 8011be0:	4603      	mov	r3, r0
 8011be2:	4618      	mov	r0, r3
 8011be4:	3708      	adds	r7, #8
 8011be6:	46bd      	mov	sp, r7
 8011be8:	bd80      	pop	{r7, pc}
	...

08011bec <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcRPVfEEES1_DpOT_>:
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 8011bec:	b5b0      	push	{r4, r5, r7, lr}
 8011bee:	b084      	sub	sp, #16
 8011bf0:	af00      	add	r7, sp, #0
 8011bf2:	60f8      	str	r0, [r7, #12]
 8011bf4:	7239      	strb	r1, [r7, #8]
 8011bf6:	607a      	str	r2, [r7, #4]
 8011bf8:	603b      	str	r3, [r7, #0]
	: _M_impl(__a)
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	f7fa fe81 	bl	800c904 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8011c02:	4a10      	ldr	r2, [pc, #64]	@ (8011c44 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcRPVfEEES1_DpOT_+0x58>)
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	601a      	str	r2, [r3, #0]
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	330c      	adds	r3, #12
 8011c0c:	4621      	mov	r1, r4
 8011c0e:	4618      	mov	r0, r3
 8011c10:	f000 f86d 	bl	8011cee <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
 8011c14:	68f8      	ldr	r0, [r7, #12]
 8011c16:	f7ff ffda 	bl	8011bce <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8011c1a:	4604      	mov	r4, r0
 8011c1c:	6878      	ldr	r0, [r7, #4]
 8011c1e:	f7fb ff30 	bl	800da82 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8011c22:	4605      	mov	r5, r0
 8011c24:	6838      	ldr	r0, [r7, #0]
 8011c26:	f7ff fd54 	bl	80116d2 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 8011c2a:	4603      	mov	r3, r0
 8011c2c:	f107 0008 	add.w	r0, r7, #8
 8011c30:	462a      	mov	r2, r5
 8011c32:	4621      	mov	r1, r4
 8011c34:	f000 f892 	bl	8011d5c <_ZNSt16allocator_traitsISaIvEE9constructI10SigmaDeltaJRPKcRPVfEEEvRS0_PT_DpOT0_>
	}
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	4618      	mov	r0, r3
 8011c3c:	3710      	adds	r7, #16
 8011c3e:	46bd      	mov	sp, r7
 8011c40:	bdb0      	pop	{r4, r5, r7, pc}
 8011c42:	bf00      	nop
 8011c44:	08026868 	.word	0x08026868

08011c48 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8011c48:	b480      	push	{r7}
 8011c4a:	b083      	sub	sp, #12
 8011c4c:	af00      	add	r7, sp, #0
 8011c4e:	6078      	str	r0, [r7, #4]
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	4618      	mov	r0, r3
 8011c54:	370c      	adds	r7, #12
 8011c56:	46bd      	mov	sp, r7
 8011c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c5c:	4770      	bx	lr

08011c5e <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8011c5e:	b480      	push	{r7}
 8011c60:	b083      	sub	sp, #12
 8011c62:	af00      	add	r7, sp, #0
 8011c64:	6078      	str	r0, [r7, #4]
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	4618      	mov	r0, r3
 8011c6a:	370c      	adds	r7, #12
 8011c6c:	46bd      	mov	sp, r7
 8011c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c72:	4770      	bx	lr

08011c74 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 8011c74:	b580      	push	{r7, lr}
 8011c76:	b082      	sub	sp, #8
 8011c78:	af00      	add	r7, sp, #0
 8011c7a:	6078      	str	r0, [r7, #4]
 8011c7c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8011c7e:	2200      	movs	r2, #0
 8011c80:	6839      	ldr	r1, [r7, #0]
 8011c82:	6878      	ldr	r0, [r7, #4]
 8011c84:	f000 f882 	bl	8011d8c <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 8011c88:	4603      	mov	r3, r0
 8011c8a:	4618      	mov	r0, r3
 8011c8c:	3708      	adds	r7, #8
 8011c8e:	46bd      	mov	sp, r7
 8011c90:	bd80      	pop	{r7, pc}

08011c92 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8011c92:	b580      	push	{r7, lr}
 8011c94:	b084      	sub	sp, #16
 8011c96:	af00      	add	r7, sp, #0
 8011c98:	60f8      	str	r0, [r7, #12]
 8011c9a:	60b9      	str	r1, [r7, #8]
 8011c9c:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8011c9e:	68b8      	ldr	r0, [r7, #8]
 8011ca0:	f000 f8a2 	bl	8011de8 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>
 8011ca4:	4602      	mov	r2, r0
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	601a      	str	r2, [r3, #0]
 8011caa:	68fb      	ldr	r3, [r7, #12]
 8011cac:	687a      	ldr	r2, [r7, #4]
 8011cae:	605a      	str	r2, [r3, #4]
      { }
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	4618      	mov	r0, r3
 8011cb4:	3710      	adds	r7, #16
 8011cb6:	46bd      	mov	sp, r7
 8011cb8:	bd80      	pop	{r7, pc}

08011cba <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8011cba:	b580      	push	{r7, lr}
 8011cbc:	b084      	sub	sp, #16
 8011cbe:	af00      	add	r7, sp, #0
 8011cc0:	60f8      	str	r0, [r7, #12]
 8011cc2:	60b9      	str	r1, [r7, #8]
 8011cc4:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8011cc6:	687a      	ldr	r2, [r7, #4]
 8011cc8:	68b9      	ldr	r1, [r7, #8]
 8011cca:	68f8      	ldr	r0, [r7, #12]
 8011ccc:	f000 f897 	bl	8011dfe <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>
 8011cd0:	bf00      	nop
 8011cd2:	3710      	adds	r7, #16
 8011cd4:	46bd      	mov	sp, r7
 8011cd6:	bd80      	pop	{r7, pc}

08011cd8 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>:
    __to_address(_Tp* __ptr) noexcept
 8011cd8:	b480      	push	{r7}
 8011cda:	b083      	sub	sp, #12
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	6078      	str	r0, [r7, #4]
      return __ptr;
 8011ce0:	687b      	ldr	r3, [r7, #4]
    }
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	370c      	adds	r7, #12
 8011ce6:	46bd      	mov	sp, r7
 8011ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cec:	4770      	bx	lr

08011cee <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>:
	explicit _Impl(_Alloc __a) noexcept : _A_base(__a) { }
 8011cee:	b580      	push	{r7, lr}
 8011cf0:	b082      	sub	sp, #8
 8011cf2:	af00      	add	r7, sp, #0
 8011cf4:	6078      	str	r0, [r7, #4]
 8011cf6:	7039      	strb	r1, [r7, #0]
 8011cf8:	463b      	mov	r3, r7
 8011cfa:	4619      	mov	r1, r3
 8011cfc:	6878      	ldr	r0, [r7, #4]
 8011cfe:	f7fa ffa1 	bl	800cc44 <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EEC1ERKS0_>
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	4618      	mov	r0, r3
 8011d06:	3708      	adds	r7, #8
 8011d08:	46bd      	mov	sp, r7
 8011d0a:	bd80      	pop	{r7, pc}

08011d0c <_ZNSt16allocator_traitsISaIvEE9constructI10SigmaDeltaJRPKcRPVfRiEEEvRS0_PT_DpOT0_>:
	construct(allocator_type&, _Up* __p, _Args&&... __args)
 8011d0c:	b5b0      	push	{r4, r5, r7, lr}
 8011d0e:	b084      	sub	sp, #16
 8011d10:	af00      	add	r7, sp, #0
 8011d12:	60f8      	str	r0, [r7, #12]
 8011d14:	60b9      	str	r1, [r7, #8]
 8011d16:	607a      	str	r2, [r7, #4]
 8011d18:	603b      	str	r3, [r7, #0]
	{ std::_Construct(__p, std::forward<_Args>(__args)...); }
 8011d1a:	6878      	ldr	r0, [r7, #4]
 8011d1c:	f7fb feb1 	bl	800da82 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8011d20:	4604      	mov	r4, r0
 8011d22:	6838      	ldr	r0, [r7, #0]
 8011d24:	f7ff fcd5 	bl	80116d2 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 8011d28:	4605      	mov	r5, r0
 8011d2a:	6a38      	ldr	r0, [r7, #32]
 8011d2c:	f7fb feb4 	bl	800da98 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 8011d30:	4603      	mov	r3, r0
 8011d32:	462a      	mov	r2, r5
 8011d34:	4621      	mov	r1, r4
 8011d36:	68b8      	ldr	r0, [r7, #8]
 8011d38:	f000 f872 	bl	8011e20 <_ZSt10_ConstructI10SigmaDeltaJRPKcRPVfRiEEvPT_DpOT0_>
 8011d3c:	bf00      	nop
 8011d3e:	3710      	adds	r7, #16
 8011d40:	46bd      	mov	sp, r7
 8011d42:	bdb0      	pop	{r4, r5, r7, pc}

08011d44 <_ZN9__gnu_cxx16__aligned_bufferI10SigmaDeltaE6_M_ptrEv>:
      _M_ptr() noexcept
 8011d44:	b580      	push	{r7, lr}
 8011d46:	b082      	sub	sp, #8
 8011d48:	af00      	add	r7, sp, #0
 8011d4a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8011d4c:	6878      	ldr	r0, [r7, #4]
 8011d4e:	f000 f8a4 	bl	8011e9a <_ZN9__gnu_cxx16__aligned_bufferI10SigmaDeltaE7_M_addrEv>
 8011d52:	4603      	mov	r3, r0
 8011d54:	4618      	mov	r0, r3
 8011d56:	3708      	adds	r7, #8
 8011d58:	46bd      	mov	sp, r7
 8011d5a:	bd80      	pop	{r7, pc}

08011d5c <_ZNSt16allocator_traitsISaIvEE9constructI10SigmaDeltaJRPKcRPVfEEEvRS0_PT_DpOT0_>:
	construct(allocator_type&, _Up* __p, _Args&&... __args)
 8011d5c:	b590      	push	{r4, r7, lr}
 8011d5e:	b085      	sub	sp, #20
 8011d60:	af00      	add	r7, sp, #0
 8011d62:	60f8      	str	r0, [r7, #12]
 8011d64:	60b9      	str	r1, [r7, #8]
 8011d66:	607a      	str	r2, [r7, #4]
 8011d68:	603b      	str	r3, [r7, #0]
	{ std::_Construct(__p, std::forward<_Args>(__args)...); }
 8011d6a:	6878      	ldr	r0, [r7, #4]
 8011d6c:	f7fb fe89 	bl	800da82 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8011d70:	4604      	mov	r4, r0
 8011d72:	6838      	ldr	r0, [r7, #0]
 8011d74:	f7ff fcad 	bl	80116d2 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 8011d78:	4603      	mov	r3, r0
 8011d7a:	461a      	mov	r2, r3
 8011d7c:	4621      	mov	r1, r4
 8011d7e:	68b8      	ldr	r0, [r7, #8]
 8011d80:	f000 f896 	bl	8011eb0 <_ZSt10_ConstructI10SigmaDeltaJRPKcRPVfEEvPT_DpOT0_>
 8011d84:	bf00      	nop
 8011d86:	3714      	adds	r7, #20
 8011d88:	46bd      	mov	sp, r7
 8011d8a:	bd90      	pop	{r4, r7, pc}

08011d8c <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8011d8c:	b580      	push	{r7, lr}
 8011d8e:	b084      	sub	sp, #16
 8011d90:	af00      	add	r7, sp, #0
 8011d92:	60f8      	str	r0, [r7, #12]
 8011d94:	60b9      	str	r1, [r7, #8]
 8011d96:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8011d98:	68f8      	ldr	r0, [r7, #12]
 8011d9a:	f000 f8c1 	bl	8011f20 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 8011d9e:	4602      	mov	r2, r0
 8011da0:	68bb      	ldr	r3, [r7, #8]
 8011da2:	4293      	cmp	r3, r2
 8011da4:	bf8c      	ite	hi
 8011da6:	2301      	movhi	r3, #1
 8011da8:	2300      	movls	r3, #0
 8011daa:	b2db      	uxtb	r3, r3
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	bf14      	ite	ne
 8011db0:	2301      	movne	r3, #1
 8011db2:	2300      	moveq	r3, #0
 8011db4:	b2db      	uxtb	r3, r3
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d007      	beq.n	8011dca <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8011dba:	68bb      	ldr	r3, [r7, #8]
 8011dbc:	4a09      	ldr	r2, [pc, #36]	@ (8011de4 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x58>)
 8011dbe:	4293      	cmp	r3, r2
 8011dc0:	d901      	bls.n	8011dc6 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8011dc2:	f012 f863 	bl	8023e8c <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8011dc6:	f012 f85e 	bl	8023e86 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8011dca:	68bb      	ldr	r3, [r7, #8]
 8011dcc:	2254      	movs	r2, #84	@ 0x54
 8011dce:	fb02 f303 	mul.w	r3, r2, r3
 8011dd2:	4618      	mov	r0, r3
 8011dd4:	f012 f844 	bl	8023e60 <_Znwj>
 8011dd8:	4603      	mov	r3, r0
 8011dda:	bf00      	nop
      }
 8011ddc:	4618      	mov	r0, r3
 8011dde:	3710      	adds	r7, #16
 8011de0:	46bd      	mov	sp, r7
 8011de2:	bd80      	pop	{r7, pc}
 8011de4:	030c30c3 	.word	0x030c30c3

08011de8 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8011de8:	b480      	push	{r7}
 8011dea:	b083      	sub	sp, #12
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	4618      	mov	r0, r3
 8011df4:	370c      	adds	r7, #12
 8011df6:	46bd      	mov	sp, r7
 8011df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dfc:	4770      	bx	lr

08011dfe <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8011dfe:	b580      	push	{r7, lr}
 8011e00:	b084      	sub	sp, #16
 8011e02:	af00      	add	r7, sp, #0
 8011e04:	60f8      	str	r0, [r7, #12]
 8011e06:	60b9      	str	r1, [r7, #8]
 8011e08:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	2254      	movs	r2, #84	@ 0x54
 8011e0e:	fb02 f303 	mul.w	r3, r2, r3
 8011e12:	4619      	mov	r1, r3
 8011e14:	68b8      	ldr	r0, [r7, #8]
 8011e16:	f012 f812 	bl	8023e3e <_ZdlPvj>
      }
 8011e1a:	3710      	adds	r7, #16
 8011e1c:	46bd      	mov	sp, r7
 8011e1e:	bd80      	pop	{r7, pc}

08011e20 <_ZSt10_ConstructI10SigmaDeltaJRPKcRPVfRiEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8011e20:	b5b0      	push	{r4, r5, r7, lr}
 8011e22:	b08c      	sub	sp, #48	@ 0x30
 8011e24:	af00      	add	r7, sp, #0
 8011e26:	60f8      	str	r0, [r7, #12]
 8011e28:	60b9      	str	r1, [r7, #8]
 8011e2a:	607a      	str	r2, [r7, #4]
 8011e2c:	603b      	str	r3, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	4619      	mov	r1, r3
 8011e32:	2048      	movs	r0, #72	@ 0x48
 8011e34:	f7f7 fc64 	bl	8009700 <_ZnwjPv>
 8011e38:	4605      	mov	r5, r0
 8011e3a:	68b8      	ldr	r0, [r7, #8]
 8011e3c:	f7fb fe21 	bl	800da82 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8011e40:	4603      	mov	r3, r0
 8011e42:	681c      	ldr	r4, [r3, #0]
 8011e44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011e48:	4618      	mov	r0, r3
 8011e4a:	f012 f81a 	bl	8023e82 <_ZNSaIcEC1Ev>
 8011e4e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8011e52:	f107 0314 	add.w	r3, r7, #20
 8011e56:	4621      	mov	r1, r4
 8011e58:	4618      	mov	r0, r3
 8011e5a:	f7f4 fc0f 	bl	800667c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8011e5e:	6878      	ldr	r0, [r7, #4]
 8011e60:	f7ff fc37 	bl	80116d2 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 8011e64:	4603      	mov	r3, r0
 8011e66:	681c      	ldr	r4, [r3, #0]
 8011e68:	6838      	ldr	r0, [r7, #0]
 8011e6a:	f7fb fe15 	bl	800da98 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 8011e6e:	4603      	mov	r3, r0
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	f107 0114 	add.w	r1, r7, #20
 8011e76:	4622      	mov	r2, r4
 8011e78:	4628      	mov	r0, r5
 8011e7a:	f7ff faa1 	bl	80113c0 <_ZN10SigmaDeltaC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPVfi>
 8011e7e:	f107 0314 	add.w	r3, r7, #20
 8011e82:	4618      	mov	r0, r3
 8011e84:	f012 f8db 	bl	802403e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8011e88:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	f011 fff9 	bl	8023e84 <_ZNSaIcED1Ev>
    }
 8011e92:	bf00      	nop
 8011e94:	3730      	adds	r7, #48	@ 0x30
 8011e96:	46bd      	mov	sp, r7
 8011e98:	bdb0      	pop	{r4, r5, r7, pc}

08011e9a <_ZN9__gnu_cxx16__aligned_bufferI10SigmaDeltaE7_M_addrEv>:
      _M_addr() noexcept
 8011e9a:	b480      	push	{r7}
 8011e9c:	b083      	sub	sp, #12
 8011e9e:	af00      	add	r7, sp, #0
 8011ea0:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 8011ea2:	687b      	ldr	r3, [r7, #4]
      }
 8011ea4:	4618      	mov	r0, r3
 8011ea6:	370c      	adds	r7, #12
 8011ea8:	46bd      	mov	sp, r7
 8011eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eae:	4770      	bx	lr

08011eb0 <_ZSt10_ConstructI10SigmaDeltaJRPKcRPVfEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8011eb0:	b5b0      	push	{r4, r5, r7, lr}
 8011eb2:	b08c      	sub	sp, #48	@ 0x30
 8011eb4:	af00      	add	r7, sp, #0
 8011eb6:	60f8      	str	r0, [r7, #12]
 8011eb8:	60b9      	str	r1, [r7, #8]
 8011eba:	607a      	str	r2, [r7, #4]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	4619      	mov	r1, r3
 8011ec0:	2048      	movs	r0, #72	@ 0x48
 8011ec2:	f7f7 fc1d 	bl	8009700 <_ZnwjPv>
 8011ec6:	4605      	mov	r5, r0
 8011ec8:	68b8      	ldr	r0, [r7, #8]
 8011eca:	f7fb fdda 	bl	800da82 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8011ece:	4603      	mov	r3, r0
 8011ed0:	681c      	ldr	r4, [r3, #0]
 8011ed2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	f011 ffd3 	bl	8023e82 <_ZNSaIcEC1Ev>
 8011edc:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8011ee0:	f107 0314 	add.w	r3, r7, #20
 8011ee4:	4621      	mov	r1, r4
 8011ee6:	4618      	mov	r0, r3
 8011ee8:	f7f4 fbc8 	bl	800667c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8011eec:	6878      	ldr	r0, [r7, #4]
 8011eee:	f7ff fbf0 	bl	80116d2 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 8011ef2:	4603      	mov	r3, r0
 8011ef4:	681a      	ldr	r2, [r3, #0]
 8011ef6:	f107 0314 	add.w	r3, r7, #20
 8011efa:	4619      	mov	r1, r3
 8011efc:	4628      	mov	r0, r5
 8011efe:	f7ff fa29 	bl	8011354 <_ZN10SigmaDeltaC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPVf>
 8011f02:	f107 0314 	add.w	r3, r7, #20
 8011f06:	4618      	mov	r0, r3
 8011f08:	f012 f899 	bl	802403e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8011f0c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011f10:	4618      	mov	r0, r3
 8011f12:	f011 ffb7 	bl	8023e84 <_ZNSaIcED1Ev>
    }
 8011f16:	bf00      	nop
 8011f18:	3730      	adds	r7, #48	@ 0x30
 8011f1a:	46bd      	mov	sp, r7
 8011f1c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08011f20 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8011f20:	b480      	push	{r7}
 8011f22:	b083      	sub	sp, #12
 8011f24:	af00      	add	r7, sp, #0
 8011f26:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8011f28:	4b03      	ldr	r3, [pc, #12]	@ (8011f38 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv+0x18>)
      }
 8011f2a:	4618      	mov	r0, r3
 8011f2c:	370c      	adds	r7, #12
 8011f2e:	46bd      	mov	sp, r7
 8011f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f34:	4770      	bx	lr
 8011f36:	bf00      	nop
 8011f38:	01861861 	.word	0x01861861

08011f3c <_ZN10SigmaDeltaD1Ev>:
#include <string>
#include "../../remora.h"
#include "../../modules/module.h"
#include "../../drivers/pin/pin.h"

class SigmaDelta : public Module {
 8011f3c:	b580      	push	{r7, lr}
 8011f3e:	b082      	sub	sp, #8
 8011f40:	af00      	add	r7, sp, #0
 8011f42:	6078      	str	r0, [r7, #4]
 8011f44:	4a08      	ldr	r2, [pc, #32]	@ (8011f68 <_ZN10SigmaDeltaD1Ev+0x2c>)
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	601a      	str	r2, [r3, #0]
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	3318      	adds	r3, #24
 8011f4e:	4618      	mov	r0, r3
 8011f50:	f012 f875 	bl	802403e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	4618      	mov	r0, r3
 8011f58:	f7fe f9e8 	bl	801032c <_ZN6ModuleD1Ev>
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	4618      	mov	r0, r3
 8011f60:	3708      	adds	r7, #8
 8011f62:	46bd      	mov	sp, r7
 8011f64:	bd80      	pop	{r7, pc}
 8011f66:	bf00      	nop
 8011f68:	08026884 	.word	0x08026884

08011f6c <_ZN10SigmaDeltaD0Ev>:
 8011f6c:	b580      	push	{r7, lr}
 8011f6e:	b082      	sub	sp, #8
 8011f70:	af00      	add	r7, sp, #0
 8011f72:	6078      	str	r0, [r7, #4]
 8011f74:	6878      	ldr	r0, [r7, #4]
 8011f76:	f7ff ffe1 	bl	8011f3c <_ZN10SigmaDeltaD1Ev>
 8011f7a:	2148      	movs	r1, #72	@ 0x48
 8011f7c:	6878      	ldr	r0, [r7, #4]
 8011f7e:	f011 ff5e 	bl	8023e3e <_ZdlPvj>
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	4618      	mov	r0, r3
 8011f86:	3708      	adds	r7, #8
 8011f88:	46bd      	mov	sp, r7
 8011f8a:	bd80      	pop	{r7, pc}

08011f8c <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 8011f8c:	b580      	push	{r7, lr}
 8011f8e:	b082      	sub	sp, #8
 8011f90:	af00      	add	r7, sp, #0
 8011f92:	6078      	str	r0, [r7, #4]
 8011f94:	4a05      	ldr	r2, [pc, #20]	@ (8011fac <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	601a      	str	r2, [r3, #0]
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	f7f9 f8a7 	bl	800b0f0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	4618      	mov	r0, r3
 8011fa6:	3708      	adds	r7, #8
 8011fa8:	46bd      	mov	sp, r7
 8011faa:	bd80      	pop	{r7, pc}
 8011fac:	08026868 	.word	0x08026868

08011fb0 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 8011fb0:	b580      	push	{r7, lr}
 8011fb2:	b082      	sub	sp, #8
 8011fb4:	af00      	add	r7, sp, #0
 8011fb6:	6078      	str	r0, [r7, #4]
 8011fb8:	6878      	ldr	r0, [r7, #4]
 8011fba:	f7ff ffe7 	bl	8011f8c <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8011fbe:	2154      	movs	r1, #84	@ 0x54
 8011fc0:	6878      	ldr	r0, [r7, #4]
 8011fc2:	f011 ff3c 	bl	8023e3e <_ZdlPvj>
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	4618      	mov	r0, r3
 8011fca:	3708      	adds	r7, #8
 8011fcc:	46bd      	mov	sp, r7
 8011fce:	bd80      	pop	{r7, pc}

08011fd0 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8011fd0:	b590      	push	{r4, r7, lr}
 8011fd2:	b083      	sub	sp, #12
 8011fd4:	af00      	add	r7, sp, #0
 8011fd6:	6078      	str	r0, [r7, #4]
	allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	330c      	adds	r3, #12
 8011fdc:	4618      	mov	r0, r3
 8011fde:	f000 f856 	bl	801208e <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 8011fe2:	4604      	mov	r4, r0
 8011fe4:	6878      	ldr	r0, [r7, #4]
 8011fe6:	f7ff fdf2 	bl	8011bce <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8011fea:	4603      	mov	r3, r0
 8011fec:	4619      	mov	r1, r3
 8011fee:	4620      	mov	r0, r4
 8011ff0:	f000 f859 	bl	80120a6 <_ZNSt16allocator_traitsISaIvEE7destroyI10SigmaDeltaEEvRS0_PT_>
      }
 8011ff4:	bf00      	nop
 8011ff6:	370c      	adds	r7, #12
 8011ff8:	46bd      	mov	sp, r7
 8011ffa:	bd90      	pop	{r4, r7, pc}

08011ffc <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8011ffc:	b580      	push	{r7, lr}
 8011ffe:	b086      	sub	sp, #24
 8012000:	af00      	add	r7, sp, #0
 8012002:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	330c      	adds	r3, #12
 8012008:	4618      	mov	r0, r3
 801200a:	f000 f840 	bl	801208e <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 801200e:	4602      	mov	r2, r0
 8012010:	f107 0314 	add.w	r3, r7, #20
 8012014:	4611      	mov	r1, r2
 8012016:	4618      	mov	r0, r3
 8012018:	f7ff fd46 	bl	8011aa8 <_ZNSaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 801201c:	f107 0114 	add.w	r1, r7, #20
 8012020:	f107 030c 	add.w	r3, r7, #12
 8012024:	687a      	ldr	r2, [r7, #4]
 8012026:	4618      	mov	r0, r3
 8012028:	f7ff fe33 	bl	8011c92 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
	this->~_Sp_counted_ptr_inplace();
 801202c:	6878      	ldr	r0, [r7, #4]
 801202e:	f7ff ffad 	bl	8011f8c <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 8012032:	f107 030c 	add.w	r3, r7, #12
 8012036:	4618      	mov	r0, r3
 8012038:	f7ff fd62 	bl	8011b00 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 801203c:	f107 0314 	add.w	r3, r7, #20
 8012040:	4618      	mov	r0, r3
 8012042:	f7ff fd3e 	bl	8011ac2 <_ZNSaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8012046:	3718      	adds	r7, #24
 8012048:	46bd      	mov	sp, r7
 801204a:	bd80      	pop	{r7, pc}

0801204c <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 801204c:	b580      	push	{r7, lr}
 801204e:	b084      	sub	sp, #16
 8012050:	af00      	add	r7, sp, #0
 8012052:	6078      	str	r0, [r7, #4]
 8012054:	6039      	str	r1, [r7, #0]
	auto __ptr = const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());
 8012056:	6878      	ldr	r0, [r7, #4]
 8012058:	f7ff fdb9 	bl	8011bce <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 801205c:	60f8      	str	r0, [r7, #12]
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 801205e:	f7f7 fb9b 	bl	8009798 <_ZNSt19_Sp_make_shared_tag5_S_tiEv>
 8012062:	4602      	mov	r2, r0
	    ||
 8012064:	683b      	ldr	r3, [r7, #0]
 8012066:	4293      	cmp	r3, r2
 8012068:	d005      	beq.n	8012076 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 801206a:	6838      	ldr	r0, [r7, #0]
 801206c:	f011 ff24 	bl	8023eb8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
 8012070:	4603      	mov	r3, r0
	    ||
 8012072:	2b00      	cmp	r3, #0
 8012074:	d001      	beq.n	801207a <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2e>
 8012076:	2301      	movs	r3, #1
 8012078:	e000      	b.n	801207c <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x30>
 801207a:	2300      	movs	r3, #0
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 801207c:	2b00      	cmp	r3, #0
 801207e:	d001      	beq.n	8012084 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x38>
	  return __ptr;
 8012080:	68fb      	ldr	r3, [r7, #12]
 8012082:	e000      	b.n	8012086 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x3a>
	return nullptr;
 8012084:	2300      	movs	r3, #0
      }
 8012086:	4618      	mov	r0, r3
 8012088:	3710      	adds	r7, #16
 801208a:	46bd      	mov	sp, r7
 801208c:	bd80      	pop	{r7, pc}

0801208e <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _A_base::_S_get(*this); }
 801208e:	b580      	push	{r7, lr}
 8012090:	b082      	sub	sp, #8
 8012092:	af00      	add	r7, sp, #0
 8012094:	6078      	str	r0, [r7, #4]
 8012096:	6878      	ldr	r0, [r7, #4]
 8012098:	f7fb f811 	bl	800d0be <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EE6_S_getERS1_>
 801209c:	4603      	mov	r3, r0
 801209e:	4618      	mov	r0, r3
 80120a0:	3708      	adds	r7, #8
 80120a2:	46bd      	mov	sp, r7
 80120a4:	bd80      	pop	{r7, pc}

080120a6 <_ZNSt16allocator_traitsISaIvEE7destroyI10SigmaDeltaEEvRS0_PT_>:
	destroy(allocator_type&, _Up* __p)
 80120a6:	b580      	push	{r7, lr}
 80120a8:	b082      	sub	sp, #8
 80120aa:	af00      	add	r7, sp, #0
 80120ac:	6078      	str	r0, [r7, #4]
 80120ae:	6039      	str	r1, [r7, #0]
	{ std::_Destroy(__p); }
 80120b0:	6838      	ldr	r0, [r7, #0]
 80120b2:	f000 f804 	bl	80120be <_ZSt8_DestroyI10SigmaDeltaEvPT_>
 80120b6:	bf00      	nop
 80120b8:	3708      	adds	r7, #8
 80120ba:	46bd      	mov	sp, r7
 80120bc:	bd80      	pop	{r7, pc}

080120be <_ZSt8_DestroyI10SigmaDeltaEvPT_>:
    _Destroy(_Tp* __pointer)
 80120be:	b580      	push	{r7, lr}
 80120c0:	b082      	sub	sp, #8
 80120c2:	af00      	add	r7, sp, #0
 80120c4:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	6878      	ldr	r0, [r7, #4]
 80120ce:	4798      	blx	r3
    }
 80120d0:	bf00      	nop
 80120d2:	3708      	adds	r7, #8
 80120d4:	46bd      	mov	sp, r7
 80120d6:	bd80      	pop	{r7, pc}

080120d8 <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>:
#include "stepgen.h"


shared_ptr<Module> Stepgen::create(const JsonObject& config, Remora* instance)
	{
 80120d8:	b590      	push	{r4, r7, lr}
 80120da:	b0bd      	sub	sp, #244	@ 0xf4
 80120dc:	af08      	add	r7, sp, #32
 80120de:	60f8      	str	r0, [r7, #12]
 80120e0:	60b9      	str	r1, [r7, #8]
 80120e2:	607a      	str	r2, [r7, #4]
	    const char* comment = config["Comment"];
 80120e4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80120e8:	4a50      	ldr	r2, [pc, #320]	@ (801222c <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x154>)
 80120ea:	68b9      	ldr	r1, [r7, #8]
 80120ec:	4618      	mov	r0, r3
 80120ee:	f7fe fb68 	bl	80107c2 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 80120f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80120f6:	4618      	mov	r0, r3
 80120f8:	f7f4 fb46 	bl	8006788 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 80120fc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
	    uint32_t threadFreq = config["ThreadFreq"];
 8012100:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8012104:	4a4a      	ldr	r2, [pc, #296]	@ (8012230 <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x158>)
 8012106:	68b9      	ldr	r1, [r7, #8]
 8012108:	4618      	mov	r0, r3
 801210a:	f7fb fb90 	bl	800d82e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 801210e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8012112:	4618      	mov	r0, r3
 8012114:	f7f4 fb69 	bl	80067ea <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ImLi0EEEv>
 8012118:	4603      	mov	r3, r0
 801211a:	62bb      	str	r3, [r7, #40]	@ 0x28

	    printf("%s\n", comment);
 801211c:	f8d7 00cc 	ldr.w	r0, [r7, #204]	@ 0xcc
 8012120:	f012 fcda 	bl	8024ad8 <puts>

	    int joint = config["Joint Number"];
 8012124:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8012128:	4a42      	ldr	r2, [pc, #264]	@ (8012234 <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x15c>)
 801212a:	68b9      	ldr	r1, [r7, #8]
 801212c:	4618      	mov	r0, r3
 801212e:	f000 fa1d 	bl	801256c <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA13_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8012132:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8012136:	4618      	mov	r0, r3
 8012138:	f7fb fb6d 	bl	800d816 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>
 801213c:	4603      	mov	r3, r0
 801213e:	627b      	str	r3, [r7, #36]	@ 0x24
	    const char* enable = config["Enable Pin"];
 8012140:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8012144:	4a3c      	ldr	r2, [pc, #240]	@ (8012238 <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x160>)
 8012146:	68b9      	ldr	r1, [r7, #8]
 8012148:	4618      	mov	r0, r3
 801214a:	f7fb fb70 	bl	800d82e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 801214e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8012152:	4618      	mov	r0, r3
 8012154:	f7f4 fb18 	bl	8006788 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8012158:	4603      	mov	r3, r0
 801215a:	623b      	str	r3, [r7, #32]
	    const char* step = config["Step Pin"];
 801215c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8012160:	4a36      	ldr	r2, [pc, #216]	@ (801223c <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x164>)
 8012162:	68b9      	ldr	r1, [r7, #8]
 8012164:	4618      	mov	r0, r3
 8012166:	f7fd fb52 	bl	800f80e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA9_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 801216a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 801216e:	4618      	mov	r0, r3
 8012170:	f7f4 fb0a 	bl	8006788 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8012174:	4603      	mov	r3, r0
 8012176:	61fb      	str	r3, [r7, #28]
	    const char* dir = config["Direction Pin"];
 8012178:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 801217c:	4a30      	ldr	r2, [pc, #192]	@ (8012240 <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x168>)
 801217e:	68b9      	ldr	r1, [r7, #8]
 8012180:	4618      	mov	r0, r3
 8012182:	f000 fa18 	bl	80125b6 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA14_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8012186:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 801218a:	4618      	mov	r0, r3
 801218c:	f7f4 fafc 	bl	8006788 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8012190:	4603      	mov	r3, r0
 8012192:	61bb      	str	r3, [r7, #24]

	    // Configure pointers to data source and feedback location
	    volatile int32_t* ptrJointFreqCmd = &instance->getRxData()->jointFreqCmd[joint];
 8012194:	6878      	ldr	r0, [r7, #4]
 8012196:	f7fd f967 	bl	800f468 <_ZN6Remora9getRxDataEv>
 801219a:	4602      	mov	r2, r0
 801219c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801219e:	009b      	lsls	r3, r3, #2
 80121a0:	4413      	add	r3, r2
 80121a2:	3304      	adds	r3, #4
 80121a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	    volatile int32_t* ptrJointFeedback = &instance->getTxData()->jointFeedback[joint];
 80121a8:	6878      	ldr	r0, [r7, #4]
 80121aa:	f7fd f94f 	bl	800f44c <_ZN6Remora9getTxDataEv>
 80121ae:	4602      	mov	r2, r0
 80121b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121b2:	009b      	lsls	r3, r3, #2
 80121b4:	4413      	add	r3, r2
 80121b6:	3304      	adds	r3, #4
 80121b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	    volatile uint8_t* ptrJointEnable = &instance->getRxData()->jointEnable;
 80121bc:	6878      	ldr	r0, [r7, #4]
 80121be:	f7fd f953 	bl	800f468 <_ZN6Remora9getRxDataEv>
 80121c2:	4603      	mov	r3, r0
 80121c4:	333c      	adds	r3, #60	@ 0x3c
 80121c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

	    bool usesModulePost = true;		// stepgen uses the thread modulesPost vector
 80121ca:	2301      	movs	r3, #1
 80121cc:	75fb      	strb	r3, [r7, #23]

	    // Create the step generator and register it in the thread
	    return make_unique<Stepgen>(threadFreq, joint, enable, step, dir, Config::stepBit, *ptrJointFreqCmd, *ptrJointFeedback, *ptrJointEnable, usesModulePost);
 80121ce:	f107 00bc 	add.w	r0, r7, #188	@ 0xbc
 80121d2:	f107 0420 	add.w	r4, r7, #32
 80121d6:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80121da:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80121de:	f107 0317 	add.w	r3, r7, #23
 80121e2:	9306      	str	r3, [sp, #24]
 80121e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80121e8:	9305      	str	r3, [sp, #20]
 80121ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80121ee:	9304      	str	r3, [sp, #16]
 80121f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80121f4:	9303      	str	r3, [sp, #12]
 80121f6:	4b13      	ldr	r3, [pc, #76]	@ (8012244 <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x16c>)
 80121f8:	9302      	str	r3, [sp, #8]
 80121fa:	f107 0318 	add.w	r3, r7, #24
 80121fe:	9301      	str	r3, [sp, #4]
 8012200:	f107 031c 	add.w	r3, r7, #28
 8012204:	9300      	str	r3, [sp, #0]
 8012206:	4623      	mov	r3, r4
 8012208:	f000 f9fa 	bl	8012600 <_ZSt11make_uniqueI7StepgenJRmRiRPKcS5_S5_RKmRVlS9_RVhRbEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 801220c:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8012210:	4619      	mov	r1, r3
 8012212:	68f8      	ldr	r0, [r7, #12]
 8012214:	f000 fa70 	bl	80126f8 <_ZNSt10shared_ptrI6ModuleEC1I7StepgenSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>
 8012218:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 801221c:	4618      	mov	r0, r3
 801221e:	f000 fa49 	bl	80126b4 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EED1Ev>
 8012222:	bf00      	nop
	}
 8012224:	68f8      	ldr	r0, [r7, #12]
 8012226:	37d4      	adds	r7, #212	@ 0xd4
 8012228:	46bd      	mov	sp, r7
 801222a:	bd90      	pop	{r4, r7, pc}
 801222c:	08026110 	.word	0x08026110
 8012230:	08026118 	.word	0x08026118
 8012234:	08026124 	.word	0x08026124
 8012238:	08026134 	.word	0x08026134
 801223c:	08026140 	.word	0x08026140
 8012240:	0802614c 	.word	0x0802614c
 8012244:	080268a0 	.word	0x080268a0

08012248 <_ZN7StepgenC1EliPKcS1_S1_iRVlS3_RVhb>:
 * @param _stepBit The number of bits used for the step value.
 * @param _ptrFrequencyCommand A reference to the frequency command data for the joint.
 * @param _ptrFeedback A reference to the feedback data for the joint.
 * @param _ptrJointEnable A reference to the joint enable data.
 */
Stepgen::Stepgen(int32_t _threadFreq, int _jointNumber, const char* _enable, const char* _step, const char* _direction, int _stepBit, volatile int32_t& _ptrFrequencyCommand, volatile int32_t& _ptrFeedback,  volatile uint8_t& _ptrJointEnable, bool _usesModulePost)
 8012248:	b590      	push	{r4, r7, lr}
 801224a:	b09b      	sub	sp, #108	@ 0x6c
 801224c:	af00      	add	r7, sp, #0
 801224e:	60f8      	str	r0, [r7, #12]
 8012250:	60b9      	str	r1, [r7, #8]
 8012252:	607a      	str	r2, [r7, #4]
 8012254:	603b      	str	r3, [r7, #0]
      DDSaccumulator(0),
      frequencyScale(1.0f * (1 << _stepBit) / _threadFreq),  // Frequency scaling without unnecessary cast
      mask(1 << _jointNumber),  // Mask for checking the joint number
      isEnabled(false),
      isForward(false),
      isStepping(false)
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	4618      	mov	r0, r3
 801225a:	f7fe f84b 	bl	80102f4 <_ZN6ModuleC1Ev>
 801225e:	4a5c      	ldr	r2, [pc, #368]	@ (80123d0 <_ZN7StepgenC1EliPKcS1_S1_iRVlS3_RVhb+0x188>)
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	601a      	str	r2, [r3, #0]
    : jointNumber(_jointNumber),
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	687a      	ldr	r2, [r7, #4]
 8012268:	619a      	str	r2, [r3, #24]
      enable(_enable),
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	683a      	ldr	r2, [r7, #0]
 801226e:	61da      	str	r2, [r3, #28]
      step(_step),
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8012274:	621a      	str	r2, [r3, #32]
      direction(_direction),
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801227a:	625a      	str	r2, [r3, #36]	@ 0x24
      stepBit(_stepBit),
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8012282:	629a      	str	r2, [r3, #40]	@ 0x28
      ptrFrequencyCommand(&_ptrFrequencyCommand),
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801228a:	62da      	str	r2, [r3, #44]	@ 0x2c
      ptrFeedback(&_ptrFeedback),
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8012292:	631a      	str	r2, [r3, #48]	@ 0x30
      ptrJointEnable(&_ptrJointEnable),
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801229a:	635a      	str	r2, [r3, #52]	@ 0x34
	  enablePin(_enable, OUTPUT),
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	f103 0438 	add.w	r4, r3, #56	@ 0x38
 80122a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80122a6:	4618      	mov	r0, r3
 80122a8:	f011 fdeb 	bl	8023e82 <_ZNSaIcEC1Ev>
 80122ac:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80122b0:	f107 0314 	add.w	r3, r7, #20
 80122b4:	6839      	ldr	r1, [r7, #0]
 80122b6:	4618      	mov	r0, r3
 80122b8:	f7f4 f9e0 	bl	800667c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 80122bc:	f107 0314 	add.w	r3, r7, #20
 80122c0:	2201      	movs	r2, #1
 80122c2:	4619      	mov	r1, r3
 80122c4:	4620      	mov	r0, r4
 80122c6:	f7f1 fa97 	bl	80037f8 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 80122ca:	f107 0314 	add.w	r3, r7, #20
 80122ce:	4618      	mov	r0, r3
 80122d0:	f011 feb5 	bl	802403e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80122d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80122d8:	4618      	mov	r0, r3
 80122da:	f011 fdd3 	bl	8023e84 <_ZNSaIcED1Ev>
      stepPin(_step, OUTPUT),
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	f103 0478 	add.w	r4, r3, #120	@ 0x78
 80122e4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80122e8:	4618      	mov	r0, r3
 80122ea:	f011 fdca 	bl	8023e82 <_ZNSaIcEC1Ev>
 80122ee:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80122f2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80122f6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80122f8:	4618      	mov	r0, r3
 80122fa:	f7f4 f9bf 	bl	800667c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 80122fe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8012302:	2201      	movs	r2, #1
 8012304:	4619      	mov	r1, r3
 8012306:	4620      	mov	r0, r4
 8012308:	f7f1 fa76 	bl	80037f8 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 801230c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8012310:	4618      	mov	r0, r3
 8012312:	f011 fe94 	bl	802403e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8012316:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 801231a:	4618      	mov	r0, r3
 801231c:	f011 fdb2 	bl	8023e84 <_ZNSaIcED1Ev>
      directionPin(_direction, OUTPUT),
 8012320:	68fb      	ldr	r3, [r7, #12]
 8012322:	f103 04b8 	add.w	r4, r3, #184	@ 0xb8
 8012326:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 801232a:	4618      	mov	r0, r3
 801232c:	f011 fda9 	bl	8023e82 <_ZNSaIcEC1Ev>
 8012330:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8012334:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012338:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801233a:	4618      	mov	r0, r3
 801233c:	f7f4 f99e 	bl	800667c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8012340:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012344:	2201      	movs	r2, #1
 8012346:	4619      	mov	r1, r3
 8012348:	4620      	mov	r0, r4
 801234a:	f7f1 fa55 	bl	80037f8 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 801234e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012352:	4618      	mov	r0, r3
 8012354:	f011 fe73 	bl	802403e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8012358:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 801235c:	4618      	mov	r0, r3
 801235e:	f011 fd91 	bl	8023e84 <_ZNSaIcED1Ev>
      rawCount(0),
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	2200      	movs	r2, #0
 8012366:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
      DDSaccumulator(0),
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	2200      	movs	r2, #0
 801236e:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
      frequencyScale(1.0f * (1 << _stepBit) / _threadFreq),  // Frequency scaling without unnecessary cast
 8012372:	2201      	movs	r2, #1
 8012374:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8012378:	fa02 f303 	lsl.w	r3, r2, r3
 801237c:	ee07 3a90 	vmov	s15, r3
 8012380:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8012384:	68bb      	ldr	r3, [r7, #8]
 8012386:	ee07 3a90 	vmov	s15, r3
 801238a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801238e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	edc3 7a40 	vstr	s15, [r3, #256]	@ 0x100
      mask(1 << _jointNumber),  // Mask for checking the joint number
 8012398:	2201      	movs	r2, #1
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	409a      	lsls	r2, r3
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
      isEnabled(false),
 80123a4:	68fb      	ldr	r3, [r7, #12]
 80123a6:	2200      	movs	r2, #0
 80123a8:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
      isForward(false),
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	2200      	movs	r2, #0
 80123b0:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
      isStepping(false)
 80123b4:	68fb      	ldr	r3, [r7, #12]
 80123b6:	2200      	movs	r2, #0
 80123b8:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112
{
	usesModulePost = _usesModulePost;
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	f897 2090 	ldrb.w	r2, [r7, #144]	@ 0x90
 80123c2:	751a      	strb	r2, [r3, #20]
}
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	4618      	mov	r0, r3
 80123c8:	376c      	adds	r7, #108	@ 0x6c
 80123ca:	46bd      	mov	sp, r7
 80123cc:	bd90      	pop	{r4, r7, pc}
 80123ce:	bf00      	nop
 80123d0:	080268c8 	.word	0x080268c8

080123d4 <_ZN7Stepgen6updateEv>:
 * 
 * This method generates pulses for stepping according to the current
 * frequency command and direction.
 */
void Stepgen::update()
{
 80123d4:	b580      	push	{r7, lr}
 80123d6:	b082      	sub	sp, #8
 80123d8:	af00      	add	r7, sp, #0
 80123da:	6078      	str	r0, [r7, #4]
    makePulses();  // Generate pulses for stepping and direction
 80123dc:	6878      	ldr	r0, [r7, #4]
 80123de:	f000 f819 	bl	8012414 <_ZN7Stepgen10makePulsesEv>
}
 80123e2:	bf00      	nop
 80123e4:	3708      	adds	r7, #8
 80123e6:	46bd      	mov	sp, r7
 80123e8:	bd80      	pop	{r7, pc}

080123ea <_ZN7Stepgen10updatePostEv>:
 * @brief Post-update method for the Stepgen.
 * 
 * This method stops any ongoing pulses after the update phase.
 */
void Stepgen::updatePost()
{
 80123ea:	b580      	push	{r7, lr}
 80123ec:	b082      	sub	sp, #8
 80123ee:	af00      	add	r7, sp, #0
 80123f0:	6078      	str	r0, [r7, #4]
    stopPulses();  // Stop pulse generation after update
 80123f2:	6878      	ldr	r0, [r7, #4]
 80123f4:	f000 f8a8 	bl	8012548 <_ZN7Stepgen10stopPulsesEv>
}
 80123f8:	bf00      	nop
 80123fa:	3708      	adds	r7, #8
 80123fc:	46bd      	mov	sp, r7
 80123fe:	bd80      	pop	{r7, pc}

08012400 <_ZN7Stepgen10slowUpdateEv>:
 * 
 * This is a placeholder for performing any slow or low-priority updates,
 * though it currently does nothing.
 */
void Stepgen::slowUpdate()
{
 8012400:	b480      	push	{r7}
 8012402:	b083      	sub	sp, #12
 8012404:	af00      	add	r7, sp, #0
 8012406:	6078      	str	r0, [r7, #4]
    // Currently no operation for slow update
}
 8012408:	bf00      	nop
 801240a:	370c      	adds	r7, #12
 801240c:	46bd      	mov	sp, r7
 801240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012412:	4770      	bx	lr

08012414 <_ZN7Stepgen10makePulsesEv>:
 * This method calculates the next step and updates the step and direction
 * pins accordingly. It uses the DDS (Direct Digital Synthesis) technique
 * to generate precise frequency-based stepping.
 */
void Stepgen::makePulses()
{
 8012414:	b580      	push	{r7, lr}
 8012416:	b084      	sub	sp, #16
 8012418:	af00      	add	r7, sp, #0
 801241a:	6078      	str	r0, [r7, #4]
    isEnabled = ((*(ptrJointEnable) & mask) != 0);
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012420:	781b      	ldrb	r3, [r3, #0]
 8012422:	b2db      	uxtb	r3, r3
 8012424:	461a      	mov	r2, r3
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 801242c:	4013      	ands	r3, r2
 801242e:	2b00      	cmp	r3, #0
 8012430:	bf14      	ite	ne
 8012432:	2301      	movne	r3, #1
 8012434:	2300      	moveq	r3, #0
 8012436:	b2da      	uxtb	r2, r3
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
    if (!isEnabled)
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 8012444:	f083 0301 	eor.w	r3, r3, #1
 8012448:	b2db      	uxtb	r3, r3
 801244a:	2b00      	cmp	r3, #0
 801244c:	d006      	beq.n	801245c <_ZN7Stepgen10makePulsesEv+0x48>
    {
        enablePin.set(true);  	// Disable the driver if not enabled
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	3338      	adds	r3, #56	@ 0x38
 8012452:	2101      	movs	r1, #1
 8012454:	4618      	mov	r0, r3
 8012456:	f7f1 fb79 	bl	8003b4c <_ZN3Pin3setEb>
        return;  				// Exit early if the generator is disabled
 801245a:	e072      	b.n	8012542 <_ZN7Stepgen10makePulsesEv+0x12e>
    }

    enablePin.set(false); 		// Enable the driver
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	3338      	adds	r3, #56	@ 0x38
 8012460:	2100      	movs	r1, #0
 8012462:	4618      	mov	r0, r3
 8012464:	f7f1 fb72 	bl	8003b4c <_ZN3Pin3setEb>

    // Get the current frequency command and scale it using the frequency scale
    frequencyCommand = *ptrFrequencyCommand;
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801246c:	681a      	ldr	r2, [r3, #0]
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
    DDSaddValue = frequencyCommand * frequencyScale;
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 801247a:	ee07 3a90 	vmov	s15, r3
 801247e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	edd3 7a40 	vldr	s15, [r3, #256]	@ 0x100
 8012488:	ee67 7a27 	vmul.f32	s15, s14, s15
 801248c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012490:	ee17 2a90 	vmov	r2, s15
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108

    // Save the current DDS accumulator value and update it
    int32_t stepNow = DDSaccumulator;
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 80124a0:	60fb      	str	r3, [r7, #12]
    DDSaccumulator += DDSaddValue;
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80124ae:	441a      	add	r2, r3
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc

    // Check for changes in the low half of the DDS accumulator
    stepNow ^= DDSaccumulator;
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 80124bc:	68fa      	ldr	r2, [r7, #12]
 80124be:	4053      	eors	r3, r2
 80124c0:	60fb      	str	r3, [r7, #12]
    stepNow &= (1L << stepBit);  // Check for the step bit
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80124c6:	2201      	movs	r2, #1
 80124c8:	fa02 f303 	lsl.w	r3, r2, r3
 80124cc:	68fa      	ldr	r2, [r7, #12]
 80124ce:	4013      	ands	r3, r2
 80124d0:	60fb      	str	r3, [r7, #12]

    // Determine direction based on the sign of DDSaddValue
    isForward = DDSaddValue > 0;
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80124d8:	2b00      	cmp	r3, #0
 80124da:	bfcc      	ite	gt
 80124dc:	2301      	movgt	r3, #1
 80124de:	2300      	movle	r3, #0
 80124e0:	b2da      	uxtb	r2, r3
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111

    // If a step is to be made, set the direction and step pins accordingly
    if (stepNow)
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d029      	beq.n	8012542 <_ZN7Stepgen10makePulsesEv+0x12e>
    {
        directionPin.set(isForward);  // Set direction pin
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	f103 02b8 	add.w	r2, r3, #184	@ 0xb8
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 80124fa:	4619      	mov	r1, r3
 80124fc:	4610      	mov	r0, r2
 80124fe:	f7f1 fb25 	bl	8003b4c <_ZN3Pin3setEb>
        stepPin.set(true);  // Set the step pin
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	3378      	adds	r3, #120	@ 0x78
 8012506:	2101      	movs	r1, #1
 8012508:	4618      	mov	r0, r3
 801250a:	f7f1 fb1f 	bl	8003b4c <_ZN3Pin3setEb>
        rawCount += (isForward ? 1 : -1);  // Update rawCount based on direction
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8012514:	687a      	ldr	r2, [r7, #4]
 8012516:	f892 2111 	ldrb.w	r2, [r2, #273]	@ 0x111
 801251a:	2a00      	cmp	r2, #0
 801251c:	d001      	beq.n	8012522 <_ZN7Stepgen10makePulsesEv+0x10e>
 801251e:	2201      	movs	r2, #1
 8012520:	e001      	b.n	8012526 <_ZN7Stepgen10makePulsesEv+0x112>
 8012522:	f04f 32ff 	mov.w	r2, #4294967295
 8012526:	441a      	add	r2, r3
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
        *ptrFeedback = rawCount;  // Update the feedback with the raw count
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012532:	687a      	ldr	r2, [r7, #4]
 8012534:	f8d2 20f8 	ldr.w	r2, [r2, #248]	@ 0xf8
 8012538:	601a      	str	r2, [r3, #0]
        isStepping = true;  // Indicate that stepping is occurring
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	2201      	movs	r2, #1
 801253e:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112
    }
}
 8012542:	3710      	adds	r7, #16
 8012544:	46bd      	mov	sp, r7
 8012546:	bd80      	pop	{r7, pc}

08012548 <_ZN7Stepgen10stopPulsesEv>:
 * @brief Stops the pulse generation.
 * 
 * This method resets the step pin to low and stops any ongoing stepping.
 */
void Stepgen::stopPulses()
{
 8012548:	b580      	push	{r7, lr}
 801254a:	b082      	sub	sp, #8
 801254c:	af00      	add	r7, sp, #0
 801254e:	6078      	str	r0, [r7, #4]
    stepPin.set(false);  // Reset step pin to low
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	3378      	adds	r3, #120	@ 0x78
 8012554:	2100      	movs	r1, #0
 8012556:	4618      	mov	r0, r3
 8012558:	f7f1 faf8 	bl	8003b4c <_ZN3Pin3setEb>
    isStepping = false;  // Indicate that stepping has stopped
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	2200      	movs	r2, #0
 8012560:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112
}
 8012564:	bf00      	nop
 8012566:	3708      	adds	r7, #8
 8012568:	46bd      	mov	sp, r7
 801256a:	bd80      	pop	{r7, pc}

0801256c <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA13_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:

  // Gets or sets the member with specified key.
  // https://arduinojson.org/v7/api/jsonobject/subscript/
  template <typename TString,
            detail::enable_if_t<detail::IsString<TString>::value, int> = 0>
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 801256c:	b580      	push	{r7, lr}
 801256e:	b08c      	sub	sp, #48	@ 0x30
 8012570:	af02      	add	r7, sp, #8
 8012572:	60f8      	str	r0, [r7, #12]
 8012574:	60b9      	str	r1, [r7, #8]
 8012576:	607a      	str	r2, [r7, #4]
      const TString& key) const {
    return {*this, detail::adaptString(key)};
 8012578:	68ba      	ldr	r2, [r7, #8]
 801257a:	f107 0314 	add.w	r3, r7, #20
 801257e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012582:	e883 0003 	stmia.w	r3, {r0, r1}
 8012586:	f107 031c 	add.w	r3, r7, #28
 801258a:	6879      	ldr	r1, [r7, #4]
 801258c:	4618      	mov	r0, r3
 801258e:	f000 f8c6 	bl	801271e <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA13_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8012592:	466a      	mov	r2, sp
 8012594:	f107 0320 	add.w	r3, r7, #32
 8012598:	e893 0003 	ldmia.w	r3, {r0, r1}
 801259c:	e882 0003 	stmia.w	r2, {r0, r1}
 80125a0:	69fb      	ldr	r3, [r7, #28]
 80125a2:	f107 0214 	add.w	r2, r7, #20
 80125a6:	ca06      	ldmia	r2, {r1, r2}
 80125a8:	68f8      	ldr	r0, [r7, #12]
 80125aa:	f7f4 fa5c 	bl	8006a66 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 80125ae:	68f8      	ldr	r0, [r7, #12]
 80125b0:	3728      	adds	r7, #40	@ 0x28
 80125b2:	46bd      	mov	sp, r7
 80125b4:	bd80      	pop	{r7, pc}

080125b6 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA14_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 80125b6:	b580      	push	{r7, lr}
 80125b8:	b08c      	sub	sp, #48	@ 0x30
 80125ba:	af02      	add	r7, sp, #8
 80125bc:	60f8      	str	r0, [r7, #12]
 80125be:	60b9      	str	r1, [r7, #8]
 80125c0:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 80125c2:	68ba      	ldr	r2, [r7, #8]
 80125c4:	f107 0314 	add.w	r3, r7, #20
 80125c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80125cc:	e883 0003 	stmia.w	r3, {r0, r1}
 80125d0:	f107 031c 	add.w	r3, r7, #28
 80125d4:	6879      	ldr	r1, [r7, #4]
 80125d6:	4618      	mov	r0, r3
 80125d8:	f000 f8b4 	bl	8012744 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA14_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 80125dc:	466a      	mov	r2, sp
 80125de:	f107 0320 	add.w	r3, r7, #32
 80125e2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80125e6:	e882 0003 	stmia.w	r2, {r0, r1}
 80125ea:	69fb      	ldr	r3, [r7, #28]
 80125ec:	f107 0214 	add.w	r2, r7, #20
 80125f0:	ca06      	ldmia	r2, {r1, r2}
 80125f2:	68f8      	ldr	r0, [r7, #12]
 80125f4:	f7f4 fa37 	bl	8006a66 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 80125f8:	68f8      	ldr	r0, [r7, #12]
 80125fa:	3728      	adds	r7, #40	@ 0x28
 80125fc:	46bd      	mov	sp, r7
 80125fe:	bd80      	pop	{r7, pc}

08012600 <_ZSt11make_uniqueI7StepgenJRmRiRPKcS5_S5_RKmRVlS9_RVhRbEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8012600:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012604:	b093      	sub	sp, #76	@ 0x4c
 8012606:	af08      	add	r7, sp, #32
 8012608:	6278      	str	r0, [r7, #36]	@ 0x24
 801260a:	6239      	str	r1, [r7, #32]
 801260c:	61fa      	str	r2, [r7, #28]
 801260e:	61bb      	str	r3, [r7, #24]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8012610:	f44f 708a 	mov.w	r0, #276	@ 0x114
 8012614:	f011 fc24 	bl	8023e60 <_Znwj>
 8012618:	4603      	mov	r3, r0
 801261a:	4698      	mov	r8, r3
 801261c:	6a38      	ldr	r0, [r7, #32]
 801261e:	f7f9 f894 	bl	800b74a <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
 8012622:	4603      	mov	r3, r0
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	4699      	mov	r9, r3
 8012628:	69f8      	ldr	r0, [r7, #28]
 801262a:	f7fb fa35 	bl	800da98 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 801262e:	4603      	mov	r3, r0
 8012630:	681e      	ldr	r6, [r3, #0]
 8012632:	69b8      	ldr	r0, [r7, #24]
 8012634:	f7fb fa25 	bl	800da82 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8012638:	4603      	mov	r3, r0
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	617b      	str	r3, [r7, #20]
 801263e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8012640:	f7fb fa1f 	bl	800da82 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8012644:	4603      	mov	r3, r0
 8012646:	681c      	ldr	r4, [r3, #0]
 8012648:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801264a:	f7fb fa1a 	bl	800da82 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 801264e:	4603      	mov	r3, r0
 8012650:	681d      	ldr	r5, [r3, #0]
 8012652:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8012654:	f7f9 f884 	bl	800b760 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 8012658:	4603      	mov	r3, r0
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	613b      	str	r3, [r7, #16]
 801265e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8012660:	f000 f883 	bl	801276a <_ZSt7forwardIRVlEOT_RNSt16remove_referenceIS2_E4typeE>
 8012664:	60f8      	str	r0, [r7, #12]
 8012666:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8012668:	f000 f87f 	bl	801276a <_ZSt7forwardIRVlEOT_RNSt16remove_referenceIS2_E4typeE>
 801266c:	60b8      	str	r0, [r7, #8]
 801266e:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8012670:	f000 f886 	bl	8012780 <_ZSt7forwardIRVhEOT_RNSt16remove_referenceIS2_E4typeE>
 8012674:	6078      	str	r0, [r7, #4]
 8012676:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8012678:	f7fd f9c9 	bl	800fa0e <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 801267c:	4603      	mov	r3, r0
 801267e:	781b      	ldrb	r3, [r3, #0]
 8012680:	9306      	str	r3, [sp, #24]
 8012682:	687a      	ldr	r2, [r7, #4]
 8012684:	9205      	str	r2, [sp, #20]
 8012686:	68ba      	ldr	r2, [r7, #8]
 8012688:	9204      	str	r2, [sp, #16]
 801268a:	68fa      	ldr	r2, [r7, #12]
 801268c:	9203      	str	r2, [sp, #12]
 801268e:	693a      	ldr	r2, [r7, #16]
 8012690:	9202      	str	r2, [sp, #8]
 8012692:	9501      	str	r5, [sp, #4]
 8012694:	9400      	str	r4, [sp, #0]
 8012696:	697b      	ldr	r3, [r7, #20]
 8012698:	4632      	mov	r2, r6
 801269a:	4649      	mov	r1, r9
 801269c:	4640      	mov	r0, r8
 801269e:	f7ff fdd3 	bl	8012248 <_ZN7StepgenC1EliPKcS1_S1_iRVlS3_RVhb>
 80126a2:	4641      	mov	r1, r8
 80126a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80126a6:	f000 f886 	bl	80127b6 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 80126aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80126ac:	372c      	adds	r7, #44	@ 0x2c
 80126ae:	46bd      	mov	sp, r7
 80126b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080126b4 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 80126b4:	b590      	push	{r4, r7, lr}
 80126b6:	b085      	sub	sp, #20
 80126b8:	af00      	add	r7, sp, #0
 80126ba:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	4618      	mov	r0, r3
 80126c0:	f000 f888 	bl	80127d4 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 80126c4:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d00c      	beq.n	80126e8 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80126ce:	6878      	ldr	r0, [r7, #4]
 80126d0:	f000 f88d 	bl	80127ee <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE11get_deleterEv>
 80126d4:	4604      	mov	r4, r0
 80126d6:	68f8      	ldr	r0, [r7, #12]
 80126d8:	f000 f896 	bl	8012808 <_ZSt4moveIRP7StepgenEONSt16remove_referenceIT_E4typeEOS4_>
 80126dc:	4603      	mov	r3, r0
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	4619      	mov	r1, r3
 80126e2:	4620      	mov	r0, r4
 80126e4:	f000 f8cf 	bl	8012886 <_ZNKSt14default_deleteI7StepgenEclEPS0_>
	__ptr = pointer();
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	2200      	movs	r2, #0
 80126ec:	601a      	str	r2, [r3, #0]
      }
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	4618      	mov	r0, r3
 80126f2:	3714      	adds	r7, #20
 80126f4:	46bd      	mov	sp, r7
 80126f6:	bd90      	pop	{r4, r7, pc}

080126f8 <_ZNSt10shared_ptrI6ModuleEC1I7StepgenSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>:
	shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 80126f8:	b590      	push	{r4, r7, lr}
 80126fa:	b083      	sub	sp, #12
 80126fc:	af00      	add	r7, sp, #0
 80126fe:	6078      	str	r0, [r7, #4]
 8012700:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 8012702:	687c      	ldr	r4, [r7, #4]
 8012704:	6838      	ldr	r0, [r7, #0]
 8012706:	f000 f8cf 	bl	80128a8 <_ZSt4moveIRSt10unique_ptrI7StepgenSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 801270a:	4603      	mov	r3, r0
 801270c:	4619      	mov	r1, r3
 801270e:	4620      	mov	r0, r4
 8012710:	f000 f8d5 	bl	80128be <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	4618      	mov	r0, r3
 8012718:	370c      	adds	r7, #12
 801271a:	46bd      	mov	sp, r7
 801271c:	bd90      	pop	{r4, r7, pc}

0801271e <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA13_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 801271e:	b580      	push	{r7, lr}
 8012720:	b082      	sub	sp, #8
 8012722:	af00      	add	r7, sp, #0
 8012724:	6078      	str	r0, [r7, #4]
 8012726:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8012728:	6838      	ldr	r0, [r7, #0]
 801272a:	f000 f900 	bl	801292e <_ZN11ArduinoJson8V730HB226detail7forwardIRA13_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 801272e:	4602      	mov	r2, r0
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	4611      	mov	r1, r2
 8012734:	4618      	mov	r0, r3
 8012736:	f000 f905 	bl	8012944 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA13_KcvE5adaptES5_>
 801273a:	bf00      	nop
}
 801273c:	6878      	ldr	r0, [r7, #4]
 801273e:	3708      	adds	r7, #8
 8012740:	46bd      	mov	sp, r7
 8012742:	bd80      	pop	{r7, pc}

08012744 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA14_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 8012744:	b580      	push	{r7, lr}
 8012746:	b082      	sub	sp, #8
 8012748:	af00      	add	r7, sp, #0
 801274a:	6078      	str	r0, [r7, #4]
 801274c:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 801274e:	6838      	ldr	r0, [r7, #0]
 8012750:	f000 f907 	bl	8012962 <_ZN11ArduinoJson8V730HB226detail7forwardIRA14_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8012754:	4602      	mov	r2, r0
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	4611      	mov	r1, r2
 801275a:	4618      	mov	r0, r3
 801275c:	f000 f90c 	bl	8012978 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA14_KcvE5adaptES5_>
 8012760:	bf00      	nop
}
 8012762:	6878      	ldr	r0, [r7, #4]
 8012764:	3708      	adds	r7, #8
 8012766:	46bd      	mov	sp, r7
 8012768:	bd80      	pop	{r7, pc}

0801276a <_ZSt7forwardIRVlEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801276a:	b480      	push	{r7}
 801276c:	b083      	sub	sp, #12
 801276e:	af00      	add	r7, sp, #0
 8012770:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	4618      	mov	r0, r3
 8012776:	370c      	adds	r7, #12
 8012778:	46bd      	mov	sp, r7
 801277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801277e:	4770      	bx	lr

08012780 <_ZSt7forwardIRVhEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8012780:	b480      	push	{r7}
 8012782:	b083      	sub	sp, #12
 8012784:	af00      	add	r7, sp, #0
 8012786:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	4618      	mov	r0, r3
 801278c:	370c      	adds	r7, #12
 801278e:	46bd      	mov	sp, r7
 8012790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012794:	4770      	bx	lr

08012796 <_ZNSt15__uniq_ptr_dataI7StepgenSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8012796:	b580      	push	{r7, lr}
 8012798:	b082      	sub	sp, #8
 801279a:	af00      	add	r7, sp, #0
 801279c:	6078      	str	r0, [r7, #4]
 801279e:	6039      	str	r1, [r7, #0]
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	683a      	ldr	r2, [r7, #0]
 80127a4:	4611      	mov	r1, r2
 80127a6:	4618      	mov	r0, r3
 80127a8:	f000 f8f5 	bl	8012996 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EEC1EPS0_>
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	4618      	mov	r0, r3
 80127b0:	3708      	adds	r7, #8
 80127b2:	46bd      	mov	sp, r7
 80127b4:	bd80      	pop	{r7, pc}

080127b6 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 80127b6:	b580      	push	{r7, lr}
 80127b8:	b082      	sub	sp, #8
 80127ba:	af00      	add	r7, sp, #0
 80127bc:	6078      	str	r0, [r7, #4]
 80127be:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	6839      	ldr	r1, [r7, #0]
 80127c4:	4618      	mov	r0, r3
 80127c6:	f7ff ffe6 	bl	8012796 <_ZNSt15__uniq_ptr_dataI7StepgenSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	4618      	mov	r0, r3
 80127ce:	3708      	adds	r7, #8
 80127d0:	46bd      	mov	sp, r7
 80127d2:	bd80      	pop	{r7, pc}

080127d4 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 80127d4:	b580      	push	{r7, lr}
 80127d6:	b082      	sub	sp, #8
 80127d8:	af00      	add	r7, sp, #0
 80127da:	6078      	str	r0, [r7, #4]
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	4618      	mov	r0, r3
 80127e0:	f000 f8ed 	bl	80129be <_ZSt3getILj0EJP7StepgenSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80127e4:	4603      	mov	r3, r0
 80127e6:	4618      	mov	r0, r3
 80127e8:	3708      	adds	r7, #8
 80127ea:	46bd      	mov	sp, r7
 80127ec:	bd80      	pop	{r7, pc}

080127ee <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 80127ee:	b580      	push	{r7, lr}
 80127f0:	b082      	sub	sp, #8
 80127f2:	af00      	add	r7, sp, #0
 80127f4:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	4618      	mov	r0, r3
 80127fa:	f000 f8ed 	bl	80129d8 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE10_M_deleterEv>
 80127fe:	4603      	mov	r3, r0
 8012800:	4618      	mov	r0, r3
 8012802:	3708      	adds	r7, #8
 8012804:	46bd      	mov	sp, r7
 8012806:	bd80      	pop	{r7, pc}

08012808 <_ZSt4moveIRP7StepgenEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8012808:	b480      	push	{r7}
 801280a:	b083      	sub	sp, #12
 801280c:	af00      	add	r7, sp, #0
 801280e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	4618      	mov	r0, r3
 8012814:	370c      	adds	r7, #12
 8012816:	46bd      	mov	sp, r7
 8012818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801281c:	4770      	bx	lr
	...

08012820 <_ZN7StepgenD1Ev>:
 *
 * The Stepgen class is responsible for controlling a stepper motor by generating
 * pulses based on frequency commands received from a controller, as well as managing
 * the motor's direction and enable states.
 */
class Stepgen : public Module
 8012820:	b580      	push	{r7, lr}
 8012822:	b082      	sub	sp, #8
 8012824:	af00      	add	r7, sp, #0
 8012826:	6078      	str	r0, [r7, #4]
 8012828:	4a0d      	ldr	r2, [pc, #52]	@ (8012860 <_ZN7StepgenD1Ev+0x40>)
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	601a      	str	r2, [r3, #0]
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	33b8      	adds	r3, #184	@ 0xb8
 8012832:	4618      	mov	r0, r3
 8012834:	f7fb fa4b 	bl	800dcce <_ZN3PinD1Ev>
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	3378      	adds	r3, #120	@ 0x78
 801283c:	4618      	mov	r0, r3
 801283e:	f7fb fa46 	bl	800dcce <_ZN3PinD1Ev>
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	3338      	adds	r3, #56	@ 0x38
 8012846:	4618      	mov	r0, r3
 8012848:	f7fb fa41 	bl	800dcce <_ZN3PinD1Ev>
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	4618      	mov	r0, r3
 8012850:	f7fd fd6c 	bl	801032c <_ZN6ModuleD1Ev>
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	4618      	mov	r0, r3
 8012858:	3708      	adds	r7, #8
 801285a:	46bd      	mov	sp, r7
 801285c:	bd80      	pop	{r7, pc}
 801285e:	bf00      	nop
 8012860:	080268c8 	.word	0x080268c8

08012864 <_ZN7StepgenD0Ev>:
 8012864:	b580      	push	{r7, lr}
 8012866:	b082      	sub	sp, #8
 8012868:	af00      	add	r7, sp, #0
 801286a:	6078      	str	r0, [r7, #4]
 801286c:	6878      	ldr	r0, [r7, #4]
 801286e:	f7ff ffd7 	bl	8012820 <_ZN7StepgenD1Ev>
 8012872:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8012876:	6878      	ldr	r0, [r7, #4]
 8012878:	f011 fae1 	bl	8023e3e <_ZdlPvj>
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	4618      	mov	r0, r3
 8012880:	3708      	adds	r7, #8
 8012882:	46bd      	mov	sp, r7
 8012884:	bd80      	pop	{r7, pc}

08012886 <_ZNKSt14default_deleteI7StepgenEclEPS0_>:
      operator()(_Tp* __ptr) const
 8012886:	b580      	push	{r7, lr}
 8012888:	b082      	sub	sp, #8
 801288a:	af00      	add	r7, sp, #0
 801288c:	6078      	str	r0, [r7, #4]
 801288e:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8012890:	683b      	ldr	r3, [r7, #0]
 8012892:	2b00      	cmp	r3, #0
 8012894:	d004      	beq.n	80128a0 <_ZNKSt14default_deleteI7StepgenEclEPS0_+0x1a>
 8012896:	681a      	ldr	r2, [r3, #0]
 8012898:	3204      	adds	r2, #4
 801289a:	6812      	ldr	r2, [r2, #0]
 801289c:	4618      	mov	r0, r3
 801289e:	4790      	blx	r2
      }
 80128a0:	bf00      	nop
 80128a2:	3708      	adds	r7, #8
 80128a4:	46bd      	mov	sp, r7
 80128a6:	bd80      	pop	{r7, pc}

080128a8 <_ZSt4moveIRSt10unique_ptrI7StepgenSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 80128a8:	b480      	push	{r7}
 80128aa:	b083      	sub	sp, #12
 80128ac:	af00      	add	r7, sp, #0
 80128ae:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	4618      	mov	r0, r3
 80128b4:	370c      	adds	r7, #12
 80128b6:	46bd      	mov	sp, r7
 80128b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128bc:	4770      	bx	lr

080128be <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>:
	__shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 80128be:	b580      	push	{r7, lr}
 80128c0:	b084      	sub	sp, #16
 80128c2:	af00      	add	r7, sp, #0
 80128c4:	6078      	str	r0, [r7, #4]
 80128c6:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r.get()), _M_refcount()
 80128c8:	6838      	ldr	r0, [r7, #0]
 80128ca:	f000 f892 	bl	80129f2 <_ZNKSt10unique_ptrI7StepgenSt14default_deleteIS0_EE3getEv>
 80128ce:	4602      	mov	r2, r0
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	601a      	str	r2, [r3, #0]
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	3304      	adds	r3, #4
 80128d8:	4618      	mov	r0, r3
 80128da:	f7f9 f92e 	bl	800bb3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  auto __raw = __to_address(__r.get());
 80128de:	6838      	ldr	r0, [r7, #0]
 80128e0:	f000 f887 	bl	80129f2 <_ZNKSt10unique_ptrI7StepgenSt14default_deleteIS0_EE3getEv>
 80128e4:	4603      	mov	r3, r0
 80128e6:	4618      	mov	r0, r3
 80128e8:	f000 f890 	bl	8012a0c <_ZSt12__to_addressI7StepgenEPT_S2_>
 80128ec:	60f8      	str	r0, [r7, #12]
	  _M_refcount = __shared_count<_Lp>(std::move(__r));
 80128ee:	6838      	ldr	r0, [r7, #0]
 80128f0:	f7ff ffda 	bl	80128a8 <_ZSt4moveIRSt10unique_ptrI7StepgenSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 80128f4:	4602      	mov	r2, r0
 80128f6:	f107 0308 	add.w	r3, r7, #8
 80128fa:	4611      	mov	r1, r2
 80128fc:	4618      	mov	r0, r3
 80128fe:	f000 f890 	bl	8012a22 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	3304      	adds	r3, #4
 8012906:	f107 0208 	add.w	r2, r7, #8
 801290a:	4611      	mov	r1, r2
 801290c:	4618      	mov	r0, r3
 801290e:	f7fb facb 	bl	800dea8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 8012912:	f107 0308 	add.w	r3, r7, #8
 8012916:	4618      	mov	r0, r3
 8012918:	f7f8 f8df 	bl	800aada <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  _M_enable_shared_from_this_with(__raw);
 801291c:	68f9      	ldr	r1, [r7, #12]
 801291e:	6878      	ldr	r0, [r7, #4]
 8012920:	f000 f8c1 	bl	8012aa6 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI7StepgenS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	4618      	mov	r0, r3
 8012928:	3710      	adds	r7, #16
 801292a:	46bd      	mov	sp, r7
 801292c:	bd80      	pop	{r7, pc}

0801292e <_ZN11ArduinoJson8V730HB226detail7forwardIRA13_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 801292e:	b480      	push	{r7}
 8012930:	b083      	sub	sp, #12
 8012932:	af00      	add	r7, sp, #0
 8012934:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8012936:	687b      	ldr	r3, [r7, #4]
}
 8012938:	4618      	mov	r0, r3
 801293a:	370c      	adds	r7, #12
 801293c:	46bd      	mov	sp, r7
 801293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012942:	4770      	bx	lr

08012944 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA13_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 8012944:	b580      	push	{r7, lr}
 8012946:	b082      	sub	sp, #8
 8012948:	af00      	add	r7, sp, #0
 801294a:	6078      	str	r0, [r7, #4]
 801294c:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 801294e:	2301      	movs	r3, #1
 8012950:	220c      	movs	r2, #12
 8012952:	6839      	ldr	r1, [r7, #0]
 8012954:	6878      	ldr	r0, [r7, #4]
 8012956:	f7f1 fb01 	bl	8003f5c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 801295a:	6878      	ldr	r0, [r7, #4]
 801295c:	3708      	adds	r7, #8
 801295e:	46bd      	mov	sp, r7
 8012960:	bd80      	pop	{r7, pc}

08012962 <_ZN11ArduinoJson8V730HB226detail7forwardIRA14_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8012962:	b480      	push	{r7}
 8012964:	b083      	sub	sp, #12
 8012966:	af00      	add	r7, sp, #0
 8012968:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 801296a:	687b      	ldr	r3, [r7, #4]
}
 801296c:	4618      	mov	r0, r3
 801296e:	370c      	adds	r7, #12
 8012970:	46bd      	mov	sp, r7
 8012972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012976:	4770      	bx	lr

08012978 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA14_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 8012978:	b580      	push	{r7, lr}
 801297a:	b082      	sub	sp, #8
 801297c:	af00      	add	r7, sp, #0
 801297e:	6078      	str	r0, [r7, #4]
 8012980:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 8012982:	2301      	movs	r3, #1
 8012984:	220d      	movs	r2, #13
 8012986:	6839      	ldr	r1, [r7, #0]
 8012988:	6878      	ldr	r0, [r7, #4]
 801298a:	f7f1 fae7 	bl	8003f5c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 801298e:	6878      	ldr	r0, [r7, #4]
 8012990:	3708      	adds	r7, #8
 8012992:	46bd      	mov	sp, r7
 8012994:	bd80      	pop	{r7, pc}

08012996 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8012996:	b590      	push	{r4, r7, lr}
 8012998:	b083      	sub	sp, #12
 801299a:	af00      	add	r7, sp, #0
 801299c:	6078      	str	r0, [r7, #4]
 801299e:	6039      	str	r1, [r7, #0]
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	4618      	mov	r0, r3
 80129a4:	f000 f88a 	bl	8012abc <_ZNSt5tupleIJP7StepgenSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 80129a8:	683c      	ldr	r4, [r7, #0]
 80129aa:	6878      	ldr	r0, [r7, #4]
 80129ac:	f7ff ff12 	bl	80127d4 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 80129b0:	4603      	mov	r3, r0
 80129b2:	601c      	str	r4, [r3, #0]
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	4618      	mov	r0, r3
 80129b8:	370c      	adds	r7, #12
 80129ba:	46bd      	mov	sp, r7
 80129bc:	bd90      	pop	{r4, r7, pc}

080129be <_ZSt3getILj0EJP7StepgenSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80129be:	b580      	push	{r7, lr}
 80129c0:	b082      	sub	sp, #8
 80129c2:	af00      	add	r7, sp, #0
 80129c4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	4618      	mov	r0, r3
 80129ca:	f000 f884 	bl	8012ad6 <_ZSt12__get_helperILj0EP7StepgenJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80129ce:	4603      	mov	r3, r0
 80129d0:	4618      	mov	r0, r3
 80129d2:	3708      	adds	r7, #8
 80129d4:	46bd      	mov	sp, r7
 80129d6:	bd80      	pop	{r7, pc}

080129d8 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 80129d8:	b580      	push	{r7, lr}
 80129da:	b082      	sub	sp, #8
 80129dc:	af00      	add	r7, sp, #0
 80129de:	6078      	str	r0, [r7, #4]
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	4618      	mov	r0, r3
 80129e4:	f000 f883 	bl	8012aee <_ZSt3getILj1EJP7StepgenSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80129e8:	4603      	mov	r3, r0
 80129ea:	4618      	mov	r0, r3
 80129ec:	3708      	adds	r7, #8
 80129ee:	46bd      	mov	sp, r7
 80129f0:	bd80      	pop	{r7, pc}

080129f2 <_ZNKSt10unique_ptrI7StepgenSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 80129f2:	b580      	push	{r7, lr}
 80129f4:	b082      	sub	sp, #8
 80129f6:	af00      	add	r7, sp, #0
 80129f8:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	4618      	mov	r0, r3
 80129fe:	f000 f882 	bl	8012b06 <_ZNKSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 8012a02:	4603      	mov	r3, r0
 8012a04:	4618      	mov	r0, r3
 8012a06:	3708      	adds	r7, #8
 8012a08:	46bd      	mov	sp, r7
 8012a0a:	bd80      	pop	{r7, pc}

08012a0c <_ZSt12__to_addressI7StepgenEPT_S2_>:
    __to_address(_Tp* __ptr) noexcept
 8012a0c:	b480      	push	{r7}
 8012a0e:	b083      	sub	sp, #12
 8012a10:	af00      	add	r7, sp, #0
 8012a12:	6078      	str	r0, [r7, #4]
      return __ptr;
 8012a14:	687b      	ldr	r3, [r7, #4]
    }
 8012a16:	4618      	mov	r0, r3
 8012a18:	370c      	adds	r7, #12
 8012a1a:	46bd      	mov	sp, r7
 8012a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a20:	4770      	bx	lr

08012a22 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>:
	__shared_count(std::unique_ptr<_Tp, _Del>&& __r) : _M_pi(0)
 8012a22:	b580      	push	{r7, lr}
 8012a24:	b086      	sub	sp, #24
 8012a26:	af00      	add	r7, sp, #0
 8012a28:	6078      	str	r0, [r7, #4]
 8012a2a:	6039      	str	r1, [r7, #0]
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	2200      	movs	r2, #0
 8012a30:	601a      	str	r2, [r3, #0]
	  if (__r.get() == nullptr)
 8012a32:	6838      	ldr	r0, [r7, #0]
 8012a34:	f7ff ffdd 	bl	80129f2 <_ZNKSt10unique_ptrI7StepgenSt14default_deleteIS0_EE3getEv>
 8012a38:	4603      	mov	r3, r0
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	bf0c      	ite	eq
 8012a3e:	2301      	moveq	r3, #1
 8012a40:	2300      	movne	r3, #0
 8012a42:	b2db      	uxtb	r3, r3
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d128      	bne.n	8012a9a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x78>
	  _Alloc __a;
 8012a48:	f107 030c 	add.w	r3, r7, #12
 8012a4c:	4618      	mov	r0, r3
 8012a4e:	f000 f868 	bl	8012b22 <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
	  _Sp_cd_type* __mem = _Alloc_traits::allocate(__a, 1);
 8012a52:	f107 030c 	add.w	r3, r7, #12
 8012a56:	2101      	movs	r1, #1
 8012a58:	4618      	mov	r0, r3
 8012a5a:	f000 f87a 	bl	8012b52 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>
 8012a5e:	6178      	str	r0, [r7, #20]
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 8012a60:	6838      	ldr	r0, [r7, #0]
 8012a62:	f000 f885 	bl	8012b70 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE7releaseEv>
 8012a66:	4603      	mov	r3, r0
 8012a68:	613b      	str	r3, [r7, #16]
				   std::forward<_Del>(__r.get_deleter()));
 8012a6a:	6838      	ldr	r0, [r7, #0]
 8012a6c:	f7ff febf 	bl	80127ee <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE11get_deleterEv>
 8012a70:	4603      	mov	r3, r0
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 8012a72:	4618      	mov	r0, r3
 8012a74:	f000 f889 	bl	8012b8a <_ZSt7forwardISt14default_deleteI7StepgenEEOT_RNSt16remove_referenceIS3_E4typeE>
 8012a78:	4603      	mov	r3, r0
 8012a7a:	f107 0210 	add.w	r2, r7, #16
 8012a7e:	f107 000c 	add.w	r0, r7, #12
 8012a82:	6979      	ldr	r1, [r7, #20]
 8012a84:	f000 f88c 	bl	8012ba0 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>
	  _M_pi = __mem;
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	697a      	ldr	r2, [r7, #20]
 8012a8c:	601a      	str	r2, [r3, #0]
	}
 8012a8e:	f107 030c 	add.w	r3, r7, #12
 8012a92:	4618      	mov	r0, r3
 8012a94:	f000 f851 	bl	8012b3a <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8012a98:	e000      	b.n	8012a9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x7a>
	    return;
 8012a9a:	bf00      	nop
	}
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	4618      	mov	r0, r3
 8012aa0:	3718      	adds	r7, #24
 8012aa2:	46bd      	mov	sp, r7
 8012aa4:	bd80      	pop	{r7, pc}

08012aa6 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI7StepgenS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 8012aa6:	b480      	push	{r7}
 8012aa8:	b083      	sub	sp, #12
 8012aaa:	af00      	add	r7, sp, #0
 8012aac:	6078      	str	r0, [r7, #4]
 8012aae:	6039      	str	r1, [r7, #0]
	{ }
 8012ab0:	bf00      	nop
 8012ab2:	370c      	adds	r7, #12
 8012ab4:	46bd      	mov	sp, r7
 8012ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aba:	4770      	bx	lr

08012abc <_ZNSt5tupleIJP7StepgenSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 8012abc:	b580      	push	{r7, lr}
 8012abe:	b082      	sub	sp, #8
 8012ac0:	af00      	add	r7, sp, #0
 8012ac2:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	4618      	mov	r0, r3
 8012ac8:	f000 f882 	bl	8012bd0 <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEEC1Ev>
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	4618      	mov	r0, r3
 8012ad0:	3708      	adds	r7, #8
 8012ad2:	46bd      	mov	sp, r7
 8012ad4:	bd80      	pop	{r7, pc}

08012ad6 <_ZSt12__get_helperILj0EP7StepgenJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8012ad6:	b580      	push	{r7, lr}
 8012ad8:	b082      	sub	sp, #8
 8012ada:	af00      	add	r7, sp, #0
 8012adc:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8012ade:	6878      	ldr	r0, [r7, #4]
 8012ae0:	f000 f886 	bl	8012bf0 <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEE7_M_headERS4_>
 8012ae4:	4603      	mov	r3, r0
 8012ae6:	4618      	mov	r0, r3
 8012ae8:	3708      	adds	r7, #8
 8012aea:	46bd      	mov	sp, r7
 8012aec:	bd80      	pop	{r7, pc}

08012aee <_ZSt3getILj1EJP7StepgenSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8012aee:	b580      	push	{r7, lr}
 8012af0:	b082      	sub	sp, #8
 8012af2:	af00      	add	r7, sp, #0
 8012af4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8012af6:	6878      	ldr	r0, [r7, #4]
 8012af8:	f000 f887 	bl	8012c0a <_ZSt12__get_helperILj1ESt14default_deleteI7StepgenEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8012afc:	4603      	mov	r3, r0
 8012afe:	4618      	mov	r0, r3
 8012b00:	3708      	adds	r7, #8
 8012b02:	46bd      	mov	sp, r7
 8012b04:	bd80      	pop	{r7, pc}

08012b06 <_ZNKSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 8012b06:	b580      	push	{r7, lr}
 8012b08:	b082      	sub	sp, #8
 8012b0a:	af00      	add	r7, sp, #0
 8012b0c:	6078      	str	r0, [r7, #4]
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	4618      	mov	r0, r3
 8012b12:	f000 f886 	bl	8012c22 <_ZSt3getILj0EJP7StepgenSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8012b16:	4603      	mov	r3, r0
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	4618      	mov	r0, r3
 8012b1c:	3708      	adds	r7, #8
 8012b1e:	46bd      	mov	sp, r7
 8012b20:	bd80      	pop	{r7, pc}

08012b22 <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8012b22:	b580      	push	{r7, lr}
 8012b24:	b082      	sub	sp, #8
 8012b26:	af00      	add	r7, sp, #0
 8012b28:	6078      	str	r0, [r7, #4]
 8012b2a:	6878      	ldr	r0, [r7, #4]
 8012b2c:	f000 f886 	bl	8012c3c <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	4618      	mov	r0, r3
 8012b34:	3708      	adds	r7, #8
 8012b36:	46bd      	mov	sp, r7
 8012b38:	bd80      	pop	{r7, pc}

08012b3a <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8012b3a:	b580      	push	{r7, lr}
 8012b3c:	b082      	sub	sp, #8
 8012b3e:	af00      	add	r7, sp, #0
 8012b40:	6078      	str	r0, [r7, #4]
 8012b42:	6878      	ldr	r0, [r7, #4]
 8012b44:	f000 f885 	bl	8012c52 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	4618      	mov	r0, r3
 8012b4c:	3708      	adds	r7, #8
 8012b4e:	46bd      	mov	sp, r7
 8012b50:	bd80      	pop	{r7, pc}

08012b52 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 8012b52:	b580      	push	{r7, lr}
 8012b54:	b082      	sub	sp, #8
 8012b56:	af00      	add	r7, sp, #0
 8012b58:	6078      	str	r0, [r7, #4]
 8012b5a:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8012b5c:	2200      	movs	r2, #0
 8012b5e:	6839      	ldr	r1, [r7, #0]
 8012b60:	6878      	ldr	r0, [r7, #4]
 8012b62:	f000 f881 	bl	8012c68 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 8012b66:	4603      	mov	r3, r0
 8012b68:	4618      	mov	r0, r3
 8012b6a:	3708      	adds	r7, #8
 8012b6c:	46bd      	mov	sp, r7
 8012b6e:	bd80      	pop	{r7, pc}

08012b70 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 8012b70:	b580      	push	{r7, lr}
 8012b72:	b082      	sub	sp, #8
 8012b74:	af00      	add	r7, sp, #0
 8012b76:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	4618      	mov	r0, r3
 8012b7c:	f000 f89e 	bl	8012cbc <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE7releaseEv>
 8012b80:	4603      	mov	r3, r0
 8012b82:	4618      	mov	r0, r3
 8012b84:	3708      	adds	r7, #8
 8012b86:	46bd      	mov	sp, r7
 8012b88:	bd80      	pop	{r7, pc}

08012b8a <_ZSt7forwardISt14default_deleteI7StepgenEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8012b8a:	b480      	push	{r7}
 8012b8c:	b083      	sub	sp, #12
 8012b8e:	af00      	add	r7, sp, #0
 8012b90:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	4618      	mov	r0, r3
 8012b96:	370c      	adds	r7, #12
 8012b98:	46bd      	mov	sp, r7
 8012b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b9e:	4770      	bx	lr

08012ba0 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8012ba0:	b590      	push	{r4, r7, lr}
 8012ba2:	b085      	sub	sp, #20
 8012ba4:	af00      	add	r7, sp, #0
 8012ba6:	60f8      	str	r0, [r7, #12]
 8012ba8:	60b9      	str	r1, [r7, #8]
 8012baa:	607a      	str	r2, [r7, #4]
 8012bac:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8012bae:	6878      	ldr	r0, [r7, #4]
 8012bb0:	f000 f899 	bl	8012ce6 <_ZSt7forwardIP7StepgenEOT_RNSt16remove_referenceIS2_E4typeE>
 8012bb4:	4604      	mov	r4, r0
 8012bb6:	6838      	ldr	r0, [r7, #0]
 8012bb8:	f7ff ffe7 	bl	8012b8a <_ZSt7forwardISt14default_deleteI7StepgenEEOT_RNSt16remove_referenceIS3_E4typeE>
 8012bbc:	4603      	mov	r3, r0
 8012bbe:	4622      	mov	r2, r4
 8012bc0:	68b9      	ldr	r1, [r7, #8]
 8012bc2:	68f8      	ldr	r0, [r7, #12]
 8012bc4:	f000 f89a 	bl	8012cfc <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>
	}
 8012bc8:	bf00      	nop
 8012bca:	3714      	adds	r7, #20
 8012bcc:	46bd      	mov	sp, r7
 8012bce:	bd90      	pop	{r4, r7, pc}

08012bd0 <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8012bd0:	b580      	push	{r7, lr}
 8012bd2:	b082      	sub	sp, #8
 8012bd4:	af00      	add	r7, sp, #0
 8012bd6:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8012bd8:	6878      	ldr	r0, [r7, #4]
 8012bda:	f000 f8ad 	bl	8012d38 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7StepgenEEEC1Ev>
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	4618      	mov	r0, r3
 8012be2:	f000 f8b5 	bl	8012d50 <_ZNSt10_Head_baseILj0EP7StepgenLb0EEC1Ev>
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	4618      	mov	r0, r3
 8012bea:	3708      	adds	r7, #8
 8012bec:	46bd      	mov	sp, r7
 8012bee:	bd80      	pop	{r7, pc}

08012bf0 <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8012bf0:	b580      	push	{r7, lr}
 8012bf2:	b082      	sub	sp, #8
 8012bf4:	af00      	add	r7, sp, #0
 8012bf6:	6078      	str	r0, [r7, #4]
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	4618      	mov	r0, r3
 8012bfc:	f000 f8b6 	bl	8012d6c <_ZNSt10_Head_baseILj0EP7StepgenLb0EE7_M_headERS2_>
 8012c00:	4603      	mov	r3, r0
 8012c02:	4618      	mov	r0, r3
 8012c04:	3708      	adds	r7, #8
 8012c06:	46bd      	mov	sp, r7
 8012c08:	bd80      	pop	{r7, pc}

08012c0a <_ZSt12__get_helperILj1ESt14default_deleteI7StepgenEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8012c0a:	b580      	push	{r7, lr}
 8012c0c:	b082      	sub	sp, #8
 8012c0e:	af00      	add	r7, sp, #0
 8012c10:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8012c12:	6878      	ldr	r0, [r7, #4]
 8012c14:	f000 f8b5 	bl	8012d82 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7StepgenEEE7_M_headERS3_>
 8012c18:	4603      	mov	r3, r0
 8012c1a:	4618      	mov	r0, r3
 8012c1c:	3708      	adds	r7, #8
 8012c1e:	46bd      	mov	sp, r7
 8012c20:	bd80      	pop	{r7, pc}

08012c22 <_ZSt3getILj0EJP7StepgenSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 8012c22:	b580      	push	{r7, lr}
 8012c24:	b082      	sub	sp, #8
 8012c26:	af00      	add	r7, sp, #0
 8012c28:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	4618      	mov	r0, r3
 8012c2e:	f000 f8b4 	bl	8012d9a <_ZSt12__get_helperILj0EP7StepgenJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8012c32:	4603      	mov	r3, r0
 8012c34:	4618      	mov	r0, r3
 8012c36:	3708      	adds	r7, #8
 8012c38:	46bd      	mov	sp, r7
 8012c3a:	bd80      	pop	{r7, pc}

08012c3c <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8012c3c:	b480      	push	{r7}
 8012c3e:	b083      	sub	sp, #12
 8012c40:	af00      	add	r7, sp, #0
 8012c42:	6078      	str	r0, [r7, #4]
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	4618      	mov	r0, r3
 8012c48:	370c      	adds	r7, #12
 8012c4a:	46bd      	mov	sp, r7
 8012c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c50:	4770      	bx	lr

08012c52 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8012c52:	b480      	push	{r7}
 8012c54:	b083      	sub	sp, #12
 8012c56:	af00      	add	r7, sp, #0
 8012c58:	6078      	str	r0, [r7, #4]
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	4618      	mov	r0, r3
 8012c5e:	370c      	adds	r7, #12
 8012c60:	46bd      	mov	sp, r7
 8012c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c66:	4770      	bx	lr

08012c68 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8012c68:	b580      	push	{r7, lr}
 8012c6a:	b084      	sub	sp, #16
 8012c6c:	af00      	add	r7, sp, #0
 8012c6e:	60f8      	str	r0, [r7, #12]
 8012c70:	60b9      	str	r1, [r7, #8]
 8012c72:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8012c74:	68f8      	ldr	r0, [r7, #12]
 8012c76:	f000 f89c 	bl	8012db2 <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 8012c7a:	4602      	mov	r2, r0
 8012c7c:	68bb      	ldr	r3, [r7, #8]
 8012c7e:	4293      	cmp	r3, r2
 8012c80:	bf8c      	ite	hi
 8012c82:	2301      	movhi	r3, #1
 8012c84:	2300      	movls	r3, #0
 8012c86:	b2db      	uxtb	r3, r3
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	bf14      	ite	ne
 8012c8c:	2301      	movne	r3, #1
 8012c8e:	2300      	moveq	r3, #0
 8012c90:	b2db      	uxtb	r3, r3
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d007      	beq.n	8012ca6 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8012c96:	68bb      	ldr	r3, [r7, #8]
 8012c98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012c9c:	d301      	bcc.n	8012ca2 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8012c9e:	f011 f8f5 	bl	8023e8c <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8012ca2:	f011 f8f0 	bl	8023e86 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8012ca6:	68bb      	ldr	r3, [r7, #8]
 8012ca8:	011b      	lsls	r3, r3, #4
 8012caa:	4618      	mov	r0, r3
 8012cac:	f011 f8d8 	bl	8023e60 <_Znwj>
 8012cb0:	4603      	mov	r3, r0
 8012cb2:	bf00      	nop
      }
 8012cb4:	4618      	mov	r0, r3
 8012cb6:	3710      	adds	r7, #16
 8012cb8:	46bd      	mov	sp, r7
 8012cba:	bd80      	pop	{r7, pc}

08012cbc <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 8012cbc:	b580      	push	{r7, lr}
 8012cbe:	b084      	sub	sp, #16
 8012cc0:	af00      	add	r7, sp, #0
 8012cc2:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8012cc4:	6878      	ldr	r0, [r7, #4]
 8012cc6:	f7ff fd85 	bl	80127d4 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 8012cca:	4603      	mov	r3, r0
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8012cd0:	6878      	ldr	r0, [r7, #4]
 8012cd2:	f7ff fd7f 	bl	80127d4 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 8012cd6:	4603      	mov	r3, r0
 8012cd8:	2200      	movs	r2, #0
 8012cda:	601a      	str	r2, [r3, #0]
	return __p;
 8012cdc:	68fb      	ldr	r3, [r7, #12]
      }
 8012cde:	4618      	mov	r0, r3
 8012ce0:	3710      	adds	r7, #16
 8012ce2:	46bd      	mov	sp, r7
 8012ce4:	bd80      	pop	{r7, pc}

08012ce6 <_ZSt7forwardIP7StepgenEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8012ce6:	b480      	push	{r7}
 8012ce8:	b083      	sub	sp, #12
 8012cea:	af00      	add	r7, sp, #0
 8012cec:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	4618      	mov	r0, r3
 8012cf2:	370c      	adds	r7, #12
 8012cf4:	46bd      	mov	sp, r7
 8012cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cfa:	4770      	bx	lr

08012cfc <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8012cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012cfe:	b085      	sub	sp, #20
 8012d00:	af00      	add	r7, sp, #0
 8012d02:	60f8      	str	r0, [r7, #12]
 8012d04:	60b9      	str	r1, [r7, #8]
 8012d06:	607a      	str	r2, [r7, #4]
 8012d08:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8012d0a:	68bb      	ldr	r3, [r7, #8]
 8012d0c:	4619      	mov	r1, r3
 8012d0e:	2010      	movs	r0, #16
 8012d10:	f7f6 fcf6 	bl	8009700 <_ZnwjPv>
 8012d14:	4605      	mov	r5, r0
 8012d16:	6878      	ldr	r0, [r7, #4]
 8012d18:	f7ff ffe5 	bl	8012ce6 <_ZSt7forwardIP7StepgenEOT_RNSt16remove_referenceIS2_E4typeE>
 8012d1c:	4603      	mov	r3, r0
 8012d1e:	681c      	ldr	r4, [r3, #0]
 8012d20:	6838      	ldr	r0, [r7, #0]
 8012d22:	f7ff ff32 	bl	8012b8a <_ZSt7forwardISt14default_deleteI7StepgenEEOT_RNSt16remove_referenceIS3_E4typeE>
 8012d26:	4632      	mov	r2, r6
 8012d28:	4621      	mov	r1, r4
 8012d2a:	4628      	mov	r0, r5
 8012d2c:	f000 f84e 	bl	8012dcc <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>
 8012d30:	bf00      	nop
 8012d32:	3714      	adds	r7, #20
 8012d34:	46bd      	mov	sp, r7
 8012d36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012d38 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7StepgenEEEC1Ev>:
      _Tuple_impl()
 8012d38:	b580      	push	{r7, lr}
 8012d3a:	b082      	sub	sp, #8
 8012d3c:	af00      	add	r7, sp, #0
 8012d3e:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8012d40:	6878      	ldr	r0, [r7, #4]
 8012d42:	f000 f865 	bl	8012e10 <_ZNSt10_Head_baseILj1ESt14default_deleteI7StepgenELb1EEC1Ev>
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	4618      	mov	r0, r3
 8012d4a:	3708      	adds	r7, #8
 8012d4c:	46bd      	mov	sp, r7
 8012d4e:	bd80      	pop	{r7, pc}

08012d50 <_ZNSt10_Head_baseILj0EP7StepgenLb0EEC1Ev>:
      constexpr _Head_base()
 8012d50:	b480      	push	{r7}
 8012d52:	b083      	sub	sp, #12
 8012d54:	af00      	add	r7, sp, #0
 8012d56:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	2200      	movs	r2, #0
 8012d5c:	601a      	str	r2, [r3, #0]
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	4618      	mov	r0, r3
 8012d62:	370c      	adds	r7, #12
 8012d64:	46bd      	mov	sp, r7
 8012d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d6a:	4770      	bx	lr

08012d6c <_ZNSt10_Head_baseILj0EP7StepgenLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8012d6c:	b480      	push	{r7}
 8012d6e:	b083      	sub	sp, #12
 8012d70:	af00      	add	r7, sp, #0
 8012d72:	6078      	str	r0, [r7, #4]
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	4618      	mov	r0, r3
 8012d78:	370c      	adds	r7, #12
 8012d7a:	46bd      	mov	sp, r7
 8012d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d80:	4770      	bx	lr

08012d82 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7StepgenEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8012d82:	b580      	push	{r7, lr}
 8012d84:	b082      	sub	sp, #8
 8012d86:	af00      	add	r7, sp, #0
 8012d88:	6078      	str	r0, [r7, #4]
 8012d8a:	6878      	ldr	r0, [r7, #4]
 8012d8c:	f000 f84b 	bl	8012e26 <_ZNSt10_Head_baseILj1ESt14default_deleteI7StepgenELb1EE7_M_headERS3_>
 8012d90:	4603      	mov	r3, r0
 8012d92:	4618      	mov	r0, r3
 8012d94:	3708      	adds	r7, #8
 8012d96:	46bd      	mov	sp, r7
 8012d98:	bd80      	pop	{r7, pc}

08012d9a <_ZSt12__get_helperILj0EP7StepgenJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8012d9a:	b580      	push	{r7, lr}
 8012d9c:	b082      	sub	sp, #8
 8012d9e:	af00      	add	r7, sp, #0
 8012da0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8012da2:	6878      	ldr	r0, [r7, #4]
 8012da4:	f000 f84a 	bl	8012e3c <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEE7_M_headERKS4_>
 8012da8:	4603      	mov	r3, r0
 8012daa:	4618      	mov	r0, r3
 8012dac:	3708      	adds	r7, #8
 8012dae:	46bd      	mov	sp, r7
 8012db0:	bd80      	pop	{r7, pc}

08012db2 <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8012db2:	b480      	push	{r7}
 8012db4:	b083      	sub	sp, #12
 8012db6:	af00      	add	r7, sp, #0
 8012db8:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8012dba:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      }
 8012dbe:	4618      	mov	r0, r3
 8012dc0:	370c      	adds	r7, #12
 8012dc2:	46bd      	mov	sp, r7
 8012dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dc8:	4770      	bx	lr
	...

08012dcc <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
 8012dcc:	b5b0      	push	{r4, r5, r7, lr}
 8012dce:	b086      	sub	sp, #24
 8012dd0:	af00      	add	r7, sp, #0
 8012dd2:	60f8      	str	r0, [r7, #12]
 8012dd4:	60b9      	str	r1, [r7, #8]
 8012dd6:	713a      	strb	r2, [r7, #4]
      : _M_impl(__p, std::move(__d), _Alloc()) { }
 8012dd8:	68fb      	ldr	r3, [r7, #12]
 8012dda:	4618      	mov	r0, r3
 8012ddc:	f7f9 fd92 	bl	800c904 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8012de0:	4a0a      	ldr	r2, [pc, #40]	@ (8012e0c <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_+0x40>)
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	601a      	str	r2, [r3, #0]
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	f103 040c 	add.w	r4, r3, #12
 8012dec:	1d3b      	adds	r3, r7, #4
 8012dee:	4618      	mov	r0, r3
 8012df0:	f000 f831 	bl	8012e56 <_ZSt4moveIRSt14default_deleteI7StepgenEEONSt16remove_referenceIT_E4typeEOS5_>
 8012df4:	f107 0314 	add.w	r3, r7, #20
 8012df8:	462a      	mov	r2, r5
 8012dfa:	68b9      	ldr	r1, [r7, #8]
 8012dfc:	4620      	mov	r0, r4
 8012dfe:	f000 f835 	bl	8012e6c <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	4618      	mov	r0, r3
 8012e06:	3718      	adds	r7, #24
 8012e08:	46bd      	mov	sp, r7
 8012e0a:	bdb0      	pop	{r4, r5, r7, pc}
 8012e0c:	080268ac 	.word	0x080268ac

08012e10 <_ZNSt10_Head_baseILj1ESt14default_deleteI7StepgenELb1EEC1Ev>:
      constexpr _Head_base()
 8012e10:	b480      	push	{r7}
 8012e12:	b083      	sub	sp, #12
 8012e14:	af00      	add	r7, sp, #0
 8012e16:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	4618      	mov	r0, r3
 8012e1c:	370c      	adds	r7, #12
 8012e1e:	46bd      	mov	sp, r7
 8012e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e24:	4770      	bx	lr

08012e26 <_ZNSt10_Head_baseILj1ESt14default_deleteI7StepgenELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8012e26:	b480      	push	{r7}
 8012e28:	b083      	sub	sp, #12
 8012e2a:	af00      	add	r7, sp, #0
 8012e2c:	6078      	str	r0, [r7, #4]
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	4618      	mov	r0, r3
 8012e32:	370c      	adds	r7, #12
 8012e34:	46bd      	mov	sp, r7
 8012e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e3a:	4770      	bx	lr

08012e3c <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8012e3c:	b580      	push	{r7, lr}
 8012e3e:	b082      	sub	sp, #8
 8012e40:	af00      	add	r7, sp, #0
 8012e42:	6078      	str	r0, [r7, #4]
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	4618      	mov	r0, r3
 8012e48:	f000 f82c 	bl	8012ea4 <_ZNSt10_Head_baseILj0EP7StepgenLb0EE7_M_headERKS2_>
 8012e4c:	4603      	mov	r3, r0
 8012e4e:	4618      	mov	r0, r3
 8012e50:	3708      	adds	r7, #8
 8012e52:	46bd      	mov	sp, r7
 8012e54:	bd80      	pop	{r7, pc}

08012e56 <_ZSt4moveIRSt14default_deleteI7StepgenEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8012e56:	b480      	push	{r7}
 8012e58:	b083      	sub	sp, #12
 8012e5a:	af00      	add	r7, sp, #0
 8012e5c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	4618      	mov	r0, r3
 8012e62:	370c      	adds	r7, #12
 8012e64:	46bd      	mov	sp, r7
 8012e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e6a:	4770      	bx	lr

08012e6c <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8012e6c:	b580      	push	{r7, lr}
 8012e6e:	b084      	sub	sp, #16
 8012e70:	af00      	add	r7, sp, #0
 8012e72:	60f8      	str	r0, [r7, #12]
 8012e74:	60b9      	str	r1, [r7, #8]
 8012e76:	713a      	strb	r2, [r7, #4]
 8012e78:	603b      	str	r3, [r7, #0]
	: _Del_base(std::move(__d)), _Alloc_base(__a), _M_ptr(__p)
 8012e7a:	1d3b      	adds	r3, r7, #4
 8012e7c:	4618      	mov	r0, r3
 8012e7e:	f7ff ffea 	bl	8012e56 <_ZSt4moveIRSt14default_deleteI7StepgenEEONSt16remove_referenceIT_E4typeEOS5_>
 8012e82:	4603      	mov	r3, r0
 8012e84:	4619      	mov	r1, r3
 8012e86:	68f8      	ldr	r0, [r7, #12]
 8012e88:	f000 f817 	bl	8012eba <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI7StepgenELb1EEC1EOS2_>
 8012e8c:	6839      	ldr	r1, [r7, #0]
 8012e8e:	68f8      	ldr	r0, [r7, #12]
 8012e90:	f7fb fd6a 	bl	800e968 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EEC1ERKS0_>
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	68ba      	ldr	r2, [r7, #8]
 8012e98:	601a      	str	r2, [r3, #0]
	{ }
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	4618      	mov	r0, r3
 8012e9e:	3710      	adds	r7, #16
 8012ea0:	46bd      	mov	sp, r7
 8012ea2:	bd80      	pop	{r7, pc}

08012ea4 <_ZNSt10_Head_baseILj0EP7StepgenLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8012ea4:	b480      	push	{r7}
 8012ea6:	b083      	sub	sp, #12
 8012ea8:	af00      	add	r7, sp, #0
 8012eaa:	6078      	str	r0, [r7, #4]
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	4618      	mov	r0, r3
 8012eb0:	370c      	adds	r7, #12
 8012eb2:	46bd      	mov	sp, r7
 8012eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eb8:	4770      	bx	lr

08012eba <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI7StepgenELb1EEC1EOS2_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _Tp(std::move(__tp)) { }
 8012eba:	b580      	push	{r7, lr}
 8012ebc:	b082      	sub	sp, #8
 8012ebe:	af00      	add	r7, sp, #0
 8012ec0:	6078      	str	r0, [r7, #4]
 8012ec2:	6039      	str	r1, [r7, #0]
 8012ec4:	6838      	ldr	r0, [r7, #0]
 8012ec6:	f7ff ffc6 	bl	8012e56 <_ZSt4moveIRSt14default_deleteI7StepgenEEONSt16remove_referenceIT_E4typeEOS5_>
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	4618      	mov	r0, r3
 8012ece:	3708      	adds	r7, #8
 8012ed0:	46bd      	mov	sp, r7
 8012ed2:	bd80      	pop	{r7, pc}

08012ed4 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 8012ed4:	b580      	push	{r7, lr}
 8012ed6:	b082      	sub	sp, #8
 8012ed8:	af00      	add	r7, sp, #0
 8012eda:	6078      	str	r0, [r7, #4]
 8012edc:	4a05      	ldr	r2, [pc, #20]	@ (8012ef4 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	601a      	str	r2, [r3, #0]
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	4618      	mov	r0, r3
 8012ee6:	f7f8 f903 	bl	800b0f0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	4618      	mov	r0, r3
 8012eee:	3708      	adds	r7, #8
 8012ef0:	46bd      	mov	sp, r7
 8012ef2:	bd80      	pop	{r7, pc}
 8012ef4:	080268ac 	.word	0x080268ac

08012ef8 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 8012ef8:	b580      	push	{r7, lr}
 8012efa:	b082      	sub	sp, #8
 8012efc:	af00      	add	r7, sp, #0
 8012efe:	6078      	str	r0, [r7, #4]
 8012f00:	6878      	ldr	r0, [r7, #4]
 8012f02:	f7ff ffe7 	bl	8012ed4 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8012f06:	2110      	movs	r1, #16
 8012f08:	6878      	ldr	r0, [r7, #4]
 8012f0a:	f010 ff98 	bl	8023e3e <_ZdlPvj>
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	4618      	mov	r0, r3
 8012f12:	3708      	adds	r7, #8
 8012f14:	46bd      	mov	sp, r7
 8012f16:	bd80      	pop	{r7, pc}

08012f18 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8012f18:	b580      	push	{r7, lr}
 8012f1a:	b082      	sub	sp, #8
 8012f1c:	af00      	add	r7, sp, #0
 8012f1e:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	330c      	adds	r3, #12
 8012f24:	4618      	mov	r0, r3
 8012f26:	f000 f83f 	bl	8012fa8 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>
 8012f2a:	4602      	mov	r2, r0
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	68db      	ldr	r3, [r3, #12]
 8012f30:	4619      	mov	r1, r3
 8012f32:	4610      	mov	r0, r2
 8012f34:	f7ff fca7 	bl	8012886 <_ZNKSt14default_deleteI7StepgenEclEPS0_>
 8012f38:	bf00      	nop
 8012f3a:	3708      	adds	r7, #8
 8012f3c:	46bd      	mov	sp, r7
 8012f3e:	bd80      	pop	{r7, pc}

08012f40 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8012f40:	b580      	push	{r7, lr}
 8012f42:	b086      	sub	sp, #24
 8012f44:	af00      	add	r7, sp, #0
 8012f46:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	330c      	adds	r3, #12
 8012f4c:	4618      	mov	r0, r3
 8012f4e:	f000 f837 	bl	8012fc0 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 8012f52:	4602      	mov	r2, r0
 8012f54:	f107 0314 	add.w	r3, r7, #20
 8012f58:	4611      	mov	r1, r2
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	f000 f83c 	bl	8012fd8 <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8012f60:	f107 0114 	add.w	r1, r7, #20
 8012f64:	f107 030c 	add.w	r3, r7, #12
 8012f68:	687a      	ldr	r2, [r7, #4]
 8012f6a:	4618      	mov	r0, r3
 8012f6c:	f000 f841 	bl	8012ff2 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>
	this->~_Sp_counted_deleter();
 8012f70:	6878      	ldr	r0, [r7, #4]
 8012f72:	f7ff ffaf 	bl	8012ed4 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 8012f76:	f107 030c 	add.w	r3, r7, #12
 8012f7a:	4618      	mov	r0, r3
 8012f7c:	f000 f84d 	bl	801301a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 8012f80:	f107 0314 	add.w	r3, r7, #20
 8012f84:	4618      	mov	r0, r3
 8012f86:	f7ff fdd8 	bl	8012b3a <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8012f8a:	3718      	adds	r7, #24
 8012f8c:	46bd      	mov	sp, r7
 8012f8e:	bd80      	pop	{r7, pc}

08012f90 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const type_info& __ti [[__gnu__::__unused__]]) noexcept
 8012f90:	b480      	push	{r7}
 8012f92:	b083      	sub	sp, #12
 8012f94:	af00      	add	r7, sp, #0
 8012f96:	6078      	str	r0, [r7, #4]
 8012f98:	6039      	str	r1, [r7, #0]
        return nullptr;
 8012f9a:	2300      	movs	r3, #0
      }
 8012f9c:	4618      	mov	r0, r3
 8012f9e:	370c      	adds	r7, #12
 8012fa0:	46bd      	mov	sp, r7
 8012fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fa6:	4770      	bx	lr

08012fa8 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 8012fa8:	b580      	push	{r7, lr}
 8012faa:	b082      	sub	sp, #8
 8012fac:	af00      	add	r7, sp, #0
 8012fae:	6078      	str	r0, [r7, #4]
 8012fb0:	6878      	ldr	r0, [r7, #4]
 8012fb2:	f000 f847 	bl	8013044 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI7StepgenELb1EE6_S_getERS3_>
 8012fb6:	4603      	mov	r3, r0
 8012fb8:	4618      	mov	r0, r3
 8012fba:	3708      	adds	r7, #8
 8012fbc:	46bd      	mov	sp, r7
 8012fbe:	bd80      	pop	{r7, pc}

08012fc0 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 8012fc0:	b580      	push	{r7, lr}
 8012fc2:	b082      	sub	sp, #8
 8012fc4:	af00      	add	r7, sp, #0
 8012fc6:	6078      	str	r0, [r7, #4]
 8012fc8:	6878      	ldr	r0, [r7, #4]
 8012fca:	f7fb fd9c 	bl	800eb06 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EE6_S_getERS1_>
 8012fce:	4603      	mov	r3, r0
 8012fd0:	4618      	mov	r0, r3
 8012fd2:	3708      	adds	r7, #8
 8012fd4:	46bd      	mov	sp, r7
 8012fd6:	bd80      	pop	{r7, pc}

08012fd8 <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8012fd8:	b580      	push	{r7, lr}
 8012fda:	b082      	sub	sp, #8
 8012fdc:	af00      	add	r7, sp, #0
 8012fde:	6078      	str	r0, [r7, #4]
 8012fe0:	6039      	str	r1, [r7, #0]
 8012fe2:	6878      	ldr	r0, [r7, #4]
 8012fe4:	f7ff fe2a 	bl	8012c3c <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	4618      	mov	r0, r3
 8012fec:	3708      	adds	r7, #8
 8012fee:	46bd      	mov	sp, r7
 8012ff0:	bd80      	pop	{r7, pc}

08012ff2 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8012ff2:	b580      	push	{r7, lr}
 8012ff4:	b084      	sub	sp, #16
 8012ff6:	af00      	add	r7, sp, #0
 8012ff8:	60f8      	str	r0, [r7, #12]
 8012ffa:	60b9      	str	r1, [r7, #8]
 8012ffc:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8012ffe:	68b8      	ldr	r0, [r7, #8]
 8013000:	f000 f82b 	bl	801305a <_ZSt11__addressofISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>
 8013004:	4602      	mov	r2, r0
 8013006:	68fb      	ldr	r3, [r7, #12]
 8013008:	601a      	str	r2, [r3, #0]
 801300a:	68fb      	ldr	r3, [r7, #12]
 801300c:	687a      	ldr	r2, [r7, #4]
 801300e:	605a      	str	r2, [r3, #4]
      { }
 8013010:	68fb      	ldr	r3, [r7, #12]
 8013012:	4618      	mov	r0, r3
 8013014:	3710      	adds	r7, #16
 8013016:	46bd      	mov	sp, r7
 8013018:	bd80      	pop	{r7, pc}

0801301a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 801301a:	b580      	push	{r7, lr}
 801301c:	b082      	sub	sp, #8
 801301e:	af00      	add	r7, sp, #0
 8013020:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	685b      	ldr	r3, [r3, #4]
 8013026:	2b00      	cmp	r3, #0
 8013028:	d007      	beq.n	801303a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	6818      	ldr	r0, [r3, #0]
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	685b      	ldr	r3, [r3, #4]
 8013032:	2201      	movs	r2, #1
 8013034:	4619      	mov	r1, r3
 8013036:	f000 f81b 	bl	8013070 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>
      }
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	4618      	mov	r0, r3
 801303e:	3708      	adds	r7, #8
 8013040:	46bd      	mov	sp, r7
 8013042:	bd80      	pop	{r7, pc}

08013044 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI7StepgenELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 8013044:	b480      	push	{r7}
 8013046:	b083      	sub	sp, #12
 8013048:	af00      	add	r7, sp, #0
 801304a:	6078      	str	r0, [r7, #4]
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	4618      	mov	r0, r3
 8013050:	370c      	adds	r7, #12
 8013052:	46bd      	mov	sp, r7
 8013054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013058:	4770      	bx	lr

0801305a <_ZSt11__addressofISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 801305a:	b480      	push	{r7}
 801305c:	b083      	sub	sp, #12
 801305e:	af00      	add	r7, sp, #0
 8013060:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	4618      	mov	r0, r3
 8013066:	370c      	adds	r7, #12
 8013068:	46bd      	mov	sp, r7
 801306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801306e:	4770      	bx	lr

08013070 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8013070:	b580      	push	{r7, lr}
 8013072:	b084      	sub	sp, #16
 8013074:	af00      	add	r7, sp, #0
 8013076:	60f8      	str	r0, [r7, #12]
 8013078:	60b9      	str	r1, [r7, #8]
 801307a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 801307c:	687a      	ldr	r2, [r7, #4]
 801307e:	68b9      	ldr	r1, [r7, #8]
 8013080:	68f8      	ldr	r0, [r7, #12]
 8013082:	f000 f804 	bl	801308e <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>
 8013086:	bf00      	nop
 8013088:	3710      	adds	r7, #16
 801308a:	46bd      	mov	sp, r7
 801308c:	bd80      	pop	{r7, pc}

0801308e <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 801308e:	b580      	push	{r7, lr}
 8013090:	b084      	sub	sp, #16
 8013092:	af00      	add	r7, sp, #0
 8013094:	60f8      	str	r0, [r7, #12]
 8013096:	60b9      	str	r1, [r7, #8]
 8013098:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	011b      	lsls	r3, r3, #4
 801309e:	4619      	mov	r1, r3
 80130a0:	68b8      	ldr	r0, [r7, #8]
 80130a2:	f010 fecc 	bl	8023e3e <_ZdlPvj>
      }
 80130a6:	3710      	adds	r7, #16
 80130a8:	46bd      	mov	sp, r7
 80130aa:	bd80      	pop	{r7, pc}

080130ac <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE7highestEv>:
  static constexpr T highest() {
 80130ac:	b480      	push	{r7}
 80130ae:	af00      	add	r7, sp, #0
    return T(-1);
 80130b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  }
 80130b4:	4618      	mov	r0, r3
 80130b6:	46bd      	mov	sp, r7
 80130b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130bc:	4770      	bx	lr

080130be <_ZN6Remora15getSerialThreadEv>:
    void setServoFreq(uint32_t freq) { servoFreq = freq; }

    volatile txData_t* getTxData() { return &txData; }
    volatile rxData_t* getRxData() { return &rxData; }
    volatile bool* getReset() { return &reset; };
    pruThread* getSerialThread() { return serialThread.get(); }
 80130be:	b580      	push	{r7, lr}
 80130c0:	b082      	sub	sp, #8
 80130c2:	af00      	add	r7, sp, #0
 80130c4:	6078      	str	r0, [r7, #4]
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	3324      	adds	r3, #36	@ 0x24
 80130ca:	4618      	mov	r0, r3
 80130cc:	f7f7 fc9f 	bl	800aa0e <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EE3getEv>
 80130d0:	4603      	mov	r3, r0
 80130d2:	4618      	mov	r0, r3
 80130d4:	3708      	adds	r7, #8
 80130d6:	46bd      	mov	sp, r7
 80130d8:	bd80      	pop	{r7, pc}
	...

080130dc <_ZN14TMC2208StepperD1Ev>:
        const float Rsense;
        float holdMultiplier = 0.5;
};


class TMC2208Stepper : public TMCStepper {
 80130dc:	b580      	push	{r7, lr}
 80130de:	b082      	sub	sp, #8
 80130e0:	af00      	add	r7, sp, #0
 80130e2:	6078      	str	r0, [r7, #4]
 80130e4:	4a08      	ldr	r2, [pc, #32]	@ (8013108 <_ZN14TMC2208StepperD1Ev+0x2c>)
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	601a      	str	r2, [r3, #0]
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	334c      	adds	r3, #76	@ 0x4c
 80130ee:	4618      	mov	r0, r3
 80130f0:	f010 ffa5 	bl	802403e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	3334      	adds	r3, #52	@ 0x34
 80130f8:	4618      	mov	r0, r3
 80130fa:	f010 ffa0 	bl	802403e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	4618      	mov	r0, r3
 8013102:	3708      	adds	r7, #8
 8013104:	46bd      	mov	sp, r7
 8013106:	bd80      	pop	{r7, pc}
 8013108:	080265a8 	.word	0x080265a8

0801310c <_ZN14TMC2208StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_f>:
    public:

        TMC2208Stepper(std::string SWRXpin, std::string SWTXpin, float RS) :
 801310c:	b580      	push	{r7, lr}
 801310e:	b090      	sub	sp, #64	@ 0x40
 8013110:	af00      	add	r7, sp, #0
 8013112:	60f8      	str	r0, [r7, #12]
 8013114:	60b9      	str	r1, [r7, #8]
 8013116:	607a      	str	r2, [r7, #4]
 8013118:	ed87 0a00 	vstr	s0, [r7]
                TMC2208Stepper(SWRXpin, SWTXpin, RS, TMC2208_SLAVE_ADDR)
 801311c:	f107 0310 	add.w	r3, r7, #16
 8013120:	68b9      	ldr	r1, [r7, #8]
 8013122:	4618      	mov	r0, r3
 8013124:	f011 f8c9 	bl	80242ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8013128:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801312c:	6879      	ldr	r1, [r7, #4]
 801312e:	4618      	mov	r0, r3
 8013130:	f011 f8c3 	bl	80242ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8013134:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8013138:	f107 0110 	add.w	r1, r7, #16
 801313c:	2300      	movs	r3, #0
 801313e:	ed97 0a00 	vldr	s0, [r7]
 8013142:	68f8      	ldr	r0, [r7, #12]
 8013144:	f7ef fd8c 	bl	8002c60 <_ZN14TMC2208StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_fh>
 8013148:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801314c:	4618      	mov	r0, r3
 801314e:	f010 ff76 	bl	802403e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8013152:	f107 0310 	add.w	r3, r7, #16
 8013156:	4618      	mov	r0, r3
 8013158:	f010 ff71 	bl	802403e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
                {}
 801315c:	68fb      	ldr	r3, [r7, #12]
 801315e:	4618      	mov	r0, r3
 8013160:	3740      	adds	r7, #64	@ 0x40
 8013162:	46bd      	mov	sp, r7
 8013164:	bd80      	pop	{r7, pc}

08013166 <_ZNSt12__shared_ptrI7TMC2208LN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 8013166:	b580      	push	{r7, lr}
 8013168:	b082      	sub	sp, #8
 801316a:	af00      	add	r7, sp, #0
 801316c:	6078      	str	r0, [r7, #4]
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	3304      	adds	r3, #4
 8013172:	4618      	mov	r0, r3
 8013174:	f7f7 fcb1 	bl	800aada <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	4618      	mov	r0, r3
 801317c:	3708      	adds	r7, #8
 801317e:	46bd      	mov	sp, r7
 8013180:	bd80      	pop	{r7, pc}

08013182 <_ZNSt10shared_ptrI7TMC2208ED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 8013182:	b580      	push	{r7, lr}
 8013184:	b082      	sub	sp, #8
 8013186:	af00      	add	r7, sp, #0
 8013188:	6078      	str	r0, [r7, #4]
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	4618      	mov	r0, r3
 801318e:	f7ff ffea 	bl	8013166 <_ZNSt12__shared_ptrI7TMC2208LN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	4618      	mov	r0, r3
 8013196:	3708      	adds	r7, #8
 8013198:	46bd      	mov	sp, r7
 801319a:	bd80      	pop	{r7, pc}

0801319c <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>:
#include <cstdint>

#define TOFF_VALUE  4 // [1... 15]


std::shared_ptr<Module> TMC2208::create(const JsonObject& config, Remora* instance) {
 801319c:	b590      	push	{r4, r7, lr}
 801319e:	b0c5      	sub	sp, #276	@ 0x114
 80131a0:	af02      	add	r7, sp, #8
 80131a2:	60f8      	str	r0, [r7, #12]
 80131a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80131a8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80131ac:	6019      	str	r1, [r3, #0]
 80131ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80131b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80131b6:	601a      	str	r2, [r3, #0]
    printf("Creating TMC2208 module\n");
 80131b8:	488b      	ldr	r0, [pc, #556]	@ (80133e8 <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x24c>)
 80131ba:	f011 fc8d 	bl	8024ad8 <puts>

    const char* comment = config["Comment"];
 80131be:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80131c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80131c6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80131ca:	4a88      	ldr	r2, [pc, #544]	@ (80133ec <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x250>)
 80131cc:	6819      	ldr	r1, [r3, #0]
 80131ce:	f7fd faf8 	bl	80107c2 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 80131d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80131d6:	4618      	mov	r0, r3
 80131d8:	f7f3 fad6 	bl	8006788 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 80131dc:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
    printf("%s\n",comment);
 80131e0:	f8d7 0104 	ldr.w	r0, [r7, #260]	@ 0x104
 80131e4:	f011 fc78 	bl	8024ad8 <puts>

    const char* RxPin = config["RX pin"];
 80131e8:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80131ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80131f0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80131f4:	4a7e      	ldr	r2, [pc, #504]	@ (80133f0 <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x254>)
 80131f6:	6819      	ldr	r1, [r3, #0]
 80131f8:	f7f3 faa1 	bl	800673e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 80131fc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8013200:	4618      	mov	r0, r3
 8013202:	f7f3 fac1 	bl	8006788 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8013206:	4603      	mov	r3, r0
 8013208:	627b      	str	r3, [r7, #36]	@ 0x24
    float RSense = config["RSense"];
 801320a:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 801320e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8013212:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8013216:	4a77      	ldr	r2, [pc, #476]	@ (80133f4 <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x258>)
 8013218:	6819      	ldr	r1, [r3, #0]
 801321a:	f7f3 fa90 	bl	800673e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 801321e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8013222:	4618      	mov	r0, r3
 8013224:	f000 fa4c 	bl	80136c0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IfLi0EEEv>
 8013228:	eef0 7a40 	vmov.f32	s15, s0
 801322c:	edc7 7a08 	vstr	s15, [r7, #32]
    uint8_t address = config["Address"];
 8013230:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 8013234:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8013238:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 801323c:	4a6e      	ldr	r2, [pc, #440]	@ (80133f8 <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x25c>)
 801323e:	6819      	ldr	r1, [r3, #0]
 8013240:	f7fd fabf 	bl	80107c2 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8013244:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8013248:	4618      	mov	r0, r3
 801324a:	f000 fa47 	bl	80136dc <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IhLi0EEEv>
 801324e:	4603      	mov	r3, r0
 8013250:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
    uint16_t current = config["Current"];
 8013254:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 8013258:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801325c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8013260:	4a66      	ldr	r2, [pc, #408]	@ (80133fc <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x260>)
 8013262:	6819      	ldr	r1, [r3, #0]
 8013264:	f7fd faad 	bl	80107c2 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8013268:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 801326c:	4618      	mov	r0, r3
 801326e:	f000 fa41 	bl	80136f4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ItLi0EEEv>
 8013272:	4603      	mov	r3, r0
 8013274:	83fb      	strh	r3, [r7, #30]
    uint16_t microsteps = config["Microsteps"];
 8013276:	f107 00a0 	add.w	r0, r7, #160	@ 0xa0
 801327a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801327e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8013282:	4a5f      	ldr	r2, [pc, #380]	@ (8013400 <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x264>)
 8013284:	6819      	ldr	r1, [r3, #0]
 8013286:	f7fa fad2 	bl	800d82e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 801328a:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 801328e:	4618      	mov	r0, r3
 8013290:	f000 fa30 	bl	80136f4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ItLi0EEEv>
 8013294:	4603      	mov	r3, r0
 8013296:	83bb      	strh	r3, [r7, #28]
    const char* stealth = config["Stealth chop"];
 8013298:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 801329c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80132a0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80132a4:	4a57      	ldr	r2, [pc, #348]	@ (8013404 <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x268>)
 80132a6:	6819      	ldr	r1, [r3, #0]
 80132a8:	f7ff f960 	bl	801256c <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA13_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 80132ac:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 80132b0:	4618      	mov	r0, r3
 80132b2:	f7f3 fa69 	bl	8006788 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 80132b6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    uint16_t stall = config["Stall sensitivity"];
 80132ba:	f107 00d0 	add.w	r0, r7, #208	@ 0xd0
 80132be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80132c2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80132c6:	4a50      	ldr	r2, [pc, #320]	@ (8013408 <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x26c>)
 80132c8:	6819      	ldr	r1, [r3, #0]
 80132ca:	f000 fa1f 	bl	801370c <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA18_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 80132ce:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80132d2:	4618      	mov	r0, r3
 80132d4:	f000 fa0e 	bl	80136f4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ItLi0EEEv>
 80132d8:	4603      	mov	r3, r0
 80132da:	f8a7 30fa 	strh.w	r3, [r7, #250]	@ 0xfa

    bool stealthchop = (strcmp(stealth, "on") == 0);
 80132de:	494b      	ldr	r1, [pc, #300]	@ (801340c <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x270>)
 80132e0:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 80132e4:	f7ec fffc 	bl	80002e0 <strcmp>
 80132e8:	4603      	mov	r3, r0
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	bf0c      	ite	eq
 80132ee:	2301      	moveq	r3, #1
 80132f0:	2300      	movne	r3, #0
 80132f2:	b2db      	uxtb	r3, r3
 80132f4:	76fb      	strb	r3, [r7, #27]

    // SW Serial pin, RSense, mA, microsteps, stealh
    // TMC2208(std::string, float, uint8_t, uint16_t, uint16_t, bool);
    auto tmc = std::make_shared<TMC2208>(RxPin, RSense, current, microsteps, stealthchop);
 80132f6:	f107 0010 	add.w	r0, r7, #16
 80132fa:	f107 041e 	add.w	r4, r7, #30
 80132fe:	f107 0220 	add.w	r2, r7, #32
 8013302:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8013306:	f107 031b 	add.w	r3, r7, #27
 801330a:	9301      	str	r3, [sp, #4]
 801330c:	f107 031c 	add.w	r3, r7, #28
 8013310:	9300      	str	r3, [sp, #0]
 8013312:	4623      	mov	r3, r4
 8013314:	f000 fa1f 	bl	8013756 <_ZSt11make_sharedI7TMC2208JRPKcRfRtS5_RbEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESA_E4typeEEDpOT0_>

    printf("\nStarting the Serial thread\n");
 8013318:	483d      	ldr	r0, [pc, #244]	@ (8013410 <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x274>)
 801331a:	f011 fbdd 	bl	8024ad8 <puts>
    instance->getSerialThread()->startThread();
 801331e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8013322:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8013326:	6818      	ldr	r0, [r3, #0]
 8013328:	f7ff fec9 	bl	80130be <_ZN6Remora15getSerialThreadEv>
 801332c:	4603      	mov	r3, r0
 801332e:	4618      	mov	r0, r3
 8013330:	f002 fe90 	bl	8016054 <_ZN9pruThread11startThreadEv>
    instance->getSerialThread()->registerModule(tmc);
 8013334:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8013338:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801333c:	6818      	ldr	r0, [r3, #0]
 801333e:	f7ff febe 	bl	80130be <_ZN6Remora15getSerialThreadEv>
 8013342:	4604      	mov	r4, r0
 8013344:	f107 0210 	add.w	r2, r7, #16
 8013348:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 801334c:	4611      	mov	r1, r2
 801334e:	4618      	mov	r0, r3
 8013350:	f000 fa2e 	bl	80137b0 <_ZNSt10shared_ptrI6ModuleEC1I7TMC2208vEERKS_IT_E>
 8013354:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8013358:	4619      	mov	r1, r3
 801335a:	4620      	mov	r0, r4
 801335c:	f002 fde6 	bl	8015f2c <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE>
 8013360:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8013364:	4618      	mov	r0, r3
 8013366:	f7f6 fd9a 	bl	8009e9e <_ZNSt10shared_ptrI6ModuleED1Ev>

    tmc->configure();
 801336a:	f107 0310 	add.w	r3, r7, #16
 801336e:	4618      	mov	r0, r3
 8013370:	f000 fa2e 	bl	80137d0 <_ZNKSt19__shared_ptr_accessI7TMC2208LN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8013374:	4603      	mov	r3, r0
 8013376:	681a      	ldr	r2, [r3, #0]
 8013378:	3214      	adds	r2, #20
 801337a:	6812      	ldr	r2, [r2, #0]
 801337c:	4618      	mov	r0, r3
 801337e:	4790      	blx	r2

    printf("\nStopping the Serial thread\n");
 8013380:	4824      	ldr	r0, [pc, #144]	@ (8013414 <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x278>)
 8013382:	f011 fba9 	bl	8024ad8 <puts>
    instance->getSerialThread()->stopThread();
 8013386:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801338a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801338e:	6818      	ldr	r0, [r3, #0]
 8013390:	f7ff fe95 	bl	80130be <_ZN6Remora15getSerialThreadEv>
 8013394:	4603      	mov	r3, r0
 8013396:	4618      	mov	r0, r3
 8013398:	f002 fe89 	bl	80160ae <_ZN9pruThread10stopThreadEv>
    instance->getSerialThread()->unregisterModule(tmc);
 801339c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80133a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80133a4:	6818      	ldr	r0, [r3, #0]
 80133a6:	f7ff fe8a 	bl	80130be <_ZN6Remora15getSerialThreadEv>
 80133aa:	4604      	mov	r4, r0
 80133ac:	f107 0210 	add.w	r2, r7, #16
 80133b0:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 80133b4:	4611      	mov	r1, r2
 80133b6:	4618      	mov	r0, r3
 80133b8:	f000 f9fa 	bl	80137b0 <_ZNSt10shared_ptrI6ModuleEC1I7TMC2208vEERKS_IT_E>
 80133bc:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 80133c0:	4619      	mov	r1, r3
 80133c2:	4620      	mov	r0, r4
 80133c4:	f002 fdfe 	bl	8015fc4 <_ZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleE>
 80133c8:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 80133cc:	4618      	mov	r0, r3
 80133ce:	f7f6 fd66 	bl	8009e9e <_ZNSt10shared_ptrI6ModuleED1Ev>
}
 80133d2:	f107 0310 	add.w	r3, r7, #16
 80133d6:	4618      	mov	r0, r3
 80133d8:	f7ff fed3 	bl	8013182 <_ZNSt10shared_ptrI7TMC2208ED1Ev>
 80133dc:	bf00      	nop
 80133de:	68f8      	ldr	r0, [r7, #12]
 80133e0:	f507 7786 	add.w	r7, r7, #268	@ 0x10c
 80133e4:	46bd      	mov	sp, r7
 80133e6:	bd90      	pop	{r4, r7, pc}
 80133e8:	08026190 	.word	0x08026190
 80133ec:	080261a8 	.word	0x080261a8
 80133f0:	080261b0 	.word	0x080261b0
 80133f4:	080261b8 	.word	0x080261b8
 80133f8:	080261c0 	.word	0x080261c0
 80133fc:	080261c8 	.word	0x080261c8
 8013400:	080261d0 	.word	0x080261d0
 8013404:	080261dc 	.word	0x080261dc
 8013408:	080261ec 	.word	0x080261ec
 801340c:	08026200 	.word	0x08026200
 8013410:	08026204 	.word	0x08026204
 8013414:	08026220 	.word	0x08026220

08013418 <_ZN3TMCC1Ev>:

#include "../../remora.h"
#include "../../modules/module.h"
#include "../../drivers/TMCStepper/TMCStepper.h"

class TMC : public Module
 8013418:	b580      	push	{r7, lr}
 801341a:	b082      	sub	sp, #8
 801341c:	af00      	add	r7, sp, #0
 801341e:	6078      	str	r0, [r7, #4]
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	4618      	mov	r0, r3
 8013424:	f7fc ff66 	bl	80102f4 <_ZN6ModuleC1Ev>
 8013428:	4a03      	ldr	r2, [pc, #12]	@ (8013438 <_ZN3TMCC1Ev+0x20>)
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	601a      	str	r2, [r3, #0]
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	4618      	mov	r0, r3
 8013432:	3708      	adds	r7, #8
 8013434:	46bd      	mov	sp, r7
 8013436:	bd80      	pop	{r7, pc}
 8013438:	0802692c 	.word	0x0802692c

0801343c <_ZN3TMCD1Ev>:
 801343c:	b580      	push	{r7, lr}
 801343e:	b082      	sub	sp, #8
 8013440:	af00      	add	r7, sp, #0
 8013442:	6078      	str	r0, [r7, #4]
 8013444:	4a05      	ldr	r2, [pc, #20]	@ (801345c <_ZN3TMCD1Ev+0x20>)
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	601a      	str	r2, [r3, #0]
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	4618      	mov	r0, r3
 801344e:	f7fc ff6d 	bl	801032c <_ZN6ModuleD1Ev>
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	4618      	mov	r0, r3
 8013456:	3708      	adds	r7, #8
 8013458:	46bd      	mov	sp, r7
 801345a:	bd80      	pop	{r7, pc}
 801345c:	0802692c 	.word	0x0802692c

08013460 <_ZN3TMCD0Ev>:
 8013460:	b580      	push	{r7, lr}
 8013462:	b082      	sub	sp, #8
 8013464:	af00      	add	r7, sp, #0
 8013466:	6078      	str	r0, [r7, #4]
 8013468:	6878      	ldr	r0, [r7, #4]
 801346a:	f7ff ffe7 	bl	801343c <_ZN3TMCD1Ev>
 801346e:	211c      	movs	r1, #28
 8013470:	6878      	ldr	r0, [r7, #4]
 8013472:	f010 fce4 	bl	8023e3e <_ZdlPvj>
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	4618      	mov	r0, r3
 801347a:	3708      	adds	r7, #8
 801347c:	46bd      	mov	sp, r7
 801347e:	bd80      	pop	{r7, pc}

08013480 <_ZN7TMC2208C1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfttb>:
                METHOD DEFINITIONS
************************************************************************/

    // SW Serial pin, RSense, mA, microsteps, stealh, hybrid
    // TMC2209(std::string, float, uint8_t, uint16_t, uint16_t, bool);
TMC2208::TMC2208(std::string rxtxPin, float Rsense, uint16_t mA, uint16_t microsteps, bool stealth) :
 8013480:	b590      	push	{r4, r7, lr}
 8013482:	b091      	sub	sp, #68	@ 0x44
 8013484:	af00      	add	r7, sp, #0
 8013486:	60f8      	str	r0, [r7, #12]
 8013488:	60b9      	str	r1, [r7, #8]
 801348a:	ed87 0a01 	vstr	s0, [r7, #4]
 801348e:	4611      	mov	r1, r2
 8013490:	461a      	mov	r2, r3
 8013492:	460b      	mov	r3, r1
 8013494:	807b      	strh	r3, [r7, #2]
 8013496:	4613      	mov	r3, r2
 8013498:	803b      	strh	r3, [r7, #0]
    rxtxPin(rxtxPin),
    mA(mA),
    microsteps(microsteps),
    stealth(stealth)
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	4618      	mov	r0, r3
 801349e:	f7ff ffbb 	bl	8013418 <_ZN3TMCC1Ev>
 80134a2:	4a26      	ldr	r2, [pc, #152]	@ (801353c <_ZN7TMC2208C1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfttb+0xbc>)
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	601a      	str	r2, [r3, #0]
    rxtxPin(rxtxPin),
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	331c      	adds	r3, #28
 80134ac:	68b9      	ldr	r1, [r7, #8]
 80134ae:	4618      	mov	r0, r3
 80134b0:	f010 ff03 	bl	80242ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
    mA(mA),
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	887a      	ldrh	r2, [r7, #2]
 80134b8:	869a      	strh	r2, [r3, #52]	@ 0x34
    microsteps(microsteps),
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	883a      	ldrh	r2, [r7, #0]
 80134be:	86da      	strh	r2, [r3, #54]	@ 0x36
    stealth(stealth)
 80134c0:	68fb      	ldr	r3, [r7, #12]
 80134c2:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 80134c6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
{
    this->Rsense = Rsense;
 80134ca:	68fb      	ldr	r3, [r7, #12]
 80134cc:	687a      	ldr	r2, [r7, #4]
 80134ce:	619a      	str	r2, [r3, #24]
    this->driver = new TMC2208Stepper(this->rxtxPin, this->rxtxPin, this->Rsense);
 80134d0:	2068      	movs	r0, #104	@ 0x68
 80134d2:	f010 fcc5 	bl	8023e60 <_Znwj>
 80134d6:	4603      	mov	r3, r0
 80134d8:	461c      	mov	r4, r3
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	f103 021c 	add.w	r2, r3, #28
 80134e0:	f107 0310 	add.w	r3, r7, #16
 80134e4:	4611      	mov	r1, r2
 80134e6:	4618      	mov	r0, r3
 80134e8:	f010 fee7 	bl	80242ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80134ec:	68fb      	ldr	r3, [r7, #12]
 80134ee:	f103 021c 	add.w	r2, r3, #28
 80134f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80134f6:	4611      	mov	r1, r2
 80134f8:	4618      	mov	r0, r3
 80134fa:	f010 fede 	bl	80242ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80134fe:	68fb      	ldr	r3, [r7, #12]
 8013500:	edd3 7a06 	vldr	s15, [r3, #24]
 8013504:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8013508:	f107 0310 	add.w	r3, r7, #16
 801350c:	eeb0 0a67 	vmov.f32	s0, s15
 8013510:	4619      	mov	r1, r3
 8013512:	4620      	mov	r0, r4
 8013514:	f7ff fdfa 	bl	801310c <_ZN14TMC2208StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_f>
 8013518:	68fb      	ldr	r3, [r7, #12]
 801351a:	63dc      	str	r4, [r3, #60]	@ 0x3c
 801351c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8013520:	4618      	mov	r0, r3
 8013522:	f010 fd8c 	bl	802403e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8013526:	f107 0310 	add.w	r3, r7, #16
 801352a:	4618      	mov	r0, r3
 801352c:	f010 fd87 	bl	802403e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	4618      	mov	r0, r3
 8013534:	3744      	adds	r7, #68	@ 0x44
 8013536:	46bd      	mov	sp, r7
 8013538:	bd90      	pop	{r4, r7, pc}
 801353a:	bf00      	nop
 801353c:	08026908 	.word	0x08026908

08013540 <_ZN7TMC2208D1Ev>:

TMC2208::~TMC2208()
 8013540:	b590      	push	{r4, r7, lr}
 8013542:	b083      	sub	sp, #12
 8013544:	af00      	add	r7, sp, #0
 8013546:	6078      	str	r0, [r7, #4]
 8013548:	4a0d      	ldr	r2, [pc, #52]	@ (8013580 <_ZN7TMC2208D1Ev+0x40>)
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	601a      	str	r2, [r3, #0]
{
    delete this->driver;
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8013552:	2c00      	cmp	r4, #0
 8013554:	d006      	beq.n	8013564 <_ZN7TMC2208D1Ev+0x24>
 8013556:	4620      	mov	r0, r4
 8013558:	f7ff fdc0 	bl	80130dc <_ZN14TMC2208StepperD1Ev>
 801355c:	2168      	movs	r1, #104	@ 0x68
 801355e:	4620      	mov	r0, r4
 8013560:	f010 fc6d 	bl	8023e3e <_ZdlPvj>
}
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	331c      	adds	r3, #28
 8013568:	4618      	mov	r0, r3
 801356a:	f010 fd68 	bl	802403e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	4618      	mov	r0, r3
 8013572:	f7ff ff63 	bl	801343c <_ZN3TMCD1Ev>
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	4618      	mov	r0, r3
 801357a:	370c      	adds	r7, #12
 801357c:	46bd      	mov	sp, r7
 801357e:	bd90      	pop	{r4, r7, pc}
 8013580:	08026908 	.word	0x08026908

08013584 <_ZN7TMC2208D0Ev>:
TMC2208::~TMC2208()
 8013584:	b580      	push	{r7, lr}
 8013586:	b082      	sub	sp, #8
 8013588:	af00      	add	r7, sp, #0
 801358a:	6078      	str	r0, [r7, #4]
}
 801358c:	6878      	ldr	r0, [r7, #4]
 801358e:	f7ff ffd7 	bl	8013540 <_ZN7TMC2208D1Ev>
 8013592:	2140      	movs	r1, #64	@ 0x40
 8013594:	6878      	ldr	r0, [r7, #4]
 8013596:	f010 fc52 	bl	8023e3e <_ZdlPvj>
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	4618      	mov	r0, r3
 801359e:	3708      	adds	r7, #8
 80135a0:	46bd      	mov	sp, r7
 80135a2:	bd80      	pop	{r7, pc}

080135a4 <_ZN7TMC22089configureEv>:

void TMC2208::configure()
{
 80135a4:	b580      	push	{r7, lr}
 80135a6:	b084      	sub	sp, #16
 80135a8:	af00      	add	r7, sp, #0
 80135aa:	6078      	str	r0, [r7, #4]
    uint16_t result;

    driver->begin();
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80135b0:	4618      	mov	r0, r3
 80135b2:	f7ef fc07 	bl	8002dc4 <_ZN14TMC2208Stepper5beginEv>
    
    printf("Testing connection to TMC driver...");
 80135b6:	4834      	ldr	r0, [pc, #208]	@ (8013688 <_ZN7TMC22089configureEv+0xe4>)
 80135b8:	f011 fa1e 	bl	80249f8 <iprintf>
    result = driver->test_connection();
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80135c0:	4618      	mov	r0, r3
 80135c2:	f7ef ffe5 	bl	8003590 <_ZN10TMCStepper15test_connectionEv>
 80135c6:	4603      	mov	r3, r0
 80135c8:	81fb      	strh	r3, [r7, #14]
    if (result) {
 80135ca:	89fb      	ldrh	r3, [r7, #14]
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d017      	beq.n	8013600 <_ZN7TMC22089configureEv+0x5c>
        printf("failed!\n");
 80135d0:	482e      	ldr	r0, [pc, #184]	@ (801368c <_ZN7TMC22089configureEv+0xe8>)
 80135d2:	f011 fa81 	bl	8024ad8 <puts>
        printf("Likely cause: ");
 80135d6:	482e      	ldr	r0, [pc, #184]	@ (8013690 <_ZN7TMC22089configureEv+0xec>)
 80135d8:	f011 fa0e 	bl	80249f8 <iprintf>
        switch(result) {
 80135dc:	89fb      	ldrh	r3, [r7, #14]
 80135de:	2b01      	cmp	r3, #1
 80135e0:	d002      	beq.n	80135e8 <_ZN7TMC22089configureEv+0x44>
 80135e2:	2b02      	cmp	r3, #2
 80135e4:	d004      	beq.n	80135f0 <_ZN7TMC22089configureEv+0x4c>
 80135e6:	e007      	b.n	80135f8 <_ZN7TMC22089configureEv+0x54>
            case 1: printf("loose connection\n"); break;
 80135e8:	482a      	ldr	r0, [pc, #168]	@ (8013694 <_ZN7TMC22089configureEv+0xf0>)
 80135ea:	f011 fa75 	bl	8024ad8 <puts>
 80135ee:	e003      	b.n	80135f8 <_ZN7TMC22089configureEv+0x54>
            case 2: printf("no power\n"); break;
 80135f0:	4829      	ldr	r0, [pc, #164]	@ (8013698 <_ZN7TMC22089configureEv+0xf4>)
 80135f2:	f011 fa71 	bl	8024ad8 <puts>
 80135f6:	bf00      	nop
        }
        printf("  Fix the problem and reset board.\n");
 80135f8:	4828      	ldr	r0, [pc, #160]	@ (801369c <_ZN7TMC22089configureEv+0xf8>)
 80135fa:	f011 fa6d 	bl	8024ad8 <puts>
 80135fe:	e002      	b.n	8013606 <_ZN7TMC22089configureEv+0x62>
        //abort();
    }
    else   
    {
        printf("OK\n");
 8013600:	4827      	ldr	r0, [pc, #156]	@ (80136a0 <_ZN7TMC22089configureEv+0xfc>)
 8013602:	f011 fa69 	bl	8024ad8 <puts>

    // Sets the slow decay time (off time) [1... 15]. This setting also limits
    // the maximum chopper frequency. For operation with StealthChop,
    // this parameter is not used, but it is required to enable the motor.
    // In case of operation with StealthChop only, any setting is OK.
    driver->toff(TOFF_VALUE);
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801360a:	2104      	movs	r1, #4
 801360c:	4618      	mov	r0, r3
 801360e:	f7ef f88c 	bl	800272a <_ZN14TMC2208Stepper4toffEh>

    // Comparator blank time. This time needs to safely cover the switching
    // event and the duration of the ringing on the sense resistor. For most
    // applications, a setting of 16 or 24 is good. For highly capacitive
    // loads, a setting of 32 or 40 will be required.
    driver->blank_time(24);
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013616:	2118      	movs	r1, #24
 8013618:	4618      	mov	r0, r3
 801361a:	f7f0 f885 	bl	8003728 <_ZN10TMCStepper10blank_timeEh>

    driver->rms_current(this->mA);
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013622:	461a      	mov	r2, r3
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8013628:	4619      	mov	r1, r3
 801362a:	4610      	mov	r0, r2
 801362c:	f7ef ff14 	bl	8003458 <_ZN10TMCStepper11rms_currentEt>
    driver->microsteps(this->microsteps);
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013634:	461a      	mov	r2, r3
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801363a:	4619      	mov	r1, r3
 801363c:	4610      	mov	r0, r2
 801363e:	f7ef ffc3 	bl	80035c8 <_ZN10TMCStepper10microstepsEt>

    // Toggle spreadCycle on TMC2208/2209/2224: default false, true: much faster!!!!
    driver->en_spreadCycle(!this->stealth);            
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801364c:	f083 0301 	eor.w	r3, r3, #1
 8013650:	b2db      	uxtb	r3, r3
 8013652:	4619      	mov	r1, r3
 8013654:	4610      	mov	r0, r2
 8013656:	f7ef fa0f 	bl	8002a78 <_ZN14TMC2208Stepper14en_spreadCycleEb>

    // Needed for StealthChop
    driver->pwm_autoscale(true);             
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801365e:	2101      	movs	r1, #1
 8013660:	4618      	mov	r0, r3
 8013662:	f7ef fab7 	bl	8002bd4 <_ZN14TMC2208Stepper13pwm_autoscaleEb>

     driver->iholddelay(10);
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801366a:	210a      	movs	r1, #10
 801366c:	4618      	mov	r0, r3
 801366e:	f7ef fa94 	bl	8002b9a <_ZN10TMCStepper10iholddelayEh>

    driver->TPOWERDOWN(128);    // ~2s until driver lowers to hold current
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013676:	2180      	movs	r1, #128	@ 0x80
 8013678:	4618      	mov	r0, r3
 801367a:	f7f0 f88d 	bl	8003798 <_ZN10TMCStepper10TPOWERDOWNEh>
    
}
 801367e:	bf00      	nop
 8013680:	3710      	adds	r7, #16
 8013682:	46bd      	mov	sp, r7
 8013684:	bd80      	pop	{r7, pc}
 8013686:	bf00      	nop
 8013688:	0802623c 	.word	0x0802623c
 801368c:	08026260 	.word	0x08026260
 8013690:	08026268 	.word	0x08026268
 8013694:	08026278 	.word	0x08026278
 8013698:	0802628c 	.word	0x0802628c
 801369c:	08026298 	.word	0x08026298
 80136a0:	080262bc 	.word	0x080262bc

080136a4 <_ZN7TMC22086updateEv>:

void TMC2208::update()
{
 80136a4:	b580      	push	{r7, lr}
 80136a6:	b082      	sub	sp, #8
 80136a8:	af00      	add	r7, sp, #0
 80136aa:	6078      	str	r0, [r7, #4]
    this->driver->SWSerial->tickerHandler();
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80136b0:	695b      	ldr	r3, [r3, #20]
 80136b2:	4618      	mov	r0, r3
 80136b4:	f7ee fea7 	bl	8002406 <_ZN14SoftwareSerial13tickerHandlerEv>
}
 80136b8:	bf00      	nop
 80136ba:	3708      	adds	r7, #8
 80136bc:	46bd      	mov	sp, r7
 80136be:	bd80      	pop	{r7, pc}

080136c0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IfLi0EEEv>:
  operator T() const {
 80136c0:	b580      	push	{r7, lr}
 80136c2:	b082      	sub	sp, #8
 80136c4:	af00      	add	r7, sp, #0
 80136c6:	6078      	str	r0, [r7, #4]
    return as<T>();
 80136c8:	6878      	ldr	r0, [r7, #4]
 80136ca:	f000 f88d 	bl	80137e8 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIfEET_v>
 80136ce:	eef0 7a40 	vmov.f32	s15, s0
  }
 80136d2:	eeb0 0a67 	vmov.f32	s0, s15
 80136d6:	3708      	adds	r7, #8
 80136d8:	46bd      	mov	sp, r7
 80136da:	bd80      	pop	{r7, pc}

080136dc <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IhLi0EEEv>:
  operator T() const {
 80136dc:	b580      	push	{r7, lr}
 80136de:	b082      	sub	sp, #8
 80136e0:	af00      	add	r7, sp, #0
 80136e2:	6078      	str	r0, [r7, #4]
    return as<T>();
 80136e4:	6878      	ldr	r0, [r7, #4]
 80136e6:	f000 f8a3 	bl	8013830 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIhEET_v>
 80136ea:	4603      	mov	r3, r0
  }
 80136ec:	4618      	mov	r0, r3
 80136ee:	3708      	adds	r7, #8
 80136f0:	46bd      	mov	sp, r7
 80136f2:	bd80      	pop	{r7, pc}

080136f4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ItLi0EEEv>:
  operator T() const {
 80136f4:	b580      	push	{r7, lr}
 80136f6:	b082      	sub	sp, #8
 80136f8:	af00      	add	r7, sp, #0
 80136fa:	6078      	str	r0, [r7, #4]
    return as<T>();
 80136fc:	6878      	ldr	r0, [r7, #4]
 80136fe:	f000 f8b9 	bl	8013874 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asItEET_v>
 8013702:	4603      	mov	r3, r0
  }
 8013704:	4618      	mov	r0, r3
 8013706:	3708      	adds	r7, #8
 8013708:	46bd      	mov	sp, r7
 801370a:	bd80      	pop	{r7, pc}

0801370c <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA18_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:

  // Gets or sets the member with specified key.
  // https://arduinojson.org/v7/api/jsonobject/subscript/
  template <typename TString,
            detail::enable_if_t<detail::IsString<TString>::value, int> = 0>
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 801370c:	b580      	push	{r7, lr}
 801370e:	b08c      	sub	sp, #48	@ 0x30
 8013710:	af02      	add	r7, sp, #8
 8013712:	60f8      	str	r0, [r7, #12]
 8013714:	60b9      	str	r1, [r7, #8]
 8013716:	607a      	str	r2, [r7, #4]
      const TString& key) const {
    return {*this, detail::adaptString(key)};
 8013718:	68ba      	ldr	r2, [r7, #8]
 801371a:	f107 0314 	add.w	r3, r7, #20
 801371e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013722:	e883 0003 	stmia.w	r3, {r0, r1}
 8013726:	f107 031c 	add.w	r3, r7, #28
 801372a:	6879      	ldr	r1, [r7, #4]
 801372c:	4618      	mov	r0, r3
 801372e:	f000 f8c3 	bl	80138b8 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA18_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8013732:	466a      	mov	r2, sp
 8013734:	f107 0320 	add.w	r3, r7, #32
 8013738:	e893 0003 	ldmia.w	r3, {r0, r1}
 801373c:	e882 0003 	stmia.w	r2, {r0, r1}
 8013740:	69fb      	ldr	r3, [r7, #28]
 8013742:	f107 0214 	add.w	r2, r7, #20
 8013746:	ca06      	ldmia	r2, {r1, r2}
 8013748:	68f8      	ldr	r0, [r7, #12]
 801374a:	f7f3 f98c 	bl	8006a66 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 801374e:	68f8      	ldr	r0, [r7, #12]
 8013750:	3728      	adds	r7, #40	@ 0x28
 8013752:	46bd      	mov	sp, r7
 8013754:	bd80      	pop	{r7, pc}

08013756 <_ZSt11make_sharedI7TMC2208JRPKcRfRtS5_RbEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESA_E4typeEEDpOT0_>:
    make_shared(_Args&&... __args)
 8013756:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801375a:	b08b      	sub	sp, #44	@ 0x2c
 801375c:	af04      	add	r7, sp, #16
 801375e:	60f8      	str	r0, [r7, #12]
 8013760:	60b9      	str	r1, [r7, #8]
 8013762:	607a      	str	r2, [r7, #4]
 8013764:	603b      	str	r3, [r7, #0]
			     std::forward<_Args>(__args)...);
 8013766:	f107 0314 	add.w	r3, r7, #20
 801376a:	4699      	mov	r9, r3
 801376c:	68b8      	ldr	r0, [r7, #8]
 801376e:	f7fa f988 	bl	800da82 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8013772:	4606      	mov	r6, r0
 8013774:	6878      	ldr	r0, [r7, #4]
 8013776:	f000 f8b2 	bl	80138de <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 801377a:	4680      	mov	r8, r0
 801377c:	6838      	ldr	r0, [r7, #0]
 801377e:	f000 f8b9 	bl	80138f4 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8013782:	4604      	mov	r4, r0
 8013784:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013786:	f000 f8b5 	bl	80138f4 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801378a:	4605      	mov	r5, r0
 801378c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801378e:	f7fc f93e 	bl	800fa0e <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8013792:	4603      	mov	r3, r0
 8013794:	9302      	str	r3, [sp, #8]
 8013796:	9501      	str	r5, [sp, #4]
 8013798:	9400      	str	r4, [sp, #0]
 801379a:	4643      	mov	r3, r8
 801379c:	4632      	mov	r2, r6
 801379e:	4649      	mov	r1, r9
 80137a0:	68f8      	ldr	r0, [r7, #12]
 80137a2:	f000 f8b2 	bl	801390a <_ZNSt10shared_ptrI7TMC2208EC1ISaIvEJRPKcRfRtS8_RbEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
    }
 80137a6:	68f8      	ldr	r0, [r7, #12]
 80137a8:	371c      	adds	r7, #28
 80137aa:	46bd      	mov	sp, r7
 80137ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080137b0 <_ZNSt10shared_ptrI6ModuleEC1I7TMC2208vEERKS_IT_E>:
	shared_ptr(const shared_ptr<_Yp>& __r) noexcept
 80137b0:	b580      	push	{r7, lr}
 80137b2:	b082      	sub	sp, #8
 80137b4:	af00      	add	r7, sp, #0
 80137b6:	6078      	str	r0, [r7, #4]
 80137b8:	6039      	str	r1, [r7, #0]
        : __shared_ptr<_Tp>(__r) { }
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	683a      	ldr	r2, [r7, #0]
 80137be:	4611      	mov	r1, r2
 80137c0:	4618      	mov	r0, r3
 80137c2:	f000 f8ce 	bl	8013962 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I7TMC2208vEERKS_IT_LS2_0EE>
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	4618      	mov	r0, r3
 80137ca:	3708      	adds	r7, #8
 80137cc:	46bd      	mov	sp, r7
 80137ce:	bd80      	pop	{r7, pc}

080137d0 <_ZNKSt19__shared_ptr_accessI7TMC2208LN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 80137d0:	b580      	push	{r7, lr}
 80137d2:	b082      	sub	sp, #8
 80137d4:	af00      	add	r7, sp, #0
 80137d6:	6078      	str	r0, [r7, #4]
	return _M_get();
 80137d8:	6878      	ldr	r0, [r7, #4]
 80137da:	f000 f8d8 	bl	801398e <_ZNKSt19__shared_ptr_accessI7TMC2208LN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 80137de:	4603      	mov	r3, r0
      }
 80137e0:	4618      	mov	r0, r3
 80137e2:	3708      	adds	r7, #8
 80137e4:	46bd      	mov	sp, r7
 80137e6:	bd80      	pop	{r7, pc}

080137e8 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIfEET_v>:
  return add<JsonVariant>();
}

template <typename TDerived>
template <typename T>
inline T VariantRefBase<TDerived>::as() const {
 80137e8:	b590      	push	{r4, r7, lr}
 80137ea:	b087      	sub	sp, #28
 80137ec:	af00      	add	r7, sp, #0
 80137ee:	6078      	str	r0, [r7, #4]
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	617b      	str	r3, [r7, #20]
 80137f4:	697b      	ldr	r3, [r7, #20]
 80137f6:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 80137f8:	6938      	ldr	r0, [r7, #16]
 80137fa:	f7f4 f846 	bl	800788a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 80137fe:	4604      	mov	r4, r0
 8013800:	6938      	ldr	r0, [r7, #16]
 8013802:	f7f3 fed0 	bl	80075a6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 8013806:	4602      	mov	r2, r0
 8013808:	f107 0308 	add.w	r3, r7, #8
 801380c:	4621      	mov	r1, r4
 801380e:	4618      	mov	r0, r3
 8013810:	f7f0 ff6b 	bl	80046ea <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 8013814:	bf00      	nop
  using variant_type =  // JsonVariantConst or JsonVariant?
      typename function_traits<decltype(&Converter<T>::fromJson)>::arg1_type;
  return Converter<T>::fromJson(getVariant<variant_type>());
 8013816:	f107 0308 	add.w	r3, r7, #8
 801381a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801381e:	f000 f8c3 	bl	80139a8 <_ZN11ArduinoJson8V730HB229ConverterIfvE8fromJsonENS0_16JsonVariantConstE>
 8013822:	eef0 7a40 	vmov.f32	s15, s0
}
 8013826:	eeb0 0a67 	vmov.f32	s0, s15
 801382a:	371c      	adds	r7, #28
 801382c:	46bd      	mov	sp, r7
 801382e:	bd90      	pop	{r4, r7, pc}

08013830 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIhEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 8013830:	b590      	push	{r4, r7, lr}
 8013832:	b087      	sub	sp, #28
 8013834:	af00      	add	r7, sp, #0
 8013836:	6078      	str	r0, [r7, #4]
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	617b      	str	r3, [r7, #20]
 801383c:	697b      	ldr	r3, [r7, #20]
 801383e:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 8013840:	6938      	ldr	r0, [r7, #16]
 8013842:	f7f4 f822 	bl	800788a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 8013846:	4604      	mov	r4, r0
 8013848:	6938      	ldr	r0, [r7, #16]
 801384a:	f7f3 feac 	bl	80075a6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 801384e:	4602      	mov	r2, r0
 8013850:	f107 0308 	add.w	r3, r7, #8
 8013854:	4621      	mov	r1, r4
 8013856:	4618      	mov	r0, r3
 8013858:	f7f0 ff47 	bl	80046ea <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 801385c:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 801385e:	f107 0308 	add.w	r3, r7, #8
 8013862:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013866:	f000 f8c3 	bl	80139f0 <_ZN11ArduinoJson8V730HB229ConverterIhvE8fromJsonENS0_16JsonVariantConstE>
 801386a:	4603      	mov	r3, r0
}
 801386c:	4618      	mov	r0, r3
 801386e:	371c      	adds	r7, #28
 8013870:	46bd      	mov	sp, r7
 8013872:	bd90      	pop	{r4, r7, pc}

08013874 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asItEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 8013874:	b590      	push	{r4, r7, lr}
 8013876:	b087      	sub	sp, #28
 8013878:	af00      	add	r7, sp, #0
 801387a:	6078      	str	r0, [r7, #4]
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	617b      	str	r3, [r7, #20]
 8013880:	697b      	ldr	r3, [r7, #20]
 8013882:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 8013884:	6938      	ldr	r0, [r7, #16]
 8013886:	f7f4 f800 	bl	800788a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 801388a:	4604      	mov	r4, r0
 801388c:	6938      	ldr	r0, [r7, #16]
 801388e:	f7f3 fe8a 	bl	80075a6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 8013892:	4602      	mov	r2, r0
 8013894:	f107 0308 	add.w	r3, r7, #8
 8013898:	4621      	mov	r1, r4
 801389a:	4618      	mov	r0, r3
 801389c:	f7f0 ff25 	bl	80046ea <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 80138a0:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 80138a2:	f107 0308 	add.w	r3, r7, #8
 80138a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80138aa:	f000 f8bf 	bl	8013a2c <_ZN11ArduinoJson8V730HB229ConverterItvE8fromJsonENS0_16JsonVariantConstE>
 80138ae:	4603      	mov	r3, r0
}
 80138b0:	4618      	mov	r0, r3
 80138b2:	371c      	adds	r7, #28
 80138b4:	46bd      	mov	sp, r7
 80138b6:	bd90      	pop	{r4, r7, pc}

080138b8 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA18_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 80138b8:	b580      	push	{r7, lr}
 80138ba:	b082      	sub	sp, #8
 80138bc:	af00      	add	r7, sp, #0
 80138be:	6078      	str	r0, [r7, #4]
 80138c0:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 80138c2:	6838      	ldr	r0, [r7, #0]
 80138c4:	f000 f8d0 	bl	8013a68 <_ZN11ArduinoJson8V730HB226detail7forwardIRA18_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 80138c8:	4602      	mov	r2, r0
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	4611      	mov	r1, r2
 80138ce:	4618      	mov	r0, r3
 80138d0:	f000 f8d5 	bl	8013a7e <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA18_KcvE5adaptES5_>
 80138d4:	bf00      	nop
}
 80138d6:	6878      	ldr	r0, [r7, #4]
 80138d8:	3708      	adds	r7, #8
 80138da:	46bd      	mov	sp, r7
 80138dc:	bd80      	pop	{r7, pc}

080138de <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80138de:	b480      	push	{r7}
 80138e0:	b083      	sub	sp, #12
 80138e2:	af00      	add	r7, sp, #0
 80138e4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	4618      	mov	r0, r3
 80138ea:	370c      	adds	r7, #12
 80138ec:	46bd      	mov	sp, r7
 80138ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138f2:	4770      	bx	lr

080138f4 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80138f4:	b480      	push	{r7}
 80138f6:	b083      	sub	sp, #12
 80138f8:	af00      	add	r7, sp, #0
 80138fa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	4618      	mov	r0, r3
 8013900:	370c      	adds	r7, #12
 8013902:	46bd      	mov	sp, r7
 8013904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013908:	4770      	bx	lr

0801390a <_ZNSt10shared_ptrI7TMC2208EC1ISaIvEJRPKcRfRtS8_RbEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 801390a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801390e:	b089      	sub	sp, #36	@ 0x24
 8013910:	af04      	add	r7, sp, #16
 8013912:	60f8      	str	r0, [r7, #12]
 8013914:	60b9      	str	r1, [r7, #8]
 8013916:	607a      	str	r2, [r7, #4]
 8013918:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 801391a:	68fc      	ldr	r4, [r7, #12]
 801391c:	6878      	ldr	r0, [r7, #4]
 801391e:	f7fa f8b0 	bl	800da82 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8013922:	4680      	mov	r8, r0
 8013924:	6838      	ldr	r0, [r7, #0]
 8013926:	f7ff ffda 	bl	80138de <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 801392a:	4681      	mov	r9, r0
 801392c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801392e:	f7ff ffe1 	bl	80138f4 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8013932:	4605      	mov	r5, r0
 8013934:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8013936:	f7ff ffdd 	bl	80138f4 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801393a:	4606      	mov	r6, r0
 801393c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801393e:	f7fc f866 	bl	800fa0e <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8013942:	4603      	mov	r3, r0
 8013944:	9302      	str	r3, [sp, #8]
 8013946:	9601      	str	r6, [sp, #4]
 8013948:	9500      	str	r5, [sp, #0]
 801394a:	464b      	mov	r3, r9
 801394c:	4642      	mov	r2, r8
 801394e:	68b9      	ldr	r1, [r7, #8]
 8013950:	4620      	mov	r0, r4
 8013952:	f000 f8a3 	bl	8013a9c <_ZNSt12__shared_ptrI7TMC2208LN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJRPKcRfRtSA_RbEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
	{ }
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	4618      	mov	r0, r3
 801395a:	3714      	adds	r7, #20
 801395c:	46bd      	mov	sp, r7
 801395e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08013962 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I7TMC2208vEERKS_IT_LS2_0EE>:
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
 8013962:	b580      	push	{r7, lr}
 8013964:	b082      	sub	sp, #8
 8013966:	af00      	add	r7, sp, #0
 8013968:	6078      	str	r0, [r7, #4]
 801396a:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
 801396c:	683b      	ldr	r3, [r7, #0]
 801396e:	681a      	ldr	r2, [r3, #0]
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	601a      	str	r2, [r3, #0]
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	1d1a      	adds	r2, r3, #4
 8013978:	683b      	ldr	r3, [r7, #0]
 801397a:	3304      	adds	r3, #4
 801397c:	4619      	mov	r1, r3
 801397e:	4610      	mov	r0, r2
 8013980:	f7f7 fb9f 	bl	800b0c2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	{ }
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	4618      	mov	r0, r3
 8013988:	3708      	adds	r7, #8
 801398a:	46bd      	mov	sp, r7
 801398c:	bd80      	pop	{r7, pc}

0801398e <_ZNKSt19__shared_ptr_accessI7TMC2208LN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 801398e:	b580      	push	{r7, lr}
 8013990:	b082      	sub	sp, #8
 8013992:	af00      	add	r7, sp, #0
 8013994:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8013996:	6878      	ldr	r0, [r7, #4]
 8013998:	f000 f8ba 	bl	8013b10 <_ZNKSt12__shared_ptrI7TMC2208LN9__gnu_cxx12_Lock_policyE0EE3getEv>
 801399c:	4603      	mov	r3, r0
 801399e:	4618      	mov	r0, r3
 80139a0:	3708      	adds	r7, #8
 80139a2:	46bd      	mov	sp, r7
 80139a4:	bd80      	pop	{r7, pc}
	...

080139a8 <_ZN11ArduinoJson8V730HB229ConverterIfvE8fromJsonENS0_16JsonVariantConstE>:
    auto resources = getResourceManager(dst);
    data->clear(resources);
    return data->setFloat(src, resources);
  }

  static T fromJson(JsonVariantConst src) {
 80139a8:	b580      	push	{r7, lr}
 80139aa:	b084      	sub	sp, #16
 80139ac:	af00      	add	r7, sp, #0
 80139ae:	463b      	mov	r3, r7
 80139b0:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 80139b4:	463b      	mov	r3, r7
 80139b6:	4618      	mov	r0, r3
 80139b8:	f7f2 fc16 	bl	80061e8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 80139bc:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 80139be:	463b      	mov	r3, r7
 80139c0:	4618      	mov	r0, r3
 80139c2:	f7f2 fc1d 	bl	8006200 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 80139c6:	60b8      	str	r0, [r7, #8]
    return data ? data->template asFloat<T>(resources) : 0;
 80139c8:	68fb      	ldr	r3, [r7, #12]
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d006      	beq.n	80139dc <_ZN11ArduinoJson8V730HB229ConverterIfvE8fromJsonENS0_16JsonVariantConstE+0x34>
 80139ce:	68b9      	ldr	r1, [r7, #8]
 80139d0:	68f8      	ldr	r0, [r7, #12]
 80139d2:	f000 f8a9 	bl	8013b28 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE>
 80139d6:	eef0 7a40 	vmov.f32	s15, s0
 80139da:	e001      	b.n	80139e0 <_ZN11ArduinoJson8V730HB229ConverterIfvE8fromJsonENS0_16JsonVariantConstE+0x38>
 80139dc:	eddf 7a03 	vldr	s15, [pc, #12]	@ 80139ec <_ZN11ArduinoJson8V730HB229ConverterIfvE8fromJsonENS0_16JsonVariantConstE+0x44>
  }
 80139e0:	eeb0 0a67 	vmov.f32	s0, s15
 80139e4:	3710      	adds	r7, #16
 80139e6:	46bd      	mov	sp, r7
 80139e8:	bd80      	pop	{r7, pc}
 80139ea:	bf00      	nop
 80139ec:	00000000 	.word	0x00000000

080139f0 <_ZN11ArduinoJson8V730HB229ConverterIhvE8fromJsonENS0_16JsonVariantConstE>:
  static T fromJson(JsonVariantConst src) {
 80139f0:	b580      	push	{r7, lr}
 80139f2:	b084      	sub	sp, #16
 80139f4:	af00      	add	r7, sp, #0
 80139f6:	463b      	mov	r3, r7
 80139f8:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 80139fc:	463b      	mov	r3, r7
 80139fe:	4618      	mov	r0, r3
 8013a00:	f7f2 fbf2 	bl	80061e8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8013a04:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 8013a06:	463b      	mov	r3, r7
 8013a08:	4618      	mov	r0, r3
 8013a0a:	f7f2 fbf9 	bl	8006200 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 8013a0e:	60b8      	str	r0, [r7, #8]
    return data ? data->template asIntegral<T>(resources) : T();
 8013a10:	68fb      	ldr	r3, [r7, #12]
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d005      	beq.n	8013a22 <_ZN11ArduinoJson8V730HB229ConverterIhvE8fromJsonENS0_16JsonVariantConstE+0x32>
 8013a16:	68b9      	ldr	r1, [r7, #8]
 8013a18:	68f8      	ldr	r0, [r7, #12]
 8013a1a:	f000 f913 	bl	8013c44 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE>
 8013a1e:	4603      	mov	r3, r0
 8013a20:	e000      	b.n	8013a24 <_ZN11ArduinoJson8V730HB229ConverterIhvE8fromJsonENS0_16JsonVariantConstE+0x34>
 8013a22:	2300      	movs	r3, #0
  }
 8013a24:	4618      	mov	r0, r3
 8013a26:	3710      	adds	r7, #16
 8013a28:	46bd      	mov	sp, r7
 8013a2a:	bd80      	pop	{r7, pc}

08013a2c <_ZN11ArduinoJson8V730HB229ConverterItvE8fromJsonENS0_16JsonVariantConstE>:
  static T fromJson(JsonVariantConst src) {
 8013a2c:	b580      	push	{r7, lr}
 8013a2e:	b084      	sub	sp, #16
 8013a30:	af00      	add	r7, sp, #0
 8013a32:	463b      	mov	r3, r7
 8013a34:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 8013a38:	463b      	mov	r3, r7
 8013a3a:	4618      	mov	r0, r3
 8013a3c:	f7f2 fbd4 	bl	80061e8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8013a40:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 8013a42:	463b      	mov	r3, r7
 8013a44:	4618      	mov	r0, r3
 8013a46:	f7f2 fbdb 	bl	8006200 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 8013a4a:	60b8      	str	r0, [r7, #8]
    return data ? data->template asIntegral<T>(resources) : T();
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d005      	beq.n	8013a5e <_ZN11ArduinoJson8V730HB229ConverterItvE8fromJsonENS0_16JsonVariantConstE+0x32>
 8013a52:	68b9      	ldr	r1, [r7, #8]
 8013a54:	68f8      	ldr	r0, [r7, #12]
 8013a56:	f000 f987 	bl	8013d68 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE>
 8013a5a:	4603      	mov	r3, r0
 8013a5c:	e000      	b.n	8013a60 <_ZN11ArduinoJson8V730HB229ConverterItvE8fromJsonENS0_16JsonVariantConstE+0x34>
 8013a5e:	2300      	movs	r3, #0
  }
 8013a60:	4618      	mov	r0, r3
 8013a62:	3710      	adds	r7, #16
 8013a64:	46bd      	mov	sp, r7
 8013a66:	bd80      	pop	{r7, pc}

08013a68 <_ZN11ArduinoJson8V730HB226detail7forwardIRA18_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8013a68:	b480      	push	{r7}
 8013a6a:	b083      	sub	sp, #12
 8013a6c:	af00      	add	r7, sp, #0
 8013a6e:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8013a70:	687b      	ldr	r3, [r7, #4]
}
 8013a72:	4618      	mov	r0, r3
 8013a74:	370c      	adds	r7, #12
 8013a76:	46bd      	mov	sp, r7
 8013a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a7c:	4770      	bx	lr

08013a7e <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA18_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 8013a7e:	b580      	push	{r7, lr}
 8013a80:	b082      	sub	sp, #8
 8013a82:	af00      	add	r7, sp, #0
 8013a84:	6078      	str	r0, [r7, #4]
 8013a86:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 8013a88:	2301      	movs	r3, #1
 8013a8a:	2211      	movs	r2, #17
 8013a8c:	6839      	ldr	r1, [r7, #0]
 8013a8e:	6878      	ldr	r0, [r7, #4]
 8013a90:	f7f0 fa64 	bl	8003f5c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 8013a94:	6878      	ldr	r0, [r7, #4]
 8013a96:	3708      	adds	r7, #8
 8013a98:	46bd      	mov	sp, r7
 8013a9a:	bd80      	pop	{r7, pc}

08013a9c <_ZNSt12__shared_ptrI7TMC2208LN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJRPKcRfRtSA_RbEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 8013a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013aa0:	b08a      	sub	sp, #40	@ 0x28
 8013aa2:	af04      	add	r7, sp, #16
 8013aa4:	6178      	str	r0, [r7, #20]
 8013aa6:	6139      	str	r1, [r7, #16]
 8013aa8:	60fa      	str	r2, [r7, #12]
 8013aaa:	60bb      	str	r3, [r7, #8]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 8013aac:	697b      	ldr	r3, [r7, #20]
 8013aae:	2200      	movs	r2, #0
 8013ab0:	601a      	str	r2, [r3, #0]
 8013ab2:	697b      	ldr	r3, [r7, #20]
 8013ab4:	1d1c      	adds	r4, r3, #4
 8013ab6:	697d      	ldr	r5, [r7, #20]
 8013ab8:	68f8      	ldr	r0, [r7, #12]
 8013aba:	f7f9 ffe2 	bl	800da82 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8013abe:	4680      	mov	r8, r0
 8013ac0:	68b8      	ldr	r0, [r7, #8]
 8013ac2:	f7ff ff0c 	bl	80138de <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8013ac6:	4606      	mov	r6, r0
 8013ac8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013aca:	f7ff ff13 	bl	80138f4 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8013ace:	6078      	str	r0, [r7, #4]
 8013ad0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8013ad2:	f7ff ff0f 	bl	80138f4 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8013ad6:	6038      	str	r0, [r7, #0]
 8013ad8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013ada:	f7fb ff98 	bl	800fa0e <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8013ade:	4603      	mov	r3, r0
 8013ae0:	9303      	str	r3, [sp, #12]
 8013ae2:	683b      	ldr	r3, [r7, #0]
 8013ae4:	9302      	str	r3, [sp, #8]
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	9301      	str	r3, [sp, #4]
 8013aea:	9600      	str	r6, [sp, #0]
 8013aec:	4643      	mov	r3, r8
 8013aee:	693a      	ldr	r2, [r7, #16]
 8013af0:	4629      	mov	r1, r5
 8013af2:	4620      	mov	r0, r4
 8013af4:	f000 f9ca 	bl	8013e8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7TMC2208SaIvEJRPKcRfRtSA_RbEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>
	{ _M_enable_shared_from_this_with(_M_ptr); }
 8013af8:	697b      	ldr	r3, [r7, #20]
 8013afa:	681b      	ldr	r3, [r3, #0]
 8013afc:	4619      	mov	r1, r3
 8013afe:	6978      	ldr	r0, [r7, #20]
 8013b00:	f000 fa24 	bl	8013f4c <_ZNSt12__shared_ptrI7TMC2208LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
 8013b04:	697b      	ldr	r3, [r7, #20]
 8013b06:	4618      	mov	r0, r3
 8013b08:	3718      	adds	r7, #24
 8013b0a:	46bd      	mov	sp, r7
 8013b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013b10 <_ZNKSt12__shared_ptrI7TMC2208LN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 8013b10:	b480      	push	{r7}
 8013b12:	b083      	sub	sp, #12
 8013b14:	af00      	add	r7, sp, #0
 8013b16:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	4618      	mov	r0, r3
 8013b1e:	370c      	adds	r7, #12
 8013b20:	46bd      	mov	sp, r7
 8013b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b26:	4770      	bx	lr

08013b28 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE>:
  T asFloat(const ResourceManager* resources) const {
 8013b28:	b580      	push	{r7, lr}
 8013b2a:	b084      	sub	sp, #16
 8013b2c:	af00      	add	r7, sp, #0
 8013b2e:	6078      	str	r0, [r7, #4]
 8013b30:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 8013b32:	6839      	ldr	r1, [r7, #0]
 8013b34:	6878      	ldr	r0, [r7, #4]
 8013b36:	f7f1 fb6d 	bl	8005214 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 8013b3a:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	791b      	ldrb	r3, [r3, #4]
 8013b40:	3b04      	subs	r3, #4
 8013b42:	2b1a      	cmp	r3, #26
 8013b44:	d874      	bhi.n	8013c30 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x108>
 8013b46:	a201      	add	r2, pc, #4	@ (adr r2, 8013b4c <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x24>)
 8013b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b4c:	08013c0b 	.word	0x08013c0b
 8013b50:	08013c0b 	.word	0x08013c0b
 8013b54:	08013bb9 	.word	0x08013bb9
 8013b58:	08013c31 	.word	0x08013c31
 8013b5c:	08013c31 	.word	0x08013c31
 8013b60:	08013c31 	.word	0x08013c31
 8013b64:	08013bc7 	.word	0x08013bc7
 8013b68:	08013c31 	.word	0x08013c31
 8013b6c:	08013bd5 	.word	0x08013bd5
 8013b70:	08013c31 	.word	0x08013c31
 8013b74:	08013c1d 	.word	0x08013c1d
 8013b78:	08013c31 	.word	0x08013c31
 8013b7c:	08013c31 	.word	0x08013c31
 8013b80:	08013c31 	.word	0x08013c31
 8013b84:	08013c31 	.word	0x08013c31
 8013b88:	08013c31 	.word	0x08013c31
 8013b8c:	08013c31 	.word	0x08013c31
 8013b90:	08013c31 	.word	0x08013c31
 8013b94:	08013c31 	.word	0x08013c31
 8013b98:	08013c31 	.word	0x08013c31
 8013b9c:	08013c31 	.word	0x08013c31
 8013ba0:	08013c31 	.word	0x08013c31
 8013ba4:	08013be3 	.word	0x08013be3
 8013ba8:	08013c31 	.word	0x08013c31
 8013bac:	08013bf7 	.word	0x08013bf7
 8013bb0:	08013c31 	.word	0x08013c31
 8013bb4:	08013c25 	.word	0x08013c25
        return static_cast<T>(content_.asBoolean);
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	781b      	ldrb	r3, [r3, #0]
 8013bbc:	ee07 3a90 	vmov	s15, r3
 8013bc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013bc4:	e036      	b.n	8013c34 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x10c>
        return static_cast<T>(content_.asUint32);
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	ee07 3a90 	vmov	s15, r3
 8013bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013bd2:	e02f      	b.n	8013c34 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x10c>
        return static_cast<T>(content_.asInt32);
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	681b      	ldr	r3, [r3, #0]
 8013bd8:	ee07 3a90 	vmov	s15, r3
 8013bdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013be0:	e028      	b.n	8013c34 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x10c>
        return static_cast<T>(extension->asUint64);
 8013be2:	68fb      	ldr	r3, [r7, #12]
 8013be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013be8:	4610      	mov	r0, r2
 8013bea:	4619      	mov	r1, r3
 8013bec:	f7ec fe64 	bl	80008b8 <__aeabi_ul2f>
 8013bf0:	ee07 0a90 	vmov	s15, r0
 8013bf4:	e01e      	b.n	8013c34 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x10c>
        return static_cast<T>(extension->asInt64);
 8013bf6:	68fb      	ldr	r3, [r7, #12]
 8013bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bfc:	4610      	mov	r0, r2
 8013bfe:	4619      	mov	r1, r3
 8013c00:	f7ec fe62 	bl	80008c8 <__aeabi_l2f>
 8013c04:	ee07 0a90 	vmov	s15, r0
 8013c08:	e014      	b.n	8013c34 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x10c>
        return parseNumber<T>(content_.asOwnedString->data);
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	681b      	ldr	r3, [r3, #0]
 8013c0e:	3308      	adds	r3, #8
 8013c10:	4618      	mov	r0, r3
 8013c12:	f000 f9a6 	bl	8013f62 <_ZN11ArduinoJson8V730HB226detail11parseNumberIfEET_PKc>
 8013c16:	eef0 7a40 	vmov.f32	s15, s0
 8013c1a:	e00b      	b.n	8013c34 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x10c>
        return static_cast<T>(content_.asFloat);
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	edd3 7a00 	vldr	s15, [r3]
 8013c22:	e007      	b.n	8013c34 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x10c>
        return static_cast<T>(extension->asDouble);
 8013c24:	68fb      	ldr	r3, [r7, #12]
 8013c26:	ed93 7b00 	vldr	d7, [r3]
 8013c2a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8013c2e:	e001      	b.n	8013c34 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x10c>
        return 0;
 8013c30:	eddf 7a03 	vldr	s15, [pc, #12]	@ 8013c40 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x118>
  }
 8013c34:	eeb0 0a67 	vmov.f32	s0, s15
 8013c38:	3710      	adds	r7, #16
 8013c3a:	46bd      	mov	sp, r7
 8013c3c:	bd80      	pop	{r7, pc}
 8013c3e:	bf00      	nop
 8013c40:	00000000 	.word	0x00000000

08013c44 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE>:
  T asIntegral(const ResourceManager* resources) const {
 8013c44:	b580      	push	{r7, lr}
 8013c46:	b084      	sub	sp, #16
 8013c48:	af00      	add	r7, sp, #0
 8013c4a:	6078      	str	r0, [r7, #4]
 8013c4c:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 8013c4e:	6839      	ldr	r1, [r7, #0]
 8013c50:	6878      	ldr	r0, [r7, #4]
 8013c52:	f7f1 fadf 	bl	8005214 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 8013c56:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	791b      	ldrb	r3, [r3, #4]
 8013c5c:	3b04      	subs	r3, #4
 8013c5e:	2b1a      	cmp	r3, #26
 8013c60:	d87c      	bhi.n	8013d5c <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x118>
 8013c62:	a201      	add	r2, pc, #4	@ (adr r2, 8013c68 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x24>)
 8013c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c68:	08013d1b 	.word	0x08013d1b
 8013c6c:	08013d29 	.word	0x08013d29
 8013c70:	08013cd5 	.word	0x08013cd5
 8013c74:	08013d5d 	.word	0x08013d5d
 8013c78:	08013d5d 	.word	0x08013d5d
 8013c7c:	08013d5d 	.word	0x08013d5d
 8013c80:	08013cdb 	.word	0x08013cdb
 8013c84:	08013d5d 	.word	0x08013d5d
 8013c88:	08013ce9 	.word	0x08013ce9
 8013c8c:	08013d5d 	.word	0x08013d5d
 8013c90:	08013d39 	.word	0x08013d39
 8013c94:	08013d5d 	.word	0x08013d5d
 8013c98:	08013d5d 	.word	0x08013d5d
 8013c9c:	08013d5d 	.word	0x08013d5d
 8013ca0:	08013d5d 	.word	0x08013d5d
 8013ca4:	08013d5d 	.word	0x08013d5d
 8013ca8:	08013d5d 	.word	0x08013d5d
 8013cac:	08013d5d 	.word	0x08013d5d
 8013cb0:	08013d5d 	.word	0x08013d5d
 8013cb4:	08013d5d 	.word	0x08013d5d
 8013cb8:	08013d5d 	.word	0x08013d5d
 8013cbc:	08013d5d 	.word	0x08013d5d
 8013cc0:	08013cf7 	.word	0x08013cf7
 8013cc4:	08013d5d 	.word	0x08013d5d
 8013cc8:	08013d09 	.word	0x08013d09
 8013ccc:	08013d5d 	.word	0x08013d5d
 8013cd0:	08013d4b 	.word	0x08013d4b
        return content_.asBoolean;
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	781b      	ldrb	r3, [r3, #0]
 8013cd8:	e041      	b.n	8013d5e <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asUint32);
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	4618      	mov	r0, r3
 8013ce0:	f000 f955 	bl	8013f8e <_ZN11ArduinoJson8V730HB226detail13convertNumberIhmEET_T0_>
 8013ce4:	4603      	mov	r3, r0
 8013ce6:	e03a      	b.n	8013d5e <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asInt32);
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	681b      	ldr	r3, [r3, #0]
 8013cec:	4618      	mov	r0, r3
 8013cee:	f000 f960 	bl	8013fb2 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhlEET_T0_>
 8013cf2:	4603      	mov	r3, r0
 8013cf4:	e033      	b.n	8013d5e <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asUint64);
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cfc:	4610      	mov	r0, r2
 8013cfe:	4619      	mov	r1, r3
 8013d00:	f000 f969 	bl	8013fd6 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhyEET_T0_>
 8013d04:	4603      	mov	r3, r0
 8013d06:	e02a      	b.n	8013d5e <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asInt64);
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d0e:	4610      	mov	r0, r2
 8013d10:	4619      	mov	r1, r3
 8013d12:	f000 f973 	bl	8013ffc <_ZN11ArduinoJson8V730HB226detail13convertNumberIhxEET_T0_>
 8013d16:	4603      	mov	r3, r0
 8013d18:	e021      	b.n	8013d5e <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asLinkedString);
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	681b      	ldr	r3, [r3, #0]
 8013d1e:	4618      	mov	r0, r3
 8013d20:	f000 f97f 	bl	8014022 <_ZN11ArduinoJson8V730HB226detail11parseNumberIhEET_PKc>
 8013d24:	4603      	mov	r3, r0
 8013d26:	e01a      	b.n	8013d5e <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asOwnedString->data);
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	3308      	adds	r3, #8
 8013d2e:	4618      	mov	r0, r3
 8013d30:	f000 f977 	bl	8014022 <_ZN11ArduinoJson8V730HB226detail11parseNumberIhEET_PKc>
 8013d34:	4603      	mov	r3, r0
 8013d36:	e012      	b.n	8013d5e <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asFloat);
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	edd3 7a00 	vldr	s15, [r3]
 8013d3e:	eeb0 0a67 	vmov.f32	s0, s15
 8013d42:	f000 f982 	bl	801404a <_ZN11ArduinoJson8V730HB226detail13convertNumberIhfEET_T0_>
 8013d46:	4603      	mov	r3, r0
 8013d48:	e009      	b.n	8013d5e <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asDouble);
 8013d4a:	68fb      	ldr	r3, [r7, #12]
 8013d4c:	ed93 7b00 	vldr	d7, [r3]
 8013d50:	eeb0 0b47 	vmov.f64	d0, d7
 8013d54:	f000 f993 	bl	801407e <_ZN11ArduinoJson8V730HB226detail13convertNumberIhdEET_T0_>
 8013d58:	4603      	mov	r3, r0
 8013d5a:	e000      	b.n	8013d5e <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11a>
        return 0;
 8013d5c:	2300      	movs	r3, #0
  }
 8013d5e:	4618      	mov	r0, r3
 8013d60:	3710      	adds	r7, #16
 8013d62:	46bd      	mov	sp, r7
 8013d64:	bd80      	pop	{r7, pc}
 8013d66:	bf00      	nop

08013d68 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE>:
  T asIntegral(const ResourceManager* resources) const {
 8013d68:	b580      	push	{r7, lr}
 8013d6a:	b084      	sub	sp, #16
 8013d6c:	af00      	add	r7, sp, #0
 8013d6e:	6078      	str	r0, [r7, #4]
 8013d70:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 8013d72:	6839      	ldr	r1, [r7, #0]
 8013d74:	6878      	ldr	r0, [r7, #4]
 8013d76:	f7f1 fa4d 	bl	8005214 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 8013d7a:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	791b      	ldrb	r3, [r3, #4]
 8013d80:	3b04      	subs	r3, #4
 8013d82:	2b1a      	cmp	r3, #26
 8013d84:	d87c      	bhi.n	8013e80 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x118>
 8013d86:	a201      	add	r2, pc, #4	@ (adr r2, 8013d8c <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x24>)
 8013d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d8c:	08013e3f 	.word	0x08013e3f
 8013d90:	08013e4d 	.word	0x08013e4d
 8013d94:	08013df9 	.word	0x08013df9
 8013d98:	08013e81 	.word	0x08013e81
 8013d9c:	08013e81 	.word	0x08013e81
 8013da0:	08013e81 	.word	0x08013e81
 8013da4:	08013dff 	.word	0x08013dff
 8013da8:	08013e81 	.word	0x08013e81
 8013dac:	08013e0d 	.word	0x08013e0d
 8013db0:	08013e81 	.word	0x08013e81
 8013db4:	08013e5d 	.word	0x08013e5d
 8013db8:	08013e81 	.word	0x08013e81
 8013dbc:	08013e81 	.word	0x08013e81
 8013dc0:	08013e81 	.word	0x08013e81
 8013dc4:	08013e81 	.word	0x08013e81
 8013dc8:	08013e81 	.word	0x08013e81
 8013dcc:	08013e81 	.word	0x08013e81
 8013dd0:	08013e81 	.word	0x08013e81
 8013dd4:	08013e81 	.word	0x08013e81
 8013dd8:	08013e81 	.word	0x08013e81
 8013ddc:	08013e81 	.word	0x08013e81
 8013de0:	08013e81 	.word	0x08013e81
 8013de4:	08013e1b 	.word	0x08013e1b
 8013de8:	08013e81 	.word	0x08013e81
 8013dec:	08013e2d 	.word	0x08013e2d
 8013df0:	08013e81 	.word	0x08013e81
 8013df4:	08013e6f 	.word	0x08013e6f
        return content_.asBoolean;
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	781b      	ldrb	r3, [r3, #0]
 8013dfc:	e041      	b.n	8013e82 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asUint32);
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	681b      	ldr	r3, [r3, #0]
 8013e02:	4618      	mov	r0, r3
 8013e04:	f000 f955 	bl	80140b2 <_ZN11ArduinoJson8V730HB226detail13convertNumberItmEET_T0_>
 8013e08:	4603      	mov	r3, r0
 8013e0a:	e03a      	b.n	8013e82 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asInt32);
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	4618      	mov	r0, r3
 8013e12:	f000 f960 	bl	80140d6 <_ZN11ArduinoJson8V730HB226detail13convertNumberItlEET_T0_>
 8013e16:	4603      	mov	r3, r0
 8013e18:	e033      	b.n	8013e82 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asUint64);
 8013e1a:	68fb      	ldr	r3, [r7, #12]
 8013e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e20:	4610      	mov	r0, r2
 8013e22:	4619      	mov	r1, r3
 8013e24:	f000 f969 	bl	80140fa <_ZN11ArduinoJson8V730HB226detail13convertNumberItyEET_T0_>
 8013e28:	4603      	mov	r3, r0
 8013e2a:	e02a      	b.n	8013e82 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asInt64);
 8013e2c:	68fb      	ldr	r3, [r7, #12]
 8013e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e32:	4610      	mov	r0, r2
 8013e34:	4619      	mov	r1, r3
 8013e36:	f000 f973 	bl	8014120 <_ZN11ArduinoJson8V730HB226detail13convertNumberItxEET_T0_>
 8013e3a:	4603      	mov	r3, r0
 8013e3c:	e021      	b.n	8013e82 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asLinkedString);
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	681b      	ldr	r3, [r3, #0]
 8013e42:	4618      	mov	r0, r3
 8013e44:	f000 f97f 	bl	8014146 <_ZN11ArduinoJson8V730HB226detail11parseNumberItEET_PKc>
 8013e48:	4603      	mov	r3, r0
 8013e4a:	e01a      	b.n	8013e82 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asOwnedString->data);
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	3308      	adds	r3, #8
 8013e52:	4618      	mov	r0, r3
 8013e54:	f000 f977 	bl	8014146 <_ZN11ArduinoJson8V730HB226detail11parseNumberItEET_PKc>
 8013e58:	4603      	mov	r3, r0
 8013e5a:	e012      	b.n	8013e82 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asFloat);
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	edd3 7a00 	vldr	s15, [r3]
 8013e62:	eeb0 0a67 	vmov.f32	s0, s15
 8013e66:	f000 f982 	bl	801416e <_ZN11ArduinoJson8V730HB226detail13convertNumberItfEET_T0_>
 8013e6a:	4603      	mov	r3, r0
 8013e6c:	e009      	b.n	8013e82 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asDouble);
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	ed93 7b00 	vldr	d7, [r3]
 8013e74:	eeb0 0b47 	vmov.f64	d0, d7
 8013e78:	f000 f992 	bl	80141a0 <_ZN11ArduinoJson8V730HB226detail13convertNumberItdEET_T0_>
 8013e7c:	4603      	mov	r3, r0
 8013e7e:	e000      	b.n	8013e82 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x11a>
        return 0;
 8013e80:	2300      	movs	r3, #0
  }
 8013e82:	4618      	mov	r0, r3
 8013e84:	3710      	adds	r7, #16
 8013e86:	46bd      	mov	sp, r7
 8013e88:	bd80      	pop	{r7, pc}
 8013e8a:	bf00      	nop

08013e8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7TMC2208SaIvEJRPKcRfRtSA_RbEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>:
	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
 8013e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e90:	b08e      	sub	sp, #56	@ 0x38
 8013e92:	af04      	add	r7, sp, #16
 8013e94:	60f8      	str	r0, [r7, #12]
 8013e96:	60b9      	str	r1, [r7, #8]
 8013e98:	607a      	str	r2, [r7, #4]
 8013e9a:	603b      	str	r3, [r7, #0]
	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 8013e9c:	687a      	ldr	r2, [r7, #4]
 8013e9e:	f107 031c 	add.w	r3, r7, #28
 8013ea2:	4611      	mov	r1, r2
 8013ea4:	4618      	mov	r0, r3
 8013ea6:	f000 f994 	bl	80141d2 <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	  auto __guard = std::__allocate_guarded(__a2);
 8013eaa:	f107 0314 	add.w	r3, r7, #20
 8013eae:	f107 021c 	add.w	r2, r7, #28
 8013eb2:	4611      	mov	r1, r2
 8013eb4:	4618      	mov	r0, r3
 8013eb6:	f000 f9a5 	bl	8014204 <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>
	  _Sp_cp_type* __mem = __guard.get();
 8013eba:	f107 0314 	add.w	r3, r7, #20
 8013ebe:	4618      	mov	r0, r3
 8013ec0:	f000 f9c8 	bl	8014254 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>
 8013ec4:	6278      	str	r0, [r7, #36]	@ 0x24
	  auto __pi = ::new (__mem)
 8013ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ec8:	4619      	mov	r1, r3
 8013eca:	204c      	movs	r0, #76	@ 0x4c
 8013ecc:	f7f5 fc18 	bl	8009700 <_ZnwjPv>
 8013ed0:	4604      	mov	r4, r0
 8013ed2:	6838      	ldr	r0, [r7, #0]
 8013ed4:	f7f9 fdd5 	bl	800da82 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8013ed8:	4680      	mov	r8, r0
 8013eda:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8013edc:	f7ff fcff 	bl	80138de <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8013ee0:	4681      	mov	r9, r0
 8013ee2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8013ee4:	f7ff fd06 	bl	80138f4 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8013ee8:	4605      	mov	r5, r0
 8013eea:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8013eec:	f7ff fd02 	bl	80138f4 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8013ef0:	4606      	mov	r6, r0
 8013ef2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8013ef4:	f7fb fd8b 	bl	800fa0e <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8013ef8:	4603      	mov	r3, r0
 8013efa:	9302      	str	r3, [sp, #8]
 8013efc:	9601      	str	r6, [sp, #4]
 8013efe:	9500      	str	r5, [sp, #0]
 8013f00:	464b      	mov	r3, r9
 8013f02:	4642      	mov	r2, r8
 8013f04:	4651      	mov	r1, sl
 8013f06:	4620      	mov	r0, r4
 8013f08:	f000 f9b2 	bl	8014270 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcRfRtSA_RbEEES1_DpOT_>
 8013f0c:	623c      	str	r4, [r7, #32]
	  __guard = nullptr;
 8013f0e:	f107 0314 	add.w	r3, r7, #20
 8013f12:	2100      	movs	r1, #0
 8013f14:	4618      	mov	r0, r3
 8013f16:	f000 f9eb 	bl	80142f0 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>
	  _M_pi = __pi;
 8013f1a:	68fb      	ldr	r3, [r7, #12]
 8013f1c:	6a3a      	ldr	r2, [r7, #32]
 8013f1e:	601a      	str	r2, [r3, #0]
	  __p = __pi->_M_ptr();
 8013f20:	6a38      	ldr	r0, [r7, #32]
 8013f22:	f000 f9f4 	bl	801430e <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8013f26:	4602      	mov	r2, r0
 8013f28:	68bb      	ldr	r3, [r7, #8]
 8013f2a:	601a      	str	r2, [r3, #0]
	}
 8013f2c:	f107 0314 	add.w	r3, r7, #20
 8013f30:	4618      	mov	r0, r3
 8013f32:	f000 f97a 	bl	801422a <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 8013f36:	f107 031c 	add.w	r3, r7, #28
 8013f3a:	4618      	mov	r0, r3
 8013f3c:	f000 f956 	bl	80141ec <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8013f40:	68fb      	ldr	r3, [r7, #12]
 8013f42:	4618      	mov	r0, r3
 8013f44:	3728      	adds	r7, #40	@ 0x28
 8013f46:	46bd      	mov	sp, r7
 8013f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08013f4c <_ZNSt12__shared_ptrI7TMC2208LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 8013f4c:	b480      	push	{r7}
 8013f4e:	b083      	sub	sp, #12
 8013f50:	af00      	add	r7, sp, #0
 8013f52:	6078      	str	r0, [r7, #4]
 8013f54:	6039      	str	r1, [r7, #0]
	{ }
 8013f56:	bf00      	nop
 8013f58:	370c      	adds	r7, #12
 8013f5a:	46bd      	mov	sp, r7
 8013f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f60:	4770      	bx	lr

08013f62 <_ZN11ArduinoJson8V730HB226detail11parseNumberIfEET_PKc>:
inline T parseNumber(const char* s) {
 8013f62:	b580      	push	{r7, lr}
 8013f64:	b086      	sub	sp, #24
 8013f66:	af00      	add	r7, sp, #0
 8013f68:	6078      	str	r0, [r7, #4]
  return parseNumber(s).convertTo<T>();
 8013f6a:	f107 0308 	add.w	r3, r7, #8
 8013f6e:	6879      	ldr	r1, [r7, #4]
 8013f70:	4618      	mov	r0, r3
 8013f72:	f7f1 fbb3 	bl	80056dc <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>
 8013f76:	f107 0308 	add.w	r3, r7, #8
 8013f7a:	4618      	mov	r0, r3
 8013f7c:	f000 f9d6 	bl	801432c <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIfEET_v>
 8013f80:	eef0 7a40 	vmov.f32	s15, s0
}
 8013f84:	eeb0 0a67 	vmov.f32	s0, s15
 8013f88:	3718      	adds	r7, #24
 8013f8a:	46bd      	mov	sp, r7
 8013f8c:	bd80      	pop	{r7, pc}

08013f8e <_ZN11ArduinoJson8V730HB226detail13convertNumberIhmEET_T0_>:
TOut convertNumber(TIn value) {
 8013f8e:	b580      	push	{r7, lr}
 8013f90:	b082      	sub	sp, #8
 8013f92:	af00      	add	r7, sp, #0
 8013f94:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8013f96:	6878      	ldr	r0, [r7, #4]
 8013f98:	f000 fa0e 	bl	80143b8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 8013f9c:	4603      	mov	r3, r0
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d002      	beq.n	8013fa8 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhmEET_T0_+0x1a>
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	b2db      	uxtb	r3, r3
 8013fa6:	e000      	b.n	8013faa <_ZN11ArduinoJson8V730HB226detail13convertNumberIhmEET_T0_+0x1c>
 8013fa8:	2300      	movs	r3, #0
}
 8013faa:	4618      	mov	r0, r3
 8013fac:	3708      	adds	r7, #8
 8013fae:	46bd      	mov	sp, r7
 8013fb0:	bd80      	pop	{r7, pc}

08013fb2 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhlEET_T0_>:
TOut convertNumber(TIn value) {
 8013fb2:	b580      	push	{r7, lr}
 8013fb4:	b082      	sub	sp, #8
 8013fb6:	af00      	add	r7, sp, #0
 8013fb8:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8013fba:	6878      	ldr	r0, [r7, #4]
 8013fbc:	f000 fa0e 	bl	80143dc <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>
 8013fc0:	4603      	mov	r3, r0
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	d002      	beq.n	8013fcc <_ZN11ArduinoJson8V730HB226detail13convertNumberIhlEET_T0_+0x1a>
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	b2db      	uxtb	r3, r3
 8013fca:	e000      	b.n	8013fce <_ZN11ArduinoJson8V730HB226detail13convertNumberIhlEET_T0_+0x1c>
 8013fcc:	2300      	movs	r3, #0
}
 8013fce:	4618      	mov	r0, r3
 8013fd0:	3708      	adds	r7, #8
 8013fd2:	46bd      	mov	sp, r7
 8013fd4:	bd80      	pop	{r7, pc}

08013fd6 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhyEET_T0_>:
TOut convertNumber(TIn value) {
 8013fd6:	b580      	push	{r7, lr}
 8013fd8:	b082      	sub	sp, #8
 8013fda:	af00      	add	r7, sp, #0
 8013fdc:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8013fe0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8013fe4:	f000 fa11 	bl	801440a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 8013fe8:	4603      	mov	r3, r0
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d001      	beq.n	8013ff2 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhyEET_T0_+0x1c>
 8013fee:	783b      	ldrb	r3, [r7, #0]
 8013ff0:	e000      	b.n	8013ff4 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhyEET_T0_+0x1e>
 8013ff2:	2300      	movs	r3, #0
}
 8013ff4:	4618      	mov	r0, r3
 8013ff6:	3708      	adds	r7, #8
 8013ff8:	46bd      	mov	sp, r7
 8013ffa:	bd80      	pop	{r7, pc}

08013ffc <_ZN11ArduinoJson8V730HB226detail13convertNumberIhxEET_T0_>:
TOut convertNumber(TIn value) {
 8013ffc:	b580      	push	{r7, lr}
 8013ffe:	b082      	sub	sp, #8
 8014000:	af00      	add	r7, sp, #0
 8014002:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8014006:	e9d7 0100 	ldrd	r0, r1, [r7]
 801400a:	f000 fa17 	bl	801443c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>
 801400e:	4603      	mov	r3, r0
 8014010:	2b00      	cmp	r3, #0
 8014012:	d001      	beq.n	8014018 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhxEET_T0_+0x1c>
 8014014:	783b      	ldrb	r3, [r7, #0]
 8014016:	e000      	b.n	801401a <_ZN11ArduinoJson8V730HB226detail13convertNumberIhxEET_T0_+0x1e>
 8014018:	2300      	movs	r3, #0
}
 801401a:	4618      	mov	r0, r3
 801401c:	3708      	adds	r7, #8
 801401e:	46bd      	mov	sp, r7
 8014020:	bd80      	pop	{r7, pc}

08014022 <_ZN11ArduinoJson8V730HB226detail11parseNumberIhEET_PKc>:
inline T parseNumber(const char* s) {
 8014022:	b580      	push	{r7, lr}
 8014024:	b086      	sub	sp, #24
 8014026:	af00      	add	r7, sp, #0
 8014028:	6078      	str	r0, [r7, #4]
  return parseNumber(s).convertTo<T>();
 801402a:	f107 0308 	add.w	r3, r7, #8
 801402e:	6879      	ldr	r1, [r7, #4]
 8014030:	4618      	mov	r0, r3
 8014032:	f7f1 fb53 	bl	80056dc <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>
 8014036:	f107 0308 	add.w	r3, r7, #8
 801403a:	4618      	mov	r0, r3
 801403c:	f000 fa1e 	bl	801447c <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIhEET_v>
 8014040:	4603      	mov	r3, r0
}
 8014042:	4618      	mov	r0, r3
 8014044:	3718      	adds	r7, #24
 8014046:	46bd      	mov	sp, r7
 8014048:	bd80      	pop	{r7, pc}

0801404a <_ZN11ArduinoJson8V730HB226detail13convertNumberIhfEET_T0_>:
TOut convertNumber(TIn value) {
 801404a:	b580      	push	{r7, lr}
 801404c:	b082      	sub	sp, #8
 801404e:	af00      	add	r7, sp, #0
 8014050:	ed87 0a01 	vstr	s0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8014054:	ed97 0a01 	vldr	s0, [r7, #4]
 8014058:	f000 fa5e 	bl	8014518 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 801405c:	4603      	mov	r3, r0
 801405e:	2b00      	cmp	r3, #0
 8014060:	d008      	beq.n	8014074 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhfEET_T0_+0x2a>
 8014062:	edd7 7a01 	vldr	s15, [r7, #4]
 8014066:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801406a:	edc7 7a00 	vstr	s15, [r7]
 801406e:	783b      	ldrb	r3, [r7, #0]
 8014070:	b2db      	uxtb	r3, r3
 8014072:	e000      	b.n	8014076 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhfEET_T0_+0x2c>
 8014074:	2300      	movs	r3, #0
}
 8014076:	4618      	mov	r0, r3
 8014078:	3708      	adds	r7, #8
 801407a:	46bd      	mov	sp, r7
 801407c:	bd80      	pop	{r7, pc}

0801407e <_ZN11ArduinoJson8V730HB226detail13convertNumberIhdEET_T0_>:
TOut convertNumber(TIn value) {
 801407e:	b580      	push	{r7, lr}
 8014080:	b084      	sub	sp, #16
 8014082:	af00      	add	r7, sp, #0
 8014084:	ed87 0b02 	vstr	d0, [r7, #8]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8014088:	ed97 0b02 	vldr	d0, [r7, #8]
 801408c:	f000 fa6c 	bl	8014568 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 8014090:	4603      	mov	r3, r0
 8014092:	2b00      	cmp	r3, #0
 8014094:	d008      	beq.n	80140a8 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhdEET_T0_+0x2a>
 8014096:	ed97 7b02 	vldr	d7, [r7, #8]
 801409a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 801409e:	edc7 7a01 	vstr	s15, [r7, #4]
 80140a2:	793b      	ldrb	r3, [r7, #4]
 80140a4:	b2db      	uxtb	r3, r3
 80140a6:	e000      	b.n	80140aa <_ZN11ArduinoJson8V730HB226detail13convertNumberIhdEET_T0_+0x2c>
 80140a8:	2300      	movs	r3, #0
}
 80140aa:	4618      	mov	r0, r3
 80140ac:	3710      	adds	r7, #16
 80140ae:	46bd      	mov	sp, r7
 80140b0:	bd80      	pop	{r7, pc}

080140b2 <_ZN11ArduinoJson8V730HB226detail13convertNumberItmEET_T0_>:
TOut convertNumber(TIn value) {
 80140b2:	b580      	push	{r7, lr}
 80140b4:	b082      	sub	sp, #8
 80140b6:	af00      	add	r7, sp, #0
 80140b8:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80140ba:	6878      	ldr	r0, [r7, #4]
 80140bc:	f000 fa7c 	bl	80145b8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 80140c0:	4603      	mov	r3, r0
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d002      	beq.n	80140cc <_ZN11ArduinoJson8V730HB226detail13convertNumberItmEET_T0_+0x1a>
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	b29b      	uxth	r3, r3
 80140ca:	e000      	b.n	80140ce <_ZN11ArduinoJson8V730HB226detail13convertNumberItmEET_T0_+0x1c>
 80140cc:	2300      	movs	r3, #0
}
 80140ce:	4618      	mov	r0, r3
 80140d0:	3708      	adds	r7, #8
 80140d2:	46bd      	mov	sp, r7
 80140d4:	bd80      	pop	{r7, pc}

080140d6 <_ZN11ArduinoJson8V730HB226detail13convertNumberItlEET_T0_>:
TOut convertNumber(TIn value) {
 80140d6:	b580      	push	{r7, lr}
 80140d8:	b082      	sub	sp, #8
 80140da:	af00      	add	r7, sp, #0
 80140dc:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80140de:	6878      	ldr	r0, [r7, #4]
 80140e0:	f000 fa7c 	bl	80145dc <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>
 80140e4:	4603      	mov	r3, r0
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	d002      	beq.n	80140f0 <_ZN11ArduinoJson8V730HB226detail13convertNumberItlEET_T0_+0x1a>
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	b29b      	uxth	r3, r3
 80140ee:	e000      	b.n	80140f2 <_ZN11ArduinoJson8V730HB226detail13convertNumberItlEET_T0_+0x1c>
 80140f0:	2300      	movs	r3, #0
}
 80140f2:	4618      	mov	r0, r3
 80140f4:	3708      	adds	r7, #8
 80140f6:	46bd      	mov	sp, r7
 80140f8:	bd80      	pop	{r7, pc}

080140fa <_ZN11ArduinoJson8V730HB226detail13convertNumberItyEET_T0_>:
TOut convertNumber(TIn value) {
 80140fa:	b580      	push	{r7, lr}
 80140fc:	b082      	sub	sp, #8
 80140fe:	af00      	add	r7, sp, #0
 8014100:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8014104:	e9d7 0100 	ldrd	r0, r1, [r7]
 8014108:	f000 fa7f 	bl	801460a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 801410c:	4603      	mov	r3, r0
 801410e:	2b00      	cmp	r3, #0
 8014110:	d001      	beq.n	8014116 <_ZN11ArduinoJson8V730HB226detail13convertNumberItyEET_T0_+0x1c>
 8014112:	883b      	ldrh	r3, [r7, #0]
 8014114:	e000      	b.n	8014118 <_ZN11ArduinoJson8V730HB226detail13convertNumberItyEET_T0_+0x1e>
 8014116:	2300      	movs	r3, #0
}
 8014118:	4618      	mov	r0, r3
 801411a:	3708      	adds	r7, #8
 801411c:	46bd      	mov	sp, r7
 801411e:	bd80      	pop	{r7, pc}

08014120 <_ZN11ArduinoJson8V730HB226detail13convertNumberItxEET_T0_>:
TOut convertNumber(TIn value) {
 8014120:	b580      	push	{r7, lr}
 8014122:	b082      	sub	sp, #8
 8014124:	af00      	add	r7, sp, #0
 8014126:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 801412a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801412e:	f000 fa85 	bl	801463c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>
 8014132:	4603      	mov	r3, r0
 8014134:	2b00      	cmp	r3, #0
 8014136:	d001      	beq.n	801413c <_ZN11ArduinoJson8V730HB226detail13convertNumberItxEET_T0_+0x1c>
 8014138:	883b      	ldrh	r3, [r7, #0]
 801413a:	e000      	b.n	801413e <_ZN11ArduinoJson8V730HB226detail13convertNumberItxEET_T0_+0x1e>
 801413c:	2300      	movs	r3, #0
}
 801413e:	4618      	mov	r0, r3
 8014140:	3708      	adds	r7, #8
 8014142:	46bd      	mov	sp, r7
 8014144:	bd80      	pop	{r7, pc}

08014146 <_ZN11ArduinoJson8V730HB226detail11parseNumberItEET_PKc>:
inline T parseNumber(const char* s) {
 8014146:	b580      	push	{r7, lr}
 8014148:	b086      	sub	sp, #24
 801414a:	af00      	add	r7, sp, #0
 801414c:	6078      	str	r0, [r7, #4]
  return parseNumber(s).convertTo<T>();
 801414e:	f107 0308 	add.w	r3, r7, #8
 8014152:	6879      	ldr	r1, [r7, #4]
 8014154:	4618      	mov	r0, r3
 8014156:	f7f1 fac1 	bl	80056dc <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>
 801415a:	f107 0308 	add.w	r3, r7, #8
 801415e:	4618      	mov	r0, r3
 8014160:	f000 fa8c 	bl	801467c <_ZNK11ArduinoJson8V730HB226detail6Number9convertToItEET_v>
 8014164:	4603      	mov	r3, r0
}
 8014166:	4618      	mov	r0, r3
 8014168:	3718      	adds	r7, #24
 801416a:	46bd      	mov	sp, r7
 801416c:	bd80      	pop	{r7, pc}

0801416e <_ZN11ArduinoJson8V730HB226detail13convertNumberItfEET_T0_>:
TOut convertNumber(TIn value) {
 801416e:	b580      	push	{r7, lr}
 8014170:	b082      	sub	sp, #8
 8014172:	af00      	add	r7, sp, #0
 8014174:	ed87 0a01 	vstr	s0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8014178:	ed97 0a01 	vldr	s0, [r7, #4]
 801417c:	f000 fac4 	bl	8014708 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 8014180:	4603      	mov	r3, r0
 8014182:	2b00      	cmp	r3, #0
 8014184:	d007      	beq.n	8014196 <_ZN11ArduinoJson8V730HB226detail13convertNumberItfEET_T0_+0x28>
 8014186:	edd7 7a01 	vldr	s15, [r7, #4]
 801418a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801418e:	ee17 3a90 	vmov	r3, s15
 8014192:	b29b      	uxth	r3, r3
 8014194:	e000      	b.n	8014198 <_ZN11ArduinoJson8V730HB226detail13convertNumberItfEET_T0_+0x2a>
 8014196:	2300      	movs	r3, #0
}
 8014198:	4618      	mov	r0, r3
 801419a:	3708      	adds	r7, #8
 801419c:	46bd      	mov	sp, r7
 801419e:	bd80      	pop	{r7, pc}

080141a0 <_ZN11ArduinoJson8V730HB226detail13convertNumberItdEET_T0_>:
TOut convertNumber(TIn value) {
 80141a0:	b580      	push	{r7, lr}
 80141a2:	b082      	sub	sp, #8
 80141a4:	af00      	add	r7, sp, #0
 80141a6:	ed87 0b00 	vstr	d0, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80141aa:	ed97 0b00 	vldr	d0, [r7]
 80141ae:	f000 fad3 	bl	8014758 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 80141b2:	4603      	mov	r3, r0
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	d007      	beq.n	80141c8 <_ZN11ArduinoJson8V730HB226detail13convertNumberItdEET_T0_+0x28>
 80141b8:	ed97 7b00 	vldr	d7, [r7]
 80141bc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80141c0:	ee17 3a90 	vmov	r3, s15
 80141c4:	b29b      	uxth	r3, r3
 80141c6:	e000      	b.n	80141ca <_ZN11ArduinoJson8V730HB226detail13convertNumberItdEET_T0_+0x2a>
 80141c8:	2300      	movs	r3, #0
}
 80141ca:	4618      	mov	r0, r3
 80141cc:	3708      	adds	r7, #8
 80141ce:	46bd      	mov	sp, r7
 80141d0:	bd80      	pop	{r7, pc}

080141d2 <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
 80141d2:	b580      	push	{r7, lr}
 80141d4:	b082      	sub	sp, #8
 80141d6:	af00      	add	r7, sp, #0
 80141d8:	6078      	str	r0, [r7, #4]
 80141da:	6039      	str	r1, [r7, #0]
 80141dc:	6878      	ldr	r0, [r7, #4]
 80141de:	f000 fae3 	bl	80147a8 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	4618      	mov	r0, r3
 80141e6:	3708      	adds	r7, #8
 80141e8:	46bd      	mov	sp, r7
 80141ea:	bd80      	pop	{r7, pc}

080141ec <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80141ec:	b580      	push	{r7, lr}
 80141ee:	b082      	sub	sp, #8
 80141f0:	af00      	add	r7, sp, #0
 80141f2:	6078      	str	r0, [r7, #4]
 80141f4:	6878      	ldr	r0, [r7, #4]
 80141f6:	f000 fae2 	bl	80147be <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	4618      	mov	r0, r3
 80141fe:	3708      	adds	r7, #8
 8014200:	46bd      	mov	sp, r7
 8014202:	bd80      	pop	{r7, pc}

08014204 <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>:
    __allocate_guarded(_Alloc& __a)
 8014204:	b580      	push	{r7, lr}
 8014206:	b082      	sub	sp, #8
 8014208:	af00      	add	r7, sp, #0
 801420a:	6078      	str	r0, [r7, #4]
 801420c:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 801420e:	2101      	movs	r1, #1
 8014210:	6838      	ldr	r0, [r7, #0]
 8014212:	f000 fadf 	bl	80147d4 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>
 8014216:	4603      	mov	r3, r0
 8014218:	461a      	mov	r2, r3
 801421a:	6839      	ldr	r1, [r7, #0]
 801421c:	6878      	ldr	r0, [r7, #4]
 801421e:	f000 fae8 	bl	80147f2 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
    }
 8014222:	6878      	ldr	r0, [r7, #4]
 8014224:	3708      	adds	r7, #8
 8014226:	46bd      	mov	sp, r7
 8014228:	bd80      	pop	{r7, pc}

0801422a <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 801422a:	b580      	push	{r7, lr}
 801422c:	b082      	sub	sp, #8
 801422e:	af00      	add	r7, sp, #0
 8014230:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	685b      	ldr	r3, [r3, #4]
 8014236:	2b00      	cmp	r3, #0
 8014238:	d007      	beq.n	801424a <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	6818      	ldr	r0, [r3, #0]
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	685b      	ldr	r3, [r3, #4]
 8014242:	2201      	movs	r2, #1
 8014244:	4619      	mov	r1, r3
 8014246:	f000 fae8 	bl	801481a <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>
      }
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	4618      	mov	r0, r3
 801424e:	3708      	adds	r7, #8
 8014250:	46bd      	mov	sp, r7
 8014252:	bd80      	pop	{r7, pc}

08014254 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>:
      value_type* get() { return std::__to_address(_M_ptr); }
 8014254:	b580      	push	{r7, lr}
 8014256:	b082      	sub	sp, #8
 8014258:	af00      	add	r7, sp, #0
 801425a:	6078      	str	r0, [r7, #4]
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	685b      	ldr	r3, [r3, #4]
 8014260:	4618      	mov	r0, r3
 8014262:	f000 fae9 	bl	8014838 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>
 8014266:	4603      	mov	r3, r0
 8014268:	4618      	mov	r0, r3
 801426a:	3708      	adds	r7, #8
 801426c:	46bd      	mov	sp, r7
 801426e:	bd80      	pop	{r7, pc}

08014270 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcRfRtSA_RbEEES1_DpOT_>:
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 8014270:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014274:	b089      	sub	sp, #36	@ 0x24
 8014276:	af04      	add	r7, sp, #16
 8014278:	60f8      	str	r0, [r7, #12]
 801427a:	7239      	strb	r1, [r7, #8]
 801427c:	607a      	str	r2, [r7, #4]
 801427e:	603b      	str	r3, [r7, #0]
	: _M_impl(__a)
 8014280:	68fb      	ldr	r3, [r7, #12]
 8014282:	4618      	mov	r0, r3
 8014284:	f7f8 fb3e 	bl	800c904 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8014288:	4a18      	ldr	r2, [pc, #96]	@ (80142ec <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcRfRtSA_RbEEES1_DpOT_+0x7c>)
 801428a:	68fb      	ldr	r3, [r7, #12]
 801428c:	601a      	str	r2, [r3, #0]
 801428e:	68fb      	ldr	r3, [r7, #12]
 8014290:	330c      	adds	r3, #12
 8014292:	4621      	mov	r1, r4
 8014294:	4618      	mov	r0, r3
 8014296:	f000 fada 	bl	801484e <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
 801429a:	68f8      	ldr	r0, [r7, #12]
 801429c:	f000 f837 	bl	801430e <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 80142a0:	4606      	mov	r6, r0
 80142a2:	6878      	ldr	r0, [r7, #4]
 80142a4:	f7f9 fbed 	bl	800da82 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 80142a8:	4680      	mov	r8, r0
 80142aa:	6838      	ldr	r0, [r7, #0]
 80142ac:	f7ff fb17 	bl	80138de <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 80142b0:	4681      	mov	r9, r0
 80142b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80142b4:	f7ff fb1e 	bl	80138f4 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80142b8:	4604      	mov	r4, r0
 80142ba:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80142bc:	f7ff fb1a 	bl	80138f4 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80142c0:	4605      	mov	r5, r0
 80142c2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80142c4:	f7fb fba3 	bl	800fa0e <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 80142c8:	4603      	mov	r3, r0
 80142ca:	f107 0008 	add.w	r0, r7, #8
 80142ce:	9302      	str	r3, [sp, #8]
 80142d0:	9501      	str	r5, [sp, #4]
 80142d2:	9400      	str	r4, [sp, #0]
 80142d4:	464b      	mov	r3, r9
 80142d6:	4642      	mov	r2, r8
 80142d8:	4631      	mov	r1, r6
 80142da:	f000 fac7 	bl	801486c <_ZNSt16allocator_traitsISaIvEE9constructI7TMC2208JRPKcRfRtS8_RbEEEvRS0_PT_DpOT0_>
	}
 80142de:	68fb      	ldr	r3, [r7, #12]
 80142e0:	4618      	mov	r0, r3
 80142e2:	3714      	adds	r7, #20
 80142e4:	46bd      	mov	sp, r7
 80142e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80142ea:	bf00      	nop
 80142ec:	080268ec 	.word	0x080268ec

080142f0 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 80142f0:	b480      	push	{r7}
 80142f2:	b083      	sub	sp, #12
 80142f4:	af00      	add	r7, sp, #0
 80142f6:	6078      	str	r0, [r7, #4]
 80142f8:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	2200      	movs	r2, #0
 80142fe:	605a      	str	r2, [r3, #4]
	return *this;
 8014300:	687b      	ldr	r3, [r7, #4]
      }
 8014302:	4618      	mov	r0, r3
 8014304:	370c      	adds	r7, #12
 8014306:	46bd      	mov	sp, r7
 8014308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801430c:	4770      	bx	lr

0801430e <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>:
      _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }
 801430e:	b580      	push	{r7, lr}
 8014310:	b082      	sub	sp, #8
 8014312:	af00      	add	r7, sp, #0
 8014314:	6078      	str	r0, [r7, #4]
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	330c      	adds	r3, #12
 801431a:	4618      	mov	r0, r3
 801431c:	f000 facf 	bl	80148be <_ZN9__gnu_cxx16__aligned_bufferI7TMC2208E6_M_ptrEv>
 8014320:	4603      	mov	r3, r0
 8014322:	4618      	mov	r0, r3
 8014324:	3708      	adds	r7, #8
 8014326:	46bd      	mov	sp, r7
 8014328:	bd80      	pop	{r7, pc}
	...

0801432c <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIfEET_v>:
  T convertTo() const {
 801432c:	b580      	push	{r7, lr}
 801432e:	b082      	sub	sp, #8
 8014330:	af00      	add	r7, sp, #0
 8014332:	6078      	str	r0, [r7, #4]
    switch (type_) {
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	781b      	ldrb	r3, [r3, #0]
 8014338:	3b01      	subs	r3, #1
 801433a:	2b03      	cmp	r3, #3
 801433c:	d832      	bhi.n	80143a4 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIfEET_v+0x78>
 801433e:	a201      	add	r2, pc, #4	@ (adr r2, 8014344 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIfEET_v+0x18>)
 8014340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014344:	08014355 	.word	0x08014355
 8014348:	08014369 	.word	0x08014369
 801434c:	0801437d 	.word	0x0801437d
 8014350:	08014391 	.word	0x08014391
        return convertNumber<T>(value_.asFloat);
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	edd3 7a02 	vldr	s15, [r3, #8]
 801435a:	eeb0 0a67 	vmov.f32	s0, s15
 801435e:	f000 faba 	bl	80148d6 <_ZN11ArduinoJson8V730HB226detail13convertNumberIffEET_T0_>
 8014362:	eef0 7a40 	vmov.f32	s15, s0
 8014366:	e01f      	b.n	80143a8 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIfEET_v+0x7c>
        return convertNumber<T>(value_.asSignedInteger);
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801436e:	4610      	mov	r0, r2
 8014370:	4619      	mov	r1, r3
 8014372:	f000 fac7 	bl	8014904 <_ZN11ArduinoJson8V730HB226detail13convertNumberIfxEET_T0_>
 8014376:	eef0 7a40 	vmov.f32	s15, s0
 801437a:	e015      	b.n	80143a8 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIfEET_v+0x7c>
        return convertNumber<T>(value_.asUnsignedInteger);
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8014382:	4610      	mov	r0, r2
 8014384:	4619      	mov	r1, r3
 8014386:	f000 fad8 	bl	801493a <_ZN11ArduinoJson8V730HB226detail13convertNumberIfyEET_T0_>
 801438a:	eef0 7a40 	vmov.f32	s15, s0
 801438e:	e00b      	b.n	80143a8 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIfEET_v+0x7c>
        return convertNumber<T>(value_.asDouble);
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	ed93 7b02 	vldr	d7, [r3, #8]
 8014396:	eeb0 0b47 	vmov.f64	d0, d7
 801439a:	f000 fae9 	bl	8014970 <_ZN11ArduinoJson8V730HB226detail13convertNumberIfdEET_T0_>
 801439e:	eef0 7a40 	vmov.f32	s15, s0
 80143a2:	e001      	b.n	80143a8 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIfEET_v+0x7c>
        return T();
 80143a4:	eddf 7a03 	vldr	s15, [pc, #12]	@ 80143b4 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIfEET_v+0x88>
  }
 80143a8:	eeb0 0a67 	vmov.f32	s0, s15
 80143ac:	3708      	adds	r7, #8
 80143ae:	46bd      	mov	sp, r7
 80143b0:	bd80      	pop	{r7, pc}
 80143b2:	bf00      	nop
 80143b4:	00000000 	.word	0x00000000

080143b8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 80143b8:	b580      	push	{r7, lr}
 80143ba:	b082      	sub	sp, #8
 80143bc:	af00      	add	r7, sp, #0
 80143be:	6078      	str	r0, [r7, #4]
  return value <= TIn(numeric_limits<TOut>::highest());
 80143c0:	f000 f8a2 	bl	8014508 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE7highestEv>
 80143c4:	4603      	mov	r3, r0
 80143c6:	461a      	mov	r2, r3
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	4293      	cmp	r3, r2
 80143cc:	bf94      	ite	ls
 80143ce:	2301      	movls	r3, #1
 80143d0:	2300      	movhi	r3, #0
 80143d2:	b2db      	uxtb	r3, r3
}
 80143d4:	4618      	mov	r0, r3
 80143d6:	3708      	adds	r7, #8
 80143d8:	46bd      	mov	sp, r7
 80143da:	bd80      	pop	{r7, pc}

080143dc <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 80143dc:	b580      	push	{r7, lr}
 80143de:	b082      	sub	sp, #8
 80143e0:	af00      	add	r7, sp, #0
 80143e2:	6078      	str	r0, [r7, #4]
  if (value < 0)
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	da01      	bge.n	80143ee <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x12>
    return false;
 80143ea:	2300      	movs	r3, #0
 80143ec:	e009      	b.n	8014402 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x26>
  return value <= TIn(numeric_limits<TOut>::highest());
 80143ee:	f000 f88b 	bl	8014508 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE7highestEv>
 80143f2:	4603      	mov	r3, r0
 80143f4:	461a      	mov	r2, r3
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	4293      	cmp	r3, r2
 80143fa:	bfd4      	ite	le
 80143fc:	2301      	movle	r3, #1
 80143fe:	2300      	movgt	r3, #0
 8014400:	b2db      	uxtb	r3, r3
}
 8014402:	4618      	mov	r0, r3
 8014404:	3708      	adds	r7, #8
 8014406:	46bd      	mov	sp, r7
 8014408:	bd80      	pop	{r7, pc}

0801440a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 801440a:	b5b0      	push	{r4, r5, r7, lr}
 801440c:	b082      	sub	sp, #8
 801440e:	af00      	add	r7, sp, #0
 8014410:	e9c7 0100 	strd	r0, r1, [r7]
  return value <= TIn(numeric_limits<TOut>::highest());
 8014414:	f000 f878 	bl	8014508 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE7highestEv>
 8014418:	4603      	mov	r3, r0
 801441a:	b2db      	uxtb	r3, r3
 801441c:	2200      	movs	r2, #0
 801441e:	461c      	mov	r4, r3
 8014420:	4615      	mov	r5, r2
 8014422:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014426:	4294      	cmp	r4, r2
 8014428:	eb75 0303 	sbcs.w	r3, r5, r3
 801442c:	bf2c      	ite	cs
 801442e:	2301      	movcs	r3, #1
 8014430:	2300      	movcc	r3, #0
 8014432:	b2db      	uxtb	r3, r3
}
 8014434:	4618      	mov	r0, r3
 8014436:	3708      	adds	r7, #8
 8014438:	46bd      	mov	sp, r7
 801443a:	bdb0      	pop	{r4, r5, r7, pc}

0801443c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 801443c:	b5b0      	push	{r4, r5, r7, lr}
 801443e:	b082      	sub	sp, #8
 8014440:	af00      	add	r7, sp, #0
 8014442:	e9c7 0100 	strd	r0, r1, [r7]
  if (value < 0)
 8014446:	e9d7 2300 	ldrd	r2, r3, [r7]
 801444a:	2b00      	cmp	r3, #0
 801444c:	da01      	bge.n	8014452 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x16>
    return false;
 801444e:	2300      	movs	r3, #0
 8014450:	e00f      	b.n	8014472 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x36>
  return value <= TIn(numeric_limits<TOut>::highest());
 8014452:	f000 f859 	bl	8014508 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE7highestEv>
 8014456:	4603      	mov	r3, r0
 8014458:	b2db      	uxtb	r3, r3
 801445a:	2200      	movs	r2, #0
 801445c:	461c      	mov	r4, r3
 801445e:	4615      	mov	r5, r2
 8014460:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014464:	4294      	cmp	r4, r2
 8014466:	eb75 0303 	sbcs.w	r3, r5, r3
 801446a:	bfac      	ite	ge
 801446c:	2301      	movge	r3, #1
 801446e:	2300      	movlt	r3, #0
 8014470:	b2db      	uxtb	r3, r3
}
 8014472:	4618      	mov	r0, r3
 8014474:	3708      	adds	r7, #8
 8014476:	46bd      	mov	sp, r7
 8014478:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801447c <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIhEET_v>:
  T convertTo() const {
 801447c:	b580      	push	{r7, lr}
 801447e:	b082      	sub	sp, #8
 8014480:	af00      	add	r7, sp, #0
 8014482:	6078      	str	r0, [r7, #4]
    switch (type_) {
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	781b      	ldrb	r3, [r3, #0]
 8014488:	3b01      	subs	r3, #1
 801448a:	2b03      	cmp	r3, #3
 801448c:	d82e      	bhi.n	80144ec <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIhEET_v+0x70>
 801448e:	a201      	add	r2, pc, #4	@ (adr r2, 8014494 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIhEET_v+0x18>)
 8014490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014494:	080144a5 	.word	0x080144a5
 8014498:	080144b7 	.word	0x080144b7
 801449c:	080144c9 	.word	0x080144c9
 80144a0:	080144db 	.word	0x080144db
        return convertNumber<T>(value_.asFloat);
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	edd3 7a02 	vldr	s15, [r3, #8]
 80144aa:	eeb0 0a67 	vmov.f32	s0, s15
 80144ae:	f7ff fdcc 	bl	801404a <_ZN11ArduinoJson8V730HB226detail13convertNumberIhfEET_T0_>
 80144b2:	4603      	mov	r3, r0
 80144b4:	e01b      	b.n	80144ee <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIhEET_v+0x72>
        return convertNumber<T>(value_.asSignedInteger);
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80144bc:	4610      	mov	r0, r2
 80144be:	4619      	mov	r1, r3
 80144c0:	f7ff fd9c 	bl	8013ffc <_ZN11ArduinoJson8V730HB226detail13convertNumberIhxEET_T0_>
 80144c4:	4603      	mov	r3, r0
 80144c6:	e012      	b.n	80144ee <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIhEET_v+0x72>
        return convertNumber<T>(value_.asUnsignedInteger);
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80144ce:	4610      	mov	r0, r2
 80144d0:	4619      	mov	r1, r3
 80144d2:	f7ff fd80 	bl	8013fd6 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhyEET_T0_>
 80144d6:	4603      	mov	r3, r0
 80144d8:	e009      	b.n	80144ee <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIhEET_v+0x72>
        return convertNumber<T>(value_.asDouble);
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	ed93 7b02 	vldr	d7, [r3, #8]
 80144e0:	eeb0 0b47 	vmov.f64	d0, d7
 80144e4:	f7ff fdcb 	bl	801407e <_ZN11ArduinoJson8V730HB226detail13convertNumberIhdEET_T0_>
 80144e8:	4603      	mov	r3, r0
 80144ea:	e000      	b.n	80144ee <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIhEET_v+0x72>
        return T();
 80144ec:	2300      	movs	r3, #0
  }
 80144ee:	4618      	mov	r0, r3
 80144f0:	3708      	adds	r7, #8
 80144f2:	46bd      	mov	sp, r7
 80144f4:	bd80      	pop	{r7, pc}
 80144f6:	bf00      	nop

080144f8 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE6lowestEv>:
  static constexpr T lowest() {
 80144f8:	b480      	push	{r7}
 80144fa:	af00      	add	r7, sp, #0
    return 0;
 80144fc:	2300      	movs	r3, #0
  }
 80144fe:	4618      	mov	r0, r3
 8014500:	46bd      	mov	sp, r7
 8014502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014506:	4770      	bx	lr

08014508 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE7highestEv>:
  static constexpr T highest() {
 8014508:	b480      	push	{r7}
 801450a:	af00      	add	r7, sp, #0
    return T(-1);
 801450c:	23ff      	movs	r3, #255	@ 0xff
  }
 801450e:	4618      	mov	r0, r3
 8014510:	46bd      	mov	sp, r7
 8014512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014516:	4770      	bx	lr

08014518 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8014518:	b580      	push	{r7, lr}
 801451a:	b082      	sub	sp, #8
 801451c:	af00      	add	r7, sp, #0
 801451e:	ed87 0a01 	vstr	s0, [r7, #4]
  return value >= numeric_limits<TOut>::lowest() &&
 8014522:	f7ff ffe9 	bl	80144f8 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE6lowestEv>
 8014526:	4603      	mov	r3, r0
 8014528:	ee07 3a90 	vmov	s15, r3
 801452c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014530:	ed97 7a01 	vldr	s14, [r7, #4]
 8014534:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801453c:	db0f      	blt.n	801455e <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x46>
         value <= numeric_limits<TOut>::highest();
 801453e:	f7ff ffe3 	bl	8014508 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE7highestEv>
 8014542:	4603      	mov	r3, r0
 8014544:	ee07 3a90 	vmov	s15, r3
 8014548:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  return value >= numeric_limits<TOut>::lowest() &&
 801454c:	ed97 7a01 	vldr	s14, [r7, #4]
 8014550:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014558:	d801      	bhi.n	801455e <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x46>
 801455a:	2301      	movs	r3, #1
 801455c:	e000      	b.n	8014560 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x48>
 801455e:	2300      	movs	r3, #0
}
 8014560:	4618      	mov	r0, r3
 8014562:	3708      	adds	r7, #8
 8014564:	46bd      	mov	sp, r7
 8014566:	bd80      	pop	{r7, pc}

08014568 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8014568:	b580      	push	{r7, lr}
 801456a:	b082      	sub	sp, #8
 801456c:	af00      	add	r7, sp, #0
 801456e:	ed87 0b00 	vstr	d0, [r7]
  return value >= numeric_limits<TOut>::lowest() &&
 8014572:	f7ff ffc1 	bl	80144f8 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE6lowestEv>
 8014576:	4603      	mov	r3, r0
 8014578:	ee07 3a90 	vmov	s15, r3
 801457c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8014580:	ed97 6b00 	vldr	d6, [r7]
 8014584:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801458c:	db0f      	blt.n	80145ae <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x46>
         value <= numeric_limits<TOut>::highest();
 801458e:	f7ff ffbb 	bl	8014508 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE7highestEv>
 8014592:	4603      	mov	r3, r0
 8014594:	ee07 3a90 	vmov	s15, r3
 8014598:	eeb8 7be7 	vcvt.f64.s32	d7, s15
  return value >= numeric_limits<TOut>::lowest() &&
 801459c:	ed97 6b00 	vldr	d6, [r7]
 80145a0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80145a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145a8:	d801      	bhi.n	80145ae <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x46>
 80145aa:	2301      	movs	r3, #1
 80145ac:	e000      	b.n	80145b0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x48>
 80145ae:	2300      	movs	r3, #0
}
 80145b0:	4618      	mov	r0, r3
 80145b2:	3708      	adds	r7, #8
 80145b4:	46bd      	mov	sp, r7
 80145b6:	bd80      	pop	{r7, pc}

080145b8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 80145b8:	b580      	push	{r7, lr}
 80145ba:	b082      	sub	sp, #8
 80145bc:	af00      	add	r7, sp, #0
 80145be:	6078      	str	r0, [r7, #4]
  return value <= TIn(numeric_limits<TOut>::highest());
 80145c0:	f7fe fd74 	bl	80130ac <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE7highestEv>
 80145c4:	4603      	mov	r3, r0
 80145c6:	461a      	mov	r2, r3
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	4293      	cmp	r3, r2
 80145cc:	bf94      	ite	ls
 80145ce:	2301      	movls	r3, #1
 80145d0:	2300      	movhi	r3, #0
 80145d2:	b2db      	uxtb	r3, r3
}
 80145d4:	4618      	mov	r0, r3
 80145d6:	3708      	adds	r7, #8
 80145d8:	46bd      	mov	sp, r7
 80145da:	bd80      	pop	{r7, pc}

080145dc <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 80145dc:	b580      	push	{r7, lr}
 80145de:	b082      	sub	sp, #8
 80145e0:	af00      	add	r7, sp, #0
 80145e2:	6078      	str	r0, [r7, #4]
  if (value < 0)
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	da01      	bge.n	80145ee <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x12>
    return false;
 80145ea:	2300      	movs	r3, #0
 80145ec:	e009      	b.n	8014602 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x26>
  return value <= TIn(numeric_limits<TOut>::highest());
 80145ee:	f7fe fd5d 	bl	80130ac <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE7highestEv>
 80145f2:	4603      	mov	r3, r0
 80145f4:	461a      	mov	r2, r3
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	4293      	cmp	r3, r2
 80145fa:	bfd4      	ite	le
 80145fc:	2301      	movle	r3, #1
 80145fe:	2300      	movgt	r3, #0
 8014600:	b2db      	uxtb	r3, r3
}
 8014602:	4618      	mov	r0, r3
 8014604:	3708      	adds	r7, #8
 8014606:	46bd      	mov	sp, r7
 8014608:	bd80      	pop	{r7, pc}

0801460a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 801460a:	b5b0      	push	{r4, r5, r7, lr}
 801460c:	b082      	sub	sp, #8
 801460e:	af00      	add	r7, sp, #0
 8014610:	e9c7 0100 	strd	r0, r1, [r7]
  return value <= TIn(numeric_limits<TOut>::highest());
 8014614:	f7fe fd4a 	bl	80130ac <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE7highestEv>
 8014618:	4603      	mov	r3, r0
 801461a:	b29b      	uxth	r3, r3
 801461c:	2200      	movs	r2, #0
 801461e:	461c      	mov	r4, r3
 8014620:	4615      	mov	r5, r2
 8014622:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014626:	4294      	cmp	r4, r2
 8014628:	eb75 0303 	sbcs.w	r3, r5, r3
 801462c:	bf2c      	ite	cs
 801462e:	2301      	movcs	r3, #1
 8014630:	2300      	movcc	r3, #0
 8014632:	b2db      	uxtb	r3, r3
}
 8014634:	4618      	mov	r0, r3
 8014636:	3708      	adds	r7, #8
 8014638:	46bd      	mov	sp, r7
 801463a:	bdb0      	pop	{r4, r5, r7, pc}

0801463c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 801463c:	b5b0      	push	{r4, r5, r7, lr}
 801463e:	b082      	sub	sp, #8
 8014640:	af00      	add	r7, sp, #0
 8014642:	e9c7 0100 	strd	r0, r1, [r7]
  if (value < 0)
 8014646:	e9d7 2300 	ldrd	r2, r3, [r7]
 801464a:	2b00      	cmp	r3, #0
 801464c:	da01      	bge.n	8014652 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x16>
    return false;
 801464e:	2300      	movs	r3, #0
 8014650:	e00f      	b.n	8014672 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x36>
  return value <= TIn(numeric_limits<TOut>::highest());
 8014652:	f7fe fd2b 	bl	80130ac <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE7highestEv>
 8014656:	4603      	mov	r3, r0
 8014658:	b29b      	uxth	r3, r3
 801465a:	2200      	movs	r2, #0
 801465c:	461c      	mov	r4, r3
 801465e:	4615      	mov	r5, r2
 8014660:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014664:	4294      	cmp	r4, r2
 8014666:	eb75 0303 	sbcs.w	r3, r5, r3
 801466a:	bfac      	ite	ge
 801466c:	2301      	movge	r3, #1
 801466e:	2300      	movlt	r3, #0
 8014670:	b2db      	uxtb	r3, r3
}
 8014672:	4618      	mov	r0, r3
 8014674:	3708      	adds	r7, #8
 8014676:	46bd      	mov	sp, r7
 8014678:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801467c <_ZNK11ArduinoJson8V730HB226detail6Number9convertToItEET_v>:
  T convertTo() const {
 801467c:	b580      	push	{r7, lr}
 801467e:	b082      	sub	sp, #8
 8014680:	af00      	add	r7, sp, #0
 8014682:	6078      	str	r0, [r7, #4]
    switch (type_) {
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	781b      	ldrb	r3, [r3, #0]
 8014688:	3b01      	subs	r3, #1
 801468a:	2b03      	cmp	r3, #3
 801468c:	d82e      	bhi.n	80146ec <_ZNK11ArduinoJson8V730HB226detail6Number9convertToItEET_v+0x70>
 801468e:	a201      	add	r2, pc, #4	@ (adr r2, 8014694 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToItEET_v+0x18>)
 8014690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014694:	080146a5 	.word	0x080146a5
 8014698:	080146b7 	.word	0x080146b7
 801469c:	080146c9 	.word	0x080146c9
 80146a0:	080146db 	.word	0x080146db
        return convertNumber<T>(value_.asFloat);
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	edd3 7a02 	vldr	s15, [r3, #8]
 80146aa:	eeb0 0a67 	vmov.f32	s0, s15
 80146ae:	f7ff fd5e 	bl	801416e <_ZN11ArduinoJson8V730HB226detail13convertNumberItfEET_T0_>
 80146b2:	4603      	mov	r3, r0
 80146b4:	e01b      	b.n	80146ee <_ZNK11ArduinoJson8V730HB226detail6Number9convertToItEET_v+0x72>
        return convertNumber<T>(value_.asSignedInteger);
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80146bc:	4610      	mov	r0, r2
 80146be:	4619      	mov	r1, r3
 80146c0:	f7ff fd2e 	bl	8014120 <_ZN11ArduinoJson8V730HB226detail13convertNumberItxEET_T0_>
 80146c4:	4603      	mov	r3, r0
 80146c6:	e012      	b.n	80146ee <_ZNK11ArduinoJson8V730HB226detail6Number9convertToItEET_v+0x72>
        return convertNumber<T>(value_.asUnsignedInteger);
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80146ce:	4610      	mov	r0, r2
 80146d0:	4619      	mov	r1, r3
 80146d2:	f7ff fd12 	bl	80140fa <_ZN11ArduinoJson8V730HB226detail13convertNumberItyEET_T0_>
 80146d6:	4603      	mov	r3, r0
 80146d8:	e009      	b.n	80146ee <_ZNK11ArduinoJson8V730HB226detail6Number9convertToItEET_v+0x72>
        return convertNumber<T>(value_.asDouble);
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	ed93 7b02 	vldr	d7, [r3, #8]
 80146e0:	eeb0 0b47 	vmov.f64	d0, d7
 80146e4:	f7ff fd5c 	bl	80141a0 <_ZN11ArduinoJson8V730HB226detail13convertNumberItdEET_T0_>
 80146e8:	4603      	mov	r3, r0
 80146ea:	e000      	b.n	80146ee <_ZNK11ArduinoJson8V730HB226detail6Number9convertToItEET_v+0x72>
        return T();
 80146ec:	2300      	movs	r3, #0
  }
 80146ee:	4618      	mov	r0, r3
 80146f0:	3708      	adds	r7, #8
 80146f2:	46bd      	mov	sp, r7
 80146f4:	bd80      	pop	{r7, pc}
 80146f6:	bf00      	nop

080146f8 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE6lowestEv>:
  static constexpr T lowest() {
 80146f8:	b480      	push	{r7}
 80146fa:	af00      	add	r7, sp, #0
    return 0;
 80146fc:	2300      	movs	r3, #0
  }
 80146fe:	4618      	mov	r0, r3
 8014700:	46bd      	mov	sp, r7
 8014702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014706:	4770      	bx	lr

08014708 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8014708:	b580      	push	{r7, lr}
 801470a:	b082      	sub	sp, #8
 801470c:	af00      	add	r7, sp, #0
 801470e:	ed87 0a01 	vstr	s0, [r7, #4]
  return value >= numeric_limits<TOut>::lowest() &&
 8014712:	f7ff fff1 	bl	80146f8 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE6lowestEv>
 8014716:	4603      	mov	r3, r0
 8014718:	ee07 3a90 	vmov	s15, r3
 801471c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014720:	ed97 7a01 	vldr	s14, [r7, #4]
 8014724:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801472c:	db0f      	blt.n	801474e <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x46>
         value <= numeric_limits<TOut>::highest();
 801472e:	f7fe fcbd 	bl	80130ac <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE7highestEv>
 8014732:	4603      	mov	r3, r0
 8014734:	ee07 3a90 	vmov	s15, r3
 8014738:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  return value >= numeric_limits<TOut>::lowest() &&
 801473c:	ed97 7a01 	vldr	s14, [r7, #4]
 8014740:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014748:	d801      	bhi.n	801474e <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x46>
 801474a:	2301      	movs	r3, #1
 801474c:	e000      	b.n	8014750 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x48>
 801474e:	2300      	movs	r3, #0
}
 8014750:	4618      	mov	r0, r3
 8014752:	3708      	adds	r7, #8
 8014754:	46bd      	mov	sp, r7
 8014756:	bd80      	pop	{r7, pc}

08014758 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8014758:	b580      	push	{r7, lr}
 801475a:	b082      	sub	sp, #8
 801475c:	af00      	add	r7, sp, #0
 801475e:	ed87 0b00 	vstr	d0, [r7]
  return value >= numeric_limits<TOut>::lowest() &&
 8014762:	f7ff ffc9 	bl	80146f8 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE6lowestEv>
 8014766:	4603      	mov	r3, r0
 8014768:	ee07 3a90 	vmov	s15, r3
 801476c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8014770:	ed97 6b00 	vldr	d6, [r7]
 8014774:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801477c:	db0f      	blt.n	801479e <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x46>
         value <= numeric_limits<TOut>::highest();
 801477e:	f7fe fc95 	bl	80130ac <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE7highestEv>
 8014782:	4603      	mov	r3, r0
 8014784:	ee07 3a90 	vmov	s15, r3
 8014788:	eeb8 7be7 	vcvt.f64.s32	d7, s15
  return value >= numeric_limits<TOut>::lowest() &&
 801478c:	ed97 6b00 	vldr	d6, [r7]
 8014790:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014798:	d801      	bhi.n	801479e <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x46>
 801479a:	2301      	movs	r3, #1
 801479c:	e000      	b.n	80147a0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x48>
 801479e:	2300      	movs	r3, #0
}
 80147a0:	4618      	mov	r0, r3
 80147a2:	3708      	adds	r7, #8
 80147a4:	46bd      	mov	sp, r7
 80147a6:	bd80      	pop	{r7, pc}

080147a8 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80147a8:	b480      	push	{r7}
 80147aa:	b083      	sub	sp, #12
 80147ac:	af00      	add	r7, sp, #0
 80147ae:	6078      	str	r0, [r7, #4]
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	4618      	mov	r0, r3
 80147b4:	370c      	adds	r7, #12
 80147b6:	46bd      	mov	sp, r7
 80147b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147bc:	4770      	bx	lr

080147be <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80147be:	b480      	push	{r7}
 80147c0:	b083      	sub	sp, #12
 80147c2:	af00      	add	r7, sp, #0
 80147c4:	6078      	str	r0, [r7, #4]
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	4618      	mov	r0, r3
 80147ca:	370c      	adds	r7, #12
 80147cc:	46bd      	mov	sp, r7
 80147ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147d2:	4770      	bx	lr

080147d4 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 80147d4:	b580      	push	{r7, lr}
 80147d6:	b082      	sub	sp, #8
 80147d8:	af00      	add	r7, sp, #0
 80147da:	6078      	str	r0, [r7, #4]
 80147dc:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80147de:	2200      	movs	r2, #0
 80147e0:	6839      	ldr	r1, [r7, #0]
 80147e2:	6878      	ldr	r0, [r7, #4]
 80147e4:	f000 f8de 	bl	80149a4 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 80147e8:	4603      	mov	r3, r0
 80147ea:	4618      	mov	r0, r3
 80147ec:	3708      	adds	r7, #8
 80147ee:	46bd      	mov	sp, r7
 80147f0:	bd80      	pop	{r7, pc}

080147f2 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 80147f2:	b580      	push	{r7, lr}
 80147f4:	b084      	sub	sp, #16
 80147f6:	af00      	add	r7, sp, #0
 80147f8:	60f8      	str	r0, [r7, #12]
 80147fa:	60b9      	str	r1, [r7, #8]
 80147fc:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 80147fe:	68b8      	ldr	r0, [r7, #8]
 8014800:	f000 f8fe 	bl	8014a00 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>
 8014804:	4602      	mov	r2, r0
 8014806:	68fb      	ldr	r3, [r7, #12]
 8014808:	601a      	str	r2, [r3, #0]
 801480a:	68fb      	ldr	r3, [r7, #12]
 801480c:	687a      	ldr	r2, [r7, #4]
 801480e:	605a      	str	r2, [r3, #4]
      { }
 8014810:	68fb      	ldr	r3, [r7, #12]
 8014812:	4618      	mov	r0, r3
 8014814:	3710      	adds	r7, #16
 8014816:	46bd      	mov	sp, r7
 8014818:	bd80      	pop	{r7, pc}

0801481a <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 801481a:	b580      	push	{r7, lr}
 801481c:	b084      	sub	sp, #16
 801481e:	af00      	add	r7, sp, #0
 8014820:	60f8      	str	r0, [r7, #12]
 8014822:	60b9      	str	r1, [r7, #8]
 8014824:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8014826:	687a      	ldr	r2, [r7, #4]
 8014828:	68b9      	ldr	r1, [r7, #8]
 801482a:	68f8      	ldr	r0, [r7, #12]
 801482c:	f000 f8f3 	bl	8014a16 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>
 8014830:	bf00      	nop
 8014832:	3710      	adds	r7, #16
 8014834:	46bd      	mov	sp, r7
 8014836:	bd80      	pop	{r7, pc}

08014838 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>:
    __to_address(_Tp* __ptr) noexcept
 8014838:	b480      	push	{r7}
 801483a:	b083      	sub	sp, #12
 801483c:	af00      	add	r7, sp, #0
 801483e:	6078      	str	r0, [r7, #4]
      return __ptr;
 8014840:	687b      	ldr	r3, [r7, #4]
    }
 8014842:	4618      	mov	r0, r3
 8014844:	370c      	adds	r7, #12
 8014846:	46bd      	mov	sp, r7
 8014848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801484c:	4770      	bx	lr

0801484e <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>:
	explicit _Impl(_Alloc __a) noexcept : _A_base(__a) { }
 801484e:	b580      	push	{r7, lr}
 8014850:	b082      	sub	sp, #8
 8014852:	af00      	add	r7, sp, #0
 8014854:	6078      	str	r0, [r7, #4]
 8014856:	7039      	strb	r1, [r7, #0]
 8014858:	463b      	mov	r3, r7
 801485a:	4619      	mov	r1, r3
 801485c:	6878      	ldr	r0, [r7, #4]
 801485e:	f7f8 f9f1 	bl	800cc44 <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EEC1ERKS0_>
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	4618      	mov	r0, r3
 8014866:	3708      	adds	r7, #8
 8014868:	46bd      	mov	sp, r7
 801486a:	bd80      	pop	{r7, pc}

0801486c <_ZNSt16allocator_traitsISaIvEE9constructI7TMC2208JRPKcRfRtS8_RbEEEvRS0_PT_DpOT0_>:
	construct(allocator_type&, _Up* __p, _Args&&... __args)
 801486c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014870:	b086      	sub	sp, #24
 8014872:	af02      	add	r7, sp, #8
 8014874:	60f8      	str	r0, [r7, #12]
 8014876:	60b9      	str	r1, [r7, #8]
 8014878:	607a      	str	r2, [r7, #4]
 801487a:	603b      	str	r3, [r7, #0]
	{ std::_Construct(__p, std::forward<_Args>(__args)...); }
 801487c:	6878      	ldr	r0, [r7, #4]
 801487e:	f7f9 f900 	bl	800da82 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8014882:	4605      	mov	r5, r0
 8014884:	6838      	ldr	r0, [r7, #0]
 8014886:	f7ff f82a 	bl	80138de <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 801488a:	4606      	mov	r6, r0
 801488c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801488e:	f7ff f831 	bl	80138f4 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8014892:	4680      	mov	r8, r0
 8014894:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014896:	f7ff f82d 	bl	80138f4 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801489a:	4604      	mov	r4, r0
 801489c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801489e:	f7fb f8b6 	bl	800fa0e <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 80148a2:	4603      	mov	r3, r0
 80148a4:	9301      	str	r3, [sp, #4]
 80148a6:	9400      	str	r4, [sp, #0]
 80148a8:	4643      	mov	r3, r8
 80148aa:	4632      	mov	r2, r6
 80148ac:	4629      	mov	r1, r5
 80148ae:	68b8      	ldr	r0, [r7, #8]
 80148b0:	f000 f8c2 	bl	8014a38 <_ZSt10_ConstructI7TMC2208JRPKcRfRtS5_RbEEvPT_DpOT0_>
 80148b4:	bf00      	nop
 80148b6:	3710      	adds	r7, #16
 80148b8:	46bd      	mov	sp, r7
 80148ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080148be <_ZN9__gnu_cxx16__aligned_bufferI7TMC2208E6_M_ptrEv>:
      _M_ptr() noexcept
 80148be:	b580      	push	{r7, lr}
 80148c0:	b082      	sub	sp, #8
 80148c2:	af00      	add	r7, sp, #0
 80148c4:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80148c6:	6878      	ldr	r0, [r7, #4]
 80148c8:	f000 f906 	bl	8014ad8 <_ZN9__gnu_cxx16__aligned_bufferI7TMC2208E7_M_addrEv>
 80148cc:	4603      	mov	r3, r0
 80148ce:	4618      	mov	r0, r3
 80148d0:	3708      	adds	r7, #8
 80148d2:	46bd      	mov	sp, r7
 80148d4:	bd80      	pop	{r7, pc}

080148d6 <_ZN11ArduinoJson8V730HB226detail13convertNumberIffEET_T0_>:
TOut convertNumber(TIn value) {
 80148d6:	b580      	push	{r7, lr}
 80148d8:	b082      	sub	sp, #8
 80148da:	af00      	add	r7, sp, #0
 80148dc:	ed87 0a01 	vstr	s0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80148e0:	ed97 0a01 	vldr	s0, [r7, #4]
 80148e4:	f000 f903 	bl	8014aee <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIffEENS1_9enable_ifIXaasrNS1_17is_floating_pointIT0_EE5valuesrNS4_IT_EE5valueEbE4typeES5_>
 80148e8:	4603      	mov	r3, r0
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d001      	beq.n	80148f2 <_ZN11ArduinoJson8V730HB226detail13convertNumberIffEET_T0_+0x1c>
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	e001      	b.n	80148f6 <_ZN11ArduinoJson8V730HB226detail13convertNumberIffEET_T0_+0x20>
 80148f2:	f04f 0300 	mov.w	r3, #0
 80148f6:	ee07 3a90 	vmov	s15, r3
}
 80148fa:	eeb0 0a67 	vmov.f32	s0, s15
 80148fe:	3708      	adds	r7, #8
 8014900:	46bd      	mov	sp, r7
 8014902:	bd80      	pop	{r7, pc}

08014904 <_ZN11ArduinoJson8V730HB226detail13convertNumberIfxEET_T0_>:
TOut convertNumber(TIn value) {
 8014904:	b580      	push	{r7, lr}
 8014906:	b082      	sub	sp, #8
 8014908:	af00      	add	r7, sp, #0
 801490a:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 801490e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8014912:	f000 f8f8 	bl	8014b06 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIfxEENS1_9enable_ifIXaasrNS1_11is_integralIT0_EE5valuesrNS1_17is_floating_pointIT_EE5valueEbE4typeES5_>
 8014916:	4603      	mov	r3, r0
 8014918:	2b00      	cmp	r3, #0
 801491a:	d005      	beq.n	8014928 <_ZN11ArduinoJson8V730HB226detail13convertNumberIfxEET_T0_+0x24>
 801491c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8014920:	f7eb ffd2 	bl	80008c8 <__aeabi_l2f>
 8014924:	4603      	mov	r3, r0
 8014926:	e001      	b.n	801492c <_ZN11ArduinoJson8V730HB226detail13convertNumberIfxEET_T0_+0x28>
 8014928:	f04f 0300 	mov.w	r3, #0
 801492c:	ee07 3a90 	vmov	s15, r3
}
 8014930:	eeb0 0a67 	vmov.f32	s0, s15
 8014934:	3708      	adds	r7, #8
 8014936:	46bd      	mov	sp, r7
 8014938:	bd80      	pop	{r7, pc}

0801493a <_ZN11ArduinoJson8V730HB226detail13convertNumberIfyEET_T0_>:
TOut convertNumber(TIn value) {
 801493a:	b580      	push	{r7, lr}
 801493c:	b082      	sub	sp, #8
 801493e:	af00      	add	r7, sp, #0
 8014940:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8014944:	e9d7 0100 	ldrd	r0, r1, [r7]
 8014948:	f000 f8e9 	bl	8014b1e <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIfyEENS1_9enable_ifIXaasrNS1_11is_integralIT0_EE5valuesrNS1_17is_floating_pointIT_EE5valueEbE4typeES5_>
 801494c:	4603      	mov	r3, r0
 801494e:	2b00      	cmp	r3, #0
 8014950:	d005      	beq.n	801495e <_ZN11ArduinoJson8V730HB226detail13convertNumberIfyEET_T0_+0x24>
 8014952:	e9d7 0100 	ldrd	r0, r1, [r7]
 8014956:	f7eb ffaf 	bl	80008b8 <__aeabi_ul2f>
 801495a:	4603      	mov	r3, r0
 801495c:	e001      	b.n	8014962 <_ZN11ArduinoJson8V730HB226detail13convertNumberIfyEET_T0_+0x28>
 801495e:	f04f 0300 	mov.w	r3, #0
 8014962:	ee07 3a90 	vmov	s15, r3
}
 8014966:	eeb0 0a67 	vmov.f32	s0, s15
 801496a:	3708      	adds	r7, #8
 801496c:	46bd      	mov	sp, r7
 801496e:	bd80      	pop	{r7, pc}

08014970 <_ZN11ArduinoJson8V730HB226detail13convertNumberIfdEET_T0_>:
TOut convertNumber(TIn value) {
 8014970:	b580      	push	{r7, lr}
 8014972:	b082      	sub	sp, #8
 8014974:	af00      	add	r7, sp, #0
 8014976:	ed87 0b00 	vstr	d0, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 801497a:	ed97 0b00 	vldr	d0, [r7]
 801497e:	f000 f8da 	bl	8014b36 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIfdEENS1_9enable_ifIXaasrNS1_17is_floating_pointIT0_EE5valuesrNS4_IT_EE5valueEbE4typeES5_>
 8014982:	4603      	mov	r3, r0
 8014984:	2b00      	cmp	r3, #0
 8014986:	d004      	beq.n	8014992 <_ZN11ArduinoJson8V730HB226detail13convertNumberIfdEET_T0_+0x22>
 8014988:	ed97 7b00 	vldr	d7, [r7]
 801498c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8014990:	e001      	b.n	8014996 <_ZN11ArduinoJson8V730HB226detail13convertNumberIfdEET_T0_+0x26>
 8014992:	eddf 7a03 	vldr	s15, [pc, #12]	@ 80149a0 <_ZN11ArduinoJson8V730HB226detail13convertNumberIfdEET_T0_+0x30>
}
 8014996:	eeb0 0a67 	vmov.f32	s0, s15
 801499a:	3708      	adds	r7, #8
 801499c:	46bd      	mov	sp, r7
 801499e:	bd80      	pop	{r7, pc}
 80149a0:	00000000 	.word	0x00000000

080149a4 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80149a4:	b580      	push	{r7, lr}
 80149a6:	b084      	sub	sp, #16
 80149a8:	af00      	add	r7, sp, #0
 80149aa:	60f8      	str	r0, [r7, #12]
 80149ac:	60b9      	str	r1, [r7, #8]
 80149ae:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80149b0:	68f8      	ldr	r0, [r7, #12]
 80149b2:	f000 f8cd 	bl	8014b50 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 80149b6:	4602      	mov	r2, r0
 80149b8:	68bb      	ldr	r3, [r7, #8]
 80149ba:	4293      	cmp	r3, r2
 80149bc:	bf8c      	ite	hi
 80149be:	2301      	movhi	r3, #1
 80149c0:	2300      	movls	r3, #0
 80149c2:	b2db      	uxtb	r3, r3
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	bf14      	ite	ne
 80149c8:	2301      	movne	r3, #1
 80149ca:	2300      	moveq	r3, #0
 80149cc:	b2db      	uxtb	r3, r3
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d007      	beq.n	80149e2 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 80149d2:	68bb      	ldr	r3, [r7, #8]
 80149d4:	4a09      	ldr	r2, [pc, #36]	@ (80149fc <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x58>)
 80149d6:	4293      	cmp	r3, r2
 80149d8:	d901      	bls.n	80149de <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 80149da:	f00f fa57 	bl	8023e8c <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 80149de:	f00f fa52 	bl	8023e86 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80149e2:	68bb      	ldr	r3, [r7, #8]
 80149e4:	224c      	movs	r2, #76	@ 0x4c
 80149e6:	fb02 f303 	mul.w	r3, r2, r3
 80149ea:	4618      	mov	r0, r3
 80149ec:	f00f fa38 	bl	8023e60 <_Znwj>
 80149f0:	4603      	mov	r3, r0
 80149f2:	bf00      	nop
      }
 80149f4:	4618      	mov	r0, r3
 80149f6:	3710      	adds	r7, #16
 80149f8:	46bd      	mov	sp, r7
 80149fa:	bd80      	pop	{r7, pc}
 80149fc:	035e50d7 	.word	0x035e50d7

08014a00 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8014a00:	b480      	push	{r7}
 8014a02:	b083      	sub	sp, #12
 8014a04:	af00      	add	r7, sp, #0
 8014a06:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	4618      	mov	r0, r3
 8014a0c:	370c      	adds	r7, #12
 8014a0e:	46bd      	mov	sp, r7
 8014a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a14:	4770      	bx	lr

08014a16 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8014a16:	b580      	push	{r7, lr}
 8014a18:	b084      	sub	sp, #16
 8014a1a:	af00      	add	r7, sp, #0
 8014a1c:	60f8      	str	r0, [r7, #12]
 8014a1e:	60b9      	str	r1, [r7, #8]
 8014a20:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	224c      	movs	r2, #76	@ 0x4c
 8014a26:	fb02 f303 	mul.w	r3, r2, r3
 8014a2a:	4619      	mov	r1, r3
 8014a2c:	68b8      	ldr	r0, [r7, #8]
 8014a2e:	f00f fa06 	bl	8023e3e <_ZdlPvj>
      }
 8014a32:	3710      	adds	r7, #16
 8014a34:	46bd      	mov	sp, r7
 8014a36:	bd80      	pop	{r7, pc}

08014a38 <_ZSt10_ConstructI7TMC2208JRPKcRfRtS5_RbEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8014a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014a3a:	ed2d 8b02 	vpush	{d8}
 8014a3e:	b08f      	sub	sp, #60	@ 0x3c
 8014a40:	af02      	add	r7, sp, #8
 8014a42:	60f8      	str	r0, [r7, #12]
 8014a44:	60b9      	str	r1, [r7, #8]
 8014a46:	607a      	str	r2, [r7, #4]
 8014a48:	603b      	str	r3, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8014a4a:	68fb      	ldr	r3, [r7, #12]
 8014a4c:	4619      	mov	r1, r3
 8014a4e:	2040      	movs	r0, #64	@ 0x40
 8014a50:	f7f4 fe56 	bl	8009700 <_ZnwjPv>
 8014a54:	4606      	mov	r6, r0
 8014a56:	68b8      	ldr	r0, [r7, #8]
 8014a58:	f7f9 f813 	bl	800da82 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8014a5c:	4603      	mov	r3, r0
 8014a5e:	681c      	ldr	r4, [r3, #0]
 8014a60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8014a64:	4618      	mov	r0, r3
 8014a66:	f00f fa0c 	bl	8023e82 <_ZNSaIcEC1Ev>
 8014a6a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8014a6e:	f107 0314 	add.w	r3, r7, #20
 8014a72:	4621      	mov	r1, r4
 8014a74:	4618      	mov	r0, r3
 8014a76:	f7f1 fe01 	bl	800667c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8014a7a:	6878      	ldr	r0, [r7, #4]
 8014a7c:	f7fe ff2f 	bl	80138de <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8014a80:	4603      	mov	r3, r0
 8014a82:	ed93 8a00 	vldr	s16, [r3]
 8014a86:	6838      	ldr	r0, [r7, #0]
 8014a88:	f7fe ff34 	bl	80138f4 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8014a8c:	4603      	mov	r3, r0
 8014a8e:	881c      	ldrh	r4, [r3, #0]
 8014a90:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8014a92:	f7fe ff2f 	bl	80138f4 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8014a96:	4603      	mov	r3, r0
 8014a98:	881d      	ldrh	r5, [r3, #0]
 8014a9a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8014a9c:	f7fa ffb7 	bl	800fa0e <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8014aa0:	4603      	mov	r3, r0
 8014aa2:	781b      	ldrb	r3, [r3, #0]
 8014aa4:	f107 0114 	add.w	r1, r7, #20
 8014aa8:	9300      	str	r3, [sp, #0]
 8014aaa:	462b      	mov	r3, r5
 8014aac:	4622      	mov	r2, r4
 8014aae:	eeb0 0a48 	vmov.f32	s0, s16
 8014ab2:	4630      	mov	r0, r6
 8014ab4:	f7fe fce4 	bl	8013480 <_ZN7TMC2208C1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfttb>
 8014ab8:	f107 0314 	add.w	r3, r7, #20
 8014abc:	4618      	mov	r0, r3
 8014abe:	f00f fabe 	bl	802403e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8014ac2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8014ac6:	4618      	mov	r0, r3
 8014ac8:	f00f f9dc 	bl	8023e84 <_ZNSaIcED1Ev>
    }
 8014acc:	bf00      	nop
 8014ace:	3734      	adds	r7, #52	@ 0x34
 8014ad0:	46bd      	mov	sp, r7
 8014ad2:	ecbd 8b02 	vpop	{d8}
 8014ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014ad8 <_ZN9__gnu_cxx16__aligned_bufferI7TMC2208E7_M_addrEv>:
      _M_addr() noexcept
 8014ad8:	b480      	push	{r7}
 8014ada:	b083      	sub	sp, #12
 8014adc:	af00      	add	r7, sp, #0
 8014ade:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 8014ae0:	687b      	ldr	r3, [r7, #4]
      }
 8014ae2:	4618      	mov	r0, r3
 8014ae4:	370c      	adds	r7, #12
 8014ae6:	46bd      	mov	sp, r7
 8014ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aec:	4770      	bx	lr

08014aee <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIffEENS1_9enable_ifIXaasrNS1_17is_floating_pointIT0_EE5valuesrNS4_IT_EE5valueEbE4typeES5_>:
canConvertNumber(TIn) {
 8014aee:	b480      	push	{r7}
 8014af0:	b083      	sub	sp, #12
 8014af2:	af00      	add	r7, sp, #0
 8014af4:	ed87 0a01 	vstr	s0, [r7, #4]
  return true;
 8014af8:	2301      	movs	r3, #1
}
 8014afa:	4618      	mov	r0, r3
 8014afc:	370c      	adds	r7, #12
 8014afe:	46bd      	mov	sp, r7
 8014b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b04:	4770      	bx	lr

08014b06 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIfxEENS1_9enable_ifIXaasrNS1_11is_integralIT0_EE5valuesrNS1_17is_floating_pointIT_EE5valueEbE4typeES5_>:
canConvertNumber(TIn) {
 8014b06:	b480      	push	{r7}
 8014b08:	b083      	sub	sp, #12
 8014b0a:	af00      	add	r7, sp, #0
 8014b0c:	e9c7 0100 	strd	r0, r1, [r7]
  return true;
 8014b10:	2301      	movs	r3, #1
}
 8014b12:	4618      	mov	r0, r3
 8014b14:	370c      	adds	r7, #12
 8014b16:	46bd      	mov	sp, r7
 8014b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b1c:	4770      	bx	lr

08014b1e <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIfyEENS1_9enable_ifIXaasrNS1_11is_integralIT0_EE5valuesrNS1_17is_floating_pointIT_EE5valueEbE4typeES5_>:
canConvertNumber(TIn) {
 8014b1e:	b480      	push	{r7}
 8014b20:	b083      	sub	sp, #12
 8014b22:	af00      	add	r7, sp, #0
 8014b24:	e9c7 0100 	strd	r0, r1, [r7]
  return true;
 8014b28:	2301      	movs	r3, #1
}
 8014b2a:	4618      	mov	r0, r3
 8014b2c:	370c      	adds	r7, #12
 8014b2e:	46bd      	mov	sp, r7
 8014b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b34:	4770      	bx	lr

08014b36 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIfdEENS1_9enable_ifIXaasrNS1_17is_floating_pointIT0_EE5valuesrNS4_IT_EE5valueEbE4typeES5_>:
canConvertNumber(TIn) {
 8014b36:	b480      	push	{r7}
 8014b38:	b083      	sub	sp, #12
 8014b3a:	af00      	add	r7, sp, #0
 8014b3c:	ed87 0b00 	vstr	d0, [r7]
  return true;
 8014b40:	2301      	movs	r3, #1
}
 8014b42:	4618      	mov	r0, r3
 8014b44:	370c      	adds	r7, #12
 8014b46:	46bd      	mov	sp, r7
 8014b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b4c:	4770      	bx	lr
	...

08014b50 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8014b50:	b480      	push	{r7}
 8014b52:	b083      	sub	sp, #12
 8014b54:	af00      	add	r7, sp, #0
 8014b56:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8014b58:	4b03      	ldr	r3, [pc, #12]	@ (8014b68 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv+0x18>)
      }
 8014b5a:	4618      	mov	r0, r3
 8014b5c:	370c      	adds	r7, #12
 8014b5e:	46bd      	mov	sp, r7
 8014b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b64:	4770      	bx	lr
 8014b66:	bf00      	nop
 8014b68:	01af286b 	.word	0x01af286b

08014b6c <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 8014b6c:	b580      	push	{r7, lr}
 8014b6e:	b082      	sub	sp, #8
 8014b70:	af00      	add	r7, sp, #0
 8014b72:	6078      	str	r0, [r7, #4]
 8014b74:	4a05      	ldr	r2, [pc, #20]	@ (8014b8c <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	601a      	str	r2, [r3, #0]
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	4618      	mov	r0, r3
 8014b7e:	f7f6 fab7 	bl	800b0f0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	4618      	mov	r0, r3
 8014b86:	3708      	adds	r7, #8
 8014b88:	46bd      	mov	sp, r7
 8014b8a:	bd80      	pop	{r7, pc}
 8014b8c:	080268ec 	.word	0x080268ec

08014b90 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 8014b90:	b580      	push	{r7, lr}
 8014b92:	b082      	sub	sp, #8
 8014b94:	af00      	add	r7, sp, #0
 8014b96:	6078      	str	r0, [r7, #4]
 8014b98:	6878      	ldr	r0, [r7, #4]
 8014b9a:	f7ff ffe7 	bl	8014b6c <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8014b9e:	214c      	movs	r1, #76	@ 0x4c
 8014ba0:	6878      	ldr	r0, [r7, #4]
 8014ba2:	f00f f94c 	bl	8023e3e <_ZdlPvj>
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	4618      	mov	r0, r3
 8014baa:	3708      	adds	r7, #8
 8014bac:	46bd      	mov	sp, r7
 8014bae:	bd80      	pop	{r7, pc}

08014bb0 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8014bb0:	b590      	push	{r4, r7, lr}
 8014bb2:	b083      	sub	sp, #12
 8014bb4:	af00      	add	r7, sp, #0
 8014bb6:	6078      	str	r0, [r7, #4]
	allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	330c      	adds	r3, #12
 8014bbc:	4618      	mov	r0, r3
 8014bbe:	f000 f856 	bl	8014c6e <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 8014bc2:	4604      	mov	r4, r0
 8014bc4:	6878      	ldr	r0, [r7, #4]
 8014bc6:	f7ff fba2 	bl	801430e <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8014bca:	4603      	mov	r3, r0
 8014bcc:	4619      	mov	r1, r3
 8014bce:	4620      	mov	r0, r4
 8014bd0:	f000 f859 	bl	8014c86 <_ZNSt16allocator_traitsISaIvEE7destroyI7TMC2208EEvRS0_PT_>
      }
 8014bd4:	bf00      	nop
 8014bd6:	370c      	adds	r7, #12
 8014bd8:	46bd      	mov	sp, r7
 8014bda:	bd90      	pop	{r4, r7, pc}

08014bdc <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8014bdc:	b580      	push	{r7, lr}
 8014bde:	b086      	sub	sp, #24
 8014be0:	af00      	add	r7, sp, #0
 8014be2:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	330c      	adds	r3, #12
 8014be8:	4618      	mov	r0, r3
 8014bea:	f000 f840 	bl	8014c6e <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 8014bee:	4602      	mov	r2, r0
 8014bf0:	f107 0314 	add.w	r3, r7, #20
 8014bf4:	4611      	mov	r1, r2
 8014bf6:	4618      	mov	r0, r3
 8014bf8:	f7ff faeb 	bl	80141d2 <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8014bfc:	f107 0114 	add.w	r1, r7, #20
 8014c00:	f107 030c 	add.w	r3, r7, #12
 8014c04:	687a      	ldr	r2, [r7, #4]
 8014c06:	4618      	mov	r0, r3
 8014c08:	f7ff fdf3 	bl	80147f2 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
	this->~_Sp_counted_ptr_inplace();
 8014c0c:	6878      	ldr	r0, [r7, #4]
 8014c0e:	f7ff ffad 	bl	8014b6c <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 8014c12:	f107 030c 	add.w	r3, r7, #12
 8014c16:	4618      	mov	r0, r3
 8014c18:	f7ff fb07 	bl	801422a <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 8014c1c:	f107 0314 	add.w	r3, r7, #20
 8014c20:	4618      	mov	r0, r3
 8014c22:	f7ff fae3 	bl	80141ec <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8014c26:	3718      	adds	r7, #24
 8014c28:	46bd      	mov	sp, r7
 8014c2a:	bd80      	pop	{r7, pc}

08014c2c <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 8014c2c:	b580      	push	{r7, lr}
 8014c2e:	b084      	sub	sp, #16
 8014c30:	af00      	add	r7, sp, #0
 8014c32:	6078      	str	r0, [r7, #4]
 8014c34:	6039      	str	r1, [r7, #0]
	auto __ptr = const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());
 8014c36:	6878      	ldr	r0, [r7, #4]
 8014c38:	f7ff fb69 	bl	801430e <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8014c3c:	60f8      	str	r0, [r7, #12]
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 8014c3e:	f7f4 fdab 	bl	8009798 <_ZNSt19_Sp_make_shared_tag5_S_tiEv>
 8014c42:	4602      	mov	r2, r0
	    ||
 8014c44:	683b      	ldr	r3, [r7, #0]
 8014c46:	4293      	cmp	r3, r2
 8014c48:	d005      	beq.n	8014c56 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 8014c4a:	6838      	ldr	r0, [r7, #0]
 8014c4c:	f00f f934 	bl	8023eb8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
 8014c50:	4603      	mov	r3, r0
	    ||
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d001      	beq.n	8014c5a <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2e>
 8014c56:	2301      	movs	r3, #1
 8014c58:	e000      	b.n	8014c5c <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x30>
 8014c5a:	2300      	movs	r3, #0
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	d001      	beq.n	8014c64 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x38>
	  return __ptr;
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	e000      	b.n	8014c66 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x3a>
	return nullptr;
 8014c64:	2300      	movs	r3, #0
      }
 8014c66:	4618      	mov	r0, r3
 8014c68:	3710      	adds	r7, #16
 8014c6a:	46bd      	mov	sp, r7
 8014c6c:	bd80      	pop	{r7, pc}

08014c6e <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _A_base::_S_get(*this); }
 8014c6e:	b580      	push	{r7, lr}
 8014c70:	b082      	sub	sp, #8
 8014c72:	af00      	add	r7, sp, #0
 8014c74:	6078      	str	r0, [r7, #4]
 8014c76:	6878      	ldr	r0, [r7, #4]
 8014c78:	f7f8 fa21 	bl	800d0be <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EE6_S_getERS1_>
 8014c7c:	4603      	mov	r3, r0
 8014c7e:	4618      	mov	r0, r3
 8014c80:	3708      	adds	r7, #8
 8014c82:	46bd      	mov	sp, r7
 8014c84:	bd80      	pop	{r7, pc}

08014c86 <_ZNSt16allocator_traitsISaIvEE7destroyI7TMC2208EEvRS0_PT_>:
	destroy(allocator_type&, _Up* __p)
 8014c86:	b580      	push	{r7, lr}
 8014c88:	b082      	sub	sp, #8
 8014c8a:	af00      	add	r7, sp, #0
 8014c8c:	6078      	str	r0, [r7, #4]
 8014c8e:	6039      	str	r1, [r7, #0]
	{ std::_Destroy(__p); }
 8014c90:	6838      	ldr	r0, [r7, #0]
 8014c92:	f000 f804 	bl	8014c9e <_ZSt8_DestroyI7TMC2208EvPT_>
 8014c96:	bf00      	nop
 8014c98:	3708      	adds	r7, #8
 8014c9a:	46bd      	mov	sp, r7
 8014c9c:	bd80      	pop	{r7, pc}

08014c9e <_ZSt8_DestroyI7TMC2208EvPT_>:
    _Destroy(_Tp* __pointer)
 8014c9e:	b580      	push	{r7, lr}
 8014ca0:	b082      	sub	sp, #8
 8014ca2:	af00      	add	r7, sp, #0
 8014ca4:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	681b      	ldr	r3, [r3, #0]
 8014caa:	681b      	ldr	r3, [r3, #0]
 8014cac:	6878      	ldr	r0, [r7, #4]
 8014cae:	4798      	blx	r3
    }
 8014cb0:	bf00      	nop
 8014cb2:	3708      	adds	r7, #8
 8014cb4:	46bd      	mov	sp, r7
 8014cb6:	bd80      	pop	{r7, pc}

08014cb8 <_ZN14TMC2209StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_fh>:
};

class TMC2209Stepper : public TMC2208Stepper {
    public:

        TMC2209Stepper(std::string SWRXpin, std::string SWTXpin, float RS, uint8_t addr) :
 8014cb8:	b590      	push	{r4, r7, lr}
 8014cba:	b093      	sub	sp, #76	@ 0x4c
 8014cbc:	af00      	add	r7, sp, #0
 8014cbe:	6178      	str	r0, [r7, #20]
 8014cc0:	6139      	str	r1, [r7, #16]
 8014cc2:	60fa      	str	r2, [r7, #12]
 8014cc4:	ed87 0a02 	vstr	s0, [r7, #8]
 8014cc8:	71fb      	strb	r3, [r7, #7]
                TMC2208Stepper(SWRXpin, SWTXpin, RS, addr) {}
 8014cca:	697c      	ldr	r4, [r7, #20]
 8014ccc:	f107 0318 	add.w	r3, r7, #24
 8014cd0:	6939      	ldr	r1, [r7, #16]
 8014cd2:	4618      	mov	r0, r3
 8014cd4:	f00f faf1 	bl	80242ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8014cd8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8014cdc:	68f9      	ldr	r1, [r7, #12]
 8014cde:	4618      	mov	r0, r3
 8014ce0:	f00f faeb 	bl	80242ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8014ce4:	79fb      	ldrb	r3, [r7, #7]
 8014ce6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8014cea:	f107 0118 	add.w	r1, r7, #24
 8014cee:	ed97 0a02 	vldr	s0, [r7, #8]
 8014cf2:	4620      	mov	r0, r4
 8014cf4:	f7ed ffb4 	bl	8002c60 <_ZN14TMC2208StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_fh>
 8014cf8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8014cfc:	4618      	mov	r0, r3
 8014cfe:	f00f f99e 	bl	802403e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8014d02:	f107 0318 	add.w	r3, r7, #24
 8014d06:	4618      	mov	r0, r3
 8014d08:	f00f f999 	bl	802403e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8014d0c:	4a0f      	ldr	r2, [pc, #60]	@ (8014d4c <_ZN14TMC2209StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_fh+0x94>)
 8014d0e:	697b      	ldr	r3, [r7, #20]
 8014d10:	601a      	str	r2, [r3, #0]
 8014d12:	697b      	ldr	r3, [r7, #20]
 8014d14:	2200      	movs	r2, #0
 8014d16:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
 8014d1a:	2200      	movs	r2, #0
 8014d1c:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
 8014d20:	f893 2067 	ldrb.w	r2, [r3, #103]	@ 0x67
 8014d24:	f022 020f 	bic.w	r2, r2, #15
 8014d28:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
 8014d2c:	697b      	ldr	r3, [r7, #20]
 8014d2e:	2200      	movs	r2, #0
 8014d30:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
 8014d34:	697b      	ldr	r3, [r7, #20]
 8014d36:	2200      	movs	r2, #0
 8014d38:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
 8014d3c:	2200      	movs	r2, #0
 8014d3e:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
 8014d42:	697b      	ldr	r3, [r7, #20]
 8014d44:	4618      	mov	r0, r3
 8014d46:	374c      	adds	r7, #76	@ 0x4c
 8014d48:	46bd      	mov	sp, r7
 8014d4a:	bd90      	pop	{r4, r7, pc}
 8014d4c:	08026990 	.word	0x08026990

08014d50 <_ZNSt12__shared_ptrI7TMC2209LN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 8014d50:	b580      	push	{r7, lr}
 8014d52:	b082      	sub	sp, #8
 8014d54:	af00      	add	r7, sp, #0
 8014d56:	6078      	str	r0, [r7, #4]
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	3304      	adds	r3, #4
 8014d5c:	4618      	mov	r0, r3
 8014d5e:	f7f5 febc 	bl	800aada <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	4618      	mov	r0, r3
 8014d66:	3708      	adds	r7, #8
 8014d68:	46bd      	mov	sp, r7
 8014d6a:	bd80      	pop	{r7, pc}

08014d6c <_ZNSt10shared_ptrI7TMC2209ED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 8014d6c:	b580      	push	{r7, lr}
 8014d6e:	b082      	sub	sp, #8
 8014d70:	af00      	add	r7, sp, #0
 8014d72:	6078      	str	r0, [r7, #4]
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	4618      	mov	r0, r3
 8014d78:	f7ff ffea 	bl	8014d50 <_ZNSt12__shared_ptrI7TMC2209LN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	4618      	mov	r0, r3
 8014d80:	3708      	adds	r7, #8
 8014d82:	46bd      	mov	sp, r7
 8014d84:	bd80      	pop	{r7, pc}
	...

08014d88 <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>:
#include "tmc.h"
#include <cstdint>

#define TOFF_VALUE  4 // [1... 15]

std::shared_ptr<Module> TMC2209::create(const JsonObject& config, Remora* instance) {
 8014d88:	b590      	push	{r4, r7, lr}
 8014d8a:	b0c7      	sub	sp, #284	@ 0x11c
 8014d8c:	af04      	add	r7, sp, #16
 8014d8e:	60f8      	str	r0, [r7, #12]
 8014d90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8014d94:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8014d98:	6019      	str	r1, [r3, #0]
 8014d9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8014d9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8014da2:	601a      	str	r2, [r3, #0]
    printf("Creating TMC2209 module\n");
 8014da4:	488e      	ldr	r0, [pc, #568]	@ (8014fe0 <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x258>)
 8014da6:	f00f fe97 	bl	8024ad8 <puts>

    const char* comment = config["Comment"];
 8014daa:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8014dae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8014db2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8014db6:	4a8b      	ldr	r2, [pc, #556]	@ (8014fe4 <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x25c>)
 8014db8:	6819      	ldr	r1, [r3, #0]
 8014dba:	f7fb fd02 	bl	80107c2 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8014dbe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8014dc2:	4618      	mov	r0, r3
 8014dc4:	f7f1 fce0 	bl	8006788 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8014dc8:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
    printf("%s\n",comment);
 8014dcc:	f8d7 0104 	ldr.w	r0, [r7, #260]	@ 0x104
 8014dd0:	f00f fe82 	bl	8024ad8 <puts>

    const char* RxPin = config["RX pin"];
 8014dd4:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8014dd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8014ddc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8014de0:	4a81      	ldr	r2, [pc, #516]	@ (8014fe8 <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x260>)
 8014de2:	6819      	ldr	r1, [r3, #0]
 8014de4:	f7f1 fcab 	bl	800673e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8014de8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8014dec:	4618      	mov	r0, r3
 8014dee:	f7f1 fccb 	bl	8006788 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8014df2:	4603      	mov	r3, r0
 8014df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float RSense = config["RSense"];
 8014df6:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 8014dfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8014dfe:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8014e02:	4a7a      	ldr	r2, [pc, #488]	@ (8014fec <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x264>)
 8014e04:	6819      	ldr	r1, [r3, #0]
 8014e06:	f7f1 fc9a 	bl	800673e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8014e0a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8014e0e:	4618      	mov	r0, r3
 8014e10:	f7fe fc56 	bl	80136c0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IfLi0EEEv>
 8014e14:	eef0 7a40 	vmov.f32	s15, s0
 8014e18:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    uint8_t address = config["Address"];
 8014e1c:	f107 0078 	add.w	r0, r7, #120	@ 0x78
 8014e20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8014e24:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8014e28:	4a71      	ldr	r2, [pc, #452]	@ (8014ff0 <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x268>)
 8014e2a:	6819      	ldr	r1, [r3, #0]
 8014e2c:	f7fb fcc9 	bl	80107c2 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8014e30:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8014e34:	4618      	mov	r0, r3
 8014e36:	f7fe fc51 	bl	80136dc <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IhLi0EEEv>
 8014e3a:	4603      	mov	r3, r0
 8014e3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint16_t current = config["Current"];
 8014e40:	f107 0090 	add.w	r0, r7, #144	@ 0x90
 8014e44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8014e48:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8014e4c:	4a69      	ldr	r2, [pc, #420]	@ (8014ff4 <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x26c>)
 8014e4e:	6819      	ldr	r1, [r3, #0]
 8014e50:	f7fb fcb7 	bl	80107c2 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8014e54:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8014e58:	4618      	mov	r0, r3
 8014e5a:	f7fe fc4b 	bl	80136f4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ItLi0EEEv>
 8014e5e:	4603      	mov	r3, r0
 8014e60:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint16_t microsteps = config["Microsteps"];
 8014e62:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8014e66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8014e6a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8014e6e:	4a62      	ldr	r2, [pc, #392]	@ (8014ff8 <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x270>)
 8014e70:	6819      	ldr	r1, [r3, #0]
 8014e72:	f7f8 fcdc 	bl	800d82e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8014e76:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8014e7a:	4618      	mov	r0, r3
 8014e7c:	f7fe fc3a 	bl	80136f4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ItLi0EEEv>
 8014e80:	4603      	mov	r3, r0
 8014e82:	847b      	strh	r3, [r7, #34]	@ 0x22
    const char* stealth = config["Stealth chop"];
 8014e84:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 8014e88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8014e8c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8014e90:	4a5a      	ldr	r2, [pc, #360]	@ (8014ffc <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x274>)
 8014e92:	6819      	ldr	r1, [r3, #0]
 8014e94:	f7fd fb6a 	bl	801256c <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA13_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8014e98:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8014e9c:	4618      	mov	r0, r3
 8014e9e:	f7f1 fc73 	bl	8006788 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8014ea2:	f8c7 0100 	str.w	r0, [r7, #256]	@ 0x100
    uint16_t stall = config["Stall sensitivity"];
 8014ea6:	f107 00d8 	add.w	r0, r7, #216	@ 0xd8
 8014eaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8014eae:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8014eb2:	4a53      	ldr	r2, [pc, #332]	@ (8015000 <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x278>)
 8014eb4:	6819      	ldr	r1, [r3, #0]
 8014eb6:	f7fe fc29 	bl	801370c <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA18_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8014eba:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8014ebe:	4618      	mov	r0, r3
 8014ec0:	f7fe fc18 	bl	80136f4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ItLi0EEEv>
 8014ec4:	4603      	mov	r3, r0
 8014ec6:	843b      	strh	r3, [r7, #32]

    bool stealthchop = (strcmp(stealth, "on") == 0);
 8014ec8:	494e      	ldr	r1, [pc, #312]	@ (8015004 <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x27c>)
 8014eca:	f8d7 0100 	ldr.w	r0, [r7, #256]	@ 0x100
 8014ece:	f7eb fa07 	bl	80002e0 <strcmp>
 8014ed2:	4603      	mov	r3, r0
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	bf0c      	ite	eq
 8014ed8:	2301      	moveq	r3, #1
 8014eda:	2300      	movne	r3, #0
 8014edc:	b2db      	uxtb	r3, r3
 8014ede:	77fb      	strb	r3, [r7, #31]

    // SW Serial pin, RSense, mA, microsteps, stealh
    // TMC2208(std::string, float, uint8_t, uint16_t, uint16_t, bool);
    auto tmc = std::make_shared<TMC2209>(RxPin, RSense, address, current, microsteps, stealthchop, stall);
 8014ee0:	f107 0014 	add.w	r0, r7, #20
 8014ee4:	f107 0427 	add.w	r4, r7, #39	@ 0x27
 8014ee8:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8014eec:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8014ef0:	f107 0320 	add.w	r3, r7, #32
 8014ef4:	9303      	str	r3, [sp, #12]
 8014ef6:	f107 031f 	add.w	r3, r7, #31
 8014efa:	9302      	str	r3, [sp, #8]
 8014efc:	f107 0322 	add.w	r3, r7, #34	@ 0x22
 8014f00:	9301      	str	r3, [sp, #4]
 8014f02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014f06:	9300      	str	r3, [sp, #0]
 8014f08:	4623      	mov	r3, r4
 8014f0a:	f000 f9e9 	bl	80152e0 <_ZSt11make_sharedI7TMC2209JRPKcRfRhRtS6_RbS6_EESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESB_E4typeEEDpOT0_>

    printf("\nStarting the Serial thread\n");
 8014f0e:	483e      	ldr	r0, [pc, #248]	@ (8015008 <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x280>)
 8014f10:	f00f fde2 	bl	8024ad8 <puts>
    instance->getSerialThread()->startThread();
 8014f14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8014f18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8014f1c:	6818      	ldr	r0, [r3, #0]
 8014f1e:	f7fe f8ce 	bl	80130be <_ZN6Remora15getSerialThreadEv>
 8014f22:	4603      	mov	r3, r0
 8014f24:	4618      	mov	r0, r3
 8014f26:	f001 f895 	bl	8016054 <_ZN9pruThread11startThreadEv>
    instance->getSerialThread()->registerModule(tmc);
 8014f2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8014f2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8014f32:	6818      	ldr	r0, [r3, #0]
 8014f34:	f7fe f8c3 	bl	80130be <_ZN6Remora15getSerialThreadEv>
 8014f38:	4604      	mov	r4, r0
 8014f3a:	f107 0214 	add.w	r2, r7, #20
 8014f3e:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8014f42:	4611      	mov	r1, r2
 8014f44:	4618      	mov	r0, r3
 8014f46:	f000 fa03 	bl	8015350 <_ZNSt10shared_ptrI6ModuleEC1I7TMC2209vEERKS_IT_E>
 8014f4a:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8014f4e:	4619      	mov	r1, r3
 8014f50:	4620      	mov	r0, r4
 8014f52:	f000 ffeb 	bl	8015f2c <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE>
 8014f56:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8014f5a:	4618      	mov	r0, r3
 8014f5c:	f7f4 ff9f 	bl	8009e9e <_ZNSt10shared_ptrI6ModuleED1Ev>

    tmc->configure();
 8014f60:	f107 0314 	add.w	r3, r7, #20
 8014f64:	4618      	mov	r0, r3
 8014f66:	f000 fa03 	bl	8015370 <_ZNKSt19__shared_ptr_accessI7TMC2209LN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8014f6a:	4603      	mov	r3, r0
 8014f6c:	681a      	ldr	r2, [r3, #0]
 8014f6e:	3214      	adds	r2, #20
 8014f70:	6812      	ldr	r2, [r2, #0]
 8014f72:	4618      	mov	r0, r3
 8014f74:	4790      	blx	r2

    printf("\nStopping the Serial thread\n");
 8014f76:	4825      	ldr	r0, [pc, #148]	@ (801500c <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x284>)
 8014f78:	f00f fdae 	bl	8024ad8 <puts>
    instance->getSerialThread()->stopThread();
 8014f7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8014f80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8014f84:	6818      	ldr	r0, [r3, #0]
 8014f86:	f7fe f89a 	bl	80130be <_ZN6Remora15getSerialThreadEv>
 8014f8a:	4603      	mov	r3, r0
 8014f8c:	4618      	mov	r0, r3
 8014f8e:	f001 f88e 	bl	80160ae <_ZN9pruThread10stopThreadEv>
    instance->getSerialThread()->unregisterModule(tmc);
 8014f92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8014f96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8014f9a:	6818      	ldr	r0, [r3, #0]
 8014f9c:	f7fe f88f 	bl	80130be <_ZN6Remora15getSerialThreadEv>
 8014fa0:	4604      	mov	r4, r0
 8014fa2:	f107 0214 	add.w	r2, r7, #20
 8014fa6:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8014faa:	4611      	mov	r1, r2
 8014fac:	4618      	mov	r0, r3
 8014fae:	f000 f9cf 	bl	8015350 <_ZNSt10shared_ptrI6ModuleEC1I7TMC2209vEERKS_IT_E>
 8014fb2:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8014fb6:	4619      	mov	r1, r3
 8014fb8:	4620      	mov	r0, r4
 8014fba:	f001 f803 	bl	8015fc4 <_ZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleE>
 8014fbe:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8014fc2:	4618      	mov	r0, r3
 8014fc4:	f7f4 ff6b 	bl	8009e9e <_ZNSt10shared_ptrI6ModuleED1Ev>
}
 8014fc8:	f107 0314 	add.w	r3, r7, #20
 8014fcc:	4618      	mov	r0, r3
 8014fce:	f7ff fecd 	bl	8014d6c <_ZNSt10shared_ptrI7TMC2209ED1Ev>
 8014fd2:	bf00      	nop
 8014fd4:	68f8      	ldr	r0, [r7, #12]
 8014fd6:	f507 7786 	add.w	r7, r7, #268	@ 0x10c
 8014fda:	46bd      	mov	sp, r7
 8014fdc:	bd90      	pop	{r4, r7, pc}
 8014fde:	bf00      	nop
 8014fe0:	080262f4 	.word	0x080262f4
 8014fe4:	0802630c 	.word	0x0802630c
 8014fe8:	08026314 	.word	0x08026314
 8014fec:	0802631c 	.word	0x0802631c
 8014ff0:	08026324 	.word	0x08026324
 8014ff4:	0802632c 	.word	0x0802632c
 8014ff8:	08026334 	.word	0x08026334
 8014ffc:	08026340 	.word	0x08026340
 8015000:	08026350 	.word	0x08026350
 8015004:	08026364 	.word	0x08026364
 8015008:	08026368 	.word	0x08026368
 801500c:	08026384 	.word	0x08026384

08015010 <_ZN7TMC2209C1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfhttbt>:
                METHOD DEFINITIONS
************************************************************************/

    // SW Serial pin, RSense, addr, mA, microsteps, stealh, hybrid, stall
    // TMC2209(std::string, float, uint8_t, uint16_t, uint16_t, bool, uint16_t);
TMC2209::TMC2209(std::string rxtxPin, float Rsense, uint8_t addr, uint16_t mA, uint16_t microsteps, bool stealth, uint16_t stall) :
 8015010:	b590      	push	{r4, r7, lr}
 8015012:	b091      	sub	sp, #68	@ 0x44
 8015014:	af00      	add	r7, sp, #0
 8015016:	60f8      	str	r0, [r7, #12]
 8015018:	60b9      	str	r1, [r7, #8]
 801501a:	ed87 0a01 	vstr	s0, [r7, #4]
 801501e:	4611      	mov	r1, r2
 8015020:	461a      	mov	r2, r3
 8015022:	460b      	mov	r3, r1
 8015024:	70fb      	strb	r3, [r7, #3]
 8015026:	4613      	mov	r3, r2
 8015028:	803b      	strh	r3, [r7, #0]
    rxtxPin(rxtxPin),
    mA(mA),
    microsteps(microsteps),
    stealth(stealth),
    addr(addr),
    stall(stall)
 801502a:	68fb      	ldr	r3, [r7, #12]
 801502c:	4618      	mov	r0, r3
 801502e:	f7fe f9f3 	bl	8013418 <_ZN3TMCC1Ev>
 8015032:	4a2b      	ldr	r2, [pc, #172]	@ (80150e0 <_ZN7TMC2209C1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfhttbt+0xd0>)
 8015034:	68fb      	ldr	r3, [r7, #12]
 8015036:	601a      	str	r2, [r3, #0]
    rxtxPin(rxtxPin),
 8015038:	68fb      	ldr	r3, [r7, #12]
 801503a:	331c      	adds	r3, #28
 801503c:	68b9      	ldr	r1, [r7, #8]
 801503e:	4618      	mov	r0, r3
 8015040:	f00f f93b 	bl	80242ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
    mA(mA),
 8015044:	68fb      	ldr	r3, [r7, #12]
 8015046:	883a      	ldrh	r2, [r7, #0]
 8015048:	869a      	strh	r2, [r3, #52]	@ 0x34
    microsteps(microsteps),
 801504a:	68fb      	ldr	r3, [r7, #12]
 801504c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8015050:	86da      	strh	r2, [r3, #54]	@ 0x36
    stealth(stealth),
 8015052:	68fb      	ldr	r3, [r7, #12]
 8015054:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8015058:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    addr(addr),
 801505c:	68fb      	ldr	r3, [r7, #12]
 801505e:	78fa      	ldrb	r2, [r7, #3]
 8015060:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    stall(stall)
 8015064:	68fb      	ldr	r3, [r7, #12]
 8015066:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 801506a:	875a      	strh	r2, [r3, #58]	@ 0x3a
{
    this->Rsense = Rsense;
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	687a      	ldr	r2, [r7, #4]
 8015070:	619a      	str	r2, [r3, #24]
    this->driver = new TMC2209Stepper(this->rxtxPin, this->rxtxPin, this->Rsense, this->addr);
 8015072:	206c      	movs	r0, #108	@ 0x6c
 8015074:	f00e fef4 	bl	8023e60 <_Znwj>
 8015078:	4603      	mov	r3, r0
 801507a:	461c      	mov	r4, r3
 801507c:	68fb      	ldr	r3, [r7, #12]
 801507e:	f103 021c 	add.w	r2, r3, #28
 8015082:	f107 0310 	add.w	r3, r7, #16
 8015086:	4611      	mov	r1, r2
 8015088:	4618      	mov	r0, r3
 801508a:	f00f f916 	bl	80242ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 801508e:	68fb      	ldr	r3, [r7, #12]
 8015090:	f103 021c 	add.w	r2, r3, #28
 8015094:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8015098:	4611      	mov	r1, r2
 801509a:	4618      	mov	r0, r3
 801509c:	f00f f90d 	bl	80242ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80150a0:	68fb      	ldr	r3, [r7, #12]
 80150a2:	edd3 7a06 	vldr	s15, [r3, #24]
 80150a6:	68fb      	ldr	r3, [r7, #12]
 80150a8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80150ac:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80150b0:	f107 0110 	add.w	r1, r7, #16
 80150b4:	eeb0 0a67 	vmov.f32	s0, s15
 80150b8:	4620      	mov	r0, r4
 80150ba:	f7ff fdfd 	bl	8014cb8 <_ZN14TMC2209StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_fh>
 80150be:	68fb      	ldr	r3, [r7, #12]
 80150c0:	63dc      	str	r4, [r3, #60]	@ 0x3c
 80150c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80150c6:	4618      	mov	r0, r3
 80150c8:	f00e ffb9 	bl	802403e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80150cc:	f107 0310 	add.w	r3, r7, #16
 80150d0:	4618      	mov	r0, r3
 80150d2:	f00e ffb4 	bl	802403e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 80150d6:	68fb      	ldr	r3, [r7, #12]
 80150d8:	4618      	mov	r0, r3
 80150da:	3744      	adds	r7, #68	@ 0x44
 80150dc:	46bd      	mov	sp, r7
 80150de:	bd90      	pop	{r4, r7, pc}
 80150e0:	0802696c 	.word	0x0802696c

080150e4 <_ZN14TMC2209StepperD1Ev>:
class TMC2209Stepper : public TMC2208Stepper {
 80150e4:	b580      	push	{r7, lr}
 80150e6:	b082      	sub	sp, #8
 80150e8:	af00      	add	r7, sp, #0
 80150ea:	6078      	str	r0, [r7, #4]
 80150ec:	4a05      	ldr	r2, [pc, #20]	@ (8015104 <_ZN14TMC2209StepperD1Ev+0x20>)
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	601a      	str	r2, [r3, #0]
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	4618      	mov	r0, r3
 80150f6:	f7fd fff1 	bl	80130dc <_ZN14TMC2208StepperD1Ev>
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	4618      	mov	r0, r3
 80150fe:	3708      	adds	r7, #8
 8015100:	46bd      	mov	sp, r7
 8015102:	bd80      	pop	{r7, pc}
 8015104:	08026990 	.word	0x08026990

08015108 <_ZN7TMC2209D1Ev>:

TMC2209::~TMC2209()
 8015108:	b590      	push	{r4, r7, lr}
 801510a:	b083      	sub	sp, #12
 801510c:	af00      	add	r7, sp, #0
 801510e:	6078      	str	r0, [r7, #4]
 8015110:	4a0d      	ldr	r2, [pc, #52]	@ (8015148 <_ZN7TMC2209D1Ev+0x40>)
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	601a      	str	r2, [r3, #0]
{
    delete this->driver;
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 801511a:	2c00      	cmp	r4, #0
 801511c:	d006      	beq.n	801512c <_ZN7TMC2209D1Ev+0x24>
 801511e:	4620      	mov	r0, r4
 8015120:	f7ff ffe0 	bl	80150e4 <_ZN14TMC2209StepperD1Ev>
 8015124:	216c      	movs	r1, #108	@ 0x6c
 8015126:	4620      	mov	r0, r4
 8015128:	f00e fe89 	bl	8023e3e <_ZdlPvj>
}
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	331c      	adds	r3, #28
 8015130:	4618      	mov	r0, r3
 8015132:	f00e ff84 	bl	802403e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	4618      	mov	r0, r3
 801513a:	f7fe f97f 	bl	801343c <_ZN3TMCD1Ev>
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	4618      	mov	r0, r3
 8015142:	370c      	adds	r7, #12
 8015144:	46bd      	mov	sp, r7
 8015146:	bd90      	pop	{r4, r7, pc}
 8015148:	0802696c 	.word	0x0802696c

0801514c <_ZN7TMC2209D0Ev>:
TMC2209::~TMC2209()
 801514c:	b580      	push	{r7, lr}
 801514e:	b082      	sub	sp, #8
 8015150:	af00      	add	r7, sp, #0
 8015152:	6078      	str	r0, [r7, #4]
}
 8015154:	6878      	ldr	r0, [r7, #4]
 8015156:	f7ff ffd7 	bl	8015108 <_ZN7TMC2209D1Ev>
 801515a:	2140      	movs	r1, #64	@ 0x40
 801515c:	6878      	ldr	r0, [r7, #4]
 801515e:	f00e fe6e 	bl	8023e3e <_ZdlPvj>
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	4618      	mov	r0, r3
 8015166:	3708      	adds	r7, #8
 8015168:	46bd      	mov	sp, r7
 801516a:	bd80      	pop	{r7, pc}

0801516c <_ZN7TMC22099configureEv>:

void TMC2209::configure()
{
 801516c:	b580      	push	{r7, lr}
 801516e:	b084      	sub	sp, #16
 8015170:	af00      	add	r7, sp, #0
 8015172:	6078      	str	r0, [r7, #4]
    uint16_t result;

    driver->begin();
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015178:	4618      	mov	r0, r3
 801517a:	f7ed fe23 	bl	8002dc4 <_ZN14TMC2208Stepper5beginEv>
    
    printf("Testing connection to TMC driver...");
 801517e:	4849      	ldr	r0, [pc, #292]	@ (80152a4 <_ZN7TMC22099configureEv+0x138>)
 8015180:	f00f fc3a 	bl	80249f8 <iprintf>
    result = driver->test_connection();
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015188:	4618      	mov	r0, r3
 801518a:	f7ee fa01 	bl	8003590 <_ZN10TMCStepper15test_connectionEv>
 801518e:	4603      	mov	r3, r0
 8015190:	81fb      	strh	r3, [r7, #14]
    if (result) {
 8015192:	89fb      	ldrh	r3, [r7, #14]
 8015194:	2b00      	cmp	r3, #0
 8015196:	d017      	beq.n	80151c8 <_ZN7TMC22099configureEv+0x5c>
        printf("failed!\n");
 8015198:	4843      	ldr	r0, [pc, #268]	@ (80152a8 <_ZN7TMC22099configureEv+0x13c>)
 801519a:	f00f fc9d 	bl	8024ad8 <puts>
        printf("Likely cause: ");
 801519e:	4843      	ldr	r0, [pc, #268]	@ (80152ac <_ZN7TMC22099configureEv+0x140>)
 80151a0:	f00f fc2a 	bl	80249f8 <iprintf>
        switch(result) {
 80151a4:	89fb      	ldrh	r3, [r7, #14]
 80151a6:	2b01      	cmp	r3, #1
 80151a8:	d002      	beq.n	80151b0 <_ZN7TMC22099configureEv+0x44>
 80151aa:	2b02      	cmp	r3, #2
 80151ac:	d004      	beq.n	80151b8 <_ZN7TMC22099configureEv+0x4c>
 80151ae:	e007      	b.n	80151c0 <_ZN7TMC22099configureEv+0x54>
            case 1: printf("loose connection\n"); break;
 80151b0:	483f      	ldr	r0, [pc, #252]	@ (80152b0 <_ZN7TMC22099configureEv+0x144>)
 80151b2:	f00f fc91 	bl	8024ad8 <puts>
 80151b6:	e003      	b.n	80151c0 <_ZN7TMC22099configureEv+0x54>
            case 2: printf("no power\n"); break;
 80151b8:	483e      	ldr	r0, [pc, #248]	@ (80152b4 <_ZN7TMC22099configureEv+0x148>)
 80151ba:	f00f fc8d 	bl	8024ad8 <puts>
 80151be:	bf00      	nop
        }
        printf("  Fix the problem and reset board.\n");
 80151c0:	483d      	ldr	r0, [pc, #244]	@ (80152b8 <_ZN7TMC22099configureEv+0x14c>)
 80151c2:	f00f fc89 	bl	8024ad8 <puts>
 80151c6:	e002      	b.n	80151ce <_ZN7TMC22099configureEv+0x62>
        //abort();
    }
    else   
    {
        printf("OK\n");
 80151c8:	483c      	ldr	r0, [pc, #240]	@ (80152bc <_ZN7TMC22099configureEv+0x150>)
 80151ca:	f00f fc85 	bl	8024ad8 <puts>

    // Sets the slow decay time (off time) [1... 15]. This setting also limits
    // the maximum chopper frequency. For operation with StealthChop,
    // this parameter is not used, but it is required to enable the motor.
    // In case of operation with StealthChop only, any setting is OK.
    driver->toff(TOFF_VALUE);
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80151d2:	2104      	movs	r1, #4
 80151d4:	4618      	mov	r0, r3
 80151d6:	f7ed faa8 	bl	800272a <_ZN14TMC2208Stepper4toffEh>

    // Comparator blank time. This time needs to safely cover the switching
    // event and the duration of the ringing on the sense resistor. For most
    // applications, a setting of 16 or 24 is good. For highly capacitive
    // loads, a setting of 32 or 40 will be required.
    driver->blank_time(24);
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80151de:	2118      	movs	r1, #24
 80151e0:	4618      	mov	r0, r3
 80151e2:	f7ee faa1 	bl	8003728 <_ZN10TMCStepper10blank_timeEh>

    driver->rms_current(this->mA);
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80151ea:	461a      	mov	r2, r3
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80151f0:	4619      	mov	r1, r3
 80151f2:	4610      	mov	r0, r2
 80151f4:	f7ee f930 	bl	8003458 <_ZN10TMCStepper11rms_currentEt>
    driver->microsteps(this->microsteps);
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80151fc:	461a      	mov	r2, r3
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8015202:	4619      	mov	r1, r3
 8015204:	4610      	mov	r0, r2
 8015206:	f7ee f9df 	bl	80035c8 <_ZN10TMCStepper10microstepsEt>

    // Lower threshold velocity for switching on smart energy CoolStep and StallGuard to DIAG output
    driver->TCOOLTHRS(0xFFFFF); // 20bit max
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801520e:	492c      	ldr	r1, [pc, #176]	@ (80152c0 <_ZN7TMC22099configureEv+0x154>)
 8015210:	4618      	mov	r0, r3
 8015212:	f7ee f8f1 	bl	80033f8 <_ZN14TMC2209Stepper9TCOOLTHRSEm>
    
    // CoolStep lower threshold [0... 15].
    // If SG_RESULT goes below this threshold, CoolStep increases the current to both coils.
    // 0: disable CoolStep
    driver->semin(5);
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801521a:	2105      	movs	r1, #5
 801521c:	4618      	mov	r0, r3
 801521e:	f7ed fbbe 	bl	800299e <_ZN14TMC2209Stepper5seminEh>

    // CoolStep upper threshold [0... 15].
    // If SG is sampled equal to or above this threshold enough times,
    // CoolStep decreases the current to both coils.
    driver->semax(2);
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015226:	2102      	movs	r1, #2
 8015228:	4618      	mov	r0, r3
 801522a:	f7ed fbd7 	bl	80029dc <_ZN14TMC2209Stepper5semaxEh>

    // Sets the number of StallGuard2 readings above the upper threshold necessary
    // for each current decrement of the motor current.
    driver->sedn(0b01);
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015232:	2101      	movs	r1, #1
 8015234:	4618      	mov	r0, r3
 8015236:	f7ed fbf0 	bl	8002a1a <_ZN14TMC2209Stepper4sednEh>

    // Toggle spreadCycle on TMC2208/2209/2224: default false, true: much faster!!!!
    driver->en_spreadCycle(!this->stealth);            
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801523e:	461a      	mov	r2, r3
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8015246:	f083 0301 	eor.w	r3, r3, #1
 801524a:	b2db      	uxtb	r3, r3
 801524c:	4619      	mov	r1, r3
 801524e:	4610      	mov	r0, r2
 8015250:	f7ed fc12 	bl	8002a78 <_ZN14TMC2208Stepper14en_spreadCycleEb>
    
    // Needed for StealthChop
    driver->pwm_autoscale(true);             
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015258:	2101      	movs	r1, #1
 801525a:	4618      	mov	r0, r3
 801525c:	f7ed fcba 	bl	8002bd4 <_ZN14TMC2208Stepper13pwm_autoscaleEb>

    // StallGuard is only possible if StealthChop is enabled
    if (this->stealth && this->stall)
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8015266:	2b00      	cmp	r3, #0
 8015268:	d00c      	beq.n	8015284 <_ZN7TMC22099configureEv+0x118>
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 801526e:	2b00      	cmp	r3, #0
 8015270:	d008      	beq.n	8015284 <_ZN7TMC22099configureEv+0x118>
        // StallGuard4 threshold [0... 255] level for stall detection. It compensates for
        // motor specific characteristics and controls sensitivity. A higher value gives a higher
        // sensitivity. A higher value makes StallGuard4 more sensitive and requires less torque to
        // indicate a stall. The double of this value is compared to SG_RESULT.
        // The stall output becomes active if SG_RESULT fall below this value.
        driver->SGTHRS(this->stall);             
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 801527a:	b2db      	uxtb	r3, r3
 801527c:	4619      	mov	r1, r3
 801527e:	4610      	mov	r0, r2
 8015280:	f7ee f8a3 	bl	80033ca <_ZN14TMC2209Stepper6SGTHRSEh>
    }

    driver->iholddelay(10);
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015288:	210a      	movs	r1, #10
 801528a:	4618      	mov	r0, r3
 801528c:	f7ed fc85 	bl	8002b9a <_ZN10TMCStepper10iholddelayEh>

    driver->TPOWERDOWN(128);    // ~2s until driver lowers to hold current
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015294:	2180      	movs	r1, #128	@ 0x80
 8015296:	4618      	mov	r0, r3
 8015298:	f7ee fa7e 	bl	8003798 <_ZN10TMCStepper10TPOWERDOWNEh>
    
}
 801529c:	bf00      	nop
 801529e:	3710      	adds	r7, #16
 80152a0:	46bd      	mov	sp, r7
 80152a2:	bd80      	pop	{r7, pc}
 80152a4:	080263a0 	.word	0x080263a0
 80152a8:	080263c4 	.word	0x080263c4
 80152ac:	080263cc 	.word	0x080263cc
 80152b0:	080263dc 	.word	0x080263dc
 80152b4:	080263f0 	.word	0x080263f0
 80152b8:	080263fc 	.word	0x080263fc
 80152bc:	08026420 	.word	0x08026420
 80152c0:	000fffff 	.word	0x000fffff

080152c4 <_ZN7TMC22096updateEv>:

void TMC2209::update()
{
 80152c4:	b580      	push	{r7, lr}
 80152c6:	b082      	sub	sp, #8
 80152c8:	af00      	add	r7, sp, #0
 80152ca:	6078      	str	r0, [r7, #4]
    this->driver->SWSerial->tickerHandler();
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80152d0:	695b      	ldr	r3, [r3, #20]
 80152d2:	4618      	mov	r0, r3
 80152d4:	f7ed f897 	bl	8002406 <_ZN14SoftwareSerial13tickerHandlerEv>
}
 80152d8:	bf00      	nop
 80152da:	3708      	adds	r7, #8
 80152dc:	46bd      	mov	sp, r7
 80152de:	bd80      	pop	{r7, pc}

080152e0 <_ZSt11make_sharedI7TMC2209JRPKcRfRhRtS6_RbS6_EESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESB_E4typeEEDpOT0_>:
    make_shared(_Args&&... __args)
 80152e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80152e4:	b08e      	sub	sp, #56	@ 0x38
 80152e6:	af06      	add	r7, sp, #24
 80152e8:	6178      	str	r0, [r7, #20]
 80152ea:	6139      	str	r1, [r7, #16]
 80152ec:	60fa      	str	r2, [r7, #12]
 80152ee:	60bb      	str	r3, [r7, #8]
			     std::forward<_Args>(__args)...);
 80152f0:	f107 031c 	add.w	r3, r7, #28
 80152f4:	469a      	mov	sl, r3
 80152f6:	6938      	ldr	r0, [r7, #16]
 80152f8:	f7f8 fbc3 	bl	800da82 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 80152fc:	4680      	mov	r8, r0
 80152fe:	68f8      	ldr	r0, [r7, #12]
 8015300:	f7fe faed 	bl	80138de <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8015304:	4681      	mov	r9, r0
 8015306:	68b8      	ldr	r0, [r7, #8]
 8015308:	f000 f83e 	bl	8015388 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 801530c:	4604      	mov	r4, r0
 801530e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8015310:	f7fe faf0 	bl	80138f4 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8015314:	4605      	mov	r5, r0
 8015316:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8015318:	f7fe faec 	bl	80138f4 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801531c:	4606      	mov	r6, r0
 801531e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8015320:	f7fa fb75 	bl	800fa0e <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8015324:	6078      	str	r0, [r7, #4]
 8015326:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8015328:	f7fe fae4 	bl	80138f4 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801532c:	4603      	mov	r3, r0
 801532e:	9304      	str	r3, [sp, #16]
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	9303      	str	r3, [sp, #12]
 8015334:	9602      	str	r6, [sp, #8]
 8015336:	9501      	str	r5, [sp, #4]
 8015338:	9400      	str	r4, [sp, #0]
 801533a:	464b      	mov	r3, r9
 801533c:	4642      	mov	r2, r8
 801533e:	4651      	mov	r1, sl
 8015340:	6978      	ldr	r0, [r7, #20]
 8015342:	f000 f82c 	bl	801539e <_ZNSt10shared_ptrI7TMC2209EC1ISaIvEJRPKcRfRhRtS9_RbS9_EEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
    }
 8015346:	6978      	ldr	r0, [r7, #20]
 8015348:	3720      	adds	r7, #32
 801534a:	46bd      	mov	sp, r7
 801534c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08015350 <_ZNSt10shared_ptrI6ModuleEC1I7TMC2209vEERKS_IT_E>:
	shared_ptr(const shared_ptr<_Yp>& __r) noexcept
 8015350:	b580      	push	{r7, lr}
 8015352:	b082      	sub	sp, #8
 8015354:	af00      	add	r7, sp, #0
 8015356:	6078      	str	r0, [r7, #4]
 8015358:	6039      	str	r1, [r7, #0]
        : __shared_ptr<_Tp>(__r) { }
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	683a      	ldr	r2, [r7, #0]
 801535e:	4611      	mov	r1, r2
 8015360:	4618      	mov	r0, r3
 8015362:	f000 f854 	bl	801540e <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I7TMC2209vEERKS_IT_LS2_0EE>
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	4618      	mov	r0, r3
 801536a:	3708      	adds	r7, #8
 801536c:	46bd      	mov	sp, r7
 801536e:	bd80      	pop	{r7, pc}

08015370 <_ZNKSt19__shared_ptr_accessI7TMC2209LN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 8015370:	b580      	push	{r7, lr}
 8015372:	b082      	sub	sp, #8
 8015374:	af00      	add	r7, sp, #0
 8015376:	6078      	str	r0, [r7, #4]
	return _M_get();
 8015378:	6878      	ldr	r0, [r7, #4]
 801537a:	f000 f85e 	bl	801543a <_ZNKSt19__shared_ptr_accessI7TMC2209LN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 801537e:	4603      	mov	r3, r0
      }
 8015380:	4618      	mov	r0, r3
 8015382:	3708      	adds	r7, #8
 8015384:	46bd      	mov	sp, r7
 8015386:	bd80      	pop	{r7, pc}

08015388 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8015388:	b480      	push	{r7}
 801538a:	b083      	sub	sp, #12
 801538c:	af00      	add	r7, sp, #0
 801538e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	4618      	mov	r0, r3
 8015394:	370c      	adds	r7, #12
 8015396:	46bd      	mov	sp, r7
 8015398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801539c:	4770      	bx	lr

0801539e <_ZNSt10shared_ptrI7TMC2209EC1ISaIvEJRPKcRfRhRtS9_RbS9_EEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 801539e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80153a2:	b08d      	sub	sp, #52	@ 0x34
 80153a4:	af06      	add	r7, sp, #24
 80153a6:	6178      	str	r0, [r7, #20]
 80153a8:	6139      	str	r1, [r7, #16]
 80153aa:	60fa      	str	r2, [r7, #12]
 80153ac:	60bb      	str	r3, [r7, #8]
	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 80153ae:	697c      	ldr	r4, [r7, #20]
 80153b0:	68f8      	ldr	r0, [r7, #12]
 80153b2:	f7f8 fb66 	bl	800da82 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 80153b6:	4680      	mov	r8, r0
 80153b8:	68b8      	ldr	r0, [r7, #8]
 80153ba:	f7fe fa90 	bl	80138de <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 80153be:	4681      	mov	r9, r0
 80153c0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80153c2:	f7ff ffe1 	bl	8015388 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 80153c6:	4605      	mov	r5, r0
 80153c8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80153ca:	f7fe fa93 	bl	80138f4 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80153ce:	4606      	mov	r6, r0
 80153d0:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80153d2:	f7fe fa8f 	bl	80138f4 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80153d6:	6078      	str	r0, [r7, #4]
 80153d8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80153da:	f7fa fb18 	bl	800fa0e <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 80153de:	6038      	str	r0, [r7, #0]
 80153e0:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80153e2:	f7fe fa87 	bl	80138f4 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80153e6:	4603      	mov	r3, r0
 80153e8:	9304      	str	r3, [sp, #16]
 80153ea:	683b      	ldr	r3, [r7, #0]
 80153ec:	9303      	str	r3, [sp, #12]
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	9302      	str	r3, [sp, #8]
 80153f2:	9601      	str	r6, [sp, #4]
 80153f4:	9500      	str	r5, [sp, #0]
 80153f6:	464b      	mov	r3, r9
 80153f8:	4642      	mov	r2, r8
 80153fa:	6939      	ldr	r1, [r7, #16]
 80153fc:	4620      	mov	r0, r4
 80153fe:	f000 f828 	bl	8015452 <_ZNSt12__shared_ptrI7TMC2209LN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJRPKcRfRhRtSB_RbSB_EEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
	{ }
 8015402:	697b      	ldr	r3, [r7, #20]
 8015404:	4618      	mov	r0, r3
 8015406:	371c      	adds	r7, #28
 8015408:	46bd      	mov	sp, r7
 801540a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801540e <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I7TMC2209vEERKS_IT_LS2_0EE>:
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
 801540e:	b580      	push	{r7, lr}
 8015410:	b082      	sub	sp, #8
 8015412:	af00      	add	r7, sp, #0
 8015414:	6078      	str	r0, [r7, #4]
 8015416:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
 8015418:	683b      	ldr	r3, [r7, #0]
 801541a:	681a      	ldr	r2, [r3, #0]
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	601a      	str	r2, [r3, #0]
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	1d1a      	adds	r2, r3, #4
 8015424:	683b      	ldr	r3, [r7, #0]
 8015426:	3304      	adds	r3, #4
 8015428:	4619      	mov	r1, r3
 801542a:	4610      	mov	r0, r2
 801542c:	f7f5 fe49 	bl	800b0c2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	{ }
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	4618      	mov	r0, r3
 8015434:	3708      	adds	r7, #8
 8015436:	46bd      	mov	sp, r7
 8015438:	bd80      	pop	{r7, pc}

0801543a <_ZNKSt19__shared_ptr_accessI7TMC2209LN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 801543a:	b580      	push	{r7, lr}
 801543c:	b082      	sub	sp, #8
 801543e:	af00      	add	r7, sp, #0
 8015440:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8015442:	6878      	ldr	r0, [r7, #4]
 8015444:	f000 f84b 	bl	80154de <_ZNKSt12__shared_ptrI7TMC2209LN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8015448:	4603      	mov	r3, r0
 801544a:	4618      	mov	r0, r3
 801544c:	3708      	adds	r7, #8
 801544e:	46bd      	mov	sp, r7
 8015450:	bd80      	pop	{r7, pc}

08015452 <_ZNSt12__shared_ptrI7TMC2209LN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJRPKcRfRhRtSB_RbSB_EEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 8015452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015456:	b08e      	sub	sp, #56	@ 0x38
 8015458:	af06      	add	r7, sp, #24
 801545a:	61f8      	str	r0, [r7, #28]
 801545c:	61b9      	str	r1, [r7, #24]
 801545e:	617a      	str	r2, [r7, #20]
 8015460:	613b      	str	r3, [r7, #16]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 8015462:	69fb      	ldr	r3, [r7, #28]
 8015464:	2200      	movs	r2, #0
 8015466:	601a      	str	r2, [r3, #0]
 8015468:	69fb      	ldr	r3, [r7, #28]
 801546a:	1d1c      	adds	r4, r3, #4
 801546c:	69fd      	ldr	r5, [r7, #28]
 801546e:	6978      	ldr	r0, [r7, #20]
 8015470:	f7f8 fb07 	bl	800da82 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8015474:	4680      	mov	r8, r0
 8015476:	6938      	ldr	r0, [r7, #16]
 8015478:	f7fe fa31 	bl	80138de <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 801547c:	4606      	mov	r6, r0
 801547e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8015480:	f7ff ff82 	bl	8015388 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8015484:	60f8      	str	r0, [r7, #12]
 8015486:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8015488:	f7fe fa34 	bl	80138f4 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801548c:	60b8      	str	r0, [r7, #8]
 801548e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8015490:	f7fe fa30 	bl	80138f4 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8015494:	6078      	str	r0, [r7, #4]
 8015496:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8015498:	f7fa fab9 	bl	800fa0e <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 801549c:	6038      	str	r0, [r7, #0]
 801549e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80154a0:	f7fe fa28 	bl	80138f4 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80154a4:	4603      	mov	r3, r0
 80154a6:	9305      	str	r3, [sp, #20]
 80154a8:	683b      	ldr	r3, [r7, #0]
 80154aa:	9304      	str	r3, [sp, #16]
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	9303      	str	r3, [sp, #12]
 80154b0:	68bb      	ldr	r3, [r7, #8]
 80154b2:	9302      	str	r3, [sp, #8]
 80154b4:	68fb      	ldr	r3, [r7, #12]
 80154b6:	9301      	str	r3, [sp, #4]
 80154b8:	9600      	str	r6, [sp, #0]
 80154ba:	4643      	mov	r3, r8
 80154bc:	69ba      	ldr	r2, [r7, #24]
 80154be:	4629      	mov	r1, r5
 80154c0:	4620      	mov	r0, r4
 80154c2:	f000 f818 	bl	80154f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7TMC2209SaIvEJRPKcRfRhRtSB_RbSB_EEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>
	{ _M_enable_shared_from_this_with(_M_ptr); }
 80154c6:	69fb      	ldr	r3, [r7, #28]
 80154c8:	681b      	ldr	r3, [r3, #0]
 80154ca:	4619      	mov	r1, r3
 80154cc:	69f8      	ldr	r0, [r7, #28]
 80154ce:	f000 f87e 	bl	80155ce <_ZNSt12__shared_ptrI7TMC2209LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
 80154d2:	69fb      	ldr	r3, [r7, #28]
 80154d4:	4618      	mov	r0, r3
 80154d6:	3720      	adds	r7, #32
 80154d8:	46bd      	mov	sp, r7
 80154da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080154de <_ZNKSt12__shared_ptrI7TMC2209LN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 80154de:	b480      	push	{r7}
 80154e0:	b083      	sub	sp, #12
 80154e2:	af00      	add	r7, sp, #0
 80154e4:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	681b      	ldr	r3, [r3, #0]
 80154ea:	4618      	mov	r0, r3
 80154ec:	370c      	adds	r7, #12
 80154ee:	46bd      	mov	sp, r7
 80154f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154f4:	4770      	bx	lr

080154f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7TMC2209SaIvEJRPKcRfRhRtSB_RbSB_EEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>:
	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
 80154f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80154fa:	b092      	sub	sp, #72	@ 0x48
 80154fc:	af06      	add	r7, sp, #24
 80154fe:	6178      	str	r0, [r7, #20]
 8015500:	6139      	str	r1, [r7, #16]
 8015502:	60fa      	str	r2, [r7, #12]
 8015504:	60bb      	str	r3, [r7, #8]
	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 8015506:	68fa      	ldr	r2, [r7, #12]
 8015508:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801550c:	4611      	mov	r1, r2
 801550e:	4618      	mov	r0, r3
 8015510:	f000 f868 	bl	80155e4 <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	  auto __guard = std::__allocate_guarded(__a2);
 8015514:	f107 031c 	add.w	r3, r7, #28
 8015518:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 801551c:	4611      	mov	r1, r2
 801551e:	4618      	mov	r0, r3
 8015520:	f000 f879 	bl	8015616 <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>
	  _Sp_cp_type* __mem = __guard.get();
 8015524:	f107 031c 	add.w	r3, r7, #28
 8015528:	4618      	mov	r0, r3
 801552a:	f000 f89c 	bl	8015666 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>
 801552e:	62f8      	str	r0, [r7, #44]	@ 0x2c
	  auto __pi = ::new (__mem)
 8015530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015532:	4619      	mov	r1, r3
 8015534:	204c      	movs	r0, #76	@ 0x4c
 8015536:	f7f4 f8e3 	bl	8009700 <_ZnwjPv>
 801553a:	4604      	mov	r4, r0
 801553c:	68b8      	ldr	r0, [r7, #8]
 801553e:	f7f8 faa0 	bl	800da82 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8015542:	4680      	mov	r8, r0
 8015544:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8015546:	f7fe f9ca 	bl	80138de <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 801554a:	4681      	mov	r9, r0
 801554c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801554e:	f7ff ff1b 	bl	8015388 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8015552:	4605      	mov	r5, r0
 8015554:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8015556:	f7fe f9cd 	bl	80138f4 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801555a:	4606      	mov	r6, r0
 801555c:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 801555e:	f7fe f9c9 	bl	80138f4 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8015562:	6078      	str	r0, [r7, #4]
 8015564:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8015566:	f7fa fa52 	bl	800fa0e <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 801556a:	6038      	str	r0, [r7, #0]
 801556c:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 801556e:	f7fe f9c1 	bl	80138f4 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8015572:	4603      	mov	r3, r0
 8015574:	9304      	str	r3, [sp, #16]
 8015576:	683b      	ldr	r3, [r7, #0]
 8015578:	9303      	str	r3, [sp, #12]
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	9302      	str	r3, [sp, #8]
 801557e:	9601      	str	r6, [sp, #4]
 8015580:	9500      	str	r5, [sp, #0]
 8015582:	464b      	mov	r3, r9
 8015584:	4642      	mov	r2, r8
 8015586:	4651      	mov	r1, sl
 8015588:	4620      	mov	r0, r4
 801558a:	f000 f87b 	bl	8015684 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcRfRhRtSB_RbSB_EEES1_DpOT_>
 801558e:	62bc      	str	r4, [r7, #40]	@ 0x28
	  __guard = nullptr;
 8015590:	f107 031c 	add.w	r3, r7, #28
 8015594:	2100      	movs	r1, #0
 8015596:	4618      	mov	r0, r3
 8015598:	f000 f8be 	bl	8015718 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>
	  _M_pi = __pi;
 801559c:	697b      	ldr	r3, [r7, #20]
 801559e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80155a0:	601a      	str	r2, [r3, #0]
	  __p = __pi->_M_ptr();
 80155a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80155a4:	f000 f8c7 	bl	8015736 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 80155a8:	4602      	mov	r2, r0
 80155aa:	693b      	ldr	r3, [r7, #16]
 80155ac:	601a      	str	r2, [r3, #0]
	}
 80155ae:	f107 031c 	add.w	r3, r7, #28
 80155b2:	4618      	mov	r0, r3
 80155b4:	f000 f842 	bl	801563c <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 80155b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80155bc:	4618      	mov	r0, r3
 80155be:	f000 f81e 	bl	80155fe <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 80155c2:	697b      	ldr	r3, [r7, #20]
 80155c4:	4618      	mov	r0, r3
 80155c6:	3730      	adds	r7, #48	@ 0x30
 80155c8:	46bd      	mov	sp, r7
 80155ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080155ce <_ZNSt12__shared_ptrI7TMC2209LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 80155ce:	b480      	push	{r7}
 80155d0:	b083      	sub	sp, #12
 80155d2:	af00      	add	r7, sp, #0
 80155d4:	6078      	str	r0, [r7, #4]
 80155d6:	6039      	str	r1, [r7, #0]
	{ }
 80155d8:	bf00      	nop
 80155da:	370c      	adds	r7, #12
 80155dc:	46bd      	mov	sp, r7
 80155de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155e2:	4770      	bx	lr

080155e4 <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 80155e4:	b580      	push	{r7, lr}
 80155e6:	b082      	sub	sp, #8
 80155e8:	af00      	add	r7, sp, #0
 80155ea:	6078      	str	r0, [r7, #4]
 80155ec:	6039      	str	r1, [r7, #0]
 80155ee:	6878      	ldr	r0, [r7, #4]
 80155f0:	f000 f8af 	bl	8015752 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	4618      	mov	r0, r3
 80155f8:	3708      	adds	r7, #8
 80155fa:	46bd      	mov	sp, r7
 80155fc:	bd80      	pop	{r7, pc}

080155fe <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80155fe:	b580      	push	{r7, lr}
 8015600:	b082      	sub	sp, #8
 8015602:	af00      	add	r7, sp, #0
 8015604:	6078      	str	r0, [r7, #4]
 8015606:	6878      	ldr	r0, [r7, #4]
 8015608:	f000 f8ae 	bl	8015768 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	4618      	mov	r0, r3
 8015610:	3708      	adds	r7, #8
 8015612:	46bd      	mov	sp, r7
 8015614:	bd80      	pop	{r7, pc}

08015616 <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>:
    __allocate_guarded(_Alloc& __a)
 8015616:	b580      	push	{r7, lr}
 8015618:	b082      	sub	sp, #8
 801561a:	af00      	add	r7, sp, #0
 801561c:	6078      	str	r0, [r7, #4]
 801561e:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8015620:	2101      	movs	r1, #1
 8015622:	6838      	ldr	r0, [r7, #0]
 8015624:	f000 f8ab 	bl	801577e <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>
 8015628:	4603      	mov	r3, r0
 801562a:	461a      	mov	r2, r3
 801562c:	6839      	ldr	r1, [r7, #0]
 801562e:	6878      	ldr	r0, [r7, #4]
 8015630:	f000 f8b4 	bl	801579c <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
    }
 8015634:	6878      	ldr	r0, [r7, #4]
 8015636:	3708      	adds	r7, #8
 8015638:	46bd      	mov	sp, r7
 801563a:	bd80      	pop	{r7, pc}

0801563c <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 801563c:	b580      	push	{r7, lr}
 801563e:	b082      	sub	sp, #8
 8015640:	af00      	add	r7, sp, #0
 8015642:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	685b      	ldr	r3, [r3, #4]
 8015648:	2b00      	cmp	r3, #0
 801564a:	d007      	beq.n	801565c <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	6818      	ldr	r0, [r3, #0]
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	685b      	ldr	r3, [r3, #4]
 8015654:	2201      	movs	r2, #1
 8015656:	4619      	mov	r1, r3
 8015658:	f000 f8b4 	bl	80157c4 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>
      }
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	4618      	mov	r0, r3
 8015660:	3708      	adds	r7, #8
 8015662:	46bd      	mov	sp, r7
 8015664:	bd80      	pop	{r7, pc}

08015666 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>:
      value_type* get() { return std::__to_address(_M_ptr); }
 8015666:	b580      	push	{r7, lr}
 8015668:	b082      	sub	sp, #8
 801566a:	af00      	add	r7, sp, #0
 801566c:	6078      	str	r0, [r7, #4]
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	685b      	ldr	r3, [r3, #4]
 8015672:	4618      	mov	r0, r3
 8015674:	f000 f8b5 	bl	80157e2 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>
 8015678:	4603      	mov	r3, r0
 801567a:	4618      	mov	r0, r3
 801567c:	3708      	adds	r7, #8
 801567e:	46bd      	mov	sp, r7
 8015680:	bd80      	pop	{r7, pc}
	...

08015684 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcRfRhRtSB_RbSB_EEES1_DpOT_>:
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 8015684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015688:	b08c      	sub	sp, #48	@ 0x30
 801568a:	af06      	add	r7, sp, #24
 801568c:	6178      	str	r0, [r7, #20]
 801568e:	7439      	strb	r1, [r7, #16]
 8015690:	60fa      	str	r2, [r7, #12]
 8015692:	60bb      	str	r3, [r7, #8]
	: _M_impl(__a)
 8015694:	697b      	ldr	r3, [r7, #20]
 8015696:	4618      	mov	r0, r3
 8015698:	f7f7 f934 	bl	800c904 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 801569c:	4a1d      	ldr	r2, [pc, #116]	@ (8015714 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcRfRhRtSB_RbSB_EEES1_DpOT_+0x90>)
 801569e:	697b      	ldr	r3, [r7, #20]
 80156a0:	601a      	str	r2, [r3, #0]
 80156a2:	697b      	ldr	r3, [r7, #20]
 80156a4:	330c      	adds	r3, #12
 80156a6:	4621      	mov	r1, r4
 80156a8:	4618      	mov	r0, r3
 80156aa:	f000 f8a5 	bl	80157f8 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
 80156ae:	6978      	ldr	r0, [r7, #20]
 80156b0:	f000 f841 	bl	8015736 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 80156b4:	4680      	mov	r8, r0
 80156b6:	68f8      	ldr	r0, [r7, #12]
 80156b8:	f7f8 f9e3 	bl	800da82 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 80156bc:	4681      	mov	r9, r0
 80156be:	68b8      	ldr	r0, [r7, #8]
 80156c0:	f7fe f90d 	bl	80138de <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 80156c4:	4682      	mov	sl, r0
 80156c6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80156c8:	f7ff fe5e 	bl	8015388 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 80156cc:	4604      	mov	r4, r0
 80156ce:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80156d0:	f7fe f910 	bl	80138f4 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80156d4:	4605      	mov	r5, r0
 80156d6:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80156d8:	f7fe f90c 	bl	80138f4 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80156dc:	4606      	mov	r6, r0
 80156de:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80156e0:	f7fa f995 	bl	800fa0e <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 80156e4:	6078      	str	r0, [r7, #4]
 80156e6:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80156e8:	f7fe f904 	bl	80138f4 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80156ec:	4603      	mov	r3, r0
 80156ee:	f107 0010 	add.w	r0, r7, #16
 80156f2:	9304      	str	r3, [sp, #16]
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	9303      	str	r3, [sp, #12]
 80156f8:	9602      	str	r6, [sp, #8]
 80156fa:	9501      	str	r5, [sp, #4]
 80156fc:	9400      	str	r4, [sp, #0]
 80156fe:	4653      	mov	r3, sl
 8015700:	464a      	mov	r2, r9
 8015702:	4641      	mov	r1, r8
 8015704:	f000 f887 	bl	8015816 <_ZNSt16allocator_traitsISaIvEE9constructI7TMC2209JRPKcRfRhRtS9_RbS9_EEEvRS0_PT_DpOT0_>
	}
 8015708:	697b      	ldr	r3, [r7, #20]
 801570a:	4618      	mov	r0, r3
 801570c:	3718      	adds	r7, #24
 801570e:	46bd      	mov	sp, r7
 8015710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015714:	08026950 	.word	0x08026950

08015718 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8015718:	b480      	push	{r7}
 801571a:	b083      	sub	sp, #12
 801571c:	af00      	add	r7, sp, #0
 801571e:	6078      	str	r0, [r7, #4]
 8015720:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	2200      	movs	r2, #0
 8015726:	605a      	str	r2, [r3, #4]
	return *this;
 8015728:	687b      	ldr	r3, [r7, #4]
      }
 801572a:	4618      	mov	r0, r3
 801572c:	370c      	adds	r7, #12
 801572e:	46bd      	mov	sp, r7
 8015730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015734:	4770      	bx	lr

08015736 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>:
      _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }
 8015736:	b580      	push	{r7, lr}
 8015738:	b082      	sub	sp, #8
 801573a:	af00      	add	r7, sp, #0
 801573c:	6078      	str	r0, [r7, #4]
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	330c      	adds	r3, #12
 8015742:	4618      	mov	r0, r3
 8015744:	f000 f89a 	bl	801587c <_ZN9__gnu_cxx16__aligned_bufferI7TMC2209E6_M_ptrEv>
 8015748:	4603      	mov	r3, r0
 801574a:	4618      	mov	r0, r3
 801574c:	3708      	adds	r7, #8
 801574e:	46bd      	mov	sp, r7
 8015750:	bd80      	pop	{r7, pc}

08015752 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8015752:	b480      	push	{r7}
 8015754:	b083      	sub	sp, #12
 8015756:	af00      	add	r7, sp, #0
 8015758:	6078      	str	r0, [r7, #4]
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	4618      	mov	r0, r3
 801575e:	370c      	adds	r7, #12
 8015760:	46bd      	mov	sp, r7
 8015762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015766:	4770      	bx	lr

08015768 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8015768:	b480      	push	{r7}
 801576a:	b083      	sub	sp, #12
 801576c:	af00      	add	r7, sp, #0
 801576e:	6078      	str	r0, [r7, #4]
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	4618      	mov	r0, r3
 8015774:	370c      	adds	r7, #12
 8015776:	46bd      	mov	sp, r7
 8015778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801577c:	4770      	bx	lr

0801577e <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 801577e:	b580      	push	{r7, lr}
 8015780:	b082      	sub	sp, #8
 8015782:	af00      	add	r7, sp, #0
 8015784:	6078      	str	r0, [r7, #4]
 8015786:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8015788:	2200      	movs	r2, #0
 801578a:	6839      	ldr	r1, [r7, #0]
 801578c:	6878      	ldr	r0, [r7, #4]
 801578e:	f000 f881 	bl	8015894 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 8015792:	4603      	mov	r3, r0
 8015794:	4618      	mov	r0, r3
 8015796:	3708      	adds	r7, #8
 8015798:	46bd      	mov	sp, r7
 801579a:	bd80      	pop	{r7, pc}

0801579c <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 801579c:	b580      	push	{r7, lr}
 801579e:	b084      	sub	sp, #16
 80157a0:	af00      	add	r7, sp, #0
 80157a2:	60f8      	str	r0, [r7, #12]
 80157a4:	60b9      	str	r1, [r7, #8]
 80157a6:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 80157a8:	68b8      	ldr	r0, [r7, #8]
 80157aa:	f000 f8a1 	bl	80158f0 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>
 80157ae:	4602      	mov	r2, r0
 80157b0:	68fb      	ldr	r3, [r7, #12]
 80157b2:	601a      	str	r2, [r3, #0]
 80157b4:	68fb      	ldr	r3, [r7, #12]
 80157b6:	687a      	ldr	r2, [r7, #4]
 80157b8:	605a      	str	r2, [r3, #4]
      { }
 80157ba:	68fb      	ldr	r3, [r7, #12]
 80157bc:	4618      	mov	r0, r3
 80157be:	3710      	adds	r7, #16
 80157c0:	46bd      	mov	sp, r7
 80157c2:	bd80      	pop	{r7, pc}

080157c4 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80157c4:	b580      	push	{r7, lr}
 80157c6:	b084      	sub	sp, #16
 80157c8:	af00      	add	r7, sp, #0
 80157ca:	60f8      	str	r0, [r7, #12]
 80157cc:	60b9      	str	r1, [r7, #8]
 80157ce:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80157d0:	687a      	ldr	r2, [r7, #4]
 80157d2:	68b9      	ldr	r1, [r7, #8]
 80157d4:	68f8      	ldr	r0, [r7, #12]
 80157d6:	f000 f896 	bl	8015906 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>
 80157da:	bf00      	nop
 80157dc:	3710      	adds	r7, #16
 80157de:	46bd      	mov	sp, r7
 80157e0:	bd80      	pop	{r7, pc}

080157e2 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>:
    __to_address(_Tp* __ptr) noexcept
 80157e2:	b480      	push	{r7}
 80157e4:	b083      	sub	sp, #12
 80157e6:	af00      	add	r7, sp, #0
 80157e8:	6078      	str	r0, [r7, #4]
      return __ptr;
 80157ea:	687b      	ldr	r3, [r7, #4]
    }
 80157ec:	4618      	mov	r0, r3
 80157ee:	370c      	adds	r7, #12
 80157f0:	46bd      	mov	sp, r7
 80157f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157f6:	4770      	bx	lr

080157f8 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>:
	explicit _Impl(_Alloc __a) noexcept : _A_base(__a) { }
 80157f8:	b580      	push	{r7, lr}
 80157fa:	b082      	sub	sp, #8
 80157fc:	af00      	add	r7, sp, #0
 80157fe:	6078      	str	r0, [r7, #4]
 8015800:	7039      	strb	r1, [r7, #0]
 8015802:	463b      	mov	r3, r7
 8015804:	4619      	mov	r1, r3
 8015806:	6878      	ldr	r0, [r7, #4]
 8015808:	f7f7 fa1c 	bl	800cc44 <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EEC1ERKS0_>
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	4618      	mov	r0, r3
 8015810:	3708      	adds	r7, #8
 8015812:	46bd      	mov	sp, r7
 8015814:	bd80      	pop	{r7, pc}

08015816 <_ZNSt16allocator_traitsISaIvEE9constructI7TMC2209JRPKcRfRhRtS9_RbS9_EEEvRS0_PT_DpOT0_>:
	construct(allocator_type&, _Up* __p, _Args&&... __args)
 8015816:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801581a:	b088      	sub	sp, #32
 801581c:	af04      	add	r7, sp, #16
 801581e:	60f8      	str	r0, [r7, #12]
 8015820:	60b9      	str	r1, [r7, #8]
 8015822:	607a      	str	r2, [r7, #4]
 8015824:	603b      	str	r3, [r7, #0]
	{ std::_Construct(__p, std::forward<_Args>(__args)...); }
 8015826:	6878      	ldr	r0, [r7, #4]
 8015828:	f7f8 f92b 	bl	800da82 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 801582c:	4680      	mov	r8, r0
 801582e:	6838      	ldr	r0, [r7, #0]
 8015830:	f7fe f855 	bl	80138de <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8015834:	4681      	mov	r9, r0
 8015836:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015838:	f7ff fda6 	bl	8015388 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 801583c:	4682      	mov	sl, r0
 801583e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8015840:	f7fe f858 	bl	80138f4 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8015844:	4604      	mov	r4, r0
 8015846:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8015848:	f7fe f854 	bl	80138f4 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801584c:	4605      	mov	r5, r0
 801584e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8015850:	f7fa f8dd 	bl	800fa0e <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8015854:	4606      	mov	r6, r0
 8015856:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8015858:	f7fe f84c 	bl	80138f4 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801585c:	4603      	mov	r3, r0
 801585e:	9303      	str	r3, [sp, #12]
 8015860:	9602      	str	r6, [sp, #8]
 8015862:	9501      	str	r5, [sp, #4]
 8015864:	9400      	str	r4, [sp, #0]
 8015866:	4653      	mov	r3, sl
 8015868:	464a      	mov	r2, r9
 801586a:	4641      	mov	r1, r8
 801586c:	68b8      	ldr	r0, [r7, #8]
 801586e:	f000 f85b 	bl	8015928 <_ZSt10_ConstructI7TMC2209JRPKcRfRhRtS6_RbS6_EEvPT_DpOT0_>
 8015872:	bf00      	nop
 8015874:	3710      	adds	r7, #16
 8015876:	46bd      	mov	sp, r7
 8015878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801587c <_ZN9__gnu_cxx16__aligned_bufferI7TMC2209E6_M_ptrEv>:
      _M_ptr() noexcept
 801587c:	b580      	push	{r7, lr}
 801587e:	b082      	sub	sp, #8
 8015880:	af00      	add	r7, sp, #0
 8015882:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8015884:	6878      	ldr	r0, [r7, #4]
 8015886:	f000 f8ae 	bl	80159e6 <_ZN9__gnu_cxx16__aligned_bufferI7TMC2209E7_M_addrEv>
 801588a:	4603      	mov	r3, r0
 801588c:	4618      	mov	r0, r3
 801588e:	3708      	adds	r7, #8
 8015890:	46bd      	mov	sp, r7
 8015892:	bd80      	pop	{r7, pc}

08015894 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8015894:	b580      	push	{r7, lr}
 8015896:	b084      	sub	sp, #16
 8015898:	af00      	add	r7, sp, #0
 801589a:	60f8      	str	r0, [r7, #12]
 801589c:	60b9      	str	r1, [r7, #8]
 801589e:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80158a0:	68f8      	ldr	r0, [r7, #12]
 80158a2:	f000 f8ab 	bl	80159fc <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 80158a6:	4602      	mov	r2, r0
 80158a8:	68bb      	ldr	r3, [r7, #8]
 80158aa:	4293      	cmp	r3, r2
 80158ac:	bf8c      	ite	hi
 80158ae:	2301      	movhi	r3, #1
 80158b0:	2300      	movls	r3, #0
 80158b2:	b2db      	uxtb	r3, r3
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	bf14      	ite	ne
 80158b8:	2301      	movne	r3, #1
 80158ba:	2300      	moveq	r3, #0
 80158bc:	b2db      	uxtb	r3, r3
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d007      	beq.n	80158d2 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 80158c2:	68bb      	ldr	r3, [r7, #8]
 80158c4:	4a09      	ldr	r2, [pc, #36]	@ (80158ec <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x58>)
 80158c6:	4293      	cmp	r3, r2
 80158c8:	d901      	bls.n	80158ce <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 80158ca:	f00e fadf 	bl	8023e8c <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 80158ce:	f00e fada 	bl	8023e86 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80158d2:	68bb      	ldr	r3, [r7, #8]
 80158d4:	224c      	movs	r2, #76	@ 0x4c
 80158d6:	fb02 f303 	mul.w	r3, r2, r3
 80158da:	4618      	mov	r0, r3
 80158dc:	f00e fac0 	bl	8023e60 <_Znwj>
 80158e0:	4603      	mov	r3, r0
 80158e2:	bf00      	nop
      }
 80158e4:	4618      	mov	r0, r3
 80158e6:	3710      	adds	r7, #16
 80158e8:	46bd      	mov	sp, r7
 80158ea:	bd80      	pop	{r7, pc}
 80158ec:	035e50d7 	.word	0x035e50d7

080158f0 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80158f0:	b480      	push	{r7}
 80158f2:	b083      	sub	sp, #12
 80158f4:	af00      	add	r7, sp, #0
 80158f6:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	4618      	mov	r0, r3
 80158fc:	370c      	adds	r7, #12
 80158fe:	46bd      	mov	sp, r7
 8015900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015904:	4770      	bx	lr

08015906 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8015906:	b580      	push	{r7, lr}
 8015908:	b084      	sub	sp, #16
 801590a:	af00      	add	r7, sp, #0
 801590c:	60f8      	str	r0, [r7, #12]
 801590e:	60b9      	str	r1, [r7, #8]
 8015910:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	224c      	movs	r2, #76	@ 0x4c
 8015916:	fb02 f303 	mul.w	r3, r2, r3
 801591a:	4619      	mov	r1, r3
 801591c:	68b8      	ldr	r0, [r7, #8]
 801591e:	f00e fa8e 	bl	8023e3e <_ZdlPvj>
      }
 8015922:	3710      	adds	r7, #16
 8015924:	46bd      	mov	sp, r7
 8015926:	bd80      	pop	{r7, pc}

08015928 <_ZSt10_ConstructI7TMC2209JRPKcRfRhRtS6_RbS6_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8015928:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801592c:	ed2d 8b02 	vpush	{d8}
 8015930:	b091      	sub	sp, #68	@ 0x44
 8015932:	af04      	add	r7, sp, #16
 8015934:	60f8      	str	r0, [r7, #12]
 8015936:	60b9      	str	r1, [r7, #8]
 8015938:	607a      	str	r2, [r7, #4]
 801593a:	603b      	str	r3, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 801593c:	68fb      	ldr	r3, [r7, #12]
 801593e:	4619      	mov	r1, r3
 8015940:	2040      	movs	r0, #64	@ 0x40
 8015942:	f7f3 fedd 	bl	8009700 <_ZnwjPv>
 8015946:	4681      	mov	r9, r0
 8015948:	68b8      	ldr	r0, [r7, #8]
 801594a:	f7f8 f89a 	bl	800da82 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 801594e:	4603      	mov	r3, r0
 8015950:	681c      	ldr	r4, [r3, #0]
 8015952:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8015956:	4618      	mov	r0, r3
 8015958:	f00e fa93 	bl	8023e82 <_ZNSaIcEC1Ev>
 801595c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8015960:	f107 0314 	add.w	r3, r7, #20
 8015964:	4621      	mov	r1, r4
 8015966:	4618      	mov	r0, r3
 8015968:	f7f0 fe88 	bl	800667c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 801596c:	6878      	ldr	r0, [r7, #4]
 801596e:	f7fd ffb6 	bl	80138de <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8015972:	4603      	mov	r3, r0
 8015974:	ed93 8a00 	vldr	s16, [r3]
 8015978:	6838      	ldr	r0, [r7, #0]
 801597a:	f7ff fd05 	bl	8015388 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 801597e:	4603      	mov	r3, r0
 8015980:	781e      	ldrb	r6, [r3, #0]
 8015982:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8015984:	f7fd ffb6 	bl	80138f4 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8015988:	4603      	mov	r3, r0
 801598a:	f8b3 8000 	ldrh.w	r8, [r3]
 801598e:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8015990:	f7fd ffb0 	bl	80138f4 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8015994:	4603      	mov	r3, r0
 8015996:	881c      	ldrh	r4, [r3, #0]
 8015998:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 801599a:	f7fa f838 	bl	800fa0e <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 801599e:	4603      	mov	r3, r0
 80159a0:	781d      	ldrb	r5, [r3, #0]
 80159a2:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80159a4:	f7fd ffa6 	bl	80138f4 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80159a8:	4603      	mov	r3, r0
 80159aa:	881b      	ldrh	r3, [r3, #0]
 80159ac:	f107 0114 	add.w	r1, r7, #20
 80159b0:	9302      	str	r3, [sp, #8]
 80159b2:	9501      	str	r5, [sp, #4]
 80159b4:	9400      	str	r4, [sp, #0]
 80159b6:	4643      	mov	r3, r8
 80159b8:	4632      	mov	r2, r6
 80159ba:	eeb0 0a48 	vmov.f32	s0, s16
 80159be:	4648      	mov	r0, r9
 80159c0:	f7ff fb26 	bl	8015010 <_ZN7TMC2209C1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfhttbt>
 80159c4:	f107 0314 	add.w	r3, r7, #20
 80159c8:	4618      	mov	r0, r3
 80159ca:	f00e fb38 	bl	802403e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80159ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80159d2:	4618      	mov	r0, r3
 80159d4:	f00e fa56 	bl	8023e84 <_ZNSaIcED1Ev>
    }
 80159d8:	bf00      	nop
 80159da:	3734      	adds	r7, #52	@ 0x34
 80159dc:	46bd      	mov	sp, r7
 80159de:	ecbd 8b02 	vpop	{d8}
 80159e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080159e6 <_ZN9__gnu_cxx16__aligned_bufferI7TMC2209E7_M_addrEv>:
      _M_addr() noexcept
 80159e6:	b480      	push	{r7}
 80159e8:	b083      	sub	sp, #12
 80159ea:	af00      	add	r7, sp, #0
 80159ec:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 80159ee:	687b      	ldr	r3, [r7, #4]
      }
 80159f0:	4618      	mov	r0, r3
 80159f2:	370c      	adds	r7, #12
 80159f4:	46bd      	mov	sp, r7
 80159f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159fa:	4770      	bx	lr

080159fc <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80159fc:	b480      	push	{r7}
 80159fe:	b083      	sub	sp, #12
 8015a00:	af00      	add	r7, sp, #0
 8015a02:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8015a04:	4b03      	ldr	r3, [pc, #12]	@ (8015a14 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv+0x18>)
      }
 8015a06:	4618      	mov	r0, r3
 8015a08:	370c      	adds	r7, #12
 8015a0a:	46bd      	mov	sp, r7
 8015a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a10:	4770      	bx	lr
 8015a12:	bf00      	nop
 8015a14:	01af286b 	.word	0x01af286b

08015a18 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 8015a18:	b580      	push	{r7, lr}
 8015a1a:	b082      	sub	sp, #8
 8015a1c:	af00      	add	r7, sp, #0
 8015a1e:	6078      	str	r0, [r7, #4]
 8015a20:	4a05      	ldr	r2, [pc, #20]	@ (8015a38 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	601a      	str	r2, [r3, #0]
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	4618      	mov	r0, r3
 8015a2a:	f7f5 fb61 	bl	800b0f0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	4618      	mov	r0, r3
 8015a32:	3708      	adds	r7, #8
 8015a34:	46bd      	mov	sp, r7
 8015a36:	bd80      	pop	{r7, pc}
 8015a38:	08026950 	.word	0x08026950

08015a3c <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 8015a3c:	b580      	push	{r7, lr}
 8015a3e:	b082      	sub	sp, #8
 8015a40:	af00      	add	r7, sp, #0
 8015a42:	6078      	str	r0, [r7, #4]
 8015a44:	6878      	ldr	r0, [r7, #4]
 8015a46:	f7ff ffe7 	bl	8015a18 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8015a4a:	214c      	movs	r1, #76	@ 0x4c
 8015a4c:	6878      	ldr	r0, [r7, #4]
 8015a4e:	f00e f9f6 	bl	8023e3e <_ZdlPvj>
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	4618      	mov	r0, r3
 8015a56:	3708      	adds	r7, #8
 8015a58:	46bd      	mov	sp, r7
 8015a5a:	bd80      	pop	{r7, pc}

08015a5c <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8015a5c:	b590      	push	{r4, r7, lr}
 8015a5e:	b083      	sub	sp, #12
 8015a60:	af00      	add	r7, sp, #0
 8015a62:	6078      	str	r0, [r7, #4]
	allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	330c      	adds	r3, #12
 8015a68:	4618      	mov	r0, r3
 8015a6a:	f000 f856 	bl	8015b1a <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 8015a6e:	4604      	mov	r4, r0
 8015a70:	6878      	ldr	r0, [r7, #4]
 8015a72:	f7ff fe60 	bl	8015736 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8015a76:	4603      	mov	r3, r0
 8015a78:	4619      	mov	r1, r3
 8015a7a:	4620      	mov	r0, r4
 8015a7c:	f000 f859 	bl	8015b32 <_ZNSt16allocator_traitsISaIvEE7destroyI7TMC2209EEvRS0_PT_>
      }
 8015a80:	bf00      	nop
 8015a82:	370c      	adds	r7, #12
 8015a84:	46bd      	mov	sp, r7
 8015a86:	bd90      	pop	{r4, r7, pc}

08015a88 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8015a88:	b580      	push	{r7, lr}
 8015a8a:	b086      	sub	sp, #24
 8015a8c:	af00      	add	r7, sp, #0
 8015a8e:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	330c      	adds	r3, #12
 8015a94:	4618      	mov	r0, r3
 8015a96:	f000 f840 	bl	8015b1a <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 8015a9a:	4602      	mov	r2, r0
 8015a9c:	f107 0314 	add.w	r3, r7, #20
 8015aa0:	4611      	mov	r1, r2
 8015aa2:	4618      	mov	r0, r3
 8015aa4:	f7ff fd9e 	bl	80155e4 <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8015aa8:	f107 0114 	add.w	r1, r7, #20
 8015aac:	f107 030c 	add.w	r3, r7, #12
 8015ab0:	687a      	ldr	r2, [r7, #4]
 8015ab2:	4618      	mov	r0, r3
 8015ab4:	f7ff fe72 	bl	801579c <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
	this->~_Sp_counted_ptr_inplace();
 8015ab8:	6878      	ldr	r0, [r7, #4]
 8015aba:	f7ff ffad 	bl	8015a18 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 8015abe:	f107 030c 	add.w	r3, r7, #12
 8015ac2:	4618      	mov	r0, r3
 8015ac4:	f7ff fdba 	bl	801563c <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 8015ac8:	f107 0314 	add.w	r3, r7, #20
 8015acc:	4618      	mov	r0, r3
 8015ace:	f7ff fd96 	bl	80155fe <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8015ad2:	3718      	adds	r7, #24
 8015ad4:	46bd      	mov	sp, r7
 8015ad6:	bd80      	pop	{r7, pc}

08015ad8 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 8015ad8:	b580      	push	{r7, lr}
 8015ada:	b084      	sub	sp, #16
 8015adc:	af00      	add	r7, sp, #0
 8015ade:	6078      	str	r0, [r7, #4]
 8015ae0:	6039      	str	r1, [r7, #0]
	auto __ptr = const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());
 8015ae2:	6878      	ldr	r0, [r7, #4]
 8015ae4:	f7ff fe27 	bl	8015736 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8015ae8:	60f8      	str	r0, [r7, #12]
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 8015aea:	f7f3 fe55 	bl	8009798 <_ZNSt19_Sp_make_shared_tag5_S_tiEv>
 8015aee:	4602      	mov	r2, r0
	    ||
 8015af0:	683b      	ldr	r3, [r7, #0]
 8015af2:	4293      	cmp	r3, r2
 8015af4:	d005      	beq.n	8015b02 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 8015af6:	6838      	ldr	r0, [r7, #0]
 8015af8:	f00e f9de 	bl	8023eb8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
 8015afc:	4603      	mov	r3, r0
	    ||
 8015afe:	2b00      	cmp	r3, #0
 8015b00:	d001      	beq.n	8015b06 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2e>
 8015b02:	2301      	movs	r3, #1
 8015b04:	e000      	b.n	8015b08 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x30>
 8015b06:	2300      	movs	r3, #0
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 8015b08:	2b00      	cmp	r3, #0
 8015b0a:	d001      	beq.n	8015b10 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x38>
	  return __ptr;
 8015b0c:	68fb      	ldr	r3, [r7, #12]
 8015b0e:	e000      	b.n	8015b12 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x3a>
	return nullptr;
 8015b10:	2300      	movs	r3, #0
      }
 8015b12:	4618      	mov	r0, r3
 8015b14:	3710      	adds	r7, #16
 8015b16:	46bd      	mov	sp, r7
 8015b18:	bd80      	pop	{r7, pc}

08015b1a <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _A_base::_S_get(*this); }
 8015b1a:	b580      	push	{r7, lr}
 8015b1c:	b082      	sub	sp, #8
 8015b1e:	af00      	add	r7, sp, #0
 8015b20:	6078      	str	r0, [r7, #4]
 8015b22:	6878      	ldr	r0, [r7, #4]
 8015b24:	f7f7 facb 	bl	800d0be <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EE6_S_getERS1_>
 8015b28:	4603      	mov	r3, r0
 8015b2a:	4618      	mov	r0, r3
 8015b2c:	3708      	adds	r7, #8
 8015b2e:	46bd      	mov	sp, r7
 8015b30:	bd80      	pop	{r7, pc}

08015b32 <_ZNSt16allocator_traitsISaIvEE7destroyI7TMC2209EEvRS0_PT_>:
	destroy(allocator_type&, _Up* __p)
 8015b32:	b580      	push	{r7, lr}
 8015b34:	b082      	sub	sp, #8
 8015b36:	af00      	add	r7, sp, #0
 8015b38:	6078      	str	r0, [r7, #4]
 8015b3a:	6039      	str	r1, [r7, #0]
	{ std::_Destroy(__p); }
 8015b3c:	6838      	ldr	r0, [r7, #0]
 8015b3e:	f000 f804 	bl	8015b4a <_ZSt8_DestroyI7TMC2209EvPT_>
 8015b42:	bf00      	nop
 8015b44:	3708      	adds	r7, #8
 8015b46:	46bd      	mov	sp, r7
 8015b48:	bd80      	pop	{r7, pc}

08015b4a <_ZSt8_DestroyI7TMC2209EvPT_>:
    _Destroy(_Tp* __pointer)
 8015b4a:	b580      	push	{r7, lr}
 8015b4c:	b082      	sub	sp, #8
 8015b4e:	af00      	add	r7, sp, #0
 8015b50:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	681b      	ldr	r3, [r3, #0]
 8015b56:	681b      	ldr	r3, [r3, #0]
 8015b58:	6878      	ldr	r0, [r7, #4]
 8015b5a:	4798      	blx	r3
    }
 8015b5c:	bf00      	nop
 8015b5e:	3708      	adds	r7, #8
 8015b60:	46bd      	mov	sp, r7
 8015b62:	bd80      	pop	{r7, pc}

08015b64 <__NVIC_SetPriority>:
{
 8015b64:	b480      	push	{r7}
 8015b66:	b083      	sub	sp, #12
 8015b68:	af00      	add	r7, sp, #0
 8015b6a:	4603      	mov	r3, r0
 8015b6c:	6039      	str	r1, [r7, #0]
 8015b6e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8015b70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015b74:	2b00      	cmp	r3, #0
 8015b76:	db0a      	blt.n	8015b8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015b78:	683b      	ldr	r3, [r7, #0]
 8015b7a:	b2da      	uxtb	r2, r3
 8015b7c:	490c      	ldr	r1, [pc, #48]	@ (8015bb0 <__NVIC_SetPriority+0x4c>)
 8015b7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015b82:	0112      	lsls	r2, r2, #4
 8015b84:	b2d2      	uxtb	r2, r2
 8015b86:	440b      	add	r3, r1
 8015b88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8015b8c:	e00a      	b.n	8015ba4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015b8e:	683b      	ldr	r3, [r7, #0]
 8015b90:	b2da      	uxtb	r2, r3
 8015b92:	4908      	ldr	r1, [pc, #32]	@ (8015bb4 <__NVIC_SetPriority+0x50>)
 8015b94:	88fb      	ldrh	r3, [r7, #6]
 8015b96:	f003 030f 	and.w	r3, r3, #15
 8015b9a:	3b04      	subs	r3, #4
 8015b9c:	0112      	lsls	r2, r2, #4
 8015b9e:	b2d2      	uxtb	r2, r2
 8015ba0:	440b      	add	r3, r1
 8015ba2:	761a      	strb	r2, [r3, #24]
}
 8015ba4:	bf00      	nop
 8015ba6:	370c      	adds	r7, #12
 8015ba8:	46bd      	mov	sp, r7
 8015baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bae:	4770      	bx	lr
 8015bb0:	e000e100 	.word	0xe000e100
 8015bb4:	e000ed00 	.word	0xe000ed00

08015bb8 <_ZStanSt12memory_orderSt23__memory_order_modifier>:
    return memory_order(int(__m) | int(__mod));
  }

  constexpr memory_order
  operator&(memory_order __m, __memory_order_modifier __mod)
  {
 8015bb8:	b480      	push	{r7}
 8015bba:	b083      	sub	sp, #12
 8015bbc:	af00      	add	r7, sp, #0
 8015bbe:	4603      	mov	r3, r0
 8015bc0:	6039      	str	r1, [r7, #0]
 8015bc2:	71fb      	strb	r3, [r7, #7]
    return memory_order(int(__m) & int(__mod));
 8015bc4:	683b      	ldr	r3, [r7, #0]
 8015bc6:	b25a      	sxtb	r2, r3
 8015bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015bcc:	4013      	ands	r3, r2
 8015bce:	b25b      	sxtb	r3, r3
 8015bd0:	b2db      	uxtb	r3, r3
  }
 8015bd2:	4618      	mov	r0, r3
 8015bd4:	370c      	adds	r7, #12
 8015bd6:	46bd      	mov	sp, r7
 8015bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bdc:	4770      	bx	lr

08015bde <_ZNSt6atomicIbEC1Eb>:
    ~atomic() noexcept = default;
    atomic(const atomic&) = delete;
    atomic& operator=(const atomic&) = delete;
    atomic& operator=(const atomic&) volatile = delete;

    constexpr atomic(bool __i) noexcept : _M_base(__i) { }
 8015bde:	b580      	push	{r7, lr}
 8015be0:	b082      	sub	sp, #8
 8015be2:	af00      	add	r7, sp, #0
 8015be4:	6078      	str	r0, [r7, #4]
 8015be6:	460b      	mov	r3, r1
 8015be8:	70fb      	strb	r3, [r7, #3]
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	78fa      	ldrb	r2, [r7, #3]
 8015bee:	4611      	mov	r1, r2
 8015bf0:	4618      	mov	r0, r3
 8015bf2:	f000 fa96 	bl	8016122 <_ZNSt13__atomic_baseIbEC1Eb>
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	4618      	mov	r0, r3
 8015bfa:	3708      	adds	r7, #8
 8015bfc:	46bd      	mov	sp, r7
 8015bfe:	bd80      	pop	{r7, pc}

08015c00 <_ZNSt6atomicIbE5storeEbSt12memory_order>:
#if __cplusplus >= 201703L
    static constexpr bool is_always_lock_free = ATOMIC_BOOL_LOCK_FREE == 2;
#endif

    void
    store(bool __i, memory_order __m = memory_order_seq_cst) noexcept
 8015c00:	b580      	push	{r7, lr}
 8015c02:	b084      	sub	sp, #16
 8015c04:	af00      	add	r7, sp, #0
 8015c06:	6078      	str	r0, [r7, #4]
 8015c08:	460b      	mov	r3, r1
 8015c0a:	70fb      	strb	r3, [r7, #3]
 8015c0c:	4613      	mov	r3, r2
 8015c0e:	70bb      	strb	r3, [r7, #2]
    { _M_base.store(__i, __m); }
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	60fb      	str	r3, [r7, #12]
 8015c14:	78fb      	ldrb	r3, [r7, #3]
 8015c16:	72fb      	strb	r3, [r7, #11]
 8015c18:	78bb      	ldrb	r3, [r7, #2]
 8015c1a:	72bb      	strb	r3, [r7, #10]

      _GLIBCXX_ALWAYS_INLINE void
      store(__int_type __i, memory_order __m = memory_order_seq_cst) noexcept
      {
	memory_order __b __attribute__ ((__unused__))
	  = __m & __memory_order_mask;
 8015c1c:	7abb      	ldrb	r3, [r7, #10]
 8015c1e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8015c22:	4618      	mov	r0, r3
 8015c24:	f7ff ffc8 	bl	8015bb8 <_ZStanSt12memory_orderSt23__memory_order_modifier>
 8015c28:	4603      	mov	r3, r0
 8015c2a:	727b      	strb	r3, [r7, #9]
	__glibcxx_assert(__b != memory_order_acquire);
 8015c2c:	f7ee f8ce 	bl	8003dcc <_ZSt23__is_constant_evaluatedv>
 8015c30:	4603      	mov	r3, r0
 8015c32:	2b00      	cmp	r3, #0
 8015c34:	d004      	beq.n	8015c40 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x40>
 8015c36:	7a7b      	ldrb	r3, [r7, #9]
 8015c38:	2b02      	cmp	r3, #2
 8015c3a:	d101      	bne.n	8015c40 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x40>
 8015c3c:	2301      	movs	r3, #1
 8015c3e:	e000      	b.n	8015c42 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x42>
 8015c40:	2300      	movs	r3, #0
 8015c42:	2b00      	cmp	r3, #0
	__glibcxx_assert(__b != memory_order_acq_rel);
 8015c44:	f7ee f8c2 	bl	8003dcc <_ZSt23__is_constant_evaluatedv>
 8015c48:	4603      	mov	r3, r0
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	d004      	beq.n	8015c58 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x58>
 8015c4e:	7a7b      	ldrb	r3, [r7, #9]
 8015c50:	2b04      	cmp	r3, #4
 8015c52:	d101      	bne.n	8015c58 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x58>
 8015c54:	2301      	movs	r3, #1
 8015c56:	e000      	b.n	8015c5a <_ZNSt6atomicIbE5storeEbSt12memory_order+0x5a>
 8015c58:	2300      	movs	r3, #0
 8015c5a:	2b00      	cmp	r3, #0
	__glibcxx_assert(__b != memory_order_consume);
 8015c5c:	f7ee f8b6 	bl	8003dcc <_ZSt23__is_constant_evaluatedv>
 8015c60:	4603      	mov	r3, r0
 8015c62:	2b00      	cmp	r3, #0
 8015c64:	d004      	beq.n	8015c70 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x70>
 8015c66:	7a7b      	ldrb	r3, [r7, #9]
 8015c68:	2b01      	cmp	r3, #1
 8015c6a:	d101      	bne.n	8015c70 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x70>
 8015c6c:	2301      	movs	r3, #1
 8015c6e:	e000      	b.n	8015c72 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x72>
 8015c70:	2300      	movs	r3, #0
 8015c72:	2b00      	cmp	r3, #0

	__atomic_store_n(&_M_i, __i, int(__m));
 8015c74:	68fb      	ldr	r3, [r7, #12]
 8015c76:	7afa      	ldrb	r2, [r7, #11]
 8015c78:	f3bf 8f5b 	dmb	ish
 8015c7c:	701a      	strb	r2, [r3, #0]
 8015c7e:	f3bf 8f5b 	dmb	ish
      }
 8015c82:	bf00      	nop
 8015c84:	bf00      	nop
 8015c86:	3710      	adds	r7, #16
 8015c88:	46bd      	mov	sp, r7
 8015c8a:	bd80      	pop	{r7, pc}

08015c8c <_ZNKSt6atomicIbE4loadESt12memory_order>:
    void
    store(bool __i, memory_order __m = memory_order_seq_cst) volatile noexcept
    { _M_base.store(__i, __m); }

    bool
    load(memory_order __m = memory_order_seq_cst) const noexcept
 8015c8c:	b580      	push	{r7, lr}
 8015c8e:	b084      	sub	sp, #16
 8015c90:	af00      	add	r7, sp, #0
 8015c92:	6078      	str	r0, [r7, #4]
 8015c94:	460b      	mov	r3, r1
 8015c96:	70fb      	strb	r3, [r7, #3]
    { return _M_base.load(__m); }
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	60fb      	str	r3, [r7, #12]
 8015c9c:	78fb      	ldrb	r3, [r7, #3]
 8015c9e:	72fb      	strb	r3, [r7, #11]

      _GLIBCXX_ALWAYS_INLINE __int_type
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	memory_order __b __attribute__ ((__unused__))
	  = __m & __memory_order_mask;
 8015ca0:	7afb      	ldrb	r3, [r7, #11]
 8015ca2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8015ca6:	4618      	mov	r0, r3
 8015ca8:	f7ff ff86 	bl	8015bb8 <_ZStanSt12memory_orderSt23__memory_order_modifier>
 8015cac:	4603      	mov	r3, r0
 8015cae:	72bb      	strb	r3, [r7, #10]
	__glibcxx_assert(__b != memory_order_release);
 8015cb0:	f7ee f88c 	bl	8003dcc <_ZSt23__is_constant_evaluatedv>
 8015cb4:	4603      	mov	r3, r0
 8015cb6:	2b00      	cmp	r3, #0
 8015cb8:	d004      	beq.n	8015cc4 <_ZNKSt6atomicIbE4loadESt12memory_order+0x38>
 8015cba:	7abb      	ldrb	r3, [r7, #10]
 8015cbc:	2b03      	cmp	r3, #3
 8015cbe:	d101      	bne.n	8015cc4 <_ZNKSt6atomicIbE4loadESt12memory_order+0x38>
 8015cc0:	2301      	movs	r3, #1
 8015cc2:	e000      	b.n	8015cc6 <_ZNKSt6atomicIbE4loadESt12memory_order+0x3a>
 8015cc4:	2300      	movs	r3, #0
 8015cc6:	2b00      	cmp	r3, #0
	__glibcxx_assert(__b != memory_order_acq_rel);
 8015cc8:	f7ee f880 	bl	8003dcc <_ZSt23__is_constant_evaluatedv>
 8015ccc:	4603      	mov	r3, r0
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	d004      	beq.n	8015cdc <_ZNKSt6atomicIbE4loadESt12memory_order+0x50>
 8015cd2:	7abb      	ldrb	r3, [r7, #10]
 8015cd4:	2b04      	cmp	r3, #4
 8015cd6:	d101      	bne.n	8015cdc <_ZNKSt6atomicIbE4loadESt12memory_order+0x50>
 8015cd8:	2301      	movs	r3, #1
 8015cda:	e000      	b.n	8015cde <_ZNKSt6atomicIbE4loadESt12memory_order+0x52>
 8015cdc:	2300      	movs	r3, #0
 8015cde:	2b00      	cmp	r3, #0

	return __atomic_load_n(&_M_i, int(__m));
 8015ce0:	68fb      	ldr	r3, [r7, #12]
 8015ce2:	f3bf 8f5b 	dmb	ish
 8015ce6:	781b      	ldrb	r3, [r3, #0]
 8015ce8:	f3bf 8f5b 	dmb	ish
 8015cec:	b2db      	uxtb	r3, r3
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	bf14      	ite	ne
 8015cf2:	2301      	movne	r3, #1
 8015cf4:	2300      	moveq	r3, #0
 8015cf6:	b2db      	uxtb	r3, r3
 8015cf8:	4618      	mov	r0, r3
 8015cfa:	3710      	adds	r7, #16
 8015cfc:	46bd      	mov	sp, r7
 8015cfe:	bd80      	pop	{r7, pc}

08015d00 <_ZN9pruThread16setThreadRunningEb>:
    atomic<bool> threadPaused{false};

    vector<shared_ptr<Module>> modules;
    vector<shared_ptr<Module>> modulesPost;

    void setThreadRunning(bool val) { threadRunning.store(val, std::memory_order_release); }
 8015d00:	b580      	push	{r7, lr}
 8015d02:	b082      	sub	sp, #8
 8015d04:	af00      	add	r7, sp, #0
 8015d06:	6078      	str	r0, [r7, #4]
 8015d08:	460b      	mov	r3, r1
 8015d0a:	70fb      	strb	r3, [r7, #3]
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	3329      	adds	r3, #41	@ 0x29
 8015d10:	78f9      	ldrb	r1, [r7, #3]
 8015d12:	2203      	movs	r2, #3
 8015d14:	4618      	mov	r0, r3
 8015d16:	f7ff ff73 	bl	8015c00 <_ZNSt6atomicIbE5storeEbSt12memory_order>
 8015d1a:	bf00      	nop
 8015d1c:	3708      	adds	r7, #8
 8015d1e:	46bd      	mov	sp, r7
 8015d20:	bd80      	pop	{r7, pc}

08015d22 <_ZN9pruThread15setThreadPausedEb>:
    void setThreadPaused(bool val) { threadPaused.store(val, std::memory_order_release); }
 8015d22:	b580      	push	{r7, lr}
 8015d24:	b082      	sub	sp, #8
 8015d26:	af00      	add	r7, sp, #0
 8015d28:	6078      	str	r0, [r7, #4]
 8015d2a:	460b      	mov	r3, r1
 8015d2c:	70fb      	strb	r3, [r7, #3]
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	332a      	adds	r3, #42	@ 0x2a
 8015d32:	78f9      	ldrb	r1, [r7, #3]
 8015d34:	2203      	movs	r2, #3
 8015d36:	4618      	mov	r0, r3
 8015d38:	f7ff ff62 	bl	8015c00 <_ZNSt6atomicIbE5storeEbSt12memory_order>
 8015d3c:	bf00      	nop
 8015d3e:	3708      	adds	r7, #8
 8015d40:	46bd      	mov	sp, r7
 8015d42:	bd80      	pop	{r7, pc}

08015d44 <_ZNK9pruThread9isRunningEv>:

	bool registerModule(shared_ptr<Module> module);
	bool registerModulePost(shared_ptr<Module> module);
	bool unregisterModule(shared_ptr<Module> module);

    [[nodiscard]] bool isRunning() const { return threadRunning.load(std::memory_order_acquire);  }
 8015d44:	b580      	push	{r7, lr}
 8015d46:	b082      	sub	sp, #8
 8015d48:	af00      	add	r7, sp, #0
 8015d4a:	6078      	str	r0, [r7, #4]
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	3329      	adds	r3, #41	@ 0x29
 8015d50:	2102      	movs	r1, #2
 8015d52:	4618      	mov	r0, r3
 8015d54:	f7ff ff9a 	bl	8015c8c <_ZNKSt6atomicIbE4loadESt12memory_order>
 8015d58:	4603      	mov	r3, r0
 8015d5a:	4618      	mov	r0, r3
 8015d5c:	3708      	adds	r7, #8
 8015d5e:	46bd      	mov	sp, r7
 8015d60:	bd80      	pop	{r7, pc}

08015d62 <_ZNK9pruThread8isPausedEv>:
    [[nodiscard]] bool isPaused() const { return threadPaused.load(std::memory_order_acquire); }
 8015d62:	b580      	push	{r7, lr}
 8015d64:	b082      	sub	sp, #8
 8015d66:	af00      	add	r7, sp, #0
 8015d68:	6078      	str	r0, [r7, #4]
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	332a      	adds	r3, #42	@ 0x2a
 8015d6e:	2102      	movs	r1, #2
 8015d70:	4618      	mov	r0, r3
 8015d72:	f7ff ff8b 	bl	8015c8c <_ZNKSt6atomicIbE4loadESt12memory_order>
 8015d76:	4603      	mov	r3, r0
 8015d78:	4618      	mov	r0, r3
 8015d7a:	3708      	adds	r7, #8
 8015d7c:	46bd      	mov	sp, r7
 8015d7e:	bd80      	pop	{r7, pc}

08015d80 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EEC1Ev>:
      _Vector_base() = default;
 8015d80:	b580      	push	{r7, lr}
 8015d82:	b082      	sub	sp, #8
 8015d84:	af00      	add	r7, sp, #0
 8015d86:	6078      	str	r0, [r7, #4]
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	4618      	mov	r0, r3
 8015d8c:	f000 f9d9 	bl	8016142 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE12_Vector_implC1Ev>
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	4618      	mov	r0, r3
 8015d94:	3708      	adds	r7, #8
 8015d96:	46bd      	mov	sp, r7
 8015d98:	bd80      	pop	{r7, pc}

08015d9a <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EEC1Ev>:
      vector() = default;
 8015d9a:	b580      	push	{r7, lr}
 8015d9c:	b082      	sub	sp, #8
 8015d9e:	af00      	add	r7, sp, #0
 8015da0:	6078      	str	r0, [r7, #4]
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	4618      	mov	r0, r3
 8015da6:	f7ff ffeb 	bl	8015d80 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EEC1Ev>
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	4618      	mov	r0, r3
 8015dae:	3708      	adds	r7, #8
 8015db0:	46bd      	mov	sp, r7
 8015db2:	bd80      	pop	{r7, pc}

08015db4 <_ZN9pruThreadC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP11TIM_TypeDef9IRQn_Typemh>:

#include "pruThread.h"
#include "../modules/module.h"


pruThread::pruThread(const string& _name, TIM_TypeDef *_timer, IRQn_Type _irq, uint32_t _freq, uint8_t _prio)
 8015db4:	b580      	push	{r7, lr}
 8015db6:	b084      	sub	sp, #16
 8015db8:	af00      	add	r7, sp, #0
 8015dba:	60f8      	str	r0, [r7, #12]
 8015dbc:	60b9      	str	r1, [r7, #8]
 8015dbe:	607a      	str	r2, [r7, #4]
 8015dc0:	807b      	strh	r3, [r7, #2]
    : threadName(_name),
 8015dc2:	68fb      	ldr	r3, [r7, #12]
 8015dc4:	68b9      	ldr	r1, [r7, #8]
 8015dc6:	4618      	mov	r0, r3
 8015dc8:	f00e fa77 	bl	80242ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      timer(_timer),
 8015dcc:	68fb      	ldr	r3, [r7, #12]
 8015dce:	687a      	ldr	r2, [r7, #4]
 8015dd0:	619a      	str	r2, [r3, #24]
      irq(_irq),
 8015dd2:	68fb      	ldr	r3, [r7, #12]
 8015dd4:	887a      	ldrh	r2, [r7, #2]
 8015dd6:	839a      	strh	r2, [r3, #28]
      frequency(_freq),
 8015dd8:	68fb      	ldr	r3, [r7, #12]
 8015dda:	69ba      	ldr	r2, [r7, #24]
 8015ddc:	621a      	str	r2, [r3, #32]
	  hasModulesPost(false)
 8015dde:	68fb      	ldr	r3, [r7, #12]
 8015de0:	2200      	movs	r2, #0
 8015de2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8015de6:	68fb      	ldr	r3, [r7, #12]
 8015de8:	3329      	adds	r3, #41	@ 0x29
 8015dea:	2100      	movs	r1, #0
 8015dec:	4618      	mov	r0, r3
 8015dee:	f7ff fef6 	bl	8015bde <_ZNSt6atomicIbEC1Eb>
 8015df2:	68fb      	ldr	r3, [r7, #12]
 8015df4:	332a      	adds	r3, #42	@ 0x2a
 8015df6:	2100      	movs	r1, #0
 8015df8:	4618      	mov	r0, r3
 8015dfa:	f7ff fef0 	bl	8015bde <_ZNSt6atomicIbEC1Eb>
 8015dfe:	68fb      	ldr	r3, [r7, #12]
 8015e00:	332c      	adds	r3, #44	@ 0x2c
 8015e02:	4618      	mov	r0, r3
 8015e04:	f7ff ffc9 	bl	8015d9a <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EEC1Ev>
 8015e08:	68fb      	ldr	r3, [r7, #12]
 8015e0a:	3338      	adds	r3, #56	@ 0x38
 8015e0c:	4618      	mov	r0, r3
 8015e0e:	f7ff ffc4 	bl	8015d9a <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EEC1Ev>
{
	printf("Creating %s thread at %lu hz\n", threadName.c_str(), (unsigned long)frequency);
 8015e12:	68fb      	ldr	r3, [r7, #12]
 8015e14:	4618      	mov	r0, r3
 8015e16:	f00e fa23 	bl	8024260 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8015e1a:	4601      	mov	r1, r0
 8015e1c:	68fb      	ldr	r3, [r7, #12]
 8015e1e:	6a1b      	ldr	r3, [r3, #32]
 8015e20:	461a      	mov	r2, r3
 8015e22:	4808      	ldr	r0, [pc, #32]	@ (8015e44 <_ZN9pruThreadC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP11TIM_TypeDef9IRQn_Typemh+0x90>)
 8015e24:	f00e fde8 	bl	80249f8 <iprintf>
    NVIC_SetPriority(irq, _prio);
 8015e28:	68fb      	ldr	r3, [r7, #12]
 8015e2a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015e2e:	7f3a      	ldrb	r2, [r7, #28]
 8015e30:	4611      	mov	r1, r2
 8015e32:	4618      	mov	r0, r3
 8015e34:	f7ff fe96 	bl	8015b64 <__NVIC_SetPriority>
}
 8015e38:	68fb      	ldr	r3, [r7, #12]
 8015e3a:	4618      	mov	r0, r3
 8015e3c:	3710      	adds	r7, #16
 8015e3e:	46bd      	mov	sp, r7
 8015e40:	bd80      	pop	{r7, pc}
 8015e42:	bf00      	nop
 8015e44:	08026458 	.word	0x08026458

08015e48 <_ZN9pruThread14executeModulesEv>:


bool pruThread::executeModules() {
 8015e48:	b580      	push	{r7, lr}
 8015e4a:	b08a      	sub	sp, #40	@ 0x28
 8015e4c:	af00      	add	r7, sp, #0
 8015e4e:	6078      	str	r0, [r7, #4]
    for (const auto& module : modules) {
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	332c      	adds	r3, #44	@ 0x2c
 8015e54:	627b      	str	r3, [r7, #36]	@ 0x24
 8015e56:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015e58:	f000 f983 	bl	8016162 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>
 8015e5c:	4603      	mov	r3, r0
 8015e5e:	617b      	str	r3, [r7, #20]
 8015e60:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015e62:	f000 f98e 	bl	8016182 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 8015e66:	4603      	mov	r3, r0
 8015e68:	613b      	str	r3, [r7, #16]
 8015e6a:	e018      	b.n	8015e9e <_ZN9pruThread14executeModulesEv+0x56>
 8015e6c:	f107 0314 	add.w	r3, r7, #20
 8015e70:	4618      	mov	r0, r3
 8015e72:	f000 f9c0 	bl	80161f6 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>
 8015e76:	61b8      	str	r0, [r7, #24]
        if (module) {
 8015e78:	69bb      	ldr	r3, [r7, #24]
 8015e7a:	4618      	mov	r0, r3
 8015e7c:	f7f5 f904 	bl	800b088 <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 8015e80:	4603      	mov	r3, r0
 8015e82:	2b00      	cmp	r3, #0
 8015e84:	d006      	beq.n	8015e94 <_ZN9pruThread14executeModulesEv+0x4c>
            module->runModule();
 8015e86:	69b8      	ldr	r0, [r7, #24]
 8015e88:	f7f5 f90f 	bl	800b0aa <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8015e8c:	4603      	mov	r3, r0
 8015e8e:	4618      	mov	r0, r3
 8015e90:	f7fa fa6c 	bl	801036c <_ZN6Module9runModuleEv>
    for (const auto& module : modules) {
 8015e94:	f107 0314 	add.w	r3, r7, #20
 8015e98:	4618      	mov	r0, r3
 8015e9a:	f000 f99b 	bl	80161d4 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
 8015e9e:	f107 0210 	add.w	r2, r7, #16
 8015ea2:	f107 0314 	add.w	r3, r7, #20
 8015ea6:	4611      	mov	r1, r2
 8015ea8:	4618      	mov	r0, r3
 8015eaa:	f000 f97b 	bl	80161a4 <_ZN9__gnu_cxxneIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 8015eae:	4603      	mov	r3, r0
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d1db      	bne.n	8015e6c <_ZN9pruThread14executeModulesEv+0x24>
        }
    }

    if (hasModulesPost) {
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	d031      	beq.n	8015f22 <_ZN9pruThread14executeModulesEv+0xda>
		for (const auto& module : modulesPost) {
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	3338      	adds	r3, #56	@ 0x38
 8015ec2:	623b      	str	r3, [r7, #32]
 8015ec4:	6a38      	ldr	r0, [r7, #32]
 8015ec6:	f000 f94c 	bl	8016162 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>
 8015eca:	4603      	mov	r3, r0
 8015ecc:	60fb      	str	r3, [r7, #12]
 8015ece:	6a38      	ldr	r0, [r7, #32]
 8015ed0:	f000 f957 	bl	8016182 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 8015ed4:	4603      	mov	r3, r0
 8015ed6:	60bb      	str	r3, [r7, #8]
 8015ed8:	e018      	b.n	8015f0c <_ZN9pruThread14executeModulesEv+0xc4>
 8015eda:	f107 030c 	add.w	r3, r7, #12
 8015ede:	4618      	mov	r0, r3
 8015ee0:	f000 f989 	bl	80161f6 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>
 8015ee4:	61f8      	str	r0, [r7, #28]
			if (module) {
 8015ee6:	69fb      	ldr	r3, [r7, #28]
 8015ee8:	4618      	mov	r0, r3
 8015eea:	f7f5 f8cd 	bl	800b088 <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 8015eee:	4603      	mov	r3, r0
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	d006      	beq.n	8015f02 <_ZN9pruThread14executeModulesEv+0xba>
				module->runModule();
 8015ef4:	69f8      	ldr	r0, [r7, #28]
 8015ef6:	f7f5 f8d8 	bl	800b0aa <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8015efa:	4603      	mov	r3, r0
 8015efc:	4618      	mov	r0, r3
 8015efe:	f7fa fa35 	bl	801036c <_ZN6Module9runModuleEv>
		for (const auto& module : modulesPost) {
 8015f02:	f107 030c 	add.w	r3, r7, #12
 8015f06:	4618      	mov	r0, r3
 8015f08:	f000 f964 	bl	80161d4 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
 8015f0c:	f107 0208 	add.w	r2, r7, #8
 8015f10:	f107 030c 	add.w	r3, r7, #12
 8015f14:	4611      	mov	r1, r2
 8015f16:	4618      	mov	r0, r3
 8015f18:	f000 f944 	bl	80161a4 <_ZN9__gnu_cxxneIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 8015f1c:	4603      	mov	r3, r0
 8015f1e:	2b00      	cmp	r3, #0
 8015f20:	d1db      	bne.n	8015eda <_ZN9pruThread14executeModulesEv+0x92>
			}
		}
    }

    return true;
 8015f22:	2301      	movs	r3, #1
}
 8015f24:	4618      	mov	r0, r3
 8015f26:	3728      	adds	r7, #40	@ 0x28
 8015f28:	46bd      	mov	sp, r7
 8015f2a:	bd80      	pop	{r7, pc}

08015f2c <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE>:

bool pruThread::registerModule(shared_ptr<Module> module) {
 8015f2c:	b580      	push	{r7, lr}
 8015f2e:	b082      	sub	sp, #8
 8015f30:	af00      	add	r7, sp, #0
 8015f32:	6078      	str	r0, [r7, #4]
 8015f34:	6039      	str	r1, [r7, #0]
    if (!module) {
 8015f36:	683b      	ldr	r3, [r7, #0]
 8015f38:	4618      	mov	r0, r3
 8015f3a:	f7f5 f8a5 	bl	800b088 <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 8015f3e:	4603      	mov	r3, r0
 8015f40:	f083 0301 	eor.w	r3, r3, #1
 8015f44:	b2db      	uxtb	r3, r3
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	d001      	beq.n	8015f4e <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE+0x22>
        return false;
 8015f4a:	2300      	movs	r3, #0
 8015f4c:	e006      	b.n	8015f5c <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE+0x30>
    }
    modules.push_back(module);
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	332c      	adds	r3, #44	@ 0x2c
 8015f52:	6839      	ldr	r1, [r7, #0]
 8015f54:	4618      	mov	r0, r3
 8015f56:	f000 f95a 	bl	801620e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backERKS2_>
    return true;
 8015f5a:	2301      	movs	r3, #1
}
 8015f5c:	4618      	mov	r0, r3
 8015f5e:	3708      	adds	r7, #8
 8015f60:	46bd      	mov	sp, r7
 8015f62:	bd80      	pop	{r7, pc}

08015f64 <_ZN9pruThread18registerModulePostESt10shared_ptrI6ModuleE>:

bool pruThread::registerModulePost(shared_ptr<Module> module) {
 8015f64:	b580      	push	{r7, lr}
 8015f66:	b082      	sub	sp, #8
 8015f68:	af00      	add	r7, sp, #0
 8015f6a:	6078      	str	r0, [r7, #4]
 8015f6c:	6039      	str	r1, [r7, #0]
    if (!module) {
 8015f6e:	683b      	ldr	r3, [r7, #0]
 8015f70:	4618      	mov	r0, r3
 8015f72:	f7f5 f889 	bl	800b088 <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 8015f76:	4603      	mov	r3, r0
 8015f78:	f083 0301 	eor.w	r3, r3, #1
 8015f7c:	b2db      	uxtb	r3, r3
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	d001      	beq.n	8015f86 <_ZN9pruThread18registerModulePostESt10shared_ptrI6ModuleE+0x22>
        return false;
 8015f82:	2300      	movs	r3, #0
 8015f84:	e00a      	b.n	8015f9c <_ZN9pruThread18registerModulePostESt10shared_ptrI6ModuleE+0x38>
    }
    hasModulesPost = true;
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	2201      	movs	r2, #1
 8015f8a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    modulesPost.push_back(module);
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	3338      	adds	r3, #56	@ 0x38
 8015f92:	6839      	ldr	r1, [r7, #0]
 8015f94:	4618      	mov	r0, r3
 8015f96:	f000 f93a 	bl	801620e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backERKS2_>
    return true;
 8015f9a:	2301      	movs	r3, #1
}
 8015f9c:	4618      	mov	r0, r3
 8015f9e:	3708      	adds	r7, #8
 8015fa0:	46bd      	mov	sp, r7
 8015fa2:	bd80      	pop	{r7, pc}

08015fa4 <_ZZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEENKUlRKS2_E_clES4_>:
        return false;
    }

    // Use a lambda to compare the raw pointers inside the shared_ptrs
    auto iter = std::remove_if(modules.begin(), modules.end(),
        [&module](const std::shared_ptr<Module>& mod) {
 8015fa4:	b580      	push	{r7, lr}
 8015fa6:	b082      	sub	sp, #8
 8015fa8:	af00      	add	r7, sp, #0
 8015faa:	6078      	str	r0, [r7, #4]
 8015fac:	6039      	str	r1, [r7, #0]
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	681b      	ldr	r3, [r3, #0]
            return mod == module; // Compare shared_ptrs directly
 8015fb2:	4619      	mov	r1, r3
 8015fb4:	6838      	ldr	r0, [r7, #0]
 8015fb6:	f000 f950 	bl	801625a <_ZSteqI6ModuleS0_EbRKSt10shared_ptrIT_ERKS1_IT0_E>
 8015fba:	4603      	mov	r3, r0
        });
 8015fbc:	4618      	mov	r0, r3
 8015fbe:	3708      	adds	r7, #8
 8015fc0:	46bd      	mov	sp, r7
 8015fc2:	bd80      	pop	{r7, pc}

08015fc4 <_ZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleE>:
bool pruThread::unregisterModule(std::shared_ptr<Module> module) {
 8015fc4:	b590      	push	{r4, r7, lr}
 8015fc6:	b087      	sub	sp, #28
 8015fc8:	af00      	add	r7, sp, #0
 8015fca:	6078      	str	r0, [r7, #4]
 8015fcc:	6039      	str	r1, [r7, #0]
    if (!module) {
 8015fce:	683b      	ldr	r3, [r7, #0]
 8015fd0:	4618      	mov	r0, r3
 8015fd2:	f7f5 f859 	bl	800b088 <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 8015fd6:	4603      	mov	r3, r0
 8015fd8:	f083 0301 	eor.w	r3, r3, #1
 8015fdc:	b2db      	uxtb	r3, r3
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	d001      	beq.n	8015fe6 <_ZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleE+0x22>
        return false;
 8015fe2:	2300      	movs	r3, #0
 8015fe4:	e032      	b.n	801604c <_ZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleE+0x88>
    auto iter = std::remove_if(modules.begin(), modules.end(),
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	332c      	adds	r3, #44	@ 0x2c
 8015fea:	4618      	mov	r0, r3
 8015fec:	f000 f8b9 	bl	8016162 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>
 8015ff0:	4604      	mov	r4, r0
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	332c      	adds	r3, #44	@ 0x2c
 8015ff6:	4618      	mov	r0, r3
 8015ff8:	f000 f8c3 	bl	8016182 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 8015ffc:	4601      	mov	r1, r0
 8015ffe:	683b      	ldr	r3, [r7, #0]
 8016000:	461a      	mov	r2, r3
 8016002:	4620      	mov	r0, r4
 8016004:	f000 f941 	bl	801628a <_ZSt9remove_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEEZN9pruThread16unregisterModuleES4_EUlRKS4_E_ET_SE_SE_T0_>
 8016008:	4603      	mov	r3, r0
 801600a:	60bb      	str	r3, [r7, #8]

    modules.erase(iter, modules.end());
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	f103 042c 	add.w	r4, r3, #44	@ 0x2c
 8016012:	f107 0208 	add.w	r2, r7, #8
 8016016:	f107 030c 	add.w	r3, r7, #12
 801601a:	4611      	mov	r1, r2
 801601c:	4618      	mov	r0, r3
 801601e:	f000 f948 	bl	80162b2 <_ZN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1IPS3_vEERKNS0_IT_S8_EE>
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	332c      	adds	r3, #44	@ 0x2c
 8016026:	4618      	mov	r0, r3
 8016028:	f000 f8ab 	bl	8016182 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 801602c:	4603      	mov	r3, r0
 801602e:	617b      	str	r3, [r7, #20]
 8016030:	f107 0214 	add.w	r2, r7, #20
 8016034:	f107 0310 	add.w	r3, r7, #16
 8016038:	4611      	mov	r1, r2
 801603a:	4618      	mov	r0, r3
 801603c:	f000 f939 	bl	80162b2 <_ZN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1IPS3_vEERKNS0_IT_S8_EE>
 8016040:	693a      	ldr	r2, [r7, #16]
 8016042:	68f9      	ldr	r1, [r7, #12]
 8016044:	4620      	mov	r0, r4
 8016046:	f000 f945 	bl	80162d4 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS2_S4_EES9_>
    return true;
 801604a:	2301      	movs	r3, #1
}
 801604c:	4618      	mov	r0, r3
 801604e:	371c      	adds	r7, #28
 8016050:	46bd      	mov	sp, r7
 8016052:	bd90      	pop	{r4, r7, pc}

08016054 <_ZN9pruThread11startThreadEv>:

// For baremetal, this is just initialization
bool pruThread::startThread() {
 8016054:	b590      	push	{r4, r7, lr}
 8016056:	b085      	sub	sp, #20
 8016058:	af02      	add	r7, sp, #8
 801605a:	6078      	str	r0, [r7, #4]
    if (isRunning()) {
 801605c:	6878      	ldr	r0, [r7, #4]
 801605e:	f7ff fe71 	bl	8015d44 <_ZNK9pruThread9isRunningEv>
 8016062:	4603      	mov	r3, r0
 8016064:	2b00      	cmp	r3, #0
 8016066:	d001      	beq.n	801606c <_ZN9pruThread11startThreadEv+0x18>
        return true;
 8016068:	2301      	movs	r3, #1
 801606a:	e01c      	b.n	80160a6 <_ZN9pruThread11startThreadEv+0x52>
    }

    setThreadRunning(true);
 801606c:	2101      	movs	r1, #1
 801606e:	6878      	ldr	r0, [r7, #4]
 8016070:	f7ff fe46 	bl	8015d00 <_ZN9pruThread16setThreadRunningEb>
    setThreadPaused(false);
 8016074:	2100      	movs	r1, #0
 8016076:	6878      	ldr	r0, [r7, #4]
 8016078:	f7ff fe53 	bl	8015d22 <_ZN9pruThread15setThreadPausedEb>

    timerPtr = new pruTimer(timer, irq, frequency, this);
 801607c:	2014      	movs	r0, #20
 801607e:	f00d feef 	bl	8023e60 <_Znwj>
 8016082:	4603      	mov	r3, r0
 8016084:	461c      	mov	r4, r3
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	6999      	ldr	r1, [r3, #24]
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	6a18      	ldr	r0, [r3, #32]
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	9300      	str	r3, [sp, #0]
 8016098:	4603      	mov	r3, r0
 801609a:	4620      	mov	r0, r4
 801609c:	f001 f808 	bl	80170b0 <_ZN8pruTimerC1EP11TIM_TypeDef9IRQn_TypemP9pruThread>
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	625c      	str	r4, [r3, #36]	@ 0x24
    return true;
 80160a4:	2301      	movs	r3, #1
}
 80160a6:	4618      	mov	r0, r3
 80160a8:	370c      	adds	r7, #12
 80160aa:	46bd      	mov	sp, r7
 80160ac:	bd90      	pop	{r4, r7, pc}

080160ae <_ZN9pruThread10stopThreadEv>:

void pruThread::stopThread() {
 80160ae:	b580      	push	{r7, lr}
 80160b0:	b082      	sub	sp, #8
 80160b2:	af00      	add	r7, sp, #0
 80160b4:	6078      	str	r0, [r7, #4]
    setThreadRunning(false);
 80160b6:	2100      	movs	r1, #0
 80160b8:	6878      	ldr	r0, [r7, #4]
 80160ba:	f7ff fe21 	bl	8015d00 <_ZN9pruThread16setThreadRunningEb>
    setThreadPaused(false);
 80160be:	2100      	movs	r1, #0
 80160c0:	6878      	ldr	r0, [r7, #4]
 80160c2:	f7ff fe2e 	bl	8015d22 <_ZN9pruThread15setThreadPausedEb>
}
 80160c6:	bf00      	nop
 80160c8:	3708      	adds	r7, #8
 80160ca:	46bd      	mov	sp, r7
 80160cc:	bd80      	pop	{r7, pc}

080160ce <_ZN9pruThread6updateEv>:

// This is the main function that should be called periodically
bool pruThread::update() {
 80160ce:	b580      	push	{r7, lr}
 80160d0:	b082      	sub	sp, #8
 80160d2:	af00      	add	r7, sp, #0
 80160d4:	6078      	str	r0, [r7, #4]
    if (!isRunning() || isPaused()) {
 80160d6:	6878      	ldr	r0, [r7, #4]
 80160d8:	f7ff fe34 	bl	8015d44 <_ZNK9pruThread9isRunningEv>
 80160dc:	4603      	mov	r3, r0
 80160de:	f083 0301 	eor.w	r3, r3, #1
 80160e2:	b2db      	uxtb	r3, r3
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	d105      	bne.n	80160f4 <_ZN9pruThread6updateEv+0x26>
 80160e8:	6878      	ldr	r0, [r7, #4]
 80160ea:	f7ff fe3a 	bl	8015d62 <_ZNK9pruThread8isPausedEv>
 80160ee:	4603      	mov	r3, r0
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	d001      	beq.n	80160f8 <_ZN9pruThread6updateEv+0x2a>
 80160f4:	2301      	movs	r3, #1
 80160f6:	e000      	b.n	80160fa <_ZN9pruThread6updateEv+0x2c>
 80160f8:	2300      	movs	r3, #0
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d001      	beq.n	8016102 <_ZN9pruThread6updateEv+0x34>
        return true;
 80160fe:	2301      	movs	r3, #1
 8016100:	e00b      	b.n	801611a <_ZN9pruThread6updateEv+0x4c>
    }

    // Execute all modules
    if (!executeModules()) {
 8016102:	6878      	ldr	r0, [r7, #4]
 8016104:	f7ff fea0 	bl	8015e48 <_ZN9pruThread14executeModulesEv>
 8016108:	4603      	mov	r3, r0
 801610a:	f083 0301 	eor.w	r3, r3, #1
 801610e:	b2db      	uxtb	r3, r3
 8016110:	2b00      	cmp	r3, #0
 8016112:	d001      	beq.n	8016118 <_ZN9pruThread6updateEv+0x4a>
        return false;
 8016114:	2300      	movs	r3, #0
 8016116:	e000      	b.n	801611a <_ZN9pruThread6updateEv+0x4c>
    }

    return true;
 8016118:	2301      	movs	r3, #1
}
 801611a:	4618      	mov	r0, r3
 801611c:	3708      	adds	r7, #8
 801611e:	46bd      	mov	sp, r7
 8016120:	bd80      	pop	{r7, pc}

08016122 <_ZNSt13__atomic_baseIbEC1Eb>:
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8016122:	b480      	push	{r7}
 8016124:	b083      	sub	sp, #12
 8016126:	af00      	add	r7, sp, #0
 8016128:	6078      	str	r0, [r7, #4]
 801612a:	460b      	mov	r3, r1
 801612c:	70fb      	strb	r3, [r7, #3]
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	78fa      	ldrb	r2, [r7, #3]
 8016132:	701a      	strb	r2, [r3, #0]
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	4618      	mov	r0, r3
 8016138:	370c      	adds	r7, #12
 801613a:	46bd      	mov	sp, r7
 801613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016140:	4770      	bx	lr

08016142 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8016142:	b580      	push	{r7, lr}
 8016144:	b082      	sub	sp, #8
 8016146:	af00      	add	r7, sp, #0
 8016148:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 801614a:	6878      	ldr	r0, [r7, #4]
 801614c:	f000 f8fb 	bl	8016346 <_ZNSaISt10shared_ptrI6ModuleEEC1Ev>
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	4618      	mov	r0, r3
 8016154:	f000 f903 	bl	801635e <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE17_Vector_impl_dataC1Ev>
	{ }
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	4618      	mov	r0, r3
 801615c:	3708      	adds	r7, #8
 801615e:	46bd      	mov	sp, r7
 8016160:	bd80      	pop	{r7, pc}

08016162 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      begin() _GLIBCXX_NOEXCEPT
 8016162:	b580      	push	{r7, lr}
 8016164:	b084      	sub	sp, #16
 8016166:	af00      	add	r7, sp, #0
 8016168:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 801616a:	687a      	ldr	r2, [r7, #4]
 801616c:	f107 030c 	add.w	r3, r7, #12
 8016170:	4611      	mov	r1, r2
 8016172:	4618      	mov	r0, r3
 8016174:	f000 f907 	bl	8016386 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 8016178:	68fb      	ldr	r3, [r7, #12]
 801617a:	4618      	mov	r0, r3
 801617c:	3710      	adds	r7, #16
 801617e:	46bd      	mov	sp, r7
 8016180:	bd80      	pop	{r7, pc}

08016182 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      end() _GLIBCXX_NOEXCEPT
 8016182:	b580      	push	{r7, lr}
 8016184:	b084      	sub	sp, #16
 8016186:	af00      	add	r7, sp, #0
 8016188:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	1d1a      	adds	r2, r3, #4
 801618e:	f107 030c 	add.w	r3, r7, #12
 8016192:	4611      	mov	r1, r2
 8016194:	4618      	mov	r0, r3
 8016196:	f000 f8f6 	bl	8016386 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 801619a:	68fb      	ldr	r3, [r7, #12]
 801619c:	4618      	mov	r0, r3
 801619e:	3710      	adds	r7, #16
 80161a0:	46bd      	mov	sp, r7
 80161a2:	bd80      	pop	{r7, pc}

080161a4 <_ZN9__gnu_cxxneIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 80161a4:	b590      	push	{r4, r7, lr}
 80161a6:	b083      	sub	sp, #12
 80161a8:	af00      	add	r7, sp, #0
 80161aa:	6078      	str	r0, [r7, #4]
 80161ac:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 80161ae:	6878      	ldr	r0, [r7, #4]
 80161b0:	f000 f8f9 	bl	80163a6 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 80161b4:	4603      	mov	r3, r0
 80161b6:	681c      	ldr	r4, [r3, #0]
 80161b8:	6838      	ldr	r0, [r7, #0]
 80161ba:	f000 f8f4 	bl	80163a6 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 80161be:	4603      	mov	r3, r0
 80161c0:	681b      	ldr	r3, [r3, #0]
 80161c2:	429c      	cmp	r4, r3
 80161c4:	bf14      	ite	ne
 80161c6:	2301      	movne	r3, #1
 80161c8:	2300      	moveq	r3, #0
 80161ca:	b2db      	uxtb	r3, r3
 80161cc:	4618      	mov	r0, r3
 80161ce:	370c      	adds	r7, #12
 80161d0:	46bd      	mov	sp, r7
 80161d2:	bd90      	pop	{r4, r7, pc}

080161d4 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80161d4:	b480      	push	{r7}
 80161d6:	b083      	sub	sp, #12
 80161d8:	af00      	add	r7, sp, #0
 80161da:	6078      	str	r0, [r7, #4]
	++_M_current;
 80161dc:	687b      	ldr	r3, [r7, #4]
 80161de:	681b      	ldr	r3, [r3, #0]
 80161e0:	f103 0208 	add.w	r2, r3, #8
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	601a      	str	r2, [r3, #0]
	return *this;
 80161e8:	687b      	ldr	r3, [r7, #4]
      }
 80161ea:	4618      	mov	r0, r3
 80161ec:	370c      	adds	r7, #12
 80161ee:	46bd      	mov	sp, r7
 80161f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161f4:	4770      	bx	lr

080161f6 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80161f6:	b480      	push	{r7}
 80161f8:	b083      	sub	sp, #12
 80161fa:	af00      	add	r7, sp, #0
 80161fc:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	681b      	ldr	r3, [r3, #0]
 8016202:	4618      	mov	r0, r3
 8016204:	370c      	adds	r7, #12
 8016206:	46bd      	mov	sp, r7
 8016208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801620c:	4770      	bx	lr

0801620e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backERKS2_>:
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      _GLIBCXX20_CONSTEXPR
      void
      push_back(const value_type& __x)
 801620e:	b580      	push	{r7, lr}
 8016210:	b082      	sub	sp, #8
 8016212:	af00      	add	r7, sp, #0
 8016214:	6078      	str	r0, [r7, #4]
 8016216:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	685a      	ldr	r2, [r3, #4]
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	689b      	ldr	r3, [r3, #8]
 8016220:	429a      	cmp	r2, r3
 8016222:	d00d      	beq.n	8016240 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backERKS2_+0x32>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8016224:	6878      	ldr	r0, [r7, #4]
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	685b      	ldr	r3, [r3, #4]
 801622a:	683a      	ldr	r2, [r7, #0]
 801622c:	4619      	mov	r1, r3
 801622e:	f000 f8c5 	bl	80163bc <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	685b      	ldr	r3, [r3, #4]
 8016236:	f103 0208 	add.w	r2, r3, #8
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 801623e:	e008      	b.n	8016252 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backERKS2_+0x44>
	  _M_realloc_insert(end(), __x);
 8016240:	6878      	ldr	r0, [r7, #4]
 8016242:	f7ff ff9e 	bl	8016182 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 8016246:	4603      	mov	r3, r0
 8016248:	683a      	ldr	r2, [r7, #0]
 801624a:	4619      	mov	r1, r3
 801624c:	6878      	ldr	r0, [r7, #4]
 801624e:	f000 f8c9 	bl	80163e4 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
      }
 8016252:	bf00      	nop
 8016254:	3708      	adds	r7, #8
 8016256:	46bd      	mov	sp, r7
 8016258:	bd80      	pop	{r7, pc}

0801625a <_ZSteqI6ModuleS0_EbRKSt10shared_ptrIT_ERKS1_IT0_E>:
    operator==(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept
 801625a:	b590      	push	{r4, r7, lr}
 801625c:	b083      	sub	sp, #12
 801625e:	af00      	add	r7, sp, #0
 8016260:	6078      	str	r0, [r7, #4]
 8016262:	6039      	str	r1, [r7, #0]
    { return __a.get() == __b.get(); }
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	4618      	mov	r0, r3
 8016268:	f7f5 fe0d 	bl	800be86 <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 801626c:	4604      	mov	r4, r0
 801626e:	683b      	ldr	r3, [r7, #0]
 8016270:	4618      	mov	r0, r3
 8016272:	f7f5 fe08 	bl	800be86 <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8016276:	4603      	mov	r3, r0
 8016278:	429c      	cmp	r4, r3
 801627a:	bf0c      	ite	eq
 801627c:	2301      	moveq	r3, #1
 801627e:	2300      	movne	r3, #0
 8016280:	b2db      	uxtb	r3, r3
 8016282:	4618      	mov	r0, r3
 8016284:	370c      	adds	r7, #12
 8016286:	46bd      	mov	sp, r7
 8016288:	bd90      	pop	{r4, r7, pc}

0801628a <_ZSt9remove_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEEZN9pruThread16unregisterModuleES4_EUlRKS4_E_ET_SE_SE_T0_>:
   *  are still present, but their value is unspecified.
  */
  template<typename _ForwardIterator, typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    remove_if(_ForwardIterator __first, _ForwardIterator __last,
 801628a:	b580      	push	{r7, lr}
 801628c:	b084      	sub	sp, #16
 801628e:	af00      	add	r7, sp, #0
 8016290:	60f8      	str	r0, [r7, #12]
 8016292:	60b9      	str	r1, [r7, #8]
 8016294:	607a      	str	r2, [r7, #4]
				  _ForwardIterator>)
      __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
	    typename iterator_traits<_ForwardIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return std::__remove_if(__first, __last,
 8016296:	6878      	ldr	r0, [r7, #4]
 8016298:	f000 f920 	bl	80164dc <_ZN9__gnu_cxx5__ops11__pred_iterIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EENS0_10_Iter_predIT_EESA_>
 801629c:	4603      	mov	r3, r0
 801629e:	461a      	mov	r2, r3
 80162a0:	68b9      	ldr	r1, [r7, #8]
 80162a2:	68f8      	ldr	r0, [r7, #12]
 80162a4:	f000 f92e 	bl	8016504 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_>
 80162a8:	4603      	mov	r3, r0
			      __gnu_cxx::__ops::__pred_iter(__pred));
    }
 80162aa:	4618      	mov	r0, r3
 80162ac:	3710      	adds	r7, #16
 80162ae:	46bd      	mov	sp, r7
 80162b0:	bd80      	pop	{r7, pc}

080162b2 <_ZN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1IPS3_vEERKNS0_IT_S8_EE>:
	__normal_iterator(const __normal_iterator<_Iter, _Container>& __i)
 80162b2:	b580      	push	{r7, lr}
 80162b4:	b082      	sub	sp, #8
 80162b6:	af00      	add	r7, sp, #0
 80162b8:	6078      	str	r0, [r7, #4]
 80162ba:	6039      	str	r1, [r7, #0]
        : _M_current(__i.base()) { }
 80162bc:	6838      	ldr	r0, [r7, #0]
 80162be:	f000 f872 	bl	80163a6 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 80162c2:	4603      	mov	r3, r0
 80162c4:	681a      	ldr	r2, [r3, #0]
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	601a      	str	r2, [r3, #0]
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	4618      	mov	r0, r3
 80162ce:	3708      	adds	r7, #8
 80162d0:	46bd      	mov	sp, r7
 80162d2:	bd80      	pop	{r7, pc}

080162d4 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS2_S4_EES9_>:
       *  Managing the pointer is the user's responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      iterator
#if __cplusplus >= 201103L
      erase(const_iterator __first, const_iterator __last)
 80162d4:	b590      	push	{r4, r7, lr}
 80162d6:	b087      	sub	sp, #28
 80162d8:	af00      	add	r7, sp, #0
 80162da:	60f8      	str	r0, [r7, #12]
 80162dc:	60b9      	str	r1, [r7, #8]
 80162de:	607a      	str	r2, [r7, #4]
      {
	const auto __beg = begin();
 80162e0:	68f8      	ldr	r0, [r7, #12]
 80162e2:	f7ff ff3e 	bl	8016162 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>
 80162e6:	4603      	mov	r3, r0
 80162e8:	617b      	str	r3, [r7, #20]
	const auto __cbeg = cbegin();
 80162ea:	68f8      	ldr	r0, [r7, #12]
 80162ec:	f000 f965 	bl	80165ba <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE6cbeginEv>
 80162f0:	4603      	mov	r3, r0
 80162f2:	613b      	str	r3, [r7, #16]
	return _M_erase(__beg + (__first - __cbeg), __beg + (__last - __cbeg));
 80162f4:	f107 0210 	add.w	r2, r7, #16
 80162f8:	f107 0308 	add.w	r3, r7, #8
 80162fc:	4611      	mov	r1, r2
 80162fe:	4618      	mov	r0, r3
 8016300:	f000 f96b 	bl	80165da <_ZN9__gnu_cxxmiIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 8016304:	4602      	mov	r2, r0
 8016306:	f107 0314 	add.w	r3, r7, #20
 801630a:	4611      	mov	r1, r2
 801630c:	4618      	mov	r0, r3
 801630e:	f000 f979 	bl	8016604 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEplEi>
 8016312:	4604      	mov	r4, r0
 8016314:	f107 0210 	add.w	r2, r7, #16
 8016318:	1d3b      	adds	r3, r7, #4
 801631a:	4611      	mov	r1, r2
 801631c:	4618      	mov	r0, r3
 801631e:	f000 f95c 	bl	80165da <_ZN9__gnu_cxxmiIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 8016322:	4602      	mov	r2, r0
 8016324:	f107 0314 	add.w	r3, r7, #20
 8016328:	4611      	mov	r1, r2
 801632a:	4618      	mov	r0, r3
 801632c:	f000 f96a 	bl	8016604 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEplEi>
 8016330:	4603      	mov	r3, r0
 8016332:	461a      	mov	r2, r3
 8016334:	4621      	mov	r1, r4
 8016336:	68f8      	ldr	r0, [r7, #12]
 8016338:	f000 f97c 	bl	8016634 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS2_S4_EES8_>
 801633c:	4603      	mov	r3, r0
      }
 801633e:	4618      	mov	r0, r3
 8016340:	371c      	adds	r7, #28
 8016342:	46bd      	mov	sp, r7
 8016344:	bd90      	pop	{r4, r7, pc}

08016346 <_ZNSaISt10shared_ptrI6ModuleEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8016346:	b580      	push	{r7, lr}
 8016348:	b082      	sub	sp, #8
 801634a:	af00      	add	r7, sp, #0
 801634c:	6078      	str	r0, [r7, #4]
 801634e:	6878      	ldr	r0, [r7, #4]
 8016350:	f000 f9b7 	bl	80166c2 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEEC1Ev>
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	4618      	mov	r0, r3
 8016358:	3708      	adds	r7, #8
 801635a:	46bd      	mov	sp, r7
 801635c:	bd80      	pop	{r7, pc}

0801635e <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 801635e:	b480      	push	{r7}
 8016360:	b083      	sub	sp, #12
 8016362:	af00      	add	r7, sp, #0
 8016364:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	2200      	movs	r2, #0
 801636a:	601a      	str	r2, [r3, #0]
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	2200      	movs	r2, #0
 8016370:	605a      	str	r2, [r3, #4]
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	2200      	movs	r2, #0
 8016376:	609a      	str	r2, [r3, #8]
	{ }
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	4618      	mov	r0, r3
 801637c:	370c      	adds	r7, #12
 801637e:	46bd      	mov	sp, r7
 8016380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016384:	4770      	bx	lr

08016386 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8016386:	b480      	push	{r7}
 8016388:	b083      	sub	sp, #12
 801638a:	af00      	add	r7, sp, #0
 801638c:	6078      	str	r0, [r7, #4]
 801638e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8016390:	683b      	ldr	r3, [r7, #0]
 8016392:	681a      	ldr	r2, [r3, #0]
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	601a      	str	r2, [r3, #0]
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	4618      	mov	r0, r3
 801639c:	370c      	adds	r7, #12
 801639e:	46bd      	mov	sp, r7
 80163a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163a4:	4770      	bx	lr

080163a6 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80163a6:	b480      	push	{r7}
 80163a8:	b083      	sub	sp, #12
 80163aa:	af00      	add	r7, sp, #0
 80163ac:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	4618      	mov	r0, r3
 80163b2:	370c      	adds	r7, #12
 80163b4:	46bd      	mov	sp, r7
 80163b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163ba:	4770      	bx	lr

080163bc <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80163bc:	b580      	push	{r7, lr}
 80163be:	b084      	sub	sp, #16
 80163c0:	af00      	add	r7, sp, #0
 80163c2:	60f8      	str	r0, [r7, #12]
 80163c4:	60b9      	str	r1, [r7, #8]
 80163c6:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80163c8:	6878      	ldr	r0, [r7, #4]
 80163ca:	f000 f985 	bl	80166d8 <_ZSt7forwardIRKSt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS5_E4typeE>
 80163ce:	4603      	mov	r3, r0
 80163d0:	461a      	mov	r2, r3
 80163d2:	68b9      	ldr	r1, [r7, #8]
 80163d4:	68f8      	ldr	r0, [r7, #12]
 80163d6:	f000 f98a 	bl	80166ee <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE9constructIS2_JRKS2_EEEvPT_DpOT0_>
	}
 80163da:	bf00      	nop
 80163dc:	3710      	adds	r7, #16
 80163de:	46bd      	mov	sp, r7
 80163e0:	bd80      	pop	{r7, pc}
	...

080163e4 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 80163e4:	b5b0      	push	{r4, r5, r7, lr}
 80163e6:	b08c      	sub	sp, #48	@ 0x30
 80163e8:	af00      	add	r7, sp, #0
 80163ea:	60f8      	str	r0, [r7, #12]
 80163ec:	60b9      	str	r1, [r7, #8]
 80163ee:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80163f0:	4a39      	ldr	r2, [pc, #228]	@ (80164d8 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xf4>)
 80163f2:	2101      	movs	r1, #1
 80163f4:	68f8      	ldr	r0, [r7, #12]
 80163f6:	f000 f992 	bl	801671e <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc>
 80163fa:	62f8      	str	r0, [r7, #44]	@ 0x2c
      pointer __old_start = this->_M_impl._M_start;
 80163fc:	68fb      	ldr	r3, [r7, #12]
 80163fe:	681b      	ldr	r3, [r3, #0]
 8016400:	62bb      	str	r3, [r7, #40]	@ 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8016402:	68fb      	ldr	r3, [r7, #12]
 8016404:	685b      	ldr	r3, [r3, #4]
 8016406:	627b      	str	r3, [r7, #36]	@ 0x24
      const size_type __elems_before = __position - begin();
 8016408:	68f8      	ldr	r0, [r7, #12]
 801640a:	f7ff feaa 	bl	8016162 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>
 801640e:	4603      	mov	r3, r0
 8016410:	617b      	str	r3, [r7, #20]
 8016412:	f107 0214 	add.w	r2, r7, #20
 8016416:	f107 0308 	add.w	r3, r7, #8
 801641a:	4611      	mov	r1, r2
 801641c:	4618      	mov	r0, r3
 801641e:	f000 f9c5 	bl	80167ac <_ZN9__gnu_cxxmiIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 8016422:	4603      	mov	r3, r0
 8016424:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8016426:	68fb      	ldr	r3, [r7, #12]
 8016428:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801642a:	4618      	mov	r0, r3
 801642c:	f000 f9d3 	bl	80167d6 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE11_M_allocateEj>
 8016430:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8016432:	69fb      	ldr	r3, [r7, #28]
 8016434:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8016436:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8016438:	6a3b      	ldr	r3, [r7, #32]
 801643a:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 801643c:	69fa      	ldr	r2, [r7, #28]
 801643e:	18d5      	adds	r5, r2, r3
 8016440:	6878      	ldr	r0, [r7, #4]
 8016442:	f000 f949 	bl	80166d8 <_ZSt7forwardIRKSt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS5_E4typeE>
 8016446:	4603      	mov	r3, r0
 8016448:	461a      	mov	r2, r3
 801644a:	4629      	mov	r1, r5
 801644c:	4620      	mov	r0, r4
 801644e:	f7ff ffb5 	bl	80163bc <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8016452:	2300      	movs	r3, #0
 8016454:	61bb      	str	r3, [r7, #24]

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8016456:	f107 0308 	add.w	r3, r7, #8
 801645a:	4618      	mov	r0, r3
 801645c:	f7ff ffa3 	bl	80163a6 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 8016460:	4603      	mov	r3, r0
 8016462:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8016464:	68fb      	ldr	r3, [r7, #12]
 8016466:	4618      	mov	r0, r3
 8016468:	f7f5 fde2 	bl	800c030 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 801646c:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 801646e:	69fa      	ldr	r2, [r7, #28]
 8016470:	4621      	mov	r1, r4
 8016472:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016474:	f000 f9c3 	bl	80167fe <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
 8016478:	61b8      	str	r0, [r7, #24]

	      ++__new_finish;
 801647a:	69bb      	ldr	r3, [r7, #24]
 801647c:	3308      	adds	r3, #8
 801647e:	61bb      	str	r3, [r7, #24]

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8016480:	f107 0308 	add.w	r3, r7, #8
 8016484:	4618      	mov	r0, r3
 8016486:	f7ff ff8e 	bl	80163a6 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 801648a:	4603      	mov	r3, r0
 801648c:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 801648e:	68fb      	ldr	r3, [r7, #12]
 8016490:	4618      	mov	r0, r3
 8016492:	f7f5 fdcd 	bl	800c030 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 8016496:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8016498:	69ba      	ldr	r2, [r7, #24]
 801649a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801649c:	4620      	mov	r0, r4
 801649e:	f000 f9ae 	bl	80167fe <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
 80164a2:	61b8      	str	r0, [r7, #24]
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 80164a4:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 80164a6:	68fb      	ldr	r3, [r7, #12]
 80164a8:	689a      	ldr	r2, [r3, #8]
 80164aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80164ac:	1ad3      	subs	r3, r2, r3
 80164ae:	10db      	asrs	r3, r3, #3
      _M_deallocate(__old_start,
 80164b0:	461a      	mov	r2, r3
 80164b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80164b4:	f7f5 ff84 	bl	800c3c0 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE13_M_deallocateEPS2_j>
      this->_M_impl._M_start = __new_start;
 80164b8:	68fb      	ldr	r3, [r7, #12]
 80164ba:	69fa      	ldr	r2, [r7, #28]
 80164bc:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80164be:	68fb      	ldr	r3, [r7, #12]
 80164c0:	69ba      	ldr	r2, [r7, #24]
 80164c2:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80164c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80164c6:	00db      	lsls	r3, r3, #3
 80164c8:	69fa      	ldr	r2, [r7, #28]
 80164ca:	441a      	add	r2, r3
 80164cc:	68fb      	ldr	r3, [r7, #12]
 80164ce:	609a      	str	r2, [r3, #8]
    }
 80164d0:	bf00      	nop
 80164d2:	3730      	adds	r7, #48	@ 0x30
 80164d4:	46bd      	mov	sp, r7
 80164d6:	bdb0      	pop	{r4, r5, r7, pc}
 80164d8:	08026478 	.word	0x08026478

080164dc <_ZN9__gnu_cxx5__ops11__pred_iterIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EENS0_10_Iter_predIT_EESA_>:
    };

  template<typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline _Iter_pred<_Predicate>
    __pred_iter(_Predicate __pred)
 80164dc:	b580      	push	{r7, lr}
 80164de:	b084      	sub	sp, #16
 80164e0:	af00      	add	r7, sp, #0
 80164e2:	6078      	str	r0, [r7, #4]
    { return _Iter_pred<_Predicate>(_GLIBCXX_MOVE(__pred)); }
 80164e4:	1d3b      	adds	r3, r7, #4
 80164e6:	4618      	mov	r0, r3
 80164e8:	f000 f9a8 	bl	801683c <_ZSt4moveIRZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS3_E_EONSt16remove_referenceIT_E4typeEOS9_>
 80164ec:	4602      	mov	r2, r0
 80164ee:	f107 030c 	add.w	r3, r7, #12
 80164f2:	6811      	ldr	r1, [r2, #0]
 80164f4:	4618      	mov	r0, r3
 80164f6:	f000 f9ac 	bl	8016852 <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EC1ES8_>
 80164fa:	68fb      	ldr	r3, [r7, #12]
 80164fc:	4618      	mov	r0, r3
 80164fe:	3710      	adds	r7, #16
 8016500:	46bd      	mov	sp, r7
 8016502:	bd80      	pop	{r7, pc}

08016504 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_>:
    }

  template<typename _ForwardIterator, typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    _ForwardIterator
    __remove_if(_ForwardIterator __first, _ForwardIterator __last,
 8016504:	b590      	push	{r4, r7, lr}
 8016506:	b087      	sub	sp, #28
 8016508:	af00      	add	r7, sp, #0
 801650a:	60f8      	str	r0, [r7, #12]
 801650c:	60b9      	str	r1, [r7, #8]
 801650e:	607a      	str	r2, [r7, #4]
		_Predicate __pred)
    {
      __first = std::__find_if(__first, __last, __pred);
 8016510:	687a      	ldr	r2, [r7, #4]
 8016512:	68b9      	ldr	r1, [r7, #8]
 8016514:	68f8      	ldr	r0, [r7, #12]
 8016516:	f000 f9ae 	bl	8016876 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_>
 801651a:	4603      	mov	r3, r0
 801651c:	60fb      	str	r3, [r7, #12]
      if (__first == __last)
 801651e:	f107 0208 	add.w	r2, r7, #8
 8016522:	f107 030c 	add.w	r3, r7, #12
 8016526:	4611      	mov	r1, r2
 8016528:	4618      	mov	r0, r3
 801652a:	f000 f9ba 	bl	80168a2 <_ZN9__gnu_cxxeqIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 801652e:	4603      	mov	r3, r0
 8016530:	2b00      	cmp	r3, #0
 8016532:	d001      	beq.n	8016538 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_+0x34>
	return __first;
 8016534:	68fb      	ldr	r3, [r7, #12]
 8016536:	e03c      	b.n	80165b2 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_+0xae>
      _ForwardIterator __result = __first;
 8016538:	68fb      	ldr	r3, [r7, #12]
 801653a:	617b      	str	r3, [r7, #20]
      ++__first;
 801653c:	f107 030c 	add.w	r3, r7, #12
 8016540:	4618      	mov	r0, r3
 8016542:	f7ff fe47 	bl	80161d4 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
      for (; __first != __last; ++__first)
 8016546:	e028      	b.n	801659a <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_+0x96>
	if (!__pred(__first))
 8016548:	1d3b      	adds	r3, r7, #4
 801654a:	68f9      	ldr	r1, [r7, #12]
 801654c:	4618      	mov	r0, r3
 801654e:	f000 f9c0 	bl	80168d2 <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EclINS_17__normal_iteratorIPS5_St6vectorIS5_SaIS5_EEEEEEbT_>
 8016552:	4603      	mov	r3, r0
 8016554:	f083 0301 	eor.w	r3, r3, #1
 8016558:	b2db      	uxtb	r3, r3
 801655a:	2b00      	cmp	r3, #0
 801655c:	d018      	beq.n	8016590 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_+0x8c>
	  {
	    *__result = _GLIBCXX_MOVE(*__first);
 801655e:	f107 030c 	add.w	r3, r7, #12
 8016562:	4618      	mov	r0, r3
 8016564:	f7ff fe47 	bl	80161f6 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>
 8016568:	4603      	mov	r3, r0
 801656a:	4618      	mov	r0, r3
 801656c:	f000 f9c5 	bl	80168fa <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>
 8016570:	4604      	mov	r4, r0
 8016572:	f107 0314 	add.w	r3, r7, #20
 8016576:	4618      	mov	r0, r3
 8016578:	f7ff fe3d 	bl	80161f6 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>
 801657c:	4603      	mov	r3, r0
 801657e:	4621      	mov	r1, r4
 8016580:	4618      	mov	r0, r3
 8016582:	f000 f9c5 	bl	8016910 <_ZNSt10shared_ptrI6ModuleEaSEOS1_>
	    ++__result;
 8016586:	f107 0314 	add.w	r3, r7, #20
 801658a:	4618      	mov	r0, r3
 801658c:	f7ff fe22 	bl	80161d4 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
      for (; __first != __last; ++__first)
 8016590:	f107 030c 	add.w	r3, r7, #12
 8016594:	4618      	mov	r0, r3
 8016596:	f7ff fe1d 	bl	80161d4 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
 801659a:	f107 0208 	add.w	r2, r7, #8
 801659e:	f107 030c 	add.w	r3, r7, #12
 80165a2:	4611      	mov	r1, r2
 80165a4:	4618      	mov	r0, r3
 80165a6:	f7ff fdfd 	bl	80161a4 <_ZN9__gnu_cxxneIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 80165aa:	4603      	mov	r3, r0
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d1cb      	bne.n	8016548 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_+0x44>
	  }
      return __result;
 80165b0:	697b      	ldr	r3, [r7, #20]
    }
 80165b2:	4618      	mov	r0, r3
 80165b4:	371c      	adds	r7, #28
 80165b6:	46bd      	mov	sp, r7
 80165b8:	bd90      	pop	{r4, r7, pc}

080165ba <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE6cbeginEv>:
      cbegin() const noexcept
 80165ba:	b580      	push	{r7, lr}
 80165bc:	b084      	sub	sp, #16
 80165be:	af00      	add	r7, sp, #0
 80165c0:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 80165c2:	687a      	ldr	r2, [r7, #4]
 80165c4:	f107 030c 	add.w	r3, r7, #12
 80165c8:	4611      	mov	r1, r2
 80165ca:	4618      	mov	r0, r3
 80165cc:	f000 f9b3 	bl	8016936 <_ZN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1ERKS5_>
 80165d0:	68fb      	ldr	r3, [r7, #12]
 80165d2:	4618      	mov	r0, r3
 80165d4:	3710      	adds	r7, #16
 80165d6:	46bd      	mov	sp, r7
 80165d8:	bd80      	pop	{r7, pc}

080165da <_ZN9__gnu_cxxmiIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80165da:	b590      	push	{r4, r7, lr}
 80165dc:	b083      	sub	sp, #12
 80165de:	af00      	add	r7, sp, #0
 80165e0:	6078      	str	r0, [r7, #4]
 80165e2:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 80165e4:	6878      	ldr	r0, [r7, #4]
 80165e6:	f000 f9b6 	bl	8016956 <_ZNK9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 80165ea:	4603      	mov	r3, r0
 80165ec:	681c      	ldr	r4, [r3, #0]
 80165ee:	6838      	ldr	r0, [r7, #0]
 80165f0:	f000 f9b1 	bl	8016956 <_ZNK9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 80165f4:	4603      	mov	r3, r0
 80165f6:	681b      	ldr	r3, [r3, #0]
 80165f8:	1ae3      	subs	r3, r4, r3
 80165fa:	10db      	asrs	r3, r3, #3
 80165fc:	4618      	mov	r0, r3
 80165fe:	370c      	adds	r7, #12
 8016600:	46bd      	mov	sp, r7
 8016602:	bd90      	pop	{r4, r7, pc}

08016604 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 8016604:	b580      	push	{r7, lr}
 8016606:	b084      	sub	sp, #16
 8016608:	af00      	add	r7, sp, #0
 801660a:	6078      	str	r0, [r7, #4]
 801660c:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	681a      	ldr	r2, [r3, #0]
 8016612:	683b      	ldr	r3, [r7, #0]
 8016614:	00db      	lsls	r3, r3, #3
 8016616:	4413      	add	r3, r2
 8016618:	60fb      	str	r3, [r7, #12]
 801661a:	f107 020c 	add.w	r2, r7, #12
 801661e:	f107 0308 	add.w	r3, r7, #8
 8016622:	4611      	mov	r1, r2
 8016624:	4618      	mov	r0, r3
 8016626:	f7ff feae 	bl	8016386 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 801662a:	68bb      	ldr	r3, [r7, #8]
 801662c:	4618      	mov	r0, r3
 801662e:	3710      	adds	r7, #16
 8016630:	46bd      	mov	sp, r7
 8016632:	bd80      	pop	{r7, pc}

08016634 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS2_S4_EES8_>:
    vector<_Tp, _Alloc>::
 8016634:	b590      	push	{r4, r7, lr}
 8016636:	b087      	sub	sp, #28
 8016638:	af00      	add	r7, sp, #0
 801663a:	60f8      	str	r0, [r7, #12]
 801663c:	60b9      	str	r1, [r7, #8]
 801663e:	607a      	str	r2, [r7, #4]
      if (__first != __last)
 8016640:	1d3a      	adds	r2, r7, #4
 8016642:	f107 0308 	add.w	r3, r7, #8
 8016646:	4611      	mov	r1, r2
 8016648:	4618      	mov	r0, r3
 801664a:	f7ff fdab 	bl	80161a4 <_ZN9__gnu_cxxneIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 801664e:	4603      	mov	r3, r0
 8016650:	2b00      	cmp	r3, #0
 8016652:	d031      	beq.n	80166b8 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS2_S4_EES8_+0x84>
	  if (__last != end())
 8016654:	68f8      	ldr	r0, [r7, #12]
 8016656:	f7ff fd94 	bl	8016182 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 801665a:	4603      	mov	r3, r0
 801665c:	613b      	str	r3, [r7, #16]
 801665e:	f107 0210 	add.w	r2, r7, #16
 8016662:	1d3b      	adds	r3, r7, #4
 8016664:	4611      	mov	r1, r2
 8016666:	4618      	mov	r0, r3
 8016668:	f7ff fd9c 	bl	80161a4 <_ZN9__gnu_cxxneIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 801666c:	4603      	mov	r3, r0
 801666e:	2b00      	cmp	r3, #0
 8016670:	d008      	beq.n	8016684 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS2_S4_EES8_+0x50>
	    _GLIBCXX_MOVE3(__last, end(), __first);
 8016672:	68f8      	ldr	r0, [r7, #12]
 8016674:	f7ff fd85 	bl	8016182 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 8016678:	4603      	mov	r3, r0
 801667a:	68ba      	ldr	r2, [r7, #8]
 801667c:	4619      	mov	r1, r3
 801667e:	6878      	ldr	r0, [r7, #4]
 8016680:	f000 f974 	bl	801696c <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEES9_ET0_T_SB_SA_>
	  _M_erase_at_end(__first.base() + (end() - __last));
 8016684:	f107 0308 	add.w	r3, r7, #8
 8016688:	4618      	mov	r0, r3
 801668a:	f7ff fe8c 	bl	80163a6 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 801668e:	4603      	mov	r3, r0
 8016690:	681c      	ldr	r4, [r3, #0]
 8016692:	68f8      	ldr	r0, [r7, #12]
 8016694:	f7ff fd75 	bl	8016182 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 8016698:	4603      	mov	r3, r0
 801669a:	617b      	str	r3, [r7, #20]
 801669c:	1d3a      	adds	r2, r7, #4
 801669e:	f107 0314 	add.w	r3, r7, #20
 80166a2:	4611      	mov	r1, r2
 80166a4:	4618      	mov	r0, r3
 80166a6:	f000 f881 	bl	80167ac <_ZN9__gnu_cxxmiIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 80166aa:	4603      	mov	r3, r0
 80166ac:	00db      	lsls	r3, r3, #3
 80166ae:	4423      	add	r3, r4
 80166b0:	4619      	mov	r1, r3
 80166b2:	68f8      	ldr	r0, [r7, #12]
 80166b4:	f000 f972 	bl	801699c <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE15_M_erase_at_endEPS2_>
      return __first;
 80166b8:	68bb      	ldr	r3, [r7, #8]
    }
 80166ba:	4618      	mov	r0, r3
 80166bc:	371c      	adds	r7, #28
 80166be:	46bd      	mov	sp, r7
 80166c0:	bd90      	pop	{r4, r7, pc}

080166c2 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80166c2:	b480      	push	{r7}
 80166c4:	b083      	sub	sp, #12
 80166c6:	af00      	add	r7, sp, #0
 80166c8:	6078      	str	r0, [r7, #4]
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	4618      	mov	r0, r3
 80166ce:	370c      	adds	r7, #12
 80166d0:	46bd      	mov	sp, r7
 80166d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166d6:	4770      	bx	lr

080166d8 <_ZSt7forwardIRKSt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80166d8:	b480      	push	{r7}
 80166da:	b083      	sub	sp, #12
 80166dc:	af00      	add	r7, sp, #0
 80166de:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	4618      	mov	r0, r3
 80166e4:	370c      	adds	r7, #12
 80166e6:	46bd      	mov	sp, r7
 80166e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166ec:	4770      	bx	lr

080166ee <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80166ee:	b590      	push	{r4, r7, lr}
 80166f0:	b085      	sub	sp, #20
 80166f2:	af00      	add	r7, sp, #0
 80166f4:	60f8      	str	r0, [r7, #12]
 80166f6:	60b9      	str	r1, [r7, #8]
 80166f8:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80166fa:	68bb      	ldr	r3, [r7, #8]
 80166fc:	4619      	mov	r1, r3
 80166fe:	2008      	movs	r0, #8
 8016700:	f7f2 fffe 	bl	8009700 <_ZnwjPv>
 8016704:	4604      	mov	r4, r0
 8016706:	6878      	ldr	r0, [r7, #4]
 8016708:	f7ff ffe6 	bl	80166d8 <_ZSt7forwardIRKSt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS5_E4typeE>
 801670c:	4603      	mov	r3, r0
 801670e:	4619      	mov	r1, r3
 8016710:	4620      	mov	r0, r4
 8016712:	f7f3 fe91 	bl	800a438 <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>
 8016716:	bf00      	nop
 8016718:	3714      	adds	r7, #20
 801671a:	46bd      	mov	sp, r7
 801671c:	bd90      	pop	{r4, r7, pc}

0801671e <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc>:
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
 801671e:	b590      	push	{r4, r7, lr}
 8016720:	b087      	sub	sp, #28
 8016722:	af00      	add	r7, sp, #0
 8016724:	60f8      	str	r0, [r7, #12]
 8016726:	60b9      	str	r1, [r7, #8]
 8016728:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 801672a:	68f8      	ldr	r0, [r7, #12]
 801672c:	f000 f957 	bl	80169de <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8max_sizeEv>
 8016730:	4604      	mov	r4, r0
 8016732:	68f8      	ldr	r0, [r7, #12]
 8016734:	f000 f964 	bl	8016a00 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4sizeEv>
 8016738:	4603      	mov	r3, r0
 801673a:	1ae2      	subs	r2, r4, r3
 801673c:	68bb      	ldr	r3, [r7, #8]
 801673e:	429a      	cmp	r2, r3
 8016740:	bf34      	ite	cc
 8016742:	2301      	movcc	r3, #1
 8016744:	2300      	movcs	r3, #0
 8016746:	b2db      	uxtb	r3, r3
 8016748:	2b00      	cmp	r3, #0
 801674a:	d002      	beq.n	8016752 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 801674c:	6878      	ldr	r0, [r7, #4]
 801674e:	f00d fba6 	bl	8023e9e <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 8016752:	68f8      	ldr	r0, [r7, #12]
 8016754:	f000 f954 	bl	8016a00 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4sizeEv>
 8016758:	4604      	mov	r4, r0
 801675a:	68f8      	ldr	r0, [r7, #12]
 801675c:	f000 f950 	bl	8016a00 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4sizeEv>
 8016760:	4603      	mov	r3, r0
 8016762:	613b      	str	r3, [r7, #16]
 8016764:	f107 0208 	add.w	r2, r7, #8
 8016768:	f107 0310 	add.w	r3, r7, #16
 801676c:	4611      	mov	r1, r2
 801676e:	4618      	mov	r0, r3
 8016770:	f000 f956 	bl	8016a20 <_ZSt3maxIjERKT_S2_S2_>
 8016774:	4603      	mov	r3, r0
 8016776:	681b      	ldr	r3, [r3, #0]
 8016778:	4423      	add	r3, r4
 801677a:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801677c:	68f8      	ldr	r0, [r7, #12]
 801677e:	f000 f93f 	bl	8016a00 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4sizeEv>
 8016782:	4602      	mov	r2, r0
 8016784:	697b      	ldr	r3, [r7, #20]
 8016786:	4293      	cmp	r3, r2
 8016788:	d306      	bcc.n	8016798 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc+0x7a>
 801678a:	68f8      	ldr	r0, [r7, #12]
 801678c:	f000 f927 	bl	80169de <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8max_sizeEv>
 8016790:	4602      	mov	r2, r0
 8016792:	697b      	ldr	r3, [r7, #20]
 8016794:	4293      	cmp	r3, r2
 8016796:	d904      	bls.n	80167a2 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc+0x84>
 8016798:	68f8      	ldr	r0, [r7, #12]
 801679a:	f000 f920 	bl	80169de <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8max_sizeEv>
 801679e:	4603      	mov	r3, r0
 80167a0:	e000      	b.n	80167a4 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc+0x86>
 80167a2:	697b      	ldr	r3, [r7, #20]
      }
 80167a4:	4618      	mov	r0, r3
 80167a6:	371c      	adds	r7, #28
 80167a8:	46bd      	mov	sp, r7
 80167aa:	bd90      	pop	{r4, r7, pc}

080167ac <_ZN9__gnu_cxxmiIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80167ac:	b590      	push	{r4, r7, lr}
 80167ae:	b083      	sub	sp, #12
 80167b0:	af00      	add	r7, sp, #0
 80167b2:	6078      	str	r0, [r7, #4]
 80167b4:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 80167b6:	6878      	ldr	r0, [r7, #4]
 80167b8:	f7ff fdf5 	bl	80163a6 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 80167bc:	4603      	mov	r3, r0
 80167be:	681c      	ldr	r4, [r3, #0]
 80167c0:	6838      	ldr	r0, [r7, #0]
 80167c2:	f7ff fdf0 	bl	80163a6 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 80167c6:	4603      	mov	r3, r0
 80167c8:	681b      	ldr	r3, [r3, #0]
 80167ca:	1ae3      	subs	r3, r4, r3
 80167cc:	10db      	asrs	r3, r3, #3
 80167ce:	4618      	mov	r0, r3
 80167d0:	370c      	adds	r7, #12
 80167d2:	46bd      	mov	sp, r7
 80167d4:	bd90      	pop	{r4, r7, pc}

080167d6 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80167d6:	b580      	push	{r7, lr}
 80167d8:	b082      	sub	sp, #8
 80167da:	af00      	add	r7, sp, #0
 80167dc:	6078      	str	r0, [r7, #4]
 80167de:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80167e0:	683b      	ldr	r3, [r7, #0]
 80167e2:	2b00      	cmp	r3, #0
 80167e4:	d006      	beq.n	80167f4 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE11_M_allocateEj+0x1e>
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	6839      	ldr	r1, [r7, #0]
 80167ea:	4618      	mov	r0, r3
 80167ec:	f000 f92c 	bl	8016a48 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE8allocateERS3_j>
 80167f0:	4603      	mov	r3, r0
 80167f2:	e000      	b.n	80167f6 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE11_M_allocateEj+0x20>
 80167f4:	2300      	movs	r3, #0
      }
 80167f6:	4618      	mov	r0, r3
 80167f8:	3708      	adds	r7, #8
 80167fa:	46bd      	mov	sp, r7
 80167fc:	bd80      	pop	{r7, pc}

080167fe <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80167fe:	b580      	push	{r7, lr}
 8016800:	b084      	sub	sp, #16
 8016802:	af00      	add	r7, sp, #0
 8016804:	60f8      	str	r0, [r7, #12]
 8016806:	60b9      	str	r1, [r7, #8]
 8016808:	607a      	str	r2, [r7, #4]
 801680a:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 801680c:	683b      	ldr	r3, [r7, #0]
 801680e:	687a      	ldr	r2, [r7, #4]
 8016810:	68b9      	ldr	r1, [r7, #8]
 8016812:	68f8      	ldr	r0, [r7, #12]
 8016814:	f000 f927 	bl	8016a66 <_ZSt12__relocate_aIPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_>
 8016818:	4603      	mov	r3, r0
      }
 801681a:	4618      	mov	r0, r3
 801681c:	3710      	adds	r7, #16
 801681e:	46bd      	mov	sp, r7
 8016820:	bd80      	pop	{r7, pc}

08016822 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE7destroyIS2_EEvRS3_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8016822:	b580      	push	{r7, lr}
 8016824:	b082      	sub	sp, #8
 8016826:	af00      	add	r7, sp, #0
 8016828:	6078      	str	r0, [r7, #4]
 801682a:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 801682c:	6839      	ldr	r1, [r7, #0]
 801682e:	6878      	ldr	r0, [r7, #4]
 8016830:	f000 f936 	bl	8016aa0 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE7destroyIS2_EEvPT_>
	}
 8016834:	bf00      	nop
 8016836:	3708      	adds	r7, #8
 8016838:	46bd      	mov	sp, r7
 801683a:	bd80      	pop	{r7, pc}

0801683c <_ZSt4moveIRZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS3_E_EONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 801683c:	b480      	push	{r7}
 801683e:	b083      	sub	sp, #12
 8016840:	af00      	add	r7, sp, #0
 8016842:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	4618      	mov	r0, r3
 8016848:	370c      	adds	r7, #12
 801684a:	46bd      	mov	sp, r7
 801684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016850:	4770      	bx	lr

08016852 <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EC1ES8_>:
      _Iter_pred(_Predicate __pred)
 8016852:	b580      	push	{r7, lr}
 8016854:	b082      	sub	sp, #8
 8016856:	af00      	add	r7, sp, #0
 8016858:	6078      	str	r0, [r7, #4]
 801685a:	6039      	str	r1, [r7, #0]
	: _M_pred(_GLIBCXX_MOVE(__pred))
 801685c:	463b      	mov	r3, r7
 801685e:	4618      	mov	r0, r3
 8016860:	f7ff ffec 	bl	801683c <_ZSt4moveIRZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS3_E_EONSt16remove_referenceIT_E4typeEOS9_>
 8016864:	4602      	mov	r2, r0
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	6812      	ldr	r2, [r2, #0]
 801686a:	601a      	str	r2, [r3, #0]
      { }
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	4618      	mov	r0, r3
 8016870:	3708      	adds	r7, #8
 8016872:	46bd      	mov	sp, r7
 8016874:	bd80      	pop	{r7, pc}

08016876 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_>:
    __find_if(_Iterator __first, _Iterator __last, _Predicate __pred)
 8016876:	b590      	push	{r4, r7, lr}
 8016878:	b085      	sub	sp, #20
 801687a:	af00      	add	r7, sp, #0
 801687c:	60f8      	str	r0, [r7, #12]
 801687e:	60b9      	str	r1, [r7, #8]
 8016880:	607a      	str	r2, [r7, #4]
		       std::__iterator_category(__first));
 8016882:	f107 030c 	add.w	r3, r7, #12
 8016886:	4618      	mov	r0, r3
 8016888:	f000 f916 	bl	8016ab8 <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEEENSt15iterator_traitsIT_E17iterator_categoryERKSB_>
      return __find_if(__first, __last, __pred,
 801688c:	4623      	mov	r3, r4
 801688e:	687a      	ldr	r2, [r7, #4]
 8016890:	68b9      	ldr	r1, [r7, #8]
 8016892:	68f8      	ldr	r0, [r7, #12]
 8016894:	f000 f91a 	bl	8016acc <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag>
 8016898:	4603      	mov	r3, r0
    }
 801689a:	4618      	mov	r0, r3
 801689c:	3714      	adds	r7, #20
 801689e:	46bd      	mov	sp, r7
 80168a0:	bd90      	pop	{r4, r7, pc}

080168a2 <_ZN9__gnu_cxxeqIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 80168a2:	b590      	push	{r4, r7, lr}
 80168a4:	b083      	sub	sp, #12
 80168a6:	af00      	add	r7, sp, #0
 80168a8:	6078      	str	r0, [r7, #4]
 80168aa:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 80168ac:	6878      	ldr	r0, [r7, #4]
 80168ae:	f7ff fd7a 	bl	80163a6 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 80168b2:	4603      	mov	r3, r0
 80168b4:	681c      	ldr	r4, [r3, #0]
 80168b6:	6838      	ldr	r0, [r7, #0]
 80168b8:	f7ff fd75 	bl	80163a6 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 80168bc:	4603      	mov	r3, r0
 80168be:	681b      	ldr	r3, [r3, #0]
 80168c0:	429c      	cmp	r4, r3
 80168c2:	bf0c      	ite	eq
 80168c4:	2301      	moveq	r3, #1
 80168c6:	2300      	movne	r3, #0
 80168c8:	b2db      	uxtb	r3, r3
 80168ca:	4618      	mov	r0, r3
 80168cc:	370c      	adds	r7, #12
 80168ce:	46bd      	mov	sp, r7
 80168d0:	bd90      	pop	{r4, r7, pc}

080168d2 <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EclINS_17__normal_iteratorIPS5_St6vectorIS5_SaIS5_EEEEEEbT_>:
	operator()(_Iterator __it)
 80168d2:	b590      	push	{r4, r7, lr}
 80168d4:	b083      	sub	sp, #12
 80168d6:	af00      	add	r7, sp, #0
 80168d8:	6078      	str	r0, [r7, #4]
 80168da:	6039      	str	r1, [r7, #0]
	{ return bool(_M_pred(*__it)); }
 80168dc:	687c      	ldr	r4, [r7, #4]
 80168de:	463b      	mov	r3, r7
 80168e0:	4618      	mov	r0, r3
 80168e2:	f7ff fc88 	bl	80161f6 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>
 80168e6:	4603      	mov	r3, r0
 80168e8:	4619      	mov	r1, r3
 80168ea:	4620      	mov	r0, r4
 80168ec:	f7ff fb5a 	bl	8015fa4 <_ZZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEENKUlRKS2_E_clES4_>
 80168f0:	4603      	mov	r3, r0
 80168f2:	4618      	mov	r0, r3
 80168f4:	370c      	adds	r7, #12
 80168f6:	46bd      	mov	sp, r7
 80168f8:	bd90      	pop	{r4, r7, pc}

080168fa <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80168fa:	b480      	push	{r7}
 80168fc:	b083      	sub	sp, #12
 80168fe:	af00      	add	r7, sp, #0
 8016900:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	4618      	mov	r0, r3
 8016906:	370c      	adds	r7, #12
 8016908:	46bd      	mov	sp, r7
 801690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801690e:	4770      	bx	lr

08016910 <_ZNSt10shared_ptrI6ModuleEaSEOS1_>:
      operator=(shared_ptr&& __r) noexcept
 8016910:	b590      	push	{r4, r7, lr}
 8016912:	b083      	sub	sp, #12
 8016914:	af00      	add	r7, sp, #0
 8016916:	6078      	str	r0, [r7, #4]
 8016918:	6039      	str	r1, [r7, #0]
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
 801691a:	687c      	ldr	r4, [r7, #4]
 801691c:	6838      	ldr	r0, [r7, #0]
 801691e:	f7ff ffec 	bl	80168fa <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>
 8016922:	4603      	mov	r3, r0
 8016924:	4619      	mov	r1, r3
 8016926:	4620      	mov	r0, r4
 8016928:	f000 f969 	bl	8016bfe <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>
	return *this;
 801692c:	687b      	ldr	r3, [r7, #4]
      }
 801692e:	4618      	mov	r0, r3
 8016930:	370c      	adds	r7, #12
 8016932:	46bd      	mov	sp, r7
 8016934:	bd90      	pop	{r4, r7, pc}

08016936 <_ZN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1ERKS5_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8016936:	b480      	push	{r7}
 8016938:	b083      	sub	sp, #12
 801693a:	af00      	add	r7, sp, #0
 801693c:	6078      	str	r0, [r7, #4]
 801693e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8016940:	683b      	ldr	r3, [r7, #0]
 8016942:	681a      	ldr	r2, [r3, #0]
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	601a      	str	r2, [r3, #0]
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	4618      	mov	r0, r3
 801694c:	370c      	adds	r7, #12
 801694e:	46bd      	mov	sp, r7
 8016950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016954:	4770      	bx	lr

08016956 <_ZNK9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8016956:	b480      	push	{r7}
 8016958:	b083      	sub	sp, #12
 801695a:	af00      	add	r7, sp, #0
 801695c:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	4618      	mov	r0, r3
 8016962:	370c      	adds	r7, #12
 8016964:	46bd      	mov	sp, r7
 8016966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801696a:	4770      	bx	lr

0801696c <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEES9_ET0_T_SB_SA_>:
    move(_II __first, _II __last, _OI __result)
 801696c:	b590      	push	{r4, r7, lr}
 801696e:	b085      	sub	sp, #20
 8016970:	af00      	add	r7, sp, #0
 8016972:	60f8      	str	r0, [r7, #12]
 8016974:	60b9      	str	r1, [r7, #8]
 8016976:	607a      	str	r2, [r7, #4]
      return std::__copy_move_a<true>(std::__miter_base(__first),
 8016978:	68f8      	ldr	r0, [r7, #12]
 801697a:	f000 f95f 	bl	8016c3c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEEET_SA_>
 801697e:	4604      	mov	r4, r0
 8016980:	68b8      	ldr	r0, [r7, #8]
 8016982:	f000 f95b 	bl	8016c3c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEEET_SA_>
 8016986:	4603      	mov	r3, r0
 8016988:	687a      	ldr	r2, [r7, #4]
 801698a:	4619      	mov	r1, r3
 801698c:	4620      	mov	r0, r4
 801698e:	f000 f960 	bl	8016c52 <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEES9_ET1_T0_SB_SA_>
 8016992:	4603      	mov	r3, r0
    }
 8016994:	4618      	mov	r0, r3
 8016996:	3714      	adds	r7, #20
 8016998:	46bd      	mov	sp, r7
 801699a:	bd90      	pop	{r4, r7, pc}

0801699c <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE15_M_erase_at_endEPS2_>:

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      _GLIBCXX20_CONSTEXPR
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 801699c:	b590      	push	{r4, r7, lr}
 801699e:	b085      	sub	sp, #20
 80169a0:	af00      	add	r7, sp, #0
 80169a2:	6078      	str	r0, [r7, #4]
 80169a4:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	685a      	ldr	r2, [r3, #4]
 80169aa:	683b      	ldr	r3, [r7, #0]
 80169ac:	1ad3      	subs	r3, r2, r3
 80169ae:	10db      	asrs	r3, r3, #3
 80169b0:	60fb      	str	r3, [r7, #12]
 80169b2:	68fb      	ldr	r3, [r7, #12]
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d00e      	beq.n	80169d6 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE15_M_erase_at_endEPS2_+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	4618      	mov	r0, r3
 80169c0:	f7f5 fb36 	bl	800c030 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 80169c4:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 80169c6:	461a      	mov	r2, r3
 80169c8:	4621      	mov	r1, r4
 80169ca:	6838      	ldr	r0, [r7, #0]
 80169cc:	f7f5 fb3b 	bl	800c046 <_ZSt8_DestroyIPSt10shared_ptrI6ModuleES2_EvT_S4_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	683a      	ldr	r2, [r7, #0]
 80169d4:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 80169d6:	bf00      	nop
 80169d8:	3714      	adds	r7, #20
 80169da:	46bd      	mov	sp, r7
 80169dc:	bd90      	pop	{r4, r7, pc}

080169de <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80169de:	b580      	push	{r7, lr}
 80169e0:	b082      	sub	sp, #8
 80169e2:	af00      	add	r7, sp, #0
 80169e4:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	4618      	mov	r0, r3
 80169ea:	f000 f96d 	bl	8016cc8 <_ZNKSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 80169ee:	4603      	mov	r3, r0
 80169f0:	4618      	mov	r0, r3
 80169f2:	f000 f94f 	bl	8016c94 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_max_sizeERKS3_>
 80169f6:	4603      	mov	r3, r0
 80169f8:	4618      	mov	r0, r3
 80169fa:	3708      	adds	r7, #8
 80169fc:	46bd      	mov	sp, r7
 80169fe:	bd80      	pop	{r7, pc}

08016a00 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8016a00:	b480      	push	{r7}
 8016a02:	b083      	sub	sp, #12
 8016a04:	af00      	add	r7, sp, #0
 8016a06:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	685a      	ldr	r2, [r3, #4]
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	681b      	ldr	r3, [r3, #0]
 8016a10:	1ad3      	subs	r3, r2, r3
 8016a12:	10db      	asrs	r3, r3, #3
 8016a14:	4618      	mov	r0, r3
 8016a16:	370c      	adds	r7, #12
 8016a18:	46bd      	mov	sp, r7
 8016a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a1e:	4770      	bx	lr

08016a20 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8016a20:	b480      	push	{r7}
 8016a22:	b083      	sub	sp, #12
 8016a24:	af00      	add	r7, sp, #0
 8016a26:	6078      	str	r0, [r7, #4]
 8016a28:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	681a      	ldr	r2, [r3, #0]
 8016a2e:	683b      	ldr	r3, [r7, #0]
 8016a30:	681b      	ldr	r3, [r3, #0]
 8016a32:	429a      	cmp	r2, r3
 8016a34:	d201      	bcs.n	8016a3a <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8016a36:	683b      	ldr	r3, [r7, #0]
 8016a38:	e000      	b.n	8016a3c <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8016a3a:	687b      	ldr	r3, [r7, #4]
    }
 8016a3c:	4618      	mov	r0, r3
 8016a3e:	370c      	adds	r7, #12
 8016a40:	46bd      	mov	sp, r7
 8016a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a46:	4770      	bx	lr

08016a48 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 8016a48:	b580      	push	{r7, lr}
 8016a4a:	b082      	sub	sp, #8
 8016a4c:	af00      	add	r7, sp, #0
 8016a4e:	6078      	str	r0, [r7, #4]
 8016a50:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8016a52:	2200      	movs	r2, #0
 8016a54:	6839      	ldr	r1, [r7, #0]
 8016a56:	6878      	ldr	r0, [r7, #4]
 8016a58:	f000 f941 	bl	8016cde <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE8allocateEjPKv>
 8016a5c:	4603      	mov	r3, r0
 8016a5e:	4618      	mov	r0, r3
 8016a60:	3708      	adds	r7, #8
 8016a62:	46bd      	mov	sp, r7
 8016a64:	bd80      	pop	{r7, pc}

08016a66 <_ZSt12__relocate_aIPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_>:

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8016a66:	b5b0      	push	{r4, r5, r7, lr}
 8016a68:	b084      	sub	sp, #16
 8016a6a:	af00      	add	r7, sp, #0
 8016a6c:	60f8      	str	r0, [r7, #12]
 8016a6e:	60b9      	str	r1, [r7, #8]
 8016a70:	607a      	str	r2, [r7, #4]
 8016a72:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
 8016a74:	68f8      	ldr	r0, [r7, #12]
 8016a76:	f000 f95c 	bl	8016d32 <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleEET_S4_>
 8016a7a:	4604      	mov	r4, r0
 8016a7c:	68b8      	ldr	r0, [r7, #8]
 8016a7e:	f000 f958 	bl	8016d32 <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleEET_S4_>
 8016a82:	4605      	mov	r5, r0
 8016a84:	6878      	ldr	r0, [r7, #4]
 8016a86:	f000 f954 	bl	8016d32 <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleEET_S4_>
 8016a8a:	4602      	mov	r2, r0
 8016a8c:	683b      	ldr	r3, [r7, #0]
 8016a8e:	4629      	mov	r1, r5
 8016a90:	4620      	mov	r0, r4
 8016a92:	f000 f959 	bl	8016d48 <_ZSt14__relocate_a_1IPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_>
 8016a96:	4603      	mov	r3, r0
				 std::__niter_base(__last),
				 std::__niter_base(__result), __alloc);
    }
 8016a98:	4618      	mov	r0, r3
 8016a9a:	3710      	adds	r7, #16
 8016a9c:	46bd      	mov	sp, r7
 8016a9e:	bdb0      	pop	{r4, r5, r7, pc}

08016aa0 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p)
 8016aa0:	b580      	push	{r7, lr}
 8016aa2:	b082      	sub	sp, #8
 8016aa4:	af00      	add	r7, sp, #0
 8016aa6:	6078      	str	r0, [r7, #4]
 8016aa8:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8016aaa:	6838      	ldr	r0, [r7, #0]
 8016aac:	f7f3 f9f7 	bl	8009e9e <_ZNSt10shared_ptrI6ModuleED1Ev>
 8016ab0:	bf00      	nop
 8016ab2:	3708      	adds	r7, #8
 8016ab4:	46bd      	mov	sp, r7
 8016ab6:	bd80      	pop	{r7, pc}

08016ab8 <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEEENSt15iterator_traitsIT_E17iterator_categoryERKSB_>:
    __iterator_category(const _Iter&)
 8016ab8:	b480      	push	{r7}
 8016aba:	b083      	sub	sp, #12
 8016abc:	af00      	add	r7, sp, #0
 8016abe:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8016ac0:	4618      	mov	r0, r3
 8016ac2:	370c      	adds	r7, #12
 8016ac4:	46bd      	mov	sp, r7
 8016ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aca:	4770      	bx	lr

08016acc <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag>:
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8016acc:	b580      	push	{r7, lr}
 8016ace:	b086      	sub	sp, #24
 8016ad0:	af00      	add	r7, sp, #0
 8016ad2:	60f8      	str	r0, [r7, #12]
 8016ad4:	60b9      	str	r1, [r7, #8]
 8016ad6:	607a      	str	r2, [r7, #4]
 8016ad8:	703b      	strb	r3, [r7, #0]
	__trip_count = (__last - __first) >> 2;
 8016ada:	f107 020c 	add.w	r2, r7, #12
 8016ade:	f107 0308 	add.w	r3, r7, #8
 8016ae2:	4611      	mov	r1, r2
 8016ae4:	4618      	mov	r0, r3
 8016ae6:	f7ff fe61 	bl	80167ac <_ZN9__gnu_cxxmiIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 8016aea:	4603      	mov	r3, r0
 8016aec:	109b      	asrs	r3, r3, #2
 8016aee:	617b      	str	r3, [r7, #20]
      for (; __trip_count > 0; --__trip_count)
 8016af0:	e03e      	b.n	8016b70 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0xa4>
	  if (__pred(__first))
 8016af2:	1d3b      	adds	r3, r7, #4
 8016af4:	68f9      	ldr	r1, [r7, #12]
 8016af6:	4618      	mov	r0, r3
 8016af8:	f7ff feeb 	bl	80168d2 <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EclINS_17__normal_iteratorIPS5_St6vectorIS5_SaIS5_EEEEEEbT_>
 8016afc:	4603      	mov	r3, r0
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	d001      	beq.n	8016b06 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x3a>
	    return __first;
 8016b02:	68fb      	ldr	r3, [r7, #12]
 8016b04:	e077      	b.n	8016bf6 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 8016b06:	f107 030c 	add.w	r3, r7, #12
 8016b0a:	4618      	mov	r0, r3
 8016b0c:	f7ff fb62 	bl	80161d4 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
	  if (__pred(__first))
 8016b10:	1d3b      	adds	r3, r7, #4
 8016b12:	68f9      	ldr	r1, [r7, #12]
 8016b14:	4618      	mov	r0, r3
 8016b16:	f7ff fedc 	bl	80168d2 <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EclINS_17__normal_iteratorIPS5_St6vectorIS5_SaIS5_EEEEEEbT_>
 8016b1a:	4603      	mov	r3, r0
 8016b1c:	2b00      	cmp	r3, #0
 8016b1e:	d001      	beq.n	8016b24 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x58>
	    return __first;
 8016b20:	68fb      	ldr	r3, [r7, #12]
 8016b22:	e068      	b.n	8016bf6 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 8016b24:	f107 030c 	add.w	r3, r7, #12
 8016b28:	4618      	mov	r0, r3
 8016b2a:	f7ff fb53 	bl	80161d4 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
	  if (__pred(__first))
 8016b2e:	1d3b      	adds	r3, r7, #4
 8016b30:	68f9      	ldr	r1, [r7, #12]
 8016b32:	4618      	mov	r0, r3
 8016b34:	f7ff fecd 	bl	80168d2 <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EclINS_17__normal_iteratorIPS5_St6vectorIS5_SaIS5_EEEEEEbT_>
 8016b38:	4603      	mov	r3, r0
 8016b3a:	2b00      	cmp	r3, #0
 8016b3c:	d001      	beq.n	8016b42 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x76>
	    return __first;
 8016b3e:	68fb      	ldr	r3, [r7, #12]
 8016b40:	e059      	b.n	8016bf6 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 8016b42:	f107 030c 	add.w	r3, r7, #12
 8016b46:	4618      	mov	r0, r3
 8016b48:	f7ff fb44 	bl	80161d4 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
	  if (__pred(__first))
 8016b4c:	1d3b      	adds	r3, r7, #4
 8016b4e:	68f9      	ldr	r1, [r7, #12]
 8016b50:	4618      	mov	r0, r3
 8016b52:	f7ff febe 	bl	80168d2 <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EclINS_17__normal_iteratorIPS5_St6vectorIS5_SaIS5_EEEEEEbT_>
 8016b56:	4603      	mov	r3, r0
 8016b58:	2b00      	cmp	r3, #0
 8016b5a:	d001      	beq.n	8016b60 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x94>
	    return __first;
 8016b5c:	68fb      	ldr	r3, [r7, #12]
 8016b5e:	e04a      	b.n	8016bf6 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 8016b60:	f107 030c 	add.w	r3, r7, #12
 8016b64:	4618      	mov	r0, r3
 8016b66:	f7ff fb35 	bl	80161d4 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
      for (; __trip_count > 0; --__trip_count)
 8016b6a:	697b      	ldr	r3, [r7, #20]
 8016b6c:	3b01      	subs	r3, #1
 8016b6e:	617b      	str	r3, [r7, #20]
 8016b70:	697b      	ldr	r3, [r7, #20]
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	dcbd      	bgt.n	8016af2 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x26>
      switch (__last - __first)
 8016b76:	f107 020c 	add.w	r2, r7, #12
 8016b7a:	f107 0308 	add.w	r3, r7, #8
 8016b7e:	4611      	mov	r1, r2
 8016b80:	4618      	mov	r0, r3
 8016b82:	f7ff fe13 	bl	80167ac <_ZN9__gnu_cxxmiIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 8016b86:	4603      	mov	r3, r0
 8016b88:	2b03      	cmp	r3, #3
 8016b8a:	d006      	beq.n	8016b9a <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0xce>
 8016b8c:	2b03      	cmp	r3, #3
 8016b8e:	dc31      	bgt.n	8016bf4 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x128>
 8016b90:	2b01      	cmp	r3, #1
 8016b92:	d020      	beq.n	8016bd6 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x10a>
 8016b94:	2b02      	cmp	r3, #2
 8016b96:	d00f      	beq.n	8016bb8 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0xec>
 8016b98:	e02c      	b.n	8016bf4 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x128>
	  if (__pred(__first))
 8016b9a:	1d3b      	adds	r3, r7, #4
 8016b9c:	68f9      	ldr	r1, [r7, #12]
 8016b9e:	4618      	mov	r0, r3
 8016ba0:	f7ff fe97 	bl	80168d2 <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EclINS_17__normal_iteratorIPS5_St6vectorIS5_SaIS5_EEEEEEbT_>
 8016ba4:	4603      	mov	r3, r0
 8016ba6:	2b00      	cmp	r3, #0
 8016ba8:	d001      	beq.n	8016bae <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0xe2>
	    return __first;
 8016baa:	68fb      	ldr	r3, [r7, #12]
 8016bac:	e023      	b.n	8016bf6 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 8016bae:	f107 030c 	add.w	r3, r7, #12
 8016bb2:	4618      	mov	r0, r3
 8016bb4:	f7ff fb0e 	bl	80161d4 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
	  if (__pred(__first))
 8016bb8:	1d3b      	adds	r3, r7, #4
 8016bba:	68f9      	ldr	r1, [r7, #12]
 8016bbc:	4618      	mov	r0, r3
 8016bbe:	f7ff fe88 	bl	80168d2 <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EclINS_17__normal_iteratorIPS5_St6vectorIS5_SaIS5_EEEEEEbT_>
 8016bc2:	4603      	mov	r3, r0
 8016bc4:	2b00      	cmp	r3, #0
 8016bc6:	d001      	beq.n	8016bcc <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x100>
	    return __first;
 8016bc8:	68fb      	ldr	r3, [r7, #12]
 8016bca:	e014      	b.n	8016bf6 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 8016bcc:	f107 030c 	add.w	r3, r7, #12
 8016bd0:	4618      	mov	r0, r3
 8016bd2:	f7ff faff 	bl	80161d4 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
	  if (__pred(__first))
 8016bd6:	1d3b      	adds	r3, r7, #4
 8016bd8:	68f9      	ldr	r1, [r7, #12]
 8016bda:	4618      	mov	r0, r3
 8016bdc:	f7ff fe79 	bl	80168d2 <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EclINS_17__normal_iteratorIPS5_St6vectorIS5_SaIS5_EEEEEEbT_>
 8016be0:	4603      	mov	r3, r0
 8016be2:	2b00      	cmp	r3, #0
 8016be4:	d001      	beq.n	8016bea <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x11e>
	    return __first;
 8016be6:	68fb      	ldr	r3, [r7, #12]
 8016be8:	e005      	b.n	8016bf6 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 8016bea:	f107 030c 	add.w	r3, r7, #12
 8016bee:	4618      	mov	r0, r3
 8016bf0:	f7ff faf0 	bl	80161d4 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
	  return __last;
 8016bf4:	68bb      	ldr	r3, [r7, #8]
    }
 8016bf6:	4618      	mov	r0, r3
 8016bf8:	3718      	adds	r7, #24
 8016bfa:	46bd      	mov	sp, r7
 8016bfc:	bd80      	pop	{r7, pc}

08016bfe <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>:
      operator=(__shared_ptr&& __r) noexcept
 8016bfe:	b580      	push	{r7, lr}
 8016c00:	b084      	sub	sp, #16
 8016c02:	af00      	add	r7, sp, #0
 8016c04:	6078      	str	r0, [r7, #4]
 8016c06:	6039      	str	r1, [r7, #0]
	__shared_ptr(std::move(__r)).swap(*this);
 8016c08:	6838      	ldr	r0, [r7, #0]
 8016c0a:	f000 f8c3 	bl	8016d94 <_ZSt4moveIRSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>
 8016c0e:	4602      	mov	r2, r0
 8016c10:	f107 0308 	add.w	r3, r7, #8
 8016c14:	4611      	mov	r1, r2
 8016c16:	4618      	mov	r0, r3
 8016c18:	f000 f8c7 	bl	8016daa <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>
 8016c1c:	f107 0308 	add.w	r3, r7, #8
 8016c20:	6879      	ldr	r1, [r7, #4]
 8016c22:	4618      	mov	r0, r3
 8016c24:	f000 f8df 	bl	8016de6 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>
 8016c28:	f107 0308 	add.w	r3, r7, #8
 8016c2c:	4618      	mov	r0, r3
 8016c2e:	f7f3 f928 	bl	8009e82 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EED1Ev>
	return *this;
 8016c32:	687b      	ldr	r3, [r7, #4]
      }
 8016c34:	4618      	mov	r0, r3
 8016c36:	3710      	adds	r7, #16
 8016c38:	46bd      	mov	sp, r7
 8016c3a:	bd80      	pop	{r7, pc}

08016c3c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEEET_SA_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8016c3c:	b480      	push	{r7}
 8016c3e:	b083      	sub	sp, #12
 8016c40:	af00      	add	r7, sp, #0
 8016c42:	6078      	str	r0, [r7, #4]
    { return __it; }
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	4618      	mov	r0, r3
 8016c48:	370c      	adds	r7, #12
 8016c4a:	46bd      	mov	sp, r7
 8016c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c50:	4770      	bx	lr

08016c52 <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEES9_ET1_T0_SB_SA_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8016c52:	b5b0      	push	{r4, r5, r7, lr}
 8016c54:	b084      	sub	sp, #16
 8016c56:	af00      	add	r7, sp, #0
 8016c58:	60f8      	str	r0, [r7, #12]
 8016c5a:	60b9      	str	r1, [r7, #8]
 8016c5c:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8016c5e:	68f8      	ldr	r0, [r7, #12]
 8016c60:	f000 f8d8 	bl	8016e14 <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleESt6vectorIS2_SaIS2_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>
 8016c64:	4604      	mov	r4, r0
 8016c66:	68b8      	ldr	r0, [r7, #8]
 8016c68:	f000 f8d4 	bl	8016e14 <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleESt6vectorIS2_SaIS2_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>
 8016c6c:	4605      	mov	r5, r0
 8016c6e:	6878      	ldr	r0, [r7, #4]
 8016c70:	f000 f8d0 	bl	8016e14 <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleESt6vectorIS2_SaIS2_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>
 8016c74:	4603      	mov	r3, r0
 8016c76:	461a      	mov	r2, r3
 8016c78:	4629      	mov	r1, r5
 8016c7a:	4620      	mov	r0, r4
 8016c7c:	f000 f8d8 	bl	8016e30 <_ZSt14__copy_move_a1ILb1EPSt10shared_ptrI6ModuleES3_ET1_T0_S5_S4_>
 8016c80:	4603      	mov	r3, r0
 8016c82:	4619      	mov	r1, r3
 8016c84:	6878      	ldr	r0, [r7, #4]
 8016c86:	f000 f8e3 	bl	8016e50 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEES5_ET_SA_T0_>
 8016c8a:	4603      	mov	r3, r0
    }
 8016c8c:	4618      	mov	r0, r3
 8016c8e:	3710      	adds	r7, #16
 8016c90:	46bd      	mov	sp, r7
 8016c92:	bdb0      	pop	{r4, r5, r7, pc}

08016c94 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_max_sizeERKS3_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8016c94:	b580      	push	{r7, lr}
 8016c96:	b084      	sub	sp, #16
 8016c98:	af00      	add	r7, sp, #0
 8016c9a:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8016c9c:	f06f 4370 	mvn.w	r3, #4026531840	@ 0xf0000000
 8016ca0:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8016ca2:	6878      	ldr	r0, [r7, #4]
 8016ca4:	f000 f8eb 	bl	8016e7e <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE8max_sizeERKS3_>
 8016ca8:	4603      	mov	r3, r0
 8016caa:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8016cac:	f107 0208 	add.w	r2, r7, #8
 8016cb0:	f107 030c 	add.w	r3, r7, #12
 8016cb4:	4611      	mov	r1, r2
 8016cb6:	4618      	mov	r0, r3
 8016cb8:	f000 f8ed 	bl	8016e96 <_ZSt3minIjERKT_S2_S2_>
 8016cbc:	4603      	mov	r3, r0
 8016cbe:	681b      	ldr	r3, [r3, #0]
      }
 8016cc0:	4618      	mov	r0, r3
 8016cc2:	3710      	adds	r7, #16
 8016cc4:	46bd      	mov	sp, r7
 8016cc6:	bd80      	pop	{r7, pc}

08016cc8 <_ZNKSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8016cc8:	b480      	push	{r7}
 8016cca:	b083      	sub	sp, #12
 8016ccc:	af00      	add	r7, sp, #0
 8016cce:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	4618      	mov	r0, r3
 8016cd4:	370c      	adds	r7, #12
 8016cd6:	46bd      	mov	sp, r7
 8016cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cdc:	4770      	bx	lr

08016cde <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8016cde:	b580      	push	{r7, lr}
 8016ce0:	b084      	sub	sp, #16
 8016ce2:	af00      	add	r7, sp, #0
 8016ce4:	60f8      	str	r0, [r7, #12]
 8016ce6:	60b9      	str	r1, [r7, #8]
 8016ce8:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8016cea:	68f8      	ldr	r0, [r7, #12]
 8016cec:	f000 f8e7 	bl	8016ebe <_ZNKSt15__new_allocatorISt10shared_ptrI6ModuleEE11_M_max_sizeEv>
 8016cf0:	4602      	mov	r2, r0
 8016cf2:	68bb      	ldr	r3, [r7, #8]
 8016cf4:	4293      	cmp	r3, r2
 8016cf6:	bf8c      	ite	hi
 8016cf8:	2301      	movhi	r3, #1
 8016cfa:	2300      	movls	r3, #0
 8016cfc:	b2db      	uxtb	r3, r3
 8016cfe:	2b00      	cmp	r3, #0
 8016d00:	bf14      	ite	ne
 8016d02:	2301      	movne	r3, #1
 8016d04:	2300      	moveq	r3, #0
 8016d06:	b2db      	uxtb	r3, r3
 8016d08:	2b00      	cmp	r3, #0
 8016d0a:	d007      	beq.n	8016d1c <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8016d0c:	68bb      	ldr	r3, [r7, #8]
 8016d0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8016d12:	d301      	bcc.n	8016d18 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8016d14:	f00d f8ba 	bl	8023e8c <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8016d18:	f00d f8b5 	bl	8023e86 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8016d1c:	68bb      	ldr	r3, [r7, #8]
 8016d1e:	00db      	lsls	r3, r3, #3
 8016d20:	4618      	mov	r0, r3
 8016d22:	f00d f89d 	bl	8023e60 <_Znwj>
 8016d26:	4603      	mov	r3, r0
 8016d28:	bf00      	nop
      }
 8016d2a:	4618      	mov	r0, r3
 8016d2c:	3710      	adds	r7, #16
 8016d2e:	46bd      	mov	sp, r7
 8016d30:	bd80      	pop	{r7, pc}

08016d32 <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleEET_S4_>:
    __niter_base(_Iterator __it)
 8016d32:	b480      	push	{r7}
 8016d34:	b083      	sub	sp, #12
 8016d36:	af00      	add	r7, sp, #0
 8016d38:	6078      	str	r0, [r7, #4]
    { return __it; }
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	4618      	mov	r0, r3
 8016d3e:	370c      	adds	r7, #12
 8016d40:	46bd      	mov	sp, r7
 8016d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d46:	4770      	bx	lr

08016d48 <_ZSt14__relocate_a_1IPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 8016d48:	b590      	push	{r4, r7, lr}
 8016d4a:	b087      	sub	sp, #28
 8016d4c:	af00      	add	r7, sp, #0
 8016d4e:	60f8      	str	r0, [r7, #12]
 8016d50:	60b9      	str	r1, [r7, #8]
 8016d52:	607a      	str	r2, [r7, #4]
 8016d54:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 8016d56:	687b      	ldr	r3, [r7, #4]
 8016d58:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 8016d5a:	e012      	b.n	8016d82 <_ZSt14__relocate_a_1IPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_+0x3a>
	std::__relocate_object_a(std::__addressof(*__cur),
 8016d5c:	6978      	ldr	r0, [r7, #20]
 8016d5e:	f7f5 fefb 	bl	800cb58 <_ZSt11__addressofISt10shared_ptrI6ModuleEEPT_RS3_>
 8016d62:	4604      	mov	r4, r0
 8016d64:	68f8      	ldr	r0, [r7, #12]
 8016d66:	f7f5 fef7 	bl	800cb58 <_ZSt11__addressofISt10shared_ptrI6ModuleEEPT_RS3_>
 8016d6a:	4603      	mov	r3, r0
 8016d6c:	683a      	ldr	r2, [r7, #0]
 8016d6e:	4619      	mov	r1, r3
 8016d70:	4620      	mov	r0, r4
 8016d72:	f000 f8b0 	bl	8016ed6 <_ZSt19__relocate_object_aISt10shared_ptrI6ModuleES2_SaIS2_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 8016d76:	68fb      	ldr	r3, [r7, #12]
 8016d78:	3308      	adds	r3, #8
 8016d7a:	60fb      	str	r3, [r7, #12]
 8016d7c:	697b      	ldr	r3, [r7, #20]
 8016d7e:	3308      	adds	r3, #8
 8016d80:	617b      	str	r3, [r7, #20]
 8016d82:	68fa      	ldr	r2, [r7, #12]
 8016d84:	68bb      	ldr	r3, [r7, #8]
 8016d86:	429a      	cmp	r2, r3
 8016d88:	d1e8      	bne.n	8016d5c <_ZSt14__relocate_a_1IPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_+0x14>
      return __cur;
 8016d8a:	697b      	ldr	r3, [r7, #20]
    }
 8016d8c:	4618      	mov	r0, r3
 8016d8e:	371c      	adds	r7, #28
 8016d90:	46bd      	mov	sp, r7
 8016d92:	bd90      	pop	{r4, r7, pc}

08016d94 <_ZSt4moveIRSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8016d94:	b480      	push	{r7}
 8016d96:	b083      	sub	sp, #12
 8016d98:	af00      	add	r7, sp, #0
 8016d9a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	4618      	mov	r0, r3
 8016da0:	370c      	adds	r7, #12
 8016da2:	46bd      	mov	sp, r7
 8016da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016da8:	4770      	bx	lr

08016daa <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 8016daa:	b580      	push	{r7, lr}
 8016dac:	b082      	sub	sp, #8
 8016dae:	af00      	add	r7, sp, #0
 8016db0:	6078      	str	r0, [r7, #4]
 8016db2:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 8016db4:	683b      	ldr	r3, [r7, #0]
 8016db6:	681a      	ldr	r2, [r3, #0]
 8016db8:	687b      	ldr	r3, [r7, #4]
 8016dba:	601a      	str	r2, [r3, #0]
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	3304      	adds	r3, #4
 8016dc0:	4618      	mov	r0, r3
 8016dc2:	f7f4 feba 	bl	800bb3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	1d1a      	adds	r2, r3, #4
 8016dca:	683b      	ldr	r3, [r7, #0]
 8016dcc:	3304      	adds	r3, #4
 8016dce:	4619      	mov	r1, r3
 8016dd0:	4610      	mov	r0, r2
 8016dd2:	f7f5 f9c6 	bl	800c162 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = nullptr;
 8016dd6:	683b      	ldr	r3, [r7, #0]
 8016dd8:	2200      	movs	r2, #0
 8016dda:	601a      	str	r2, [r3, #0]
      }
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	4618      	mov	r0, r3
 8016de0:	3708      	adds	r7, #8
 8016de2:	46bd      	mov	sp, r7
 8016de4:	bd80      	pop	{r7, pc}

08016de6 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>:
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
 8016de6:	b580      	push	{r7, lr}
 8016de8:	b082      	sub	sp, #8
 8016dea:	af00      	add	r7, sp, #0
 8016dec:	6078      	str	r0, [r7, #4]
 8016dee:	6039      	str	r1, [r7, #0]
	std::swap(_M_ptr, __other._M_ptr);
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	683a      	ldr	r2, [r7, #0]
 8016df4:	4611      	mov	r1, r2
 8016df6:	4618      	mov	r0, r3
 8016df8:	f000 f888 	bl	8016f0c <_ZSt4swapIP6ModuleENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>
	_M_refcount._M_swap(__other._M_refcount);
 8016dfc:	687b      	ldr	r3, [r7, #4]
 8016dfe:	1d1a      	adds	r2, r3, #4
 8016e00:	683b      	ldr	r3, [r7, #0]
 8016e02:	3304      	adds	r3, #4
 8016e04:	4619      	mov	r1, r3
 8016e06:	4610      	mov	r0, r2
 8016e08:	f7f5 f9ab 	bl	800c162 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
      }
 8016e0c:	bf00      	nop
 8016e0e:	3708      	adds	r7, #8
 8016e10:	46bd      	mov	sp, r7
 8016e12:	bd80      	pop	{r7, pc}

08016e14 <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleESt6vectorIS2_SaIS2_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8016e14:	b580      	push	{r7, lr}
 8016e16:	b082      	sub	sp, #8
 8016e18:	af00      	add	r7, sp, #0
 8016e1a:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }
 8016e1c:	1d3b      	adds	r3, r7, #4
 8016e1e:	4618      	mov	r0, r3
 8016e20:	f7ff fac1 	bl	80163a6 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 8016e24:	4603      	mov	r3, r0
 8016e26:	681b      	ldr	r3, [r3, #0]
 8016e28:	4618      	mov	r0, r3
 8016e2a:	3708      	adds	r7, #8
 8016e2c:	46bd      	mov	sp, r7
 8016e2e:	bd80      	pop	{r7, pc}

08016e30 <_ZSt14__copy_move_a1ILb1EPSt10shared_ptrI6ModuleES3_ET1_T0_S5_S4_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8016e30:	b580      	push	{r7, lr}
 8016e32:	b084      	sub	sp, #16
 8016e34:	af00      	add	r7, sp, #0
 8016e36:	60f8      	str	r0, [r7, #12]
 8016e38:	60b9      	str	r1, [r7, #8]
 8016e3a:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8016e3c:	687a      	ldr	r2, [r7, #4]
 8016e3e:	68b9      	ldr	r1, [r7, #8]
 8016e40:	68f8      	ldr	r0, [r7, #12]
 8016e42:	f000 f882 	bl	8016f4a <_ZSt14__copy_move_a2ILb1EPSt10shared_ptrI6ModuleES3_ET1_T0_S5_S4_>
 8016e46:	4603      	mov	r3, r0
 8016e48:	4618      	mov	r0, r3
 8016e4a:	3710      	adds	r7, #16
 8016e4c:	46bd      	mov	sp, r7
 8016e4e:	bd80      	pop	{r7, pc}

08016e50 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEES5_ET_SA_T0_>:
    __niter_wrap(_From __from, _To __res)
 8016e50:	b580      	push	{r7, lr}
 8016e52:	b082      	sub	sp, #8
 8016e54:	af00      	add	r7, sp, #0
 8016e56:	6078      	str	r0, [r7, #4]
 8016e58:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 8016e5a:	6878      	ldr	r0, [r7, #4]
 8016e5c:	f7ff ffda 	bl	8016e14 <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleESt6vectorIS2_SaIS2_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>
 8016e60:	4602      	mov	r2, r0
 8016e62:	683b      	ldr	r3, [r7, #0]
 8016e64:	1a9b      	subs	r3, r3, r2
 8016e66:	10db      	asrs	r3, r3, #3
 8016e68:	461a      	mov	r2, r3
 8016e6a:	1d3b      	adds	r3, r7, #4
 8016e6c:	4611      	mov	r1, r2
 8016e6e:	4618      	mov	r0, r3
 8016e70:	f7ff fbc8 	bl	8016604 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEplEi>
 8016e74:	4603      	mov	r3, r0
 8016e76:	4618      	mov	r0, r3
 8016e78:	3708      	adds	r7, #8
 8016e7a:	46bd      	mov	sp, r7
 8016e7c:	bd80      	pop	{r7, pc}

08016e7e <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE8max_sizeERKS3_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8016e7e:	b580      	push	{r7, lr}
 8016e80:	b082      	sub	sp, #8
 8016e82:	af00      	add	r7, sp, #0
 8016e84:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8016e86:	6878      	ldr	r0, [r7, #4]
 8016e88:	f000 f86f 	bl	8016f6a <_ZNKSt15__new_allocatorISt10shared_ptrI6ModuleEE8max_sizeEv>
 8016e8c:	4603      	mov	r3, r0
      }
 8016e8e:	4618      	mov	r0, r3
 8016e90:	3708      	adds	r7, #8
 8016e92:	46bd      	mov	sp, r7
 8016e94:	bd80      	pop	{r7, pc}

08016e96 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8016e96:	b480      	push	{r7}
 8016e98:	b083      	sub	sp, #12
 8016e9a:	af00      	add	r7, sp, #0
 8016e9c:	6078      	str	r0, [r7, #4]
 8016e9e:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8016ea0:	683b      	ldr	r3, [r7, #0]
 8016ea2:	681a      	ldr	r2, [r3, #0]
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	681b      	ldr	r3, [r3, #0]
 8016ea8:	429a      	cmp	r2, r3
 8016eaa:	d201      	bcs.n	8016eb0 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8016eac:	683b      	ldr	r3, [r7, #0]
 8016eae:	e000      	b.n	8016eb2 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8016eb0:	687b      	ldr	r3, [r7, #4]
    }
 8016eb2:	4618      	mov	r0, r3
 8016eb4:	370c      	adds	r7, #12
 8016eb6:	46bd      	mov	sp, r7
 8016eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ebc:	4770      	bx	lr

08016ebe <_ZNKSt15__new_allocatorISt10shared_ptrI6ModuleEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8016ebe:	b480      	push	{r7}
 8016ec0:	b083      	sub	sp, #12
 8016ec2:	af00      	add	r7, sp, #0
 8016ec4:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8016ec6:	f06f 4370 	mvn.w	r3, #4026531840	@ 0xf0000000
      }
 8016eca:	4618      	mov	r0, r3
 8016ecc:	370c      	adds	r7, #12
 8016ece:	46bd      	mov	sp, r7
 8016ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ed4:	4770      	bx	lr

08016ed6 <_ZSt19__relocate_object_aISt10shared_ptrI6ModuleES2_SaIS2_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 8016ed6:	b580      	push	{r7, lr}
 8016ed8:	b084      	sub	sp, #16
 8016eda:	af00      	add	r7, sp, #0
 8016edc:	60f8      	str	r0, [r7, #12]
 8016ede:	60b9      	str	r1, [r7, #8]
 8016ee0:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 8016ee2:	68b8      	ldr	r0, [r7, #8]
 8016ee4:	f7ff fd09 	bl	80168fa <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>
 8016ee8:	4603      	mov	r3, r0
 8016eea:	461a      	mov	r2, r3
 8016eec:	68f9      	ldr	r1, [r7, #12]
 8016eee:	6878      	ldr	r0, [r7, #4]
 8016ef0:	f000 f847 	bl	8016f82 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 8016ef4:	68b8      	ldr	r0, [r7, #8]
 8016ef6:	f7f5 fe2f 	bl	800cb58 <_ZSt11__addressofISt10shared_ptrI6ModuleEEPT_RS3_>
 8016efa:	4603      	mov	r3, r0
 8016efc:	4619      	mov	r1, r3
 8016efe:	6878      	ldr	r0, [r7, #4]
 8016f00:	f7ff fc8f 	bl	8016822 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE7destroyIS2_EEvRS3_PT_>
    }
 8016f04:	bf00      	nop
 8016f06:	3710      	adds	r7, #16
 8016f08:	46bd      	mov	sp, r7
 8016f0a:	bd80      	pop	{r7, pc}

08016f0c <_ZSt4swapIP6ModuleENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>:
    swap(_Tp& __a, _Tp& __b)
 8016f0c:	b580      	push	{r7, lr}
 8016f0e:	b084      	sub	sp, #16
 8016f10:	af00      	add	r7, sp, #0
 8016f12:	6078      	str	r0, [r7, #4]
 8016f14:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8016f16:	6878      	ldr	r0, [r7, #4]
 8016f18:	f000 f846 	bl	8016fa8 <_ZSt4moveIRP6ModuleEONSt16remove_referenceIT_E4typeEOS4_>
 8016f1c:	4603      	mov	r3, r0
 8016f1e:	681b      	ldr	r3, [r3, #0]
 8016f20:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8016f22:	6838      	ldr	r0, [r7, #0]
 8016f24:	f000 f840 	bl	8016fa8 <_ZSt4moveIRP6ModuleEONSt16remove_referenceIT_E4typeEOS4_>
 8016f28:	4603      	mov	r3, r0
 8016f2a:	681a      	ldr	r2, [r3, #0]
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8016f30:	f107 030c 	add.w	r3, r7, #12
 8016f34:	4618      	mov	r0, r3
 8016f36:	f000 f837 	bl	8016fa8 <_ZSt4moveIRP6ModuleEONSt16remove_referenceIT_E4typeEOS4_>
 8016f3a:	4603      	mov	r3, r0
 8016f3c:	681a      	ldr	r2, [r3, #0]
 8016f3e:	683b      	ldr	r3, [r7, #0]
 8016f40:	601a      	str	r2, [r3, #0]
    }
 8016f42:	bf00      	nop
 8016f44:	3710      	adds	r7, #16
 8016f46:	46bd      	mov	sp, r7
 8016f48:	bd80      	pop	{r7, pc}

08016f4a <_ZSt14__copy_move_a2ILb1EPSt10shared_ptrI6ModuleES3_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8016f4a:	b580      	push	{r7, lr}
 8016f4c:	b084      	sub	sp, #16
 8016f4e:	af00      	add	r7, sp, #0
 8016f50:	60f8      	str	r0, [r7, #12]
 8016f52:	60b9      	str	r1, [r7, #8]
 8016f54:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8016f56:	687a      	ldr	r2, [r7, #4]
 8016f58:	68b9      	ldr	r1, [r7, #8]
 8016f5a:	68f8      	ldr	r0, [r7, #12]
 8016f5c:	f000 f82f 	bl	8016fbe <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPSt10shared_ptrI6ModuleES6_EET0_T_S8_S7_>
 8016f60:	4603      	mov	r3, r0
    }
 8016f62:	4618      	mov	r0, r3
 8016f64:	3710      	adds	r7, #16
 8016f66:	46bd      	mov	sp, r7
 8016f68:	bd80      	pop	{r7, pc}

08016f6a <_ZNKSt15__new_allocatorISt10shared_ptrI6ModuleEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8016f6a:	b580      	push	{r7, lr}
 8016f6c:	b082      	sub	sp, #8
 8016f6e:	af00      	add	r7, sp, #0
 8016f70:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8016f72:	6878      	ldr	r0, [r7, #4]
 8016f74:	f7ff ffa3 	bl	8016ebe <_ZNKSt15__new_allocatorISt10shared_ptrI6ModuleEE11_M_max_sizeEv>
 8016f78:	4603      	mov	r3, r0
 8016f7a:	4618      	mov	r0, r3
 8016f7c:	3708      	adds	r7, #8
 8016f7e:	46bd      	mov	sp, r7
 8016f80:	bd80      	pop	{r7, pc}

08016f82 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8016f82:	b580      	push	{r7, lr}
 8016f84:	b084      	sub	sp, #16
 8016f86:	af00      	add	r7, sp, #0
 8016f88:	60f8      	str	r0, [r7, #12]
 8016f8a:	60b9      	str	r1, [r7, #8]
 8016f8c:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8016f8e:	6878      	ldr	r0, [r7, #4]
 8016f90:	f000 f83a 	bl	8017008 <_ZSt7forwardISt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS3_E4typeE>
 8016f94:	4603      	mov	r3, r0
 8016f96:	461a      	mov	r2, r3
 8016f98:	68b9      	ldr	r1, [r7, #8]
 8016f9a:	68f8      	ldr	r0, [r7, #12]
 8016f9c:	f000 f83f 	bl	801701e <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE9constructIS2_JS2_EEEvPT_DpOT0_>
	}
 8016fa0:	bf00      	nop
 8016fa2:	3710      	adds	r7, #16
 8016fa4:	46bd      	mov	sp, r7
 8016fa6:	bd80      	pop	{r7, pc}

08016fa8 <_ZSt4moveIRP6ModuleEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8016fa8:	b480      	push	{r7}
 8016faa:	b083      	sub	sp, #12
 8016fac:	af00      	add	r7, sp, #0
 8016fae:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8016fb0:	687b      	ldr	r3, [r7, #4]
 8016fb2:	4618      	mov	r0, r3
 8016fb4:	370c      	adds	r7, #12
 8016fb6:	46bd      	mov	sp, r7
 8016fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fbc:	4770      	bx	lr

08016fbe <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPSt10shared_ptrI6ModuleES6_EET0_T_S8_S7_>:
	__copy_m(_II __first, _II __last, _OI __result)
 8016fbe:	b580      	push	{r7, lr}
 8016fc0:	b086      	sub	sp, #24
 8016fc2:	af00      	add	r7, sp, #0
 8016fc4:	60f8      	str	r0, [r7, #12]
 8016fc6:	60b9      	str	r1, [r7, #8]
 8016fc8:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8016fca:	68ba      	ldr	r2, [r7, #8]
 8016fcc:	68fb      	ldr	r3, [r7, #12]
 8016fce:	1ad3      	subs	r3, r2, r3
 8016fd0:	10db      	asrs	r3, r3, #3
 8016fd2:	617b      	str	r3, [r7, #20]
 8016fd4:	e010      	b.n	8016ff8 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPSt10shared_ptrI6ModuleES6_EET0_T_S8_S7_+0x3a>
	      *__result = std::move(*__first);
 8016fd6:	68f8      	ldr	r0, [r7, #12]
 8016fd8:	f7ff fc8f 	bl	80168fa <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>
 8016fdc:	4603      	mov	r3, r0
 8016fde:	4619      	mov	r1, r3
 8016fe0:	6878      	ldr	r0, [r7, #4]
 8016fe2:	f7ff fc95 	bl	8016910 <_ZNSt10shared_ptrI6ModuleEaSEOS1_>
	      ++__first;
 8016fe6:	68fb      	ldr	r3, [r7, #12]
 8016fe8:	3308      	adds	r3, #8
 8016fea:	60fb      	str	r3, [r7, #12]
	      ++__result;
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	3308      	adds	r3, #8
 8016ff0:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8016ff2:	697b      	ldr	r3, [r7, #20]
 8016ff4:	3b01      	subs	r3, #1
 8016ff6:	617b      	str	r3, [r7, #20]
 8016ff8:	697b      	ldr	r3, [r7, #20]
 8016ffa:	2b00      	cmp	r3, #0
 8016ffc:	dceb      	bgt.n	8016fd6 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPSt10shared_ptrI6ModuleES6_EET0_T_S8_S7_+0x18>
	  return __result;
 8016ffe:	687b      	ldr	r3, [r7, #4]
	}
 8017000:	4618      	mov	r0, r3
 8017002:	3718      	adds	r7, #24
 8017004:	46bd      	mov	sp, r7
 8017006:	bd80      	pop	{r7, pc}

08017008 <_ZSt7forwardISt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8017008:	b480      	push	{r7}
 801700a:	b083      	sub	sp, #12
 801700c:	af00      	add	r7, sp, #0
 801700e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8017010:	687b      	ldr	r3, [r7, #4]
 8017012:	4618      	mov	r0, r3
 8017014:	370c      	adds	r7, #12
 8017016:	46bd      	mov	sp, r7
 8017018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801701c:	4770      	bx	lr

0801701e <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 801701e:	b590      	push	{r4, r7, lr}
 8017020:	b085      	sub	sp, #20
 8017022:	af00      	add	r7, sp, #0
 8017024:	60f8      	str	r0, [r7, #12]
 8017026:	60b9      	str	r1, [r7, #8]
 8017028:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801702a:	68bb      	ldr	r3, [r7, #8]
 801702c:	4619      	mov	r1, r3
 801702e:	2008      	movs	r0, #8
 8017030:	f7f2 fb66 	bl	8009700 <_ZnwjPv>
 8017034:	4604      	mov	r4, r0
 8017036:	6878      	ldr	r0, [r7, #4]
 8017038:	f7ff ffe6 	bl	8017008 <_ZSt7forwardISt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS3_E4typeE>
 801703c:	4603      	mov	r3, r0
 801703e:	4619      	mov	r1, r3
 8017040:	4620      	mov	r0, r4
 8017042:	f000 f804 	bl	801704e <_ZNSt10shared_ptrI6ModuleEC1EOS1_>
 8017046:	bf00      	nop
 8017048:	3714      	adds	r7, #20
 801704a:	46bd      	mov	sp, r7
 801704c:	bd90      	pop	{r4, r7, pc}

0801704e <_ZNSt10shared_ptrI6ModuleEC1EOS1_>:
      shared_ptr(shared_ptr&& __r) noexcept
 801704e:	b590      	push	{r4, r7, lr}
 8017050:	b083      	sub	sp, #12
 8017052:	af00      	add	r7, sp, #0
 8017054:	6078      	str	r0, [r7, #4]
 8017056:	6039      	str	r1, [r7, #0]
      : __shared_ptr<_Tp>(std::move(__r)) { }
 8017058:	687c      	ldr	r4, [r7, #4]
 801705a:	6838      	ldr	r0, [r7, #0]
 801705c:	f7ff fc4d 	bl	80168fa <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>
 8017060:	4603      	mov	r3, r0
 8017062:	4619      	mov	r1, r3
 8017064:	4620      	mov	r0, r4
 8017066:	f7ff fea0 	bl	8016daa <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	4618      	mov	r0, r3
 801706e:	370c      	adds	r7, #12
 8017070:	46bd      	mov	sp, r7
 8017072:	bd90      	pop	{r4, r7, pc}

08017074 <__NVIC_EnableIRQ>:
{
 8017074:	b480      	push	{r7}
 8017076:	b083      	sub	sp, #12
 8017078:	af00      	add	r7, sp, #0
 801707a:	4603      	mov	r3, r0
 801707c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801707e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017082:	2b00      	cmp	r3, #0
 8017084:	db0b      	blt.n	801709e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8017086:	88fb      	ldrh	r3, [r7, #6]
 8017088:	f003 021f 	and.w	r2, r3, #31
 801708c:	4907      	ldr	r1, [pc, #28]	@ (80170ac <__NVIC_EnableIRQ+0x38>)
 801708e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017092:	095b      	lsrs	r3, r3, #5
 8017094:	2001      	movs	r0, #1
 8017096:	fa00 f202 	lsl.w	r2, r0, r2
 801709a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801709e:	bf00      	nop
 80170a0:	370c      	adds	r7, #12
 80170a2:	46bd      	mov	sp, r7
 80170a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170a8:	4770      	bx	lr
 80170aa:	bf00      	nop
 80170ac:	e000e100 	.word	0xe000e100

080170b0 <_ZN8pruTimerC1EP11TIM_TypeDef9IRQn_TypemP9pruThread>:
#include "pruThread.h"



// Timer constructor
pruTimer::pruTimer(TIM_TypeDef* _timer, IRQn_Type _irq, uint32_t _frequency, pruThread* _ownerPtr):
 80170b0:	b590      	push	{r4, r7, lr}
 80170b2:	b085      	sub	sp, #20
 80170b4:	af00      	add	r7, sp, #0
 80170b6:	60f8      	str	r0, [r7, #12]
 80170b8:	60b9      	str	r1, [r7, #8]
 80170ba:	603b      	str	r3, [r7, #0]
 80170bc:	4613      	mov	r3, r2
 80170be:	80fb      	strh	r3, [r7, #6]
	timer(_timer),
 80170c0:	68fb      	ldr	r3, [r7, #12]
 80170c2:	68ba      	ldr	r2, [r7, #8]
 80170c4:	605a      	str	r2, [r3, #4]
	irq(_irq),
 80170c6:	68fb      	ldr	r3, [r7, #12]
 80170c8:	88fa      	ldrh	r2, [r7, #6]
 80170ca:	811a      	strh	r2, [r3, #8]
	frequency(_frequency),
 80170cc:	68fb      	ldr	r3, [r7, #12]
 80170ce:	683a      	ldr	r2, [r7, #0]
 80170d0:	60da      	str	r2, [r3, #12]
	timerOwnerPtr(_ownerPtr)
 80170d2:	68fb      	ldr	r3, [r7, #12]
 80170d4:	6a3a      	ldr	r2, [r7, #32]
 80170d6:	611a      	str	r2, [r3, #16]
{
	interruptPtr = new TimerInterrupt(irq, this);	// Instantiate a new Timer Interrupt object and pass "this" pointer
 80170d8:	2008      	movs	r0, #8
 80170da:	f00c fec1 	bl	8023e60 <_Znwj>
 80170de:	4603      	mov	r3, r0
 80170e0:	461c      	mov	r4, r3
 80170e2:	68fb      	ldr	r3, [r7, #12]
 80170e4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80170e8:	68fa      	ldr	r2, [r7, #12]
 80170ea:	4619      	mov	r1, r3
 80170ec:	4620      	mov	r0, r4
 80170ee:	f000 f8af 	bl	8017250 <_ZN14TimerInterruptC1EiP8pruTimer>
 80170f2:	68fb      	ldr	r3, [r7, #12]
 80170f4:	601c      	str	r4, [r3, #0]

	startTimer();
 80170f6:	68f8      	ldr	r0, [r7, #12]
 80170f8:	f000 f812 	bl	8017120 <_ZN8pruTimer10startTimerEv>
}
 80170fc:	68fb      	ldr	r3, [r7, #12]
 80170fe:	4618      	mov	r0, r3
 8017100:	3714      	adds	r7, #20
 8017102:	46bd      	mov	sp, r7
 8017104:	bd90      	pop	{r4, r7, pc}

08017106 <_ZN8pruTimer9timerTickEv>:


void pruTimer::timerTick(void)
{
 8017106:	b580      	push	{r7, lr}
 8017108:	b082      	sub	sp, #8
 801710a:	af00      	add	r7, sp, #0
 801710c:	6078      	str	r0, [r7, #4]
	//Do something here
	timerOwnerPtr->update();
 801710e:	687b      	ldr	r3, [r7, #4]
 8017110:	691b      	ldr	r3, [r3, #16]
 8017112:	4618      	mov	r0, r3
 8017114:	f7fe ffdb 	bl	80160ce <_ZN9pruThread6updateEv>
}
 8017118:	bf00      	nop
 801711a:	3708      	adds	r7, #8
 801711c:	46bd      	mov	sp, r7
 801711e:	bd80      	pop	{r7, pc}

08017120 <_ZN8pruTimer10startTimerEv>:



void pruTimer::startTimer(void)
{
 8017120:	b580      	push	{r7, lr}
 8017122:	b086      	sub	sp, #24
 8017124:	af00      	add	r7, sp, #0
 8017126:	6078      	str	r0, [r7, #4]
    uint32_t TIM_CLK;

    if (timer == TIM2)
 8017128:	687b      	ldr	r3, [r7, #4]
 801712a:	685b      	ldr	r3, [r3, #4]
 801712c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017130:	d116      	bne.n	8017160 <_ZN8pruTimer10startTimerEv+0x40>
    {
        printf("	power on Timer 2\n\r");
 8017132:	483f      	ldr	r0, [pc, #252]	@ (8017230 <_ZN8pruTimer10startTimerEv+0x110>)
 8017134:	f00d fc60 	bl	80249f8 <iprintf>
        __HAL_RCC_TIM2_CLK_ENABLE();
 8017138:	4b3e      	ldr	r3, [pc, #248]	@ (8017234 <_ZN8pruTimer10startTimerEv+0x114>)
 801713a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801713e:	4a3d      	ldr	r2, [pc, #244]	@ (8017234 <_ZN8pruTimer10startTimerEv+0x114>)
 8017140:	f043 0301 	orr.w	r3, r3, #1
 8017144:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8017148:	4b3a      	ldr	r3, [pc, #232]	@ (8017234 <_ZN8pruTimer10startTimerEv+0x114>)
 801714a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801714e:	f003 0301 	and.w	r3, r3, #1
 8017152:	613b      	str	r3, [r7, #16]
 8017154:	693b      	ldr	r3, [r7, #16]
        TIM_CLK = APB1CLK;
 8017156:	4b38      	ldr	r3, [pc, #224]	@ (8017238 <_ZN8pruTimer10startTimerEv+0x118>)
 8017158:	681b      	ldr	r3, [r3, #0]
 801715a:	085b      	lsrs	r3, r3, #1
 801715c:	617b      	str	r3, [r7, #20]
 801715e:	e036      	b.n	80171ce <_ZN8pruTimer10startTimerEv+0xae>
    }
    else if (timer == TIM3)
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	685b      	ldr	r3, [r3, #4]
 8017164:	4a35      	ldr	r2, [pc, #212]	@ (801723c <_ZN8pruTimer10startTimerEv+0x11c>)
 8017166:	4293      	cmp	r3, r2
 8017168:	d116      	bne.n	8017198 <_ZN8pruTimer10startTimerEv+0x78>
    {
        printf("	power on Timer 3\n\r");
 801716a:	4835      	ldr	r0, [pc, #212]	@ (8017240 <_ZN8pruTimer10startTimerEv+0x120>)
 801716c:	f00d fc44 	bl	80249f8 <iprintf>
        __HAL_RCC_TIM3_CLK_ENABLE();
 8017170:	4b30      	ldr	r3, [pc, #192]	@ (8017234 <_ZN8pruTimer10startTimerEv+0x114>)
 8017172:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8017176:	4a2f      	ldr	r2, [pc, #188]	@ (8017234 <_ZN8pruTimer10startTimerEv+0x114>)
 8017178:	f043 0302 	orr.w	r3, r3, #2
 801717c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8017180:	4b2c      	ldr	r3, [pc, #176]	@ (8017234 <_ZN8pruTimer10startTimerEv+0x114>)
 8017182:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8017186:	f003 0302 	and.w	r3, r3, #2
 801718a:	60fb      	str	r3, [r7, #12]
 801718c:	68fb      	ldr	r3, [r7, #12]
        TIM_CLK = APB1CLK;
 801718e:	4b2a      	ldr	r3, [pc, #168]	@ (8017238 <_ZN8pruTimer10startTimerEv+0x118>)
 8017190:	681b      	ldr	r3, [r3, #0]
 8017192:	085b      	lsrs	r3, r3, #1
 8017194:	617b      	str	r3, [r7, #20]
 8017196:	e01a      	b.n	80171ce <_ZN8pruTimer10startTimerEv+0xae>
    }
    else if (timer == TIM4)
 8017198:	687b      	ldr	r3, [r7, #4]
 801719a:	685b      	ldr	r3, [r3, #4]
 801719c:	4a29      	ldr	r2, [pc, #164]	@ (8017244 <_ZN8pruTimer10startTimerEv+0x124>)
 801719e:	4293      	cmp	r3, r2
 80171a0:	d115      	bne.n	80171ce <_ZN8pruTimer10startTimerEv+0xae>
    {
        printf("	power on Timer 4\n\r");
 80171a2:	4829      	ldr	r0, [pc, #164]	@ (8017248 <_ZN8pruTimer10startTimerEv+0x128>)
 80171a4:	f00d fc28 	bl	80249f8 <iprintf>
        __HAL_RCC_TIM4_CLK_ENABLE();
 80171a8:	4b22      	ldr	r3, [pc, #136]	@ (8017234 <_ZN8pruTimer10startTimerEv+0x114>)
 80171aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80171ae:	4a21      	ldr	r2, [pc, #132]	@ (8017234 <_ZN8pruTimer10startTimerEv+0x114>)
 80171b0:	f043 0304 	orr.w	r3, r3, #4
 80171b4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80171b8:	4b1e      	ldr	r3, [pc, #120]	@ (8017234 <_ZN8pruTimer10startTimerEv+0x114>)
 80171ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80171be:	f003 0304 	and.w	r3, r3, #4
 80171c2:	60bb      	str	r3, [r7, #8]
 80171c4:	68bb      	ldr	r3, [r7, #8]
        TIM_CLK = APB1CLK;
 80171c6:	4b1c      	ldr	r3, [pc, #112]	@ (8017238 <_ZN8pruTimer10startTimerEv+0x118>)
 80171c8:	681b      	ldr	r3, [r3, #0]
 80171ca:	085b      	lsrs	r3, r3, #1
 80171cc:	617b      	str	r3, [r7, #20]
    }

    //timer update frequency = TIM_CLK/(TIM_PSC+1)/(TIM_ARR + 1)

    timer->CR2 &= 0;                                            // UG used as trigg output
 80171ce:	687b      	ldr	r3, [r7, #4]
 80171d0:	685b      	ldr	r3, [r3, #4]
 80171d2:	685b      	ldr	r3, [r3, #4]
 80171d4:	687b      	ldr	r3, [r7, #4]
 80171d6:	685b      	ldr	r3, [r3, #4]
 80171d8:	2200      	movs	r2, #0
 80171da:	605a      	str	r2, [r3, #4]
    timer->PSC = TIM_PSC-1;                                     // prescaler
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	685b      	ldr	r3, [r3, #4]
 80171e0:	2200      	movs	r2, #0
 80171e2:	629a      	str	r2, [r3, #40]	@ 0x28
    timer->ARR = ((TIM_CLK / TIM_PSC / this->frequency) - 1);   // period
 80171e4:	687b      	ldr	r3, [r7, #4]
 80171e6:	68db      	ldr	r3, [r3, #12]
 80171e8:	697a      	ldr	r2, [r7, #20]
 80171ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	685b      	ldr	r3, [r3, #4]
 80171f2:	3a01      	subs	r2, #1
 80171f4:	62da      	str	r2, [r3, #44]	@ 0x2c
    timer->EGR = TIM_EGR_UG;                                    // reinit the counter
 80171f6:	687b      	ldr	r3, [r7, #4]
 80171f8:	685b      	ldr	r3, [r3, #4]
 80171fa:	2201      	movs	r2, #1
 80171fc:	615a      	str	r2, [r3, #20]
    timer->DIER = TIM_DIER_UIE;                                 // enable update interrupts
 80171fe:	687b      	ldr	r3, [r7, #4]
 8017200:	685b      	ldr	r3, [r3, #4]
 8017202:	2201      	movs	r2, #1
 8017204:	60da      	str	r2, [r3, #12]

    timer->CR1 |= TIM_CR1_CEN;                                  // enable timer
 8017206:	687b      	ldr	r3, [r7, #4]
 8017208:	685b      	ldr	r3, [r3, #4]
 801720a:	681a      	ldr	r2, [r3, #0]
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	685b      	ldr	r3, [r3, #4]
 8017210:	f042 0201 	orr.w	r2, r2, #1
 8017214:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(irq);
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801721c:	4618      	mov	r0, r3
 801721e:	f7ff ff29 	bl	8017074 <__NVIC_EnableIRQ>

    printf("	timer started\n");
 8017222:	480a      	ldr	r0, [pc, #40]	@ (801724c <_ZN8pruTimer10startTimerEv+0x12c>)
 8017224:	f00d fc58 	bl	8024ad8 <puts>
}
 8017228:	bf00      	nop
 801722a:	3718      	adds	r7, #24
 801722c:	46bd      	mov	sp, r7
 801722e:	bd80      	pop	{r7, pc}
 8017230:	08026494 	.word	0x08026494
 8017234:	58024400 	.word	0x58024400
 8017238:	2400001c 	.word	0x2400001c
 801723c:	40000400 	.word	0x40000400
 8017240:	080264a8 	.word	0x080264a8
 8017244:	40000800 	.word	0x40000800
 8017248:	080264bc 	.word	0x080264bc
 801724c:	080264d0 	.word	0x080264d0

08017250 <_ZN14TimerInterruptC1EiP8pruTimer>:
#include "../interrupt/interrupt.h"
#include "timerInterrupt.h"
#include "timer.h"


TimerInterrupt::TimerInterrupt(int interruptNumber, pruTimer* owner)
 8017250:	b580      	push	{r7, lr}
 8017252:	b084      	sub	sp, #16
 8017254:	af00      	add	r7, sp, #0
 8017256:	60f8      	str	r0, [r7, #12]
 8017258:	60b9      	str	r1, [r7, #8]
 801725a:	607a      	str	r2, [r7, #4]
 801725c:	68fb      	ldr	r3, [r7, #12]
 801725e:	4618      	mov	r0, r3
 8017260:	f7ec fd3a 	bl	8003cd8 <_ZN9InterruptC1Ev>
 8017264:	4a07      	ldr	r2, [pc, #28]	@ (8017284 <_ZN14TimerInterruptC1EiP8pruTimer+0x34>)
 8017266:	68fb      	ldr	r3, [r7, #12]
 8017268:	601a      	str	r2, [r3, #0]
{
	// Allows interrupt to access owner's data
	InterruptOwnerPtr = owner;
 801726a:	68fb      	ldr	r3, [r7, #12]
 801726c:	687a      	ldr	r2, [r7, #4]
 801726e:	605a      	str	r2, [r3, #4]

	// When a device interrupt object is instantiated, the Register function must be called to let the
	// Interrupt base class know that there is an appropriate ISR function for the given interrupt.
	Interrupt::Register(interruptNumber, this);
 8017270:	68fb      	ldr	r3, [r7, #12]
 8017272:	4619      	mov	r1, r3
 8017274:	68b8      	ldr	r0, [r7, #8]
 8017276:	f7ec fd3f 	bl	8003cf8 <_ZN9Interrupt8RegisterEiPS_>
}
 801727a:	68fb      	ldr	r3, [r7, #12]
 801727c:	4618      	mov	r0, r3
 801727e:	3710      	adds	r7, #16
 8017280:	46bd      	mov	sp, r7
 8017282:	bd80      	pop	{r7, pc}
 8017284:	080269cc 	.word	0x080269cc

08017288 <_ZN14TimerInterrupt11ISR_HandlerEv>:


void TimerInterrupt::ISR_Handler(void)
{
 8017288:	b580      	push	{r7, lr}
 801728a:	b082      	sub	sp, #8
 801728c:	af00      	add	r7, sp, #0
 801728e:	6078      	str	r0, [r7, #4]
	this->InterruptOwnerPtr->timerTick();
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	685b      	ldr	r3, [r3, #4]
 8017294:	4618      	mov	r0, r3
 8017296:	f7ff ff36 	bl	8017106 <_ZN8pruTimer9timerTickEv>
}
 801729a:	bf00      	nop
 801729c:	3708      	adds	r7, #8
 801729e:	46bd      	mov	sp, r7
 80172a0:	bd80      	pop	{r7, pc}
	...

080172a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80172a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80172dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80172a8:	f7f6 f944 	bl	800d534 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80172ac:	480c      	ldr	r0, [pc, #48]	@ (80172e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80172ae:	490d      	ldr	r1, [pc, #52]	@ (80172e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80172b0:	4a0d      	ldr	r2, [pc, #52]	@ (80172e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80172b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80172b4:	e002      	b.n	80172bc <LoopCopyDataInit>

080172b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80172b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80172b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80172ba:	3304      	adds	r3, #4

080172bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80172bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80172be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80172c0:	d3f9      	bcc.n	80172b6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80172c2:	4a0a      	ldr	r2, [pc, #40]	@ (80172ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80172c4:	4c0a      	ldr	r4, [pc, #40]	@ (80172f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80172c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80172c8:	e001      	b.n	80172ce <LoopFillZerobss>

080172ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80172ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80172cc:	3204      	adds	r2, #4

080172ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80172ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80172d0:	d3fb      	bcc.n	80172ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80172d2:	f00d fdb3 	bl	8024e3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80172d6:	f7f1 ff65 	bl	80091a4 <main>
  bx  lr
 80172da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80172dc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80172e0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80172e4:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 80172e8:	08026d70 	.word	0x08026d70
  ldr r2, =_sbss
 80172ec:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 80172f0:	24000c0c 	.word	0x24000c0c

080172f4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80172f4:	e7fe      	b.n	80172f4 <ADC3_IRQHandler>
	...

080172f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80172f8:	b580      	push	{r7, lr}
 80172fa:	b082      	sub	sp, #8
 80172fc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80172fe:	2003      	movs	r0, #3
 8017300:	f000 f9a2 	bl	8017648 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8017304:	f003 fdc8 	bl	801ae98 <HAL_RCC_GetSysClockFreq>
 8017308:	4602      	mov	r2, r0
 801730a:	4b15      	ldr	r3, [pc, #84]	@ (8017360 <HAL_Init+0x68>)
 801730c:	699b      	ldr	r3, [r3, #24]
 801730e:	0a1b      	lsrs	r3, r3, #8
 8017310:	f003 030f 	and.w	r3, r3, #15
 8017314:	4913      	ldr	r1, [pc, #76]	@ (8017364 <HAL_Init+0x6c>)
 8017316:	5ccb      	ldrb	r3, [r1, r3]
 8017318:	f003 031f 	and.w	r3, r3, #31
 801731c:	fa22 f303 	lsr.w	r3, r2, r3
 8017320:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8017322:	4b0f      	ldr	r3, [pc, #60]	@ (8017360 <HAL_Init+0x68>)
 8017324:	699b      	ldr	r3, [r3, #24]
 8017326:	f003 030f 	and.w	r3, r3, #15
 801732a:	4a0e      	ldr	r2, [pc, #56]	@ (8017364 <HAL_Init+0x6c>)
 801732c:	5cd3      	ldrb	r3, [r2, r3]
 801732e:	f003 031f 	and.w	r3, r3, #31
 8017332:	687a      	ldr	r2, [r7, #4]
 8017334:	fa22 f303 	lsr.w	r3, r2, r3
 8017338:	4a0b      	ldr	r2, [pc, #44]	@ (8017368 <HAL_Init+0x70>)
 801733a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801733c:	4a0b      	ldr	r2, [pc, #44]	@ (801736c <HAL_Init+0x74>)
 801733e:	687b      	ldr	r3, [r7, #4]
 8017340:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8017342:	200f      	movs	r0, #15
 8017344:	f000 f814 	bl	8017370 <HAL_InitTick>
 8017348:	4603      	mov	r3, r0
 801734a:	2b00      	cmp	r3, #0
 801734c:	d001      	beq.n	8017352 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 801734e:	2301      	movs	r3, #1
 8017350:	e002      	b.n	8017358 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8017352:	f7f5 fed5 	bl	800d100 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8017356:	2300      	movs	r3, #0
}
 8017358:	4618      	mov	r0, r3
 801735a:	3708      	adds	r7, #8
 801735c:	46bd      	mov	sp, r7
 801735e:	bd80      	pop	{r7, pc}
 8017360:	58024400 	.word	0x58024400
 8017364:	08026748 	.word	0x08026748
 8017368:	24000020 	.word	0x24000020
 801736c:	2400001c 	.word	0x2400001c

08017370 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8017370:	b580      	push	{r7, lr}
 8017372:	b082      	sub	sp, #8
 8017374:	af00      	add	r7, sp, #0
 8017376:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8017378:	4b15      	ldr	r3, [pc, #84]	@ (80173d0 <HAL_InitTick+0x60>)
 801737a:	781b      	ldrb	r3, [r3, #0]
 801737c:	2b00      	cmp	r3, #0
 801737e:	d101      	bne.n	8017384 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8017380:	2301      	movs	r3, #1
 8017382:	e021      	b.n	80173c8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8017384:	4b13      	ldr	r3, [pc, #76]	@ (80173d4 <HAL_InitTick+0x64>)
 8017386:	681a      	ldr	r2, [r3, #0]
 8017388:	4b11      	ldr	r3, [pc, #68]	@ (80173d0 <HAL_InitTick+0x60>)
 801738a:	781b      	ldrb	r3, [r3, #0]
 801738c:	4619      	mov	r1, r3
 801738e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8017392:	fbb3 f3f1 	udiv	r3, r3, r1
 8017396:	fbb2 f3f3 	udiv	r3, r2, r3
 801739a:	4618      	mov	r0, r3
 801739c:	f000 f98b 	bl	80176b6 <HAL_SYSTICK_Config>
 80173a0:	4603      	mov	r3, r0
 80173a2:	2b00      	cmp	r3, #0
 80173a4:	d001      	beq.n	80173aa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80173a6:	2301      	movs	r3, #1
 80173a8:	e00e      	b.n	80173c8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80173aa:	687b      	ldr	r3, [r7, #4]
 80173ac:	2b0f      	cmp	r3, #15
 80173ae:	d80a      	bhi.n	80173c6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80173b0:	2200      	movs	r2, #0
 80173b2:	6879      	ldr	r1, [r7, #4]
 80173b4:	f04f 30ff 	mov.w	r0, #4294967295
 80173b8:	f000 f951 	bl	801765e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80173bc:	4a06      	ldr	r2, [pc, #24]	@ (80173d8 <HAL_InitTick+0x68>)
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80173c2:	2300      	movs	r3, #0
 80173c4:	e000      	b.n	80173c8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80173c6:	2301      	movs	r3, #1
}
 80173c8:	4618      	mov	r0, r3
 80173ca:	3708      	adds	r7, #8
 80173cc:	46bd      	mov	sp, r7
 80173ce:	bd80      	pop	{r7, pc}
 80173d0:	24000028 	.word	0x24000028
 80173d4:	2400001c 	.word	0x2400001c
 80173d8:	24000024 	.word	0x24000024

080173dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80173dc:	b480      	push	{r7}
 80173de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80173e0:	4b06      	ldr	r3, [pc, #24]	@ (80173fc <HAL_IncTick+0x20>)
 80173e2:	781b      	ldrb	r3, [r3, #0]
 80173e4:	461a      	mov	r2, r3
 80173e6:	4b06      	ldr	r3, [pc, #24]	@ (8017400 <HAL_IncTick+0x24>)
 80173e8:	681b      	ldr	r3, [r3, #0]
 80173ea:	4413      	add	r3, r2
 80173ec:	4a04      	ldr	r2, [pc, #16]	@ (8017400 <HAL_IncTick+0x24>)
 80173ee:	6013      	str	r3, [r2, #0]
}
 80173f0:	bf00      	nop
 80173f2:	46bd      	mov	sp, r7
 80173f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173f8:	4770      	bx	lr
 80173fa:	bf00      	nop
 80173fc:	24000028 	.word	0x24000028
 8017400:	24000414 	.word	0x24000414

08017404 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8017404:	b480      	push	{r7}
 8017406:	af00      	add	r7, sp, #0
  return uwTick;
 8017408:	4b03      	ldr	r3, [pc, #12]	@ (8017418 <HAL_GetTick+0x14>)
 801740a:	681b      	ldr	r3, [r3, #0]
}
 801740c:	4618      	mov	r0, r3
 801740e:	46bd      	mov	sp, r7
 8017410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017414:	4770      	bx	lr
 8017416:	bf00      	nop
 8017418:	24000414 	.word	0x24000414

0801741c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801741c:	b580      	push	{r7, lr}
 801741e:	b084      	sub	sp, #16
 8017420:	af00      	add	r7, sp, #0
 8017422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8017424:	f7ff ffee 	bl	8017404 <HAL_GetTick>
 8017428:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801742a:	687b      	ldr	r3, [r7, #4]
 801742c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801742e:	68fb      	ldr	r3, [r7, #12]
 8017430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017434:	d005      	beq.n	8017442 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8017436:	4b0a      	ldr	r3, [pc, #40]	@ (8017460 <HAL_Delay+0x44>)
 8017438:	781b      	ldrb	r3, [r3, #0]
 801743a:	461a      	mov	r2, r3
 801743c:	68fb      	ldr	r3, [r7, #12]
 801743e:	4413      	add	r3, r2
 8017440:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8017442:	bf00      	nop
 8017444:	f7ff ffde 	bl	8017404 <HAL_GetTick>
 8017448:	4602      	mov	r2, r0
 801744a:	68bb      	ldr	r3, [r7, #8]
 801744c:	1ad3      	subs	r3, r2, r3
 801744e:	68fa      	ldr	r2, [r7, #12]
 8017450:	429a      	cmp	r2, r3
 8017452:	d8f7      	bhi.n	8017444 <HAL_Delay+0x28>
  {
  }
}
 8017454:	bf00      	nop
 8017456:	bf00      	nop
 8017458:	3710      	adds	r7, #16
 801745a:	46bd      	mov	sp, r7
 801745c:	bd80      	pop	{r7, pc}
 801745e:	bf00      	nop
 8017460:	24000028 	.word	0x24000028

08017464 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8017464:	b480      	push	{r7}
 8017466:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8017468:	4b03      	ldr	r3, [pc, #12]	@ (8017478 <HAL_GetREVID+0x14>)
 801746a:	681b      	ldr	r3, [r3, #0]
 801746c:	0c1b      	lsrs	r3, r3, #16
}
 801746e:	4618      	mov	r0, r3
 8017470:	46bd      	mov	sp, r7
 8017472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017476:	4770      	bx	lr
 8017478:	5c001000 	.word	0x5c001000

0801747c <__NVIC_SetPriorityGrouping>:
{
 801747c:	b480      	push	{r7}
 801747e:	b085      	sub	sp, #20
 8017480:	af00      	add	r7, sp, #0
 8017482:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8017484:	687b      	ldr	r3, [r7, #4]
 8017486:	f003 0307 	and.w	r3, r3, #7
 801748a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801748c:	4b0b      	ldr	r3, [pc, #44]	@ (80174bc <__NVIC_SetPriorityGrouping+0x40>)
 801748e:	68db      	ldr	r3, [r3, #12]
 8017490:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8017492:	68ba      	ldr	r2, [r7, #8]
 8017494:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8017498:	4013      	ands	r3, r2
 801749a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801749c:	68fb      	ldr	r3, [r7, #12]
 801749e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80174a0:	68bb      	ldr	r3, [r7, #8]
 80174a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80174a4:	4b06      	ldr	r3, [pc, #24]	@ (80174c0 <__NVIC_SetPriorityGrouping+0x44>)
 80174a6:	4313      	orrs	r3, r2
 80174a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80174aa:	4a04      	ldr	r2, [pc, #16]	@ (80174bc <__NVIC_SetPriorityGrouping+0x40>)
 80174ac:	68bb      	ldr	r3, [r7, #8]
 80174ae:	60d3      	str	r3, [r2, #12]
}
 80174b0:	bf00      	nop
 80174b2:	3714      	adds	r7, #20
 80174b4:	46bd      	mov	sp, r7
 80174b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174ba:	4770      	bx	lr
 80174bc:	e000ed00 	.word	0xe000ed00
 80174c0:	05fa0000 	.word	0x05fa0000

080174c4 <__NVIC_GetPriorityGrouping>:
{
 80174c4:	b480      	push	{r7}
 80174c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80174c8:	4b04      	ldr	r3, [pc, #16]	@ (80174dc <__NVIC_GetPriorityGrouping+0x18>)
 80174ca:	68db      	ldr	r3, [r3, #12]
 80174cc:	0a1b      	lsrs	r3, r3, #8
 80174ce:	f003 0307 	and.w	r3, r3, #7
}
 80174d2:	4618      	mov	r0, r3
 80174d4:	46bd      	mov	sp, r7
 80174d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174da:	4770      	bx	lr
 80174dc:	e000ed00 	.word	0xe000ed00

080174e0 <__NVIC_EnableIRQ>:
{
 80174e0:	b480      	push	{r7}
 80174e2:	b083      	sub	sp, #12
 80174e4:	af00      	add	r7, sp, #0
 80174e6:	4603      	mov	r3, r0
 80174e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80174ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	db0b      	blt.n	801750a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80174f2:	88fb      	ldrh	r3, [r7, #6]
 80174f4:	f003 021f 	and.w	r2, r3, #31
 80174f8:	4907      	ldr	r1, [pc, #28]	@ (8017518 <__NVIC_EnableIRQ+0x38>)
 80174fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80174fe:	095b      	lsrs	r3, r3, #5
 8017500:	2001      	movs	r0, #1
 8017502:	fa00 f202 	lsl.w	r2, r0, r2
 8017506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801750a:	bf00      	nop
 801750c:	370c      	adds	r7, #12
 801750e:	46bd      	mov	sp, r7
 8017510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017514:	4770      	bx	lr
 8017516:	bf00      	nop
 8017518:	e000e100 	.word	0xe000e100

0801751c <__NVIC_SetPriority>:
{
 801751c:	b480      	push	{r7}
 801751e:	b083      	sub	sp, #12
 8017520:	af00      	add	r7, sp, #0
 8017522:	4603      	mov	r3, r0
 8017524:	6039      	str	r1, [r7, #0]
 8017526:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8017528:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801752c:	2b00      	cmp	r3, #0
 801752e:	db0a      	blt.n	8017546 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8017530:	683b      	ldr	r3, [r7, #0]
 8017532:	b2da      	uxtb	r2, r3
 8017534:	490c      	ldr	r1, [pc, #48]	@ (8017568 <__NVIC_SetPriority+0x4c>)
 8017536:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801753a:	0112      	lsls	r2, r2, #4
 801753c:	b2d2      	uxtb	r2, r2
 801753e:	440b      	add	r3, r1
 8017540:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8017544:	e00a      	b.n	801755c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8017546:	683b      	ldr	r3, [r7, #0]
 8017548:	b2da      	uxtb	r2, r3
 801754a:	4908      	ldr	r1, [pc, #32]	@ (801756c <__NVIC_SetPriority+0x50>)
 801754c:	88fb      	ldrh	r3, [r7, #6]
 801754e:	f003 030f 	and.w	r3, r3, #15
 8017552:	3b04      	subs	r3, #4
 8017554:	0112      	lsls	r2, r2, #4
 8017556:	b2d2      	uxtb	r2, r2
 8017558:	440b      	add	r3, r1
 801755a:	761a      	strb	r2, [r3, #24]
}
 801755c:	bf00      	nop
 801755e:	370c      	adds	r7, #12
 8017560:	46bd      	mov	sp, r7
 8017562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017566:	4770      	bx	lr
 8017568:	e000e100 	.word	0xe000e100
 801756c:	e000ed00 	.word	0xe000ed00

08017570 <NVIC_EncodePriority>:
{
 8017570:	b480      	push	{r7}
 8017572:	b089      	sub	sp, #36	@ 0x24
 8017574:	af00      	add	r7, sp, #0
 8017576:	60f8      	str	r0, [r7, #12]
 8017578:	60b9      	str	r1, [r7, #8]
 801757a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801757c:	68fb      	ldr	r3, [r7, #12]
 801757e:	f003 0307 	and.w	r3, r3, #7
 8017582:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8017584:	69fb      	ldr	r3, [r7, #28]
 8017586:	f1c3 0307 	rsb	r3, r3, #7
 801758a:	2b04      	cmp	r3, #4
 801758c:	bf28      	it	cs
 801758e:	2304      	movcs	r3, #4
 8017590:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8017592:	69fb      	ldr	r3, [r7, #28]
 8017594:	3304      	adds	r3, #4
 8017596:	2b06      	cmp	r3, #6
 8017598:	d902      	bls.n	80175a0 <NVIC_EncodePriority+0x30>
 801759a:	69fb      	ldr	r3, [r7, #28]
 801759c:	3b03      	subs	r3, #3
 801759e:	e000      	b.n	80175a2 <NVIC_EncodePriority+0x32>
 80175a0:	2300      	movs	r3, #0
 80175a2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80175a4:	f04f 32ff 	mov.w	r2, #4294967295
 80175a8:	69bb      	ldr	r3, [r7, #24]
 80175aa:	fa02 f303 	lsl.w	r3, r2, r3
 80175ae:	43da      	mvns	r2, r3
 80175b0:	68bb      	ldr	r3, [r7, #8]
 80175b2:	401a      	ands	r2, r3
 80175b4:	697b      	ldr	r3, [r7, #20]
 80175b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80175b8:	f04f 31ff 	mov.w	r1, #4294967295
 80175bc:	697b      	ldr	r3, [r7, #20]
 80175be:	fa01 f303 	lsl.w	r3, r1, r3
 80175c2:	43d9      	mvns	r1, r3
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80175c8:	4313      	orrs	r3, r2
}
 80175ca:	4618      	mov	r0, r3
 80175cc:	3724      	adds	r7, #36	@ 0x24
 80175ce:	46bd      	mov	sp, r7
 80175d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175d4:	4770      	bx	lr
	...

080175d8 <__NVIC_SystemReset>:
{
 80175d8:	b480      	push	{r7}
 80175da:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80175dc:	f3bf 8f4f 	dsb	sy
}
 80175e0:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80175e2:	4b06      	ldr	r3, [pc, #24]	@ (80175fc <__NVIC_SystemReset+0x24>)
 80175e4:	68db      	ldr	r3, [r3, #12]
 80175e6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80175ea:	4904      	ldr	r1, [pc, #16]	@ (80175fc <__NVIC_SystemReset+0x24>)
 80175ec:	4b04      	ldr	r3, [pc, #16]	@ (8017600 <__NVIC_SystemReset+0x28>)
 80175ee:	4313      	orrs	r3, r2
 80175f0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80175f2:	f3bf 8f4f 	dsb	sy
}
 80175f6:	bf00      	nop
    __NOP();
 80175f8:	bf00      	nop
 80175fa:	e7fd      	b.n	80175f8 <__NVIC_SystemReset+0x20>
 80175fc:	e000ed00 	.word	0xe000ed00
 8017600:	05fa0004 	.word	0x05fa0004

08017604 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8017604:	b580      	push	{r7, lr}
 8017606:	b082      	sub	sp, #8
 8017608:	af00      	add	r7, sp, #0
 801760a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801760c:	687b      	ldr	r3, [r7, #4]
 801760e:	3b01      	subs	r3, #1
 8017610:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8017614:	d301      	bcc.n	801761a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8017616:	2301      	movs	r3, #1
 8017618:	e00f      	b.n	801763a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801761a:	4a0a      	ldr	r2, [pc, #40]	@ (8017644 <SysTick_Config+0x40>)
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	3b01      	subs	r3, #1
 8017620:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8017622:	210f      	movs	r1, #15
 8017624:	f04f 30ff 	mov.w	r0, #4294967295
 8017628:	f7ff ff78 	bl	801751c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801762c:	4b05      	ldr	r3, [pc, #20]	@ (8017644 <SysTick_Config+0x40>)
 801762e:	2200      	movs	r2, #0
 8017630:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8017632:	4b04      	ldr	r3, [pc, #16]	@ (8017644 <SysTick_Config+0x40>)
 8017634:	2207      	movs	r2, #7
 8017636:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8017638:	2300      	movs	r3, #0
}
 801763a:	4618      	mov	r0, r3
 801763c:	3708      	adds	r7, #8
 801763e:	46bd      	mov	sp, r7
 8017640:	bd80      	pop	{r7, pc}
 8017642:	bf00      	nop
 8017644:	e000e010 	.word	0xe000e010

08017648 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8017648:	b580      	push	{r7, lr}
 801764a:	b082      	sub	sp, #8
 801764c:	af00      	add	r7, sp, #0
 801764e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8017650:	6878      	ldr	r0, [r7, #4]
 8017652:	f7ff ff13 	bl	801747c <__NVIC_SetPriorityGrouping>
}
 8017656:	bf00      	nop
 8017658:	3708      	adds	r7, #8
 801765a:	46bd      	mov	sp, r7
 801765c:	bd80      	pop	{r7, pc}

0801765e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801765e:	b580      	push	{r7, lr}
 8017660:	b086      	sub	sp, #24
 8017662:	af00      	add	r7, sp, #0
 8017664:	4603      	mov	r3, r0
 8017666:	60b9      	str	r1, [r7, #8]
 8017668:	607a      	str	r2, [r7, #4]
 801766a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 801766c:	f7ff ff2a 	bl	80174c4 <__NVIC_GetPriorityGrouping>
 8017670:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8017672:	687a      	ldr	r2, [r7, #4]
 8017674:	68b9      	ldr	r1, [r7, #8]
 8017676:	6978      	ldr	r0, [r7, #20]
 8017678:	f7ff ff7a 	bl	8017570 <NVIC_EncodePriority>
 801767c:	4602      	mov	r2, r0
 801767e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8017682:	4611      	mov	r1, r2
 8017684:	4618      	mov	r0, r3
 8017686:	f7ff ff49 	bl	801751c <__NVIC_SetPriority>
}
 801768a:	bf00      	nop
 801768c:	3718      	adds	r7, #24
 801768e:	46bd      	mov	sp, r7
 8017690:	bd80      	pop	{r7, pc}

08017692 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8017692:	b580      	push	{r7, lr}
 8017694:	b082      	sub	sp, #8
 8017696:	af00      	add	r7, sp, #0
 8017698:	4603      	mov	r3, r0
 801769a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801769c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80176a0:	4618      	mov	r0, r3
 80176a2:	f7ff ff1d 	bl	80174e0 <__NVIC_EnableIRQ>
}
 80176a6:	bf00      	nop
 80176a8:	3708      	adds	r7, #8
 80176aa:	46bd      	mov	sp, r7
 80176ac:	bd80      	pop	{r7, pc}

080176ae <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80176ae:	b580      	push	{r7, lr}
 80176b0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80176b2:	f7ff ff91 	bl	80175d8 <__NVIC_SystemReset>

080176b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80176b6:	b580      	push	{r7, lr}
 80176b8:	b082      	sub	sp, #8
 80176ba:	af00      	add	r7, sp, #0
 80176bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80176be:	6878      	ldr	r0, [r7, #4]
 80176c0:	f7ff ffa0 	bl	8017604 <SysTick_Config>
 80176c4:	4603      	mov	r3, r0
}
 80176c6:	4618      	mov	r0, r3
 80176c8:	3708      	adds	r7, #8
 80176ca:	46bd      	mov	sp, r7
 80176cc:	bd80      	pop	{r7, pc}
	...

080176d0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80176d0:	b480      	push	{r7}
 80176d2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80176d4:	f3bf 8f5f 	dmb	sy
}
 80176d8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80176da:	4b07      	ldr	r3, [pc, #28]	@ (80176f8 <HAL_MPU_Disable+0x28>)
 80176dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80176de:	4a06      	ldr	r2, [pc, #24]	@ (80176f8 <HAL_MPU_Disable+0x28>)
 80176e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80176e4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80176e6:	4b05      	ldr	r3, [pc, #20]	@ (80176fc <HAL_MPU_Disable+0x2c>)
 80176e8:	2200      	movs	r2, #0
 80176ea:	605a      	str	r2, [r3, #4]
}
 80176ec:	bf00      	nop
 80176ee:	46bd      	mov	sp, r7
 80176f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176f4:	4770      	bx	lr
 80176f6:	bf00      	nop
 80176f8:	e000ed00 	.word	0xe000ed00
 80176fc:	e000ed90 	.word	0xe000ed90

08017700 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8017700:	b480      	push	{r7}
 8017702:	b083      	sub	sp, #12
 8017704:	af00      	add	r7, sp, #0
 8017706:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8017708:	4a0b      	ldr	r2, [pc, #44]	@ (8017738 <HAL_MPU_Enable+0x38>)
 801770a:	687b      	ldr	r3, [r7, #4]
 801770c:	f043 0301 	orr.w	r3, r3, #1
 8017710:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8017712:	4b0a      	ldr	r3, [pc, #40]	@ (801773c <HAL_MPU_Enable+0x3c>)
 8017714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017716:	4a09      	ldr	r2, [pc, #36]	@ (801773c <HAL_MPU_Enable+0x3c>)
 8017718:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801771c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 801771e:	f3bf 8f4f 	dsb	sy
}
 8017722:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8017724:	f3bf 8f6f 	isb	sy
}
 8017728:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 801772a:	bf00      	nop
 801772c:	370c      	adds	r7, #12
 801772e:	46bd      	mov	sp, r7
 8017730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017734:	4770      	bx	lr
 8017736:	bf00      	nop
 8017738:	e000ed90 	.word	0xe000ed90
 801773c:	e000ed00 	.word	0xe000ed00

08017740 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8017740:	b480      	push	{r7}
 8017742:	b083      	sub	sp, #12
 8017744:	af00      	add	r7, sp, #0
 8017746:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8017748:	687b      	ldr	r3, [r7, #4]
 801774a:	785a      	ldrb	r2, [r3, #1]
 801774c:	4b1b      	ldr	r3, [pc, #108]	@ (80177bc <HAL_MPU_ConfigRegion+0x7c>)
 801774e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8017750:	4b1a      	ldr	r3, [pc, #104]	@ (80177bc <HAL_MPU_ConfigRegion+0x7c>)
 8017752:	691b      	ldr	r3, [r3, #16]
 8017754:	4a19      	ldr	r2, [pc, #100]	@ (80177bc <HAL_MPU_ConfigRegion+0x7c>)
 8017756:	f023 0301 	bic.w	r3, r3, #1
 801775a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 801775c:	4a17      	ldr	r2, [pc, #92]	@ (80177bc <HAL_MPU_ConfigRegion+0x7c>)
 801775e:	687b      	ldr	r3, [r7, #4]
 8017760:	685b      	ldr	r3, [r3, #4]
 8017762:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	7b1b      	ldrb	r3, [r3, #12]
 8017768:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 801776a:	687b      	ldr	r3, [r7, #4]
 801776c:	7adb      	ldrb	r3, [r3, #11]
 801776e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8017770:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8017772:	687b      	ldr	r3, [r7, #4]
 8017774:	7a9b      	ldrb	r3, [r3, #10]
 8017776:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8017778:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	7b5b      	ldrb	r3, [r3, #13]
 801777e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8017780:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	7b9b      	ldrb	r3, [r3, #14]
 8017786:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8017788:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 801778a:	687b      	ldr	r3, [r7, #4]
 801778c:	7bdb      	ldrb	r3, [r3, #15]
 801778e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8017790:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8017792:	687b      	ldr	r3, [r7, #4]
 8017794:	7a5b      	ldrb	r3, [r3, #9]
 8017796:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8017798:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801779a:	687b      	ldr	r3, [r7, #4]
 801779c:	7a1b      	ldrb	r3, [r3, #8]
 801779e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80177a0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80177a2:	687a      	ldr	r2, [r7, #4]
 80177a4:	7812      	ldrb	r2, [r2, #0]
 80177a6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80177a8:	4a04      	ldr	r2, [pc, #16]	@ (80177bc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80177aa:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80177ac:	6113      	str	r3, [r2, #16]
}
 80177ae:	bf00      	nop
 80177b0:	370c      	adds	r7, #12
 80177b2:	46bd      	mov	sp, r7
 80177b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177b8:	4770      	bx	lr
 80177ba:	bf00      	nop
 80177bc:	e000ed90 	.word	0xe000ed90

080177c0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80177c0:	b580      	push	{r7, lr}
 80177c2:	b086      	sub	sp, #24
 80177c4:	af00      	add	r7, sp, #0
 80177c6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80177c8:	f7ff fe1c 	bl	8017404 <HAL_GetTick>
 80177cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80177ce:	687b      	ldr	r3, [r7, #4]
 80177d0:	2b00      	cmp	r3, #0
 80177d2:	d101      	bne.n	80177d8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80177d4:	2301      	movs	r3, #1
 80177d6:	e316      	b.n	8017e06 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80177d8:	687b      	ldr	r3, [r7, #4]
 80177da:	681b      	ldr	r3, [r3, #0]
 80177dc:	4a66      	ldr	r2, [pc, #408]	@ (8017978 <HAL_DMA_Init+0x1b8>)
 80177de:	4293      	cmp	r3, r2
 80177e0:	d04a      	beq.n	8017878 <HAL_DMA_Init+0xb8>
 80177e2:	687b      	ldr	r3, [r7, #4]
 80177e4:	681b      	ldr	r3, [r3, #0]
 80177e6:	4a65      	ldr	r2, [pc, #404]	@ (801797c <HAL_DMA_Init+0x1bc>)
 80177e8:	4293      	cmp	r3, r2
 80177ea:	d045      	beq.n	8017878 <HAL_DMA_Init+0xb8>
 80177ec:	687b      	ldr	r3, [r7, #4]
 80177ee:	681b      	ldr	r3, [r3, #0]
 80177f0:	4a63      	ldr	r2, [pc, #396]	@ (8017980 <HAL_DMA_Init+0x1c0>)
 80177f2:	4293      	cmp	r3, r2
 80177f4:	d040      	beq.n	8017878 <HAL_DMA_Init+0xb8>
 80177f6:	687b      	ldr	r3, [r7, #4]
 80177f8:	681b      	ldr	r3, [r3, #0]
 80177fa:	4a62      	ldr	r2, [pc, #392]	@ (8017984 <HAL_DMA_Init+0x1c4>)
 80177fc:	4293      	cmp	r3, r2
 80177fe:	d03b      	beq.n	8017878 <HAL_DMA_Init+0xb8>
 8017800:	687b      	ldr	r3, [r7, #4]
 8017802:	681b      	ldr	r3, [r3, #0]
 8017804:	4a60      	ldr	r2, [pc, #384]	@ (8017988 <HAL_DMA_Init+0x1c8>)
 8017806:	4293      	cmp	r3, r2
 8017808:	d036      	beq.n	8017878 <HAL_DMA_Init+0xb8>
 801780a:	687b      	ldr	r3, [r7, #4]
 801780c:	681b      	ldr	r3, [r3, #0]
 801780e:	4a5f      	ldr	r2, [pc, #380]	@ (801798c <HAL_DMA_Init+0x1cc>)
 8017810:	4293      	cmp	r3, r2
 8017812:	d031      	beq.n	8017878 <HAL_DMA_Init+0xb8>
 8017814:	687b      	ldr	r3, [r7, #4]
 8017816:	681b      	ldr	r3, [r3, #0]
 8017818:	4a5d      	ldr	r2, [pc, #372]	@ (8017990 <HAL_DMA_Init+0x1d0>)
 801781a:	4293      	cmp	r3, r2
 801781c:	d02c      	beq.n	8017878 <HAL_DMA_Init+0xb8>
 801781e:	687b      	ldr	r3, [r7, #4]
 8017820:	681b      	ldr	r3, [r3, #0]
 8017822:	4a5c      	ldr	r2, [pc, #368]	@ (8017994 <HAL_DMA_Init+0x1d4>)
 8017824:	4293      	cmp	r3, r2
 8017826:	d027      	beq.n	8017878 <HAL_DMA_Init+0xb8>
 8017828:	687b      	ldr	r3, [r7, #4]
 801782a:	681b      	ldr	r3, [r3, #0]
 801782c:	4a5a      	ldr	r2, [pc, #360]	@ (8017998 <HAL_DMA_Init+0x1d8>)
 801782e:	4293      	cmp	r3, r2
 8017830:	d022      	beq.n	8017878 <HAL_DMA_Init+0xb8>
 8017832:	687b      	ldr	r3, [r7, #4]
 8017834:	681b      	ldr	r3, [r3, #0]
 8017836:	4a59      	ldr	r2, [pc, #356]	@ (801799c <HAL_DMA_Init+0x1dc>)
 8017838:	4293      	cmp	r3, r2
 801783a:	d01d      	beq.n	8017878 <HAL_DMA_Init+0xb8>
 801783c:	687b      	ldr	r3, [r7, #4]
 801783e:	681b      	ldr	r3, [r3, #0]
 8017840:	4a57      	ldr	r2, [pc, #348]	@ (80179a0 <HAL_DMA_Init+0x1e0>)
 8017842:	4293      	cmp	r3, r2
 8017844:	d018      	beq.n	8017878 <HAL_DMA_Init+0xb8>
 8017846:	687b      	ldr	r3, [r7, #4]
 8017848:	681b      	ldr	r3, [r3, #0]
 801784a:	4a56      	ldr	r2, [pc, #344]	@ (80179a4 <HAL_DMA_Init+0x1e4>)
 801784c:	4293      	cmp	r3, r2
 801784e:	d013      	beq.n	8017878 <HAL_DMA_Init+0xb8>
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	681b      	ldr	r3, [r3, #0]
 8017854:	4a54      	ldr	r2, [pc, #336]	@ (80179a8 <HAL_DMA_Init+0x1e8>)
 8017856:	4293      	cmp	r3, r2
 8017858:	d00e      	beq.n	8017878 <HAL_DMA_Init+0xb8>
 801785a:	687b      	ldr	r3, [r7, #4]
 801785c:	681b      	ldr	r3, [r3, #0]
 801785e:	4a53      	ldr	r2, [pc, #332]	@ (80179ac <HAL_DMA_Init+0x1ec>)
 8017860:	4293      	cmp	r3, r2
 8017862:	d009      	beq.n	8017878 <HAL_DMA_Init+0xb8>
 8017864:	687b      	ldr	r3, [r7, #4]
 8017866:	681b      	ldr	r3, [r3, #0]
 8017868:	4a51      	ldr	r2, [pc, #324]	@ (80179b0 <HAL_DMA_Init+0x1f0>)
 801786a:	4293      	cmp	r3, r2
 801786c:	d004      	beq.n	8017878 <HAL_DMA_Init+0xb8>
 801786e:	687b      	ldr	r3, [r7, #4]
 8017870:	681b      	ldr	r3, [r3, #0]
 8017872:	4a50      	ldr	r2, [pc, #320]	@ (80179b4 <HAL_DMA_Init+0x1f4>)
 8017874:	4293      	cmp	r3, r2
 8017876:	d101      	bne.n	801787c <HAL_DMA_Init+0xbc>
 8017878:	2301      	movs	r3, #1
 801787a:	e000      	b.n	801787e <HAL_DMA_Init+0xbe>
 801787c:	2300      	movs	r3, #0
 801787e:	2b00      	cmp	r3, #0
 8017880:	f000 813b 	beq.w	8017afa <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	2202      	movs	r2, #2
 8017888:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 801788c:	687b      	ldr	r3, [r7, #4]
 801788e:	2200      	movs	r2, #0
 8017890:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8017894:	687b      	ldr	r3, [r7, #4]
 8017896:	681b      	ldr	r3, [r3, #0]
 8017898:	4a37      	ldr	r2, [pc, #220]	@ (8017978 <HAL_DMA_Init+0x1b8>)
 801789a:	4293      	cmp	r3, r2
 801789c:	d04a      	beq.n	8017934 <HAL_DMA_Init+0x174>
 801789e:	687b      	ldr	r3, [r7, #4]
 80178a0:	681b      	ldr	r3, [r3, #0]
 80178a2:	4a36      	ldr	r2, [pc, #216]	@ (801797c <HAL_DMA_Init+0x1bc>)
 80178a4:	4293      	cmp	r3, r2
 80178a6:	d045      	beq.n	8017934 <HAL_DMA_Init+0x174>
 80178a8:	687b      	ldr	r3, [r7, #4]
 80178aa:	681b      	ldr	r3, [r3, #0]
 80178ac:	4a34      	ldr	r2, [pc, #208]	@ (8017980 <HAL_DMA_Init+0x1c0>)
 80178ae:	4293      	cmp	r3, r2
 80178b0:	d040      	beq.n	8017934 <HAL_DMA_Init+0x174>
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	681b      	ldr	r3, [r3, #0]
 80178b6:	4a33      	ldr	r2, [pc, #204]	@ (8017984 <HAL_DMA_Init+0x1c4>)
 80178b8:	4293      	cmp	r3, r2
 80178ba:	d03b      	beq.n	8017934 <HAL_DMA_Init+0x174>
 80178bc:	687b      	ldr	r3, [r7, #4]
 80178be:	681b      	ldr	r3, [r3, #0]
 80178c0:	4a31      	ldr	r2, [pc, #196]	@ (8017988 <HAL_DMA_Init+0x1c8>)
 80178c2:	4293      	cmp	r3, r2
 80178c4:	d036      	beq.n	8017934 <HAL_DMA_Init+0x174>
 80178c6:	687b      	ldr	r3, [r7, #4]
 80178c8:	681b      	ldr	r3, [r3, #0]
 80178ca:	4a30      	ldr	r2, [pc, #192]	@ (801798c <HAL_DMA_Init+0x1cc>)
 80178cc:	4293      	cmp	r3, r2
 80178ce:	d031      	beq.n	8017934 <HAL_DMA_Init+0x174>
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	681b      	ldr	r3, [r3, #0]
 80178d4:	4a2e      	ldr	r2, [pc, #184]	@ (8017990 <HAL_DMA_Init+0x1d0>)
 80178d6:	4293      	cmp	r3, r2
 80178d8:	d02c      	beq.n	8017934 <HAL_DMA_Init+0x174>
 80178da:	687b      	ldr	r3, [r7, #4]
 80178dc:	681b      	ldr	r3, [r3, #0]
 80178de:	4a2d      	ldr	r2, [pc, #180]	@ (8017994 <HAL_DMA_Init+0x1d4>)
 80178e0:	4293      	cmp	r3, r2
 80178e2:	d027      	beq.n	8017934 <HAL_DMA_Init+0x174>
 80178e4:	687b      	ldr	r3, [r7, #4]
 80178e6:	681b      	ldr	r3, [r3, #0]
 80178e8:	4a2b      	ldr	r2, [pc, #172]	@ (8017998 <HAL_DMA_Init+0x1d8>)
 80178ea:	4293      	cmp	r3, r2
 80178ec:	d022      	beq.n	8017934 <HAL_DMA_Init+0x174>
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	681b      	ldr	r3, [r3, #0]
 80178f2:	4a2a      	ldr	r2, [pc, #168]	@ (801799c <HAL_DMA_Init+0x1dc>)
 80178f4:	4293      	cmp	r3, r2
 80178f6:	d01d      	beq.n	8017934 <HAL_DMA_Init+0x174>
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	681b      	ldr	r3, [r3, #0]
 80178fc:	4a28      	ldr	r2, [pc, #160]	@ (80179a0 <HAL_DMA_Init+0x1e0>)
 80178fe:	4293      	cmp	r3, r2
 8017900:	d018      	beq.n	8017934 <HAL_DMA_Init+0x174>
 8017902:	687b      	ldr	r3, [r7, #4]
 8017904:	681b      	ldr	r3, [r3, #0]
 8017906:	4a27      	ldr	r2, [pc, #156]	@ (80179a4 <HAL_DMA_Init+0x1e4>)
 8017908:	4293      	cmp	r3, r2
 801790a:	d013      	beq.n	8017934 <HAL_DMA_Init+0x174>
 801790c:	687b      	ldr	r3, [r7, #4]
 801790e:	681b      	ldr	r3, [r3, #0]
 8017910:	4a25      	ldr	r2, [pc, #148]	@ (80179a8 <HAL_DMA_Init+0x1e8>)
 8017912:	4293      	cmp	r3, r2
 8017914:	d00e      	beq.n	8017934 <HAL_DMA_Init+0x174>
 8017916:	687b      	ldr	r3, [r7, #4]
 8017918:	681b      	ldr	r3, [r3, #0]
 801791a:	4a24      	ldr	r2, [pc, #144]	@ (80179ac <HAL_DMA_Init+0x1ec>)
 801791c:	4293      	cmp	r3, r2
 801791e:	d009      	beq.n	8017934 <HAL_DMA_Init+0x174>
 8017920:	687b      	ldr	r3, [r7, #4]
 8017922:	681b      	ldr	r3, [r3, #0]
 8017924:	4a22      	ldr	r2, [pc, #136]	@ (80179b0 <HAL_DMA_Init+0x1f0>)
 8017926:	4293      	cmp	r3, r2
 8017928:	d004      	beq.n	8017934 <HAL_DMA_Init+0x174>
 801792a:	687b      	ldr	r3, [r7, #4]
 801792c:	681b      	ldr	r3, [r3, #0]
 801792e:	4a21      	ldr	r2, [pc, #132]	@ (80179b4 <HAL_DMA_Init+0x1f4>)
 8017930:	4293      	cmp	r3, r2
 8017932:	d108      	bne.n	8017946 <HAL_DMA_Init+0x186>
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	681b      	ldr	r3, [r3, #0]
 8017938:	681a      	ldr	r2, [r3, #0]
 801793a:	687b      	ldr	r3, [r7, #4]
 801793c:	681b      	ldr	r3, [r3, #0]
 801793e:	f022 0201 	bic.w	r2, r2, #1
 8017942:	601a      	str	r2, [r3, #0]
 8017944:	e007      	b.n	8017956 <HAL_DMA_Init+0x196>
 8017946:	687b      	ldr	r3, [r7, #4]
 8017948:	681b      	ldr	r3, [r3, #0]
 801794a:	681a      	ldr	r2, [r3, #0]
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	681b      	ldr	r3, [r3, #0]
 8017950:	f022 0201 	bic.w	r2, r2, #1
 8017954:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8017956:	e02f      	b.n	80179b8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8017958:	f7ff fd54 	bl	8017404 <HAL_GetTick>
 801795c:	4602      	mov	r2, r0
 801795e:	693b      	ldr	r3, [r7, #16]
 8017960:	1ad3      	subs	r3, r2, r3
 8017962:	2b05      	cmp	r3, #5
 8017964:	d928      	bls.n	80179b8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8017966:	687b      	ldr	r3, [r7, #4]
 8017968:	2220      	movs	r2, #32
 801796a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 801796c:	687b      	ldr	r3, [r7, #4]
 801796e:	2203      	movs	r2, #3
 8017970:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8017974:	2301      	movs	r3, #1
 8017976:	e246      	b.n	8017e06 <HAL_DMA_Init+0x646>
 8017978:	40020010 	.word	0x40020010
 801797c:	40020028 	.word	0x40020028
 8017980:	40020040 	.word	0x40020040
 8017984:	40020058 	.word	0x40020058
 8017988:	40020070 	.word	0x40020070
 801798c:	40020088 	.word	0x40020088
 8017990:	400200a0 	.word	0x400200a0
 8017994:	400200b8 	.word	0x400200b8
 8017998:	40020410 	.word	0x40020410
 801799c:	40020428 	.word	0x40020428
 80179a0:	40020440 	.word	0x40020440
 80179a4:	40020458 	.word	0x40020458
 80179a8:	40020470 	.word	0x40020470
 80179ac:	40020488 	.word	0x40020488
 80179b0:	400204a0 	.word	0x400204a0
 80179b4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80179b8:	687b      	ldr	r3, [r7, #4]
 80179ba:	681b      	ldr	r3, [r3, #0]
 80179bc:	681b      	ldr	r3, [r3, #0]
 80179be:	f003 0301 	and.w	r3, r3, #1
 80179c2:	2b00      	cmp	r3, #0
 80179c4:	d1c8      	bne.n	8017958 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80179c6:	687b      	ldr	r3, [r7, #4]
 80179c8:	681b      	ldr	r3, [r3, #0]
 80179ca:	681b      	ldr	r3, [r3, #0]
 80179cc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80179ce:	697a      	ldr	r2, [r7, #20]
 80179d0:	4b83      	ldr	r3, [pc, #524]	@ (8017be0 <HAL_DMA_Init+0x420>)
 80179d2:	4013      	ands	r3, r2
 80179d4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80179de:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	691b      	ldr	r3, [r3, #16]
 80179e4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80179e6:	687b      	ldr	r3, [r7, #4]
 80179e8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80179ea:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80179ec:	687b      	ldr	r3, [r7, #4]
 80179ee:	699b      	ldr	r3, [r3, #24]
 80179f0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80179f6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	6a1b      	ldr	r3, [r3, #32]
 80179fc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80179fe:	697a      	ldr	r2, [r7, #20]
 8017a00:	4313      	orrs	r3, r2
 8017a02:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8017a04:	687b      	ldr	r3, [r7, #4]
 8017a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017a08:	2b04      	cmp	r3, #4
 8017a0a:	d107      	bne.n	8017a1c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8017a0c:	687b      	ldr	r3, [r7, #4]
 8017a0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017a10:	687b      	ldr	r3, [r7, #4]
 8017a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017a14:	4313      	orrs	r3, r2
 8017a16:	697a      	ldr	r2, [r7, #20]
 8017a18:	4313      	orrs	r3, r2
 8017a1a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8017a1c:	4b71      	ldr	r3, [pc, #452]	@ (8017be4 <HAL_DMA_Init+0x424>)
 8017a1e:	681a      	ldr	r2, [r3, #0]
 8017a20:	4b71      	ldr	r3, [pc, #452]	@ (8017be8 <HAL_DMA_Init+0x428>)
 8017a22:	4013      	ands	r3, r2
 8017a24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8017a28:	d328      	bcc.n	8017a7c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8017a2a:	687b      	ldr	r3, [r7, #4]
 8017a2c:	685b      	ldr	r3, [r3, #4]
 8017a2e:	2b28      	cmp	r3, #40	@ 0x28
 8017a30:	d903      	bls.n	8017a3a <HAL_DMA_Init+0x27a>
 8017a32:	687b      	ldr	r3, [r7, #4]
 8017a34:	685b      	ldr	r3, [r3, #4]
 8017a36:	2b2e      	cmp	r3, #46	@ 0x2e
 8017a38:	d917      	bls.n	8017a6a <HAL_DMA_Init+0x2aa>
 8017a3a:	687b      	ldr	r3, [r7, #4]
 8017a3c:	685b      	ldr	r3, [r3, #4]
 8017a3e:	2b3e      	cmp	r3, #62	@ 0x3e
 8017a40:	d903      	bls.n	8017a4a <HAL_DMA_Init+0x28a>
 8017a42:	687b      	ldr	r3, [r7, #4]
 8017a44:	685b      	ldr	r3, [r3, #4]
 8017a46:	2b42      	cmp	r3, #66	@ 0x42
 8017a48:	d90f      	bls.n	8017a6a <HAL_DMA_Init+0x2aa>
 8017a4a:	687b      	ldr	r3, [r7, #4]
 8017a4c:	685b      	ldr	r3, [r3, #4]
 8017a4e:	2b46      	cmp	r3, #70	@ 0x46
 8017a50:	d903      	bls.n	8017a5a <HAL_DMA_Init+0x29a>
 8017a52:	687b      	ldr	r3, [r7, #4]
 8017a54:	685b      	ldr	r3, [r3, #4]
 8017a56:	2b48      	cmp	r3, #72	@ 0x48
 8017a58:	d907      	bls.n	8017a6a <HAL_DMA_Init+0x2aa>
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	685b      	ldr	r3, [r3, #4]
 8017a5e:	2b4e      	cmp	r3, #78	@ 0x4e
 8017a60:	d905      	bls.n	8017a6e <HAL_DMA_Init+0x2ae>
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	685b      	ldr	r3, [r3, #4]
 8017a66:	2b52      	cmp	r3, #82	@ 0x52
 8017a68:	d801      	bhi.n	8017a6e <HAL_DMA_Init+0x2ae>
 8017a6a:	2301      	movs	r3, #1
 8017a6c:	e000      	b.n	8017a70 <HAL_DMA_Init+0x2b0>
 8017a6e:	2300      	movs	r3, #0
 8017a70:	2b00      	cmp	r3, #0
 8017a72:	d003      	beq.n	8017a7c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8017a74:	697b      	ldr	r3, [r7, #20]
 8017a76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8017a7a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8017a7c:	687b      	ldr	r3, [r7, #4]
 8017a7e:	681b      	ldr	r3, [r3, #0]
 8017a80:	697a      	ldr	r2, [r7, #20]
 8017a82:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8017a84:	687b      	ldr	r3, [r7, #4]
 8017a86:	681b      	ldr	r3, [r3, #0]
 8017a88:	695b      	ldr	r3, [r3, #20]
 8017a8a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8017a8c:	697b      	ldr	r3, [r7, #20]
 8017a8e:	f023 0307 	bic.w	r3, r3, #7
 8017a92:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8017a94:	687b      	ldr	r3, [r7, #4]
 8017a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017a98:	697a      	ldr	r2, [r7, #20]
 8017a9a:	4313      	orrs	r3, r2
 8017a9c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8017a9e:	687b      	ldr	r3, [r7, #4]
 8017aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017aa2:	2b04      	cmp	r3, #4
 8017aa4:	d117      	bne.n	8017ad6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8017aa6:	687b      	ldr	r3, [r7, #4]
 8017aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017aaa:	697a      	ldr	r2, [r7, #20]
 8017aac:	4313      	orrs	r3, r2
 8017aae:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8017ab0:	687b      	ldr	r3, [r7, #4]
 8017ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017ab4:	2b00      	cmp	r3, #0
 8017ab6:	d00e      	beq.n	8017ad6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8017ab8:	6878      	ldr	r0, [r7, #4]
 8017aba:	f001 fc23 	bl	8019304 <DMA_CheckFifoParam>
 8017abe:	4603      	mov	r3, r0
 8017ac0:	2b00      	cmp	r3, #0
 8017ac2:	d008      	beq.n	8017ad6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8017ac4:	687b      	ldr	r3, [r7, #4]
 8017ac6:	2240      	movs	r2, #64	@ 0x40
 8017ac8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8017aca:	687b      	ldr	r3, [r7, #4]
 8017acc:	2201      	movs	r2, #1
 8017ace:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8017ad2:	2301      	movs	r3, #1
 8017ad4:	e197      	b.n	8017e06 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8017ad6:	687b      	ldr	r3, [r7, #4]
 8017ad8:	681b      	ldr	r3, [r3, #0]
 8017ada:	697a      	ldr	r2, [r7, #20]
 8017adc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8017ade:	6878      	ldr	r0, [r7, #4]
 8017ae0:	f001 fb5e 	bl	80191a0 <DMA_CalcBaseAndBitshift>
 8017ae4:	4603      	mov	r3, r0
 8017ae6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8017ae8:	687b      	ldr	r3, [r7, #4]
 8017aea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8017aec:	f003 031f 	and.w	r3, r3, #31
 8017af0:	223f      	movs	r2, #63	@ 0x3f
 8017af2:	409a      	lsls	r2, r3
 8017af4:	68bb      	ldr	r3, [r7, #8]
 8017af6:	609a      	str	r2, [r3, #8]
 8017af8:	e0cd      	b.n	8017c96 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8017afa:	687b      	ldr	r3, [r7, #4]
 8017afc:	681b      	ldr	r3, [r3, #0]
 8017afe:	4a3b      	ldr	r2, [pc, #236]	@ (8017bec <HAL_DMA_Init+0x42c>)
 8017b00:	4293      	cmp	r3, r2
 8017b02:	d022      	beq.n	8017b4a <HAL_DMA_Init+0x38a>
 8017b04:	687b      	ldr	r3, [r7, #4]
 8017b06:	681b      	ldr	r3, [r3, #0]
 8017b08:	4a39      	ldr	r2, [pc, #228]	@ (8017bf0 <HAL_DMA_Init+0x430>)
 8017b0a:	4293      	cmp	r3, r2
 8017b0c:	d01d      	beq.n	8017b4a <HAL_DMA_Init+0x38a>
 8017b0e:	687b      	ldr	r3, [r7, #4]
 8017b10:	681b      	ldr	r3, [r3, #0]
 8017b12:	4a38      	ldr	r2, [pc, #224]	@ (8017bf4 <HAL_DMA_Init+0x434>)
 8017b14:	4293      	cmp	r3, r2
 8017b16:	d018      	beq.n	8017b4a <HAL_DMA_Init+0x38a>
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	681b      	ldr	r3, [r3, #0]
 8017b1c:	4a36      	ldr	r2, [pc, #216]	@ (8017bf8 <HAL_DMA_Init+0x438>)
 8017b1e:	4293      	cmp	r3, r2
 8017b20:	d013      	beq.n	8017b4a <HAL_DMA_Init+0x38a>
 8017b22:	687b      	ldr	r3, [r7, #4]
 8017b24:	681b      	ldr	r3, [r3, #0]
 8017b26:	4a35      	ldr	r2, [pc, #212]	@ (8017bfc <HAL_DMA_Init+0x43c>)
 8017b28:	4293      	cmp	r3, r2
 8017b2a:	d00e      	beq.n	8017b4a <HAL_DMA_Init+0x38a>
 8017b2c:	687b      	ldr	r3, [r7, #4]
 8017b2e:	681b      	ldr	r3, [r3, #0]
 8017b30:	4a33      	ldr	r2, [pc, #204]	@ (8017c00 <HAL_DMA_Init+0x440>)
 8017b32:	4293      	cmp	r3, r2
 8017b34:	d009      	beq.n	8017b4a <HAL_DMA_Init+0x38a>
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	681b      	ldr	r3, [r3, #0]
 8017b3a:	4a32      	ldr	r2, [pc, #200]	@ (8017c04 <HAL_DMA_Init+0x444>)
 8017b3c:	4293      	cmp	r3, r2
 8017b3e:	d004      	beq.n	8017b4a <HAL_DMA_Init+0x38a>
 8017b40:	687b      	ldr	r3, [r7, #4]
 8017b42:	681b      	ldr	r3, [r3, #0]
 8017b44:	4a30      	ldr	r2, [pc, #192]	@ (8017c08 <HAL_DMA_Init+0x448>)
 8017b46:	4293      	cmp	r3, r2
 8017b48:	d101      	bne.n	8017b4e <HAL_DMA_Init+0x38e>
 8017b4a:	2301      	movs	r3, #1
 8017b4c:	e000      	b.n	8017b50 <HAL_DMA_Init+0x390>
 8017b4e:	2300      	movs	r3, #0
 8017b50:	2b00      	cmp	r3, #0
 8017b52:	f000 8097 	beq.w	8017c84 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8017b56:	687b      	ldr	r3, [r7, #4]
 8017b58:	681b      	ldr	r3, [r3, #0]
 8017b5a:	4a24      	ldr	r2, [pc, #144]	@ (8017bec <HAL_DMA_Init+0x42c>)
 8017b5c:	4293      	cmp	r3, r2
 8017b5e:	d021      	beq.n	8017ba4 <HAL_DMA_Init+0x3e4>
 8017b60:	687b      	ldr	r3, [r7, #4]
 8017b62:	681b      	ldr	r3, [r3, #0]
 8017b64:	4a22      	ldr	r2, [pc, #136]	@ (8017bf0 <HAL_DMA_Init+0x430>)
 8017b66:	4293      	cmp	r3, r2
 8017b68:	d01c      	beq.n	8017ba4 <HAL_DMA_Init+0x3e4>
 8017b6a:	687b      	ldr	r3, [r7, #4]
 8017b6c:	681b      	ldr	r3, [r3, #0]
 8017b6e:	4a21      	ldr	r2, [pc, #132]	@ (8017bf4 <HAL_DMA_Init+0x434>)
 8017b70:	4293      	cmp	r3, r2
 8017b72:	d017      	beq.n	8017ba4 <HAL_DMA_Init+0x3e4>
 8017b74:	687b      	ldr	r3, [r7, #4]
 8017b76:	681b      	ldr	r3, [r3, #0]
 8017b78:	4a1f      	ldr	r2, [pc, #124]	@ (8017bf8 <HAL_DMA_Init+0x438>)
 8017b7a:	4293      	cmp	r3, r2
 8017b7c:	d012      	beq.n	8017ba4 <HAL_DMA_Init+0x3e4>
 8017b7e:	687b      	ldr	r3, [r7, #4]
 8017b80:	681b      	ldr	r3, [r3, #0]
 8017b82:	4a1e      	ldr	r2, [pc, #120]	@ (8017bfc <HAL_DMA_Init+0x43c>)
 8017b84:	4293      	cmp	r3, r2
 8017b86:	d00d      	beq.n	8017ba4 <HAL_DMA_Init+0x3e4>
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	681b      	ldr	r3, [r3, #0]
 8017b8c:	4a1c      	ldr	r2, [pc, #112]	@ (8017c00 <HAL_DMA_Init+0x440>)
 8017b8e:	4293      	cmp	r3, r2
 8017b90:	d008      	beq.n	8017ba4 <HAL_DMA_Init+0x3e4>
 8017b92:	687b      	ldr	r3, [r7, #4]
 8017b94:	681b      	ldr	r3, [r3, #0]
 8017b96:	4a1b      	ldr	r2, [pc, #108]	@ (8017c04 <HAL_DMA_Init+0x444>)
 8017b98:	4293      	cmp	r3, r2
 8017b9a:	d003      	beq.n	8017ba4 <HAL_DMA_Init+0x3e4>
 8017b9c:	687b      	ldr	r3, [r7, #4]
 8017b9e:	681b      	ldr	r3, [r3, #0]
 8017ba0:	4a19      	ldr	r2, [pc, #100]	@ (8017c08 <HAL_DMA_Init+0x448>)
 8017ba2:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8017ba4:	687b      	ldr	r3, [r7, #4]
 8017ba6:	2202      	movs	r2, #2
 8017ba8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8017bac:	687b      	ldr	r3, [r7, #4]
 8017bae:	2200      	movs	r2, #0
 8017bb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8017bb4:	687b      	ldr	r3, [r7, #4]
 8017bb6:	681b      	ldr	r3, [r3, #0]
 8017bb8:	681b      	ldr	r3, [r3, #0]
 8017bba:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8017bbc:	697a      	ldr	r2, [r7, #20]
 8017bbe:	4b13      	ldr	r3, [pc, #76]	@ (8017c0c <HAL_DMA_Init+0x44c>)
 8017bc0:	4013      	ands	r3, r2
 8017bc2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8017bc4:	687b      	ldr	r3, [r7, #4]
 8017bc6:	689b      	ldr	r3, [r3, #8]
 8017bc8:	2b40      	cmp	r3, #64	@ 0x40
 8017bca:	d021      	beq.n	8017c10 <HAL_DMA_Init+0x450>
 8017bcc:	687b      	ldr	r3, [r7, #4]
 8017bce:	689b      	ldr	r3, [r3, #8]
 8017bd0:	2b80      	cmp	r3, #128	@ 0x80
 8017bd2:	d102      	bne.n	8017bda <HAL_DMA_Init+0x41a>
 8017bd4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8017bd8:	e01b      	b.n	8017c12 <HAL_DMA_Init+0x452>
 8017bda:	2300      	movs	r3, #0
 8017bdc:	e019      	b.n	8017c12 <HAL_DMA_Init+0x452>
 8017bde:	bf00      	nop
 8017be0:	fe10803f 	.word	0xfe10803f
 8017be4:	5c001000 	.word	0x5c001000
 8017be8:	ffff0000 	.word	0xffff0000
 8017bec:	58025408 	.word	0x58025408
 8017bf0:	5802541c 	.word	0x5802541c
 8017bf4:	58025430 	.word	0x58025430
 8017bf8:	58025444 	.word	0x58025444
 8017bfc:	58025458 	.word	0x58025458
 8017c00:	5802546c 	.word	0x5802546c
 8017c04:	58025480 	.word	0x58025480
 8017c08:	58025494 	.word	0x58025494
 8017c0c:	fffe000f 	.word	0xfffe000f
 8017c10:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8017c12:	687a      	ldr	r2, [r7, #4]
 8017c14:	68d2      	ldr	r2, [r2, #12]
 8017c16:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8017c18:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8017c1a:	687b      	ldr	r3, [r7, #4]
 8017c1c:	691b      	ldr	r3, [r3, #16]
 8017c1e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8017c20:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8017c22:	687b      	ldr	r3, [r7, #4]
 8017c24:	695b      	ldr	r3, [r3, #20]
 8017c26:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8017c28:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8017c2a:	687b      	ldr	r3, [r7, #4]
 8017c2c:	699b      	ldr	r3, [r3, #24]
 8017c2e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8017c30:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8017c32:	687b      	ldr	r3, [r7, #4]
 8017c34:	69db      	ldr	r3, [r3, #28]
 8017c36:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8017c38:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8017c3a:	687b      	ldr	r3, [r7, #4]
 8017c3c:	6a1b      	ldr	r3, [r3, #32]
 8017c3e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8017c40:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8017c42:	697a      	ldr	r2, [r7, #20]
 8017c44:	4313      	orrs	r3, r2
 8017c46:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	681b      	ldr	r3, [r3, #0]
 8017c4c:	697a      	ldr	r2, [r7, #20]
 8017c4e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8017c50:	687b      	ldr	r3, [r7, #4]
 8017c52:	681b      	ldr	r3, [r3, #0]
 8017c54:	461a      	mov	r2, r3
 8017c56:	4b6e      	ldr	r3, [pc, #440]	@ (8017e10 <HAL_DMA_Init+0x650>)
 8017c58:	4413      	add	r3, r2
 8017c5a:	4a6e      	ldr	r2, [pc, #440]	@ (8017e14 <HAL_DMA_Init+0x654>)
 8017c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8017c60:	091b      	lsrs	r3, r3, #4
 8017c62:	009a      	lsls	r2, r3, #2
 8017c64:	687b      	ldr	r3, [r7, #4]
 8017c66:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8017c68:	6878      	ldr	r0, [r7, #4]
 8017c6a:	f001 fa99 	bl	80191a0 <DMA_CalcBaseAndBitshift>
 8017c6e:	4603      	mov	r3, r0
 8017c70:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8017c72:	687b      	ldr	r3, [r7, #4]
 8017c74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8017c76:	f003 031f 	and.w	r3, r3, #31
 8017c7a:	2201      	movs	r2, #1
 8017c7c:	409a      	lsls	r2, r3
 8017c7e:	68fb      	ldr	r3, [r7, #12]
 8017c80:	605a      	str	r2, [r3, #4]
 8017c82:	e008      	b.n	8017c96 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	2240      	movs	r2, #64	@ 0x40
 8017c88:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8017c8a:	687b      	ldr	r3, [r7, #4]
 8017c8c:	2203      	movs	r2, #3
 8017c8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8017c92:	2301      	movs	r3, #1
 8017c94:	e0b7      	b.n	8017e06 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8017c96:	687b      	ldr	r3, [r7, #4]
 8017c98:	681b      	ldr	r3, [r3, #0]
 8017c9a:	4a5f      	ldr	r2, [pc, #380]	@ (8017e18 <HAL_DMA_Init+0x658>)
 8017c9c:	4293      	cmp	r3, r2
 8017c9e:	d072      	beq.n	8017d86 <HAL_DMA_Init+0x5c6>
 8017ca0:	687b      	ldr	r3, [r7, #4]
 8017ca2:	681b      	ldr	r3, [r3, #0]
 8017ca4:	4a5d      	ldr	r2, [pc, #372]	@ (8017e1c <HAL_DMA_Init+0x65c>)
 8017ca6:	4293      	cmp	r3, r2
 8017ca8:	d06d      	beq.n	8017d86 <HAL_DMA_Init+0x5c6>
 8017caa:	687b      	ldr	r3, [r7, #4]
 8017cac:	681b      	ldr	r3, [r3, #0]
 8017cae:	4a5c      	ldr	r2, [pc, #368]	@ (8017e20 <HAL_DMA_Init+0x660>)
 8017cb0:	4293      	cmp	r3, r2
 8017cb2:	d068      	beq.n	8017d86 <HAL_DMA_Init+0x5c6>
 8017cb4:	687b      	ldr	r3, [r7, #4]
 8017cb6:	681b      	ldr	r3, [r3, #0]
 8017cb8:	4a5a      	ldr	r2, [pc, #360]	@ (8017e24 <HAL_DMA_Init+0x664>)
 8017cba:	4293      	cmp	r3, r2
 8017cbc:	d063      	beq.n	8017d86 <HAL_DMA_Init+0x5c6>
 8017cbe:	687b      	ldr	r3, [r7, #4]
 8017cc0:	681b      	ldr	r3, [r3, #0]
 8017cc2:	4a59      	ldr	r2, [pc, #356]	@ (8017e28 <HAL_DMA_Init+0x668>)
 8017cc4:	4293      	cmp	r3, r2
 8017cc6:	d05e      	beq.n	8017d86 <HAL_DMA_Init+0x5c6>
 8017cc8:	687b      	ldr	r3, [r7, #4]
 8017cca:	681b      	ldr	r3, [r3, #0]
 8017ccc:	4a57      	ldr	r2, [pc, #348]	@ (8017e2c <HAL_DMA_Init+0x66c>)
 8017cce:	4293      	cmp	r3, r2
 8017cd0:	d059      	beq.n	8017d86 <HAL_DMA_Init+0x5c6>
 8017cd2:	687b      	ldr	r3, [r7, #4]
 8017cd4:	681b      	ldr	r3, [r3, #0]
 8017cd6:	4a56      	ldr	r2, [pc, #344]	@ (8017e30 <HAL_DMA_Init+0x670>)
 8017cd8:	4293      	cmp	r3, r2
 8017cda:	d054      	beq.n	8017d86 <HAL_DMA_Init+0x5c6>
 8017cdc:	687b      	ldr	r3, [r7, #4]
 8017cde:	681b      	ldr	r3, [r3, #0]
 8017ce0:	4a54      	ldr	r2, [pc, #336]	@ (8017e34 <HAL_DMA_Init+0x674>)
 8017ce2:	4293      	cmp	r3, r2
 8017ce4:	d04f      	beq.n	8017d86 <HAL_DMA_Init+0x5c6>
 8017ce6:	687b      	ldr	r3, [r7, #4]
 8017ce8:	681b      	ldr	r3, [r3, #0]
 8017cea:	4a53      	ldr	r2, [pc, #332]	@ (8017e38 <HAL_DMA_Init+0x678>)
 8017cec:	4293      	cmp	r3, r2
 8017cee:	d04a      	beq.n	8017d86 <HAL_DMA_Init+0x5c6>
 8017cf0:	687b      	ldr	r3, [r7, #4]
 8017cf2:	681b      	ldr	r3, [r3, #0]
 8017cf4:	4a51      	ldr	r2, [pc, #324]	@ (8017e3c <HAL_DMA_Init+0x67c>)
 8017cf6:	4293      	cmp	r3, r2
 8017cf8:	d045      	beq.n	8017d86 <HAL_DMA_Init+0x5c6>
 8017cfa:	687b      	ldr	r3, [r7, #4]
 8017cfc:	681b      	ldr	r3, [r3, #0]
 8017cfe:	4a50      	ldr	r2, [pc, #320]	@ (8017e40 <HAL_DMA_Init+0x680>)
 8017d00:	4293      	cmp	r3, r2
 8017d02:	d040      	beq.n	8017d86 <HAL_DMA_Init+0x5c6>
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	681b      	ldr	r3, [r3, #0]
 8017d08:	4a4e      	ldr	r2, [pc, #312]	@ (8017e44 <HAL_DMA_Init+0x684>)
 8017d0a:	4293      	cmp	r3, r2
 8017d0c:	d03b      	beq.n	8017d86 <HAL_DMA_Init+0x5c6>
 8017d0e:	687b      	ldr	r3, [r7, #4]
 8017d10:	681b      	ldr	r3, [r3, #0]
 8017d12:	4a4d      	ldr	r2, [pc, #308]	@ (8017e48 <HAL_DMA_Init+0x688>)
 8017d14:	4293      	cmp	r3, r2
 8017d16:	d036      	beq.n	8017d86 <HAL_DMA_Init+0x5c6>
 8017d18:	687b      	ldr	r3, [r7, #4]
 8017d1a:	681b      	ldr	r3, [r3, #0]
 8017d1c:	4a4b      	ldr	r2, [pc, #300]	@ (8017e4c <HAL_DMA_Init+0x68c>)
 8017d1e:	4293      	cmp	r3, r2
 8017d20:	d031      	beq.n	8017d86 <HAL_DMA_Init+0x5c6>
 8017d22:	687b      	ldr	r3, [r7, #4]
 8017d24:	681b      	ldr	r3, [r3, #0]
 8017d26:	4a4a      	ldr	r2, [pc, #296]	@ (8017e50 <HAL_DMA_Init+0x690>)
 8017d28:	4293      	cmp	r3, r2
 8017d2a:	d02c      	beq.n	8017d86 <HAL_DMA_Init+0x5c6>
 8017d2c:	687b      	ldr	r3, [r7, #4]
 8017d2e:	681b      	ldr	r3, [r3, #0]
 8017d30:	4a48      	ldr	r2, [pc, #288]	@ (8017e54 <HAL_DMA_Init+0x694>)
 8017d32:	4293      	cmp	r3, r2
 8017d34:	d027      	beq.n	8017d86 <HAL_DMA_Init+0x5c6>
 8017d36:	687b      	ldr	r3, [r7, #4]
 8017d38:	681b      	ldr	r3, [r3, #0]
 8017d3a:	4a47      	ldr	r2, [pc, #284]	@ (8017e58 <HAL_DMA_Init+0x698>)
 8017d3c:	4293      	cmp	r3, r2
 8017d3e:	d022      	beq.n	8017d86 <HAL_DMA_Init+0x5c6>
 8017d40:	687b      	ldr	r3, [r7, #4]
 8017d42:	681b      	ldr	r3, [r3, #0]
 8017d44:	4a45      	ldr	r2, [pc, #276]	@ (8017e5c <HAL_DMA_Init+0x69c>)
 8017d46:	4293      	cmp	r3, r2
 8017d48:	d01d      	beq.n	8017d86 <HAL_DMA_Init+0x5c6>
 8017d4a:	687b      	ldr	r3, [r7, #4]
 8017d4c:	681b      	ldr	r3, [r3, #0]
 8017d4e:	4a44      	ldr	r2, [pc, #272]	@ (8017e60 <HAL_DMA_Init+0x6a0>)
 8017d50:	4293      	cmp	r3, r2
 8017d52:	d018      	beq.n	8017d86 <HAL_DMA_Init+0x5c6>
 8017d54:	687b      	ldr	r3, [r7, #4]
 8017d56:	681b      	ldr	r3, [r3, #0]
 8017d58:	4a42      	ldr	r2, [pc, #264]	@ (8017e64 <HAL_DMA_Init+0x6a4>)
 8017d5a:	4293      	cmp	r3, r2
 8017d5c:	d013      	beq.n	8017d86 <HAL_DMA_Init+0x5c6>
 8017d5e:	687b      	ldr	r3, [r7, #4]
 8017d60:	681b      	ldr	r3, [r3, #0]
 8017d62:	4a41      	ldr	r2, [pc, #260]	@ (8017e68 <HAL_DMA_Init+0x6a8>)
 8017d64:	4293      	cmp	r3, r2
 8017d66:	d00e      	beq.n	8017d86 <HAL_DMA_Init+0x5c6>
 8017d68:	687b      	ldr	r3, [r7, #4]
 8017d6a:	681b      	ldr	r3, [r3, #0]
 8017d6c:	4a3f      	ldr	r2, [pc, #252]	@ (8017e6c <HAL_DMA_Init+0x6ac>)
 8017d6e:	4293      	cmp	r3, r2
 8017d70:	d009      	beq.n	8017d86 <HAL_DMA_Init+0x5c6>
 8017d72:	687b      	ldr	r3, [r7, #4]
 8017d74:	681b      	ldr	r3, [r3, #0]
 8017d76:	4a3e      	ldr	r2, [pc, #248]	@ (8017e70 <HAL_DMA_Init+0x6b0>)
 8017d78:	4293      	cmp	r3, r2
 8017d7a:	d004      	beq.n	8017d86 <HAL_DMA_Init+0x5c6>
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	681b      	ldr	r3, [r3, #0]
 8017d80:	4a3c      	ldr	r2, [pc, #240]	@ (8017e74 <HAL_DMA_Init+0x6b4>)
 8017d82:	4293      	cmp	r3, r2
 8017d84:	d101      	bne.n	8017d8a <HAL_DMA_Init+0x5ca>
 8017d86:	2301      	movs	r3, #1
 8017d88:	e000      	b.n	8017d8c <HAL_DMA_Init+0x5cc>
 8017d8a:	2300      	movs	r3, #0
 8017d8c:	2b00      	cmp	r3, #0
 8017d8e:	d032      	beq.n	8017df6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8017d90:	6878      	ldr	r0, [r7, #4]
 8017d92:	f001 fb33 	bl	80193fc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8017d96:	687b      	ldr	r3, [r7, #4]
 8017d98:	689b      	ldr	r3, [r3, #8]
 8017d9a:	2b80      	cmp	r3, #128	@ 0x80
 8017d9c:	d102      	bne.n	8017da4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8017d9e:	687b      	ldr	r3, [r7, #4]
 8017da0:	2200      	movs	r2, #0
 8017da2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8017da4:	687b      	ldr	r3, [r7, #4]
 8017da6:	685a      	ldr	r2, [r3, #4]
 8017da8:	687b      	ldr	r3, [r7, #4]
 8017daa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017dac:	b2d2      	uxtb	r2, r2
 8017dae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8017db0:	687b      	ldr	r3, [r7, #4]
 8017db2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8017db4:	687a      	ldr	r2, [r7, #4]
 8017db6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8017db8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8017dba:	687b      	ldr	r3, [r7, #4]
 8017dbc:	685b      	ldr	r3, [r3, #4]
 8017dbe:	2b00      	cmp	r3, #0
 8017dc0:	d010      	beq.n	8017de4 <HAL_DMA_Init+0x624>
 8017dc2:	687b      	ldr	r3, [r7, #4]
 8017dc4:	685b      	ldr	r3, [r3, #4]
 8017dc6:	2b08      	cmp	r3, #8
 8017dc8:	d80c      	bhi.n	8017de4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8017dca:	6878      	ldr	r0, [r7, #4]
 8017dcc:	f001 fbb0 	bl	8019530 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8017dd0:	687b      	ldr	r3, [r7, #4]
 8017dd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017dd4:	2200      	movs	r2, #0
 8017dd6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8017dd8:	687b      	ldr	r3, [r7, #4]
 8017dda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017ddc:	687a      	ldr	r2, [r7, #4]
 8017dde:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8017de0:	605a      	str	r2, [r3, #4]
 8017de2:	e008      	b.n	8017df6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8017de4:	687b      	ldr	r3, [r7, #4]
 8017de6:	2200      	movs	r2, #0
 8017de8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8017dea:	687b      	ldr	r3, [r7, #4]
 8017dec:	2200      	movs	r2, #0
 8017dee:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8017df0:	687b      	ldr	r3, [r7, #4]
 8017df2:	2200      	movs	r2, #0
 8017df4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8017df6:	687b      	ldr	r3, [r7, #4]
 8017df8:	2200      	movs	r2, #0
 8017dfa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8017dfc:	687b      	ldr	r3, [r7, #4]
 8017dfe:	2201      	movs	r2, #1
 8017e00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8017e04:	2300      	movs	r3, #0
}
 8017e06:	4618      	mov	r0, r3
 8017e08:	3718      	adds	r7, #24
 8017e0a:	46bd      	mov	sp, r7
 8017e0c:	bd80      	pop	{r7, pc}
 8017e0e:	bf00      	nop
 8017e10:	a7fdabf8 	.word	0xa7fdabf8
 8017e14:	cccccccd 	.word	0xcccccccd
 8017e18:	40020010 	.word	0x40020010
 8017e1c:	40020028 	.word	0x40020028
 8017e20:	40020040 	.word	0x40020040
 8017e24:	40020058 	.word	0x40020058
 8017e28:	40020070 	.word	0x40020070
 8017e2c:	40020088 	.word	0x40020088
 8017e30:	400200a0 	.word	0x400200a0
 8017e34:	400200b8 	.word	0x400200b8
 8017e38:	40020410 	.word	0x40020410
 8017e3c:	40020428 	.word	0x40020428
 8017e40:	40020440 	.word	0x40020440
 8017e44:	40020458 	.word	0x40020458
 8017e48:	40020470 	.word	0x40020470
 8017e4c:	40020488 	.word	0x40020488
 8017e50:	400204a0 	.word	0x400204a0
 8017e54:	400204b8 	.word	0x400204b8
 8017e58:	58025408 	.word	0x58025408
 8017e5c:	5802541c 	.word	0x5802541c
 8017e60:	58025430 	.word	0x58025430
 8017e64:	58025444 	.word	0x58025444
 8017e68:	58025458 	.word	0x58025458
 8017e6c:	5802546c 	.word	0x5802546c
 8017e70:	58025480 	.word	0x58025480
 8017e74:	58025494 	.word	0x58025494

08017e78 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8017e78:	b580      	push	{r7, lr}
 8017e7a:	b086      	sub	sp, #24
 8017e7c:	af00      	add	r7, sp, #0
 8017e7e:	60f8      	str	r0, [r7, #12]
 8017e80:	60b9      	str	r1, [r7, #8]
 8017e82:	607a      	str	r2, [r7, #4]
 8017e84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8017e86:	2300      	movs	r3, #0
 8017e88:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8017e8a:	68fb      	ldr	r3, [r7, #12]
 8017e8c:	2b00      	cmp	r3, #0
 8017e8e:	d101      	bne.n	8017e94 <HAL_DMA_Start+0x1c>
  {
    return HAL_ERROR;
 8017e90:	2301      	movs	r3, #1
 8017e92:	e0ec      	b.n	801806e <HAL_DMA_Start+0x1f6>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8017e94:	68fb      	ldr	r3, [r7, #12]
 8017e96:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8017e9a:	2b01      	cmp	r3, #1
 8017e9c:	d101      	bne.n	8017ea2 <HAL_DMA_Start+0x2a>
 8017e9e:	2302      	movs	r3, #2
 8017ea0:	e0e5      	b.n	801806e <HAL_DMA_Start+0x1f6>
 8017ea2:	68fb      	ldr	r3, [r7, #12]
 8017ea4:	2201      	movs	r2, #1
 8017ea6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8017eaa:	68fb      	ldr	r3, [r7, #12]
 8017eac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8017eb0:	b2db      	uxtb	r3, r3
 8017eb2:	2b01      	cmp	r3, #1
 8017eb4:	f040 80d0 	bne.w	8018058 <HAL_DMA_Start+0x1e0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8017eb8:	68fb      	ldr	r3, [r7, #12]
 8017eba:	2202      	movs	r2, #2
 8017ebc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8017ec0:	68fb      	ldr	r3, [r7, #12]
 8017ec2:	2200      	movs	r2, #0
 8017ec4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8017ec6:	68fb      	ldr	r3, [r7, #12]
 8017ec8:	681b      	ldr	r3, [r3, #0]
 8017eca:	4a6b      	ldr	r2, [pc, #428]	@ (8018078 <HAL_DMA_Start+0x200>)
 8017ecc:	4293      	cmp	r3, r2
 8017ece:	d04a      	beq.n	8017f66 <HAL_DMA_Start+0xee>
 8017ed0:	68fb      	ldr	r3, [r7, #12]
 8017ed2:	681b      	ldr	r3, [r3, #0]
 8017ed4:	4a69      	ldr	r2, [pc, #420]	@ (801807c <HAL_DMA_Start+0x204>)
 8017ed6:	4293      	cmp	r3, r2
 8017ed8:	d045      	beq.n	8017f66 <HAL_DMA_Start+0xee>
 8017eda:	68fb      	ldr	r3, [r7, #12]
 8017edc:	681b      	ldr	r3, [r3, #0]
 8017ede:	4a68      	ldr	r2, [pc, #416]	@ (8018080 <HAL_DMA_Start+0x208>)
 8017ee0:	4293      	cmp	r3, r2
 8017ee2:	d040      	beq.n	8017f66 <HAL_DMA_Start+0xee>
 8017ee4:	68fb      	ldr	r3, [r7, #12]
 8017ee6:	681b      	ldr	r3, [r3, #0]
 8017ee8:	4a66      	ldr	r2, [pc, #408]	@ (8018084 <HAL_DMA_Start+0x20c>)
 8017eea:	4293      	cmp	r3, r2
 8017eec:	d03b      	beq.n	8017f66 <HAL_DMA_Start+0xee>
 8017eee:	68fb      	ldr	r3, [r7, #12]
 8017ef0:	681b      	ldr	r3, [r3, #0]
 8017ef2:	4a65      	ldr	r2, [pc, #404]	@ (8018088 <HAL_DMA_Start+0x210>)
 8017ef4:	4293      	cmp	r3, r2
 8017ef6:	d036      	beq.n	8017f66 <HAL_DMA_Start+0xee>
 8017ef8:	68fb      	ldr	r3, [r7, #12]
 8017efa:	681b      	ldr	r3, [r3, #0]
 8017efc:	4a63      	ldr	r2, [pc, #396]	@ (801808c <HAL_DMA_Start+0x214>)
 8017efe:	4293      	cmp	r3, r2
 8017f00:	d031      	beq.n	8017f66 <HAL_DMA_Start+0xee>
 8017f02:	68fb      	ldr	r3, [r7, #12]
 8017f04:	681b      	ldr	r3, [r3, #0]
 8017f06:	4a62      	ldr	r2, [pc, #392]	@ (8018090 <HAL_DMA_Start+0x218>)
 8017f08:	4293      	cmp	r3, r2
 8017f0a:	d02c      	beq.n	8017f66 <HAL_DMA_Start+0xee>
 8017f0c:	68fb      	ldr	r3, [r7, #12]
 8017f0e:	681b      	ldr	r3, [r3, #0]
 8017f10:	4a60      	ldr	r2, [pc, #384]	@ (8018094 <HAL_DMA_Start+0x21c>)
 8017f12:	4293      	cmp	r3, r2
 8017f14:	d027      	beq.n	8017f66 <HAL_DMA_Start+0xee>
 8017f16:	68fb      	ldr	r3, [r7, #12]
 8017f18:	681b      	ldr	r3, [r3, #0]
 8017f1a:	4a5f      	ldr	r2, [pc, #380]	@ (8018098 <HAL_DMA_Start+0x220>)
 8017f1c:	4293      	cmp	r3, r2
 8017f1e:	d022      	beq.n	8017f66 <HAL_DMA_Start+0xee>
 8017f20:	68fb      	ldr	r3, [r7, #12]
 8017f22:	681b      	ldr	r3, [r3, #0]
 8017f24:	4a5d      	ldr	r2, [pc, #372]	@ (801809c <HAL_DMA_Start+0x224>)
 8017f26:	4293      	cmp	r3, r2
 8017f28:	d01d      	beq.n	8017f66 <HAL_DMA_Start+0xee>
 8017f2a:	68fb      	ldr	r3, [r7, #12]
 8017f2c:	681b      	ldr	r3, [r3, #0]
 8017f2e:	4a5c      	ldr	r2, [pc, #368]	@ (80180a0 <HAL_DMA_Start+0x228>)
 8017f30:	4293      	cmp	r3, r2
 8017f32:	d018      	beq.n	8017f66 <HAL_DMA_Start+0xee>
 8017f34:	68fb      	ldr	r3, [r7, #12]
 8017f36:	681b      	ldr	r3, [r3, #0]
 8017f38:	4a5a      	ldr	r2, [pc, #360]	@ (80180a4 <HAL_DMA_Start+0x22c>)
 8017f3a:	4293      	cmp	r3, r2
 8017f3c:	d013      	beq.n	8017f66 <HAL_DMA_Start+0xee>
 8017f3e:	68fb      	ldr	r3, [r7, #12]
 8017f40:	681b      	ldr	r3, [r3, #0]
 8017f42:	4a59      	ldr	r2, [pc, #356]	@ (80180a8 <HAL_DMA_Start+0x230>)
 8017f44:	4293      	cmp	r3, r2
 8017f46:	d00e      	beq.n	8017f66 <HAL_DMA_Start+0xee>
 8017f48:	68fb      	ldr	r3, [r7, #12]
 8017f4a:	681b      	ldr	r3, [r3, #0]
 8017f4c:	4a57      	ldr	r2, [pc, #348]	@ (80180ac <HAL_DMA_Start+0x234>)
 8017f4e:	4293      	cmp	r3, r2
 8017f50:	d009      	beq.n	8017f66 <HAL_DMA_Start+0xee>
 8017f52:	68fb      	ldr	r3, [r7, #12]
 8017f54:	681b      	ldr	r3, [r3, #0]
 8017f56:	4a56      	ldr	r2, [pc, #344]	@ (80180b0 <HAL_DMA_Start+0x238>)
 8017f58:	4293      	cmp	r3, r2
 8017f5a:	d004      	beq.n	8017f66 <HAL_DMA_Start+0xee>
 8017f5c:	68fb      	ldr	r3, [r7, #12]
 8017f5e:	681b      	ldr	r3, [r3, #0]
 8017f60:	4a54      	ldr	r2, [pc, #336]	@ (80180b4 <HAL_DMA_Start+0x23c>)
 8017f62:	4293      	cmp	r3, r2
 8017f64:	d108      	bne.n	8017f78 <HAL_DMA_Start+0x100>
 8017f66:	68fb      	ldr	r3, [r7, #12]
 8017f68:	681b      	ldr	r3, [r3, #0]
 8017f6a:	681a      	ldr	r2, [r3, #0]
 8017f6c:	68fb      	ldr	r3, [r7, #12]
 8017f6e:	681b      	ldr	r3, [r3, #0]
 8017f70:	f022 0201 	bic.w	r2, r2, #1
 8017f74:	601a      	str	r2, [r3, #0]
 8017f76:	e007      	b.n	8017f88 <HAL_DMA_Start+0x110>
 8017f78:	68fb      	ldr	r3, [r7, #12]
 8017f7a:	681b      	ldr	r3, [r3, #0]
 8017f7c:	681a      	ldr	r2, [r3, #0]
 8017f7e:	68fb      	ldr	r3, [r7, #12]
 8017f80:	681b      	ldr	r3, [r3, #0]
 8017f82:	f022 0201 	bic.w	r2, r2, #1
 8017f86:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8017f88:	683b      	ldr	r3, [r7, #0]
 8017f8a:	687a      	ldr	r2, [r7, #4]
 8017f8c:	68b9      	ldr	r1, [r7, #8]
 8017f8e:	68f8      	ldr	r0, [r7, #12]
 8017f90:	f000 ff5a 	bl	8018e48 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8017f94:	68fb      	ldr	r3, [r7, #12]
 8017f96:	681b      	ldr	r3, [r3, #0]
 8017f98:	4a37      	ldr	r2, [pc, #220]	@ (8018078 <HAL_DMA_Start+0x200>)
 8017f9a:	4293      	cmp	r3, r2
 8017f9c:	d04a      	beq.n	8018034 <HAL_DMA_Start+0x1bc>
 8017f9e:	68fb      	ldr	r3, [r7, #12]
 8017fa0:	681b      	ldr	r3, [r3, #0]
 8017fa2:	4a36      	ldr	r2, [pc, #216]	@ (801807c <HAL_DMA_Start+0x204>)
 8017fa4:	4293      	cmp	r3, r2
 8017fa6:	d045      	beq.n	8018034 <HAL_DMA_Start+0x1bc>
 8017fa8:	68fb      	ldr	r3, [r7, #12]
 8017faa:	681b      	ldr	r3, [r3, #0]
 8017fac:	4a34      	ldr	r2, [pc, #208]	@ (8018080 <HAL_DMA_Start+0x208>)
 8017fae:	4293      	cmp	r3, r2
 8017fb0:	d040      	beq.n	8018034 <HAL_DMA_Start+0x1bc>
 8017fb2:	68fb      	ldr	r3, [r7, #12]
 8017fb4:	681b      	ldr	r3, [r3, #0]
 8017fb6:	4a33      	ldr	r2, [pc, #204]	@ (8018084 <HAL_DMA_Start+0x20c>)
 8017fb8:	4293      	cmp	r3, r2
 8017fba:	d03b      	beq.n	8018034 <HAL_DMA_Start+0x1bc>
 8017fbc:	68fb      	ldr	r3, [r7, #12]
 8017fbe:	681b      	ldr	r3, [r3, #0]
 8017fc0:	4a31      	ldr	r2, [pc, #196]	@ (8018088 <HAL_DMA_Start+0x210>)
 8017fc2:	4293      	cmp	r3, r2
 8017fc4:	d036      	beq.n	8018034 <HAL_DMA_Start+0x1bc>
 8017fc6:	68fb      	ldr	r3, [r7, #12]
 8017fc8:	681b      	ldr	r3, [r3, #0]
 8017fca:	4a30      	ldr	r2, [pc, #192]	@ (801808c <HAL_DMA_Start+0x214>)
 8017fcc:	4293      	cmp	r3, r2
 8017fce:	d031      	beq.n	8018034 <HAL_DMA_Start+0x1bc>
 8017fd0:	68fb      	ldr	r3, [r7, #12]
 8017fd2:	681b      	ldr	r3, [r3, #0]
 8017fd4:	4a2e      	ldr	r2, [pc, #184]	@ (8018090 <HAL_DMA_Start+0x218>)
 8017fd6:	4293      	cmp	r3, r2
 8017fd8:	d02c      	beq.n	8018034 <HAL_DMA_Start+0x1bc>
 8017fda:	68fb      	ldr	r3, [r7, #12]
 8017fdc:	681b      	ldr	r3, [r3, #0]
 8017fde:	4a2d      	ldr	r2, [pc, #180]	@ (8018094 <HAL_DMA_Start+0x21c>)
 8017fe0:	4293      	cmp	r3, r2
 8017fe2:	d027      	beq.n	8018034 <HAL_DMA_Start+0x1bc>
 8017fe4:	68fb      	ldr	r3, [r7, #12]
 8017fe6:	681b      	ldr	r3, [r3, #0]
 8017fe8:	4a2b      	ldr	r2, [pc, #172]	@ (8018098 <HAL_DMA_Start+0x220>)
 8017fea:	4293      	cmp	r3, r2
 8017fec:	d022      	beq.n	8018034 <HAL_DMA_Start+0x1bc>
 8017fee:	68fb      	ldr	r3, [r7, #12]
 8017ff0:	681b      	ldr	r3, [r3, #0]
 8017ff2:	4a2a      	ldr	r2, [pc, #168]	@ (801809c <HAL_DMA_Start+0x224>)
 8017ff4:	4293      	cmp	r3, r2
 8017ff6:	d01d      	beq.n	8018034 <HAL_DMA_Start+0x1bc>
 8017ff8:	68fb      	ldr	r3, [r7, #12]
 8017ffa:	681b      	ldr	r3, [r3, #0]
 8017ffc:	4a28      	ldr	r2, [pc, #160]	@ (80180a0 <HAL_DMA_Start+0x228>)
 8017ffe:	4293      	cmp	r3, r2
 8018000:	d018      	beq.n	8018034 <HAL_DMA_Start+0x1bc>
 8018002:	68fb      	ldr	r3, [r7, #12]
 8018004:	681b      	ldr	r3, [r3, #0]
 8018006:	4a27      	ldr	r2, [pc, #156]	@ (80180a4 <HAL_DMA_Start+0x22c>)
 8018008:	4293      	cmp	r3, r2
 801800a:	d013      	beq.n	8018034 <HAL_DMA_Start+0x1bc>
 801800c:	68fb      	ldr	r3, [r7, #12]
 801800e:	681b      	ldr	r3, [r3, #0]
 8018010:	4a25      	ldr	r2, [pc, #148]	@ (80180a8 <HAL_DMA_Start+0x230>)
 8018012:	4293      	cmp	r3, r2
 8018014:	d00e      	beq.n	8018034 <HAL_DMA_Start+0x1bc>
 8018016:	68fb      	ldr	r3, [r7, #12]
 8018018:	681b      	ldr	r3, [r3, #0]
 801801a:	4a24      	ldr	r2, [pc, #144]	@ (80180ac <HAL_DMA_Start+0x234>)
 801801c:	4293      	cmp	r3, r2
 801801e:	d009      	beq.n	8018034 <HAL_DMA_Start+0x1bc>
 8018020:	68fb      	ldr	r3, [r7, #12]
 8018022:	681b      	ldr	r3, [r3, #0]
 8018024:	4a22      	ldr	r2, [pc, #136]	@ (80180b0 <HAL_DMA_Start+0x238>)
 8018026:	4293      	cmp	r3, r2
 8018028:	d004      	beq.n	8018034 <HAL_DMA_Start+0x1bc>
 801802a:	68fb      	ldr	r3, [r7, #12]
 801802c:	681b      	ldr	r3, [r3, #0]
 801802e:	4a21      	ldr	r2, [pc, #132]	@ (80180b4 <HAL_DMA_Start+0x23c>)
 8018030:	4293      	cmp	r3, r2
 8018032:	d108      	bne.n	8018046 <HAL_DMA_Start+0x1ce>
 8018034:	68fb      	ldr	r3, [r7, #12]
 8018036:	681b      	ldr	r3, [r3, #0]
 8018038:	681a      	ldr	r2, [r3, #0]
 801803a:	68fb      	ldr	r3, [r7, #12]
 801803c:	681b      	ldr	r3, [r3, #0]
 801803e:	f042 0201 	orr.w	r2, r2, #1
 8018042:	601a      	str	r2, [r3, #0]
 8018044:	e012      	b.n	801806c <HAL_DMA_Start+0x1f4>
 8018046:	68fb      	ldr	r3, [r7, #12]
 8018048:	681b      	ldr	r3, [r3, #0]
 801804a:	681a      	ldr	r2, [r3, #0]
 801804c:	68fb      	ldr	r3, [r7, #12]
 801804e:	681b      	ldr	r3, [r3, #0]
 8018050:	f042 0201 	orr.w	r2, r2, #1
 8018054:	601a      	str	r2, [r3, #0]
 8018056:	e009      	b.n	801806c <HAL_DMA_Start+0x1f4>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8018058:	68fb      	ldr	r3, [r7, #12]
 801805a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801805e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8018060:	68fb      	ldr	r3, [r7, #12]
 8018062:	2200      	movs	r2, #0
 8018064:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8018068:	2301      	movs	r3, #1
 801806a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 801806c:	7dfb      	ldrb	r3, [r7, #23]
}
 801806e:	4618      	mov	r0, r3
 8018070:	3718      	adds	r7, #24
 8018072:	46bd      	mov	sp, r7
 8018074:	bd80      	pop	{r7, pc}
 8018076:	bf00      	nop
 8018078:	40020010 	.word	0x40020010
 801807c:	40020028 	.word	0x40020028
 8018080:	40020040 	.word	0x40020040
 8018084:	40020058 	.word	0x40020058
 8018088:	40020070 	.word	0x40020070
 801808c:	40020088 	.word	0x40020088
 8018090:	400200a0 	.word	0x400200a0
 8018094:	400200b8 	.word	0x400200b8
 8018098:	40020410 	.word	0x40020410
 801809c:	40020428 	.word	0x40020428
 80180a0:	40020440 	.word	0x40020440
 80180a4:	40020458 	.word	0x40020458
 80180a8:	40020470 	.word	0x40020470
 80180ac:	40020488 	.word	0x40020488
 80180b0:	400204a0 	.word	0x400204a0
 80180b4:	400204b8 	.word	0x400204b8

080180b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80180b8:	b580      	push	{r7, lr}
 80180ba:	b086      	sub	sp, #24
 80180bc:	af00      	add	r7, sp, #0
 80180be:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80180c0:	f7ff f9a0 	bl	8017404 <HAL_GetTick>
 80180c4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80180c6:	687b      	ldr	r3, [r7, #4]
 80180c8:	2b00      	cmp	r3, #0
 80180ca:	d101      	bne.n	80180d0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80180cc:	2301      	movs	r3, #1
 80180ce:	e2dc      	b.n	801868a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80180d0:	687b      	ldr	r3, [r7, #4]
 80180d2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80180d6:	b2db      	uxtb	r3, r3
 80180d8:	2b02      	cmp	r3, #2
 80180da:	d008      	beq.n	80180ee <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80180dc:	687b      	ldr	r3, [r7, #4]
 80180de:	2280      	movs	r2, #128	@ 0x80
 80180e0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80180e2:	687b      	ldr	r3, [r7, #4]
 80180e4:	2200      	movs	r2, #0
 80180e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80180ea:	2301      	movs	r3, #1
 80180ec:	e2cd      	b.n	801868a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80180ee:	687b      	ldr	r3, [r7, #4]
 80180f0:	681b      	ldr	r3, [r3, #0]
 80180f2:	4a76      	ldr	r2, [pc, #472]	@ (80182cc <HAL_DMA_Abort+0x214>)
 80180f4:	4293      	cmp	r3, r2
 80180f6:	d04a      	beq.n	801818e <HAL_DMA_Abort+0xd6>
 80180f8:	687b      	ldr	r3, [r7, #4]
 80180fa:	681b      	ldr	r3, [r3, #0]
 80180fc:	4a74      	ldr	r2, [pc, #464]	@ (80182d0 <HAL_DMA_Abort+0x218>)
 80180fe:	4293      	cmp	r3, r2
 8018100:	d045      	beq.n	801818e <HAL_DMA_Abort+0xd6>
 8018102:	687b      	ldr	r3, [r7, #4]
 8018104:	681b      	ldr	r3, [r3, #0]
 8018106:	4a73      	ldr	r2, [pc, #460]	@ (80182d4 <HAL_DMA_Abort+0x21c>)
 8018108:	4293      	cmp	r3, r2
 801810a:	d040      	beq.n	801818e <HAL_DMA_Abort+0xd6>
 801810c:	687b      	ldr	r3, [r7, #4]
 801810e:	681b      	ldr	r3, [r3, #0]
 8018110:	4a71      	ldr	r2, [pc, #452]	@ (80182d8 <HAL_DMA_Abort+0x220>)
 8018112:	4293      	cmp	r3, r2
 8018114:	d03b      	beq.n	801818e <HAL_DMA_Abort+0xd6>
 8018116:	687b      	ldr	r3, [r7, #4]
 8018118:	681b      	ldr	r3, [r3, #0]
 801811a:	4a70      	ldr	r2, [pc, #448]	@ (80182dc <HAL_DMA_Abort+0x224>)
 801811c:	4293      	cmp	r3, r2
 801811e:	d036      	beq.n	801818e <HAL_DMA_Abort+0xd6>
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	681b      	ldr	r3, [r3, #0]
 8018124:	4a6e      	ldr	r2, [pc, #440]	@ (80182e0 <HAL_DMA_Abort+0x228>)
 8018126:	4293      	cmp	r3, r2
 8018128:	d031      	beq.n	801818e <HAL_DMA_Abort+0xd6>
 801812a:	687b      	ldr	r3, [r7, #4]
 801812c:	681b      	ldr	r3, [r3, #0]
 801812e:	4a6d      	ldr	r2, [pc, #436]	@ (80182e4 <HAL_DMA_Abort+0x22c>)
 8018130:	4293      	cmp	r3, r2
 8018132:	d02c      	beq.n	801818e <HAL_DMA_Abort+0xd6>
 8018134:	687b      	ldr	r3, [r7, #4]
 8018136:	681b      	ldr	r3, [r3, #0]
 8018138:	4a6b      	ldr	r2, [pc, #428]	@ (80182e8 <HAL_DMA_Abort+0x230>)
 801813a:	4293      	cmp	r3, r2
 801813c:	d027      	beq.n	801818e <HAL_DMA_Abort+0xd6>
 801813e:	687b      	ldr	r3, [r7, #4]
 8018140:	681b      	ldr	r3, [r3, #0]
 8018142:	4a6a      	ldr	r2, [pc, #424]	@ (80182ec <HAL_DMA_Abort+0x234>)
 8018144:	4293      	cmp	r3, r2
 8018146:	d022      	beq.n	801818e <HAL_DMA_Abort+0xd6>
 8018148:	687b      	ldr	r3, [r7, #4]
 801814a:	681b      	ldr	r3, [r3, #0]
 801814c:	4a68      	ldr	r2, [pc, #416]	@ (80182f0 <HAL_DMA_Abort+0x238>)
 801814e:	4293      	cmp	r3, r2
 8018150:	d01d      	beq.n	801818e <HAL_DMA_Abort+0xd6>
 8018152:	687b      	ldr	r3, [r7, #4]
 8018154:	681b      	ldr	r3, [r3, #0]
 8018156:	4a67      	ldr	r2, [pc, #412]	@ (80182f4 <HAL_DMA_Abort+0x23c>)
 8018158:	4293      	cmp	r3, r2
 801815a:	d018      	beq.n	801818e <HAL_DMA_Abort+0xd6>
 801815c:	687b      	ldr	r3, [r7, #4]
 801815e:	681b      	ldr	r3, [r3, #0]
 8018160:	4a65      	ldr	r2, [pc, #404]	@ (80182f8 <HAL_DMA_Abort+0x240>)
 8018162:	4293      	cmp	r3, r2
 8018164:	d013      	beq.n	801818e <HAL_DMA_Abort+0xd6>
 8018166:	687b      	ldr	r3, [r7, #4]
 8018168:	681b      	ldr	r3, [r3, #0]
 801816a:	4a64      	ldr	r2, [pc, #400]	@ (80182fc <HAL_DMA_Abort+0x244>)
 801816c:	4293      	cmp	r3, r2
 801816e:	d00e      	beq.n	801818e <HAL_DMA_Abort+0xd6>
 8018170:	687b      	ldr	r3, [r7, #4]
 8018172:	681b      	ldr	r3, [r3, #0]
 8018174:	4a62      	ldr	r2, [pc, #392]	@ (8018300 <HAL_DMA_Abort+0x248>)
 8018176:	4293      	cmp	r3, r2
 8018178:	d009      	beq.n	801818e <HAL_DMA_Abort+0xd6>
 801817a:	687b      	ldr	r3, [r7, #4]
 801817c:	681b      	ldr	r3, [r3, #0]
 801817e:	4a61      	ldr	r2, [pc, #388]	@ (8018304 <HAL_DMA_Abort+0x24c>)
 8018180:	4293      	cmp	r3, r2
 8018182:	d004      	beq.n	801818e <HAL_DMA_Abort+0xd6>
 8018184:	687b      	ldr	r3, [r7, #4]
 8018186:	681b      	ldr	r3, [r3, #0]
 8018188:	4a5f      	ldr	r2, [pc, #380]	@ (8018308 <HAL_DMA_Abort+0x250>)
 801818a:	4293      	cmp	r3, r2
 801818c:	d101      	bne.n	8018192 <HAL_DMA_Abort+0xda>
 801818e:	2301      	movs	r3, #1
 8018190:	e000      	b.n	8018194 <HAL_DMA_Abort+0xdc>
 8018192:	2300      	movs	r3, #0
 8018194:	2b00      	cmp	r3, #0
 8018196:	d013      	beq.n	80181c0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8018198:	687b      	ldr	r3, [r7, #4]
 801819a:	681b      	ldr	r3, [r3, #0]
 801819c:	681a      	ldr	r2, [r3, #0]
 801819e:	687b      	ldr	r3, [r7, #4]
 80181a0:	681b      	ldr	r3, [r3, #0]
 80181a2:	f022 021e 	bic.w	r2, r2, #30
 80181a6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80181a8:	687b      	ldr	r3, [r7, #4]
 80181aa:	681b      	ldr	r3, [r3, #0]
 80181ac:	695a      	ldr	r2, [r3, #20]
 80181ae:	687b      	ldr	r3, [r7, #4]
 80181b0:	681b      	ldr	r3, [r3, #0]
 80181b2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80181b6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80181b8:	687b      	ldr	r3, [r7, #4]
 80181ba:	681b      	ldr	r3, [r3, #0]
 80181bc:	617b      	str	r3, [r7, #20]
 80181be:	e00a      	b.n	80181d6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80181c0:	687b      	ldr	r3, [r7, #4]
 80181c2:	681b      	ldr	r3, [r3, #0]
 80181c4:	681a      	ldr	r2, [r3, #0]
 80181c6:	687b      	ldr	r3, [r7, #4]
 80181c8:	681b      	ldr	r3, [r3, #0]
 80181ca:	f022 020e 	bic.w	r2, r2, #14
 80181ce:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80181d0:	687b      	ldr	r3, [r7, #4]
 80181d2:	681b      	ldr	r3, [r3, #0]
 80181d4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	681b      	ldr	r3, [r3, #0]
 80181da:	4a3c      	ldr	r2, [pc, #240]	@ (80182cc <HAL_DMA_Abort+0x214>)
 80181dc:	4293      	cmp	r3, r2
 80181de:	d072      	beq.n	80182c6 <HAL_DMA_Abort+0x20e>
 80181e0:	687b      	ldr	r3, [r7, #4]
 80181e2:	681b      	ldr	r3, [r3, #0]
 80181e4:	4a3a      	ldr	r2, [pc, #232]	@ (80182d0 <HAL_DMA_Abort+0x218>)
 80181e6:	4293      	cmp	r3, r2
 80181e8:	d06d      	beq.n	80182c6 <HAL_DMA_Abort+0x20e>
 80181ea:	687b      	ldr	r3, [r7, #4]
 80181ec:	681b      	ldr	r3, [r3, #0]
 80181ee:	4a39      	ldr	r2, [pc, #228]	@ (80182d4 <HAL_DMA_Abort+0x21c>)
 80181f0:	4293      	cmp	r3, r2
 80181f2:	d068      	beq.n	80182c6 <HAL_DMA_Abort+0x20e>
 80181f4:	687b      	ldr	r3, [r7, #4]
 80181f6:	681b      	ldr	r3, [r3, #0]
 80181f8:	4a37      	ldr	r2, [pc, #220]	@ (80182d8 <HAL_DMA_Abort+0x220>)
 80181fa:	4293      	cmp	r3, r2
 80181fc:	d063      	beq.n	80182c6 <HAL_DMA_Abort+0x20e>
 80181fe:	687b      	ldr	r3, [r7, #4]
 8018200:	681b      	ldr	r3, [r3, #0]
 8018202:	4a36      	ldr	r2, [pc, #216]	@ (80182dc <HAL_DMA_Abort+0x224>)
 8018204:	4293      	cmp	r3, r2
 8018206:	d05e      	beq.n	80182c6 <HAL_DMA_Abort+0x20e>
 8018208:	687b      	ldr	r3, [r7, #4]
 801820a:	681b      	ldr	r3, [r3, #0]
 801820c:	4a34      	ldr	r2, [pc, #208]	@ (80182e0 <HAL_DMA_Abort+0x228>)
 801820e:	4293      	cmp	r3, r2
 8018210:	d059      	beq.n	80182c6 <HAL_DMA_Abort+0x20e>
 8018212:	687b      	ldr	r3, [r7, #4]
 8018214:	681b      	ldr	r3, [r3, #0]
 8018216:	4a33      	ldr	r2, [pc, #204]	@ (80182e4 <HAL_DMA_Abort+0x22c>)
 8018218:	4293      	cmp	r3, r2
 801821a:	d054      	beq.n	80182c6 <HAL_DMA_Abort+0x20e>
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	681b      	ldr	r3, [r3, #0]
 8018220:	4a31      	ldr	r2, [pc, #196]	@ (80182e8 <HAL_DMA_Abort+0x230>)
 8018222:	4293      	cmp	r3, r2
 8018224:	d04f      	beq.n	80182c6 <HAL_DMA_Abort+0x20e>
 8018226:	687b      	ldr	r3, [r7, #4]
 8018228:	681b      	ldr	r3, [r3, #0]
 801822a:	4a30      	ldr	r2, [pc, #192]	@ (80182ec <HAL_DMA_Abort+0x234>)
 801822c:	4293      	cmp	r3, r2
 801822e:	d04a      	beq.n	80182c6 <HAL_DMA_Abort+0x20e>
 8018230:	687b      	ldr	r3, [r7, #4]
 8018232:	681b      	ldr	r3, [r3, #0]
 8018234:	4a2e      	ldr	r2, [pc, #184]	@ (80182f0 <HAL_DMA_Abort+0x238>)
 8018236:	4293      	cmp	r3, r2
 8018238:	d045      	beq.n	80182c6 <HAL_DMA_Abort+0x20e>
 801823a:	687b      	ldr	r3, [r7, #4]
 801823c:	681b      	ldr	r3, [r3, #0]
 801823e:	4a2d      	ldr	r2, [pc, #180]	@ (80182f4 <HAL_DMA_Abort+0x23c>)
 8018240:	4293      	cmp	r3, r2
 8018242:	d040      	beq.n	80182c6 <HAL_DMA_Abort+0x20e>
 8018244:	687b      	ldr	r3, [r7, #4]
 8018246:	681b      	ldr	r3, [r3, #0]
 8018248:	4a2b      	ldr	r2, [pc, #172]	@ (80182f8 <HAL_DMA_Abort+0x240>)
 801824a:	4293      	cmp	r3, r2
 801824c:	d03b      	beq.n	80182c6 <HAL_DMA_Abort+0x20e>
 801824e:	687b      	ldr	r3, [r7, #4]
 8018250:	681b      	ldr	r3, [r3, #0]
 8018252:	4a2a      	ldr	r2, [pc, #168]	@ (80182fc <HAL_DMA_Abort+0x244>)
 8018254:	4293      	cmp	r3, r2
 8018256:	d036      	beq.n	80182c6 <HAL_DMA_Abort+0x20e>
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	681b      	ldr	r3, [r3, #0]
 801825c:	4a28      	ldr	r2, [pc, #160]	@ (8018300 <HAL_DMA_Abort+0x248>)
 801825e:	4293      	cmp	r3, r2
 8018260:	d031      	beq.n	80182c6 <HAL_DMA_Abort+0x20e>
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	681b      	ldr	r3, [r3, #0]
 8018266:	4a27      	ldr	r2, [pc, #156]	@ (8018304 <HAL_DMA_Abort+0x24c>)
 8018268:	4293      	cmp	r3, r2
 801826a:	d02c      	beq.n	80182c6 <HAL_DMA_Abort+0x20e>
 801826c:	687b      	ldr	r3, [r7, #4]
 801826e:	681b      	ldr	r3, [r3, #0]
 8018270:	4a25      	ldr	r2, [pc, #148]	@ (8018308 <HAL_DMA_Abort+0x250>)
 8018272:	4293      	cmp	r3, r2
 8018274:	d027      	beq.n	80182c6 <HAL_DMA_Abort+0x20e>
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	681b      	ldr	r3, [r3, #0]
 801827a:	4a24      	ldr	r2, [pc, #144]	@ (801830c <HAL_DMA_Abort+0x254>)
 801827c:	4293      	cmp	r3, r2
 801827e:	d022      	beq.n	80182c6 <HAL_DMA_Abort+0x20e>
 8018280:	687b      	ldr	r3, [r7, #4]
 8018282:	681b      	ldr	r3, [r3, #0]
 8018284:	4a22      	ldr	r2, [pc, #136]	@ (8018310 <HAL_DMA_Abort+0x258>)
 8018286:	4293      	cmp	r3, r2
 8018288:	d01d      	beq.n	80182c6 <HAL_DMA_Abort+0x20e>
 801828a:	687b      	ldr	r3, [r7, #4]
 801828c:	681b      	ldr	r3, [r3, #0]
 801828e:	4a21      	ldr	r2, [pc, #132]	@ (8018314 <HAL_DMA_Abort+0x25c>)
 8018290:	4293      	cmp	r3, r2
 8018292:	d018      	beq.n	80182c6 <HAL_DMA_Abort+0x20e>
 8018294:	687b      	ldr	r3, [r7, #4]
 8018296:	681b      	ldr	r3, [r3, #0]
 8018298:	4a1f      	ldr	r2, [pc, #124]	@ (8018318 <HAL_DMA_Abort+0x260>)
 801829a:	4293      	cmp	r3, r2
 801829c:	d013      	beq.n	80182c6 <HAL_DMA_Abort+0x20e>
 801829e:	687b      	ldr	r3, [r7, #4]
 80182a0:	681b      	ldr	r3, [r3, #0]
 80182a2:	4a1e      	ldr	r2, [pc, #120]	@ (801831c <HAL_DMA_Abort+0x264>)
 80182a4:	4293      	cmp	r3, r2
 80182a6:	d00e      	beq.n	80182c6 <HAL_DMA_Abort+0x20e>
 80182a8:	687b      	ldr	r3, [r7, #4]
 80182aa:	681b      	ldr	r3, [r3, #0]
 80182ac:	4a1c      	ldr	r2, [pc, #112]	@ (8018320 <HAL_DMA_Abort+0x268>)
 80182ae:	4293      	cmp	r3, r2
 80182b0:	d009      	beq.n	80182c6 <HAL_DMA_Abort+0x20e>
 80182b2:	687b      	ldr	r3, [r7, #4]
 80182b4:	681b      	ldr	r3, [r3, #0]
 80182b6:	4a1b      	ldr	r2, [pc, #108]	@ (8018324 <HAL_DMA_Abort+0x26c>)
 80182b8:	4293      	cmp	r3, r2
 80182ba:	d004      	beq.n	80182c6 <HAL_DMA_Abort+0x20e>
 80182bc:	687b      	ldr	r3, [r7, #4]
 80182be:	681b      	ldr	r3, [r3, #0]
 80182c0:	4a19      	ldr	r2, [pc, #100]	@ (8018328 <HAL_DMA_Abort+0x270>)
 80182c2:	4293      	cmp	r3, r2
 80182c4:	d132      	bne.n	801832c <HAL_DMA_Abort+0x274>
 80182c6:	2301      	movs	r3, #1
 80182c8:	e031      	b.n	801832e <HAL_DMA_Abort+0x276>
 80182ca:	bf00      	nop
 80182cc:	40020010 	.word	0x40020010
 80182d0:	40020028 	.word	0x40020028
 80182d4:	40020040 	.word	0x40020040
 80182d8:	40020058 	.word	0x40020058
 80182dc:	40020070 	.word	0x40020070
 80182e0:	40020088 	.word	0x40020088
 80182e4:	400200a0 	.word	0x400200a0
 80182e8:	400200b8 	.word	0x400200b8
 80182ec:	40020410 	.word	0x40020410
 80182f0:	40020428 	.word	0x40020428
 80182f4:	40020440 	.word	0x40020440
 80182f8:	40020458 	.word	0x40020458
 80182fc:	40020470 	.word	0x40020470
 8018300:	40020488 	.word	0x40020488
 8018304:	400204a0 	.word	0x400204a0
 8018308:	400204b8 	.word	0x400204b8
 801830c:	58025408 	.word	0x58025408
 8018310:	5802541c 	.word	0x5802541c
 8018314:	58025430 	.word	0x58025430
 8018318:	58025444 	.word	0x58025444
 801831c:	58025458 	.word	0x58025458
 8018320:	5802546c 	.word	0x5802546c
 8018324:	58025480 	.word	0x58025480
 8018328:	58025494 	.word	0x58025494
 801832c:	2300      	movs	r3, #0
 801832e:	2b00      	cmp	r3, #0
 8018330:	d007      	beq.n	8018342 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018336:	681a      	ldr	r2, [r3, #0]
 8018338:	687b      	ldr	r3, [r7, #4]
 801833a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801833c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8018340:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8018342:	687b      	ldr	r3, [r7, #4]
 8018344:	681b      	ldr	r3, [r3, #0]
 8018346:	4a6d      	ldr	r2, [pc, #436]	@ (80184fc <HAL_DMA_Abort+0x444>)
 8018348:	4293      	cmp	r3, r2
 801834a:	d04a      	beq.n	80183e2 <HAL_DMA_Abort+0x32a>
 801834c:	687b      	ldr	r3, [r7, #4]
 801834e:	681b      	ldr	r3, [r3, #0]
 8018350:	4a6b      	ldr	r2, [pc, #428]	@ (8018500 <HAL_DMA_Abort+0x448>)
 8018352:	4293      	cmp	r3, r2
 8018354:	d045      	beq.n	80183e2 <HAL_DMA_Abort+0x32a>
 8018356:	687b      	ldr	r3, [r7, #4]
 8018358:	681b      	ldr	r3, [r3, #0]
 801835a:	4a6a      	ldr	r2, [pc, #424]	@ (8018504 <HAL_DMA_Abort+0x44c>)
 801835c:	4293      	cmp	r3, r2
 801835e:	d040      	beq.n	80183e2 <HAL_DMA_Abort+0x32a>
 8018360:	687b      	ldr	r3, [r7, #4]
 8018362:	681b      	ldr	r3, [r3, #0]
 8018364:	4a68      	ldr	r2, [pc, #416]	@ (8018508 <HAL_DMA_Abort+0x450>)
 8018366:	4293      	cmp	r3, r2
 8018368:	d03b      	beq.n	80183e2 <HAL_DMA_Abort+0x32a>
 801836a:	687b      	ldr	r3, [r7, #4]
 801836c:	681b      	ldr	r3, [r3, #0]
 801836e:	4a67      	ldr	r2, [pc, #412]	@ (801850c <HAL_DMA_Abort+0x454>)
 8018370:	4293      	cmp	r3, r2
 8018372:	d036      	beq.n	80183e2 <HAL_DMA_Abort+0x32a>
 8018374:	687b      	ldr	r3, [r7, #4]
 8018376:	681b      	ldr	r3, [r3, #0]
 8018378:	4a65      	ldr	r2, [pc, #404]	@ (8018510 <HAL_DMA_Abort+0x458>)
 801837a:	4293      	cmp	r3, r2
 801837c:	d031      	beq.n	80183e2 <HAL_DMA_Abort+0x32a>
 801837e:	687b      	ldr	r3, [r7, #4]
 8018380:	681b      	ldr	r3, [r3, #0]
 8018382:	4a64      	ldr	r2, [pc, #400]	@ (8018514 <HAL_DMA_Abort+0x45c>)
 8018384:	4293      	cmp	r3, r2
 8018386:	d02c      	beq.n	80183e2 <HAL_DMA_Abort+0x32a>
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	681b      	ldr	r3, [r3, #0]
 801838c:	4a62      	ldr	r2, [pc, #392]	@ (8018518 <HAL_DMA_Abort+0x460>)
 801838e:	4293      	cmp	r3, r2
 8018390:	d027      	beq.n	80183e2 <HAL_DMA_Abort+0x32a>
 8018392:	687b      	ldr	r3, [r7, #4]
 8018394:	681b      	ldr	r3, [r3, #0]
 8018396:	4a61      	ldr	r2, [pc, #388]	@ (801851c <HAL_DMA_Abort+0x464>)
 8018398:	4293      	cmp	r3, r2
 801839a:	d022      	beq.n	80183e2 <HAL_DMA_Abort+0x32a>
 801839c:	687b      	ldr	r3, [r7, #4]
 801839e:	681b      	ldr	r3, [r3, #0]
 80183a0:	4a5f      	ldr	r2, [pc, #380]	@ (8018520 <HAL_DMA_Abort+0x468>)
 80183a2:	4293      	cmp	r3, r2
 80183a4:	d01d      	beq.n	80183e2 <HAL_DMA_Abort+0x32a>
 80183a6:	687b      	ldr	r3, [r7, #4]
 80183a8:	681b      	ldr	r3, [r3, #0]
 80183aa:	4a5e      	ldr	r2, [pc, #376]	@ (8018524 <HAL_DMA_Abort+0x46c>)
 80183ac:	4293      	cmp	r3, r2
 80183ae:	d018      	beq.n	80183e2 <HAL_DMA_Abort+0x32a>
 80183b0:	687b      	ldr	r3, [r7, #4]
 80183b2:	681b      	ldr	r3, [r3, #0]
 80183b4:	4a5c      	ldr	r2, [pc, #368]	@ (8018528 <HAL_DMA_Abort+0x470>)
 80183b6:	4293      	cmp	r3, r2
 80183b8:	d013      	beq.n	80183e2 <HAL_DMA_Abort+0x32a>
 80183ba:	687b      	ldr	r3, [r7, #4]
 80183bc:	681b      	ldr	r3, [r3, #0]
 80183be:	4a5b      	ldr	r2, [pc, #364]	@ (801852c <HAL_DMA_Abort+0x474>)
 80183c0:	4293      	cmp	r3, r2
 80183c2:	d00e      	beq.n	80183e2 <HAL_DMA_Abort+0x32a>
 80183c4:	687b      	ldr	r3, [r7, #4]
 80183c6:	681b      	ldr	r3, [r3, #0]
 80183c8:	4a59      	ldr	r2, [pc, #356]	@ (8018530 <HAL_DMA_Abort+0x478>)
 80183ca:	4293      	cmp	r3, r2
 80183cc:	d009      	beq.n	80183e2 <HAL_DMA_Abort+0x32a>
 80183ce:	687b      	ldr	r3, [r7, #4]
 80183d0:	681b      	ldr	r3, [r3, #0]
 80183d2:	4a58      	ldr	r2, [pc, #352]	@ (8018534 <HAL_DMA_Abort+0x47c>)
 80183d4:	4293      	cmp	r3, r2
 80183d6:	d004      	beq.n	80183e2 <HAL_DMA_Abort+0x32a>
 80183d8:	687b      	ldr	r3, [r7, #4]
 80183da:	681b      	ldr	r3, [r3, #0]
 80183dc:	4a56      	ldr	r2, [pc, #344]	@ (8018538 <HAL_DMA_Abort+0x480>)
 80183de:	4293      	cmp	r3, r2
 80183e0:	d108      	bne.n	80183f4 <HAL_DMA_Abort+0x33c>
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	681b      	ldr	r3, [r3, #0]
 80183e6:	681a      	ldr	r2, [r3, #0]
 80183e8:	687b      	ldr	r3, [r7, #4]
 80183ea:	681b      	ldr	r3, [r3, #0]
 80183ec:	f022 0201 	bic.w	r2, r2, #1
 80183f0:	601a      	str	r2, [r3, #0]
 80183f2:	e007      	b.n	8018404 <HAL_DMA_Abort+0x34c>
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	681b      	ldr	r3, [r3, #0]
 80183f8:	681a      	ldr	r2, [r3, #0]
 80183fa:	687b      	ldr	r3, [r7, #4]
 80183fc:	681b      	ldr	r3, [r3, #0]
 80183fe:	f022 0201 	bic.w	r2, r2, #1
 8018402:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8018404:	e013      	b.n	801842e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8018406:	f7fe fffd 	bl	8017404 <HAL_GetTick>
 801840a:	4602      	mov	r2, r0
 801840c:	693b      	ldr	r3, [r7, #16]
 801840e:	1ad3      	subs	r3, r2, r3
 8018410:	2b05      	cmp	r3, #5
 8018412:	d90c      	bls.n	801842e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8018414:	687b      	ldr	r3, [r7, #4]
 8018416:	2220      	movs	r2, #32
 8018418:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 801841a:	687b      	ldr	r3, [r7, #4]
 801841c:	2203      	movs	r2, #3
 801841e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8018422:	687b      	ldr	r3, [r7, #4]
 8018424:	2200      	movs	r2, #0
 8018426:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 801842a:	2301      	movs	r3, #1
 801842c:	e12d      	b.n	801868a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 801842e:	697b      	ldr	r3, [r7, #20]
 8018430:	681b      	ldr	r3, [r3, #0]
 8018432:	f003 0301 	and.w	r3, r3, #1
 8018436:	2b00      	cmp	r3, #0
 8018438:	d1e5      	bne.n	8018406 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801843a:	687b      	ldr	r3, [r7, #4]
 801843c:	681b      	ldr	r3, [r3, #0]
 801843e:	4a2f      	ldr	r2, [pc, #188]	@ (80184fc <HAL_DMA_Abort+0x444>)
 8018440:	4293      	cmp	r3, r2
 8018442:	d04a      	beq.n	80184da <HAL_DMA_Abort+0x422>
 8018444:	687b      	ldr	r3, [r7, #4]
 8018446:	681b      	ldr	r3, [r3, #0]
 8018448:	4a2d      	ldr	r2, [pc, #180]	@ (8018500 <HAL_DMA_Abort+0x448>)
 801844a:	4293      	cmp	r3, r2
 801844c:	d045      	beq.n	80184da <HAL_DMA_Abort+0x422>
 801844e:	687b      	ldr	r3, [r7, #4]
 8018450:	681b      	ldr	r3, [r3, #0]
 8018452:	4a2c      	ldr	r2, [pc, #176]	@ (8018504 <HAL_DMA_Abort+0x44c>)
 8018454:	4293      	cmp	r3, r2
 8018456:	d040      	beq.n	80184da <HAL_DMA_Abort+0x422>
 8018458:	687b      	ldr	r3, [r7, #4]
 801845a:	681b      	ldr	r3, [r3, #0]
 801845c:	4a2a      	ldr	r2, [pc, #168]	@ (8018508 <HAL_DMA_Abort+0x450>)
 801845e:	4293      	cmp	r3, r2
 8018460:	d03b      	beq.n	80184da <HAL_DMA_Abort+0x422>
 8018462:	687b      	ldr	r3, [r7, #4]
 8018464:	681b      	ldr	r3, [r3, #0]
 8018466:	4a29      	ldr	r2, [pc, #164]	@ (801850c <HAL_DMA_Abort+0x454>)
 8018468:	4293      	cmp	r3, r2
 801846a:	d036      	beq.n	80184da <HAL_DMA_Abort+0x422>
 801846c:	687b      	ldr	r3, [r7, #4]
 801846e:	681b      	ldr	r3, [r3, #0]
 8018470:	4a27      	ldr	r2, [pc, #156]	@ (8018510 <HAL_DMA_Abort+0x458>)
 8018472:	4293      	cmp	r3, r2
 8018474:	d031      	beq.n	80184da <HAL_DMA_Abort+0x422>
 8018476:	687b      	ldr	r3, [r7, #4]
 8018478:	681b      	ldr	r3, [r3, #0]
 801847a:	4a26      	ldr	r2, [pc, #152]	@ (8018514 <HAL_DMA_Abort+0x45c>)
 801847c:	4293      	cmp	r3, r2
 801847e:	d02c      	beq.n	80184da <HAL_DMA_Abort+0x422>
 8018480:	687b      	ldr	r3, [r7, #4]
 8018482:	681b      	ldr	r3, [r3, #0]
 8018484:	4a24      	ldr	r2, [pc, #144]	@ (8018518 <HAL_DMA_Abort+0x460>)
 8018486:	4293      	cmp	r3, r2
 8018488:	d027      	beq.n	80184da <HAL_DMA_Abort+0x422>
 801848a:	687b      	ldr	r3, [r7, #4]
 801848c:	681b      	ldr	r3, [r3, #0]
 801848e:	4a23      	ldr	r2, [pc, #140]	@ (801851c <HAL_DMA_Abort+0x464>)
 8018490:	4293      	cmp	r3, r2
 8018492:	d022      	beq.n	80184da <HAL_DMA_Abort+0x422>
 8018494:	687b      	ldr	r3, [r7, #4]
 8018496:	681b      	ldr	r3, [r3, #0]
 8018498:	4a21      	ldr	r2, [pc, #132]	@ (8018520 <HAL_DMA_Abort+0x468>)
 801849a:	4293      	cmp	r3, r2
 801849c:	d01d      	beq.n	80184da <HAL_DMA_Abort+0x422>
 801849e:	687b      	ldr	r3, [r7, #4]
 80184a0:	681b      	ldr	r3, [r3, #0]
 80184a2:	4a20      	ldr	r2, [pc, #128]	@ (8018524 <HAL_DMA_Abort+0x46c>)
 80184a4:	4293      	cmp	r3, r2
 80184a6:	d018      	beq.n	80184da <HAL_DMA_Abort+0x422>
 80184a8:	687b      	ldr	r3, [r7, #4]
 80184aa:	681b      	ldr	r3, [r3, #0]
 80184ac:	4a1e      	ldr	r2, [pc, #120]	@ (8018528 <HAL_DMA_Abort+0x470>)
 80184ae:	4293      	cmp	r3, r2
 80184b0:	d013      	beq.n	80184da <HAL_DMA_Abort+0x422>
 80184b2:	687b      	ldr	r3, [r7, #4]
 80184b4:	681b      	ldr	r3, [r3, #0]
 80184b6:	4a1d      	ldr	r2, [pc, #116]	@ (801852c <HAL_DMA_Abort+0x474>)
 80184b8:	4293      	cmp	r3, r2
 80184ba:	d00e      	beq.n	80184da <HAL_DMA_Abort+0x422>
 80184bc:	687b      	ldr	r3, [r7, #4]
 80184be:	681b      	ldr	r3, [r3, #0]
 80184c0:	4a1b      	ldr	r2, [pc, #108]	@ (8018530 <HAL_DMA_Abort+0x478>)
 80184c2:	4293      	cmp	r3, r2
 80184c4:	d009      	beq.n	80184da <HAL_DMA_Abort+0x422>
 80184c6:	687b      	ldr	r3, [r7, #4]
 80184c8:	681b      	ldr	r3, [r3, #0]
 80184ca:	4a1a      	ldr	r2, [pc, #104]	@ (8018534 <HAL_DMA_Abort+0x47c>)
 80184cc:	4293      	cmp	r3, r2
 80184ce:	d004      	beq.n	80184da <HAL_DMA_Abort+0x422>
 80184d0:	687b      	ldr	r3, [r7, #4]
 80184d2:	681b      	ldr	r3, [r3, #0]
 80184d4:	4a18      	ldr	r2, [pc, #96]	@ (8018538 <HAL_DMA_Abort+0x480>)
 80184d6:	4293      	cmp	r3, r2
 80184d8:	d101      	bne.n	80184de <HAL_DMA_Abort+0x426>
 80184da:	2301      	movs	r3, #1
 80184dc:	e000      	b.n	80184e0 <HAL_DMA_Abort+0x428>
 80184de:	2300      	movs	r3, #0
 80184e0:	2b00      	cmp	r3, #0
 80184e2:	d02b      	beq.n	801853c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80184e4:	687b      	ldr	r3, [r7, #4]
 80184e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80184e8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80184ea:	687b      	ldr	r3, [r7, #4]
 80184ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80184ee:	f003 031f 	and.w	r3, r3, #31
 80184f2:	223f      	movs	r2, #63	@ 0x3f
 80184f4:	409a      	lsls	r2, r3
 80184f6:	68bb      	ldr	r3, [r7, #8]
 80184f8:	609a      	str	r2, [r3, #8]
 80184fa:	e02a      	b.n	8018552 <HAL_DMA_Abort+0x49a>
 80184fc:	40020010 	.word	0x40020010
 8018500:	40020028 	.word	0x40020028
 8018504:	40020040 	.word	0x40020040
 8018508:	40020058 	.word	0x40020058
 801850c:	40020070 	.word	0x40020070
 8018510:	40020088 	.word	0x40020088
 8018514:	400200a0 	.word	0x400200a0
 8018518:	400200b8 	.word	0x400200b8
 801851c:	40020410 	.word	0x40020410
 8018520:	40020428 	.word	0x40020428
 8018524:	40020440 	.word	0x40020440
 8018528:	40020458 	.word	0x40020458
 801852c:	40020470 	.word	0x40020470
 8018530:	40020488 	.word	0x40020488
 8018534:	400204a0 	.word	0x400204a0
 8018538:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 801853c:	687b      	ldr	r3, [r7, #4]
 801853e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018540:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8018542:	687b      	ldr	r3, [r7, #4]
 8018544:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8018546:	f003 031f 	and.w	r3, r3, #31
 801854a:	2201      	movs	r2, #1
 801854c:	409a      	lsls	r2, r3
 801854e:	68fb      	ldr	r3, [r7, #12]
 8018550:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8018552:	687b      	ldr	r3, [r7, #4]
 8018554:	681b      	ldr	r3, [r3, #0]
 8018556:	4a4f      	ldr	r2, [pc, #316]	@ (8018694 <HAL_DMA_Abort+0x5dc>)
 8018558:	4293      	cmp	r3, r2
 801855a:	d072      	beq.n	8018642 <HAL_DMA_Abort+0x58a>
 801855c:	687b      	ldr	r3, [r7, #4]
 801855e:	681b      	ldr	r3, [r3, #0]
 8018560:	4a4d      	ldr	r2, [pc, #308]	@ (8018698 <HAL_DMA_Abort+0x5e0>)
 8018562:	4293      	cmp	r3, r2
 8018564:	d06d      	beq.n	8018642 <HAL_DMA_Abort+0x58a>
 8018566:	687b      	ldr	r3, [r7, #4]
 8018568:	681b      	ldr	r3, [r3, #0]
 801856a:	4a4c      	ldr	r2, [pc, #304]	@ (801869c <HAL_DMA_Abort+0x5e4>)
 801856c:	4293      	cmp	r3, r2
 801856e:	d068      	beq.n	8018642 <HAL_DMA_Abort+0x58a>
 8018570:	687b      	ldr	r3, [r7, #4]
 8018572:	681b      	ldr	r3, [r3, #0]
 8018574:	4a4a      	ldr	r2, [pc, #296]	@ (80186a0 <HAL_DMA_Abort+0x5e8>)
 8018576:	4293      	cmp	r3, r2
 8018578:	d063      	beq.n	8018642 <HAL_DMA_Abort+0x58a>
 801857a:	687b      	ldr	r3, [r7, #4]
 801857c:	681b      	ldr	r3, [r3, #0]
 801857e:	4a49      	ldr	r2, [pc, #292]	@ (80186a4 <HAL_DMA_Abort+0x5ec>)
 8018580:	4293      	cmp	r3, r2
 8018582:	d05e      	beq.n	8018642 <HAL_DMA_Abort+0x58a>
 8018584:	687b      	ldr	r3, [r7, #4]
 8018586:	681b      	ldr	r3, [r3, #0]
 8018588:	4a47      	ldr	r2, [pc, #284]	@ (80186a8 <HAL_DMA_Abort+0x5f0>)
 801858a:	4293      	cmp	r3, r2
 801858c:	d059      	beq.n	8018642 <HAL_DMA_Abort+0x58a>
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	681b      	ldr	r3, [r3, #0]
 8018592:	4a46      	ldr	r2, [pc, #280]	@ (80186ac <HAL_DMA_Abort+0x5f4>)
 8018594:	4293      	cmp	r3, r2
 8018596:	d054      	beq.n	8018642 <HAL_DMA_Abort+0x58a>
 8018598:	687b      	ldr	r3, [r7, #4]
 801859a:	681b      	ldr	r3, [r3, #0]
 801859c:	4a44      	ldr	r2, [pc, #272]	@ (80186b0 <HAL_DMA_Abort+0x5f8>)
 801859e:	4293      	cmp	r3, r2
 80185a0:	d04f      	beq.n	8018642 <HAL_DMA_Abort+0x58a>
 80185a2:	687b      	ldr	r3, [r7, #4]
 80185a4:	681b      	ldr	r3, [r3, #0]
 80185a6:	4a43      	ldr	r2, [pc, #268]	@ (80186b4 <HAL_DMA_Abort+0x5fc>)
 80185a8:	4293      	cmp	r3, r2
 80185aa:	d04a      	beq.n	8018642 <HAL_DMA_Abort+0x58a>
 80185ac:	687b      	ldr	r3, [r7, #4]
 80185ae:	681b      	ldr	r3, [r3, #0]
 80185b0:	4a41      	ldr	r2, [pc, #260]	@ (80186b8 <HAL_DMA_Abort+0x600>)
 80185b2:	4293      	cmp	r3, r2
 80185b4:	d045      	beq.n	8018642 <HAL_DMA_Abort+0x58a>
 80185b6:	687b      	ldr	r3, [r7, #4]
 80185b8:	681b      	ldr	r3, [r3, #0]
 80185ba:	4a40      	ldr	r2, [pc, #256]	@ (80186bc <HAL_DMA_Abort+0x604>)
 80185bc:	4293      	cmp	r3, r2
 80185be:	d040      	beq.n	8018642 <HAL_DMA_Abort+0x58a>
 80185c0:	687b      	ldr	r3, [r7, #4]
 80185c2:	681b      	ldr	r3, [r3, #0]
 80185c4:	4a3e      	ldr	r2, [pc, #248]	@ (80186c0 <HAL_DMA_Abort+0x608>)
 80185c6:	4293      	cmp	r3, r2
 80185c8:	d03b      	beq.n	8018642 <HAL_DMA_Abort+0x58a>
 80185ca:	687b      	ldr	r3, [r7, #4]
 80185cc:	681b      	ldr	r3, [r3, #0]
 80185ce:	4a3d      	ldr	r2, [pc, #244]	@ (80186c4 <HAL_DMA_Abort+0x60c>)
 80185d0:	4293      	cmp	r3, r2
 80185d2:	d036      	beq.n	8018642 <HAL_DMA_Abort+0x58a>
 80185d4:	687b      	ldr	r3, [r7, #4]
 80185d6:	681b      	ldr	r3, [r3, #0]
 80185d8:	4a3b      	ldr	r2, [pc, #236]	@ (80186c8 <HAL_DMA_Abort+0x610>)
 80185da:	4293      	cmp	r3, r2
 80185dc:	d031      	beq.n	8018642 <HAL_DMA_Abort+0x58a>
 80185de:	687b      	ldr	r3, [r7, #4]
 80185e0:	681b      	ldr	r3, [r3, #0]
 80185e2:	4a3a      	ldr	r2, [pc, #232]	@ (80186cc <HAL_DMA_Abort+0x614>)
 80185e4:	4293      	cmp	r3, r2
 80185e6:	d02c      	beq.n	8018642 <HAL_DMA_Abort+0x58a>
 80185e8:	687b      	ldr	r3, [r7, #4]
 80185ea:	681b      	ldr	r3, [r3, #0]
 80185ec:	4a38      	ldr	r2, [pc, #224]	@ (80186d0 <HAL_DMA_Abort+0x618>)
 80185ee:	4293      	cmp	r3, r2
 80185f0:	d027      	beq.n	8018642 <HAL_DMA_Abort+0x58a>
 80185f2:	687b      	ldr	r3, [r7, #4]
 80185f4:	681b      	ldr	r3, [r3, #0]
 80185f6:	4a37      	ldr	r2, [pc, #220]	@ (80186d4 <HAL_DMA_Abort+0x61c>)
 80185f8:	4293      	cmp	r3, r2
 80185fa:	d022      	beq.n	8018642 <HAL_DMA_Abort+0x58a>
 80185fc:	687b      	ldr	r3, [r7, #4]
 80185fe:	681b      	ldr	r3, [r3, #0]
 8018600:	4a35      	ldr	r2, [pc, #212]	@ (80186d8 <HAL_DMA_Abort+0x620>)
 8018602:	4293      	cmp	r3, r2
 8018604:	d01d      	beq.n	8018642 <HAL_DMA_Abort+0x58a>
 8018606:	687b      	ldr	r3, [r7, #4]
 8018608:	681b      	ldr	r3, [r3, #0]
 801860a:	4a34      	ldr	r2, [pc, #208]	@ (80186dc <HAL_DMA_Abort+0x624>)
 801860c:	4293      	cmp	r3, r2
 801860e:	d018      	beq.n	8018642 <HAL_DMA_Abort+0x58a>
 8018610:	687b      	ldr	r3, [r7, #4]
 8018612:	681b      	ldr	r3, [r3, #0]
 8018614:	4a32      	ldr	r2, [pc, #200]	@ (80186e0 <HAL_DMA_Abort+0x628>)
 8018616:	4293      	cmp	r3, r2
 8018618:	d013      	beq.n	8018642 <HAL_DMA_Abort+0x58a>
 801861a:	687b      	ldr	r3, [r7, #4]
 801861c:	681b      	ldr	r3, [r3, #0]
 801861e:	4a31      	ldr	r2, [pc, #196]	@ (80186e4 <HAL_DMA_Abort+0x62c>)
 8018620:	4293      	cmp	r3, r2
 8018622:	d00e      	beq.n	8018642 <HAL_DMA_Abort+0x58a>
 8018624:	687b      	ldr	r3, [r7, #4]
 8018626:	681b      	ldr	r3, [r3, #0]
 8018628:	4a2f      	ldr	r2, [pc, #188]	@ (80186e8 <HAL_DMA_Abort+0x630>)
 801862a:	4293      	cmp	r3, r2
 801862c:	d009      	beq.n	8018642 <HAL_DMA_Abort+0x58a>
 801862e:	687b      	ldr	r3, [r7, #4]
 8018630:	681b      	ldr	r3, [r3, #0]
 8018632:	4a2e      	ldr	r2, [pc, #184]	@ (80186ec <HAL_DMA_Abort+0x634>)
 8018634:	4293      	cmp	r3, r2
 8018636:	d004      	beq.n	8018642 <HAL_DMA_Abort+0x58a>
 8018638:	687b      	ldr	r3, [r7, #4]
 801863a:	681b      	ldr	r3, [r3, #0]
 801863c:	4a2c      	ldr	r2, [pc, #176]	@ (80186f0 <HAL_DMA_Abort+0x638>)
 801863e:	4293      	cmp	r3, r2
 8018640:	d101      	bne.n	8018646 <HAL_DMA_Abort+0x58e>
 8018642:	2301      	movs	r3, #1
 8018644:	e000      	b.n	8018648 <HAL_DMA_Abort+0x590>
 8018646:	2300      	movs	r3, #0
 8018648:	2b00      	cmp	r3, #0
 801864a:	d015      	beq.n	8018678 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801864c:	687b      	ldr	r3, [r7, #4]
 801864e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8018650:	687a      	ldr	r2, [r7, #4]
 8018652:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8018654:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8018656:	687b      	ldr	r3, [r7, #4]
 8018658:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801865a:	2b00      	cmp	r3, #0
 801865c:	d00c      	beq.n	8018678 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 801865e:	687b      	ldr	r3, [r7, #4]
 8018660:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018662:	681a      	ldr	r2, [r3, #0]
 8018664:	687b      	ldr	r3, [r7, #4]
 8018666:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018668:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801866c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801866e:	687b      	ldr	r3, [r7, #4]
 8018670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018672:	687a      	ldr	r2, [r7, #4]
 8018674:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8018676:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8018678:	687b      	ldr	r3, [r7, #4]
 801867a:	2201      	movs	r2, #1
 801867c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8018680:	687b      	ldr	r3, [r7, #4]
 8018682:	2200      	movs	r2, #0
 8018684:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8018688:	2300      	movs	r3, #0
}
 801868a:	4618      	mov	r0, r3
 801868c:	3718      	adds	r7, #24
 801868e:	46bd      	mov	sp, r7
 8018690:	bd80      	pop	{r7, pc}
 8018692:	bf00      	nop
 8018694:	40020010 	.word	0x40020010
 8018698:	40020028 	.word	0x40020028
 801869c:	40020040 	.word	0x40020040
 80186a0:	40020058 	.word	0x40020058
 80186a4:	40020070 	.word	0x40020070
 80186a8:	40020088 	.word	0x40020088
 80186ac:	400200a0 	.word	0x400200a0
 80186b0:	400200b8 	.word	0x400200b8
 80186b4:	40020410 	.word	0x40020410
 80186b8:	40020428 	.word	0x40020428
 80186bc:	40020440 	.word	0x40020440
 80186c0:	40020458 	.word	0x40020458
 80186c4:	40020470 	.word	0x40020470
 80186c8:	40020488 	.word	0x40020488
 80186cc:	400204a0 	.word	0x400204a0
 80186d0:	400204b8 	.word	0x400204b8
 80186d4:	58025408 	.word	0x58025408
 80186d8:	5802541c 	.word	0x5802541c
 80186dc:	58025430 	.word	0x58025430
 80186e0:	58025444 	.word	0x58025444
 80186e4:	58025458 	.word	0x58025458
 80186e8:	5802546c 	.word	0x5802546c
 80186ec:	58025480 	.word	0x58025480
 80186f0:	58025494 	.word	0x58025494

080186f4 <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode).
  * @param  Timeout:       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 80186f4:	b580      	push	{r7, lr}
 80186f6:	b08a      	sub	sp, #40	@ 0x28
 80186f8:	af00      	add	r7, sp, #0
 80186fa:	60f8      	str	r0, [r7, #12]
 80186fc:	460b      	mov	r3, r1
 80186fe:	607a      	str	r2, [r7, #4]
 8018700:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8018702:	2300      	movs	r3, #0
 8018704:	76fb      	strb	r3, [r7, #27]
  uint32_t cpltlevel_mask;
  uint32_t tickstart = HAL_GetTick();
 8018706:	f7fe fe7d 	bl	8017404 <HAL_GetTick>
 801870a:	6178      	str	r0, [r7, #20]
  __IO uint32_t *isr_reg;
  /* IT clear flag register */
  __IO uint32_t *ifcr_reg;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 801870c:	68fb      	ldr	r3, [r7, #12]
 801870e:	2b00      	cmp	r3, #0
 8018710:	d101      	bne.n	8018716 <HAL_DMA_PollForTransfer+0x22>
  {
    return HAL_ERROR;
 8018712:	2301      	movs	r3, #1
 8018714:	e374      	b.n	8018e00 <HAL_DMA_PollForTransfer+0x70c>
  }

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8018716:	68fb      	ldr	r3, [r7, #12]
 8018718:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801871c:	b2db      	uxtb	r3, r3
 801871e:	2b02      	cmp	r3, #2
 8018720:	d008      	beq.n	8018734 <HAL_DMA_PollForTransfer+0x40>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8018722:	68fb      	ldr	r3, [r7, #12]
 8018724:	2280      	movs	r2, #128	@ 0x80
 8018726:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8018728:	68fb      	ldr	r3, [r7, #12]
 801872a:	2200      	movs	r2, #0
 801872c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8018730:	2301      	movs	r3, #1
 8018732:	e365      	b.n	8018e00 <HAL_DMA_PollForTransfer+0x70c>
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8018734:	68fb      	ldr	r3, [r7, #12]
 8018736:	681b      	ldr	r3, [r3, #0]
 8018738:	4a7b      	ldr	r2, [pc, #492]	@ (8018928 <HAL_DMA_PollForTransfer+0x234>)
 801873a:	4293      	cmp	r3, r2
 801873c:	d04a      	beq.n	80187d4 <HAL_DMA_PollForTransfer+0xe0>
 801873e:	68fb      	ldr	r3, [r7, #12]
 8018740:	681b      	ldr	r3, [r3, #0]
 8018742:	4a7a      	ldr	r2, [pc, #488]	@ (801892c <HAL_DMA_PollForTransfer+0x238>)
 8018744:	4293      	cmp	r3, r2
 8018746:	d045      	beq.n	80187d4 <HAL_DMA_PollForTransfer+0xe0>
 8018748:	68fb      	ldr	r3, [r7, #12]
 801874a:	681b      	ldr	r3, [r3, #0]
 801874c:	4a78      	ldr	r2, [pc, #480]	@ (8018930 <HAL_DMA_PollForTransfer+0x23c>)
 801874e:	4293      	cmp	r3, r2
 8018750:	d040      	beq.n	80187d4 <HAL_DMA_PollForTransfer+0xe0>
 8018752:	68fb      	ldr	r3, [r7, #12]
 8018754:	681b      	ldr	r3, [r3, #0]
 8018756:	4a77      	ldr	r2, [pc, #476]	@ (8018934 <HAL_DMA_PollForTransfer+0x240>)
 8018758:	4293      	cmp	r3, r2
 801875a:	d03b      	beq.n	80187d4 <HAL_DMA_PollForTransfer+0xe0>
 801875c:	68fb      	ldr	r3, [r7, #12]
 801875e:	681b      	ldr	r3, [r3, #0]
 8018760:	4a75      	ldr	r2, [pc, #468]	@ (8018938 <HAL_DMA_PollForTransfer+0x244>)
 8018762:	4293      	cmp	r3, r2
 8018764:	d036      	beq.n	80187d4 <HAL_DMA_PollForTransfer+0xe0>
 8018766:	68fb      	ldr	r3, [r7, #12]
 8018768:	681b      	ldr	r3, [r3, #0]
 801876a:	4a74      	ldr	r2, [pc, #464]	@ (801893c <HAL_DMA_PollForTransfer+0x248>)
 801876c:	4293      	cmp	r3, r2
 801876e:	d031      	beq.n	80187d4 <HAL_DMA_PollForTransfer+0xe0>
 8018770:	68fb      	ldr	r3, [r7, #12]
 8018772:	681b      	ldr	r3, [r3, #0]
 8018774:	4a72      	ldr	r2, [pc, #456]	@ (8018940 <HAL_DMA_PollForTransfer+0x24c>)
 8018776:	4293      	cmp	r3, r2
 8018778:	d02c      	beq.n	80187d4 <HAL_DMA_PollForTransfer+0xe0>
 801877a:	68fb      	ldr	r3, [r7, #12]
 801877c:	681b      	ldr	r3, [r3, #0]
 801877e:	4a71      	ldr	r2, [pc, #452]	@ (8018944 <HAL_DMA_PollForTransfer+0x250>)
 8018780:	4293      	cmp	r3, r2
 8018782:	d027      	beq.n	80187d4 <HAL_DMA_PollForTransfer+0xe0>
 8018784:	68fb      	ldr	r3, [r7, #12]
 8018786:	681b      	ldr	r3, [r3, #0]
 8018788:	4a6f      	ldr	r2, [pc, #444]	@ (8018948 <HAL_DMA_PollForTransfer+0x254>)
 801878a:	4293      	cmp	r3, r2
 801878c:	d022      	beq.n	80187d4 <HAL_DMA_PollForTransfer+0xe0>
 801878e:	68fb      	ldr	r3, [r7, #12]
 8018790:	681b      	ldr	r3, [r3, #0]
 8018792:	4a6e      	ldr	r2, [pc, #440]	@ (801894c <HAL_DMA_PollForTransfer+0x258>)
 8018794:	4293      	cmp	r3, r2
 8018796:	d01d      	beq.n	80187d4 <HAL_DMA_PollForTransfer+0xe0>
 8018798:	68fb      	ldr	r3, [r7, #12]
 801879a:	681b      	ldr	r3, [r3, #0]
 801879c:	4a6c      	ldr	r2, [pc, #432]	@ (8018950 <HAL_DMA_PollForTransfer+0x25c>)
 801879e:	4293      	cmp	r3, r2
 80187a0:	d018      	beq.n	80187d4 <HAL_DMA_PollForTransfer+0xe0>
 80187a2:	68fb      	ldr	r3, [r7, #12]
 80187a4:	681b      	ldr	r3, [r3, #0]
 80187a6:	4a6b      	ldr	r2, [pc, #428]	@ (8018954 <HAL_DMA_PollForTransfer+0x260>)
 80187a8:	4293      	cmp	r3, r2
 80187aa:	d013      	beq.n	80187d4 <HAL_DMA_PollForTransfer+0xe0>
 80187ac:	68fb      	ldr	r3, [r7, #12]
 80187ae:	681b      	ldr	r3, [r3, #0]
 80187b0:	4a69      	ldr	r2, [pc, #420]	@ (8018958 <HAL_DMA_PollForTransfer+0x264>)
 80187b2:	4293      	cmp	r3, r2
 80187b4:	d00e      	beq.n	80187d4 <HAL_DMA_PollForTransfer+0xe0>
 80187b6:	68fb      	ldr	r3, [r7, #12]
 80187b8:	681b      	ldr	r3, [r3, #0]
 80187ba:	4a68      	ldr	r2, [pc, #416]	@ (801895c <HAL_DMA_PollForTransfer+0x268>)
 80187bc:	4293      	cmp	r3, r2
 80187be:	d009      	beq.n	80187d4 <HAL_DMA_PollForTransfer+0xe0>
 80187c0:	68fb      	ldr	r3, [r7, #12]
 80187c2:	681b      	ldr	r3, [r3, #0]
 80187c4:	4a66      	ldr	r2, [pc, #408]	@ (8018960 <HAL_DMA_PollForTransfer+0x26c>)
 80187c6:	4293      	cmp	r3, r2
 80187c8:	d004      	beq.n	80187d4 <HAL_DMA_PollForTransfer+0xe0>
 80187ca:	68fb      	ldr	r3, [r7, #12]
 80187cc:	681b      	ldr	r3, [r3, #0]
 80187ce:	4a65      	ldr	r2, [pc, #404]	@ (8018964 <HAL_DMA_PollForTransfer+0x270>)
 80187d0:	4293      	cmp	r3, r2
 80187d2:	d101      	bne.n	80187d8 <HAL_DMA_PollForTransfer+0xe4>
 80187d4:	2301      	movs	r3, #1
 80187d6:	e000      	b.n	80187da <HAL_DMA_PollForTransfer+0xe6>
 80187d8:	2300      	movs	r3, #0
 80187da:	2b00      	cmp	r3, #0
 80187dc:	d028      	beq.n	8018830 <HAL_DMA_PollForTransfer+0x13c>
  {
    /* Polling mode not supported in circular mode and double buffering mode */
    if ((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) != 0U)
 80187de:	68fb      	ldr	r3, [r7, #12]
 80187e0:	681b      	ldr	r3, [r3, #0]
 80187e2:	681b      	ldr	r3, [r3, #0]
 80187e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80187e8:	2b00      	cmp	r3, #0
 80187ea:	d005      	beq.n	80187f8 <HAL_DMA_PollForTransfer+0x104>
    {
      hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80187ec:	68fb      	ldr	r3, [r7, #12]
 80187ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80187f2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 80187f4:	2301      	movs	r3, #1
 80187f6:	e303      	b.n	8018e00 <HAL_DMA_PollForTransfer+0x70c>
    }

    /* Get the level transfer complete flag */
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 80187f8:	7afb      	ldrb	r3, [r7, #11]
 80187fa:	2b00      	cmp	r3, #0
 80187fc:	d108      	bne.n	8018810 <HAL_DMA_PollForTransfer+0x11c>
    {
      /* Transfer Complete flag */
      cpltlevel_mask = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80187fe:	68fb      	ldr	r3, [r7, #12]
 8018800:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8018802:	f003 031f 	and.w	r3, r3, #31
 8018806:	2220      	movs	r2, #32
 8018808:	fa02 f303 	lsl.w	r3, r2, r3
 801880c:	627b      	str	r3, [r7, #36]	@ 0x24
 801880e:	e007      	b.n	8018820 <HAL_DMA_PollForTransfer+0x12c>
    }
    else
    {
      /* Half Transfer Complete flag */
      cpltlevel_mask = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8018810:	68fb      	ldr	r3, [r7, #12]
 8018812:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8018814:	f003 031f 	and.w	r3, r3, #31
 8018818:	2210      	movs	r2, #16
 801881a:	fa02 f303 	lsl.w	r3, r2, r3
 801881e:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    isr_reg  = &(((DMA_Base_Registers *)hdma->StreamBaseAddress)->ISR);
 8018820:	68fb      	ldr	r3, [r7, #12]
 8018822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018824:	623b      	str	r3, [r7, #32]
    ifcr_reg = &(((DMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
 8018826:	68fb      	ldr	r3, [r7, #12]
 8018828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801882a:	3308      	adds	r3, #8
 801882c:	61fb      	str	r3, [r7, #28]
 801882e:	e1d5      	b.n	8018bdc <HAL_DMA_PollForTransfer+0x4e8>
  }
  else /* BDMA channel */
  {
    /* Polling mode not supported in circular mode */
    if ((((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR & BDMA_CCR_CIRC) != 0U)
 8018830:	68fb      	ldr	r3, [r7, #12]
 8018832:	681b      	ldr	r3, [r3, #0]
 8018834:	681b      	ldr	r3, [r3, #0]
 8018836:	f003 0320 	and.w	r3, r3, #32
 801883a:	2b00      	cmp	r3, #0
 801883c:	d005      	beq.n	801884a <HAL_DMA_PollForTransfer+0x156>
    {
      hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 801883e:	68fb      	ldr	r3, [r7, #12]
 8018840:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8018844:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 8018846:	2301      	movs	r3, #1
 8018848:	e2da      	b.n	8018e00 <HAL_DMA_PollForTransfer+0x70c>
    }

    /* Get the level transfer complete flag */
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 801884a:	7afb      	ldrb	r3, [r7, #11]
 801884c:	2b00      	cmp	r3, #0
 801884e:	d108      	bne.n	8018862 <HAL_DMA_PollForTransfer+0x16e>
    {
      /* Transfer Complete flag */
      cpltlevel_mask = BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU);
 8018850:	68fb      	ldr	r3, [r7, #12]
 8018852:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8018854:	f003 031f 	and.w	r3, r3, #31
 8018858:	2202      	movs	r2, #2
 801885a:	fa02 f303 	lsl.w	r3, r2, r3
 801885e:	627b      	str	r3, [r7, #36]	@ 0x24
 8018860:	e007      	b.n	8018872 <HAL_DMA_PollForTransfer+0x17e>
    }
    else
    {
      /* Half Transfer Complete flag */
      cpltlevel_mask = BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU);
 8018862:	68fb      	ldr	r3, [r7, #12]
 8018864:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8018866:	f003 031f 	and.w	r3, r3, #31
 801886a:	2204      	movs	r2, #4
 801886c:	fa02 f303 	lsl.w	r3, r2, r3
 8018870:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    isr_reg  = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->ISR);
 8018872:	68fb      	ldr	r3, [r7, #12]
 8018874:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018876:	623b      	str	r3, [r7, #32]
    ifcr_reg = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
 8018878:	68fb      	ldr	r3, [r7, #12]
 801887a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801887c:	3304      	adds	r3, #4
 801887e:	61fb      	str	r3, [r7, #28]
  }

  while(((*isr_reg) & cpltlevel_mask) == 0U)
 8018880:	e1ac      	b.n	8018bdc <HAL_DMA_PollForTransfer+0x4e8>
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8018882:	68fb      	ldr	r3, [r7, #12]
 8018884:	681b      	ldr	r3, [r3, #0]
 8018886:	4a28      	ldr	r2, [pc, #160]	@ (8018928 <HAL_DMA_PollForTransfer+0x234>)
 8018888:	4293      	cmp	r3, r2
 801888a:	d04a      	beq.n	8018922 <HAL_DMA_PollForTransfer+0x22e>
 801888c:	68fb      	ldr	r3, [r7, #12]
 801888e:	681b      	ldr	r3, [r3, #0]
 8018890:	4a26      	ldr	r2, [pc, #152]	@ (801892c <HAL_DMA_PollForTransfer+0x238>)
 8018892:	4293      	cmp	r3, r2
 8018894:	d045      	beq.n	8018922 <HAL_DMA_PollForTransfer+0x22e>
 8018896:	68fb      	ldr	r3, [r7, #12]
 8018898:	681b      	ldr	r3, [r3, #0]
 801889a:	4a25      	ldr	r2, [pc, #148]	@ (8018930 <HAL_DMA_PollForTransfer+0x23c>)
 801889c:	4293      	cmp	r3, r2
 801889e:	d040      	beq.n	8018922 <HAL_DMA_PollForTransfer+0x22e>
 80188a0:	68fb      	ldr	r3, [r7, #12]
 80188a2:	681b      	ldr	r3, [r3, #0]
 80188a4:	4a23      	ldr	r2, [pc, #140]	@ (8018934 <HAL_DMA_PollForTransfer+0x240>)
 80188a6:	4293      	cmp	r3, r2
 80188a8:	d03b      	beq.n	8018922 <HAL_DMA_PollForTransfer+0x22e>
 80188aa:	68fb      	ldr	r3, [r7, #12]
 80188ac:	681b      	ldr	r3, [r3, #0]
 80188ae:	4a22      	ldr	r2, [pc, #136]	@ (8018938 <HAL_DMA_PollForTransfer+0x244>)
 80188b0:	4293      	cmp	r3, r2
 80188b2:	d036      	beq.n	8018922 <HAL_DMA_PollForTransfer+0x22e>
 80188b4:	68fb      	ldr	r3, [r7, #12]
 80188b6:	681b      	ldr	r3, [r3, #0]
 80188b8:	4a20      	ldr	r2, [pc, #128]	@ (801893c <HAL_DMA_PollForTransfer+0x248>)
 80188ba:	4293      	cmp	r3, r2
 80188bc:	d031      	beq.n	8018922 <HAL_DMA_PollForTransfer+0x22e>
 80188be:	68fb      	ldr	r3, [r7, #12]
 80188c0:	681b      	ldr	r3, [r3, #0]
 80188c2:	4a1f      	ldr	r2, [pc, #124]	@ (8018940 <HAL_DMA_PollForTransfer+0x24c>)
 80188c4:	4293      	cmp	r3, r2
 80188c6:	d02c      	beq.n	8018922 <HAL_DMA_PollForTransfer+0x22e>
 80188c8:	68fb      	ldr	r3, [r7, #12]
 80188ca:	681b      	ldr	r3, [r3, #0]
 80188cc:	4a1d      	ldr	r2, [pc, #116]	@ (8018944 <HAL_DMA_PollForTransfer+0x250>)
 80188ce:	4293      	cmp	r3, r2
 80188d0:	d027      	beq.n	8018922 <HAL_DMA_PollForTransfer+0x22e>
 80188d2:	68fb      	ldr	r3, [r7, #12]
 80188d4:	681b      	ldr	r3, [r3, #0]
 80188d6:	4a1c      	ldr	r2, [pc, #112]	@ (8018948 <HAL_DMA_PollForTransfer+0x254>)
 80188d8:	4293      	cmp	r3, r2
 80188da:	d022      	beq.n	8018922 <HAL_DMA_PollForTransfer+0x22e>
 80188dc:	68fb      	ldr	r3, [r7, #12]
 80188de:	681b      	ldr	r3, [r3, #0]
 80188e0:	4a1a      	ldr	r2, [pc, #104]	@ (801894c <HAL_DMA_PollForTransfer+0x258>)
 80188e2:	4293      	cmp	r3, r2
 80188e4:	d01d      	beq.n	8018922 <HAL_DMA_PollForTransfer+0x22e>
 80188e6:	68fb      	ldr	r3, [r7, #12]
 80188e8:	681b      	ldr	r3, [r3, #0]
 80188ea:	4a19      	ldr	r2, [pc, #100]	@ (8018950 <HAL_DMA_PollForTransfer+0x25c>)
 80188ec:	4293      	cmp	r3, r2
 80188ee:	d018      	beq.n	8018922 <HAL_DMA_PollForTransfer+0x22e>
 80188f0:	68fb      	ldr	r3, [r7, #12]
 80188f2:	681b      	ldr	r3, [r3, #0]
 80188f4:	4a17      	ldr	r2, [pc, #92]	@ (8018954 <HAL_DMA_PollForTransfer+0x260>)
 80188f6:	4293      	cmp	r3, r2
 80188f8:	d013      	beq.n	8018922 <HAL_DMA_PollForTransfer+0x22e>
 80188fa:	68fb      	ldr	r3, [r7, #12]
 80188fc:	681b      	ldr	r3, [r3, #0]
 80188fe:	4a16      	ldr	r2, [pc, #88]	@ (8018958 <HAL_DMA_PollForTransfer+0x264>)
 8018900:	4293      	cmp	r3, r2
 8018902:	d00e      	beq.n	8018922 <HAL_DMA_PollForTransfer+0x22e>
 8018904:	68fb      	ldr	r3, [r7, #12]
 8018906:	681b      	ldr	r3, [r3, #0]
 8018908:	4a14      	ldr	r2, [pc, #80]	@ (801895c <HAL_DMA_PollForTransfer+0x268>)
 801890a:	4293      	cmp	r3, r2
 801890c:	d009      	beq.n	8018922 <HAL_DMA_PollForTransfer+0x22e>
 801890e:	68fb      	ldr	r3, [r7, #12]
 8018910:	681b      	ldr	r3, [r3, #0]
 8018912:	4a13      	ldr	r2, [pc, #76]	@ (8018960 <HAL_DMA_PollForTransfer+0x26c>)
 8018914:	4293      	cmp	r3, r2
 8018916:	d004      	beq.n	8018922 <HAL_DMA_PollForTransfer+0x22e>
 8018918:	68fb      	ldr	r3, [r7, #12]
 801891a:	681b      	ldr	r3, [r3, #0]
 801891c:	4a11      	ldr	r2, [pc, #68]	@ (8018964 <HAL_DMA_PollForTransfer+0x270>)
 801891e:	4293      	cmp	r3, r2
 8018920:	d122      	bne.n	8018968 <HAL_DMA_PollForTransfer+0x274>
 8018922:	2301      	movs	r3, #1
 8018924:	e021      	b.n	801896a <HAL_DMA_PollForTransfer+0x276>
 8018926:	bf00      	nop
 8018928:	40020010 	.word	0x40020010
 801892c:	40020028 	.word	0x40020028
 8018930:	40020040 	.word	0x40020040
 8018934:	40020058 	.word	0x40020058
 8018938:	40020070 	.word	0x40020070
 801893c:	40020088 	.word	0x40020088
 8018940:	400200a0 	.word	0x400200a0
 8018944:	400200b8 	.word	0x400200b8
 8018948:	40020410 	.word	0x40020410
 801894c:	40020428 	.word	0x40020428
 8018950:	40020440 	.word	0x40020440
 8018954:	40020458 	.word	0x40020458
 8018958:	40020470 	.word	0x40020470
 801895c:	40020488 	.word	0x40020488
 8018960:	400204a0 	.word	0x400204a0
 8018964:	400204b8 	.word	0x400204b8
 8018968:	2300      	movs	r3, #0
 801896a:	2b00      	cmp	r3, #0
 801896c:	d057      	beq.n	8018a1e <HAL_DMA_PollForTransfer+0x32a>
    {
      if(((*isr_reg) & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801896e:	6a3b      	ldr	r3, [r7, #32]
 8018970:	681a      	ldr	r2, [r3, #0]
 8018972:	68fb      	ldr	r3, [r7, #12]
 8018974:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8018976:	f003 031f 	and.w	r3, r3, #31
 801897a:	fa22 f303 	lsr.w	r3, r2, r3
 801897e:	f003 0301 	and.w	r3, r3, #1
 8018982:	2b00      	cmp	r3, #0
 8018984:	d00d      	beq.n	80189a2 <HAL_DMA_PollForTransfer+0x2ae>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8018986:	68fb      	ldr	r3, [r7, #12]
 8018988:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801898a:	f043 0202 	orr.w	r2, r3, #2
 801898e:	68fb      	ldr	r3, [r7, #12]
 8018990:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear the FIFO error flag */
        (*ifcr_reg) = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8018992:	68fb      	ldr	r3, [r7, #12]
 8018994:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8018996:	f003 031f 	and.w	r3, r3, #31
 801899a:	2201      	movs	r2, #1
 801899c:	409a      	lsls	r2, r3
 801899e:	69fb      	ldr	r3, [r7, #28]
 80189a0:	601a      	str	r2, [r3, #0]
      }

      if(((*isr_reg) & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80189a2:	6a3b      	ldr	r3, [r7, #32]
 80189a4:	681a      	ldr	r2, [r3, #0]
 80189a6:	68fb      	ldr	r3, [r7, #12]
 80189a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80189aa:	f003 031f 	and.w	r3, r3, #31
 80189ae:	2104      	movs	r1, #4
 80189b0:	fa01 f303 	lsl.w	r3, r1, r3
 80189b4:	4013      	ands	r3, r2
 80189b6:	2b00      	cmp	r3, #0
 80189b8:	d00d      	beq.n	80189d6 <HAL_DMA_PollForTransfer+0x2e2>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80189ba:	68fb      	ldr	r3, [r7, #12]
 80189bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80189be:	f043 0204 	orr.w	r2, r3, #4
 80189c2:	68fb      	ldr	r3, [r7, #12]
 80189c4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear the Direct Mode error flag */
        (*ifcr_reg) = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80189c6:	68fb      	ldr	r3, [r7, #12]
 80189c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80189ca:	f003 031f 	and.w	r3, r3, #31
 80189ce:	2204      	movs	r2, #4
 80189d0:	409a      	lsls	r2, r3
 80189d2:	69fb      	ldr	r3, [r7, #28]
 80189d4:	601a      	str	r2, [r3, #0]
      }

      if(((*isr_reg) & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80189d6:	6a3b      	ldr	r3, [r7, #32]
 80189d8:	681a      	ldr	r2, [r3, #0]
 80189da:	68fb      	ldr	r3, [r7, #12]
 80189dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80189de:	f003 031f 	and.w	r3, r3, #31
 80189e2:	2108      	movs	r1, #8
 80189e4:	fa01 f303 	lsl.w	r3, r1, r3
 80189e8:	4013      	ands	r3, r2
 80189ea:	2b00      	cmp	r3, #0
 80189ec:	d038      	beq.n	8018a60 <HAL_DMA_PollForTransfer+0x36c>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80189ee:	68fb      	ldr	r3, [r7, #12]
 80189f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80189f2:	f043 0201 	orr.w	r2, r3, #1
 80189f6:	68fb      	ldr	r3, [r7, #12]
 80189f8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear the transfer error flag */
        (*ifcr_reg) = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80189fa:	68fb      	ldr	r3, [r7, #12]
 80189fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80189fe:	f003 031f 	and.w	r3, r3, #31
 8018a02:	2208      	movs	r2, #8
 8018a04:	409a      	lsls	r2, r3
 8018a06:	69fb      	ldr	r3, [r7, #28]
 8018a08:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8018a0a:	68fb      	ldr	r3, [r7, #12]
 8018a0c:	2201      	movs	r2, #1
 8018a0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8018a12:	68fb      	ldr	r3, [r7, #12]
 8018a14:	2200      	movs	r2, #0
 8018a16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8018a1a:	2301      	movs	r3, #1
 8018a1c:	e1f0      	b.n	8018e00 <HAL_DMA_PollForTransfer+0x70c>
      }
    }
    else /* BDMA channel */
    {
      if(((*isr_reg) & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8018a1e:	6a3b      	ldr	r3, [r7, #32]
 8018a20:	681a      	ldr	r2, [r3, #0]
 8018a22:	68fb      	ldr	r3, [r7, #12]
 8018a24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8018a26:	f003 031f 	and.w	r3, r3, #31
 8018a2a:	2108      	movs	r1, #8
 8018a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8018a30:	4013      	ands	r3, r2
 8018a32:	2b00      	cmp	r3, #0
 8018a34:	d014      	beq.n	8018a60 <HAL_DMA_PollForTransfer+0x36c>
      {
        /* When a DMA transfer error occurs */
        /* A hardware clear of its EN bits is performed */
        /* Clear all flags */
        (*isr_reg) = ((BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU));
 8018a36:	68fb      	ldr	r3, [r7, #12]
 8018a38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8018a3a:	f003 031f 	and.w	r3, r3, #31
 8018a3e:	2201      	movs	r2, #1
 8018a40:	409a      	lsls	r2, r3
 8018a42:	6a3b      	ldr	r3, [r7, #32]
 8018a44:	601a      	str	r2, [r3, #0]

        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8018a46:	68fb      	ldr	r3, [r7, #12]
 8018a48:	2201      	movs	r2, #1
 8018a4a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8018a4c:	68fb      	ldr	r3, [r7, #12]
 8018a4e:	2201      	movs	r2, #1
 8018a50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8018a54:	68fb      	ldr	r3, [r7, #12]
 8018a56:	2200      	movs	r2, #0
 8018a58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8018a5c:	2301      	movs	r3, #1
 8018a5e:	e1cf      	b.n	8018e00 <HAL_DMA_PollForTransfer+0x70c>
      }
    }

    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
 8018a60:	687b      	ldr	r3, [r7, #4]
 8018a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018a66:	d012      	beq.n	8018a8e <HAL_DMA_PollForTransfer+0x39a>
    {
      if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8018a68:	f7fe fccc 	bl	8017404 <HAL_GetTick>
 8018a6c:	4602      	mov	r2, r0
 8018a6e:	697b      	ldr	r3, [r7, #20]
 8018a70:	1ad3      	subs	r3, r2, r3
 8018a72:	687a      	ldr	r2, [r7, #4]
 8018a74:	429a      	cmp	r2, r3
 8018a76:	d302      	bcc.n	8018a7e <HAL_DMA_PollForTransfer+0x38a>
 8018a78:	687b      	ldr	r3, [r7, #4]
 8018a7a:	2b00      	cmp	r3, #0
 8018a7c:	d107      	bne.n	8018a8e <HAL_DMA_PollForTransfer+0x39a>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8018a7e:	68fb      	ldr	r3, [r7, #12]
 8018a80:	2220      	movs	r2, #32
 8018a82:	655a      	str	r2, [r3, #84]	@ 0x54

        /* if timeout then abort the current transfer */
        /* No need to check return value: as in this case we will return HAL_ERROR with HAL_DMA_ERROR_TIMEOUT error code  */
        (void) HAL_DMA_Abort(hdma);
 8018a84:	68f8      	ldr	r0, [r7, #12]
 8018a86:	f7ff fb17 	bl	80180b8 <HAL_DMA_Abort>
              - Clear the transfer error flags
              - Unlock
              - Set the State
          */

        return HAL_ERROR;
 8018a8a:	2301      	movs	r3, #1
 8018a8c:	e1b8      	b.n	8018e00 <HAL_DMA_PollForTransfer+0x70c>
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8018a8e:	68fb      	ldr	r3, [r7, #12]
 8018a90:	681b      	ldr	r3, [r3, #0]
 8018a92:	4a81      	ldr	r2, [pc, #516]	@ (8018c98 <HAL_DMA_PollForTransfer+0x5a4>)
 8018a94:	4293      	cmp	r3, r2
 8018a96:	d072      	beq.n	8018b7e <HAL_DMA_PollForTransfer+0x48a>
 8018a98:	68fb      	ldr	r3, [r7, #12]
 8018a9a:	681b      	ldr	r3, [r3, #0]
 8018a9c:	4a7f      	ldr	r2, [pc, #508]	@ (8018c9c <HAL_DMA_PollForTransfer+0x5a8>)
 8018a9e:	4293      	cmp	r3, r2
 8018aa0:	d06d      	beq.n	8018b7e <HAL_DMA_PollForTransfer+0x48a>
 8018aa2:	68fb      	ldr	r3, [r7, #12]
 8018aa4:	681b      	ldr	r3, [r3, #0]
 8018aa6:	4a7e      	ldr	r2, [pc, #504]	@ (8018ca0 <HAL_DMA_PollForTransfer+0x5ac>)
 8018aa8:	4293      	cmp	r3, r2
 8018aaa:	d068      	beq.n	8018b7e <HAL_DMA_PollForTransfer+0x48a>
 8018aac:	68fb      	ldr	r3, [r7, #12]
 8018aae:	681b      	ldr	r3, [r3, #0]
 8018ab0:	4a7c      	ldr	r2, [pc, #496]	@ (8018ca4 <HAL_DMA_PollForTransfer+0x5b0>)
 8018ab2:	4293      	cmp	r3, r2
 8018ab4:	d063      	beq.n	8018b7e <HAL_DMA_PollForTransfer+0x48a>
 8018ab6:	68fb      	ldr	r3, [r7, #12]
 8018ab8:	681b      	ldr	r3, [r3, #0]
 8018aba:	4a7b      	ldr	r2, [pc, #492]	@ (8018ca8 <HAL_DMA_PollForTransfer+0x5b4>)
 8018abc:	4293      	cmp	r3, r2
 8018abe:	d05e      	beq.n	8018b7e <HAL_DMA_PollForTransfer+0x48a>
 8018ac0:	68fb      	ldr	r3, [r7, #12]
 8018ac2:	681b      	ldr	r3, [r3, #0]
 8018ac4:	4a79      	ldr	r2, [pc, #484]	@ (8018cac <HAL_DMA_PollForTransfer+0x5b8>)
 8018ac6:	4293      	cmp	r3, r2
 8018ac8:	d059      	beq.n	8018b7e <HAL_DMA_PollForTransfer+0x48a>
 8018aca:	68fb      	ldr	r3, [r7, #12]
 8018acc:	681b      	ldr	r3, [r3, #0]
 8018ace:	4a78      	ldr	r2, [pc, #480]	@ (8018cb0 <HAL_DMA_PollForTransfer+0x5bc>)
 8018ad0:	4293      	cmp	r3, r2
 8018ad2:	d054      	beq.n	8018b7e <HAL_DMA_PollForTransfer+0x48a>
 8018ad4:	68fb      	ldr	r3, [r7, #12]
 8018ad6:	681b      	ldr	r3, [r3, #0]
 8018ad8:	4a76      	ldr	r2, [pc, #472]	@ (8018cb4 <HAL_DMA_PollForTransfer+0x5c0>)
 8018ada:	4293      	cmp	r3, r2
 8018adc:	d04f      	beq.n	8018b7e <HAL_DMA_PollForTransfer+0x48a>
 8018ade:	68fb      	ldr	r3, [r7, #12]
 8018ae0:	681b      	ldr	r3, [r3, #0]
 8018ae2:	4a75      	ldr	r2, [pc, #468]	@ (8018cb8 <HAL_DMA_PollForTransfer+0x5c4>)
 8018ae4:	4293      	cmp	r3, r2
 8018ae6:	d04a      	beq.n	8018b7e <HAL_DMA_PollForTransfer+0x48a>
 8018ae8:	68fb      	ldr	r3, [r7, #12]
 8018aea:	681b      	ldr	r3, [r3, #0]
 8018aec:	4a73      	ldr	r2, [pc, #460]	@ (8018cbc <HAL_DMA_PollForTransfer+0x5c8>)
 8018aee:	4293      	cmp	r3, r2
 8018af0:	d045      	beq.n	8018b7e <HAL_DMA_PollForTransfer+0x48a>
 8018af2:	68fb      	ldr	r3, [r7, #12]
 8018af4:	681b      	ldr	r3, [r3, #0]
 8018af6:	4a72      	ldr	r2, [pc, #456]	@ (8018cc0 <HAL_DMA_PollForTransfer+0x5cc>)
 8018af8:	4293      	cmp	r3, r2
 8018afa:	d040      	beq.n	8018b7e <HAL_DMA_PollForTransfer+0x48a>
 8018afc:	68fb      	ldr	r3, [r7, #12]
 8018afe:	681b      	ldr	r3, [r3, #0]
 8018b00:	4a70      	ldr	r2, [pc, #448]	@ (8018cc4 <HAL_DMA_PollForTransfer+0x5d0>)
 8018b02:	4293      	cmp	r3, r2
 8018b04:	d03b      	beq.n	8018b7e <HAL_DMA_PollForTransfer+0x48a>
 8018b06:	68fb      	ldr	r3, [r7, #12]
 8018b08:	681b      	ldr	r3, [r3, #0]
 8018b0a:	4a6f      	ldr	r2, [pc, #444]	@ (8018cc8 <HAL_DMA_PollForTransfer+0x5d4>)
 8018b0c:	4293      	cmp	r3, r2
 8018b0e:	d036      	beq.n	8018b7e <HAL_DMA_PollForTransfer+0x48a>
 8018b10:	68fb      	ldr	r3, [r7, #12]
 8018b12:	681b      	ldr	r3, [r3, #0]
 8018b14:	4a6d      	ldr	r2, [pc, #436]	@ (8018ccc <HAL_DMA_PollForTransfer+0x5d8>)
 8018b16:	4293      	cmp	r3, r2
 8018b18:	d031      	beq.n	8018b7e <HAL_DMA_PollForTransfer+0x48a>
 8018b1a:	68fb      	ldr	r3, [r7, #12]
 8018b1c:	681b      	ldr	r3, [r3, #0]
 8018b1e:	4a6c      	ldr	r2, [pc, #432]	@ (8018cd0 <HAL_DMA_PollForTransfer+0x5dc>)
 8018b20:	4293      	cmp	r3, r2
 8018b22:	d02c      	beq.n	8018b7e <HAL_DMA_PollForTransfer+0x48a>
 8018b24:	68fb      	ldr	r3, [r7, #12]
 8018b26:	681b      	ldr	r3, [r3, #0]
 8018b28:	4a6a      	ldr	r2, [pc, #424]	@ (8018cd4 <HAL_DMA_PollForTransfer+0x5e0>)
 8018b2a:	4293      	cmp	r3, r2
 8018b2c:	d027      	beq.n	8018b7e <HAL_DMA_PollForTransfer+0x48a>
 8018b2e:	68fb      	ldr	r3, [r7, #12]
 8018b30:	681b      	ldr	r3, [r3, #0]
 8018b32:	4a69      	ldr	r2, [pc, #420]	@ (8018cd8 <HAL_DMA_PollForTransfer+0x5e4>)
 8018b34:	4293      	cmp	r3, r2
 8018b36:	d022      	beq.n	8018b7e <HAL_DMA_PollForTransfer+0x48a>
 8018b38:	68fb      	ldr	r3, [r7, #12]
 8018b3a:	681b      	ldr	r3, [r3, #0]
 8018b3c:	4a67      	ldr	r2, [pc, #412]	@ (8018cdc <HAL_DMA_PollForTransfer+0x5e8>)
 8018b3e:	4293      	cmp	r3, r2
 8018b40:	d01d      	beq.n	8018b7e <HAL_DMA_PollForTransfer+0x48a>
 8018b42:	68fb      	ldr	r3, [r7, #12]
 8018b44:	681b      	ldr	r3, [r3, #0]
 8018b46:	4a66      	ldr	r2, [pc, #408]	@ (8018ce0 <HAL_DMA_PollForTransfer+0x5ec>)
 8018b48:	4293      	cmp	r3, r2
 8018b4a:	d018      	beq.n	8018b7e <HAL_DMA_PollForTransfer+0x48a>
 8018b4c:	68fb      	ldr	r3, [r7, #12]
 8018b4e:	681b      	ldr	r3, [r3, #0]
 8018b50:	4a64      	ldr	r2, [pc, #400]	@ (8018ce4 <HAL_DMA_PollForTransfer+0x5f0>)
 8018b52:	4293      	cmp	r3, r2
 8018b54:	d013      	beq.n	8018b7e <HAL_DMA_PollForTransfer+0x48a>
 8018b56:	68fb      	ldr	r3, [r7, #12]
 8018b58:	681b      	ldr	r3, [r3, #0]
 8018b5a:	4a63      	ldr	r2, [pc, #396]	@ (8018ce8 <HAL_DMA_PollForTransfer+0x5f4>)
 8018b5c:	4293      	cmp	r3, r2
 8018b5e:	d00e      	beq.n	8018b7e <HAL_DMA_PollForTransfer+0x48a>
 8018b60:	68fb      	ldr	r3, [r7, #12]
 8018b62:	681b      	ldr	r3, [r3, #0]
 8018b64:	4a61      	ldr	r2, [pc, #388]	@ (8018cec <HAL_DMA_PollForTransfer+0x5f8>)
 8018b66:	4293      	cmp	r3, r2
 8018b68:	d009      	beq.n	8018b7e <HAL_DMA_PollForTransfer+0x48a>
 8018b6a:	68fb      	ldr	r3, [r7, #12]
 8018b6c:	681b      	ldr	r3, [r3, #0]
 8018b6e:	4a60      	ldr	r2, [pc, #384]	@ (8018cf0 <HAL_DMA_PollForTransfer+0x5fc>)
 8018b70:	4293      	cmp	r3, r2
 8018b72:	d004      	beq.n	8018b7e <HAL_DMA_PollForTransfer+0x48a>
 8018b74:	68fb      	ldr	r3, [r7, #12]
 8018b76:	681b      	ldr	r3, [r3, #0]
 8018b78:	4a5e      	ldr	r2, [pc, #376]	@ (8018cf4 <HAL_DMA_PollForTransfer+0x600>)
 8018b7a:	4293      	cmp	r3, r2
 8018b7c:	d101      	bne.n	8018b82 <HAL_DMA_PollForTransfer+0x48e>
 8018b7e:	2301      	movs	r3, #1
 8018b80:	e000      	b.n	8018b84 <HAL_DMA_PollForTransfer+0x490>
 8018b82:	2300      	movs	r3, #0
 8018b84:	2b00      	cmp	r3, #0
 8018b86:	d029      	beq.n	8018bdc <HAL_DMA_PollForTransfer+0x4e8>
    {
      /* Check for DMAMUX Request generator (if used) overrun status */
      if(hdma->DMAmuxRequestGen != 0U)
 8018b88:	68fb      	ldr	r3, [r7, #12]
 8018b8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018b8c:	2b00      	cmp	r3, #0
 8018b8e:	d012      	beq.n	8018bb6 <HAL_DMA_PollForTransfer+0x4c2>
      {
        /* if using DMAMUX request generator Check for DMAMUX request generator overrun */
        if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8018b90:	68fb      	ldr	r3, [r7, #12]
 8018b92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018b94:	681a      	ldr	r2, [r3, #0]
 8018b96:	68fb      	ldr	r3, [r7, #12]
 8018b98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018b9a:	4013      	ands	r3, r2
 8018b9c:	2b00      	cmp	r3, #0
 8018b9e:	d00a      	beq.n	8018bb6 <HAL_DMA_PollForTransfer+0x4c2>
        {
          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8018ba0:	68fb      	ldr	r3, [r7, #12]
 8018ba2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018ba4:	68fa      	ldr	r2, [r7, #12]
 8018ba6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8018ba8:	605a      	str	r2, [r3, #4]

          /* Update error code */
          hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8018baa:	68fb      	ldr	r3, [r7, #12]
 8018bac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018bae:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8018bb2:	68fb      	ldr	r3, [r7, #12]
 8018bb4:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }

      /* Check for DMAMUX Synchronization overrun */
      if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8018bb6:	68fb      	ldr	r3, [r7, #12]
 8018bb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8018bba:	681a      	ldr	r2, [r3, #0]
 8018bbc:	68fb      	ldr	r3, [r7, #12]
 8018bbe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018bc0:	4013      	ands	r3, r2
 8018bc2:	2b00      	cmp	r3, #0
 8018bc4:	d00a      	beq.n	8018bdc <HAL_DMA_PollForTransfer+0x4e8>
      {
        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8018bc6:	68fb      	ldr	r3, [r7, #12]
 8018bc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8018bca:	68fa      	ldr	r2, [r7, #12]
 8018bcc:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8018bce:	605a      	str	r2, [r3, #4]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8018bd0:	68fb      	ldr	r3, [r7, #12]
 8018bd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018bd4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8018bd8:	68fb      	ldr	r3, [r7, #12]
 8018bda:	655a      	str	r2, [r3, #84]	@ 0x54
  while(((*isr_reg) & cpltlevel_mask) == 0U)
 8018bdc:	6a3b      	ldr	r3, [r7, #32]
 8018bde:	681a      	ldr	r2, [r3, #0]
 8018be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018be2:	4013      	ands	r3, r2
 8018be4:	2b00      	cmp	r3, #0
 8018be6:	f43f ae4c 	beq.w	8018882 <HAL_DMA_PollForTransfer+0x18e>
    }
  }


  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8018bea:	7afb      	ldrb	r3, [r7, #11]
 8018bec:	2b00      	cmp	r3, #0
 8018bee:	f040 80a0 	bne.w	8018d32 <HAL_DMA_PollForTransfer+0x63e>
  {
    /* Clear the half transfer and transfer complete flags */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8018bf2:	68fb      	ldr	r3, [r7, #12]
 8018bf4:	681b      	ldr	r3, [r3, #0]
 8018bf6:	4a28      	ldr	r2, [pc, #160]	@ (8018c98 <HAL_DMA_PollForTransfer+0x5a4>)
 8018bf8:	4293      	cmp	r3, r2
 8018bfa:	d04a      	beq.n	8018c92 <HAL_DMA_PollForTransfer+0x59e>
 8018bfc:	68fb      	ldr	r3, [r7, #12]
 8018bfe:	681b      	ldr	r3, [r3, #0]
 8018c00:	4a26      	ldr	r2, [pc, #152]	@ (8018c9c <HAL_DMA_PollForTransfer+0x5a8>)
 8018c02:	4293      	cmp	r3, r2
 8018c04:	d045      	beq.n	8018c92 <HAL_DMA_PollForTransfer+0x59e>
 8018c06:	68fb      	ldr	r3, [r7, #12]
 8018c08:	681b      	ldr	r3, [r3, #0]
 8018c0a:	4a25      	ldr	r2, [pc, #148]	@ (8018ca0 <HAL_DMA_PollForTransfer+0x5ac>)
 8018c0c:	4293      	cmp	r3, r2
 8018c0e:	d040      	beq.n	8018c92 <HAL_DMA_PollForTransfer+0x59e>
 8018c10:	68fb      	ldr	r3, [r7, #12]
 8018c12:	681b      	ldr	r3, [r3, #0]
 8018c14:	4a23      	ldr	r2, [pc, #140]	@ (8018ca4 <HAL_DMA_PollForTransfer+0x5b0>)
 8018c16:	4293      	cmp	r3, r2
 8018c18:	d03b      	beq.n	8018c92 <HAL_DMA_PollForTransfer+0x59e>
 8018c1a:	68fb      	ldr	r3, [r7, #12]
 8018c1c:	681b      	ldr	r3, [r3, #0]
 8018c1e:	4a22      	ldr	r2, [pc, #136]	@ (8018ca8 <HAL_DMA_PollForTransfer+0x5b4>)
 8018c20:	4293      	cmp	r3, r2
 8018c22:	d036      	beq.n	8018c92 <HAL_DMA_PollForTransfer+0x59e>
 8018c24:	68fb      	ldr	r3, [r7, #12]
 8018c26:	681b      	ldr	r3, [r3, #0]
 8018c28:	4a20      	ldr	r2, [pc, #128]	@ (8018cac <HAL_DMA_PollForTransfer+0x5b8>)
 8018c2a:	4293      	cmp	r3, r2
 8018c2c:	d031      	beq.n	8018c92 <HAL_DMA_PollForTransfer+0x59e>
 8018c2e:	68fb      	ldr	r3, [r7, #12]
 8018c30:	681b      	ldr	r3, [r3, #0]
 8018c32:	4a1f      	ldr	r2, [pc, #124]	@ (8018cb0 <HAL_DMA_PollForTransfer+0x5bc>)
 8018c34:	4293      	cmp	r3, r2
 8018c36:	d02c      	beq.n	8018c92 <HAL_DMA_PollForTransfer+0x59e>
 8018c38:	68fb      	ldr	r3, [r7, #12]
 8018c3a:	681b      	ldr	r3, [r3, #0]
 8018c3c:	4a1d      	ldr	r2, [pc, #116]	@ (8018cb4 <HAL_DMA_PollForTransfer+0x5c0>)
 8018c3e:	4293      	cmp	r3, r2
 8018c40:	d027      	beq.n	8018c92 <HAL_DMA_PollForTransfer+0x59e>
 8018c42:	68fb      	ldr	r3, [r7, #12]
 8018c44:	681b      	ldr	r3, [r3, #0]
 8018c46:	4a1c      	ldr	r2, [pc, #112]	@ (8018cb8 <HAL_DMA_PollForTransfer+0x5c4>)
 8018c48:	4293      	cmp	r3, r2
 8018c4a:	d022      	beq.n	8018c92 <HAL_DMA_PollForTransfer+0x59e>
 8018c4c:	68fb      	ldr	r3, [r7, #12]
 8018c4e:	681b      	ldr	r3, [r3, #0]
 8018c50:	4a1a      	ldr	r2, [pc, #104]	@ (8018cbc <HAL_DMA_PollForTransfer+0x5c8>)
 8018c52:	4293      	cmp	r3, r2
 8018c54:	d01d      	beq.n	8018c92 <HAL_DMA_PollForTransfer+0x59e>
 8018c56:	68fb      	ldr	r3, [r7, #12]
 8018c58:	681b      	ldr	r3, [r3, #0]
 8018c5a:	4a19      	ldr	r2, [pc, #100]	@ (8018cc0 <HAL_DMA_PollForTransfer+0x5cc>)
 8018c5c:	4293      	cmp	r3, r2
 8018c5e:	d018      	beq.n	8018c92 <HAL_DMA_PollForTransfer+0x59e>
 8018c60:	68fb      	ldr	r3, [r7, #12]
 8018c62:	681b      	ldr	r3, [r3, #0]
 8018c64:	4a17      	ldr	r2, [pc, #92]	@ (8018cc4 <HAL_DMA_PollForTransfer+0x5d0>)
 8018c66:	4293      	cmp	r3, r2
 8018c68:	d013      	beq.n	8018c92 <HAL_DMA_PollForTransfer+0x59e>
 8018c6a:	68fb      	ldr	r3, [r7, #12]
 8018c6c:	681b      	ldr	r3, [r3, #0]
 8018c6e:	4a16      	ldr	r2, [pc, #88]	@ (8018cc8 <HAL_DMA_PollForTransfer+0x5d4>)
 8018c70:	4293      	cmp	r3, r2
 8018c72:	d00e      	beq.n	8018c92 <HAL_DMA_PollForTransfer+0x59e>
 8018c74:	68fb      	ldr	r3, [r7, #12]
 8018c76:	681b      	ldr	r3, [r3, #0]
 8018c78:	4a14      	ldr	r2, [pc, #80]	@ (8018ccc <HAL_DMA_PollForTransfer+0x5d8>)
 8018c7a:	4293      	cmp	r3, r2
 8018c7c:	d009      	beq.n	8018c92 <HAL_DMA_PollForTransfer+0x59e>
 8018c7e:	68fb      	ldr	r3, [r7, #12]
 8018c80:	681b      	ldr	r3, [r3, #0]
 8018c82:	4a13      	ldr	r2, [pc, #76]	@ (8018cd0 <HAL_DMA_PollForTransfer+0x5dc>)
 8018c84:	4293      	cmp	r3, r2
 8018c86:	d004      	beq.n	8018c92 <HAL_DMA_PollForTransfer+0x59e>
 8018c88:	68fb      	ldr	r3, [r7, #12]
 8018c8a:	681b      	ldr	r3, [r3, #0]
 8018c8c:	4a11      	ldr	r2, [pc, #68]	@ (8018cd4 <HAL_DMA_PollForTransfer+0x5e0>)
 8018c8e:	4293      	cmp	r3, r2
 8018c90:	d132      	bne.n	8018cf8 <HAL_DMA_PollForTransfer+0x604>
 8018c92:	2301      	movs	r3, #1
 8018c94:	e031      	b.n	8018cfa <HAL_DMA_PollForTransfer+0x606>
 8018c96:	bf00      	nop
 8018c98:	40020010 	.word	0x40020010
 8018c9c:	40020028 	.word	0x40020028
 8018ca0:	40020040 	.word	0x40020040
 8018ca4:	40020058 	.word	0x40020058
 8018ca8:	40020070 	.word	0x40020070
 8018cac:	40020088 	.word	0x40020088
 8018cb0:	400200a0 	.word	0x400200a0
 8018cb4:	400200b8 	.word	0x400200b8
 8018cb8:	40020410 	.word	0x40020410
 8018cbc:	40020428 	.word	0x40020428
 8018cc0:	40020440 	.word	0x40020440
 8018cc4:	40020458 	.word	0x40020458
 8018cc8:	40020470 	.word	0x40020470
 8018ccc:	40020488 	.word	0x40020488
 8018cd0:	400204a0 	.word	0x400204a0
 8018cd4:	400204b8 	.word	0x400204b8
 8018cd8:	58025408 	.word	0x58025408
 8018cdc:	5802541c 	.word	0x5802541c
 8018ce0:	58025430 	.word	0x58025430
 8018ce4:	58025444 	.word	0x58025444
 8018ce8:	58025458 	.word	0x58025458
 8018cec:	5802546c 	.word	0x5802546c
 8018cf0:	58025480 	.word	0x58025480
 8018cf4:	58025494 	.word	0x58025494
 8018cf8:	2300      	movs	r3, #0
 8018cfa:	2b00      	cmp	r3, #0
 8018cfc:	d008      	beq.n	8018d10 <HAL_DMA_PollForTransfer+0x61c>
    {
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << (hdma->StreamIndex & 0x1FU);
 8018cfe:	68fb      	ldr	r3, [r7, #12]
 8018d00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8018d02:	f003 031f 	and.w	r3, r3, #31
 8018d06:	2230      	movs	r2, #48	@ 0x30
 8018d08:	409a      	lsls	r2, r3
 8018d0a:	69fb      	ldr	r3, [r7, #28]
 8018d0c:	601a      	str	r2, [r3, #0]
 8018d0e:	e007      	b.n	8018d20 <HAL_DMA_PollForTransfer+0x62c>
    }
    else /* BDMA channel */
    {
      (*ifcr_reg) = (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU));
 8018d10:	68fb      	ldr	r3, [r7, #12]
 8018d12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8018d14:	f003 031f 	and.w	r3, r3, #31
 8018d18:	2202      	movs	r2, #2
 8018d1a:	409a      	lsls	r2, r3
 8018d1c:	69fb      	ldr	r3, [r7, #28]
 8018d1e:	601a      	str	r2, [r3, #0]
    }

    hdma->State = HAL_DMA_STATE_READY;
 8018d20:	68fb      	ldr	r3, [r7, #12]
 8018d22:	2201      	movs	r2, #1
 8018d24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8018d28:	68fb      	ldr	r3, [r7, #12]
 8018d2a:	2200      	movs	r2, #0
 8018d2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8018d30:	e065      	b.n	8018dfe <HAL_DMA_PollForTransfer+0x70a>
  }
  else /*CompleteLevel = HAL_DMA_HALF_TRANSFER*/
  {
    /* Clear the half transfer and transfer complete flags */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8018d32:	68fb      	ldr	r3, [r7, #12]
 8018d34:	681b      	ldr	r3, [r3, #0]
 8018d36:	4a34      	ldr	r2, [pc, #208]	@ (8018e08 <HAL_DMA_PollForTransfer+0x714>)
 8018d38:	4293      	cmp	r3, r2
 8018d3a:	d04a      	beq.n	8018dd2 <HAL_DMA_PollForTransfer+0x6de>
 8018d3c:	68fb      	ldr	r3, [r7, #12]
 8018d3e:	681b      	ldr	r3, [r3, #0]
 8018d40:	4a32      	ldr	r2, [pc, #200]	@ (8018e0c <HAL_DMA_PollForTransfer+0x718>)
 8018d42:	4293      	cmp	r3, r2
 8018d44:	d045      	beq.n	8018dd2 <HAL_DMA_PollForTransfer+0x6de>
 8018d46:	68fb      	ldr	r3, [r7, #12]
 8018d48:	681b      	ldr	r3, [r3, #0]
 8018d4a:	4a31      	ldr	r2, [pc, #196]	@ (8018e10 <HAL_DMA_PollForTransfer+0x71c>)
 8018d4c:	4293      	cmp	r3, r2
 8018d4e:	d040      	beq.n	8018dd2 <HAL_DMA_PollForTransfer+0x6de>
 8018d50:	68fb      	ldr	r3, [r7, #12]
 8018d52:	681b      	ldr	r3, [r3, #0]
 8018d54:	4a2f      	ldr	r2, [pc, #188]	@ (8018e14 <HAL_DMA_PollForTransfer+0x720>)
 8018d56:	4293      	cmp	r3, r2
 8018d58:	d03b      	beq.n	8018dd2 <HAL_DMA_PollForTransfer+0x6de>
 8018d5a:	68fb      	ldr	r3, [r7, #12]
 8018d5c:	681b      	ldr	r3, [r3, #0]
 8018d5e:	4a2e      	ldr	r2, [pc, #184]	@ (8018e18 <HAL_DMA_PollForTransfer+0x724>)
 8018d60:	4293      	cmp	r3, r2
 8018d62:	d036      	beq.n	8018dd2 <HAL_DMA_PollForTransfer+0x6de>
 8018d64:	68fb      	ldr	r3, [r7, #12]
 8018d66:	681b      	ldr	r3, [r3, #0]
 8018d68:	4a2c      	ldr	r2, [pc, #176]	@ (8018e1c <HAL_DMA_PollForTransfer+0x728>)
 8018d6a:	4293      	cmp	r3, r2
 8018d6c:	d031      	beq.n	8018dd2 <HAL_DMA_PollForTransfer+0x6de>
 8018d6e:	68fb      	ldr	r3, [r7, #12]
 8018d70:	681b      	ldr	r3, [r3, #0]
 8018d72:	4a2b      	ldr	r2, [pc, #172]	@ (8018e20 <HAL_DMA_PollForTransfer+0x72c>)
 8018d74:	4293      	cmp	r3, r2
 8018d76:	d02c      	beq.n	8018dd2 <HAL_DMA_PollForTransfer+0x6de>
 8018d78:	68fb      	ldr	r3, [r7, #12]
 8018d7a:	681b      	ldr	r3, [r3, #0]
 8018d7c:	4a29      	ldr	r2, [pc, #164]	@ (8018e24 <HAL_DMA_PollForTransfer+0x730>)
 8018d7e:	4293      	cmp	r3, r2
 8018d80:	d027      	beq.n	8018dd2 <HAL_DMA_PollForTransfer+0x6de>
 8018d82:	68fb      	ldr	r3, [r7, #12]
 8018d84:	681b      	ldr	r3, [r3, #0]
 8018d86:	4a28      	ldr	r2, [pc, #160]	@ (8018e28 <HAL_DMA_PollForTransfer+0x734>)
 8018d88:	4293      	cmp	r3, r2
 8018d8a:	d022      	beq.n	8018dd2 <HAL_DMA_PollForTransfer+0x6de>
 8018d8c:	68fb      	ldr	r3, [r7, #12]
 8018d8e:	681b      	ldr	r3, [r3, #0]
 8018d90:	4a26      	ldr	r2, [pc, #152]	@ (8018e2c <HAL_DMA_PollForTransfer+0x738>)
 8018d92:	4293      	cmp	r3, r2
 8018d94:	d01d      	beq.n	8018dd2 <HAL_DMA_PollForTransfer+0x6de>
 8018d96:	68fb      	ldr	r3, [r7, #12]
 8018d98:	681b      	ldr	r3, [r3, #0]
 8018d9a:	4a25      	ldr	r2, [pc, #148]	@ (8018e30 <HAL_DMA_PollForTransfer+0x73c>)
 8018d9c:	4293      	cmp	r3, r2
 8018d9e:	d018      	beq.n	8018dd2 <HAL_DMA_PollForTransfer+0x6de>
 8018da0:	68fb      	ldr	r3, [r7, #12]
 8018da2:	681b      	ldr	r3, [r3, #0]
 8018da4:	4a23      	ldr	r2, [pc, #140]	@ (8018e34 <HAL_DMA_PollForTransfer+0x740>)
 8018da6:	4293      	cmp	r3, r2
 8018da8:	d013      	beq.n	8018dd2 <HAL_DMA_PollForTransfer+0x6de>
 8018daa:	68fb      	ldr	r3, [r7, #12]
 8018dac:	681b      	ldr	r3, [r3, #0]
 8018dae:	4a22      	ldr	r2, [pc, #136]	@ (8018e38 <HAL_DMA_PollForTransfer+0x744>)
 8018db0:	4293      	cmp	r3, r2
 8018db2:	d00e      	beq.n	8018dd2 <HAL_DMA_PollForTransfer+0x6de>
 8018db4:	68fb      	ldr	r3, [r7, #12]
 8018db6:	681b      	ldr	r3, [r3, #0]
 8018db8:	4a20      	ldr	r2, [pc, #128]	@ (8018e3c <HAL_DMA_PollForTransfer+0x748>)
 8018dba:	4293      	cmp	r3, r2
 8018dbc:	d009      	beq.n	8018dd2 <HAL_DMA_PollForTransfer+0x6de>
 8018dbe:	68fb      	ldr	r3, [r7, #12]
 8018dc0:	681b      	ldr	r3, [r3, #0]
 8018dc2:	4a1f      	ldr	r2, [pc, #124]	@ (8018e40 <HAL_DMA_PollForTransfer+0x74c>)
 8018dc4:	4293      	cmp	r3, r2
 8018dc6:	d004      	beq.n	8018dd2 <HAL_DMA_PollForTransfer+0x6de>
 8018dc8:	68fb      	ldr	r3, [r7, #12]
 8018dca:	681b      	ldr	r3, [r3, #0]
 8018dcc:	4a1d      	ldr	r2, [pc, #116]	@ (8018e44 <HAL_DMA_PollForTransfer+0x750>)
 8018dce:	4293      	cmp	r3, r2
 8018dd0:	d101      	bne.n	8018dd6 <HAL_DMA_PollForTransfer+0x6e2>
 8018dd2:	2301      	movs	r3, #1
 8018dd4:	e000      	b.n	8018dd8 <HAL_DMA_PollForTransfer+0x6e4>
 8018dd6:	2300      	movs	r3, #0
 8018dd8:	2b00      	cmp	r3, #0
 8018dda:	d008      	beq.n	8018dee <HAL_DMA_PollForTransfer+0x6fa>
    {
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4) << (hdma->StreamIndex & 0x1FU);
 8018ddc:	68fb      	ldr	r3, [r7, #12]
 8018dde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8018de0:	f003 031f 	and.w	r3, r3, #31
 8018de4:	2210      	movs	r2, #16
 8018de6:	409a      	lsls	r2, r3
 8018de8:	69fb      	ldr	r3, [r7, #28]
 8018dea:	601a      	str	r2, [r3, #0]
 8018dec:	e007      	b.n	8018dfe <HAL_DMA_PollForTransfer+0x70a>
    }
    else /* BDMA channel */
    {
      (*ifcr_reg) = (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU));
 8018dee:	68fb      	ldr	r3, [r7, #12]
 8018df0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8018df2:	f003 031f 	and.w	r3, r3, #31
 8018df6:	2204      	movs	r2, #4
 8018df8:	409a      	lsls	r2, r3
 8018dfa:	69fb      	ldr	r3, [r7, #28]
 8018dfc:	601a      	str	r2, [r3, #0]
    }
  }

  return status;
 8018dfe:	7efb      	ldrb	r3, [r7, #27]
}
 8018e00:	4618      	mov	r0, r3
 8018e02:	3728      	adds	r7, #40	@ 0x28
 8018e04:	46bd      	mov	sp, r7
 8018e06:	bd80      	pop	{r7, pc}
 8018e08:	40020010 	.word	0x40020010
 8018e0c:	40020028 	.word	0x40020028
 8018e10:	40020040 	.word	0x40020040
 8018e14:	40020058 	.word	0x40020058
 8018e18:	40020070 	.word	0x40020070
 8018e1c:	40020088 	.word	0x40020088
 8018e20:	400200a0 	.word	0x400200a0
 8018e24:	400200b8 	.word	0x400200b8
 8018e28:	40020410 	.word	0x40020410
 8018e2c:	40020428 	.word	0x40020428
 8018e30:	40020440 	.word	0x40020440
 8018e34:	40020458 	.word	0x40020458
 8018e38:	40020470 	.word	0x40020470
 8018e3c:	40020488 	.word	0x40020488
 8018e40:	400204a0 	.word	0x400204a0
 8018e44:	400204b8 	.word	0x400204b8

08018e48 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8018e48:	b480      	push	{r7}
 8018e4a:	b087      	sub	sp, #28
 8018e4c:	af00      	add	r7, sp, #0
 8018e4e:	60f8      	str	r0, [r7, #12]
 8018e50:	60b9      	str	r1, [r7, #8]
 8018e52:	607a      	str	r2, [r7, #4]
 8018e54:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8018e56:	68fb      	ldr	r3, [r7, #12]
 8018e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018e5a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8018e5c:	68fb      	ldr	r3, [r7, #12]
 8018e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018e60:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8018e62:	68fb      	ldr	r3, [r7, #12]
 8018e64:	681b      	ldr	r3, [r3, #0]
 8018e66:	4a7f      	ldr	r2, [pc, #508]	@ (8019064 <DMA_SetConfig+0x21c>)
 8018e68:	4293      	cmp	r3, r2
 8018e6a:	d072      	beq.n	8018f52 <DMA_SetConfig+0x10a>
 8018e6c:	68fb      	ldr	r3, [r7, #12]
 8018e6e:	681b      	ldr	r3, [r3, #0]
 8018e70:	4a7d      	ldr	r2, [pc, #500]	@ (8019068 <DMA_SetConfig+0x220>)
 8018e72:	4293      	cmp	r3, r2
 8018e74:	d06d      	beq.n	8018f52 <DMA_SetConfig+0x10a>
 8018e76:	68fb      	ldr	r3, [r7, #12]
 8018e78:	681b      	ldr	r3, [r3, #0]
 8018e7a:	4a7c      	ldr	r2, [pc, #496]	@ (801906c <DMA_SetConfig+0x224>)
 8018e7c:	4293      	cmp	r3, r2
 8018e7e:	d068      	beq.n	8018f52 <DMA_SetConfig+0x10a>
 8018e80:	68fb      	ldr	r3, [r7, #12]
 8018e82:	681b      	ldr	r3, [r3, #0]
 8018e84:	4a7a      	ldr	r2, [pc, #488]	@ (8019070 <DMA_SetConfig+0x228>)
 8018e86:	4293      	cmp	r3, r2
 8018e88:	d063      	beq.n	8018f52 <DMA_SetConfig+0x10a>
 8018e8a:	68fb      	ldr	r3, [r7, #12]
 8018e8c:	681b      	ldr	r3, [r3, #0]
 8018e8e:	4a79      	ldr	r2, [pc, #484]	@ (8019074 <DMA_SetConfig+0x22c>)
 8018e90:	4293      	cmp	r3, r2
 8018e92:	d05e      	beq.n	8018f52 <DMA_SetConfig+0x10a>
 8018e94:	68fb      	ldr	r3, [r7, #12]
 8018e96:	681b      	ldr	r3, [r3, #0]
 8018e98:	4a77      	ldr	r2, [pc, #476]	@ (8019078 <DMA_SetConfig+0x230>)
 8018e9a:	4293      	cmp	r3, r2
 8018e9c:	d059      	beq.n	8018f52 <DMA_SetConfig+0x10a>
 8018e9e:	68fb      	ldr	r3, [r7, #12]
 8018ea0:	681b      	ldr	r3, [r3, #0]
 8018ea2:	4a76      	ldr	r2, [pc, #472]	@ (801907c <DMA_SetConfig+0x234>)
 8018ea4:	4293      	cmp	r3, r2
 8018ea6:	d054      	beq.n	8018f52 <DMA_SetConfig+0x10a>
 8018ea8:	68fb      	ldr	r3, [r7, #12]
 8018eaa:	681b      	ldr	r3, [r3, #0]
 8018eac:	4a74      	ldr	r2, [pc, #464]	@ (8019080 <DMA_SetConfig+0x238>)
 8018eae:	4293      	cmp	r3, r2
 8018eb0:	d04f      	beq.n	8018f52 <DMA_SetConfig+0x10a>
 8018eb2:	68fb      	ldr	r3, [r7, #12]
 8018eb4:	681b      	ldr	r3, [r3, #0]
 8018eb6:	4a73      	ldr	r2, [pc, #460]	@ (8019084 <DMA_SetConfig+0x23c>)
 8018eb8:	4293      	cmp	r3, r2
 8018eba:	d04a      	beq.n	8018f52 <DMA_SetConfig+0x10a>
 8018ebc:	68fb      	ldr	r3, [r7, #12]
 8018ebe:	681b      	ldr	r3, [r3, #0]
 8018ec0:	4a71      	ldr	r2, [pc, #452]	@ (8019088 <DMA_SetConfig+0x240>)
 8018ec2:	4293      	cmp	r3, r2
 8018ec4:	d045      	beq.n	8018f52 <DMA_SetConfig+0x10a>
 8018ec6:	68fb      	ldr	r3, [r7, #12]
 8018ec8:	681b      	ldr	r3, [r3, #0]
 8018eca:	4a70      	ldr	r2, [pc, #448]	@ (801908c <DMA_SetConfig+0x244>)
 8018ecc:	4293      	cmp	r3, r2
 8018ece:	d040      	beq.n	8018f52 <DMA_SetConfig+0x10a>
 8018ed0:	68fb      	ldr	r3, [r7, #12]
 8018ed2:	681b      	ldr	r3, [r3, #0]
 8018ed4:	4a6e      	ldr	r2, [pc, #440]	@ (8019090 <DMA_SetConfig+0x248>)
 8018ed6:	4293      	cmp	r3, r2
 8018ed8:	d03b      	beq.n	8018f52 <DMA_SetConfig+0x10a>
 8018eda:	68fb      	ldr	r3, [r7, #12]
 8018edc:	681b      	ldr	r3, [r3, #0]
 8018ede:	4a6d      	ldr	r2, [pc, #436]	@ (8019094 <DMA_SetConfig+0x24c>)
 8018ee0:	4293      	cmp	r3, r2
 8018ee2:	d036      	beq.n	8018f52 <DMA_SetConfig+0x10a>
 8018ee4:	68fb      	ldr	r3, [r7, #12]
 8018ee6:	681b      	ldr	r3, [r3, #0]
 8018ee8:	4a6b      	ldr	r2, [pc, #428]	@ (8019098 <DMA_SetConfig+0x250>)
 8018eea:	4293      	cmp	r3, r2
 8018eec:	d031      	beq.n	8018f52 <DMA_SetConfig+0x10a>
 8018eee:	68fb      	ldr	r3, [r7, #12]
 8018ef0:	681b      	ldr	r3, [r3, #0]
 8018ef2:	4a6a      	ldr	r2, [pc, #424]	@ (801909c <DMA_SetConfig+0x254>)
 8018ef4:	4293      	cmp	r3, r2
 8018ef6:	d02c      	beq.n	8018f52 <DMA_SetConfig+0x10a>
 8018ef8:	68fb      	ldr	r3, [r7, #12]
 8018efa:	681b      	ldr	r3, [r3, #0]
 8018efc:	4a68      	ldr	r2, [pc, #416]	@ (80190a0 <DMA_SetConfig+0x258>)
 8018efe:	4293      	cmp	r3, r2
 8018f00:	d027      	beq.n	8018f52 <DMA_SetConfig+0x10a>
 8018f02:	68fb      	ldr	r3, [r7, #12]
 8018f04:	681b      	ldr	r3, [r3, #0]
 8018f06:	4a67      	ldr	r2, [pc, #412]	@ (80190a4 <DMA_SetConfig+0x25c>)
 8018f08:	4293      	cmp	r3, r2
 8018f0a:	d022      	beq.n	8018f52 <DMA_SetConfig+0x10a>
 8018f0c:	68fb      	ldr	r3, [r7, #12]
 8018f0e:	681b      	ldr	r3, [r3, #0]
 8018f10:	4a65      	ldr	r2, [pc, #404]	@ (80190a8 <DMA_SetConfig+0x260>)
 8018f12:	4293      	cmp	r3, r2
 8018f14:	d01d      	beq.n	8018f52 <DMA_SetConfig+0x10a>
 8018f16:	68fb      	ldr	r3, [r7, #12]
 8018f18:	681b      	ldr	r3, [r3, #0]
 8018f1a:	4a64      	ldr	r2, [pc, #400]	@ (80190ac <DMA_SetConfig+0x264>)
 8018f1c:	4293      	cmp	r3, r2
 8018f1e:	d018      	beq.n	8018f52 <DMA_SetConfig+0x10a>
 8018f20:	68fb      	ldr	r3, [r7, #12]
 8018f22:	681b      	ldr	r3, [r3, #0]
 8018f24:	4a62      	ldr	r2, [pc, #392]	@ (80190b0 <DMA_SetConfig+0x268>)
 8018f26:	4293      	cmp	r3, r2
 8018f28:	d013      	beq.n	8018f52 <DMA_SetConfig+0x10a>
 8018f2a:	68fb      	ldr	r3, [r7, #12]
 8018f2c:	681b      	ldr	r3, [r3, #0]
 8018f2e:	4a61      	ldr	r2, [pc, #388]	@ (80190b4 <DMA_SetConfig+0x26c>)
 8018f30:	4293      	cmp	r3, r2
 8018f32:	d00e      	beq.n	8018f52 <DMA_SetConfig+0x10a>
 8018f34:	68fb      	ldr	r3, [r7, #12]
 8018f36:	681b      	ldr	r3, [r3, #0]
 8018f38:	4a5f      	ldr	r2, [pc, #380]	@ (80190b8 <DMA_SetConfig+0x270>)
 8018f3a:	4293      	cmp	r3, r2
 8018f3c:	d009      	beq.n	8018f52 <DMA_SetConfig+0x10a>
 8018f3e:	68fb      	ldr	r3, [r7, #12]
 8018f40:	681b      	ldr	r3, [r3, #0]
 8018f42:	4a5e      	ldr	r2, [pc, #376]	@ (80190bc <DMA_SetConfig+0x274>)
 8018f44:	4293      	cmp	r3, r2
 8018f46:	d004      	beq.n	8018f52 <DMA_SetConfig+0x10a>
 8018f48:	68fb      	ldr	r3, [r7, #12]
 8018f4a:	681b      	ldr	r3, [r3, #0]
 8018f4c:	4a5c      	ldr	r2, [pc, #368]	@ (80190c0 <DMA_SetConfig+0x278>)
 8018f4e:	4293      	cmp	r3, r2
 8018f50:	d101      	bne.n	8018f56 <DMA_SetConfig+0x10e>
 8018f52:	2301      	movs	r3, #1
 8018f54:	e000      	b.n	8018f58 <DMA_SetConfig+0x110>
 8018f56:	2300      	movs	r3, #0
 8018f58:	2b00      	cmp	r3, #0
 8018f5a:	d00d      	beq.n	8018f78 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8018f5c:	68fb      	ldr	r3, [r7, #12]
 8018f5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8018f60:	68fa      	ldr	r2, [r7, #12]
 8018f62:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8018f64:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8018f66:	68fb      	ldr	r3, [r7, #12]
 8018f68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018f6a:	2b00      	cmp	r3, #0
 8018f6c:	d004      	beq.n	8018f78 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8018f6e:	68fb      	ldr	r3, [r7, #12]
 8018f70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018f72:	68fa      	ldr	r2, [r7, #12]
 8018f74:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8018f76:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8018f78:	68fb      	ldr	r3, [r7, #12]
 8018f7a:	681b      	ldr	r3, [r3, #0]
 8018f7c:	4a39      	ldr	r2, [pc, #228]	@ (8019064 <DMA_SetConfig+0x21c>)
 8018f7e:	4293      	cmp	r3, r2
 8018f80:	d04a      	beq.n	8019018 <DMA_SetConfig+0x1d0>
 8018f82:	68fb      	ldr	r3, [r7, #12]
 8018f84:	681b      	ldr	r3, [r3, #0]
 8018f86:	4a38      	ldr	r2, [pc, #224]	@ (8019068 <DMA_SetConfig+0x220>)
 8018f88:	4293      	cmp	r3, r2
 8018f8a:	d045      	beq.n	8019018 <DMA_SetConfig+0x1d0>
 8018f8c:	68fb      	ldr	r3, [r7, #12]
 8018f8e:	681b      	ldr	r3, [r3, #0]
 8018f90:	4a36      	ldr	r2, [pc, #216]	@ (801906c <DMA_SetConfig+0x224>)
 8018f92:	4293      	cmp	r3, r2
 8018f94:	d040      	beq.n	8019018 <DMA_SetConfig+0x1d0>
 8018f96:	68fb      	ldr	r3, [r7, #12]
 8018f98:	681b      	ldr	r3, [r3, #0]
 8018f9a:	4a35      	ldr	r2, [pc, #212]	@ (8019070 <DMA_SetConfig+0x228>)
 8018f9c:	4293      	cmp	r3, r2
 8018f9e:	d03b      	beq.n	8019018 <DMA_SetConfig+0x1d0>
 8018fa0:	68fb      	ldr	r3, [r7, #12]
 8018fa2:	681b      	ldr	r3, [r3, #0]
 8018fa4:	4a33      	ldr	r2, [pc, #204]	@ (8019074 <DMA_SetConfig+0x22c>)
 8018fa6:	4293      	cmp	r3, r2
 8018fa8:	d036      	beq.n	8019018 <DMA_SetConfig+0x1d0>
 8018faa:	68fb      	ldr	r3, [r7, #12]
 8018fac:	681b      	ldr	r3, [r3, #0]
 8018fae:	4a32      	ldr	r2, [pc, #200]	@ (8019078 <DMA_SetConfig+0x230>)
 8018fb0:	4293      	cmp	r3, r2
 8018fb2:	d031      	beq.n	8019018 <DMA_SetConfig+0x1d0>
 8018fb4:	68fb      	ldr	r3, [r7, #12]
 8018fb6:	681b      	ldr	r3, [r3, #0]
 8018fb8:	4a30      	ldr	r2, [pc, #192]	@ (801907c <DMA_SetConfig+0x234>)
 8018fba:	4293      	cmp	r3, r2
 8018fbc:	d02c      	beq.n	8019018 <DMA_SetConfig+0x1d0>
 8018fbe:	68fb      	ldr	r3, [r7, #12]
 8018fc0:	681b      	ldr	r3, [r3, #0]
 8018fc2:	4a2f      	ldr	r2, [pc, #188]	@ (8019080 <DMA_SetConfig+0x238>)
 8018fc4:	4293      	cmp	r3, r2
 8018fc6:	d027      	beq.n	8019018 <DMA_SetConfig+0x1d0>
 8018fc8:	68fb      	ldr	r3, [r7, #12]
 8018fca:	681b      	ldr	r3, [r3, #0]
 8018fcc:	4a2d      	ldr	r2, [pc, #180]	@ (8019084 <DMA_SetConfig+0x23c>)
 8018fce:	4293      	cmp	r3, r2
 8018fd0:	d022      	beq.n	8019018 <DMA_SetConfig+0x1d0>
 8018fd2:	68fb      	ldr	r3, [r7, #12]
 8018fd4:	681b      	ldr	r3, [r3, #0]
 8018fd6:	4a2c      	ldr	r2, [pc, #176]	@ (8019088 <DMA_SetConfig+0x240>)
 8018fd8:	4293      	cmp	r3, r2
 8018fda:	d01d      	beq.n	8019018 <DMA_SetConfig+0x1d0>
 8018fdc:	68fb      	ldr	r3, [r7, #12]
 8018fde:	681b      	ldr	r3, [r3, #0]
 8018fe0:	4a2a      	ldr	r2, [pc, #168]	@ (801908c <DMA_SetConfig+0x244>)
 8018fe2:	4293      	cmp	r3, r2
 8018fe4:	d018      	beq.n	8019018 <DMA_SetConfig+0x1d0>
 8018fe6:	68fb      	ldr	r3, [r7, #12]
 8018fe8:	681b      	ldr	r3, [r3, #0]
 8018fea:	4a29      	ldr	r2, [pc, #164]	@ (8019090 <DMA_SetConfig+0x248>)
 8018fec:	4293      	cmp	r3, r2
 8018fee:	d013      	beq.n	8019018 <DMA_SetConfig+0x1d0>
 8018ff0:	68fb      	ldr	r3, [r7, #12]
 8018ff2:	681b      	ldr	r3, [r3, #0]
 8018ff4:	4a27      	ldr	r2, [pc, #156]	@ (8019094 <DMA_SetConfig+0x24c>)
 8018ff6:	4293      	cmp	r3, r2
 8018ff8:	d00e      	beq.n	8019018 <DMA_SetConfig+0x1d0>
 8018ffa:	68fb      	ldr	r3, [r7, #12]
 8018ffc:	681b      	ldr	r3, [r3, #0]
 8018ffe:	4a26      	ldr	r2, [pc, #152]	@ (8019098 <DMA_SetConfig+0x250>)
 8019000:	4293      	cmp	r3, r2
 8019002:	d009      	beq.n	8019018 <DMA_SetConfig+0x1d0>
 8019004:	68fb      	ldr	r3, [r7, #12]
 8019006:	681b      	ldr	r3, [r3, #0]
 8019008:	4a24      	ldr	r2, [pc, #144]	@ (801909c <DMA_SetConfig+0x254>)
 801900a:	4293      	cmp	r3, r2
 801900c:	d004      	beq.n	8019018 <DMA_SetConfig+0x1d0>
 801900e:	68fb      	ldr	r3, [r7, #12]
 8019010:	681b      	ldr	r3, [r3, #0]
 8019012:	4a23      	ldr	r2, [pc, #140]	@ (80190a0 <DMA_SetConfig+0x258>)
 8019014:	4293      	cmp	r3, r2
 8019016:	d101      	bne.n	801901c <DMA_SetConfig+0x1d4>
 8019018:	2301      	movs	r3, #1
 801901a:	e000      	b.n	801901e <DMA_SetConfig+0x1d6>
 801901c:	2300      	movs	r3, #0
 801901e:	2b00      	cmp	r3, #0
 8019020:	d059      	beq.n	80190d6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8019022:	68fb      	ldr	r3, [r7, #12]
 8019024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8019026:	f003 031f 	and.w	r3, r3, #31
 801902a:	223f      	movs	r2, #63	@ 0x3f
 801902c:	409a      	lsls	r2, r3
 801902e:	697b      	ldr	r3, [r7, #20]
 8019030:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8019032:	68fb      	ldr	r3, [r7, #12]
 8019034:	681b      	ldr	r3, [r3, #0]
 8019036:	681a      	ldr	r2, [r3, #0]
 8019038:	68fb      	ldr	r3, [r7, #12]
 801903a:	681b      	ldr	r3, [r3, #0]
 801903c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8019040:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8019042:	68fb      	ldr	r3, [r7, #12]
 8019044:	681b      	ldr	r3, [r3, #0]
 8019046:	683a      	ldr	r2, [r7, #0]
 8019048:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801904a:	68fb      	ldr	r3, [r7, #12]
 801904c:	689b      	ldr	r3, [r3, #8]
 801904e:	2b40      	cmp	r3, #64	@ 0x40
 8019050:	d138      	bne.n	80190c4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8019052:	68fb      	ldr	r3, [r7, #12]
 8019054:	681b      	ldr	r3, [r3, #0]
 8019056:	687a      	ldr	r2, [r7, #4]
 8019058:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 801905a:	68fb      	ldr	r3, [r7, #12]
 801905c:	681b      	ldr	r3, [r3, #0]
 801905e:	68ba      	ldr	r2, [r7, #8]
 8019060:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8019062:	e086      	b.n	8019172 <DMA_SetConfig+0x32a>
 8019064:	40020010 	.word	0x40020010
 8019068:	40020028 	.word	0x40020028
 801906c:	40020040 	.word	0x40020040
 8019070:	40020058 	.word	0x40020058
 8019074:	40020070 	.word	0x40020070
 8019078:	40020088 	.word	0x40020088
 801907c:	400200a0 	.word	0x400200a0
 8019080:	400200b8 	.word	0x400200b8
 8019084:	40020410 	.word	0x40020410
 8019088:	40020428 	.word	0x40020428
 801908c:	40020440 	.word	0x40020440
 8019090:	40020458 	.word	0x40020458
 8019094:	40020470 	.word	0x40020470
 8019098:	40020488 	.word	0x40020488
 801909c:	400204a0 	.word	0x400204a0
 80190a0:	400204b8 	.word	0x400204b8
 80190a4:	58025408 	.word	0x58025408
 80190a8:	5802541c 	.word	0x5802541c
 80190ac:	58025430 	.word	0x58025430
 80190b0:	58025444 	.word	0x58025444
 80190b4:	58025458 	.word	0x58025458
 80190b8:	5802546c 	.word	0x5802546c
 80190bc:	58025480 	.word	0x58025480
 80190c0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80190c4:	68fb      	ldr	r3, [r7, #12]
 80190c6:	681b      	ldr	r3, [r3, #0]
 80190c8:	68ba      	ldr	r2, [r7, #8]
 80190ca:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80190cc:	68fb      	ldr	r3, [r7, #12]
 80190ce:	681b      	ldr	r3, [r3, #0]
 80190d0:	687a      	ldr	r2, [r7, #4]
 80190d2:	60da      	str	r2, [r3, #12]
}
 80190d4:	e04d      	b.n	8019172 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80190d6:	68fb      	ldr	r3, [r7, #12]
 80190d8:	681b      	ldr	r3, [r3, #0]
 80190da:	4a29      	ldr	r2, [pc, #164]	@ (8019180 <DMA_SetConfig+0x338>)
 80190dc:	4293      	cmp	r3, r2
 80190de:	d022      	beq.n	8019126 <DMA_SetConfig+0x2de>
 80190e0:	68fb      	ldr	r3, [r7, #12]
 80190e2:	681b      	ldr	r3, [r3, #0]
 80190e4:	4a27      	ldr	r2, [pc, #156]	@ (8019184 <DMA_SetConfig+0x33c>)
 80190e6:	4293      	cmp	r3, r2
 80190e8:	d01d      	beq.n	8019126 <DMA_SetConfig+0x2de>
 80190ea:	68fb      	ldr	r3, [r7, #12]
 80190ec:	681b      	ldr	r3, [r3, #0]
 80190ee:	4a26      	ldr	r2, [pc, #152]	@ (8019188 <DMA_SetConfig+0x340>)
 80190f0:	4293      	cmp	r3, r2
 80190f2:	d018      	beq.n	8019126 <DMA_SetConfig+0x2de>
 80190f4:	68fb      	ldr	r3, [r7, #12]
 80190f6:	681b      	ldr	r3, [r3, #0]
 80190f8:	4a24      	ldr	r2, [pc, #144]	@ (801918c <DMA_SetConfig+0x344>)
 80190fa:	4293      	cmp	r3, r2
 80190fc:	d013      	beq.n	8019126 <DMA_SetConfig+0x2de>
 80190fe:	68fb      	ldr	r3, [r7, #12]
 8019100:	681b      	ldr	r3, [r3, #0]
 8019102:	4a23      	ldr	r2, [pc, #140]	@ (8019190 <DMA_SetConfig+0x348>)
 8019104:	4293      	cmp	r3, r2
 8019106:	d00e      	beq.n	8019126 <DMA_SetConfig+0x2de>
 8019108:	68fb      	ldr	r3, [r7, #12]
 801910a:	681b      	ldr	r3, [r3, #0]
 801910c:	4a21      	ldr	r2, [pc, #132]	@ (8019194 <DMA_SetConfig+0x34c>)
 801910e:	4293      	cmp	r3, r2
 8019110:	d009      	beq.n	8019126 <DMA_SetConfig+0x2de>
 8019112:	68fb      	ldr	r3, [r7, #12]
 8019114:	681b      	ldr	r3, [r3, #0]
 8019116:	4a20      	ldr	r2, [pc, #128]	@ (8019198 <DMA_SetConfig+0x350>)
 8019118:	4293      	cmp	r3, r2
 801911a:	d004      	beq.n	8019126 <DMA_SetConfig+0x2de>
 801911c:	68fb      	ldr	r3, [r7, #12]
 801911e:	681b      	ldr	r3, [r3, #0]
 8019120:	4a1e      	ldr	r2, [pc, #120]	@ (801919c <DMA_SetConfig+0x354>)
 8019122:	4293      	cmp	r3, r2
 8019124:	d101      	bne.n	801912a <DMA_SetConfig+0x2e2>
 8019126:	2301      	movs	r3, #1
 8019128:	e000      	b.n	801912c <DMA_SetConfig+0x2e4>
 801912a:	2300      	movs	r3, #0
 801912c:	2b00      	cmp	r3, #0
 801912e:	d020      	beq.n	8019172 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8019130:	68fb      	ldr	r3, [r7, #12]
 8019132:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8019134:	f003 031f 	and.w	r3, r3, #31
 8019138:	2201      	movs	r2, #1
 801913a:	409a      	lsls	r2, r3
 801913c:	693b      	ldr	r3, [r7, #16]
 801913e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8019140:	68fb      	ldr	r3, [r7, #12]
 8019142:	681b      	ldr	r3, [r3, #0]
 8019144:	683a      	ldr	r2, [r7, #0]
 8019146:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8019148:	68fb      	ldr	r3, [r7, #12]
 801914a:	689b      	ldr	r3, [r3, #8]
 801914c:	2b40      	cmp	r3, #64	@ 0x40
 801914e:	d108      	bne.n	8019162 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8019150:	68fb      	ldr	r3, [r7, #12]
 8019152:	681b      	ldr	r3, [r3, #0]
 8019154:	687a      	ldr	r2, [r7, #4]
 8019156:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8019158:	68fb      	ldr	r3, [r7, #12]
 801915a:	681b      	ldr	r3, [r3, #0]
 801915c:	68ba      	ldr	r2, [r7, #8]
 801915e:	60da      	str	r2, [r3, #12]
}
 8019160:	e007      	b.n	8019172 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8019162:	68fb      	ldr	r3, [r7, #12]
 8019164:	681b      	ldr	r3, [r3, #0]
 8019166:	68ba      	ldr	r2, [r7, #8]
 8019168:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 801916a:	68fb      	ldr	r3, [r7, #12]
 801916c:	681b      	ldr	r3, [r3, #0]
 801916e:	687a      	ldr	r2, [r7, #4]
 8019170:	60da      	str	r2, [r3, #12]
}
 8019172:	bf00      	nop
 8019174:	371c      	adds	r7, #28
 8019176:	46bd      	mov	sp, r7
 8019178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801917c:	4770      	bx	lr
 801917e:	bf00      	nop
 8019180:	58025408 	.word	0x58025408
 8019184:	5802541c 	.word	0x5802541c
 8019188:	58025430 	.word	0x58025430
 801918c:	58025444 	.word	0x58025444
 8019190:	58025458 	.word	0x58025458
 8019194:	5802546c 	.word	0x5802546c
 8019198:	58025480 	.word	0x58025480
 801919c:	58025494 	.word	0x58025494

080191a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80191a0:	b480      	push	{r7}
 80191a2:	b085      	sub	sp, #20
 80191a4:	af00      	add	r7, sp, #0
 80191a6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80191a8:	687b      	ldr	r3, [r7, #4]
 80191aa:	681b      	ldr	r3, [r3, #0]
 80191ac:	4a42      	ldr	r2, [pc, #264]	@ (80192b8 <DMA_CalcBaseAndBitshift+0x118>)
 80191ae:	4293      	cmp	r3, r2
 80191b0:	d04a      	beq.n	8019248 <DMA_CalcBaseAndBitshift+0xa8>
 80191b2:	687b      	ldr	r3, [r7, #4]
 80191b4:	681b      	ldr	r3, [r3, #0]
 80191b6:	4a41      	ldr	r2, [pc, #260]	@ (80192bc <DMA_CalcBaseAndBitshift+0x11c>)
 80191b8:	4293      	cmp	r3, r2
 80191ba:	d045      	beq.n	8019248 <DMA_CalcBaseAndBitshift+0xa8>
 80191bc:	687b      	ldr	r3, [r7, #4]
 80191be:	681b      	ldr	r3, [r3, #0]
 80191c0:	4a3f      	ldr	r2, [pc, #252]	@ (80192c0 <DMA_CalcBaseAndBitshift+0x120>)
 80191c2:	4293      	cmp	r3, r2
 80191c4:	d040      	beq.n	8019248 <DMA_CalcBaseAndBitshift+0xa8>
 80191c6:	687b      	ldr	r3, [r7, #4]
 80191c8:	681b      	ldr	r3, [r3, #0]
 80191ca:	4a3e      	ldr	r2, [pc, #248]	@ (80192c4 <DMA_CalcBaseAndBitshift+0x124>)
 80191cc:	4293      	cmp	r3, r2
 80191ce:	d03b      	beq.n	8019248 <DMA_CalcBaseAndBitshift+0xa8>
 80191d0:	687b      	ldr	r3, [r7, #4]
 80191d2:	681b      	ldr	r3, [r3, #0]
 80191d4:	4a3c      	ldr	r2, [pc, #240]	@ (80192c8 <DMA_CalcBaseAndBitshift+0x128>)
 80191d6:	4293      	cmp	r3, r2
 80191d8:	d036      	beq.n	8019248 <DMA_CalcBaseAndBitshift+0xa8>
 80191da:	687b      	ldr	r3, [r7, #4]
 80191dc:	681b      	ldr	r3, [r3, #0]
 80191de:	4a3b      	ldr	r2, [pc, #236]	@ (80192cc <DMA_CalcBaseAndBitshift+0x12c>)
 80191e0:	4293      	cmp	r3, r2
 80191e2:	d031      	beq.n	8019248 <DMA_CalcBaseAndBitshift+0xa8>
 80191e4:	687b      	ldr	r3, [r7, #4]
 80191e6:	681b      	ldr	r3, [r3, #0]
 80191e8:	4a39      	ldr	r2, [pc, #228]	@ (80192d0 <DMA_CalcBaseAndBitshift+0x130>)
 80191ea:	4293      	cmp	r3, r2
 80191ec:	d02c      	beq.n	8019248 <DMA_CalcBaseAndBitshift+0xa8>
 80191ee:	687b      	ldr	r3, [r7, #4]
 80191f0:	681b      	ldr	r3, [r3, #0]
 80191f2:	4a38      	ldr	r2, [pc, #224]	@ (80192d4 <DMA_CalcBaseAndBitshift+0x134>)
 80191f4:	4293      	cmp	r3, r2
 80191f6:	d027      	beq.n	8019248 <DMA_CalcBaseAndBitshift+0xa8>
 80191f8:	687b      	ldr	r3, [r7, #4]
 80191fa:	681b      	ldr	r3, [r3, #0]
 80191fc:	4a36      	ldr	r2, [pc, #216]	@ (80192d8 <DMA_CalcBaseAndBitshift+0x138>)
 80191fe:	4293      	cmp	r3, r2
 8019200:	d022      	beq.n	8019248 <DMA_CalcBaseAndBitshift+0xa8>
 8019202:	687b      	ldr	r3, [r7, #4]
 8019204:	681b      	ldr	r3, [r3, #0]
 8019206:	4a35      	ldr	r2, [pc, #212]	@ (80192dc <DMA_CalcBaseAndBitshift+0x13c>)
 8019208:	4293      	cmp	r3, r2
 801920a:	d01d      	beq.n	8019248 <DMA_CalcBaseAndBitshift+0xa8>
 801920c:	687b      	ldr	r3, [r7, #4]
 801920e:	681b      	ldr	r3, [r3, #0]
 8019210:	4a33      	ldr	r2, [pc, #204]	@ (80192e0 <DMA_CalcBaseAndBitshift+0x140>)
 8019212:	4293      	cmp	r3, r2
 8019214:	d018      	beq.n	8019248 <DMA_CalcBaseAndBitshift+0xa8>
 8019216:	687b      	ldr	r3, [r7, #4]
 8019218:	681b      	ldr	r3, [r3, #0]
 801921a:	4a32      	ldr	r2, [pc, #200]	@ (80192e4 <DMA_CalcBaseAndBitshift+0x144>)
 801921c:	4293      	cmp	r3, r2
 801921e:	d013      	beq.n	8019248 <DMA_CalcBaseAndBitshift+0xa8>
 8019220:	687b      	ldr	r3, [r7, #4]
 8019222:	681b      	ldr	r3, [r3, #0]
 8019224:	4a30      	ldr	r2, [pc, #192]	@ (80192e8 <DMA_CalcBaseAndBitshift+0x148>)
 8019226:	4293      	cmp	r3, r2
 8019228:	d00e      	beq.n	8019248 <DMA_CalcBaseAndBitshift+0xa8>
 801922a:	687b      	ldr	r3, [r7, #4]
 801922c:	681b      	ldr	r3, [r3, #0]
 801922e:	4a2f      	ldr	r2, [pc, #188]	@ (80192ec <DMA_CalcBaseAndBitshift+0x14c>)
 8019230:	4293      	cmp	r3, r2
 8019232:	d009      	beq.n	8019248 <DMA_CalcBaseAndBitshift+0xa8>
 8019234:	687b      	ldr	r3, [r7, #4]
 8019236:	681b      	ldr	r3, [r3, #0]
 8019238:	4a2d      	ldr	r2, [pc, #180]	@ (80192f0 <DMA_CalcBaseAndBitshift+0x150>)
 801923a:	4293      	cmp	r3, r2
 801923c:	d004      	beq.n	8019248 <DMA_CalcBaseAndBitshift+0xa8>
 801923e:	687b      	ldr	r3, [r7, #4]
 8019240:	681b      	ldr	r3, [r3, #0]
 8019242:	4a2c      	ldr	r2, [pc, #176]	@ (80192f4 <DMA_CalcBaseAndBitshift+0x154>)
 8019244:	4293      	cmp	r3, r2
 8019246:	d101      	bne.n	801924c <DMA_CalcBaseAndBitshift+0xac>
 8019248:	2301      	movs	r3, #1
 801924a:	e000      	b.n	801924e <DMA_CalcBaseAndBitshift+0xae>
 801924c:	2300      	movs	r3, #0
 801924e:	2b00      	cmp	r3, #0
 8019250:	d024      	beq.n	801929c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8019252:	687b      	ldr	r3, [r7, #4]
 8019254:	681b      	ldr	r3, [r3, #0]
 8019256:	b2db      	uxtb	r3, r3
 8019258:	3b10      	subs	r3, #16
 801925a:	4a27      	ldr	r2, [pc, #156]	@ (80192f8 <DMA_CalcBaseAndBitshift+0x158>)
 801925c:	fba2 2303 	umull	r2, r3, r2, r3
 8019260:	091b      	lsrs	r3, r3, #4
 8019262:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8019264:	68fb      	ldr	r3, [r7, #12]
 8019266:	f003 0307 	and.w	r3, r3, #7
 801926a:	4a24      	ldr	r2, [pc, #144]	@ (80192fc <DMA_CalcBaseAndBitshift+0x15c>)
 801926c:	5cd3      	ldrb	r3, [r2, r3]
 801926e:	461a      	mov	r2, r3
 8019270:	687b      	ldr	r3, [r7, #4]
 8019272:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8019274:	68fb      	ldr	r3, [r7, #12]
 8019276:	2b03      	cmp	r3, #3
 8019278:	d908      	bls.n	801928c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 801927a:	687b      	ldr	r3, [r7, #4]
 801927c:	681b      	ldr	r3, [r3, #0]
 801927e:	461a      	mov	r2, r3
 8019280:	4b1f      	ldr	r3, [pc, #124]	@ (8019300 <DMA_CalcBaseAndBitshift+0x160>)
 8019282:	4013      	ands	r3, r2
 8019284:	1d1a      	adds	r2, r3, #4
 8019286:	687b      	ldr	r3, [r7, #4]
 8019288:	659a      	str	r2, [r3, #88]	@ 0x58
 801928a:	e00d      	b.n	80192a8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 801928c:	687b      	ldr	r3, [r7, #4]
 801928e:	681b      	ldr	r3, [r3, #0]
 8019290:	461a      	mov	r2, r3
 8019292:	4b1b      	ldr	r3, [pc, #108]	@ (8019300 <DMA_CalcBaseAndBitshift+0x160>)
 8019294:	4013      	ands	r3, r2
 8019296:	687a      	ldr	r2, [r7, #4]
 8019298:	6593      	str	r3, [r2, #88]	@ 0x58
 801929a:	e005      	b.n	80192a8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 801929c:	687b      	ldr	r3, [r7, #4]
 801929e:	681b      	ldr	r3, [r3, #0]
 80192a0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80192a4:	687b      	ldr	r3, [r7, #4]
 80192a6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80192a8:	687b      	ldr	r3, [r7, #4]
 80192aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80192ac:	4618      	mov	r0, r3
 80192ae:	3714      	adds	r7, #20
 80192b0:	46bd      	mov	sp, r7
 80192b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192b6:	4770      	bx	lr
 80192b8:	40020010 	.word	0x40020010
 80192bc:	40020028 	.word	0x40020028
 80192c0:	40020040 	.word	0x40020040
 80192c4:	40020058 	.word	0x40020058
 80192c8:	40020070 	.word	0x40020070
 80192cc:	40020088 	.word	0x40020088
 80192d0:	400200a0 	.word	0x400200a0
 80192d4:	400200b8 	.word	0x400200b8
 80192d8:	40020410 	.word	0x40020410
 80192dc:	40020428 	.word	0x40020428
 80192e0:	40020440 	.word	0x40020440
 80192e4:	40020458 	.word	0x40020458
 80192e8:	40020470 	.word	0x40020470
 80192ec:	40020488 	.word	0x40020488
 80192f0:	400204a0 	.word	0x400204a0
 80192f4:	400204b8 	.word	0x400204b8
 80192f8:	aaaaaaab 	.word	0xaaaaaaab
 80192fc:	080269d0 	.word	0x080269d0
 8019300:	fffffc00 	.word	0xfffffc00

08019304 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8019304:	b480      	push	{r7}
 8019306:	b085      	sub	sp, #20
 8019308:	af00      	add	r7, sp, #0
 801930a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801930c:	2300      	movs	r3, #0
 801930e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8019310:	687b      	ldr	r3, [r7, #4]
 8019312:	699b      	ldr	r3, [r3, #24]
 8019314:	2b00      	cmp	r3, #0
 8019316:	d120      	bne.n	801935a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8019318:	687b      	ldr	r3, [r7, #4]
 801931a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801931c:	2b03      	cmp	r3, #3
 801931e:	d858      	bhi.n	80193d2 <DMA_CheckFifoParam+0xce>
 8019320:	a201      	add	r2, pc, #4	@ (adr r2, 8019328 <DMA_CheckFifoParam+0x24>)
 8019322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019326:	bf00      	nop
 8019328:	08019339 	.word	0x08019339
 801932c:	0801934b 	.word	0x0801934b
 8019330:	08019339 	.word	0x08019339
 8019334:	080193d3 	.word	0x080193d3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8019338:	687b      	ldr	r3, [r7, #4]
 801933a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801933c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8019340:	2b00      	cmp	r3, #0
 8019342:	d048      	beq.n	80193d6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8019344:	2301      	movs	r3, #1
 8019346:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8019348:	e045      	b.n	80193d6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801934a:	687b      	ldr	r3, [r7, #4]
 801934c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801934e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8019352:	d142      	bne.n	80193da <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8019354:	2301      	movs	r3, #1
 8019356:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8019358:	e03f      	b.n	80193da <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801935a:	687b      	ldr	r3, [r7, #4]
 801935c:	699b      	ldr	r3, [r3, #24]
 801935e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8019362:	d123      	bne.n	80193ac <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8019364:	687b      	ldr	r3, [r7, #4]
 8019366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019368:	2b03      	cmp	r3, #3
 801936a:	d838      	bhi.n	80193de <DMA_CheckFifoParam+0xda>
 801936c:	a201      	add	r2, pc, #4	@ (adr r2, 8019374 <DMA_CheckFifoParam+0x70>)
 801936e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019372:	bf00      	nop
 8019374:	08019385 	.word	0x08019385
 8019378:	0801938b 	.word	0x0801938b
 801937c:	08019385 	.word	0x08019385
 8019380:	0801939d 	.word	0x0801939d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8019384:	2301      	movs	r3, #1
 8019386:	73fb      	strb	r3, [r7, #15]
        break;
 8019388:	e030      	b.n	80193ec <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801938a:	687b      	ldr	r3, [r7, #4]
 801938c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801938e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8019392:	2b00      	cmp	r3, #0
 8019394:	d025      	beq.n	80193e2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8019396:	2301      	movs	r3, #1
 8019398:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801939a:	e022      	b.n	80193e2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801939c:	687b      	ldr	r3, [r7, #4]
 801939e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80193a0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80193a4:	d11f      	bne.n	80193e6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80193a6:	2301      	movs	r3, #1
 80193a8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80193aa:	e01c      	b.n	80193e6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80193ac:	687b      	ldr	r3, [r7, #4]
 80193ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80193b0:	2b02      	cmp	r3, #2
 80193b2:	d902      	bls.n	80193ba <DMA_CheckFifoParam+0xb6>
 80193b4:	2b03      	cmp	r3, #3
 80193b6:	d003      	beq.n	80193c0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80193b8:	e018      	b.n	80193ec <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80193ba:	2301      	movs	r3, #1
 80193bc:	73fb      	strb	r3, [r7, #15]
        break;
 80193be:	e015      	b.n	80193ec <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80193c0:	687b      	ldr	r3, [r7, #4]
 80193c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80193c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80193c8:	2b00      	cmp	r3, #0
 80193ca:	d00e      	beq.n	80193ea <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80193cc:	2301      	movs	r3, #1
 80193ce:	73fb      	strb	r3, [r7, #15]
    break;
 80193d0:	e00b      	b.n	80193ea <DMA_CheckFifoParam+0xe6>
        break;
 80193d2:	bf00      	nop
 80193d4:	e00a      	b.n	80193ec <DMA_CheckFifoParam+0xe8>
        break;
 80193d6:	bf00      	nop
 80193d8:	e008      	b.n	80193ec <DMA_CheckFifoParam+0xe8>
        break;
 80193da:	bf00      	nop
 80193dc:	e006      	b.n	80193ec <DMA_CheckFifoParam+0xe8>
        break;
 80193de:	bf00      	nop
 80193e0:	e004      	b.n	80193ec <DMA_CheckFifoParam+0xe8>
        break;
 80193e2:	bf00      	nop
 80193e4:	e002      	b.n	80193ec <DMA_CheckFifoParam+0xe8>
        break;
 80193e6:	bf00      	nop
 80193e8:	e000      	b.n	80193ec <DMA_CheckFifoParam+0xe8>
    break;
 80193ea:	bf00      	nop
    }
  }

  return status;
 80193ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80193ee:	4618      	mov	r0, r3
 80193f0:	3714      	adds	r7, #20
 80193f2:	46bd      	mov	sp, r7
 80193f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193f8:	4770      	bx	lr
 80193fa:	bf00      	nop

080193fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80193fc:	b480      	push	{r7}
 80193fe:	b085      	sub	sp, #20
 8019400:	af00      	add	r7, sp, #0
 8019402:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8019404:	687b      	ldr	r3, [r7, #4]
 8019406:	681b      	ldr	r3, [r3, #0]
 8019408:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801940a:	687b      	ldr	r3, [r7, #4]
 801940c:	681b      	ldr	r3, [r3, #0]
 801940e:	4a38      	ldr	r2, [pc, #224]	@ (80194f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8019410:	4293      	cmp	r3, r2
 8019412:	d022      	beq.n	801945a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8019414:	687b      	ldr	r3, [r7, #4]
 8019416:	681b      	ldr	r3, [r3, #0]
 8019418:	4a36      	ldr	r2, [pc, #216]	@ (80194f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 801941a:	4293      	cmp	r3, r2
 801941c:	d01d      	beq.n	801945a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801941e:	687b      	ldr	r3, [r7, #4]
 8019420:	681b      	ldr	r3, [r3, #0]
 8019422:	4a35      	ldr	r2, [pc, #212]	@ (80194f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8019424:	4293      	cmp	r3, r2
 8019426:	d018      	beq.n	801945a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8019428:	687b      	ldr	r3, [r7, #4]
 801942a:	681b      	ldr	r3, [r3, #0]
 801942c:	4a33      	ldr	r2, [pc, #204]	@ (80194fc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 801942e:	4293      	cmp	r3, r2
 8019430:	d013      	beq.n	801945a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8019432:	687b      	ldr	r3, [r7, #4]
 8019434:	681b      	ldr	r3, [r3, #0]
 8019436:	4a32      	ldr	r2, [pc, #200]	@ (8019500 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8019438:	4293      	cmp	r3, r2
 801943a:	d00e      	beq.n	801945a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801943c:	687b      	ldr	r3, [r7, #4]
 801943e:	681b      	ldr	r3, [r3, #0]
 8019440:	4a30      	ldr	r2, [pc, #192]	@ (8019504 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8019442:	4293      	cmp	r3, r2
 8019444:	d009      	beq.n	801945a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8019446:	687b      	ldr	r3, [r7, #4]
 8019448:	681b      	ldr	r3, [r3, #0]
 801944a:	4a2f      	ldr	r2, [pc, #188]	@ (8019508 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 801944c:	4293      	cmp	r3, r2
 801944e:	d004      	beq.n	801945a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8019450:	687b      	ldr	r3, [r7, #4]
 8019452:	681b      	ldr	r3, [r3, #0]
 8019454:	4a2d      	ldr	r2, [pc, #180]	@ (801950c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8019456:	4293      	cmp	r3, r2
 8019458:	d101      	bne.n	801945e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 801945a:	2301      	movs	r3, #1
 801945c:	e000      	b.n	8019460 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 801945e:	2300      	movs	r3, #0
 8019460:	2b00      	cmp	r3, #0
 8019462:	d01a      	beq.n	801949a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8019464:	687b      	ldr	r3, [r7, #4]
 8019466:	681b      	ldr	r3, [r3, #0]
 8019468:	b2db      	uxtb	r3, r3
 801946a:	3b08      	subs	r3, #8
 801946c:	4a28      	ldr	r2, [pc, #160]	@ (8019510 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 801946e:	fba2 2303 	umull	r2, r3, r2, r3
 8019472:	091b      	lsrs	r3, r3, #4
 8019474:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8019476:	68fa      	ldr	r2, [r7, #12]
 8019478:	4b26      	ldr	r3, [pc, #152]	@ (8019514 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 801947a:	4413      	add	r3, r2
 801947c:	009b      	lsls	r3, r3, #2
 801947e:	461a      	mov	r2, r3
 8019480:	687b      	ldr	r3, [r7, #4]
 8019482:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8019484:	687b      	ldr	r3, [r7, #4]
 8019486:	4a24      	ldr	r2, [pc, #144]	@ (8019518 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8019488:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 801948a:	68fb      	ldr	r3, [r7, #12]
 801948c:	f003 031f 	and.w	r3, r3, #31
 8019490:	2201      	movs	r2, #1
 8019492:	409a      	lsls	r2, r3
 8019494:	687b      	ldr	r3, [r7, #4]
 8019496:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8019498:	e024      	b.n	80194e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	681b      	ldr	r3, [r3, #0]
 801949e:	b2db      	uxtb	r3, r3
 80194a0:	3b10      	subs	r3, #16
 80194a2:	4a1e      	ldr	r2, [pc, #120]	@ (801951c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80194a4:	fba2 2303 	umull	r2, r3, r2, r3
 80194a8:	091b      	lsrs	r3, r3, #4
 80194aa:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80194ac:	68bb      	ldr	r3, [r7, #8]
 80194ae:	4a1c      	ldr	r2, [pc, #112]	@ (8019520 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80194b0:	4293      	cmp	r3, r2
 80194b2:	d806      	bhi.n	80194c2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80194b4:	68bb      	ldr	r3, [r7, #8]
 80194b6:	4a1b      	ldr	r2, [pc, #108]	@ (8019524 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80194b8:	4293      	cmp	r3, r2
 80194ba:	d902      	bls.n	80194c2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80194bc:	68fb      	ldr	r3, [r7, #12]
 80194be:	3308      	adds	r3, #8
 80194c0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80194c2:	68fa      	ldr	r2, [r7, #12]
 80194c4:	4b18      	ldr	r3, [pc, #96]	@ (8019528 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80194c6:	4413      	add	r3, r2
 80194c8:	009b      	lsls	r3, r3, #2
 80194ca:	461a      	mov	r2, r3
 80194cc:	687b      	ldr	r3, [r7, #4]
 80194ce:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80194d0:	687b      	ldr	r3, [r7, #4]
 80194d2:	4a16      	ldr	r2, [pc, #88]	@ (801952c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80194d4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80194d6:	68fb      	ldr	r3, [r7, #12]
 80194d8:	f003 031f 	and.w	r3, r3, #31
 80194dc:	2201      	movs	r2, #1
 80194de:	409a      	lsls	r2, r3
 80194e0:	687b      	ldr	r3, [r7, #4]
 80194e2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80194e4:	bf00      	nop
 80194e6:	3714      	adds	r7, #20
 80194e8:	46bd      	mov	sp, r7
 80194ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194ee:	4770      	bx	lr
 80194f0:	58025408 	.word	0x58025408
 80194f4:	5802541c 	.word	0x5802541c
 80194f8:	58025430 	.word	0x58025430
 80194fc:	58025444 	.word	0x58025444
 8019500:	58025458 	.word	0x58025458
 8019504:	5802546c 	.word	0x5802546c
 8019508:	58025480 	.word	0x58025480
 801950c:	58025494 	.word	0x58025494
 8019510:	cccccccd 	.word	0xcccccccd
 8019514:	16009600 	.word	0x16009600
 8019518:	58025880 	.word	0x58025880
 801951c:	aaaaaaab 	.word	0xaaaaaaab
 8019520:	400204b8 	.word	0x400204b8
 8019524:	4002040f 	.word	0x4002040f
 8019528:	10008200 	.word	0x10008200
 801952c:	40020880 	.word	0x40020880

08019530 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8019530:	b480      	push	{r7}
 8019532:	b085      	sub	sp, #20
 8019534:	af00      	add	r7, sp, #0
 8019536:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8019538:	687b      	ldr	r3, [r7, #4]
 801953a:	685b      	ldr	r3, [r3, #4]
 801953c:	b2db      	uxtb	r3, r3
 801953e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8019540:	68fb      	ldr	r3, [r7, #12]
 8019542:	2b00      	cmp	r3, #0
 8019544:	d04a      	beq.n	80195dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8019546:	68fb      	ldr	r3, [r7, #12]
 8019548:	2b08      	cmp	r3, #8
 801954a:	d847      	bhi.n	80195dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801954c:	687b      	ldr	r3, [r7, #4]
 801954e:	681b      	ldr	r3, [r3, #0]
 8019550:	4a25      	ldr	r2, [pc, #148]	@ (80195e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8019552:	4293      	cmp	r3, r2
 8019554:	d022      	beq.n	801959c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8019556:	687b      	ldr	r3, [r7, #4]
 8019558:	681b      	ldr	r3, [r3, #0]
 801955a:	4a24      	ldr	r2, [pc, #144]	@ (80195ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 801955c:	4293      	cmp	r3, r2
 801955e:	d01d      	beq.n	801959c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8019560:	687b      	ldr	r3, [r7, #4]
 8019562:	681b      	ldr	r3, [r3, #0]
 8019564:	4a22      	ldr	r2, [pc, #136]	@ (80195f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8019566:	4293      	cmp	r3, r2
 8019568:	d018      	beq.n	801959c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801956a:	687b      	ldr	r3, [r7, #4]
 801956c:	681b      	ldr	r3, [r3, #0]
 801956e:	4a21      	ldr	r2, [pc, #132]	@ (80195f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8019570:	4293      	cmp	r3, r2
 8019572:	d013      	beq.n	801959c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8019574:	687b      	ldr	r3, [r7, #4]
 8019576:	681b      	ldr	r3, [r3, #0]
 8019578:	4a1f      	ldr	r2, [pc, #124]	@ (80195f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 801957a:	4293      	cmp	r3, r2
 801957c:	d00e      	beq.n	801959c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801957e:	687b      	ldr	r3, [r7, #4]
 8019580:	681b      	ldr	r3, [r3, #0]
 8019582:	4a1e      	ldr	r2, [pc, #120]	@ (80195fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8019584:	4293      	cmp	r3, r2
 8019586:	d009      	beq.n	801959c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8019588:	687b      	ldr	r3, [r7, #4]
 801958a:	681b      	ldr	r3, [r3, #0]
 801958c:	4a1c      	ldr	r2, [pc, #112]	@ (8019600 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 801958e:	4293      	cmp	r3, r2
 8019590:	d004      	beq.n	801959c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8019592:	687b      	ldr	r3, [r7, #4]
 8019594:	681b      	ldr	r3, [r3, #0]
 8019596:	4a1b      	ldr	r2, [pc, #108]	@ (8019604 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8019598:	4293      	cmp	r3, r2
 801959a:	d101      	bne.n	80195a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 801959c:	2301      	movs	r3, #1
 801959e:	e000      	b.n	80195a2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80195a0:	2300      	movs	r3, #0
 80195a2:	2b00      	cmp	r3, #0
 80195a4:	d00a      	beq.n	80195bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80195a6:	68fa      	ldr	r2, [r7, #12]
 80195a8:	4b17      	ldr	r3, [pc, #92]	@ (8019608 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80195aa:	4413      	add	r3, r2
 80195ac:	009b      	lsls	r3, r3, #2
 80195ae:	461a      	mov	r2, r3
 80195b0:	687b      	ldr	r3, [r7, #4]
 80195b2:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80195b4:	687b      	ldr	r3, [r7, #4]
 80195b6:	4a15      	ldr	r2, [pc, #84]	@ (801960c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80195b8:	671a      	str	r2, [r3, #112]	@ 0x70
 80195ba:	e009      	b.n	80195d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80195bc:	68fa      	ldr	r2, [r7, #12]
 80195be:	4b14      	ldr	r3, [pc, #80]	@ (8019610 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80195c0:	4413      	add	r3, r2
 80195c2:	009b      	lsls	r3, r3, #2
 80195c4:	461a      	mov	r2, r3
 80195c6:	687b      	ldr	r3, [r7, #4]
 80195c8:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80195ca:	687b      	ldr	r3, [r7, #4]
 80195cc:	4a11      	ldr	r2, [pc, #68]	@ (8019614 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80195ce:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80195d0:	68fb      	ldr	r3, [r7, #12]
 80195d2:	3b01      	subs	r3, #1
 80195d4:	2201      	movs	r2, #1
 80195d6:	409a      	lsls	r2, r3
 80195d8:	687b      	ldr	r3, [r7, #4]
 80195da:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80195dc:	bf00      	nop
 80195de:	3714      	adds	r7, #20
 80195e0:	46bd      	mov	sp, r7
 80195e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195e6:	4770      	bx	lr
 80195e8:	58025408 	.word	0x58025408
 80195ec:	5802541c 	.word	0x5802541c
 80195f0:	58025430 	.word	0x58025430
 80195f4:	58025444 	.word	0x58025444
 80195f8:	58025458 	.word	0x58025458
 80195fc:	5802546c 	.word	0x5802546c
 8019600:	58025480 	.word	0x58025480
 8019604:	58025494 	.word	0x58025494
 8019608:	1600963f 	.word	0x1600963f
 801960c:	58025940 	.word	0x58025940
 8019610:	1000823f 	.word	0x1000823f
 8019614:	40020940 	.word	0x40020940

08019618 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8019618:	b580      	push	{r7, lr}
 801961a:	b086      	sub	sp, #24
 801961c:	af00      	add	r7, sp, #0
 801961e:	60f8      	str	r0, [r7, #12]
 8019620:	60b9      	str	r1, [r7, #8]
 8019622:	607a      	str	r2, [r7, #4]
 8019624:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8019626:	2300      	movs	r3, #0
 8019628:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 801962a:	68fb      	ldr	r3, [r7, #12]
 801962c:	689b      	ldr	r3, [r3, #8]
 801962e:	2b80      	cmp	r3, #128	@ 0x80
 8019630:	d105      	bne.n	801963e <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8019632:	68fb      	ldr	r3, [r7, #12]
 8019634:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8019638:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 801963a:	2301      	movs	r3, #1
 801963c:	e315      	b.n	8019c6a <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 801963e:	68fb      	ldr	r3, [r7, #12]
 8019640:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8019644:	2b01      	cmp	r3, #1
 8019646:	d101      	bne.n	801964c <HAL_DMAEx_MultiBufferStart_IT+0x34>
 8019648:	2302      	movs	r3, #2
 801964a:	e30e      	b.n	8019c6a <HAL_DMAEx_MultiBufferStart_IT+0x652>
 801964c:	68fb      	ldr	r3, [r7, #12]
 801964e:	2201      	movs	r2, #1
 8019650:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8019654:	68fb      	ldr	r3, [r7, #12]
 8019656:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801965a:	b2db      	uxtb	r3, r3
 801965c:	2b01      	cmp	r3, #1
 801965e:	f040 82fd 	bne.w	8019c5c <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8019662:	68fb      	ldr	r3, [r7, #12]
 8019664:	2202      	movs	r2, #2
 8019666:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801966a:	68fb      	ldr	r3, [r7, #12]
 801966c:	2200      	movs	r2, #0
 801966e:	655a      	str	r2, [r3, #84]	@ 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8019670:	68fb      	ldr	r3, [r7, #12]
 8019672:	681b      	ldr	r3, [r3, #0]
 8019674:	4a82      	ldr	r2, [pc, #520]	@ (8019880 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8019676:	4293      	cmp	r3, r2
 8019678:	d04a      	beq.n	8019710 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801967a:	68fb      	ldr	r3, [r7, #12]
 801967c:	681b      	ldr	r3, [r3, #0]
 801967e:	4a81      	ldr	r2, [pc, #516]	@ (8019884 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8019680:	4293      	cmp	r3, r2
 8019682:	d045      	beq.n	8019710 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8019684:	68fb      	ldr	r3, [r7, #12]
 8019686:	681b      	ldr	r3, [r3, #0]
 8019688:	4a7f      	ldr	r2, [pc, #508]	@ (8019888 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 801968a:	4293      	cmp	r3, r2
 801968c:	d040      	beq.n	8019710 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801968e:	68fb      	ldr	r3, [r7, #12]
 8019690:	681b      	ldr	r3, [r3, #0]
 8019692:	4a7e      	ldr	r2, [pc, #504]	@ (801988c <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8019694:	4293      	cmp	r3, r2
 8019696:	d03b      	beq.n	8019710 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8019698:	68fb      	ldr	r3, [r7, #12]
 801969a:	681b      	ldr	r3, [r3, #0]
 801969c:	4a7c      	ldr	r2, [pc, #496]	@ (8019890 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 801969e:	4293      	cmp	r3, r2
 80196a0:	d036      	beq.n	8019710 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80196a2:	68fb      	ldr	r3, [r7, #12]
 80196a4:	681b      	ldr	r3, [r3, #0]
 80196a6:	4a7b      	ldr	r2, [pc, #492]	@ (8019894 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 80196a8:	4293      	cmp	r3, r2
 80196aa:	d031      	beq.n	8019710 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80196ac:	68fb      	ldr	r3, [r7, #12]
 80196ae:	681b      	ldr	r3, [r3, #0]
 80196b0:	4a79      	ldr	r2, [pc, #484]	@ (8019898 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 80196b2:	4293      	cmp	r3, r2
 80196b4:	d02c      	beq.n	8019710 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80196b6:	68fb      	ldr	r3, [r7, #12]
 80196b8:	681b      	ldr	r3, [r3, #0]
 80196ba:	4a78      	ldr	r2, [pc, #480]	@ (801989c <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 80196bc:	4293      	cmp	r3, r2
 80196be:	d027      	beq.n	8019710 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80196c0:	68fb      	ldr	r3, [r7, #12]
 80196c2:	681b      	ldr	r3, [r3, #0]
 80196c4:	4a76      	ldr	r2, [pc, #472]	@ (80198a0 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 80196c6:	4293      	cmp	r3, r2
 80196c8:	d022      	beq.n	8019710 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80196ca:	68fb      	ldr	r3, [r7, #12]
 80196cc:	681b      	ldr	r3, [r3, #0]
 80196ce:	4a75      	ldr	r2, [pc, #468]	@ (80198a4 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 80196d0:	4293      	cmp	r3, r2
 80196d2:	d01d      	beq.n	8019710 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80196d4:	68fb      	ldr	r3, [r7, #12]
 80196d6:	681b      	ldr	r3, [r3, #0]
 80196d8:	4a73      	ldr	r2, [pc, #460]	@ (80198a8 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 80196da:	4293      	cmp	r3, r2
 80196dc:	d018      	beq.n	8019710 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80196de:	68fb      	ldr	r3, [r7, #12]
 80196e0:	681b      	ldr	r3, [r3, #0]
 80196e2:	4a72      	ldr	r2, [pc, #456]	@ (80198ac <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 80196e4:	4293      	cmp	r3, r2
 80196e6:	d013      	beq.n	8019710 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80196e8:	68fb      	ldr	r3, [r7, #12]
 80196ea:	681b      	ldr	r3, [r3, #0]
 80196ec:	4a70      	ldr	r2, [pc, #448]	@ (80198b0 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 80196ee:	4293      	cmp	r3, r2
 80196f0:	d00e      	beq.n	8019710 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80196f2:	68fb      	ldr	r3, [r7, #12]
 80196f4:	681b      	ldr	r3, [r3, #0]
 80196f6:	4a6f      	ldr	r2, [pc, #444]	@ (80198b4 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 80196f8:	4293      	cmp	r3, r2
 80196fa:	d009      	beq.n	8019710 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80196fc:	68fb      	ldr	r3, [r7, #12]
 80196fe:	681b      	ldr	r3, [r3, #0]
 8019700:	4a6d      	ldr	r2, [pc, #436]	@ (80198b8 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8019702:	4293      	cmp	r3, r2
 8019704:	d004      	beq.n	8019710 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8019706:	68fb      	ldr	r3, [r7, #12]
 8019708:	681b      	ldr	r3, [r3, #0]
 801970a:	4a6c      	ldr	r2, [pc, #432]	@ (80198bc <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 801970c:	4293      	cmp	r3, r2
 801970e:	d101      	bne.n	8019714 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8019710:	2301      	movs	r3, #1
 8019712:	e000      	b.n	8019716 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8019714:	2300      	movs	r3, #0
 8019716:	2b00      	cmp	r3, #0
 8019718:	d018      	beq.n	801974c <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 801971a:	68fb      	ldr	r3, [r7, #12]
 801971c:	681b      	ldr	r3, [r3, #0]
 801971e:	681a      	ldr	r2, [r3, #0]
 8019720:	68fb      	ldr	r3, [r7, #12]
 8019722:	681b      	ldr	r3, [r3, #0]
 8019724:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8019728:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 801972a:	68fb      	ldr	r3, [r7, #12]
 801972c:	681b      	ldr	r3, [r3, #0]
 801972e:	683a      	ldr	r2, [r7, #0]
 8019730:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 8019732:	68fb      	ldr	r3, [r7, #12]
 8019734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019736:	3308      	adds	r3, #8
 8019738:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801973a:	68fb      	ldr	r3, [r7, #12]
 801973c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801973e:	f003 031f 	and.w	r3, r3, #31
 8019742:	223f      	movs	r2, #63	@ 0x3f
 8019744:	409a      	lsls	r2, r3
 8019746:	693b      	ldr	r3, [r7, #16]
 8019748:	601a      	str	r2, [r3, #0]
 801974a:	e018      	b.n	801977e <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 801974c:	68fb      	ldr	r3, [r7, #12]
 801974e:	681b      	ldr	r3, [r3, #0]
 8019750:	6819      	ldr	r1, [r3, #0]
 8019752:	68fb      	ldr	r3, [r7, #12]
 8019754:	681a      	ldr	r2, [r3, #0]
 8019756:	f248 0320 	movw	r3, #32800	@ 0x8020
 801975a:	430b      	orrs	r3, r1
 801975c:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 801975e:	68fb      	ldr	r3, [r7, #12]
 8019760:	681b      	ldr	r3, [r3, #0]
 8019762:	683a      	ldr	r2, [r7, #0]
 8019764:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 8019766:	68fb      	ldr	r3, [r7, #12]
 8019768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801976a:	3304      	adds	r3, #4
 801976c:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 801976e:	68fb      	ldr	r3, [r7, #12]
 8019770:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8019772:	f003 031f 	and.w	r3, r3, #31
 8019776:	2201      	movs	r2, #1
 8019778:	409a      	lsls	r2, r3
 801977a:	693b      	ldr	r3, [r7, #16]
 801977c:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801977e:	6a3b      	ldr	r3, [r7, #32]
 8019780:	687a      	ldr	r2, [r7, #4]
 8019782:	68b9      	ldr	r1, [r7, #8]
 8019784:	68f8      	ldr	r0, [r7, #12]
 8019786:	f000 faa5 	bl	8019cd4 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801978a:	68fb      	ldr	r3, [r7, #12]
 801978c:	681b      	ldr	r3, [r3, #0]
 801978e:	4a3c      	ldr	r2, [pc, #240]	@ (8019880 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8019790:	4293      	cmp	r3, r2
 8019792:	d072      	beq.n	801987a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8019794:	68fb      	ldr	r3, [r7, #12]
 8019796:	681b      	ldr	r3, [r3, #0]
 8019798:	4a3a      	ldr	r2, [pc, #232]	@ (8019884 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 801979a:	4293      	cmp	r3, r2
 801979c:	d06d      	beq.n	801987a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801979e:	68fb      	ldr	r3, [r7, #12]
 80197a0:	681b      	ldr	r3, [r3, #0]
 80197a2:	4a39      	ldr	r2, [pc, #228]	@ (8019888 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 80197a4:	4293      	cmp	r3, r2
 80197a6:	d068      	beq.n	801987a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80197a8:	68fb      	ldr	r3, [r7, #12]
 80197aa:	681b      	ldr	r3, [r3, #0]
 80197ac:	4a37      	ldr	r2, [pc, #220]	@ (801988c <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 80197ae:	4293      	cmp	r3, r2
 80197b0:	d063      	beq.n	801987a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80197b2:	68fb      	ldr	r3, [r7, #12]
 80197b4:	681b      	ldr	r3, [r3, #0]
 80197b6:	4a36      	ldr	r2, [pc, #216]	@ (8019890 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 80197b8:	4293      	cmp	r3, r2
 80197ba:	d05e      	beq.n	801987a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80197bc:	68fb      	ldr	r3, [r7, #12]
 80197be:	681b      	ldr	r3, [r3, #0]
 80197c0:	4a34      	ldr	r2, [pc, #208]	@ (8019894 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 80197c2:	4293      	cmp	r3, r2
 80197c4:	d059      	beq.n	801987a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80197c6:	68fb      	ldr	r3, [r7, #12]
 80197c8:	681b      	ldr	r3, [r3, #0]
 80197ca:	4a33      	ldr	r2, [pc, #204]	@ (8019898 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 80197cc:	4293      	cmp	r3, r2
 80197ce:	d054      	beq.n	801987a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80197d0:	68fb      	ldr	r3, [r7, #12]
 80197d2:	681b      	ldr	r3, [r3, #0]
 80197d4:	4a31      	ldr	r2, [pc, #196]	@ (801989c <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 80197d6:	4293      	cmp	r3, r2
 80197d8:	d04f      	beq.n	801987a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80197da:	68fb      	ldr	r3, [r7, #12]
 80197dc:	681b      	ldr	r3, [r3, #0]
 80197de:	4a30      	ldr	r2, [pc, #192]	@ (80198a0 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 80197e0:	4293      	cmp	r3, r2
 80197e2:	d04a      	beq.n	801987a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80197e4:	68fb      	ldr	r3, [r7, #12]
 80197e6:	681b      	ldr	r3, [r3, #0]
 80197e8:	4a2e      	ldr	r2, [pc, #184]	@ (80198a4 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 80197ea:	4293      	cmp	r3, r2
 80197ec:	d045      	beq.n	801987a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80197ee:	68fb      	ldr	r3, [r7, #12]
 80197f0:	681b      	ldr	r3, [r3, #0]
 80197f2:	4a2d      	ldr	r2, [pc, #180]	@ (80198a8 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 80197f4:	4293      	cmp	r3, r2
 80197f6:	d040      	beq.n	801987a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80197f8:	68fb      	ldr	r3, [r7, #12]
 80197fa:	681b      	ldr	r3, [r3, #0]
 80197fc:	4a2b      	ldr	r2, [pc, #172]	@ (80198ac <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 80197fe:	4293      	cmp	r3, r2
 8019800:	d03b      	beq.n	801987a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8019802:	68fb      	ldr	r3, [r7, #12]
 8019804:	681b      	ldr	r3, [r3, #0]
 8019806:	4a2a      	ldr	r2, [pc, #168]	@ (80198b0 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8019808:	4293      	cmp	r3, r2
 801980a:	d036      	beq.n	801987a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801980c:	68fb      	ldr	r3, [r7, #12]
 801980e:	681b      	ldr	r3, [r3, #0]
 8019810:	4a28      	ldr	r2, [pc, #160]	@ (80198b4 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8019812:	4293      	cmp	r3, r2
 8019814:	d031      	beq.n	801987a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8019816:	68fb      	ldr	r3, [r7, #12]
 8019818:	681b      	ldr	r3, [r3, #0]
 801981a:	4a27      	ldr	r2, [pc, #156]	@ (80198b8 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 801981c:	4293      	cmp	r3, r2
 801981e:	d02c      	beq.n	801987a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8019820:	68fb      	ldr	r3, [r7, #12]
 8019822:	681b      	ldr	r3, [r3, #0]
 8019824:	4a25      	ldr	r2, [pc, #148]	@ (80198bc <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8019826:	4293      	cmp	r3, r2
 8019828:	d027      	beq.n	801987a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801982a:	68fb      	ldr	r3, [r7, #12]
 801982c:	681b      	ldr	r3, [r3, #0]
 801982e:	4a24      	ldr	r2, [pc, #144]	@ (80198c0 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 8019830:	4293      	cmp	r3, r2
 8019832:	d022      	beq.n	801987a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8019834:	68fb      	ldr	r3, [r7, #12]
 8019836:	681b      	ldr	r3, [r3, #0]
 8019838:	4a22      	ldr	r2, [pc, #136]	@ (80198c4 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 801983a:	4293      	cmp	r3, r2
 801983c:	d01d      	beq.n	801987a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801983e:	68fb      	ldr	r3, [r7, #12]
 8019840:	681b      	ldr	r3, [r3, #0]
 8019842:	4a21      	ldr	r2, [pc, #132]	@ (80198c8 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8019844:	4293      	cmp	r3, r2
 8019846:	d018      	beq.n	801987a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8019848:	68fb      	ldr	r3, [r7, #12]
 801984a:	681b      	ldr	r3, [r3, #0]
 801984c:	4a1f      	ldr	r2, [pc, #124]	@ (80198cc <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 801984e:	4293      	cmp	r3, r2
 8019850:	d013      	beq.n	801987a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8019852:	68fb      	ldr	r3, [r7, #12]
 8019854:	681b      	ldr	r3, [r3, #0]
 8019856:	4a1e      	ldr	r2, [pc, #120]	@ (80198d0 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8019858:	4293      	cmp	r3, r2
 801985a:	d00e      	beq.n	801987a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801985c:	68fb      	ldr	r3, [r7, #12]
 801985e:	681b      	ldr	r3, [r3, #0]
 8019860:	4a1c      	ldr	r2, [pc, #112]	@ (80198d4 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 8019862:	4293      	cmp	r3, r2
 8019864:	d009      	beq.n	801987a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8019866:	68fb      	ldr	r3, [r7, #12]
 8019868:	681b      	ldr	r3, [r3, #0]
 801986a:	4a1b      	ldr	r2, [pc, #108]	@ (80198d8 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 801986c:	4293      	cmp	r3, r2
 801986e:	d004      	beq.n	801987a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8019870:	68fb      	ldr	r3, [r7, #12]
 8019872:	681b      	ldr	r3, [r3, #0]
 8019874:	4a19      	ldr	r2, [pc, #100]	@ (80198dc <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8019876:	4293      	cmp	r3, r2
 8019878:	d132      	bne.n	80198e0 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 801987a:	2301      	movs	r3, #1
 801987c:	e031      	b.n	80198e2 <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 801987e:	bf00      	nop
 8019880:	40020010 	.word	0x40020010
 8019884:	40020028 	.word	0x40020028
 8019888:	40020040 	.word	0x40020040
 801988c:	40020058 	.word	0x40020058
 8019890:	40020070 	.word	0x40020070
 8019894:	40020088 	.word	0x40020088
 8019898:	400200a0 	.word	0x400200a0
 801989c:	400200b8 	.word	0x400200b8
 80198a0:	40020410 	.word	0x40020410
 80198a4:	40020428 	.word	0x40020428
 80198a8:	40020440 	.word	0x40020440
 80198ac:	40020458 	.word	0x40020458
 80198b0:	40020470 	.word	0x40020470
 80198b4:	40020488 	.word	0x40020488
 80198b8:	400204a0 	.word	0x400204a0
 80198bc:	400204b8 	.word	0x400204b8
 80198c0:	58025408 	.word	0x58025408
 80198c4:	5802541c 	.word	0x5802541c
 80198c8:	58025430 	.word	0x58025430
 80198cc:	58025444 	.word	0x58025444
 80198d0:	58025458 	.word	0x58025458
 80198d4:	5802546c 	.word	0x5802546c
 80198d8:	58025480 	.word	0x58025480
 80198dc:	58025494 	.word	0x58025494
 80198e0:	2300      	movs	r3, #0
 80198e2:	2b00      	cmp	r3, #0
 80198e4:	d00d      	beq.n	8019902 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80198e6:	68fb      	ldr	r3, [r7, #12]
 80198e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80198ea:	68fa      	ldr	r2, [r7, #12]
 80198ec:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80198ee:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80198f0:	68fb      	ldr	r3, [r7, #12]
 80198f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80198f4:	2b00      	cmp	r3, #0
 80198f6:	d004      	beq.n	8019902 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80198f8:	68fb      	ldr	r3, [r7, #12]
 80198fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80198fc:	68fa      	ldr	r2, [r7, #12]
 80198fe:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8019900:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8019902:	68fb      	ldr	r3, [r7, #12]
 8019904:	681b      	ldr	r3, [r3, #0]
 8019906:	4a3b      	ldr	r2, [pc, #236]	@ (80199f4 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 8019908:	4293      	cmp	r3, r2
 801990a:	d04a      	beq.n	80199a2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801990c:	68fb      	ldr	r3, [r7, #12]
 801990e:	681b      	ldr	r3, [r3, #0]
 8019910:	4a39      	ldr	r2, [pc, #228]	@ (80199f8 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 8019912:	4293      	cmp	r3, r2
 8019914:	d045      	beq.n	80199a2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8019916:	68fb      	ldr	r3, [r7, #12]
 8019918:	681b      	ldr	r3, [r3, #0]
 801991a:	4a38      	ldr	r2, [pc, #224]	@ (80199fc <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 801991c:	4293      	cmp	r3, r2
 801991e:	d040      	beq.n	80199a2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8019920:	68fb      	ldr	r3, [r7, #12]
 8019922:	681b      	ldr	r3, [r3, #0]
 8019924:	4a36      	ldr	r2, [pc, #216]	@ (8019a00 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 8019926:	4293      	cmp	r3, r2
 8019928:	d03b      	beq.n	80199a2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801992a:	68fb      	ldr	r3, [r7, #12]
 801992c:	681b      	ldr	r3, [r3, #0]
 801992e:	4a35      	ldr	r2, [pc, #212]	@ (8019a04 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 8019930:	4293      	cmp	r3, r2
 8019932:	d036      	beq.n	80199a2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8019934:	68fb      	ldr	r3, [r7, #12]
 8019936:	681b      	ldr	r3, [r3, #0]
 8019938:	4a33      	ldr	r2, [pc, #204]	@ (8019a08 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 801993a:	4293      	cmp	r3, r2
 801993c:	d031      	beq.n	80199a2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801993e:	68fb      	ldr	r3, [r7, #12]
 8019940:	681b      	ldr	r3, [r3, #0]
 8019942:	4a32      	ldr	r2, [pc, #200]	@ (8019a0c <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 8019944:	4293      	cmp	r3, r2
 8019946:	d02c      	beq.n	80199a2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8019948:	68fb      	ldr	r3, [r7, #12]
 801994a:	681b      	ldr	r3, [r3, #0]
 801994c:	4a30      	ldr	r2, [pc, #192]	@ (8019a10 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 801994e:	4293      	cmp	r3, r2
 8019950:	d027      	beq.n	80199a2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8019952:	68fb      	ldr	r3, [r7, #12]
 8019954:	681b      	ldr	r3, [r3, #0]
 8019956:	4a2f      	ldr	r2, [pc, #188]	@ (8019a14 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 8019958:	4293      	cmp	r3, r2
 801995a:	d022      	beq.n	80199a2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801995c:	68fb      	ldr	r3, [r7, #12]
 801995e:	681b      	ldr	r3, [r3, #0]
 8019960:	4a2d      	ldr	r2, [pc, #180]	@ (8019a18 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 8019962:	4293      	cmp	r3, r2
 8019964:	d01d      	beq.n	80199a2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8019966:	68fb      	ldr	r3, [r7, #12]
 8019968:	681b      	ldr	r3, [r3, #0]
 801996a:	4a2c      	ldr	r2, [pc, #176]	@ (8019a1c <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 801996c:	4293      	cmp	r3, r2
 801996e:	d018      	beq.n	80199a2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8019970:	68fb      	ldr	r3, [r7, #12]
 8019972:	681b      	ldr	r3, [r3, #0]
 8019974:	4a2a      	ldr	r2, [pc, #168]	@ (8019a20 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 8019976:	4293      	cmp	r3, r2
 8019978:	d013      	beq.n	80199a2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801997a:	68fb      	ldr	r3, [r7, #12]
 801997c:	681b      	ldr	r3, [r3, #0]
 801997e:	4a29      	ldr	r2, [pc, #164]	@ (8019a24 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 8019980:	4293      	cmp	r3, r2
 8019982:	d00e      	beq.n	80199a2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8019984:	68fb      	ldr	r3, [r7, #12]
 8019986:	681b      	ldr	r3, [r3, #0]
 8019988:	4a27      	ldr	r2, [pc, #156]	@ (8019a28 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 801998a:	4293      	cmp	r3, r2
 801998c:	d009      	beq.n	80199a2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801998e:	68fb      	ldr	r3, [r7, #12]
 8019990:	681b      	ldr	r3, [r3, #0]
 8019992:	4a26      	ldr	r2, [pc, #152]	@ (8019a2c <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 8019994:	4293      	cmp	r3, r2
 8019996:	d004      	beq.n	80199a2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8019998:	68fb      	ldr	r3, [r7, #12]
 801999a:	681b      	ldr	r3, [r3, #0]
 801999c:	4a24      	ldr	r2, [pc, #144]	@ (8019a30 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 801999e:	4293      	cmp	r3, r2
 80199a0:	d101      	bne.n	80199a6 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 80199a2:	2301      	movs	r3, #1
 80199a4:	e000      	b.n	80199a8 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 80199a6:	2300      	movs	r3, #0
 80199a8:	2b00      	cmp	r3, #0
 80199aa:	d043      	beq.n	8019a34 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80199ac:	68fb      	ldr	r3, [r7, #12]
 80199ae:	681b      	ldr	r3, [r3, #0]
 80199b0:	681b      	ldr	r3, [r3, #0]
 80199b2:	f023 021e 	bic.w	r2, r3, #30
 80199b6:	68fb      	ldr	r3, [r7, #12]
 80199b8:	681b      	ldr	r3, [r3, #0]
 80199ba:	f042 0216 	orr.w	r2, r2, #22
 80199be:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 80199c0:	68fb      	ldr	r3, [r7, #12]
 80199c2:	681b      	ldr	r3, [r3, #0]
 80199c4:	695a      	ldr	r2, [r3, #20]
 80199c6:	68fb      	ldr	r3, [r7, #12]
 80199c8:	681b      	ldr	r3, [r3, #0]
 80199ca:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80199ce:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80199d0:	68fb      	ldr	r3, [r7, #12]
 80199d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80199d4:	2b00      	cmp	r3, #0
 80199d6:	d103      	bne.n	80199e0 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 80199d8:	68fb      	ldr	r3, [r7, #12]
 80199da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80199dc:	2b00      	cmp	r3, #0
 80199de:	d043      	beq.n	8019a68 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80199e0:	68fb      	ldr	r3, [r7, #12]
 80199e2:	681b      	ldr	r3, [r3, #0]
 80199e4:	681a      	ldr	r2, [r3, #0]
 80199e6:	68fb      	ldr	r3, [r7, #12]
 80199e8:	681b      	ldr	r3, [r3, #0]
 80199ea:	f042 0208 	orr.w	r2, r2, #8
 80199ee:	601a      	str	r2, [r3, #0]
 80199f0:	e03a      	b.n	8019a68 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 80199f2:	bf00      	nop
 80199f4:	40020010 	.word	0x40020010
 80199f8:	40020028 	.word	0x40020028
 80199fc:	40020040 	.word	0x40020040
 8019a00:	40020058 	.word	0x40020058
 8019a04:	40020070 	.word	0x40020070
 8019a08:	40020088 	.word	0x40020088
 8019a0c:	400200a0 	.word	0x400200a0
 8019a10:	400200b8 	.word	0x400200b8
 8019a14:	40020410 	.word	0x40020410
 8019a18:	40020428 	.word	0x40020428
 8019a1c:	40020440 	.word	0x40020440
 8019a20:	40020458 	.word	0x40020458
 8019a24:	40020470 	.word	0x40020470
 8019a28:	40020488 	.word	0x40020488
 8019a2c:	400204a0 	.word	0x400204a0
 8019a30:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8019a34:	68fb      	ldr	r3, [r7, #12]
 8019a36:	681b      	ldr	r3, [r3, #0]
 8019a38:	681b      	ldr	r3, [r3, #0]
 8019a3a:	f023 020e 	bic.w	r2, r3, #14
 8019a3e:	68fb      	ldr	r3, [r7, #12]
 8019a40:	681b      	ldr	r3, [r3, #0]
 8019a42:	f042 020a 	orr.w	r2, r2, #10
 8019a46:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8019a48:	68fb      	ldr	r3, [r7, #12]
 8019a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019a4c:	2b00      	cmp	r3, #0
 8019a4e:	d103      	bne.n	8019a58 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 8019a50:	68fb      	ldr	r3, [r7, #12]
 8019a52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019a54:	2b00      	cmp	r3, #0
 8019a56:	d007      	beq.n	8019a68 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8019a58:	68fb      	ldr	r3, [r7, #12]
 8019a5a:	681b      	ldr	r3, [r3, #0]
 8019a5c:	681a      	ldr	r2, [r3, #0]
 8019a5e:	68fb      	ldr	r3, [r7, #12]
 8019a60:	681b      	ldr	r3, [r3, #0]
 8019a62:	f042 0204 	orr.w	r2, r2, #4
 8019a66:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8019a68:	68fb      	ldr	r3, [r7, #12]
 8019a6a:	681b      	ldr	r3, [r3, #0]
 8019a6c:	4a81      	ldr	r2, [pc, #516]	@ (8019c74 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8019a6e:	4293      	cmp	r3, r2
 8019a70:	d072      	beq.n	8019b58 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8019a72:	68fb      	ldr	r3, [r7, #12]
 8019a74:	681b      	ldr	r3, [r3, #0]
 8019a76:	4a80      	ldr	r2, [pc, #512]	@ (8019c78 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8019a78:	4293      	cmp	r3, r2
 8019a7a:	d06d      	beq.n	8019b58 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8019a7c:	68fb      	ldr	r3, [r7, #12]
 8019a7e:	681b      	ldr	r3, [r3, #0]
 8019a80:	4a7e      	ldr	r2, [pc, #504]	@ (8019c7c <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8019a82:	4293      	cmp	r3, r2
 8019a84:	d068      	beq.n	8019b58 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8019a86:	68fb      	ldr	r3, [r7, #12]
 8019a88:	681b      	ldr	r3, [r3, #0]
 8019a8a:	4a7d      	ldr	r2, [pc, #500]	@ (8019c80 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8019a8c:	4293      	cmp	r3, r2
 8019a8e:	d063      	beq.n	8019b58 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8019a90:	68fb      	ldr	r3, [r7, #12]
 8019a92:	681b      	ldr	r3, [r3, #0]
 8019a94:	4a7b      	ldr	r2, [pc, #492]	@ (8019c84 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8019a96:	4293      	cmp	r3, r2
 8019a98:	d05e      	beq.n	8019b58 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8019a9a:	68fb      	ldr	r3, [r7, #12]
 8019a9c:	681b      	ldr	r3, [r3, #0]
 8019a9e:	4a7a      	ldr	r2, [pc, #488]	@ (8019c88 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8019aa0:	4293      	cmp	r3, r2
 8019aa2:	d059      	beq.n	8019b58 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8019aa4:	68fb      	ldr	r3, [r7, #12]
 8019aa6:	681b      	ldr	r3, [r3, #0]
 8019aa8:	4a78      	ldr	r2, [pc, #480]	@ (8019c8c <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8019aaa:	4293      	cmp	r3, r2
 8019aac:	d054      	beq.n	8019b58 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8019aae:	68fb      	ldr	r3, [r7, #12]
 8019ab0:	681b      	ldr	r3, [r3, #0]
 8019ab2:	4a77      	ldr	r2, [pc, #476]	@ (8019c90 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8019ab4:	4293      	cmp	r3, r2
 8019ab6:	d04f      	beq.n	8019b58 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8019ab8:	68fb      	ldr	r3, [r7, #12]
 8019aba:	681b      	ldr	r3, [r3, #0]
 8019abc:	4a75      	ldr	r2, [pc, #468]	@ (8019c94 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8019abe:	4293      	cmp	r3, r2
 8019ac0:	d04a      	beq.n	8019b58 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8019ac2:	68fb      	ldr	r3, [r7, #12]
 8019ac4:	681b      	ldr	r3, [r3, #0]
 8019ac6:	4a74      	ldr	r2, [pc, #464]	@ (8019c98 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8019ac8:	4293      	cmp	r3, r2
 8019aca:	d045      	beq.n	8019b58 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8019acc:	68fb      	ldr	r3, [r7, #12]
 8019ace:	681b      	ldr	r3, [r3, #0]
 8019ad0:	4a72      	ldr	r2, [pc, #456]	@ (8019c9c <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8019ad2:	4293      	cmp	r3, r2
 8019ad4:	d040      	beq.n	8019b58 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8019ad6:	68fb      	ldr	r3, [r7, #12]
 8019ad8:	681b      	ldr	r3, [r3, #0]
 8019ada:	4a71      	ldr	r2, [pc, #452]	@ (8019ca0 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8019adc:	4293      	cmp	r3, r2
 8019ade:	d03b      	beq.n	8019b58 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8019ae0:	68fb      	ldr	r3, [r7, #12]
 8019ae2:	681b      	ldr	r3, [r3, #0]
 8019ae4:	4a6f      	ldr	r2, [pc, #444]	@ (8019ca4 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8019ae6:	4293      	cmp	r3, r2
 8019ae8:	d036      	beq.n	8019b58 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8019aea:	68fb      	ldr	r3, [r7, #12]
 8019aec:	681b      	ldr	r3, [r3, #0]
 8019aee:	4a6e      	ldr	r2, [pc, #440]	@ (8019ca8 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8019af0:	4293      	cmp	r3, r2
 8019af2:	d031      	beq.n	8019b58 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8019af4:	68fb      	ldr	r3, [r7, #12]
 8019af6:	681b      	ldr	r3, [r3, #0]
 8019af8:	4a6c      	ldr	r2, [pc, #432]	@ (8019cac <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8019afa:	4293      	cmp	r3, r2
 8019afc:	d02c      	beq.n	8019b58 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8019afe:	68fb      	ldr	r3, [r7, #12]
 8019b00:	681b      	ldr	r3, [r3, #0]
 8019b02:	4a6b      	ldr	r2, [pc, #428]	@ (8019cb0 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8019b04:	4293      	cmp	r3, r2
 8019b06:	d027      	beq.n	8019b58 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8019b08:	68fb      	ldr	r3, [r7, #12]
 8019b0a:	681b      	ldr	r3, [r3, #0]
 8019b0c:	4a69      	ldr	r2, [pc, #420]	@ (8019cb4 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 8019b0e:	4293      	cmp	r3, r2
 8019b10:	d022      	beq.n	8019b58 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8019b12:	68fb      	ldr	r3, [r7, #12]
 8019b14:	681b      	ldr	r3, [r3, #0]
 8019b16:	4a68      	ldr	r2, [pc, #416]	@ (8019cb8 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8019b18:	4293      	cmp	r3, r2
 8019b1a:	d01d      	beq.n	8019b58 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8019b1c:	68fb      	ldr	r3, [r7, #12]
 8019b1e:	681b      	ldr	r3, [r3, #0]
 8019b20:	4a66      	ldr	r2, [pc, #408]	@ (8019cbc <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 8019b22:	4293      	cmp	r3, r2
 8019b24:	d018      	beq.n	8019b58 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8019b26:	68fb      	ldr	r3, [r7, #12]
 8019b28:	681b      	ldr	r3, [r3, #0]
 8019b2a:	4a65      	ldr	r2, [pc, #404]	@ (8019cc0 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 8019b2c:	4293      	cmp	r3, r2
 8019b2e:	d013      	beq.n	8019b58 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8019b30:	68fb      	ldr	r3, [r7, #12]
 8019b32:	681b      	ldr	r3, [r3, #0]
 8019b34:	4a63      	ldr	r2, [pc, #396]	@ (8019cc4 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 8019b36:	4293      	cmp	r3, r2
 8019b38:	d00e      	beq.n	8019b58 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8019b3a:	68fb      	ldr	r3, [r7, #12]
 8019b3c:	681b      	ldr	r3, [r3, #0]
 8019b3e:	4a62      	ldr	r2, [pc, #392]	@ (8019cc8 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 8019b40:	4293      	cmp	r3, r2
 8019b42:	d009      	beq.n	8019b58 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8019b44:	68fb      	ldr	r3, [r7, #12]
 8019b46:	681b      	ldr	r3, [r3, #0]
 8019b48:	4a60      	ldr	r2, [pc, #384]	@ (8019ccc <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 8019b4a:	4293      	cmp	r3, r2
 8019b4c:	d004      	beq.n	8019b58 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8019b4e:	68fb      	ldr	r3, [r7, #12]
 8019b50:	681b      	ldr	r3, [r3, #0]
 8019b52:	4a5f      	ldr	r2, [pc, #380]	@ (8019cd0 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 8019b54:	4293      	cmp	r3, r2
 8019b56:	d101      	bne.n	8019b5c <HAL_DMAEx_MultiBufferStart_IT+0x544>
 8019b58:	2301      	movs	r3, #1
 8019b5a:	e000      	b.n	8019b5e <HAL_DMAEx_MultiBufferStart_IT+0x546>
 8019b5c:	2300      	movs	r3, #0
 8019b5e:	2b00      	cmp	r3, #0
 8019b60:	d01a      	beq.n	8019b98 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8019b62:	68fb      	ldr	r3, [r7, #12]
 8019b64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8019b66:	681b      	ldr	r3, [r3, #0]
 8019b68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8019b6c:	2b00      	cmp	r3, #0
 8019b6e:	d007      	beq.n	8019b80 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8019b70:	68fb      	ldr	r3, [r7, #12]
 8019b72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8019b74:	681a      	ldr	r2, [r3, #0]
 8019b76:	68fb      	ldr	r3, [r7, #12]
 8019b78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8019b7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8019b7e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8019b80:	68fb      	ldr	r3, [r7, #12]
 8019b82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019b84:	2b00      	cmp	r3, #0
 8019b86:	d007      	beq.n	8019b98 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8019b88:	68fb      	ldr	r3, [r7, #12]
 8019b8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019b8c:	681a      	ldr	r2, [r3, #0]
 8019b8e:	68fb      	ldr	r3, [r7, #12]
 8019b90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019b92:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8019b96:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 8019b98:	68fb      	ldr	r3, [r7, #12]
 8019b9a:	681b      	ldr	r3, [r3, #0]
 8019b9c:	4a35      	ldr	r2, [pc, #212]	@ (8019c74 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8019b9e:	4293      	cmp	r3, r2
 8019ba0:	d04a      	beq.n	8019c38 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8019ba2:	68fb      	ldr	r3, [r7, #12]
 8019ba4:	681b      	ldr	r3, [r3, #0]
 8019ba6:	4a34      	ldr	r2, [pc, #208]	@ (8019c78 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8019ba8:	4293      	cmp	r3, r2
 8019baa:	d045      	beq.n	8019c38 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8019bac:	68fb      	ldr	r3, [r7, #12]
 8019bae:	681b      	ldr	r3, [r3, #0]
 8019bb0:	4a32      	ldr	r2, [pc, #200]	@ (8019c7c <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8019bb2:	4293      	cmp	r3, r2
 8019bb4:	d040      	beq.n	8019c38 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8019bb6:	68fb      	ldr	r3, [r7, #12]
 8019bb8:	681b      	ldr	r3, [r3, #0]
 8019bba:	4a31      	ldr	r2, [pc, #196]	@ (8019c80 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8019bbc:	4293      	cmp	r3, r2
 8019bbe:	d03b      	beq.n	8019c38 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8019bc0:	68fb      	ldr	r3, [r7, #12]
 8019bc2:	681b      	ldr	r3, [r3, #0]
 8019bc4:	4a2f      	ldr	r2, [pc, #188]	@ (8019c84 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8019bc6:	4293      	cmp	r3, r2
 8019bc8:	d036      	beq.n	8019c38 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8019bca:	68fb      	ldr	r3, [r7, #12]
 8019bcc:	681b      	ldr	r3, [r3, #0]
 8019bce:	4a2e      	ldr	r2, [pc, #184]	@ (8019c88 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8019bd0:	4293      	cmp	r3, r2
 8019bd2:	d031      	beq.n	8019c38 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8019bd4:	68fb      	ldr	r3, [r7, #12]
 8019bd6:	681b      	ldr	r3, [r3, #0]
 8019bd8:	4a2c      	ldr	r2, [pc, #176]	@ (8019c8c <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8019bda:	4293      	cmp	r3, r2
 8019bdc:	d02c      	beq.n	8019c38 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8019bde:	68fb      	ldr	r3, [r7, #12]
 8019be0:	681b      	ldr	r3, [r3, #0]
 8019be2:	4a2b      	ldr	r2, [pc, #172]	@ (8019c90 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8019be4:	4293      	cmp	r3, r2
 8019be6:	d027      	beq.n	8019c38 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8019be8:	68fb      	ldr	r3, [r7, #12]
 8019bea:	681b      	ldr	r3, [r3, #0]
 8019bec:	4a29      	ldr	r2, [pc, #164]	@ (8019c94 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8019bee:	4293      	cmp	r3, r2
 8019bf0:	d022      	beq.n	8019c38 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8019bf2:	68fb      	ldr	r3, [r7, #12]
 8019bf4:	681b      	ldr	r3, [r3, #0]
 8019bf6:	4a28      	ldr	r2, [pc, #160]	@ (8019c98 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8019bf8:	4293      	cmp	r3, r2
 8019bfa:	d01d      	beq.n	8019c38 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8019bfc:	68fb      	ldr	r3, [r7, #12]
 8019bfe:	681b      	ldr	r3, [r3, #0]
 8019c00:	4a26      	ldr	r2, [pc, #152]	@ (8019c9c <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8019c02:	4293      	cmp	r3, r2
 8019c04:	d018      	beq.n	8019c38 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8019c06:	68fb      	ldr	r3, [r7, #12]
 8019c08:	681b      	ldr	r3, [r3, #0]
 8019c0a:	4a25      	ldr	r2, [pc, #148]	@ (8019ca0 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8019c0c:	4293      	cmp	r3, r2
 8019c0e:	d013      	beq.n	8019c38 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8019c10:	68fb      	ldr	r3, [r7, #12]
 8019c12:	681b      	ldr	r3, [r3, #0]
 8019c14:	4a23      	ldr	r2, [pc, #140]	@ (8019ca4 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8019c16:	4293      	cmp	r3, r2
 8019c18:	d00e      	beq.n	8019c38 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8019c1a:	68fb      	ldr	r3, [r7, #12]
 8019c1c:	681b      	ldr	r3, [r3, #0]
 8019c1e:	4a22      	ldr	r2, [pc, #136]	@ (8019ca8 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8019c20:	4293      	cmp	r3, r2
 8019c22:	d009      	beq.n	8019c38 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8019c24:	68fb      	ldr	r3, [r7, #12]
 8019c26:	681b      	ldr	r3, [r3, #0]
 8019c28:	4a20      	ldr	r2, [pc, #128]	@ (8019cac <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8019c2a:	4293      	cmp	r3, r2
 8019c2c:	d004      	beq.n	8019c38 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8019c2e:	68fb      	ldr	r3, [r7, #12]
 8019c30:	681b      	ldr	r3, [r3, #0]
 8019c32:	4a1f      	ldr	r2, [pc, #124]	@ (8019cb0 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8019c34:	4293      	cmp	r3, r2
 8019c36:	d108      	bne.n	8019c4a <HAL_DMAEx_MultiBufferStart_IT+0x632>
 8019c38:	68fb      	ldr	r3, [r7, #12]
 8019c3a:	681b      	ldr	r3, [r3, #0]
 8019c3c:	681a      	ldr	r2, [r3, #0]
 8019c3e:	68fb      	ldr	r3, [r7, #12]
 8019c40:	681b      	ldr	r3, [r3, #0]
 8019c42:	f042 0201 	orr.w	r2, r2, #1
 8019c46:	601a      	str	r2, [r3, #0]
 8019c48:	e00e      	b.n	8019c68 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 8019c4a:	68fb      	ldr	r3, [r7, #12]
 8019c4c:	681b      	ldr	r3, [r3, #0]
 8019c4e:	681a      	ldr	r2, [r3, #0]
 8019c50:	68fb      	ldr	r3, [r7, #12]
 8019c52:	681b      	ldr	r3, [r3, #0]
 8019c54:	f042 0201 	orr.w	r2, r2, #1
 8019c58:	601a      	str	r2, [r3, #0]
 8019c5a:	e005      	b.n	8019c68 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8019c5c:	68fb      	ldr	r3, [r7, #12]
 8019c5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8019c62:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    status = HAL_ERROR;
 8019c64:	2301      	movs	r3, #1
 8019c66:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8019c68:	7dfb      	ldrb	r3, [r7, #23]
}
 8019c6a:	4618      	mov	r0, r3
 8019c6c:	3718      	adds	r7, #24
 8019c6e:	46bd      	mov	sp, r7
 8019c70:	bd80      	pop	{r7, pc}
 8019c72:	bf00      	nop
 8019c74:	40020010 	.word	0x40020010
 8019c78:	40020028 	.word	0x40020028
 8019c7c:	40020040 	.word	0x40020040
 8019c80:	40020058 	.word	0x40020058
 8019c84:	40020070 	.word	0x40020070
 8019c88:	40020088 	.word	0x40020088
 8019c8c:	400200a0 	.word	0x400200a0
 8019c90:	400200b8 	.word	0x400200b8
 8019c94:	40020410 	.word	0x40020410
 8019c98:	40020428 	.word	0x40020428
 8019c9c:	40020440 	.word	0x40020440
 8019ca0:	40020458 	.word	0x40020458
 8019ca4:	40020470 	.word	0x40020470
 8019ca8:	40020488 	.word	0x40020488
 8019cac:	400204a0 	.word	0x400204a0
 8019cb0:	400204b8 	.word	0x400204b8
 8019cb4:	58025408 	.word	0x58025408
 8019cb8:	5802541c 	.word	0x5802541c
 8019cbc:	58025430 	.word	0x58025430
 8019cc0:	58025444 	.word	0x58025444
 8019cc4:	58025458 	.word	0x58025458
 8019cc8:	5802546c 	.word	0x5802546c
 8019ccc:	58025480 	.word	0x58025480
 8019cd0:	58025494 	.word	0x58025494

08019cd4 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8019cd4:	b480      	push	{r7}
 8019cd6:	b085      	sub	sp, #20
 8019cd8:	af00      	add	r7, sp, #0
 8019cda:	60f8      	str	r0, [r7, #12]
 8019cdc:	60b9      	str	r1, [r7, #8]
 8019cde:	607a      	str	r2, [r7, #4]
 8019ce0:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8019ce2:	68fb      	ldr	r3, [r7, #12]
 8019ce4:	681b      	ldr	r3, [r3, #0]
 8019ce6:	4a46      	ldr	r2, [pc, #280]	@ (8019e00 <DMA_MultiBufferSetConfig+0x12c>)
 8019ce8:	4293      	cmp	r3, r2
 8019cea:	d04a      	beq.n	8019d82 <DMA_MultiBufferSetConfig+0xae>
 8019cec:	68fb      	ldr	r3, [r7, #12]
 8019cee:	681b      	ldr	r3, [r3, #0]
 8019cf0:	4a44      	ldr	r2, [pc, #272]	@ (8019e04 <DMA_MultiBufferSetConfig+0x130>)
 8019cf2:	4293      	cmp	r3, r2
 8019cf4:	d045      	beq.n	8019d82 <DMA_MultiBufferSetConfig+0xae>
 8019cf6:	68fb      	ldr	r3, [r7, #12]
 8019cf8:	681b      	ldr	r3, [r3, #0]
 8019cfa:	4a43      	ldr	r2, [pc, #268]	@ (8019e08 <DMA_MultiBufferSetConfig+0x134>)
 8019cfc:	4293      	cmp	r3, r2
 8019cfe:	d040      	beq.n	8019d82 <DMA_MultiBufferSetConfig+0xae>
 8019d00:	68fb      	ldr	r3, [r7, #12]
 8019d02:	681b      	ldr	r3, [r3, #0]
 8019d04:	4a41      	ldr	r2, [pc, #260]	@ (8019e0c <DMA_MultiBufferSetConfig+0x138>)
 8019d06:	4293      	cmp	r3, r2
 8019d08:	d03b      	beq.n	8019d82 <DMA_MultiBufferSetConfig+0xae>
 8019d0a:	68fb      	ldr	r3, [r7, #12]
 8019d0c:	681b      	ldr	r3, [r3, #0]
 8019d0e:	4a40      	ldr	r2, [pc, #256]	@ (8019e10 <DMA_MultiBufferSetConfig+0x13c>)
 8019d10:	4293      	cmp	r3, r2
 8019d12:	d036      	beq.n	8019d82 <DMA_MultiBufferSetConfig+0xae>
 8019d14:	68fb      	ldr	r3, [r7, #12]
 8019d16:	681b      	ldr	r3, [r3, #0]
 8019d18:	4a3e      	ldr	r2, [pc, #248]	@ (8019e14 <DMA_MultiBufferSetConfig+0x140>)
 8019d1a:	4293      	cmp	r3, r2
 8019d1c:	d031      	beq.n	8019d82 <DMA_MultiBufferSetConfig+0xae>
 8019d1e:	68fb      	ldr	r3, [r7, #12]
 8019d20:	681b      	ldr	r3, [r3, #0]
 8019d22:	4a3d      	ldr	r2, [pc, #244]	@ (8019e18 <DMA_MultiBufferSetConfig+0x144>)
 8019d24:	4293      	cmp	r3, r2
 8019d26:	d02c      	beq.n	8019d82 <DMA_MultiBufferSetConfig+0xae>
 8019d28:	68fb      	ldr	r3, [r7, #12]
 8019d2a:	681b      	ldr	r3, [r3, #0]
 8019d2c:	4a3b      	ldr	r2, [pc, #236]	@ (8019e1c <DMA_MultiBufferSetConfig+0x148>)
 8019d2e:	4293      	cmp	r3, r2
 8019d30:	d027      	beq.n	8019d82 <DMA_MultiBufferSetConfig+0xae>
 8019d32:	68fb      	ldr	r3, [r7, #12]
 8019d34:	681b      	ldr	r3, [r3, #0]
 8019d36:	4a3a      	ldr	r2, [pc, #232]	@ (8019e20 <DMA_MultiBufferSetConfig+0x14c>)
 8019d38:	4293      	cmp	r3, r2
 8019d3a:	d022      	beq.n	8019d82 <DMA_MultiBufferSetConfig+0xae>
 8019d3c:	68fb      	ldr	r3, [r7, #12]
 8019d3e:	681b      	ldr	r3, [r3, #0]
 8019d40:	4a38      	ldr	r2, [pc, #224]	@ (8019e24 <DMA_MultiBufferSetConfig+0x150>)
 8019d42:	4293      	cmp	r3, r2
 8019d44:	d01d      	beq.n	8019d82 <DMA_MultiBufferSetConfig+0xae>
 8019d46:	68fb      	ldr	r3, [r7, #12]
 8019d48:	681b      	ldr	r3, [r3, #0]
 8019d4a:	4a37      	ldr	r2, [pc, #220]	@ (8019e28 <DMA_MultiBufferSetConfig+0x154>)
 8019d4c:	4293      	cmp	r3, r2
 8019d4e:	d018      	beq.n	8019d82 <DMA_MultiBufferSetConfig+0xae>
 8019d50:	68fb      	ldr	r3, [r7, #12]
 8019d52:	681b      	ldr	r3, [r3, #0]
 8019d54:	4a35      	ldr	r2, [pc, #212]	@ (8019e2c <DMA_MultiBufferSetConfig+0x158>)
 8019d56:	4293      	cmp	r3, r2
 8019d58:	d013      	beq.n	8019d82 <DMA_MultiBufferSetConfig+0xae>
 8019d5a:	68fb      	ldr	r3, [r7, #12]
 8019d5c:	681b      	ldr	r3, [r3, #0]
 8019d5e:	4a34      	ldr	r2, [pc, #208]	@ (8019e30 <DMA_MultiBufferSetConfig+0x15c>)
 8019d60:	4293      	cmp	r3, r2
 8019d62:	d00e      	beq.n	8019d82 <DMA_MultiBufferSetConfig+0xae>
 8019d64:	68fb      	ldr	r3, [r7, #12]
 8019d66:	681b      	ldr	r3, [r3, #0]
 8019d68:	4a32      	ldr	r2, [pc, #200]	@ (8019e34 <DMA_MultiBufferSetConfig+0x160>)
 8019d6a:	4293      	cmp	r3, r2
 8019d6c:	d009      	beq.n	8019d82 <DMA_MultiBufferSetConfig+0xae>
 8019d6e:	68fb      	ldr	r3, [r7, #12]
 8019d70:	681b      	ldr	r3, [r3, #0]
 8019d72:	4a31      	ldr	r2, [pc, #196]	@ (8019e38 <DMA_MultiBufferSetConfig+0x164>)
 8019d74:	4293      	cmp	r3, r2
 8019d76:	d004      	beq.n	8019d82 <DMA_MultiBufferSetConfig+0xae>
 8019d78:	68fb      	ldr	r3, [r7, #12]
 8019d7a:	681b      	ldr	r3, [r3, #0]
 8019d7c:	4a2f      	ldr	r2, [pc, #188]	@ (8019e3c <DMA_MultiBufferSetConfig+0x168>)
 8019d7e:	4293      	cmp	r3, r2
 8019d80:	d101      	bne.n	8019d86 <DMA_MultiBufferSetConfig+0xb2>
 8019d82:	2301      	movs	r3, #1
 8019d84:	e000      	b.n	8019d88 <DMA_MultiBufferSetConfig+0xb4>
 8019d86:	2300      	movs	r3, #0
 8019d88:	2b00      	cmp	r3, #0
 8019d8a:	d019      	beq.n	8019dc0 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 8019d8c:	68fb      	ldr	r3, [r7, #12]
 8019d8e:	681b      	ldr	r3, [r3, #0]
 8019d90:	683a      	ldr	r2, [r7, #0]
 8019d92:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8019d94:	68fb      	ldr	r3, [r7, #12]
 8019d96:	689b      	ldr	r3, [r3, #8]
 8019d98:	2b40      	cmp	r3, #64	@ 0x40
 8019d9a:	d108      	bne.n	8019dae <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8019d9c:	68fb      	ldr	r3, [r7, #12]
 8019d9e:	681b      	ldr	r3, [r3, #0]
 8019da0:	687a      	ldr	r2, [r7, #4]
 8019da2:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 8019da4:	68fb      	ldr	r3, [r7, #12]
 8019da6:	681b      	ldr	r3, [r3, #0]
 8019da8:	68ba      	ldr	r2, [r7, #8]
 8019daa:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8019dac:	e021      	b.n	8019df2 <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 8019dae:	68fb      	ldr	r3, [r7, #12]
 8019db0:	681b      	ldr	r3, [r3, #0]
 8019db2:	68ba      	ldr	r2, [r7, #8]
 8019db4:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 8019db6:	68fb      	ldr	r3, [r7, #12]
 8019db8:	681b      	ldr	r3, [r3, #0]
 8019dba:	687a      	ldr	r2, [r7, #4]
 8019dbc:	60da      	str	r2, [r3, #12]
}
 8019dbe:	e018      	b.n	8019df2 <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8019dc0:	68fb      	ldr	r3, [r7, #12]
 8019dc2:	681b      	ldr	r3, [r3, #0]
 8019dc4:	683a      	ldr	r2, [r7, #0]
 8019dc6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8019dc8:	68fb      	ldr	r3, [r7, #12]
 8019dca:	689b      	ldr	r3, [r3, #8]
 8019dcc:	2b40      	cmp	r3, #64	@ 0x40
 8019dce:	d108      	bne.n	8019de2 <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8019dd0:	68fb      	ldr	r3, [r7, #12]
 8019dd2:	681b      	ldr	r3, [r3, #0]
 8019dd4:	687a      	ldr	r2, [r7, #4]
 8019dd6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8019dd8:	68fb      	ldr	r3, [r7, #12]
 8019dda:	681b      	ldr	r3, [r3, #0]
 8019ddc:	68ba      	ldr	r2, [r7, #8]
 8019dde:	60da      	str	r2, [r3, #12]
}
 8019de0:	e007      	b.n	8019df2 <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 8019de2:	68fb      	ldr	r3, [r7, #12]
 8019de4:	681b      	ldr	r3, [r3, #0]
 8019de6:	68ba      	ldr	r2, [r7, #8]
 8019de8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 8019dea:	68fb      	ldr	r3, [r7, #12]
 8019dec:	681b      	ldr	r3, [r3, #0]
 8019dee:	687a      	ldr	r2, [r7, #4]
 8019df0:	60da      	str	r2, [r3, #12]
}
 8019df2:	bf00      	nop
 8019df4:	3714      	adds	r7, #20
 8019df6:	46bd      	mov	sp, r7
 8019df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dfc:	4770      	bx	lr
 8019dfe:	bf00      	nop
 8019e00:	40020010 	.word	0x40020010
 8019e04:	40020028 	.word	0x40020028
 8019e08:	40020040 	.word	0x40020040
 8019e0c:	40020058 	.word	0x40020058
 8019e10:	40020070 	.word	0x40020070
 8019e14:	40020088 	.word	0x40020088
 8019e18:	400200a0 	.word	0x400200a0
 8019e1c:	400200b8 	.word	0x400200b8
 8019e20:	40020410 	.word	0x40020410
 8019e24:	40020428 	.word	0x40020428
 8019e28:	40020440 	.word	0x40020440
 8019e2c:	40020458 	.word	0x40020458
 8019e30:	40020470 	.word	0x40020470
 8019e34:	40020488 	.word	0x40020488
 8019e38:	400204a0 	.word	0x400204a0
 8019e3c:	400204b8 	.word	0x400204b8

08019e40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8019e40:	b480      	push	{r7}
 8019e42:	b089      	sub	sp, #36	@ 0x24
 8019e44:	af00      	add	r7, sp, #0
 8019e46:	6078      	str	r0, [r7, #4]
 8019e48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8019e4a:	2300      	movs	r3, #0
 8019e4c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8019e4e:	4b89      	ldr	r3, [pc, #548]	@ (801a074 <HAL_GPIO_Init+0x234>)
 8019e50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8019e52:	e194      	b.n	801a17e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8019e54:	683b      	ldr	r3, [r7, #0]
 8019e56:	681a      	ldr	r2, [r3, #0]
 8019e58:	2101      	movs	r1, #1
 8019e5a:	69fb      	ldr	r3, [r7, #28]
 8019e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8019e60:	4013      	ands	r3, r2
 8019e62:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8019e64:	693b      	ldr	r3, [r7, #16]
 8019e66:	2b00      	cmp	r3, #0
 8019e68:	f000 8186 	beq.w	801a178 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8019e6c:	683b      	ldr	r3, [r7, #0]
 8019e6e:	685b      	ldr	r3, [r3, #4]
 8019e70:	f003 0303 	and.w	r3, r3, #3
 8019e74:	2b01      	cmp	r3, #1
 8019e76:	d005      	beq.n	8019e84 <HAL_GPIO_Init+0x44>
 8019e78:	683b      	ldr	r3, [r7, #0]
 8019e7a:	685b      	ldr	r3, [r3, #4]
 8019e7c:	f003 0303 	and.w	r3, r3, #3
 8019e80:	2b02      	cmp	r3, #2
 8019e82:	d130      	bne.n	8019ee6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8019e84:	687b      	ldr	r3, [r7, #4]
 8019e86:	689b      	ldr	r3, [r3, #8]
 8019e88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8019e8a:	69fb      	ldr	r3, [r7, #28]
 8019e8c:	005b      	lsls	r3, r3, #1
 8019e8e:	2203      	movs	r2, #3
 8019e90:	fa02 f303 	lsl.w	r3, r2, r3
 8019e94:	43db      	mvns	r3, r3
 8019e96:	69ba      	ldr	r2, [r7, #24]
 8019e98:	4013      	ands	r3, r2
 8019e9a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8019e9c:	683b      	ldr	r3, [r7, #0]
 8019e9e:	68da      	ldr	r2, [r3, #12]
 8019ea0:	69fb      	ldr	r3, [r7, #28]
 8019ea2:	005b      	lsls	r3, r3, #1
 8019ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8019ea8:	69ba      	ldr	r2, [r7, #24]
 8019eaa:	4313      	orrs	r3, r2
 8019eac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8019eae:	687b      	ldr	r3, [r7, #4]
 8019eb0:	69ba      	ldr	r2, [r7, #24]
 8019eb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8019eb4:	687b      	ldr	r3, [r7, #4]
 8019eb6:	685b      	ldr	r3, [r3, #4]
 8019eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8019eba:	2201      	movs	r2, #1
 8019ebc:	69fb      	ldr	r3, [r7, #28]
 8019ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8019ec2:	43db      	mvns	r3, r3
 8019ec4:	69ba      	ldr	r2, [r7, #24]
 8019ec6:	4013      	ands	r3, r2
 8019ec8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8019eca:	683b      	ldr	r3, [r7, #0]
 8019ecc:	685b      	ldr	r3, [r3, #4]
 8019ece:	091b      	lsrs	r3, r3, #4
 8019ed0:	f003 0201 	and.w	r2, r3, #1
 8019ed4:	69fb      	ldr	r3, [r7, #28]
 8019ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8019eda:	69ba      	ldr	r2, [r7, #24]
 8019edc:	4313      	orrs	r3, r2
 8019ede:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8019ee0:	687b      	ldr	r3, [r7, #4]
 8019ee2:	69ba      	ldr	r2, [r7, #24]
 8019ee4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8019ee6:	683b      	ldr	r3, [r7, #0]
 8019ee8:	685b      	ldr	r3, [r3, #4]
 8019eea:	f003 0303 	and.w	r3, r3, #3
 8019eee:	2b03      	cmp	r3, #3
 8019ef0:	d017      	beq.n	8019f22 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8019ef2:	687b      	ldr	r3, [r7, #4]
 8019ef4:	68db      	ldr	r3, [r3, #12]
 8019ef6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8019ef8:	69fb      	ldr	r3, [r7, #28]
 8019efa:	005b      	lsls	r3, r3, #1
 8019efc:	2203      	movs	r2, #3
 8019efe:	fa02 f303 	lsl.w	r3, r2, r3
 8019f02:	43db      	mvns	r3, r3
 8019f04:	69ba      	ldr	r2, [r7, #24]
 8019f06:	4013      	ands	r3, r2
 8019f08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8019f0a:	683b      	ldr	r3, [r7, #0]
 8019f0c:	689a      	ldr	r2, [r3, #8]
 8019f0e:	69fb      	ldr	r3, [r7, #28]
 8019f10:	005b      	lsls	r3, r3, #1
 8019f12:	fa02 f303 	lsl.w	r3, r2, r3
 8019f16:	69ba      	ldr	r2, [r7, #24]
 8019f18:	4313      	orrs	r3, r2
 8019f1a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8019f1c:	687b      	ldr	r3, [r7, #4]
 8019f1e:	69ba      	ldr	r2, [r7, #24]
 8019f20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8019f22:	683b      	ldr	r3, [r7, #0]
 8019f24:	685b      	ldr	r3, [r3, #4]
 8019f26:	f003 0303 	and.w	r3, r3, #3
 8019f2a:	2b02      	cmp	r3, #2
 8019f2c:	d123      	bne.n	8019f76 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8019f2e:	69fb      	ldr	r3, [r7, #28]
 8019f30:	08da      	lsrs	r2, r3, #3
 8019f32:	687b      	ldr	r3, [r7, #4]
 8019f34:	3208      	adds	r2, #8
 8019f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8019f3c:	69fb      	ldr	r3, [r7, #28]
 8019f3e:	f003 0307 	and.w	r3, r3, #7
 8019f42:	009b      	lsls	r3, r3, #2
 8019f44:	220f      	movs	r2, #15
 8019f46:	fa02 f303 	lsl.w	r3, r2, r3
 8019f4a:	43db      	mvns	r3, r3
 8019f4c:	69ba      	ldr	r2, [r7, #24]
 8019f4e:	4013      	ands	r3, r2
 8019f50:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8019f52:	683b      	ldr	r3, [r7, #0]
 8019f54:	691a      	ldr	r2, [r3, #16]
 8019f56:	69fb      	ldr	r3, [r7, #28]
 8019f58:	f003 0307 	and.w	r3, r3, #7
 8019f5c:	009b      	lsls	r3, r3, #2
 8019f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8019f62:	69ba      	ldr	r2, [r7, #24]
 8019f64:	4313      	orrs	r3, r2
 8019f66:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8019f68:	69fb      	ldr	r3, [r7, #28]
 8019f6a:	08da      	lsrs	r2, r3, #3
 8019f6c:	687b      	ldr	r3, [r7, #4]
 8019f6e:	3208      	adds	r2, #8
 8019f70:	69b9      	ldr	r1, [r7, #24]
 8019f72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8019f76:	687b      	ldr	r3, [r7, #4]
 8019f78:	681b      	ldr	r3, [r3, #0]
 8019f7a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8019f7c:	69fb      	ldr	r3, [r7, #28]
 8019f7e:	005b      	lsls	r3, r3, #1
 8019f80:	2203      	movs	r2, #3
 8019f82:	fa02 f303 	lsl.w	r3, r2, r3
 8019f86:	43db      	mvns	r3, r3
 8019f88:	69ba      	ldr	r2, [r7, #24]
 8019f8a:	4013      	ands	r3, r2
 8019f8c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8019f8e:	683b      	ldr	r3, [r7, #0]
 8019f90:	685b      	ldr	r3, [r3, #4]
 8019f92:	f003 0203 	and.w	r2, r3, #3
 8019f96:	69fb      	ldr	r3, [r7, #28]
 8019f98:	005b      	lsls	r3, r3, #1
 8019f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8019f9e:	69ba      	ldr	r2, [r7, #24]
 8019fa0:	4313      	orrs	r3, r2
 8019fa2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8019fa4:	687b      	ldr	r3, [r7, #4]
 8019fa6:	69ba      	ldr	r2, [r7, #24]
 8019fa8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8019faa:	683b      	ldr	r3, [r7, #0]
 8019fac:	685b      	ldr	r3, [r3, #4]
 8019fae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8019fb2:	2b00      	cmp	r3, #0
 8019fb4:	f000 80e0 	beq.w	801a178 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8019fb8:	4b2f      	ldr	r3, [pc, #188]	@ (801a078 <HAL_GPIO_Init+0x238>)
 8019fba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8019fbe:	4a2e      	ldr	r2, [pc, #184]	@ (801a078 <HAL_GPIO_Init+0x238>)
 8019fc0:	f043 0302 	orr.w	r3, r3, #2
 8019fc4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8019fc8:	4b2b      	ldr	r3, [pc, #172]	@ (801a078 <HAL_GPIO_Init+0x238>)
 8019fca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8019fce:	f003 0302 	and.w	r3, r3, #2
 8019fd2:	60fb      	str	r3, [r7, #12]
 8019fd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8019fd6:	4a29      	ldr	r2, [pc, #164]	@ (801a07c <HAL_GPIO_Init+0x23c>)
 8019fd8:	69fb      	ldr	r3, [r7, #28]
 8019fda:	089b      	lsrs	r3, r3, #2
 8019fdc:	3302      	adds	r3, #2
 8019fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8019fe4:	69fb      	ldr	r3, [r7, #28]
 8019fe6:	f003 0303 	and.w	r3, r3, #3
 8019fea:	009b      	lsls	r3, r3, #2
 8019fec:	220f      	movs	r2, #15
 8019fee:	fa02 f303 	lsl.w	r3, r2, r3
 8019ff2:	43db      	mvns	r3, r3
 8019ff4:	69ba      	ldr	r2, [r7, #24]
 8019ff6:	4013      	ands	r3, r2
 8019ff8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8019ffa:	687b      	ldr	r3, [r7, #4]
 8019ffc:	4a20      	ldr	r2, [pc, #128]	@ (801a080 <HAL_GPIO_Init+0x240>)
 8019ffe:	4293      	cmp	r3, r2
 801a000:	d052      	beq.n	801a0a8 <HAL_GPIO_Init+0x268>
 801a002:	687b      	ldr	r3, [r7, #4]
 801a004:	4a1f      	ldr	r2, [pc, #124]	@ (801a084 <HAL_GPIO_Init+0x244>)
 801a006:	4293      	cmp	r3, r2
 801a008:	d031      	beq.n	801a06e <HAL_GPIO_Init+0x22e>
 801a00a:	687b      	ldr	r3, [r7, #4]
 801a00c:	4a1e      	ldr	r2, [pc, #120]	@ (801a088 <HAL_GPIO_Init+0x248>)
 801a00e:	4293      	cmp	r3, r2
 801a010:	d02b      	beq.n	801a06a <HAL_GPIO_Init+0x22a>
 801a012:	687b      	ldr	r3, [r7, #4]
 801a014:	4a1d      	ldr	r2, [pc, #116]	@ (801a08c <HAL_GPIO_Init+0x24c>)
 801a016:	4293      	cmp	r3, r2
 801a018:	d025      	beq.n	801a066 <HAL_GPIO_Init+0x226>
 801a01a:	687b      	ldr	r3, [r7, #4]
 801a01c:	4a1c      	ldr	r2, [pc, #112]	@ (801a090 <HAL_GPIO_Init+0x250>)
 801a01e:	4293      	cmp	r3, r2
 801a020:	d01f      	beq.n	801a062 <HAL_GPIO_Init+0x222>
 801a022:	687b      	ldr	r3, [r7, #4]
 801a024:	4a1b      	ldr	r2, [pc, #108]	@ (801a094 <HAL_GPIO_Init+0x254>)
 801a026:	4293      	cmp	r3, r2
 801a028:	d019      	beq.n	801a05e <HAL_GPIO_Init+0x21e>
 801a02a:	687b      	ldr	r3, [r7, #4]
 801a02c:	4a1a      	ldr	r2, [pc, #104]	@ (801a098 <HAL_GPIO_Init+0x258>)
 801a02e:	4293      	cmp	r3, r2
 801a030:	d013      	beq.n	801a05a <HAL_GPIO_Init+0x21a>
 801a032:	687b      	ldr	r3, [r7, #4]
 801a034:	4a19      	ldr	r2, [pc, #100]	@ (801a09c <HAL_GPIO_Init+0x25c>)
 801a036:	4293      	cmp	r3, r2
 801a038:	d00d      	beq.n	801a056 <HAL_GPIO_Init+0x216>
 801a03a:	687b      	ldr	r3, [r7, #4]
 801a03c:	4a18      	ldr	r2, [pc, #96]	@ (801a0a0 <HAL_GPIO_Init+0x260>)
 801a03e:	4293      	cmp	r3, r2
 801a040:	d007      	beq.n	801a052 <HAL_GPIO_Init+0x212>
 801a042:	687b      	ldr	r3, [r7, #4]
 801a044:	4a17      	ldr	r2, [pc, #92]	@ (801a0a4 <HAL_GPIO_Init+0x264>)
 801a046:	4293      	cmp	r3, r2
 801a048:	d101      	bne.n	801a04e <HAL_GPIO_Init+0x20e>
 801a04a:	2309      	movs	r3, #9
 801a04c:	e02d      	b.n	801a0aa <HAL_GPIO_Init+0x26a>
 801a04e:	230a      	movs	r3, #10
 801a050:	e02b      	b.n	801a0aa <HAL_GPIO_Init+0x26a>
 801a052:	2308      	movs	r3, #8
 801a054:	e029      	b.n	801a0aa <HAL_GPIO_Init+0x26a>
 801a056:	2307      	movs	r3, #7
 801a058:	e027      	b.n	801a0aa <HAL_GPIO_Init+0x26a>
 801a05a:	2306      	movs	r3, #6
 801a05c:	e025      	b.n	801a0aa <HAL_GPIO_Init+0x26a>
 801a05e:	2305      	movs	r3, #5
 801a060:	e023      	b.n	801a0aa <HAL_GPIO_Init+0x26a>
 801a062:	2304      	movs	r3, #4
 801a064:	e021      	b.n	801a0aa <HAL_GPIO_Init+0x26a>
 801a066:	2303      	movs	r3, #3
 801a068:	e01f      	b.n	801a0aa <HAL_GPIO_Init+0x26a>
 801a06a:	2302      	movs	r3, #2
 801a06c:	e01d      	b.n	801a0aa <HAL_GPIO_Init+0x26a>
 801a06e:	2301      	movs	r3, #1
 801a070:	e01b      	b.n	801a0aa <HAL_GPIO_Init+0x26a>
 801a072:	bf00      	nop
 801a074:	58000080 	.word	0x58000080
 801a078:	58024400 	.word	0x58024400
 801a07c:	58000400 	.word	0x58000400
 801a080:	58020000 	.word	0x58020000
 801a084:	58020400 	.word	0x58020400
 801a088:	58020800 	.word	0x58020800
 801a08c:	58020c00 	.word	0x58020c00
 801a090:	58021000 	.word	0x58021000
 801a094:	58021400 	.word	0x58021400
 801a098:	58021800 	.word	0x58021800
 801a09c:	58021c00 	.word	0x58021c00
 801a0a0:	58022000 	.word	0x58022000
 801a0a4:	58022400 	.word	0x58022400
 801a0a8:	2300      	movs	r3, #0
 801a0aa:	69fa      	ldr	r2, [r7, #28]
 801a0ac:	f002 0203 	and.w	r2, r2, #3
 801a0b0:	0092      	lsls	r2, r2, #2
 801a0b2:	4093      	lsls	r3, r2
 801a0b4:	69ba      	ldr	r2, [r7, #24]
 801a0b6:	4313      	orrs	r3, r2
 801a0b8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801a0ba:	4938      	ldr	r1, [pc, #224]	@ (801a19c <HAL_GPIO_Init+0x35c>)
 801a0bc:	69fb      	ldr	r3, [r7, #28]
 801a0be:	089b      	lsrs	r3, r3, #2
 801a0c0:	3302      	adds	r3, #2
 801a0c2:	69ba      	ldr	r2, [r7, #24]
 801a0c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801a0c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801a0cc:	681b      	ldr	r3, [r3, #0]
 801a0ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801a0d0:	693b      	ldr	r3, [r7, #16]
 801a0d2:	43db      	mvns	r3, r3
 801a0d4:	69ba      	ldr	r2, [r7, #24]
 801a0d6:	4013      	ands	r3, r2
 801a0d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801a0da:	683b      	ldr	r3, [r7, #0]
 801a0dc:	685b      	ldr	r3, [r3, #4]
 801a0de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801a0e2:	2b00      	cmp	r3, #0
 801a0e4:	d003      	beq.n	801a0ee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 801a0e6:	69ba      	ldr	r2, [r7, #24]
 801a0e8:	693b      	ldr	r3, [r7, #16]
 801a0ea:	4313      	orrs	r3, r2
 801a0ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 801a0ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801a0f2:	69bb      	ldr	r3, [r7, #24]
 801a0f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 801a0f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801a0fa:	685b      	ldr	r3, [r3, #4]
 801a0fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801a0fe:	693b      	ldr	r3, [r7, #16]
 801a100:	43db      	mvns	r3, r3
 801a102:	69ba      	ldr	r2, [r7, #24]
 801a104:	4013      	ands	r3, r2
 801a106:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801a108:	683b      	ldr	r3, [r7, #0]
 801a10a:	685b      	ldr	r3, [r3, #4]
 801a10c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801a110:	2b00      	cmp	r3, #0
 801a112:	d003      	beq.n	801a11c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 801a114:	69ba      	ldr	r2, [r7, #24]
 801a116:	693b      	ldr	r3, [r7, #16]
 801a118:	4313      	orrs	r3, r2
 801a11a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 801a11c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801a120:	69bb      	ldr	r3, [r7, #24]
 801a122:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 801a124:	697b      	ldr	r3, [r7, #20]
 801a126:	685b      	ldr	r3, [r3, #4]
 801a128:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801a12a:	693b      	ldr	r3, [r7, #16]
 801a12c:	43db      	mvns	r3, r3
 801a12e:	69ba      	ldr	r2, [r7, #24]
 801a130:	4013      	ands	r3, r2
 801a132:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801a134:	683b      	ldr	r3, [r7, #0]
 801a136:	685b      	ldr	r3, [r3, #4]
 801a138:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801a13c:	2b00      	cmp	r3, #0
 801a13e:	d003      	beq.n	801a148 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 801a140:	69ba      	ldr	r2, [r7, #24]
 801a142:	693b      	ldr	r3, [r7, #16]
 801a144:	4313      	orrs	r3, r2
 801a146:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 801a148:	697b      	ldr	r3, [r7, #20]
 801a14a:	69ba      	ldr	r2, [r7, #24]
 801a14c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 801a14e:	697b      	ldr	r3, [r7, #20]
 801a150:	681b      	ldr	r3, [r3, #0]
 801a152:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801a154:	693b      	ldr	r3, [r7, #16]
 801a156:	43db      	mvns	r3, r3
 801a158:	69ba      	ldr	r2, [r7, #24]
 801a15a:	4013      	ands	r3, r2
 801a15c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801a15e:	683b      	ldr	r3, [r7, #0]
 801a160:	685b      	ldr	r3, [r3, #4]
 801a162:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801a166:	2b00      	cmp	r3, #0
 801a168:	d003      	beq.n	801a172 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 801a16a:	69ba      	ldr	r2, [r7, #24]
 801a16c:	693b      	ldr	r3, [r7, #16]
 801a16e:	4313      	orrs	r3, r2
 801a170:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 801a172:	697b      	ldr	r3, [r7, #20]
 801a174:	69ba      	ldr	r2, [r7, #24]
 801a176:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 801a178:	69fb      	ldr	r3, [r7, #28]
 801a17a:	3301      	adds	r3, #1
 801a17c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801a17e:	683b      	ldr	r3, [r7, #0]
 801a180:	681a      	ldr	r2, [r3, #0]
 801a182:	69fb      	ldr	r3, [r7, #28]
 801a184:	fa22 f303 	lsr.w	r3, r2, r3
 801a188:	2b00      	cmp	r3, #0
 801a18a:	f47f ae63 	bne.w	8019e54 <HAL_GPIO_Init+0x14>
  }
}
 801a18e:	bf00      	nop
 801a190:	bf00      	nop
 801a192:	3724      	adds	r7, #36	@ 0x24
 801a194:	46bd      	mov	sp, r7
 801a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a19a:	4770      	bx	lr
 801a19c:	58000400 	.word	0x58000400

0801a1a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 801a1a0:	b480      	push	{r7}
 801a1a2:	b085      	sub	sp, #20
 801a1a4:	af00      	add	r7, sp, #0
 801a1a6:	6078      	str	r0, [r7, #4]
 801a1a8:	460b      	mov	r3, r1
 801a1aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 801a1ac:	687b      	ldr	r3, [r7, #4]
 801a1ae:	691a      	ldr	r2, [r3, #16]
 801a1b0:	887b      	ldrh	r3, [r7, #2]
 801a1b2:	4013      	ands	r3, r2
 801a1b4:	2b00      	cmp	r3, #0
 801a1b6:	d002      	beq.n	801a1be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 801a1b8:	2301      	movs	r3, #1
 801a1ba:	73fb      	strb	r3, [r7, #15]
 801a1bc:	e001      	b.n	801a1c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801a1be:	2300      	movs	r3, #0
 801a1c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801a1c2:	7bfb      	ldrb	r3, [r7, #15]
}
 801a1c4:	4618      	mov	r0, r3
 801a1c6:	3714      	adds	r7, #20
 801a1c8:	46bd      	mov	sp, r7
 801a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1ce:	4770      	bx	lr

0801a1d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801a1d0:	b480      	push	{r7}
 801a1d2:	b083      	sub	sp, #12
 801a1d4:	af00      	add	r7, sp, #0
 801a1d6:	6078      	str	r0, [r7, #4]
 801a1d8:	460b      	mov	r3, r1
 801a1da:	807b      	strh	r3, [r7, #2]
 801a1dc:	4613      	mov	r3, r2
 801a1de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801a1e0:	787b      	ldrb	r3, [r7, #1]
 801a1e2:	2b00      	cmp	r3, #0
 801a1e4:	d003      	beq.n	801a1ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801a1e6:	887a      	ldrh	r2, [r7, #2]
 801a1e8:	687b      	ldr	r3, [r7, #4]
 801a1ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 801a1ec:	e003      	b.n	801a1f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 801a1ee:	887b      	ldrh	r3, [r7, #2]
 801a1f0:	041a      	lsls	r2, r3, #16
 801a1f2:	687b      	ldr	r3, [r7, #4]
 801a1f4:	619a      	str	r2, [r3, #24]
}
 801a1f6:	bf00      	nop
 801a1f8:	370c      	adds	r7, #12
 801a1fa:	46bd      	mov	sp, r7
 801a1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a200:	4770      	bx	lr
	...

0801a204 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 801a204:	b580      	push	{r7, lr}
 801a206:	b084      	sub	sp, #16
 801a208:	af00      	add	r7, sp, #0
 801a20a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 801a20c:	4b19      	ldr	r3, [pc, #100]	@ (801a274 <HAL_PWREx_ConfigSupply+0x70>)
 801a20e:	68db      	ldr	r3, [r3, #12]
 801a210:	f003 0304 	and.w	r3, r3, #4
 801a214:	2b04      	cmp	r3, #4
 801a216:	d00a      	beq.n	801a22e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 801a218:	4b16      	ldr	r3, [pc, #88]	@ (801a274 <HAL_PWREx_ConfigSupply+0x70>)
 801a21a:	68db      	ldr	r3, [r3, #12]
 801a21c:	f003 0307 	and.w	r3, r3, #7
 801a220:	687a      	ldr	r2, [r7, #4]
 801a222:	429a      	cmp	r2, r3
 801a224:	d001      	beq.n	801a22a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 801a226:	2301      	movs	r3, #1
 801a228:	e01f      	b.n	801a26a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 801a22a:	2300      	movs	r3, #0
 801a22c:	e01d      	b.n	801a26a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 801a22e:	4b11      	ldr	r3, [pc, #68]	@ (801a274 <HAL_PWREx_ConfigSupply+0x70>)
 801a230:	68db      	ldr	r3, [r3, #12]
 801a232:	f023 0207 	bic.w	r2, r3, #7
 801a236:	490f      	ldr	r1, [pc, #60]	@ (801a274 <HAL_PWREx_ConfigSupply+0x70>)
 801a238:	687b      	ldr	r3, [r7, #4]
 801a23a:	4313      	orrs	r3, r2
 801a23c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 801a23e:	f7fd f8e1 	bl	8017404 <HAL_GetTick>
 801a242:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801a244:	e009      	b.n	801a25a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801a246:	f7fd f8dd 	bl	8017404 <HAL_GetTick>
 801a24a:	4602      	mov	r2, r0
 801a24c:	68fb      	ldr	r3, [r7, #12]
 801a24e:	1ad3      	subs	r3, r2, r3
 801a250:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801a254:	d901      	bls.n	801a25a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 801a256:	2301      	movs	r3, #1
 801a258:	e007      	b.n	801a26a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801a25a:	4b06      	ldr	r3, [pc, #24]	@ (801a274 <HAL_PWREx_ConfigSupply+0x70>)
 801a25c:	685b      	ldr	r3, [r3, #4]
 801a25e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801a262:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801a266:	d1ee      	bne.n	801a246 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 801a268:	2300      	movs	r3, #0
}
 801a26a:	4618      	mov	r0, r3
 801a26c:	3710      	adds	r7, #16
 801a26e:	46bd      	mov	sp, r7
 801a270:	bd80      	pop	{r7, pc}
 801a272:	bf00      	nop
 801a274:	58024800 	.word	0x58024800

0801a278 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801a278:	b580      	push	{r7, lr}
 801a27a:	b08c      	sub	sp, #48	@ 0x30
 801a27c:	af00      	add	r7, sp, #0
 801a27e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801a280:	687b      	ldr	r3, [r7, #4]
 801a282:	2b00      	cmp	r3, #0
 801a284:	d102      	bne.n	801a28c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801a286:	2301      	movs	r3, #1
 801a288:	f000 bc48 	b.w	801ab1c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801a28c:	687b      	ldr	r3, [r7, #4]
 801a28e:	681b      	ldr	r3, [r3, #0]
 801a290:	f003 0301 	and.w	r3, r3, #1
 801a294:	2b00      	cmp	r3, #0
 801a296:	f000 8088 	beq.w	801a3aa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801a29a:	4b99      	ldr	r3, [pc, #612]	@ (801a500 <HAL_RCC_OscConfig+0x288>)
 801a29c:	691b      	ldr	r3, [r3, #16]
 801a29e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801a2a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801a2a4:	4b96      	ldr	r3, [pc, #600]	@ (801a500 <HAL_RCC_OscConfig+0x288>)
 801a2a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a2a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 801a2aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a2ac:	2b10      	cmp	r3, #16
 801a2ae:	d007      	beq.n	801a2c0 <HAL_RCC_OscConfig+0x48>
 801a2b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a2b2:	2b18      	cmp	r3, #24
 801a2b4:	d111      	bne.n	801a2da <HAL_RCC_OscConfig+0x62>
 801a2b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a2b8:	f003 0303 	and.w	r3, r3, #3
 801a2bc:	2b02      	cmp	r3, #2
 801a2be:	d10c      	bne.n	801a2da <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801a2c0:	4b8f      	ldr	r3, [pc, #572]	@ (801a500 <HAL_RCC_OscConfig+0x288>)
 801a2c2:	681b      	ldr	r3, [r3, #0]
 801a2c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801a2c8:	2b00      	cmp	r3, #0
 801a2ca:	d06d      	beq.n	801a3a8 <HAL_RCC_OscConfig+0x130>
 801a2cc:	687b      	ldr	r3, [r7, #4]
 801a2ce:	685b      	ldr	r3, [r3, #4]
 801a2d0:	2b00      	cmp	r3, #0
 801a2d2:	d169      	bne.n	801a3a8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 801a2d4:	2301      	movs	r3, #1
 801a2d6:	f000 bc21 	b.w	801ab1c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801a2da:	687b      	ldr	r3, [r7, #4]
 801a2dc:	685b      	ldr	r3, [r3, #4]
 801a2de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801a2e2:	d106      	bne.n	801a2f2 <HAL_RCC_OscConfig+0x7a>
 801a2e4:	4b86      	ldr	r3, [pc, #536]	@ (801a500 <HAL_RCC_OscConfig+0x288>)
 801a2e6:	681b      	ldr	r3, [r3, #0]
 801a2e8:	4a85      	ldr	r2, [pc, #532]	@ (801a500 <HAL_RCC_OscConfig+0x288>)
 801a2ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801a2ee:	6013      	str	r3, [r2, #0]
 801a2f0:	e02e      	b.n	801a350 <HAL_RCC_OscConfig+0xd8>
 801a2f2:	687b      	ldr	r3, [r7, #4]
 801a2f4:	685b      	ldr	r3, [r3, #4]
 801a2f6:	2b00      	cmp	r3, #0
 801a2f8:	d10c      	bne.n	801a314 <HAL_RCC_OscConfig+0x9c>
 801a2fa:	4b81      	ldr	r3, [pc, #516]	@ (801a500 <HAL_RCC_OscConfig+0x288>)
 801a2fc:	681b      	ldr	r3, [r3, #0]
 801a2fe:	4a80      	ldr	r2, [pc, #512]	@ (801a500 <HAL_RCC_OscConfig+0x288>)
 801a300:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801a304:	6013      	str	r3, [r2, #0]
 801a306:	4b7e      	ldr	r3, [pc, #504]	@ (801a500 <HAL_RCC_OscConfig+0x288>)
 801a308:	681b      	ldr	r3, [r3, #0]
 801a30a:	4a7d      	ldr	r2, [pc, #500]	@ (801a500 <HAL_RCC_OscConfig+0x288>)
 801a30c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801a310:	6013      	str	r3, [r2, #0]
 801a312:	e01d      	b.n	801a350 <HAL_RCC_OscConfig+0xd8>
 801a314:	687b      	ldr	r3, [r7, #4]
 801a316:	685b      	ldr	r3, [r3, #4]
 801a318:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801a31c:	d10c      	bne.n	801a338 <HAL_RCC_OscConfig+0xc0>
 801a31e:	4b78      	ldr	r3, [pc, #480]	@ (801a500 <HAL_RCC_OscConfig+0x288>)
 801a320:	681b      	ldr	r3, [r3, #0]
 801a322:	4a77      	ldr	r2, [pc, #476]	@ (801a500 <HAL_RCC_OscConfig+0x288>)
 801a324:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801a328:	6013      	str	r3, [r2, #0]
 801a32a:	4b75      	ldr	r3, [pc, #468]	@ (801a500 <HAL_RCC_OscConfig+0x288>)
 801a32c:	681b      	ldr	r3, [r3, #0]
 801a32e:	4a74      	ldr	r2, [pc, #464]	@ (801a500 <HAL_RCC_OscConfig+0x288>)
 801a330:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801a334:	6013      	str	r3, [r2, #0]
 801a336:	e00b      	b.n	801a350 <HAL_RCC_OscConfig+0xd8>
 801a338:	4b71      	ldr	r3, [pc, #452]	@ (801a500 <HAL_RCC_OscConfig+0x288>)
 801a33a:	681b      	ldr	r3, [r3, #0]
 801a33c:	4a70      	ldr	r2, [pc, #448]	@ (801a500 <HAL_RCC_OscConfig+0x288>)
 801a33e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801a342:	6013      	str	r3, [r2, #0]
 801a344:	4b6e      	ldr	r3, [pc, #440]	@ (801a500 <HAL_RCC_OscConfig+0x288>)
 801a346:	681b      	ldr	r3, [r3, #0]
 801a348:	4a6d      	ldr	r2, [pc, #436]	@ (801a500 <HAL_RCC_OscConfig+0x288>)
 801a34a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801a34e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801a350:	687b      	ldr	r3, [r7, #4]
 801a352:	685b      	ldr	r3, [r3, #4]
 801a354:	2b00      	cmp	r3, #0
 801a356:	d013      	beq.n	801a380 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801a358:	f7fd f854 	bl	8017404 <HAL_GetTick>
 801a35c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801a35e:	e008      	b.n	801a372 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801a360:	f7fd f850 	bl	8017404 <HAL_GetTick>
 801a364:	4602      	mov	r2, r0
 801a366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a368:	1ad3      	subs	r3, r2, r3
 801a36a:	2b64      	cmp	r3, #100	@ 0x64
 801a36c:	d901      	bls.n	801a372 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801a36e:	2303      	movs	r3, #3
 801a370:	e3d4      	b.n	801ab1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801a372:	4b63      	ldr	r3, [pc, #396]	@ (801a500 <HAL_RCC_OscConfig+0x288>)
 801a374:	681b      	ldr	r3, [r3, #0]
 801a376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801a37a:	2b00      	cmp	r3, #0
 801a37c:	d0f0      	beq.n	801a360 <HAL_RCC_OscConfig+0xe8>
 801a37e:	e014      	b.n	801a3aa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801a380:	f7fd f840 	bl	8017404 <HAL_GetTick>
 801a384:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801a386:	e008      	b.n	801a39a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801a388:	f7fd f83c 	bl	8017404 <HAL_GetTick>
 801a38c:	4602      	mov	r2, r0
 801a38e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a390:	1ad3      	subs	r3, r2, r3
 801a392:	2b64      	cmp	r3, #100	@ 0x64
 801a394:	d901      	bls.n	801a39a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 801a396:	2303      	movs	r3, #3
 801a398:	e3c0      	b.n	801ab1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801a39a:	4b59      	ldr	r3, [pc, #356]	@ (801a500 <HAL_RCC_OscConfig+0x288>)
 801a39c:	681b      	ldr	r3, [r3, #0]
 801a39e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801a3a2:	2b00      	cmp	r3, #0
 801a3a4:	d1f0      	bne.n	801a388 <HAL_RCC_OscConfig+0x110>
 801a3a6:	e000      	b.n	801a3aa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801a3a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801a3aa:	687b      	ldr	r3, [r7, #4]
 801a3ac:	681b      	ldr	r3, [r3, #0]
 801a3ae:	f003 0302 	and.w	r3, r3, #2
 801a3b2:	2b00      	cmp	r3, #0
 801a3b4:	f000 80ca 	beq.w	801a54c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801a3b8:	4b51      	ldr	r3, [pc, #324]	@ (801a500 <HAL_RCC_OscConfig+0x288>)
 801a3ba:	691b      	ldr	r3, [r3, #16]
 801a3bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801a3c0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801a3c2:	4b4f      	ldr	r3, [pc, #316]	@ (801a500 <HAL_RCC_OscConfig+0x288>)
 801a3c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a3c6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 801a3c8:	6a3b      	ldr	r3, [r7, #32]
 801a3ca:	2b00      	cmp	r3, #0
 801a3cc:	d007      	beq.n	801a3de <HAL_RCC_OscConfig+0x166>
 801a3ce:	6a3b      	ldr	r3, [r7, #32]
 801a3d0:	2b18      	cmp	r3, #24
 801a3d2:	d156      	bne.n	801a482 <HAL_RCC_OscConfig+0x20a>
 801a3d4:	69fb      	ldr	r3, [r7, #28]
 801a3d6:	f003 0303 	and.w	r3, r3, #3
 801a3da:	2b00      	cmp	r3, #0
 801a3dc:	d151      	bne.n	801a482 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801a3de:	4b48      	ldr	r3, [pc, #288]	@ (801a500 <HAL_RCC_OscConfig+0x288>)
 801a3e0:	681b      	ldr	r3, [r3, #0]
 801a3e2:	f003 0304 	and.w	r3, r3, #4
 801a3e6:	2b00      	cmp	r3, #0
 801a3e8:	d005      	beq.n	801a3f6 <HAL_RCC_OscConfig+0x17e>
 801a3ea:	687b      	ldr	r3, [r7, #4]
 801a3ec:	68db      	ldr	r3, [r3, #12]
 801a3ee:	2b00      	cmp	r3, #0
 801a3f0:	d101      	bne.n	801a3f6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 801a3f2:	2301      	movs	r3, #1
 801a3f4:	e392      	b.n	801ab1c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801a3f6:	4b42      	ldr	r3, [pc, #264]	@ (801a500 <HAL_RCC_OscConfig+0x288>)
 801a3f8:	681b      	ldr	r3, [r3, #0]
 801a3fa:	f023 0219 	bic.w	r2, r3, #25
 801a3fe:	687b      	ldr	r3, [r7, #4]
 801a400:	68db      	ldr	r3, [r3, #12]
 801a402:	493f      	ldr	r1, [pc, #252]	@ (801a500 <HAL_RCC_OscConfig+0x288>)
 801a404:	4313      	orrs	r3, r2
 801a406:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801a408:	f7fc fffc 	bl	8017404 <HAL_GetTick>
 801a40c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801a40e:	e008      	b.n	801a422 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801a410:	f7fc fff8 	bl	8017404 <HAL_GetTick>
 801a414:	4602      	mov	r2, r0
 801a416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a418:	1ad3      	subs	r3, r2, r3
 801a41a:	2b02      	cmp	r3, #2
 801a41c:	d901      	bls.n	801a422 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 801a41e:	2303      	movs	r3, #3
 801a420:	e37c      	b.n	801ab1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801a422:	4b37      	ldr	r3, [pc, #220]	@ (801a500 <HAL_RCC_OscConfig+0x288>)
 801a424:	681b      	ldr	r3, [r3, #0]
 801a426:	f003 0304 	and.w	r3, r3, #4
 801a42a:	2b00      	cmp	r3, #0
 801a42c:	d0f0      	beq.n	801a410 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801a42e:	f7fd f819 	bl	8017464 <HAL_GetREVID>
 801a432:	4603      	mov	r3, r0
 801a434:	f241 0203 	movw	r2, #4099	@ 0x1003
 801a438:	4293      	cmp	r3, r2
 801a43a:	d817      	bhi.n	801a46c <HAL_RCC_OscConfig+0x1f4>
 801a43c:	687b      	ldr	r3, [r7, #4]
 801a43e:	691b      	ldr	r3, [r3, #16]
 801a440:	2b40      	cmp	r3, #64	@ 0x40
 801a442:	d108      	bne.n	801a456 <HAL_RCC_OscConfig+0x1de>
 801a444:	4b2e      	ldr	r3, [pc, #184]	@ (801a500 <HAL_RCC_OscConfig+0x288>)
 801a446:	685b      	ldr	r3, [r3, #4]
 801a448:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801a44c:	4a2c      	ldr	r2, [pc, #176]	@ (801a500 <HAL_RCC_OscConfig+0x288>)
 801a44e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801a452:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801a454:	e07a      	b.n	801a54c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801a456:	4b2a      	ldr	r3, [pc, #168]	@ (801a500 <HAL_RCC_OscConfig+0x288>)
 801a458:	685b      	ldr	r3, [r3, #4]
 801a45a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801a45e:	687b      	ldr	r3, [r7, #4]
 801a460:	691b      	ldr	r3, [r3, #16]
 801a462:	031b      	lsls	r3, r3, #12
 801a464:	4926      	ldr	r1, [pc, #152]	@ (801a500 <HAL_RCC_OscConfig+0x288>)
 801a466:	4313      	orrs	r3, r2
 801a468:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801a46a:	e06f      	b.n	801a54c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801a46c:	4b24      	ldr	r3, [pc, #144]	@ (801a500 <HAL_RCC_OscConfig+0x288>)
 801a46e:	685b      	ldr	r3, [r3, #4]
 801a470:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801a474:	687b      	ldr	r3, [r7, #4]
 801a476:	691b      	ldr	r3, [r3, #16]
 801a478:	061b      	lsls	r3, r3, #24
 801a47a:	4921      	ldr	r1, [pc, #132]	@ (801a500 <HAL_RCC_OscConfig+0x288>)
 801a47c:	4313      	orrs	r3, r2
 801a47e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801a480:	e064      	b.n	801a54c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801a482:	687b      	ldr	r3, [r7, #4]
 801a484:	68db      	ldr	r3, [r3, #12]
 801a486:	2b00      	cmp	r3, #0
 801a488:	d047      	beq.n	801a51a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801a48a:	4b1d      	ldr	r3, [pc, #116]	@ (801a500 <HAL_RCC_OscConfig+0x288>)
 801a48c:	681b      	ldr	r3, [r3, #0]
 801a48e:	f023 0219 	bic.w	r2, r3, #25
 801a492:	687b      	ldr	r3, [r7, #4]
 801a494:	68db      	ldr	r3, [r3, #12]
 801a496:	491a      	ldr	r1, [pc, #104]	@ (801a500 <HAL_RCC_OscConfig+0x288>)
 801a498:	4313      	orrs	r3, r2
 801a49a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801a49c:	f7fc ffb2 	bl	8017404 <HAL_GetTick>
 801a4a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801a4a2:	e008      	b.n	801a4b6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801a4a4:	f7fc ffae 	bl	8017404 <HAL_GetTick>
 801a4a8:	4602      	mov	r2, r0
 801a4aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a4ac:	1ad3      	subs	r3, r2, r3
 801a4ae:	2b02      	cmp	r3, #2
 801a4b0:	d901      	bls.n	801a4b6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 801a4b2:	2303      	movs	r3, #3
 801a4b4:	e332      	b.n	801ab1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801a4b6:	4b12      	ldr	r3, [pc, #72]	@ (801a500 <HAL_RCC_OscConfig+0x288>)
 801a4b8:	681b      	ldr	r3, [r3, #0]
 801a4ba:	f003 0304 	and.w	r3, r3, #4
 801a4be:	2b00      	cmp	r3, #0
 801a4c0:	d0f0      	beq.n	801a4a4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801a4c2:	f7fc ffcf 	bl	8017464 <HAL_GetREVID>
 801a4c6:	4603      	mov	r3, r0
 801a4c8:	f241 0203 	movw	r2, #4099	@ 0x1003
 801a4cc:	4293      	cmp	r3, r2
 801a4ce:	d819      	bhi.n	801a504 <HAL_RCC_OscConfig+0x28c>
 801a4d0:	687b      	ldr	r3, [r7, #4]
 801a4d2:	691b      	ldr	r3, [r3, #16]
 801a4d4:	2b40      	cmp	r3, #64	@ 0x40
 801a4d6:	d108      	bne.n	801a4ea <HAL_RCC_OscConfig+0x272>
 801a4d8:	4b09      	ldr	r3, [pc, #36]	@ (801a500 <HAL_RCC_OscConfig+0x288>)
 801a4da:	685b      	ldr	r3, [r3, #4]
 801a4dc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801a4e0:	4a07      	ldr	r2, [pc, #28]	@ (801a500 <HAL_RCC_OscConfig+0x288>)
 801a4e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801a4e6:	6053      	str	r3, [r2, #4]
 801a4e8:	e030      	b.n	801a54c <HAL_RCC_OscConfig+0x2d4>
 801a4ea:	4b05      	ldr	r3, [pc, #20]	@ (801a500 <HAL_RCC_OscConfig+0x288>)
 801a4ec:	685b      	ldr	r3, [r3, #4]
 801a4ee:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801a4f2:	687b      	ldr	r3, [r7, #4]
 801a4f4:	691b      	ldr	r3, [r3, #16]
 801a4f6:	031b      	lsls	r3, r3, #12
 801a4f8:	4901      	ldr	r1, [pc, #4]	@ (801a500 <HAL_RCC_OscConfig+0x288>)
 801a4fa:	4313      	orrs	r3, r2
 801a4fc:	604b      	str	r3, [r1, #4]
 801a4fe:	e025      	b.n	801a54c <HAL_RCC_OscConfig+0x2d4>
 801a500:	58024400 	.word	0x58024400
 801a504:	4b9a      	ldr	r3, [pc, #616]	@ (801a770 <HAL_RCC_OscConfig+0x4f8>)
 801a506:	685b      	ldr	r3, [r3, #4]
 801a508:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801a50c:	687b      	ldr	r3, [r7, #4]
 801a50e:	691b      	ldr	r3, [r3, #16]
 801a510:	061b      	lsls	r3, r3, #24
 801a512:	4997      	ldr	r1, [pc, #604]	@ (801a770 <HAL_RCC_OscConfig+0x4f8>)
 801a514:	4313      	orrs	r3, r2
 801a516:	604b      	str	r3, [r1, #4]
 801a518:	e018      	b.n	801a54c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801a51a:	4b95      	ldr	r3, [pc, #596]	@ (801a770 <HAL_RCC_OscConfig+0x4f8>)
 801a51c:	681b      	ldr	r3, [r3, #0]
 801a51e:	4a94      	ldr	r2, [pc, #592]	@ (801a770 <HAL_RCC_OscConfig+0x4f8>)
 801a520:	f023 0301 	bic.w	r3, r3, #1
 801a524:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801a526:	f7fc ff6d 	bl	8017404 <HAL_GetTick>
 801a52a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801a52c:	e008      	b.n	801a540 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801a52e:	f7fc ff69 	bl	8017404 <HAL_GetTick>
 801a532:	4602      	mov	r2, r0
 801a534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a536:	1ad3      	subs	r3, r2, r3
 801a538:	2b02      	cmp	r3, #2
 801a53a:	d901      	bls.n	801a540 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 801a53c:	2303      	movs	r3, #3
 801a53e:	e2ed      	b.n	801ab1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801a540:	4b8b      	ldr	r3, [pc, #556]	@ (801a770 <HAL_RCC_OscConfig+0x4f8>)
 801a542:	681b      	ldr	r3, [r3, #0]
 801a544:	f003 0304 	and.w	r3, r3, #4
 801a548:	2b00      	cmp	r3, #0
 801a54a:	d1f0      	bne.n	801a52e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 801a54c:	687b      	ldr	r3, [r7, #4]
 801a54e:	681b      	ldr	r3, [r3, #0]
 801a550:	f003 0310 	and.w	r3, r3, #16
 801a554:	2b00      	cmp	r3, #0
 801a556:	f000 80a9 	beq.w	801a6ac <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801a55a:	4b85      	ldr	r3, [pc, #532]	@ (801a770 <HAL_RCC_OscConfig+0x4f8>)
 801a55c:	691b      	ldr	r3, [r3, #16]
 801a55e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801a562:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801a564:	4b82      	ldr	r3, [pc, #520]	@ (801a770 <HAL_RCC_OscConfig+0x4f8>)
 801a566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a568:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801a56a:	69bb      	ldr	r3, [r7, #24]
 801a56c:	2b08      	cmp	r3, #8
 801a56e:	d007      	beq.n	801a580 <HAL_RCC_OscConfig+0x308>
 801a570:	69bb      	ldr	r3, [r7, #24]
 801a572:	2b18      	cmp	r3, #24
 801a574:	d13a      	bne.n	801a5ec <HAL_RCC_OscConfig+0x374>
 801a576:	697b      	ldr	r3, [r7, #20]
 801a578:	f003 0303 	and.w	r3, r3, #3
 801a57c:	2b01      	cmp	r3, #1
 801a57e:	d135      	bne.n	801a5ec <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801a580:	4b7b      	ldr	r3, [pc, #492]	@ (801a770 <HAL_RCC_OscConfig+0x4f8>)
 801a582:	681b      	ldr	r3, [r3, #0]
 801a584:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a588:	2b00      	cmp	r3, #0
 801a58a:	d005      	beq.n	801a598 <HAL_RCC_OscConfig+0x320>
 801a58c:	687b      	ldr	r3, [r7, #4]
 801a58e:	69db      	ldr	r3, [r3, #28]
 801a590:	2b80      	cmp	r3, #128	@ 0x80
 801a592:	d001      	beq.n	801a598 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 801a594:	2301      	movs	r3, #1
 801a596:	e2c1      	b.n	801ab1c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801a598:	f7fc ff64 	bl	8017464 <HAL_GetREVID>
 801a59c:	4603      	mov	r3, r0
 801a59e:	f241 0203 	movw	r2, #4099	@ 0x1003
 801a5a2:	4293      	cmp	r3, r2
 801a5a4:	d817      	bhi.n	801a5d6 <HAL_RCC_OscConfig+0x35e>
 801a5a6:	687b      	ldr	r3, [r7, #4]
 801a5a8:	6a1b      	ldr	r3, [r3, #32]
 801a5aa:	2b20      	cmp	r3, #32
 801a5ac:	d108      	bne.n	801a5c0 <HAL_RCC_OscConfig+0x348>
 801a5ae:	4b70      	ldr	r3, [pc, #448]	@ (801a770 <HAL_RCC_OscConfig+0x4f8>)
 801a5b0:	685b      	ldr	r3, [r3, #4]
 801a5b2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801a5b6:	4a6e      	ldr	r2, [pc, #440]	@ (801a770 <HAL_RCC_OscConfig+0x4f8>)
 801a5b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801a5bc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801a5be:	e075      	b.n	801a6ac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801a5c0:	4b6b      	ldr	r3, [pc, #428]	@ (801a770 <HAL_RCC_OscConfig+0x4f8>)
 801a5c2:	685b      	ldr	r3, [r3, #4]
 801a5c4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 801a5c8:	687b      	ldr	r3, [r7, #4]
 801a5ca:	6a1b      	ldr	r3, [r3, #32]
 801a5cc:	069b      	lsls	r3, r3, #26
 801a5ce:	4968      	ldr	r1, [pc, #416]	@ (801a770 <HAL_RCC_OscConfig+0x4f8>)
 801a5d0:	4313      	orrs	r3, r2
 801a5d2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801a5d4:	e06a      	b.n	801a6ac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801a5d6:	4b66      	ldr	r3, [pc, #408]	@ (801a770 <HAL_RCC_OscConfig+0x4f8>)
 801a5d8:	68db      	ldr	r3, [r3, #12]
 801a5da:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801a5de:	687b      	ldr	r3, [r7, #4]
 801a5e0:	6a1b      	ldr	r3, [r3, #32]
 801a5e2:	061b      	lsls	r3, r3, #24
 801a5e4:	4962      	ldr	r1, [pc, #392]	@ (801a770 <HAL_RCC_OscConfig+0x4f8>)
 801a5e6:	4313      	orrs	r3, r2
 801a5e8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801a5ea:	e05f      	b.n	801a6ac <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 801a5ec:	687b      	ldr	r3, [r7, #4]
 801a5ee:	69db      	ldr	r3, [r3, #28]
 801a5f0:	2b00      	cmp	r3, #0
 801a5f2:	d042      	beq.n	801a67a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 801a5f4:	4b5e      	ldr	r3, [pc, #376]	@ (801a770 <HAL_RCC_OscConfig+0x4f8>)
 801a5f6:	681b      	ldr	r3, [r3, #0]
 801a5f8:	4a5d      	ldr	r2, [pc, #372]	@ (801a770 <HAL_RCC_OscConfig+0x4f8>)
 801a5fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a5fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801a600:	f7fc ff00 	bl	8017404 <HAL_GetTick>
 801a604:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801a606:	e008      	b.n	801a61a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801a608:	f7fc fefc 	bl	8017404 <HAL_GetTick>
 801a60c:	4602      	mov	r2, r0
 801a60e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a610:	1ad3      	subs	r3, r2, r3
 801a612:	2b02      	cmp	r3, #2
 801a614:	d901      	bls.n	801a61a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 801a616:	2303      	movs	r3, #3
 801a618:	e280      	b.n	801ab1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801a61a:	4b55      	ldr	r3, [pc, #340]	@ (801a770 <HAL_RCC_OscConfig+0x4f8>)
 801a61c:	681b      	ldr	r3, [r3, #0]
 801a61e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a622:	2b00      	cmp	r3, #0
 801a624:	d0f0      	beq.n	801a608 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801a626:	f7fc ff1d 	bl	8017464 <HAL_GetREVID>
 801a62a:	4603      	mov	r3, r0
 801a62c:	f241 0203 	movw	r2, #4099	@ 0x1003
 801a630:	4293      	cmp	r3, r2
 801a632:	d817      	bhi.n	801a664 <HAL_RCC_OscConfig+0x3ec>
 801a634:	687b      	ldr	r3, [r7, #4]
 801a636:	6a1b      	ldr	r3, [r3, #32]
 801a638:	2b20      	cmp	r3, #32
 801a63a:	d108      	bne.n	801a64e <HAL_RCC_OscConfig+0x3d6>
 801a63c:	4b4c      	ldr	r3, [pc, #304]	@ (801a770 <HAL_RCC_OscConfig+0x4f8>)
 801a63e:	685b      	ldr	r3, [r3, #4]
 801a640:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801a644:	4a4a      	ldr	r2, [pc, #296]	@ (801a770 <HAL_RCC_OscConfig+0x4f8>)
 801a646:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801a64a:	6053      	str	r3, [r2, #4]
 801a64c:	e02e      	b.n	801a6ac <HAL_RCC_OscConfig+0x434>
 801a64e:	4b48      	ldr	r3, [pc, #288]	@ (801a770 <HAL_RCC_OscConfig+0x4f8>)
 801a650:	685b      	ldr	r3, [r3, #4]
 801a652:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 801a656:	687b      	ldr	r3, [r7, #4]
 801a658:	6a1b      	ldr	r3, [r3, #32]
 801a65a:	069b      	lsls	r3, r3, #26
 801a65c:	4944      	ldr	r1, [pc, #272]	@ (801a770 <HAL_RCC_OscConfig+0x4f8>)
 801a65e:	4313      	orrs	r3, r2
 801a660:	604b      	str	r3, [r1, #4]
 801a662:	e023      	b.n	801a6ac <HAL_RCC_OscConfig+0x434>
 801a664:	4b42      	ldr	r3, [pc, #264]	@ (801a770 <HAL_RCC_OscConfig+0x4f8>)
 801a666:	68db      	ldr	r3, [r3, #12]
 801a668:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801a66c:	687b      	ldr	r3, [r7, #4]
 801a66e:	6a1b      	ldr	r3, [r3, #32]
 801a670:	061b      	lsls	r3, r3, #24
 801a672:	493f      	ldr	r1, [pc, #252]	@ (801a770 <HAL_RCC_OscConfig+0x4f8>)
 801a674:	4313      	orrs	r3, r2
 801a676:	60cb      	str	r3, [r1, #12]
 801a678:	e018      	b.n	801a6ac <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 801a67a:	4b3d      	ldr	r3, [pc, #244]	@ (801a770 <HAL_RCC_OscConfig+0x4f8>)
 801a67c:	681b      	ldr	r3, [r3, #0]
 801a67e:	4a3c      	ldr	r2, [pc, #240]	@ (801a770 <HAL_RCC_OscConfig+0x4f8>)
 801a680:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801a684:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801a686:	f7fc febd 	bl	8017404 <HAL_GetTick>
 801a68a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801a68c:	e008      	b.n	801a6a0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801a68e:	f7fc feb9 	bl	8017404 <HAL_GetTick>
 801a692:	4602      	mov	r2, r0
 801a694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a696:	1ad3      	subs	r3, r2, r3
 801a698:	2b02      	cmp	r3, #2
 801a69a:	d901      	bls.n	801a6a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 801a69c:	2303      	movs	r3, #3
 801a69e:	e23d      	b.n	801ab1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801a6a0:	4b33      	ldr	r3, [pc, #204]	@ (801a770 <HAL_RCC_OscConfig+0x4f8>)
 801a6a2:	681b      	ldr	r3, [r3, #0]
 801a6a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a6a8:	2b00      	cmp	r3, #0
 801a6aa:	d1f0      	bne.n	801a68e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801a6ac:	687b      	ldr	r3, [r7, #4]
 801a6ae:	681b      	ldr	r3, [r3, #0]
 801a6b0:	f003 0308 	and.w	r3, r3, #8
 801a6b4:	2b00      	cmp	r3, #0
 801a6b6:	d036      	beq.n	801a726 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801a6b8:	687b      	ldr	r3, [r7, #4]
 801a6ba:	695b      	ldr	r3, [r3, #20]
 801a6bc:	2b00      	cmp	r3, #0
 801a6be:	d019      	beq.n	801a6f4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801a6c0:	4b2b      	ldr	r3, [pc, #172]	@ (801a770 <HAL_RCC_OscConfig+0x4f8>)
 801a6c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a6c4:	4a2a      	ldr	r2, [pc, #168]	@ (801a770 <HAL_RCC_OscConfig+0x4f8>)
 801a6c6:	f043 0301 	orr.w	r3, r3, #1
 801a6ca:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801a6cc:	f7fc fe9a 	bl	8017404 <HAL_GetTick>
 801a6d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801a6d2:	e008      	b.n	801a6e6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801a6d4:	f7fc fe96 	bl	8017404 <HAL_GetTick>
 801a6d8:	4602      	mov	r2, r0
 801a6da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a6dc:	1ad3      	subs	r3, r2, r3
 801a6de:	2b02      	cmp	r3, #2
 801a6e0:	d901      	bls.n	801a6e6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 801a6e2:	2303      	movs	r3, #3
 801a6e4:	e21a      	b.n	801ab1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801a6e6:	4b22      	ldr	r3, [pc, #136]	@ (801a770 <HAL_RCC_OscConfig+0x4f8>)
 801a6e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a6ea:	f003 0302 	and.w	r3, r3, #2
 801a6ee:	2b00      	cmp	r3, #0
 801a6f0:	d0f0      	beq.n	801a6d4 <HAL_RCC_OscConfig+0x45c>
 801a6f2:	e018      	b.n	801a726 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801a6f4:	4b1e      	ldr	r3, [pc, #120]	@ (801a770 <HAL_RCC_OscConfig+0x4f8>)
 801a6f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a6f8:	4a1d      	ldr	r2, [pc, #116]	@ (801a770 <HAL_RCC_OscConfig+0x4f8>)
 801a6fa:	f023 0301 	bic.w	r3, r3, #1
 801a6fe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801a700:	f7fc fe80 	bl	8017404 <HAL_GetTick>
 801a704:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801a706:	e008      	b.n	801a71a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801a708:	f7fc fe7c 	bl	8017404 <HAL_GetTick>
 801a70c:	4602      	mov	r2, r0
 801a70e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a710:	1ad3      	subs	r3, r2, r3
 801a712:	2b02      	cmp	r3, #2
 801a714:	d901      	bls.n	801a71a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 801a716:	2303      	movs	r3, #3
 801a718:	e200      	b.n	801ab1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801a71a:	4b15      	ldr	r3, [pc, #84]	@ (801a770 <HAL_RCC_OscConfig+0x4f8>)
 801a71c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a71e:	f003 0302 	and.w	r3, r3, #2
 801a722:	2b00      	cmp	r3, #0
 801a724:	d1f0      	bne.n	801a708 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801a726:	687b      	ldr	r3, [r7, #4]
 801a728:	681b      	ldr	r3, [r3, #0]
 801a72a:	f003 0320 	and.w	r3, r3, #32
 801a72e:	2b00      	cmp	r3, #0
 801a730:	d039      	beq.n	801a7a6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 801a732:	687b      	ldr	r3, [r7, #4]
 801a734:	699b      	ldr	r3, [r3, #24]
 801a736:	2b00      	cmp	r3, #0
 801a738:	d01c      	beq.n	801a774 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801a73a:	4b0d      	ldr	r3, [pc, #52]	@ (801a770 <HAL_RCC_OscConfig+0x4f8>)
 801a73c:	681b      	ldr	r3, [r3, #0]
 801a73e:	4a0c      	ldr	r2, [pc, #48]	@ (801a770 <HAL_RCC_OscConfig+0x4f8>)
 801a740:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 801a744:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801a746:	f7fc fe5d 	bl	8017404 <HAL_GetTick>
 801a74a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801a74c:	e008      	b.n	801a760 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801a74e:	f7fc fe59 	bl	8017404 <HAL_GetTick>
 801a752:	4602      	mov	r2, r0
 801a754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a756:	1ad3      	subs	r3, r2, r3
 801a758:	2b02      	cmp	r3, #2
 801a75a:	d901      	bls.n	801a760 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 801a75c:	2303      	movs	r3, #3
 801a75e:	e1dd      	b.n	801ab1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801a760:	4b03      	ldr	r3, [pc, #12]	@ (801a770 <HAL_RCC_OscConfig+0x4f8>)
 801a762:	681b      	ldr	r3, [r3, #0]
 801a764:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801a768:	2b00      	cmp	r3, #0
 801a76a:	d0f0      	beq.n	801a74e <HAL_RCC_OscConfig+0x4d6>
 801a76c:	e01b      	b.n	801a7a6 <HAL_RCC_OscConfig+0x52e>
 801a76e:	bf00      	nop
 801a770:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801a774:	4b9b      	ldr	r3, [pc, #620]	@ (801a9e4 <HAL_RCC_OscConfig+0x76c>)
 801a776:	681b      	ldr	r3, [r3, #0]
 801a778:	4a9a      	ldr	r2, [pc, #616]	@ (801a9e4 <HAL_RCC_OscConfig+0x76c>)
 801a77a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801a77e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801a780:	f7fc fe40 	bl	8017404 <HAL_GetTick>
 801a784:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801a786:	e008      	b.n	801a79a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801a788:	f7fc fe3c 	bl	8017404 <HAL_GetTick>
 801a78c:	4602      	mov	r2, r0
 801a78e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a790:	1ad3      	subs	r3, r2, r3
 801a792:	2b02      	cmp	r3, #2
 801a794:	d901      	bls.n	801a79a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 801a796:	2303      	movs	r3, #3
 801a798:	e1c0      	b.n	801ab1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801a79a:	4b92      	ldr	r3, [pc, #584]	@ (801a9e4 <HAL_RCC_OscConfig+0x76c>)
 801a79c:	681b      	ldr	r3, [r3, #0]
 801a79e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801a7a2:	2b00      	cmp	r3, #0
 801a7a4:	d1f0      	bne.n	801a788 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801a7a6:	687b      	ldr	r3, [r7, #4]
 801a7a8:	681b      	ldr	r3, [r3, #0]
 801a7aa:	f003 0304 	and.w	r3, r3, #4
 801a7ae:	2b00      	cmp	r3, #0
 801a7b0:	f000 8081 	beq.w	801a8b6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 801a7b4:	4b8c      	ldr	r3, [pc, #560]	@ (801a9e8 <HAL_RCC_OscConfig+0x770>)
 801a7b6:	681b      	ldr	r3, [r3, #0]
 801a7b8:	4a8b      	ldr	r2, [pc, #556]	@ (801a9e8 <HAL_RCC_OscConfig+0x770>)
 801a7ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801a7be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801a7c0:	f7fc fe20 	bl	8017404 <HAL_GetTick>
 801a7c4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801a7c6:	e008      	b.n	801a7da <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801a7c8:	f7fc fe1c 	bl	8017404 <HAL_GetTick>
 801a7cc:	4602      	mov	r2, r0
 801a7ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a7d0:	1ad3      	subs	r3, r2, r3
 801a7d2:	2b64      	cmp	r3, #100	@ 0x64
 801a7d4:	d901      	bls.n	801a7da <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 801a7d6:	2303      	movs	r3, #3
 801a7d8:	e1a0      	b.n	801ab1c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801a7da:	4b83      	ldr	r3, [pc, #524]	@ (801a9e8 <HAL_RCC_OscConfig+0x770>)
 801a7dc:	681b      	ldr	r3, [r3, #0]
 801a7de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a7e2:	2b00      	cmp	r3, #0
 801a7e4:	d0f0      	beq.n	801a7c8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801a7e6:	687b      	ldr	r3, [r7, #4]
 801a7e8:	689b      	ldr	r3, [r3, #8]
 801a7ea:	2b01      	cmp	r3, #1
 801a7ec:	d106      	bne.n	801a7fc <HAL_RCC_OscConfig+0x584>
 801a7ee:	4b7d      	ldr	r3, [pc, #500]	@ (801a9e4 <HAL_RCC_OscConfig+0x76c>)
 801a7f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a7f2:	4a7c      	ldr	r2, [pc, #496]	@ (801a9e4 <HAL_RCC_OscConfig+0x76c>)
 801a7f4:	f043 0301 	orr.w	r3, r3, #1
 801a7f8:	6713      	str	r3, [r2, #112]	@ 0x70
 801a7fa:	e02d      	b.n	801a858 <HAL_RCC_OscConfig+0x5e0>
 801a7fc:	687b      	ldr	r3, [r7, #4]
 801a7fe:	689b      	ldr	r3, [r3, #8]
 801a800:	2b00      	cmp	r3, #0
 801a802:	d10c      	bne.n	801a81e <HAL_RCC_OscConfig+0x5a6>
 801a804:	4b77      	ldr	r3, [pc, #476]	@ (801a9e4 <HAL_RCC_OscConfig+0x76c>)
 801a806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a808:	4a76      	ldr	r2, [pc, #472]	@ (801a9e4 <HAL_RCC_OscConfig+0x76c>)
 801a80a:	f023 0301 	bic.w	r3, r3, #1
 801a80e:	6713      	str	r3, [r2, #112]	@ 0x70
 801a810:	4b74      	ldr	r3, [pc, #464]	@ (801a9e4 <HAL_RCC_OscConfig+0x76c>)
 801a812:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a814:	4a73      	ldr	r2, [pc, #460]	@ (801a9e4 <HAL_RCC_OscConfig+0x76c>)
 801a816:	f023 0304 	bic.w	r3, r3, #4
 801a81a:	6713      	str	r3, [r2, #112]	@ 0x70
 801a81c:	e01c      	b.n	801a858 <HAL_RCC_OscConfig+0x5e0>
 801a81e:	687b      	ldr	r3, [r7, #4]
 801a820:	689b      	ldr	r3, [r3, #8]
 801a822:	2b05      	cmp	r3, #5
 801a824:	d10c      	bne.n	801a840 <HAL_RCC_OscConfig+0x5c8>
 801a826:	4b6f      	ldr	r3, [pc, #444]	@ (801a9e4 <HAL_RCC_OscConfig+0x76c>)
 801a828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a82a:	4a6e      	ldr	r2, [pc, #440]	@ (801a9e4 <HAL_RCC_OscConfig+0x76c>)
 801a82c:	f043 0304 	orr.w	r3, r3, #4
 801a830:	6713      	str	r3, [r2, #112]	@ 0x70
 801a832:	4b6c      	ldr	r3, [pc, #432]	@ (801a9e4 <HAL_RCC_OscConfig+0x76c>)
 801a834:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a836:	4a6b      	ldr	r2, [pc, #428]	@ (801a9e4 <HAL_RCC_OscConfig+0x76c>)
 801a838:	f043 0301 	orr.w	r3, r3, #1
 801a83c:	6713      	str	r3, [r2, #112]	@ 0x70
 801a83e:	e00b      	b.n	801a858 <HAL_RCC_OscConfig+0x5e0>
 801a840:	4b68      	ldr	r3, [pc, #416]	@ (801a9e4 <HAL_RCC_OscConfig+0x76c>)
 801a842:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a844:	4a67      	ldr	r2, [pc, #412]	@ (801a9e4 <HAL_RCC_OscConfig+0x76c>)
 801a846:	f023 0301 	bic.w	r3, r3, #1
 801a84a:	6713      	str	r3, [r2, #112]	@ 0x70
 801a84c:	4b65      	ldr	r3, [pc, #404]	@ (801a9e4 <HAL_RCC_OscConfig+0x76c>)
 801a84e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a850:	4a64      	ldr	r2, [pc, #400]	@ (801a9e4 <HAL_RCC_OscConfig+0x76c>)
 801a852:	f023 0304 	bic.w	r3, r3, #4
 801a856:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801a858:	687b      	ldr	r3, [r7, #4]
 801a85a:	689b      	ldr	r3, [r3, #8]
 801a85c:	2b00      	cmp	r3, #0
 801a85e:	d015      	beq.n	801a88c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801a860:	f7fc fdd0 	bl	8017404 <HAL_GetTick>
 801a864:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801a866:	e00a      	b.n	801a87e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801a868:	f7fc fdcc 	bl	8017404 <HAL_GetTick>
 801a86c:	4602      	mov	r2, r0
 801a86e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a870:	1ad3      	subs	r3, r2, r3
 801a872:	f241 3288 	movw	r2, #5000	@ 0x1388
 801a876:	4293      	cmp	r3, r2
 801a878:	d901      	bls.n	801a87e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 801a87a:	2303      	movs	r3, #3
 801a87c:	e14e      	b.n	801ab1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801a87e:	4b59      	ldr	r3, [pc, #356]	@ (801a9e4 <HAL_RCC_OscConfig+0x76c>)
 801a880:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a882:	f003 0302 	and.w	r3, r3, #2
 801a886:	2b00      	cmp	r3, #0
 801a888:	d0ee      	beq.n	801a868 <HAL_RCC_OscConfig+0x5f0>
 801a88a:	e014      	b.n	801a8b6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801a88c:	f7fc fdba 	bl	8017404 <HAL_GetTick>
 801a890:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801a892:	e00a      	b.n	801a8aa <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801a894:	f7fc fdb6 	bl	8017404 <HAL_GetTick>
 801a898:	4602      	mov	r2, r0
 801a89a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a89c:	1ad3      	subs	r3, r2, r3
 801a89e:	f241 3288 	movw	r2, #5000	@ 0x1388
 801a8a2:	4293      	cmp	r3, r2
 801a8a4:	d901      	bls.n	801a8aa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 801a8a6:	2303      	movs	r3, #3
 801a8a8:	e138      	b.n	801ab1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801a8aa:	4b4e      	ldr	r3, [pc, #312]	@ (801a9e4 <HAL_RCC_OscConfig+0x76c>)
 801a8ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a8ae:	f003 0302 	and.w	r3, r3, #2
 801a8b2:	2b00      	cmp	r3, #0
 801a8b4:	d1ee      	bne.n	801a894 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801a8b6:	687b      	ldr	r3, [r7, #4]
 801a8b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a8ba:	2b00      	cmp	r3, #0
 801a8bc:	f000 812d 	beq.w	801ab1a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 801a8c0:	4b48      	ldr	r3, [pc, #288]	@ (801a9e4 <HAL_RCC_OscConfig+0x76c>)
 801a8c2:	691b      	ldr	r3, [r3, #16]
 801a8c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801a8c8:	2b18      	cmp	r3, #24
 801a8ca:	f000 80bd 	beq.w	801aa48 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801a8ce:	687b      	ldr	r3, [r7, #4]
 801a8d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a8d2:	2b02      	cmp	r3, #2
 801a8d4:	f040 809e 	bne.w	801aa14 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801a8d8:	4b42      	ldr	r3, [pc, #264]	@ (801a9e4 <HAL_RCC_OscConfig+0x76c>)
 801a8da:	681b      	ldr	r3, [r3, #0]
 801a8dc:	4a41      	ldr	r2, [pc, #260]	@ (801a9e4 <HAL_RCC_OscConfig+0x76c>)
 801a8de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801a8e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801a8e4:	f7fc fd8e 	bl	8017404 <HAL_GetTick>
 801a8e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801a8ea:	e008      	b.n	801a8fe <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801a8ec:	f7fc fd8a 	bl	8017404 <HAL_GetTick>
 801a8f0:	4602      	mov	r2, r0
 801a8f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a8f4:	1ad3      	subs	r3, r2, r3
 801a8f6:	2b02      	cmp	r3, #2
 801a8f8:	d901      	bls.n	801a8fe <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 801a8fa:	2303      	movs	r3, #3
 801a8fc:	e10e      	b.n	801ab1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801a8fe:	4b39      	ldr	r3, [pc, #228]	@ (801a9e4 <HAL_RCC_OscConfig+0x76c>)
 801a900:	681b      	ldr	r3, [r3, #0]
 801a902:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801a906:	2b00      	cmp	r3, #0
 801a908:	d1f0      	bne.n	801a8ec <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801a90a:	4b36      	ldr	r3, [pc, #216]	@ (801a9e4 <HAL_RCC_OscConfig+0x76c>)
 801a90c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801a90e:	4b37      	ldr	r3, [pc, #220]	@ (801a9ec <HAL_RCC_OscConfig+0x774>)
 801a910:	4013      	ands	r3, r2
 801a912:	687a      	ldr	r2, [r7, #4]
 801a914:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 801a916:	687a      	ldr	r2, [r7, #4]
 801a918:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801a91a:	0112      	lsls	r2, r2, #4
 801a91c:	430a      	orrs	r2, r1
 801a91e:	4931      	ldr	r1, [pc, #196]	@ (801a9e4 <HAL_RCC_OscConfig+0x76c>)
 801a920:	4313      	orrs	r3, r2
 801a922:	628b      	str	r3, [r1, #40]	@ 0x28
 801a924:	687b      	ldr	r3, [r7, #4]
 801a926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a928:	3b01      	subs	r3, #1
 801a92a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801a92e:	687b      	ldr	r3, [r7, #4]
 801a930:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a932:	3b01      	subs	r3, #1
 801a934:	025b      	lsls	r3, r3, #9
 801a936:	b29b      	uxth	r3, r3
 801a938:	431a      	orrs	r2, r3
 801a93a:	687b      	ldr	r3, [r7, #4]
 801a93c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a93e:	3b01      	subs	r3, #1
 801a940:	041b      	lsls	r3, r3, #16
 801a942:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801a946:	431a      	orrs	r2, r3
 801a948:	687b      	ldr	r3, [r7, #4]
 801a94a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a94c:	3b01      	subs	r3, #1
 801a94e:	061b      	lsls	r3, r3, #24
 801a950:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801a954:	4923      	ldr	r1, [pc, #140]	@ (801a9e4 <HAL_RCC_OscConfig+0x76c>)
 801a956:	4313      	orrs	r3, r2
 801a958:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 801a95a:	4b22      	ldr	r3, [pc, #136]	@ (801a9e4 <HAL_RCC_OscConfig+0x76c>)
 801a95c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a95e:	4a21      	ldr	r2, [pc, #132]	@ (801a9e4 <HAL_RCC_OscConfig+0x76c>)
 801a960:	f023 0301 	bic.w	r3, r3, #1
 801a964:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801a966:	4b1f      	ldr	r3, [pc, #124]	@ (801a9e4 <HAL_RCC_OscConfig+0x76c>)
 801a968:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801a96a:	4b21      	ldr	r3, [pc, #132]	@ (801a9f0 <HAL_RCC_OscConfig+0x778>)
 801a96c:	4013      	ands	r3, r2
 801a96e:	687a      	ldr	r2, [r7, #4]
 801a970:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801a972:	00d2      	lsls	r2, r2, #3
 801a974:	491b      	ldr	r1, [pc, #108]	@ (801a9e4 <HAL_RCC_OscConfig+0x76c>)
 801a976:	4313      	orrs	r3, r2
 801a978:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 801a97a:	4b1a      	ldr	r3, [pc, #104]	@ (801a9e4 <HAL_RCC_OscConfig+0x76c>)
 801a97c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a97e:	f023 020c 	bic.w	r2, r3, #12
 801a982:	687b      	ldr	r3, [r7, #4]
 801a984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a986:	4917      	ldr	r1, [pc, #92]	@ (801a9e4 <HAL_RCC_OscConfig+0x76c>)
 801a988:	4313      	orrs	r3, r2
 801a98a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 801a98c:	4b15      	ldr	r3, [pc, #84]	@ (801a9e4 <HAL_RCC_OscConfig+0x76c>)
 801a98e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a990:	f023 0202 	bic.w	r2, r3, #2
 801a994:	687b      	ldr	r3, [r7, #4]
 801a996:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a998:	4912      	ldr	r1, [pc, #72]	@ (801a9e4 <HAL_RCC_OscConfig+0x76c>)
 801a99a:	4313      	orrs	r3, r2
 801a99c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801a99e:	4b11      	ldr	r3, [pc, #68]	@ (801a9e4 <HAL_RCC_OscConfig+0x76c>)
 801a9a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a9a2:	4a10      	ldr	r2, [pc, #64]	@ (801a9e4 <HAL_RCC_OscConfig+0x76c>)
 801a9a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801a9a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801a9aa:	4b0e      	ldr	r3, [pc, #56]	@ (801a9e4 <HAL_RCC_OscConfig+0x76c>)
 801a9ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a9ae:	4a0d      	ldr	r2, [pc, #52]	@ (801a9e4 <HAL_RCC_OscConfig+0x76c>)
 801a9b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801a9b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 801a9b6:	4b0b      	ldr	r3, [pc, #44]	@ (801a9e4 <HAL_RCC_OscConfig+0x76c>)
 801a9b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a9ba:	4a0a      	ldr	r2, [pc, #40]	@ (801a9e4 <HAL_RCC_OscConfig+0x76c>)
 801a9bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801a9c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 801a9c2:	4b08      	ldr	r3, [pc, #32]	@ (801a9e4 <HAL_RCC_OscConfig+0x76c>)
 801a9c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a9c6:	4a07      	ldr	r2, [pc, #28]	@ (801a9e4 <HAL_RCC_OscConfig+0x76c>)
 801a9c8:	f043 0301 	orr.w	r3, r3, #1
 801a9cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801a9ce:	4b05      	ldr	r3, [pc, #20]	@ (801a9e4 <HAL_RCC_OscConfig+0x76c>)
 801a9d0:	681b      	ldr	r3, [r3, #0]
 801a9d2:	4a04      	ldr	r2, [pc, #16]	@ (801a9e4 <HAL_RCC_OscConfig+0x76c>)
 801a9d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801a9d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801a9da:	f7fc fd13 	bl	8017404 <HAL_GetTick>
 801a9de:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801a9e0:	e011      	b.n	801aa06 <HAL_RCC_OscConfig+0x78e>
 801a9e2:	bf00      	nop
 801a9e4:	58024400 	.word	0x58024400
 801a9e8:	58024800 	.word	0x58024800
 801a9ec:	fffffc0c 	.word	0xfffffc0c
 801a9f0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801a9f4:	f7fc fd06 	bl	8017404 <HAL_GetTick>
 801a9f8:	4602      	mov	r2, r0
 801a9fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a9fc:	1ad3      	subs	r3, r2, r3
 801a9fe:	2b02      	cmp	r3, #2
 801aa00:	d901      	bls.n	801aa06 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 801aa02:	2303      	movs	r3, #3
 801aa04:	e08a      	b.n	801ab1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801aa06:	4b47      	ldr	r3, [pc, #284]	@ (801ab24 <HAL_RCC_OscConfig+0x8ac>)
 801aa08:	681b      	ldr	r3, [r3, #0]
 801aa0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801aa0e:	2b00      	cmp	r3, #0
 801aa10:	d0f0      	beq.n	801a9f4 <HAL_RCC_OscConfig+0x77c>
 801aa12:	e082      	b.n	801ab1a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801aa14:	4b43      	ldr	r3, [pc, #268]	@ (801ab24 <HAL_RCC_OscConfig+0x8ac>)
 801aa16:	681b      	ldr	r3, [r3, #0]
 801aa18:	4a42      	ldr	r2, [pc, #264]	@ (801ab24 <HAL_RCC_OscConfig+0x8ac>)
 801aa1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801aa1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801aa20:	f7fc fcf0 	bl	8017404 <HAL_GetTick>
 801aa24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801aa26:	e008      	b.n	801aa3a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801aa28:	f7fc fcec 	bl	8017404 <HAL_GetTick>
 801aa2c:	4602      	mov	r2, r0
 801aa2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa30:	1ad3      	subs	r3, r2, r3
 801aa32:	2b02      	cmp	r3, #2
 801aa34:	d901      	bls.n	801aa3a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 801aa36:	2303      	movs	r3, #3
 801aa38:	e070      	b.n	801ab1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801aa3a:	4b3a      	ldr	r3, [pc, #232]	@ (801ab24 <HAL_RCC_OscConfig+0x8ac>)
 801aa3c:	681b      	ldr	r3, [r3, #0]
 801aa3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801aa42:	2b00      	cmp	r3, #0
 801aa44:	d1f0      	bne.n	801aa28 <HAL_RCC_OscConfig+0x7b0>
 801aa46:	e068      	b.n	801ab1a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 801aa48:	4b36      	ldr	r3, [pc, #216]	@ (801ab24 <HAL_RCC_OscConfig+0x8ac>)
 801aa4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801aa4c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801aa4e:	4b35      	ldr	r3, [pc, #212]	@ (801ab24 <HAL_RCC_OscConfig+0x8ac>)
 801aa50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801aa52:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801aa54:	687b      	ldr	r3, [r7, #4]
 801aa56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801aa58:	2b01      	cmp	r3, #1
 801aa5a:	d031      	beq.n	801aac0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801aa5c:	693b      	ldr	r3, [r7, #16]
 801aa5e:	f003 0203 	and.w	r2, r3, #3
 801aa62:	687b      	ldr	r3, [r7, #4]
 801aa64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801aa66:	429a      	cmp	r2, r3
 801aa68:	d12a      	bne.n	801aac0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801aa6a:	693b      	ldr	r3, [r7, #16]
 801aa6c:	091b      	lsrs	r3, r3, #4
 801aa6e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 801aa72:	687b      	ldr	r3, [r7, #4]
 801aa74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801aa76:	429a      	cmp	r2, r3
 801aa78:	d122      	bne.n	801aac0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801aa7a:	68fb      	ldr	r3, [r7, #12]
 801aa7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801aa80:	687b      	ldr	r3, [r7, #4]
 801aa82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801aa84:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801aa86:	429a      	cmp	r2, r3
 801aa88:	d11a      	bne.n	801aac0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801aa8a:	68fb      	ldr	r3, [r7, #12]
 801aa8c:	0a5b      	lsrs	r3, r3, #9
 801aa8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801aa92:	687b      	ldr	r3, [r7, #4]
 801aa94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801aa96:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801aa98:	429a      	cmp	r2, r3
 801aa9a:	d111      	bne.n	801aac0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801aa9c:	68fb      	ldr	r3, [r7, #12]
 801aa9e:	0c1b      	lsrs	r3, r3, #16
 801aaa0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801aaa4:	687b      	ldr	r3, [r7, #4]
 801aaa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801aaa8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801aaaa:	429a      	cmp	r2, r3
 801aaac:	d108      	bne.n	801aac0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 801aaae:	68fb      	ldr	r3, [r7, #12]
 801aab0:	0e1b      	lsrs	r3, r3, #24
 801aab2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801aab6:	687b      	ldr	r3, [r7, #4]
 801aab8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801aaba:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801aabc:	429a      	cmp	r2, r3
 801aabe:	d001      	beq.n	801aac4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 801aac0:	2301      	movs	r3, #1
 801aac2:	e02b      	b.n	801ab1c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 801aac4:	4b17      	ldr	r3, [pc, #92]	@ (801ab24 <HAL_RCC_OscConfig+0x8ac>)
 801aac6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801aac8:	08db      	lsrs	r3, r3, #3
 801aaca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801aace:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 801aad0:	687b      	ldr	r3, [r7, #4]
 801aad2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801aad4:	693a      	ldr	r2, [r7, #16]
 801aad6:	429a      	cmp	r2, r3
 801aad8:	d01f      	beq.n	801ab1a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 801aada:	4b12      	ldr	r3, [pc, #72]	@ (801ab24 <HAL_RCC_OscConfig+0x8ac>)
 801aadc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801aade:	4a11      	ldr	r2, [pc, #68]	@ (801ab24 <HAL_RCC_OscConfig+0x8ac>)
 801aae0:	f023 0301 	bic.w	r3, r3, #1
 801aae4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801aae6:	f7fc fc8d 	bl	8017404 <HAL_GetTick>
 801aaea:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 801aaec:	bf00      	nop
 801aaee:	f7fc fc89 	bl	8017404 <HAL_GetTick>
 801aaf2:	4602      	mov	r2, r0
 801aaf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aaf6:	4293      	cmp	r3, r2
 801aaf8:	d0f9      	beq.n	801aaee <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801aafa:	4b0a      	ldr	r3, [pc, #40]	@ (801ab24 <HAL_RCC_OscConfig+0x8ac>)
 801aafc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801aafe:	4b0a      	ldr	r3, [pc, #40]	@ (801ab28 <HAL_RCC_OscConfig+0x8b0>)
 801ab00:	4013      	ands	r3, r2
 801ab02:	687a      	ldr	r2, [r7, #4]
 801ab04:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801ab06:	00d2      	lsls	r2, r2, #3
 801ab08:	4906      	ldr	r1, [pc, #24]	@ (801ab24 <HAL_RCC_OscConfig+0x8ac>)
 801ab0a:	4313      	orrs	r3, r2
 801ab0c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 801ab0e:	4b05      	ldr	r3, [pc, #20]	@ (801ab24 <HAL_RCC_OscConfig+0x8ac>)
 801ab10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ab12:	4a04      	ldr	r2, [pc, #16]	@ (801ab24 <HAL_RCC_OscConfig+0x8ac>)
 801ab14:	f043 0301 	orr.w	r3, r3, #1
 801ab18:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 801ab1a:	2300      	movs	r3, #0
}
 801ab1c:	4618      	mov	r0, r3
 801ab1e:	3730      	adds	r7, #48	@ 0x30
 801ab20:	46bd      	mov	sp, r7
 801ab22:	bd80      	pop	{r7, pc}
 801ab24:	58024400 	.word	0x58024400
 801ab28:	ffff0007 	.word	0xffff0007

0801ab2c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801ab2c:	b580      	push	{r7, lr}
 801ab2e:	b086      	sub	sp, #24
 801ab30:	af00      	add	r7, sp, #0
 801ab32:	6078      	str	r0, [r7, #4]
 801ab34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801ab36:	687b      	ldr	r3, [r7, #4]
 801ab38:	2b00      	cmp	r3, #0
 801ab3a:	d101      	bne.n	801ab40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801ab3c:	2301      	movs	r3, #1
 801ab3e:	e19c      	b.n	801ae7a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801ab40:	4b8a      	ldr	r3, [pc, #552]	@ (801ad6c <HAL_RCC_ClockConfig+0x240>)
 801ab42:	681b      	ldr	r3, [r3, #0]
 801ab44:	f003 030f 	and.w	r3, r3, #15
 801ab48:	683a      	ldr	r2, [r7, #0]
 801ab4a:	429a      	cmp	r2, r3
 801ab4c:	d910      	bls.n	801ab70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801ab4e:	4b87      	ldr	r3, [pc, #540]	@ (801ad6c <HAL_RCC_ClockConfig+0x240>)
 801ab50:	681b      	ldr	r3, [r3, #0]
 801ab52:	f023 020f 	bic.w	r2, r3, #15
 801ab56:	4985      	ldr	r1, [pc, #532]	@ (801ad6c <HAL_RCC_ClockConfig+0x240>)
 801ab58:	683b      	ldr	r3, [r7, #0]
 801ab5a:	4313      	orrs	r3, r2
 801ab5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801ab5e:	4b83      	ldr	r3, [pc, #524]	@ (801ad6c <HAL_RCC_ClockConfig+0x240>)
 801ab60:	681b      	ldr	r3, [r3, #0]
 801ab62:	f003 030f 	and.w	r3, r3, #15
 801ab66:	683a      	ldr	r2, [r7, #0]
 801ab68:	429a      	cmp	r2, r3
 801ab6a:	d001      	beq.n	801ab70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 801ab6c:	2301      	movs	r3, #1
 801ab6e:	e184      	b.n	801ae7a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801ab70:	687b      	ldr	r3, [r7, #4]
 801ab72:	681b      	ldr	r3, [r3, #0]
 801ab74:	f003 0304 	and.w	r3, r3, #4
 801ab78:	2b00      	cmp	r3, #0
 801ab7a:	d010      	beq.n	801ab9e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801ab7c:	687b      	ldr	r3, [r7, #4]
 801ab7e:	691a      	ldr	r2, [r3, #16]
 801ab80:	4b7b      	ldr	r3, [pc, #492]	@ (801ad70 <HAL_RCC_ClockConfig+0x244>)
 801ab82:	699b      	ldr	r3, [r3, #24]
 801ab84:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801ab88:	429a      	cmp	r2, r3
 801ab8a:	d908      	bls.n	801ab9e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801ab8c:	4b78      	ldr	r3, [pc, #480]	@ (801ad70 <HAL_RCC_ClockConfig+0x244>)
 801ab8e:	699b      	ldr	r3, [r3, #24]
 801ab90:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801ab94:	687b      	ldr	r3, [r7, #4]
 801ab96:	691b      	ldr	r3, [r3, #16]
 801ab98:	4975      	ldr	r1, [pc, #468]	@ (801ad70 <HAL_RCC_ClockConfig+0x244>)
 801ab9a:	4313      	orrs	r3, r2
 801ab9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801ab9e:	687b      	ldr	r3, [r7, #4]
 801aba0:	681b      	ldr	r3, [r3, #0]
 801aba2:	f003 0308 	and.w	r3, r3, #8
 801aba6:	2b00      	cmp	r3, #0
 801aba8:	d010      	beq.n	801abcc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801abaa:	687b      	ldr	r3, [r7, #4]
 801abac:	695a      	ldr	r2, [r3, #20]
 801abae:	4b70      	ldr	r3, [pc, #448]	@ (801ad70 <HAL_RCC_ClockConfig+0x244>)
 801abb0:	69db      	ldr	r3, [r3, #28]
 801abb2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801abb6:	429a      	cmp	r2, r3
 801abb8:	d908      	bls.n	801abcc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801abba:	4b6d      	ldr	r3, [pc, #436]	@ (801ad70 <HAL_RCC_ClockConfig+0x244>)
 801abbc:	69db      	ldr	r3, [r3, #28]
 801abbe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801abc2:	687b      	ldr	r3, [r7, #4]
 801abc4:	695b      	ldr	r3, [r3, #20]
 801abc6:	496a      	ldr	r1, [pc, #424]	@ (801ad70 <HAL_RCC_ClockConfig+0x244>)
 801abc8:	4313      	orrs	r3, r2
 801abca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801abcc:	687b      	ldr	r3, [r7, #4]
 801abce:	681b      	ldr	r3, [r3, #0]
 801abd0:	f003 0310 	and.w	r3, r3, #16
 801abd4:	2b00      	cmp	r3, #0
 801abd6:	d010      	beq.n	801abfa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801abd8:	687b      	ldr	r3, [r7, #4]
 801abda:	699a      	ldr	r2, [r3, #24]
 801abdc:	4b64      	ldr	r3, [pc, #400]	@ (801ad70 <HAL_RCC_ClockConfig+0x244>)
 801abde:	69db      	ldr	r3, [r3, #28]
 801abe0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801abe4:	429a      	cmp	r2, r3
 801abe6:	d908      	bls.n	801abfa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801abe8:	4b61      	ldr	r3, [pc, #388]	@ (801ad70 <HAL_RCC_ClockConfig+0x244>)
 801abea:	69db      	ldr	r3, [r3, #28]
 801abec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801abf0:	687b      	ldr	r3, [r7, #4]
 801abf2:	699b      	ldr	r3, [r3, #24]
 801abf4:	495e      	ldr	r1, [pc, #376]	@ (801ad70 <HAL_RCC_ClockConfig+0x244>)
 801abf6:	4313      	orrs	r3, r2
 801abf8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801abfa:	687b      	ldr	r3, [r7, #4]
 801abfc:	681b      	ldr	r3, [r3, #0]
 801abfe:	f003 0320 	and.w	r3, r3, #32
 801ac02:	2b00      	cmp	r3, #0
 801ac04:	d010      	beq.n	801ac28 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801ac06:	687b      	ldr	r3, [r7, #4]
 801ac08:	69da      	ldr	r2, [r3, #28]
 801ac0a:	4b59      	ldr	r3, [pc, #356]	@ (801ad70 <HAL_RCC_ClockConfig+0x244>)
 801ac0c:	6a1b      	ldr	r3, [r3, #32]
 801ac0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801ac12:	429a      	cmp	r2, r3
 801ac14:	d908      	bls.n	801ac28 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801ac16:	4b56      	ldr	r3, [pc, #344]	@ (801ad70 <HAL_RCC_ClockConfig+0x244>)
 801ac18:	6a1b      	ldr	r3, [r3, #32]
 801ac1a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801ac1e:	687b      	ldr	r3, [r7, #4]
 801ac20:	69db      	ldr	r3, [r3, #28]
 801ac22:	4953      	ldr	r1, [pc, #332]	@ (801ad70 <HAL_RCC_ClockConfig+0x244>)
 801ac24:	4313      	orrs	r3, r2
 801ac26:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801ac28:	687b      	ldr	r3, [r7, #4]
 801ac2a:	681b      	ldr	r3, [r3, #0]
 801ac2c:	f003 0302 	and.w	r3, r3, #2
 801ac30:	2b00      	cmp	r3, #0
 801ac32:	d010      	beq.n	801ac56 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801ac34:	687b      	ldr	r3, [r7, #4]
 801ac36:	68da      	ldr	r2, [r3, #12]
 801ac38:	4b4d      	ldr	r3, [pc, #308]	@ (801ad70 <HAL_RCC_ClockConfig+0x244>)
 801ac3a:	699b      	ldr	r3, [r3, #24]
 801ac3c:	f003 030f 	and.w	r3, r3, #15
 801ac40:	429a      	cmp	r2, r3
 801ac42:	d908      	bls.n	801ac56 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801ac44:	4b4a      	ldr	r3, [pc, #296]	@ (801ad70 <HAL_RCC_ClockConfig+0x244>)
 801ac46:	699b      	ldr	r3, [r3, #24]
 801ac48:	f023 020f 	bic.w	r2, r3, #15
 801ac4c:	687b      	ldr	r3, [r7, #4]
 801ac4e:	68db      	ldr	r3, [r3, #12]
 801ac50:	4947      	ldr	r1, [pc, #284]	@ (801ad70 <HAL_RCC_ClockConfig+0x244>)
 801ac52:	4313      	orrs	r3, r2
 801ac54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801ac56:	687b      	ldr	r3, [r7, #4]
 801ac58:	681b      	ldr	r3, [r3, #0]
 801ac5a:	f003 0301 	and.w	r3, r3, #1
 801ac5e:	2b00      	cmp	r3, #0
 801ac60:	d055      	beq.n	801ad0e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 801ac62:	4b43      	ldr	r3, [pc, #268]	@ (801ad70 <HAL_RCC_ClockConfig+0x244>)
 801ac64:	699b      	ldr	r3, [r3, #24]
 801ac66:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 801ac6a:	687b      	ldr	r3, [r7, #4]
 801ac6c:	689b      	ldr	r3, [r3, #8]
 801ac6e:	4940      	ldr	r1, [pc, #256]	@ (801ad70 <HAL_RCC_ClockConfig+0x244>)
 801ac70:	4313      	orrs	r3, r2
 801ac72:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801ac74:	687b      	ldr	r3, [r7, #4]
 801ac76:	685b      	ldr	r3, [r3, #4]
 801ac78:	2b02      	cmp	r3, #2
 801ac7a:	d107      	bne.n	801ac8c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801ac7c:	4b3c      	ldr	r3, [pc, #240]	@ (801ad70 <HAL_RCC_ClockConfig+0x244>)
 801ac7e:	681b      	ldr	r3, [r3, #0]
 801ac80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801ac84:	2b00      	cmp	r3, #0
 801ac86:	d121      	bne.n	801accc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801ac88:	2301      	movs	r3, #1
 801ac8a:	e0f6      	b.n	801ae7a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801ac8c:	687b      	ldr	r3, [r7, #4]
 801ac8e:	685b      	ldr	r3, [r3, #4]
 801ac90:	2b03      	cmp	r3, #3
 801ac92:	d107      	bne.n	801aca4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801ac94:	4b36      	ldr	r3, [pc, #216]	@ (801ad70 <HAL_RCC_ClockConfig+0x244>)
 801ac96:	681b      	ldr	r3, [r3, #0]
 801ac98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801ac9c:	2b00      	cmp	r3, #0
 801ac9e:	d115      	bne.n	801accc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801aca0:	2301      	movs	r3, #1
 801aca2:	e0ea      	b.n	801ae7a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 801aca4:	687b      	ldr	r3, [r7, #4]
 801aca6:	685b      	ldr	r3, [r3, #4]
 801aca8:	2b01      	cmp	r3, #1
 801acaa:	d107      	bne.n	801acbc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801acac:	4b30      	ldr	r3, [pc, #192]	@ (801ad70 <HAL_RCC_ClockConfig+0x244>)
 801acae:	681b      	ldr	r3, [r3, #0]
 801acb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801acb4:	2b00      	cmp	r3, #0
 801acb6:	d109      	bne.n	801accc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801acb8:	2301      	movs	r3, #1
 801acba:	e0de      	b.n	801ae7a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801acbc:	4b2c      	ldr	r3, [pc, #176]	@ (801ad70 <HAL_RCC_ClockConfig+0x244>)
 801acbe:	681b      	ldr	r3, [r3, #0]
 801acc0:	f003 0304 	and.w	r3, r3, #4
 801acc4:	2b00      	cmp	r3, #0
 801acc6:	d101      	bne.n	801accc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801acc8:	2301      	movs	r3, #1
 801acca:	e0d6      	b.n	801ae7a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801accc:	4b28      	ldr	r3, [pc, #160]	@ (801ad70 <HAL_RCC_ClockConfig+0x244>)
 801acce:	691b      	ldr	r3, [r3, #16]
 801acd0:	f023 0207 	bic.w	r2, r3, #7
 801acd4:	687b      	ldr	r3, [r7, #4]
 801acd6:	685b      	ldr	r3, [r3, #4]
 801acd8:	4925      	ldr	r1, [pc, #148]	@ (801ad70 <HAL_RCC_ClockConfig+0x244>)
 801acda:	4313      	orrs	r3, r2
 801acdc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801acde:	f7fc fb91 	bl	8017404 <HAL_GetTick>
 801ace2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801ace4:	e00a      	b.n	801acfc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801ace6:	f7fc fb8d 	bl	8017404 <HAL_GetTick>
 801acea:	4602      	mov	r2, r0
 801acec:	697b      	ldr	r3, [r7, #20]
 801acee:	1ad3      	subs	r3, r2, r3
 801acf0:	f241 3288 	movw	r2, #5000	@ 0x1388
 801acf4:	4293      	cmp	r3, r2
 801acf6:	d901      	bls.n	801acfc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 801acf8:	2303      	movs	r3, #3
 801acfa:	e0be      	b.n	801ae7a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801acfc:	4b1c      	ldr	r3, [pc, #112]	@ (801ad70 <HAL_RCC_ClockConfig+0x244>)
 801acfe:	691b      	ldr	r3, [r3, #16]
 801ad00:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 801ad04:	687b      	ldr	r3, [r7, #4]
 801ad06:	685b      	ldr	r3, [r3, #4]
 801ad08:	00db      	lsls	r3, r3, #3
 801ad0a:	429a      	cmp	r2, r3
 801ad0c:	d1eb      	bne.n	801ace6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801ad0e:	687b      	ldr	r3, [r7, #4]
 801ad10:	681b      	ldr	r3, [r3, #0]
 801ad12:	f003 0302 	and.w	r3, r3, #2
 801ad16:	2b00      	cmp	r3, #0
 801ad18:	d010      	beq.n	801ad3c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801ad1a:	687b      	ldr	r3, [r7, #4]
 801ad1c:	68da      	ldr	r2, [r3, #12]
 801ad1e:	4b14      	ldr	r3, [pc, #80]	@ (801ad70 <HAL_RCC_ClockConfig+0x244>)
 801ad20:	699b      	ldr	r3, [r3, #24]
 801ad22:	f003 030f 	and.w	r3, r3, #15
 801ad26:	429a      	cmp	r2, r3
 801ad28:	d208      	bcs.n	801ad3c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801ad2a:	4b11      	ldr	r3, [pc, #68]	@ (801ad70 <HAL_RCC_ClockConfig+0x244>)
 801ad2c:	699b      	ldr	r3, [r3, #24]
 801ad2e:	f023 020f 	bic.w	r2, r3, #15
 801ad32:	687b      	ldr	r3, [r7, #4]
 801ad34:	68db      	ldr	r3, [r3, #12]
 801ad36:	490e      	ldr	r1, [pc, #56]	@ (801ad70 <HAL_RCC_ClockConfig+0x244>)
 801ad38:	4313      	orrs	r3, r2
 801ad3a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801ad3c:	4b0b      	ldr	r3, [pc, #44]	@ (801ad6c <HAL_RCC_ClockConfig+0x240>)
 801ad3e:	681b      	ldr	r3, [r3, #0]
 801ad40:	f003 030f 	and.w	r3, r3, #15
 801ad44:	683a      	ldr	r2, [r7, #0]
 801ad46:	429a      	cmp	r2, r3
 801ad48:	d214      	bcs.n	801ad74 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801ad4a:	4b08      	ldr	r3, [pc, #32]	@ (801ad6c <HAL_RCC_ClockConfig+0x240>)
 801ad4c:	681b      	ldr	r3, [r3, #0]
 801ad4e:	f023 020f 	bic.w	r2, r3, #15
 801ad52:	4906      	ldr	r1, [pc, #24]	@ (801ad6c <HAL_RCC_ClockConfig+0x240>)
 801ad54:	683b      	ldr	r3, [r7, #0]
 801ad56:	4313      	orrs	r3, r2
 801ad58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801ad5a:	4b04      	ldr	r3, [pc, #16]	@ (801ad6c <HAL_RCC_ClockConfig+0x240>)
 801ad5c:	681b      	ldr	r3, [r3, #0]
 801ad5e:	f003 030f 	and.w	r3, r3, #15
 801ad62:	683a      	ldr	r2, [r7, #0]
 801ad64:	429a      	cmp	r2, r3
 801ad66:	d005      	beq.n	801ad74 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 801ad68:	2301      	movs	r3, #1
 801ad6a:	e086      	b.n	801ae7a <HAL_RCC_ClockConfig+0x34e>
 801ad6c:	52002000 	.word	0x52002000
 801ad70:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801ad74:	687b      	ldr	r3, [r7, #4]
 801ad76:	681b      	ldr	r3, [r3, #0]
 801ad78:	f003 0304 	and.w	r3, r3, #4
 801ad7c:	2b00      	cmp	r3, #0
 801ad7e:	d010      	beq.n	801ada2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801ad80:	687b      	ldr	r3, [r7, #4]
 801ad82:	691a      	ldr	r2, [r3, #16]
 801ad84:	4b3f      	ldr	r3, [pc, #252]	@ (801ae84 <HAL_RCC_ClockConfig+0x358>)
 801ad86:	699b      	ldr	r3, [r3, #24]
 801ad88:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801ad8c:	429a      	cmp	r2, r3
 801ad8e:	d208      	bcs.n	801ada2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801ad90:	4b3c      	ldr	r3, [pc, #240]	@ (801ae84 <HAL_RCC_ClockConfig+0x358>)
 801ad92:	699b      	ldr	r3, [r3, #24]
 801ad94:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801ad98:	687b      	ldr	r3, [r7, #4]
 801ad9a:	691b      	ldr	r3, [r3, #16]
 801ad9c:	4939      	ldr	r1, [pc, #228]	@ (801ae84 <HAL_RCC_ClockConfig+0x358>)
 801ad9e:	4313      	orrs	r3, r2
 801ada0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801ada2:	687b      	ldr	r3, [r7, #4]
 801ada4:	681b      	ldr	r3, [r3, #0]
 801ada6:	f003 0308 	and.w	r3, r3, #8
 801adaa:	2b00      	cmp	r3, #0
 801adac:	d010      	beq.n	801add0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801adae:	687b      	ldr	r3, [r7, #4]
 801adb0:	695a      	ldr	r2, [r3, #20]
 801adb2:	4b34      	ldr	r3, [pc, #208]	@ (801ae84 <HAL_RCC_ClockConfig+0x358>)
 801adb4:	69db      	ldr	r3, [r3, #28]
 801adb6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801adba:	429a      	cmp	r2, r3
 801adbc:	d208      	bcs.n	801add0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801adbe:	4b31      	ldr	r3, [pc, #196]	@ (801ae84 <HAL_RCC_ClockConfig+0x358>)
 801adc0:	69db      	ldr	r3, [r3, #28]
 801adc2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801adc6:	687b      	ldr	r3, [r7, #4]
 801adc8:	695b      	ldr	r3, [r3, #20]
 801adca:	492e      	ldr	r1, [pc, #184]	@ (801ae84 <HAL_RCC_ClockConfig+0x358>)
 801adcc:	4313      	orrs	r3, r2
 801adce:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801add0:	687b      	ldr	r3, [r7, #4]
 801add2:	681b      	ldr	r3, [r3, #0]
 801add4:	f003 0310 	and.w	r3, r3, #16
 801add8:	2b00      	cmp	r3, #0
 801adda:	d010      	beq.n	801adfe <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801addc:	687b      	ldr	r3, [r7, #4]
 801adde:	699a      	ldr	r2, [r3, #24]
 801ade0:	4b28      	ldr	r3, [pc, #160]	@ (801ae84 <HAL_RCC_ClockConfig+0x358>)
 801ade2:	69db      	ldr	r3, [r3, #28]
 801ade4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801ade8:	429a      	cmp	r2, r3
 801adea:	d208      	bcs.n	801adfe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801adec:	4b25      	ldr	r3, [pc, #148]	@ (801ae84 <HAL_RCC_ClockConfig+0x358>)
 801adee:	69db      	ldr	r3, [r3, #28]
 801adf0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801adf4:	687b      	ldr	r3, [r7, #4]
 801adf6:	699b      	ldr	r3, [r3, #24]
 801adf8:	4922      	ldr	r1, [pc, #136]	@ (801ae84 <HAL_RCC_ClockConfig+0x358>)
 801adfa:	4313      	orrs	r3, r2
 801adfc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801adfe:	687b      	ldr	r3, [r7, #4]
 801ae00:	681b      	ldr	r3, [r3, #0]
 801ae02:	f003 0320 	and.w	r3, r3, #32
 801ae06:	2b00      	cmp	r3, #0
 801ae08:	d010      	beq.n	801ae2c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801ae0a:	687b      	ldr	r3, [r7, #4]
 801ae0c:	69da      	ldr	r2, [r3, #28]
 801ae0e:	4b1d      	ldr	r3, [pc, #116]	@ (801ae84 <HAL_RCC_ClockConfig+0x358>)
 801ae10:	6a1b      	ldr	r3, [r3, #32]
 801ae12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801ae16:	429a      	cmp	r2, r3
 801ae18:	d208      	bcs.n	801ae2c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801ae1a:	4b1a      	ldr	r3, [pc, #104]	@ (801ae84 <HAL_RCC_ClockConfig+0x358>)
 801ae1c:	6a1b      	ldr	r3, [r3, #32]
 801ae1e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801ae22:	687b      	ldr	r3, [r7, #4]
 801ae24:	69db      	ldr	r3, [r3, #28]
 801ae26:	4917      	ldr	r1, [pc, #92]	@ (801ae84 <HAL_RCC_ClockConfig+0x358>)
 801ae28:	4313      	orrs	r3, r2
 801ae2a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801ae2c:	f000 f834 	bl	801ae98 <HAL_RCC_GetSysClockFreq>
 801ae30:	4602      	mov	r2, r0
 801ae32:	4b14      	ldr	r3, [pc, #80]	@ (801ae84 <HAL_RCC_ClockConfig+0x358>)
 801ae34:	699b      	ldr	r3, [r3, #24]
 801ae36:	0a1b      	lsrs	r3, r3, #8
 801ae38:	f003 030f 	and.w	r3, r3, #15
 801ae3c:	4912      	ldr	r1, [pc, #72]	@ (801ae88 <HAL_RCC_ClockConfig+0x35c>)
 801ae3e:	5ccb      	ldrb	r3, [r1, r3]
 801ae40:	f003 031f 	and.w	r3, r3, #31
 801ae44:	fa22 f303 	lsr.w	r3, r2, r3
 801ae48:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801ae4a:	4b0e      	ldr	r3, [pc, #56]	@ (801ae84 <HAL_RCC_ClockConfig+0x358>)
 801ae4c:	699b      	ldr	r3, [r3, #24]
 801ae4e:	f003 030f 	and.w	r3, r3, #15
 801ae52:	4a0d      	ldr	r2, [pc, #52]	@ (801ae88 <HAL_RCC_ClockConfig+0x35c>)
 801ae54:	5cd3      	ldrb	r3, [r2, r3]
 801ae56:	f003 031f 	and.w	r3, r3, #31
 801ae5a:	693a      	ldr	r2, [r7, #16]
 801ae5c:	fa22 f303 	lsr.w	r3, r2, r3
 801ae60:	4a0a      	ldr	r2, [pc, #40]	@ (801ae8c <HAL_RCC_ClockConfig+0x360>)
 801ae62:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801ae64:	4a0a      	ldr	r2, [pc, #40]	@ (801ae90 <HAL_RCC_ClockConfig+0x364>)
 801ae66:	693b      	ldr	r3, [r7, #16]
 801ae68:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 801ae6a:	4b0a      	ldr	r3, [pc, #40]	@ (801ae94 <HAL_RCC_ClockConfig+0x368>)
 801ae6c:	681b      	ldr	r3, [r3, #0]
 801ae6e:	4618      	mov	r0, r3
 801ae70:	f7fc fa7e 	bl	8017370 <HAL_InitTick>
 801ae74:	4603      	mov	r3, r0
 801ae76:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 801ae78:	7bfb      	ldrb	r3, [r7, #15]
}
 801ae7a:	4618      	mov	r0, r3
 801ae7c:	3718      	adds	r7, #24
 801ae7e:	46bd      	mov	sp, r7
 801ae80:	bd80      	pop	{r7, pc}
 801ae82:	bf00      	nop
 801ae84:	58024400 	.word	0x58024400
 801ae88:	08026748 	.word	0x08026748
 801ae8c:	24000020 	.word	0x24000020
 801ae90:	2400001c 	.word	0x2400001c
 801ae94:	24000024 	.word	0x24000024

0801ae98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801ae98:	b480      	push	{r7}
 801ae9a:	b089      	sub	sp, #36	@ 0x24
 801ae9c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 801ae9e:	4bb3      	ldr	r3, [pc, #716]	@ (801b16c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801aea0:	691b      	ldr	r3, [r3, #16]
 801aea2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801aea6:	2b18      	cmp	r3, #24
 801aea8:	f200 8155 	bhi.w	801b156 <HAL_RCC_GetSysClockFreq+0x2be>
 801aeac:	a201      	add	r2, pc, #4	@ (adr r2, 801aeb4 <HAL_RCC_GetSysClockFreq+0x1c>)
 801aeae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801aeb2:	bf00      	nop
 801aeb4:	0801af19 	.word	0x0801af19
 801aeb8:	0801b157 	.word	0x0801b157
 801aebc:	0801b157 	.word	0x0801b157
 801aec0:	0801b157 	.word	0x0801b157
 801aec4:	0801b157 	.word	0x0801b157
 801aec8:	0801b157 	.word	0x0801b157
 801aecc:	0801b157 	.word	0x0801b157
 801aed0:	0801b157 	.word	0x0801b157
 801aed4:	0801af3f 	.word	0x0801af3f
 801aed8:	0801b157 	.word	0x0801b157
 801aedc:	0801b157 	.word	0x0801b157
 801aee0:	0801b157 	.word	0x0801b157
 801aee4:	0801b157 	.word	0x0801b157
 801aee8:	0801b157 	.word	0x0801b157
 801aeec:	0801b157 	.word	0x0801b157
 801aef0:	0801b157 	.word	0x0801b157
 801aef4:	0801af45 	.word	0x0801af45
 801aef8:	0801b157 	.word	0x0801b157
 801aefc:	0801b157 	.word	0x0801b157
 801af00:	0801b157 	.word	0x0801b157
 801af04:	0801b157 	.word	0x0801b157
 801af08:	0801b157 	.word	0x0801b157
 801af0c:	0801b157 	.word	0x0801b157
 801af10:	0801b157 	.word	0x0801b157
 801af14:	0801af4b 	.word	0x0801af4b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801af18:	4b94      	ldr	r3, [pc, #592]	@ (801b16c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801af1a:	681b      	ldr	r3, [r3, #0]
 801af1c:	f003 0320 	and.w	r3, r3, #32
 801af20:	2b00      	cmp	r3, #0
 801af22:	d009      	beq.n	801af38 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801af24:	4b91      	ldr	r3, [pc, #580]	@ (801b16c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801af26:	681b      	ldr	r3, [r3, #0]
 801af28:	08db      	lsrs	r3, r3, #3
 801af2a:	f003 0303 	and.w	r3, r3, #3
 801af2e:	4a90      	ldr	r2, [pc, #576]	@ (801b170 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801af30:	fa22 f303 	lsr.w	r3, r2, r3
 801af34:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 801af36:	e111      	b.n	801b15c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 801af38:	4b8d      	ldr	r3, [pc, #564]	@ (801b170 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801af3a:	61bb      	str	r3, [r7, #24]
      break;
 801af3c:	e10e      	b.n	801b15c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 801af3e:	4b8d      	ldr	r3, [pc, #564]	@ (801b174 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801af40:	61bb      	str	r3, [r7, #24]
      break;
 801af42:	e10b      	b.n	801b15c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 801af44:	4b8c      	ldr	r3, [pc, #560]	@ (801b178 <HAL_RCC_GetSysClockFreq+0x2e0>)
 801af46:	61bb      	str	r3, [r7, #24]
      break;
 801af48:	e108      	b.n	801b15c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801af4a:	4b88      	ldr	r3, [pc, #544]	@ (801b16c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801af4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801af4e:	f003 0303 	and.w	r3, r3, #3
 801af52:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 801af54:	4b85      	ldr	r3, [pc, #532]	@ (801b16c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801af56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801af58:	091b      	lsrs	r3, r3, #4
 801af5a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801af5e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 801af60:	4b82      	ldr	r3, [pc, #520]	@ (801b16c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801af62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801af64:	f003 0301 	and.w	r3, r3, #1
 801af68:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801af6a:	4b80      	ldr	r3, [pc, #512]	@ (801b16c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801af6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801af6e:	08db      	lsrs	r3, r3, #3
 801af70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801af74:	68fa      	ldr	r2, [r7, #12]
 801af76:	fb02 f303 	mul.w	r3, r2, r3
 801af7a:	ee07 3a90 	vmov	s15, r3
 801af7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801af82:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 801af86:	693b      	ldr	r3, [r7, #16]
 801af88:	2b00      	cmp	r3, #0
 801af8a:	f000 80e1 	beq.w	801b150 <HAL_RCC_GetSysClockFreq+0x2b8>
 801af8e:	697b      	ldr	r3, [r7, #20]
 801af90:	2b02      	cmp	r3, #2
 801af92:	f000 8083 	beq.w	801b09c <HAL_RCC_GetSysClockFreq+0x204>
 801af96:	697b      	ldr	r3, [r7, #20]
 801af98:	2b02      	cmp	r3, #2
 801af9a:	f200 80a1 	bhi.w	801b0e0 <HAL_RCC_GetSysClockFreq+0x248>
 801af9e:	697b      	ldr	r3, [r7, #20]
 801afa0:	2b00      	cmp	r3, #0
 801afa2:	d003      	beq.n	801afac <HAL_RCC_GetSysClockFreq+0x114>
 801afa4:	697b      	ldr	r3, [r7, #20]
 801afa6:	2b01      	cmp	r3, #1
 801afa8:	d056      	beq.n	801b058 <HAL_RCC_GetSysClockFreq+0x1c0>
 801afaa:	e099      	b.n	801b0e0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801afac:	4b6f      	ldr	r3, [pc, #444]	@ (801b16c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801afae:	681b      	ldr	r3, [r3, #0]
 801afb0:	f003 0320 	and.w	r3, r3, #32
 801afb4:	2b00      	cmp	r3, #0
 801afb6:	d02d      	beq.n	801b014 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801afb8:	4b6c      	ldr	r3, [pc, #432]	@ (801b16c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801afba:	681b      	ldr	r3, [r3, #0]
 801afbc:	08db      	lsrs	r3, r3, #3
 801afbe:	f003 0303 	and.w	r3, r3, #3
 801afc2:	4a6b      	ldr	r2, [pc, #428]	@ (801b170 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801afc4:	fa22 f303 	lsr.w	r3, r2, r3
 801afc8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801afca:	687b      	ldr	r3, [r7, #4]
 801afcc:	ee07 3a90 	vmov	s15, r3
 801afd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801afd4:	693b      	ldr	r3, [r7, #16]
 801afd6:	ee07 3a90 	vmov	s15, r3
 801afda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801afde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801afe2:	4b62      	ldr	r3, [pc, #392]	@ (801b16c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801afe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801afe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801afea:	ee07 3a90 	vmov	s15, r3
 801afee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801aff2:	ed97 6a02 	vldr	s12, [r7, #8]
 801aff6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 801b17c <HAL_RCC_GetSysClockFreq+0x2e4>
 801affa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801affe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801b002:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801b006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b00a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b00e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 801b012:	e087      	b.n	801b124 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801b014:	693b      	ldr	r3, [r7, #16]
 801b016:	ee07 3a90 	vmov	s15, r3
 801b01a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b01e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 801b180 <HAL_RCC_GetSysClockFreq+0x2e8>
 801b022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801b026:	4b51      	ldr	r3, [pc, #324]	@ (801b16c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801b028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b02a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b02e:	ee07 3a90 	vmov	s15, r3
 801b032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801b036:	ed97 6a02 	vldr	s12, [r7, #8]
 801b03a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 801b17c <HAL_RCC_GetSysClockFreq+0x2e4>
 801b03e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801b042:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801b046:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801b04a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b04e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b052:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801b056:	e065      	b.n	801b124 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801b058:	693b      	ldr	r3, [r7, #16]
 801b05a:	ee07 3a90 	vmov	s15, r3
 801b05e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b062:	eddf 6a48 	vldr	s13, [pc, #288]	@ 801b184 <HAL_RCC_GetSysClockFreq+0x2ec>
 801b066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801b06a:	4b40      	ldr	r3, [pc, #256]	@ (801b16c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801b06c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b06e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b072:	ee07 3a90 	vmov	s15, r3
 801b076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801b07a:	ed97 6a02 	vldr	s12, [r7, #8]
 801b07e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801b17c <HAL_RCC_GetSysClockFreq+0x2e4>
 801b082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801b086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801b08a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801b08e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b092:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b096:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801b09a:	e043      	b.n	801b124 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801b09c:	693b      	ldr	r3, [r7, #16]
 801b09e:	ee07 3a90 	vmov	s15, r3
 801b0a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b0a6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 801b188 <HAL_RCC_GetSysClockFreq+0x2f0>
 801b0aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801b0ae:	4b2f      	ldr	r3, [pc, #188]	@ (801b16c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801b0b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b0b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b0b6:	ee07 3a90 	vmov	s15, r3
 801b0ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801b0be:	ed97 6a02 	vldr	s12, [r7, #8]
 801b0c2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 801b17c <HAL_RCC_GetSysClockFreq+0x2e4>
 801b0c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801b0ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801b0ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801b0d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b0d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b0da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801b0de:	e021      	b.n	801b124 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801b0e0:	693b      	ldr	r3, [r7, #16]
 801b0e2:	ee07 3a90 	vmov	s15, r3
 801b0e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b0ea:	eddf 6a26 	vldr	s13, [pc, #152]	@ 801b184 <HAL_RCC_GetSysClockFreq+0x2ec>
 801b0ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801b0f2:	4b1e      	ldr	r3, [pc, #120]	@ (801b16c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801b0f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b0f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b0fa:	ee07 3a90 	vmov	s15, r3
 801b0fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801b102:	ed97 6a02 	vldr	s12, [r7, #8]
 801b106:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 801b17c <HAL_RCC_GetSysClockFreq+0x2e4>
 801b10a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801b10e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801b112:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801b116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b11a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b11e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801b122:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 801b124:	4b11      	ldr	r3, [pc, #68]	@ (801b16c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801b126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b128:	0a5b      	lsrs	r3, r3, #9
 801b12a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801b12e:	3301      	adds	r3, #1
 801b130:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 801b132:	683b      	ldr	r3, [r7, #0]
 801b134:	ee07 3a90 	vmov	s15, r3
 801b138:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801b13c:	edd7 6a07 	vldr	s13, [r7, #28]
 801b140:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801b144:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801b148:	ee17 3a90 	vmov	r3, s15
 801b14c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 801b14e:	e005      	b.n	801b15c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 801b150:	2300      	movs	r3, #0
 801b152:	61bb      	str	r3, [r7, #24]
      break;
 801b154:	e002      	b.n	801b15c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 801b156:	4b07      	ldr	r3, [pc, #28]	@ (801b174 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801b158:	61bb      	str	r3, [r7, #24]
      break;
 801b15a:	bf00      	nop
  }

  return sysclockfreq;
 801b15c:	69bb      	ldr	r3, [r7, #24]
}
 801b15e:	4618      	mov	r0, r3
 801b160:	3724      	adds	r7, #36	@ 0x24
 801b162:	46bd      	mov	sp, r7
 801b164:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b168:	4770      	bx	lr
 801b16a:	bf00      	nop
 801b16c:	58024400 	.word	0x58024400
 801b170:	03d09000 	.word	0x03d09000
 801b174:	003d0900 	.word	0x003d0900
 801b178:	017d7840 	.word	0x017d7840
 801b17c:	46000000 	.word	0x46000000
 801b180:	4c742400 	.word	0x4c742400
 801b184:	4a742400 	.word	0x4a742400
 801b188:	4bbebc20 	.word	0x4bbebc20

0801b18c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801b18c:	b580      	push	{r7, lr}
 801b18e:	b082      	sub	sp, #8
 801b190:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801b192:	f7ff fe81 	bl	801ae98 <HAL_RCC_GetSysClockFreq>
 801b196:	4602      	mov	r2, r0
 801b198:	4b10      	ldr	r3, [pc, #64]	@ (801b1dc <HAL_RCC_GetHCLKFreq+0x50>)
 801b19a:	699b      	ldr	r3, [r3, #24]
 801b19c:	0a1b      	lsrs	r3, r3, #8
 801b19e:	f003 030f 	and.w	r3, r3, #15
 801b1a2:	490f      	ldr	r1, [pc, #60]	@ (801b1e0 <HAL_RCC_GetHCLKFreq+0x54>)
 801b1a4:	5ccb      	ldrb	r3, [r1, r3]
 801b1a6:	f003 031f 	and.w	r3, r3, #31
 801b1aa:	fa22 f303 	lsr.w	r3, r2, r3
 801b1ae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801b1b0:	4b0a      	ldr	r3, [pc, #40]	@ (801b1dc <HAL_RCC_GetHCLKFreq+0x50>)
 801b1b2:	699b      	ldr	r3, [r3, #24]
 801b1b4:	f003 030f 	and.w	r3, r3, #15
 801b1b8:	4a09      	ldr	r2, [pc, #36]	@ (801b1e0 <HAL_RCC_GetHCLKFreq+0x54>)
 801b1ba:	5cd3      	ldrb	r3, [r2, r3]
 801b1bc:	f003 031f 	and.w	r3, r3, #31
 801b1c0:	687a      	ldr	r2, [r7, #4]
 801b1c2:	fa22 f303 	lsr.w	r3, r2, r3
 801b1c6:	4a07      	ldr	r2, [pc, #28]	@ (801b1e4 <HAL_RCC_GetHCLKFreq+0x58>)
 801b1c8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801b1ca:	4a07      	ldr	r2, [pc, #28]	@ (801b1e8 <HAL_RCC_GetHCLKFreq+0x5c>)
 801b1cc:	687b      	ldr	r3, [r7, #4]
 801b1ce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 801b1d0:	4b04      	ldr	r3, [pc, #16]	@ (801b1e4 <HAL_RCC_GetHCLKFreq+0x58>)
 801b1d2:	681b      	ldr	r3, [r3, #0]
}
 801b1d4:	4618      	mov	r0, r3
 801b1d6:	3708      	adds	r7, #8
 801b1d8:	46bd      	mov	sp, r7
 801b1da:	bd80      	pop	{r7, pc}
 801b1dc:	58024400 	.word	0x58024400
 801b1e0:	08026748 	.word	0x08026748
 801b1e4:	24000020 	.word	0x24000020
 801b1e8:	2400001c 	.word	0x2400001c

0801b1ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801b1ec:	b580      	push	{r7, lr}
 801b1ee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 801b1f0:	f7ff ffcc 	bl	801b18c <HAL_RCC_GetHCLKFreq>
 801b1f4:	4602      	mov	r2, r0
 801b1f6:	4b06      	ldr	r3, [pc, #24]	@ (801b210 <HAL_RCC_GetPCLK1Freq+0x24>)
 801b1f8:	69db      	ldr	r3, [r3, #28]
 801b1fa:	091b      	lsrs	r3, r3, #4
 801b1fc:	f003 0307 	and.w	r3, r3, #7
 801b200:	4904      	ldr	r1, [pc, #16]	@ (801b214 <HAL_RCC_GetPCLK1Freq+0x28>)
 801b202:	5ccb      	ldrb	r3, [r1, r3]
 801b204:	f003 031f 	and.w	r3, r3, #31
 801b208:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 801b20c:	4618      	mov	r0, r3
 801b20e:	bd80      	pop	{r7, pc}
 801b210:	58024400 	.word	0x58024400
 801b214:	08026748 	.word	0x08026748

0801b218 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801b218:	b580      	push	{r7, lr}
 801b21a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 801b21c:	f7ff ffb6 	bl	801b18c <HAL_RCC_GetHCLKFreq>
 801b220:	4602      	mov	r2, r0
 801b222:	4b06      	ldr	r3, [pc, #24]	@ (801b23c <HAL_RCC_GetPCLK2Freq+0x24>)
 801b224:	69db      	ldr	r3, [r3, #28]
 801b226:	0a1b      	lsrs	r3, r3, #8
 801b228:	f003 0307 	and.w	r3, r3, #7
 801b22c:	4904      	ldr	r1, [pc, #16]	@ (801b240 <HAL_RCC_GetPCLK2Freq+0x28>)
 801b22e:	5ccb      	ldrb	r3, [r1, r3]
 801b230:	f003 031f 	and.w	r3, r3, #31
 801b234:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 801b238:	4618      	mov	r0, r3
 801b23a:	bd80      	pop	{r7, pc}
 801b23c:	58024400 	.word	0x58024400
 801b240:	08026748 	.word	0x08026748

0801b244 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801b244:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801b248:	b0ca      	sub	sp, #296	@ 0x128
 801b24a:	af00      	add	r7, sp, #0
 801b24c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801b250:	2300      	movs	r3, #0
 801b252:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801b256:	2300      	movs	r3, #0
 801b258:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801b25c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801b260:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b264:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 801b268:	2500      	movs	r5, #0
 801b26a:	ea54 0305 	orrs.w	r3, r4, r5
 801b26e:	d049      	beq.n	801b304 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 801b270:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801b274:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801b276:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801b27a:	d02f      	beq.n	801b2dc <HAL_RCCEx_PeriphCLKConfig+0x98>
 801b27c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801b280:	d828      	bhi.n	801b2d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801b282:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801b286:	d01a      	beq.n	801b2be <HAL_RCCEx_PeriphCLKConfig+0x7a>
 801b288:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801b28c:	d822      	bhi.n	801b2d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801b28e:	2b00      	cmp	r3, #0
 801b290:	d003      	beq.n	801b29a <HAL_RCCEx_PeriphCLKConfig+0x56>
 801b292:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801b296:	d007      	beq.n	801b2a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 801b298:	e01c      	b.n	801b2d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801b29a:	4bb8      	ldr	r3, [pc, #736]	@ (801b57c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801b29c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b29e:	4ab7      	ldr	r2, [pc, #732]	@ (801b57c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801b2a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801b2a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801b2a6:	e01a      	b.n	801b2de <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801b2a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801b2ac:	3308      	adds	r3, #8
 801b2ae:	2102      	movs	r1, #2
 801b2b0:	4618      	mov	r0, r3
 801b2b2:	f002 fb61 	bl	801d978 <RCCEx_PLL2_Config>
 801b2b6:	4603      	mov	r3, r0
 801b2b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801b2bc:	e00f      	b.n	801b2de <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801b2be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801b2c2:	3328      	adds	r3, #40	@ 0x28
 801b2c4:	2102      	movs	r1, #2
 801b2c6:	4618      	mov	r0, r3
 801b2c8:	f002 fc08 	bl	801dadc <RCCEx_PLL3_Config>
 801b2cc:	4603      	mov	r3, r0
 801b2ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801b2d2:	e004      	b.n	801b2de <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801b2d4:	2301      	movs	r3, #1
 801b2d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801b2da:	e000      	b.n	801b2de <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 801b2dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 801b2de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801b2e2:	2b00      	cmp	r3, #0
 801b2e4:	d10a      	bne.n	801b2fc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801b2e6:	4ba5      	ldr	r3, [pc, #660]	@ (801b57c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801b2e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b2ea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801b2ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801b2f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801b2f4:	4aa1      	ldr	r2, [pc, #644]	@ (801b57c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801b2f6:	430b      	orrs	r3, r1
 801b2f8:	6513      	str	r3, [r2, #80]	@ 0x50
 801b2fa:	e003      	b.n	801b304 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801b2fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801b300:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801b304:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801b308:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b30c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 801b310:	f04f 0900 	mov.w	r9, #0
 801b314:	ea58 0309 	orrs.w	r3, r8, r9
 801b318:	d047      	beq.n	801b3aa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 801b31a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801b31e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b320:	2b04      	cmp	r3, #4
 801b322:	d82a      	bhi.n	801b37a <HAL_RCCEx_PeriphCLKConfig+0x136>
 801b324:	a201      	add	r2, pc, #4	@ (adr r2, 801b32c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 801b326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b32a:	bf00      	nop
 801b32c:	0801b341 	.word	0x0801b341
 801b330:	0801b34f 	.word	0x0801b34f
 801b334:	0801b365 	.word	0x0801b365
 801b338:	0801b383 	.word	0x0801b383
 801b33c:	0801b383 	.word	0x0801b383
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801b340:	4b8e      	ldr	r3, [pc, #568]	@ (801b57c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801b342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b344:	4a8d      	ldr	r2, [pc, #564]	@ (801b57c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801b346:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801b34a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801b34c:	e01a      	b.n	801b384 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801b34e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801b352:	3308      	adds	r3, #8
 801b354:	2100      	movs	r1, #0
 801b356:	4618      	mov	r0, r3
 801b358:	f002 fb0e 	bl	801d978 <RCCEx_PLL2_Config>
 801b35c:	4603      	mov	r3, r0
 801b35e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801b362:	e00f      	b.n	801b384 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801b364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801b368:	3328      	adds	r3, #40	@ 0x28
 801b36a:	2100      	movs	r1, #0
 801b36c:	4618      	mov	r0, r3
 801b36e:	f002 fbb5 	bl	801dadc <RCCEx_PLL3_Config>
 801b372:	4603      	mov	r3, r0
 801b374:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801b378:	e004      	b.n	801b384 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801b37a:	2301      	movs	r3, #1
 801b37c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801b380:	e000      	b.n	801b384 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 801b382:	bf00      	nop
    }

    if (ret == HAL_OK)
 801b384:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801b388:	2b00      	cmp	r3, #0
 801b38a:	d10a      	bne.n	801b3a2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801b38c:	4b7b      	ldr	r3, [pc, #492]	@ (801b57c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801b38e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b390:	f023 0107 	bic.w	r1, r3, #7
 801b394:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801b398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b39a:	4a78      	ldr	r2, [pc, #480]	@ (801b57c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801b39c:	430b      	orrs	r3, r1
 801b39e:	6513      	str	r3, [r2, #80]	@ 0x50
 801b3a0:	e003      	b.n	801b3aa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801b3a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801b3a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 801b3aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801b3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3b2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 801b3b6:	f04f 0b00 	mov.w	fp, #0
 801b3ba:	ea5a 030b 	orrs.w	r3, sl, fp
 801b3be:	d04c      	beq.n	801b45a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 801b3c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801b3c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b3c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b3ca:	d030      	beq.n	801b42e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 801b3cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b3d0:	d829      	bhi.n	801b426 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801b3d2:	2bc0      	cmp	r3, #192	@ 0xc0
 801b3d4:	d02d      	beq.n	801b432 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 801b3d6:	2bc0      	cmp	r3, #192	@ 0xc0
 801b3d8:	d825      	bhi.n	801b426 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801b3da:	2b80      	cmp	r3, #128	@ 0x80
 801b3dc:	d018      	beq.n	801b410 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 801b3de:	2b80      	cmp	r3, #128	@ 0x80
 801b3e0:	d821      	bhi.n	801b426 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801b3e2:	2b00      	cmp	r3, #0
 801b3e4:	d002      	beq.n	801b3ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 801b3e6:	2b40      	cmp	r3, #64	@ 0x40
 801b3e8:	d007      	beq.n	801b3fa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 801b3ea:	e01c      	b.n	801b426 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801b3ec:	4b63      	ldr	r3, [pc, #396]	@ (801b57c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801b3ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b3f0:	4a62      	ldr	r2, [pc, #392]	@ (801b57c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801b3f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801b3f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801b3f8:	e01c      	b.n	801b434 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801b3fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801b3fe:	3308      	adds	r3, #8
 801b400:	2100      	movs	r1, #0
 801b402:	4618      	mov	r0, r3
 801b404:	f002 fab8 	bl	801d978 <RCCEx_PLL2_Config>
 801b408:	4603      	mov	r3, r0
 801b40a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801b40e:	e011      	b.n	801b434 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801b410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801b414:	3328      	adds	r3, #40	@ 0x28
 801b416:	2100      	movs	r1, #0
 801b418:	4618      	mov	r0, r3
 801b41a:	f002 fb5f 	bl	801dadc <RCCEx_PLL3_Config>
 801b41e:	4603      	mov	r3, r0
 801b420:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801b424:	e006      	b.n	801b434 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801b426:	2301      	movs	r3, #1
 801b428:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801b42c:	e002      	b.n	801b434 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801b42e:	bf00      	nop
 801b430:	e000      	b.n	801b434 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801b432:	bf00      	nop
    }

    if (ret == HAL_OK)
 801b434:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801b438:	2b00      	cmp	r3, #0
 801b43a:	d10a      	bne.n	801b452 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 801b43c:	4b4f      	ldr	r3, [pc, #316]	@ (801b57c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801b43e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b440:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 801b444:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801b448:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b44a:	4a4c      	ldr	r2, [pc, #304]	@ (801b57c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801b44c:	430b      	orrs	r3, r1
 801b44e:	6513      	str	r3, [r2, #80]	@ 0x50
 801b450:	e003      	b.n	801b45a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801b452:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801b456:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801b45a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801b45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b462:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 801b466:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 801b46a:	2300      	movs	r3, #0
 801b46c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 801b470:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 801b474:	460b      	mov	r3, r1
 801b476:	4313      	orrs	r3, r2
 801b478:	d053      	beq.n	801b522 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 801b47a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801b47e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801b482:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801b486:	d035      	beq.n	801b4f4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 801b488:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801b48c:	d82e      	bhi.n	801b4ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801b48e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801b492:	d031      	beq.n	801b4f8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 801b494:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801b498:	d828      	bhi.n	801b4ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801b49a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801b49e:	d01a      	beq.n	801b4d6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 801b4a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801b4a4:	d822      	bhi.n	801b4ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801b4a6:	2b00      	cmp	r3, #0
 801b4a8:	d003      	beq.n	801b4b2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 801b4aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801b4ae:	d007      	beq.n	801b4c0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 801b4b0:	e01c      	b.n	801b4ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801b4b2:	4b32      	ldr	r3, [pc, #200]	@ (801b57c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801b4b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b4b6:	4a31      	ldr	r2, [pc, #196]	@ (801b57c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801b4b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801b4bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801b4be:	e01c      	b.n	801b4fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801b4c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801b4c4:	3308      	adds	r3, #8
 801b4c6:	2100      	movs	r1, #0
 801b4c8:	4618      	mov	r0, r3
 801b4ca:	f002 fa55 	bl	801d978 <RCCEx_PLL2_Config>
 801b4ce:	4603      	mov	r3, r0
 801b4d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801b4d4:	e011      	b.n	801b4fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801b4d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801b4da:	3328      	adds	r3, #40	@ 0x28
 801b4dc:	2100      	movs	r1, #0
 801b4de:	4618      	mov	r0, r3
 801b4e0:	f002 fafc 	bl	801dadc <RCCEx_PLL3_Config>
 801b4e4:	4603      	mov	r3, r0
 801b4e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801b4ea:	e006      	b.n	801b4fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801b4ec:	2301      	movs	r3, #1
 801b4ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801b4f2:	e002      	b.n	801b4fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801b4f4:	bf00      	nop
 801b4f6:	e000      	b.n	801b4fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801b4f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 801b4fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801b4fe:	2b00      	cmp	r3, #0
 801b500:	d10b      	bne.n	801b51a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 801b502:	4b1e      	ldr	r3, [pc, #120]	@ (801b57c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801b504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b506:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 801b50a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801b50e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801b512:	4a1a      	ldr	r2, [pc, #104]	@ (801b57c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801b514:	430b      	orrs	r3, r1
 801b516:	6593      	str	r3, [r2, #88]	@ 0x58
 801b518:	e003      	b.n	801b522 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801b51a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801b51e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801b522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801b526:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b52a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 801b52e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 801b532:	2300      	movs	r3, #0
 801b534:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 801b538:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 801b53c:	460b      	mov	r3, r1
 801b53e:	4313      	orrs	r3, r2
 801b540:	d056      	beq.n	801b5f0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 801b542:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801b546:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801b54a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801b54e:	d038      	beq.n	801b5c2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 801b550:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801b554:	d831      	bhi.n	801b5ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 801b556:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801b55a:	d034      	beq.n	801b5c6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 801b55c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801b560:	d82b      	bhi.n	801b5ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 801b562:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801b566:	d01d      	beq.n	801b5a4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 801b568:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801b56c:	d825      	bhi.n	801b5ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 801b56e:	2b00      	cmp	r3, #0
 801b570:	d006      	beq.n	801b580 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 801b572:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801b576:	d00a      	beq.n	801b58e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 801b578:	e01f      	b.n	801b5ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 801b57a:	bf00      	nop
 801b57c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801b580:	4ba2      	ldr	r3, [pc, #648]	@ (801b80c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801b582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b584:	4aa1      	ldr	r2, [pc, #644]	@ (801b80c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801b586:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801b58a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801b58c:	e01c      	b.n	801b5c8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801b58e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801b592:	3308      	adds	r3, #8
 801b594:	2100      	movs	r1, #0
 801b596:	4618      	mov	r0, r3
 801b598:	f002 f9ee 	bl	801d978 <RCCEx_PLL2_Config>
 801b59c:	4603      	mov	r3, r0
 801b59e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801b5a2:	e011      	b.n	801b5c8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801b5a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801b5a8:	3328      	adds	r3, #40	@ 0x28
 801b5aa:	2100      	movs	r1, #0
 801b5ac:	4618      	mov	r0, r3
 801b5ae:	f002 fa95 	bl	801dadc <RCCEx_PLL3_Config>
 801b5b2:	4603      	mov	r3, r0
 801b5b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801b5b8:	e006      	b.n	801b5c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801b5ba:	2301      	movs	r3, #1
 801b5bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801b5c0:	e002      	b.n	801b5c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801b5c2:	bf00      	nop
 801b5c4:	e000      	b.n	801b5c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801b5c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 801b5c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801b5cc:	2b00      	cmp	r3, #0
 801b5ce:	d10b      	bne.n	801b5e8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 801b5d0:	4b8e      	ldr	r3, [pc, #568]	@ (801b80c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801b5d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b5d4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 801b5d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801b5dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801b5e0:	4a8a      	ldr	r2, [pc, #552]	@ (801b80c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801b5e2:	430b      	orrs	r3, r1
 801b5e4:	6593      	str	r3, [r2, #88]	@ 0x58
 801b5e6:	e003      	b.n	801b5f0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801b5e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801b5ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 801b5f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801b5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5f8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 801b5fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 801b600:	2300      	movs	r3, #0
 801b602:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 801b606:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 801b60a:	460b      	mov	r3, r1
 801b60c:	4313      	orrs	r3, r2
 801b60e:	d03a      	beq.n	801b686 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 801b610:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801b614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b616:	2b30      	cmp	r3, #48	@ 0x30
 801b618:	d01f      	beq.n	801b65a <HAL_RCCEx_PeriphCLKConfig+0x416>
 801b61a:	2b30      	cmp	r3, #48	@ 0x30
 801b61c:	d819      	bhi.n	801b652 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801b61e:	2b20      	cmp	r3, #32
 801b620:	d00c      	beq.n	801b63c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 801b622:	2b20      	cmp	r3, #32
 801b624:	d815      	bhi.n	801b652 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801b626:	2b00      	cmp	r3, #0
 801b628:	d019      	beq.n	801b65e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 801b62a:	2b10      	cmp	r3, #16
 801b62c:	d111      	bne.n	801b652 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801b62e:	4b77      	ldr	r3, [pc, #476]	@ (801b80c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801b630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b632:	4a76      	ldr	r2, [pc, #472]	@ (801b80c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801b634:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801b638:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801b63a:	e011      	b.n	801b660 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801b63c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801b640:	3308      	adds	r3, #8
 801b642:	2102      	movs	r1, #2
 801b644:	4618      	mov	r0, r3
 801b646:	f002 f997 	bl	801d978 <RCCEx_PLL2_Config>
 801b64a:	4603      	mov	r3, r0
 801b64c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801b650:	e006      	b.n	801b660 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801b652:	2301      	movs	r3, #1
 801b654:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801b658:	e002      	b.n	801b660 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801b65a:	bf00      	nop
 801b65c:	e000      	b.n	801b660 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801b65e:	bf00      	nop
    }

    if (ret == HAL_OK)
 801b660:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801b664:	2b00      	cmp	r3, #0
 801b666:	d10a      	bne.n	801b67e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801b668:	4b68      	ldr	r3, [pc, #416]	@ (801b80c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801b66a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b66c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 801b670:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801b674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b676:	4a65      	ldr	r2, [pc, #404]	@ (801b80c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801b678:	430b      	orrs	r3, r1
 801b67a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801b67c:	e003      	b.n	801b686 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801b67e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801b682:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801b686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801b68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b68e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 801b692:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 801b696:	2300      	movs	r3, #0
 801b698:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 801b69c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 801b6a0:	460b      	mov	r3, r1
 801b6a2:	4313      	orrs	r3, r2
 801b6a4:	d051      	beq.n	801b74a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 801b6a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801b6aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801b6ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801b6b0:	d035      	beq.n	801b71e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 801b6b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801b6b6:	d82e      	bhi.n	801b716 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801b6b8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801b6bc:	d031      	beq.n	801b722 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 801b6be:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801b6c2:	d828      	bhi.n	801b716 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801b6c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801b6c8:	d01a      	beq.n	801b700 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 801b6ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801b6ce:	d822      	bhi.n	801b716 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801b6d0:	2b00      	cmp	r3, #0
 801b6d2:	d003      	beq.n	801b6dc <HAL_RCCEx_PeriphCLKConfig+0x498>
 801b6d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801b6d8:	d007      	beq.n	801b6ea <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 801b6da:	e01c      	b.n	801b716 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801b6dc:	4b4b      	ldr	r3, [pc, #300]	@ (801b80c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801b6de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b6e0:	4a4a      	ldr	r2, [pc, #296]	@ (801b80c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801b6e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801b6e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801b6e8:	e01c      	b.n	801b724 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801b6ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801b6ee:	3308      	adds	r3, #8
 801b6f0:	2100      	movs	r1, #0
 801b6f2:	4618      	mov	r0, r3
 801b6f4:	f002 f940 	bl	801d978 <RCCEx_PLL2_Config>
 801b6f8:	4603      	mov	r3, r0
 801b6fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801b6fe:	e011      	b.n	801b724 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801b700:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801b704:	3328      	adds	r3, #40	@ 0x28
 801b706:	2100      	movs	r1, #0
 801b708:	4618      	mov	r0, r3
 801b70a:	f002 f9e7 	bl	801dadc <RCCEx_PLL3_Config>
 801b70e:	4603      	mov	r3, r0
 801b710:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801b714:	e006      	b.n	801b724 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801b716:	2301      	movs	r3, #1
 801b718:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801b71c:	e002      	b.n	801b724 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801b71e:	bf00      	nop
 801b720:	e000      	b.n	801b724 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801b722:	bf00      	nop
    }

    if (ret == HAL_OK)
 801b724:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801b728:	2b00      	cmp	r3, #0
 801b72a:	d10a      	bne.n	801b742 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 801b72c:	4b37      	ldr	r3, [pc, #220]	@ (801b80c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801b72e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b730:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 801b734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801b738:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801b73a:	4a34      	ldr	r2, [pc, #208]	@ (801b80c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801b73c:	430b      	orrs	r3, r1
 801b73e:	6513      	str	r3, [r2, #80]	@ 0x50
 801b740:	e003      	b.n	801b74a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801b742:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801b746:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801b74a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801b74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b752:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 801b756:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801b75a:	2300      	movs	r3, #0
 801b75c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 801b760:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 801b764:	460b      	mov	r3, r1
 801b766:	4313      	orrs	r3, r2
 801b768:	d056      	beq.n	801b818 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 801b76a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801b76e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801b770:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801b774:	d033      	beq.n	801b7de <HAL_RCCEx_PeriphCLKConfig+0x59a>
 801b776:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801b77a:	d82c      	bhi.n	801b7d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801b77c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801b780:	d02f      	beq.n	801b7e2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 801b782:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801b786:	d826      	bhi.n	801b7d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801b788:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801b78c:	d02b      	beq.n	801b7e6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 801b78e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801b792:	d820      	bhi.n	801b7d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801b794:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801b798:	d012      	beq.n	801b7c0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 801b79a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801b79e:	d81a      	bhi.n	801b7d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801b7a0:	2b00      	cmp	r3, #0
 801b7a2:	d022      	beq.n	801b7ea <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 801b7a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801b7a8:	d115      	bne.n	801b7d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801b7aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801b7ae:	3308      	adds	r3, #8
 801b7b0:	2101      	movs	r1, #1
 801b7b2:	4618      	mov	r0, r3
 801b7b4:	f002 f8e0 	bl	801d978 <RCCEx_PLL2_Config>
 801b7b8:	4603      	mov	r3, r0
 801b7ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801b7be:	e015      	b.n	801b7ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801b7c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801b7c4:	3328      	adds	r3, #40	@ 0x28
 801b7c6:	2101      	movs	r1, #1
 801b7c8:	4618      	mov	r0, r3
 801b7ca:	f002 f987 	bl	801dadc <RCCEx_PLL3_Config>
 801b7ce:	4603      	mov	r3, r0
 801b7d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801b7d4:	e00a      	b.n	801b7ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801b7d6:	2301      	movs	r3, #1
 801b7d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801b7dc:	e006      	b.n	801b7ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801b7de:	bf00      	nop
 801b7e0:	e004      	b.n	801b7ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801b7e2:	bf00      	nop
 801b7e4:	e002      	b.n	801b7ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801b7e6:	bf00      	nop
 801b7e8:	e000      	b.n	801b7ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801b7ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 801b7ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801b7f0:	2b00      	cmp	r3, #0
 801b7f2:	d10d      	bne.n	801b810 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 801b7f4:	4b05      	ldr	r3, [pc, #20]	@ (801b80c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801b7f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b7f8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 801b7fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801b800:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801b802:	4a02      	ldr	r2, [pc, #8]	@ (801b80c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801b804:	430b      	orrs	r3, r1
 801b806:	6513      	str	r3, [r2, #80]	@ 0x50
 801b808:	e006      	b.n	801b818 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 801b80a:	bf00      	nop
 801b80c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801b810:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801b814:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 801b818:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801b81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b820:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 801b824:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 801b828:	2300      	movs	r3, #0
 801b82a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 801b82e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 801b832:	460b      	mov	r3, r1
 801b834:	4313      	orrs	r3, r2
 801b836:	d055      	beq.n	801b8e4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 801b838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801b83c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801b840:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801b844:	d033      	beq.n	801b8ae <HAL_RCCEx_PeriphCLKConfig+0x66a>
 801b846:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801b84a:	d82c      	bhi.n	801b8a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801b84c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801b850:	d02f      	beq.n	801b8b2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 801b852:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801b856:	d826      	bhi.n	801b8a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801b858:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801b85c:	d02b      	beq.n	801b8b6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 801b85e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801b862:	d820      	bhi.n	801b8a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801b864:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801b868:	d012      	beq.n	801b890 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 801b86a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801b86e:	d81a      	bhi.n	801b8a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801b870:	2b00      	cmp	r3, #0
 801b872:	d022      	beq.n	801b8ba <HAL_RCCEx_PeriphCLKConfig+0x676>
 801b874:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801b878:	d115      	bne.n	801b8a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801b87a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801b87e:	3308      	adds	r3, #8
 801b880:	2101      	movs	r1, #1
 801b882:	4618      	mov	r0, r3
 801b884:	f002 f878 	bl	801d978 <RCCEx_PLL2_Config>
 801b888:	4603      	mov	r3, r0
 801b88a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801b88e:	e015      	b.n	801b8bc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801b890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801b894:	3328      	adds	r3, #40	@ 0x28
 801b896:	2101      	movs	r1, #1
 801b898:	4618      	mov	r0, r3
 801b89a:	f002 f91f 	bl	801dadc <RCCEx_PLL3_Config>
 801b89e:	4603      	mov	r3, r0
 801b8a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801b8a4:	e00a      	b.n	801b8bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 801b8a6:	2301      	movs	r3, #1
 801b8a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801b8ac:	e006      	b.n	801b8bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801b8ae:	bf00      	nop
 801b8b0:	e004      	b.n	801b8bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801b8b2:	bf00      	nop
 801b8b4:	e002      	b.n	801b8bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801b8b6:	bf00      	nop
 801b8b8:	e000      	b.n	801b8bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801b8ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 801b8bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801b8c0:	2b00      	cmp	r3, #0
 801b8c2:	d10b      	bne.n	801b8dc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801b8c4:	4ba3      	ldr	r3, [pc, #652]	@ (801bb54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801b8c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b8c8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801b8cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801b8d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801b8d4:	4a9f      	ldr	r2, [pc, #636]	@ (801bb54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801b8d6:	430b      	orrs	r3, r1
 801b8d8:	6593      	str	r3, [r2, #88]	@ 0x58
 801b8da:	e003      	b.n	801b8e4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801b8dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801b8e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801b8e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801b8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8ec:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 801b8f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801b8f4:	2300      	movs	r3, #0
 801b8f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 801b8fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 801b8fe:	460b      	mov	r3, r1
 801b900:	4313      	orrs	r3, r2
 801b902:	d037      	beq.n	801b974 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 801b904:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801b908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b90a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801b90e:	d00e      	beq.n	801b92e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 801b910:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801b914:	d816      	bhi.n	801b944 <HAL_RCCEx_PeriphCLKConfig+0x700>
 801b916:	2b00      	cmp	r3, #0
 801b918:	d018      	beq.n	801b94c <HAL_RCCEx_PeriphCLKConfig+0x708>
 801b91a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801b91e:	d111      	bne.n	801b944 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801b920:	4b8c      	ldr	r3, [pc, #560]	@ (801bb54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801b922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b924:	4a8b      	ldr	r2, [pc, #556]	@ (801bb54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801b926:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801b92a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801b92c:	e00f      	b.n	801b94e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801b92e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801b932:	3308      	adds	r3, #8
 801b934:	2101      	movs	r1, #1
 801b936:	4618      	mov	r0, r3
 801b938:	f002 f81e 	bl	801d978 <RCCEx_PLL2_Config>
 801b93c:	4603      	mov	r3, r0
 801b93e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801b942:	e004      	b.n	801b94e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801b944:	2301      	movs	r3, #1
 801b946:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801b94a:	e000      	b.n	801b94e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 801b94c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801b94e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801b952:	2b00      	cmp	r3, #0
 801b954:	d10a      	bne.n	801b96c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801b956:	4b7f      	ldr	r3, [pc, #508]	@ (801bb54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801b958:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b95a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801b95e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801b962:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b964:	4a7b      	ldr	r2, [pc, #492]	@ (801bb54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801b966:	430b      	orrs	r3, r1
 801b968:	6513      	str	r3, [r2, #80]	@ 0x50
 801b96a:	e003      	b.n	801b974 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801b96c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801b970:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 801b974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801b978:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b97c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 801b980:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801b984:	2300      	movs	r3, #0
 801b986:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 801b98a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 801b98e:	460b      	mov	r3, r1
 801b990:	4313      	orrs	r3, r2
 801b992:	d039      	beq.n	801ba08 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 801b994:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801b998:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801b99a:	2b03      	cmp	r3, #3
 801b99c:	d81c      	bhi.n	801b9d8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 801b99e:	a201      	add	r2, pc, #4	@ (adr r2, 801b9a4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 801b9a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b9a4:	0801b9e1 	.word	0x0801b9e1
 801b9a8:	0801b9b5 	.word	0x0801b9b5
 801b9ac:	0801b9c3 	.word	0x0801b9c3
 801b9b0:	0801b9e1 	.word	0x0801b9e1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801b9b4:	4b67      	ldr	r3, [pc, #412]	@ (801bb54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801b9b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b9b8:	4a66      	ldr	r2, [pc, #408]	@ (801bb54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801b9ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801b9be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 801b9c0:	e00f      	b.n	801b9e2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801b9c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801b9c6:	3308      	adds	r3, #8
 801b9c8:	2102      	movs	r1, #2
 801b9ca:	4618      	mov	r0, r3
 801b9cc:	f001 ffd4 	bl	801d978 <RCCEx_PLL2_Config>
 801b9d0:	4603      	mov	r3, r0
 801b9d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 801b9d6:	e004      	b.n	801b9e2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801b9d8:	2301      	movs	r3, #1
 801b9da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801b9de:	e000      	b.n	801b9e2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 801b9e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 801b9e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801b9e6:	2b00      	cmp	r3, #0
 801b9e8:	d10a      	bne.n	801ba00 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 801b9ea:	4b5a      	ldr	r3, [pc, #360]	@ (801bb54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801b9ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b9ee:	f023 0103 	bic.w	r1, r3, #3
 801b9f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801b9f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801b9f8:	4a56      	ldr	r2, [pc, #344]	@ (801bb54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801b9fa:	430b      	orrs	r3, r1
 801b9fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801b9fe:	e003      	b.n	801ba08 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ba00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ba04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801ba08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ba0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba10:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 801ba14:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801ba18:	2300      	movs	r3, #0
 801ba1a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 801ba1e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 801ba22:	460b      	mov	r3, r1
 801ba24:	4313      	orrs	r3, r2
 801ba26:	f000 809f 	beq.w	801bb68 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801ba2a:	4b4b      	ldr	r3, [pc, #300]	@ (801bb58 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801ba2c:	681b      	ldr	r3, [r3, #0]
 801ba2e:	4a4a      	ldr	r2, [pc, #296]	@ (801bb58 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801ba30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801ba34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801ba36:	f7fb fce5 	bl	8017404 <HAL_GetTick>
 801ba3a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801ba3e:	e00b      	b.n	801ba58 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801ba40:	f7fb fce0 	bl	8017404 <HAL_GetTick>
 801ba44:	4602      	mov	r2, r0
 801ba46:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801ba4a:	1ad3      	subs	r3, r2, r3
 801ba4c:	2b64      	cmp	r3, #100	@ 0x64
 801ba4e:	d903      	bls.n	801ba58 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 801ba50:	2303      	movs	r3, #3
 801ba52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801ba56:	e005      	b.n	801ba64 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801ba58:	4b3f      	ldr	r3, [pc, #252]	@ (801bb58 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801ba5a:	681b      	ldr	r3, [r3, #0]
 801ba5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801ba60:	2b00      	cmp	r3, #0
 801ba62:	d0ed      	beq.n	801ba40 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 801ba64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ba68:	2b00      	cmp	r3, #0
 801ba6a:	d179      	bne.n	801bb60 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 801ba6c:	4b39      	ldr	r3, [pc, #228]	@ (801bb54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801ba6e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801ba70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ba74:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801ba78:	4053      	eors	r3, r2
 801ba7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801ba7e:	2b00      	cmp	r3, #0
 801ba80:	d015      	beq.n	801baae <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801ba82:	4b34      	ldr	r3, [pc, #208]	@ (801bb54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801ba84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ba86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801ba8a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801ba8e:	4b31      	ldr	r3, [pc, #196]	@ (801bb54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801ba90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ba92:	4a30      	ldr	r2, [pc, #192]	@ (801bb54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801ba94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801ba98:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 801ba9a:	4b2e      	ldr	r3, [pc, #184]	@ (801bb54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801ba9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ba9e:	4a2d      	ldr	r2, [pc, #180]	@ (801bb54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801baa0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801baa4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 801baa6:	4a2b      	ldr	r2, [pc, #172]	@ (801bb54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801baa8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801baac:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801baae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801bab2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801bab6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801baba:	d118      	bne.n	801baee <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801babc:	f7fb fca2 	bl	8017404 <HAL_GetTick>
 801bac0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801bac4:	e00d      	b.n	801bae2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801bac6:	f7fb fc9d 	bl	8017404 <HAL_GetTick>
 801baca:	4602      	mov	r2, r0
 801bacc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801bad0:	1ad2      	subs	r2, r2, r3
 801bad2:	f241 3388 	movw	r3, #5000	@ 0x1388
 801bad6:	429a      	cmp	r2, r3
 801bad8:	d903      	bls.n	801bae2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 801bada:	2303      	movs	r3, #3
 801badc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 801bae0:	e005      	b.n	801baee <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801bae2:	4b1c      	ldr	r3, [pc, #112]	@ (801bb54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801bae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801bae6:	f003 0302 	and.w	r3, r3, #2
 801baea:	2b00      	cmp	r3, #0
 801baec:	d0eb      	beq.n	801bac6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 801baee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801baf2:	2b00      	cmp	r3, #0
 801baf4:	d129      	bne.n	801bb4a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801baf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801bafa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801bafe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801bb02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801bb06:	d10e      	bne.n	801bb26 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 801bb08:	4b12      	ldr	r3, [pc, #72]	@ (801bb54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801bb0a:	691b      	ldr	r3, [r3, #16]
 801bb0c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 801bb10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801bb14:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801bb18:	091a      	lsrs	r2, r3, #4
 801bb1a:	4b10      	ldr	r3, [pc, #64]	@ (801bb5c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 801bb1c:	4013      	ands	r3, r2
 801bb1e:	4a0d      	ldr	r2, [pc, #52]	@ (801bb54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801bb20:	430b      	orrs	r3, r1
 801bb22:	6113      	str	r3, [r2, #16]
 801bb24:	e005      	b.n	801bb32 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 801bb26:	4b0b      	ldr	r3, [pc, #44]	@ (801bb54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801bb28:	691b      	ldr	r3, [r3, #16]
 801bb2a:	4a0a      	ldr	r2, [pc, #40]	@ (801bb54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801bb2c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801bb30:	6113      	str	r3, [r2, #16]
 801bb32:	4b08      	ldr	r3, [pc, #32]	@ (801bb54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801bb34:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 801bb36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801bb3a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801bb3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801bb42:	4a04      	ldr	r2, [pc, #16]	@ (801bb54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801bb44:	430b      	orrs	r3, r1
 801bb46:	6713      	str	r3, [r2, #112]	@ 0x70
 801bb48:	e00e      	b.n	801bb68 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801bb4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801bb4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801bb52:	e009      	b.n	801bb68 <HAL_RCCEx_PeriphCLKConfig+0x924>
 801bb54:	58024400 	.word	0x58024400
 801bb58:	58024800 	.word	0x58024800
 801bb5c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801bb60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801bb64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 801bb68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801bb6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb70:	f002 0301 	and.w	r3, r2, #1
 801bb74:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801bb78:	2300      	movs	r3, #0
 801bb7a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801bb7e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 801bb82:	460b      	mov	r3, r1
 801bb84:	4313      	orrs	r3, r2
 801bb86:	f000 8089 	beq.w	801bc9c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 801bb8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801bb8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801bb90:	2b28      	cmp	r3, #40	@ 0x28
 801bb92:	d86b      	bhi.n	801bc6c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 801bb94:	a201      	add	r2, pc, #4	@ (adr r2, 801bb9c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 801bb96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bb9a:	bf00      	nop
 801bb9c:	0801bc75 	.word	0x0801bc75
 801bba0:	0801bc6d 	.word	0x0801bc6d
 801bba4:	0801bc6d 	.word	0x0801bc6d
 801bba8:	0801bc6d 	.word	0x0801bc6d
 801bbac:	0801bc6d 	.word	0x0801bc6d
 801bbb0:	0801bc6d 	.word	0x0801bc6d
 801bbb4:	0801bc6d 	.word	0x0801bc6d
 801bbb8:	0801bc6d 	.word	0x0801bc6d
 801bbbc:	0801bc41 	.word	0x0801bc41
 801bbc0:	0801bc6d 	.word	0x0801bc6d
 801bbc4:	0801bc6d 	.word	0x0801bc6d
 801bbc8:	0801bc6d 	.word	0x0801bc6d
 801bbcc:	0801bc6d 	.word	0x0801bc6d
 801bbd0:	0801bc6d 	.word	0x0801bc6d
 801bbd4:	0801bc6d 	.word	0x0801bc6d
 801bbd8:	0801bc6d 	.word	0x0801bc6d
 801bbdc:	0801bc57 	.word	0x0801bc57
 801bbe0:	0801bc6d 	.word	0x0801bc6d
 801bbe4:	0801bc6d 	.word	0x0801bc6d
 801bbe8:	0801bc6d 	.word	0x0801bc6d
 801bbec:	0801bc6d 	.word	0x0801bc6d
 801bbf0:	0801bc6d 	.word	0x0801bc6d
 801bbf4:	0801bc6d 	.word	0x0801bc6d
 801bbf8:	0801bc6d 	.word	0x0801bc6d
 801bbfc:	0801bc75 	.word	0x0801bc75
 801bc00:	0801bc6d 	.word	0x0801bc6d
 801bc04:	0801bc6d 	.word	0x0801bc6d
 801bc08:	0801bc6d 	.word	0x0801bc6d
 801bc0c:	0801bc6d 	.word	0x0801bc6d
 801bc10:	0801bc6d 	.word	0x0801bc6d
 801bc14:	0801bc6d 	.word	0x0801bc6d
 801bc18:	0801bc6d 	.word	0x0801bc6d
 801bc1c:	0801bc75 	.word	0x0801bc75
 801bc20:	0801bc6d 	.word	0x0801bc6d
 801bc24:	0801bc6d 	.word	0x0801bc6d
 801bc28:	0801bc6d 	.word	0x0801bc6d
 801bc2c:	0801bc6d 	.word	0x0801bc6d
 801bc30:	0801bc6d 	.word	0x0801bc6d
 801bc34:	0801bc6d 	.word	0x0801bc6d
 801bc38:	0801bc6d 	.word	0x0801bc6d
 801bc3c:	0801bc75 	.word	0x0801bc75
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801bc40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801bc44:	3308      	adds	r3, #8
 801bc46:	2101      	movs	r1, #1
 801bc48:	4618      	mov	r0, r3
 801bc4a:	f001 fe95 	bl	801d978 <RCCEx_PLL2_Config>
 801bc4e:	4603      	mov	r3, r0
 801bc50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801bc54:	e00f      	b.n	801bc76 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801bc56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801bc5a:	3328      	adds	r3, #40	@ 0x28
 801bc5c:	2101      	movs	r1, #1
 801bc5e:	4618      	mov	r0, r3
 801bc60:	f001 ff3c 	bl	801dadc <RCCEx_PLL3_Config>
 801bc64:	4603      	mov	r3, r0
 801bc66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801bc6a:	e004      	b.n	801bc76 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801bc6c:	2301      	movs	r3, #1
 801bc6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801bc72:	e000      	b.n	801bc76 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 801bc74:	bf00      	nop
    }

    if (ret == HAL_OK)
 801bc76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801bc7a:	2b00      	cmp	r3, #0
 801bc7c:	d10a      	bne.n	801bc94 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 801bc7e:	4bbf      	ldr	r3, [pc, #764]	@ (801bf7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801bc80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801bc82:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 801bc86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801bc8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801bc8c:	4abb      	ldr	r2, [pc, #748]	@ (801bf7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801bc8e:	430b      	orrs	r3, r1
 801bc90:	6553      	str	r3, [r2, #84]	@ 0x54
 801bc92:	e003      	b.n	801bc9c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801bc94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801bc98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 801bc9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801bca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bca4:	f002 0302 	and.w	r3, r2, #2
 801bca8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801bcac:	2300      	movs	r3, #0
 801bcae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801bcb2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 801bcb6:	460b      	mov	r3, r1
 801bcb8:	4313      	orrs	r3, r2
 801bcba:	d041      	beq.n	801bd40 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 801bcbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801bcc0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801bcc2:	2b05      	cmp	r3, #5
 801bcc4:	d824      	bhi.n	801bd10 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 801bcc6:	a201      	add	r2, pc, #4	@ (adr r2, 801bccc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 801bcc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bccc:	0801bd19 	.word	0x0801bd19
 801bcd0:	0801bce5 	.word	0x0801bce5
 801bcd4:	0801bcfb 	.word	0x0801bcfb
 801bcd8:	0801bd19 	.word	0x0801bd19
 801bcdc:	0801bd19 	.word	0x0801bd19
 801bce0:	0801bd19 	.word	0x0801bd19
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801bce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801bce8:	3308      	adds	r3, #8
 801bcea:	2101      	movs	r1, #1
 801bcec:	4618      	mov	r0, r3
 801bcee:	f001 fe43 	bl	801d978 <RCCEx_PLL2_Config>
 801bcf2:	4603      	mov	r3, r0
 801bcf4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801bcf8:	e00f      	b.n	801bd1a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801bcfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801bcfe:	3328      	adds	r3, #40	@ 0x28
 801bd00:	2101      	movs	r1, #1
 801bd02:	4618      	mov	r0, r3
 801bd04:	f001 feea 	bl	801dadc <RCCEx_PLL3_Config>
 801bd08:	4603      	mov	r3, r0
 801bd0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801bd0e:	e004      	b.n	801bd1a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801bd10:	2301      	movs	r3, #1
 801bd12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801bd16:	e000      	b.n	801bd1a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 801bd18:	bf00      	nop
    }

    if (ret == HAL_OK)
 801bd1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801bd1e:	2b00      	cmp	r3, #0
 801bd20:	d10a      	bne.n	801bd38 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 801bd22:	4b96      	ldr	r3, [pc, #600]	@ (801bf7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801bd24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801bd26:	f023 0107 	bic.w	r1, r3, #7
 801bd2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801bd2e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801bd30:	4a92      	ldr	r2, [pc, #584]	@ (801bf7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801bd32:	430b      	orrs	r3, r1
 801bd34:	6553      	str	r3, [r2, #84]	@ 0x54
 801bd36:	e003      	b.n	801bd40 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801bd38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801bd3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801bd40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801bd44:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd48:	f002 0304 	and.w	r3, r2, #4
 801bd4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801bd50:	2300      	movs	r3, #0
 801bd52:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801bd56:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 801bd5a:	460b      	mov	r3, r1
 801bd5c:	4313      	orrs	r3, r2
 801bd5e:	d044      	beq.n	801bdea <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 801bd60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801bd64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801bd68:	2b05      	cmp	r3, #5
 801bd6a:	d825      	bhi.n	801bdb8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 801bd6c:	a201      	add	r2, pc, #4	@ (adr r2, 801bd74 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 801bd6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bd72:	bf00      	nop
 801bd74:	0801bdc1 	.word	0x0801bdc1
 801bd78:	0801bd8d 	.word	0x0801bd8d
 801bd7c:	0801bda3 	.word	0x0801bda3
 801bd80:	0801bdc1 	.word	0x0801bdc1
 801bd84:	0801bdc1 	.word	0x0801bdc1
 801bd88:	0801bdc1 	.word	0x0801bdc1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801bd8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801bd90:	3308      	adds	r3, #8
 801bd92:	2101      	movs	r1, #1
 801bd94:	4618      	mov	r0, r3
 801bd96:	f001 fdef 	bl	801d978 <RCCEx_PLL2_Config>
 801bd9a:	4603      	mov	r3, r0
 801bd9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801bda0:	e00f      	b.n	801bdc2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801bda2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801bda6:	3328      	adds	r3, #40	@ 0x28
 801bda8:	2101      	movs	r1, #1
 801bdaa:	4618      	mov	r0, r3
 801bdac:	f001 fe96 	bl	801dadc <RCCEx_PLL3_Config>
 801bdb0:	4603      	mov	r3, r0
 801bdb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801bdb6:	e004      	b.n	801bdc2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801bdb8:	2301      	movs	r3, #1
 801bdba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801bdbe:	e000      	b.n	801bdc2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 801bdc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 801bdc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801bdc6:	2b00      	cmp	r3, #0
 801bdc8:	d10b      	bne.n	801bde2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801bdca:	4b6c      	ldr	r3, [pc, #432]	@ (801bf7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801bdcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801bdce:	f023 0107 	bic.w	r1, r3, #7
 801bdd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801bdd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801bdda:	4a68      	ldr	r2, [pc, #416]	@ (801bf7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801bddc:	430b      	orrs	r3, r1
 801bdde:	6593      	str	r3, [r2, #88]	@ 0x58
 801bde0:	e003      	b.n	801bdea <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801bde2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801bde6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801bdea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801bdee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bdf2:	f002 0320 	and.w	r3, r2, #32
 801bdf6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801bdfa:	2300      	movs	r3, #0
 801bdfc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801be00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 801be04:	460b      	mov	r3, r1
 801be06:	4313      	orrs	r3, r2
 801be08:	d055      	beq.n	801beb6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 801be0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801be0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801be12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801be16:	d033      	beq.n	801be80 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 801be18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801be1c:	d82c      	bhi.n	801be78 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801be1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801be22:	d02f      	beq.n	801be84 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 801be24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801be28:	d826      	bhi.n	801be78 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801be2a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801be2e:	d02b      	beq.n	801be88 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 801be30:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801be34:	d820      	bhi.n	801be78 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801be36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801be3a:	d012      	beq.n	801be62 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 801be3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801be40:	d81a      	bhi.n	801be78 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801be42:	2b00      	cmp	r3, #0
 801be44:	d022      	beq.n	801be8c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 801be46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801be4a:	d115      	bne.n	801be78 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801be4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801be50:	3308      	adds	r3, #8
 801be52:	2100      	movs	r1, #0
 801be54:	4618      	mov	r0, r3
 801be56:	f001 fd8f 	bl	801d978 <RCCEx_PLL2_Config>
 801be5a:	4603      	mov	r3, r0
 801be5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801be60:	e015      	b.n	801be8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801be62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801be66:	3328      	adds	r3, #40	@ 0x28
 801be68:	2102      	movs	r1, #2
 801be6a:	4618      	mov	r0, r3
 801be6c:	f001 fe36 	bl	801dadc <RCCEx_PLL3_Config>
 801be70:	4603      	mov	r3, r0
 801be72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801be76:	e00a      	b.n	801be8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801be78:	2301      	movs	r3, #1
 801be7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801be7e:	e006      	b.n	801be8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801be80:	bf00      	nop
 801be82:	e004      	b.n	801be8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801be84:	bf00      	nop
 801be86:	e002      	b.n	801be8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801be88:	bf00      	nop
 801be8a:	e000      	b.n	801be8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801be8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801be8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801be92:	2b00      	cmp	r3, #0
 801be94:	d10b      	bne.n	801beae <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801be96:	4b39      	ldr	r3, [pc, #228]	@ (801bf7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801be98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801be9a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801be9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801bea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801bea6:	4a35      	ldr	r2, [pc, #212]	@ (801bf7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801bea8:	430b      	orrs	r3, r1
 801beaa:	6553      	str	r3, [r2, #84]	@ 0x54
 801beac:	e003      	b.n	801beb6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801beae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801beb2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 801beb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801beba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bebe:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 801bec2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801bec6:	2300      	movs	r3, #0
 801bec8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801becc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 801bed0:	460b      	mov	r3, r1
 801bed2:	4313      	orrs	r3, r2
 801bed4:	d058      	beq.n	801bf88 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 801bed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801beda:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801bede:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801bee2:	d033      	beq.n	801bf4c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 801bee4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801bee8:	d82c      	bhi.n	801bf44 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801beea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801beee:	d02f      	beq.n	801bf50 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 801bef0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801bef4:	d826      	bhi.n	801bf44 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801bef6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801befa:	d02b      	beq.n	801bf54 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 801befc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801bf00:	d820      	bhi.n	801bf44 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801bf02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801bf06:	d012      	beq.n	801bf2e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 801bf08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801bf0c:	d81a      	bhi.n	801bf44 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801bf0e:	2b00      	cmp	r3, #0
 801bf10:	d022      	beq.n	801bf58 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 801bf12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801bf16:	d115      	bne.n	801bf44 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801bf18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801bf1c:	3308      	adds	r3, #8
 801bf1e:	2100      	movs	r1, #0
 801bf20:	4618      	mov	r0, r3
 801bf22:	f001 fd29 	bl	801d978 <RCCEx_PLL2_Config>
 801bf26:	4603      	mov	r3, r0
 801bf28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801bf2c:	e015      	b.n	801bf5a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801bf2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801bf32:	3328      	adds	r3, #40	@ 0x28
 801bf34:	2102      	movs	r1, #2
 801bf36:	4618      	mov	r0, r3
 801bf38:	f001 fdd0 	bl	801dadc <RCCEx_PLL3_Config>
 801bf3c:	4603      	mov	r3, r0
 801bf3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801bf42:	e00a      	b.n	801bf5a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801bf44:	2301      	movs	r3, #1
 801bf46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801bf4a:	e006      	b.n	801bf5a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801bf4c:	bf00      	nop
 801bf4e:	e004      	b.n	801bf5a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801bf50:	bf00      	nop
 801bf52:	e002      	b.n	801bf5a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801bf54:	bf00      	nop
 801bf56:	e000      	b.n	801bf5a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801bf58:	bf00      	nop
    }

    if (ret == HAL_OK)
 801bf5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801bf5e:	2b00      	cmp	r3, #0
 801bf60:	d10e      	bne.n	801bf80 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801bf62:	4b06      	ldr	r3, [pc, #24]	@ (801bf7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801bf64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801bf66:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 801bf6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801bf6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801bf72:	4a02      	ldr	r2, [pc, #8]	@ (801bf7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801bf74:	430b      	orrs	r3, r1
 801bf76:	6593      	str	r3, [r2, #88]	@ 0x58
 801bf78:	e006      	b.n	801bf88 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 801bf7a:	bf00      	nop
 801bf7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801bf80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801bf84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 801bf88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801bf8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf90:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 801bf94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801bf98:	2300      	movs	r3, #0
 801bf9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801bf9e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 801bfa2:	460b      	mov	r3, r1
 801bfa4:	4313      	orrs	r3, r2
 801bfa6:	d055      	beq.n	801c054 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 801bfa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801bfac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801bfb0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 801bfb4:	d033      	beq.n	801c01e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 801bfb6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 801bfba:	d82c      	bhi.n	801c016 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801bfbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801bfc0:	d02f      	beq.n	801c022 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 801bfc2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801bfc6:	d826      	bhi.n	801c016 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801bfc8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801bfcc:	d02b      	beq.n	801c026 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 801bfce:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801bfd2:	d820      	bhi.n	801c016 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801bfd4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801bfd8:	d012      	beq.n	801c000 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 801bfda:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801bfde:	d81a      	bhi.n	801c016 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801bfe0:	2b00      	cmp	r3, #0
 801bfe2:	d022      	beq.n	801c02a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 801bfe4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801bfe8:	d115      	bne.n	801c016 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801bfea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801bfee:	3308      	adds	r3, #8
 801bff0:	2100      	movs	r1, #0
 801bff2:	4618      	mov	r0, r3
 801bff4:	f001 fcc0 	bl	801d978 <RCCEx_PLL2_Config>
 801bff8:	4603      	mov	r3, r0
 801bffa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801bffe:	e015      	b.n	801c02c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801c000:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c004:	3328      	adds	r3, #40	@ 0x28
 801c006:	2102      	movs	r1, #2
 801c008:	4618      	mov	r0, r3
 801c00a:	f001 fd67 	bl	801dadc <RCCEx_PLL3_Config>
 801c00e:	4603      	mov	r3, r0
 801c010:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801c014:	e00a      	b.n	801c02c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c016:	2301      	movs	r3, #1
 801c018:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801c01c:	e006      	b.n	801c02c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801c01e:	bf00      	nop
 801c020:	e004      	b.n	801c02c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801c022:	bf00      	nop
 801c024:	e002      	b.n	801c02c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801c026:	bf00      	nop
 801c028:	e000      	b.n	801c02c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801c02a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c02c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c030:	2b00      	cmp	r3, #0
 801c032:	d10b      	bne.n	801c04c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 801c034:	4ba1      	ldr	r3, [pc, #644]	@ (801c2bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801c036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801c038:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 801c03c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c040:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801c044:	4a9d      	ldr	r2, [pc, #628]	@ (801c2bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801c046:	430b      	orrs	r3, r1
 801c048:	6593      	str	r3, [r2, #88]	@ 0x58
 801c04a:	e003      	b.n	801c054 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c04c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c050:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 801c054:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c058:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c05c:	f002 0308 	and.w	r3, r2, #8
 801c060:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801c064:	2300      	movs	r3, #0
 801c066:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801c06a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 801c06e:	460b      	mov	r3, r1
 801c070:	4313      	orrs	r3, r2
 801c072:	d01e      	beq.n	801c0b2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 801c074:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c078:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801c07c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801c080:	d10c      	bne.n	801c09c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801c082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c086:	3328      	adds	r3, #40	@ 0x28
 801c088:	2102      	movs	r1, #2
 801c08a:	4618      	mov	r0, r3
 801c08c:	f001 fd26 	bl	801dadc <RCCEx_PLL3_Config>
 801c090:	4603      	mov	r3, r0
 801c092:	2b00      	cmp	r3, #0
 801c094:	d002      	beq.n	801c09c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 801c096:	2301      	movs	r3, #1
 801c098:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 801c09c:	4b87      	ldr	r3, [pc, #540]	@ (801c2bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801c09e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801c0a0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801c0a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c0a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801c0ac:	4a83      	ldr	r2, [pc, #524]	@ (801c2bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801c0ae:	430b      	orrs	r3, r1
 801c0b0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801c0b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0ba:	f002 0310 	and.w	r3, r2, #16
 801c0be:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801c0c2:	2300      	movs	r3, #0
 801c0c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801c0c8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 801c0cc:	460b      	mov	r3, r1
 801c0ce:	4313      	orrs	r3, r2
 801c0d0:	d01e      	beq.n	801c110 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 801c0d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c0d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801c0da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801c0de:	d10c      	bne.n	801c0fa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801c0e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c0e4:	3328      	adds	r3, #40	@ 0x28
 801c0e6:	2102      	movs	r1, #2
 801c0e8:	4618      	mov	r0, r3
 801c0ea:	f001 fcf7 	bl	801dadc <RCCEx_PLL3_Config>
 801c0ee:	4603      	mov	r3, r0
 801c0f0:	2b00      	cmp	r3, #0
 801c0f2:	d002      	beq.n	801c0fa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 801c0f4:	2301      	movs	r3, #1
 801c0f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801c0fa:	4b70      	ldr	r3, [pc, #448]	@ (801c2bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801c0fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801c0fe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801c102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c106:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801c10a:	4a6c      	ldr	r2, [pc, #432]	@ (801c2bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801c10c:	430b      	orrs	r3, r1
 801c10e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801c110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c114:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c118:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 801c11c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801c120:	2300      	movs	r3, #0
 801c122:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801c126:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 801c12a:	460b      	mov	r3, r1
 801c12c:	4313      	orrs	r3, r2
 801c12e:	d03e      	beq.n	801c1ae <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 801c130:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c134:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801c138:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801c13c:	d022      	beq.n	801c184 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 801c13e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801c142:	d81b      	bhi.n	801c17c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 801c144:	2b00      	cmp	r3, #0
 801c146:	d003      	beq.n	801c150 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 801c148:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c14c:	d00b      	beq.n	801c166 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 801c14e:	e015      	b.n	801c17c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801c150:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c154:	3308      	adds	r3, #8
 801c156:	2100      	movs	r1, #0
 801c158:	4618      	mov	r0, r3
 801c15a:	f001 fc0d 	bl	801d978 <RCCEx_PLL2_Config>
 801c15e:	4603      	mov	r3, r0
 801c160:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 801c164:	e00f      	b.n	801c186 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801c166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c16a:	3328      	adds	r3, #40	@ 0x28
 801c16c:	2102      	movs	r1, #2
 801c16e:	4618      	mov	r0, r3
 801c170:	f001 fcb4 	bl	801dadc <RCCEx_PLL3_Config>
 801c174:	4603      	mov	r3, r0
 801c176:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 801c17a:	e004      	b.n	801c186 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c17c:	2301      	movs	r3, #1
 801c17e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801c182:	e000      	b.n	801c186 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 801c184:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c186:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c18a:	2b00      	cmp	r3, #0
 801c18c:	d10b      	bne.n	801c1a6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801c18e:	4b4b      	ldr	r3, [pc, #300]	@ (801c2bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801c190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801c192:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 801c196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c19a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801c19e:	4a47      	ldr	r2, [pc, #284]	@ (801c2bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801c1a0:	430b      	orrs	r3, r1
 801c1a2:	6593      	str	r3, [r2, #88]	@ 0x58
 801c1a4:	e003      	b.n	801c1ae <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c1a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c1aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801c1ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1b6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 801c1ba:	67bb      	str	r3, [r7, #120]	@ 0x78
 801c1bc:	2300      	movs	r3, #0
 801c1be:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801c1c0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 801c1c4:	460b      	mov	r3, r1
 801c1c6:	4313      	orrs	r3, r2
 801c1c8:	d03b      	beq.n	801c242 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 801c1ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c1ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801c1d2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801c1d6:	d01f      	beq.n	801c218 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 801c1d8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801c1dc:	d818      	bhi.n	801c210 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 801c1de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801c1e2:	d003      	beq.n	801c1ec <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 801c1e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801c1e8:	d007      	beq.n	801c1fa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 801c1ea:	e011      	b.n	801c210 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c1ec:	4b33      	ldr	r3, [pc, #204]	@ (801c2bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801c1ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c1f0:	4a32      	ldr	r2, [pc, #200]	@ (801c2bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801c1f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801c1f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 801c1f8:	e00f      	b.n	801c21a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801c1fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c1fe:	3328      	adds	r3, #40	@ 0x28
 801c200:	2101      	movs	r1, #1
 801c202:	4618      	mov	r0, r3
 801c204:	f001 fc6a 	bl	801dadc <RCCEx_PLL3_Config>
 801c208:	4603      	mov	r3, r0
 801c20a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 801c20e:	e004      	b.n	801c21a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c210:	2301      	movs	r3, #1
 801c212:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801c216:	e000      	b.n	801c21a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 801c218:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c21a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c21e:	2b00      	cmp	r3, #0
 801c220:	d10b      	bne.n	801c23a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801c222:	4b26      	ldr	r3, [pc, #152]	@ (801c2bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801c224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801c226:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801c22a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c22e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801c232:	4a22      	ldr	r2, [pc, #136]	@ (801c2bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801c234:	430b      	orrs	r3, r1
 801c236:	6553      	str	r3, [r2, #84]	@ 0x54
 801c238:	e003      	b.n	801c242 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c23a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c23e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801c242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c246:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c24a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 801c24e:	673b      	str	r3, [r7, #112]	@ 0x70
 801c250:	2300      	movs	r3, #0
 801c252:	677b      	str	r3, [r7, #116]	@ 0x74
 801c254:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 801c258:	460b      	mov	r3, r1
 801c25a:	4313      	orrs	r3, r2
 801c25c:	d034      	beq.n	801c2c8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 801c25e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c262:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801c264:	2b00      	cmp	r3, #0
 801c266:	d003      	beq.n	801c270 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 801c268:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c26c:	d007      	beq.n	801c27e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 801c26e:	e011      	b.n	801c294 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c270:	4b12      	ldr	r3, [pc, #72]	@ (801c2bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801c272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c274:	4a11      	ldr	r2, [pc, #68]	@ (801c2bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801c276:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801c27a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801c27c:	e00e      	b.n	801c29c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801c27e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c282:	3308      	adds	r3, #8
 801c284:	2102      	movs	r1, #2
 801c286:	4618      	mov	r0, r3
 801c288:	f001 fb76 	bl	801d978 <RCCEx_PLL2_Config>
 801c28c:	4603      	mov	r3, r0
 801c28e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801c292:	e003      	b.n	801c29c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 801c294:	2301      	movs	r3, #1
 801c296:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801c29a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c29c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c2a0:	2b00      	cmp	r3, #0
 801c2a2:	d10d      	bne.n	801c2c0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 801c2a4:	4b05      	ldr	r3, [pc, #20]	@ (801c2bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801c2a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c2a8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801c2ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c2b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801c2b2:	4a02      	ldr	r2, [pc, #8]	@ (801c2bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801c2b4:	430b      	orrs	r3, r1
 801c2b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801c2b8:	e006      	b.n	801c2c8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 801c2ba:	bf00      	nop
 801c2bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c2c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c2c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801c2c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2d0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 801c2d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 801c2d6:	2300      	movs	r3, #0
 801c2d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801c2da:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 801c2de:	460b      	mov	r3, r1
 801c2e0:	4313      	orrs	r3, r2
 801c2e2:	d00c      	beq.n	801c2fe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801c2e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c2e8:	3328      	adds	r3, #40	@ 0x28
 801c2ea:	2102      	movs	r1, #2
 801c2ec:	4618      	mov	r0, r3
 801c2ee:	f001 fbf5 	bl	801dadc <RCCEx_PLL3_Config>
 801c2f2:	4603      	mov	r3, r0
 801c2f4:	2b00      	cmp	r3, #0
 801c2f6:	d002      	beq.n	801c2fe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 801c2f8:	2301      	movs	r3, #1
 801c2fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801c2fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c302:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c306:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 801c30a:	663b      	str	r3, [r7, #96]	@ 0x60
 801c30c:	2300      	movs	r3, #0
 801c30e:	667b      	str	r3, [r7, #100]	@ 0x64
 801c310:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 801c314:	460b      	mov	r3, r1
 801c316:	4313      	orrs	r3, r2
 801c318:	d038      	beq.n	801c38c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 801c31a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c31e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801c322:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801c326:	d018      	beq.n	801c35a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 801c328:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801c32c:	d811      	bhi.n	801c352 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801c32e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801c332:	d014      	beq.n	801c35e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 801c334:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801c338:	d80b      	bhi.n	801c352 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801c33a:	2b00      	cmp	r3, #0
 801c33c:	d011      	beq.n	801c362 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 801c33e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801c342:	d106      	bne.n	801c352 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c344:	4bc3      	ldr	r3, [pc, #780]	@ (801c654 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801c346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c348:	4ac2      	ldr	r2, [pc, #776]	@ (801c654 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801c34a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801c34e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 801c350:	e008      	b.n	801c364 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c352:	2301      	movs	r3, #1
 801c354:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801c358:	e004      	b.n	801c364 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801c35a:	bf00      	nop
 801c35c:	e002      	b.n	801c364 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801c35e:	bf00      	nop
 801c360:	e000      	b.n	801c364 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801c362:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c364:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c368:	2b00      	cmp	r3, #0
 801c36a:	d10b      	bne.n	801c384 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801c36c:	4bb9      	ldr	r3, [pc, #740]	@ (801c654 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801c36e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801c370:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801c374:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c378:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801c37c:	4ab5      	ldr	r2, [pc, #724]	@ (801c654 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801c37e:	430b      	orrs	r3, r1
 801c380:	6553      	str	r3, [r2, #84]	@ 0x54
 801c382:	e003      	b.n	801c38c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c384:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c388:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801c38c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c390:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c394:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 801c398:	65bb      	str	r3, [r7, #88]	@ 0x58
 801c39a:	2300      	movs	r3, #0
 801c39c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801c39e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 801c3a2:	460b      	mov	r3, r1
 801c3a4:	4313      	orrs	r3, r2
 801c3a6:	d009      	beq.n	801c3bc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801c3a8:	4baa      	ldr	r3, [pc, #680]	@ (801c654 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801c3aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801c3ac:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801c3b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c3b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c3b6:	4aa7      	ldr	r2, [pc, #668]	@ (801c654 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801c3b8:	430b      	orrs	r3, r1
 801c3ba:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 801c3bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c3c4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 801c3c8:	653b      	str	r3, [r7, #80]	@ 0x50
 801c3ca:	2300      	movs	r3, #0
 801c3cc:	657b      	str	r3, [r7, #84]	@ 0x54
 801c3ce:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 801c3d2:	460b      	mov	r3, r1
 801c3d4:	4313      	orrs	r3, r2
 801c3d6:	d00a      	beq.n	801c3ee <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 801c3d8:	4b9e      	ldr	r3, [pc, #632]	@ (801c654 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801c3da:	691b      	ldr	r3, [r3, #16]
 801c3dc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 801c3e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c3e4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801c3e8:	4a9a      	ldr	r2, [pc, #616]	@ (801c654 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801c3ea:	430b      	orrs	r3, r1
 801c3ec:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801c3ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c3f6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 801c3fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 801c3fc:	2300      	movs	r3, #0
 801c3fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801c400:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 801c404:	460b      	mov	r3, r1
 801c406:	4313      	orrs	r3, r2
 801c408:	d009      	beq.n	801c41e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801c40a:	4b92      	ldr	r3, [pc, #584]	@ (801c654 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801c40c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801c40e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 801c412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c416:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801c418:	4a8e      	ldr	r2, [pc, #568]	@ (801c654 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801c41a:	430b      	orrs	r3, r1
 801c41c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801c41e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c422:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c426:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 801c42a:	643b      	str	r3, [r7, #64]	@ 0x40
 801c42c:	2300      	movs	r3, #0
 801c42e:	647b      	str	r3, [r7, #68]	@ 0x44
 801c430:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 801c434:	460b      	mov	r3, r1
 801c436:	4313      	orrs	r3, r2
 801c438:	d00e      	beq.n	801c458 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801c43a:	4b86      	ldr	r3, [pc, #536]	@ (801c654 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801c43c:	691b      	ldr	r3, [r3, #16]
 801c43e:	4a85      	ldr	r2, [pc, #532]	@ (801c654 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801c440:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 801c444:	6113      	str	r3, [r2, #16]
 801c446:	4b83      	ldr	r3, [pc, #524]	@ (801c654 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801c448:	6919      	ldr	r1, [r3, #16]
 801c44a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c44e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 801c452:	4a80      	ldr	r2, [pc, #512]	@ (801c654 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801c454:	430b      	orrs	r3, r1
 801c456:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 801c458:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c460:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 801c464:	63bb      	str	r3, [r7, #56]	@ 0x38
 801c466:	2300      	movs	r3, #0
 801c468:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801c46a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 801c46e:	460b      	mov	r3, r1
 801c470:	4313      	orrs	r3, r2
 801c472:	d009      	beq.n	801c488 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 801c474:	4b77      	ldr	r3, [pc, #476]	@ (801c654 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801c476:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c478:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801c47c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c480:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801c482:	4a74      	ldr	r2, [pc, #464]	@ (801c654 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801c484:	430b      	orrs	r3, r1
 801c486:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801c488:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c490:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 801c494:	633b      	str	r3, [r7, #48]	@ 0x30
 801c496:	2300      	movs	r3, #0
 801c498:	637b      	str	r3, [r7, #52]	@ 0x34
 801c49a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 801c49e:	460b      	mov	r3, r1
 801c4a0:	4313      	orrs	r3, r2
 801c4a2:	d00a      	beq.n	801c4ba <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801c4a4:	4b6b      	ldr	r3, [pc, #428]	@ (801c654 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801c4a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801c4a8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 801c4ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c4b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801c4b4:	4a67      	ldr	r2, [pc, #412]	@ (801c654 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801c4b6:	430b      	orrs	r3, r1
 801c4b8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 801c4ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c4be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c4c2:	2100      	movs	r1, #0
 801c4c4:	62b9      	str	r1, [r7, #40]	@ 0x28
 801c4c6:	f003 0301 	and.w	r3, r3, #1
 801c4ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c4cc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 801c4d0:	460b      	mov	r3, r1
 801c4d2:	4313      	orrs	r3, r2
 801c4d4:	d011      	beq.n	801c4fa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801c4d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c4da:	3308      	adds	r3, #8
 801c4dc:	2100      	movs	r1, #0
 801c4de:	4618      	mov	r0, r3
 801c4e0:	f001 fa4a 	bl	801d978 <RCCEx_PLL2_Config>
 801c4e4:	4603      	mov	r3, r0
 801c4e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801c4ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c4ee:	2b00      	cmp	r3, #0
 801c4f0:	d003      	beq.n	801c4fa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c4f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c4f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 801c4fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c502:	2100      	movs	r1, #0
 801c504:	6239      	str	r1, [r7, #32]
 801c506:	f003 0302 	and.w	r3, r3, #2
 801c50a:	627b      	str	r3, [r7, #36]	@ 0x24
 801c50c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801c510:	460b      	mov	r3, r1
 801c512:	4313      	orrs	r3, r2
 801c514:	d011      	beq.n	801c53a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801c516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c51a:	3308      	adds	r3, #8
 801c51c:	2101      	movs	r1, #1
 801c51e:	4618      	mov	r0, r3
 801c520:	f001 fa2a 	bl	801d978 <RCCEx_PLL2_Config>
 801c524:	4603      	mov	r3, r0
 801c526:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801c52a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c52e:	2b00      	cmp	r3, #0
 801c530:	d003      	beq.n	801c53a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c532:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c536:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 801c53a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c542:	2100      	movs	r1, #0
 801c544:	61b9      	str	r1, [r7, #24]
 801c546:	f003 0304 	and.w	r3, r3, #4
 801c54a:	61fb      	str	r3, [r7, #28]
 801c54c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801c550:	460b      	mov	r3, r1
 801c552:	4313      	orrs	r3, r2
 801c554:	d011      	beq.n	801c57a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801c556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c55a:	3308      	adds	r3, #8
 801c55c:	2102      	movs	r1, #2
 801c55e:	4618      	mov	r0, r3
 801c560:	f001 fa0a 	bl	801d978 <RCCEx_PLL2_Config>
 801c564:	4603      	mov	r3, r0
 801c566:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801c56a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c56e:	2b00      	cmp	r3, #0
 801c570:	d003      	beq.n	801c57a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c572:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c576:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 801c57a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c582:	2100      	movs	r1, #0
 801c584:	6139      	str	r1, [r7, #16]
 801c586:	f003 0308 	and.w	r3, r3, #8
 801c58a:	617b      	str	r3, [r7, #20]
 801c58c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801c590:	460b      	mov	r3, r1
 801c592:	4313      	orrs	r3, r2
 801c594:	d011      	beq.n	801c5ba <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801c596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c59a:	3328      	adds	r3, #40	@ 0x28
 801c59c:	2100      	movs	r1, #0
 801c59e:	4618      	mov	r0, r3
 801c5a0:	f001 fa9c 	bl	801dadc <RCCEx_PLL3_Config>
 801c5a4:	4603      	mov	r3, r0
 801c5a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 801c5aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c5ae:	2b00      	cmp	r3, #0
 801c5b0:	d003      	beq.n	801c5ba <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c5b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c5b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 801c5ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c5c2:	2100      	movs	r1, #0
 801c5c4:	60b9      	str	r1, [r7, #8]
 801c5c6:	f003 0310 	and.w	r3, r3, #16
 801c5ca:	60fb      	str	r3, [r7, #12]
 801c5cc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801c5d0:	460b      	mov	r3, r1
 801c5d2:	4313      	orrs	r3, r2
 801c5d4:	d011      	beq.n	801c5fa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801c5d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c5da:	3328      	adds	r3, #40	@ 0x28
 801c5dc:	2101      	movs	r1, #1
 801c5de:	4618      	mov	r0, r3
 801c5e0:	f001 fa7c 	bl	801dadc <RCCEx_PLL3_Config>
 801c5e4:	4603      	mov	r3, r0
 801c5e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801c5ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c5ee:	2b00      	cmp	r3, #0
 801c5f0:	d003      	beq.n	801c5fa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c5f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c5f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 801c5fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c602:	2100      	movs	r1, #0
 801c604:	6039      	str	r1, [r7, #0]
 801c606:	f003 0320 	and.w	r3, r3, #32
 801c60a:	607b      	str	r3, [r7, #4]
 801c60c:	e9d7 1200 	ldrd	r1, r2, [r7]
 801c610:	460b      	mov	r3, r1
 801c612:	4313      	orrs	r3, r2
 801c614:	d011      	beq.n	801c63a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801c616:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c61a:	3328      	adds	r3, #40	@ 0x28
 801c61c:	2102      	movs	r1, #2
 801c61e:	4618      	mov	r0, r3
 801c620:	f001 fa5c 	bl	801dadc <RCCEx_PLL3_Config>
 801c624:	4603      	mov	r3, r0
 801c626:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801c62a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c62e:	2b00      	cmp	r3, #0
 801c630:	d003      	beq.n	801c63a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c632:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c636:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 801c63a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801c63e:	2b00      	cmp	r3, #0
 801c640:	d101      	bne.n	801c646 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 801c642:	2300      	movs	r3, #0
 801c644:	e000      	b.n	801c648 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 801c646:	2301      	movs	r3, #1
}
 801c648:	4618      	mov	r0, r3
 801c64a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 801c64e:	46bd      	mov	sp, r7
 801c650:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801c654:	58024400 	.word	0x58024400

0801c658 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 801c658:	b580      	push	{r7, lr}
 801c65a:	b090      	sub	sp, #64	@ 0x40
 801c65c:	af00      	add	r7, sp, #0
 801c65e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 801c662:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c666:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 801c66a:	430b      	orrs	r3, r1
 801c66c:	f040 8094 	bne.w	801c798 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 801c670:	4b9e      	ldr	r3, [pc, #632]	@ (801c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801c672:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801c674:	f003 0307 	and.w	r3, r3, #7
 801c678:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 801c67a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c67c:	2b04      	cmp	r3, #4
 801c67e:	f200 8087 	bhi.w	801c790 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 801c682:	a201      	add	r2, pc, #4	@ (adr r2, 801c688 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 801c684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c688:	0801c69d 	.word	0x0801c69d
 801c68c:	0801c6c5 	.word	0x0801c6c5
 801c690:	0801c6ed 	.word	0x0801c6ed
 801c694:	0801c789 	.word	0x0801c789
 801c698:	0801c715 	.word	0x0801c715
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801c69c:	4b93      	ldr	r3, [pc, #588]	@ (801c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801c69e:	681b      	ldr	r3, [r3, #0]
 801c6a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801c6a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801c6a8:	d108      	bne.n	801c6bc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801c6aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801c6ae:	4618      	mov	r0, r3
 801c6b0:	f001 f810 	bl	801d6d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801c6b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c6b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801c6b8:	f000 bd45 	b.w	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801c6bc:	2300      	movs	r3, #0
 801c6be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801c6c0:	f000 bd41 	b.w	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801c6c4:	4b89      	ldr	r3, [pc, #548]	@ (801c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801c6c6:	681b      	ldr	r3, [r3, #0]
 801c6c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801c6cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801c6d0:	d108      	bne.n	801c6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801c6d2:	f107 0318 	add.w	r3, r7, #24
 801c6d6:	4618      	mov	r0, r3
 801c6d8:	f000 fd54 	bl	801d184 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801c6dc:	69bb      	ldr	r3, [r7, #24]
 801c6de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801c6e0:	f000 bd31 	b.w	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801c6e4:	2300      	movs	r3, #0
 801c6e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801c6e8:	f000 bd2d 	b.w	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801c6ec:	4b7f      	ldr	r3, [pc, #508]	@ (801c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801c6ee:	681b      	ldr	r3, [r3, #0]
 801c6f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801c6f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801c6f8:	d108      	bne.n	801c70c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801c6fa:	f107 030c 	add.w	r3, r7, #12
 801c6fe:	4618      	mov	r0, r3
 801c700:	f000 fe94 	bl	801d42c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801c704:	68fb      	ldr	r3, [r7, #12]
 801c706:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801c708:	f000 bd1d 	b.w	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801c70c:	2300      	movs	r3, #0
 801c70e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801c710:	f000 bd19 	b.w	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801c714:	4b75      	ldr	r3, [pc, #468]	@ (801c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801c716:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c718:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801c71c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801c71e:	4b73      	ldr	r3, [pc, #460]	@ (801c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801c720:	681b      	ldr	r3, [r3, #0]
 801c722:	f003 0304 	and.w	r3, r3, #4
 801c726:	2b04      	cmp	r3, #4
 801c728:	d10c      	bne.n	801c744 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 801c72a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c72c:	2b00      	cmp	r3, #0
 801c72e:	d109      	bne.n	801c744 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801c730:	4b6e      	ldr	r3, [pc, #440]	@ (801c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801c732:	681b      	ldr	r3, [r3, #0]
 801c734:	08db      	lsrs	r3, r3, #3
 801c736:	f003 0303 	and.w	r3, r3, #3
 801c73a:	4a6d      	ldr	r2, [pc, #436]	@ (801c8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801c73c:	fa22 f303 	lsr.w	r3, r2, r3
 801c740:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801c742:	e01f      	b.n	801c784 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801c744:	4b69      	ldr	r3, [pc, #420]	@ (801c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801c746:	681b      	ldr	r3, [r3, #0]
 801c748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c74c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801c750:	d106      	bne.n	801c760 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 801c752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c754:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801c758:	d102      	bne.n	801c760 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801c75a:	4b66      	ldr	r3, [pc, #408]	@ (801c8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 801c75c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801c75e:	e011      	b.n	801c784 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801c760:	4b62      	ldr	r3, [pc, #392]	@ (801c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801c762:	681b      	ldr	r3, [r3, #0]
 801c764:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801c768:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801c76c:	d106      	bne.n	801c77c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 801c76e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c770:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801c774:	d102      	bne.n	801c77c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801c776:	4b60      	ldr	r3, [pc, #384]	@ (801c8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 801c778:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801c77a:	e003      	b.n	801c784 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801c77c:	2300      	movs	r3, #0
 801c77e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801c780:	f000 bce1 	b.w	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801c784:	f000 bcdf 	b.w	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801c788:	4b5c      	ldr	r3, [pc, #368]	@ (801c8fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 801c78a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801c78c:	f000 bcdb 	b.w	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 801c790:	2300      	movs	r3, #0
 801c792:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801c794:	f000 bcd7 	b.w	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 801c798:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c79c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 801c7a0:	430b      	orrs	r3, r1
 801c7a2:	f040 80ad 	bne.w	801c900 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 801c7a6:	4b51      	ldr	r3, [pc, #324]	@ (801c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801c7a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801c7aa:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 801c7ae:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 801c7b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c7b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801c7b6:	d056      	beq.n	801c866 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 801c7b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c7ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801c7be:	f200 8090 	bhi.w	801c8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 801c7c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c7c4:	2bc0      	cmp	r3, #192	@ 0xc0
 801c7c6:	f000 8088 	beq.w	801c8da <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 801c7ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c7cc:	2bc0      	cmp	r3, #192	@ 0xc0
 801c7ce:	f200 8088 	bhi.w	801c8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 801c7d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c7d4:	2b80      	cmp	r3, #128	@ 0x80
 801c7d6:	d032      	beq.n	801c83e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 801c7d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c7da:	2b80      	cmp	r3, #128	@ 0x80
 801c7dc:	f200 8081 	bhi.w	801c8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 801c7e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c7e2:	2b00      	cmp	r3, #0
 801c7e4:	d003      	beq.n	801c7ee <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 801c7e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c7e8:	2b40      	cmp	r3, #64	@ 0x40
 801c7ea:	d014      	beq.n	801c816 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 801c7ec:	e079      	b.n	801c8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801c7ee:	4b3f      	ldr	r3, [pc, #252]	@ (801c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801c7f0:	681b      	ldr	r3, [r3, #0]
 801c7f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801c7f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801c7fa:	d108      	bne.n	801c80e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801c7fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801c800:	4618      	mov	r0, r3
 801c802:	f000 ff67 	bl	801d6d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801c806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c808:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801c80a:	f000 bc9c 	b.w	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801c80e:	2300      	movs	r3, #0
 801c810:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801c812:	f000 bc98 	b.w	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801c816:	4b35      	ldr	r3, [pc, #212]	@ (801c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801c818:	681b      	ldr	r3, [r3, #0]
 801c81a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801c81e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801c822:	d108      	bne.n	801c836 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801c824:	f107 0318 	add.w	r3, r7, #24
 801c828:	4618      	mov	r0, r3
 801c82a:	f000 fcab 	bl	801d184 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801c82e:	69bb      	ldr	r3, [r7, #24]
 801c830:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801c832:	f000 bc88 	b.w	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801c836:	2300      	movs	r3, #0
 801c838:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801c83a:	f000 bc84 	b.w	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801c83e:	4b2b      	ldr	r3, [pc, #172]	@ (801c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801c840:	681b      	ldr	r3, [r3, #0]
 801c842:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801c846:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801c84a:	d108      	bne.n	801c85e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801c84c:	f107 030c 	add.w	r3, r7, #12
 801c850:	4618      	mov	r0, r3
 801c852:	f000 fdeb 	bl	801d42c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801c856:	68fb      	ldr	r3, [r7, #12]
 801c858:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801c85a:	f000 bc74 	b.w	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801c85e:	2300      	movs	r3, #0
 801c860:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801c862:	f000 bc70 	b.w	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801c866:	4b21      	ldr	r3, [pc, #132]	@ (801c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801c868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c86a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801c86e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801c870:	4b1e      	ldr	r3, [pc, #120]	@ (801c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801c872:	681b      	ldr	r3, [r3, #0]
 801c874:	f003 0304 	and.w	r3, r3, #4
 801c878:	2b04      	cmp	r3, #4
 801c87a:	d10c      	bne.n	801c896 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 801c87c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c87e:	2b00      	cmp	r3, #0
 801c880:	d109      	bne.n	801c896 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801c882:	4b1a      	ldr	r3, [pc, #104]	@ (801c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801c884:	681b      	ldr	r3, [r3, #0]
 801c886:	08db      	lsrs	r3, r3, #3
 801c888:	f003 0303 	and.w	r3, r3, #3
 801c88c:	4a18      	ldr	r2, [pc, #96]	@ (801c8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801c88e:	fa22 f303 	lsr.w	r3, r2, r3
 801c892:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801c894:	e01f      	b.n	801c8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801c896:	4b15      	ldr	r3, [pc, #84]	@ (801c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801c898:	681b      	ldr	r3, [r3, #0]
 801c89a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c89e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801c8a2:	d106      	bne.n	801c8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 801c8a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c8a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801c8aa:	d102      	bne.n	801c8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801c8ac:	4b11      	ldr	r3, [pc, #68]	@ (801c8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 801c8ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801c8b0:	e011      	b.n	801c8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801c8b2:	4b0e      	ldr	r3, [pc, #56]	@ (801c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801c8b4:	681b      	ldr	r3, [r3, #0]
 801c8b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801c8ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801c8be:	d106      	bne.n	801c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 801c8c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c8c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801c8c6:	d102      	bne.n	801c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801c8c8:	4b0b      	ldr	r3, [pc, #44]	@ (801c8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 801c8ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801c8cc:	e003      	b.n	801c8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801c8ce:	2300      	movs	r3, #0
 801c8d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801c8d2:	f000 bc38 	b.w	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801c8d6:	f000 bc36 	b.w	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801c8da:	4b08      	ldr	r3, [pc, #32]	@ (801c8fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 801c8dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801c8de:	f000 bc32 	b.w	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 801c8e2:	2300      	movs	r3, #0
 801c8e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801c8e6:	f000 bc2e 	b.w	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801c8ea:	bf00      	nop
 801c8ec:	58024400 	.word	0x58024400
 801c8f0:	03d09000 	.word	0x03d09000
 801c8f4:	003d0900 	.word	0x003d0900
 801c8f8:	017d7840 	.word	0x017d7840
 801c8fc:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 801c900:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c904:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 801c908:	430b      	orrs	r3, r1
 801c90a:	f040 809c 	bne.w	801ca46 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 801c90e:	4b9e      	ldr	r3, [pc, #632]	@ (801cb88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801c910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801c912:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 801c916:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 801c918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c91a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801c91e:	d054      	beq.n	801c9ca <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 801c920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c922:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801c926:	f200 808b 	bhi.w	801ca40 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 801c92a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c92c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801c930:	f000 8083 	beq.w	801ca3a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 801c934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c936:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801c93a:	f200 8081 	bhi.w	801ca40 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 801c93e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c940:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801c944:	d02f      	beq.n	801c9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 801c946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c948:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801c94c:	d878      	bhi.n	801ca40 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 801c94e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c950:	2b00      	cmp	r3, #0
 801c952:	d004      	beq.n	801c95e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 801c954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c956:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801c95a:	d012      	beq.n	801c982 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 801c95c:	e070      	b.n	801ca40 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801c95e:	4b8a      	ldr	r3, [pc, #552]	@ (801cb88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801c960:	681b      	ldr	r3, [r3, #0]
 801c962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801c966:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801c96a:	d107      	bne.n	801c97c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801c96c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801c970:	4618      	mov	r0, r3
 801c972:	f000 feaf 	bl	801d6d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801c976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c978:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801c97a:	e3e4      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801c97c:	2300      	movs	r3, #0
 801c97e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801c980:	e3e1      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801c982:	4b81      	ldr	r3, [pc, #516]	@ (801cb88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801c984:	681b      	ldr	r3, [r3, #0]
 801c986:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801c98a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801c98e:	d107      	bne.n	801c9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801c990:	f107 0318 	add.w	r3, r7, #24
 801c994:	4618      	mov	r0, r3
 801c996:	f000 fbf5 	bl	801d184 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801c99a:	69bb      	ldr	r3, [r7, #24]
 801c99c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801c99e:	e3d2      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801c9a0:	2300      	movs	r3, #0
 801c9a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801c9a4:	e3cf      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801c9a6:	4b78      	ldr	r3, [pc, #480]	@ (801cb88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801c9a8:	681b      	ldr	r3, [r3, #0]
 801c9aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801c9ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801c9b2:	d107      	bne.n	801c9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801c9b4:	f107 030c 	add.w	r3, r7, #12
 801c9b8:	4618      	mov	r0, r3
 801c9ba:	f000 fd37 	bl	801d42c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801c9be:	68fb      	ldr	r3, [r7, #12]
 801c9c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801c9c2:	e3c0      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801c9c4:	2300      	movs	r3, #0
 801c9c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801c9c8:	e3bd      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801c9ca:	4b6f      	ldr	r3, [pc, #444]	@ (801cb88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801c9cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c9ce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801c9d2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801c9d4:	4b6c      	ldr	r3, [pc, #432]	@ (801cb88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801c9d6:	681b      	ldr	r3, [r3, #0]
 801c9d8:	f003 0304 	and.w	r3, r3, #4
 801c9dc:	2b04      	cmp	r3, #4
 801c9de:	d10c      	bne.n	801c9fa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 801c9e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c9e2:	2b00      	cmp	r3, #0
 801c9e4:	d109      	bne.n	801c9fa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801c9e6:	4b68      	ldr	r3, [pc, #416]	@ (801cb88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801c9e8:	681b      	ldr	r3, [r3, #0]
 801c9ea:	08db      	lsrs	r3, r3, #3
 801c9ec:	f003 0303 	and.w	r3, r3, #3
 801c9f0:	4a66      	ldr	r2, [pc, #408]	@ (801cb8c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 801c9f2:	fa22 f303 	lsr.w	r3, r2, r3
 801c9f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801c9f8:	e01e      	b.n	801ca38 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801c9fa:	4b63      	ldr	r3, [pc, #396]	@ (801cb88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801c9fc:	681b      	ldr	r3, [r3, #0]
 801c9fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801ca02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801ca06:	d106      	bne.n	801ca16 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 801ca08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ca0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801ca0e:	d102      	bne.n	801ca16 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801ca10:	4b5f      	ldr	r3, [pc, #380]	@ (801cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 801ca12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ca14:	e010      	b.n	801ca38 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801ca16:	4b5c      	ldr	r3, [pc, #368]	@ (801cb88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801ca18:	681b      	ldr	r3, [r3, #0]
 801ca1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801ca1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801ca22:	d106      	bne.n	801ca32 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 801ca24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ca26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801ca2a:	d102      	bne.n	801ca32 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801ca2c:	4b59      	ldr	r3, [pc, #356]	@ (801cb94 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 801ca2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ca30:	e002      	b.n	801ca38 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801ca32:	2300      	movs	r3, #0
 801ca34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801ca36:	e386      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801ca38:	e385      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801ca3a:	4b57      	ldr	r3, [pc, #348]	@ (801cb98 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 801ca3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ca3e:	e382      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 801ca40:	2300      	movs	r3, #0
 801ca42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ca44:	e37f      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 801ca46:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ca4a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 801ca4e:	430b      	orrs	r3, r1
 801ca50:	f040 80a7 	bne.w	801cba2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 801ca54:	4b4c      	ldr	r3, [pc, #304]	@ (801cb88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801ca56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801ca58:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 801ca5c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 801ca5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ca60:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801ca64:	d055      	beq.n	801cb12 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 801ca66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ca68:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801ca6c:	f200 8096 	bhi.w	801cb9c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 801ca70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ca72:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801ca76:	f000 8084 	beq.w	801cb82 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 801ca7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ca7c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801ca80:	f200 808c 	bhi.w	801cb9c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 801ca84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ca86:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801ca8a:	d030      	beq.n	801caee <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 801ca8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ca8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801ca92:	f200 8083 	bhi.w	801cb9c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 801ca96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ca98:	2b00      	cmp	r3, #0
 801ca9a:	d004      	beq.n	801caa6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 801ca9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ca9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801caa2:	d012      	beq.n	801caca <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 801caa4:	e07a      	b.n	801cb9c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801caa6:	4b38      	ldr	r3, [pc, #224]	@ (801cb88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801caa8:	681b      	ldr	r3, [r3, #0]
 801caaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801caae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801cab2:	d107      	bne.n	801cac4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801cab4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801cab8:	4618      	mov	r0, r3
 801caba:	f000 fe0b 	bl	801d6d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801cabe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801cac2:	e340      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801cac4:	2300      	movs	r3, #0
 801cac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801cac8:	e33d      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801caca:	4b2f      	ldr	r3, [pc, #188]	@ (801cb88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801cacc:	681b      	ldr	r3, [r3, #0]
 801cace:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801cad2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801cad6:	d107      	bne.n	801cae8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801cad8:	f107 0318 	add.w	r3, r7, #24
 801cadc:	4618      	mov	r0, r3
 801cade:	f000 fb51 	bl	801d184 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801cae2:	69bb      	ldr	r3, [r7, #24]
 801cae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801cae6:	e32e      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801cae8:	2300      	movs	r3, #0
 801caea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801caec:	e32b      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801caee:	4b26      	ldr	r3, [pc, #152]	@ (801cb88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801caf0:	681b      	ldr	r3, [r3, #0]
 801caf2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801caf6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801cafa:	d107      	bne.n	801cb0c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801cafc:	f107 030c 	add.w	r3, r7, #12
 801cb00:	4618      	mov	r0, r3
 801cb02:	f000 fc93 	bl	801d42c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801cb06:	68fb      	ldr	r3, [r7, #12]
 801cb08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801cb0a:	e31c      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801cb0c:	2300      	movs	r3, #0
 801cb0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801cb10:	e319      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801cb12:	4b1d      	ldr	r3, [pc, #116]	@ (801cb88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801cb14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801cb16:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801cb1a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801cb1c:	4b1a      	ldr	r3, [pc, #104]	@ (801cb88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801cb1e:	681b      	ldr	r3, [r3, #0]
 801cb20:	f003 0304 	and.w	r3, r3, #4
 801cb24:	2b04      	cmp	r3, #4
 801cb26:	d10c      	bne.n	801cb42 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 801cb28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cb2a:	2b00      	cmp	r3, #0
 801cb2c:	d109      	bne.n	801cb42 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801cb2e:	4b16      	ldr	r3, [pc, #88]	@ (801cb88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801cb30:	681b      	ldr	r3, [r3, #0]
 801cb32:	08db      	lsrs	r3, r3, #3
 801cb34:	f003 0303 	and.w	r3, r3, #3
 801cb38:	4a14      	ldr	r2, [pc, #80]	@ (801cb8c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 801cb3a:	fa22 f303 	lsr.w	r3, r2, r3
 801cb3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801cb40:	e01e      	b.n	801cb80 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801cb42:	4b11      	ldr	r3, [pc, #68]	@ (801cb88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801cb44:	681b      	ldr	r3, [r3, #0]
 801cb46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801cb4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801cb4e:	d106      	bne.n	801cb5e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 801cb50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cb52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801cb56:	d102      	bne.n	801cb5e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801cb58:	4b0d      	ldr	r3, [pc, #52]	@ (801cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 801cb5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801cb5c:	e010      	b.n	801cb80 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801cb5e:	4b0a      	ldr	r3, [pc, #40]	@ (801cb88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801cb60:	681b      	ldr	r3, [r3, #0]
 801cb62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801cb66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801cb6a:	d106      	bne.n	801cb7a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 801cb6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cb6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801cb72:	d102      	bne.n	801cb7a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801cb74:	4b07      	ldr	r3, [pc, #28]	@ (801cb94 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 801cb76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801cb78:	e002      	b.n	801cb80 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801cb7a:	2300      	movs	r3, #0
 801cb7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801cb7e:	e2e2      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801cb80:	e2e1      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801cb82:	4b05      	ldr	r3, [pc, #20]	@ (801cb98 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 801cb84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801cb86:	e2de      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801cb88:	58024400 	.word	0x58024400
 801cb8c:	03d09000 	.word	0x03d09000
 801cb90:	003d0900 	.word	0x003d0900
 801cb94:	017d7840 	.word	0x017d7840
 801cb98:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 801cb9c:	2300      	movs	r3, #0
 801cb9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801cba0:	e2d1      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 801cba2:	e9d7 2300 	ldrd	r2, r3, [r7]
 801cba6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 801cbaa:	430b      	orrs	r3, r1
 801cbac:	f040 809c 	bne.w	801cce8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 801cbb0:	4b93      	ldr	r3, [pc, #588]	@ (801ce00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801cbb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801cbb4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 801cbb8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801cbba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cbbc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801cbc0:	d054      	beq.n	801cc6c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 801cbc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cbc4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801cbc8:	f200 808b 	bhi.w	801cce2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 801cbcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cbce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801cbd2:	f000 8083 	beq.w	801ccdc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 801cbd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cbd8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801cbdc:	f200 8081 	bhi.w	801cce2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 801cbe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cbe2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801cbe6:	d02f      	beq.n	801cc48 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 801cbe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cbea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801cbee:	d878      	bhi.n	801cce2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 801cbf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cbf2:	2b00      	cmp	r3, #0
 801cbf4:	d004      	beq.n	801cc00 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 801cbf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cbf8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801cbfc:	d012      	beq.n	801cc24 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 801cbfe:	e070      	b.n	801cce2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801cc00:	4b7f      	ldr	r3, [pc, #508]	@ (801ce00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801cc02:	681b      	ldr	r3, [r3, #0]
 801cc04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801cc08:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801cc0c:	d107      	bne.n	801cc1e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801cc0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801cc12:	4618      	mov	r0, r3
 801cc14:	f000 fd5e 	bl	801d6d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801cc18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cc1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801cc1c:	e293      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801cc1e:	2300      	movs	r3, #0
 801cc20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801cc22:	e290      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801cc24:	4b76      	ldr	r3, [pc, #472]	@ (801ce00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801cc26:	681b      	ldr	r3, [r3, #0]
 801cc28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801cc2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801cc30:	d107      	bne.n	801cc42 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801cc32:	f107 0318 	add.w	r3, r7, #24
 801cc36:	4618      	mov	r0, r3
 801cc38:	f000 faa4 	bl	801d184 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801cc3c:	69bb      	ldr	r3, [r7, #24]
 801cc3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801cc40:	e281      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801cc42:	2300      	movs	r3, #0
 801cc44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801cc46:	e27e      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801cc48:	4b6d      	ldr	r3, [pc, #436]	@ (801ce00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801cc4a:	681b      	ldr	r3, [r3, #0]
 801cc4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801cc50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801cc54:	d107      	bne.n	801cc66 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801cc56:	f107 030c 	add.w	r3, r7, #12
 801cc5a:	4618      	mov	r0, r3
 801cc5c:	f000 fbe6 	bl	801d42c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801cc60:	68fb      	ldr	r3, [r7, #12]
 801cc62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801cc64:	e26f      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801cc66:	2300      	movs	r3, #0
 801cc68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801cc6a:	e26c      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801cc6c:	4b64      	ldr	r3, [pc, #400]	@ (801ce00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801cc6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801cc70:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801cc74:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801cc76:	4b62      	ldr	r3, [pc, #392]	@ (801ce00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801cc78:	681b      	ldr	r3, [r3, #0]
 801cc7a:	f003 0304 	and.w	r3, r3, #4
 801cc7e:	2b04      	cmp	r3, #4
 801cc80:	d10c      	bne.n	801cc9c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 801cc82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cc84:	2b00      	cmp	r3, #0
 801cc86:	d109      	bne.n	801cc9c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801cc88:	4b5d      	ldr	r3, [pc, #372]	@ (801ce00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801cc8a:	681b      	ldr	r3, [r3, #0]
 801cc8c:	08db      	lsrs	r3, r3, #3
 801cc8e:	f003 0303 	and.w	r3, r3, #3
 801cc92:	4a5c      	ldr	r2, [pc, #368]	@ (801ce04 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 801cc94:	fa22 f303 	lsr.w	r3, r2, r3
 801cc98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801cc9a:	e01e      	b.n	801ccda <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801cc9c:	4b58      	ldr	r3, [pc, #352]	@ (801ce00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801cc9e:	681b      	ldr	r3, [r3, #0]
 801cca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801cca4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801cca8:	d106      	bne.n	801ccb8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 801ccaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ccac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801ccb0:	d102      	bne.n	801ccb8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801ccb2:	4b55      	ldr	r3, [pc, #340]	@ (801ce08 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 801ccb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ccb6:	e010      	b.n	801ccda <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801ccb8:	4b51      	ldr	r3, [pc, #324]	@ (801ce00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801ccba:	681b      	ldr	r3, [r3, #0]
 801ccbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801ccc0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801ccc4:	d106      	bne.n	801ccd4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 801ccc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ccc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801cccc:	d102      	bne.n	801ccd4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801ccce:	4b4f      	ldr	r3, [pc, #316]	@ (801ce0c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 801ccd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ccd2:	e002      	b.n	801ccda <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801ccd4:	2300      	movs	r3, #0
 801ccd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801ccd8:	e235      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801ccda:	e234      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801ccdc:	4b4c      	ldr	r3, [pc, #304]	@ (801ce10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 801ccde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801cce0:	e231      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 801cce2:	2300      	movs	r3, #0
 801cce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801cce6:	e22e      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 801cce8:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ccec:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 801ccf0:	430b      	orrs	r3, r1
 801ccf2:	f040 808f 	bne.w	801ce14 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 801ccf6:	4b42      	ldr	r3, [pc, #264]	@ (801ce00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801ccf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801ccfa:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 801ccfe:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 801cd00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd02:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801cd06:	d06b      	beq.n	801cde0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 801cd08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd0a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801cd0e:	d874      	bhi.n	801cdfa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 801cd10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd12:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801cd16:	d056      	beq.n	801cdc6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 801cd18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd1a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801cd1e:	d86c      	bhi.n	801cdfa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 801cd20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd22:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801cd26:	d03b      	beq.n	801cda0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 801cd28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd2a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801cd2e:	d864      	bhi.n	801cdfa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 801cd30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801cd36:	d021      	beq.n	801cd7c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 801cd38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801cd3e:	d85c      	bhi.n	801cdfa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 801cd40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd42:	2b00      	cmp	r3, #0
 801cd44:	d004      	beq.n	801cd50 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 801cd46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801cd4c:	d004      	beq.n	801cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 801cd4e:	e054      	b.n	801cdfa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 801cd50:	f7fe fa4c 	bl	801b1ec <HAL_RCC_GetPCLK1Freq>
 801cd54:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801cd56:	e1f6      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801cd58:	4b29      	ldr	r3, [pc, #164]	@ (801ce00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801cd5a:	681b      	ldr	r3, [r3, #0]
 801cd5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801cd60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801cd64:	d107      	bne.n	801cd76 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801cd66:	f107 0318 	add.w	r3, r7, #24
 801cd6a:	4618      	mov	r0, r3
 801cd6c:	f000 fa0a 	bl	801d184 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801cd70:	69fb      	ldr	r3, [r7, #28]
 801cd72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801cd74:	e1e7      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801cd76:	2300      	movs	r3, #0
 801cd78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801cd7a:	e1e4      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801cd7c:	4b20      	ldr	r3, [pc, #128]	@ (801ce00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801cd7e:	681b      	ldr	r3, [r3, #0]
 801cd80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801cd84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801cd88:	d107      	bne.n	801cd9a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801cd8a:	f107 030c 	add.w	r3, r7, #12
 801cd8e:	4618      	mov	r0, r3
 801cd90:	f000 fb4c 	bl	801d42c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801cd94:	693b      	ldr	r3, [r7, #16]
 801cd96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801cd98:	e1d5      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801cd9a:	2300      	movs	r3, #0
 801cd9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801cd9e:	e1d2      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801cda0:	4b17      	ldr	r3, [pc, #92]	@ (801ce00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801cda2:	681b      	ldr	r3, [r3, #0]
 801cda4:	f003 0304 	and.w	r3, r3, #4
 801cda8:	2b04      	cmp	r3, #4
 801cdaa:	d109      	bne.n	801cdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801cdac:	4b14      	ldr	r3, [pc, #80]	@ (801ce00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801cdae:	681b      	ldr	r3, [r3, #0]
 801cdb0:	08db      	lsrs	r3, r3, #3
 801cdb2:	f003 0303 	and.w	r3, r3, #3
 801cdb6:	4a13      	ldr	r2, [pc, #76]	@ (801ce04 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 801cdb8:	fa22 f303 	lsr.w	r3, r2, r3
 801cdbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801cdbe:	e1c2      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801cdc0:	2300      	movs	r3, #0
 801cdc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801cdc4:	e1bf      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 801cdc6:	4b0e      	ldr	r3, [pc, #56]	@ (801ce00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801cdc8:	681b      	ldr	r3, [r3, #0]
 801cdca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801cdce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801cdd2:	d102      	bne.n	801cdda <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 801cdd4:	4b0c      	ldr	r3, [pc, #48]	@ (801ce08 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 801cdd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801cdd8:	e1b5      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801cdda:	2300      	movs	r3, #0
 801cddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801cdde:	e1b2      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801cde0:	4b07      	ldr	r3, [pc, #28]	@ (801ce00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801cde2:	681b      	ldr	r3, [r3, #0]
 801cde4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801cde8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801cdec:	d102      	bne.n	801cdf4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 801cdee:	4b07      	ldr	r3, [pc, #28]	@ (801ce0c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 801cdf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801cdf2:	e1a8      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801cdf4:	2300      	movs	r3, #0
 801cdf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801cdf8:	e1a5      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 801cdfa:	2300      	movs	r3, #0
 801cdfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801cdfe:	e1a2      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801ce00:	58024400 	.word	0x58024400
 801ce04:	03d09000 	.word	0x03d09000
 801ce08:	003d0900 	.word	0x003d0900
 801ce0c:	017d7840 	.word	0x017d7840
 801ce10:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 801ce14:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ce18:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 801ce1c:	430b      	orrs	r3, r1
 801ce1e:	d173      	bne.n	801cf08 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 801ce20:	4b9c      	ldr	r3, [pc, #624]	@ (801d094 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801ce22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801ce24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 801ce28:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801ce2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801ce30:	d02f      	beq.n	801ce92 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 801ce32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801ce38:	d863      	bhi.n	801cf02 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 801ce3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce3c:	2b00      	cmp	r3, #0
 801ce3e:	d004      	beq.n	801ce4a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 801ce40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801ce46:	d012      	beq.n	801ce6e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 801ce48:	e05b      	b.n	801cf02 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801ce4a:	4b92      	ldr	r3, [pc, #584]	@ (801d094 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801ce4c:	681b      	ldr	r3, [r3, #0]
 801ce4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801ce52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801ce56:	d107      	bne.n	801ce68 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801ce58:	f107 0318 	add.w	r3, r7, #24
 801ce5c:	4618      	mov	r0, r3
 801ce5e:	f000 f991 	bl	801d184 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801ce62:	69bb      	ldr	r3, [r7, #24]
 801ce64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801ce66:	e16e      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801ce68:	2300      	movs	r3, #0
 801ce6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ce6c:	e16b      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801ce6e:	4b89      	ldr	r3, [pc, #548]	@ (801d094 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801ce70:	681b      	ldr	r3, [r3, #0]
 801ce72:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801ce76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801ce7a:	d107      	bne.n	801ce8c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801ce7c:	f107 030c 	add.w	r3, r7, #12
 801ce80:	4618      	mov	r0, r3
 801ce82:	f000 fad3 	bl	801d42c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 801ce86:	697b      	ldr	r3, [r7, #20]
 801ce88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801ce8a:	e15c      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801ce8c:	2300      	movs	r3, #0
 801ce8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ce90:	e159      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801ce92:	4b80      	ldr	r3, [pc, #512]	@ (801d094 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801ce94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801ce96:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801ce9a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801ce9c:	4b7d      	ldr	r3, [pc, #500]	@ (801d094 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801ce9e:	681b      	ldr	r3, [r3, #0]
 801cea0:	f003 0304 	and.w	r3, r3, #4
 801cea4:	2b04      	cmp	r3, #4
 801cea6:	d10c      	bne.n	801cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 801cea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ceaa:	2b00      	cmp	r3, #0
 801ceac:	d109      	bne.n	801cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801ceae:	4b79      	ldr	r3, [pc, #484]	@ (801d094 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801ceb0:	681b      	ldr	r3, [r3, #0]
 801ceb2:	08db      	lsrs	r3, r3, #3
 801ceb4:	f003 0303 	and.w	r3, r3, #3
 801ceb8:	4a77      	ldr	r2, [pc, #476]	@ (801d098 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 801ceba:	fa22 f303 	lsr.w	r3, r2, r3
 801cebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801cec0:	e01e      	b.n	801cf00 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801cec2:	4b74      	ldr	r3, [pc, #464]	@ (801d094 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801cec4:	681b      	ldr	r3, [r3, #0]
 801cec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801ceca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801cece:	d106      	bne.n	801cede <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 801ced0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ced2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801ced6:	d102      	bne.n	801cede <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801ced8:	4b70      	ldr	r3, [pc, #448]	@ (801d09c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 801ceda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801cedc:	e010      	b.n	801cf00 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801cede:	4b6d      	ldr	r3, [pc, #436]	@ (801d094 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801cee0:	681b      	ldr	r3, [r3, #0]
 801cee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801cee6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801ceea:	d106      	bne.n	801cefa <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 801ceec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ceee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801cef2:	d102      	bne.n	801cefa <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801cef4:	4b6a      	ldr	r3, [pc, #424]	@ (801d0a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 801cef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801cef8:	e002      	b.n	801cf00 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801cefa:	2300      	movs	r3, #0
 801cefc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801cefe:	e122      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801cf00:	e121      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 801cf02:	2300      	movs	r3, #0
 801cf04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801cf06:	e11e      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 801cf08:	e9d7 2300 	ldrd	r2, r3, [r7]
 801cf0c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 801cf10:	430b      	orrs	r3, r1
 801cf12:	d133      	bne.n	801cf7c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 801cf14:	4b5f      	ldr	r3, [pc, #380]	@ (801d094 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801cf16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801cf18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801cf1c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801cf1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf20:	2b00      	cmp	r3, #0
 801cf22:	d004      	beq.n	801cf2e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 801cf24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801cf2a:	d012      	beq.n	801cf52 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 801cf2c:	e023      	b.n	801cf76 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801cf2e:	4b59      	ldr	r3, [pc, #356]	@ (801d094 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801cf30:	681b      	ldr	r3, [r3, #0]
 801cf32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801cf36:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801cf3a:	d107      	bne.n	801cf4c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801cf3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801cf40:	4618      	mov	r0, r3
 801cf42:	f000 fbc7 	bl	801d6d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801cf46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cf48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801cf4a:	e0fc      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801cf4c:	2300      	movs	r3, #0
 801cf4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801cf50:	e0f9      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801cf52:	4b50      	ldr	r3, [pc, #320]	@ (801d094 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801cf54:	681b      	ldr	r3, [r3, #0]
 801cf56:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801cf5a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801cf5e:	d107      	bne.n	801cf70 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801cf60:	f107 0318 	add.w	r3, r7, #24
 801cf64:	4618      	mov	r0, r3
 801cf66:	f000 f90d 	bl	801d184 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 801cf6a:	6a3b      	ldr	r3, [r7, #32]
 801cf6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801cf6e:	e0ea      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801cf70:	2300      	movs	r3, #0
 801cf72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801cf74:	e0e7      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 801cf76:	2300      	movs	r3, #0
 801cf78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801cf7a:	e0e4      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 801cf7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 801cf80:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 801cf84:	430b      	orrs	r3, r1
 801cf86:	f040 808d 	bne.w	801d0a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 801cf8a:	4b42      	ldr	r3, [pc, #264]	@ (801d094 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801cf8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801cf8e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 801cf92:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801cf94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801cf9a:	d06b      	beq.n	801d074 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 801cf9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801cfa2:	d874      	bhi.n	801d08e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 801cfa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801cfaa:	d056      	beq.n	801d05a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 801cfac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801cfb2:	d86c      	bhi.n	801d08e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 801cfb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfb6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801cfba:	d03b      	beq.n	801d034 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 801cfbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfbe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801cfc2:	d864      	bhi.n	801d08e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 801cfc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801cfca:	d021      	beq.n	801d010 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 801cfcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801cfd2:	d85c      	bhi.n	801d08e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 801cfd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfd6:	2b00      	cmp	r3, #0
 801cfd8:	d004      	beq.n	801cfe4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 801cfda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfdc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801cfe0:	d004      	beq.n	801cfec <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 801cfe2:	e054      	b.n	801d08e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 801cfe4:	f000 f8b8 	bl	801d158 <HAL_RCCEx_GetD3PCLK1Freq>
 801cfe8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801cfea:	e0ac      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801cfec:	4b29      	ldr	r3, [pc, #164]	@ (801d094 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801cfee:	681b      	ldr	r3, [r3, #0]
 801cff0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801cff4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801cff8:	d107      	bne.n	801d00a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801cffa:	f107 0318 	add.w	r3, r7, #24
 801cffe:	4618      	mov	r0, r3
 801d000:	f000 f8c0 	bl	801d184 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801d004:	69fb      	ldr	r3, [r7, #28]
 801d006:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d008:	e09d      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801d00a:	2300      	movs	r3, #0
 801d00c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801d00e:	e09a      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801d010:	4b20      	ldr	r3, [pc, #128]	@ (801d094 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801d012:	681b      	ldr	r3, [r3, #0]
 801d014:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801d018:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801d01c:	d107      	bne.n	801d02e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801d01e:	f107 030c 	add.w	r3, r7, #12
 801d022:	4618      	mov	r0, r3
 801d024:	f000 fa02 	bl	801d42c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801d028:	693b      	ldr	r3, [r7, #16]
 801d02a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d02c:	e08b      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801d02e:	2300      	movs	r3, #0
 801d030:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801d032:	e088      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801d034:	4b17      	ldr	r3, [pc, #92]	@ (801d094 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801d036:	681b      	ldr	r3, [r3, #0]
 801d038:	f003 0304 	and.w	r3, r3, #4
 801d03c:	2b04      	cmp	r3, #4
 801d03e:	d109      	bne.n	801d054 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d040:	4b14      	ldr	r3, [pc, #80]	@ (801d094 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801d042:	681b      	ldr	r3, [r3, #0]
 801d044:	08db      	lsrs	r3, r3, #3
 801d046:	f003 0303 	and.w	r3, r3, #3
 801d04a:	4a13      	ldr	r2, [pc, #76]	@ (801d098 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 801d04c:	fa22 f303 	lsr.w	r3, r2, r3
 801d050:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d052:	e078      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801d054:	2300      	movs	r3, #0
 801d056:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801d058:	e075      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 801d05a:	4b0e      	ldr	r3, [pc, #56]	@ (801d094 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801d05c:	681b      	ldr	r3, [r3, #0]
 801d05e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d062:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801d066:	d102      	bne.n	801d06e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 801d068:	4b0c      	ldr	r3, [pc, #48]	@ (801d09c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 801d06a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d06c:	e06b      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801d06e:	2300      	movs	r3, #0
 801d070:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801d072:	e068      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801d074:	4b07      	ldr	r3, [pc, #28]	@ (801d094 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801d076:	681b      	ldr	r3, [r3, #0]
 801d078:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801d07c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801d080:	d102      	bne.n	801d088 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 801d082:	4b07      	ldr	r3, [pc, #28]	@ (801d0a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 801d084:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d086:	e05e      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801d088:	2300      	movs	r3, #0
 801d08a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801d08c:	e05b      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 801d08e:	2300      	movs	r3, #0
 801d090:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801d092:	e058      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801d094:	58024400 	.word	0x58024400
 801d098:	03d09000 	.word	0x03d09000
 801d09c:	003d0900 	.word	0x003d0900
 801d0a0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 801d0a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d0a8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 801d0ac:	430b      	orrs	r3, r1
 801d0ae:	d148      	bne.n	801d142 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 801d0b0:	4b27      	ldr	r3, [pc, #156]	@ (801d150 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 801d0b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d0b4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801d0b8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801d0ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d0bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801d0c0:	d02a      	beq.n	801d118 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 801d0c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d0c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801d0c8:	d838      	bhi.n	801d13c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 801d0ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d0cc:	2b00      	cmp	r3, #0
 801d0ce:	d004      	beq.n	801d0da <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 801d0d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d0d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801d0d6:	d00d      	beq.n	801d0f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 801d0d8:	e030      	b.n	801d13c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801d0da:	4b1d      	ldr	r3, [pc, #116]	@ (801d150 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 801d0dc:	681b      	ldr	r3, [r3, #0]
 801d0de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801d0e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801d0e6:	d102      	bne.n	801d0ee <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 801d0e8:	4b1a      	ldr	r3, [pc, #104]	@ (801d154 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 801d0ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d0ec:	e02b      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801d0ee:	2300      	movs	r3, #0
 801d0f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801d0f2:	e028      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801d0f4:	4b16      	ldr	r3, [pc, #88]	@ (801d150 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 801d0f6:	681b      	ldr	r3, [r3, #0]
 801d0f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801d0fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801d100:	d107      	bne.n	801d112 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801d102:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801d106:	4618      	mov	r0, r3
 801d108:	f000 fae4 	bl	801d6d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801d10c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d10e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d110:	e019      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801d112:	2300      	movs	r3, #0
 801d114:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801d116:	e016      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801d118:	4b0d      	ldr	r3, [pc, #52]	@ (801d150 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 801d11a:	681b      	ldr	r3, [r3, #0]
 801d11c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801d120:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801d124:	d107      	bne.n	801d136 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d126:	f107 0318 	add.w	r3, r7, #24
 801d12a:	4618      	mov	r0, r3
 801d12c:	f000 f82a 	bl	801d184 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801d130:	69fb      	ldr	r3, [r7, #28]
 801d132:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d134:	e007      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801d136:	2300      	movs	r3, #0
 801d138:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801d13a:	e004      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 801d13c:	2300      	movs	r3, #0
 801d13e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801d140:	e001      	b.n	801d146 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 801d142:	2300      	movs	r3, #0
 801d144:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 801d146:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 801d148:	4618      	mov	r0, r3
 801d14a:	3740      	adds	r7, #64	@ 0x40
 801d14c:	46bd      	mov	sp, r7
 801d14e:	bd80      	pop	{r7, pc}
 801d150:	58024400 	.word	0x58024400
 801d154:	017d7840 	.word	0x017d7840

0801d158 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 801d158:	b580      	push	{r7, lr}
 801d15a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 801d15c:	f7fe f816 	bl	801b18c <HAL_RCC_GetHCLKFreq>
 801d160:	4602      	mov	r2, r0
 801d162:	4b06      	ldr	r3, [pc, #24]	@ (801d17c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 801d164:	6a1b      	ldr	r3, [r3, #32]
 801d166:	091b      	lsrs	r3, r3, #4
 801d168:	f003 0307 	and.w	r3, r3, #7
 801d16c:	4904      	ldr	r1, [pc, #16]	@ (801d180 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801d16e:	5ccb      	ldrb	r3, [r1, r3]
 801d170:	f003 031f 	and.w	r3, r3, #31
 801d174:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 801d178:	4618      	mov	r0, r3
 801d17a:	bd80      	pop	{r7, pc}
 801d17c:	58024400 	.word	0x58024400
 801d180:	08026748 	.word	0x08026748

0801d184 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 801d184:	b480      	push	{r7}
 801d186:	b089      	sub	sp, #36	@ 0x24
 801d188:	af00      	add	r7, sp, #0
 801d18a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801d18c:	4ba1      	ldr	r3, [pc, #644]	@ (801d414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801d18e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d190:	f003 0303 	and.w	r3, r3, #3
 801d194:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 801d196:	4b9f      	ldr	r3, [pc, #636]	@ (801d414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801d198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d19a:	0b1b      	lsrs	r3, r3, #12
 801d19c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d1a0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 801d1a2:	4b9c      	ldr	r3, [pc, #624]	@ (801d414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801d1a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d1a6:	091b      	lsrs	r3, r3, #4
 801d1a8:	f003 0301 	and.w	r3, r3, #1
 801d1ac:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 801d1ae:	4b99      	ldr	r3, [pc, #612]	@ (801d414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801d1b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801d1b2:	08db      	lsrs	r3, r3, #3
 801d1b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d1b8:	693a      	ldr	r2, [r7, #16]
 801d1ba:	fb02 f303 	mul.w	r3, r2, r3
 801d1be:	ee07 3a90 	vmov	s15, r3
 801d1c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d1c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 801d1ca:	697b      	ldr	r3, [r7, #20]
 801d1cc:	2b00      	cmp	r3, #0
 801d1ce:	f000 8111 	beq.w	801d3f4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 801d1d2:	69bb      	ldr	r3, [r7, #24]
 801d1d4:	2b02      	cmp	r3, #2
 801d1d6:	f000 8083 	beq.w	801d2e0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 801d1da:	69bb      	ldr	r3, [r7, #24]
 801d1dc:	2b02      	cmp	r3, #2
 801d1de:	f200 80a1 	bhi.w	801d324 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 801d1e2:	69bb      	ldr	r3, [r7, #24]
 801d1e4:	2b00      	cmp	r3, #0
 801d1e6:	d003      	beq.n	801d1f0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 801d1e8:	69bb      	ldr	r3, [r7, #24]
 801d1ea:	2b01      	cmp	r3, #1
 801d1ec:	d056      	beq.n	801d29c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 801d1ee:	e099      	b.n	801d324 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801d1f0:	4b88      	ldr	r3, [pc, #544]	@ (801d414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801d1f2:	681b      	ldr	r3, [r3, #0]
 801d1f4:	f003 0320 	and.w	r3, r3, #32
 801d1f8:	2b00      	cmp	r3, #0
 801d1fa:	d02d      	beq.n	801d258 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d1fc:	4b85      	ldr	r3, [pc, #532]	@ (801d414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801d1fe:	681b      	ldr	r3, [r3, #0]
 801d200:	08db      	lsrs	r3, r3, #3
 801d202:	f003 0303 	and.w	r3, r3, #3
 801d206:	4a84      	ldr	r2, [pc, #528]	@ (801d418 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 801d208:	fa22 f303 	lsr.w	r3, r2, r3
 801d20c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801d20e:	68bb      	ldr	r3, [r7, #8]
 801d210:	ee07 3a90 	vmov	s15, r3
 801d214:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d218:	697b      	ldr	r3, [r7, #20]
 801d21a:	ee07 3a90 	vmov	s15, r3
 801d21e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d226:	4b7b      	ldr	r3, [pc, #492]	@ (801d414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801d228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d22a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d22e:	ee07 3a90 	vmov	s15, r3
 801d232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d236:	ed97 6a03 	vldr	s12, [r7, #12]
 801d23a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801d41c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801d23e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d246:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d24a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d24e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d252:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801d256:	e087      	b.n	801d368 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801d258:	697b      	ldr	r3, [r7, #20]
 801d25a:	ee07 3a90 	vmov	s15, r3
 801d25e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d262:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801d420 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 801d266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d26a:	4b6a      	ldr	r3, [pc, #424]	@ (801d414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801d26c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d26e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d272:	ee07 3a90 	vmov	s15, r3
 801d276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d27a:	ed97 6a03 	vldr	s12, [r7, #12]
 801d27e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801d41c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801d282:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d286:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d28a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d28e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d292:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d296:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801d29a:	e065      	b.n	801d368 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801d29c:	697b      	ldr	r3, [r7, #20]
 801d29e:	ee07 3a90 	vmov	s15, r3
 801d2a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d2a6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801d424 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801d2aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d2ae:	4b59      	ldr	r3, [pc, #356]	@ (801d414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801d2b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d2b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d2b6:	ee07 3a90 	vmov	s15, r3
 801d2ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d2be:	ed97 6a03 	vldr	s12, [r7, #12]
 801d2c2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801d41c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801d2c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d2ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d2ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d2d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d2d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d2da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801d2de:	e043      	b.n	801d368 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801d2e0:	697b      	ldr	r3, [r7, #20]
 801d2e2:	ee07 3a90 	vmov	s15, r3
 801d2e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d2ea:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801d428 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 801d2ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d2f2:	4b48      	ldr	r3, [pc, #288]	@ (801d414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801d2f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d2f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d2fa:	ee07 3a90 	vmov	s15, r3
 801d2fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d302:	ed97 6a03 	vldr	s12, [r7, #12]
 801d306:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801d41c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801d30a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d30e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d312:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d316:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d31a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d31e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801d322:	e021      	b.n	801d368 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801d324:	697b      	ldr	r3, [r7, #20]
 801d326:	ee07 3a90 	vmov	s15, r3
 801d32a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d32e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801d424 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801d332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d336:	4b37      	ldr	r3, [pc, #220]	@ (801d414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801d338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d33a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d33e:	ee07 3a90 	vmov	s15, r3
 801d342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d346:	ed97 6a03 	vldr	s12, [r7, #12]
 801d34a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801d41c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801d34e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d356:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d35a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d35e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d362:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801d366:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 801d368:	4b2a      	ldr	r3, [pc, #168]	@ (801d414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801d36a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d36c:	0a5b      	lsrs	r3, r3, #9
 801d36e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d372:	ee07 3a90 	vmov	s15, r3
 801d376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d37a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d37e:	ee37 7a87 	vadd.f32	s14, s15, s14
 801d382:	edd7 6a07 	vldr	s13, [r7, #28]
 801d386:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d38a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d38e:	ee17 2a90 	vmov	r2, s15
 801d392:	687b      	ldr	r3, [r7, #4]
 801d394:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 801d396:	4b1f      	ldr	r3, [pc, #124]	@ (801d414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801d398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d39a:	0c1b      	lsrs	r3, r3, #16
 801d39c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d3a0:	ee07 3a90 	vmov	s15, r3
 801d3a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d3a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d3ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 801d3b0:	edd7 6a07 	vldr	s13, [r7, #28]
 801d3b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d3b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d3bc:	ee17 2a90 	vmov	r2, s15
 801d3c0:	687b      	ldr	r3, [r7, #4]
 801d3c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 801d3c4:	4b13      	ldr	r3, [pc, #76]	@ (801d414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801d3c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d3c8:	0e1b      	lsrs	r3, r3, #24
 801d3ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d3ce:	ee07 3a90 	vmov	s15, r3
 801d3d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d3d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d3da:	ee37 7a87 	vadd.f32	s14, s15, s14
 801d3de:	edd7 6a07 	vldr	s13, [r7, #28]
 801d3e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d3e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d3ea:	ee17 2a90 	vmov	r2, s15
 801d3ee:	687b      	ldr	r3, [r7, #4]
 801d3f0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801d3f2:	e008      	b.n	801d406 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 801d3f4:	687b      	ldr	r3, [r7, #4]
 801d3f6:	2200      	movs	r2, #0
 801d3f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 801d3fa:	687b      	ldr	r3, [r7, #4]
 801d3fc:	2200      	movs	r2, #0
 801d3fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 801d400:	687b      	ldr	r3, [r7, #4]
 801d402:	2200      	movs	r2, #0
 801d404:	609a      	str	r2, [r3, #8]
}
 801d406:	bf00      	nop
 801d408:	3724      	adds	r7, #36	@ 0x24
 801d40a:	46bd      	mov	sp, r7
 801d40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d410:	4770      	bx	lr
 801d412:	bf00      	nop
 801d414:	58024400 	.word	0x58024400
 801d418:	03d09000 	.word	0x03d09000
 801d41c:	46000000 	.word	0x46000000
 801d420:	4c742400 	.word	0x4c742400
 801d424:	4a742400 	.word	0x4a742400
 801d428:	4bbebc20 	.word	0x4bbebc20

0801d42c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 801d42c:	b480      	push	{r7}
 801d42e:	b089      	sub	sp, #36	@ 0x24
 801d430:	af00      	add	r7, sp, #0
 801d432:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801d434:	4ba1      	ldr	r3, [pc, #644]	@ (801d6bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801d436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d438:	f003 0303 	and.w	r3, r3, #3
 801d43c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 801d43e:	4b9f      	ldr	r3, [pc, #636]	@ (801d6bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801d440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d442:	0d1b      	lsrs	r3, r3, #20
 801d444:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d448:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 801d44a:	4b9c      	ldr	r3, [pc, #624]	@ (801d6bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801d44c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d44e:	0a1b      	lsrs	r3, r3, #8
 801d450:	f003 0301 	and.w	r3, r3, #1
 801d454:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 801d456:	4b99      	ldr	r3, [pc, #612]	@ (801d6bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801d458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801d45a:	08db      	lsrs	r3, r3, #3
 801d45c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d460:	693a      	ldr	r2, [r7, #16]
 801d462:	fb02 f303 	mul.w	r3, r2, r3
 801d466:	ee07 3a90 	vmov	s15, r3
 801d46a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d46e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801d472:	697b      	ldr	r3, [r7, #20]
 801d474:	2b00      	cmp	r3, #0
 801d476:	f000 8111 	beq.w	801d69c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 801d47a:	69bb      	ldr	r3, [r7, #24]
 801d47c:	2b02      	cmp	r3, #2
 801d47e:	f000 8083 	beq.w	801d588 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 801d482:	69bb      	ldr	r3, [r7, #24]
 801d484:	2b02      	cmp	r3, #2
 801d486:	f200 80a1 	bhi.w	801d5cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 801d48a:	69bb      	ldr	r3, [r7, #24]
 801d48c:	2b00      	cmp	r3, #0
 801d48e:	d003      	beq.n	801d498 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 801d490:	69bb      	ldr	r3, [r7, #24]
 801d492:	2b01      	cmp	r3, #1
 801d494:	d056      	beq.n	801d544 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 801d496:	e099      	b.n	801d5cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801d498:	4b88      	ldr	r3, [pc, #544]	@ (801d6bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801d49a:	681b      	ldr	r3, [r3, #0]
 801d49c:	f003 0320 	and.w	r3, r3, #32
 801d4a0:	2b00      	cmp	r3, #0
 801d4a2:	d02d      	beq.n	801d500 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d4a4:	4b85      	ldr	r3, [pc, #532]	@ (801d6bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801d4a6:	681b      	ldr	r3, [r3, #0]
 801d4a8:	08db      	lsrs	r3, r3, #3
 801d4aa:	f003 0303 	and.w	r3, r3, #3
 801d4ae:	4a84      	ldr	r2, [pc, #528]	@ (801d6c0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 801d4b0:	fa22 f303 	lsr.w	r3, r2, r3
 801d4b4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801d4b6:	68bb      	ldr	r3, [r7, #8]
 801d4b8:	ee07 3a90 	vmov	s15, r3
 801d4bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d4c0:	697b      	ldr	r3, [r7, #20]
 801d4c2:	ee07 3a90 	vmov	s15, r3
 801d4c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d4ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d4ce:	4b7b      	ldr	r3, [pc, #492]	@ (801d6bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801d4d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d4d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d4d6:	ee07 3a90 	vmov	s15, r3
 801d4da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d4de:	ed97 6a03 	vldr	s12, [r7, #12]
 801d4e2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801d6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801d4e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d4ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d4ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d4f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d4f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d4fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801d4fe:	e087      	b.n	801d610 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801d500:	697b      	ldr	r3, [r7, #20]
 801d502:	ee07 3a90 	vmov	s15, r3
 801d506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d50a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801d6c8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 801d50e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d512:	4b6a      	ldr	r3, [pc, #424]	@ (801d6bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801d514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d51a:	ee07 3a90 	vmov	s15, r3
 801d51e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d522:	ed97 6a03 	vldr	s12, [r7, #12]
 801d526:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801d6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801d52a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d52e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d532:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d53a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d53e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801d542:	e065      	b.n	801d610 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801d544:	697b      	ldr	r3, [r7, #20]
 801d546:	ee07 3a90 	vmov	s15, r3
 801d54a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d54e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801d6cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801d552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d556:	4b59      	ldr	r3, [pc, #356]	@ (801d6bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801d558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d55a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d55e:	ee07 3a90 	vmov	s15, r3
 801d562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d566:	ed97 6a03 	vldr	s12, [r7, #12]
 801d56a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801d6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801d56e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d576:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d57a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d57e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d582:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801d586:	e043      	b.n	801d610 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801d588:	697b      	ldr	r3, [r7, #20]
 801d58a:	ee07 3a90 	vmov	s15, r3
 801d58e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d592:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801d6d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 801d596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d59a:	4b48      	ldr	r3, [pc, #288]	@ (801d6bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801d59c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d59e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d5a2:	ee07 3a90 	vmov	s15, r3
 801d5a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d5aa:	ed97 6a03 	vldr	s12, [r7, #12]
 801d5ae:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801d6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801d5b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d5b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d5ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d5be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d5c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d5c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801d5ca:	e021      	b.n	801d610 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801d5cc:	697b      	ldr	r3, [r7, #20]
 801d5ce:	ee07 3a90 	vmov	s15, r3
 801d5d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d5d6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801d6cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801d5da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d5de:	4b37      	ldr	r3, [pc, #220]	@ (801d6bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801d5e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d5e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d5e6:	ee07 3a90 	vmov	s15, r3
 801d5ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d5ee:	ed97 6a03 	vldr	s12, [r7, #12]
 801d5f2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801d6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801d5f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d5fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d5fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d606:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d60a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801d60e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 801d610:	4b2a      	ldr	r3, [pc, #168]	@ (801d6bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801d612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d614:	0a5b      	lsrs	r3, r3, #9
 801d616:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d61a:	ee07 3a90 	vmov	s15, r3
 801d61e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d622:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d626:	ee37 7a87 	vadd.f32	s14, s15, s14
 801d62a:	edd7 6a07 	vldr	s13, [r7, #28]
 801d62e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d632:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d636:	ee17 2a90 	vmov	r2, s15
 801d63a:	687b      	ldr	r3, [r7, #4]
 801d63c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 801d63e:	4b1f      	ldr	r3, [pc, #124]	@ (801d6bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801d640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d642:	0c1b      	lsrs	r3, r3, #16
 801d644:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d648:	ee07 3a90 	vmov	s15, r3
 801d64c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d650:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d654:	ee37 7a87 	vadd.f32	s14, s15, s14
 801d658:	edd7 6a07 	vldr	s13, [r7, #28]
 801d65c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d660:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d664:	ee17 2a90 	vmov	r2, s15
 801d668:	687b      	ldr	r3, [r7, #4]
 801d66a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 801d66c:	4b13      	ldr	r3, [pc, #76]	@ (801d6bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801d66e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d670:	0e1b      	lsrs	r3, r3, #24
 801d672:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d676:	ee07 3a90 	vmov	s15, r3
 801d67a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d67e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d682:	ee37 7a87 	vadd.f32	s14, s15, s14
 801d686:	edd7 6a07 	vldr	s13, [r7, #28]
 801d68a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d68e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d692:	ee17 2a90 	vmov	r2, s15
 801d696:	687b      	ldr	r3, [r7, #4]
 801d698:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 801d69a:	e008      	b.n	801d6ae <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 801d69c:	687b      	ldr	r3, [r7, #4]
 801d69e:	2200      	movs	r2, #0
 801d6a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801d6a2:	687b      	ldr	r3, [r7, #4]
 801d6a4:	2200      	movs	r2, #0
 801d6a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 801d6a8:	687b      	ldr	r3, [r7, #4]
 801d6aa:	2200      	movs	r2, #0
 801d6ac:	609a      	str	r2, [r3, #8]
}
 801d6ae:	bf00      	nop
 801d6b0:	3724      	adds	r7, #36	@ 0x24
 801d6b2:	46bd      	mov	sp, r7
 801d6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6b8:	4770      	bx	lr
 801d6ba:	bf00      	nop
 801d6bc:	58024400 	.word	0x58024400
 801d6c0:	03d09000 	.word	0x03d09000
 801d6c4:	46000000 	.word	0x46000000
 801d6c8:	4c742400 	.word	0x4c742400
 801d6cc:	4a742400 	.word	0x4a742400
 801d6d0:	4bbebc20 	.word	0x4bbebc20

0801d6d4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 801d6d4:	b480      	push	{r7}
 801d6d6:	b089      	sub	sp, #36	@ 0x24
 801d6d8:	af00      	add	r7, sp, #0
 801d6da:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801d6dc:	4ba0      	ldr	r3, [pc, #640]	@ (801d960 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801d6de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d6e0:	f003 0303 	and.w	r3, r3, #3
 801d6e4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 801d6e6:	4b9e      	ldr	r3, [pc, #632]	@ (801d960 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801d6e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d6ea:	091b      	lsrs	r3, r3, #4
 801d6ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d6f0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 801d6f2:	4b9b      	ldr	r3, [pc, #620]	@ (801d960 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801d6f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d6f6:	f003 0301 	and.w	r3, r3, #1
 801d6fa:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801d6fc:	4b98      	ldr	r3, [pc, #608]	@ (801d960 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801d6fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d700:	08db      	lsrs	r3, r3, #3
 801d702:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d706:	693a      	ldr	r2, [r7, #16]
 801d708:	fb02 f303 	mul.w	r3, r2, r3
 801d70c:	ee07 3a90 	vmov	s15, r3
 801d710:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d714:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 801d718:	697b      	ldr	r3, [r7, #20]
 801d71a:	2b00      	cmp	r3, #0
 801d71c:	f000 8111 	beq.w	801d942 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 801d720:	69bb      	ldr	r3, [r7, #24]
 801d722:	2b02      	cmp	r3, #2
 801d724:	f000 8083 	beq.w	801d82e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 801d728:	69bb      	ldr	r3, [r7, #24]
 801d72a:	2b02      	cmp	r3, #2
 801d72c:	f200 80a1 	bhi.w	801d872 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 801d730:	69bb      	ldr	r3, [r7, #24]
 801d732:	2b00      	cmp	r3, #0
 801d734:	d003      	beq.n	801d73e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 801d736:	69bb      	ldr	r3, [r7, #24]
 801d738:	2b01      	cmp	r3, #1
 801d73a:	d056      	beq.n	801d7ea <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 801d73c:	e099      	b.n	801d872 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801d73e:	4b88      	ldr	r3, [pc, #544]	@ (801d960 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801d740:	681b      	ldr	r3, [r3, #0]
 801d742:	f003 0320 	and.w	r3, r3, #32
 801d746:	2b00      	cmp	r3, #0
 801d748:	d02d      	beq.n	801d7a6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d74a:	4b85      	ldr	r3, [pc, #532]	@ (801d960 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801d74c:	681b      	ldr	r3, [r3, #0]
 801d74e:	08db      	lsrs	r3, r3, #3
 801d750:	f003 0303 	and.w	r3, r3, #3
 801d754:	4a83      	ldr	r2, [pc, #524]	@ (801d964 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 801d756:	fa22 f303 	lsr.w	r3, r2, r3
 801d75a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801d75c:	68bb      	ldr	r3, [r7, #8]
 801d75e:	ee07 3a90 	vmov	s15, r3
 801d762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d766:	697b      	ldr	r3, [r7, #20]
 801d768:	ee07 3a90 	vmov	s15, r3
 801d76c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d770:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d774:	4b7a      	ldr	r3, [pc, #488]	@ (801d960 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801d776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d778:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d77c:	ee07 3a90 	vmov	s15, r3
 801d780:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d784:	ed97 6a03 	vldr	s12, [r7, #12]
 801d788:	eddf 5a77 	vldr	s11, [pc, #476]	@ 801d968 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801d78c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d790:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d794:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d798:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d79c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d7a0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801d7a4:	e087      	b.n	801d8b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801d7a6:	697b      	ldr	r3, [r7, #20]
 801d7a8:	ee07 3a90 	vmov	s15, r3
 801d7ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d7b0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 801d96c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 801d7b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d7b8:	4b69      	ldr	r3, [pc, #420]	@ (801d960 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801d7ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d7bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d7c0:	ee07 3a90 	vmov	s15, r3
 801d7c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d7c8:	ed97 6a03 	vldr	s12, [r7, #12]
 801d7cc:	eddf 5a66 	vldr	s11, [pc, #408]	@ 801d968 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801d7d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d7d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d7d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d7dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d7e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d7e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801d7e8:	e065      	b.n	801d8b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801d7ea:	697b      	ldr	r3, [r7, #20]
 801d7ec:	ee07 3a90 	vmov	s15, r3
 801d7f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d7f4:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 801d970 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 801d7f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d7fc:	4b58      	ldr	r3, [pc, #352]	@ (801d960 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801d7fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d800:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d804:	ee07 3a90 	vmov	s15, r3
 801d808:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d80c:	ed97 6a03 	vldr	s12, [r7, #12]
 801d810:	eddf 5a55 	vldr	s11, [pc, #340]	@ 801d968 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801d814:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d818:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d81c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d820:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d824:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d828:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801d82c:	e043      	b.n	801d8b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801d82e:	697b      	ldr	r3, [r7, #20]
 801d830:	ee07 3a90 	vmov	s15, r3
 801d834:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d838:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 801d974 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 801d83c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d840:	4b47      	ldr	r3, [pc, #284]	@ (801d960 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801d842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d848:	ee07 3a90 	vmov	s15, r3
 801d84c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d850:	ed97 6a03 	vldr	s12, [r7, #12]
 801d854:	eddf 5a44 	vldr	s11, [pc, #272]	@ 801d968 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801d858:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d85c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d860:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d864:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d868:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d86c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801d870:	e021      	b.n	801d8b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801d872:	697b      	ldr	r3, [r7, #20]
 801d874:	ee07 3a90 	vmov	s15, r3
 801d878:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d87c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 801d96c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 801d880:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d884:	4b36      	ldr	r3, [pc, #216]	@ (801d960 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801d886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d88c:	ee07 3a90 	vmov	s15, r3
 801d890:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d894:	ed97 6a03 	vldr	s12, [r7, #12]
 801d898:	eddf 5a33 	vldr	s11, [pc, #204]	@ 801d968 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801d89c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d8a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d8a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d8a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d8ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d8b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801d8b4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 801d8b6:	4b2a      	ldr	r3, [pc, #168]	@ (801d960 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801d8b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d8ba:	0a5b      	lsrs	r3, r3, #9
 801d8bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d8c0:	ee07 3a90 	vmov	s15, r3
 801d8c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d8c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d8cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 801d8d0:	edd7 6a07 	vldr	s13, [r7, #28]
 801d8d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d8d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d8dc:	ee17 2a90 	vmov	r2, s15
 801d8e0:	687b      	ldr	r3, [r7, #4]
 801d8e2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 801d8e4:	4b1e      	ldr	r3, [pc, #120]	@ (801d960 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801d8e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d8e8:	0c1b      	lsrs	r3, r3, #16
 801d8ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d8ee:	ee07 3a90 	vmov	s15, r3
 801d8f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d8f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d8fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 801d8fe:	edd7 6a07 	vldr	s13, [r7, #28]
 801d902:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d906:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d90a:	ee17 2a90 	vmov	r2, s15
 801d90e:	687b      	ldr	r3, [r7, #4]
 801d910:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 801d912:	4b13      	ldr	r3, [pc, #76]	@ (801d960 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801d914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d916:	0e1b      	lsrs	r3, r3, #24
 801d918:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d91c:	ee07 3a90 	vmov	s15, r3
 801d920:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d924:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d928:	ee37 7a87 	vadd.f32	s14, s15, s14
 801d92c:	edd7 6a07 	vldr	s13, [r7, #28]
 801d930:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d934:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d938:	ee17 2a90 	vmov	r2, s15
 801d93c:	687b      	ldr	r3, [r7, #4]
 801d93e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 801d940:	e008      	b.n	801d954 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 801d942:	687b      	ldr	r3, [r7, #4]
 801d944:	2200      	movs	r2, #0
 801d946:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 801d948:	687b      	ldr	r3, [r7, #4]
 801d94a:	2200      	movs	r2, #0
 801d94c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 801d94e:	687b      	ldr	r3, [r7, #4]
 801d950:	2200      	movs	r2, #0
 801d952:	609a      	str	r2, [r3, #8]
}
 801d954:	bf00      	nop
 801d956:	3724      	adds	r7, #36	@ 0x24
 801d958:	46bd      	mov	sp, r7
 801d95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d95e:	4770      	bx	lr
 801d960:	58024400 	.word	0x58024400
 801d964:	03d09000 	.word	0x03d09000
 801d968:	46000000 	.word	0x46000000
 801d96c:	4c742400 	.word	0x4c742400
 801d970:	4a742400 	.word	0x4a742400
 801d974:	4bbebc20 	.word	0x4bbebc20

0801d978 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 801d978:	b580      	push	{r7, lr}
 801d97a:	b084      	sub	sp, #16
 801d97c:	af00      	add	r7, sp, #0
 801d97e:	6078      	str	r0, [r7, #4]
 801d980:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801d982:	2300      	movs	r3, #0
 801d984:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801d986:	4b53      	ldr	r3, [pc, #332]	@ (801dad4 <RCCEx_PLL2_Config+0x15c>)
 801d988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d98a:	f003 0303 	and.w	r3, r3, #3
 801d98e:	2b03      	cmp	r3, #3
 801d990:	d101      	bne.n	801d996 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801d992:	2301      	movs	r3, #1
 801d994:	e099      	b.n	801daca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801d996:	4b4f      	ldr	r3, [pc, #316]	@ (801dad4 <RCCEx_PLL2_Config+0x15c>)
 801d998:	681b      	ldr	r3, [r3, #0]
 801d99a:	4a4e      	ldr	r2, [pc, #312]	@ (801dad4 <RCCEx_PLL2_Config+0x15c>)
 801d99c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801d9a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801d9a2:	f7f9 fd2f 	bl	8017404 <HAL_GetTick>
 801d9a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801d9a8:	e008      	b.n	801d9bc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801d9aa:	f7f9 fd2b 	bl	8017404 <HAL_GetTick>
 801d9ae:	4602      	mov	r2, r0
 801d9b0:	68bb      	ldr	r3, [r7, #8]
 801d9b2:	1ad3      	subs	r3, r2, r3
 801d9b4:	2b02      	cmp	r3, #2
 801d9b6:	d901      	bls.n	801d9bc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 801d9b8:	2303      	movs	r3, #3
 801d9ba:	e086      	b.n	801daca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801d9bc:	4b45      	ldr	r3, [pc, #276]	@ (801dad4 <RCCEx_PLL2_Config+0x15c>)
 801d9be:	681b      	ldr	r3, [r3, #0]
 801d9c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801d9c4:	2b00      	cmp	r3, #0
 801d9c6:	d1f0      	bne.n	801d9aa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 801d9c8:	4b42      	ldr	r3, [pc, #264]	@ (801dad4 <RCCEx_PLL2_Config+0x15c>)
 801d9ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d9cc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801d9d0:	687b      	ldr	r3, [r7, #4]
 801d9d2:	681b      	ldr	r3, [r3, #0]
 801d9d4:	031b      	lsls	r3, r3, #12
 801d9d6:	493f      	ldr	r1, [pc, #252]	@ (801dad4 <RCCEx_PLL2_Config+0x15c>)
 801d9d8:	4313      	orrs	r3, r2
 801d9da:	628b      	str	r3, [r1, #40]	@ 0x28
 801d9dc:	687b      	ldr	r3, [r7, #4]
 801d9de:	685b      	ldr	r3, [r3, #4]
 801d9e0:	3b01      	subs	r3, #1
 801d9e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801d9e6:	687b      	ldr	r3, [r7, #4]
 801d9e8:	689b      	ldr	r3, [r3, #8]
 801d9ea:	3b01      	subs	r3, #1
 801d9ec:	025b      	lsls	r3, r3, #9
 801d9ee:	b29b      	uxth	r3, r3
 801d9f0:	431a      	orrs	r2, r3
 801d9f2:	687b      	ldr	r3, [r7, #4]
 801d9f4:	68db      	ldr	r3, [r3, #12]
 801d9f6:	3b01      	subs	r3, #1
 801d9f8:	041b      	lsls	r3, r3, #16
 801d9fa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801d9fe:	431a      	orrs	r2, r3
 801da00:	687b      	ldr	r3, [r7, #4]
 801da02:	691b      	ldr	r3, [r3, #16]
 801da04:	3b01      	subs	r3, #1
 801da06:	061b      	lsls	r3, r3, #24
 801da08:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801da0c:	4931      	ldr	r1, [pc, #196]	@ (801dad4 <RCCEx_PLL2_Config+0x15c>)
 801da0e:	4313      	orrs	r3, r2
 801da10:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801da12:	4b30      	ldr	r3, [pc, #192]	@ (801dad4 <RCCEx_PLL2_Config+0x15c>)
 801da14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801da16:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 801da1a:	687b      	ldr	r3, [r7, #4]
 801da1c:	695b      	ldr	r3, [r3, #20]
 801da1e:	492d      	ldr	r1, [pc, #180]	@ (801dad4 <RCCEx_PLL2_Config+0x15c>)
 801da20:	4313      	orrs	r3, r2
 801da22:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 801da24:	4b2b      	ldr	r3, [pc, #172]	@ (801dad4 <RCCEx_PLL2_Config+0x15c>)
 801da26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801da28:	f023 0220 	bic.w	r2, r3, #32
 801da2c:	687b      	ldr	r3, [r7, #4]
 801da2e:	699b      	ldr	r3, [r3, #24]
 801da30:	4928      	ldr	r1, [pc, #160]	@ (801dad4 <RCCEx_PLL2_Config+0x15c>)
 801da32:	4313      	orrs	r3, r2
 801da34:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801da36:	4b27      	ldr	r3, [pc, #156]	@ (801dad4 <RCCEx_PLL2_Config+0x15c>)
 801da38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801da3a:	4a26      	ldr	r2, [pc, #152]	@ (801dad4 <RCCEx_PLL2_Config+0x15c>)
 801da3c:	f023 0310 	bic.w	r3, r3, #16
 801da40:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801da42:	4b24      	ldr	r3, [pc, #144]	@ (801dad4 <RCCEx_PLL2_Config+0x15c>)
 801da44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801da46:	4b24      	ldr	r3, [pc, #144]	@ (801dad8 <RCCEx_PLL2_Config+0x160>)
 801da48:	4013      	ands	r3, r2
 801da4a:	687a      	ldr	r2, [r7, #4]
 801da4c:	69d2      	ldr	r2, [r2, #28]
 801da4e:	00d2      	lsls	r2, r2, #3
 801da50:	4920      	ldr	r1, [pc, #128]	@ (801dad4 <RCCEx_PLL2_Config+0x15c>)
 801da52:	4313      	orrs	r3, r2
 801da54:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801da56:	4b1f      	ldr	r3, [pc, #124]	@ (801dad4 <RCCEx_PLL2_Config+0x15c>)
 801da58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801da5a:	4a1e      	ldr	r2, [pc, #120]	@ (801dad4 <RCCEx_PLL2_Config+0x15c>)
 801da5c:	f043 0310 	orr.w	r3, r3, #16
 801da60:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801da62:	683b      	ldr	r3, [r7, #0]
 801da64:	2b00      	cmp	r3, #0
 801da66:	d106      	bne.n	801da76 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 801da68:	4b1a      	ldr	r3, [pc, #104]	@ (801dad4 <RCCEx_PLL2_Config+0x15c>)
 801da6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801da6c:	4a19      	ldr	r2, [pc, #100]	@ (801dad4 <RCCEx_PLL2_Config+0x15c>)
 801da6e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801da72:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801da74:	e00f      	b.n	801da96 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801da76:	683b      	ldr	r3, [r7, #0]
 801da78:	2b01      	cmp	r3, #1
 801da7a:	d106      	bne.n	801da8a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 801da7c:	4b15      	ldr	r3, [pc, #84]	@ (801dad4 <RCCEx_PLL2_Config+0x15c>)
 801da7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801da80:	4a14      	ldr	r2, [pc, #80]	@ (801dad4 <RCCEx_PLL2_Config+0x15c>)
 801da82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801da86:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801da88:	e005      	b.n	801da96 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801da8a:	4b12      	ldr	r3, [pc, #72]	@ (801dad4 <RCCEx_PLL2_Config+0x15c>)
 801da8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801da8e:	4a11      	ldr	r2, [pc, #68]	@ (801dad4 <RCCEx_PLL2_Config+0x15c>)
 801da90:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801da94:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801da96:	4b0f      	ldr	r3, [pc, #60]	@ (801dad4 <RCCEx_PLL2_Config+0x15c>)
 801da98:	681b      	ldr	r3, [r3, #0]
 801da9a:	4a0e      	ldr	r2, [pc, #56]	@ (801dad4 <RCCEx_PLL2_Config+0x15c>)
 801da9c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801daa0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801daa2:	f7f9 fcaf 	bl	8017404 <HAL_GetTick>
 801daa6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801daa8:	e008      	b.n	801dabc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801daaa:	f7f9 fcab 	bl	8017404 <HAL_GetTick>
 801daae:	4602      	mov	r2, r0
 801dab0:	68bb      	ldr	r3, [r7, #8]
 801dab2:	1ad3      	subs	r3, r2, r3
 801dab4:	2b02      	cmp	r3, #2
 801dab6:	d901      	bls.n	801dabc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 801dab8:	2303      	movs	r3, #3
 801daba:	e006      	b.n	801daca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801dabc:	4b05      	ldr	r3, [pc, #20]	@ (801dad4 <RCCEx_PLL2_Config+0x15c>)
 801dabe:	681b      	ldr	r3, [r3, #0]
 801dac0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801dac4:	2b00      	cmp	r3, #0
 801dac6:	d0f0      	beq.n	801daaa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 801dac8:	7bfb      	ldrb	r3, [r7, #15]
}
 801daca:	4618      	mov	r0, r3
 801dacc:	3710      	adds	r7, #16
 801dace:	46bd      	mov	sp, r7
 801dad0:	bd80      	pop	{r7, pc}
 801dad2:	bf00      	nop
 801dad4:	58024400 	.word	0x58024400
 801dad8:	ffff0007 	.word	0xffff0007

0801dadc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 801dadc:	b580      	push	{r7, lr}
 801dade:	b084      	sub	sp, #16
 801dae0:	af00      	add	r7, sp, #0
 801dae2:	6078      	str	r0, [r7, #4]
 801dae4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801dae6:	2300      	movs	r3, #0
 801dae8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801daea:	4b53      	ldr	r3, [pc, #332]	@ (801dc38 <RCCEx_PLL3_Config+0x15c>)
 801daec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801daee:	f003 0303 	and.w	r3, r3, #3
 801daf2:	2b03      	cmp	r3, #3
 801daf4:	d101      	bne.n	801dafa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801daf6:	2301      	movs	r3, #1
 801daf8:	e099      	b.n	801dc2e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801dafa:	4b4f      	ldr	r3, [pc, #316]	@ (801dc38 <RCCEx_PLL3_Config+0x15c>)
 801dafc:	681b      	ldr	r3, [r3, #0]
 801dafe:	4a4e      	ldr	r2, [pc, #312]	@ (801dc38 <RCCEx_PLL3_Config+0x15c>)
 801db00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801db04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801db06:	f7f9 fc7d 	bl	8017404 <HAL_GetTick>
 801db0a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801db0c:	e008      	b.n	801db20 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801db0e:	f7f9 fc79 	bl	8017404 <HAL_GetTick>
 801db12:	4602      	mov	r2, r0
 801db14:	68bb      	ldr	r3, [r7, #8]
 801db16:	1ad3      	subs	r3, r2, r3
 801db18:	2b02      	cmp	r3, #2
 801db1a:	d901      	bls.n	801db20 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 801db1c:	2303      	movs	r3, #3
 801db1e:	e086      	b.n	801dc2e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801db20:	4b45      	ldr	r3, [pc, #276]	@ (801dc38 <RCCEx_PLL3_Config+0x15c>)
 801db22:	681b      	ldr	r3, [r3, #0]
 801db24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801db28:	2b00      	cmp	r3, #0
 801db2a:	d1f0      	bne.n	801db0e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 801db2c:	4b42      	ldr	r3, [pc, #264]	@ (801dc38 <RCCEx_PLL3_Config+0x15c>)
 801db2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801db30:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 801db34:	687b      	ldr	r3, [r7, #4]
 801db36:	681b      	ldr	r3, [r3, #0]
 801db38:	051b      	lsls	r3, r3, #20
 801db3a:	493f      	ldr	r1, [pc, #252]	@ (801dc38 <RCCEx_PLL3_Config+0x15c>)
 801db3c:	4313      	orrs	r3, r2
 801db3e:	628b      	str	r3, [r1, #40]	@ 0x28
 801db40:	687b      	ldr	r3, [r7, #4]
 801db42:	685b      	ldr	r3, [r3, #4]
 801db44:	3b01      	subs	r3, #1
 801db46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801db4a:	687b      	ldr	r3, [r7, #4]
 801db4c:	689b      	ldr	r3, [r3, #8]
 801db4e:	3b01      	subs	r3, #1
 801db50:	025b      	lsls	r3, r3, #9
 801db52:	b29b      	uxth	r3, r3
 801db54:	431a      	orrs	r2, r3
 801db56:	687b      	ldr	r3, [r7, #4]
 801db58:	68db      	ldr	r3, [r3, #12]
 801db5a:	3b01      	subs	r3, #1
 801db5c:	041b      	lsls	r3, r3, #16
 801db5e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801db62:	431a      	orrs	r2, r3
 801db64:	687b      	ldr	r3, [r7, #4]
 801db66:	691b      	ldr	r3, [r3, #16]
 801db68:	3b01      	subs	r3, #1
 801db6a:	061b      	lsls	r3, r3, #24
 801db6c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801db70:	4931      	ldr	r1, [pc, #196]	@ (801dc38 <RCCEx_PLL3_Config+0x15c>)
 801db72:	4313      	orrs	r3, r2
 801db74:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801db76:	4b30      	ldr	r3, [pc, #192]	@ (801dc38 <RCCEx_PLL3_Config+0x15c>)
 801db78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801db7a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801db7e:	687b      	ldr	r3, [r7, #4]
 801db80:	695b      	ldr	r3, [r3, #20]
 801db82:	492d      	ldr	r1, [pc, #180]	@ (801dc38 <RCCEx_PLL3_Config+0x15c>)
 801db84:	4313      	orrs	r3, r2
 801db86:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 801db88:	4b2b      	ldr	r3, [pc, #172]	@ (801dc38 <RCCEx_PLL3_Config+0x15c>)
 801db8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801db8c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 801db90:	687b      	ldr	r3, [r7, #4]
 801db92:	699b      	ldr	r3, [r3, #24]
 801db94:	4928      	ldr	r1, [pc, #160]	@ (801dc38 <RCCEx_PLL3_Config+0x15c>)
 801db96:	4313      	orrs	r3, r2
 801db98:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801db9a:	4b27      	ldr	r3, [pc, #156]	@ (801dc38 <RCCEx_PLL3_Config+0x15c>)
 801db9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801db9e:	4a26      	ldr	r2, [pc, #152]	@ (801dc38 <RCCEx_PLL3_Config+0x15c>)
 801dba0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801dba4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801dba6:	4b24      	ldr	r3, [pc, #144]	@ (801dc38 <RCCEx_PLL3_Config+0x15c>)
 801dba8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801dbaa:	4b24      	ldr	r3, [pc, #144]	@ (801dc3c <RCCEx_PLL3_Config+0x160>)
 801dbac:	4013      	ands	r3, r2
 801dbae:	687a      	ldr	r2, [r7, #4]
 801dbb0:	69d2      	ldr	r2, [r2, #28]
 801dbb2:	00d2      	lsls	r2, r2, #3
 801dbb4:	4920      	ldr	r1, [pc, #128]	@ (801dc38 <RCCEx_PLL3_Config+0x15c>)
 801dbb6:	4313      	orrs	r3, r2
 801dbb8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801dbba:	4b1f      	ldr	r3, [pc, #124]	@ (801dc38 <RCCEx_PLL3_Config+0x15c>)
 801dbbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dbbe:	4a1e      	ldr	r2, [pc, #120]	@ (801dc38 <RCCEx_PLL3_Config+0x15c>)
 801dbc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801dbc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801dbc6:	683b      	ldr	r3, [r7, #0]
 801dbc8:	2b00      	cmp	r3, #0
 801dbca:	d106      	bne.n	801dbda <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 801dbcc:	4b1a      	ldr	r3, [pc, #104]	@ (801dc38 <RCCEx_PLL3_Config+0x15c>)
 801dbce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dbd0:	4a19      	ldr	r2, [pc, #100]	@ (801dc38 <RCCEx_PLL3_Config+0x15c>)
 801dbd2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 801dbd6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801dbd8:	e00f      	b.n	801dbfa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801dbda:	683b      	ldr	r3, [r7, #0]
 801dbdc:	2b01      	cmp	r3, #1
 801dbde:	d106      	bne.n	801dbee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 801dbe0:	4b15      	ldr	r3, [pc, #84]	@ (801dc38 <RCCEx_PLL3_Config+0x15c>)
 801dbe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dbe4:	4a14      	ldr	r2, [pc, #80]	@ (801dc38 <RCCEx_PLL3_Config+0x15c>)
 801dbe6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801dbea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801dbec:	e005      	b.n	801dbfa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801dbee:	4b12      	ldr	r3, [pc, #72]	@ (801dc38 <RCCEx_PLL3_Config+0x15c>)
 801dbf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dbf2:	4a11      	ldr	r2, [pc, #68]	@ (801dc38 <RCCEx_PLL3_Config+0x15c>)
 801dbf4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801dbf8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801dbfa:	4b0f      	ldr	r3, [pc, #60]	@ (801dc38 <RCCEx_PLL3_Config+0x15c>)
 801dbfc:	681b      	ldr	r3, [r3, #0]
 801dbfe:	4a0e      	ldr	r2, [pc, #56]	@ (801dc38 <RCCEx_PLL3_Config+0x15c>)
 801dc00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801dc04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801dc06:	f7f9 fbfd 	bl	8017404 <HAL_GetTick>
 801dc0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801dc0c:	e008      	b.n	801dc20 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801dc0e:	f7f9 fbf9 	bl	8017404 <HAL_GetTick>
 801dc12:	4602      	mov	r2, r0
 801dc14:	68bb      	ldr	r3, [r7, #8]
 801dc16:	1ad3      	subs	r3, r2, r3
 801dc18:	2b02      	cmp	r3, #2
 801dc1a:	d901      	bls.n	801dc20 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 801dc1c:	2303      	movs	r3, #3
 801dc1e:	e006      	b.n	801dc2e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801dc20:	4b05      	ldr	r3, [pc, #20]	@ (801dc38 <RCCEx_PLL3_Config+0x15c>)
 801dc22:	681b      	ldr	r3, [r3, #0]
 801dc24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801dc28:	2b00      	cmp	r3, #0
 801dc2a:	d0f0      	beq.n	801dc0e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 801dc2c:	7bfb      	ldrb	r3, [r7, #15]
}
 801dc2e:	4618      	mov	r0, r3
 801dc30:	3710      	adds	r7, #16
 801dc32:	46bd      	mov	sp, r7
 801dc34:	bd80      	pop	{r7, pc}
 801dc36:	bf00      	nop
 801dc38:	58024400 	.word	0x58024400
 801dc3c:	ffff0007 	.word	0xffff0007

0801dc40 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 801dc40:	b580      	push	{r7, lr}
 801dc42:	b08a      	sub	sp, #40	@ 0x28
 801dc44:	af00      	add	r7, sp, #0
 801dc46:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 801dc48:	687b      	ldr	r3, [r7, #4]
 801dc4a:	2b00      	cmp	r3, #0
 801dc4c:	d101      	bne.n	801dc52 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 801dc4e:	2301      	movs	r3, #1
 801dc50:	e075      	b.n	801dd3e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 801dc52:	687b      	ldr	r3, [r7, #4]
 801dc54:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801dc58:	b2db      	uxtb	r3, r3
 801dc5a:	2b00      	cmp	r3, #0
 801dc5c:	d105      	bne.n	801dc6a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 801dc5e:	687b      	ldr	r3, [r7, #4]
 801dc60:	2200      	movs	r2, #0
 801dc62:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 801dc64:	6878      	ldr	r0, [r7, #4]
 801dc66:	f7ef fa65 	bl	800d134 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 801dc6a:	687b      	ldr	r3, [r7, #4]
 801dc6c:	2204      	movs	r2, #4
 801dc6e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 801dc72:	6878      	ldr	r0, [r7, #4]
 801dc74:	f000 f868 	bl	801dd48 <HAL_SD_InitCard>
 801dc78:	4603      	mov	r3, r0
 801dc7a:	2b00      	cmp	r3, #0
 801dc7c:	d001      	beq.n	801dc82 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 801dc7e:	2301      	movs	r3, #1
 801dc80:	e05d      	b.n	801dd3e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 801dc82:	f107 0308 	add.w	r3, r7, #8
 801dc86:	4619      	mov	r1, r3
 801dc88:	6878      	ldr	r0, [r7, #4]
 801dc8a:	f000 fdaf 	bl	801e7ec <HAL_SD_GetCardStatus>
 801dc8e:	4603      	mov	r3, r0
 801dc90:	2b00      	cmp	r3, #0
 801dc92:	d001      	beq.n	801dc98 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 801dc94:	2301      	movs	r3, #1
 801dc96:	e052      	b.n	801dd3e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 801dc98:	7e3b      	ldrb	r3, [r7, #24]
 801dc9a:	b2db      	uxtb	r3, r3
 801dc9c:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 801dc9e:	7e7b      	ldrb	r3, [r7, #25]
 801dca0:	b2db      	uxtb	r3, r3
 801dca2:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 801dca4:	687b      	ldr	r3, [r7, #4]
 801dca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801dca8:	2b01      	cmp	r3, #1
 801dcaa:	d10a      	bne.n	801dcc2 <HAL_SD_Init+0x82>
 801dcac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dcae:	2b00      	cmp	r3, #0
 801dcb0:	d102      	bne.n	801dcb8 <HAL_SD_Init+0x78>
 801dcb2:	6a3b      	ldr	r3, [r7, #32]
 801dcb4:	2b00      	cmp	r3, #0
 801dcb6:	d004      	beq.n	801dcc2 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 801dcb8:	687b      	ldr	r3, [r7, #4]
 801dcba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801dcbe:	659a      	str	r2, [r3, #88]	@ 0x58
 801dcc0:	e00b      	b.n	801dcda <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 801dcc2:	687b      	ldr	r3, [r7, #4]
 801dcc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801dcc6:	2b01      	cmp	r3, #1
 801dcc8:	d104      	bne.n	801dcd4 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 801dcca:	687b      	ldr	r3, [r7, #4]
 801dccc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801dcd0:	659a      	str	r2, [r3, #88]	@ 0x58
 801dcd2:	e002      	b.n	801dcda <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 801dcd4:	687b      	ldr	r3, [r7, #4]
 801dcd6:	2200      	movs	r2, #0
 801dcd8:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 801dcda:	687b      	ldr	r3, [r7, #4]
 801dcdc:	68db      	ldr	r3, [r3, #12]
 801dcde:	4619      	mov	r1, r3
 801dce0:	6878      	ldr	r0, [r7, #4]
 801dce2:	f000 fe6d 	bl	801e9c0 <HAL_SD_ConfigWideBusOperation>
 801dce6:	4603      	mov	r3, r0
 801dce8:	2b00      	cmp	r3, #0
 801dcea:	d001      	beq.n	801dcf0 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 801dcec:	2301      	movs	r3, #1
 801dcee:	e026      	b.n	801dd3e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 801dcf0:	f7f9 fb88 	bl	8017404 <HAL_GetTick>
 801dcf4:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 801dcf6:	e011      	b.n	801dd1c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 801dcf8:	f7f9 fb84 	bl	8017404 <HAL_GetTick>
 801dcfc:	4602      	mov	r2, r0
 801dcfe:	69fb      	ldr	r3, [r7, #28]
 801dd00:	1ad3      	subs	r3, r2, r3
 801dd02:	f1b3 3fff 	cmp.w	r3, #4294967295
 801dd06:	d109      	bne.n	801dd1c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 801dd08:	687b      	ldr	r3, [r7, #4]
 801dd0a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801dd0e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 801dd10:	687b      	ldr	r3, [r7, #4]
 801dd12:	2201      	movs	r2, #1
 801dd14:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 801dd18:	2303      	movs	r3, #3
 801dd1a:	e010      	b.n	801dd3e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 801dd1c:	6878      	ldr	r0, [r7, #4]
 801dd1e:	f000 ff61 	bl	801ebe4 <HAL_SD_GetCardState>
 801dd22:	4603      	mov	r3, r0
 801dd24:	2b04      	cmp	r3, #4
 801dd26:	d1e7      	bne.n	801dcf8 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 801dd28:	687b      	ldr	r3, [r7, #4]
 801dd2a:	2200      	movs	r2, #0
 801dd2c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 801dd2e:	687b      	ldr	r3, [r7, #4]
 801dd30:	2200      	movs	r2, #0
 801dd32:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 801dd34:	687b      	ldr	r3, [r7, #4]
 801dd36:	2201      	movs	r2, #1
 801dd38:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 801dd3c:	2300      	movs	r3, #0
}
 801dd3e:	4618      	mov	r0, r3
 801dd40:	3728      	adds	r7, #40	@ 0x28
 801dd42:	46bd      	mov	sp, r7
 801dd44:	bd80      	pop	{r7, pc}
	...

0801dd48 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 801dd48:	b590      	push	{r4, r7, lr}
 801dd4a:	b08d      	sub	sp, #52	@ 0x34
 801dd4c:	af02      	add	r7, sp, #8
 801dd4e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 801dd50:	2300      	movs	r3, #0
 801dd52:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 801dd54:	2300      	movs	r3, #0
 801dd56:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 801dd58:	2300      	movs	r3, #0
 801dd5a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 801dd5c:	2300      	movs	r3, #0
 801dd5e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 801dd60:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 801dd64:	f04f 0100 	mov.w	r1, #0
 801dd68:	f7fe fc76 	bl	801c658 <HAL_RCCEx_GetPeriphCLKFreq>
 801dd6c:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 801dd6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dd70:	2b00      	cmp	r3, #0
 801dd72:	d109      	bne.n	801dd88 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 801dd74:	687b      	ldr	r3, [r7, #4]
 801dd76:	2201      	movs	r2, #1
 801dd78:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 801dd7c:	687b      	ldr	r3, [r7, #4]
 801dd7e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 801dd82:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 801dd84:	2301      	movs	r3, #1
 801dd86:	e070      	b.n	801de6a <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 801dd88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dd8a:	0a1b      	lsrs	r3, r3, #8
 801dd8c:	4a39      	ldr	r2, [pc, #228]	@ (801de74 <HAL_SD_InitCard+0x12c>)
 801dd8e:	fba2 2303 	umull	r2, r3, r2, r3
 801dd92:	091b      	lsrs	r3, r3, #4
 801dd94:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 801dd96:	687b      	ldr	r3, [r7, #4]
 801dd98:	681c      	ldr	r4, [r3, #0]
 801dd9a:	466a      	mov	r2, sp
 801dd9c:	f107 0318 	add.w	r3, r7, #24
 801dda0:	e893 0003 	ldmia.w	r3, {r0, r1}
 801dda4:	e882 0003 	stmia.w	r2, {r0, r1}
 801dda8:	f107 030c 	add.w	r3, r7, #12
 801ddac:	cb0e      	ldmia	r3, {r1, r2, r3}
 801ddae:	4620      	mov	r0, r4
 801ddb0:	f002 fe5e 	bl	8020a70 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 801ddb4:	687b      	ldr	r3, [r7, #4]
 801ddb6:	681b      	ldr	r3, [r3, #0]
 801ddb8:	4618      	mov	r0, r3
 801ddba:	f002 fea1 	bl	8020b00 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 801ddbe:	69fb      	ldr	r3, [r7, #28]
 801ddc0:	2b00      	cmp	r3, #0
 801ddc2:	d005      	beq.n	801ddd0 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 801ddc4:	69fb      	ldr	r3, [r7, #28]
 801ddc6:	005b      	lsls	r3, r3, #1
 801ddc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ddca:	fbb2 f3f3 	udiv	r3, r2, r3
 801ddce:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 801ddd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ddd2:	2b00      	cmp	r3, #0
 801ddd4:	d007      	beq.n	801dde6 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 801ddd6:	4a28      	ldr	r2, [pc, #160]	@ (801de78 <HAL_SD_InitCard+0x130>)
 801ddd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ddda:	fbb2 f3f3 	udiv	r3, r2, r3
 801ddde:	3301      	adds	r3, #1
 801dde0:	4618      	mov	r0, r3
 801dde2:	f7f9 fb1b 	bl	801741c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 801dde6:	6878      	ldr	r0, [r7, #4]
 801dde8:	f000 ffea 	bl	801edc0 <SD_PowerON>
 801ddec:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 801ddee:	6a3b      	ldr	r3, [r7, #32]
 801ddf0:	2b00      	cmp	r3, #0
 801ddf2:	d00b      	beq.n	801de0c <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 801ddf4:	687b      	ldr	r3, [r7, #4]
 801ddf6:	2201      	movs	r2, #1
 801ddf8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 801ddfc:	687b      	ldr	r3, [r7, #4]
 801ddfe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801de00:	6a3b      	ldr	r3, [r7, #32]
 801de02:	431a      	orrs	r2, r3
 801de04:	687b      	ldr	r3, [r7, #4]
 801de06:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 801de08:	2301      	movs	r3, #1
 801de0a:	e02e      	b.n	801de6a <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 801de0c:	6878      	ldr	r0, [r7, #4]
 801de0e:	f000 ff09 	bl	801ec24 <SD_InitCard>
 801de12:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 801de14:	6a3b      	ldr	r3, [r7, #32]
 801de16:	2b00      	cmp	r3, #0
 801de18:	d00b      	beq.n	801de32 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 801de1a:	687b      	ldr	r3, [r7, #4]
 801de1c:	2201      	movs	r2, #1
 801de1e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 801de22:	687b      	ldr	r3, [r7, #4]
 801de24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801de26:	6a3b      	ldr	r3, [r7, #32]
 801de28:	431a      	orrs	r2, r3
 801de2a:	687b      	ldr	r3, [r7, #4]
 801de2c:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 801de2e:	2301      	movs	r3, #1
 801de30:	e01b      	b.n	801de6a <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 801de32:	687b      	ldr	r3, [r7, #4]
 801de34:	681b      	ldr	r3, [r3, #0]
 801de36:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801de3a:	4618      	mov	r0, r3
 801de3c:	f002 fef6 	bl	8020c2c <SDMMC_CmdBlockLength>
 801de40:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 801de42:	6a3b      	ldr	r3, [r7, #32]
 801de44:	2b00      	cmp	r3, #0
 801de46:	d00f      	beq.n	801de68 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801de48:	687b      	ldr	r3, [r7, #4]
 801de4a:	681b      	ldr	r3, [r3, #0]
 801de4c:	4a0b      	ldr	r2, [pc, #44]	@ (801de7c <HAL_SD_InitCard+0x134>)
 801de4e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 801de50:	687b      	ldr	r3, [r7, #4]
 801de52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801de54:	6a3b      	ldr	r3, [r7, #32]
 801de56:	431a      	orrs	r2, r3
 801de58:	687b      	ldr	r3, [r7, #4]
 801de5a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 801de5c:	687b      	ldr	r3, [r7, #4]
 801de5e:	2201      	movs	r2, #1
 801de60:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 801de64:	2301      	movs	r3, #1
 801de66:	e000      	b.n	801de6a <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 801de68:	2300      	movs	r3, #0
}
 801de6a:	4618      	mov	r0, r3
 801de6c:	372c      	adds	r7, #44	@ 0x2c
 801de6e:	46bd      	mov	sp, r7
 801de70:	bd90      	pop	{r4, r7, pc}
 801de72:	bf00      	nop
 801de74:	014f8b59 	.word	0x014f8b59
 801de78:	00012110 	.word	0x00012110
 801de7c:	1fe00fff 	.word	0x1fe00fff

0801de80 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 801de80:	b580      	push	{r7, lr}
 801de82:	b08c      	sub	sp, #48	@ 0x30
 801de84:	af00      	add	r7, sp, #0
 801de86:	60f8      	str	r0, [r7, #12]
 801de88:	60b9      	str	r1, [r7, #8]
 801de8a:	607a      	str	r2, [r7, #4]
 801de8c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 801de8e:	687b      	ldr	r3, [r7, #4]
 801de90:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 801de92:	68bb      	ldr	r3, [r7, #8]
 801de94:	2b00      	cmp	r3, #0
 801de96:	d107      	bne.n	801dea8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 801de98:	68fb      	ldr	r3, [r7, #12]
 801de9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801de9c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 801dea0:	68fb      	ldr	r3, [r7, #12]
 801dea2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 801dea4:	2301      	movs	r3, #1
 801dea6:	e08d      	b.n	801dfc4 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 801dea8:	68fb      	ldr	r3, [r7, #12]
 801deaa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801deae:	b2db      	uxtb	r3, r3
 801deb0:	2b01      	cmp	r3, #1
 801deb2:	f040 8086 	bne.w	801dfc2 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 801deb6:	68fb      	ldr	r3, [r7, #12]
 801deb8:	2200      	movs	r2, #0
 801deba:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 801debc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801debe:	683b      	ldr	r3, [r7, #0]
 801dec0:	441a      	add	r2, r3
 801dec2:	68fb      	ldr	r3, [r7, #12]
 801dec4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801dec6:	429a      	cmp	r2, r3
 801dec8:	d907      	bls.n	801deda <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 801deca:	68fb      	ldr	r3, [r7, #12]
 801decc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801dece:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 801ded2:	68fb      	ldr	r3, [r7, #12]
 801ded4:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 801ded6:	2301      	movs	r3, #1
 801ded8:	e074      	b.n	801dfc4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 801deda:	68fb      	ldr	r3, [r7, #12]
 801dedc:	2203      	movs	r2, #3
 801dede:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 801dee2:	68fb      	ldr	r3, [r7, #12]
 801dee4:	681b      	ldr	r3, [r3, #0]
 801dee6:	2200      	movs	r2, #0
 801dee8:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 801deea:	68fb      	ldr	r3, [r7, #12]
 801deec:	68ba      	ldr	r2, [r7, #8]
 801deee:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 801def0:	683b      	ldr	r3, [r7, #0]
 801def2:	025a      	lsls	r2, r3, #9
 801def4:	68fb      	ldr	r3, [r7, #12]
 801def6:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 801def8:	68fb      	ldr	r3, [r7, #12]
 801defa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801defc:	2b01      	cmp	r3, #1
 801defe:	d002      	beq.n	801df06 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 801df00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801df02:	025b      	lsls	r3, r3, #9
 801df04:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801df06:	f04f 33ff 	mov.w	r3, #4294967295
 801df0a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 801df0c:	683b      	ldr	r3, [r7, #0]
 801df0e:	025b      	lsls	r3, r3, #9
 801df10:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 801df12:	2390      	movs	r3, #144	@ 0x90
 801df14:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 801df16:	2302      	movs	r3, #2
 801df18:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801df1a:	2300      	movs	r3, #0
 801df1c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 801df1e:	2300      	movs	r3, #0
 801df20:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 801df22:	68fb      	ldr	r3, [r7, #12]
 801df24:	681b      	ldr	r3, [r3, #0]
 801df26:	f107 0210 	add.w	r2, r7, #16
 801df2a:	4611      	mov	r1, r2
 801df2c:	4618      	mov	r0, r3
 801df2e:	f002 fe51 	bl	8020bd4 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 801df32:	68fb      	ldr	r3, [r7, #12]
 801df34:	681b      	ldr	r3, [r3, #0]
 801df36:	68da      	ldr	r2, [r3, #12]
 801df38:	68fb      	ldr	r3, [r7, #12]
 801df3a:	681b      	ldr	r3, [r3, #0]
 801df3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801df40:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 801df42:	68fb      	ldr	r3, [r7, #12]
 801df44:	681b      	ldr	r3, [r3, #0]
 801df46:	68ba      	ldr	r2, [r7, #8]
 801df48:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 801df4a:	68fb      	ldr	r3, [r7, #12]
 801df4c:	681b      	ldr	r3, [r3, #0]
 801df4e:	2201      	movs	r2, #1
 801df50:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 801df52:	683b      	ldr	r3, [r7, #0]
 801df54:	2b01      	cmp	r3, #1
 801df56:	d90a      	bls.n	801df6e <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 801df58:	68fb      	ldr	r3, [r7, #12]
 801df5a:	2282      	movs	r2, #130	@ 0x82
 801df5c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 801df5e:	68fb      	ldr	r3, [r7, #12]
 801df60:	681b      	ldr	r3, [r3, #0]
 801df62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801df64:	4618      	mov	r0, r3
 801df66:	f002 fea7 	bl	8020cb8 <SDMMC_CmdReadMultiBlock>
 801df6a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801df6c:	e009      	b.n	801df82 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 801df6e:	68fb      	ldr	r3, [r7, #12]
 801df70:	2281      	movs	r2, #129	@ 0x81
 801df72:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 801df74:	68fb      	ldr	r3, [r7, #12]
 801df76:	681b      	ldr	r3, [r3, #0]
 801df78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801df7a:	4618      	mov	r0, r3
 801df7c:	f002 fe79 	bl	8020c72 <SDMMC_CmdReadSingleBlock>
 801df80:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 801df82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801df84:	2b00      	cmp	r3, #0
 801df86:	d012      	beq.n	801dfae <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801df88:	68fb      	ldr	r3, [r7, #12]
 801df8a:	681b      	ldr	r3, [r3, #0]
 801df8c:	4a0f      	ldr	r2, [pc, #60]	@ (801dfcc <HAL_SD_ReadBlocks_DMA+0x14c>)
 801df8e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 801df90:	68fb      	ldr	r3, [r7, #12]
 801df92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801df94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801df96:	431a      	orrs	r2, r3
 801df98:	68fb      	ldr	r3, [r7, #12]
 801df9a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 801df9c:	68fb      	ldr	r3, [r7, #12]
 801df9e:	2201      	movs	r2, #1
 801dfa0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 801dfa4:	68fb      	ldr	r3, [r7, #12]
 801dfa6:	2200      	movs	r2, #0
 801dfa8:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 801dfaa:	2301      	movs	r3, #1
 801dfac:	e00a      	b.n	801dfc4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 801dfae:	68fb      	ldr	r3, [r7, #12]
 801dfb0:	681b      	ldr	r3, [r3, #0]
 801dfb2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801dfb4:	68fb      	ldr	r3, [r7, #12]
 801dfb6:	681b      	ldr	r3, [r3, #0]
 801dfb8:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 801dfbc:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 801dfbe:	2300      	movs	r3, #0
 801dfc0:	e000      	b.n	801dfc4 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 801dfc2:	2302      	movs	r3, #2
  }
}
 801dfc4:	4618      	mov	r0, r3
 801dfc6:	3730      	adds	r7, #48	@ 0x30
 801dfc8:	46bd      	mov	sp, r7
 801dfca:	bd80      	pop	{r7, pc}
 801dfcc:	1fe00fff 	.word	0x1fe00fff

0801dfd0 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 801dfd0:	b580      	push	{r7, lr}
 801dfd2:	b08c      	sub	sp, #48	@ 0x30
 801dfd4:	af00      	add	r7, sp, #0
 801dfd6:	60f8      	str	r0, [r7, #12]
 801dfd8:	60b9      	str	r1, [r7, #8]
 801dfda:	607a      	str	r2, [r7, #4]
 801dfdc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 801dfde:	687b      	ldr	r3, [r7, #4]
 801dfe0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 801dfe2:	68bb      	ldr	r3, [r7, #8]
 801dfe4:	2b00      	cmp	r3, #0
 801dfe6:	d107      	bne.n	801dff8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 801dfe8:	68fb      	ldr	r3, [r7, #12]
 801dfea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801dfec:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 801dff0:	68fb      	ldr	r3, [r7, #12]
 801dff2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 801dff4:	2301      	movs	r3, #1
 801dff6:	e08d      	b.n	801e114 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 801dff8:	68fb      	ldr	r3, [r7, #12]
 801dffa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801dffe:	b2db      	uxtb	r3, r3
 801e000:	2b01      	cmp	r3, #1
 801e002:	f040 8086 	bne.w	801e112 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 801e006:	68fb      	ldr	r3, [r7, #12]
 801e008:	2200      	movs	r2, #0
 801e00a:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 801e00c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e00e:	683b      	ldr	r3, [r7, #0]
 801e010:	441a      	add	r2, r3
 801e012:	68fb      	ldr	r3, [r7, #12]
 801e014:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e016:	429a      	cmp	r2, r3
 801e018:	d907      	bls.n	801e02a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 801e01a:	68fb      	ldr	r3, [r7, #12]
 801e01c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801e01e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 801e022:	68fb      	ldr	r3, [r7, #12]
 801e024:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 801e026:	2301      	movs	r3, #1
 801e028:	e074      	b.n	801e114 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 801e02a:	68fb      	ldr	r3, [r7, #12]
 801e02c:	2203      	movs	r2, #3
 801e02e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 801e032:	68fb      	ldr	r3, [r7, #12]
 801e034:	681b      	ldr	r3, [r3, #0]
 801e036:	2200      	movs	r2, #0
 801e038:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 801e03a:	68fb      	ldr	r3, [r7, #12]
 801e03c:	68ba      	ldr	r2, [r7, #8]
 801e03e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 801e040:	683b      	ldr	r3, [r7, #0]
 801e042:	025a      	lsls	r2, r3, #9
 801e044:	68fb      	ldr	r3, [r7, #12]
 801e046:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 801e048:	68fb      	ldr	r3, [r7, #12]
 801e04a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e04c:	2b01      	cmp	r3, #1
 801e04e:	d002      	beq.n	801e056 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 801e050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e052:	025b      	lsls	r3, r3, #9
 801e054:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801e056:	f04f 33ff 	mov.w	r3, #4294967295
 801e05a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 801e05c:	683b      	ldr	r3, [r7, #0]
 801e05e:	025b      	lsls	r3, r3, #9
 801e060:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 801e062:	2390      	movs	r3, #144	@ 0x90
 801e064:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 801e066:	2300      	movs	r3, #0
 801e068:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801e06a:	2300      	movs	r3, #0
 801e06c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 801e06e:	2300      	movs	r3, #0
 801e070:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 801e072:	68fb      	ldr	r3, [r7, #12]
 801e074:	681b      	ldr	r3, [r3, #0]
 801e076:	f107 0210 	add.w	r2, r7, #16
 801e07a:	4611      	mov	r1, r2
 801e07c:	4618      	mov	r0, r3
 801e07e:	f002 fda9 	bl	8020bd4 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 801e082:	68fb      	ldr	r3, [r7, #12]
 801e084:	681b      	ldr	r3, [r3, #0]
 801e086:	68da      	ldr	r2, [r3, #12]
 801e088:	68fb      	ldr	r3, [r7, #12]
 801e08a:	681b      	ldr	r3, [r3, #0]
 801e08c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801e090:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 801e092:	68fb      	ldr	r3, [r7, #12]
 801e094:	681b      	ldr	r3, [r3, #0]
 801e096:	68ba      	ldr	r2, [r7, #8]
 801e098:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 801e09a:	68fb      	ldr	r3, [r7, #12]
 801e09c:	681b      	ldr	r3, [r3, #0]
 801e09e:	2201      	movs	r2, #1
 801e0a0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 801e0a2:	683b      	ldr	r3, [r7, #0]
 801e0a4:	2b01      	cmp	r3, #1
 801e0a6:	d90a      	bls.n	801e0be <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 801e0a8:	68fb      	ldr	r3, [r7, #12]
 801e0aa:	22a0      	movs	r2, #160	@ 0xa0
 801e0ac:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 801e0ae:	68fb      	ldr	r3, [r7, #12]
 801e0b0:	681b      	ldr	r3, [r3, #0]
 801e0b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801e0b4:	4618      	mov	r0, r3
 801e0b6:	f002 fe45 	bl	8020d44 <SDMMC_CmdWriteMultiBlock>
 801e0ba:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801e0bc:	e009      	b.n	801e0d2 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 801e0be:	68fb      	ldr	r3, [r7, #12]
 801e0c0:	2290      	movs	r2, #144	@ 0x90
 801e0c2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 801e0c4:	68fb      	ldr	r3, [r7, #12]
 801e0c6:	681b      	ldr	r3, [r3, #0]
 801e0c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801e0ca:	4618      	mov	r0, r3
 801e0cc:	f002 fe17 	bl	8020cfe <SDMMC_CmdWriteSingleBlock>
 801e0d0:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 801e0d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e0d4:	2b00      	cmp	r3, #0
 801e0d6:	d012      	beq.n	801e0fe <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801e0d8:	68fb      	ldr	r3, [r7, #12]
 801e0da:	681b      	ldr	r3, [r3, #0]
 801e0dc:	4a0f      	ldr	r2, [pc, #60]	@ (801e11c <HAL_SD_WriteBlocks_DMA+0x14c>)
 801e0de:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 801e0e0:	68fb      	ldr	r3, [r7, #12]
 801e0e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801e0e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e0e6:	431a      	orrs	r2, r3
 801e0e8:	68fb      	ldr	r3, [r7, #12]
 801e0ea:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 801e0ec:	68fb      	ldr	r3, [r7, #12]
 801e0ee:	2201      	movs	r2, #1
 801e0f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 801e0f4:	68fb      	ldr	r3, [r7, #12]
 801e0f6:	2200      	movs	r2, #0
 801e0f8:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 801e0fa:	2301      	movs	r3, #1
 801e0fc:	e00a      	b.n	801e114 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 801e0fe:	68fb      	ldr	r3, [r7, #12]
 801e100:	681b      	ldr	r3, [r3, #0]
 801e102:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801e104:	68fb      	ldr	r3, [r7, #12]
 801e106:	681b      	ldr	r3, [r3, #0]
 801e108:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 801e10c:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 801e10e:	2300      	movs	r3, #0
 801e110:	e000      	b.n	801e114 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 801e112:	2302      	movs	r3, #2
  }
}
 801e114:	4618      	mov	r0, r3
 801e116:	3730      	adds	r7, #48	@ 0x30
 801e118:	46bd      	mov	sp, r7
 801e11a:	bd80      	pop	{r7, pc}
 801e11c:	1fe00fff 	.word	0x1fe00fff

0801e120 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 801e120:	b580      	push	{r7, lr}
 801e122:	b084      	sub	sp, #16
 801e124:	af00      	add	r7, sp, #0
 801e126:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 801e128:	687b      	ldr	r3, [r7, #4]
 801e12a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e12c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 801e12e:	687b      	ldr	r3, [r7, #4]
 801e130:	681b      	ldr	r3, [r3, #0]
 801e132:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801e134:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801e138:	2b00      	cmp	r3, #0
 801e13a:	d008      	beq.n	801e14e <HAL_SD_IRQHandler+0x2e>
 801e13c:	68fb      	ldr	r3, [r7, #12]
 801e13e:	f003 0308 	and.w	r3, r3, #8
 801e142:	2b00      	cmp	r3, #0
 801e144:	d003      	beq.n	801e14e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 801e146:	6878      	ldr	r0, [r7, #4]
 801e148:	f001 f926 	bl	801f398 <SD_Read_IT>
 801e14c:	e19a      	b.n	801e484 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 801e14e:	687b      	ldr	r3, [r7, #4]
 801e150:	681b      	ldr	r3, [r3, #0]
 801e152:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801e154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801e158:	2b00      	cmp	r3, #0
 801e15a:	f000 80ac 	beq.w	801e2b6 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 801e15e:	687b      	ldr	r3, [r7, #4]
 801e160:	681b      	ldr	r3, [r3, #0]
 801e162:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801e166:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 801e168:	687b      	ldr	r3, [r7, #4]
 801e16a:	681b      	ldr	r3, [r3, #0]
 801e16c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 801e16e:	687b      	ldr	r3, [r7, #4]
 801e170:	681a      	ldr	r2, [r3, #0]
 801e172:	4b59      	ldr	r3, [pc, #356]	@ (801e2d8 <HAL_SD_IRQHandler+0x1b8>)
 801e174:	400b      	ands	r3, r1
 801e176:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 801e178:	687b      	ldr	r3, [r7, #4]
 801e17a:	681b      	ldr	r3, [r3, #0]
 801e17c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801e17e:	687b      	ldr	r3, [r7, #4]
 801e180:	681b      	ldr	r3, [r3, #0]
 801e182:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 801e186:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 801e188:	687b      	ldr	r3, [r7, #4]
 801e18a:	681b      	ldr	r3, [r3, #0]
 801e18c:	68da      	ldr	r2, [r3, #12]
 801e18e:	687b      	ldr	r3, [r7, #4]
 801e190:	681b      	ldr	r3, [r3, #0]
 801e192:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801e196:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 801e198:	68fb      	ldr	r3, [r7, #12]
 801e19a:	f003 0308 	and.w	r3, r3, #8
 801e19e:	2b00      	cmp	r3, #0
 801e1a0:	d038      	beq.n	801e214 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 801e1a2:	68fb      	ldr	r3, [r7, #12]
 801e1a4:	f003 0302 	and.w	r3, r3, #2
 801e1a8:	2b00      	cmp	r3, #0
 801e1aa:	d104      	bne.n	801e1b6 <HAL_SD_IRQHandler+0x96>
 801e1ac:	68fb      	ldr	r3, [r7, #12]
 801e1ae:	f003 0320 	and.w	r3, r3, #32
 801e1b2:	2b00      	cmp	r3, #0
 801e1b4:	d011      	beq.n	801e1da <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 801e1b6:	687b      	ldr	r3, [r7, #4]
 801e1b8:	681b      	ldr	r3, [r3, #0]
 801e1ba:	4618      	mov	r0, r3
 801e1bc:	f002 fde6 	bl	8020d8c <SDMMC_CmdStopTransfer>
 801e1c0:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 801e1c2:	68bb      	ldr	r3, [r7, #8]
 801e1c4:	2b00      	cmp	r3, #0
 801e1c6:	d008      	beq.n	801e1da <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 801e1c8:	687b      	ldr	r3, [r7, #4]
 801e1ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801e1cc:	68bb      	ldr	r3, [r7, #8]
 801e1ce:	431a      	orrs	r2, r3
 801e1d0:	687b      	ldr	r3, [r7, #4]
 801e1d2:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 801e1d4:	6878      	ldr	r0, [r7, #4]
 801e1d6:	f000 f95b 	bl	801e490 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801e1da:	687b      	ldr	r3, [r7, #4]
 801e1dc:	681b      	ldr	r3, [r3, #0]
 801e1de:	4a3f      	ldr	r2, [pc, #252]	@ (801e2dc <HAL_SD_IRQHandler+0x1bc>)
 801e1e0:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 801e1e2:	687b      	ldr	r3, [r7, #4]
 801e1e4:	2201      	movs	r2, #1
 801e1e6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 801e1ea:	687b      	ldr	r3, [r7, #4]
 801e1ec:	2200      	movs	r2, #0
 801e1ee:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 801e1f0:	68fb      	ldr	r3, [r7, #12]
 801e1f2:	f003 0301 	and.w	r3, r3, #1
 801e1f6:	2b00      	cmp	r3, #0
 801e1f8:	d104      	bne.n	801e204 <HAL_SD_IRQHandler+0xe4>
 801e1fa:	68fb      	ldr	r3, [r7, #12]
 801e1fc:	f003 0302 	and.w	r3, r3, #2
 801e200:	2b00      	cmp	r3, #0
 801e202:	d003      	beq.n	801e20c <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 801e204:	6878      	ldr	r0, [r7, #4]
 801e206:	f003 fa73 	bl	80216f0 <HAL_SD_RxCpltCallback>
 801e20a:	e13b      	b.n	801e484 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 801e20c:	6878      	ldr	r0, [r7, #4]
 801e20e:	f003 fa65 	bl	80216dc <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 801e212:	e137      	b.n	801e484 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 801e214:	68fb      	ldr	r3, [r7, #12]
 801e216:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801e21a:	2b00      	cmp	r3, #0
 801e21c:	f000 8132 	beq.w	801e484 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 801e220:	687b      	ldr	r3, [r7, #4]
 801e222:	681b      	ldr	r3, [r3, #0]
 801e224:	2200      	movs	r2, #0
 801e226:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 801e228:	687b      	ldr	r3, [r7, #4]
 801e22a:	681b      	ldr	r3, [r3, #0]
 801e22c:	2200      	movs	r2, #0
 801e22e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 801e230:	687b      	ldr	r3, [r7, #4]
 801e232:	681b      	ldr	r3, [r3, #0]
 801e234:	2200      	movs	r2, #0
 801e236:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 801e238:	68fb      	ldr	r3, [r7, #12]
 801e23a:	f003 0302 	and.w	r3, r3, #2
 801e23e:	2b00      	cmp	r3, #0
 801e240:	d104      	bne.n	801e24c <HAL_SD_IRQHandler+0x12c>
 801e242:	68fb      	ldr	r3, [r7, #12]
 801e244:	f003 0320 	and.w	r3, r3, #32
 801e248:	2b00      	cmp	r3, #0
 801e24a:	d011      	beq.n	801e270 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 801e24c:	687b      	ldr	r3, [r7, #4]
 801e24e:	681b      	ldr	r3, [r3, #0]
 801e250:	4618      	mov	r0, r3
 801e252:	f002 fd9b 	bl	8020d8c <SDMMC_CmdStopTransfer>
 801e256:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 801e258:	68bb      	ldr	r3, [r7, #8]
 801e25a:	2b00      	cmp	r3, #0
 801e25c:	d008      	beq.n	801e270 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 801e25e:	687b      	ldr	r3, [r7, #4]
 801e260:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801e262:	68bb      	ldr	r3, [r7, #8]
 801e264:	431a      	orrs	r2, r3
 801e266:	687b      	ldr	r3, [r7, #4]
 801e268:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 801e26a:	6878      	ldr	r0, [r7, #4]
 801e26c:	f000 f910 	bl	801e490 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 801e270:	687b      	ldr	r3, [r7, #4]
 801e272:	2201      	movs	r2, #1
 801e274:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 801e278:	687b      	ldr	r3, [r7, #4]
 801e27a:	2200      	movs	r2, #0
 801e27c:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 801e27e:	68fb      	ldr	r3, [r7, #12]
 801e280:	f003 0310 	and.w	r3, r3, #16
 801e284:	2b00      	cmp	r3, #0
 801e286:	d104      	bne.n	801e292 <HAL_SD_IRQHandler+0x172>
 801e288:	68fb      	ldr	r3, [r7, #12]
 801e28a:	f003 0320 	and.w	r3, r3, #32
 801e28e:	2b00      	cmp	r3, #0
 801e290:	d002      	beq.n	801e298 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 801e292:	6878      	ldr	r0, [r7, #4]
 801e294:	f003 fa22 	bl	80216dc <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 801e298:	68fb      	ldr	r3, [r7, #12]
 801e29a:	f003 0301 	and.w	r3, r3, #1
 801e29e:	2b00      	cmp	r3, #0
 801e2a0:	d105      	bne.n	801e2ae <HAL_SD_IRQHandler+0x18e>
 801e2a2:	68fb      	ldr	r3, [r7, #12]
 801e2a4:	f003 0302 	and.w	r3, r3, #2
 801e2a8:	2b00      	cmp	r3, #0
 801e2aa:	f000 80eb 	beq.w	801e484 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 801e2ae:	6878      	ldr	r0, [r7, #4]
 801e2b0:	f003 fa1e 	bl	80216f0 <HAL_SD_RxCpltCallback>
}
 801e2b4:	e0e6      	b.n	801e484 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 801e2b6:	687b      	ldr	r3, [r7, #4]
 801e2b8:	681b      	ldr	r3, [r3, #0]
 801e2ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801e2bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801e2c0:	2b00      	cmp	r3, #0
 801e2c2:	d00d      	beq.n	801e2e0 <HAL_SD_IRQHandler+0x1c0>
 801e2c4:	68fb      	ldr	r3, [r7, #12]
 801e2c6:	f003 0308 	and.w	r3, r3, #8
 801e2ca:	2b00      	cmp	r3, #0
 801e2cc:	d008      	beq.n	801e2e0 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 801e2ce:	6878      	ldr	r0, [r7, #4]
 801e2d0:	f001 f8a8 	bl	801f424 <SD_Write_IT>
 801e2d4:	e0d6      	b.n	801e484 <HAL_SD_IRQHandler+0x364>
 801e2d6:	bf00      	nop
 801e2d8:	ffff3ec5 	.word	0xffff3ec5
 801e2dc:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 801e2e0:	687b      	ldr	r3, [r7, #4]
 801e2e2:	681b      	ldr	r3, [r3, #0]
 801e2e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801e2e6:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 801e2ea:	2b00      	cmp	r3, #0
 801e2ec:	f000 809d 	beq.w	801e42a <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 801e2f0:	687b      	ldr	r3, [r7, #4]
 801e2f2:	681b      	ldr	r3, [r3, #0]
 801e2f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801e2f6:	f003 0302 	and.w	r3, r3, #2
 801e2fa:	2b00      	cmp	r3, #0
 801e2fc:	d005      	beq.n	801e30a <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 801e2fe:	687b      	ldr	r3, [r7, #4]
 801e300:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801e302:	f043 0202 	orr.w	r2, r3, #2
 801e306:	687b      	ldr	r3, [r7, #4]
 801e308:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 801e30a:	687b      	ldr	r3, [r7, #4]
 801e30c:	681b      	ldr	r3, [r3, #0]
 801e30e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801e310:	f003 0308 	and.w	r3, r3, #8
 801e314:	2b00      	cmp	r3, #0
 801e316:	d005      	beq.n	801e324 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 801e318:	687b      	ldr	r3, [r7, #4]
 801e31a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801e31c:	f043 0208 	orr.w	r2, r3, #8
 801e320:	687b      	ldr	r3, [r7, #4]
 801e322:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 801e324:	687b      	ldr	r3, [r7, #4]
 801e326:	681b      	ldr	r3, [r3, #0]
 801e328:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801e32a:	f003 0320 	and.w	r3, r3, #32
 801e32e:	2b00      	cmp	r3, #0
 801e330:	d005      	beq.n	801e33e <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 801e332:	687b      	ldr	r3, [r7, #4]
 801e334:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801e336:	f043 0220 	orr.w	r2, r3, #32
 801e33a:	687b      	ldr	r3, [r7, #4]
 801e33c:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 801e33e:	687b      	ldr	r3, [r7, #4]
 801e340:	681b      	ldr	r3, [r3, #0]
 801e342:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801e344:	f003 0310 	and.w	r3, r3, #16
 801e348:	2b00      	cmp	r3, #0
 801e34a:	d005      	beq.n	801e358 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 801e34c:	687b      	ldr	r3, [r7, #4]
 801e34e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801e350:	f043 0210 	orr.w	r2, r3, #16
 801e354:	687b      	ldr	r3, [r7, #4]
 801e356:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801e358:	687b      	ldr	r3, [r7, #4]
 801e35a:	681b      	ldr	r3, [r3, #0]
 801e35c:	4a4b      	ldr	r2, [pc, #300]	@ (801e48c <HAL_SD_IRQHandler+0x36c>)
 801e35e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 801e360:	687b      	ldr	r3, [r7, #4]
 801e362:	681b      	ldr	r3, [r3, #0]
 801e364:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801e366:	687b      	ldr	r3, [r7, #4]
 801e368:	681b      	ldr	r3, [r3, #0]
 801e36a:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 801e36e:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 801e370:	687b      	ldr	r3, [r7, #4]
 801e372:	681b      	ldr	r3, [r3, #0]
 801e374:	68da      	ldr	r2, [r3, #12]
 801e376:	687b      	ldr	r3, [r7, #4]
 801e378:	681b      	ldr	r3, [r3, #0]
 801e37a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801e37e:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 801e380:	687b      	ldr	r3, [r7, #4]
 801e382:	681b      	ldr	r3, [r3, #0]
 801e384:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801e386:	687b      	ldr	r3, [r7, #4]
 801e388:	681b      	ldr	r3, [r3, #0]
 801e38a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 801e38e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 801e390:	687b      	ldr	r3, [r7, #4]
 801e392:	681b      	ldr	r3, [r3, #0]
 801e394:	68da      	ldr	r2, [r3, #12]
 801e396:	687b      	ldr	r3, [r7, #4]
 801e398:	681b      	ldr	r3, [r3, #0]
 801e39a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 801e39e:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 801e3a0:	687b      	ldr	r3, [r7, #4]
 801e3a2:	681b      	ldr	r3, [r3, #0]
 801e3a4:	4618      	mov	r0, r3
 801e3a6:	f002 fcf1 	bl	8020d8c <SDMMC_CmdStopTransfer>
 801e3aa:	4602      	mov	r2, r0
 801e3ac:	687b      	ldr	r3, [r7, #4]
 801e3ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801e3b0:	431a      	orrs	r2, r3
 801e3b2:	687b      	ldr	r3, [r7, #4]
 801e3b4:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 801e3b6:	687b      	ldr	r3, [r7, #4]
 801e3b8:	681b      	ldr	r3, [r3, #0]
 801e3ba:	68da      	ldr	r2, [r3, #12]
 801e3bc:	687b      	ldr	r3, [r7, #4]
 801e3be:	681b      	ldr	r3, [r3, #0]
 801e3c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801e3c4:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 801e3c6:	687b      	ldr	r3, [r7, #4]
 801e3c8:	681b      	ldr	r3, [r3, #0]
 801e3ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801e3ce:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 801e3d0:	68fb      	ldr	r3, [r7, #12]
 801e3d2:	f003 0308 	and.w	r3, r3, #8
 801e3d6:	2b00      	cmp	r3, #0
 801e3d8:	d00a      	beq.n	801e3f0 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 801e3da:	687b      	ldr	r3, [r7, #4]
 801e3dc:	2201      	movs	r2, #1
 801e3de:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 801e3e2:	687b      	ldr	r3, [r7, #4]
 801e3e4:	2200      	movs	r2, #0
 801e3e6:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 801e3e8:	6878      	ldr	r0, [r7, #4]
 801e3ea:	f000 f851 	bl	801e490 <HAL_SD_ErrorCallback>
}
 801e3ee:	e049      	b.n	801e484 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 801e3f0:	68fb      	ldr	r3, [r7, #12]
 801e3f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801e3f6:	2b00      	cmp	r3, #0
 801e3f8:	d044      	beq.n	801e484 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 801e3fa:	687b      	ldr	r3, [r7, #4]
 801e3fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801e3fe:	2b00      	cmp	r3, #0
 801e400:	d040      	beq.n	801e484 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 801e402:	687b      	ldr	r3, [r7, #4]
 801e404:	681b      	ldr	r3, [r3, #0]
 801e406:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801e408:	687b      	ldr	r3, [r7, #4]
 801e40a:	681b      	ldr	r3, [r3, #0]
 801e40c:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 801e410:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 801e412:	687b      	ldr	r3, [r7, #4]
 801e414:	681b      	ldr	r3, [r3, #0]
 801e416:	2200      	movs	r2, #0
 801e418:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 801e41a:	687b      	ldr	r3, [r7, #4]
 801e41c:	2201      	movs	r2, #1
 801e41e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 801e422:	6878      	ldr	r0, [r7, #4]
 801e424:	f000 f834 	bl	801e490 <HAL_SD_ErrorCallback>
}
 801e428:	e02c      	b.n	801e484 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 801e42a:	687b      	ldr	r3, [r7, #4]
 801e42c:	681b      	ldr	r3, [r3, #0]
 801e42e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801e430:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801e434:	2b00      	cmp	r3, #0
 801e436:	d025      	beq.n	801e484 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 801e438:	687b      	ldr	r3, [r7, #4]
 801e43a:	681b      	ldr	r3, [r3, #0]
 801e43c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801e440:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 801e442:	687b      	ldr	r3, [r7, #4]
 801e444:	681b      	ldr	r3, [r3, #0]
 801e446:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e448:	f003 0304 	and.w	r3, r3, #4
 801e44c:	2b00      	cmp	r3, #0
 801e44e:	d10c      	bne.n	801e46a <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 801e450:	68fb      	ldr	r3, [r7, #12]
 801e452:	f003 0320 	and.w	r3, r3, #32
 801e456:	2b00      	cmp	r3, #0
 801e458:	d003      	beq.n	801e462 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 801e45a:	6878      	ldr	r0, [r7, #4]
 801e45c:	f001 f84a 	bl	801f4f4 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 801e460:	e010      	b.n	801e484 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 801e462:	6878      	ldr	r0, [r7, #4]
 801e464:	f001 f832 	bl	801f4cc <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 801e468:	e00c      	b.n	801e484 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 801e46a:	68fb      	ldr	r3, [r7, #12]
 801e46c:	f003 0320 	and.w	r3, r3, #32
 801e470:	2b00      	cmp	r3, #0
 801e472:	d003      	beq.n	801e47c <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 801e474:	6878      	ldr	r0, [r7, #4]
 801e476:	f001 f833 	bl	801f4e0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 801e47a:	e003      	b.n	801e484 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 801e47c:	6878      	ldr	r0, [r7, #4]
 801e47e:	f001 f81b 	bl	801f4b8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 801e482:	e7ff      	b.n	801e484 <HAL_SD_IRQHandler+0x364>
 801e484:	bf00      	nop
 801e486:	3710      	adds	r7, #16
 801e488:	46bd      	mov	sp, r7
 801e48a:	bd80      	pop	{r7, pc}
 801e48c:	18000f3a 	.word	0x18000f3a

0801e490 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 801e490:	b480      	push	{r7}
 801e492:	b083      	sub	sp, #12
 801e494:	af00      	add	r7, sp, #0
 801e496:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 801e498:	bf00      	nop
 801e49a:	370c      	adds	r7, #12
 801e49c:	46bd      	mov	sp, r7
 801e49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e4a2:	4770      	bx	lr

0801e4a4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 801e4a4:	b480      	push	{r7}
 801e4a6:	b083      	sub	sp, #12
 801e4a8:	af00      	add	r7, sp, #0
 801e4aa:	6078      	str	r0, [r7, #4]
 801e4ac:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 801e4ae:	687b      	ldr	r3, [r7, #4]
 801e4b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801e4b2:	0f9b      	lsrs	r3, r3, #30
 801e4b4:	b2da      	uxtb	r2, r3
 801e4b6:	683b      	ldr	r3, [r7, #0]
 801e4b8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 801e4ba:	687b      	ldr	r3, [r7, #4]
 801e4bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801e4be:	0e9b      	lsrs	r3, r3, #26
 801e4c0:	b2db      	uxtb	r3, r3
 801e4c2:	f003 030f 	and.w	r3, r3, #15
 801e4c6:	b2da      	uxtb	r2, r3
 801e4c8:	683b      	ldr	r3, [r7, #0]
 801e4ca:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 801e4cc:	687b      	ldr	r3, [r7, #4]
 801e4ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801e4d0:	0e1b      	lsrs	r3, r3, #24
 801e4d2:	b2db      	uxtb	r3, r3
 801e4d4:	f003 0303 	and.w	r3, r3, #3
 801e4d8:	b2da      	uxtb	r2, r3
 801e4da:	683b      	ldr	r3, [r7, #0]
 801e4dc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 801e4de:	687b      	ldr	r3, [r7, #4]
 801e4e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801e4e2:	0c1b      	lsrs	r3, r3, #16
 801e4e4:	b2da      	uxtb	r2, r3
 801e4e6:	683b      	ldr	r3, [r7, #0]
 801e4e8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 801e4ea:	687b      	ldr	r3, [r7, #4]
 801e4ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801e4ee:	0a1b      	lsrs	r3, r3, #8
 801e4f0:	b2da      	uxtb	r2, r3
 801e4f2:	683b      	ldr	r3, [r7, #0]
 801e4f4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 801e4f6:	687b      	ldr	r3, [r7, #4]
 801e4f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801e4fa:	b2da      	uxtb	r2, r3
 801e4fc:	683b      	ldr	r3, [r7, #0]
 801e4fe:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 801e500:	687b      	ldr	r3, [r7, #4]
 801e502:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e504:	0d1b      	lsrs	r3, r3, #20
 801e506:	b29a      	uxth	r2, r3
 801e508:	683b      	ldr	r3, [r7, #0]
 801e50a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 801e50c:	687b      	ldr	r3, [r7, #4]
 801e50e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e510:	0c1b      	lsrs	r3, r3, #16
 801e512:	b2db      	uxtb	r3, r3
 801e514:	f003 030f 	and.w	r3, r3, #15
 801e518:	b2da      	uxtb	r2, r3
 801e51a:	683b      	ldr	r3, [r7, #0]
 801e51c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 801e51e:	687b      	ldr	r3, [r7, #4]
 801e520:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e522:	0bdb      	lsrs	r3, r3, #15
 801e524:	b2db      	uxtb	r3, r3
 801e526:	f003 0301 	and.w	r3, r3, #1
 801e52a:	b2da      	uxtb	r2, r3
 801e52c:	683b      	ldr	r3, [r7, #0]
 801e52e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 801e530:	687b      	ldr	r3, [r7, #4]
 801e532:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e534:	0b9b      	lsrs	r3, r3, #14
 801e536:	b2db      	uxtb	r3, r3
 801e538:	f003 0301 	and.w	r3, r3, #1
 801e53c:	b2da      	uxtb	r2, r3
 801e53e:	683b      	ldr	r3, [r7, #0]
 801e540:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 801e542:	687b      	ldr	r3, [r7, #4]
 801e544:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e546:	0b5b      	lsrs	r3, r3, #13
 801e548:	b2db      	uxtb	r3, r3
 801e54a:	f003 0301 	and.w	r3, r3, #1
 801e54e:	b2da      	uxtb	r2, r3
 801e550:	683b      	ldr	r3, [r7, #0]
 801e552:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 801e554:	687b      	ldr	r3, [r7, #4]
 801e556:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e558:	0b1b      	lsrs	r3, r3, #12
 801e55a:	b2db      	uxtb	r3, r3
 801e55c:	f003 0301 	and.w	r3, r3, #1
 801e560:	b2da      	uxtb	r2, r3
 801e562:	683b      	ldr	r3, [r7, #0]
 801e564:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 801e566:	683b      	ldr	r3, [r7, #0]
 801e568:	2200      	movs	r2, #0
 801e56a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 801e56c:	687b      	ldr	r3, [r7, #4]
 801e56e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e570:	2b00      	cmp	r3, #0
 801e572:	d163      	bne.n	801e63c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 801e574:	687b      	ldr	r3, [r7, #4]
 801e576:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e578:	009a      	lsls	r2, r3, #2
 801e57a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 801e57e:	4013      	ands	r3, r2
 801e580:	687a      	ldr	r2, [r7, #4]
 801e582:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 801e584:	0f92      	lsrs	r2, r2, #30
 801e586:	431a      	orrs	r2, r3
 801e588:	683b      	ldr	r3, [r7, #0]
 801e58a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 801e58c:	687b      	ldr	r3, [r7, #4]
 801e58e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801e590:	0edb      	lsrs	r3, r3, #27
 801e592:	b2db      	uxtb	r3, r3
 801e594:	f003 0307 	and.w	r3, r3, #7
 801e598:	b2da      	uxtb	r2, r3
 801e59a:	683b      	ldr	r3, [r7, #0]
 801e59c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 801e59e:	687b      	ldr	r3, [r7, #4]
 801e5a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801e5a2:	0e1b      	lsrs	r3, r3, #24
 801e5a4:	b2db      	uxtb	r3, r3
 801e5a6:	f003 0307 	and.w	r3, r3, #7
 801e5aa:	b2da      	uxtb	r2, r3
 801e5ac:	683b      	ldr	r3, [r7, #0]
 801e5ae:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 801e5b0:	687b      	ldr	r3, [r7, #4]
 801e5b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801e5b4:	0d5b      	lsrs	r3, r3, #21
 801e5b6:	b2db      	uxtb	r3, r3
 801e5b8:	f003 0307 	and.w	r3, r3, #7
 801e5bc:	b2da      	uxtb	r2, r3
 801e5be:	683b      	ldr	r3, [r7, #0]
 801e5c0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 801e5c2:	687b      	ldr	r3, [r7, #4]
 801e5c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801e5c6:	0c9b      	lsrs	r3, r3, #18
 801e5c8:	b2db      	uxtb	r3, r3
 801e5ca:	f003 0307 	and.w	r3, r3, #7
 801e5ce:	b2da      	uxtb	r2, r3
 801e5d0:	683b      	ldr	r3, [r7, #0]
 801e5d2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 801e5d4:	687b      	ldr	r3, [r7, #4]
 801e5d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801e5d8:	0bdb      	lsrs	r3, r3, #15
 801e5da:	b2db      	uxtb	r3, r3
 801e5dc:	f003 0307 	and.w	r3, r3, #7
 801e5e0:	b2da      	uxtb	r2, r3
 801e5e2:	683b      	ldr	r3, [r7, #0]
 801e5e4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 801e5e6:	683b      	ldr	r3, [r7, #0]
 801e5e8:	691b      	ldr	r3, [r3, #16]
 801e5ea:	1c5a      	adds	r2, r3, #1
 801e5ec:	687b      	ldr	r3, [r7, #4]
 801e5ee:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 801e5f0:	683b      	ldr	r3, [r7, #0]
 801e5f2:	7e1b      	ldrb	r3, [r3, #24]
 801e5f4:	b2db      	uxtb	r3, r3
 801e5f6:	f003 0307 	and.w	r3, r3, #7
 801e5fa:	3302      	adds	r3, #2
 801e5fc:	2201      	movs	r2, #1
 801e5fe:	fa02 f303 	lsl.w	r3, r2, r3
 801e602:	687a      	ldr	r2, [r7, #4]
 801e604:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801e606:	fb03 f202 	mul.w	r2, r3, r2
 801e60a:	687b      	ldr	r3, [r7, #4]
 801e60c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 801e60e:	683b      	ldr	r3, [r7, #0]
 801e610:	7a1b      	ldrb	r3, [r3, #8]
 801e612:	b2db      	uxtb	r3, r3
 801e614:	f003 030f 	and.w	r3, r3, #15
 801e618:	2201      	movs	r2, #1
 801e61a:	409a      	lsls	r2, r3
 801e61c:	687b      	ldr	r3, [r7, #4]
 801e61e:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 801e620:	687b      	ldr	r3, [r7, #4]
 801e622:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801e624:	687a      	ldr	r2, [r7, #4]
 801e626:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 801e628:	0a52      	lsrs	r2, r2, #9
 801e62a:	fb03 f202 	mul.w	r2, r3, r2
 801e62e:	687b      	ldr	r3, [r7, #4]
 801e630:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 801e632:	687b      	ldr	r3, [r7, #4]
 801e634:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801e638:	655a      	str	r2, [r3, #84]	@ 0x54
 801e63a:	e031      	b.n	801e6a0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 801e63c:	687b      	ldr	r3, [r7, #4]
 801e63e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e640:	2b01      	cmp	r3, #1
 801e642:	d11d      	bne.n	801e680 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 801e644:	687b      	ldr	r3, [r7, #4]
 801e646:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e648:	041b      	lsls	r3, r3, #16
 801e64a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 801e64e:	687b      	ldr	r3, [r7, #4]
 801e650:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801e652:	0c1b      	lsrs	r3, r3, #16
 801e654:	431a      	orrs	r2, r3
 801e656:	683b      	ldr	r3, [r7, #0]
 801e658:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 801e65a:	683b      	ldr	r3, [r7, #0]
 801e65c:	691b      	ldr	r3, [r3, #16]
 801e65e:	3301      	adds	r3, #1
 801e660:	029a      	lsls	r2, r3, #10
 801e662:	687b      	ldr	r3, [r7, #4]
 801e664:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 801e666:	687b      	ldr	r3, [r7, #4]
 801e668:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801e66a:	687b      	ldr	r3, [r7, #4]
 801e66c:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 801e66e:	687b      	ldr	r3, [r7, #4]
 801e670:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801e674:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 801e676:	687b      	ldr	r3, [r7, #4]
 801e678:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801e67a:	687b      	ldr	r3, [r7, #4]
 801e67c:	655a      	str	r2, [r3, #84]	@ 0x54
 801e67e:	e00f      	b.n	801e6a0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801e680:	687b      	ldr	r3, [r7, #4]
 801e682:	681b      	ldr	r3, [r3, #0]
 801e684:	4a58      	ldr	r2, [pc, #352]	@ (801e7e8 <HAL_SD_GetCardCSD+0x344>)
 801e686:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801e688:	687b      	ldr	r3, [r7, #4]
 801e68a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801e68c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 801e690:	687b      	ldr	r3, [r7, #4]
 801e692:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 801e694:	687b      	ldr	r3, [r7, #4]
 801e696:	2201      	movs	r2, #1
 801e698:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 801e69c:	2301      	movs	r3, #1
 801e69e:	e09d      	b.n	801e7dc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 801e6a0:	687b      	ldr	r3, [r7, #4]
 801e6a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801e6a4:	0b9b      	lsrs	r3, r3, #14
 801e6a6:	b2db      	uxtb	r3, r3
 801e6a8:	f003 0301 	and.w	r3, r3, #1
 801e6ac:	b2da      	uxtb	r2, r3
 801e6ae:	683b      	ldr	r3, [r7, #0]
 801e6b0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 801e6b2:	687b      	ldr	r3, [r7, #4]
 801e6b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801e6b6:	09db      	lsrs	r3, r3, #7
 801e6b8:	b2db      	uxtb	r3, r3
 801e6ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801e6be:	b2da      	uxtb	r2, r3
 801e6c0:	683b      	ldr	r3, [r7, #0]
 801e6c2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 801e6c4:	687b      	ldr	r3, [r7, #4]
 801e6c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801e6c8:	b2db      	uxtb	r3, r3
 801e6ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801e6ce:	b2da      	uxtb	r2, r3
 801e6d0:	683b      	ldr	r3, [r7, #0]
 801e6d2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 801e6d4:	687b      	ldr	r3, [r7, #4]
 801e6d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801e6d8:	0fdb      	lsrs	r3, r3, #31
 801e6da:	b2da      	uxtb	r2, r3
 801e6dc:	683b      	ldr	r3, [r7, #0]
 801e6de:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 801e6e0:	687b      	ldr	r3, [r7, #4]
 801e6e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801e6e4:	0f5b      	lsrs	r3, r3, #29
 801e6e6:	b2db      	uxtb	r3, r3
 801e6e8:	f003 0303 	and.w	r3, r3, #3
 801e6ec:	b2da      	uxtb	r2, r3
 801e6ee:	683b      	ldr	r3, [r7, #0]
 801e6f0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 801e6f2:	687b      	ldr	r3, [r7, #4]
 801e6f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801e6f6:	0e9b      	lsrs	r3, r3, #26
 801e6f8:	b2db      	uxtb	r3, r3
 801e6fa:	f003 0307 	and.w	r3, r3, #7
 801e6fe:	b2da      	uxtb	r2, r3
 801e700:	683b      	ldr	r3, [r7, #0]
 801e702:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 801e704:	687b      	ldr	r3, [r7, #4]
 801e706:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801e708:	0d9b      	lsrs	r3, r3, #22
 801e70a:	b2db      	uxtb	r3, r3
 801e70c:	f003 030f 	and.w	r3, r3, #15
 801e710:	b2da      	uxtb	r2, r3
 801e712:	683b      	ldr	r3, [r7, #0]
 801e714:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 801e716:	687b      	ldr	r3, [r7, #4]
 801e718:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801e71a:	0d5b      	lsrs	r3, r3, #21
 801e71c:	b2db      	uxtb	r3, r3
 801e71e:	f003 0301 	and.w	r3, r3, #1
 801e722:	b2da      	uxtb	r2, r3
 801e724:	683b      	ldr	r3, [r7, #0]
 801e726:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 801e72a:	683b      	ldr	r3, [r7, #0]
 801e72c:	2200      	movs	r2, #0
 801e72e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 801e732:	687b      	ldr	r3, [r7, #4]
 801e734:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801e736:	0c1b      	lsrs	r3, r3, #16
 801e738:	b2db      	uxtb	r3, r3
 801e73a:	f003 0301 	and.w	r3, r3, #1
 801e73e:	b2da      	uxtb	r2, r3
 801e740:	683b      	ldr	r3, [r7, #0]
 801e742:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 801e746:	687b      	ldr	r3, [r7, #4]
 801e748:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801e74a:	0bdb      	lsrs	r3, r3, #15
 801e74c:	b2db      	uxtb	r3, r3
 801e74e:	f003 0301 	and.w	r3, r3, #1
 801e752:	b2da      	uxtb	r2, r3
 801e754:	683b      	ldr	r3, [r7, #0]
 801e756:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 801e75a:	687b      	ldr	r3, [r7, #4]
 801e75c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801e75e:	0b9b      	lsrs	r3, r3, #14
 801e760:	b2db      	uxtb	r3, r3
 801e762:	f003 0301 	and.w	r3, r3, #1
 801e766:	b2da      	uxtb	r2, r3
 801e768:	683b      	ldr	r3, [r7, #0]
 801e76a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 801e76e:	687b      	ldr	r3, [r7, #4]
 801e770:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801e772:	0b5b      	lsrs	r3, r3, #13
 801e774:	b2db      	uxtb	r3, r3
 801e776:	f003 0301 	and.w	r3, r3, #1
 801e77a:	b2da      	uxtb	r2, r3
 801e77c:	683b      	ldr	r3, [r7, #0]
 801e77e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 801e782:	687b      	ldr	r3, [r7, #4]
 801e784:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801e786:	0b1b      	lsrs	r3, r3, #12
 801e788:	b2db      	uxtb	r3, r3
 801e78a:	f003 0301 	and.w	r3, r3, #1
 801e78e:	b2da      	uxtb	r2, r3
 801e790:	683b      	ldr	r3, [r7, #0]
 801e792:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 801e796:	687b      	ldr	r3, [r7, #4]
 801e798:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801e79a:	0a9b      	lsrs	r3, r3, #10
 801e79c:	b2db      	uxtb	r3, r3
 801e79e:	f003 0303 	and.w	r3, r3, #3
 801e7a2:	b2da      	uxtb	r2, r3
 801e7a4:	683b      	ldr	r3, [r7, #0]
 801e7a6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 801e7aa:	687b      	ldr	r3, [r7, #4]
 801e7ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801e7ae:	0a1b      	lsrs	r3, r3, #8
 801e7b0:	b2db      	uxtb	r3, r3
 801e7b2:	f003 0303 	and.w	r3, r3, #3
 801e7b6:	b2da      	uxtb	r2, r3
 801e7b8:	683b      	ldr	r3, [r7, #0]
 801e7ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 801e7be:	687b      	ldr	r3, [r7, #4]
 801e7c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801e7c2:	085b      	lsrs	r3, r3, #1
 801e7c4:	b2db      	uxtb	r3, r3
 801e7c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801e7ca:	b2da      	uxtb	r2, r3
 801e7cc:	683b      	ldr	r3, [r7, #0]
 801e7ce:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 801e7d2:	683b      	ldr	r3, [r7, #0]
 801e7d4:	2201      	movs	r2, #1
 801e7d6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 801e7da:	2300      	movs	r3, #0
}
 801e7dc:	4618      	mov	r0, r3
 801e7de:	370c      	adds	r7, #12
 801e7e0:	46bd      	mov	sp, r7
 801e7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e7e6:	4770      	bx	lr
 801e7e8:	1fe00fff 	.word	0x1fe00fff

0801e7ec <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 801e7ec:	b580      	push	{r7, lr}
 801e7ee:	b094      	sub	sp, #80	@ 0x50
 801e7f0:	af00      	add	r7, sp, #0
 801e7f2:	6078      	str	r0, [r7, #4]
 801e7f4:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 801e7f6:	2300      	movs	r3, #0
 801e7f8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 801e7fc:	687b      	ldr	r3, [r7, #4]
 801e7fe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801e802:	b2db      	uxtb	r3, r3
 801e804:	2b03      	cmp	r3, #3
 801e806:	d101      	bne.n	801e80c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 801e808:	2301      	movs	r3, #1
 801e80a:	e0a7      	b.n	801e95c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 801e80c:	f107 0308 	add.w	r3, r7, #8
 801e810:	4619      	mov	r1, r3
 801e812:	6878      	ldr	r0, [r7, #4]
 801e814:	f000 fb62 	bl	801eedc <SD_SendSDStatus>
 801e818:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 801e81a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801e81c:	2b00      	cmp	r3, #0
 801e81e:	d011      	beq.n	801e844 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801e820:	687b      	ldr	r3, [r7, #4]
 801e822:	681b      	ldr	r3, [r3, #0]
 801e824:	4a4f      	ldr	r2, [pc, #316]	@ (801e964 <HAL_SD_GetCardStatus+0x178>)
 801e826:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 801e828:	687b      	ldr	r3, [r7, #4]
 801e82a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801e82c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801e82e:	431a      	orrs	r2, r3
 801e830:	687b      	ldr	r3, [r7, #4]
 801e832:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 801e834:	687b      	ldr	r3, [r7, #4]
 801e836:	2201      	movs	r2, #1
 801e838:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 801e83c:	2301      	movs	r3, #1
 801e83e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 801e842:	e070      	b.n	801e926 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 801e844:	68bb      	ldr	r3, [r7, #8]
 801e846:	099b      	lsrs	r3, r3, #6
 801e848:	b2db      	uxtb	r3, r3
 801e84a:	f003 0303 	and.w	r3, r3, #3
 801e84e:	b2da      	uxtb	r2, r3
 801e850:	683b      	ldr	r3, [r7, #0]
 801e852:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 801e854:	68bb      	ldr	r3, [r7, #8]
 801e856:	095b      	lsrs	r3, r3, #5
 801e858:	b2db      	uxtb	r3, r3
 801e85a:	f003 0301 	and.w	r3, r3, #1
 801e85e:	b2da      	uxtb	r2, r3
 801e860:	683b      	ldr	r3, [r7, #0]
 801e862:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 801e864:	68bb      	ldr	r3, [r7, #8]
 801e866:	0a1b      	lsrs	r3, r3, #8
 801e868:	b29b      	uxth	r3, r3
 801e86a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801e86e:	b29a      	uxth	r2, r3
 801e870:	68bb      	ldr	r3, [r7, #8]
 801e872:	0e1b      	lsrs	r3, r3, #24
 801e874:	b29b      	uxth	r3, r3
 801e876:	4313      	orrs	r3, r2
 801e878:	b29a      	uxth	r2, r3
 801e87a:	683b      	ldr	r3, [r7, #0]
 801e87c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 801e87e:	68fb      	ldr	r3, [r7, #12]
 801e880:	061a      	lsls	r2, r3, #24
 801e882:	68fb      	ldr	r3, [r7, #12]
 801e884:	021b      	lsls	r3, r3, #8
 801e886:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801e88a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 801e88c:	68fb      	ldr	r3, [r7, #12]
 801e88e:	0a1b      	lsrs	r3, r3, #8
 801e890:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 801e894:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 801e896:	68fb      	ldr	r3, [r7, #12]
 801e898:	0e1b      	lsrs	r3, r3, #24
 801e89a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 801e89c:	683b      	ldr	r3, [r7, #0]
 801e89e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 801e8a0:	693b      	ldr	r3, [r7, #16]
 801e8a2:	b2da      	uxtb	r2, r3
 801e8a4:	683b      	ldr	r3, [r7, #0]
 801e8a6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 801e8a8:	693b      	ldr	r3, [r7, #16]
 801e8aa:	0a1b      	lsrs	r3, r3, #8
 801e8ac:	b2da      	uxtb	r2, r3
 801e8ae:	683b      	ldr	r3, [r7, #0]
 801e8b0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 801e8b2:	693b      	ldr	r3, [r7, #16]
 801e8b4:	0d1b      	lsrs	r3, r3, #20
 801e8b6:	b2db      	uxtb	r3, r3
 801e8b8:	f003 030f 	and.w	r3, r3, #15
 801e8bc:	b2da      	uxtb	r2, r3
 801e8be:	683b      	ldr	r3, [r7, #0]
 801e8c0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 801e8c2:	693b      	ldr	r3, [r7, #16]
 801e8c4:	0c1b      	lsrs	r3, r3, #16
 801e8c6:	b29b      	uxth	r3, r3
 801e8c8:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801e8cc:	b29a      	uxth	r2, r3
 801e8ce:	697b      	ldr	r3, [r7, #20]
 801e8d0:	b29b      	uxth	r3, r3
 801e8d2:	b2db      	uxtb	r3, r3
 801e8d4:	b29b      	uxth	r3, r3
 801e8d6:	4313      	orrs	r3, r2
 801e8d8:	b29a      	uxth	r2, r3
 801e8da:	683b      	ldr	r3, [r7, #0]
 801e8dc:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 801e8de:	697b      	ldr	r3, [r7, #20]
 801e8e0:	0a9b      	lsrs	r3, r3, #10
 801e8e2:	b2db      	uxtb	r3, r3
 801e8e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801e8e8:	b2da      	uxtb	r2, r3
 801e8ea:	683b      	ldr	r3, [r7, #0]
 801e8ec:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 801e8ee:	697b      	ldr	r3, [r7, #20]
 801e8f0:	0a1b      	lsrs	r3, r3, #8
 801e8f2:	b2db      	uxtb	r3, r3
 801e8f4:	f003 0303 	and.w	r3, r3, #3
 801e8f8:	b2da      	uxtb	r2, r3
 801e8fa:	683b      	ldr	r3, [r7, #0]
 801e8fc:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 801e8fe:	697b      	ldr	r3, [r7, #20]
 801e900:	091b      	lsrs	r3, r3, #4
 801e902:	b2db      	uxtb	r3, r3
 801e904:	f003 030f 	and.w	r3, r3, #15
 801e908:	b2da      	uxtb	r2, r3
 801e90a:	683b      	ldr	r3, [r7, #0]
 801e90c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 801e90e:	697b      	ldr	r3, [r7, #20]
 801e910:	b2db      	uxtb	r3, r3
 801e912:	f003 030f 	and.w	r3, r3, #15
 801e916:	b2da      	uxtb	r2, r3
 801e918:	683b      	ldr	r3, [r7, #0]
 801e91a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 801e91c:	69bb      	ldr	r3, [r7, #24]
 801e91e:	0e1b      	lsrs	r3, r3, #24
 801e920:	b2da      	uxtb	r2, r3
 801e922:	683b      	ldr	r3, [r7, #0]
 801e924:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 801e926:	687b      	ldr	r3, [r7, #4]
 801e928:	681b      	ldr	r3, [r3, #0]
 801e92a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801e92e:	4618      	mov	r0, r3
 801e930:	f002 f97c 	bl	8020c2c <SDMMC_CmdBlockLength>
 801e934:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 801e936:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801e938:	2b00      	cmp	r3, #0
 801e93a:	d00d      	beq.n	801e958 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801e93c:	687b      	ldr	r3, [r7, #4]
 801e93e:	681b      	ldr	r3, [r3, #0]
 801e940:	4a08      	ldr	r2, [pc, #32]	@ (801e964 <HAL_SD_GetCardStatus+0x178>)
 801e942:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 801e944:	687b      	ldr	r3, [r7, #4]
 801e946:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801e948:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 801e94a:	687b      	ldr	r3, [r7, #4]
 801e94c:	2201      	movs	r2, #1
 801e94e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 801e952:	2301      	movs	r3, #1
 801e954:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 801e958:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 801e95c:	4618      	mov	r0, r3
 801e95e:	3750      	adds	r7, #80	@ 0x50
 801e960:	46bd      	mov	sp, r7
 801e962:	bd80      	pop	{r7, pc}
 801e964:	1fe00fff 	.word	0x1fe00fff

0801e968 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 801e968:	b480      	push	{r7}
 801e96a:	b083      	sub	sp, #12
 801e96c:	af00      	add	r7, sp, #0
 801e96e:	6078      	str	r0, [r7, #4]
 801e970:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 801e972:	687b      	ldr	r3, [r7, #4]
 801e974:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801e976:	683b      	ldr	r3, [r7, #0]
 801e978:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 801e97a:	687b      	ldr	r3, [r7, #4]
 801e97c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801e97e:	683b      	ldr	r3, [r7, #0]
 801e980:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 801e982:	687b      	ldr	r3, [r7, #4]
 801e984:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801e986:	683b      	ldr	r3, [r7, #0]
 801e988:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 801e98a:	687b      	ldr	r3, [r7, #4]
 801e98c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801e98e:	683b      	ldr	r3, [r7, #0]
 801e990:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 801e992:	687b      	ldr	r3, [r7, #4]
 801e994:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801e996:	683b      	ldr	r3, [r7, #0]
 801e998:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 801e99a:	687b      	ldr	r3, [r7, #4]
 801e99c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801e99e:	683b      	ldr	r3, [r7, #0]
 801e9a0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 801e9a2:	687b      	ldr	r3, [r7, #4]
 801e9a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801e9a6:	683b      	ldr	r3, [r7, #0]
 801e9a8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 801e9aa:	687b      	ldr	r3, [r7, #4]
 801e9ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801e9ae:	683b      	ldr	r3, [r7, #0]
 801e9b0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 801e9b2:	2300      	movs	r3, #0
}
 801e9b4:	4618      	mov	r0, r3
 801e9b6:	370c      	adds	r7, #12
 801e9b8:	46bd      	mov	sp, r7
 801e9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e9be:	4770      	bx	lr

0801e9c0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 801e9c0:	b590      	push	{r4, r7, lr}
 801e9c2:	b08d      	sub	sp, #52	@ 0x34
 801e9c4:	af02      	add	r7, sp, #8
 801e9c6:	6078      	str	r0, [r7, #4]
 801e9c8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 801e9ca:	2300      	movs	r3, #0
 801e9cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 801e9d0:	687b      	ldr	r3, [r7, #4]
 801e9d2:	2203      	movs	r2, #3
 801e9d4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 801e9d8:	687b      	ldr	r3, [r7, #4]
 801e9da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e9dc:	2b03      	cmp	r3, #3
 801e9de:	d02e      	beq.n	801ea3e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 801e9e0:	683b      	ldr	r3, [r7, #0]
 801e9e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801e9e6:	d106      	bne.n	801e9f6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801e9e8:	687b      	ldr	r3, [r7, #4]
 801e9ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801e9ec:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 801e9f0:	687b      	ldr	r3, [r7, #4]
 801e9f2:	635a      	str	r2, [r3, #52]	@ 0x34
 801e9f4:	e029      	b.n	801ea4a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 801e9f6:	683b      	ldr	r3, [r7, #0]
 801e9f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801e9fc:	d10a      	bne.n	801ea14 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 801e9fe:	6878      	ldr	r0, [r7, #4]
 801ea00:	f000 fb64 	bl	801f0cc <SD_WideBus_Enable>
 801ea04:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 801ea06:	687b      	ldr	r3, [r7, #4]
 801ea08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801ea0a:	6a3b      	ldr	r3, [r7, #32]
 801ea0c:	431a      	orrs	r2, r3
 801ea0e:	687b      	ldr	r3, [r7, #4]
 801ea10:	635a      	str	r2, [r3, #52]	@ 0x34
 801ea12:	e01a      	b.n	801ea4a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 801ea14:	683b      	ldr	r3, [r7, #0]
 801ea16:	2b00      	cmp	r3, #0
 801ea18:	d10a      	bne.n	801ea30 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 801ea1a:	6878      	ldr	r0, [r7, #4]
 801ea1c:	f000 fba1 	bl	801f162 <SD_WideBus_Disable>
 801ea20:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 801ea22:	687b      	ldr	r3, [r7, #4]
 801ea24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801ea26:	6a3b      	ldr	r3, [r7, #32]
 801ea28:	431a      	orrs	r2, r3
 801ea2a:	687b      	ldr	r3, [r7, #4]
 801ea2c:	635a      	str	r2, [r3, #52]	@ 0x34
 801ea2e:	e00c      	b.n	801ea4a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 801ea30:	687b      	ldr	r3, [r7, #4]
 801ea32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ea34:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 801ea38:	687b      	ldr	r3, [r7, #4]
 801ea3a:	635a      	str	r2, [r3, #52]	@ 0x34
 801ea3c:	e005      	b.n	801ea4a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801ea3e:	687b      	ldr	r3, [r7, #4]
 801ea40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ea42:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 801ea46:	687b      	ldr	r3, [r7, #4]
 801ea48:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 801ea4a:	687b      	ldr	r3, [r7, #4]
 801ea4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ea4e:	2b00      	cmp	r3, #0
 801ea50:	d007      	beq.n	801ea62 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801ea52:	687b      	ldr	r3, [r7, #4]
 801ea54:	681b      	ldr	r3, [r3, #0]
 801ea56:	4a5f      	ldr	r2, [pc, #380]	@ (801ebd4 <HAL_SD_ConfigWideBusOperation+0x214>)
 801ea58:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 801ea5a:	2301      	movs	r3, #1
 801ea5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801ea60:	e096      	b.n	801eb90 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 801ea62:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 801ea66:	f04f 0100 	mov.w	r1, #0
 801ea6a:	f7fd fdf5 	bl	801c658 <HAL_RCCEx_GetPeriphCLKFreq>
 801ea6e:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 801ea70:	69fb      	ldr	r3, [r7, #28]
 801ea72:	2b00      	cmp	r3, #0
 801ea74:	f000 8083 	beq.w	801eb7e <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 801ea78:	687b      	ldr	r3, [r7, #4]
 801ea7a:	685b      	ldr	r3, [r3, #4]
 801ea7c:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 801ea7e:	687b      	ldr	r3, [r7, #4]
 801ea80:	689b      	ldr	r3, [r3, #8]
 801ea82:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 801ea84:	683b      	ldr	r3, [r7, #0]
 801ea86:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 801ea88:	687b      	ldr	r3, [r7, #4]
 801ea8a:	691b      	ldr	r3, [r3, #16]
 801ea8c:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 801ea8e:	687b      	ldr	r3, [r7, #4]
 801ea90:	695a      	ldr	r2, [r3, #20]
 801ea92:	69fb      	ldr	r3, [r7, #28]
 801ea94:	4950      	ldr	r1, [pc, #320]	@ (801ebd8 <HAL_SD_ConfigWideBusOperation+0x218>)
 801ea96:	fba1 1303 	umull	r1, r3, r1, r3
 801ea9a:	0e1b      	lsrs	r3, r3, #24
 801ea9c:	429a      	cmp	r2, r3
 801ea9e:	d303      	bcc.n	801eaa8 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 801eaa0:	687b      	ldr	r3, [r7, #4]
 801eaa2:	695b      	ldr	r3, [r3, #20]
 801eaa4:	61bb      	str	r3, [r7, #24]
 801eaa6:	e05a      	b.n	801eb5e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 801eaa8:	687b      	ldr	r3, [r7, #4]
 801eaaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801eaac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801eab0:	d103      	bne.n	801eaba <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 801eab2:	687b      	ldr	r3, [r7, #4]
 801eab4:	695b      	ldr	r3, [r3, #20]
 801eab6:	61bb      	str	r3, [r7, #24]
 801eab8:	e051      	b.n	801eb5e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 801eaba:	687b      	ldr	r3, [r7, #4]
 801eabc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801eabe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801eac2:	d126      	bne.n	801eb12 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 801eac4:	687b      	ldr	r3, [r7, #4]
 801eac6:	695b      	ldr	r3, [r3, #20]
 801eac8:	2b00      	cmp	r3, #0
 801eaca:	d10e      	bne.n	801eaea <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 801eacc:	69fb      	ldr	r3, [r7, #28]
 801eace:	4a43      	ldr	r2, [pc, #268]	@ (801ebdc <HAL_SD_ConfigWideBusOperation+0x21c>)
 801ead0:	4293      	cmp	r3, r2
 801ead2:	d906      	bls.n	801eae2 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 801ead4:	69fb      	ldr	r3, [r7, #28]
 801ead6:	4a40      	ldr	r2, [pc, #256]	@ (801ebd8 <HAL_SD_ConfigWideBusOperation+0x218>)
 801ead8:	fba2 2303 	umull	r2, r3, r2, r3
 801eadc:	0e5b      	lsrs	r3, r3, #25
 801eade:	61bb      	str	r3, [r7, #24]
 801eae0:	e03d      	b.n	801eb5e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 801eae2:	687b      	ldr	r3, [r7, #4]
 801eae4:	695b      	ldr	r3, [r3, #20]
 801eae6:	61bb      	str	r3, [r7, #24]
 801eae8:	e039      	b.n	801eb5e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 801eaea:	687b      	ldr	r3, [r7, #4]
 801eaec:	695b      	ldr	r3, [r3, #20]
 801eaee:	005b      	lsls	r3, r3, #1
 801eaf0:	69fa      	ldr	r2, [r7, #28]
 801eaf2:	fbb2 f3f3 	udiv	r3, r2, r3
 801eaf6:	4a39      	ldr	r2, [pc, #228]	@ (801ebdc <HAL_SD_ConfigWideBusOperation+0x21c>)
 801eaf8:	4293      	cmp	r3, r2
 801eafa:	d906      	bls.n	801eb0a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 801eafc:	69fb      	ldr	r3, [r7, #28]
 801eafe:	4a36      	ldr	r2, [pc, #216]	@ (801ebd8 <HAL_SD_ConfigWideBusOperation+0x218>)
 801eb00:	fba2 2303 	umull	r2, r3, r2, r3
 801eb04:	0e5b      	lsrs	r3, r3, #25
 801eb06:	61bb      	str	r3, [r7, #24]
 801eb08:	e029      	b.n	801eb5e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 801eb0a:	687b      	ldr	r3, [r7, #4]
 801eb0c:	695b      	ldr	r3, [r3, #20]
 801eb0e:	61bb      	str	r3, [r7, #24]
 801eb10:	e025      	b.n	801eb5e <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 801eb12:	687b      	ldr	r3, [r7, #4]
 801eb14:	695b      	ldr	r3, [r3, #20]
 801eb16:	2b00      	cmp	r3, #0
 801eb18:	d10e      	bne.n	801eb38 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 801eb1a:	69fb      	ldr	r3, [r7, #28]
 801eb1c:	4a30      	ldr	r2, [pc, #192]	@ (801ebe0 <HAL_SD_ConfigWideBusOperation+0x220>)
 801eb1e:	4293      	cmp	r3, r2
 801eb20:	d906      	bls.n	801eb30 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 801eb22:	69fb      	ldr	r3, [r7, #28]
 801eb24:	4a2c      	ldr	r2, [pc, #176]	@ (801ebd8 <HAL_SD_ConfigWideBusOperation+0x218>)
 801eb26:	fba2 2303 	umull	r2, r3, r2, r3
 801eb2a:	0e1b      	lsrs	r3, r3, #24
 801eb2c:	61bb      	str	r3, [r7, #24]
 801eb2e:	e016      	b.n	801eb5e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 801eb30:	687b      	ldr	r3, [r7, #4]
 801eb32:	695b      	ldr	r3, [r3, #20]
 801eb34:	61bb      	str	r3, [r7, #24]
 801eb36:	e012      	b.n	801eb5e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 801eb38:	687b      	ldr	r3, [r7, #4]
 801eb3a:	695b      	ldr	r3, [r3, #20]
 801eb3c:	005b      	lsls	r3, r3, #1
 801eb3e:	69fa      	ldr	r2, [r7, #28]
 801eb40:	fbb2 f3f3 	udiv	r3, r2, r3
 801eb44:	4a26      	ldr	r2, [pc, #152]	@ (801ebe0 <HAL_SD_ConfigWideBusOperation+0x220>)
 801eb46:	4293      	cmp	r3, r2
 801eb48:	d906      	bls.n	801eb58 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 801eb4a:	69fb      	ldr	r3, [r7, #28]
 801eb4c:	4a22      	ldr	r2, [pc, #136]	@ (801ebd8 <HAL_SD_ConfigWideBusOperation+0x218>)
 801eb4e:	fba2 2303 	umull	r2, r3, r2, r3
 801eb52:	0e1b      	lsrs	r3, r3, #24
 801eb54:	61bb      	str	r3, [r7, #24]
 801eb56:	e002      	b.n	801eb5e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 801eb58:	687b      	ldr	r3, [r7, #4]
 801eb5a:	695b      	ldr	r3, [r3, #20]
 801eb5c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 801eb5e:	687b      	ldr	r3, [r7, #4]
 801eb60:	681c      	ldr	r4, [r3, #0]
 801eb62:	466a      	mov	r2, sp
 801eb64:	f107 0314 	add.w	r3, r7, #20
 801eb68:	e893 0003 	ldmia.w	r3, {r0, r1}
 801eb6c:	e882 0003 	stmia.w	r2, {r0, r1}
 801eb70:	f107 0308 	add.w	r3, r7, #8
 801eb74:	cb0e      	ldmia	r3, {r1, r2, r3}
 801eb76:	4620      	mov	r0, r4
 801eb78:	f001 ff7a 	bl	8020a70 <SDMMC_Init>
 801eb7c:	e008      	b.n	801eb90 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 801eb7e:	687b      	ldr	r3, [r7, #4]
 801eb80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801eb82:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 801eb86:	687b      	ldr	r3, [r7, #4]
 801eb88:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 801eb8a:	2301      	movs	r3, #1
 801eb8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 801eb90:	687b      	ldr	r3, [r7, #4]
 801eb92:	681b      	ldr	r3, [r3, #0]
 801eb94:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801eb98:	4618      	mov	r0, r3
 801eb9a:	f002 f847 	bl	8020c2c <SDMMC_CmdBlockLength>
 801eb9e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 801eba0:	6a3b      	ldr	r3, [r7, #32]
 801eba2:	2b00      	cmp	r3, #0
 801eba4:	d00c      	beq.n	801ebc0 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801eba6:	687b      	ldr	r3, [r7, #4]
 801eba8:	681b      	ldr	r3, [r3, #0]
 801ebaa:	4a0a      	ldr	r2, [pc, #40]	@ (801ebd4 <HAL_SD_ConfigWideBusOperation+0x214>)
 801ebac:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 801ebae:	687b      	ldr	r3, [r7, #4]
 801ebb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801ebb2:	6a3b      	ldr	r3, [r7, #32]
 801ebb4:	431a      	orrs	r2, r3
 801ebb6:	687b      	ldr	r3, [r7, #4]
 801ebb8:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 801ebba:	2301      	movs	r3, #1
 801ebbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 801ebc0:	687b      	ldr	r3, [r7, #4]
 801ebc2:	2201      	movs	r2, #1
 801ebc4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 801ebc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801ebcc:	4618      	mov	r0, r3
 801ebce:	372c      	adds	r7, #44	@ 0x2c
 801ebd0:	46bd      	mov	sp, r7
 801ebd2:	bd90      	pop	{r4, r7, pc}
 801ebd4:	1fe00fff 	.word	0x1fe00fff
 801ebd8:	55e63b89 	.word	0x55e63b89
 801ebdc:	02faf080 	.word	0x02faf080
 801ebe0:	017d7840 	.word	0x017d7840

0801ebe4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 801ebe4:	b580      	push	{r7, lr}
 801ebe6:	b086      	sub	sp, #24
 801ebe8:	af00      	add	r7, sp, #0
 801ebea:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 801ebec:	2300      	movs	r3, #0
 801ebee:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 801ebf0:	f107 030c 	add.w	r3, r7, #12
 801ebf4:	4619      	mov	r1, r3
 801ebf6:	6878      	ldr	r0, [r7, #4]
 801ebf8:	f000 fa40 	bl	801f07c <SD_SendStatus>
 801ebfc:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 801ebfe:	697b      	ldr	r3, [r7, #20]
 801ec00:	2b00      	cmp	r3, #0
 801ec02:	d005      	beq.n	801ec10 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 801ec04:	687b      	ldr	r3, [r7, #4]
 801ec06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801ec08:	697b      	ldr	r3, [r7, #20]
 801ec0a:	431a      	orrs	r2, r3
 801ec0c:	687b      	ldr	r3, [r7, #4]
 801ec0e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 801ec10:	68fb      	ldr	r3, [r7, #12]
 801ec12:	0a5b      	lsrs	r3, r3, #9
 801ec14:	f003 030f 	and.w	r3, r3, #15
 801ec18:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 801ec1a:	693b      	ldr	r3, [r7, #16]
}
 801ec1c:	4618      	mov	r0, r3
 801ec1e:	3718      	adds	r7, #24
 801ec20:	46bd      	mov	sp, r7
 801ec22:	bd80      	pop	{r7, pc}

0801ec24 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 801ec24:	b580      	push	{r7, lr}
 801ec26:	b090      	sub	sp, #64	@ 0x40
 801ec28:	af00      	add	r7, sp, #0
 801ec2a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 801ec2c:	2300      	movs	r3, #0
 801ec2e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 801ec30:	f7f8 fbe8 	bl	8017404 <HAL_GetTick>
 801ec34:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 801ec36:	687b      	ldr	r3, [r7, #4]
 801ec38:	681b      	ldr	r3, [r3, #0]
 801ec3a:	4618      	mov	r0, r3
 801ec3c:	f001 ff71 	bl	8020b22 <SDMMC_GetPowerState>
 801ec40:	4603      	mov	r3, r0
 801ec42:	2b00      	cmp	r3, #0
 801ec44:	d102      	bne.n	801ec4c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 801ec46:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 801ec4a:	e0b5      	b.n	801edb8 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 801ec4c:	687b      	ldr	r3, [r7, #4]
 801ec4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ec50:	2b03      	cmp	r3, #3
 801ec52:	d02e      	beq.n	801ecb2 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 801ec54:	687b      	ldr	r3, [r7, #4]
 801ec56:	681b      	ldr	r3, [r3, #0]
 801ec58:	4618      	mov	r0, r3
 801ec5a:	f002 f9bc 	bl	8020fd6 <SDMMC_CmdSendCID>
 801ec5e:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 801ec60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ec62:	2b00      	cmp	r3, #0
 801ec64:	d001      	beq.n	801ec6a <SD_InitCard+0x46>
    {
      return errorstate;
 801ec66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ec68:	e0a6      	b.n	801edb8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 801ec6a:	687b      	ldr	r3, [r7, #4]
 801ec6c:	681b      	ldr	r3, [r3, #0]
 801ec6e:	2100      	movs	r1, #0
 801ec70:	4618      	mov	r0, r3
 801ec72:	f001 ff9c 	bl	8020bae <SDMMC_GetResponse>
 801ec76:	4602      	mov	r2, r0
 801ec78:	687b      	ldr	r3, [r7, #4]
 801ec7a:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 801ec7c:	687b      	ldr	r3, [r7, #4]
 801ec7e:	681b      	ldr	r3, [r3, #0]
 801ec80:	2104      	movs	r1, #4
 801ec82:	4618      	mov	r0, r3
 801ec84:	f001 ff93 	bl	8020bae <SDMMC_GetResponse>
 801ec88:	4602      	mov	r2, r0
 801ec8a:	687b      	ldr	r3, [r7, #4]
 801ec8c:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 801ec8e:	687b      	ldr	r3, [r7, #4]
 801ec90:	681b      	ldr	r3, [r3, #0]
 801ec92:	2108      	movs	r1, #8
 801ec94:	4618      	mov	r0, r3
 801ec96:	f001 ff8a 	bl	8020bae <SDMMC_GetResponse>
 801ec9a:	4602      	mov	r2, r0
 801ec9c:	687b      	ldr	r3, [r7, #4]
 801ec9e:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 801eca0:	687b      	ldr	r3, [r7, #4]
 801eca2:	681b      	ldr	r3, [r3, #0]
 801eca4:	210c      	movs	r1, #12
 801eca6:	4618      	mov	r0, r3
 801eca8:	f001 ff81 	bl	8020bae <SDMMC_GetResponse>
 801ecac:	4602      	mov	r2, r0
 801ecae:	687b      	ldr	r3, [r7, #4]
 801ecb0:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 801ecb2:	687b      	ldr	r3, [r7, #4]
 801ecb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ecb6:	2b03      	cmp	r3, #3
 801ecb8:	d01d      	beq.n	801ecf6 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 801ecba:	e019      	b.n	801ecf0 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 801ecbc:	687b      	ldr	r3, [r7, #4]
 801ecbe:	681b      	ldr	r3, [r3, #0]
 801ecc0:	f107 020a 	add.w	r2, r7, #10
 801ecc4:	4611      	mov	r1, r2
 801ecc6:	4618      	mov	r0, r3
 801ecc8:	f002 f9c4 	bl	8021054 <SDMMC_CmdSetRelAdd>
 801eccc:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 801ecce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ecd0:	2b00      	cmp	r3, #0
 801ecd2:	d001      	beq.n	801ecd8 <SD_InitCard+0xb4>
      {
        return errorstate;
 801ecd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ecd6:	e06f      	b.n	801edb8 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 801ecd8:	f7f8 fb94 	bl	8017404 <HAL_GetTick>
 801ecdc:	4602      	mov	r2, r0
 801ecde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ece0:	1ad3      	subs	r3, r2, r3
 801ece2:	f241 3287 	movw	r2, #4999	@ 0x1387
 801ece6:	4293      	cmp	r3, r2
 801ece8:	d902      	bls.n	801ecf0 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 801ecea:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801ecee:	e063      	b.n	801edb8 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 801ecf0:	897b      	ldrh	r3, [r7, #10]
 801ecf2:	2b00      	cmp	r3, #0
 801ecf4:	d0e2      	beq.n	801ecbc <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 801ecf6:	687b      	ldr	r3, [r7, #4]
 801ecf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ecfa:	2b03      	cmp	r3, #3
 801ecfc:	d036      	beq.n	801ed6c <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 801ecfe:	897b      	ldrh	r3, [r7, #10]
 801ed00:	461a      	mov	r2, r3
 801ed02:	687b      	ldr	r3, [r7, #4]
 801ed04:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801ed06:	687b      	ldr	r3, [r7, #4]
 801ed08:	681a      	ldr	r2, [r3, #0]
 801ed0a:	687b      	ldr	r3, [r7, #4]
 801ed0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ed0e:	041b      	lsls	r3, r3, #16
 801ed10:	4619      	mov	r1, r3
 801ed12:	4610      	mov	r0, r2
 801ed14:	f002 f97e 	bl	8021014 <SDMMC_CmdSendCSD>
 801ed18:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 801ed1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ed1c:	2b00      	cmp	r3, #0
 801ed1e:	d001      	beq.n	801ed24 <SD_InitCard+0x100>
    {
      return errorstate;
 801ed20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ed22:	e049      	b.n	801edb8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 801ed24:	687b      	ldr	r3, [r7, #4]
 801ed26:	681b      	ldr	r3, [r3, #0]
 801ed28:	2100      	movs	r1, #0
 801ed2a:	4618      	mov	r0, r3
 801ed2c:	f001 ff3f 	bl	8020bae <SDMMC_GetResponse>
 801ed30:	4602      	mov	r2, r0
 801ed32:	687b      	ldr	r3, [r7, #4]
 801ed34:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 801ed36:	687b      	ldr	r3, [r7, #4]
 801ed38:	681b      	ldr	r3, [r3, #0]
 801ed3a:	2104      	movs	r1, #4
 801ed3c:	4618      	mov	r0, r3
 801ed3e:	f001 ff36 	bl	8020bae <SDMMC_GetResponse>
 801ed42:	4602      	mov	r2, r0
 801ed44:	687b      	ldr	r3, [r7, #4]
 801ed46:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 801ed48:	687b      	ldr	r3, [r7, #4]
 801ed4a:	681b      	ldr	r3, [r3, #0]
 801ed4c:	2108      	movs	r1, #8
 801ed4e:	4618      	mov	r0, r3
 801ed50:	f001 ff2d 	bl	8020bae <SDMMC_GetResponse>
 801ed54:	4602      	mov	r2, r0
 801ed56:	687b      	ldr	r3, [r7, #4]
 801ed58:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 801ed5a:	687b      	ldr	r3, [r7, #4]
 801ed5c:	681b      	ldr	r3, [r3, #0]
 801ed5e:	210c      	movs	r1, #12
 801ed60:	4618      	mov	r0, r3
 801ed62:	f001 ff24 	bl	8020bae <SDMMC_GetResponse>
 801ed66:	4602      	mov	r2, r0
 801ed68:	687b      	ldr	r3, [r7, #4]
 801ed6a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 801ed6c:	687b      	ldr	r3, [r7, #4]
 801ed6e:	681b      	ldr	r3, [r3, #0]
 801ed70:	2104      	movs	r1, #4
 801ed72:	4618      	mov	r0, r3
 801ed74:	f001 ff1b 	bl	8020bae <SDMMC_GetResponse>
 801ed78:	4603      	mov	r3, r0
 801ed7a:	0d1a      	lsrs	r2, r3, #20
 801ed7c:	687b      	ldr	r3, [r7, #4]
 801ed7e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 801ed80:	f107 030c 	add.w	r3, r7, #12
 801ed84:	4619      	mov	r1, r3
 801ed86:	6878      	ldr	r0, [r7, #4]
 801ed88:	f7ff fb8c 	bl	801e4a4 <HAL_SD_GetCardCSD>
 801ed8c:	4603      	mov	r3, r0
 801ed8e:	2b00      	cmp	r3, #0
 801ed90:	d002      	beq.n	801ed98 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801ed92:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 801ed96:	e00f      	b.n	801edb8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 801ed98:	687b      	ldr	r3, [r7, #4]
 801ed9a:	681a      	ldr	r2, [r3, #0]
 801ed9c:	687b      	ldr	r3, [r7, #4]
 801ed9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801eda0:	041b      	lsls	r3, r3, #16
 801eda2:	4619      	mov	r1, r3
 801eda4:	4610      	mov	r0, r2
 801eda6:	f002 f82d 	bl	8020e04 <SDMMC_CmdSelDesel>
 801edaa:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 801edac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801edae:	2b00      	cmp	r3, #0
 801edb0:	d001      	beq.n	801edb6 <SD_InitCard+0x192>
  {
    return errorstate;
 801edb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801edb4:	e000      	b.n	801edb8 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 801edb6:	2300      	movs	r3, #0
}
 801edb8:	4618      	mov	r0, r3
 801edba:	3740      	adds	r7, #64	@ 0x40
 801edbc:	46bd      	mov	sp, r7
 801edbe:	bd80      	pop	{r7, pc}

0801edc0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 801edc0:	b580      	push	{r7, lr}
 801edc2:	b086      	sub	sp, #24
 801edc4:	af00      	add	r7, sp, #0
 801edc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801edc8:	2300      	movs	r3, #0
 801edca:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 801edcc:	2300      	movs	r3, #0
 801edce:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 801edd0:	2300      	movs	r3, #0
 801edd2:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 801edd4:	687b      	ldr	r3, [r7, #4]
 801edd6:	681b      	ldr	r3, [r3, #0]
 801edd8:	4618      	mov	r0, r3
 801edda:	f002 f836 	bl	8020e4a <SDMMC_CmdGoIdleState>
 801edde:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 801ede0:	68fb      	ldr	r3, [r7, #12]
 801ede2:	2b00      	cmp	r3, #0
 801ede4:	d001      	beq.n	801edea <SD_PowerON+0x2a>
  {
    return errorstate;
 801ede6:	68fb      	ldr	r3, [r7, #12]
 801ede8:	e072      	b.n	801eed0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 801edea:	687b      	ldr	r3, [r7, #4]
 801edec:	681b      	ldr	r3, [r3, #0]
 801edee:	4618      	mov	r0, r3
 801edf0:	f002 f849 	bl	8020e86 <SDMMC_CmdOperCond>
 801edf4:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 801edf6:	68fb      	ldr	r3, [r7, #12]
 801edf8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801edfc:	d10d      	bne.n	801ee1a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 801edfe:	687b      	ldr	r3, [r7, #4]
 801ee00:	2200      	movs	r2, #0
 801ee02:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 801ee04:	687b      	ldr	r3, [r7, #4]
 801ee06:	681b      	ldr	r3, [r3, #0]
 801ee08:	4618      	mov	r0, r3
 801ee0a:	f002 f81e 	bl	8020e4a <SDMMC_CmdGoIdleState>
 801ee0e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 801ee10:	68fb      	ldr	r3, [r7, #12]
 801ee12:	2b00      	cmp	r3, #0
 801ee14:	d004      	beq.n	801ee20 <SD_PowerON+0x60>
    {
      return errorstate;
 801ee16:	68fb      	ldr	r3, [r7, #12]
 801ee18:	e05a      	b.n	801eed0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 801ee1a:	687b      	ldr	r3, [r7, #4]
 801ee1c:	2201      	movs	r2, #1
 801ee1e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 801ee20:	687b      	ldr	r3, [r7, #4]
 801ee22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801ee24:	2b01      	cmp	r3, #1
 801ee26:	d137      	bne.n	801ee98 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 801ee28:	687b      	ldr	r3, [r7, #4]
 801ee2a:	681b      	ldr	r3, [r3, #0]
 801ee2c:	2100      	movs	r1, #0
 801ee2e:	4618      	mov	r0, r3
 801ee30:	f002 f849 	bl	8020ec6 <SDMMC_CmdAppCommand>
 801ee34:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 801ee36:	68fb      	ldr	r3, [r7, #12]
 801ee38:	2b00      	cmp	r3, #0
 801ee3a:	d02d      	beq.n	801ee98 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801ee3c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 801ee40:	e046      	b.n	801eed0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 801ee42:	687b      	ldr	r3, [r7, #4]
 801ee44:	681b      	ldr	r3, [r3, #0]
 801ee46:	2100      	movs	r1, #0
 801ee48:	4618      	mov	r0, r3
 801ee4a:	f002 f83c 	bl	8020ec6 <SDMMC_CmdAppCommand>
 801ee4e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 801ee50:	68fb      	ldr	r3, [r7, #12]
 801ee52:	2b00      	cmp	r3, #0
 801ee54:	d001      	beq.n	801ee5a <SD_PowerON+0x9a>
    {
      return errorstate;
 801ee56:	68fb      	ldr	r3, [r7, #12]
 801ee58:	e03a      	b.n	801eed0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 801ee5a:	687b      	ldr	r3, [r7, #4]
 801ee5c:	681b      	ldr	r3, [r3, #0]
 801ee5e:	491e      	ldr	r1, [pc, #120]	@ (801eed8 <SD_PowerON+0x118>)
 801ee60:	4618      	mov	r0, r3
 801ee62:	f002 f853 	bl	8020f0c <SDMMC_CmdAppOperCommand>
 801ee66:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 801ee68:	68fb      	ldr	r3, [r7, #12]
 801ee6a:	2b00      	cmp	r3, #0
 801ee6c:	d002      	beq.n	801ee74 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801ee6e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 801ee72:	e02d      	b.n	801eed0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 801ee74:	687b      	ldr	r3, [r7, #4]
 801ee76:	681b      	ldr	r3, [r3, #0]
 801ee78:	2100      	movs	r1, #0
 801ee7a:	4618      	mov	r0, r3
 801ee7c:	f001 fe97 	bl	8020bae <SDMMC_GetResponse>
 801ee80:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 801ee82:	697b      	ldr	r3, [r7, #20]
 801ee84:	0fdb      	lsrs	r3, r3, #31
 801ee86:	2b01      	cmp	r3, #1
 801ee88:	d101      	bne.n	801ee8e <SD_PowerON+0xce>
 801ee8a:	2301      	movs	r3, #1
 801ee8c:	e000      	b.n	801ee90 <SD_PowerON+0xd0>
 801ee8e:	2300      	movs	r3, #0
 801ee90:	613b      	str	r3, [r7, #16]

    count++;
 801ee92:	68bb      	ldr	r3, [r7, #8]
 801ee94:	3301      	adds	r3, #1
 801ee96:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 801ee98:	68bb      	ldr	r3, [r7, #8]
 801ee9a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801ee9e:	4293      	cmp	r3, r2
 801eea0:	d802      	bhi.n	801eea8 <SD_PowerON+0xe8>
 801eea2:	693b      	ldr	r3, [r7, #16]
 801eea4:	2b00      	cmp	r3, #0
 801eea6:	d0cc      	beq.n	801ee42 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 801eea8:	68bb      	ldr	r3, [r7, #8]
 801eeaa:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801eeae:	4293      	cmp	r3, r2
 801eeb0:	d902      	bls.n	801eeb8 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 801eeb2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 801eeb6:	e00b      	b.n	801eed0 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 801eeb8:	687b      	ldr	r3, [r7, #4]
 801eeba:	2200      	movs	r2, #0
 801eebc:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 801eebe:	697b      	ldr	r3, [r7, #20]
 801eec0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 801eec4:	2b00      	cmp	r3, #0
 801eec6:	d002      	beq.n	801eece <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 801eec8:	687b      	ldr	r3, [r7, #4]
 801eeca:	2201      	movs	r2, #1
 801eecc:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 801eece:	2300      	movs	r3, #0
}
 801eed0:	4618      	mov	r0, r3
 801eed2:	3718      	adds	r7, #24
 801eed4:	46bd      	mov	sp, r7
 801eed6:	bd80      	pop	{r7, pc}
 801eed8:	c1100000 	.word	0xc1100000

0801eedc <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 801eedc:	b580      	push	{r7, lr}
 801eede:	b08c      	sub	sp, #48	@ 0x30
 801eee0:	af00      	add	r7, sp, #0
 801eee2:	6078      	str	r0, [r7, #4]
 801eee4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 801eee6:	f7f8 fa8d 	bl	8017404 <HAL_GetTick>
 801eeea:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 801eeec:	683b      	ldr	r3, [r7, #0]
 801eeee:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 801eef0:	687b      	ldr	r3, [r7, #4]
 801eef2:	681b      	ldr	r3, [r3, #0]
 801eef4:	2100      	movs	r1, #0
 801eef6:	4618      	mov	r0, r3
 801eef8:	f001 fe59 	bl	8020bae <SDMMC_GetResponse>
 801eefc:	4603      	mov	r3, r0
 801eefe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801ef02:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801ef06:	d102      	bne.n	801ef0e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 801ef08:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801ef0c:	e0b0      	b.n	801f070 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 801ef0e:	687b      	ldr	r3, [r7, #4]
 801ef10:	681b      	ldr	r3, [r3, #0]
 801ef12:	2140      	movs	r1, #64	@ 0x40
 801ef14:	4618      	mov	r0, r3
 801ef16:	f001 fe89 	bl	8020c2c <SDMMC_CmdBlockLength>
 801ef1a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 801ef1c:	6a3b      	ldr	r3, [r7, #32]
 801ef1e:	2b00      	cmp	r3, #0
 801ef20:	d005      	beq.n	801ef2e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 801ef22:	687b      	ldr	r3, [r7, #4]
 801ef24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801ef26:	687b      	ldr	r3, [r7, #4]
 801ef28:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 801ef2a:	6a3b      	ldr	r3, [r7, #32]
 801ef2c:	e0a0      	b.n	801f070 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801ef2e:	687b      	ldr	r3, [r7, #4]
 801ef30:	681a      	ldr	r2, [r3, #0]
 801ef32:	687b      	ldr	r3, [r7, #4]
 801ef34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ef36:	041b      	lsls	r3, r3, #16
 801ef38:	4619      	mov	r1, r3
 801ef3a:	4610      	mov	r0, r2
 801ef3c:	f001 ffc3 	bl	8020ec6 <SDMMC_CmdAppCommand>
 801ef40:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 801ef42:	6a3b      	ldr	r3, [r7, #32]
 801ef44:	2b00      	cmp	r3, #0
 801ef46:	d005      	beq.n	801ef54 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 801ef48:	687b      	ldr	r3, [r7, #4]
 801ef4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801ef4c:	687b      	ldr	r3, [r7, #4]
 801ef4e:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 801ef50:	6a3b      	ldr	r3, [r7, #32]
 801ef52:	e08d      	b.n	801f070 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801ef54:	f04f 33ff 	mov.w	r3, #4294967295
 801ef58:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 801ef5a:	2340      	movs	r3, #64	@ 0x40
 801ef5c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 801ef5e:	2360      	movs	r3, #96	@ 0x60
 801ef60:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 801ef62:	2302      	movs	r3, #2
 801ef64:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801ef66:	2300      	movs	r3, #0
 801ef68:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 801ef6a:	2301      	movs	r3, #1
 801ef6c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 801ef6e:	687b      	ldr	r3, [r7, #4]
 801ef70:	681b      	ldr	r3, [r3, #0]
 801ef72:	f107 0208 	add.w	r2, r7, #8
 801ef76:	4611      	mov	r1, r2
 801ef78:	4618      	mov	r0, r3
 801ef7a:	f001 fe2b 	bl	8020bd4 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 801ef7e:	687b      	ldr	r3, [r7, #4]
 801ef80:	681b      	ldr	r3, [r3, #0]
 801ef82:	4618      	mov	r0, r3
 801ef84:	f002 f8ab 	bl	80210de <SDMMC_CmdStatusRegister>
 801ef88:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 801ef8a:	6a3b      	ldr	r3, [r7, #32]
 801ef8c:	2b00      	cmp	r3, #0
 801ef8e:	d02b      	beq.n	801efe8 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 801ef90:	687b      	ldr	r3, [r7, #4]
 801ef92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801ef94:	687b      	ldr	r3, [r7, #4]
 801ef96:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 801ef98:	6a3b      	ldr	r3, [r7, #32]
 801ef9a:	e069      	b.n	801f070 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 801ef9c:	687b      	ldr	r3, [r7, #4]
 801ef9e:	681b      	ldr	r3, [r3, #0]
 801efa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801efa2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801efa6:	2b00      	cmp	r3, #0
 801efa8:	d013      	beq.n	801efd2 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 801efaa:	2300      	movs	r3, #0
 801efac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801efae:	e00d      	b.n	801efcc <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 801efb0:	687b      	ldr	r3, [r7, #4]
 801efb2:	681b      	ldr	r3, [r3, #0]
 801efb4:	4618      	mov	r0, r3
 801efb6:	f001 fd85 	bl	8020ac4 <SDMMC_ReadFIFO>
 801efba:	4602      	mov	r2, r0
 801efbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801efbe:	601a      	str	r2, [r3, #0]
        pData++;
 801efc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801efc2:	3304      	adds	r3, #4
 801efc4:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 801efc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801efc8:	3301      	adds	r3, #1
 801efca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801efcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801efce:	2b07      	cmp	r3, #7
 801efd0:	d9ee      	bls.n	801efb0 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 801efd2:	f7f8 fa17 	bl	8017404 <HAL_GetTick>
 801efd6:	4602      	mov	r2, r0
 801efd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801efda:	1ad3      	subs	r3, r2, r3
 801efdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801efe0:	d102      	bne.n	801efe8 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 801efe2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801efe6:	e043      	b.n	801f070 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 801efe8:	687b      	ldr	r3, [r7, #4]
 801efea:	681b      	ldr	r3, [r3, #0]
 801efec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801efee:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 801eff2:	2b00      	cmp	r3, #0
 801eff4:	d0d2      	beq.n	801ef9c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 801eff6:	687b      	ldr	r3, [r7, #4]
 801eff8:	681b      	ldr	r3, [r3, #0]
 801effa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801effc:	f003 0308 	and.w	r3, r3, #8
 801f000:	2b00      	cmp	r3, #0
 801f002:	d001      	beq.n	801f008 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 801f004:	2308      	movs	r3, #8
 801f006:	e033      	b.n	801f070 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 801f008:	687b      	ldr	r3, [r7, #4]
 801f00a:	681b      	ldr	r3, [r3, #0]
 801f00c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f00e:	f003 0302 	and.w	r3, r3, #2
 801f012:	2b00      	cmp	r3, #0
 801f014:	d001      	beq.n	801f01a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 801f016:	2302      	movs	r3, #2
 801f018:	e02a      	b.n	801f070 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 801f01a:	687b      	ldr	r3, [r7, #4]
 801f01c:	681b      	ldr	r3, [r3, #0]
 801f01e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f020:	f003 0320 	and.w	r3, r3, #32
 801f024:	2b00      	cmp	r3, #0
 801f026:	d017      	beq.n	801f058 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 801f028:	2320      	movs	r3, #32
 801f02a:	e021      	b.n	801f070 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 801f02c:	687b      	ldr	r3, [r7, #4]
 801f02e:	681b      	ldr	r3, [r3, #0]
 801f030:	4618      	mov	r0, r3
 801f032:	f001 fd47 	bl	8020ac4 <SDMMC_ReadFIFO>
 801f036:	4602      	mov	r2, r0
 801f038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f03a:	601a      	str	r2, [r3, #0]
    pData++;
 801f03c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f03e:	3304      	adds	r3, #4
 801f040:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 801f042:	f7f8 f9df 	bl	8017404 <HAL_GetTick>
 801f046:	4602      	mov	r2, r0
 801f048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f04a:	1ad3      	subs	r3, r2, r3
 801f04c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f050:	d102      	bne.n	801f058 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 801f052:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801f056:	e00b      	b.n	801f070 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 801f058:	687b      	ldr	r3, [r7, #4]
 801f05a:	681b      	ldr	r3, [r3, #0]
 801f05c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f05e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 801f062:	2b00      	cmp	r3, #0
 801f064:	d1e2      	bne.n	801f02c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801f066:	687b      	ldr	r3, [r7, #4]
 801f068:	681b      	ldr	r3, [r3, #0]
 801f06a:	4a03      	ldr	r2, [pc, #12]	@ (801f078 <SD_SendSDStatus+0x19c>)
 801f06c:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 801f06e:	2300      	movs	r3, #0
}
 801f070:	4618      	mov	r0, r3
 801f072:	3730      	adds	r7, #48	@ 0x30
 801f074:	46bd      	mov	sp, r7
 801f076:	bd80      	pop	{r7, pc}
 801f078:	18000f3a 	.word	0x18000f3a

0801f07c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 801f07c:	b580      	push	{r7, lr}
 801f07e:	b084      	sub	sp, #16
 801f080:	af00      	add	r7, sp, #0
 801f082:	6078      	str	r0, [r7, #4]
 801f084:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 801f086:	683b      	ldr	r3, [r7, #0]
 801f088:	2b00      	cmp	r3, #0
 801f08a:	d102      	bne.n	801f092 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 801f08c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 801f090:	e018      	b.n	801f0c4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801f092:	687b      	ldr	r3, [r7, #4]
 801f094:	681a      	ldr	r2, [r3, #0]
 801f096:	687b      	ldr	r3, [r7, #4]
 801f098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801f09a:	041b      	lsls	r3, r3, #16
 801f09c:	4619      	mov	r1, r3
 801f09e:	4610      	mov	r0, r2
 801f0a0:	f001 fffa 	bl	8021098 <SDMMC_CmdSendStatus>
 801f0a4:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 801f0a6:	68fb      	ldr	r3, [r7, #12]
 801f0a8:	2b00      	cmp	r3, #0
 801f0aa:	d001      	beq.n	801f0b0 <SD_SendStatus+0x34>
  {
    return errorstate;
 801f0ac:	68fb      	ldr	r3, [r7, #12]
 801f0ae:	e009      	b.n	801f0c4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 801f0b0:	687b      	ldr	r3, [r7, #4]
 801f0b2:	681b      	ldr	r3, [r3, #0]
 801f0b4:	2100      	movs	r1, #0
 801f0b6:	4618      	mov	r0, r3
 801f0b8:	f001 fd79 	bl	8020bae <SDMMC_GetResponse>
 801f0bc:	4602      	mov	r2, r0
 801f0be:	683b      	ldr	r3, [r7, #0]
 801f0c0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 801f0c2:	2300      	movs	r3, #0
}
 801f0c4:	4618      	mov	r0, r3
 801f0c6:	3710      	adds	r7, #16
 801f0c8:	46bd      	mov	sp, r7
 801f0ca:	bd80      	pop	{r7, pc}

0801f0cc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 801f0cc:	b580      	push	{r7, lr}
 801f0ce:	b086      	sub	sp, #24
 801f0d0:	af00      	add	r7, sp, #0
 801f0d2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 801f0d4:	2300      	movs	r3, #0
 801f0d6:	60fb      	str	r3, [r7, #12]
 801f0d8:	2300      	movs	r3, #0
 801f0da:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 801f0dc:	687b      	ldr	r3, [r7, #4]
 801f0de:	681b      	ldr	r3, [r3, #0]
 801f0e0:	2100      	movs	r1, #0
 801f0e2:	4618      	mov	r0, r3
 801f0e4:	f001 fd63 	bl	8020bae <SDMMC_GetResponse>
 801f0e8:	4603      	mov	r3, r0
 801f0ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801f0ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801f0f2:	d102      	bne.n	801f0fa <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 801f0f4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801f0f8:	e02f      	b.n	801f15a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 801f0fa:	f107 030c 	add.w	r3, r7, #12
 801f0fe:	4619      	mov	r1, r3
 801f100:	6878      	ldr	r0, [r7, #4]
 801f102:	f000 f879 	bl	801f1f8 <SD_FindSCR>
 801f106:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 801f108:	697b      	ldr	r3, [r7, #20]
 801f10a:	2b00      	cmp	r3, #0
 801f10c:	d001      	beq.n	801f112 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 801f10e:	697b      	ldr	r3, [r7, #20]
 801f110:	e023      	b.n	801f15a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 801f112:	693b      	ldr	r3, [r7, #16]
 801f114:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801f118:	2b00      	cmp	r3, #0
 801f11a:	d01c      	beq.n	801f156 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801f11c:	687b      	ldr	r3, [r7, #4]
 801f11e:	681a      	ldr	r2, [r3, #0]
 801f120:	687b      	ldr	r3, [r7, #4]
 801f122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801f124:	041b      	lsls	r3, r3, #16
 801f126:	4619      	mov	r1, r3
 801f128:	4610      	mov	r0, r2
 801f12a:	f001 fecc 	bl	8020ec6 <SDMMC_CmdAppCommand>
 801f12e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 801f130:	697b      	ldr	r3, [r7, #20]
 801f132:	2b00      	cmp	r3, #0
 801f134:	d001      	beq.n	801f13a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 801f136:	697b      	ldr	r3, [r7, #20]
 801f138:	e00f      	b.n	801f15a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 801f13a:	687b      	ldr	r3, [r7, #4]
 801f13c:	681b      	ldr	r3, [r3, #0]
 801f13e:	2102      	movs	r1, #2
 801f140:	4618      	mov	r0, r3
 801f142:	f001 ff03 	bl	8020f4c <SDMMC_CmdBusWidth>
 801f146:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 801f148:	697b      	ldr	r3, [r7, #20]
 801f14a:	2b00      	cmp	r3, #0
 801f14c:	d001      	beq.n	801f152 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 801f14e:	697b      	ldr	r3, [r7, #20]
 801f150:	e003      	b.n	801f15a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 801f152:	2300      	movs	r3, #0
 801f154:	e001      	b.n	801f15a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 801f156:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 801f15a:	4618      	mov	r0, r3
 801f15c:	3718      	adds	r7, #24
 801f15e:	46bd      	mov	sp, r7
 801f160:	bd80      	pop	{r7, pc}

0801f162 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 801f162:	b580      	push	{r7, lr}
 801f164:	b086      	sub	sp, #24
 801f166:	af00      	add	r7, sp, #0
 801f168:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 801f16a:	2300      	movs	r3, #0
 801f16c:	60fb      	str	r3, [r7, #12]
 801f16e:	2300      	movs	r3, #0
 801f170:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 801f172:	687b      	ldr	r3, [r7, #4]
 801f174:	681b      	ldr	r3, [r3, #0]
 801f176:	2100      	movs	r1, #0
 801f178:	4618      	mov	r0, r3
 801f17a:	f001 fd18 	bl	8020bae <SDMMC_GetResponse>
 801f17e:	4603      	mov	r3, r0
 801f180:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801f184:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801f188:	d102      	bne.n	801f190 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 801f18a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801f18e:	e02f      	b.n	801f1f0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 801f190:	f107 030c 	add.w	r3, r7, #12
 801f194:	4619      	mov	r1, r3
 801f196:	6878      	ldr	r0, [r7, #4]
 801f198:	f000 f82e 	bl	801f1f8 <SD_FindSCR>
 801f19c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 801f19e:	697b      	ldr	r3, [r7, #20]
 801f1a0:	2b00      	cmp	r3, #0
 801f1a2:	d001      	beq.n	801f1a8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 801f1a4:	697b      	ldr	r3, [r7, #20]
 801f1a6:	e023      	b.n	801f1f0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 801f1a8:	693b      	ldr	r3, [r7, #16]
 801f1aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801f1ae:	2b00      	cmp	r3, #0
 801f1b0:	d01c      	beq.n	801f1ec <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801f1b2:	687b      	ldr	r3, [r7, #4]
 801f1b4:	681a      	ldr	r2, [r3, #0]
 801f1b6:	687b      	ldr	r3, [r7, #4]
 801f1b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801f1ba:	041b      	lsls	r3, r3, #16
 801f1bc:	4619      	mov	r1, r3
 801f1be:	4610      	mov	r0, r2
 801f1c0:	f001 fe81 	bl	8020ec6 <SDMMC_CmdAppCommand>
 801f1c4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 801f1c6:	697b      	ldr	r3, [r7, #20]
 801f1c8:	2b00      	cmp	r3, #0
 801f1ca:	d001      	beq.n	801f1d0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 801f1cc:	697b      	ldr	r3, [r7, #20]
 801f1ce:	e00f      	b.n	801f1f0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 801f1d0:	687b      	ldr	r3, [r7, #4]
 801f1d2:	681b      	ldr	r3, [r3, #0]
 801f1d4:	2100      	movs	r1, #0
 801f1d6:	4618      	mov	r0, r3
 801f1d8:	f001 feb8 	bl	8020f4c <SDMMC_CmdBusWidth>
 801f1dc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 801f1de:	697b      	ldr	r3, [r7, #20]
 801f1e0:	2b00      	cmp	r3, #0
 801f1e2:	d001      	beq.n	801f1e8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 801f1e4:	697b      	ldr	r3, [r7, #20]
 801f1e6:	e003      	b.n	801f1f0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 801f1e8:	2300      	movs	r3, #0
 801f1ea:	e001      	b.n	801f1f0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 801f1ec:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 801f1f0:	4618      	mov	r0, r3
 801f1f2:	3718      	adds	r7, #24
 801f1f4:	46bd      	mov	sp, r7
 801f1f6:	bd80      	pop	{r7, pc}

0801f1f8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 801f1f8:	b580      	push	{r7, lr}
 801f1fa:	b08e      	sub	sp, #56	@ 0x38
 801f1fc:	af00      	add	r7, sp, #0
 801f1fe:	6078      	str	r0, [r7, #4]
 801f200:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 801f202:	f7f8 f8ff 	bl	8017404 <HAL_GetTick>
 801f206:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 801f208:	2300      	movs	r3, #0
 801f20a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 801f20c:	2300      	movs	r3, #0
 801f20e:	60bb      	str	r3, [r7, #8]
 801f210:	2300      	movs	r3, #0
 801f212:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 801f214:	683b      	ldr	r3, [r7, #0]
 801f216:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 801f218:	687b      	ldr	r3, [r7, #4]
 801f21a:	681b      	ldr	r3, [r3, #0]
 801f21c:	2108      	movs	r1, #8
 801f21e:	4618      	mov	r0, r3
 801f220:	f001 fd04 	bl	8020c2c <SDMMC_CmdBlockLength>
 801f224:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 801f226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f228:	2b00      	cmp	r3, #0
 801f22a:	d001      	beq.n	801f230 <SD_FindSCR+0x38>
  {
    return errorstate;
 801f22c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f22e:	e0ad      	b.n	801f38c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 801f230:	687b      	ldr	r3, [r7, #4]
 801f232:	681a      	ldr	r2, [r3, #0]
 801f234:	687b      	ldr	r3, [r7, #4]
 801f236:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801f238:	041b      	lsls	r3, r3, #16
 801f23a:	4619      	mov	r1, r3
 801f23c:	4610      	mov	r0, r2
 801f23e:	f001 fe42 	bl	8020ec6 <SDMMC_CmdAppCommand>
 801f242:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 801f244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f246:	2b00      	cmp	r3, #0
 801f248:	d001      	beq.n	801f24e <SD_FindSCR+0x56>
  {
    return errorstate;
 801f24a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f24c:	e09e      	b.n	801f38c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801f24e:	f04f 33ff 	mov.w	r3, #4294967295
 801f252:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 801f254:	2308      	movs	r3, #8
 801f256:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 801f258:	2330      	movs	r3, #48	@ 0x30
 801f25a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 801f25c:	2302      	movs	r3, #2
 801f25e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801f260:	2300      	movs	r3, #0
 801f262:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 801f264:	2301      	movs	r3, #1
 801f266:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 801f268:	687b      	ldr	r3, [r7, #4]
 801f26a:	681b      	ldr	r3, [r3, #0]
 801f26c:	f107 0210 	add.w	r2, r7, #16
 801f270:	4611      	mov	r1, r2
 801f272:	4618      	mov	r0, r3
 801f274:	f001 fcae 	bl	8020bd4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 801f278:	687b      	ldr	r3, [r7, #4]
 801f27a:	681b      	ldr	r3, [r3, #0]
 801f27c:	4618      	mov	r0, r3
 801f27e:	f001 fe88 	bl	8020f92 <SDMMC_CmdSendSCR>
 801f282:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 801f284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f286:	2b00      	cmp	r3, #0
 801f288:	d027      	beq.n	801f2da <SD_FindSCR+0xe2>
  {
    return errorstate;
 801f28a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f28c:	e07e      	b.n	801f38c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 801f28e:	687b      	ldr	r3, [r7, #4]
 801f290:	681b      	ldr	r3, [r3, #0]
 801f292:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f294:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801f298:	2b00      	cmp	r3, #0
 801f29a:	d113      	bne.n	801f2c4 <SD_FindSCR+0xcc>
 801f29c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f29e:	2b00      	cmp	r3, #0
 801f2a0:	d110      	bne.n	801f2c4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 801f2a2:	687b      	ldr	r3, [r7, #4]
 801f2a4:	681b      	ldr	r3, [r3, #0]
 801f2a6:	4618      	mov	r0, r3
 801f2a8:	f001 fc0c 	bl	8020ac4 <SDMMC_ReadFIFO>
 801f2ac:	4603      	mov	r3, r0
 801f2ae:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 801f2b0:	687b      	ldr	r3, [r7, #4]
 801f2b2:	681b      	ldr	r3, [r3, #0]
 801f2b4:	4618      	mov	r0, r3
 801f2b6:	f001 fc05 	bl	8020ac4 <SDMMC_ReadFIFO>
 801f2ba:	4603      	mov	r3, r0
 801f2bc:	60fb      	str	r3, [r7, #12]
      index++;
 801f2be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f2c0:	3301      	adds	r3, #1
 801f2c2:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 801f2c4:	f7f8 f89e 	bl	8017404 <HAL_GetTick>
 801f2c8:	4602      	mov	r2, r0
 801f2ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f2cc:	1ad3      	subs	r3, r2, r3
 801f2ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f2d2:	d102      	bne.n	801f2da <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 801f2d4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801f2d8:	e058      	b.n	801f38c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 801f2da:	687b      	ldr	r3, [r7, #4]
 801f2dc:	681b      	ldr	r3, [r3, #0]
 801f2de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801f2e0:	f240 532a 	movw	r3, #1322	@ 0x52a
 801f2e4:	4013      	ands	r3, r2
 801f2e6:	2b00      	cmp	r3, #0
 801f2e8:	d0d1      	beq.n	801f28e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 801f2ea:	687b      	ldr	r3, [r7, #4]
 801f2ec:	681b      	ldr	r3, [r3, #0]
 801f2ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f2f0:	f003 0308 	and.w	r3, r3, #8
 801f2f4:	2b00      	cmp	r3, #0
 801f2f6:	d005      	beq.n	801f304 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 801f2f8:	687b      	ldr	r3, [r7, #4]
 801f2fa:	681b      	ldr	r3, [r3, #0]
 801f2fc:	2208      	movs	r2, #8
 801f2fe:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 801f300:	2308      	movs	r3, #8
 801f302:	e043      	b.n	801f38c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 801f304:	687b      	ldr	r3, [r7, #4]
 801f306:	681b      	ldr	r3, [r3, #0]
 801f308:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f30a:	f003 0302 	and.w	r3, r3, #2
 801f30e:	2b00      	cmp	r3, #0
 801f310:	d005      	beq.n	801f31e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 801f312:	687b      	ldr	r3, [r7, #4]
 801f314:	681b      	ldr	r3, [r3, #0]
 801f316:	2202      	movs	r2, #2
 801f318:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 801f31a:	2302      	movs	r3, #2
 801f31c:	e036      	b.n	801f38c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 801f31e:	687b      	ldr	r3, [r7, #4]
 801f320:	681b      	ldr	r3, [r3, #0]
 801f322:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f324:	f003 0320 	and.w	r3, r3, #32
 801f328:	2b00      	cmp	r3, #0
 801f32a:	d005      	beq.n	801f338 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 801f32c:	687b      	ldr	r3, [r7, #4]
 801f32e:	681b      	ldr	r3, [r3, #0]
 801f330:	2220      	movs	r2, #32
 801f332:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 801f334:	2320      	movs	r3, #32
 801f336:	e029      	b.n	801f38c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801f338:	687b      	ldr	r3, [r7, #4]
 801f33a:	681b      	ldr	r3, [r3, #0]
 801f33c:	4a15      	ldr	r2, [pc, #84]	@ (801f394 <SD_FindSCR+0x19c>)
 801f33e:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 801f340:	68fb      	ldr	r3, [r7, #12]
 801f342:	061a      	lsls	r2, r3, #24
 801f344:	68fb      	ldr	r3, [r7, #12]
 801f346:	021b      	lsls	r3, r3, #8
 801f348:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801f34c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 801f34e:	68fb      	ldr	r3, [r7, #12]
 801f350:	0a1b      	lsrs	r3, r3, #8
 801f352:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 801f356:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 801f358:	68fb      	ldr	r3, [r7, #12]
 801f35a:	0e1b      	lsrs	r3, r3, #24
 801f35c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 801f35e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f360:	601a      	str	r2, [r3, #0]
    scr++;
 801f362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f364:	3304      	adds	r3, #4
 801f366:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 801f368:	68bb      	ldr	r3, [r7, #8]
 801f36a:	061a      	lsls	r2, r3, #24
 801f36c:	68bb      	ldr	r3, [r7, #8]
 801f36e:	021b      	lsls	r3, r3, #8
 801f370:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801f374:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 801f376:	68bb      	ldr	r3, [r7, #8]
 801f378:	0a1b      	lsrs	r3, r3, #8
 801f37a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 801f37e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 801f380:	68bb      	ldr	r3, [r7, #8]
 801f382:	0e1b      	lsrs	r3, r3, #24
 801f384:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 801f386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f388:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 801f38a:	2300      	movs	r3, #0
}
 801f38c:	4618      	mov	r0, r3
 801f38e:	3738      	adds	r7, #56	@ 0x38
 801f390:	46bd      	mov	sp, r7
 801f392:	bd80      	pop	{r7, pc}
 801f394:	18000f3a 	.word	0x18000f3a

0801f398 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 801f398:	b580      	push	{r7, lr}
 801f39a:	b086      	sub	sp, #24
 801f39c:	af00      	add	r7, sp, #0
 801f39e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 801f3a0:	687b      	ldr	r3, [r7, #4]
 801f3a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f3a4:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 801f3a6:	687b      	ldr	r3, [r7, #4]
 801f3a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f3aa:	2b1f      	cmp	r3, #31
 801f3ac:	d936      	bls.n	801f41c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 801f3ae:	2300      	movs	r3, #0
 801f3b0:	617b      	str	r3, [r7, #20]
 801f3b2:	e027      	b.n	801f404 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 801f3b4:	687b      	ldr	r3, [r7, #4]
 801f3b6:	681b      	ldr	r3, [r3, #0]
 801f3b8:	4618      	mov	r0, r3
 801f3ba:	f001 fb83 	bl	8020ac4 <SDMMC_ReadFIFO>
 801f3be:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 801f3c0:	68fb      	ldr	r3, [r7, #12]
 801f3c2:	b2da      	uxtb	r2, r3
 801f3c4:	693b      	ldr	r3, [r7, #16]
 801f3c6:	701a      	strb	r2, [r3, #0]
      tmp++;
 801f3c8:	693b      	ldr	r3, [r7, #16]
 801f3ca:	3301      	adds	r3, #1
 801f3cc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 801f3ce:	68fb      	ldr	r3, [r7, #12]
 801f3d0:	0a1b      	lsrs	r3, r3, #8
 801f3d2:	b2da      	uxtb	r2, r3
 801f3d4:	693b      	ldr	r3, [r7, #16]
 801f3d6:	701a      	strb	r2, [r3, #0]
      tmp++;
 801f3d8:	693b      	ldr	r3, [r7, #16]
 801f3da:	3301      	adds	r3, #1
 801f3dc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 801f3de:	68fb      	ldr	r3, [r7, #12]
 801f3e0:	0c1b      	lsrs	r3, r3, #16
 801f3e2:	b2da      	uxtb	r2, r3
 801f3e4:	693b      	ldr	r3, [r7, #16]
 801f3e6:	701a      	strb	r2, [r3, #0]
      tmp++;
 801f3e8:	693b      	ldr	r3, [r7, #16]
 801f3ea:	3301      	adds	r3, #1
 801f3ec:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 801f3ee:	68fb      	ldr	r3, [r7, #12]
 801f3f0:	0e1b      	lsrs	r3, r3, #24
 801f3f2:	b2da      	uxtb	r2, r3
 801f3f4:	693b      	ldr	r3, [r7, #16]
 801f3f6:	701a      	strb	r2, [r3, #0]
      tmp++;
 801f3f8:	693b      	ldr	r3, [r7, #16]
 801f3fa:	3301      	adds	r3, #1
 801f3fc:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 801f3fe:	697b      	ldr	r3, [r7, #20]
 801f400:	3301      	adds	r3, #1
 801f402:	617b      	str	r3, [r7, #20]
 801f404:	697b      	ldr	r3, [r7, #20]
 801f406:	2b07      	cmp	r3, #7
 801f408:	d9d4      	bls.n	801f3b4 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 801f40a:	687b      	ldr	r3, [r7, #4]
 801f40c:	693a      	ldr	r2, [r7, #16]
 801f40e:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 801f410:	687b      	ldr	r3, [r7, #4]
 801f412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f414:	f1a3 0220 	sub.w	r2, r3, #32
 801f418:	687b      	ldr	r3, [r7, #4]
 801f41a:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 801f41c:	bf00      	nop
 801f41e:	3718      	adds	r7, #24
 801f420:	46bd      	mov	sp, r7
 801f422:	bd80      	pop	{r7, pc}

0801f424 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 801f424:	b580      	push	{r7, lr}
 801f426:	b086      	sub	sp, #24
 801f428:	af00      	add	r7, sp, #0
 801f42a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 801f42c:	687b      	ldr	r3, [r7, #4]
 801f42e:	69db      	ldr	r3, [r3, #28]
 801f430:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 801f432:	687b      	ldr	r3, [r7, #4]
 801f434:	6a1b      	ldr	r3, [r3, #32]
 801f436:	2b1f      	cmp	r3, #31
 801f438:	d93a      	bls.n	801f4b0 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 801f43a:	2300      	movs	r3, #0
 801f43c:	617b      	str	r3, [r7, #20]
 801f43e:	e02b      	b.n	801f498 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 801f440:	693b      	ldr	r3, [r7, #16]
 801f442:	781b      	ldrb	r3, [r3, #0]
 801f444:	60fb      	str	r3, [r7, #12]
      tmp++;
 801f446:	693b      	ldr	r3, [r7, #16]
 801f448:	3301      	adds	r3, #1
 801f44a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 801f44c:	693b      	ldr	r3, [r7, #16]
 801f44e:	781b      	ldrb	r3, [r3, #0]
 801f450:	021a      	lsls	r2, r3, #8
 801f452:	68fb      	ldr	r3, [r7, #12]
 801f454:	4313      	orrs	r3, r2
 801f456:	60fb      	str	r3, [r7, #12]
      tmp++;
 801f458:	693b      	ldr	r3, [r7, #16]
 801f45a:	3301      	adds	r3, #1
 801f45c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 801f45e:	693b      	ldr	r3, [r7, #16]
 801f460:	781b      	ldrb	r3, [r3, #0]
 801f462:	041a      	lsls	r2, r3, #16
 801f464:	68fb      	ldr	r3, [r7, #12]
 801f466:	4313      	orrs	r3, r2
 801f468:	60fb      	str	r3, [r7, #12]
      tmp++;
 801f46a:	693b      	ldr	r3, [r7, #16]
 801f46c:	3301      	adds	r3, #1
 801f46e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 801f470:	693b      	ldr	r3, [r7, #16]
 801f472:	781b      	ldrb	r3, [r3, #0]
 801f474:	061a      	lsls	r2, r3, #24
 801f476:	68fb      	ldr	r3, [r7, #12]
 801f478:	4313      	orrs	r3, r2
 801f47a:	60fb      	str	r3, [r7, #12]
      tmp++;
 801f47c:	693b      	ldr	r3, [r7, #16]
 801f47e:	3301      	adds	r3, #1
 801f480:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 801f482:	687b      	ldr	r3, [r7, #4]
 801f484:	681b      	ldr	r3, [r3, #0]
 801f486:	f107 020c 	add.w	r2, r7, #12
 801f48a:	4611      	mov	r1, r2
 801f48c:	4618      	mov	r0, r3
 801f48e:	f001 fb26 	bl	8020ade <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 801f492:	697b      	ldr	r3, [r7, #20]
 801f494:	3301      	adds	r3, #1
 801f496:	617b      	str	r3, [r7, #20]
 801f498:	697b      	ldr	r3, [r7, #20]
 801f49a:	2b07      	cmp	r3, #7
 801f49c:	d9d0      	bls.n	801f440 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 801f49e:	687b      	ldr	r3, [r7, #4]
 801f4a0:	693a      	ldr	r2, [r7, #16]
 801f4a2:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 801f4a4:	687b      	ldr	r3, [r7, #4]
 801f4a6:	6a1b      	ldr	r3, [r3, #32]
 801f4a8:	f1a3 0220 	sub.w	r2, r3, #32
 801f4ac:	687b      	ldr	r3, [r7, #4]
 801f4ae:	621a      	str	r2, [r3, #32]
  }
}
 801f4b0:	bf00      	nop
 801f4b2:	3718      	adds	r7, #24
 801f4b4:	46bd      	mov	sp, r7
 801f4b6:	bd80      	pop	{r7, pc}

0801f4b8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 801f4b8:	b480      	push	{r7}
 801f4ba:	b083      	sub	sp, #12
 801f4bc:	af00      	add	r7, sp, #0
 801f4be:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 801f4c0:	bf00      	nop
 801f4c2:	370c      	adds	r7, #12
 801f4c4:	46bd      	mov	sp, r7
 801f4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f4ca:	4770      	bx	lr

0801f4cc <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 801f4cc:	b480      	push	{r7}
 801f4ce:	b083      	sub	sp, #12
 801f4d0:	af00      	add	r7, sp, #0
 801f4d2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 801f4d4:	bf00      	nop
 801f4d6:	370c      	adds	r7, #12
 801f4d8:	46bd      	mov	sp, r7
 801f4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f4de:	4770      	bx	lr

0801f4e0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 801f4e0:	b480      	push	{r7}
 801f4e2:	b083      	sub	sp, #12
 801f4e4:	af00      	add	r7, sp, #0
 801f4e6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 801f4e8:	bf00      	nop
 801f4ea:	370c      	adds	r7, #12
 801f4ec:	46bd      	mov	sp, r7
 801f4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f4f2:	4770      	bx	lr

0801f4f4 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 801f4f4:	b480      	push	{r7}
 801f4f6:	b083      	sub	sp, #12
 801f4f8:	af00      	add	r7, sp, #0
 801f4fa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 801f4fc:	bf00      	nop
 801f4fe:	370c      	adds	r7, #12
 801f500:	46bd      	mov	sp, r7
 801f502:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f506:	4770      	bx	lr

0801f508 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801f508:	b580      	push	{r7, lr}
 801f50a:	b084      	sub	sp, #16
 801f50c:	af00      	add	r7, sp, #0
 801f50e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801f510:	687b      	ldr	r3, [r7, #4]
 801f512:	2b00      	cmp	r3, #0
 801f514:	d101      	bne.n	801f51a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801f516:	2301      	movs	r3, #1
 801f518:	e10f      	b.n	801f73a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801f51a:	687b      	ldr	r3, [r7, #4]
 801f51c:	2200      	movs	r2, #0
 801f51e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 801f520:	687b      	ldr	r3, [r7, #4]
 801f522:	681b      	ldr	r3, [r3, #0]
 801f524:	4a87      	ldr	r2, [pc, #540]	@ (801f744 <HAL_SPI_Init+0x23c>)
 801f526:	4293      	cmp	r3, r2
 801f528:	d00f      	beq.n	801f54a <HAL_SPI_Init+0x42>
 801f52a:	687b      	ldr	r3, [r7, #4]
 801f52c:	681b      	ldr	r3, [r3, #0]
 801f52e:	4a86      	ldr	r2, [pc, #536]	@ (801f748 <HAL_SPI_Init+0x240>)
 801f530:	4293      	cmp	r3, r2
 801f532:	d00a      	beq.n	801f54a <HAL_SPI_Init+0x42>
 801f534:	687b      	ldr	r3, [r7, #4]
 801f536:	681b      	ldr	r3, [r3, #0]
 801f538:	4a84      	ldr	r2, [pc, #528]	@ (801f74c <HAL_SPI_Init+0x244>)
 801f53a:	4293      	cmp	r3, r2
 801f53c:	d005      	beq.n	801f54a <HAL_SPI_Init+0x42>
 801f53e:	687b      	ldr	r3, [r7, #4]
 801f540:	68db      	ldr	r3, [r3, #12]
 801f542:	2b0f      	cmp	r3, #15
 801f544:	d901      	bls.n	801f54a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 801f546:	2301      	movs	r3, #1
 801f548:	e0f7      	b.n	801f73a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 801f54a:	6878      	ldr	r0, [r7, #4]
 801f54c:	f000 f90a 	bl	801f764 <SPI_GetPacketSize>
 801f550:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801f552:	687b      	ldr	r3, [r7, #4]
 801f554:	681b      	ldr	r3, [r3, #0]
 801f556:	4a7b      	ldr	r2, [pc, #492]	@ (801f744 <HAL_SPI_Init+0x23c>)
 801f558:	4293      	cmp	r3, r2
 801f55a:	d00c      	beq.n	801f576 <HAL_SPI_Init+0x6e>
 801f55c:	687b      	ldr	r3, [r7, #4]
 801f55e:	681b      	ldr	r3, [r3, #0]
 801f560:	4a79      	ldr	r2, [pc, #484]	@ (801f748 <HAL_SPI_Init+0x240>)
 801f562:	4293      	cmp	r3, r2
 801f564:	d007      	beq.n	801f576 <HAL_SPI_Init+0x6e>
 801f566:	687b      	ldr	r3, [r7, #4]
 801f568:	681b      	ldr	r3, [r3, #0]
 801f56a:	4a78      	ldr	r2, [pc, #480]	@ (801f74c <HAL_SPI_Init+0x244>)
 801f56c:	4293      	cmp	r3, r2
 801f56e:	d002      	beq.n	801f576 <HAL_SPI_Init+0x6e>
 801f570:	68fb      	ldr	r3, [r7, #12]
 801f572:	2b08      	cmp	r3, #8
 801f574:	d811      	bhi.n	801f59a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801f576:	687b      	ldr	r3, [r7, #4]
 801f578:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801f57a:	4a72      	ldr	r2, [pc, #456]	@ (801f744 <HAL_SPI_Init+0x23c>)
 801f57c:	4293      	cmp	r3, r2
 801f57e:	d009      	beq.n	801f594 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801f580:	687b      	ldr	r3, [r7, #4]
 801f582:	681b      	ldr	r3, [r3, #0]
 801f584:	4a70      	ldr	r2, [pc, #448]	@ (801f748 <HAL_SPI_Init+0x240>)
 801f586:	4293      	cmp	r3, r2
 801f588:	d004      	beq.n	801f594 <HAL_SPI_Init+0x8c>
 801f58a:	687b      	ldr	r3, [r7, #4]
 801f58c:	681b      	ldr	r3, [r3, #0]
 801f58e:	4a6f      	ldr	r2, [pc, #444]	@ (801f74c <HAL_SPI_Init+0x244>)
 801f590:	4293      	cmp	r3, r2
 801f592:	d104      	bne.n	801f59e <HAL_SPI_Init+0x96>
 801f594:	68fb      	ldr	r3, [r7, #12]
 801f596:	2b10      	cmp	r3, #16
 801f598:	d901      	bls.n	801f59e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 801f59a:	2301      	movs	r3, #1
 801f59c:	e0cd      	b.n	801f73a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801f59e:	687b      	ldr	r3, [r7, #4]
 801f5a0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801f5a4:	b2db      	uxtb	r3, r3
 801f5a6:	2b00      	cmp	r3, #0
 801f5a8:	d106      	bne.n	801f5b8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801f5aa:	687b      	ldr	r3, [r7, #4]
 801f5ac:	2200      	movs	r2, #0
 801f5ae:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801f5b2:	6878      	ldr	r0, [r7, #4]
 801f5b4:	f000 f8cc 	bl	801f750 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801f5b8:	687b      	ldr	r3, [r7, #4]
 801f5ba:	2202      	movs	r2, #2
 801f5bc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801f5c0:	687b      	ldr	r3, [r7, #4]
 801f5c2:	681b      	ldr	r3, [r3, #0]
 801f5c4:	681a      	ldr	r2, [r3, #0]
 801f5c6:	687b      	ldr	r3, [r7, #4]
 801f5c8:	681b      	ldr	r3, [r3, #0]
 801f5ca:	f022 0201 	bic.w	r2, r2, #1
 801f5ce:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 801f5d0:	687b      	ldr	r3, [r7, #4]
 801f5d2:	681b      	ldr	r3, [r3, #0]
 801f5d4:	689b      	ldr	r3, [r3, #8]
 801f5d6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 801f5da:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801f5dc:	687b      	ldr	r3, [r7, #4]
 801f5de:	699b      	ldr	r3, [r3, #24]
 801f5e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801f5e4:	d119      	bne.n	801f61a <HAL_SPI_Init+0x112>
 801f5e6:	687b      	ldr	r3, [r7, #4]
 801f5e8:	685b      	ldr	r3, [r3, #4]
 801f5ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801f5ee:	d103      	bne.n	801f5f8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801f5f0:	687b      	ldr	r3, [r7, #4]
 801f5f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801f5f4:	2b00      	cmp	r3, #0
 801f5f6:	d008      	beq.n	801f60a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801f5f8:	687b      	ldr	r3, [r7, #4]
 801f5fa:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801f5fc:	2b00      	cmp	r3, #0
 801f5fe:	d10c      	bne.n	801f61a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 801f600:	687b      	ldr	r3, [r7, #4]
 801f602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801f604:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801f608:	d107      	bne.n	801f61a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 801f60a:	687b      	ldr	r3, [r7, #4]
 801f60c:	681b      	ldr	r3, [r3, #0]
 801f60e:	681a      	ldr	r2, [r3, #0]
 801f610:	687b      	ldr	r3, [r7, #4]
 801f612:	681b      	ldr	r3, [r3, #0]
 801f614:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 801f618:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 801f61a:	687b      	ldr	r3, [r7, #4]
 801f61c:	685b      	ldr	r3, [r3, #4]
 801f61e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801f622:	2b00      	cmp	r3, #0
 801f624:	d00f      	beq.n	801f646 <HAL_SPI_Init+0x13e>
 801f626:	687b      	ldr	r3, [r7, #4]
 801f628:	68db      	ldr	r3, [r3, #12]
 801f62a:	2b06      	cmp	r3, #6
 801f62c:	d90b      	bls.n	801f646 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 801f62e:	687b      	ldr	r3, [r7, #4]
 801f630:	681b      	ldr	r3, [r3, #0]
 801f632:	681b      	ldr	r3, [r3, #0]
 801f634:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 801f638:	687b      	ldr	r3, [r7, #4]
 801f63a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801f63c:	687b      	ldr	r3, [r7, #4]
 801f63e:	681b      	ldr	r3, [r3, #0]
 801f640:	430a      	orrs	r2, r1
 801f642:	601a      	str	r2, [r3, #0]
 801f644:	e007      	b.n	801f656 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 801f646:	687b      	ldr	r3, [r7, #4]
 801f648:	681b      	ldr	r3, [r3, #0]
 801f64a:	681a      	ldr	r2, [r3, #0]
 801f64c:	687b      	ldr	r3, [r7, #4]
 801f64e:	681b      	ldr	r3, [r3, #0]
 801f650:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801f654:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 801f656:	687b      	ldr	r3, [r7, #4]
 801f658:	69da      	ldr	r2, [r3, #28]
 801f65a:	687b      	ldr	r3, [r7, #4]
 801f65c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f65e:	431a      	orrs	r2, r3
 801f660:	68bb      	ldr	r3, [r7, #8]
 801f662:	431a      	orrs	r2, r3
 801f664:	687b      	ldr	r3, [r7, #4]
 801f666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f668:	ea42 0103 	orr.w	r1, r2, r3
 801f66c:	687b      	ldr	r3, [r7, #4]
 801f66e:	68da      	ldr	r2, [r3, #12]
 801f670:	687b      	ldr	r3, [r7, #4]
 801f672:	681b      	ldr	r3, [r3, #0]
 801f674:	430a      	orrs	r2, r1
 801f676:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 801f678:	687b      	ldr	r3, [r7, #4]
 801f67a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801f67c:	687b      	ldr	r3, [r7, #4]
 801f67e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f680:	431a      	orrs	r2, r3
 801f682:	687b      	ldr	r3, [r7, #4]
 801f684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f686:	431a      	orrs	r2, r3
 801f688:	687b      	ldr	r3, [r7, #4]
 801f68a:	699b      	ldr	r3, [r3, #24]
 801f68c:	431a      	orrs	r2, r3
 801f68e:	687b      	ldr	r3, [r7, #4]
 801f690:	691b      	ldr	r3, [r3, #16]
 801f692:	431a      	orrs	r2, r3
 801f694:	687b      	ldr	r3, [r7, #4]
 801f696:	695b      	ldr	r3, [r3, #20]
 801f698:	431a      	orrs	r2, r3
 801f69a:	687b      	ldr	r3, [r7, #4]
 801f69c:	6a1b      	ldr	r3, [r3, #32]
 801f69e:	431a      	orrs	r2, r3
 801f6a0:	687b      	ldr	r3, [r7, #4]
 801f6a2:	685b      	ldr	r3, [r3, #4]
 801f6a4:	431a      	orrs	r2, r3
 801f6a6:	687b      	ldr	r3, [r7, #4]
 801f6a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801f6aa:	431a      	orrs	r2, r3
 801f6ac:	687b      	ldr	r3, [r7, #4]
 801f6ae:	689b      	ldr	r3, [r3, #8]
 801f6b0:	431a      	orrs	r2, r3
 801f6b2:	687b      	ldr	r3, [r7, #4]
 801f6b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801f6b6:	ea42 0103 	orr.w	r1, r2, r3
 801f6ba:	687b      	ldr	r3, [r7, #4]
 801f6bc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801f6be:	687b      	ldr	r3, [r7, #4]
 801f6c0:	681b      	ldr	r3, [r3, #0]
 801f6c2:	430a      	orrs	r2, r1
 801f6c4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 801f6c6:	687b      	ldr	r3, [r7, #4]
 801f6c8:	685b      	ldr	r3, [r3, #4]
 801f6ca:	2b00      	cmp	r3, #0
 801f6cc:	d113      	bne.n	801f6f6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 801f6ce:	687b      	ldr	r3, [r7, #4]
 801f6d0:	681b      	ldr	r3, [r3, #0]
 801f6d2:	689b      	ldr	r3, [r3, #8]
 801f6d4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 801f6d8:	687b      	ldr	r3, [r7, #4]
 801f6da:	681b      	ldr	r3, [r3, #0]
 801f6dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801f6e0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 801f6e2:	687b      	ldr	r3, [r7, #4]
 801f6e4:	681b      	ldr	r3, [r3, #0]
 801f6e6:	689b      	ldr	r3, [r3, #8]
 801f6e8:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 801f6ec:	687b      	ldr	r3, [r7, #4]
 801f6ee:	681b      	ldr	r3, [r3, #0]
 801f6f0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801f6f4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801f6f6:	687b      	ldr	r3, [r7, #4]
 801f6f8:	681b      	ldr	r3, [r3, #0]
 801f6fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801f6fc:	687b      	ldr	r3, [r7, #4]
 801f6fe:	681b      	ldr	r3, [r3, #0]
 801f700:	f022 0201 	bic.w	r2, r2, #1
 801f704:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 801f706:	687b      	ldr	r3, [r7, #4]
 801f708:	685b      	ldr	r3, [r3, #4]
 801f70a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801f70e:	2b00      	cmp	r3, #0
 801f710:	d00a      	beq.n	801f728 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 801f712:	687b      	ldr	r3, [r7, #4]
 801f714:	681b      	ldr	r3, [r3, #0]
 801f716:	68db      	ldr	r3, [r3, #12]
 801f718:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801f71c:	687b      	ldr	r3, [r7, #4]
 801f71e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801f720:	687b      	ldr	r3, [r7, #4]
 801f722:	681b      	ldr	r3, [r3, #0]
 801f724:	430a      	orrs	r2, r1
 801f726:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801f728:	687b      	ldr	r3, [r7, #4]
 801f72a:	2200      	movs	r2, #0
 801f72c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 801f730:	687b      	ldr	r3, [r7, #4]
 801f732:	2201      	movs	r2, #1
 801f734:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 801f738:	2300      	movs	r3, #0
}
 801f73a:	4618      	mov	r0, r3
 801f73c:	3710      	adds	r7, #16
 801f73e:	46bd      	mov	sp, r7
 801f740:	bd80      	pop	{r7, pc}
 801f742:	bf00      	nop
 801f744:	40013000 	.word	0x40013000
 801f748:	40003800 	.word	0x40003800
 801f74c:	40003c00 	.word	0x40003c00

0801f750 <HAL_SPI_MspInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 801f750:	b480      	push	{r7}
 801f752:	b083      	sub	sp, #12
 801f754:	af00      	add	r7, sp, #0
 801f756:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 801f758:	bf00      	nop
 801f75a:	370c      	adds	r7, #12
 801f75c:	46bd      	mov	sp, r7
 801f75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f762:	4770      	bx	lr

0801f764 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 801f764:	b480      	push	{r7}
 801f766:	b085      	sub	sp, #20
 801f768:	af00      	add	r7, sp, #0
 801f76a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 801f76c:	687b      	ldr	r3, [r7, #4]
 801f76e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f770:	095b      	lsrs	r3, r3, #5
 801f772:	3301      	adds	r3, #1
 801f774:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 801f776:	687b      	ldr	r3, [r7, #4]
 801f778:	68db      	ldr	r3, [r3, #12]
 801f77a:	3301      	adds	r3, #1
 801f77c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 801f77e:	68bb      	ldr	r3, [r7, #8]
 801f780:	3307      	adds	r3, #7
 801f782:	08db      	lsrs	r3, r3, #3
 801f784:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 801f786:	68bb      	ldr	r3, [r7, #8]
 801f788:	68fa      	ldr	r2, [r7, #12]
 801f78a:	fb02 f303 	mul.w	r3, r2, r3
}
 801f78e:	4618      	mov	r0, r3
 801f790:	3714      	adds	r7, #20
 801f792:	46bd      	mov	sp, r7
 801f794:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f798:	4770      	bx	lr

0801f79a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801f79a:	b580      	push	{r7, lr}
 801f79c:	b082      	sub	sp, #8
 801f79e:	af00      	add	r7, sp, #0
 801f7a0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801f7a2:	687b      	ldr	r3, [r7, #4]
 801f7a4:	2b00      	cmp	r3, #0
 801f7a6:	d101      	bne.n	801f7ac <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801f7a8:	2301      	movs	r3, #1
 801f7aa:	e042      	b.n	801f832 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801f7ac:	687b      	ldr	r3, [r7, #4]
 801f7ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801f7b2:	2b00      	cmp	r3, #0
 801f7b4:	d106      	bne.n	801f7c4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801f7b6:	687b      	ldr	r3, [r7, #4]
 801f7b8:	2200      	movs	r2, #0
 801f7ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801f7be:	6878      	ldr	r0, [r7, #4]
 801f7c0:	f7ed fd4e 	bl	800d260 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801f7c4:	687b      	ldr	r3, [r7, #4]
 801f7c6:	2224      	movs	r2, #36	@ 0x24
 801f7c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 801f7cc:	687b      	ldr	r3, [r7, #4]
 801f7ce:	681b      	ldr	r3, [r3, #0]
 801f7d0:	681a      	ldr	r2, [r3, #0]
 801f7d2:	687b      	ldr	r3, [r7, #4]
 801f7d4:	681b      	ldr	r3, [r3, #0]
 801f7d6:	f022 0201 	bic.w	r2, r2, #1
 801f7da:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801f7dc:	687b      	ldr	r3, [r7, #4]
 801f7de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f7e0:	2b00      	cmp	r3, #0
 801f7e2:	d002      	beq.n	801f7ea <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 801f7e4:	6878      	ldr	r0, [r7, #4]
 801f7e6:	f000 fe1f 	bl	8020428 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801f7ea:	6878      	ldr	r0, [r7, #4]
 801f7ec:	f000 f8b4 	bl	801f958 <UART_SetConfig>
 801f7f0:	4603      	mov	r3, r0
 801f7f2:	2b01      	cmp	r3, #1
 801f7f4:	d101      	bne.n	801f7fa <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 801f7f6:	2301      	movs	r3, #1
 801f7f8:	e01b      	b.n	801f832 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801f7fa:	687b      	ldr	r3, [r7, #4]
 801f7fc:	681b      	ldr	r3, [r3, #0]
 801f7fe:	685a      	ldr	r2, [r3, #4]
 801f800:	687b      	ldr	r3, [r7, #4]
 801f802:	681b      	ldr	r3, [r3, #0]
 801f804:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801f808:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801f80a:	687b      	ldr	r3, [r7, #4]
 801f80c:	681b      	ldr	r3, [r3, #0]
 801f80e:	689a      	ldr	r2, [r3, #8]
 801f810:	687b      	ldr	r3, [r7, #4]
 801f812:	681b      	ldr	r3, [r3, #0]
 801f814:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801f818:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801f81a:	687b      	ldr	r3, [r7, #4]
 801f81c:	681b      	ldr	r3, [r3, #0]
 801f81e:	681a      	ldr	r2, [r3, #0]
 801f820:	687b      	ldr	r3, [r7, #4]
 801f822:	681b      	ldr	r3, [r3, #0]
 801f824:	f042 0201 	orr.w	r2, r2, #1
 801f828:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801f82a:	6878      	ldr	r0, [r7, #4]
 801f82c:	f000 fe9e 	bl	802056c <UART_CheckIdleState>
 801f830:	4603      	mov	r3, r0
}
 801f832:	4618      	mov	r0, r3
 801f834:	3708      	adds	r7, #8
 801f836:	46bd      	mov	sp, r7
 801f838:	bd80      	pop	{r7, pc}

0801f83a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801f83a:	b580      	push	{r7, lr}
 801f83c:	b08a      	sub	sp, #40	@ 0x28
 801f83e:	af02      	add	r7, sp, #8
 801f840:	60f8      	str	r0, [r7, #12]
 801f842:	60b9      	str	r1, [r7, #8]
 801f844:	603b      	str	r3, [r7, #0]
 801f846:	4613      	mov	r3, r2
 801f848:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801f84a:	68fb      	ldr	r3, [r7, #12]
 801f84c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801f850:	2b20      	cmp	r3, #32
 801f852:	d17b      	bne.n	801f94c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 801f854:	68bb      	ldr	r3, [r7, #8]
 801f856:	2b00      	cmp	r3, #0
 801f858:	d002      	beq.n	801f860 <HAL_UART_Transmit+0x26>
 801f85a:	88fb      	ldrh	r3, [r7, #6]
 801f85c:	2b00      	cmp	r3, #0
 801f85e:	d101      	bne.n	801f864 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801f860:	2301      	movs	r3, #1
 801f862:	e074      	b.n	801f94e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801f864:	68fb      	ldr	r3, [r7, #12]
 801f866:	2200      	movs	r2, #0
 801f868:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801f86c:	68fb      	ldr	r3, [r7, #12]
 801f86e:	2221      	movs	r2, #33	@ 0x21
 801f870:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801f874:	f7f7 fdc6 	bl	8017404 <HAL_GetTick>
 801f878:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801f87a:	68fb      	ldr	r3, [r7, #12]
 801f87c:	88fa      	ldrh	r2, [r7, #6]
 801f87e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 801f882:	68fb      	ldr	r3, [r7, #12]
 801f884:	88fa      	ldrh	r2, [r7, #6]
 801f886:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801f88a:	68fb      	ldr	r3, [r7, #12]
 801f88c:	689b      	ldr	r3, [r3, #8]
 801f88e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801f892:	d108      	bne.n	801f8a6 <HAL_UART_Transmit+0x6c>
 801f894:	68fb      	ldr	r3, [r7, #12]
 801f896:	691b      	ldr	r3, [r3, #16]
 801f898:	2b00      	cmp	r3, #0
 801f89a:	d104      	bne.n	801f8a6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801f89c:	2300      	movs	r3, #0
 801f89e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801f8a0:	68bb      	ldr	r3, [r7, #8]
 801f8a2:	61bb      	str	r3, [r7, #24]
 801f8a4:	e003      	b.n	801f8ae <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 801f8a6:	68bb      	ldr	r3, [r7, #8]
 801f8a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801f8aa:	2300      	movs	r3, #0
 801f8ac:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801f8ae:	e030      	b.n	801f912 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801f8b0:	683b      	ldr	r3, [r7, #0]
 801f8b2:	9300      	str	r3, [sp, #0]
 801f8b4:	697b      	ldr	r3, [r7, #20]
 801f8b6:	2200      	movs	r2, #0
 801f8b8:	2180      	movs	r1, #128	@ 0x80
 801f8ba:	68f8      	ldr	r0, [r7, #12]
 801f8bc:	f000 ff00 	bl	80206c0 <UART_WaitOnFlagUntilTimeout>
 801f8c0:	4603      	mov	r3, r0
 801f8c2:	2b00      	cmp	r3, #0
 801f8c4:	d005      	beq.n	801f8d2 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 801f8c6:	68fb      	ldr	r3, [r7, #12]
 801f8c8:	2220      	movs	r2, #32
 801f8ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 801f8ce:	2303      	movs	r3, #3
 801f8d0:	e03d      	b.n	801f94e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 801f8d2:	69fb      	ldr	r3, [r7, #28]
 801f8d4:	2b00      	cmp	r3, #0
 801f8d6:	d10b      	bne.n	801f8f0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801f8d8:	69bb      	ldr	r3, [r7, #24]
 801f8da:	881b      	ldrh	r3, [r3, #0]
 801f8dc:	461a      	mov	r2, r3
 801f8de:	68fb      	ldr	r3, [r7, #12]
 801f8e0:	681b      	ldr	r3, [r3, #0]
 801f8e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801f8e6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 801f8e8:	69bb      	ldr	r3, [r7, #24]
 801f8ea:	3302      	adds	r3, #2
 801f8ec:	61bb      	str	r3, [r7, #24]
 801f8ee:	e007      	b.n	801f900 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801f8f0:	69fb      	ldr	r3, [r7, #28]
 801f8f2:	781a      	ldrb	r2, [r3, #0]
 801f8f4:	68fb      	ldr	r3, [r7, #12]
 801f8f6:	681b      	ldr	r3, [r3, #0]
 801f8f8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801f8fa:	69fb      	ldr	r3, [r7, #28]
 801f8fc:	3301      	adds	r3, #1
 801f8fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801f900:	68fb      	ldr	r3, [r7, #12]
 801f902:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801f906:	b29b      	uxth	r3, r3
 801f908:	3b01      	subs	r3, #1
 801f90a:	b29a      	uxth	r2, r3
 801f90c:	68fb      	ldr	r3, [r7, #12]
 801f90e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 801f912:	68fb      	ldr	r3, [r7, #12]
 801f914:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801f918:	b29b      	uxth	r3, r3
 801f91a:	2b00      	cmp	r3, #0
 801f91c:	d1c8      	bne.n	801f8b0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801f91e:	683b      	ldr	r3, [r7, #0]
 801f920:	9300      	str	r3, [sp, #0]
 801f922:	697b      	ldr	r3, [r7, #20]
 801f924:	2200      	movs	r2, #0
 801f926:	2140      	movs	r1, #64	@ 0x40
 801f928:	68f8      	ldr	r0, [r7, #12]
 801f92a:	f000 fec9 	bl	80206c0 <UART_WaitOnFlagUntilTimeout>
 801f92e:	4603      	mov	r3, r0
 801f930:	2b00      	cmp	r3, #0
 801f932:	d005      	beq.n	801f940 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 801f934:	68fb      	ldr	r3, [r7, #12]
 801f936:	2220      	movs	r2, #32
 801f938:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 801f93c:	2303      	movs	r3, #3
 801f93e:	e006      	b.n	801f94e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801f940:	68fb      	ldr	r3, [r7, #12]
 801f942:	2220      	movs	r2, #32
 801f944:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 801f948:	2300      	movs	r3, #0
 801f94a:	e000      	b.n	801f94e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801f94c:	2302      	movs	r3, #2
  }
}
 801f94e:	4618      	mov	r0, r3
 801f950:	3720      	adds	r7, #32
 801f952:	46bd      	mov	sp, r7
 801f954:	bd80      	pop	{r7, pc}
	...

0801f958 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801f958:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801f95c:	b092      	sub	sp, #72	@ 0x48
 801f95e:	af00      	add	r7, sp, #0
 801f960:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801f962:	2300      	movs	r3, #0
 801f964:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801f968:	697b      	ldr	r3, [r7, #20]
 801f96a:	689a      	ldr	r2, [r3, #8]
 801f96c:	697b      	ldr	r3, [r7, #20]
 801f96e:	691b      	ldr	r3, [r3, #16]
 801f970:	431a      	orrs	r2, r3
 801f972:	697b      	ldr	r3, [r7, #20]
 801f974:	695b      	ldr	r3, [r3, #20]
 801f976:	431a      	orrs	r2, r3
 801f978:	697b      	ldr	r3, [r7, #20]
 801f97a:	69db      	ldr	r3, [r3, #28]
 801f97c:	4313      	orrs	r3, r2
 801f97e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801f980:	697b      	ldr	r3, [r7, #20]
 801f982:	681b      	ldr	r3, [r3, #0]
 801f984:	681a      	ldr	r2, [r3, #0]
 801f986:	4bbe      	ldr	r3, [pc, #760]	@ (801fc80 <UART_SetConfig+0x328>)
 801f988:	4013      	ands	r3, r2
 801f98a:	697a      	ldr	r2, [r7, #20]
 801f98c:	6812      	ldr	r2, [r2, #0]
 801f98e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801f990:	430b      	orrs	r3, r1
 801f992:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801f994:	697b      	ldr	r3, [r7, #20]
 801f996:	681b      	ldr	r3, [r3, #0]
 801f998:	685b      	ldr	r3, [r3, #4]
 801f99a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801f99e:	697b      	ldr	r3, [r7, #20]
 801f9a0:	68da      	ldr	r2, [r3, #12]
 801f9a2:	697b      	ldr	r3, [r7, #20]
 801f9a4:	681b      	ldr	r3, [r3, #0]
 801f9a6:	430a      	orrs	r2, r1
 801f9a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801f9aa:	697b      	ldr	r3, [r7, #20]
 801f9ac:	699b      	ldr	r3, [r3, #24]
 801f9ae:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801f9b0:	697b      	ldr	r3, [r7, #20]
 801f9b2:	681b      	ldr	r3, [r3, #0]
 801f9b4:	4ab3      	ldr	r2, [pc, #716]	@ (801fc84 <UART_SetConfig+0x32c>)
 801f9b6:	4293      	cmp	r3, r2
 801f9b8:	d004      	beq.n	801f9c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801f9ba:	697b      	ldr	r3, [r7, #20]
 801f9bc:	6a1b      	ldr	r3, [r3, #32]
 801f9be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801f9c0:	4313      	orrs	r3, r2
 801f9c2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801f9c4:	697b      	ldr	r3, [r7, #20]
 801f9c6:	681b      	ldr	r3, [r3, #0]
 801f9c8:	689a      	ldr	r2, [r3, #8]
 801f9ca:	4baf      	ldr	r3, [pc, #700]	@ (801fc88 <UART_SetConfig+0x330>)
 801f9cc:	4013      	ands	r3, r2
 801f9ce:	697a      	ldr	r2, [r7, #20]
 801f9d0:	6812      	ldr	r2, [r2, #0]
 801f9d2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801f9d4:	430b      	orrs	r3, r1
 801f9d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801f9d8:	697b      	ldr	r3, [r7, #20]
 801f9da:	681b      	ldr	r3, [r3, #0]
 801f9dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f9de:	f023 010f 	bic.w	r1, r3, #15
 801f9e2:	697b      	ldr	r3, [r7, #20]
 801f9e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801f9e6:	697b      	ldr	r3, [r7, #20]
 801f9e8:	681b      	ldr	r3, [r3, #0]
 801f9ea:	430a      	orrs	r2, r1
 801f9ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801f9ee:	697b      	ldr	r3, [r7, #20]
 801f9f0:	681b      	ldr	r3, [r3, #0]
 801f9f2:	4aa6      	ldr	r2, [pc, #664]	@ (801fc8c <UART_SetConfig+0x334>)
 801f9f4:	4293      	cmp	r3, r2
 801f9f6:	d177      	bne.n	801fae8 <UART_SetConfig+0x190>
 801f9f8:	4ba5      	ldr	r3, [pc, #660]	@ (801fc90 <UART_SetConfig+0x338>)
 801f9fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f9fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801fa00:	2b28      	cmp	r3, #40	@ 0x28
 801fa02:	d86d      	bhi.n	801fae0 <UART_SetConfig+0x188>
 801fa04:	a201      	add	r2, pc, #4	@ (adr r2, 801fa0c <UART_SetConfig+0xb4>)
 801fa06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fa0a:	bf00      	nop
 801fa0c:	0801fab1 	.word	0x0801fab1
 801fa10:	0801fae1 	.word	0x0801fae1
 801fa14:	0801fae1 	.word	0x0801fae1
 801fa18:	0801fae1 	.word	0x0801fae1
 801fa1c:	0801fae1 	.word	0x0801fae1
 801fa20:	0801fae1 	.word	0x0801fae1
 801fa24:	0801fae1 	.word	0x0801fae1
 801fa28:	0801fae1 	.word	0x0801fae1
 801fa2c:	0801fab9 	.word	0x0801fab9
 801fa30:	0801fae1 	.word	0x0801fae1
 801fa34:	0801fae1 	.word	0x0801fae1
 801fa38:	0801fae1 	.word	0x0801fae1
 801fa3c:	0801fae1 	.word	0x0801fae1
 801fa40:	0801fae1 	.word	0x0801fae1
 801fa44:	0801fae1 	.word	0x0801fae1
 801fa48:	0801fae1 	.word	0x0801fae1
 801fa4c:	0801fac1 	.word	0x0801fac1
 801fa50:	0801fae1 	.word	0x0801fae1
 801fa54:	0801fae1 	.word	0x0801fae1
 801fa58:	0801fae1 	.word	0x0801fae1
 801fa5c:	0801fae1 	.word	0x0801fae1
 801fa60:	0801fae1 	.word	0x0801fae1
 801fa64:	0801fae1 	.word	0x0801fae1
 801fa68:	0801fae1 	.word	0x0801fae1
 801fa6c:	0801fac9 	.word	0x0801fac9
 801fa70:	0801fae1 	.word	0x0801fae1
 801fa74:	0801fae1 	.word	0x0801fae1
 801fa78:	0801fae1 	.word	0x0801fae1
 801fa7c:	0801fae1 	.word	0x0801fae1
 801fa80:	0801fae1 	.word	0x0801fae1
 801fa84:	0801fae1 	.word	0x0801fae1
 801fa88:	0801fae1 	.word	0x0801fae1
 801fa8c:	0801fad1 	.word	0x0801fad1
 801fa90:	0801fae1 	.word	0x0801fae1
 801fa94:	0801fae1 	.word	0x0801fae1
 801fa98:	0801fae1 	.word	0x0801fae1
 801fa9c:	0801fae1 	.word	0x0801fae1
 801faa0:	0801fae1 	.word	0x0801fae1
 801faa4:	0801fae1 	.word	0x0801fae1
 801faa8:	0801fae1 	.word	0x0801fae1
 801faac:	0801fad9 	.word	0x0801fad9
 801fab0:	2301      	movs	r3, #1
 801fab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fab6:	e222      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fab8:	2304      	movs	r3, #4
 801faba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fabe:	e21e      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fac0:	2308      	movs	r3, #8
 801fac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fac6:	e21a      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fac8:	2310      	movs	r3, #16
 801faca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801face:	e216      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fad0:	2320      	movs	r3, #32
 801fad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fad6:	e212      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fad8:	2340      	movs	r3, #64	@ 0x40
 801fada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fade:	e20e      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fae0:	2380      	movs	r3, #128	@ 0x80
 801fae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fae6:	e20a      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fae8:	697b      	ldr	r3, [r7, #20]
 801faea:	681b      	ldr	r3, [r3, #0]
 801faec:	4a69      	ldr	r2, [pc, #420]	@ (801fc94 <UART_SetConfig+0x33c>)
 801faee:	4293      	cmp	r3, r2
 801faf0:	d130      	bne.n	801fb54 <UART_SetConfig+0x1fc>
 801faf2:	4b67      	ldr	r3, [pc, #412]	@ (801fc90 <UART_SetConfig+0x338>)
 801faf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801faf6:	f003 0307 	and.w	r3, r3, #7
 801fafa:	2b05      	cmp	r3, #5
 801fafc:	d826      	bhi.n	801fb4c <UART_SetConfig+0x1f4>
 801fafe:	a201      	add	r2, pc, #4	@ (adr r2, 801fb04 <UART_SetConfig+0x1ac>)
 801fb00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fb04:	0801fb1d 	.word	0x0801fb1d
 801fb08:	0801fb25 	.word	0x0801fb25
 801fb0c:	0801fb2d 	.word	0x0801fb2d
 801fb10:	0801fb35 	.word	0x0801fb35
 801fb14:	0801fb3d 	.word	0x0801fb3d
 801fb18:	0801fb45 	.word	0x0801fb45
 801fb1c:	2300      	movs	r3, #0
 801fb1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fb22:	e1ec      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fb24:	2304      	movs	r3, #4
 801fb26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fb2a:	e1e8      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fb2c:	2308      	movs	r3, #8
 801fb2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fb32:	e1e4      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fb34:	2310      	movs	r3, #16
 801fb36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fb3a:	e1e0      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fb3c:	2320      	movs	r3, #32
 801fb3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fb42:	e1dc      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fb44:	2340      	movs	r3, #64	@ 0x40
 801fb46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fb4a:	e1d8      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fb4c:	2380      	movs	r3, #128	@ 0x80
 801fb4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fb52:	e1d4      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fb54:	697b      	ldr	r3, [r7, #20]
 801fb56:	681b      	ldr	r3, [r3, #0]
 801fb58:	4a4f      	ldr	r2, [pc, #316]	@ (801fc98 <UART_SetConfig+0x340>)
 801fb5a:	4293      	cmp	r3, r2
 801fb5c:	d130      	bne.n	801fbc0 <UART_SetConfig+0x268>
 801fb5e:	4b4c      	ldr	r3, [pc, #304]	@ (801fc90 <UART_SetConfig+0x338>)
 801fb60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801fb62:	f003 0307 	and.w	r3, r3, #7
 801fb66:	2b05      	cmp	r3, #5
 801fb68:	d826      	bhi.n	801fbb8 <UART_SetConfig+0x260>
 801fb6a:	a201      	add	r2, pc, #4	@ (adr r2, 801fb70 <UART_SetConfig+0x218>)
 801fb6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fb70:	0801fb89 	.word	0x0801fb89
 801fb74:	0801fb91 	.word	0x0801fb91
 801fb78:	0801fb99 	.word	0x0801fb99
 801fb7c:	0801fba1 	.word	0x0801fba1
 801fb80:	0801fba9 	.word	0x0801fba9
 801fb84:	0801fbb1 	.word	0x0801fbb1
 801fb88:	2300      	movs	r3, #0
 801fb8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fb8e:	e1b6      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fb90:	2304      	movs	r3, #4
 801fb92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fb96:	e1b2      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fb98:	2308      	movs	r3, #8
 801fb9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fb9e:	e1ae      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fba0:	2310      	movs	r3, #16
 801fba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fba6:	e1aa      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fba8:	2320      	movs	r3, #32
 801fbaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fbae:	e1a6      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fbb0:	2340      	movs	r3, #64	@ 0x40
 801fbb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fbb6:	e1a2      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fbb8:	2380      	movs	r3, #128	@ 0x80
 801fbba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fbbe:	e19e      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fbc0:	697b      	ldr	r3, [r7, #20]
 801fbc2:	681b      	ldr	r3, [r3, #0]
 801fbc4:	4a35      	ldr	r2, [pc, #212]	@ (801fc9c <UART_SetConfig+0x344>)
 801fbc6:	4293      	cmp	r3, r2
 801fbc8:	d130      	bne.n	801fc2c <UART_SetConfig+0x2d4>
 801fbca:	4b31      	ldr	r3, [pc, #196]	@ (801fc90 <UART_SetConfig+0x338>)
 801fbcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801fbce:	f003 0307 	and.w	r3, r3, #7
 801fbd2:	2b05      	cmp	r3, #5
 801fbd4:	d826      	bhi.n	801fc24 <UART_SetConfig+0x2cc>
 801fbd6:	a201      	add	r2, pc, #4	@ (adr r2, 801fbdc <UART_SetConfig+0x284>)
 801fbd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fbdc:	0801fbf5 	.word	0x0801fbf5
 801fbe0:	0801fbfd 	.word	0x0801fbfd
 801fbe4:	0801fc05 	.word	0x0801fc05
 801fbe8:	0801fc0d 	.word	0x0801fc0d
 801fbec:	0801fc15 	.word	0x0801fc15
 801fbf0:	0801fc1d 	.word	0x0801fc1d
 801fbf4:	2300      	movs	r3, #0
 801fbf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fbfa:	e180      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fbfc:	2304      	movs	r3, #4
 801fbfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fc02:	e17c      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fc04:	2308      	movs	r3, #8
 801fc06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fc0a:	e178      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fc0c:	2310      	movs	r3, #16
 801fc0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fc12:	e174      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fc14:	2320      	movs	r3, #32
 801fc16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fc1a:	e170      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fc1c:	2340      	movs	r3, #64	@ 0x40
 801fc1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fc22:	e16c      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fc24:	2380      	movs	r3, #128	@ 0x80
 801fc26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fc2a:	e168      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fc2c:	697b      	ldr	r3, [r7, #20]
 801fc2e:	681b      	ldr	r3, [r3, #0]
 801fc30:	4a1b      	ldr	r2, [pc, #108]	@ (801fca0 <UART_SetConfig+0x348>)
 801fc32:	4293      	cmp	r3, r2
 801fc34:	d142      	bne.n	801fcbc <UART_SetConfig+0x364>
 801fc36:	4b16      	ldr	r3, [pc, #88]	@ (801fc90 <UART_SetConfig+0x338>)
 801fc38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801fc3a:	f003 0307 	and.w	r3, r3, #7
 801fc3e:	2b05      	cmp	r3, #5
 801fc40:	d838      	bhi.n	801fcb4 <UART_SetConfig+0x35c>
 801fc42:	a201      	add	r2, pc, #4	@ (adr r2, 801fc48 <UART_SetConfig+0x2f0>)
 801fc44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fc48:	0801fc61 	.word	0x0801fc61
 801fc4c:	0801fc69 	.word	0x0801fc69
 801fc50:	0801fc71 	.word	0x0801fc71
 801fc54:	0801fc79 	.word	0x0801fc79
 801fc58:	0801fca5 	.word	0x0801fca5
 801fc5c:	0801fcad 	.word	0x0801fcad
 801fc60:	2300      	movs	r3, #0
 801fc62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fc66:	e14a      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fc68:	2304      	movs	r3, #4
 801fc6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fc6e:	e146      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fc70:	2308      	movs	r3, #8
 801fc72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fc76:	e142      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fc78:	2310      	movs	r3, #16
 801fc7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fc7e:	e13e      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fc80:	cfff69f3 	.word	0xcfff69f3
 801fc84:	58000c00 	.word	0x58000c00
 801fc88:	11fff4ff 	.word	0x11fff4ff
 801fc8c:	40011000 	.word	0x40011000
 801fc90:	58024400 	.word	0x58024400
 801fc94:	40004400 	.word	0x40004400
 801fc98:	40004800 	.word	0x40004800
 801fc9c:	40004c00 	.word	0x40004c00
 801fca0:	40005000 	.word	0x40005000
 801fca4:	2320      	movs	r3, #32
 801fca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fcaa:	e128      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fcac:	2340      	movs	r3, #64	@ 0x40
 801fcae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fcb2:	e124      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fcb4:	2380      	movs	r3, #128	@ 0x80
 801fcb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fcba:	e120      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fcbc:	697b      	ldr	r3, [r7, #20]
 801fcbe:	681b      	ldr	r3, [r3, #0]
 801fcc0:	4acb      	ldr	r2, [pc, #812]	@ (801fff0 <UART_SetConfig+0x698>)
 801fcc2:	4293      	cmp	r3, r2
 801fcc4:	d176      	bne.n	801fdb4 <UART_SetConfig+0x45c>
 801fcc6:	4bcb      	ldr	r3, [pc, #812]	@ (801fff4 <UART_SetConfig+0x69c>)
 801fcc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801fcca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801fcce:	2b28      	cmp	r3, #40	@ 0x28
 801fcd0:	d86c      	bhi.n	801fdac <UART_SetConfig+0x454>
 801fcd2:	a201      	add	r2, pc, #4	@ (adr r2, 801fcd8 <UART_SetConfig+0x380>)
 801fcd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fcd8:	0801fd7d 	.word	0x0801fd7d
 801fcdc:	0801fdad 	.word	0x0801fdad
 801fce0:	0801fdad 	.word	0x0801fdad
 801fce4:	0801fdad 	.word	0x0801fdad
 801fce8:	0801fdad 	.word	0x0801fdad
 801fcec:	0801fdad 	.word	0x0801fdad
 801fcf0:	0801fdad 	.word	0x0801fdad
 801fcf4:	0801fdad 	.word	0x0801fdad
 801fcf8:	0801fd85 	.word	0x0801fd85
 801fcfc:	0801fdad 	.word	0x0801fdad
 801fd00:	0801fdad 	.word	0x0801fdad
 801fd04:	0801fdad 	.word	0x0801fdad
 801fd08:	0801fdad 	.word	0x0801fdad
 801fd0c:	0801fdad 	.word	0x0801fdad
 801fd10:	0801fdad 	.word	0x0801fdad
 801fd14:	0801fdad 	.word	0x0801fdad
 801fd18:	0801fd8d 	.word	0x0801fd8d
 801fd1c:	0801fdad 	.word	0x0801fdad
 801fd20:	0801fdad 	.word	0x0801fdad
 801fd24:	0801fdad 	.word	0x0801fdad
 801fd28:	0801fdad 	.word	0x0801fdad
 801fd2c:	0801fdad 	.word	0x0801fdad
 801fd30:	0801fdad 	.word	0x0801fdad
 801fd34:	0801fdad 	.word	0x0801fdad
 801fd38:	0801fd95 	.word	0x0801fd95
 801fd3c:	0801fdad 	.word	0x0801fdad
 801fd40:	0801fdad 	.word	0x0801fdad
 801fd44:	0801fdad 	.word	0x0801fdad
 801fd48:	0801fdad 	.word	0x0801fdad
 801fd4c:	0801fdad 	.word	0x0801fdad
 801fd50:	0801fdad 	.word	0x0801fdad
 801fd54:	0801fdad 	.word	0x0801fdad
 801fd58:	0801fd9d 	.word	0x0801fd9d
 801fd5c:	0801fdad 	.word	0x0801fdad
 801fd60:	0801fdad 	.word	0x0801fdad
 801fd64:	0801fdad 	.word	0x0801fdad
 801fd68:	0801fdad 	.word	0x0801fdad
 801fd6c:	0801fdad 	.word	0x0801fdad
 801fd70:	0801fdad 	.word	0x0801fdad
 801fd74:	0801fdad 	.word	0x0801fdad
 801fd78:	0801fda5 	.word	0x0801fda5
 801fd7c:	2301      	movs	r3, #1
 801fd7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fd82:	e0bc      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fd84:	2304      	movs	r3, #4
 801fd86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fd8a:	e0b8      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fd8c:	2308      	movs	r3, #8
 801fd8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fd92:	e0b4      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fd94:	2310      	movs	r3, #16
 801fd96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fd9a:	e0b0      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fd9c:	2320      	movs	r3, #32
 801fd9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fda2:	e0ac      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fda4:	2340      	movs	r3, #64	@ 0x40
 801fda6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fdaa:	e0a8      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fdac:	2380      	movs	r3, #128	@ 0x80
 801fdae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fdb2:	e0a4      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fdb4:	697b      	ldr	r3, [r7, #20]
 801fdb6:	681b      	ldr	r3, [r3, #0]
 801fdb8:	4a8f      	ldr	r2, [pc, #572]	@ (801fff8 <UART_SetConfig+0x6a0>)
 801fdba:	4293      	cmp	r3, r2
 801fdbc:	d130      	bne.n	801fe20 <UART_SetConfig+0x4c8>
 801fdbe:	4b8d      	ldr	r3, [pc, #564]	@ (801fff4 <UART_SetConfig+0x69c>)
 801fdc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801fdc2:	f003 0307 	and.w	r3, r3, #7
 801fdc6:	2b05      	cmp	r3, #5
 801fdc8:	d826      	bhi.n	801fe18 <UART_SetConfig+0x4c0>
 801fdca:	a201      	add	r2, pc, #4	@ (adr r2, 801fdd0 <UART_SetConfig+0x478>)
 801fdcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fdd0:	0801fde9 	.word	0x0801fde9
 801fdd4:	0801fdf1 	.word	0x0801fdf1
 801fdd8:	0801fdf9 	.word	0x0801fdf9
 801fddc:	0801fe01 	.word	0x0801fe01
 801fde0:	0801fe09 	.word	0x0801fe09
 801fde4:	0801fe11 	.word	0x0801fe11
 801fde8:	2300      	movs	r3, #0
 801fdea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fdee:	e086      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fdf0:	2304      	movs	r3, #4
 801fdf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fdf6:	e082      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fdf8:	2308      	movs	r3, #8
 801fdfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fdfe:	e07e      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fe00:	2310      	movs	r3, #16
 801fe02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fe06:	e07a      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fe08:	2320      	movs	r3, #32
 801fe0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fe0e:	e076      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fe10:	2340      	movs	r3, #64	@ 0x40
 801fe12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fe16:	e072      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fe18:	2380      	movs	r3, #128	@ 0x80
 801fe1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fe1e:	e06e      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fe20:	697b      	ldr	r3, [r7, #20]
 801fe22:	681b      	ldr	r3, [r3, #0]
 801fe24:	4a75      	ldr	r2, [pc, #468]	@ (801fffc <UART_SetConfig+0x6a4>)
 801fe26:	4293      	cmp	r3, r2
 801fe28:	d130      	bne.n	801fe8c <UART_SetConfig+0x534>
 801fe2a:	4b72      	ldr	r3, [pc, #456]	@ (801fff4 <UART_SetConfig+0x69c>)
 801fe2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801fe2e:	f003 0307 	and.w	r3, r3, #7
 801fe32:	2b05      	cmp	r3, #5
 801fe34:	d826      	bhi.n	801fe84 <UART_SetConfig+0x52c>
 801fe36:	a201      	add	r2, pc, #4	@ (adr r2, 801fe3c <UART_SetConfig+0x4e4>)
 801fe38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fe3c:	0801fe55 	.word	0x0801fe55
 801fe40:	0801fe5d 	.word	0x0801fe5d
 801fe44:	0801fe65 	.word	0x0801fe65
 801fe48:	0801fe6d 	.word	0x0801fe6d
 801fe4c:	0801fe75 	.word	0x0801fe75
 801fe50:	0801fe7d 	.word	0x0801fe7d
 801fe54:	2300      	movs	r3, #0
 801fe56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fe5a:	e050      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fe5c:	2304      	movs	r3, #4
 801fe5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fe62:	e04c      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fe64:	2308      	movs	r3, #8
 801fe66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fe6a:	e048      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fe6c:	2310      	movs	r3, #16
 801fe6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fe72:	e044      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fe74:	2320      	movs	r3, #32
 801fe76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fe7a:	e040      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fe7c:	2340      	movs	r3, #64	@ 0x40
 801fe7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fe82:	e03c      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fe84:	2380      	movs	r3, #128	@ 0x80
 801fe86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fe8a:	e038      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fe8c:	697b      	ldr	r3, [r7, #20]
 801fe8e:	681b      	ldr	r3, [r3, #0]
 801fe90:	4a5b      	ldr	r2, [pc, #364]	@ (8020000 <UART_SetConfig+0x6a8>)
 801fe92:	4293      	cmp	r3, r2
 801fe94:	d130      	bne.n	801fef8 <UART_SetConfig+0x5a0>
 801fe96:	4b57      	ldr	r3, [pc, #348]	@ (801fff4 <UART_SetConfig+0x69c>)
 801fe98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801fe9a:	f003 0307 	and.w	r3, r3, #7
 801fe9e:	2b05      	cmp	r3, #5
 801fea0:	d826      	bhi.n	801fef0 <UART_SetConfig+0x598>
 801fea2:	a201      	add	r2, pc, #4	@ (adr r2, 801fea8 <UART_SetConfig+0x550>)
 801fea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fea8:	0801fec1 	.word	0x0801fec1
 801feac:	0801fec9 	.word	0x0801fec9
 801feb0:	0801fed1 	.word	0x0801fed1
 801feb4:	0801fed9 	.word	0x0801fed9
 801feb8:	0801fee1 	.word	0x0801fee1
 801febc:	0801fee9 	.word	0x0801fee9
 801fec0:	2302      	movs	r3, #2
 801fec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fec6:	e01a      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fec8:	2304      	movs	r3, #4
 801feca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fece:	e016      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fed0:	2308      	movs	r3, #8
 801fed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fed6:	e012      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fed8:	2310      	movs	r3, #16
 801feda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fede:	e00e      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fee0:	2320      	movs	r3, #32
 801fee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fee6:	e00a      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fee8:	2340      	movs	r3, #64	@ 0x40
 801feea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801feee:	e006      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fef0:	2380      	movs	r3, #128	@ 0x80
 801fef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fef6:	e002      	b.n	801fefe <UART_SetConfig+0x5a6>
 801fef8:	2380      	movs	r3, #128	@ 0x80
 801fefa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801fefe:	697b      	ldr	r3, [r7, #20]
 801ff00:	681b      	ldr	r3, [r3, #0]
 801ff02:	4a3f      	ldr	r2, [pc, #252]	@ (8020000 <UART_SetConfig+0x6a8>)
 801ff04:	4293      	cmp	r3, r2
 801ff06:	f040 80f8 	bne.w	80200fa <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801ff0a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801ff0e:	2b20      	cmp	r3, #32
 801ff10:	dc46      	bgt.n	801ffa0 <UART_SetConfig+0x648>
 801ff12:	2b02      	cmp	r3, #2
 801ff14:	f2c0 8082 	blt.w	802001c <UART_SetConfig+0x6c4>
 801ff18:	3b02      	subs	r3, #2
 801ff1a:	2b1e      	cmp	r3, #30
 801ff1c:	d87e      	bhi.n	802001c <UART_SetConfig+0x6c4>
 801ff1e:	a201      	add	r2, pc, #4	@ (adr r2, 801ff24 <UART_SetConfig+0x5cc>)
 801ff20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ff24:	0801ffa7 	.word	0x0801ffa7
 801ff28:	0802001d 	.word	0x0802001d
 801ff2c:	0801ffaf 	.word	0x0801ffaf
 801ff30:	0802001d 	.word	0x0802001d
 801ff34:	0802001d 	.word	0x0802001d
 801ff38:	0802001d 	.word	0x0802001d
 801ff3c:	0801ffbf 	.word	0x0801ffbf
 801ff40:	0802001d 	.word	0x0802001d
 801ff44:	0802001d 	.word	0x0802001d
 801ff48:	0802001d 	.word	0x0802001d
 801ff4c:	0802001d 	.word	0x0802001d
 801ff50:	0802001d 	.word	0x0802001d
 801ff54:	0802001d 	.word	0x0802001d
 801ff58:	0802001d 	.word	0x0802001d
 801ff5c:	0801ffcf 	.word	0x0801ffcf
 801ff60:	0802001d 	.word	0x0802001d
 801ff64:	0802001d 	.word	0x0802001d
 801ff68:	0802001d 	.word	0x0802001d
 801ff6c:	0802001d 	.word	0x0802001d
 801ff70:	0802001d 	.word	0x0802001d
 801ff74:	0802001d 	.word	0x0802001d
 801ff78:	0802001d 	.word	0x0802001d
 801ff7c:	0802001d 	.word	0x0802001d
 801ff80:	0802001d 	.word	0x0802001d
 801ff84:	0802001d 	.word	0x0802001d
 801ff88:	0802001d 	.word	0x0802001d
 801ff8c:	0802001d 	.word	0x0802001d
 801ff90:	0802001d 	.word	0x0802001d
 801ff94:	0802001d 	.word	0x0802001d
 801ff98:	0802001d 	.word	0x0802001d
 801ff9c:	0802000f 	.word	0x0802000f
 801ffa0:	2b40      	cmp	r3, #64	@ 0x40
 801ffa2:	d037      	beq.n	8020014 <UART_SetConfig+0x6bc>
 801ffa4:	e03a      	b.n	802001c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801ffa6:	f7fd f8d7 	bl	801d158 <HAL_RCCEx_GetD3PCLK1Freq>
 801ffaa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801ffac:	e03c      	b.n	8020028 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801ffae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801ffb2:	4618      	mov	r0, r3
 801ffb4:	f7fd f8e6 	bl	801d184 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801ffb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ffba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ffbc:	e034      	b.n	8020028 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801ffbe:	f107 0318 	add.w	r3, r7, #24
 801ffc2:	4618      	mov	r0, r3
 801ffc4:	f7fd fa32 	bl	801d42c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801ffc8:	69fb      	ldr	r3, [r7, #28]
 801ffca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ffcc:	e02c      	b.n	8020028 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801ffce:	4b09      	ldr	r3, [pc, #36]	@ (801fff4 <UART_SetConfig+0x69c>)
 801ffd0:	681b      	ldr	r3, [r3, #0]
 801ffd2:	f003 0320 	and.w	r3, r3, #32
 801ffd6:	2b00      	cmp	r3, #0
 801ffd8:	d016      	beq.n	8020008 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801ffda:	4b06      	ldr	r3, [pc, #24]	@ (801fff4 <UART_SetConfig+0x69c>)
 801ffdc:	681b      	ldr	r3, [r3, #0]
 801ffde:	08db      	lsrs	r3, r3, #3
 801ffe0:	f003 0303 	and.w	r3, r3, #3
 801ffe4:	4a07      	ldr	r2, [pc, #28]	@ (8020004 <UART_SetConfig+0x6ac>)
 801ffe6:	fa22 f303 	lsr.w	r3, r2, r3
 801ffea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801ffec:	e01c      	b.n	8020028 <UART_SetConfig+0x6d0>
 801ffee:	bf00      	nop
 801fff0:	40011400 	.word	0x40011400
 801fff4:	58024400 	.word	0x58024400
 801fff8:	40007800 	.word	0x40007800
 801fffc:	40007c00 	.word	0x40007c00
 8020000:	58000c00 	.word	0x58000c00
 8020004:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8020008:	4b9d      	ldr	r3, [pc, #628]	@ (8020280 <UART_SetConfig+0x928>)
 802000a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802000c:	e00c      	b.n	8020028 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 802000e:	4b9d      	ldr	r3, [pc, #628]	@ (8020284 <UART_SetConfig+0x92c>)
 8020010:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020012:	e009      	b.n	8020028 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8020014:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8020018:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802001a:	e005      	b.n	8020028 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 802001c:	2300      	movs	r3, #0
 802001e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8020020:	2301      	movs	r3, #1
 8020022:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8020026:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8020028:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802002a:	2b00      	cmp	r3, #0
 802002c:	f000 81de 	beq.w	80203ec <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8020030:	697b      	ldr	r3, [r7, #20]
 8020032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020034:	4a94      	ldr	r2, [pc, #592]	@ (8020288 <UART_SetConfig+0x930>)
 8020036:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802003a:	461a      	mov	r2, r3
 802003c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802003e:	fbb3 f3f2 	udiv	r3, r3, r2
 8020042:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8020044:	697b      	ldr	r3, [r7, #20]
 8020046:	685a      	ldr	r2, [r3, #4]
 8020048:	4613      	mov	r3, r2
 802004a:	005b      	lsls	r3, r3, #1
 802004c:	4413      	add	r3, r2
 802004e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8020050:	429a      	cmp	r2, r3
 8020052:	d305      	bcc.n	8020060 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8020054:	697b      	ldr	r3, [r7, #20]
 8020056:	685b      	ldr	r3, [r3, #4]
 8020058:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 802005a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802005c:	429a      	cmp	r2, r3
 802005e:	d903      	bls.n	8020068 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8020060:	2301      	movs	r3, #1
 8020062:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8020066:	e1c1      	b.n	80203ec <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8020068:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802006a:	2200      	movs	r2, #0
 802006c:	60bb      	str	r3, [r7, #8]
 802006e:	60fa      	str	r2, [r7, #12]
 8020070:	697b      	ldr	r3, [r7, #20]
 8020072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020074:	4a84      	ldr	r2, [pc, #528]	@ (8020288 <UART_SetConfig+0x930>)
 8020076:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802007a:	b29b      	uxth	r3, r3
 802007c:	2200      	movs	r2, #0
 802007e:	603b      	str	r3, [r7, #0]
 8020080:	607a      	str	r2, [r7, #4]
 8020082:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020086:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 802008a:	f7e0 fc5b 	bl	8000944 <__aeabi_uldivmod>
 802008e:	4602      	mov	r2, r0
 8020090:	460b      	mov	r3, r1
 8020092:	4610      	mov	r0, r2
 8020094:	4619      	mov	r1, r3
 8020096:	f04f 0200 	mov.w	r2, #0
 802009a:	f04f 0300 	mov.w	r3, #0
 802009e:	020b      	lsls	r3, r1, #8
 80200a0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80200a4:	0202      	lsls	r2, r0, #8
 80200a6:	6979      	ldr	r1, [r7, #20]
 80200a8:	6849      	ldr	r1, [r1, #4]
 80200aa:	0849      	lsrs	r1, r1, #1
 80200ac:	2000      	movs	r0, #0
 80200ae:	460c      	mov	r4, r1
 80200b0:	4605      	mov	r5, r0
 80200b2:	eb12 0804 	adds.w	r8, r2, r4
 80200b6:	eb43 0905 	adc.w	r9, r3, r5
 80200ba:	697b      	ldr	r3, [r7, #20]
 80200bc:	685b      	ldr	r3, [r3, #4]
 80200be:	2200      	movs	r2, #0
 80200c0:	469a      	mov	sl, r3
 80200c2:	4693      	mov	fp, r2
 80200c4:	4652      	mov	r2, sl
 80200c6:	465b      	mov	r3, fp
 80200c8:	4640      	mov	r0, r8
 80200ca:	4649      	mov	r1, r9
 80200cc:	f7e0 fc3a 	bl	8000944 <__aeabi_uldivmod>
 80200d0:	4602      	mov	r2, r0
 80200d2:	460b      	mov	r3, r1
 80200d4:	4613      	mov	r3, r2
 80200d6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80200d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80200da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80200de:	d308      	bcc.n	80200f2 <UART_SetConfig+0x79a>
 80200e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80200e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80200e6:	d204      	bcs.n	80200f2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80200e8:	697b      	ldr	r3, [r7, #20]
 80200ea:	681b      	ldr	r3, [r3, #0]
 80200ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80200ee:	60da      	str	r2, [r3, #12]
 80200f0:	e17c      	b.n	80203ec <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80200f2:	2301      	movs	r3, #1
 80200f4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80200f8:	e178      	b.n	80203ec <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80200fa:	697b      	ldr	r3, [r7, #20]
 80200fc:	69db      	ldr	r3, [r3, #28]
 80200fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8020102:	f040 80c5 	bne.w	8020290 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8020106:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 802010a:	2b20      	cmp	r3, #32
 802010c:	dc48      	bgt.n	80201a0 <UART_SetConfig+0x848>
 802010e:	2b00      	cmp	r3, #0
 8020110:	db7b      	blt.n	802020a <UART_SetConfig+0x8b2>
 8020112:	2b20      	cmp	r3, #32
 8020114:	d879      	bhi.n	802020a <UART_SetConfig+0x8b2>
 8020116:	a201      	add	r2, pc, #4	@ (adr r2, 802011c <UART_SetConfig+0x7c4>)
 8020118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802011c:	080201a7 	.word	0x080201a7
 8020120:	080201af 	.word	0x080201af
 8020124:	0802020b 	.word	0x0802020b
 8020128:	0802020b 	.word	0x0802020b
 802012c:	080201b7 	.word	0x080201b7
 8020130:	0802020b 	.word	0x0802020b
 8020134:	0802020b 	.word	0x0802020b
 8020138:	0802020b 	.word	0x0802020b
 802013c:	080201c7 	.word	0x080201c7
 8020140:	0802020b 	.word	0x0802020b
 8020144:	0802020b 	.word	0x0802020b
 8020148:	0802020b 	.word	0x0802020b
 802014c:	0802020b 	.word	0x0802020b
 8020150:	0802020b 	.word	0x0802020b
 8020154:	0802020b 	.word	0x0802020b
 8020158:	0802020b 	.word	0x0802020b
 802015c:	080201d7 	.word	0x080201d7
 8020160:	0802020b 	.word	0x0802020b
 8020164:	0802020b 	.word	0x0802020b
 8020168:	0802020b 	.word	0x0802020b
 802016c:	0802020b 	.word	0x0802020b
 8020170:	0802020b 	.word	0x0802020b
 8020174:	0802020b 	.word	0x0802020b
 8020178:	0802020b 	.word	0x0802020b
 802017c:	0802020b 	.word	0x0802020b
 8020180:	0802020b 	.word	0x0802020b
 8020184:	0802020b 	.word	0x0802020b
 8020188:	0802020b 	.word	0x0802020b
 802018c:	0802020b 	.word	0x0802020b
 8020190:	0802020b 	.word	0x0802020b
 8020194:	0802020b 	.word	0x0802020b
 8020198:	0802020b 	.word	0x0802020b
 802019c:	080201fd 	.word	0x080201fd
 80201a0:	2b40      	cmp	r3, #64	@ 0x40
 80201a2:	d02e      	beq.n	8020202 <UART_SetConfig+0x8aa>
 80201a4:	e031      	b.n	802020a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80201a6:	f7fb f821 	bl	801b1ec <HAL_RCC_GetPCLK1Freq>
 80201aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80201ac:	e033      	b.n	8020216 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80201ae:	f7fb f833 	bl	801b218 <HAL_RCC_GetPCLK2Freq>
 80201b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80201b4:	e02f      	b.n	8020216 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80201b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80201ba:	4618      	mov	r0, r3
 80201bc:	f7fc ffe2 	bl	801d184 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80201c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80201c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80201c4:	e027      	b.n	8020216 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80201c6:	f107 0318 	add.w	r3, r7, #24
 80201ca:	4618      	mov	r0, r3
 80201cc:	f7fd f92e 	bl	801d42c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80201d0:	69fb      	ldr	r3, [r7, #28]
 80201d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80201d4:	e01f      	b.n	8020216 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80201d6:	4b2d      	ldr	r3, [pc, #180]	@ (802028c <UART_SetConfig+0x934>)
 80201d8:	681b      	ldr	r3, [r3, #0]
 80201da:	f003 0320 	and.w	r3, r3, #32
 80201de:	2b00      	cmp	r3, #0
 80201e0:	d009      	beq.n	80201f6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80201e2:	4b2a      	ldr	r3, [pc, #168]	@ (802028c <UART_SetConfig+0x934>)
 80201e4:	681b      	ldr	r3, [r3, #0]
 80201e6:	08db      	lsrs	r3, r3, #3
 80201e8:	f003 0303 	and.w	r3, r3, #3
 80201ec:	4a24      	ldr	r2, [pc, #144]	@ (8020280 <UART_SetConfig+0x928>)
 80201ee:	fa22 f303 	lsr.w	r3, r2, r3
 80201f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80201f4:	e00f      	b.n	8020216 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80201f6:	4b22      	ldr	r3, [pc, #136]	@ (8020280 <UART_SetConfig+0x928>)
 80201f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80201fa:	e00c      	b.n	8020216 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80201fc:	4b21      	ldr	r3, [pc, #132]	@ (8020284 <UART_SetConfig+0x92c>)
 80201fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020200:	e009      	b.n	8020216 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8020202:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8020206:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020208:	e005      	b.n	8020216 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 802020a:	2300      	movs	r3, #0
 802020c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 802020e:	2301      	movs	r3, #1
 8020210:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8020214:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8020216:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8020218:	2b00      	cmp	r3, #0
 802021a:	f000 80e7 	beq.w	80203ec <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 802021e:	697b      	ldr	r3, [r7, #20]
 8020220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020222:	4a19      	ldr	r2, [pc, #100]	@ (8020288 <UART_SetConfig+0x930>)
 8020224:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8020228:	461a      	mov	r2, r3
 802022a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802022c:	fbb3 f3f2 	udiv	r3, r3, r2
 8020230:	005a      	lsls	r2, r3, #1
 8020232:	697b      	ldr	r3, [r7, #20]
 8020234:	685b      	ldr	r3, [r3, #4]
 8020236:	085b      	lsrs	r3, r3, #1
 8020238:	441a      	add	r2, r3
 802023a:	697b      	ldr	r3, [r7, #20]
 802023c:	685b      	ldr	r3, [r3, #4]
 802023e:	fbb2 f3f3 	udiv	r3, r2, r3
 8020242:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8020244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020246:	2b0f      	cmp	r3, #15
 8020248:	d916      	bls.n	8020278 <UART_SetConfig+0x920>
 802024a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802024c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8020250:	d212      	bcs.n	8020278 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8020252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020254:	b29b      	uxth	r3, r3
 8020256:	f023 030f 	bic.w	r3, r3, #15
 802025a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 802025c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802025e:	085b      	lsrs	r3, r3, #1
 8020260:	b29b      	uxth	r3, r3
 8020262:	f003 0307 	and.w	r3, r3, #7
 8020266:	b29a      	uxth	r2, r3
 8020268:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 802026a:	4313      	orrs	r3, r2
 802026c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 802026e:	697b      	ldr	r3, [r7, #20]
 8020270:	681b      	ldr	r3, [r3, #0]
 8020272:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8020274:	60da      	str	r2, [r3, #12]
 8020276:	e0b9      	b.n	80203ec <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8020278:	2301      	movs	r3, #1
 802027a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 802027e:	e0b5      	b.n	80203ec <UART_SetConfig+0xa94>
 8020280:	03d09000 	.word	0x03d09000
 8020284:	003d0900 	.word	0x003d0900
 8020288:	080269d8 	.word	0x080269d8
 802028c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8020290:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8020294:	2b20      	cmp	r3, #32
 8020296:	dc49      	bgt.n	802032c <UART_SetConfig+0x9d4>
 8020298:	2b00      	cmp	r3, #0
 802029a:	db7c      	blt.n	8020396 <UART_SetConfig+0xa3e>
 802029c:	2b20      	cmp	r3, #32
 802029e:	d87a      	bhi.n	8020396 <UART_SetConfig+0xa3e>
 80202a0:	a201      	add	r2, pc, #4	@ (adr r2, 80202a8 <UART_SetConfig+0x950>)
 80202a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80202a6:	bf00      	nop
 80202a8:	08020333 	.word	0x08020333
 80202ac:	0802033b 	.word	0x0802033b
 80202b0:	08020397 	.word	0x08020397
 80202b4:	08020397 	.word	0x08020397
 80202b8:	08020343 	.word	0x08020343
 80202bc:	08020397 	.word	0x08020397
 80202c0:	08020397 	.word	0x08020397
 80202c4:	08020397 	.word	0x08020397
 80202c8:	08020353 	.word	0x08020353
 80202cc:	08020397 	.word	0x08020397
 80202d0:	08020397 	.word	0x08020397
 80202d4:	08020397 	.word	0x08020397
 80202d8:	08020397 	.word	0x08020397
 80202dc:	08020397 	.word	0x08020397
 80202e0:	08020397 	.word	0x08020397
 80202e4:	08020397 	.word	0x08020397
 80202e8:	08020363 	.word	0x08020363
 80202ec:	08020397 	.word	0x08020397
 80202f0:	08020397 	.word	0x08020397
 80202f4:	08020397 	.word	0x08020397
 80202f8:	08020397 	.word	0x08020397
 80202fc:	08020397 	.word	0x08020397
 8020300:	08020397 	.word	0x08020397
 8020304:	08020397 	.word	0x08020397
 8020308:	08020397 	.word	0x08020397
 802030c:	08020397 	.word	0x08020397
 8020310:	08020397 	.word	0x08020397
 8020314:	08020397 	.word	0x08020397
 8020318:	08020397 	.word	0x08020397
 802031c:	08020397 	.word	0x08020397
 8020320:	08020397 	.word	0x08020397
 8020324:	08020397 	.word	0x08020397
 8020328:	08020389 	.word	0x08020389
 802032c:	2b40      	cmp	r3, #64	@ 0x40
 802032e:	d02e      	beq.n	802038e <UART_SetConfig+0xa36>
 8020330:	e031      	b.n	8020396 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8020332:	f7fa ff5b 	bl	801b1ec <HAL_RCC_GetPCLK1Freq>
 8020336:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8020338:	e033      	b.n	80203a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 802033a:	f7fa ff6d 	bl	801b218 <HAL_RCC_GetPCLK2Freq>
 802033e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8020340:	e02f      	b.n	80203a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8020342:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8020346:	4618      	mov	r0, r3
 8020348:	f7fc ff1c 	bl	801d184 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 802034c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802034e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020350:	e027      	b.n	80203a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8020352:	f107 0318 	add.w	r3, r7, #24
 8020356:	4618      	mov	r0, r3
 8020358:	f7fd f868 	bl	801d42c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 802035c:	69fb      	ldr	r3, [r7, #28]
 802035e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020360:	e01f      	b.n	80203a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8020362:	4b2d      	ldr	r3, [pc, #180]	@ (8020418 <UART_SetConfig+0xac0>)
 8020364:	681b      	ldr	r3, [r3, #0]
 8020366:	f003 0320 	and.w	r3, r3, #32
 802036a:	2b00      	cmp	r3, #0
 802036c:	d009      	beq.n	8020382 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 802036e:	4b2a      	ldr	r3, [pc, #168]	@ (8020418 <UART_SetConfig+0xac0>)
 8020370:	681b      	ldr	r3, [r3, #0]
 8020372:	08db      	lsrs	r3, r3, #3
 8020374:	f003 0303 	and.w	r3, r3, #3
 8020378:	4a28      	ldr	r2, [pc, #160]	@ (802041c <UART_SetConfig+0xac4>)
 802037a:	fa22 f303 	lsr.w	r3, r2, r3
 802037e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8020380:	e00f      	b.n	80203a2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8020382:	4b26      	ldr	r3, [pc, #152]	@ (802041c <UART_SetConfig+0xac4>)
 8020384:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020386:	e00c      	b.n	80203a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8020388:	4b25      	ldr	r3, [pc, #148]	@ (8020420 <UART_SetConfig+0xac8>)
 802038a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802038c:	e009      	b.n	80203a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 802038e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8020392:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020394:	e005      	b.n	80203a2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8020396:	2300      	movs	r3, #0
 8020398:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 802039a:	2301      	movs	r3, #1
 802039c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80203a0:	bf00      	nop
    }

    if (pclk != 0U)
 80203a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80203a4:	2b00      	cmp	r3, #0
 80203a6:	d021      	beq.n	80203ec <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80203a8:	697b      	ldr	r3, [r7, #20]
 80203aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80203ac:	4a1d      	ldr	r2, [pc, #116]	@ (8020424 <UART_SetConfig+0xacc>)
 80203ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80203b2:	461a      	mov	r2, r3
 80203b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80203b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80203ba:	697b      	ldr	r3, [r7, #20]
 80203bc:	685b      	ldr	r3, [r3, #4]
 80203be:	085b      	lsrs	r3, r3, #1
 80203c0:	441a      	add	r2, r3
 80203c2:	697b      	ldr	r3, [r7, #20]
 80203c4:	685b      	ldr	r3, [r3, #4]
 80203c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80203ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80203cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80203ce:	2b0f      	cmp	r3, #15
 80203d0:	d909      	bls.n	80203e6 <UART_SetConfig+0xa8e>
 80203d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80203d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80203d8:	d205      	bcs.n	80203e6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80203da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80203dc:	b29a      	uxth	r2, r3
 80203de:	697b      	ldr	r3, [r7, #20]
 80203e0:	681b      	ldr	r3, [r3, #0]
 80203e2:	60da      	str	r2, [r3, #12]
 80203e4:	e002      	b.n	80203ec <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80203e6:	2301      	movs	r3, #1
 80203e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80203ec:	697b      	ldr	r3, [r7, #20]
 80203ee:	2201      	movs	r2, #1
 80203f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80203f4:	697b      	ldr	r3, [r7, #20]
 80203f6:	2201      	movs	r2, #1
 80203f8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80203fc:	697b      	ldr	r3, [r7, #20]
 80203fe:	2200      	movs	r2, #0
 8020400:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8020402:	697b      	ldr	r3, [r7, #20]
 8020404:	2200      	movs	r2, #0
 8020406:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8020408:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 802040c:	4618      	mov	r0, r3
 802040e:	3748      	adds	r7, #72	@ 0x48
 8020410:	46bd      	mov	sp, r7
 8020412:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8020416:	bf00      	nop
 8020418:	58024400 	.word	0x58024400
 802041c:	03d09000 	.word	0x03d09000
 8020420:	003d0900 	.word	0x003d0900
 8020424:	080269d8 	.word	0x080269d8

08020428 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8020428:	b480      	push	{r7}
 802042a:	b083      	sub	sp, #12
 802042c:	af00      	add	r7, sp, #0
 802042e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8020430:	687b      	ldr	r3, [r7, #4]
 8020432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020434:	f003 0308 	and.w	r3, r3, #8
 8020438:	2b00      	cmp	r3, #0
 802043a:	d00a      	beq.n	8020452 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 802043c:	687b      	ldr	r3, [r7, #4]
 802043e:	681b      	ldr	r3, [r3, #0]
 8020440:	685b      	ldr	r3, [r3, #4]
 8020442:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8020446:	687b      	ldr	r3, [r7, #4]
 8020448:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 802044a:	687b      	ldr	r3, [r7, #4]
 802044c:	681b      	ldr	r3, [r3, #0]
 802044e:	430a      	orrs	r2, r1
 8020450:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8020452:	687b      	ldr	r3, [r7, #4]
 8020454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020456:	f003 0301 	and.w	r3, r3, #1
 802045a:	2b00      	cmp	r3, #0
 802045c:	d00a      	beq.n	8020474 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 802045e:	687b      	ldr	r3, [r7, #4]
 8020460:	681b      	ldr	r3, [r3, #0]
 8020462:	685b      	ldr	r3, [r3, #4]
 8020464:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8020468:	687b      	ldr	r3, [r7, #4]
 802046a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 802046c:	687b      	ldr	r3, [r7, #4]
 802046e:	681b      	ldr	r3, [r3, #0]
 8020470:	430a      	orrs	r2, r1
 8020472:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8020474:	687b      	ldr	r3, [r7, #4]
 8020476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020478:	f003 0302 	and.w	r3, r3, #2
 802047c:	2b00      	cmp	r3, #0
 802047e:	d00a      	beq.n	8020496 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8020480:	687b      	ldr	r3, [r7, #4]
 8020482:	681b      	ldr	r3, [r3, #0]
 8020484:	685b      	ldr	r3, [r3, #4]
 8020486:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 802048a:	687b      	ldr	r3, [r7, #4]
 802048c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 802048e:	687b      	ldr	r3, [r7, #4]
 8020490:	681b      	ldr	r3, [r3, #0]
 8020492:	430a      	orrs	r2, r1
 8020494:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8020496:	687b      	ldr	r3, [r7, #4]
 8020498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802049a:	f003 0304 	and.w	r3, r3, #4
 802049e:	2b00      	cmp	r3, #0
 80204a0:	d00a      	beq.n	80204b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80204a2:	687b      	ldr	r3, [r7, #4]
 80204a4:	681b      	ldr	r3, [r3, #0]
 80204a6:	685b      	ldr	r3, [r3, #4]
 80204a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80204ac:	687b      	ldr	r3, [r7, #4]
 80204ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80204b0:	687b      	ldr	r3, [r7, #4]
 80204b2:	681b      	ldr	r3, [r3, #0]
 80204b4:	430a      	orrs	r2, r1
 80204b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80204b8:	687b      	ldr	r3, [r7, #4]
 80204ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80204bc:	f003 0310 	and.w	r3, r3, #16
 80204c0:	2b00      	cmp	r3, #0
 80204c2:	d00a      	beq.n	80204da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80204c4:	687b      	ldr	r3, [r7, #4]
 80204c6:	681b      	ldr	r3, [r3, #0]
 80204c8:	689b      	ldr	r3, [r3, #8]
 80204ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80204ce:	687b      	ldr	r3, [r7, #4]
 80204d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80204d2:	687b      	ldr	r3, [r7, #4]
 80204d4:	681b      	ldr	r3, [r3, #0]
 80204d6:	430a      	orrs	r2, r1
 80204d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80204da:	687b      	ldr	r3, [r7, #4]
 80204dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80204de:	f003 0320 	and.w	r3, r3, #32
 80204e2:	2b00      	cmp	r3, #0
 80204e4:	d00a      	beq.n	80204fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80204e6:	687b      	ldr	r3, [r7, #4]
 80204e8:	681b      	ldr	r3, [r3, #0]
 80204ea:	689b      	ldr	r3, [r3, #8]
 80204ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80204f0:	687b      	ldr	r3, [r7, #4]
 80204f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80204f4:	687b      	ldr	r3, [r7, #4]
 80204f6:	681b      	ldr	r3, [r3, #0]
 80204f8:	430a      	orrs	r2, r1
 80204fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80204fc:	687b      	ldr	r3, [r7, #4]
 80204fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8020504:	2b00      	cmp	r3, #0
 8020506:	d01a      	beq.n	802053e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8020508:	687b      	ldr	r3, [r7, #4]
 802050a:	681b      	ldr	r3, [r3, #0]
 802050c:	685b      	ldr	r3, [r3, #4]
 802050e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8020512:	687b      	ldr	r3, [r7, #4]
 8020514:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8020516:	687b      	ldr	r3, [r7, #4]
 8020518:	681b      	ldr	r3, [r3, #0]
 802051a:	430a      	orrs	r2, r1
 802051c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 802051e:	687b      	ldr	r3, [r7, #4]
 8020520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8020522:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8020526:	d10a      	bne.n	802053e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8020528:	687b      	ldr	r3, [r7, #4]
 802052a:	681b      	ldr	r3, [r3, #0]
 802052c:	685b      	ldr	r3, [r3, #4]
 802052e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8020532:	687b      	ldr	r3, [r7, #4]
 8020534:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8020536:	687b      	ldr	r3, [r7, #4]
 8020538:	681b      	ldr	r3, [r3, #0]
 802053a:	430a      	orrs	r2, r1
 802053c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 802053e:	687b      	ldr	r3, [r7, #4]
 8020540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8020546:	2b00      	cmp	r3, #0
 8020548:	d00a      	beq.n	8020560 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 802054a:	687b      	ldr	r3, [r7, #4]
 802054c:	681b      	ldr	r3, [r3, #0]
 802054e:	685b      	ldr	r3, [r3, #4]
 8020550:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8020554:	687b      	ldr	r3, [r7, #4]
 8020556:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8020558:	687b      	ldr	r3, [r7, #4]
 802055a:	681b      	ldr	r3, [r3, #0]
 802055c:	430a      	orrs	r2, r1
 802055e:	605a      	str	r2, [r3, #4]
  }
}
 8020560:	bf00      	nop
 8020562:	370c      	adds	r7, #12
 8020564:	46bd      	mov	sp, r7
 8020566:	f85d 7b04 	ldr.w	r7, [sp], #4
 802056a:	4770      	bx	lr

0802056c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 802056c:	b580      	push	{r7, lr}
 802056e:	b098      	sub	sp, #96	@ 0x60
 8020570:	af02      	add	r7, sp, #8
 8020572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8020574:	687b      	ldr	r3, [r7, #4]
 8020576:	2200      	movs	r2, #0
 8020578:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 802057c:	f7f6 ff42 	bl	8017404 <HAL_GetTick>
 8020580:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8020582:	687b      	ldr	r3, [r7, #4]
 8020584:	681b      	ldr	r3, [r3, #0]
 8020586:	681b      	ldr	r3, [r3, #0]
 8020588:	f003 0308 	and.w	r3, r3, #8
 802058c:	2b08      	cmp	r3, #8
 802058e:	d12f      	bne.n	80205f0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8020590:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8020594:	9300      	str	r3, [sp, #0]
 8020596:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8020598:	2200      	movs	r2, #0
 802059a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 802059e:	6878      	ldr	r0, [r7, #4]
 80205a0:	f000 f88e 	bl	80206c0 <UART_WaitOnFlagUntilTimeout>
 80205a4:	4603      	mov	r3, r0
 80205a6:	2b00      	cmp	r3, #0
 80205a8:	d022      	beq.n	80205f0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80205aa:	687b      	ldr	r3, [r7, #4]
 80205ac:	681b      	ldr	r3, [r3, #0]
 80205ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80205b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80205b2:	e853 3f00 	ldrex	r3, [r3]
 80205b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80205b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80205ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80205be:	653b      	str	r3, [r7, #80]	@ 0x50
 80205c0:	687b      	ldr	r3, [r7, #4]
 80205c2:	681b      	ldr	r3, [r3, #0]
 80205c4:	461a      	mov	r2, r3
 80205c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80205c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80205ca:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80205cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80205ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80205d0:	e841 2300 	strex	r3, r2, [r1]
 80205d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80205d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80205d8:	2b00      	cmp	r3, #0
 80205da:	d1e6      	bne.n	80205aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80205dc:	687b      	ldr	r3, [r7, #4]
 80205de:	2220      	movs	r2, #32
 80205e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80205e4:	687b      	ldr	r3, [r7, #4]
 80205e6:	2200      	movs	r2, #0
 80205e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80205ec:	2303      	movs	r3, #3
 80205ee:	e063      	b.n	80206b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80205f0:	687b      	ldr	r3, [r7, #4]
 80205f2:	681b      	ldr	r3, [r3, #0]
 80205f4:	681b      	ldr	r3, [r3, #0]
 80205f6:	f003 0304 	and.w	r3, r3, #4
 80205fa:	2b04      	cmp	r3, #4
 80205fc:	d149      	bne.n	8020692 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80205fe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8020602:	9300      	str	r3, [sp, #0]
 8020604:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8020606:	2200      	movs	r2, #0
 8020608:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 802060c:	6878      	ldr	r0, [r7, #4]
 802060e:	f000 f857 	bl	80206c0 <UART_WaitOnFlagUntilTimeout>
 8020612:	4603      	mov	r3, r0
 8020614:	2b00      	cmp	r3, #0
 8020616:	d03c      	beq.n	8020692 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8020618:	687b      	ldr	r3, [r7, #4]
 802061a:	681b      	ldr	r3, [r3, #0]
 802061c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802061e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020620:	e853 3f00 	ldrex	r3, [r3]
 8020624:	623b      	str	r3, [r7, #32]
   return(result);
 8020626:	6a3b      	ldr	r3, [r7, #32]
 8020628:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 802062c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 802062e:	687b      	ldr	r3, [r7, #4]
 8020630:	681b      	ldr	r3, [r3, #0]
 8020632:	461a      	mov	r2, r3
 8020634:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020636:	633b      	str	r3, [r7, #48]	@ 0x30
 8020638:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802063a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 802063c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802063e:	e841 2300 	strex	r3, r2, [r1]
 8020642:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8020644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020646:	2b00      	cmp	r3, #0
 8020648:	d1e6      	bne.n	8020618 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802064a:	687b      	ldr	r3, [r7, #4]
 802064c:	681b      	ldr	r3, [r3, #0]
 802064e:	3308      	adds	r3, #8
 8020650:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020652:	693b      	ldr	r3, [r7, #16]
 8020654:	e853 3f00 	ldrex	r3, [r3]
 8020658:	60fb      	str	r3, [r7, #12]
   return(result);
 802065a:	68fb      	ldr	r3, [r7, #12]
 802065c:	f023 0301 	bic.w	r3, r3, #1
 8020660:	64bb      	str	r3, [r7, #72]	@ 0x48
 8020662:	687b      	ldr	r3, [r7, #4]
 8020664:	681b      	ldr	r3, [r3, #0]
 8020666:	3308      	adds	r3, #8
 8020668:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802066a:	61fa      	str	r2, [r7, #28]
 802066c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802066e:	69b9      	ldr	r1, [r7, #24]
 8020670:	69fa      	ldr	r2, [r7, #28]
 8020672:	e841 2300 	strex	r3, r2, [r1]
 8020676:	617b      	str	r3, [r7, #20]
   return(result);
 8020678:	697b      	ldr	r3, [r7, #20]
 802067a:	2b00      	cmp	r3, #0
 802067c:	d1e5      	bne.n	802064a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 802067e:	687b      	ldr	r3, [r7, #4]
 8020680:	2220      	movs	r2, #32
 8020682:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8020686:	687b      	ldr	r3, [r7, #4]
 8020688:	2200      	movs	r2, #0
 802068a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 802068e:	2303      	movs	r3, #3
 8020690:	e012      	b.n	80206b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8020692:	687b      	ldr	r3, [r7, #4]
 8020694:	2220      	movs	r2, #32
 8020696:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 802069a:	687b      	ldr	r3, [r7, #4]
 802069c:	2220      	movs	r2, #32
 802069e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80206a2:	687b      	ldr	r3, [r7, #4]
 80206a4:	2200      	movs	r2, #0
 80206a6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80206a8:	687b      	ldr	r3, [r7, #4]
 80206aa:	2200      	movs	r2, #0
 80206ac:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80206ae:	687b      	ldr	r3, [r7, #4]
 80206b0:	2200      	movs	r2, #0
 80206b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80206b6:	2300      	movs	r3, #0
}
 80206b8:	4618      	mov	r0, r3
 80206ba:	3758      	adds	r7, #88	@ 0x58
 80206bc:	46bd      	mov	sp, r7
 80206be:	bd80      	pop	{r7, pc}

080206c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80206c0:	b580      	push	{r7, lr}
 80206c2:	b084      	sub	sp, #16
 80206c4:	af00      	add	r7, sp, #0
 80206c6:	60f8      	str	r0, [r7, #12]
 80206c8:	60b9      	str	r1, [r7, #8]
 80206ca:	603b      	str	r3, [r7, #0]
 80206cc:	4613      	mov	r3, r2
 80206ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80206d0:	e04f      	b.n	8020772 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80206d2:	69bb      	ldr	r3, [r7, #24]
 80206d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80206d8:	d04b      	beq.n	8020772 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80206da:	f7f6 fe93 	bl	8017404 <HAL_GetTick>
 80206de:	4602      	mov	r2, r0
 80206e0:	683b      	ldr	r3, [r7, #0]
 80206e2:	1ad3      	subs	r3, r2, r3
 80206e4:	69ba      	ldr	r2, [r7, #24]
 80206e6:	429a      	cmp	r2, r3
 80206e8:	d302      	bcc.n	80206f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80206ea:	69bb      	ldr	r3, [r7, #24]
 80206ec:	2b00      	cmp	r3, #0
 80206ee:	d101      	bne.n	80206f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80206f0:	2303      	movs	r3, #3
 80206f2:	e04e      	b.n	8020792 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80206f4:	68fb      	ldr	r3, [r7, #12]
 80206f6:	681b      	ldr	r3, [r3, #0]
 80206f8:	681b      	ldr	r3, [r3, #0]
 80206fa:	f003 0304 	and.w	r3, r3, #4
 80206fe:	2b00      	cmp	r3, #0
 8020700:	d037      	beq.n	8020772 <UART_WaitOnFlagUntilTimeout+0xb2>
 8020702:	68bb      	ldr	r3, [r7, #8]
 8020704:	2b80      	cmp	r3, #128	@ 0x80
 8020706:	d034      	beq.n	8020772 <UART_WaitOnFlagUntilTimeout+0xb2>
 8020708:	68bb      	ldr	r3, [r7, #8]
 802070a:	2b40      	cmp	r3, #64	@ 0x40
 802070c:	d031      	beq.n	8020772 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 802070e:	68fb      	ldr	r3, [r7, #12]
 8020710:	681b      	ldr	r3, [r3, #0]
 8020712:	69db      	ldr	r3, [r3, #28]
 8020714:	f003 0308 	and.w	r3, r3, #8
 8020718:	2b08      	cmp	r3, #8
 802071a:	d110      	bne.n	802073e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 802071c:	68fb      	ldr	r3, [r7, #12]
 802071e:	681b      	ldr	r3, [r3, #0]
 8020720:	2208      	movs	r2, #8
 8020722:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8020724:	68f8      	ldr	r0, [r7, #12]
 8020726:	f000 f839 	bl	802079c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 802072a:	68fb      	ldr	r3, [r7, #12]
 802072c:	2208      	movs	r2, #8
 802072e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8020732:	68fb      	ldr	r3, [r7, #12]
 8020734:	2200      	movs	r2, #0
 8020736:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 802073a:	2301      	movs	r3, #1
 802073c:	e029      	b.n	8020792 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 802073e:	68fb      	ldr	r3, [r7, #12]
 8020740:	681b      	ldr	r3, [r3, #0]
 8020742:	69db      	ldr	r3, [r3, #28]
 8020744:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8020748:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 802074c:	d111      	bne.n	8020772 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 802074e:	68fb      	ldr	r3, [r7, #12]
 8020750:	681b      	ldr	r3, [r3, #0]
 8020752:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8020756:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8020758:	68f8      	ldr	r0, [r7, #12]
 802075a:	f000 f81f 	bl	802079c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 802075e:	68fb      	ldr	r3, [r7, #12]
 8020760:	2220      	movs	r2, #32
 8020762:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8020766:	68fb      	ldr	r3, [r7, #12]
 8020768:	2200      	movs	r2, #0
 802076a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 802076e:	2303      	movs	r3, #3
 8020770:	e00f      	b.n	8020792 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8020772:	68fb      	ldr	r3, [r7, #12]
 8020774:	681b      	ldr	r3, [r3, #0]
 8020776:	69da      	ldr	r2, [r3, #28]
 8020778:	68bb      	ldr	r3, [r7, #8]
 802077a:	4013      	ands	r3, r2
 802077c:	68ba      	ldr	r2, [r7, #8]
 802077e:	429a      	cmp	r2, r3
 8020780:	bf0c      	ite	eq
 8020782:	2301      	moveq	r3, #1
 8020784:	2300      	movne	r3, #0
 8020786:	b2db      	uxtb	r3, r3
 8020788:	461a      	mov	r2, r3
 802078a:	79fb      	ldrb	r3, [r7, #7]
 802078c:	429a      	cmp	r2, r3
 802078e:	d0a0      	beq.n	80206d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8020790:	2300      	movs	r3, #0
}
 8020792:	4618      	mov	r0, r3
 8020794:	3710      	adds	r7, #16
 8020796:	46bd      	mov	sp, r7
 8020798:	bd80      	pop	{r7, pc}
	...

0802079c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 802079c:	b480      	push	{r7}
 802079e:	b095      	sub	sp, #84	@ 0x54
 80207a0:	af00      	add	r7, sp, #0
 80207a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80207a4:	687b      	ldr	r3, [r7, #4]
 80207a6:	681b      	ldr	r3, [r3, #0]
 80207a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80207aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80207ac:	e853 3f00 	ldrex	r3, [r3]
 80207b0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80207b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80207b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80207b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80207ba:	687b      	ldr	r3, [r7, #4]
 80207bc:	681b      	ldr	r3, [r3, #0]
 80207be:	461a      	mov	r2, r3
 80207c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80207c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80207c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80207c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80207c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80207ca:	e841 2300 	strex	r3, r2, [r1]
 80207ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80207d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80207d2:	2b00      	cmp	r3, #0
 80207d4:	d1e6      	bne.n	80207a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80207d6:	687b      	ldr	r3, [r7, #4]
 80207d8:	681b      	ldr	r3, [r3, #0]
 80207da:	3308      	adds	r3, #8
 80207dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80207de:	6a3b      	ldr	r3, [r7, #32]
 80207e0:	e853 3f00 	ldrex	r3, [r3]
 80207e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80207e6:	69fa      	ldr	r2, [r7, #28]
 80207e8:	4b1e      	ldr	r3, [pc, #120]	@ (8020864 <UART_EndRxTransfer+0xc8>)
 80207ea:	4013      	ands	r3, r2
 80207ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80207ee:	687b      	ldr	r3, [r7, #4]
 80207f0:	681b      	ldr	r3, [r3, #0]
 80207f2:	3308      	adds	r3, #8
 80207f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80207f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80207f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80207fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80207fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80207fe:	e841 2300 	strex	r3, r2, [r1]
 8020802:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8020804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020806:	2b00      	cmp	r3, #0
 8020808:	d1e5      	bne.n	80207d6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802080a:	687b      	ldr	r3, [r7, #4]
 802080c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 802080e:	2b01      	cmp	r3, #1
 8020810:	d118      	bne.n	8020844 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8020812:	687b      	ldr	r3, [r7, #4]
 8020814:	681b      	ldr	r3, [r3, #0]
 8020816:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020818:	68fb      	ldr	r3, [r7, #12]
 802081a:	e853 3f00 	ldrex	r3, [r3]
 802081e:	60bb      	str	r3, [r7, #8]
   return(result);
 8020820:	68bb      	ldr	r3, [r7, #8]
 8020822:	f023 0310 	bic.w	r3, r3, #16
 8020826:	647b      	str	r3, [r7, #68]	@ 0x44
 8020828:	687b      	ldr	r3, [r7, #4]
 802082a:	681b      	ldr	r3, [r3, #0]
 802082c:	461a      	mov	r2, r3
 802082e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8020830:	61bb      	str	r3, [r7, #24]
 8020832:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020834:	6979      	ldr	r1, [r7, #20]
 8020836:	69ba      	ldr	r2, [r7, #24]
 8020838:	e841 2300 	strex	r3, r2, [r1]
 802083c:	613b      	str	r3, [r7, #16]
   return(result);
 802083e:	693b      	ldr	r3, [r7, #16]
 8020840:	2b00      	cmp	r3, #0
 8020842:	d1e6      	bne.n	8020812 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8020844:	687b      	ldr	r3, [r7, #4]
 8020846:	2220      	movs	r2, #32
 8020848:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802084c:	687b      	ldr	r3, [r7, #4]
 802084e:	2200      	movs	r2, #0
 8020850:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8020852:	687b      	ldr	r3, [r7, #4]
 8020854:	2200      	movs	r2, #0
 8020856:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8020858:	bf00      	nop
 802085a:	3754      	adds	r7, #84	@ 0x54
 802085c:	46bd      	mov	sp, r7
 802085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020862:	4770      	bx	lr
 8020864:	effffffe 	.word	0xeffffffe

08020868 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8020868:	b480      	push	{r7}
 802086a:	b085      	sub	sp, #20
 802086c:	af00      	add	r7, sp, #0
 802086e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8020870:	687b      	ldr	r3, [r7, #4]
 8020872:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8020876:	2b01      	cmp	r3, #1
 8020878:	d101      	bne.n	802087e <HAL_UARTEx_DisableFifoMode+0x16>
 802087a:	2302      	movs	r3, #2
 802087c:	e027      	b.n	80208ce <HAL_UARTEx_DisableFifoMode+0x66>
 802087e:	687b      	ldr	r3, [r7, #4]
 8020880:	2201      	movs	r2, #1
 8020882:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8020886:	687b      	ldr	r3, [r7, #4]
 8020888:	2224      	movs	r2, #36	@ 0x24
 802088a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 802088e:	687b      	ldr	r3, [r7, #4]
 8020890:	681b      	ldr	r3, [r3, #0]
 8020892:	681b      	ldr	r3, [r3, #0]
 8020894:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8020896:	687b      	ldr	r3, [r7, #4]
 8020898:	681b      	ldr	r3, [r3, #0]
 802089a:	681a      	ldr	r2, [r3, #0]
 802089c:	687b      	ldr	r3, [r7, #4]
 802089e:	681b      	ldr	r3, [r3, #0]
 80208a0:	f022 0201 	bic.w	r2, r2, #1
 80208a4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80208a6:	68fb      	ldr	r3, [r7, #12]
 80208a8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80208ac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80208ae:	687b      	ldr	r3, [r7, #4]
 80208b0:	2200      	movs	r2, #0
 80208b2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80208b4:	687b      	ldr	r3, [r7, #4]
 80208b6:	681b      	ldr	r3, [r3, #0]
 80208b8:	68fa      	ldr	r2, [r7, #12]
 80208ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80208bc:	687b      	ldr	r3, [r7, #4]
 80208be:	2220      	movs	r2, #32
 80208c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80208c4:	687b      	ldr	r3, [r7, #4]
 80208c6:	2200      	movs	r2, #0
 80208c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80208cc:	2300      	movs	r3, #0
}
 80208ce:	4618      	mov	r0, r3
 80208d0:	3714      	adds	r7, #20
 80208d2:	46bd      	mov	sp, r7
 80208d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208d8:	4770      	bx	lr

080208da <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80208da:	b580      	push	{r7, lr}
 80208dc:	b084      	sub	sp, #16
 80208de:	af00      	add	r7, sp, #0
 80208e0:	6078      	str	r0, [r7, #4]
 80208e2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80208e4:	687b      	ldr	r3, [r7, #4]
 80208e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80208ea:	2b01      	cmp	r3, #1
 80208ec:	d101      	bne.n	80208f2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80208ee:	2302      	movs	r3, #2
 80208f0:	e02d      	b.n	802094e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80208f2:	687b      	ldr	r3, [r7, #4]
 80208f4:	2201      	movs	r2, #1
 80208f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80208fa:	687b      	ldr	r3, [r7, #4]
 80208fc:	2224      	movs	r2, #36	@ 0x24
 80208fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8020902:	687b      	ldr	r3, [r7, #4]
 8020904:	681b      	ldr	r3, [r3, #0]
 8020906:	681b      	ldr	r3, [r3, #0]
 8020908:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 802090a:	687b      	ldr	r3, [r7, #4]
 802090c:	681b      	ldr	r3, [r3, #0]
 802090e:	681a      	ldr	r2, [r3, #0]
 8020910:	687b      	ldr	r3, [r7, #4]
 8020912:	681b      	ldr	r3, [r3, #0]
 8020914:	f022 0201 	bic.w	r2, r2, #1
 8020918:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 802091a:	687b      	ldr	r3, [r7, #4]
 802091c:	681b      	ldr	r3, [r3, #0]
 802091e:	689b      	ldr	r3, [r3, #8]
 8020920:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8020924:	687b      	ldr	r3, [r7, #4]
 8020926:	681b      	ldr	r3, [r3, #0]
 8020928:	683a      	ldr	r2, [r7, #0]
 802092a:	430a      	orrs	r2, r1
 802092c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 802092e:	6878      	ldr	r0, [r7, #4]
 8020930:	f000 f850 	bl	80209d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8020934:	687b      	ldr	r3, [r7, #4]
 8020936:	681b      	ldr	r3, [r3, #0]
 8020938:	68fa      	ldr	r2, [r7, #12]
 802093a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 802093c:	687b      	ldr	r3, [r7, #4]
 802093e:	2220      	movs	r2, #32
 8020940:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8020944:	687b      	ldr	r3, [r7, #4]
 8020946:	2200      	movs	r2, #0
 8020948:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 802094c:	2300      	movs	r3, #0
}
 802094e:	4618      	mov	r0, r3
 8020950:	3710      	adds	r7, #16
 8020952:	46bd      	mov	sp, r7
 8020954:	bd80      	pop	{r7, pc}

08020956 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8020956:	b580      	push	{r7, lr}
 8020958:	b084      	sub	sp, #16
 802095a:	af00      	add	r7, sp, #0
 802095c:	6078      	str	r0, [r7, #4]
 802095e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8020960:	687b      	ldr	r3, [r7, #4]
 8020962:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8020966:	2b01      	cmp	r3, #1
 8020968:	d101      	bne.n	802096e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 802096a:	2302      	movs	r3, #2
 802096c:	e02d      	b.n	80209ca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 802096e:	687b      	ldr	r3, [r7, #4]
 8020970:	2201      	movs	r2, #1
 8020972:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8020976:	687b      	ldr	r3, [r7, #4]
 8020978:	2224      	movs	r2, #36	@ 0x24
 802097a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 802097e:	687b      	ldr	r3, [r7, #4]
 8020980:	681b      	ldr	r3, [r3, #0]
 8020982:	681b      	ldr	r3, [r3, #0]
 8020984:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8020986:	687b      	ldr	r3, [r7, #4]
 8020988:	681b      	ldr	r3, [r3, #0]
 802098a:	681a      	ldr	r2, [r3, #0]
 802098c:	687b      	ldr	r3, [r7, #4]
 802098e:	681b      	ldr	r3, [r3, #0]
 8020990:	f022 0201 	bic.w	r2, r2, #1
 8020994:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8020996:	687b      	ldr	r3, [r7, #4]
 8020998:	681b      	ldr	r3, [r3, #0]
 802099a:	689b      	ldr	r3, [r3, #8]
 802099c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80209a0:	687b      	ldr	r3, [r7, #4]
 80209a2:	681b      	ldr	r3, [r3, #0]
 80209a4:	683a      	ldr	r2, [r7, #0]
 80209a6:	430a      	orrs	r2, r1
 80209a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80209aa:	6878      	ldr	r0, [r7, #4]
 80209ac:	f000 f812 	bl	80209d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80209b0:	687b      	ldr	r3, [r7, #4]
 80209b2:	681b      	ldr	r3, [r3, #0]
 80209b4:	68fa      	ldr	r2, [r7, #12]
 80209b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80209b8:	687b      	ldr	r3, [r7, #4]
 80209ba:	2220      	movs	r2, #32
 80209bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80209c0:	687b      	ldr	r3, [r7, #4]
 80209c2:	2200      	movs	r2, #0
 80209c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80209c8:	2300      	movs	r3, #0
}
 80209ca:	4618      	mov	r0, r3
 80209cc:	3710      	adds	r7, #16
 80209ce:	46bd      	mov	sp, r7
 80209d0:	bd80      	pop	{r7, pc}
	...

080209d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80209d4:	b480      	push	{r7}
 80209d6:	b085      	sub	sp, #20
 80209d8:	af00      	add	r7, sp, #0
 80209da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80209dc:	687b      	ldr	r3, [r7, #4]
 80209de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80209e0:	2b00      	cmp	r3, #0
 80209e2:	d108      	bne.n	80209f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80209e4:	687b      	ldr	r3, [r7, #4]
 80209e6:	2201      	movs	r2, #1
 80209e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80209ec:	687b      	ldr	r3, [r7, #4]
 80209ee:	2201      	movs	r2, #1
 80209f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80209f4:	e031      	b.n	8020a5a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80209f6:	2310      	movs	r3, #16
 80209f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80209fa:	2310      	movs	r3, #16
 80209fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80209fe:	687b      	ldr	r3, [r7, #4]
 8020a00:	681b      	ldr	r3, [r3, #0]
 8020a02:	689b      	ldr	r3, [r3, #8]
 8020a04:	0e5b      	lsrs	r3, r3, #25
 8020a06:	b2db      	uxtb	r3, r3
 8020a08:	f003 0307 	and.w	r3, r3, #7
 8020a0c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8020a0e:	687b      	ldr	r3, [r7, #4]
 8020a10:	681b      	ldr	r3, [r3, #0]
 8020a12:	689b      	ldr	r3, [r3, #8]
 8020a14:	0f5b      	lsrs	r3, r3, #29
 8020a16:	b2db      	uxtb	r3, r3
 8020a18:	f003 0307 	and.w	r3, r3, #7
 8020a1c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8020a1e:	7bbb      	ldrb	r3, [r7, #14]
 8020a20:	7b3a      	ldrb	r2, [r7, #12]
 8020a22:	4911      	ldr	r1, [pc, #68]	@ (8020a68 <UARTEx_SetNbDataToProcess+0x94>)
 8020a24:	5c8a      	ldrb	r2, [r1, r2]
 8020a26:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8020a2a:	7b3a      	ldrb	r2, [r7, #12]
 8020a2c:	490f      	ldr	r1, [pc, #60]	@ (8020a6c <UARTEx_SetNbDataToProcess+0x98>)
 8020a2e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8020a30:	fb93 f3f2 	sdiv	r3, r3, r2
 8020a34:	b29a      	uxth	r2, r3
 8020a36:	687b      	ldr	r3, [r7, #4]
 8020a38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8020a3c:	7bfb      	ldrb	r3, [r7, #15]
 8020a3e:	7b7a      	ldrb	r2, [r7, #13]
 8020a40:	4909      	ldr	r1, [pc, #36]	@ (8020a68 <UARTEx_SetNbDataToProcess+0x94>)
 8020a42:	5c8a      	ldrb	r2, [r1, r2]
 8020a44:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8020a48:	7b7a      	ldrb	r2, [r7, #13]
 8020a4a:	4908      	ldr	r1, [pc, #32]	@ (8020a6c <UARTEx_SetNbDataToProcess+0x98>)
 8020a4c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8020a4e:	fb93 f3f2 	sdiv	r3, r3, r2
 8020a52:	b29a      	uxth	r2, r3
 8020a54:	687b      	ldr	r3, [r7, #4]
 8020a56:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8020a5a:	bf00      	nop
 8020a5c:	3714      	adds	r7, #20
 8020a5e:	46bd      	mov	sp, r7
 8020a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a64:	4770      	bx	lr
 8020a66:	bf00      	nop
 8020a68:	080269f0 	.word	0x080269f0
 8020a6c:	080269f8 	.word	0x080269f8

08020a70 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8020a70:	b084      	sub	sp, #16
 8020a72:	b480      	push	{r7}
 8020a74:	b085      	sub	sp, #20
 8020a76:	af00      	add	r7, sp, #0
 8020a78:	6078      	str	r0, [r7, #4]
 8020a7a:	f107 001c 	add.w	r0, r7, #28
 8020a7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8020a82:	2300      	movs	r3, #0
 8020a84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8020a86:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8020a88:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8020a8a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8020a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 8020a8e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8020a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 8020a92:	431a      	orrs	r2, r3
             Init.ClockDiv
 8020a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 8020a96:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8020a98:	68fa      	ldr	r2, [r7, #12]
 8020a9a:	4313      	orrs	r3, r2
 8020a9c:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8020a9e:	687b      	ldr	r3, [r7, #4]
 8020aa0:	685a      	ldr	r2, [r3, #4]
 8020aa2:	4b07      	ldr	r3, [pc, #28]	@ (8020ac0 <SDMMC_Init+0x50>)
 8020aa4:	4013      	ands	r3, r2
 8020aa6:	68fa      	ldr	r2, [r7, #12]
 8020aa8:	431a      	orrs	r2, r3
 8020aaa:	687b      	ldr	r3, [r7, #4]
 8020aac:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8020aae:	2300      	movs	r3, #0
}
 8020ab0:	4618      	mov	r0, r3
 8020ab2:	3714      	adds	r7, #20
 8020ab4:	46bd      	mov	sp, r7
 8020ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020aba:	b004      	add	sp, #16
 8020abc:	4770      	bx	lr
 8020abe:	bf00      	nop
 8020ac0:	ffc02c00 	.word	0xffc02c00

08020ac4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8020ac4:	b480      	push	{r7}
 8020ac6:	b083      	sub	sp, #12
 8020ac8:	af00      	add	r7, sp, #0
 8020aca:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8020acc:	687b      	ldr	r3, [r7, #4]
 8020ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8020ad2:	4618      	mov	r0, r3
 8020ad4:	370c      	adds	r7, #12
 8020ad6:	46bd      	mov	sp, r7
 8020ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020adc:	4770      	bx	lr

08020ade <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8020ade:	b480      	push	{r7}
 8020ae0:	b083      	sub	sp, #12
 8020ae2:	af00      	add	r7, sp, #0
 8020ae4:	6078      	str	r0, [r7, #4]
 8020ae6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8020ae8:	683b      	ldr	r3, [r7, #0]
 8020aea:	681a      	ldr	r2, [r3, #0]
 8020aec:	687b      	ldr	r3, [r7, #4]
 8020aee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8020af2:	2300      	movs	r3, #0
}
 8020af4:	4618      	mov	r0, r3
 8020af6:	370c      	adds	r7, #12
 8020af8:	46bd      	mov	sp, r7
 8020afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020afe:	4770      	bx	lr

08020b00 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8020b00:	b480      	push	{r7}
 8020b02:	b083      	sub	sp, #12
 8020b04:	af00      	add	r7, sp, #0
 8020b06:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8020b08:	687b      	ldr	r3, [r7, #4]
 8020b0a:	681b      	ldr	r3, [r3, #0]
 8020b0c:	f043 0203 	orr.w	r2, r3, #3
 8020b10:	687b      	ldr	r3, [r7, #4]
 8020b12:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8020b14:	2300      	movs	r3, #0
}
 8020b16:	4618      	mov	r0, r3
 8020b18:	370c      	adds	r7, #12
 8020b1a:	46bd      	mov	sp, r7
 8020b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b20:	4770      	bx	lr

08020b22 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8020b22:	b480      	push	{r7}
 8020b24:	b083      	sub	sp, #12
 8020b26:	af00      	add	r7, sp, #0
 8020b28:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8020b2a:	687b      	ldr	r3, [r7, #4]
 8020b2c:	681b      	ldr	r3, [r3, #0]
 8020b2e:	f003 0303 	and.w	r3, r3, #3
}
 8020b32:	4618      	mov	r0, r3
 8020b34:	370c      	adds	r7, #12
 8020b36:	46bd      	mov	sp, r7
 8020b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b3c:	4770      	bx	lr
	...

08020b40 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8020b40:	b480      	push	{r7}
 8020b42:	b085      	sub	sp, #20
 8020b44:	af00      	add	r7, sp, #0
 8020b46:	6078      	str	r0, [r7, #4]
 8020b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8020b4a:	2300      	movs	r3, #0
 8020b4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8020b4e:	683b      	ldr	r3, [r7, #0]
 8020b50:	681a      	ldr	r2, [r3, #0]
 8020b52:	687b      	ldr	r3, [r7, #4]
 8020b54:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8020b56:	683b      	ldr	r3, [r7, #0]
 8020b58:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8020b5a:	683b      	ldr	r3, [r7, #0]
 8020b5c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8020b5e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8020b60:	683b      	ldr	r3, [r7, #0]
 8020b62:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8020b64:	431a      	orrs	r2, r3
                       Command->CPSM);
 8020b66:	683b      	ldr	r3, [r7, #0]
 8020b68:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8020b6a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8020b6c:	68fa      	ldr	r2, [r7, #12]
 8020b6e:	4313      	orrs	r3, r2
 8020b70:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8020b72:	687b      	ldr	r3, [r7, #4]
 8020b74:	68da      	ldr	r2, [r3, #12]
 8020b76:	4b06      	ldr	r3, [pc, #24]	@ (8020b90 <SDMMC_SendCommand+0x50>)
 8020b78:	4013      	ands	r3, r2
 8020b7a:	68fa      	ldr	r2, [r7, #12]
 8020b7c:	431a      	orrs	r2, r3
 8020b7e:	687b      	ldr	r3, [r7, #4]
 8020b80:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8020b82:	2300      	movs	r3, #0
}
 8020b84:	4618      	mov	r0, r3
 8020b86:	3714      	adds	r7, #20
 8020b88:	46bd      	mov	sp, r7
 8020b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b8e:	4770      	bx	lr
 8020b90:	fffee0c0 	.word	0xfffee0c0

08020b94 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8020b94:	b480      	push	{r7}
 8020b96:	b083      	sub	sp, #12
 8020b98:	af00      	add	r7, sp, #0
 8020b9a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8020b9c:	687b      	ldr	r3, [r7, #4]
 8020b9e:	691b      	ldr	r3, [r3, #16]
 8020ba0:	b2db      	uxtb	r3, r3
}
 8020ba2:	4618      	mov	r0, r3
 8020ba4:	370c      	adds	r7, #12
 8020ba6:	46bd      	mov	sp, r7
 8020ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020bac:	4770      	bx	lr

08020bae <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8020bae:	b480      	push	{r7}
 8020bb0:	b085      	sub	sp, #20
 8020bb2:	af00      	add	r7, sp, #0
 8020bb4:	6078      	str	r0, [r7, #4]
 8020bb6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8020bb8:	687b      	ldr	r3, [r7, #4]
 8020bba:	3314      	adds	r3, #20
 8020bbc:	461a      	mov	r2, r3
 8020bbe:	683b      	ldr	r3, [r7, #0]
 8020bc0:	4413      	add	r3, r2
 8020bc2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8020bc4:	68fb      	ldr	r3, [r7, #12]
 8020bc6:	681b      	ldr	r3, [r3, #0]
}
 8020bc8:	4618      	mov	r0, r3
 8020bca:	3714      	adds	r7, #20
 8020bcc:	46bd      	mov	sp, r7
 8020bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020bd2:	4770      	bx	lr

08020bd4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8020bd4:	b480      	push	{r7}
 8020bd6:	b085      	sub	sp, #20
 8020bd8:	af00      	add	r7, sp, #0
 8020bda:	6078      	str	r0, [r7, #4]
 8020bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8020bde:	2300      	movs	r3, #0
 8020be0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8020be2:	683b      	ldr	r3, [r7, #0]
 8020be4:	681a      	ldr	r2, [r3, #0]
 8020be6:	687b      	ldr	r3, [r7, #4]
 8020be8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8020bea:	683b      	ldr	r3, [r7, #0]
 8020bec:	685a      	ldr	r2, [r3, #4]
 8020bee:	687b      	ldr	r3, [r7, #4]
 8020bf0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8020bf2:	683b      	ldr	r3, [r7, #0]
 8020bf4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8020bf6:	683b      	ldr	r3, [r7, #0]
 8020bf8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8020bfa:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8020bfc:	683b      	ldr	r3, [r7, #0]
 8020bfe:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8020c00:	431a      	orrs	r2, r3
                       Data->DPSM);
 8020c02:	683b      	ldr	r3, [r7, #0]
 8020c04:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8020c06:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8020c08:	68fa      	ldr	r2, [r7, #12]
 8020c0a:	4313      	orrs	r3, r2
 8020c0c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8020c0e:	687b      	ldr	r3, [r7, #4]
 8020c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020c12:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8020c16:	68fb      	ldr	r3, [r7, #12]
 8020c18:	431a      	orrs	r2, r3
 8020c1a:	687b      	ldr	r3, [r7, #4]
 8020c1c:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8020c1e:	2300      	movs	r3, #0

}
 8020c20:	4618      	mov	r0, r3
 8020c22:	3714      	adds	r7, #20
 8020c24:	46bd      	mov	sp, r7
 8020c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c2a:	4770      	bx	lr

08020c2c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8020c2c:	b580      	push	{r7, lr}
 8020c2e:	b088      	sub	sp, #32
 8020c30:	af00      	add	r7, sp, #0
 8020c32:	6078      	str	r0, [r7, #4]
 8020c34:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8020c36:	683b      	ldr	r3, [r7, #0]
 8020c38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8020c3a:	2310      	movs	r3, #16
 8020c3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8020c3e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8020c42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8020c44:	2300      	movs	r3, #0
 8020c46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8020c48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8020c4c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8020c4e:	f107 0308 	add.w	r3, r7, #8
 8020c52:	4619      	mov	r1, r3
 8020c54:	6878      	ldr	r0, [r7, #4]
 8020c56:	f7ff ff73 	bl	8020b40 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8020c5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8020c5e:	2110      	movs	r1, #16
 8020c60:	6878      	ldr	r0, [r7, #4]
 8020c62:	f000 fa5f 	bl	8021124 <SDMMC_GetCmdResp1>
 8020c66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8020c68:	69fb      	ldr	r3, [r7, #28]
}
 8020c6a:	4618      	mov	r0, r3
 8020c6c:	3720      	adds	r7, #32
 8020c6e:	46bd      	mov	sp, r7
 8020c70:	bd80      	pop	{r7, pc}

08020c72 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8020c72:	b580      	push	{r7, lr}
 8020c74:	b088      	sub	sp, #32
 8020c76:	af00      	add	r7, sp, #0
 8020c78:	6078      	str	r0, [r7, #4]
 8020c7a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8020c7c:	683b      	ldr	r3, [r7, #0]
 8020c7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8020c80:	2311      	movs	r3, #17
 8020c82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8020c84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8020c88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8020c8a:	2300      	movs	r3, #0
 8020c8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8020c8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8020c92:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8020c94:	f107 0308 	add.w	r3, r7, #8
 8020c98:	4619      	mov	r1, r3
 8020c9a:	6878      	ldr	r0, [r7, #4]
 8020c9c:	f7ff ff50 	bl	8020b40 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8020ca0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8020ca4:	2111      	movs	r1, #17
 8020ca6:	6878      	ldr	r0, [r7, #4]
 8020ca8:	f000 fa3c 	bl	8021124 <SDMMC_GetCmdResp1>
 8020cac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8020cae:	69fb      	ldr	r3, [r7, #28]
}
 8020cb0:	4618      	mov	r0, r3
 8020cb2:	3720      	adds	r7, #32
 8020cb4:	46bd      	mov	sp, r7
 8020cb6:	bd80      	pop	{r7, pc}

08020cb8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8020cb8:	b580      	push	{r7, lr}
 8020cba:	b088      	sub	sp, #32
 8020cbc:	af00      	add	r7, sp, #0
 8020cbe:	6078      	str	r0, [r7, #4]
 8020cc0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8020cc2:	683b      	ldr	r3, [r7, #0]
 8020cc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8020cc6:	2312      	movs	r3, #18
 8020cc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8020cca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8020cce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8020cd0:	2300      	movs	r3, #0
 8020cd2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8020cd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8020cd8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8020cda:	f107 0308 	add.w	r3, r7, #8
 8020cde:	4619      	mov	r1, r3
 8020ce0:	6878      	ldr	r0, [r7, #4]
 8020ce2:	f7ff ff2d 	bl	8020b40 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8020ce6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8020cea:	2112      	movs	r1, #18
 8020cec:	6878      	ldr	r0, [r7, #4]
 8020cee:	f000 fa19 	bl	8021124 <SDMMC_GetCmdResp1>
 8020cf2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8020cf4:	69fb      	ldr	r3, [r7, #28]
}
 8020cf6:	4618      	mov	r0, r3
 8020cf8:	3720      	adds	r7, #32
 8020cfa:	46bd      	mov	sp, r7
 8020cfc:	bd80      	pop	{r7, pc}

08020cfe <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8020cfe:	b580      	push	{r7, lr}
 8020d00:	b088      	sub	sp, #32
 8020d02:	af00      	add	r7, sp, #0
 8020d04:	6078      	str	r0, [r7, #4]
 8020d06:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8020d08:	683b      	ldr	r3, [r7, #0]
 8020d0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8020d0c:	2318      	movs	r3, #24
 8020d0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8020d10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8020d14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8020d16:	2300      	movs	r3, #0
 8020d18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8020d1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8020d1e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8020d20:	f107 0308 	add.w	r3, r7, #8
 8020d24:	4619      	mov	r1, r3
 8020d26:	6878      	ldr	r0, [r7, #4]
 8020d28:	f7ff ff0a 	bl	8020b40 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8020d2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8020d30:	2118      	movs	r1, #24
 8020d32:	6878      	ldr	r0, [r7, #4]
 8020d34:	f000 f9f6 	bl	8021124 <SDMMC_GetCmdResp1>
 8020d38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8020d3a:	69fb      	ldr	r3, [r7, #28]
}
 8020d3c:	4618      	mov	r0, r3
 8020d3e:	3720      	adds	r7, #32
 8020d40:	46bd      	mov	sp, r7
 8020d42:	bd80      	pop	{r7, pc}

08020d44 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8020d44:	b580      	push	{r7, lr}
 8020d46:	b088      	sub	sp, #32
 8020d48:	af00      	add	r7, sp, #0
 8020d4a:	6078      	str	r0, [r7, #4]
 8020d4c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8020d4e:	683b      	ldr	r3, [r7, #0]
 8020d50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8020d52:	2319      	movs	r3, #25
 8020d54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8020d56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8020d5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8020d5c:	2300      	movs	r3, #0
 8020d5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8020d60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8020d64:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8020d66:	f107 0308 	add.w	r3, r7, #8
 8020d6a:	4619      	mov	r1, r3
 8020d6c:	6878      	ldr	r0, [r7, #4]
 8020d6e:	f7ff fee7 	bl	8020b40 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8020d72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8020d76:	2119      	movs	r1, #25
 8020d78:	6878      	ldr	r0, [r7, #4]
 8020d7a:	f000 f9d3 	bl	8021124 <SDMMC_GetCmdResp1>
 8020d7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8020d80:	69fb      	ldr	r3, [r7, #28]
}
 8020d82:	4618      	mov	r0, r3
 8020d84:	3720      	adds	r7, #32
 8020d86:	46bd      	mov	sp, r7
 8020d88:	bd80      	pop	{r7, pc}
	...

08020d8c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8020d8c:	b580      	push	{r7, lr}
 8020d8e:	b088      	sub	sp, #32
 8020d90:	af00      	add	r7, sp, #0
 8020d92:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8020d94:	2300      	movs	r3, #0
 8020d96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8020d98:	230c      	movs	r3, #12
 8020d9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8020d9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8020da0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8020da2:	2300      	movs	r3, #0
 8020da4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8020da6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8020daa:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8020dac:	687b      	ldr	r3, [r7, #4]
 8020dae:	68db      	ldr	r3, [r3, #12]
 8020db0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8020db4:	687b      	ldr	r3, [r7, #4]
 8020db6:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8020db8:	687b      	ldr	r3, [r7, #4]
 8020dba:	68db      	ldr	r3, [r3, #12]
 8020dbc:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8020dc0:	687b      	ldr	r3, [r7, #4]
 8020dc2:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8020dc4:	f107 0308 	add.w	r3, r7, #8
 8020dc8:	4619      	mov	r1, r3
 8020dca:	6878      	ldr	r0, [r7, #4]
 8020dcc:	f7ff feb8 	bl	8020b40 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8020dd0:	4a0b      	ldr	r2, [pc, #44]	@ (8020e00 <SDMMC_CmdStopTransfer+0x74>)
 8020dd2:	210c      	movs	r1, #12
 8020dd4:	6878      	ldr	r0, [r7, #4]
 8020dd6:	f000 f9a5 	bl	8021124 <SDMMC_GetCmdResp1>
 8020dda:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8020ddc:	687b      	ldr	r3, [r7, #4]
 8020dde:	68db      	ldr	r3, [r3, #12]
 8020de0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8020de4:	687b      	ldr	r3, [r7, #4]
 8020de6:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8020de8:	69fb      	ldr	r3, [r7, #28]
 8020dea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8020dee:	d101      	bne.n	8020df4 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8020df0:	2300      	movs	r3, #0
 8020df2:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8020df4:	69fb      	ldr	r3, [r7, #28]
}
 8020df6:	4618      	mov	r0, r3
 8020df8:	3720      	adds	r7, #32
 8020dfa:	46bd      	mov	sp, r7
 8020dfc:	bd80      	pop	{r7, pc}
 8020dfe:	bf00      	nop
 8020e00:	05f5e100 	.word	0x05f5e100

08020e04 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8020e04:	b580      	push	{r7, lr}
 8020e06:	b088      	sub	sp, #32
 8020e08:	af00      	add	r7, sp, #0
 8020e0a:	6078      	str	r0, [r7, #4]
 8020e0c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8020e0e:	683b      	ldr	r3, [r7, #0]
 8020e10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8020e12:	2307      	movs	r3, #7
 8020e14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8020e16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8020e1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8020e1c:	2300      	movs	r3, #0
 8020e1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8020e20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8020e24:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8020e26:	f107 0308 	add.w	r3, r7, #8
 8020e2a:	4619      	mov	r1, r3
 8020e2c:	6878      	ldr	r0, [r7, #4]
 8020e2e:	f7ff fe87 	bl	8020b40 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8020e32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8020e36:	2107      	movs	r1, #7
 8020e38:	6878      	ldr	r0, [r7, #4]
 8020e3a:	f000 f973 	bl	8021124 <SDMMC_GetCmdResp1>
 8020e3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8020e40:	69fb      	ldr	r3, [r7, #28]
}
 8020e42:	4618      	mov	r0, r3
 8020e44:	3720      	adds	r7, #32
 8020e46:	46bd      	mov	sp, r7
 8020e48:	bd80      	pop	{r7, pc}

08020e4a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8020e4a:	b580      	push	{r7, lr}
 8020e4c:	b088      	sub	sp, #32
 8020e4e:	af00      	add	r7, sp, #0
 8020e50:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8020e52:	2300      	movs	r3, #0
 8020e54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8020e56:	2300      	movs	r3, #0
 8020e58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8020e5a:	2300      	movs	r3, #0
 8020e5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8020e5e:	2300      	movs	r3, #0
 8020e60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8020e62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8020e66:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8020e68:	f107 0308 	add.w	r3, r7, #8
 8020e6c:	4619      	mov	r1, r3
 8020e6e:	6878      	ldr	r0, [r7, #4]
 8020e70:	f7ff fe66 	bl	8020b40 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8020e74:	6878      	ldr	r0, [r7, #4]
 8020e76:	f000 fb97 	bl	80215a8 <SDMMC_GetCmdError>
 8020e7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8020e7c:	69fb      	ldr	r3, [r7, #28]
}
 8020e7e:	4618      	mov	r0, r3
 8020e80:	3720      	adds	r7, #32
 8020e82:	46bd      	mov	sp, r7
 8020e84:	bd80      	pop	{r7, pc}

08020e86 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8020e86:	b580      	push	{r7, lr}
 8020e88:	b088      	sub	sp, #32
 8020e8a:	af00      	add	r7, sp, #0
 8020e8c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8020e8e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8020e92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8020e94:	2308      	movs	r3, #8
 8020e96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8020e98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8020e9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8020e9e:	2300      	movs	r3, #0
 8020ea0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8020ea2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8020ea6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8020ea8:	f107 0308 	add.w	r3, r7, #8
 8020eac:	4619      	mov	r1, r3
 8020eae:	6878      	ldr	r0, [r7, #4]
 8020eb0:	f7ff fe46 	bl	8020b40 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8020eb4:	6878      	ldr	r0, [r7, #4]
 8020eb6:	f000 fb29 	bl	802150c <SDMMC_GetCmdResp7>
 8020eba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8020ebc:	69fb      	ldr	r3, [r7, #28]
}
 8020ebe:	4618      	mov	r0, r3
 8020ec0:	3720      	adds	r7, #32
 8020ec2:	46bd      	mov	sp, r7
 8020ec4:	bd80      	pop	{r7, pc}

08020ec6 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8020ec6:	b580      	push	{r7, lr}
 8020ec8:	b088      	sub	sp, #32
 8020eca:	af00      	add	r7, sp, #0
 8020ecc:	6078      	str	r0, [r7, #4]
 8020ece:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8020ed0:	683b      	ldr	r3, [r7, #0]
 8020ed2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8020ed4:	2337      	movs	r3, #55	@ 0x37
 8020ed6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8020ed8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8020edc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8020ede:	2300      	movs	r3, #0
 8020ee0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8020ee2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8020ee6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8020ee8:	f107 0308 	add.w	r3, r7, #8
 8020eec:	4619      	mov	r1, r3
 8020eee:	6878      	ldr	r0, [r7, #4]
 8020ef0:	f7ff fe26 	bl	8020b40 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8020ef4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8020ef8:	2137      	movs	r1, #55	@ 0x37
 8020efa:	6878      	ldr	r0, [r7, #4]
 8020efc:	f000 f912 	bl	8021124 <SDMMC_GetCmdResp1>
 8020f00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8020f02:	69fb      	ldr	r3, [r7, #28]
}
 8020f04:	4618      	mov	r0, r3
 8020f06:	3720      	adds	r7, #32
 8020f08:	46bd      	mov	sp, r7
 8020f0a:	bd80      	pop	{r7, pc}

08020f0c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8020f0c:	b580      	push	{r7, lr}
 8020f0e:	b088      	sub	sp, #32
 8020f10:	af00      	add	r7, sp, #0
 8020f12:	6078      	str	r0, [r7, #4]
 8020f14:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8020f16:	683b      	ldr	r3, [r7, #0]
 8020f18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8020f1a:	2329      	movs	r3, #41	@ 0x29
 8020f1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8020f1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8020f22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8020f24:	2300      	movs	r3, #0
 8020f26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8020f28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8020f2c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8020f2e:	f107 0308 	add.w	r3, r7, #8
 8020f32:	4619      	mov	r1, r3
 8020f34:	6878      	ldr	r0, [r7, #4]
 8020f36:	f7ff fe03 	bl	8020b40 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8020f3a:	6878      	ldr	r0, [r7, #4]
 8020f3c:	f000 fa2e 	bl	802139c <SDMMC_GetCmdResp3>
 8020f40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8020f42:	69fb      	ldr	r3, [r7, #28]
}
 8020f44:	4618      	mov	r0, r3
 8020f46:	3720      	adds	r7, #32
 8020f48:	46bd      	mov	sp, r7
 8020f4a:	bd80      	pop	{r7, pc}

08020f4c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8020f4c:	b580      	push	{r7, lr}
 8020f4e:	b088      	sub	sp, #32
 8020f50:	af00      	add	r7, sp, #0
 8020f52:	6078      	str	r0, [r7, #4]
 8020f54:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8020f56:	683b      	ldr	r3, [r7, #0]
 8020f58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8020f5a:	2306      	movs	r3, #6
 8020f5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8020f5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8020f62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8020f64:	2300      	movs	r3, #0
 8020f66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8020f68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8020f6c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8020f6e:	f107 0308 	add.w	r3, r7, #8
 8020f72:	4619      	mov	r1, r3
 8020f74:	6878      	ldr	r0, [r7, #4]
 8020f76:	f7ff fde3 	bl	8020b40 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8020f7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8020f7e:	2106      	movs	r1, #6
 8020f80:	6878      	ldr	r0, [r7, #4]
 8020f82:	f000 f8cf 	bl	8021124 <SDMMC_GetCmdResp1>
 8020f86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8020f88:	69fb      	ldr	r3, [r7, #28]
}
 8020f8a:	4618      	mov	r0, r3
 8020f8c:	3720      	adds	r7, #32
 8020f8e:	46bd      	mov	sp, r7
 8020f90:	bd80      	pop	{r7, pc}

08020f92 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8020f92:	b580      	push	{r7, lr}
 8020f94:	b088      	sub	sp, #32
 8020f96:	af00      	add	r7, sp, #0
 8020f98:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8020f9a:	2300      	movs	r3, #0
 8020f9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8020f9e:	2333      	movs	r3, #51	@ 0x33
 8020fa0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8020fa2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8020fa6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8020fa8:	2300      	movs	r3, #0
 8020faa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8020fac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8020fb0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8020fb2:	f107 0308 	add.w	r3, r7, #8
 8020fb6:	4619      	mov	r1, r3
 8020fb8:	6878      	ldr	r0, [r7, #4]
 8020fba:	f7ff fdc1 	bl	8020b40 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8020fbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8020fc2:	2133      	movs	r1, #51	@ 0x33
 8020fc4:	6878      	ldr	r0, [r7, #4]
 8020fc6:	f000 f8ad 	bl	8021124 <SDMMC_GetCmdResp1>
 8020fca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8020fcc:	69fb      	ldr	r3, [r7, #28]
}
 8020fce:	4618      	mov	r0, r3
 8020fd0:	3720      	adds	r7, #32
 8020fd2:	46bd      	mov	sp, r7
 8020fd4:	bd80      	pop	{r7, pc}

08020fd6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8020fd6:	b580      	push	{r7, lr}
 8020fd8:	b088      	sub	sp, #32
 8020fda:	af00      	add	r7, sp, #0
 8020fdc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8020fde:	2300      	movs	r3, #0
 8020fe0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8020fe2:	2302      	movs	r3, #2
 8020fe4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8020fe6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8020fea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8020fec:	2300      	movs	r3, #0
 8020fee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8020ff0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8020ff4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8020ff6:	f107 0308 	add.w	r3, r7, #8
 8020ffa:	4619      	mov	r1, r3
 8020ffc:	6878      	ldr	r0, [r7, #4]
 8020ffe:	f7ff fd9f 	bl	8020b40 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8021002:	6878      	ldr	r0, [r7, #4]
 8021004:	f000 f980 	bl	8021308 <SDMMC_GetCmdResp2>
 8021008:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802100a:	69fb      	ldr	r3, [r7, #28]
}
 802100c:	4618      	mov	r0, r3
 802100e:	3720      	adds	r7, #32
 8021010:	46bd      	mov	sp, r7
 8021012:	bd80      	pop	{r7, pc}

08021014 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8021014:	b580      	push	{r7, lr}
 8021016:	b088      	sub	sp, #32
 8021018:	af00      	add	r7, sp, #0
 802101a:	6078      	str	r0, [r7, #4]
 802101c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 802101e:	683b      	ldr	r3, [r7, #0]
 8021020:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8021022:	2309      	movs	r3, #9
 8021024:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8021026:	f44f 7340 	mov.w	r3, #768	@ 0x300
 802102a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 802102c:	2300      	movs	r3, #0
 802102e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8021030:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8021034:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8021036:	f107 0308 	add.w	r3, r7, #8
 802103a:	4619      	mov	r1, r3
 802103c:	6878      	ldr	r0, [r7, #4]
 802103e:	f7ff fd7f 	bl	8020b40 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8021042:	6878      	ldr	r0, [r7, #4]
 8021044:	f000 f960 	bl	8021308 <SDMMC_GetCmdResp2>
 8021048:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802104a:	69fb      	ldr	r3, [r7, #28]
}
 802104c:	4618      	mov	r0, r3
 802104e:	3720      	adds	r7, #32
 8021050:	46bd      	mov	sp, r7
 8021052:	bd80      	pop	{r7, pc}

08021054 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8021054:	b580      	push	{r7, lr}
 8021056:	b088      	sub	sp, #32
 8021058:	af00      	add	r7, sp, #0
 802105a:	6078      	str	r0, [r7, #4]
 802105c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 802105e:	2300      	movs	r3, #0
 8021060:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8021062:	2303      	movs	r3, #3
 8021064:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8021066:	f44f 7380 	mov.w	r3, #256	@ 0x100
 802106a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 802106c:	2300      	movs	r3, #0
 802106e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8021070:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8021074:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8021076:	f107 0308 	add.w	r3, r7, #8
 802107a:	4619      	mov	r1, r3
 802107c:	6878      	ldr	r0, [r7, #4]
 802107e:	f7ff fd5f 	bl	8020b40 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8021082:	683a      	ldr	r2, [r7, #0]
 8021084:	2103      	movs	r1, #3
 8021086:	6878      	ldr	r0, [r7, #4]
 8021088:	f000 f9c8 	bl	802141c <SDMMC_GetCmdResp6>
 802108c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802108e:	69fb      	ldr	r3, [r7, #28]
}
 8021090:	4618      	mov	r0, r3
 8021092:	3720      	adds	r7, #32
 8021094:	46bd      	mov	sp, r7
 8021096:	bd80      	pop	{r7, pc}

08021098 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8021098:	b580      	push	{r7, lr}
 802109a:	b088      	sub	sp, #32
 802109c:	af00      	add	r7, sp, #0
 802109e:	6078      	str	r0, [r7, #4]
 80210a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80210a2:	683b      	ldr	r3, [r7, #0]
 80210a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80210a6:	230d      	movs	r3, #13
 80210a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80210aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80210ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80210b0:	2300      	movs	r3, #0
 80210b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80210b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80210b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80210ba:	f107 0308 	add.w	r3, r7, #8
 80210be:	4619      	mov	r1, r3
 80210c0:	6878      	ldr	r0, [r7, #4]
 80210c2:	f7ff fd3d 	bl	8020b40 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80210c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80210ca:	210d      	movs	r1, #13
 80210cc:	6878      	ldr	r0, [r7, #4]
 80210ce:	f000 f829 	bl	8021124 <SDMMC_GetCmdResp1>
 80210d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80210d4:	69fb      	ldr	r3, [r7, #28]
}
 80210d6:	4618      	mov	r0, r3
 80210d8:	3720      	adds	r7, #32
 80210da:	46bd      	mov	sp, r7
 80210dc:	bd80      	pop	{r7, pc}

080210de <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80210de:	b580      	push	{r7, lr}
 80210e0:	b088      	sub	sp, #32
 80210e2:	af00      	add	r7, sp, #0
 80210e4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80210e6:	2300      	movs	r3, #0
 80210e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80210ea:	230d      	movs	r3, #13
 80210ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80210ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80210f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80210f4:	2300      	movs	r3, #0
 80210f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80210f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80210fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80210fe:	f107 0308 	add.w	r3, r7, #8
 8021102:	4619      	mov	r1, r3
 8021104:	6878      	ldr	r0, [r7, #4]
 8021106:	f7ff fd1b 	bl	8020b40 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 802110a:	f241 3288 	movw	r2, #5000	@ 0x1388
 802110e:	210d      	movs	r1, #13
 8021110:	6878      	ldr	r0, [r7, #4]
 8021112:	f000 f807 	bl	8021124 <SDMMC_GetCmdResp1>
 8021116:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8021118:	69fb      	ldr	r3, [r7, #28]
}
 802111a:	4618      	mov	r0, r3
 802111c:	3720      	adds	r7, #32
 802111e:	46bd      	mov	sp, r7
 8021120:	bd80      	pop	{r7, pc}
	...

08021124 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8021124:	b580      	push	{r7, lr}
 8021126:	b088      	sub	sp, #32
 8021128:	af00      	add	r7, sp, #0
 802112a:	60f8      	str	r0, [r7, #12]
 802112c:	460b      	mov	r3, r1
 802112e:	607a      	str	r2, [r7, #4]
 8021130:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8021132:	4b70      	ldr	r3, [pc, #448]	@ (80212f4 <SDMMC_GetCmdResp1+0x1d0>)
 8021134:	681b      	ldr	r3, [r3, #0]
 8021136:	4a70      	ldr	r2, [pc, #448]	@ (80212f8 <SDMMC_GetCmdResp1+0x1d4>)
 8021138:	fba2 2303 	umull	r2, r3, r2, r3
 802113c:	0a5a      	lsrs	r2, r3, #9
 802113e:	687b      	ldr	r3, [r7, #4]
 8021140:	fb02 f303 	mul.w	r3, r2, r3
 8021144:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8021146:	69fb      	ldr	r3, [r7, #28]
 8021148:	1e5a      	subs	r2, r3, #1
 802114a:	61fa      	str	r2, [r7, #28]
 802114c:	2b00      	cmp	r3, #0
 802114e:	d102      	bne.n	8021156 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8021150:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8021154:	e0c9      	b.n	80212ea <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8021156:	68fb      	ldr	r3, [r7, #12]
 8021158:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802115a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 802115c:	69ba      	ldr	r2, [r7, #24]
 802115e:	4b67      	ldr	r3, [pc, #412]	@ (80212fc <SDMMC_GetCmdResp1+0x1d8>)
 8021160:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8021162:	2b00      	cmp	r3, #0
 8021164:	d0ef      	beq.n	8021146 <SDMMC_GetCmdResp1+0x22>
 8021166:	69bb      	ldr	r3, [r7, #24]
 8021168:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 802116c:	2b00      	cmp	r3, #0
 802116e:	d1ea      	bne.n	8021146 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8021170:	68fb      	ldr	r3, [r7, #12]
 8021172:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8021174:	f003 0304 	and.w	r3, r3, #4
 8021178:	2b00      	cmp	r3, #0
 802117a:	d004      	beq.n	8021186 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 802117c:	68fb      	ldr	r3, [r7, #12]
 802117e:	2204      	movs	r2, #4
 8021180:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8021182:	2304      	movs	r3, #4
 8021184:	e0b1      	b.n	80212ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8021186:	68fb      	ldr	r3, [r7, #12]
 8021188:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802118a:	f003 0301 	and.w	r3, r3, #1
 802118e:	2b00      	cmp	r3, #0
 8021190:	d004      	beq.n	802119c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8021192:	68fb      	ldr	r3, [r7, #12]
 8021194:	2201      	movs	r2, #1
 8021196:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8021198:	2301      	movs	r3, #1
 802119a:	e0a6      	b.n	80212ea <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 802119c:	68fb      	ldr	r3, [r7, #12]
 802119e:	4a58      	ldr	r2, [pc, #352]	@ (8021300 <SDMMC_GetCmdResp1+0x1dc>)
 80211a0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80211a2:	68f8      	ldr	r0, [r7, #12]
 80211a4:	f7ff fcf6 	bl	8020b94 <SDMMC_GetCommandResponse>
 80211a8:	4603      	mov	r3, r0
 80211aa:	461a      	mov	r2, r3
 80211ac:	7afb      	ldrb	r3, [r7, #11]
 80211ae:	4293      	cmp	r3, r2
 80211b0:	d001      	beq.n	80211b6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80211b2:	2301      	movs	r3, #1
 80211b4:	e099      	b.n	80212ea <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80211b6:	2100      	movs	r1, #0
 80211b8:	68f8      	ldr	r0, [r7, #12]
 80211ba:	f7ff fcf8 	bl	8020bae <SDMMC_GetResponse>
 80211be:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80211c0:	697a      	ldr	r2, [r7, #20]
 80211c2:	4b50      	ldr	r3, [pc, #320]	@ (8021304 <SDMMC_GetCmdResp1+0x1e0>)
 80211c4:	4013      	ands	r3, r2
 80211c6:	2b00      	cmp	r3, #0
 80211c8:	d101      	bne.n	80211ce <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80211ca:	2300      	movs	r3, #0
 80211cc:	e08d      	b.n	80212ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80211ce:	697b      	ldr	r3, [r7, #20]
 80211d0:	2b00      	cmp	r3, #0
 80211d2:	da02      	bge.n	80211da <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80211d4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80211d8:	e087      	b.n	80212ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80211da:	697b      	ldr	r3, [r7, #20]
 80211dc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80211e0:	2b00      	cmp	r3, #0
 80211e2:	d001      	beq.n	80211e8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80211e4:	2340      	movs	r3, #64	@ 0x40
 80211e6:	e080      	b.n	80212ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80211e8:	697b      	ldr	r3, [r7, #20]
 80211ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80211ee:	2b00      	cmp	r3, #0
 80211f0:	d001      	beq.n	80211f6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80211f2:	2380      	movs	r3, #128	@ 0x80
 80211f4:	e079      	b.n	80212ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80211f6:	697b      	ldr	r3, [r7, #20]
 80211f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80211fc:	2b00      	cmp	r3, #0
 80211fe:	d002      	beq.n	8021206 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8021200:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8021204:	e071      	b.n	80212ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8021206:	697b      	ldr	r3, [r7, #20]
 8021208:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 802120c:	2b00      	cmp	r3, #0
 802120e:	d002      	beq.n	8021216 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8021210:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8021214:	e069      	b.n	80212ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8021216:	697b      	ldr	r3, [r7, #20]
 8021218:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 802121c:	2b00      	cmp	r3, #0
 802121e:	d002      	beq.n	8021226 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8021220:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8021224:	e061      	b.n	80212ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8021226:	697b      	ldr	r3, [r7, #20]
 8021228:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 802122c:	2b00      	cmp	r3, #0
 802122e:	d002      	beq.n	8021236 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8021230:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8021234:	e059      	b.n	80212ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8021236:	697b      	ldr	r3, [r7, #20]
 8021238:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 802123c:	2b00      	cmp	r3, #0
 802123e:	d002      	beq.n	8021246 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8021240:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8021244:	e051      	b.n	80212ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8021246:	697b      	ldr	r3, [r7, #20]
 8021248:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 802124c:	2b00      	cmp	r3, #0
 802124e:	d002      	beq.n	8021256 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8021250:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8021254:	e049      	b.n	80212ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8021256:	697b      	ldr	r3, [r7, #20]
 8021258:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 802125c:	2b00      	cmp	r3, #0
 802125e:	d002      	beq.n	8021266 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8021260:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8021264:	e041      	b.n	80212ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8021266:	697b      	ldr	r3, [r7, #20]
 8021268:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 802126c:	2b00      	cmp	r3, #0
 802126e:	d002      	beq.n	8021276 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8021270:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8021274:	e039      	b.n	80212ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8021276:	697b      	ldr	r3, [r7, #20]
 8021278:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 802127c:	2b00      	cmp	r3, #0
 802127e:	d002      	beq.n	8021286 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8021280:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8021284:	e031      	b.n	80212ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8021286:	697b      	ldr	r3, [r7, #20]
 8021288:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 802128c:	2b00      	cmp	r3, #0
 802128e:	d002      	beq.n	8021296 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8021290:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8021294:	e029      	b.n	80212ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8021296:	697b      	ldr	r3, [r7, #20]
 8021298:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 802129c:	2b00      	cmp	r3, #0
 802129e:	d002      	beq.n	80212a6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80212a0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80212a4:	e021      	b.n	80212ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80212a6:	697b      	ldr	r3, [r7, #20]
 80212a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80212ac:	2b00      	cmp	r3, #0
 80212ae:	d002      	beq.n	80212b6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80212b0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80212b4:	e019      	b.n	80212ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80212b6:	697b      	ldr	r3, [r7, #20]
 80212b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80212bc:	2b00      	cmp	r3, #0
 80212be:	d002      	beq.n	80212c6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80212c0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80212c4:	e011      	b.n	80212ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80212c6:	697b      	ldr	r3, [r7, #20]
 80212c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80212cc:	2b00      	cmp	r3, #0
 80212ce:	d002      	beq.n	80212d6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80212d0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80212d4:	e009      	b.n	80212ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80212d6:	697b      	ldr	r3, [r7, #20]
 80212d8:	f003 0308 	and.w	r3, r3, #8
 80212dc:	2b00      	cmp	r3, #0
 80212de:	d002      	beq.n	80212e6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80212e0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80212e4:	e001      	b.n	80212ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80212e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80212ea:	4618      	mov	r0, r3
 80212ec:	3720      	adds	r7, #32
 80212ee:	46bd      	mov	sp, r7
 80212f0:	bd80      	pop	{r7, pc}
 80212f2:	bf00      	nop
 80212f4:	2400001c 	.word	0x2400001c
 80212f8:	10624dd3 	.word	0x10624dd3
 80212fc:	00200045 	.word	0x00200045
 8021300:	002000c5 	.word	0x002000c5
 8021304:	fdffe008 	.word	0xfdffe008

08021308 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8021308:	b480      	push	{r7}
 802130a:	b085      	sub	sp, #20
 802130c:	af00      	add	r7, sp, #0
 802130e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8021310:	4b1f      	ldr	r3, [pc, #124]	@ (8021390 <SDMMC_GetCmdResp2+0x88>)
 8021312:	681b      	ldr	r3, [r3, #0]
 8021314:	4a1f      	ldr	r2, [pc, #124]	@ (8021394 <SDMMC_GetCmdResp2+0x8c>)
 8021316:	fba2 2303 	umull	r2, r3, r2, r3
 802131a:	0a5b      	lsrs	r3, r3, #9
 802131c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8021320:	fb02 f303 	mul.w	r3, r2, r3
 8021324:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8021326:	68fb      	ldr	r3, [r7, #12]
 8021328:	1e5a      	subs	r2, r3, #1
 802132a:	60fa      	str	r2, [r7, #12]
 802132c:	2b00      	cmp	r3, #0
 802132e:	d102      	bne.n	8021336 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8021330:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8021334:	e026      	b.n	8021384 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8021336:	687b      	ldr	r3, [r7, #4]
 8021338:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802133a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 802133c:	68bb      	ldr	r3, [r7, #8]
 802133e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8021342:	2b00      	cmp	r3, #0
 8021344:	d0ef      	beq.n	8021326 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8021346:	68bb      	ldr	r3, [r7, #8]
 8021348:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 802134c:	2b00      	cmp	r3, #0
 802134e:	d1ea      	bne.n	8021326 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8021350:	687b      	ldr	r3, [r7, #4]
 8021352:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8021354:	f003 0304 	and.w	r3, r3, #4
 8021358:	2b00      	cmp	r3, #0
 802135a:	d004      	beq.n	8021366 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 802135c:	687b      	ldr	r3, [r7, #4]
 802135e:	2204      	movs	r2, #4
 8021360:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8021362:	2304      	movs	r3, #4
 8021364:	e00e      	b.n	8021384 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8021366:	687b      	ldr	r3, [r7, #4]
 8021368:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802136a:	f003 0301 	and.w	r3, r3, #1
 802136e:	2b00      	cmp	r3, #0
 8021370:	d004      	beq.n	802137c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8021372:	687b      	ldr	r3, [r7, #4]
 8021374:	2201      	movs	r2, #1
 8021376:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8021378:	2301      	movs	r3, #1
 802137a:	e003      	b.n	8021384 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 802137c:	687b      	ldr	r3, [r7, #4]
 802137e:	4a06      	ldr	r2, [pc, #24]	@ (8021398 <SDMMC_GetCmdResp2+0x90>)
 8021380:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8021382:	2300      	movs	r3, #0
}
 8021384:	4618      	mov	r0, r3
 8021386:	3714      	adds	r7, #20
 8021388:	46bd      	mov	sp, r7
 802138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802138e:	4770      	bx	lr
 8021390:	2400001c 	.word	0x2400001c
 8021394:	10624dd3 	.word	0x10624dd3
 8021398:	002000c5 	.word	0x002000c5

0802139c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 802139c:	b480      	push	{r7}
 802139e:	b085      	sub	sp, #20
 80213a0:	af00      	add	r7, sp, #0
 80213a2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80213a4:	4b1a      	ldr	r3, [pc, #104]	@ (8021410 <SDMMC_GetCmdResp3+0x74>)
 80213a6:	681b      	ldr	r3, [r3, #0]
 80213a8:	4a1a      	ldr	r2, [pc, #104]	@ (8021414 <SDMMC_GetCmdResp3+0x78>)
 80213aa:	fba2 2303 	umull	r2, r3, r2, r3
 80213ae:	0a5b      	lsrs	r3, r3, #9
 80213b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80213b4:	fb02 f303 	mul.w	r3, r2, r3
 80213b8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80213ba:	68fb      	ldr	r3, [r7, #12]
 80213bc:	1e5a      	subs	r2, r3, #1
 80213be:	60fa      	str	r2, [r7, #12]
 80213c0:	2b00      	cmp	r3, #0
 80213c2:	d102      	bne.n	80213ca <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80213c4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80213c8:	e01b      	b.n	8021402 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80213ca:	687b      	ldr	r3, [r7, #4]
 80213cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80213ce:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80213d0:	68bb      	ldr	r3, [r7, #8]
 80213d2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80213d6:	2b00      	cmp	r3, #0
 80213d8:	d0ef      	beq.n	80213ba <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80213da:	68bb      	ldr	r3, [r7, #8]
 80213dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80213e0:	2b00      	cmp	r3, #0
 80213e2:	d1ea      	bne.n	80213ba <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80213e4:	687b      	ldr	r3, [r7, #4]
 80213e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80213e8:	f003 0304 	and.w	r3, r3, #4
 80213ec:	2b00      	cmp	r3, #0
 80213ee:	d004      	beq.n	80213fa <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80213f0:	687b      	ldr	r3, [r7, #4]
 80213f2:	2204      	movs	r2, #4
 80213f4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80213f6:	2304      	movs	r3, #4
 80213f8:	e003      	b.n	8021402 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80213fa:	687b      	ldr	r3, [r7, #4]
 80213fc:	4a06      	ldr	r2, [pc, #24]	@ (8021418 <SDMMC_GetCmdResp3+0x7c>)
 80213fe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8021400:	2300      	movs	r3, #0
}
 8021402:	4618      	mov	r0, r3
 8021404:	3714      	adds	r7, #20
 8021406:	46bd      	mov	sp, r7
 8021408:	f85d 7b04 	ldr.w	r7, [sp], #4
 802140c:	4770      	bx	lr
 802140e:	bf00      	nop
 8021410:	2400001c 	.word	0x2400001c
 8021414:	10624dd3 	.word	0x10624dd3
 8021418:	002000c5 	.word	0x002000c5

0802141c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 802141c:	b580      	push	{r7, lr}
 802141e:	b088      	sub	sp, #32
 8021420:	af00      	add	r7, sp, #0
 8021422:	60f8      	str	r0, [r7, #12]
 8021424:	460b      	mov	r3, r1
 8021426:	607a      	str	r2, [r7, #4]
 8021428:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 802142a:	4b35      	ldr	r3, [pc, #212]	@ (8021500 <SDMMC_GetCmdResp6+0xe4>)
 802142c:	681b      	ldr	r3, [r3, #0]
 802142e:	4a35      	ldr	r2, [pc, #212]	@ (8021504 <SDMMC_GetCmdResp6+0xe8>)
 8021430:	fba2 2303 	umull	r2, r3, r2, r3
 8021434:	0a5b      	lsrs	r3, r3, #9
 8021436:	f241 3288 	movw	r2, #5000	@ 0x1388
 802143a:	fb02 f303 	mul.w	r3, r2, r3
 802143e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8021440:	69fb      	ldr	r3, [r7, #28]
 8021442:	1e5a      	subs	r2, r3, #1
 8021444:	61fa      	str	r2, [r7, #28]
 8021446:	2b00      	cmp	r3, #0
 8021448:	d102      	bne.n	8021450 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 802144a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 802144e:	e052      	b.n	80214f6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8021450:	68fb      	ldr	r3, [r7, #12]
 8021452:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8021454:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8021456:	69bb      	ldr	r3, [r7, #24]
 8021458:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 802145c:	2b00      	cmp	r3, #0
 802145e:	d0ef      	beq.n	8021440 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8021460:	69bb      	ldr	r3, [r7, #24]
 8021462:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8021466:	2b00      	cmp	r3, #0
 8021468:	d1ea      	bne.n	8021440 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 802146a:	68fb      	ldr	r3, [r7, #12]
 802146c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802146e:	f003 0304 	and.w	r3, r3, #4
 8021472:	2b00      	cmp	r3, #0
 8021474:	d004      	beq.n	8021480 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8021476:	68fb      	ldr	r3, [r7, #12]
 8021478:	2204      	movs	r2, #4
 802147a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 802147c:	2304      	movs	r3, #4
 802147e:	e03a      	b.n	80214f6 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8021480:	68fb      	ldr	r3, [r7, #12]
 8021482:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8021484:	f003 0301 	and.w	r3, r3, #1
 8021488:	2b00      	cmp	r3, #0
 802148a:	d004      	beq.n	8021496 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 802148c:	68fb      	ldr	r3, [r7, #12]
 802148e:	2201      	movs	r2, #1
 8021490:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8021492:	2301      	movs	r3, #1
 8021494:	e02f      	b.n	80214f6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8021496:	68f8      	ldr	r0, [r7, #12]
 8021498:	f7ff fb7c 	bl	8020b94 <SDMMC_GetCommandResponse>
 802149c:	4603      	mov	r3, r0
 802149e:	461a      	mov	r2, r3
 80214a0:	7afb      	ldrb	r3, [r7, #11]
 80214a2:	4293      	cmp	r3, r2
 80214a4:	d001      	beq.n	80214aa <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80214a6:	2301      	movs	r3, #1
 80214a8:	e025      	b.n	80214f6 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80214aa:	68fb      	ldr	r3, [r7, #12]
 80214ac:	4a16      	ldr	r2, [pc, #88]	@ (8021508 <SDMMC_GetCmdResp6+0xec>)
 80214ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80214b0:	2100      	movs	r1, #0
 80214b2:	68f8      	ldr	r0, [r7, #12]
 80214b4:	f7ff fb7b 	bl	8020bae <SDMMC_GetResponse>
 80214b8:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 80214ba:	697b      	ldr	r3, [r7, #20]
 80214bc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80214c0:	2b00      	cmp	r3, #0
 80214c2:	d106      	bne.n	80214d2 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 80214c4:	697b      	ldr	r3, [r7, #20]
 80214c6:	0c1b      	lsrs	r3, r3, #16
 80214c8:	b29a      	uxth	r2, r3
 80214ca:	687b      	ldr	r3, [r7, #4]
 80214cc:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80214ce:	2300      	movs	r3, #0
 80214d0:	e011      	b.n	80214f6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80214d2:	697b      	ldr	r3, [r7, #20]
 80214d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80214d8:	2b00      	cmp	r3, #0
 80214da:	d002      	beq.n	80214e2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80214dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80214e0:	e009      	b.n	80214f6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80214e2:	697b      	ldr	r3, [r7, #20]
 80214e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80214e8:	2b00      	cmp	r3, #0
 80214ea:	d002      	beq.n	80214f2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80214ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80214f0:	e001      	b.n	80214f6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80214f2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80214f6:	4618      	mov	r0, r3
 80214f8:	3720      	adds	r7, #32
 80214fa:	46bd      	mov	sp, r7
 80214fc:	bd80      	pop	{r7, pc}
 80214fe:	bf00      	nop
 8021500:	2400001c 	.word	0x2400001c
 8021504:	10624dd3 	.word	0x10624dd3
 8021508:	002000c5 	.word	0x002000c5

0802150c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 802150c:	b480      	push	{r7}
 802150e:	b085      	sub	sp, #20
 8021510:	af00      	add	r7, sp, #0
 8021512:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8021514:	4b22      	ldr	r3, [pc, #136]	@ (80215a0 <SDMMC_GetCmdResp7+0x94>)
 8021516:	681b      	ldr	r3, [r3, #0]
 8021518:	4a22      	ldr	r2, [pc, #136]	@ (80215a4 <SDMMC_GetCmdResp7+0x98>)
 802151a:	fba2 2303 	umull	r2, r3, r2, r3
 802151e:	0a5b      	lsrs	r3, r3, #9
 8021520:	f241 3288 	movw	r2, #5000	@ 0x1388
 8021524:	fb02 f303 	mul.w	r3, r2, r3
 8021528:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 802152a:	68fb      	ldr	r3, [r7, #12]
 802152c:	1e5a      	subs	r2, r3, #1
 802152e:	60fa      	str	r2, [r7, #12]
 8021530:	2b00      	cmp	r3, #0
 8021532:	d102      	bne.n	802153a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8021534:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8021538:	e02c      	b.n	8021594 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 802153a:	687b      	ldr	r3, [r7, #4]
 802153c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802153e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8021540:	68bb      	ldr	r3, [r7, #8]
 8021542:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8021546:	2b00      	cmp	r3, #0
 8021548:	d0ef      	beq.n	802152a <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 802154a:	68bb      	ldr	r3, [r7, #8]
 802154c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8021550:	2b00      	cmp	r3, #0
 8021552:	d1ea      	bne.n	802152a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8021554:	687b      	ldr	r3, [r7, #4]
 8021556:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8021558:	f003 0304 	and.w	r3, r3, #4
 802155c:	2b00      	cmp	r3, #0
 802155e:	d004      	beq.n	802156a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8021560:	687b      	ldr	r3, [r7, #4]
 8021562:	2204      	movs	r2, #4
 8021564:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8021566:	2304      	movs	r3, #4
 8021568:	e014      	b.n	8021594 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 802156a:	687b      	ldr	r3, [r7, #4]
 802156c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802156e:	f003 0301 	and.w	r3, r3, #1
 8021572:	2b00      	cmp	r3, #0
 8021574:	d004      	beq.n	8021580 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8021576:	687b      	ldr	r3, [r7, #4]
 8021578:	2201      	movs	r2, #1
 802157a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 802157c:	2301      	movs	r3, #1
 802157e:	e009      	b.n	8021594 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8021580:	687b      	ldr	r3, [r7, #4]
 8021582:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8021584:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8021588:	2b00      	cmp	r3, #0
 802158a:	d002      	beq.n	8021592 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 802158c:	687b      	ldr	r3, [r7, #4]
 802158e:	2240      	movs	r2, #64	@ 0x40
 8021590:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8021592:	2300      	movs	r3, #0

}
 8021594:	4618      	mov	r0, r3
 8021596:	3714      	adds	r7, #20
 8021598:	46bd      	mov	sp, r7
 802159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802159e:	4770      	bx	lr
 80215a0:	2400001c 	.word	0x2400001c
 80215a4:	10624dd3 	.word	0x10624dd3

080215a8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80215a8:	b480      	push	{r7}
 80215aa:	b085      	sub	sp, #20
 80215ac:	af00      	add	r7, sp, #0
 80215ae:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80215b0:	4b11      	ldr	r3, [pc, #68]	@ (80215f8 <SDMMC_GetCmdError+0x50>)
 80215b2:	681b      	ldr	r3, [r3, #0]
 80215b4:	4a11      	ldr	r2, [pc, #68]	@ (80215fc <SDMMC_GetCmdError+0x54>)
 80215b6:	fba2 2303 	umull	r2, r3, r2, r3
 80215ba:	0a5b      	lsrs	r3, r3, #9
 80215bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80215c0:	fb02 f303 	mul.w	r3, r2, r3
 80215c4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80215c6:	68fb      	ldr	r3, [r7, #12]
 80215c8:	1e5a      	subs	r2, r3, #1
 80215ca:	60fa      	str	r2, [r7, #12]
 80215cc:	2b00      	cmp	r3, #0
 80215ce:	d102      	bne.n	80215d6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80215d0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80215d4:	e009      	b.n	80215ea <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80215d6:	687b      	ldr	r3, [r7, #4]
 80215d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80215da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80215de:	2b00      	cmp	r3, #0
 80215e0:	d0f1      	beq.n	80215c6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80215e2:	687b      	ldr	r3, [r7, #4]
 80215e4:	4a06      	ldr	r2, [pc, #24]	@ (8021600 <SDMMC_GetCmdError+0x58>)
 80215e6:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 80215e8:	2300      	movs	r3, #0
}
 80215ea:	4618      	mov	r0, r3
 80215ec:	3714      	adds	r7, #20
 80215ee:	46bd      	mov	sp, r7
 80215f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80215f4:	4770      	bx	lr
 80215f6:	bf00      	nop
 80215f8:	2400001c 	.word	0x2400001c
 80215fc:	10624dd3 	.word	0x10624dd3
 8021600:	002000c5 	.word	0x002000c5

08021604 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8021604:	b580      	push	{r7, lr}
 8021606:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8021608:	4904      	ldr	r1, [pc, #16]	@ (802161c <MX_FATFS_Init+0x18>)
 802160a:	4805      	ldr	r0, [pc, #20]	@ (8021620 <MX_FATFS_Init+0x1c>)
 802160c:	f002 fc08 	bl	8023e20 <FATFS_LinkDriver>
 8021610:	4603      	mov	r3, r0
 8021612:	461a      	mov	r2, r3
 8021614:	4b03      	ldr	r3, [pc, #12]	@ (8021624 <MX_FATFS_Init+0x20>)
 8021616:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8021618:	bf00      	nop
 802161a:	bd80      	pop	{r7, pc}
 802161c:	2400041c 	.word	0x2400041c
 8021620:	08026a00 	.word	0x08026a00
 8021624:	24000418 	.word	0x24000418

08021628 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8021628:	b480      	push	{r7}
 802162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 802162c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 802162e:	4618      	mov	r0, r3
 8021630:	46bd      	mov	sp, r7
 8021632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021636:	4770      	bx	lr

08021638 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8021638:	b580      	push	{r7, lr}
 802163a:	b086      	sub	sp, #24
 802163c:	af00      	add	r7, sp, #0
 802163e:	60f8      	str	r0, [r7, #12]
 8021640:	60b9      	str	r1, [r7, #8]
 8021642:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8021644:	2300      	movs	r3, #0
 8021646:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8021648:	687b      	ldr	r3, [r7, #4]
 802164a:	68ba      	ldr	r2, [r7, #8]
 802164c:	68f9      	ldr	r1, [r7, #12]
 802164e:	4806      	ldr	r0, [pc, #24]	@ (8021668 <BSP_SD_ReadBlocks_DMA+0x30>)
 8021650:	f7fc fc16 	bl	801de80 <HAL_SD_ReadBlocks_DMA>
 8021654:	4603      	mov	r3, r0
 8021656:	2b00      	cmp	r3, #0
 8021658:	d001      	beq.n	802165e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 802165a:	2301      	movs	r3, #1
 802165c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 802165e:	7dfb      	ldrb	r3, [r7, #23]
}
 8021660:	4618      	mov	r0, r3
 8021662:	3718      	adds	r7, #24
 8021664:	46bd      	mov	sp, r7
 8021666:	bd80      	pop	{r7, pc}
 8021668:	240002f8 	.word	0x240002f8

0802166c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 802166c:	b580      	push	{r7, lr}
 802166e:	b086      	sub	sp, #24
 8021670:	af00      	add	r7, sp, #0
 8021672:	60f8      	str	r0, [r7, #12]
 8021674:	60b9      	str	r1, [r7, #8]
 8021676:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8021678:	2300      	movs	r3, #0
 802167a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 802167c:	687b      	ldr	r3, [r7, #4]
 802167e:	68ba      	ldr	r2, [r7, #8]
 8021680:	68f9      	ldr	r1, [r7, #12]
 8021682:	4806      	ldr	r0, [pc, #24]	@ (802169c <BSP_SD_WriteBlocks_DMA+0x30>)
 8021684:	f7fc fca4 	bl	801dfd0 <HAL_SD_WriteBlocks_DMA>
 8021688:	4603      	mov	r3, r0
 802168a:	2b00      	cmp	r3, #0
 802168c:	d001      	beq.n	8021692 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 802168e:	2301      	movs	r3, #1
 8021690:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8021692:	7dfb      	ldrb	r3, [r7, #23]
}
 8021694:	4618      	mov	r0, r3
 8021696:	3718      	adds	r7, #24
 8021698:	46bd      	mov	sp, r7
 802169a:	bd80      	pop	{r7, pc}
 802169c:	240002f8 	.word	0x240002f8

080216a0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80216a0:	b580      	push	{r7, lr}
 80216a2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80216a4:	4805      	ldr	r0, [pc, #20]	@ (80216bc <BSP_SD_GetCardState+0x1c>)
 80216a6:	f7fd fa9d 	bl	801ebe4 <HAL_SD_GetCardState>
 80216aa:	4603      	mov	r3, r0
 80216ac:	2b04      	cmp	r3, #4
 80216ae:	bf14      	ite	ne
 80216b0:	2301      	movne	r3, #1
 80216b2:	2300      	moveq	r3, #0
 80216b4:	b2db      	uxtb	r3, r3
}
 80216b6:	4618      	mov	r0, r3
 80216b8:	bd80      	pop	{r7, pc}
 80216ba:	bf00      	nop
 80216bc:	240002f8 	.word	0x240002f8

080216c0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80216c0:	b580      	push	{r7, lr}
 80216c2:	b082      	sub	sp, #8
 80216c4:	af00      	add	r7, sp, #0
 80216c6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80216c8:	6879      	ldr	r1, [r7, #4]
 80216ca:	4803      	ldr	r0, [pc, #12]	@ (80216d8 <BSP_SD_GetCardInfo+0x18>)
 80216cc:	f7fd f94c 	bl	801e968 <HAL_SD_GetCardInfo>
}
 80216d0:	bf00      	nop
 80216d2:	3708      	adds	r7, #8
 80216d4:	46bd      	mov	sp, r7
 80216d6:	bd80      	pop	{r7, pc}
 80216d8:	240002f8 	.word	0x240002f8

080216dc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80216dc:	b580      	push	{r7, lr}
 80216de:	b082      	sub	sp, #8
 80216e0:	af00      	add	r7, sp, #0
 80216e2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80216e4:	f000 fa14 	bl	8021b10 <BSP_SD_WriteCpltCallback>
}
 80216e8:	bf00      	nop
 80216ea:	3708      	adds	r7, #8
 80216ec:	46bd      	mov	sp, r7
 80216ee:	bd80      	pop	{r7, pc}

080216f0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80216f0:	b580      	push	{r7, lr}
 80216f2:	b082      	sub	sp, #8
 80216f4:	af00      	add	r7, sp, #0
 80216f6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80216f8:	f000 fa16 	bl	8021b28 <BSP_SD_ReadCpltCallback>
}
 80216fc:	bf00      	nop
 80216fe:	3708      	adds	r7, #8
 8021700:	46bd      	mov	sp, r7
 8021702:	bd80      	pop	{r7, pc}

08021704 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8021704:	b580      	push	{r7, lr}
 8021706:	b084      	sub	sp, #16
 8021708:	af00      	add	r7, sp, #0
 802170a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 802170c:	f7f5 fe7a 	bl	8017404 <HAL_GetTick>
 8021710:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8021712:	e006      	b.n	8021722 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8021714:	f7ff ffc4 	bl	80216a0 <BSP_SD_GetCardState>
 8021718:	4603      	mov	r3, r0
 802171a:	2b00      	cmp	r3, #0
 802171c:	d101      	bne.n	8021722 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 802171e:	2300      	movs	r3, #0
 8021720:	e009      	b.n	8021736 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8021722:	f7f5 fe6f 	bl	8017404 <HAL_GetTick>
 8021726:	4602      	mov	r2, r0
 8021728:	68fb      	ldr	r3, [r7, #12]
 802172a:	1ad3      	subs	r3, r2, r3
 802172c:	687a      	ldr	r2, [r7, #4]
 802172e:	429a      	cmp	r2, r3
 8021730:	d8f0      	bhi.n	8021714 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8021732:	f04f 33ff 	mov.w	r3, #4294967295
}
 8021736:	4618      	mov	r0, r3
 8021738:	3710      	adds	r7, #16
 802173a:	46bd      	mov	sp, r7
 802173c:	bd80      	pop	{r7, pc}
	...

08021740 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8021740:	b580      	push	{r7, lr}
 8021742:	b082      	sub	sp, #8
 8021744:	af00      	add	r7, sp, #0
 8021746:	4603      	mov	r3, r0
 8021748:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 802174a:	4b0b      	ldr	r3, [pc, #44]	@ (8021778 <SD_CheckStatus+0x38>)
 802174c:	2201      	movs	r2, #1
 802174e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8021750:	f7ff ffa6 	bl	80216a0 <BSP_SD_GetCardState>
 8021754:	4603      	mov	r3, r0
 8021756:	2b00      	cmp	r3, #0
 8021758:	d107      	bne.n	802176a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 802175a:	4b07      	ldr	r3, [pc, #28]	@ (8021778 <SD_CheckStatus+0x38>)
 802175c:	781b      	ldrb	r3, [r3, #0]
 802175e:	b2db      	uxtb	r3, r3
 8021760:	f023 0301 	bic.w	r3, r3, #1
 8021764:	b2da      	uxtb	r2, r3
 8021766:	4b04      	ldr	r3, [pc, #16]	@ (8021778 <SD_CheckStatus+0x38>)
 8021768:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 802176a:	4b03      	ldr	r3, [pc, #12]	@ (8021778 <SD_CheckStatus+0x38>)
 802176c:	781b      	ldrb	r3, [r3, #0]
 802176e:	b2db      	uxtb	r3, r3
}
 8021770:	4618      	mov	r0, r3
 8021772:	3708      	adds	r7, #8
 8021774:	46bd      	mov	sp, r7
 8021776:	bd80      	pop	{r7, pc}
 8021778:	24000029 	.word	0x24000029

0802177c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 802177c:	b580      	push	{r7, lr}
 802177e:	b082      	sub	sp, #8
 8021780:	af00      	add	r7, sp, #0
 8021782:	4603      	mov	r3, r0
 8021784:	71fb      	strb	r3, [r7, #7]
  {
    Stat = SD_CheckStatus(lun);
  }

#else
  Stat = SD_CheckStatus(lun);
 8021786:	79fb      	ldrb	r3, [r7, #7]
 8021788:	4618      	mov	r0, r3
 802178a:	f7ff ffd9 	bl	8021740 <SD_CheckStatus>
 802178e:	4603      	mov	r3, r0
 8021790:	461a      	mov	r2, r3
 8021792:	4b04      	ldr	r3, [pc, #16]	@ (80217a4 <SD_initialize+0x28>)
 8021794:	701a      	strb	r2, [r3, #0]
#endif

  return Stat;
 8021796:	4b03      	ldr	r3, [pc, #12]	@ (80217a4 <SD_initialize+0x28>)
 8021798:	781b      	ldrb	r3, [r3, #0]
 802179a:	b2db      	uxtb	r3, r3
}
 802179c:	4618      	mov	r0, r3
 802179e:	3708      	adds	r7, #8
 80217a0:	46bd      	mov	sp, r7
 80217a2:	bd80      	pop	{r7, pc}
 80217a4:	24000029 	.word	0x24000029

080217a8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80217a8:	b580      	push	{r7, lr}
 80217aa:	b082      	sub	sp, #8
 80217ac:	af00      	add	r7, sp, #0
 80217ae:	4603      	mov	r3, r0
 80217b0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80217b2:	79fb      	ldrb	r3, [r7, #7]
 80217b4:	4618      	mov	r0, r3
 80217b6:	f7ff ffc3 	bl	8021740 <SD_CheckStatus>
 80217ba:	4603      	mov	r3, r0
}
 80217bc:	4618      	mov	r0, r3
 80217be:	3708      	adds	r7, #8
 80217c0:	46bd      	mov	sp, r7
 80217c2:	bd80      	pop	{r7, pc}

080217c4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80217c4:	b580      	push	{r7, lr}
 80217c6:	b088      	sub	sp, #32
 80217c8:	af00      	add	r7, sp, #0
 80217ca:	60b9      	str	r1, [r7, #8]
 80217cc:	607a      	str	r2, [r7, #4]
 80217ce:	603b      	str	r3, [r7, #0]
 80217d0:	4603      	mov	r3, r0
 80217d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80217d4:	2301      	movs	r3, #1
 80217d6:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80217d8:	f247 5030 	movw	r0, #30000	@ 0x7530
 80217dc:	f7ff ff92 	bl	8021704 <SD_CheckStatusWithTimeout>
 80217e0:	4603      	mov	r3, r0
 80217e2:	2b00      	cmp	r3, #0
 80217e4:	da01      	bge.n	80217ea <SD_read+0x26>
  {
    return res;
 80217e6:	7ffb      	ldrb	r3, [r7, #31]
 80217e8:	e08b      	b.n	8021902 <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 80217ea:	68bb      	ldr	r3, [r7, #8]
 80217ec:	f003 0303 	and.w	r3, r3, #3
 80217f0:	2b00      	cmp	r3, #0
 80217f2:	d13b      	bne.n	802186c <SD_read+0xa8>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80217f4:	683a      	ldr	r2, [r7, #0]
 80217f6:	6879      	ldr	r1, [r7, #4]
 80217f8:	68b8      	ldr	r0, [r7, #8]
 80217fa:	f7ff ff1d 	bl	8021638 <BSP_SD_ReadBlocks_DMA>
 80217fe:	4603      	mov	r3, r0
 8021800:	2b00      	cmp	r3, #0
 8021802:	d17d      	bne.n	8021900 <SD_read+0x13c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8021804:	4b41      	ldr	r3, [pc, #260]	@ (802190c <SD_read+0x148>)
 8021806:	2200      	movs	r2, #0
 8021808:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 802180a:	f7f5 fdfb 	bl	8017404 <HAL_GetTick>
 802180e:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8021810:	bf00      	nop
 8021812:	4b3e      	ldr	r3, [pc, #248]	@ (802190c <SD_read+0x148>)
 8021814:	681b      	ldr	r3, [r3, #0]
 8021816:	2b00      	cmp	r3, #0
 8021818:	d108      	bne.n	802182c <SD_read+0x68>
 802181a:	f7f5 fdf3 	bl	8017404 <HAL_GetTick>
 802181e:	4602      	mov	r2, r0
 8021820:	697b      	ldr	r3, [r7, #20]
 8021822:	1ad3      	subs	r3, r2, r3
 8021824:	f247 522f 	movw	r2, #29999	@ 0x752f
 8021828:	4293      	cmp	r3, r2
 802182a:	d9f2      	bls.n	8021812 <SD_read+0x4e>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 802182c:	4b37      	ldr	r3, [pc, #220]	@ (802190c <SD_read+0x148>)
 802182e:	681b      	ldr	r3, [r3, #0]
 8021830:	2b00      	cmp	r3, #0
 8021832:	d102      	bne.n	802183a <SD_read+0x76>
      {
        res = RES_ERROR;
 8021834:	2301      	movs	r3, #1
 8021836:	77fb      	strb	r3, [r7, #31]
 8021838:	e062      	b.n	8021900 <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 802183a:	4b34      	ldr	r3, [pc, #208]	@ (802190c <SD_read+0x148>)
 802183c:	2200      	movs	r2, #0
 802183e:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8021840:	f7f5 fde0 	bl	8017404 <HAL_GetTick>
 8021844:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8021846:	e007      	b.n	8021858 <SD_read+0x94>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8021848:	f7ff ff2a 	bl	80216a0 <BSP_SD_GetCardState>
 802184c:	4603      	mov	r3, r0
 802184e:	2b00      	cmp	r3, #0
 8021850:	d102      	bne.n	8021858 <SD_read+0x94>
          {
            res = RES_OK;
 8021852:	2300      	movs	r3, #0
 8021854:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8021856:	e053      	b.n	8021900 <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8021858:	f7f5 fdd4 	bl	8017404 <HAL_GetTick>
 802185c:	4602      	mov	r2, r0
 802185e:	697b      	ldr	r3, [r7, #20]
 8021860:	1ad3      	subs	r3, r2, r3
 8021862:	f247 522f 	movw	r2, #29999	@ 0x752f
 8021866:	4293      	cmp	r3, r2
 8021868:	d9ee      	bls.n	8021848 <SD_read+0x84>
 802186a:	e049      	b.n	8021900 <SD_read+0x13c>
    else
    {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 802186c:	2300      	movs	r3, #0
 802186e:	61bb      	str	r3, [r7, #24]
 8021870:	e037      	b.n	80218e2 <SD_read+0x11e>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8021872:	687b      	ldr	r3, [r7, #4]
 8021874:	1c5a      	adds	r2, r3, #1
 8021876:	607a      	str	r2, [r7, #4]
 8021878:	2201      	movs	r2, #1
 802187a:	4619      	mov	r1, r3
 802187c:	4824      	ldr	r0, [pc, #144]	@ (8021910 <SD_read+0x14c>)
 802187e:	f7ff fedb 	bl	8021638 <BSP_SD_ReadBlocks_DMA>
 8021882:	4603      	mov	r3, r0
 8021884:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 8021886:	7fbb      	ldrb	r3, [r7, #30]
 8021888:	2b00      	cmp	r3, #0
 802188a:	d12f      	bne.n	80218ec <SD_read+0x128>
          /* wait until the read is successful or a timeout occurs */

          timeout = HAL_GetTick();
 802188c:	f7f5 fdba 	bl	8017404 <HAL_GetTick>
 8021890:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8021892:	bf00      	nop
 8021894:	4b1d      	ldr	r3, [pc, #116]	@ (802190c <SD_read+0x148>)
 8021896:	681b      	ldr	r3, [r3, #0]
 8021898:	2b00      	cmp	r3, #0
 802189a:	d108      	bne.n	80218ae <SD_read+0xea>
 802189c:	f7f5 fdb2 	bl	8017404 <HAL_GetTick>
 80218a0:	4602      	mov	r2, r0
 80218a2:	697b      	ldr	r3, [r7, #20]
 80218a4:	1ad3      	subs	r3, r2, r3
 80218a6:	f247 522f 	movw	r2, #29999	@ 0x752f
 80218aa:	4293      	cmp	r3, r2
 80218ac:	d9f2      	bls.n	8021894 <SD_read+0xd0>
          {
          }
          if (ReadStatus == 0)
 80218ae:	4b17      	ldr	r3, [pc, #92]	@ (802190c <SD_read+0x148>)
 80218b0:	681b      	ldr	r3, [r3, #0]
 80218b2:	2b00      	cmp	r3, #0
 80218b4:	d102      	bne.n	80218bc <SD_read+0xf8>
          {
            res = RES_ERROR;
 80218b6:	2301      	movs	r3, #1
 80218b8:	77fb      	strb	r3, [r7, #31]
            break;
 80218ba:	e018      	b.n	80218ee <SD_read+0x12a>
          }
          ReadStatus = 0;
 80218bc:	4b13      	ldr	r3, [pc, #76]	@ (802190c <SD_read+0x148>)
 80218be:	2200      	movs	r2, #0
 80218c0:	601a      	str	r2, [r3, #0]
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 80218c2:	68bb      	ldr	r3, [r7, #8]
 80218c4:	4a12      	ldr	r2, [pc, #72]	@ (8021910 <SD_read+0x14c>)
 80218c6:	4618      	mov	r0, r3
 80218c8:	4611      	mov	r1, r2
 80218ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80218ce:	461a      	mov	r2, r3
 80218d0:	f003 fadb 	bl	8024e8a <memcpy>
          buff += BLOCKSIZE;
 80218d4:	68bb      	ldr	r3, [r7, #8]
 80218d6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80218da:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 80218dc:	69bb      	ldr	r3, [r7, #24]
 80218de:	3301      	adds	r3, #1
 80218e0:	61bb      	str	r3, [r7, #24]
 80218e2:	69bb      	ldr	r3, [r7, #24]
 80218e4:	683a      	ldr	r2, [r7, #0]
 80218e6:	429a      	cmp	r2, r3
 80218e8:	d8c3      	bhi.n	8021872 <SD_read+0xae>
 80218ea:	e000      	b.n	80218ee <SD_read+0x12a>
        }
        else
        {
          break;
 80218ec:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 80218ee:	69bb      	ldr	r3, [r7, #24]
 80218f0:	683a      	ldr	r2, [r7, #0]
 80218f2:	429a      	cmp	r2, r3
 80218f4:	d104      	bne.n	8021900 <SD_read+0x13c>
 80218f6:	7fbb      	ldrb	r3, [r7, #30]
 80218f8:	2b00      	cmp	r3, #0
 80218fa:	d101      	bne.n	8021900 <SD_read+0x13c>
        res = RES_OK;
 80218fc:	2300      	movs	r3, #0
 80218fe:	77fb      	strb	r3, [r7, #31]
    }
#endif

  return res;
 8021900:	7ffb      	ldrb	r3, [r7, #31]
}
 8021902:	4618      	mov	r0, r3
 8021904:	3720      	adds	r7, #32
 8021906:	46bd      	mov	sp, r7
 8021908:	bd80      	pop	{r7, pc}
 802190a:	bf00      	nop
 802190c:	24000a84 	.word	0x24000a84
 8021910:	24000880 	.word	0x24000880

08021914 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8021914:	b580      	push	{r7, lr}
 8021916:	b088      	sub	sp, #32
 8021918:	af00      	add	r7, sp, #0
 802191a:	60b9      	str	r1, [r7, #8]
 802191c:	607a      	str	r2, [r7, #4]
 802191e:	603b      	str	r3, [r7, #0]
 8021920:	4603      	mov	r3, r0
 8021922:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8021924:	2301      	movs	r3, #1
 8021926:	77fb      	strb	r3, [r7, #31]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8021928:	4b4b      	ldr	r3, [pc, #300]	@ (8021a58 <SD_write+0x144>)
 802192a:	2200      	movs	r2, #0
 802192c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 802192e:	f247 5030 	movw	r0, #30000	@ 0x7530
 8021932:	f7ff fee7 	bl	8021704 <SD_CheckStatusWithTimeout>
 8021936:	4603      	mov	r3, r0
 8021938:	2b00      	cmp	r3, #0
 802193a:	da01      	bge.n	8021940 <SD_write+0x2c>
  {
    return res;
 802193c:	7ffb      	ldrb	r3, [r7, #31]
 802193e:	e087      	b.n	8021a50 <SD_write+0x13c>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8021940:	68bb      	ldr	r3, [r7, #8]
 8021942:	f003 0303 	and.w	r3, r3, #3
 8021946:	2b00      	cmp	r3, #0
 8021948:	d138      	bne.n	80219bc <SD_write+0xa8>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 802194a:	683a      	ldr	r2, [r7, #0]
 802194c:	6879      	ldr	r1, [r7, #4]
 802194e:	68b8      	ldr	r0, [r7, #8]
 8021950:	f7ff fe8c 	bl	802166c <BSP_SD_WriteBlocks_DMA>
 8021954:	4603      	mov	r3, r0
 8021956:	2b00      	cmp	r3, #0
 8021958:	d179      	bne.n	8021a4e <SD_write+0x13a>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 802195a:	f7f5 fd53 	bl	8017404 <HAL_GetTick>
 802195e:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8021960:	bf00      	nop
 8021962:	4b3d      	ldr	r3, [pc, #244]	@ (8021a58 <SD_write+0x144>)
 8021964:	681b      	ldr	r3, [r3, #0]
 8021966:	2b00      	cmp	r3, #0
 8021968:	d108      	bne.n	802197c <SD_write+0x68>
 802196a:	f7f5 fd4b 	bl	8017404 <HAL_GetTick>
 802196e:	4602      	mov	r2, r0
 8021970:	697b      	ldr	r3, [r7, #20]
 8021972:	1ad3      	subs	r3, r2, r3
 8021974:	f247 522f 	movw	r2, #29999	@ 0x752f
 8021978:	4293      	cmp	r3, r2
 802197a:	d9f2      	bls.n	8021962 <SD_write+0x4e>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 802197c:	4b36      	ldr	r3, [pc, #216]	@ (8021a58 <SD_write+0x144>)
 802197e:	681b      	ldr	r3, [r3, #0]
 8021980:	2b00      	cmp	r3, #0
 8021982:	d102      	bne.n	802198a <SD_write+0x76>
      {
        res = RES_ERROR;
 8021984:	2301      	movs	r3, #1
 8021986:	77fb      	strb	r3, [r7, #31]
 8021988:	e061      	b.n	8021a4e <SD_write+0x13a>
      }
      else
      {
        WriteStatus = 0;
 802198a:	4b33      	ldr	r3, [pc, #204]	@ (8021a58 <SD_write+0x144>)
 802198c:	2200      	movs	r2, #0
 802198e:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8021990:	f7f5 fd38 	bl	8017404 <HAL_GetTick>
 8021994:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8021996:	e007      	b.n	80219a8 <SD_write+0x94>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8021998:	f7ff fe82 	bl	80216a0 <BSP_SD_GetCardState>
 802199c:	4603      	mov	r3, r0
 802199e:	2b00      	cmp	r3, #0
 80219a0:	d102      	bne.n	80219a8 <SD_write+0x94>
          {
            res = RES_OK;
 80219a2:	2300      	movs	r3, #0
 80219a4:	77fb      	strb	r3, [r7, #31]
            break;
 80219a6:	e052      	b.n	8021a4e <SD_write+0x13a>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80219a8:	f7f5 fd2c 	bl	8017404 <HAL_GetTick>
 80219ac:	4602      	mov	r2, r0
 80219ae:	697b      	ldr	r3, [r7, #20]
 80219b0:	1ad3      	subs	r3, r2, r3
 80219b2:	f247 522f 	movw	r2, #29999	@ 0x752f
 80219b6:	4293      	cmp	r3, r2
 80219b8:	d9ee      	bls.n	8021998 <SD_write+0x84>
 80219ba:	e048      	b.n	8021a4e <SD_write+0x13a>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 80219bc:	2300      	movs	r3, #0
 80219be:	61bb      	str	r3, [r7, #24]
 80219c0:	e034      	b.n	8021a2c <SD_write+0x118>
      {
        WriteStatus = 0;
 80219c2:	4b25      	ldr	r3, [pc, #148]	@ (8021a58 <SD_write+0x144>)
 80219c4:	2200      	movs	r2, #0
 80219c6:	601a      	str	r2, [r3, #0]

        memcpy((void *)scratch, (void *)buff, BLOCKSIZE);
 80219c8:	4a24      	ldr	r2, [pc, #144]	@ (8021a5c <SD_write+0x148>)
 80219ca:	68bb      	ldr	r3, [r7, #8]
 80219cc:	4610      	mov	r0, r2
 80219ce:	4619      	mov	r1, r3
 80219d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80219d4:	461a      	mov	r2, r3
 80219d6:	f003 fa58 	bl	8024e8a <memcpy>
        buff += BLOCKSIZE;
 80219da:	68bb      	ldr	r3, [r7, #8]
 80219dc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80219e0:	60bb      	str	r3, [r7, #8]

        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 80219e2:	687b      	ldr	r3, [r7, #4]
 80219e4:	1c5a      	adds	r2, r3, #1
 80219e6:	607a      	str	r2, [r7, #4]
 80219e8:	2201      	movs	r2, #1
 80219ea:	4619      	mov	r1, r3
 80219ec:	481b      	ldr	r0, [pc, #108]	@ (8021a5c <SD_write+0x148>)
 80219ee:	f7ff fe3d 	bl	802166c <BSP_SD_WriteBlocks_DMA>
 80219f2:	4603      	mov	r3, r0
 80219f4:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 80219f6:	7fbb      	ldrb	r3, [r7, #30]
 80219f8:	2b00      	cmp	r3, #0
 80219fa:	d11c      	bne.n	8021a36 <SD_write+0x122>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 80219fc:	f7f5 fd02 	bl	8017404 <HAL_GetTick>
 8021a00:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8021a02:	bf00      	nop
 8021a04:	4b14      	ldr	r3, [pc, #80]	@ (8021a58 <SD_write+0x144>)
 8021a06:	681b      	ldr	r3, [r3, #0]
 8021a08:	2b00      	cmp	r3, #0
 8021a0a:	d108      	bne.n	8021a1e <SD_write+0x10a>
 8021a0c:	f7f5 fcfa 	bl	8017404 <HAL_GetTick>
 8021a10:	4602      	mov	r2, r0
 8021a12:	697b      	ldr	r3, [r7, #20]
 8021a14:	1ad3      	subs	r3, r2, r3
 8021a16:	f247 522f 	movw	r2, #29999	@ 0x752f
 8021a1a:	4293      	cmp	r3, r2
 8021a1c:	d9f2      	bls.n	8021a04 <SD_write+0xf0>
          {
          }
          if (WriteStatus == 0)
 8021a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8021a58 <SD_write+0x144>)
 8021a20:	681b      	ldr	r3, [r3, #0]
 8021a22:	2b00      	cmp	r3, #0
 8021a24:	d009      	beq.n	8021a3a <SD_write+0x126>
      for (i = 0; i < count; i++)
 8021a26:	69bb      	ldr	r3, [r7, #24]
 8021a28:	3301      	adds	r3, #1
 8021a2a:	61bb      	str	r3, [r7, #24]
 8021a2c:	69bb      	ldr	r3, [r7, #24]
 8021a2e:	683a      	ldr	r2, [r7, #0]
 8021a30:	429a      	cmp	r2, r3
 8021a32:	d8c6      	bhi.n	80219c2 <SD_write+0xae>
 8021a34:	e002      	b.n	8021a3c <SD_write+0x128>
          }

        }
        else
        {
          break;
 8021a36:	bf00      	nop
 8021a38:	e000      	b.n	8021a3c <SD_write+0x128>
            break;
 8021a3a:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 8021a3c:	69bb      	ldr	r3, [r7, #24]
 8021a3e:	683a      	ldr	r2, [r7, #0]
 8021a40:	429a      	cmp	r2, r3
 8021a42:	d104      	bne.n	8021a4e <SD_write+0x13a>
 8021a44:	7fbb      	ldrb	r3, [r7, #30]
 8021a46:	2b00      	cmp	r3, #0
 8021a48:	d101      	bne.n	8021a4e <SD_write+0x13a>
        res = RES_OK;
 8021a4a:	2300      	movs	r3, #0
 8021a4c:	77fb      	strb	r3, [r7, #31]
    }
#endif
  return res;
 8021a4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8021a50:	4618      	mov	r0, r3
 8021a52:	3720      	adds	r7, #32
 8021a54:	46bd      	mov	sp, r7
 8021a56:	bd80      	pop	{r7, pc}
 8021a58:	24000a80 	.word	0x24000a80
 8021a5c:	24000880 	.word	0x24000880

08021a60 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8021a60:	b580      	push	{r7, lr}
 8021a62:	b08c      	sub	sp, #48	@ 0x30
 8021a64:	af00      	add	r7, sp, #0
 8021a66:	4603      	mov	r3, r0
 8021a68:	603a      	str	r2, [r7, #0]
 8021a6a:	71fb      	strb	r3, [r7, #7]
 8021a6c:	460b      	mov	r3, r1
 8021a6e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8021a70:	2301      	movs	r3, #1
 8021a72:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8021a76:	4b25      	ldr	r3, [pc, #148]	@ (8021b0c <SD_ioctl+0xac>)
 8021a78:	781b      	ldrb	r3, [r3, #0]
 8021a7a:	b2db      	uxtb	r3, r3
 8021a7c:	f003 0301 	and.w	r3, r3, #1
 8021a80:	2b00      	cmp	r3, #0
 8021a82:	d001      	beq.n	8021a88 <SD_ioctl+0x28>
 8021a84:	2303      	movs	r3, #3
 8021a86:	e03c      	b.n	8021b02 <SD_ioctl+0xa2>

  switch (cmd)
 8021a88:	79bb      	ldrb	r3, [r7, #6]
 8021a8a:	2b03      	cmp	r3, #3
 8021a8c:	d834      	bhi.n	8021af8 <SD_ioctl+0x98>
 8021a8e:	a201      	add	r2, pc, #4	@ (adr r2, 8021a94 <SD_ioctl+0x34>)
 8021a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021a94:	08021aa5 	.word	0x08021aa5
 8021a98:	08021aad 	.word	0x08021aad
 8021a9c:	08021ac5 	.word	0x08021ac5
 8021aa0:	08021adf 	.word	0x08021adf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8021aa4:	2300      	movs	r3, #0
 8021aa6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8021aaa:	e028      	b.n	8021afe <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8021aac:	f107 0308 	add.w	r3, r7, #8
 8021ab0:	4618      	mov	r0, r3
 8021ab2:	f7ff fe05 	bl	80216c0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8021ab6:	6a3a      	ldr	r2, [r7, #32]
 8021ab8:	683b      	ldr	r3, [r7, #0]
 8021aba:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8021abc:	2300      	movs	r3, #0
 8021abe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8021ac2:	e01c      	b.n	8021afe <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8021ac4:	f107 0308 	add.w	r3, r7, #8
 8021ac8:	4618      	mov	r0, r3
 8021aca:	f7ff fdf9 	bl	80216c0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8021ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021ad0:	b29a      	uxth	r2, r3
 8021ad2:	683b      	ldr	r3, [r7, #0]
 8021ad4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8021ad6:	2300      	movs	r3, #0
 8021ad8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8021adc:	e00f      	b.n	8021afe <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8021ade:	f107 0308 	add.w	r3, r7, #8
 8021ae2:	4618      	mov	r0, r3
 8021ae4:	f7ff fdec 	bl	80216c0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8021ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021aea:	0a5a      	lsrs	r2, r3, #9
 8021aec:	683b      	ldr	r3, [r7, #0]
 8021aee:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8021af0:	2300      	movs	r3, #0
 8021af2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8021af6:	e002      	b.n	8021afe <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8021af8:	2304      	movs	r3, #4
 8021afa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8021afe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8021b02:	4618      	mov	r0, r3
 8021b04:	3730      	adds	r7, #48	@ 0x30
 8021b06:	46bd      	mov	sp, r7
 8021b08:	bd80      	pop	{r7, pc}
 8021b0a:	bf00      	nop
 8021b0c:	24000029 	.word	0x24000029

08021b10 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8021b10:	b480      	push	{r7}
 8021b12:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8021b14:	4b03      	ldr	r3, [pc, #12]	@ (8021b24 <BSP_SD_WriteCpltCallback+0x14>)
 8021b16:	2201      	movs	r2, #1
 8021b18:	601a      	str	r2, [r3, #0]
}
 8021b1a:	bf00      	nop
 8021b1c:	46bd      	mov	sp, r7
 8021b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b22:	4770      	bx	lr
 8021b24:	24000a80 	.word	0x24000a80

08021b28 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8021b28:	b480      	push	{r7}
 8021b2a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8021b2c:	4b03      	ldr	r3, [pc, #12]	@ (8021b3c <BSP_SD_ReadCpltCallback+0x14>)
 8021b2e:	2201      	movs	r2, #1
 8021b30:	601a      	str	r2, [r3, #0]
}
 8021b32:	bf00      	nop
 8021b34:	46bd      	mov	sp, r7
 8021b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b3a:	4770      	bx	lr
 8021b3c:	24000a84 	.word	0x24000a84

08021b40 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8021b40:	b580      	push	{r7, lr}
 8021b42:	b084      	sub	sp, #16
 8021b44:	af00      	add	r7, sp, #0
 8021b46:	4603      	mov	r3, r0
 8021b48:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8021b4a:	79fb      	ldrb	r3, [r7, #7]
 8021b4c:	4a08      	ldr	r2, [pc, #32]	@ (8021b70 <disk_status+0x30>)
 8021b4e:	009b      	lsls	r3, r3, #2
 8021b50:	4413      	add	r3, r2
 8021b52:	685b      	ldr	r3, [r3, #4]
 8021b54:	685b      	ldr	r3, [r3, #4]
 8021b56:	79fa      	ldrb	r2, [r7, #7]
 8021b58:	4905      	ldr	r1, [pc, #20]	@ (8021b70 <disk_status+0x30>)
 8021b5a:	440a      	add	r2, r1
 8021b5c:	7a12      	ldrb	r2, [r2, #8]
 8021b5e:	4610      	mov	r0, r2
 8021b60:	4798      	blx	r3
 8021b62:	4603      	mov	r3, r0
 8021b64:	73fb      	strb	r3, [r7, #15]
  return stat;
 8021b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8021b68:	4618      	mov	r0, r3
 8021b6a:	3710      	adds	r7, #16
 8021b6c:	46bd      	mov	sp, r7
 8021b6e:	bd80      	pop	{r7, pc}
 8021b70:	24000ab0 	.word	0x24000ab0

08021b74 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8021b74:	b580      	push	{r7, lr}
 8021b76:	b084      	sub	sp, #16
 8021b78:	af00      	add	r7, sp, #0
 8021b7a:	4603      	mov	r3, r0
 8021b7c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8021b7e:	2300      	movs	r3, #0
 8021b80:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8021b82:	79fb      	ldrb	r3, [r7, #7]
 8021b84:	4a0e      	ldr	r2, [pc, #56]	@ (8021bc0 <disk_initialize+0x4c>)
 8021b86:	5cd3      	ldrb	r3, [r2, r3]
 8021b88:	2b00      	cmp	r3, #0
 8021b8a:	d114      	bne.n	8021bb6 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8021b8c:	79fb      	ldrb	r3, [r7, #7]
 8021b8e:	4a0c      	ldr	r2, [pc, #48]	@ (8021bc0 <disk_initialize+0x4c>)
 8021b90:	009b      	lsls	r3, r3, #2
 8021b92:	4413      	add	r3, r2
 8021b94:	685b      	ldr	r3, [r3, #4]
 8021b96:	681b      	ldr	r3, [r3, #0]
 8021b98:	79fa      	ldrb	r2, [r7, #7]
 8021b9a:	4909      	ldr	r1, [pc, #36]	@ (8021bc0 <disk_initialize+0x4c>)
 8021b9c:	440a      	add	r2, r1
 8021b9e:	7a12      	ldrb	r2, [r2, #8]
 8021ba0:	4610      	mov	r0, r2
 8021ba2:	4798      	blx	r3
 8021ba4:	4603      	mov	r3, r0
 8021ba6:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8021ba8:	7bfb      	ldrb	r3, [r7, #15]
 8021baa:	2b00      	cmp	r3, #0
 8021bac:	d103      	bne.n	8021bb6 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8021bae:	79fb      	ldrb	r3, [r7, #7]
 8021bb0:	4a03      	ldr	r2, [pc, #12]	@ (8021bc0 <disk_initialize+0x4c>)
 8021bb2:	2101      	movs	r1, #1
 8021bb4:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8021bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8021bb8:	4618      	mov	r0, r3
 8021bba:	3710      	adds	r7, #16
 8021bbc:	46bd      	mov	sp, r7
 8021bbe:	bd80      	pop	{r7, pc}
 8021bc0:	24000ab0 	.word	0x24000ab0

08021bc4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8021bc4:	b590      	push	{r4, r7, lr}
 8021bc6:	b087      	sub	sp, #28
 8021bc8:	af00      	add	r7, sp, #0
 8021bca:	60b9      	str	r1, [r7, #8]
 8021bcc:	607a      	str	r2, [r7, #4]
 8021bce:	603b      	str	r3, [r7, #0]
 8021bd0:	4603      	mov	r3, r0
 8021bd2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8021bd4:	7bfb      	ldrb	r3, [r7, #15]
 8021bd6:	4a0a      	ldr	r2, [pc, #40]	@ (8021c00 <disk_read+0x3c>)
 8021bd8:	009b      	lsls	r3, r3, #2
 8021bda:	4413      	add	r3, r2
 8021bdc:	685b      	ldr	r3, [r3, #4]
 8021bde:	689c      	ldr	r4, [r3, #8]
 8021be0:	7bfb      	ldrb	r3, [r7, #15]
 8021be2:	4a07      	ldr	r2, [pc, #28]	@ (8021c00 <disk_read+0x3c>)
 8021be4:	4413      	add	r3, r2
 8021be6:	7a18      	ldrb	r0, [r3, #8]
 8021be8:	683b      	ldr	r3, [r7, #0]
 8021bea:	687a      	ldr	r2, [r7, #4]
 8021bec:	68b9      	ldr	r1, [r7, #8]
 8021bee:	47a0      	blx	r4
 8021bf0:	4603      	mov	r3, r0
 8021bf2:	75fb      	strb	r3, [r7, #23]
  return res;
 8021bf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8021bf6:	4618      	mov	r0, r3
 8021bf8:	371c      	adds	r7, #28
 8021bfa:	46bd      	mov	sp, r7
 8021bfc:	bd90      	pop	{r4, r7, pc}
 8021bfe:	bf00      	nop
 8021c00:	24000ab0 	.word	0x24000ab0

08021c04 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8021c04:	b590      	push	{r4, r7, lr}
 8021c06:	b087      	sub	sp, #28
 8021c08:	af00      	add	r7, sp, #0
 8021c0a:	60b9      	str	r1, [r7, #8]
 8021c0c:	607a      	str	r2, [r7, #4]
 8021c0e:	603b      	str	r3, [r7, #0]
 8021c10:	4603      	mov	r3, r0
 8021c12:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8021c14:	7bfb      	ldrb	r3, [r7, #15]
 8021c16:	4a0a      	ldr	r2, [pc, #40]	@ (8021c40 <disk_write+0x3c>)
 8021c18:	009b      	lsls	r3, r3, #2
 8021c1a:	4413      	add	r3, r2
 8021c1c:	685b      	ldr	r3, [r3, #4]
 8021c1e:	68dc      	ldr	r4, [r3, #12]
 8021c20:	7bfb      	ldrb	r3, [r7, #15]
 8021c22:	4a07      	ldr	r2, [pc, #28]	@ (8021c40 <disk_write+0x3c>)
 8021c24:	4413      	add	r3, r2
 8021c26:	7a18      	ldrb	r0, [r3, #8]
 8021c28:	683b      	ldr	r3, [r7, #0]
 8021c2a:	687a      	ldr	r2, [r7, #4]
 8021c2c:	68b9      	ldr	r1, [r7, #8]
 8021c2e:	47a0      	blx	r4
 8021c30:	4603      	mov	r3, r0
 8021c32:	75fb      	strb	r3, [r7, #23]
  return res;
 8021c34:	7dfb      	ldrb	r3, [r7, #23]
}
 8021c36:	4618      	mov	r0, r3
 8021c38:	371c      	adds	r7, #28
 8021c3a:	46bd      	mov	sp, r7
 8021c3c:	bd90      	pop	{r4, r7, pc}
 8021c3e:	bf00      	nop
 8021c40:	24000ab0 	.word	0x24000ab0

08021c44 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8021c44:	b580      	push	{r7, lr}
 8021c46:	b084      	sub	sp, #16
 8021c48:	af00      	add	r7, sp, #0
 8021c4a:	4603      	mov	r3, r0
 8021c4c:	603a      	str	r2, [r7, #0]
 8021c4e:	71fb      	strb	r3, [r7, #7]
 8021c50:	460b      	mov	r3, r1
 8021c52:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8021c54:	79fb      	ldrb	r3, [r7, #7]
 8021c56:	4a09      	ldr	r2, [pc, #36]	@ (8021c7c <disk_ioctl+0x38>)
 8021c58:	009b      	lsls	r3, r3, #2
 8021c5a:	4413      	add	r3, r2
 8021c5c:	685b      	ldr	r3, [r3, #4]
 8021c5e:	691b      	ldr	r3, [r3, #16]
 8021c60:	79fa      	ldrb	r2, [r7, #7]
 8021c62:	4906      	ldr	r1, [pc, #24]	@ (8021c7c <disk_ioctl+0x38>)
 8021c64:	440a      	add	r2, r1
 8021c66:	7a10      	ldrb	r0, [r2, #8]
 8021c68:	79b9      	ldrb	r1, [r7, #6]
 8021c6a:	683a      	ldr	r2, [r7, #0]
 8021c6c:	4798      	blx	r3
 8021c6e:	4603      	mov	r3, r0
 8021c70:	73fb      	strb	r3, [r7, #15]
  return res;
 8021c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8021c74:	4618      	mov	r0, r3
 8021c76:	3710      	adds	r7, #16
 8021c78:	46bd      	mov	sp, r7
 8021c7a:	bd80      	pop	{r7, pc}
 8021c7c:	24000ab0 	.word	0x24000ab0

08021c80 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8021c80:	b480      	push	{r7}
 8021c82:	b085      	sub	sp, #20
 8021c84:	af00      	add	r7, sp, #0
 8021c86:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8021c88:	687b      	ldr	r3, [r7, #4]
 8021c8a:	3301      	adds	r3, #1
 8021c8c:	781b      	ldrb	r3, [r3, #0]
 8021c8e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8021c90:	89fb      	ldrh	r3, [r7, #14]
 8021c92:	021b      	lsls	r3, r3, #8
 8021c94:	b21a      	sxth	r2, r3
 8021c96:	687b      	ldr	r3, [r7, #4]
 8021c98:	781b      	ldrb	r3, [r3, #0]
 8021c9a:	b21b      	sxth	r3, r3
 8021c9c:	4313      	orrs	r3, r2
 8021c9e:	b21b      	sxth	r3, r3
 8021ca0:	81fb      	strh	r3, [r7, #14]
	return rv;
 8021ca2:	89fb      	ldrh	r3, [r7, #14]
}
 8021ca4:	4618      	mov	r0, r3
 8021ca6:	3714      	adds	r7, #20
 8021ca8:	46bd      	mov	sp, r7
 8021caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021cae:	4770      	bx	lr

08021cb0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8021cb0:	b480      	push	{r7}
 8021cb2:	b085      	sub	sp, #20
 8021cb4:	af00      	add	r7, sp, #0
 8021cb6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8021cb8:	687b      	ldr	r3, [r7, #4]
 8021cba:	3303      	adds	r3, #3
 8021cbc:	781b      	ldrb	r3, [r3, #0]
 8021cbe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8021cc0:	68fb      	ldr	r3, [r7, #12]
 8021cc2:	021b      	lsls	r3, r3, #8
 8021cc4:	687a      	ldr	r2, [r7, #4]
 8021cc6:	3202      	adds	r2, #2
 8021cc8:	7812      	ldrb	r2, [r2, #0]
 8021cca:	4313      	orrs	r3, r2
 8021ccc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8021cce:	68fb      	ldr	r3, [r7, #12]
 8021cd0:	021b      	lsls	r3, r3, #8
 8021cd2:	687a      	ldr	r2, [r7, #4]
 8021cd4:	3201      	adds	r2, #1
 8021cd6:	7812      	ldrb	r2, [r2, #0]
 8021cd8:	4313      	orrs	r3, r2
 8021cda:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8021cdc:	68fb      	ldr	r3, [r7, #12]
 8021cde:	021b      	lsls	r3, r3, #8
 8021ce0:	687a      	ldr	r2, [r7, #4]
 8021ce2:	7812      	ldrb	r2, [r2, #0]
 8021ce4:	4313      	orrs	r3, r2
 8021ce6:	60fb      	str	r3, [r7, #12]
	return rv;
 8021ce8:	68fb      	ldr	r3, [r7, #12]
}
 8021cea:	4618      	mov	r0, r3
 8021cec:	3714      	adds	r7, #20
 8021cee:	46bd      	mov	sp, r7
 8021cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021cf4:	4770      	bx	lr

08021cf6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8021cf6:	b480      	push	{r7}
 8021cf8:	b083      	sub	sp, #12
 8021cfa:	af00      	add	r7, sp, #0
 8021cfc:	6078      	str	r0, [r7, #4]
 8021cfe:	460b      	mov	r3, r1
 8021d00:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8021d02:	687b      	ldr	r3, [r7, #4]
 8021d04:	1c5a      	adds	r2, r3, #1
 8021d06:	607a      	str	r2, [r7, #4]
 8021d08:	887a      	ldrh	r2, [r7, #2]
 8021d0a:	b2d2      	uxtb	r2, r2
 8021d0c:	701a      	strb	r2, [r3, #0]
 8021d0e:	887b      	ldrh	r3, [r7, #2]
 8021d10:	0a1b      	lsrs	r3, r3, #8
 8021d12:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8021d14:	687b      	ldr	r3, [r7, #4]
 8021d16:	1c5a      	adds	r2, r3, #1
 8021d18:	607a      	str	r2, [r7, #4]
 8021d1a:	887a      	ldrh	r2, [r7, #2]
 8021d1c:	b2d2      	uxtb	r2, r2
 8021d1e:	701a      	strb	r2, [r3, #0]
}
 8021d20:	bf00      	nop
 8021d22:	370c      	adds	r7, #12
 8021d24:	46bd      	mov	sp, r7
 8021d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d2a:	4770      	bx	lr

08021d2c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8021d2c:	b480      	push	{r7}
 8021d2e:	b083      	sub	sp, #12
 8021d30:	af00      	add	r7, sp, #0
 8021d32:	6078      	str	r0, [r7, #4]
 8021d34:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8021d36:	687b      	ldr	r3, [r7, #4]
 8021d38:	1c5a      	adds	r2, r3, #1
 8021d3a:	607a      	str	r2, [r7, #4]
 8021d3c:	683a      	ldr	r2, [r7, #0]
 8021d3e:	b2d2      	uxtb	r2, r2
 8021d40:	701a      	strb	r2, [r3, #0]
 8021d42:	683b      	ldr	r3, [r7, #0]
 8021d44:	0a1b      	lsrs	r3, r3, #8
 8021d46:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8021d48:	687b      	ldr	r3, [r7, #4]
 8021d4a:	1c5a      	adds	r2, r3, #1
 8021d4c:	607a      	str	r2, [r7, #4]
 8021d4e:	683a      	ldr	r2, [r7, #0]
 8021d50:	b2d2      	uxtb	r2, r2
 8021d52:	701a      	strb	r2, [r3, #0]
 8021d54:	683b      	ldr	r3, [r7, #0]
 8021d56:	0a1b      	lsrs	r3, r3, #8
 8021d58:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8021d5a:	687b      	ldr	r3, [r7, #4]
 8021d5c:	1c5a      	adds	r2, r3, #1
 8021d5e:	607a      	str	r2, [r7, #4]
 8021d60:	683a      	ldr	r2, [r7, #0]
 8021d62:	b2d2      	uxtb	r2, r2
 8021d64:	701a      	strb	r2, [r3, #0]
 8021d66:	683b      	ldr	r3, [r7, #0]
 8021d68:	0a1b      	lsrs	r3, r3, #8
 8021d6a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8021d6c:	687b      	ldr	r3, [r7, #4]
 8021d6e:	1c5a      	adds	r2, r3, #1
 8021d70:	607a      	str	r2, [r7, #4]
 8021d72:	683a      	ldr	r2, [r7, #0]
 8021d74:	b2d2      	uxtb	r2, r2
 8021d76:	701a      	strb	r2, [r3, #0]
}
 8021d78:	bf00      	nop
 8021d7a:	370c      	adds	r7, #12
 8021d7c:	46bd      	mov	sp, r7
 8021d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d82:	4770      	bx	lr

08021d84 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8021d84:	b480      	push	{r7}
 8021d86:	b087      	sub	sp, #28
 8021d88:	af00      	add	r7, sp, #0
 8021d8a:	60f8      	str	r0, [r7, #12]
 8021d8c:	60b9      	str	r1, [r7, #8]
 8021d8e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8021d90:	68fb      	ldr	r3, [r7, #12]
 8021d92:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8021d94:	68bb      	ldr	r3, [r7, #8]
 8021d96:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8021d98:	687b      	ldr	r3, [r7, #4]
 8021d9a:	2b00      	cmp	r3, #0
 8021d9c:	d00d      	beq.n	8021dba <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8021d9e:	693a      	ldr	r2, [r7, #16]
 8021da0:	1c53      	adds	r3, r2, #1
 8021da2:	613b      	str	r3, [r7, #16]
 8021da4:	697b      	ldr	r3, [r7, #20]
 8021da6:	1c59      	adds	r1, r3, #1
 8021da8:	6179      	str	r1, [r7, #20]
 8021daa:	7812      	ldrb	r2, [r2, #0]
 8021dac:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8021dae:	687b      	ldr	r3, [r7, #4]
 8021db0:	3b01      	subs	r3, #1
 8021db2:	607b      	str	r3, [r7, #4]
 8021db4:	687b      	ldr	r3, [r7, #4]
 8021db6:	2b00      	cmp	r3, #0
 8021db8:	d1f1      	bne.n	8021d9e <mem_cpy+0x1a>
	}
}
 8021dba:	bf00      	nop
 8021dbc:	371c      	adds	r7, #28
 8021dbe:	46bd      	mov	sp, r7
 8021dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021dc4:	4770      	bx	lr

08021dc6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8021dc6:	b480      	push	{r7}
 8021dc8:	b087      	sub	sp, #28
 8021dca:	af00      	add	r7, sp, #0
 8021dcc:	60f8      	str	r0, [r7, #12]
 8021dce:	60b9      	str	r1, [r7, #8]
 8021dd0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8021dd2:	68fb      	ldr	r3, [r7, #12]
 8021dd4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8021dd6:	697b      	ldr	r3, [r7, #20]
 8021dd8:	1c5a      	adds	r2, r3, #1
 8021dda:	617a      	str	r2, [r7, #20]
 8021ddc:	68ba      	ldr	r2, [r7, #8]
 8021dde:	b2d2      	uxtb	r2, r2
 8021de0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8021de2:	687b      	ldr	r3, [r7, #4]
 8021de4:	3b01      	subs	r3, #1
 8021de6:	607b      	str	r3, [r7, #4]
 8021de8:	687b      	ldr	r3, [r7, #4]
 8021dea:	2b00      	cmp	r3, #0
 8021dec:	d1f3      	bne.n	8021dd6 <mem_set+0x10>
}
 8021dee:	bf00      	nop
 8021df0:	bf00      	nop
 8021df2:	371c      	adds	r7, #28
 8021df4:	46bd      	mov	sp, r7
 8021df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021dfa:	4770      	bx	lr

08021dfc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8021dfc:	b480      	push	{r7}
 8021dfe:	b089      	sub	sp, #36	@ 0x24
 8021e00:	af00      	add	r7, sp, #0
 8021e02:	60f8      	str	r0, [r7, #12]
 8021e04:	60b9      	str	r1, [r7, #8]
 8021e06:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8021e08:	68fb      	ldr	r3, [r7, #12]
 8021e0a:	61fb      	str	r3, [r7, #28]
 8021e0c:	68bb      	ldr	r3, [r7, #8]
 8021e0e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8021e10:	2300      	movs	r3, #0
 8021e12:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8021e14:	69fb      	ldr	r3, [r7, #28]
 8021e16:	1c5a      	adds	r2, r3, #1
 8021e18:	61fa      	str	r2, [r7, #28]
 8021e1a:	781b      	ldrb	r3, [r3, #0]
 8021e1c:	4619      	mov	r1, r3
 8021e1e:	69bb      	ldr	r3, [r7, #24]
 8021e20:	1c5a      	adds	r2, r3, #1
 8021e22:	61ba      	str	r2, [r7, #24]
 8021e24:	781b      	ldrb	r3, [r3, #0]
 8021e26:	1acb      	subs	r3, r1, r3
 8021e28:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8021e2a:	687b      	ldr	r3, [r7, #4]
 8021e2c:	3b01      	subs	r3, #1
 8021e2e:	607b      	str	r3, [r7, #4]
 8021e30:	687b      	ldr	r3, [r7, #4]
 8021e32:	2b00      	cmp	r3, #0
 8021e34:	d002      	beq.n	8021e3c <mem_cmp+0x40>
 8021e36:	697b      	ldr	r3, [r7, #20]
 8021e38:	2b00      	cmp	r3, #0
 8021e3a:	d0eb      	beq.n	8021e14 <mem_cmp+0x18>

	return r;
 8021e3c:	697b      	ldr	r3, [r7, #20]
}
 8021e3e:	4618      	mov	r0, r3
 8021e40:	3724      	adds	r7, #36	@ 0x24
 8021e42:	46bd      	mov	sp, r7
 8021e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e48:	4770      	bx	lr

08021e4a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8021e4a:	b480      	push	{r7}
 8021e4c:	b083      	sub	sp, #12
 8021e4e:	af00      	add	r7, sp, #0
 8021e50:	6078      	str	r0, [r7, #4]
 8021e52:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8021e54:	e002      	b.n	8021e5c <chk_chr+0x12>
 8021e56:	687b      	ldr	r3, [r7, #4]
 8021e58:	3301      	adds	r3, #1
 8021e5a:	607b      	str	r3, [r7, #4]
 8021e5c:	687b      	ldr	r3, [r7, #4]
 8021e5e:	781b      	ldrb	r3, [r3, #0]
 8021e60:	2b00      	cmp	r3, #0
 8021e62:	d005      	beq.n	8021e70 <chk_chr+0x26>
 8021e64:	687b      	ldr	r3, [r7, #4]
 8021e66:	781b      	ldrb	r3, [r3, #0]
 8021e68:	461a      	mov	r2, r3
 8021e6a:	683b      	ldr	r3, [r7, #0]
 8021e6c:	4293      	cmp	r3, r2
 8021e6e:	d1f2      	bne.n	8021e56 <chk_chr+0xc>
	return *str;
 8021e70:	687b      	ldr	r3, [r7, #4]
 8021e72:	781b      	ldrb	r3, [r3, #0]
}
 8021e74:	4618      	mov	r0, r3
 8021e76:	370c      	adds	r7, #12
 8021e78:	46bd      	mov	sp, r7
 8021e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e7e:	4770      	bx	lr

08021e80 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8021e80:	b480      	push	{r7}
 8021e82:	b085      	sub	sp, #20
 8021e84:	af00      	add	r7, sp, #0
 8021e86:	6078      	str	r0, [r7, #4]
 8021e88:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8021e8a:	2300      	movs	r3, #0
 8021e8c:	60bb      	str	r3, [r7, #8]
 8021e8e:	68bb      	ldr	r3, [r7, #8]
 8021e90:	60fb      	str	r3, [r7, #12]
 8021e92:	e029      	b.n	8021ee8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8021e94:	4a27      	ldr	r2, [pc, #156]	@ (8021f34 <chk_lock+0xb4>)
 8021e96:	68fb      	ldr	r3, [r7, #12]
 8021e98:	011b      	lsls	r3, r3, #4
 8021e9a:	4413      	add	r3, r2
 8021e9c:	681b      	ldr	r3, [r3, #0]
 8021e9e:	2b00      	cmp	r3, #0
 8021ea0:	d01d      	beq.n	8021ede <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8021ea2:	4a24      	ldr	r2, [pc, #144]	@ (8021f34 <chk_lock+0xb4>)
 8021ea4:	68fb      	ldr	r3, [r7, #12]
 8021ea6:	011b      	lsls	r3, r3, #4
 8021ea8:	4413      	add	r3, r2
 8021eaa:	681a      	ldr	r2, [r3, #0]
 8021eac:	687b      	ldr	r3, [r7, #4]
 8021eae:	681b      	ldr	r3, [r3, #0]
 8021eb0:	429a      	cmp	r2, r3
 8021eb2:	d116      	bne.n	8021ee2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8021eb4:	4a1f      	ldr	r2, [pc, #124]	@ (8021f34 <chk_lock+0xb4>)
 8021eb6:	68fb      	ldr	r3, [r7, #12]
 8021eb8:	011b      	lsls	r3, r3, #4
 8021eba:	4413      	add	r3, r2
 8021ebc:	3304      	adds	r3, #4
 8021ebe:	681a      	ldr	r2, [r3, #0]
 8021ec0:	687b      	ldr	r3, [r7, #4]
 8021ec2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8021ec4:	429a      	cmp	r2, r3
 8021ec6:	d10c      	bne.n	8021ee2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8021ec8:	4a1a      	ldr	r2, [pc, #104]	@ (8021f34 <chk_lock+0xb4>)
 8021eca:	68fb      	ldr	r3, [r7, #12]
 8021ecc:	011b      	lsls	r3, r3, #4
 8021ece:	4413      	add	r3, r2
 8021ed0:	3308      	adds	r3, #8
 8021ed2:	681a      	ldr	r2, [r3, #0]
 8021ed4:	687b      	ldr	r3, [r7, #4]
 8021ed6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8021ed8:	429a      	cmp	r2, r3
 8021eda:	d102      	bne.n	8021ee2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8021edc:	e007      	b.n	8021eee <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8021ede:	2301      	movs	r3, #1
 8021ee0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8021ee2:	68fb      	ldr	r3, [r7, #12]
 8021ee4:	3301      	adds	r3, #1
 8021ee6:	60fb      	str	r3, [r7, #12]
 8021ee8:	68fb      	ldr	r3, [r7, #12]
 8021eea:	2b01      	cmp	r3, #1
 8021eec:	d9d2      	bls.n	8021e94 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8021eee:	68fb      	ldr	r3, [r7, #12]
 8021ef0:	2b02      	cmp	r3, #2
 8021ef2:	d109      	bne.n	8021f08 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8021ef4:	68bb      	ldr	r3, [r7, #8]
 8021ef6:	2b00      	cmp	r3, #0
 8021ef8:	d102      	bne.n	8021f00 <chk_lock+0x80>
 8021efa:	683b      	ldr	r3, [r7, #0]
 8021efc:	2b02      	cmp	r3, #2
 8021efe:	d101      	bne.n	8021f04 <chk_lock+0x84>
 8021f00:	2300      	movs	r3, #0
 8021f02:	e010      	b.n	8021f26 <chk_lock+0xa6>
 8021f04:	2312      	movs	r3, #18
 8021f06:	e00e      	b.n	8021f26 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8021f08:	683b      	ldr	r3, [r7, #0]
 8021f0a:	2b00      	cmp	r3, #0
 8021f0c:	d108      	bne.n	8021f20 <chk_lock+0xa0>
 8021f0e:	4a09      	ldr	r2, [pc, #36]	@ (8021f34 <chk_lock+0xb4>)
 8021f10:	68fb      	ldr	r3, [r7, #12]
 8021f12:	011b      	lsls	r3, r3, #4
 8021f14:	4413      	add	r3, r2
 8021f16:	330c      	adds	r3, #12
 8021f18:	881b      	ldrh	r3, [r3, #0]
 8021f1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8021f1e:	d101      	bne.n	8021f24 <chk_lock+0xa4>
 8021f20:	2310      	movs	r3, #16
 8021f22:	e000      	b.n	8021f26 <chk_lock+0xa6>
 8021f24:	2300      	movs	r3, #0
}
 8021f26:	4618      	mov	r0, r3
 8021f28:	3714      	adds	r7, #20
 8021f2a:	46bd      	mov	sp, r7
 8021f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f30:	4770      	bx	lr
 8021f32:	bf00      	nop
 8021f34:	24000a90 	.word	0x24000a90

08021f38 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8021f38:	b480      	push	{r7}
 8021f3a:	b083      	sub	sp, #12
 8021f3c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8021f3e:	2300      	movs	r3, #0
 8021f40:	607b      	str	r3, [r7, #4]
 8021f42:	e002      	b.n	8021f4a <enq_lock+0x12>
 8021f44:	687b      	ldr	r3, [r7, #4]
 8021f46:	3301      	adds	r3, #1
 8021f48:	607b      	str	r3, [r7, #4]
 8021f4a:	687b      	ldr	r3, [r7, #4]
 8021f4c:	2b01      	cmp	r3, #1
 8021f4e:	d806      	bhi.n	8021f5e <enq_lock+0x26>
 8021f50:	4a09      	ldr	r2, [pc, #36]	@ (8021f78 <enq_lock+0x40>)
 8021f52:	687b      	ldr	r3, [r7, #4]
 8021f54:	011b      	lsls	r3, r3, #4
 8021f56:	4413      	add	r3, r2
 8021f58:	681b      	ldr	r3, [r3, #0]
 8021f5a:	2b00      	cmp	r3, #0
 8021f5c:	d1f2      	bne.n	8021f44 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8021f5e:	687b      	ldr	r3, [r7, #4]
 8021f60:	2b02      	cmp	r3, #2
 8021f62:	bf14      	ite	ne
 8021f64:	2301      	movne	r3, #1
 8021f66:	2300      	moveq	r3, #0
 8021f68:	b2db      	uxtb	r3, r3
}
 8021f6a:	4618      	mov	r0, r3
 8021f6c:	370c      	adds	r7, #12
 8021f6e:	46bd      	mov	sp, r7
 8021f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f74:	4770      	bx	lr
 8021f76:	bf00      	nop
 8021f78:	24000a90 	.word	0x24000a90

08021f7c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8021f7c:	b480      	push	{r7}
 8021f7e:	b085      	sub	sp, #20
 8021f80:	af00      	add	r7, sp, #0
 8021f82:	6078      	str	r0, [r7, #4]
 8021f84:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8021f86:	2300      	movs	r3, #0
 8021f88:	60fb      	str	r3, [r7, #12]
 8021f8a:	e01f      	b.n	8021fcc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8021f8c:	4a41      	ldr	r2, [pc, #260]	@ (8022094 <inc_lock+0x118>)
 8021f8e:	68fb      	ldr	r3, [r7, #12]
 8021f90:	011b      	lsls	r3, r3, #4
 8021f92:	4413      	add	r3, r2
 8021f94:	681a      	ldr	r2, [r3, #0]
 8021f96:	687b      	ldr	r3, [r7, #4]
 8021f98:	681b      	ldr	r3, [r3, #0]
 8021f9a:	429a      	cmp	r2, r3
 8021f9c:	d113      	bne.n	8021fc6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8021f9e:	4a3d      	ldr	r2, [pc, #244]	@ (8022094 <inc_lock+0x118>)
 8021fa0:	68fb      	ldr	r3, [r7, #12]
 8021fa2:	011b      	lsls	r3, r3, #4
 8021fa4:	4413      	add	r3, r2
 8021fa6:	3304      	adds	r3, #4
 8021fa8:	681a      	ldr	r2, [r3, #0]
 8021faa:	687b      	ldr	r3, [r7, #4]
 8021fac:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8021fae:	429a      	cmp	r2, r3
 8021fb0:	d109      	bne.n	8021fc6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8021fb2:	4a38      	ldr	r2, [pc, #224]	@ (8022094 <inc_lock+0x118>)
 8021fb4:	68fb      	ldr	r3, [r7, #12]
 8021fb6:	011b      	lsls	r3, r3, #4
 8021fb8:	4413      	add	r3, r2
 8021fba:	3308      	adds	r3, #8
 8021fbc:	681a      	ldr	r2, [r3, #0]
 8021fbe:	687b      	ldr	r3, [r7, #4]
 8021fc0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8021fc2:	429a      	cmp	r2, r3
 8021fc4:	d006      	beq.n	8021fd4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8021fc6:	68fb      	ldr	r3, [r7, #12]
 8021fc8:	3301      	adds	r3, #1
 8021fca:	60fb      	str	r3, [r7, #12]
 8021fcc:	68fb      	ldr	r3, [r7, #12]
 8021fce:	2b01      	cmp	r3, #1
 8021fd0:	d9dc      	bls.n	8021f8c <inc_lock+0x10>
 8021fd2:	e000      	b.n	8021fd6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8021fd4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8021fd6:	68fb      	ldr	r3, [r7, #12]
 8021fd8:	2b02      	cmp	r3, #2
 8021fda:	d132      	bne.n	8022042 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8021fdc:	2300      	movs	r3, #0
 8021fde:	60fb      	str	r3, [r7, #12]
 8021fe0:	e002      	b.n	8021fe8 <inc_lock+0x6c>
 8021fe2:	68fb      	ldr	r3, [r7, #12]
 8021fe4:	3301      	adds	r3, #1
 8021fe6:	60fb      	str	r3, [r7, #12]
 8021fe8:	68fb      	ldr	r3, [r7, #12]
 8021fea:	2b01      	cmp	r3, #1
 8021fec:	d806      	bhi.n	8021ffc <inc_lock+0x80>
 8021fee:	4a29      	ldr	r2, [pc, #164]	@ (8022094 <inc_lock+0x118>)
 8021ff0:	68fb      	ldr	r3, [r7, #12]
 8021ff2:	011b      	lsls	r3, r3, #4
 8021ff4:	4413      	add	r3, r2
 8021ff6:	681b      	ldr	r3, [r3, #0]
 8021ff8:	2b00      	cmp	r3, #0
 8021ffa:	d1f2      	bne.n	8021fe2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8021ffc:	68fb      	ldr	r3, [r7, #12]
 8021ffe:	2b02      	cmp	r3, #2
 8022000:	d101      	bne.n	8022006 <inc_lock+0x8a>
 8022002:	2300      	movs	r3, #0
 8022004:	e040      	b.n	8022088 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8022006:	687b      	ldr	r3, [r7, #4]
 8022008:	681a      	ldr	r2, [r3, #0]
 802200a:	4922      	ldr	r1, [pc, #136]	@ (8022094 <inc_lock+0x118>)
 802200c:	68fb      	ldr	r3, [r7, #12]
 802200e:	011b      	lsls	r3, r3, #4
 8022010:	440b      	add	r3, r1
 8022012:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8022014:	687b      	ldr	r3, [r7, #4]
 8022016:	689a      	ldr	r2, [r3, #8]
 8022018:	491e      	ldr	r1, [pc, #120]	@ (8022094 <inc_lock+0x118>)
 802201a:	68fb      	ldr	r3, [r7, #12]
 802201c:	011b      	lsls	r3, r3, #4
 802201e:	440b      	add	r3, r1
 8022020:	3304      	adds	r3, #4
 8022022:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8022024:	687b      	ldr	r3, [r7, #4]
 8022026:	695a      	ldr	r2, [r3, #20]
 8022028:	491a      	ldr	r1, [pc, #104]	@ (8022094 <inc_lock+0x118>)
 802202a:	68fb      	ldr	r3, [r7, #12]
 802202c:	011b      	lsls	r3, r3, #4
 802202e:	440b      	add	r3, r1
 8022030:	3308      	adds	r3, #8
 8022032:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8022034:	4a17      	ldr	r2, [pc, #92]	@ (8022094 <inc_lock+0x118>)
 8022036:	68fb      	ldr	r3, [r7, #12]
 8022038:	011b      	lsls	r3, r3, #4
 802203a:	4413      	add	r3, r2
 802203c:	330c      	adds	r3, #12
 802203e:	2200      	movs	r2, #0
 8022040:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8022042:	683b      	ldr	r3, [r7, #0]
 8022044:	2b00      	cmp	r3, #0
 8022046:	d009      	beq.n	802205c <inc_lock+0xe0>
 8022048:	4a12      	ldr	r2, [pc, #72]	@ (8022094 <inc_lock+0x118>)
 802204a:	68fb      	ldr	r3, [r7, #12]
 802204c:	011b      	lsls	r3, r3, #4
 802204e:	4413      	add	r3, r2
 8022050:	330c      	adds	r3, #12
 8022052:	881b      	ldrh	r3, [r3, #0]
 8022054:	2b00      	cmp	r3, #0
 8022056:	d001      	beq.n	802205c <inc_lock+0xe0>
 8022058:	2300      	movs	r3, #0
 802205a:	e015      	b.n	8022088 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 802205c:	683b      	ldr	r3, [r7, #0]
 802205e:	2b00      	cmp	r3, #0
 8022060:	d108      	bne.n	8022074 <inc_lock+0xf8>
 8022062:	4a0c      	ldr	r2, [pc, #48]	@ (8022094 <inc_lock+0x118>)
 8022064:	68fb      	ldr	r3, [r7, #12]
 8022066:	011b      	lsls	r3, r3, #4
 8022068:	4413      	add	r3, r2
 802206a:	330c      	adds	r3, #12
 802206c:	881b      	ldrh	r3, [r3, #0]
 802206e:	3301      	adds	r3, #1
 8022070:	b29a      	uxth	r2, r3
 8022072:	e001      	b.n	8022078 <inc_lock+0xfc>
 8022074:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8022078:	4906      	ldr	r1, [pc, #24]	@ (8022094 <inc_lock+0x118>)
 802207a:	68fb      	ldr	r3, [r7, #12]
 802207c:	011b      	lsls	r3, r3, #4
 802207e:	440b      	add	r3, r1
 8022080:	330c      	adds	r3, #12
 8022082:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8022084:	68fb      	ldr	r3, [r7, #12]
 8022086:	3301      	adds	r3, #1
}
 8022088:	4618      	mov	r0, r3
 802208a:	3714      	adds	r7, #20
 802208c:	46bd      	mov	sp, r7
 802208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022092:	4770      	bx	lr
 8022094:	24000a90 	.word	0x24000a90

08022098 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8022098:	b480      	push	{r7}
 802209a:	b085      	sub	sp, #20
 802209c:	af00      	add	r7, sp, #0
 802209e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80220a0:	687b      	ldr	r3, [r7, #4]
 80220a2:	3b01      	subs	r3, #1
 80220a4:	607b      	str	r3, [r7, #4]
 80220a6:	687b      	ldr	r3, [r7, #4]
 80220a8:	2b01      	cmp	r3, #1
 80220aa:	d825      	bhi.n	80220f8 <dec_lock+0x60>
		n = Files[i].ctr;
 80220ac:	4a17      	ldr	r2, [pc, #92]	@ (802210c <dec_lock+0x74>)
 80220ae:	687b      	ldr	r3, [r7, #4]
 80220b0:	011b      	lsls	r3, r3, #4
 80220b2:	4413      	add	r3, r2
 80220b4:	330c      	adds	r3, #12
 80220b6:	881b      	ldrh	r3, [r3, #0]
 80220b8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80220ba:	89fb      	ldrh	r3, [r7, #14]
 80220bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80220c0:	d101      	bne.n	80220c6 <dec_lock+0x2e>
 80220c2:	2300      	movs	r3, #0
 80220c4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80220c6:	89fb      	ldrh	r3, [r7, #14]
 80220c8:	2b00      	cmp	r3, #0
 80220ca:	d002      	beq.n	80220d2 <dec_lock+0x3a>
 80220cc:	89fb      	ldrh	r3, [r7, #14]
 80220ce:	3b01      	subs	r3, #1
 80220d0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80220d2:	4a0e      	ldr	r2, [pc, #56]	@ (802210c <dec_lock+0x74>)
 80220d4:	687b      	ldr	r3, [r7, #4]
 80220d6:	011b      	lsls	r3, r3, #4
 80220d8:	4413      	add	r3, r2
 80220da:	330c      	adds	r3, #12
 80220dc:	89fa      	ldrh	r2, [r7, #14]
 80220de:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80220e0:	89fb      	ldrh	r3, [r7, #14]
 80220e2:	2b00      	cmp	r3, #0
 80220e4:	d105      	bne.n	80220f2 <dec_lock+0x5a>
 80220e6:	4a09      	ldr	r2, [pc, #36]	@ (802210c <dec_lock+0x74>)
 80220e8:	687b      	ldr	r3, [r7, #4]
 80220ea:	011b      	lsls	r3, r3, #4
 80220ec:	4413      	add	r3, r2
 80220ee:	2200      	movs	r2, #0
 80220f0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80220f2:	2300      	movs	r3, #0
 80220f4:	737b      	strb	r3, [r7, #13]
 80220f6:	e001      	b.n	80220fc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80220f8:	2302      	movs	r3, #2
 80220fa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80220fc:	7b7b      	ldrb	r3, [r7, #13]
}
 80220fe:	4618      	mov	r0, r3
 8022100:	3714      	adds	r7, #20
 8022102:	46bd      	mov	sp, r7
 8022104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022108:	4770      	bx	lr
 802210a:	bf00      	nop
 802210c:	24000a90 	.word	0x24000a90

08022110 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8022110:	b480      	push	{r7}
 8022112:	b085      	sub	sp, #20
 8022114:	af00      	add	r7, sp, #0
 8022116:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8022118:	2300      	movs	r3, #0
 802211a:	60fb      	str	r3, [r7, #12]
 802211c:	e010      	b.n	8022140 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 802211e:	4a0d      	ldr	r2, [pc, #52]	@ (8022154 <clear_lock+0x44>)
 8022120:	68fb      	ldr	r3, [r7, #12]
 8022122:	011b      	lsls	r3, r3, #4
 8022124:	4413      	add	r3, r2
 8022126:	681b      	ldr	r3, [r3, #0]
 8022128:	687a      	ldr	r2, [r7, #4]
 802212a:	429a      	cmp	r2, r3
 802212c:	d105      	bne.n	802213a <clear_lock+0x2a>
 802212e:	4a09      	ldr	r2, [pc, #36]	@ (8022154 <clear_lock+0x44>)
 8022130:	68fb      	ldr	r3, [r7, #12]
 8022132:	011b      	lsls	r3, r3, #4
 8022134:	4413      	add	r3, r2
 8022136:	2200      	movs	r2, #0
 8022138:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 802213a:	68fb      	ldr	r3, [r7, #12]
 802213c:	3301      	adds	r3, #1
 802213e:	60fb      	str	r3, [r7, #12]
 8022140:	68fb      	ldr	r3, [r7, #12]
 8022142:	2b01      	cmp	r3, #1
 8022144:	d9eb      	bls.n	802211e <clear_lock+0xe>
	}
}
 8022146:	bf00      	nop
 8022148:	bf00      	nop
 802214a:	3714      	adds	r7, #20
 802214c:	46bd      	mov	sp, r7
 802214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022152:	4770      	bx	lr
 8022154:	24000a90 	.word	0x24000a90

08022158 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8022158:	b580      	push	{r7, lr}
 802215a:	b086      	sub	sp, #24
 802215c:	af00      	add	r7, sp, #0
 802215e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8022160:	2300      	movs	r3, #0
 8022162:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8022164:	687b      	ldr	r3, [r7, #4]
 8022166:	78db      	ldrb	r3, [r3, #3]
 8022168:	2b00      	cmp	r3, #0
 802216a:	d034      	beq.n	80221d6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 802216c:	687b      	ldr	r3, [r7, #4]
 802216e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022170:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8022172:	687b      	ldr	r3, [r7, #4]
 8022174:	7858      	ldrb	r0, [r3, #1]
 8022176:	687b      	ldr	r3, [r7, #4]
 8022178:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 802217c:	2301      	movs	r3, #1
 802217e:	697a      	ldr	r2, [r7, #20]
 8022180:	f7ff fd40 	bl	8021c04 <disk_write>
 8022184:	4603      	mov	r3, r0
 8022186:	2b00      	cmp	r3, #0
 8022188:	d002      	beq.n	8022190 <sync_window+0x38>
			res = FR_DISK_ERR;
 802218a:	2301      	movs	r3, #1
 802218c:	73fb      	strb	r3, [r7, #15]
 802218e:	e022      	b.n	80221d6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8022190:	687b      	ldr	r3, [r7, #4]
 8022192:	2200      	movs	r2, #0
 8022194:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8022196:	687b      	ldr	r3, [r7, #4]
 8022198:	6a1b      	ldr	r3, [r3, #32]
 802219a:	697a      	ldr	r2, [r7, #20]
 802219c:	1ad2      	subs	r2, r2, r3
 802219e:	687b      	ldr	r3, [r7, #4]
 80221a0:	699b      	ldr	r3, [r3, #24]
 80221a2:	429a      	cmp	r2, r3
 80221a4:	d217      	bcs.n	80221d6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80221a6:	687b      	ldr	r3, [r7, #4]
 80221a8:	789b      	ldrb	r3, [r3, #2]
 80221aa:	613b      	str	r3, [r7, #16]
 80221ac:	e010      	b.n	80221d0 <sync_window+0x78>
					wsect += fs->fsize;
 80221ae:	687b      	ldr	r3, [r7, #4]
 80221b0:	699b      	ldr	r3, [r3, #24]
 80221b2:	697a      	ldr	r2, [r7, #20]
 80221b4:	4413      	add	r3, r2
 80221b6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80221b8:	687b      	ldr	r3, [r7, #4]
 80221ba:	7858      	ldrb	r0, [r3, #1]
 80221bc:	687b      	ldr	r3, [r7, #4]
 80221be:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80221c2:	2301      	movs	r3, #1
 80221c4:	697a      	ldr	r2, [r7, #20]
 80221c6:	f7ff fd1d 	bl	8021c04 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80221ca:	693b      	ldr	r3, [r7, #16]
 80221cc:	3b01      	subs	r3, #1
 80221ce:	613b      	str	r3, [r7, #16]
 80221d0:	693b      	ldr	r3, [r7, #16]
 80221d2:	2b01      	cmp	r3, #1
 80221d4:	d8eb      	bhi.n	80221ae <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80221d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80221d8:	4618      	mov	r0, r3
 80221da:	3718      	adds	r7, #24
 80221dc:	46bd      	mov	sp, r7
 80221de:	bd80      	pop	{r7, pc}

080221e0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80221e0:	b580      	push	{r7, lr}
 80221e2:	b084      	sub	sp, #16
 80221e4:	af00      	add	r7, sp, #0
 80221e6:	6078      	str	r0, [r7, #4]
 80221e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80221ea:	2300      	movs	r3, #0
 80221ec:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80221ee:	687b      	ldr	r3, [r7, #4]
 80221f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80221f2:	683a      	ldr	r2, [r7, #0]
 80221f4:	429a      	cmp	r2, r3
 80221f6:	d01b      	beq.n	8022230 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80221f8:	6878      	ldr	r0, [r7, #4]
 80221fa:	f7ff ffad 	bl	8022158 <sync_window>
 80221fe:	4603      	mov	r3, r0
 8022200:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8022202:	7bfb      	ldrb	r3, [r7, #15]
 8022204:	2b00      	cmp	r3, #0
 8022206:	d113      	bne.n	8022230 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8022208:	687b      	ldr	r3, [r7, #4]
 802220a:	7858      	ldrb	r0, [r3, #1]
 802220c:	687b      	ldr	r3, [r7, #4]
 802220e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8022212:	2301      	movs	r3, #1
 8022214:	683a      	ldr	r2, [r7, #0]
 8022216:	f7ff fcd5 	bl	8021bc4 <disk_read>
 802221a:	4603      	mov	r3, r0
 802221c:	2b00      	cmp	r3, #0
 802221e:	d004      	beq.n	802222a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8022220:	f04f 33ff 	mov.w	r3, #4294967295
 8022224:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8022226:	2301      	movs	r3, #1
 8022228:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 802222a:	687b      	ldr	r3, [r7, #4]
 802222c:	683a      	ldr	r2, [r7, #0]
 802222e:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8022230:	7bfb      	ldrb	r3, [r7, #15]
}
 8022232:	4618      	mov	r0, r3
 8022234:	3710      	adds	r7, #16
 8022236:	46bd      	mov	sp, r7
 8022238:	bd80      	pop	{r7, pc}
	...

0802223c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 802223c:	b580      	push	{r7, lr}
 802223e:	b084      	sub	sp, #16
 8022240:	af00      	add	r7, sp, #0
 8022242:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8022244:	6878      	ldr	r0, [r7, #4]
 8022246:	f7ff ff87 	bl	8022158 <sync_window>
 802224a:	4603      	mov	r3, r0
 802224c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 802224e:	7bfb      	ldrb	r3, [r7, #15]
 8022250:	2b00      	cmp	r3, #0
 8022252:	d158      	bne.n	8022306 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8022254:	687b      	ldr	r3, [r7, #4]
 8022256:	781b      	ldrb	r3, [r3, #0]
 8022258:	2b03      	cmp	r3, #3
 802225a:	d148      	bne.n	80222ee <sync_fs+0xb2>
 802225c:	687b      	ldr	r3, [r7, #4]
 802225e:	791b      	ldrb	r3, [r3, #4]
 8022260:	2b01      	cmp	r3, #1
 8022262:	d144      	bne.n	80222ee <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8022264:	687b      	ldr	r3, [r7, #4]
 8022266:	3330      	adds	r3, #48	@ 0x30
 8022268:	f44f 7200 	mov.w	r2, #512	@ 0x200
 802226c:	2100      	movs	r1, #0
 802226e:	4618      	mov	r0, r3
 8022270:	f7ff fda9 	bl	8021dc6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8022274:	687b      	ldr	r3, [r7, #4]
 8022276:	3330      	adds	r3, #48	@ 0x30
 8022278:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 802227c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8022280:	4618      	mov	r0, r3
 8022282:	f7ff fd38 	bl	8021cf6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8022286:	687b      	ldr	r3, [r7, #4]
 8022288:	3330      	adds	r3, #48	@ 0x30
 802228a:	4921      	ldr	r1, [pc, #132]	@ (8022310 <sync_fs+0xd4>)
 802228c:	4618      	mov	r0, r3
 802228e:	f7ff fd4d 	bl	8021d2c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8022292:	687b      	ldr	r3, [r7, #4]
 8022294:	3330      	adds	r3, #48	@ 0x30
 8022296:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 802229a:	491e      	ldr	r1, [pc, #120]	@ (8022314 <sync_fs+0xd8>)
 802229c:	4618      	mov	r0, r3
 802229e:	f7ff fd45 	bl	8021d2c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80222a2:	687b      	ldr	r3, [r7, #4]
 80222a4:	3330      	adds	r3, #48	@ 0x30
 80222a6:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80222aa:	687b      	ldr	r3, [r7, #4]
 80222ac:	691b      	ldr	r3, [r3, #16]
 80222ae:	4619      	mov	r1, r3
 80222b0:	4610      	mov	r0, r2
 80222b2:	f7ff fd3b 	bl	8021d2c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80222b6:	687b      	ldr	r3, [r7, #4]
 80222b8:	3330      	adds	r3, #48	@ 0x30
 80222ba:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80222be:	687b      	ldr	r3, [r7, #4]
 80222c0:	68db      	ldr	r3, [r3, #12]
 80222c2:	4619      	mov	r1, r3
 80222c4:	4610      	mov	r0, r2
 80222c6:	f7ff fd31 	bl	8021d2c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80222ca:	687b      	ldr	r3, [r7, #4]
 80222cc:	69db      	ldr	r3, [r3, #28]
 80222ce:	1c5a      	adds	r2, r3, #1
 80222d0:	687b      	ldr	r3, [r7, #4]
 80222d2:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80222d4:	687b      	ldr	r3, [r7, #4]
 80222d6:	7858      	ldrb	r0, [r3, #1]
 80222d8:	687b      	ldr	r3, [r7, #4]
 80222da:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80222de:	687b      	ldr	r3, [r7, #4]
 80222e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80222e2:	2301      	movs	r3, #1
 80222e4:	f7ff fc8e 	bl	8021c04 <disk_write>
			fs->fsi_flag = 0;
 80222e8:	687b      	ldr	r3, [r7, #4]
 80222ea:	2200      	movs	r2, #0
 80222ec:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80222ee:	687b      	ldr	r3, [r7, #4]
 80222f0:	785b      	ldrb	r3, [r3, #1]
 80222f2:	2200      	movs	r2, #0
 80222f4:	2100      	movs	r1, #0
 80222f6:	4618      	mov	r0, r3
 80222f8:	f7ff fca4 	bl	8021c44 <disk_ioctl>
 80222fc:	4603      	mov	r3, r0
 80222fe:	2b00      	cmp	r3, #0
 8022300:	d001      	beq.n	8022306 <sync_fs+0xca>
 8022302:	2301      	movs	r3, #1
 8022304:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8022306:	7bfb      	ldrb	r3, [r7, #15]
}
 8022308:	4618      	mov	r0, r3
 802230a:	3710      	adds	r7, #16
 802230c:	46bd      	mov	sp, r7
 802230e:	bd80      	pop	{r7, pc}
 8022310:	41615252 	.word	0x41615252
 8022314:	61417272 	.word	0x61417272

08022318 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8022318:	b480      	push	{r7}
 802231a:	b083      	sub	sp, #12
 802231c:	af00      	add	r7, sp, #0
 802231e:	6078      	str	r0, [r7, #4]
 8022320:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8022322:	683b      	ldr	r3, [r7, #0]
 8022324:	3b02      	subs	r3, #2
 8022326:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8022328:	687b      	ldr	r3, [r7, #4]
 802232a:	695b      	ldr	r3, [r3, #20]
 802232c:	3b02      	subs	r3, #2
 802232e:	683a      	ldr	r2, [r7, #0]
 8022330:	429a      	cmp	r2, r3
 8022332:	d301      	bcc.n	8022338 <clust2sect+0x20>
 8022334:	2300      	movs	r3, #0
 8022336:	e008      	b.n	802234a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8022338:	687b      	ldr	r3, [r7, #4]
 802233a:	895b      	ldrh	r3, [r3, #10]
 802233c:	461a      	mov	r2, r3
 802233e:	683b      	ldr	r3, [r7, #0]
 8022340:	fb03 f202 	mul.w	r2, r3, r2
 8022344:	687b      	ldr	r3, [r7, #4]
 8022346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022348:	4413      	add	r3, r2
}
 802234a:	4618      	mov	r0, r3
 802234c:	370c      	adds	r7, #12
 802234e:	46bd      	mov	sp, r7
 8022350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022354:	4770      	bx	lr

08022356 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8022356:	b580      	push	{r7, lr}
 8022358:	b086      	sub	sp, #24
 802235a:	af00      	add	r7, sp, #0
 802235c:	6078      	str	r0, [r7, #4]
 802235e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8022360:	687b      	ldr	r3, [r7, #4]
 8022362:	681b      	ldr	r3, [r3, #0]
 8022364:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8022366:	683b      	ldr	r3, [r7, #0]
 8022368:	2b01      	cmp	r3, #1
 802236a:	d904      	bls.n	8022376 <get_fat+0x20>
 802236c:	693b      	ldr	r3, [r7, #16]
 802236e:	695b      	ldr	r3, [r3, #20]
 8022370:	683a      	ldr	r2, [r7, #0]
 8022372:	429a      	cmp	r2, r3
 8022374:	d302      	bcc.n	802237c <get_fat+0x26>
		val = 1;	/* Internal error */
 8022376:	2301      	movs	r3, #1
 8022378:	617b      	str	r3, [r7, #20]
 802237a:	e08e      	b.n	802249a <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 802237c:	f04f 33ff 	mov.w	r3, #4294967295
 8022380:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8022382:	693b      	ldr	r3, [r7, #16]
 8022384:	781b      	ldrb	r3, [r3, #0]
 8022386:	2b03      	cmp	r3, #3
 8022388:	d061      	beq.n	802244e <get_fat+0xf8>
 802238a:	2b03      	cmp	r3, #3
 802238c:	dc7b      	bgt.n	8022486 <get_fat+0x130>
 802238e:	2b01      	cmp	r3, #1
 8022390:	d002      	beq.n	8022398 <get_fat+0x42>
 8022392:	2b02      	cmp	r3, #2
 8022394:	d041      	beq.n	802241a <get_fat+0xc4>
 8022396:	e076      	b.n	8022486 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8022398:	683b      	ldr	r3, [r7, #0]
 802239a:	60fb      	str	r3, [r7, #12]
 802239c:	68fb      	ldr	r3, [r7, #12]
 802239e:	085b      	lsrs	r3, r3, #1
 80223a0:	68fa      	ldr	r2, [r7, #12]
 80223a2:	4413      	add	r3, r2
 80223a4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80223a6:	693b      	ldr	r3, [r7, #16]
 80223a8:	6a1a      	ldr	r2, [r3, #32]
 80223aa:	68fb      	ldr	r3, [r7, #12]
 80223ac:	0a5b      	lsrs	r3, r3, #9
 80223ae:	4413      	add	r3, r2
 80223b0:	4619      	mov	r1, r3
 80223b2:	6938      	ldr	r0, [r7, #16]
 80223b4:	f7ff ff14 	bl	80221e0 <move_window>
 80223b8:	4603      	mov	r3, r0
 80223ba:	2b00      	cmp	r3, #0
 80223bc:	d166      	bne.n	802248c <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 80223be:	68fb      	ldr	r3, [r7, #12]
 80223c0:	1c5a      	adds	r2, r3, #1
 80223c2:	60fa      	str	r2, [r7, #12]
 80223c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80223c8:	693a      	ldr	r2, [r7, #16]
 80223ca:	4413      	add	r3, r2
 80223cc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80223d0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80223d2:	693b      	ldr	r3, [r7, #16]
 80223d4:	6a1a      	ldr	r2, [r3, #32]
 80223d6:	68fb      	ldr	r3, [r7, #12]
 80223d8:	0a5b      	lsrs	r3, r3, #9
 80223da:	4413      	add	r3, r2
 80223dc:	4619      	mov	r1, r3
 80223de:	6938      	ldr	r0, [r7, #16]
 80223e0:	f7ff fefe 	bl	80221e0 <move_window>
 80223e4:	4603      	mov	r3, r0
 80223e6:	2b00      	cmp	r3, #0
 80223e8:	d152      	bne.n	8022490 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80223ea:	68fb      	ldr	r3, [r7, #12]
 80223ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80223f0:	693a      	ldr	r2, [r7, #16]
 80223f2:	4413      	add	r3, r2
 80223f4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80223f8:	021b      	lsls	r3, r3, #8
 80223fa:	68ba      	ldr	r2, [r7, #8]
 80223fc:	4313      	orrs	r3, r2
 80223fe:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8022400:	683b      	ldr	r3, [r7, #0]
 8022402:	f003 0301 	and.w	r3, r3, #1
 8022406:	2b00      	cmp	r3, #0
 8022408:	d002      	beq.n	8022410 <get_fat+0xba>
 802240a:	68bb      	ldr	r3, [r7, #8]
 802240c:	091b      	lsrs	r3, r3, #4
 802240e:	e002      	b.n	8022416 <get_fat+0xc0>
 8022410:	68bb      	ldr	r3, [r7, #8]
 8022412:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8022416:	617b      	str	r3, [r7, #20]
			break;
 8022418:	e03f      	b.n	802249a <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 802241a:	693b      	ldr	r3, [r7, #16]
 802241c:	6a1a      	ldr	r2, [r3, #32]
 802241e:	683b      	ldr	r3, [r7, #0]
 8022420:	0a1b      	lsrs	r3, r3, #8
 8022422:	4413      	add	r3, r2
 8022424:	4619      	mov	r1, r3
 8022426:	6938      	ldr	r0, [r7, #16]
 8022428:	f7ff feda 	bl	80221e0 <move_window>
 802242c:	4603      	mov	r3, r0
 802242e:	2b00      	cmp	r3, #0
 8022430:	d130      	bne.n	8022494 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8022432:	693b      	ldr	r3, [r7, #16]
 8022434:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8022438:	683b      	ldr	r3, [r7, #0]
 802243a:	005b      	lsls	r3, r3, #1
 802243c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8022440:	4413      	add	r3, r2
 8022442:	4618      	mov	r0, r3
 8022444:	f7ff fc1c 	bl	8021c80 <ld_word>
 8022448:	4603      	mov	r3, r0
 802244a:	617b      	str	r3, [r7, #20]
			break;
 802244c:	e025      	b.n	802249a <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 802244e:	693b      	ldr	r3, [r7, #16]
 8022450:	6a1a      	ldr	r2, [r3, #32]
 8022452:	683b      	ldr	r3, [r7, #0]
 8022454:	09db      	lsrs	r3, r3, #7
 8022456:	4413      	add	r3, r2
 8022458:	4619      	mov	r1, r3
 802245a:	6938      	ldr	r0, [r7, #16]
 802245c:	f7ff fec0 	bl	80221e0 <move_window>
 8022460:	4603      	mov	r3, r0
 8022462:	2b00      	cmp	r3, #0
 8022464:	d118      	bne.n	8022498 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8022466:	693b      	ldr	r3, [r7, #16]
 8022468:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 802246c:	683b      	ldr	r3, [r7, #0]
 802246e:	009b      	lsls	r3, r3, #2
 8022470:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8022474:	4413      	add	r3, r2
 8022476:	4618      	mov	r0, r3
 8022478:	f7ff fc1a 	bl	8021cb0 <ld_dword>
 802247c:	4603      	mov	r3, r0
 802247e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8022482:	617b      	str	r3, [r7, #20]
			break;
 8022484:	e009      	b.n	802249a <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8022486:	2301      	movs	r3, #1
 8022488:	617b      	str	r3, [r7, #20]
 802248a:	e006      	b.n	802249a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 802248c:	bf00      	nop
 802248e:	e004      	b.n	802249a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8022490:	bf00      	nop
 8022492:	e002      	b.n	802249a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8022494:	bf00      	nop
 8022496:	e000      	b.n	802249a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8022498:	bf00      	nop
		}
	}

	return val;
 802249a:	697b      	ldr	r3, [r7, #20]
}
 802249c:	4618      	mov	r0, r3
 802249e:	3718      	adds	r7, #24
 80224a0:	46bd      	mov	sp, r7
 80224a2:	bd80      	pop	{r7, pc}

080224a4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80224a4:	b590      	push	{r4, r7, lr}
 80224a6:	b089      	sub	sp, #36	@ 0x24
 80224a8:	af00      	add	r7, sp, #0
 80224aa:	60f8      	str	r0, [r7, #12]
 80224ac:	60b9      	str	r1, [r7, #8]
 80224ae:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80224b0:	2302      	movs	r3, #2
 80224b2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80224b4:	68bb      	ldr	r3, [r7, #8]
 80224b6:	2b01      	cmp	r3, #1
 80224b8:	f240 80d9 	bls.w	802266e <put_fat+0x1ca>
 80224bc:	68fb      	ldr	r3, [r7, #12]
 80224be:	695b      	ldr	r3, [r3, #20]
 80224c0:	68ba      	ldr	r2, [r7, #8]
 80224c2:	429a      	cmp	r2, r3
 80224c4:	f080 80d3 	bcs.w	802266e <put_fat+0x1ca>
		switch (fs->fs_type) {
 80224c8:	68fb      	ldr	r3, [r7, #12]
 80224ca:	781b      	ldrb	r3, [r3, #0]
 80224cc:	2b03      	cmp	r3, #3
 80224ce:	f000 8096 	beq.w	80225fe <put_fat+0x15a>
 80224d2:	2b03      	cmp	r3, #3
 80224d4:	f300 80cb 	bgt.w	802266e <put_fat+0x1ca>
 80224d8:	2b01      	cmp	r3, #1
 80224da:	d002      	beq.n	80224e2 <put_fat+0x3e>
 80224dc:	2b02      	cmp	r3, #2
 80224de:	d06e      	beq.n	80225be <put_fat+0x11a>
 80224e0:	e0c5      	b.n	802266e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80224e2:	68bb      	ldr	r3, [r7, #8]
 80224e4:	61bb      	str	r3, [r7, #24]
 80224e6:	69bb      	ldr	r3, [r7, #24]
 80224e8:	085b      	lsrs	r3, r3, #1
 80224ea:	69ba      	ldr	r2, [r7, #24]
 80224ec:	4413      	add	r3, r2
 80224ee:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80224f0:	68fb      	ldr	r3, [r7, #12]
 80224f2:	6a1a      	ldr	r2, [r3, #32]
 80224f4:	69bb      	ldr	r3, [r7, #24]
 80224f6:	0a5b      	lsrs	r3, r3, #9
 80224f8:	4413      	add	r3, r2
 80224fa:	4619      	mov	r1, r3
 80224fc:	68f8      	ldr	r0, [r7, #12]
 80224fe:	f7ff fe6f 	bl	80221e0 <move_window>
 8022502:	4603      	mov	r3, r0
 8022504:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8022506:	7ffb      	ldrb	r3, [r7, #31]
 8022508:	2b00      	cmp	r3, #0
 802250a:	f040 80a9 	bne.w	8022660 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 802250e:	68fb      	ldr	r3, [r7, #12]
 8022510:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8022514:	69bb      	ldr	r3, [r7, #24]
 8022516:	1c59      	adds	r1, r3, #1
 8022518:	61b9      	str	r1, [r7, #24]
 802251a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802251e:	4413      	add	r3, r2
 8022520:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8022522:	68bb      	ldr	r3, [r7, #8]
 8022524:	f003 0301 	and.w	r3, r3, #1
 8022528:	2b00      	cmp	r3, #0
 802252a:	d00d      	beq.n	8022548 <put_fat+0xa4>
 802252c:	697b      	ldr	r3, [r7, #20]
 802252e:	781b      	ldrb	r3, [r3, #0]
 8022530:	b25b      	sxtb	r3, r3
 8022532:	f003 030f 	and.w	r3, r3, #15
 8022536:	b25a      	sxtb	r2, r3
 8022538:	687b      	ldr	r3, [r7, #4]
 802253a:	b2db      	uxtb	r3, r3
 802253c:	011b      	lsls	r3, r3, #4
 802253e:	b25b      	sxtb	r3, r3
 8022540:	4313      	orrs	r3, r2
 8022542:	b25b      	sxtb	r3, r3
 8022544:	b2db      	uxtb	r3, r3
 8022546:	e001      	b.n	802254c <put_fat+0xa8>
 8022548:	687b      	ldr	r3, [r7, #4]
 802254a:	b2db      	uxtb	r3, r3
 802254c:	697a      	ldr	r2, [r7, #20]
 802254e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8022550:	68fb      	ldr	r3, [r7, #12]
 8022552:	2201      	movs	r2, #1
 8022554:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8022556:	68fb      	ldr	r3, [r7, #12]
 8022558:	6a1a      	ldr	r2, [r3, #32]
 802255a:	69bb      	ldr	r3, [r7, #24]
 802255c:	0a5b      	lsrs	r3, r3, #9
 802255e:	4413      	add	r3, r2
 8022560:	4619      	mov	r1, r3
 8022562:	68f8      	ldr	r0, [r7, #12]
 8022564:	f7ff fe3c 	bl	80221e0 <move_window>
 8022568:	4603      	mov	r3, r0
 802256a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 802256c:	7ffb      	ldrb	r3, [r7, #31]
 802256e:	2b00      	cmp	r3, #0
 8022570:	d178      	bne.n	8022664 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8022572:	68fb      	ldr	r3, [r7, #12]
 8022574:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8022578:	69bb      	ldr	r3, [r7, #24]
 802257a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802257e:	4413      	add	r3, r2
 8022580:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8022582:	68bb      	ldr	r3, [r7, #8]
 8022584:	f003 0301 	and.w	r3, r3, #1
 8022588:	2b00      	cmp	r3, #0
 802258a:	d003      	beq.n	8022594 <put_fat+0xf0>
 802258c:	687b      	ldr	r3, [r7, #4]
 802258e:	091b      	lsrs	r3, r3, #4
 8022590:	b2db      	uxtb	r3, r3
 8022592:	e00e      	b.n	80225b2 <put_fat+0x10e>
 8022594:	697b      	ldr	r3, [r7, #20]
 8022596:	781b      	ldrb	r3, [r3, #0]
 8022598:	b25b      	sxtb	r3, r3
 802259a:	f023 030f 	bic.w	r3, r3, #15
 802259e:	b25a      	sxtb	r2, r3
 80225a0:	687b      	ldr	r3, [r7, #4]
 80225a2:	0a1b      	lsrs	r3, r3, #8
 80225a4:	b25b      	sxtb	r3, r3
 80225a6:	f003 030f 	and.w	r3, r3, #15
 80225aa:	b25b      	sxtb	r3, r3
 80225ac:	4313      	orrs	r3, r2
 80225ae:	b25b      	sxtb	r3, r3
 80225b0:	b2db      	uxtb	r3, r3
 80225b2:	697a      	ldr	r2, [r7, #20]
 80225b4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80225b6:	68fb      	ldr	r3, [r7, #12]
 80225b8:	2201      	movs	r2, #1
 80225ba:	70da      	strb	r2, [r3, #3]
			break;
 80225bc:	e057      	b.n	802266e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80225be:	68fb      	ldr	r3, [r7, #12]
 80225c0:	6a1a      	ldr	r2, [r3, #32]
 80225c2:	68bb      	ldr	r3, [r7, #8]
 80225c4:	0a1b      	lsrs	r3, r3, #8
 80225c6:	4413      	add	r3, r2
 80225c8:	4619      	mov	r1, r3
 80225ca:	68f8      	ldr	r0, [r7, #12]
 80225cc:	f7ff fe08 	bl	80221e0 <move_window>
 80225d0:	4603      	mov	r3, r0
 80225d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80225d4:	7ffb      	ldrb	r3, [r7, #31]
 80225d6:	2b00      	cmp	r3, #0
 80225d8:	d146      	bne.n	8022668 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80225da:	68fb      	ldr	r3, [r7, #12]
 80225dc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80225e0:	68bb      	ldr	r3, [r7, #8]
 80225e2:	005b      	lsls	r3, r3, #1
 80225e4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80225e8:	4413      	add	r3, r2
 80225ea:	687a      	ldr	r2, [r7, #4]
 80225ec:	b292      	uxth	r2, r2
 80225ee:	4611      	mov	r1, r2
 80225f0:	4618      	mov	r0, r3
 80225f2:	f7ff fb80 	bl	8021cf6 <st_word>
			fs->wflag = 1;
 80225f6:	68fb      	ldr	r3, [r7, #12]
 80225f8:	2201      	movs	r2, #1
 80225fa:	70da      	strb	r2, [r3, #3]
			break;
 80225fc:	e037      	b.n	802266e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80225fe:	68fb      	ldr	r3, [r7, #12]
 8022600:	6a1a      	ldr	r2, [r3, #32]
 8022602:	68bb      	ldr	r3, [r7, #8]
 8022604:	09db      	lsrs	r3, r3, #7
 8022606:	4413      	add	r3, r2
 8022608:	4619      	mov	r1, r3
 802260a:	68f8      	ldr	r0, [r7, #12]
 802260c:	f7ff fde8 	bl	80221e0 <move_window>
 8022610:	4603      	mov	r3, r0
 8022612:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8022614:	7ffb      	ldrb	r3, [r7, #31]
 8022616:	2b00      	cmp	r3, #0
 8022618:	d128      	bne.n	802266c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 802261a:	687b      	ldr	r3, [r7, #4]
 802261c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8022620:	68fb      	ldr	r3, [r7, #12]
 8022622:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8022626:	68bb      	ldr	r3, [r7, #8]
 8022628:	009b      	lsls	r3, r3, #2
 802262a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 802262e:	4413      	add	r3, r2
 8022630:	4618      	mov	r0, r3
 8022632:	f7ff fb3d 	bl	8021cb0 <ld_dword>
 8022636:	4603      	mov	r3, r0
 8022638:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 802263c:	4323      	orrs	r3, r4
 802263e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8022640:	68fb      	ldr	r3, [r7, #12]
 8022642:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8022646:	68bb      	ldr	r3, [r7, #8]
 8022648:	009b      	lsls	r3, r3, #2
 802264a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 802264e:	4413      	add	r3, r2
 8022650:	6879      	ldr	r1, [r7, #4]
 8022652:	4618      	mov	r0, r3
 8022654:	f7ff fb6a 	bl	8021d2c <st_dword>
			fs->wflag = 1;
 8022658:	68fb      	ldr	r3, [r7, #12]
 802265a:	2201      	movs	r2, #1
 802265c:	70da      	strb	r2, [r3, #3]
			break;
 802265e:	e006      	b.n	802266e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8022660:	bf00      	nop
 8022662:	e004      	b.n	802266e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8022664:	bf00      	nop
 8022666:	e002      	b.n	802266e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8022668:	bf00      	nop
 802266a:	e000      	b.n	802266e <put_fat+0x1ca>
			if (res != FR_OK) break;
 802266c:	bf00      	nop
		}
	}
	return res;
 802266e:	7ffb      	ldrb	r3, [r7, #31]
}
 8022670:	4618      	mov	r0, r3
 8022672:	3724      	adds	r7, #36	@ 0x24
 8022674:	46bd      	mov	sp, r7
 8022676:	bd90      	pop	{r4, r7, pc}

08022678 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8022678:	b580      	push	{r7, lr}
 802267a:	b088      	sub	sp, #32
 802267c:	af00      	add	r7, sp, #0
 802267e:	60f8      	str	r0, [r7, #12]
 8022680:	60b9      	str	r1, [r7, #8]
 8022682:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8022684:	2300      	movs	r3, #0
 8022686:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8022688:	68fb      	ldr	r3, [r7, #12]
 802268a:	681b      	ldr	r3, [r3, #0]
 802268c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 802268e:	68bb      	ldr	r3, [r7, #8]
 8022690:	2b01      	cmp	r3, #1
 8022692:	d904      	bls.n	802269e <remove_chain+0x26>
 8022694:	69bb      	ldr	r3, [r7, #24]
 8022696:	695b      	ldr	r3, [r3, #20]
 8022698:	68ba      	ldr	r2, [r7, #8]
 802269a:	429a      	cmp	r2, r3
 802269c:	d301      	bcc.n	80226a2 <remove_chain+0x2a>
 802269e:	2302      	movs	r3, #2
 80226a0:	e04b      	b.n	802273a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80226a2:	687b      	ldr	r3, [r7, #4]
 80226a4:	2b00      	cmp	r3, #0
 80226a6:	d00c      	beq.n	80226c2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80226a8:	f04f 32ff 	mov.w	r2, #4294967295
 80226ac:	6879      	ldr	r1, [r7, #4]
 80226ae:	69b8      	ldr	r0, [r7, #24]
 80226b0:	f7ff fef8 	bl	80224a4 <put_fat>
 80226b4:	4603      	mov	r3, r0
 80226b6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80226b8:	7ffb      	ldrb	r3, [r7, #31]
 80226ba:	2b00      	cmp	r3, #0
 80226bc:	d001      	beq.n	80226c2 <remove_chain+0x4a>
 80226be:	7ffb      	ldrb	r3, [r7, #31]
 80226c0:	e03b      	b.n	802273a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80226c2:	68b9      	ldr	r1, [r7, #8]
 80226c4:	68f8      	ldr	r0, [r7, #12]
 80226c6:	f7ff fe46 	bl	8022356 <get_fat>
 80226ca:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80226cc:	697b      	ldr	r3, [r7, #20]
 80226ce:	2b00      	cmp	r3, #0
 80226d0:	d031      	beq.n	8022736 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80226d2:	697b      	ldr	r3, [r7, #20]
 80226d4:	2b01      	cmp	r3, #1
 80226d6:	d101      	bne.n	80226dc <remove_chain+0x64>
 80226d8:	2302      	movs	r3, #2
 80226da:	e02e      	b.n	802273a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80226dc:	697b      	ldr	r3, [r7, #20]
 80226de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80226e2:	d101      	bne.n	80226e8 <remove_chain+0x70>
 80226e4:	2301      	movs	r3, #1
 80226e6:	e028      	b.n	802273a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80226e8:	2200      	movs	r2, #0
 80226ea:	68b9      	ldr	r1, [r7, #8]
 80226ec:	69b8      	ldr	r0, [r7, #24]
 80226ee:	f7ff fed9 	bl	80224a4 <put_fat>
 80226f2:	4603      	mov	r3, r0
 80226f4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80226f6:	7ffb      	ldrb	r3, [r7, #31]
 80226f8:	2b00      	cmp	r3, #0
 80226fa:	d001      	beq.n	8022700 <remove_chain+0x88>
 80226fc:	7ffb      	ldrb	r3, [r7, #31]
 80226fe:	e01c      	b.n	802273a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8022700:	69bb      	ldr	r3, [r7, #24]
 8022702:	691a      	ldr	r2, [r3, #16]
 8022704:	69bb      	ldr	r3, [r7, #24]
 8022706:	695b      	ldr	r3, [r3, #20]
 8022708:	3b02      	subs	r3, #2
 802270a:	429a      	cmp	r2, r3
 802270c:	d20b      	bcs.n	8022726 <remove_chain+0xae>
			fs->free_clst++;
 802270e:	69bb      	ldr	r3, [r7, #24]
 8022710:	691b      	ldr	r3, [r3, #16]
 8022712:	1c5a      	adds	r2, r3, #1
 8022714:	69bb      	ldr	r3, [r7, #24]
 8022716:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8022718:	69bb      	ldr	r3, [r7, #24]
 802271a:	791b      	ldrb	r3, [r3, #4]
 802271c:	f043 0301 	orr.w	r3, r3, #1
 8022720:	b2da      	uxtb	r2, r3
 8022722:	69bb      	ldr	r3, [r7, #24]
 8022724:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8022726:	697b      	ldr	r3, [r7, #20]
 8022728:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 802272a:	69bb      	ldr	r3, [r7, #24]
 802272c:	695b      	ldr	r3, [r3, #20]
 802272e:	68ba      	ldr	r2, [r7, #8]
 8022730:	429a      	cmp	r2, r3
 8022732:	d3c6      	bcc.n	80226c2 <remove_chain+0x4a>
 8022734:	e000      	b.n	8022738 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8022736:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8022738:	2300      	movs	r3, #0
}
 802273a:	4618      	mov	r0, r3
 802273c:	3720      	adds	r7, #32
 802273e:	46bd      	mov	sp, r7
 8022740:	bd80      	pop	{r7, pc}

08022742 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8022742:	b580      	push	{r7, lr}
 8022744:	b088      	sub	sp, #32
 8022746:	af00      	add	r7, sp, #0
 8022748:	6078      	str	r0, [r7, #4]
 802274a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 802274c:	687b      	ldr	r3, [r7, #4]
 802274e:	681b      	ldr	r3, [r3, #0]
 8022750:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8022752:	683b      	ldr	r3, [r7, #0]
 8022754:	2b00      	cmp	r3, #0
 8022756:	d10d      	bne.n	8022774 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8022758:	693b      	ldr	r3, [r7, #16]
 802275a:	68db      	ldr	r3, [r3, #12]
 802275c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 802275e:	69bb      	ldr	r3, [r7, #24]
 8022760:	2b00      	cmp	r3, #0
 8022762:	d004      	beq.n	802276e <create_chain+0x2c>
 8022764:	693b      	ldr	r3, [r7, #16]
 8022766:	695b      	ldr	r3, [r3, #20]
 8022768:	69ba      	ldr	r2, [r7, #24]
 802276a:	429a      	cmp	r2, r3
 802276c:	d31b      	bcc.n	80227a6 <create_chain+0x64>
 802276e:	2301      	movs	r3, #1
 8022770:	61bb      	str	r3, [r7, #24]
 8022772:	e018      	b.n	80227a6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8022774:	6839      	ldr	r1, [r7, #0]
 8022776:	6878      	ldr	r0, [r7, #4]
 8022778:	f7ff fded 	bl	8022356 <get_fat>
 802277c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 802277e:	68fb      	ldr	r3, [r7, #12]
 8022780:	2b01      	cmp	r3, #1
 8022782:	d801      	bhi.n	8022788 <create_chain+0x46>
 8022784:	2301      	movs	r3, #1
 8022786:	e070      	b.n	802286a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8022788:	68fb      	ldr	r3, [r7, #12]
 802278a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802278e:	d101      	bne.n	8022794 <create_chain+0x52>
 8022790:	68fb      	ldr	r3, [r7, #12]
 8022792:	e06a      	b.n	802286a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8022794:	693b      	ldr	r3, [r7, #16]
 8022796:	695b      	ldr	r3, [r3, #20]
 8022798:	68fa      	ldr	r2, [r7, #12]
 802279a:	429a      	cmp	r2, r3
 802279c:	d201      	bcs.n	80227a2 <create_chain+0x60>
 802279e:	68fb      	ldr	r3, [r7, #12]
 80227a0:	e063      	b.n	802286a <create_chain+0x128>
		scl = clst;
 80227a2:	683b      	ldr	r3, [r7, #0]
 80227a4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80227a6:	69bb      	ldr	r3, [r7, #24]
 80227a8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80227aa:	69fb      	ldr	r3, [r7, #28]
 80227ac:	3301      	adds	r3, #1
 80227ae:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80227b0:	693b      	ldr	r3, [r7, #16]
 80227b2:	695b      	ldr	r3, [r3, #20]
 80227b4:	69fa      	ldr	r2, [r7, #28]
 80227b6:	429a      	cmp	r2, r3
 80227b8:	d307      	bcc.n	80227ca <create_chain+0x88>
				ncl = 2;
 80227ba:	2302      	movs	r3, #2
 80227bc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80227be:	69fa      	ldr	r2, [r7, #28]
 80227c0:	69bb      	ldr	r3, [r7, #24]
 80227c2:	429a      	cmp	r2, r3
 80227c4:	d901      	bls.n	80227ca <create_chain+0x88>
 80227c6:	2300      	movs	r3, #0
 80227c8:	e04f      	b.n	802286a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80227ca:	69f9      	ldr	r1, [r7, #28]
 80227cc:	6878      	ldr	r0, [r7, #4]
 80227ce:	f7ff fdc2 	bl	8022356 <get_fat>
 80227d2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80227d4:	68fb      	ldr	r3, [r7, #12]
 80227d6:	2b00      	cmp	r3, #0
 80227d8:	d00e      	beq.n	80227f8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80227da:	68fb      	ldr	r3, [r7, #12]
 80227dc:	2b01      	cmp	r3, #1
 80227de:	d003      	beq.n	80227e8 <create_chain+0xa6>
 80227e0:	68fb      	ldr	r3, [r7, #12]
 80227e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80227e6:	d101      	bne.n	80227ec <create_chain+0xaa>
 80227e8:	68fb      	ldr	r3, [r7, #12]
 80227ea:	e03e      	b.n	802286a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80227ec:	69fa      	ldr	r2, [r7, #28]
 80227ee:	69bb      	ldr	r3, [r7, #24]
 80227f0:	429a      	cmp	r2, r3
 80227f2:	d1da      	bne.n	80227aa <create_chain+0x68>
 80227f4:	2300      	movs	r3, #0
 80227f6:	e038      	b.n	802286a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80227f8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80227fa:	f04f 32ff 	mov.w	r2, #4294967295
 80227fe:	69f9      	ldr	r1, [r7, #28]
 8022800:	6938      	ldr	r0, [r7, #16]
 8022802:	f7ff fe4f 	bl	80224a4 <put_fat>
 8022806:	4603      	mov	r3, r0
 8022808:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 802280a:	7dfb      	ldrb	r3, [r7, #23]
 802280c:	2b00      	cmp	r3, #0
 802280e:	d109      	bne.n	8022824 <create_chain+0xe2>
 8022810:	683b      	ldr	r3, [r7, #0]
 8022812:	2b00      	cmp	r3, #0
 8022814:	d006      	beq.n	8022824 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8022816:	69fa      	ldr	r2, [r7, #28]
 8022818:	6839      	ldr	r1, [r7, #0]
 802281a:	6938      	ldr	r0, [r7, #16]
 802281c:	f7ff fe42 	bl	80224a4 <put_fat>
 8022820:	4603      	mov	r3, r0
 8022822:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8022824:	7dfb      	ldrb	r3, [r7, #23]
 8022826:	2b00      	cmp	r3, #0
 8022828:	d116      	bne.n	8022858 <create_chain+0x116>
		fs->last_clst = ncl;
 802282a:	693b      	ldr	r3, [r7, #16]
 802282c:	69fa      	ldr	r2, [r7, #28]
 802282e:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8022830:	693b      	ldr	r3, [r7, #16]
 8022832:	691a      	ldr	r2, [r3, #16]
 8022834:	693b      	ldr	r3, [r7, #16]
 8022836:	695b      	ldr	r3, [r3, #20]
 8022838:	3b02      	subs	r3, #2
 802283a:	429a      	cmp	r2, r3
 802283c:	d804      	bhi.n	8022848 <create_chain+0x106>
 802283e:	693b      	ldr	r3, [r7, #16]
 8022840:	691b      	ldr	r3, [r3, #16]
 8022842:	1e5a      	subs	r2, r3, #1
 8022844:	693b      	ldr	r3, [r7, #16]
 8022846:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8022848:	693b      	ldr	r3, [r7, #16]
 802284a:	791b      	ldrb	r3, [r3, #4]
 802284c:	f043 0301 	orr.w	r3, r3, #1
 8022850:	b2da      	uxtb	r2, r3
 8022852:	693b      	ldr	r3, [r7, #16]
 8022854:	711a      	strb	r2, [r3, #4]
 8022856:	e007      	b.n	8022868 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8022858:	7dfb      	ldrb	r3, [r7, #23]
 802285a:	2b01      	cmp	r3, #1
 802285c:	d102      	bne.n	8022864 <create_chain+0x122>
 802285e:	f04f 33ff 	mov.w	r3, #4294967295
 8022862:	e000      	b.n	8022866 <create_chain+0x124>
 8022864:	2301      	movs	r3, #1
 8022866:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8022868:	69fb      	ldr	r3, [r7, #28]
}
 802286a:	4618      	mov	r0, r3
 802286c:	3720      	adds	r7, #32
 802286e:	46bd      	mov	sp, r7
 8022870:	bd80      	pop	{r7, pc}

08022872 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8022872:	b480      	push	{r7}
 8022874:	b087      	sub	sp, #28
 8022876:	af00      	add	r7, sp, #0
 8022878:	6078      	str	r0, [r7, #4]
 802287a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 802287c:	687b      	ldr	r3, [r7, #4]
 802287e:	681b      	ldr	r3, [r3, #0]
 8022880:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8022882:	687b      	ldr	r3, [r7, #4]
 8022884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022886:	3304      	adds	r3, #4
 8022888:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 802288a:	683b      	ldr	r3, [r7, #0]
 802288c:	0a5b      	lsrs	r3, r3, #9
 802288e:	68fa      	ldr	r2, [r7, #12]
 8022890:	8952      	ldrh	r2, [r2, #10]
 8022892:	fbb3 f3f2 	udiv	r3, r3, r2
 8022896:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8022898:	693b      	ldr	r3, [r7, #16]
 802289a:	1d1a      	adds	r2, r3, #4
 802289c:	613a      	str	r2, [r7, #16]
 802289e:	681b      	ldr	r3, [r3, #0]
 80228a0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80228a2:	68bb      	ldr	r3, [r7, #8]
 80228a4:	2b00      	cmp	r3, #0
 80228a6:	d101      	bne.n	80228ac <clmt_clust+0x3a>
 80228a8:	2300      	movs	r3, #0
 80228aa:	e010      	b.n	80228ce <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80228ac:	697a      	ldr	r2, [r7, #20]
 80228ae:	68bb      	ldr	r3, [r7, #8]
 80228b0:	429a      	cmp	r2, r3
 80228b2:	d307      	bcc.n	80228c4 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80228b4:	697a      	ldr	r2, [r7, #20]
 80228b6:	68bb      	ldr	r3, [r7, #8]
 80228b8:	1ad3      	subs	r3, r2, r3
 80228ba:	617b      	str	r3, [r7, #20]
 80228bc:	693b      	ldr	r3, [r7, #16]
 80228be:	3304      	adds	r3, #4
 80228c0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80228c2:	e7e9      	b.n	8022898 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80228c4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80228c6:	693b      	ldr	r3, [r7, #16]
 80228c8:	681a      	ldr	r2, [r3, #0]
 80228ca:	697b      	ldr	r3, [r7, #20]
 80228cc:	4413      	add	r3, r2
}
 80228ce:	4618      	mov	r0, r3
 80228d0:	371c      	adds	r7, #28
 80228d2:	46bd      	mov	sp, r7
 80228d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80228d8:	4770      	bx	lr

080228da <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80228da:	b580      	push	{r7, lr}
 80228dc:	b086      	sub	sp, #24
 80228de:	af00      	add	r7, sp, #0
 80228e0:	6078      	str	r0, [r7, #4]
 80228e2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80228e4:	687b      	ldr	r3, [r7, #4]
 80228e6:	681b      	ldr	r3, [r3, #0]
 80228e8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80228ea:	683b      	ldr	r3, [r7, #0]
 80228ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80228f0:	d204      	bcs.n	80228fc <dir_sdi+0x22>
 80228f2:	683b      	ldr	r3, [r7, #0]
 80228f4:	f003 031f 	and.w	r3, r3, #31
 80228f8:	2b00      	cmp	r3, #0
 80228fa:	d001      	beq.n	8022900 <dir_sdi+0x26>
		return FR_INT_ERR;
 80228fc:	2302      	movs	r3, #2
 80228fe:	e063      	b.n	80229c8 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8022900:	687b      	ldr	r3, [r7, #4]
 8022902:	683a      	ldr	r2, [r7, #0]
 8022904:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8022906:	687b      	ldr	r3, [r7, #4]
 8022908:	689b      	ldr	r3, [r3, #8]
 802290a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 802290c:	697b      	ldr	r3, [r7, #20]
 802290e:	2b00      	cmp	r3, #0
 8022910:	d106      	bne.n	8022920 <dir_sdi+0x46>
 8022912:	693b      	ldr	r3, [r7, #16]
 8022914:	781b      	ldrb	r3, [r3, #0]
 8022916:	2b02      	cmp	r3, #2
 8022918:	d902      	bls.n	8022920 <dir_sdi+0x46>
		clst = fs->dirbase;
 802291a:	693b      	ldr	r3, [r7, #16]
 802291c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802291e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8022920:	697b      	ldr	r3, [r7, #20]
 8022922:	2b00      	cmp	r3, #0
 8022924:	d10c      	bne.n	8022940 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8022926:	683b      	ldr	r3, [r7, #0]
 8022928:	095b      	lsrs	r3, r3, #5
 802292a:	693a      	ldr	r2, [r7, #16]
 802292c:	8912      	ldrh	r2, [r2, #8]
 802292e:	4293      	cmp	r3, r2
 8022930:	d301      	bcc.n	8022936 <dir_sdi+0x5c>
 8022932:	2302      	movs	r3, #2
 8022934:	e048      	b.n	80229c8 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8022936:	693b      	ldr	r3, [r7, #16]
 8022938:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 802293a:	687b      	ldr	r3, [r7, #4]
 802293c:	61da      	str	r2, [r3, #28]
 802293e:	e029      	b.n	8022994 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8022940:	693b      	ldr	r3, [r7, #16]
 8022942:	895b      	ldrh	r3, [r3, #10]
 8022944:	025b      	lsls	r3, r3, #9
 8022946:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8022948:	e019      	b.n	802297e <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 802294a:	687b      	ldr	r3, [r7, #4]
 802294c:	6979      	ldr	r1, [r7, #20]
 802294e:	4618      	mov	r0, r3
 8022950:	f7ff fd01 	bl	8022356 <get_fat>
 8022954:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8022956:	697b      	ldr	r3, [r7, #20]
 8022958:	f1b3 3fff 	cmp.w	r3, #4294967295
 802295c:	d101      	bne.n	8022962 <dir_sdi+0x88>
 802295e:	2301      	movs	r3, #1
 8022960:	e032      	b.n	80229c8 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8022962:	697b      	ldr	r3, [r7, #20]
 8022964:	2b01      	cmp	r3, #1
 8022966:	d904      	bls.n	8022972 <dir_sdi+0x98>
 8022968:	693b      	ldr	r3, [r7, #16]
 802296a:	695b      	ldr	r3, [r3, #20]
 802296c:	697a      	ldr	r2, [r7, #20]
 802296e:	429a      	cmp	r2, r3
 8022970:	d301      	bcc.n	8022976 <dir_sdi+0x9c>
 8022972:	2302      	movs	r3, #2
 8022974:	e028      	b.n	80229c8 <dir_sdi+0xee>
			ofs -= csz;
 8022976:	683a      	ldr	r2, [r7, #0]
 8022978:	68fb      	ldr	r3, [r7, #12]
 802297a:	1ad3      	subs	r3, r2, r3
 802297c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 802297e:	683a      	ldr	r2, [r7, #0]
 8022980:	68fb      	ldr	r3, [r7, #12]
 8022982:	429a      	cmp	r2, r3
 8022984:	d2e1      	bcs.n	802294a <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8022986:	6979      	ldr	r1, [r7, #20]
 8022988:	6938      	ldr	r0, [r7, #16]
 802298a:	f7ff fcc5 	bl	8022318 <clust2sect>
 802298e:	4602      	mov	r2, r0
 8022990:	687b      	ldr	r3, [r7, #4]
 8022992:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8022994:	687b      	ldr	r3, [r7, #4]
 8022996:	697a      	ldr	r2, [r7, #20]
 8022998:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 802299a:	687b      	ldr	r3, [r7, #4]
 802299c:	69db      	ldr	r3, [r3, #28]
 802299e:	2b00      	cmp	r3, #0
 80229a0:	d101      	bne.n	80229a6 <dir_sdi+0xcc>
 80229a2:	2302      	movs	r3, #2
 80229a4:	e010      	b.n	80229c8 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80229a6:	687b      	ldr	r3, [r7, #4]
 80229a8:	69da      	ldr	r2, [r3, #28]
 80229aa:	683b      	ldr	r3, [r7, #0]
 80229ac:	0a5b      	lsrs	r3, r3, #9
 80229ae:	441a      	add	r2, r3
 80229b0:	687b      	ldr	r3, [r7, #4]
 80229b2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80229b4:	693b      	ldr	r3, [r7, #16]
 80229b6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80229ba:	683b      	ldr	r3, [r7, #0]
 80229bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80229c0:	441a      	add	r2, r3
 80229c2:	687b      	ldr	r3, [r7, #4]
 80229c4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80229c6:	2300      	movs	r3, #0
}
 80229c8:	4618      	mov	r0, r3
 80229ca:	3718      	adds	r7, #24
 80229cc:	46bd      	mov	sp, r7
 80229ce:	bd80      	pop	{r7, pc}

080229d0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80229d0:	b580      	push	{r7, lr}
 80229d2:	b086      	sub	sp, #24
 80229d4:	af00      	add	r7, sp, #0
 80229d6:	6078      	str	r0, [r7, #4]
 80229d8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80229da:	687b      	ldr	r3, [r7, #4]
 80229dc:	681b      	ldr	r3, [r3, #0]
 80229de:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80229e0:	687b      	ldr	r3, [r7, #4]
 80229e2:	695b      	ldr	r3, [r3, #20]
 80229e4:	3320      	adds	r3, #32
 80229e6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80229e8:	687b      	ldr	r3, [r7, #4]
 80229ea:	69db      	ldr	r3, [r3, #28]
 80229ec:	2b00      	cmp	r3, #0
 80229ee:	d003      	beq.n	80229f8 <dir_next+0x28>
 80229f0:	68bb      	ldr	r3, [r7, #8]
 80229f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80229f6:	d301      	bcc.n	80229fc <dir_next+0x2c>
 80229f8:	2304      	movs	r3, #4
 80229fa:	e0aa      	b.n	8022b52 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80229fc:	68bb      	ldr	r3, [r7, #8]
 80229fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8022a02:	2b00      	cmp	r3, #0
 8022a04:	f040 8098 	bne.w	8022b38 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8022a08:	687b      	ldr	r3, [r7, #4]
 8022a0a:	69db      	ldr	r3, [r3, #28]
 8022a0c:	1c5a      	adds	r2, r3, #1
 8022a0e:	687b      	ldr	r3, [r7, #4]
 8022a10:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8022a12:	687b      	ldr	r3, [r7, #4]
 8022a14:	699b      	ldr	r3, [r3, #24]
 8022a16:	2b00      	cmp	r3, #0
 8022a18:	d10b      	bne.n	8022a32 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8022a1a:	68bb      	ldr	r3, [r7, #8]
 8022a1c:	095b      	lsrs	r3, r3, #5
 8022a1e:	68fa      	ldr	r2, [r7, #12]
 8022a20:	8912      	ldrh	r2, [r2, #8]
 8022a22:	4293      	cmp	r3, r2
 8022a24:	f0c0 8088 	bcc.w	8022b38 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8022a28:	687b      	ldr	r3, [r7, #4]
 8022a2a:	2200      	movs	r2, #0
 8022a2c:	61da      	str	r2, [r3, #28]
 8022a2e:	2304      	movs	r3, #4
 8022a30:	e08f      	b.n	8022b52 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8022a32:	68bb      	ldr	r3, [r7, #8]
 8022a34:	0a5b      	lsrs	r3, r3, #9
 8022a36:	68fa      	ldr	r2, [r7, #12]
 8022a38:	8952      	ldrh	r2, [r2, #10]
 8022a3a:	3a01      	subs	r2, #1
 8022a3c:	4013      	ands	r3, r2
 8022a3e:	2b00      	cmp	r3, #0
 8022a40:	d17a      	bne.n	8022b38 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8022a42:	687a      	ldr	r2, [r7, #4]
 8022a44:	687b      	ldr	r3, [r7, #4]
 8022a46:	699b      	ldr	r3, [r3, #24]
 8022a48:	4619      	mov	r1, r3
 8022a4a:	4610      	mov	r0, r2
 8022a4c:	f7ff fc83 	bl	8022356 <get_fat>
 8022a50:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8022a52:	697b      	ldr	r3, [r7, #20]
 8022a54:	2b01      	cmp	r3, #1
 8022a56:	d801      	bhi.n	8022a5c <dir_next+0x8c>
 8022a58:	2302      	movs	r3, #2
 8022a5a:	e07a      	b.n	8022b52 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8022a5c:	697b      	ldr	r3, [r7, #20]
 8022a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022a62:	d101      	bne.n	8022a68 <dir_next+0x98>
 8022a64:	2301      	movs	r3, #1
 8022a66:	e074      	b.n	8022b52 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8022a68:	68fb      	ldr	r3, [r7, #12]
 8022a6a:	695b      	ldr	r3, [r3, #20]
 8022a6c:	697a      	ldr	r2, [r7, #20]
 8022a6e:	429a      	cmp	r2, r3
 8022a70:	d358      	bcc.n	8022b24 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8022a72:	683b      	ldr	r3, [r7, #0]
 8022a74:	2b00      	cmp	r3, #0
 8022a76:	d104      	bne.n	8022a82 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8022a78:	687b      	ldr	r3, [r7, #4]
 8022a7a:	2200      	movs	r2, #0
 8022a7c:	61da      	str	r2, [r3, #28]
 8022a7e:	2304      	movs	r3, #4
 8022a80:	e067      	b.n	8022b52 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8022a82:	687a      	ldr	r2, [r7, #4]
 8022a84:	687b      	ldr	r3, [r7, #4]
 8022a86:	699b      	ldr	r3, [r3, #24]
 8022a88:	4619      	mov	r1, r3
 8022a8a:	4610      	mov	r0, r2
 8022a8c:	f7ff fe59 	bl	8022742 <create_chain>
 8022a90:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8022a92:	697b      	ldr	r3, [r7, #20]
 8022a94:	2b00      	cmp	r3, #0
 8022a96:	d101      	bne.n	8022a9c <dir_next+0xcc>
 8022a98:	2307      	movs	r3, #7
 8022a9a:	e05a      	b.n	8022b52 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8022a9c:	697b      	ldr	r3, [r7, #20]
 8022a9e:	2b01      	cmp	r3, #1
 8022aa0:	d101      	bne.n	8022aa6 <dir_next+0xd6>
 8022aa2:	2302      	movs	r3, #2
 8022aa4:	e055      	b.n	8022b52 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8022aa6:	697b      	ldr	r3, [r7, #20]
 8022aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022aac:	d101      	bne.n	8022ab2 <dir_next+0xe2>
 8022aae:	2301      	movs	r3, #1
 8022ab0:	e04f      	b.n	8022b52 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8022ab2:	68f8      	ldr	r0, [r7, #12]
 8022ab4:	f7ff fb50 	bl	8022158 <sync_window>
 8022ab8:	4603      	mov	r3, r0
 8022aba:	2b00      	cmp	r3, #0
 8022abc:	d001      	beq.n	8022ac2 <dir_next+0xf2>
 8022abe:	2301      	movs	r3, #1
 8022ac0:	e047      	b.n	8022b52 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8022ac2:	68fb      	ldr	r3, [r7, #12]
 8022ac4:	3330      	adds	r3, #48	@ 0x30
 8022ac6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8022aca:	2100      	movs	r1, #0
 8022acc:	4618      	mov	r0, r3
 8022ace:	f7ff f97a 	bl	8021dc6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8022ad2:	2300      	movs	r3, #0
 8022ad4:	613b      	str	r3, [r7, #16]
 8022ad6:	6979      	ldr	r1, [r7, #20]
 8022ad8:	68f8      	ldr	r0, [r7, #12]
 8022ada:	f7ff fc1d 	bl	8022318 <clust2sect>
 8022ade:	4602      	mov	r2, r0
 8022ae0:	68fb      	ldr	r3, [r7, #12]
 8022ae2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8022ae4:	e012      	b.n	8022b0c <dir_next+0x13c>
						fs->wflag = 1;
 8022ae6:	68fb      	ldr	r3, [r7, #12]
 8022ae8:	2201      	movs	r2, #1
 8022aea:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8022aec:	68f8      	ldr	r0, [r7, #12]
 8022aee:	f7ff fb33 	bl	8022158 <sync_window>
 8022af2:	4603      	mov	r3, r0
 8022af4:	2b00      	cmp	r3, #0
 8022af6:	d001      	beq.n	8022afc <dir_next+0x12c>
 8022af8:	2301      	movs	r3, #1
 8022afa:	e02a      	b.n	8022b52 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8022afc:	693b      	ldr	r3, [r7, #16]
 8022afe:	3301      	adds	r3, #1
 8022b00:	613b      	str	r3, [r7, #16]
 8022b02:	68fb      	ldr	r3, [r7, #12]
 8022b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022b06:	1c5a      	adds	r2, r3, #1
 8022b08:	68fb      	ldr	r3, [r7, #12]
 8022b0a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8022b0c:	68fb      	ldr	r3, [r7, #12]
 8022b0e:	895b      	ldrh	r3, [r3, #10]
 8022b10:	461a      	mov	r2, r3
 8022b12:	693b      	ldr	r3, [r7, #16]
 8022b14:	4293      	cmp	r3, r2
 8022b16:	d3e6      	bcc.n	8022ae6 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8022b18:	68fb      	ldr	r3, [r7, #12]
 8022b1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8022b1c:	693b      	ldr	r3, [r7, #16]
 8022b1e:	1ad2      	subs	r2, r2, r3
 8022b20:	68fb      	ldr	r3, [r7, #12]
 8022b22:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8022b24:	687b      	ldr	r3, [r7, #4]
 8022b26:	697a      	ldr	r2, [r7, #20]
 8022b28:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8022b2a:	6979      	ldr	r1, [r7, #20]
 8022b2c:	68f8      	ldr	r0, [r7, #12]
 8022b2e:	f7ff fbf3 	bl	8022318 <clust2sect>
 8022b32:	4602      	mov	r2, r0
 8022b34:	687b      	ldr	r3, [r7, #4]
 8022b36:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8022b38:	687b      	ldr	r3, [r7, #4]
 8022b3a:	68ba      	ldr	r2, [r7, #8]
 8022b3c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8022b3e:	68fb      	ldr	r3, [r7, #12]
 8022b40:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8022b44:	68bb      	ldr	r3, [r7, #8]
 8022b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8022b4a:	441a      	add	r2, r3
 8022b4c:	687b      	ldr	r3, [r7, #4]
 8022b4e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8022b50:	2300      	movs	r3, #0
}
 8022b52:	4618      	mov	r0, r3
 8022b54:	3718      	adds	r7, #24
 8022b56:	46bd      	mov	sp, r7
 8022b58:	bd80      	pop	{r7, pc}

08022b5a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8022b5a:	b580      	push	{r7, lr}
 8022b5c:	b086      	sub	sp, #24
 8022b5e:	af00      	add	r7, sp, #0
 8022b60:	6078      	str	r0, [r7, #4]
 8022b62:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8022b64:	687b      	ldr	r3, [r7, #4]
 8022b66:	681b      	ldr	r3, [r3, #0]
 8022b68:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8022b6a:	2100      	movs	r1, #0
 8022b6c:	6878      	ldr	r0, [r7, #4]
 8022b6e:	f7ff feb4 	bl	80228da <dir_sdi>
 8022b72:	4603      	mov	r3, r0
 8022b74:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8022b76:	7dfb      	ldrb	r3, [r7, #23]
 8022b78:	2b00      	cmp	r3, #0
 8022b7a:	d12b      	bne.n	8022bd4 <dir_alloc+0x7a>
		n = 0;
 8022b7c:	2300      	movs	r3, #0
 8022b7e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8022b80:	687b      	ldr	r3, [r7, #4]
 8022b82:	69db      	ldr	r3, [r3, #28]
 8022b84:	4619      	mov	r1, r3
 8022b86:	68f8      	ldr	r0, [r7, #12]
 8022b88:	f7ff fb2a 	bl	80221e0 <move_window>
 8022b8c:	4603      	mov	r3, r0
 8022b8e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8022b90:	7dfb      	ldrb	r3, [r7, #23]
 8022b92:	2b00      	cmp	r3, #0
 8022b94:	d11d      	bne.n	8022bd2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8022b96:	687b      	ldr	r3, [r7, #4]
 8022b98:	6a1b      	ldr	r3, [r3, #32]
 8022b9a:	781b      	ldrb	r3, [r3, #0]
 8022b9c:	2be5      	cmp	r3, #229	@ 0xe5
 8022b9e:	d004      	beq.n	8022baa <dir_alloc+0x50>
 8022ba0:	687b      	ldr	r3, [r7, #4]
 8022ba2:	6a1b      	ldr	r3, [r3, #32]
 8022ba4:	781b      	ldrb	r3, [r3, #0]
 8022ba6:	2b00      	cmp	r3, #0
 8022ba8:	d107      	bne.n	8022bba <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8022baa:	693b      	ldr	r3, [r7, #16]
 8022bac:	3301      	adds	r3, #1
 8022bae:	613b      	str	r3, [r7, #16]
 8022bb0:	693a      	ldr	r2, [r7, #16]
 8022bb2:	683b      	ldr	r3, [r7, #0]
 8022bb4:	429a      	cmp	r2, r3
 8022bb6:	d102      	bne.n	8022bbe <dir_alloc+0x64>
 8022bb8:	e00c      	b.n	8022bd4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8022bba:	2300      	movs	r3, #0
 8022bbc:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8022bbe:	2101      	movs	r1, #1
 8022bc0:	6878      	ldr	r0, [r7, #4]
 8022bc2:	f7ff ff05 	bl	80229d0 <dir_next>
 8022bc6:	4603      	mov	r3, r0
 8022bc8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8022bca:	7dfb      	ldrb	r3, [r7, #23]
 8022bcc:	2b00      	cmp	r3, #0
 8022bce:	d0d7      	beq.n	8022b80 <dir_alloc+0x26>
 8022bd0:	e000      	b.n	8022bd4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8022bd2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8022bd4:	7dfb      	ldrb	r3, [r7, #23]
 8022bd6:	2b04      	cmp	r3, #4
 8022bd8:	d101      	bne.n	8022bde <dir_alloc+0x84>
 8022bda:	2307      	movs	r3, #7
 8022bdc:	75fb      	strb	r3, [r7, #23]
	return res;
 8022bde:	7dfb      	ldrb	r3, [r7, #23]
}
 8022be0:	4618      	mov	r0, r3
 8022be2:	3718      	adds	r7, #24
 8022be4:	46bd      	mov	sp, r7
 8022be6:	bd80      	pop	{r7, pc}

08022be8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8022be8:	b580      	push	{r7, lr}
 8022bea:	b084      	sub	sp, #16
 8022bec:	af00      	add	r7, sp, #0
 8022bee:	6078      	str	r0, [r7, #4]
 8022bf0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8022bf2:	683b      	ldr	r3, [r7, #0]
 8022bf4:	331a      	adds	r3, #26
 8022bf6:	4618      	mov	r0, r3
 8022bf8:	f7ff f842 	bl	8021c80 <ld_word>
 8022bfc:	4603      	mov	r3, r0
 8022bfe:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8022c00:	687b      	ldr	r3, [r7, #4]
 8022c02:	781b      	ldrb	r3, [r3, #0]
 8022c04:	2b03      	cmp	r3, #3
 8022c06:	d109      	bne.n	8022c1c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8022c08:	683b      	ldr	r3, [r7, #0]
 8022c0a:	3314      	adds	r3, #20
 8022c0c:	4618      	mov	r0, r3
 8022c0e:	f7ff f837 	bl	8021c80 <ld_word>
 8022c12:	4603      	mov	r3, r0
 8022c14:	041b      	lsls	r3, r3, #16
 8022c16:	68fa      	ldr	r2, [r7, #12]
 8022c18:	4313      	orrs	r3, r2
 8022c1a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8022c1c:	68fb      	ldr	r3, [r7, #12]
}
 8022c1e:	4618      	mov	r0, r3
 8022c20:	3710      	adds	r7, #16
 8022c22:	46bd      	mov	sp, r7
 8022c24:	bd80      	pop	{r7, pc}

08022c26 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8022c26:	b580      	push	{r7, lr}
 8022c28:	b084      	sub	sp, #16
 8022c2a:	af00      	add	r7, sp, #0
 8022c2c:	60f8      	str	r0, [r7, #12]
 8022c2e:	60b9      	str	r1, [r7, #8]
 8022c30:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8022c32:	68bb      	ldr	r3, [r7, #8]
 8022c34:	331a      	adds	r3, #26
 8022c36:	687a      	ldr	r2, [r7, #4]
 8022c38:	b292      	uxth	r2, r2
 8022c3a:	4611      	mov	r1, r2
 8022c3c:	4618      	mov	r0, r3
 8022c3e:	f7ff f85a 	bl	8021cf6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8022c42:	68fb      	ldr	r3, [r7, #12]
 8022c44:	781b      	ldrb	r3, [r3, #0]
 8022c46:	2b03      	cmp	r3, #3
 8022c48:	d109      	bne.n	8022c5e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8022c4a:	68bb      	ldr	r3, [r7, #8]
 8022c4c:	f103 0214 	add.w	r2, r3, #20
 8022c50:	687b      	ldr	r3, [r7, #4]
 8022c52:	0c1b      	lsrs	r3, r3, #16
 8022c54:	b29b      	uxth	r3, r3
 8022c56:	4619      	mov	r1, r3
 8022c58:	4610      	mov	r0, r2
 8022c5a:	f7ff f84c 	bl	8021cf6 <st_word>
	}
}
 8022c5e:	bf00      	nop
 8022c60:	3710      	adds	r7, #16
 8022c62:	46bd      	mov	sp, r7
 8022c64:	bd80      	pop	{r7, pc}

08022c66 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8022c66:	b580      	push	{r7, lr}
 8022c68:	b086      	sub	sp, #24
 8022c6a:	af00      	add	r7, sp, #0
 8022c6c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8022c6e:	687b      	ldr	r3, [r7, #4]
 8022c70:	681b      	ldr	r3, [r3, #0]
 8022c72:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8022c74:	2100      	movs	r1, #0
 8022c76:	6878      	ldr	r0, [r7, #4]
 8022c78:	f7ff fe2f 	bl	80228da <dir_sdi>
 8022c7c:	4603      	mov	r3, r0
 8022c7e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8022c80:	7dfb      	ldrb	r3, [r7, #23]
 8022c82:	2b00      	cmp	r3, #0
 8022c84:	d001      	beq.n	8022c8a <dir_find+0x24>
 8022c86:	7dfb      	ldrb	r3, [r7, #23]
 8022c88:	e03e      	b.n	8022d08 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8022c8a:	687b      	ldr	r3, [r7, #4]
 8022c8c:	69db      	ldr	r3, [r3, #28]
 8022c8e:	4619      	mov	r1, r3
 8022c90:	6938      	ldr	r0, [r7, #16]
 8022c92:	f7ff faa5 	bl	80221e0 <move_window>
 8022c96:	4603      	mov	r3, r0
 8022c98:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8022c9a:	7dfb      	ldrb	r3, [r7, #23]
 8022c9c:	2b00      	cmp	r3, #0
 8022c9e:	d12f      	bne.n	8022d00 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8022ca0:	687b      	ldr	r3, [r7, #4]
 8022ca2:	6a1b      	ldr	r3, [r3, #32]
 8022ca4:	781b      	ldrb	r3, [r3, #0]
 8022ca6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8022ca8:	7bfb      	ldrb	r3, [r7, #15]
 8022caa:	2b00      	cmp	r3, #0
 8022cac:	d102      	bne.n	8022cb4 <dir_find+0x4e>
 8022cae:	2304      	movs	r3, #4
 8022cb0:	75fb      	strb	r3, [r7, #23]
 8022cb2:	e028      	b.n	8022d06 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8022cb4:	687b      	ldr	r3, [r7, #4]
 8022cb6:	6a1b      	ldr	r3, [r3, #32]
 8022cb8:	330b      	adds	r3, #11
 8022cba:	781b      	ldrb	r3, [r3, #0]
 8022cbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8022cc0:	b2da      	uxtb	r2, r3
 8022cc2:	687b      	ldr	r3, [r7, #4]
 8022cc4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8022cc6:	687b      	ldr	r3, [r7, #4]
 8022cc8:	6a1b      	ldr	r3, [r3, #32]
 8022cca:	330b      	adds	r3, #11
 8022ccc:	781b      	ldrb	r3, [r3, #0]
 8022cce:	f003 0308 	and.w	r3, r3, #8
 8022cd2:	2b00      	cmp	r3, #0
 8022cd4:	d10a      	bne.n	8022cec <dir_find+0x86>
 8022cd6:	687b      	ldr	r3, [r7, #4]
 8022cd8:	6a18      	ldr	r0, [r3, #32]
 8022cda:	687b      	ldr	r3, [r7, #4]
 8022cdc:	3324      	adds	r3, #36	@ 0x24
 8022cde:	220b      	movs	r2, #11
 8022ce0:	4619      	mov	r1, r3
 8022ce2:	f7ff f88b 	bl	8021dfc <mem_cmp>
 8022ce6:	4603      	mov	r3, r0
 8022ce8:	2b00      	cmp	r3, #0
 8022cea:	d00b      	beq.n	8022d04 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8022cec:	2100      	movs	r1, #0
 8022cee:	6878      	ldr	r0, [r7, #4]
 8022cf0:	f7ff fe6e 	bl	80229d0 <dir_next>
 8022cf4:	4603      	mov	r3, r0
 8022cf6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8022cf8:	7dfb      	ldrb	r3, [r7, #23]
 8022cfa:	2b00      	cmp	r3, #0
 8022cfc:	d0c5      	beq.n	8022c8a <dir_find+0x24>
 8022cfe:	e002      	b.n	8022d06 <dir_find+0xa0>
		if (res != FR_OK) break;
 8022d00:	bf00      	nop
 8022d02:	e000      	b.n	8022d06 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8022d04:	bf00      	nop

	return res;
 8022d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8022d08:	4618      	mov	r0, r3
 8022d0a:	3718      	adds	r7, #24
 8022d0c:	46bd      	mov	sp, r7
 8022d0e:	bd80      	pop	{r7, pc}

08022d10 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8022d10:	b580      	push	{r7, lr}
 8022d12:	b084      	sub	sp, #16
 8022d14:	af00      	add	r7, sp, #0
 8022d16:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8022d18:	687b      	ldr	r3, [r7, #4]
 8022d1a:	681b      	ldr	r3, [r3, #0]
 8022d1c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8022d1e:	2101      	movs	r1, #1
 8022d20:	6878      	ldr	r0, [r7, #4]
 8022d22:	f7ff ff1a 	bl	8022b5a <dir_alloc>
 8022d26:	4603      	mov	r3, r0
 8022d28:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8022d2a:	7bfb      	ldrb	r3, [r7, #15]
 8022d2c:	2b00      	cmp	r3, #0
 8022d2e:	d11c      	bne.n	8022d6a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8022d30:	687b      	ldr	r3, [r7, #4]
 8022d32:	69db      	ldr	r3, [r3, #28]
 8022d34:	4619      	mov	r1, r3
 8022d36:	68b8      	ldr	r0, [r7, #8]
 8022d38:	f7ff fa52 	bl	80221e0 <move_window>
 8022d3c:	4603      	mov	r3, r0
 8022d3e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8022d40:	7bfb      	ldrb	r3, [r7, #15]
 8022d42:	2b00      	cmp	r3, #0
 8022d44:	d111      	bne.n	8022d6a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8022d46:	687b      	ldr	r3, [r7, #4]
 8022d48:	6a1b      	ldr	r3, [r3, #32]
 8022d4a:	2220      	movs	r2, #32
 8022d4c:	2100      	movs	r1, #0
 8022d4e:	4618      	mov	r0, r3
 8022d50:	f7ff f839 	bl	8021dc6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8022d54:	687b      	ldr	r3, [r7, #4]
 8022d56:	6a18      	ldr	r0, [r3, #32]
 8022d58:	687b      	ldr	r3, [r7, #4]
 8022d5a:	3324      	adds	r3, #36	@ 0x24
 8022d5c:	220b      	movs	r2, #11
 8022d5e:	4619      	mov	r1, r3
 8022d60:	f7ff f810 	bl	8021d84 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8022d64:	68bb      	ldr	r3, [r7, #8]
 8022d66:	2201      	movs	r2, #1
 8022d68:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8022d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8022d6c:	4618      	mov	r0, r3
 8022d6e:	3710      	adds	r7, #16
 8022d70:	46bd      	mov	sp, r7
 8022d72:	bd80      	pop	{r7, pc}

08022d74 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8022d74:	b580      	push	{r7, lr}
 8022d76:	b088      	sub	sp, #32
 8022d78:	af00      	add	r7, sp, #0
 8022d7a:	6078      	str	r0, [r7, #4]
 8022d7c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8022d7e:	683b      	ldr	r3, [r7, #0]
 8022d80:	681b      	ldr	r3, [r3, #0]
 8022d82:	60fb      	str	r3, [r7, #12]
 8022d84:	687b      	ldr	r3, [r7, #4]
 8022d86:	3324      	adds	r3, #36	@ 0x24
 8022d88:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8022d8a:	220b      	movs	r2, #11
 8022d8c:	2120      	movs	r1, #32
 8022d8e:	68b8      	ldr	r0, [r7, #8]
 8022d90:	f7ff f819 	bl	8021dc6 <mem_set>
	si = i = 0; ni = 8;
 8022d94:	2300      	movs	r3, #0
 8022d96:	613b      	str	r3, [r7, #16]
 8022d98:	693b      	ldr	r3, [r7, #16]
 8022d9a:	61fb      	str	r3, [r7, #28]
 8022d9c:	2308      	movs	r3, #8
 8022d9e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8022da0:	69fb      	ldr	r3, [r7, #28]
 8022da2:	1c5a      	adds	r2, r3, #1
 8022da4:	61fa      	str	r2, [r7, #28]
 8022da6:	68fa      	ldr	r2, [r7, #12]
 8022da8:	4413      	add	r3, r2
 8022daa:	781b      	ldrb	r3, [r3, #0]
 8022dac:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8022dae:	7efb      	ldrb	r3, [r7, #27]
 8022db0:	2b20      	cmp	r3, #32
 8022db2:	d94e      	bls.n	8022e52 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8022db4:	7efb      	ldrb	r3, [r7, #27]
 8022db6:	2b2f      	cmp	r3, #47	@ 0x2f
 8022db8:	d006      	beq.n	8022dc8 <create_name+0x54>
 8022dba:	7efb      	ldrb	r3, [r7, #27]
 8022dbc:	2b5c      	cmp	r3, #92	@ 0x5c
 8022dbe:	d110      	bne.n	8022de2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8022dc0:	e002      	b.n	8022dc8 <create_name+0x54>
 8022dc2:	69fb      	ldr	r3, [r7, #28]
 8022dc4:	3301      	adds	r3, #1
 8022dc6:	61fb      	str	r3, [r7, #28]
 8022dc8:	68fa      	ldr	r2, [r7, #12]
 8022dca:	69fb      	ldr	r3, [r7, #28]
 8022dcc:	4413      	add	r3, r2
 8022dce:	781b      	ldrb	r3, [r3, #0]
 8022dd0:	2b2f      	cmp	r3, #47	@ 0x2f
 8022dd2:	d0f6      	beq.n	8022dc2 <create_name+0x4e>
 8022dd4:	68fa      	ldr	r2, [r7, #12]
 8022dd6:	69fb      	ldr	r3, [r7, #28]
 8022dd8:	4413      	add	r3, r2
 8022dda:	781b      	ldrb	r3, [r3, #0]
 8022ddc:	2b5c      	cmp	r3, #92	@ 0x5c
 8022dde:	d0f0      	beq.n	8022dc2 <create_name+0x4e>
			break;
 8022de0:	e038      	b.n	8022e54 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8022de2:	7efb      	ldrb	r3, [r7, #27]
 8022de4:	2b2e      	cmp	r3, #46	@ 0x2e
 8022de6:	d003      	beq.n	8022df0 <create_name+0x7c>
 8022de8:	693a      	ldr	r2, [r7, #16]
 8022dea:	697b      	ldr	r3, [r7, #20]
 8022dec:	429a      	cmp	r2, r3
 8022dee:	d30c      	bcc.n	8022e0a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8022df0:	697b      	ldr	r3, [r7, #20]
 8022df2:	2b0b      	cmp	r3, #11
 8022df4:	d002      	beq.n	8022dfc <create_name+0x88>
 8022df6:	7efb      	ldrb	r3, [r7, #27]
 8022df8:	2b2e      	cmp	r3, #46	@ 0x2e
 8022dfa:	d001      	beq.n	8022e00 <create_name+0x8c>
 8022dfc:	2306      	movs	r3, #6
 8022dfe:	e044      	b.n	8022e8a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8022e00:	2308      	movs	r3, #8
 8022e02:	613b      	str	r3, [r7, #16]
 8022e04:	230b      	movs	r3, #11
 8022e06:	617b      	str	r3, [r7, #20]
			continue;
 8022e08:	e022      	b.n	8022e50 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8022e0a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8022e0e:	2b00      	cmp	r3, #0
 8022e10:	da04      	bge.n	8022e1c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8022e12:	7efb      	ldrb	r3, [r7, #27]
 8022e14:	3b80      	subs	r3, #128	@ 0x80
 8022e16:	4a1f      	ldr	r2, [pc, #124]	@ (8022e94 <create_name+0x120>)
 8022e18:	5cd3      	ldrb	r3, [r2, r3]
 8022e1a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8022e1c:	7efb      	ldrb	r3, [r7, #27]
 8022e1e:	4619      	mov	r1, r3
 8022e20:	481d      	ldr	r0, [pc, #116]	@ (8022e98 <create_name+0x124>)
 8022e22:	f7ff f812 	bl	8021e4a <chk_chr>
 8022e26:	4603      	mov	r3, r0
 8022e28:	2b00      	cmp	r3, #0
 8022e2a:	d001      	beq.n	8022e30 <create_name+0xbc>
 8022e2c:	2306      	movs	r3, #6
 8022e2e:	e02c      	b.n	8022e8a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8022e30:	7efb      	ldrb	r3, [r7, #27]
 8022e32:	2b60      	cmp	r3, #96	@ 0x60
 8022e34:	d905      	bls.n	8022e42 <create_name+0xce>
 8022e36:	7efb      	ldrb	r3, [r7, #27]
 8022e38:	2b7a      	cmp	r3, #122	@ 0x7a
 8022e3a:	d802      	bhi.n	8022e42 <create_name+0xce>
 8022e3c:	7efb      	ldrb	r3, [r7, #27]
 8022e3e:	3b20      	subs	r3, #32
 8022e40:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8022e42:	693b      	ldr	r3, [r7, #16]
 8022e44:	1c5a      	adds	r2, r3, #1
 8022e46:	613a      	str	r2, [r7, #16]
 8022e48:	68ba      	ldr	r2, [r7, #8]
 8022e4a:	4413      	add	r3, r2
 8022e4c:	7efa      	ldrb	r2, [r7, #27]
 8022e4e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8022e50:	e7a6      	b.n	8022da0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8022e52:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8022e54:	68fa      	ldr	r2, [r7, #12]
 8022e56:	69fb      	ldr	r3, [r7, #28]
 8022e58:	441a      	add	r2, r3
 8022e5a:	683b      	ldr	r3, [r7, #0]
 8022e5c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8022e5e:	693b      	ldr	r3, [r7, #16]
 8022e60:	2b00      	cmp	r3, #0
 8022e62:	d101      	bne.n	8022e68 <create_name+0xf4>
 8022e64:	2306      	movs	r3, #6
 8022e66:	e010      	b.n	8022e8a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8022e68:	68bb      	ldr	r3, [r7, #8]
 8022e6a:	781b      	ldrb	r3, [r3, #0]
 8022e6c:	2be5      	cmp	r3, #229	@ 0xe5
 8022e6e:	d102      	bne.n	8022e76 <create_name+0x102>
 8022e70:	68bb      	ldr	r3, [r7, #8]
 8022e72:	2205      	movs	r2, #5
 8022e74:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8022e76:	7efb      	ldrb	r3, [r7, #27]
 8022e78:	2b20      	cmp	r3, #32
 8022e7a:	d801      	bhi.n	8022e80 <create_name+0x10c>
 8022e7c:	2204      	movs	r2, #4
 8022e7e:	e000      	b.n	8022e82 <create_name+0x10e>
 8022e80:	2200      	movs	r2, #0
 8022e82:	68bb      	ldr	r3, [r7, #8]
 8022e84:	330b      	adds	r3, #11
 8022e86:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8022e88:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8022e8a:	4618      	mov	r0, r3
 8022e8c:	3720      	adds	r7, #32
 8022e8e:	46bd      	mov	sp, r7
 8022e90:	bd80      	pop	{r7, pc}
 8022e92:	bf00      	nop
 8022e94:	08026a14 	.word	0x08026a14
 8022e98:	080264f0 	.word	0x080264f0

08022e9c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8022e9c:	b580      	push	{r7, lr}
 8022e9e:	b086      	sub	sp, #24
 8022ea0:	af00      	add	r7, sp, #0
 8022ea2:	6078      	str	r0, [r7, #4]
 8022ea4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8022ea6:	687b      	ldr	r3, [r7, #4]
 8022ea8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8022eaa:	693b      	ldr	r3, [r7, #16]
 8022eac:	681b      	ldr	r3, [r3, #0]
 8022eae:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8022eb0:	e002      	b.n	8022eb8 <follow_path+0x1c>
 8022eb2:	683b      	ldr	r3, [r7, #0]
 8022eb4:	3301      	adds	r3, #1
 8022eb6:	603b      	str	r3, [r7, #0]
 8022eb8:	683b      	ldr	r3, [r7, #0]
 8022eba:	781b      	ldrb	r3, [r3, #0]
 8022ebc:	2b2f      	cmp	r3, #47	@ 0x2f
 8022ebe:	d0f8      	beq.n	8022eb2 <follow_path+0x16>
 8022ec0:	683b      	ldr	r3, [r7, #0]
 8022ec2:	781b      	ldrb	r3, [r3, #0]
 8022ec4:	2b5c      	cmp	r3, #92	@ 0x5c
 8022ec6:	d0f4      	beq.n	8022eb2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8022ec8:	693b      	ldr	r3, [r7, #16]
 8022eca:	2200      	movs	r2, #0
 8022ecc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8022ece:	683b      	ldr	r3, [r7, #0]
 8022ed0:	781b      	ldrb	r3, [r3, #0]
 8022ed2:	2b1f      	cmp	r3, #31
 8022ed4:	d80a      	bhi.n	8022eec <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8022ed6:	687b      	ldr	r3, [r7, #4]
 8022ed8:	2280      	movs	r2, #128	@ 0x80
 8022eda:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8022ede:	2100      	movs	r1, #0
 8022ee0:	6878      	ldr	r0, [r7, #4]
 8022ee2:	f7ff fcfa 	bl	80228da <dir_sdi>
 8022ee6:	4603      	mov	r3, r0
 8022ee8:	75fb      	strb	r3, [r7, #23]
 8022eea:	e043      	b.n	8022f74 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8022eec:	463b      	mov	r3, r7
 8022eee:	4619      	mov	r1, r3
 8022ef0:	6878      	ldr	r0, [r7, #4]
 8022ef2:	f7ff ff3f 	bl	8022d74 <create_name>
 8022ef6:	4603      	mov	r3, r0
 8022ef8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8022efa:	7dfb      	ldrb	r3, [r7, #23]
 8022efc:	2b00      	cmp	r3, #0
 8022efe:	d134      	bne.n	8022f6a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8022f00:	6878      	ldr	r0, [r7, #4]
 8022f02:	f7ff feb0 	bl	8022c66 <dir_find>
 8022f06:	4603      	mov	r3, r0
 8022f08:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8022f0a:	687b      	ldr	r3, [r7, #4]
 8022f0c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8022f10:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8022f12:	7dfb      	ldrb	r3, [r7, #23]
 8022f14:	2b00      	cmp	r3, #0
 8022f16:	d00a      	beq.n	8022f2e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8022f18:	7dfb      	ldrb	r3, [r7, #23]
 8022f1a:	2b04      	cmp	r3, #4
 8022f1c:	d127      	bne.n	8022f6e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8022f1e:	7afb      	ldrb	r3, [r7, #11]
 8022f20:	f003 0304 	and.w	r3, r3, #4
 8022f24:	2b00      	cmp	r3, #0
 8022f26:	d122      	bne.n	8022f6e <follow_path+0xd2>
 8022f28:	2305      	movs	r3, #5
 8022f2a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8022f2c:	e01f      	b.n	8022f6e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8022f2e:	7afb      	ldrb	r3, [r7, #11]
 8022f30:	f003 0304 	and.w	r3, r3, #4
 8022f34:	2b00      	cmp	r3, #0
 8022f36:	d11c      	bne.n	8022f72 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8022f38:	693b      	ldr	r3, [r7, #16]
 8022f3a:	799b      	ldrb	r3, [r3, #6]
 8022f3c:	f003 0310 	and.w	r3, r3, #16
 8022f40:	2b00      	cmp	r3, #0
 8022f42:	d102      	bne.n	8022f4a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8022f44:	2305      	movs	r3, #5
 8022f46:	75fb      	strb	r3, [r7, #23]
 8022f48:	e014      	b.n	8022f74 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8022f4a:	68fb      	ldr	r3, [r7, #12]
 8022f4c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8022f50:	687b      	ldr	r3, [r7, #4]
 8022f52:	695b      	ldr	r3, [r3, #20]
 8022f54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8022f58:	4413      	add	r3, r2
 8022f5a:	4619      	mov	r1, r3
 8022f5c:	68f8      	ldr	r0, [r7, #12]
 8022f5e:	f7ff fe43 	bl	8022be8 <ld_clust>
 8022f62:	4602      	mov	r2, r0
 8022f64:	693b      	ldr	r3, [r7, #16]
 8022f66:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8022f68:	e7c0      	b.n	8022eec <follow_path+0x50>
			if (res != FR_OK) break;
 8022f6a:	bf00      	nop
 8022f6c:	e002      	b.n	8022f74 <follow_path+0xd8>
				break;
 8022f6e:	bf00      	nop
 8022f70:	e000      	b.n	8022f74 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8022f72:	bf00      	nop
			}
		}
	}

	return res;
 8022f74:	7dfb      	ldrb	r3, [r7, #23]
}
 8022f76:	4618      	mov	r0, r3
 8022f78:	3718      	adds	r7, #24
 8022f7a:	46bd      	mov	sp, r7
 8022f7c:	bd80      	pop	{r7, pc}

08022f7e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8022f7e:	b480      	push	{r7}
 8022f80:	b087      	sub	sp, #28
 8022f82:	af00      	add	r7, sp, #0
 8022f84:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8022f86:	f04f 33ff 	mov.w	r3, #4294967295
 8022f8a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8022f8c:	687b      	ldr	r3, [r7, #4]
 8022f8e:	681b      	ldr	r3, [r3, #0]
 8022f90:	2b00      	cmp	r3, #0
 8022f92:	d031      	beq.n	8022ff8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8022f94:	687b      	ldr	r3, [r7, #4]
 8022f96:	681b      	ldr	r3, [r3, #0]
 8022f98:	617b      	str	r3, [r7, #20]
 8022f9a:	e002      	b.n	8022fa2 <get_ldnumber+0x24>
 8022f9c:	697b      	ldr	r3, [r7, #20]
 8022f9e:	3301      	adds	r3, #1
 8022fa0:	617b      	str	r3, [r7, #20]
 8022fa2:	697b      	ldr	r3, [r7, #20]
 8022fa4:	781b      	ldrb	r3, [r3, #0]
 8022fa6:	2b20      	cmp	r3, #32
 8022fa8:	d903      	bls.n	8022fb2 <get_ldnumber+0x34>
 8022faa:	697b      	ldr	r3, [r7, #20]
 8022fac:	781b      	ldrb	r3, [r3, #0]
 8022fae:	2b3a      	cmp	r3, #58	@ 0x3a
 8022fb0:	d1f4      	bne.n	8022f9c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8022fb2:	697b      	ldr	r3, [r7, #20]
 8022fb4:	781b      	ldrb	r3, [r3, #0]
 8022fb6:	2b3a      	cmp	r3, #58	@ 0x3a
 8022fb8:	d11c      	bne.n	8022ff4 <get_ldnumber+0x76>
			tp = *path;
 8022fba:	687b      	ldr	r3, [r7, #4]
 8022fbc:	681b      	ldr	r3, [r3, #0]
 8022fbe:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8022fc0:	68fb      	ldr	r3, [r7, #12]
 8022fc2:	1c5a      	adds	r2, r3, #1
 8022fc4:	60fa      	str	r2, [r7, #12]
 8022fc6:	781b      	ldrb	r3, [r3, #0]
 8022fc8:	3b30      	subs	r3, #48	@ 0x30
 8022fca:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8022fcc:	68bb      	ldr	r3, [r7, #8]
 8022fce:	2b09      	cmp	r3, #9
 8022fd0:	d80e      	bhi.n	8022ff0 <get_ldnumber+0x72>
 8022fd2:	68fa      	ldr	r2, [r7, #12]
 8022fd4:	697b      	ldr	r3, [r7, #20]
 8022fd6:	429a      	cmp	r2, r3
 8022fd8:	d10a      	bne.n	8022ff0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8022fda:	68bb      	ldr	r3, [r7, #8]
 8022fdc:	2b00      	cmp	r3, #0
 8022fde:	d107      	bne.n	8022ff0 <get_ldnumber+0x72>
					vol = (int)i;
 8022fe0:	68bb      	ldr	r3, [r7, #8]
 8022fe2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8022fe4:	697b      	ldr	r3, [r7, #20]
 8022fe6:	3301      	adds	r3, #1
 8022fe8:	617b      	str	r3, [r7, #20]
 8022fea:	687b      	ldr	r3, [r7, #4]
 8022fec:	697a      	ldr	r2, [r7, #20]
 8022fee:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8022ff0:	693b      	ldr	r3, [r7, #16]
 8022ff2:	e002      	b.n	8022ffa <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8022ff4:	2300      	movs	r3, #0
 8022ff6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8022ff8:	693b      	ldr	r3, [r7, #16]
}
 8022ffa:	4618      	mov	r0, r3
 8022ffc:	371c      	adds	r7, #28
 8022ffe:	46bd      	mov	sp, r7
 8023000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023004:	4770      	bx	lr
	...

08023008 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8023008:	b580      	push	{r7, lr}
 802300a:	b082      	sub	sp, #8
 802300c:	af00      	add	r7, sp, #0
 802300e:	6078      	str	r0, [r7, #4]
 8023010:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8023012:	687b      	ldr	r3, [r7, #4]
 8023014:	2200      	movs	r2, #0
 8023016:	70da      	strb	r2, [r3, #3]
 8023018:	687b      	ldr	r3, [r7, #4]
 802301a:	f04f 32ff 	mov.w	r2, #4294967295
 802301e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8023020:	6839      	ldr	r1, [r7, #0]
 8023022:	6878      	ldr	r0, [r7, #4]
 8023024:	f7ff f8dc 	bl	80221e0 <move_window>
 8023028:	4603      	mov	r3, r0
 802302a:	2b00      	cmp	r3, #0
 802302c:	d001      	beq.n	8023032 <check_fs+0x2a>
 802302e:	2304      	movs	r3, #4
 8023030:	e038      	b.n	80230a4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8023032:	687b      	ldr	r3, [r7, #4]
 8023034:	3330      	adds	r3, #48	@ 0x30
 8023036:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 802303a:	4618      	mov	r0, r3
 802303c:	f7fe fe20 	bl	8021c80 <ld_word>
 8023040:	4603      	mov	r3, r0
 8023042:	461a      	mov	r2, r3
 8023044:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8023048:	429a      	cmp	r2, r3
 802304a:	d001      	beq.n	8023050 <check_fs+0x48>
 802304c:	2303      	movs	r3, #3
 802304e:	e029      	b.n	80230a4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8023050:	687b      	ldr	r3, [r7, #4]
 8023052:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8023056:	2be9      	cmp	r3, #233	@ 0xe9
 8023058:	d009      	beq.n	802306e <check_fs+0x66>
 802305a:	687b      	ldr	r3, [r7, #4]
 802305c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8023060:	2beb      	cmp	r3, #235	@ 0xeb
 8023062:	d11e      	bne.n	80230a2 <check_fs+0x9a>
 8023064:	687b      	ldr	r3, [r7, #4]
 8023066:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 802306a:	2b90      	cmp	r3, #144	@ 0x90
 802306c:	d119      	bne.n	80230a2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 802306e:	687b      	ldr	r3, [r7, #4]
 8023070:	3330      	adds	r3, #48	@ 0x30
 8023072:	3336      	adds	r3, #54	@ 0x36
 8023074:	4618      	mov	r0, r3
 8023076:	f7fe fe1b 	bl	8021cb0 <ld_dword>
 802307a:	4603      	mov	r3, r0
 802307c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8023080:	4a0a      	ldr	r2, [pc, #40]	@ (80230ac <check_fs+0xa4>)
 8023082:	4293      	cmp	r3, r2
 8023084:	d101      	bne.n	802308a <check_fs+0x82>
 8023086:	2300      	movs	r3, #0
 8023088:	e00c      	b.n	80230a4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 802308a:	687b      	ldr	r3, [r7, #4]
 802308c:	3330      	adds	r3, #48	@ 0x30
 802308e:	3352      	adds	r3, #82	@ 0x52
 8023090:	4618      	mov	r0, r3
 8023092:	f7fe fe0d 	bl	8021cb0 <ld_dword>
 8023096:	4603      	mov	r3, r0
 8023098:	4a05      	ldr	r2, [pc, #20]	@ (80230b0 <check_fs+0xa8>)
 802309a:	4293      	cmp	r3, r2
 802309c:	d101      	bne.n	80230a2 <check_fs+0x9a>
 802309e:	2300      	movs	r3, #0
 80230a0:	e000      	b.n	80230a4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80230a2:	2302      	movs	r3, #2
}
 80230a4:	4618      	mov	r0, r3
 80230a6:	3708      	adds	r7, #8
 80230a8:	46bd      	mov	sp, r7
 80230aa:	bd80      	pop	{r7, pc}
 80230ac:	00544146 	.word	0x00544146
 80230b0:	33544146 	.word	0x33544146

080230b4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80230b4:	b580      	push	{r7, lr}
 80230b6:	b096      	sub	sp, #88	@ 0x58
 80230b8:	af00      	add	r7, sp, #0
 80230ba:	60f8      	str	r0, [r7, #12]
 80230bc:	60b9      	str	r1, [r7, #8]
 80230be:	4613      	mov	r3, r2
 80230c0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80230c2:	68bb      	ldr	r3, [r7, #8]
 80230c4:	2200      	movs	r2, #0
 80230c6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80230c8:	68f8      	ldr	r0, [r7, #12]
 80230ca:	f7ff ff58 	bl	8022f7e <get_ldnumber>
 80230ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80230d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80230d2:	2b00      	cmp	r3, #0
 80230d4:	da01      	bge.n	80230da <find_volume+0x26>
 80230d6:	230b      	movs	r3, #11
 80230d8:	e22d      	b.n	8023536 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80230da:	4aa1      	ldr	r2, [pc, #644]	@ (8023360 <find_volume+0x2ac>)
 80230dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80230de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80230e2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80230e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80230e6:	2b00      	cmp	r3, #0
 80230e8:	d101      	bne.n	80230ee <find_volume+0x3a>
 80230ea:	230c      	movs	r3, #12
 80230ec:	e223      	b.n	8023536 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80230ee:	68bb      	ldr	r3, [r7, #8]
 80230f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80230f2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80230f4:	79fb      	ldrb	r3, [r7, #7]
 80230f6:	f023 0301 	bic.w	r3, r3, #1
 80230fa:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80230fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80230fe:	781b      	ldrb	r3, [r3, #0]
 8023100:	2b00      	cmp	r3, #0
 8023102:	d01a      	beq.n	802313a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8023104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8023106:	785b      	ldrb	r3, [r3, #1]
 8023108:	4618      	mov	r0, r3
 802310a:	f7fe fd19 	bl	8021b40 <disk_status>
 802310e:	4603      	mov	r3, r0
 8023110:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8023114:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8023118:	f003 0301 	and.w	r3, r3, #1
 802311c:	2b00      	cmp	r3, #0
 802311e:	d10c      	bne.n	802313a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8023120:	79fb      	ldrb	r3, [r7, #7]
 8023122:	2b00      	cmp	r3, #0
 8023124:	d007      	beq.n	8023136 <find_volume+0x82>
 8023126:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 802312a:	f003 0304 	and.w	r3, r3, #4
 802312e:	2b00      	cmp	r3, #0
 8023130:	d001      	beq.n	8023136 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8023132:	230a      	movs	r3, #10
 8023134:	e1ff      	b.n	8023536 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8023136:	2300      	movs	r3, #0
 8023138:	e1fd      	b.n	8023536 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 802313a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802313c:	2200      	movs	r2, #0
 802313e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8023140:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8023142:	b2da      	uxtb	r2, r3
 8023144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8023146:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8023148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802314a:	785b      	ldrb	r3, [r3, #1]
 802314c:	4618      	mov	r0, r3
 802314e:	f7fe fd11 	bl	8021b74 <disk_initialize>
 8023152:	4603      	mov	r3, r0
 8023154:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8023158:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 802315c:	f003 0301 	and.w	r3, r3, #1
 8023160:	2b00      	cmp	r3, #0
 8023162:	d001      	beq.n	8023168 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8023164:	2303      	movs	r3, #3
 8023166:	e1e6      	b.n	8023536 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8023168:	79fb      	ldrb	r3, [r7, #7]
 802316a:	2b00      	cmp	r3, #0
 802316c:	d007      	beq.n	802317e <find_volume+0xca>
 802316e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8023172:	f003 0304 	and.w	r3, r3, #4
 8023176:	2b00      	cmp	r3, #0
 8023178:	d001      	beq.n	802317e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 802317a:	230a      	movs	r3, #10
 802317c:	e1db      	b.n	8023536 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 802317e:	2300      	movs	r3, #0
 8023180:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8023182:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8023184:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8023186:	f7ff ff3f 	bl	8023008 <check_fs>
 802318a:	4603      	mov	r3, r0
 802318c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8023190:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8023194:	2b02      	cmp	r3, #2
 8023196:	d149      	bne.n	802322c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8023198:	2300      	movs	r3, #0
 802319a:	643b      	str	r3, [r7, #64]	@ 0x40
 802319c:	e01e      	b.n	80231dc <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 802319e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80231a0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80231a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80231a6:	011b      	lsls	r3, r3, #4
 80231a8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80231ac:	4413      	add	r3, r2
 80231ae:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80231b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80231b2:	3304      	adds	r3, #4
 80231b4:	781b      	ldrb	r3, [r3, #0]
 80231b6:	2b00      	cmp	r3, #0
 80231b8:	d006      	beq.n	80231c8 <find_volume+0x114>
 80231ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80231bc:	3308      	adds	r3, #8
 80231be:	4618      	mov	r0, r3
 80231c0:	f7fe fd76 	bl	8021cb0 <ld_dword>
 80231c4:	4602      	mov	r2, r0
 80231c6:	e000      	b.n	80231ca <find_volume+0x116>
 80231c8:	2200      	movs	r2, #0
 80231ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80231cc:	009b      	lsls	r3, r3, #2
 80231ce:	3358      	adds	r3, #88	@ 0x58
 80231d0:	443b      	add	r3, r7
 80231d2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80231d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80231d8:	3301      	adds	r3, #1
 80231da:	643b      	str	r3, [r7, #64]	@ 0x40
 80231dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80231de:	2b03      	cmp	r3, #3
 80231e0:	d9dd      	bls.n	802319e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80231e2:	2300      	movs	r3, #0
 80231e4:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80231e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80231e8:	2b00      	cmp	r3, #0
 80231ea:	d002      	beq.n	80231f2 <find_volume+0x13e>
 80231ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80231ee:	3b01      	subs	r3, #1
 80231f0:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80231f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80231f4:	009b      	lsls	r3, r3, #2
 80231f6:	3358      	adds	r3, #88	@ 0x58
 80231f8:	443b      	add	r3, r7
 80231fa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80231fe:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8023200:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8023202:	2b00      	cmp	r3, #0
 8023204:	d005      	beq.n	8023212 <find_volume+0x15e>
 8023206:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8023208:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 802320a:	f7ff fefd 	bl	8023008 <check_fs>
 802320e:	4603      	mov	r3, r0
 8023210:	e000      	b.n	8023214 <find_volume+0x160>
 8023212:	2303      	movs	r3, #3
 8023214:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8023218:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 802321c:	2b01      	cmp	r3, #1
 802321e:	d905      	bls.n	802322c <find_volume+0x178>
 8023220:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8023222:	3301      	adds	r3, #1
 8023224:	643b      	str	r3, [r7, #64]	@ 0x40
 8023226:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8023228:	2b03      	cmp	r3, #3
 802322a:	d9e2      	bls.n	80231f2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 802322c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8023230:	2b04      	cmp	r3, #4
 8023232:	d101      	bne.n	8023238 <find_volume+0x184>
 8023234:	2301      	movs	r3, #1
 8023236:	e17e      	b.n	8023536 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8023238:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 802323c:	2b01      	cmp	r3, #1
 802323e:	d901      	bls.n	8023244 <find_volume+0x190>
 8023240:	230d      	movs	r3, #13
 8023242:	e178      	b.n	8023536 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8023244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8023246:	3330      	adds	r3, #48	@ 0x30
 8023248:	330b      	adds	r3, #11
 802324a:	4618      	mov	r0, r3
 802324c:	f7fe fd18 	bl	8021c80 <ld_word>
 8023250:	4603      	mov	r3, r0
 8023252:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8023256:	d001      	beq.n	802325c <find_volume+0x1a8>
 8023258:	230d      	movs	r3, #13
 802325a:	e16c      	b.n	8023536 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 802325c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802325e:	3330      	adds	r3, #48	@ 0x30
 8023260:	3316      	adds	r3, #22
 8023262:	4618      	mov	r0, r3
 8023264:	f7fe fd0c 	bl	8021c80 <ld_word>
 8023268:	4603      	mov	r3, r0
 802326a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 802326c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802326e:	2b00      	cmp	r3, #0
 8023270:	d106      	bne.n	8023280 <find_volume+0x1cc>
 8023272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8023274:	3330      	adds	r3, #48	@ 0x30
 8023276:	3324      	adds	r3, #36	@ 0x24
 8023278:	4618      	mov	r0, r3
 802327a:	f7fe fd19 	bl	8021cb0 <ld_dword>
 802327e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8023280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8023282:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8023284:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8023286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8023288:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 802328c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802328e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8023290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8023292:	789b      	ldrb	r3, [r3, #2]
 8023294:	2b01      	cmp	r3, #1
 8023296:	d005      	beq.n	80232a4 <find_volume+0x1f0>
 8023298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802329a:	789b      	ldrb	r3, [r3, #2]
 802329c:	2b02      	cmp	r3, #2
 802329e:	d001      	beq.n	80232a4 <find_volume+0x1f0>
 80232a0:	230d      	movs	r3, #13
 80232a2:	e148      	b.n	8023536 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80232a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80232a6:	789b      	ldrb	r3, [r3, #2]
 80232a8:	461a      	mov	r2, r3
 80232aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80232ac:	fb02 f303 	mul.w	r3, r2, r3
 80232b0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80232b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80232b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80232b8:	461a      	mov	r2, r3
 80232ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80232bc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80232be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80232c0:	895b      	ldrh	r3, [r3, #10]
 80232c2:	2b00      	cmp	r3, #0
 80232c4:	d008      	beq.n	80232d8 <find_volume+0x224>
 80232c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80232c8:	895b      	ldrh	r3, [r3, #10]
 80232ca:	461a      	mov	r2, r3
 80232cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80232ce:	895b      	ldrh	r3, [r3, #10]
 80232d0:	3b01      	subs	r3, #1
 80232d2:	4013      	ands	r3, r2
 80232d4:	2b00      	cmp	r3, #0
 80232d6:	d001      	beq.n	80232dc <find_volume+0x228>
 80232d8:	230d      	movs	r3, #13
 80232da:	e12c      	b.n	8023536 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80232dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80232de:	3330      	adds	r3, #48	@ 0x30
 80232e0:	3311      	adds	r3, #17
 80232e2:	4618      	mov	r0, r3
 80232e4:	f7fe fccc 	bl	8021c80 <ld_word>
 80232e8:	4603      	mov	r3, r0
 80232ea:	461a      	mov	r2, r3
 80232ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80232ee:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80232f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80232f2:	891b      	ldrh	r3, [r3, #8]
 80232f4:	f003 030f 	and.w	r3, r3, #15
 80232f8:	b29b      	uxth	r3, r3
 80232fa:	2b00      	cmp	r3, #0
 80232fc:	d001      	beq.n	8023302 <find_volume+0x24e>
 80232fe:	230d      	movs	r3, #13
 8023300:	e119      	b.n	8023536 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8023302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8023304:	3330      	adds	r3, #48	@ 0x30
 8023306:	3313      	adds	r3, #19
 8023308:	4618      	mov	r0, r3
 802330a:	f7fe fcb9 	bl	8021c80 <ld_word>
 802330e:	4603      	mov	r3, r0
 8023310:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8023312:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8023314:	2b00      	cmp	r3, #0
 8023316:	d106      	bne.n	8023326 <find_volume+0x272>
 8023318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802331a:	3330      	adds	r3, #48	@ 0x30
 802331c:	3320      	adds	r3, #32
 802331e:	4618      	mov	r0, r3
 8023320:	f7fe fcc6 	bl	8021cb0 <ld_dword>
 8023324:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8023326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8023328:	3330      	adds	r3, #48	@ 0x30
 802332a:	330e      	adds	r3, #14
 802332c:	4618      	mov	r0, r3
 802332e:	f7fe fca7 	bl	8021c80 <ld_word>
 8023332:	4603      	mov	r3, r0
 8023334:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8023336:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8023338:	2b00      	cmp	r3, #0
 802333a:	d101      	bne.n	8023340 <find_volume+0x28c>
 802333c:	230d      	movs	r3, #13
 802333e:	e0fa      	b.n	8023536 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8023340:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8023342:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8023344:	4413      	add	r3, r2
 8023346:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8023348:	8912      	ldrh	r2, [r2, #8]
 802334a:	0912      	lsrs	r2, r2, #4
 802334c:	b292      	uxth	r2, r2
 802334e:	4413      	add	r3, r2
 8023350:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8023352:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8023354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023356:	429a      	cmp	r2, r3
 8023358:	d204      	bcs.n	8023364 <find_volume+0x2b0>
 802335a:	230d      	movs	r3, #13
 802335c:	e0eb      	b.n	8023536 <find_volume+0x482>
 802335e:	bf00      	nop
 8023360:	24000a88 	.word	0x24000a88
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8023364:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8023366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023368:	1ad3      	subs	r3, r2, r3
 802336a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 802336c:	8952      	ldrh	r2, [r2, #10]
 802336e:	fbb3 f3f2 	udiv	r3, r3, r2
 8023372:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8023374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023376:	2b00      	cmp	r3, #0
 8023378:	d101      	bne.n	802337e <find_volume+0x2ca>
 802337a:	230d      	movs	r3, #13
 802337c:	e0db      	b.n	8023536 <find_volume+0x482>
		fmt = FS_FAT32;
 802337e:	2303      	movs	r3, #3
 8023380:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8023384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023386:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 802338a:	4293      	cmp	r3, r2
 802338c:	d802      	bhi.n	8023394 <find_volume+0x2e0>
 802338e:	2302      	movs	r3, #2
 8023390:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8023394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023396:	f640 72f5 	movw	r2, #4085	@ 0xff5
 802339a:	4293      	cmp	r3, r2
 802339c:	d802      	bhi.n	80233a4 <find_volume+0x2f0>
 802339e:	2301      	movs	r3, #1
 80233a0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80233a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80233a6:	1c9a      	adds	r2, r3, #2
 80233a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80233aa:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80233ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80233ae:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80233b0:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80233b2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80233b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80233b6:	441a      	add	r2, r3
 80233b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80233ba:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80233bc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80233be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80233c0:	441a      	add	r2, r3
 80233c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80233c4:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 80233c6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80233ca:	2b03      	cmp	r3, #3
 80233cc:	d11e      	bne.n	802340c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80233ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80233d0:	3330      	adds	r3, #48	@ 0x30
 80233d2:	332a      	adds	r3, #42	@ 0x2a
 80233d4:	4618      	mov	r0, r3
 80233d6:	f7fe fc53 	bl	8021c80 <ld_word>
 80233da:	4603      	mov	r3, r0
 80233dc:	2b00      	cmp	r3, #0
 80233de:	d001      	beq.n	80233e4 <find_volume+0x330>
 80233e0:	230d      	movs	r3, #13
 80233e2:	e0a8      	b.n	8023536 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80233e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80233e6:	891b      	ldrh	r3, [r3, #8]
 80233e8:	2b00      	cmp	r3, #0
 80233ea:	d001      	beq.n	80233f0 <find_volume+0x33c>
 80233ec:	230d      	movs	r3, #13
 80233ee:	e0a2      	b.n	8023536 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80233f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80233f2:	3330      	adds	r3, #48	@ 0x30
 80233f4:	332c      	adds	r3, #44	@ 0x2c
 80233f6:	4618      	mov	r0, r3
 80233f8:	f7fe fc5a 	bl	8021cb0 <ld_dword>
 80233fc:	4602      	mov	r2, r0
 80233fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8023400:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8023402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8023404:	695b      	ldr	r3, [r3, #20]
 8023406:	009b      	lsls	r3, r3, #2
 8023408:	647b      	str	r3, [r7, #68]	@ 0x44
 802340a:	e01f      	b.n	802344c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 802340c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802340e:	891b      	ldrh	r3, [r3, #8]
 8023410:	2b00      	cmp	r3, #0
 8023412:	d101      	bne.n	8023418 <find_volume+0x364>
 8023414:	230d      	movs	r3, #13
 8023416:	e08e      	b.n	8023536 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8023418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802341a:	6a1a      	ldr	r2, [r3, #32]
 802341c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802341e:	441a      	add	r2, r3
 8023420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8023422:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8023424:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8023428:	2b02      	cmp	r3, #2
 802342a:	d103      	bne.n	8023434 <find_volume+0x380>
 802342c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802342e:	695b      	ldr	r3, [r3, #20]
 8023430:	005b      	lsls	r3, r3, #1
 8023432:	e00a      	b.n	802344a <find_volume+0x396>
 8023434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8023436:	695a      	ldr	r2, [r3, #20]
 8023438:	4613      	mov	r3, r2
 802343a:	005b      	lsls	r3, r3, #1
 802343c:	4413      	add	r3, r2
 802343e:	085a      	lsrs	r2, r3, #1
 8023440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8023442:	695b      	ldr	r3, [r3, #20]
 8023444:	f003 0301 	and.w	r3, r3, #1
 8023448:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 802344a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 802344c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802344e:	699a      	ldr	r2, [r3, #24]
 8023450:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8023452:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8023456:	0a5b      	lsrs	r3, r3, #9
 8023458:	429a      	cmp	r2, r3
 802345a:	d201      	bcs.n	8023460 <find_volume+0x3ac>
 802345c:	230d      	movs	r3, #13
 802345e:	e06a      	b.n	8023536 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8023460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8023462:	f04f 32ff 	mov.w	r2, #4294967295
 8023466:	611a      	str	r2, [r3, #16]
 8023468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802346a:	691a      	ldr	r2, [r3, #16]
 802346c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802346e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8023470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8023472:	2280      	movs	r2, #128	@ 0x80
 8023474:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8023476:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 802347a:	2b03      	cmp	r3, #3
 802347c:	d149      	bne.n	8023512 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 802347e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8023480:	3330      	adds	r3, #48	@ 0x30
 8023482:	3330      	adds	r3, #48	@ 0x30
 8023484:	4618      	mov	r0, r3
 8023486:	f7fe fbfb 	bl	8021c80 <ld_word>
 802348a:	4603      	mov	r3, r0
 802348c:	2b01      	cmp	r3, #1
 802348e:	d140      	bne.n	8023512 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8023490:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8023492:	3301      	adds	r3, #1
 8023494:	4619      	mov	r1, r3
 8023496:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8023498:	f7fe fea2 	bl	80221e0 <move_window>
 802349c:	4603      	mov	r3, r0
 802349e:	2b00      	cmp	r3, #0
 80234a0:	d137      	bne.n	8023512 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80234a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80234a4:	2200      	movs	r2, #0
 80234a6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80234a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80234aa:	3330      	adds	r3, #48	@ 0x30
 80234ac:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80234b0:	4618      	mov	r0, r3
 80234b2:	f7fe fbe5 	bl	8021c80 <ld_word>
 80234b6:	4603      	mov	r3, r0
 80234b8:	461a      	mov	r2, r3
 80234ba:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80234be:	429a      	cmp	r2, r3
 80234c0:	d127      	bne.n	8023512 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80234c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80234c4:	3330      	adds	r3, #48	@ 0x30
 80234c6:	4618      	mov	r0, r3
 80234c8:	f7fe fbf2 	bl	8021cb0 <ld_dword>
 80234cc:	4603      	mov	r3, r0
 80234ce:	4a1c      	ldr	r2, [pc, #112]	@ (8023540 <find_volume+0x48c>)
 80234d0:	4293      	cmp	r3, r2
 80234d2:	d11e      	bne.n	8023512 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80234d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80234d6:	3330      	adds	r3, #48	@ 0x30
 80234d8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80234dc:	4618      	mov	r0, r3
 80234de:	f7fe fbe7 	bl	8021cb0 <ld_dword>
 80234e2:	4603      	mov	r3, r0
 80234e4:	4a17      	ldr	r2, [pc, #92]	@ (8023544 <find_volume+0x490>)
 80234e6:	4293      	cmp	r3, r2
 80234e8:	d113      	bne.n	8023512 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80234ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80234ec:	3330      	adds	r3, #48	@ 0x30
 80234ee:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80234f2:	4618      	mov	r0, r3
 80234f4:	f7fe fbdc 	bl	8021cb0 <ld_dword>
 80234f8:	4602      	mov	r2, r0
 80234fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80234fc:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80234fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8023500:	3330      	adds	r3, #48	@ 0x30
 8023502:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8023506:	4618      	mov	r0, r3
 8023508:	f7fe fbd2 	bl	8021cb0 <ld_dword>
 802350c:	4602      	mov	r2, r0
 802350e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8023510:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8023512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8023514:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8023518:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 802351a:	4b0b      	ldr	r3, [pc, #44]	@ (8023548 <find_volume+0x494>)
 802351c:	881b      	ldrh	r3, [r3, #0]
 802351e:	3301      	adds	r3, #1
 8023520:	b29a      	uxth	r2, r3
 8023522:	4b09      	ldr	r3, [pc, #36]	@ (8023548 <find_volume+0x494>)
 8023524:	801a      	strh	r2, [r3, #0]
 8023526:	4b08      	ldr	r3, [pc, #32]	@ (8023548 <find_volume+0x494>)
 8023528:	881a      	ldrh	r2, [r3, #0]
 802352a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802352c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 802352e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8023530:	f7fe fdee 	bl	8022110 <clear_lock>
#endif
	return FR_OK;
 8023534:	2300      	movs	r3, #0
}
 8023536:	4618      	mov	r0, r3
 8023538:	3758      	adds	r7, #88	@ 0x58
 802353a:	46bd      	mov	sp, r7
 802353c:	bd80      	pop	{r7, pc}
 802353e:	bf00      	nop
 8023540:	41615252 	.word	0x41615252
 8023544:	61417272 	.word	0x61417272
 8023548:	24000a8c 	.word	0x24000a8c

0802354c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 802354c:	b580      	push	{r7, lr}
 802354e:	b084      	sub	sp, #16
 8023550:	af00      	add	r7, sp, #0
 8023552:	6078      	str	r0, [r7, #4]
 8023554:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8023556:	2309      	movs	r3, #9
 8023558:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 802355a:	687b      	ldr	r3, [r7, #4]
 802355c:	2b00      	cmp	r3, #0
 802355e:	d01c      	beq.n	802359a <validate+0x4e>
 8023560:	687b      	ldr	r3, [r7, #4]
 8023562:	681b      	ldr	r3, [r3, #0]
 8023564:	2b00      	cmp	r3, #0
 8023566:	d018      	beq.n	802359a <validate+0x4e>
 8023568:	687b      	ldr	r3, [r7, #4]
 802356a:	681b      	ldr	r3, [r3, #0]
 802356c:	781b      	ldrb	r3, [r3, #0]
 802356e:	2b00      	cmp	r3, #0
 8023570:	d013      	beq.n	802359a <validate+0x4e>
 8023572:	687b      	ldr	r3, [r7, #4]
 8023574:	889a      	ldrh	r2, [r3, #4]
 8023576:	687b      	ldr	r3, [r7, #4]
 8023578:	681b      	ldr	r3, [r3, #0]
 802357a:	88db      	ldrh	r3, [r3, #6]
 802357c:	429a      	cmp	r2, r3
 802357e:	d10c      	bne.n	802359a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8023580:	687b      	ldr	r3, [r7, #4]
 8023582:	681b      	ldr	r3, [r3, #0]
 8023584:	785b      	ldrb	r3, [r3, #1]
 8023586:	4618      	mov	r0, r3
 8023588:	f7fe fada 	bl	8021b40 <disk_status>
 802358c:	4603      	mov	r3, r0
 802358e:	f003 0301 	and.w	r3, r3, #1
 8023592:	2b00      	cmp	r3, #0
 8023594:	d101      	bne.n	802359a <validate+0x4e>
			res = FR_OK;
 8023596:	2300      	movs	r3, #0
 8023598:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 802359a:	7bfb      	ldrb	r3, [r7, #15]
 802359c:	2b00      	cmp	r3, #0
 802359e:	d102      	bne.n	80235a6 <validate+0x5a>
 80235a0:	687b      	ldr	r3, [r7, #4]
 80235a2:	681b      	ldr	r3, [r3, #0]
 80235a4:	e000      	b.n	80235a8 <validate+0x5c>
 80235a6:	2300      	movs	r3, #0
 80235a8:	683a      	ldr	r2, [r7, #0]
 80235aa:	6013      	str	r3, [r2, #0]
	return res;
 80235ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80235ae:	4618      	mov	r0, r3
 80235b0:	3710      	adds	r7, #16
 80235b2:	46bd      	mov	sp, r7
 80235b4:	bd80      	pop	{r7, pc}
	...

080235b8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80235b8:	b580      	push	{r7, lr}
 80235ba:	b088      	sub	sp, #32
 80235bc:	af00      	add	r7, sp, #0
 80235be:	60f8      	str	r0, [r7, #12]
 80235c0:	60b9      	str	r1, [r7, #8]
 80235c2:	4613      	mov	r3, r2
 80235c4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80235c6:	68bb      	ldr	r3, [r7, #8]
 80235c8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80235ca:	f107 0310 	add.w	r3, r7, #16
 80235ce:	4618      	mov	r0, r3
 80235d0:	f7ff fcd5 	bl	8022f7e <get_ldnumber>
 80235d4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80235d6:	69fb      	ldr	r3, [r7, #28]
 80235d8:	2b00      	cmp	r3, #0
 80235da:	da01      	bge.n	80235e0 <f_mount+0x28>
 80235dc:	230b      	movs	r3, #11
 80235de:	e02b      	b.n	8023638 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80235e0:	4a17      	ldr	r2, [pc, #92]	@ (8023640 <f_mount+0x88>)
 80235e2:	69fb      	ldr	r3, [r7, #28]
 80235e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80235e8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80235ea:	69bb      	ldr	r3, [r7, #24]
 80235ec:	2b00      	cmp	r3, #0
 80235ee:	d005      	beq.n	80235fc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80235f0:	69b8      	ldr	r0, [r7, #24]
 80235f2:	f7fe fd8d 	bl	8022110 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80235f6:	69bb      	ldr	r3, [r7, #24]
 80235f8:	2200      	movs	r2, #0
 80235fa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80235fc:	68fb      	ldr	r3, [r7, #12]
 80235fe:	2b00      	cmp	r3, #0
 8023600:	d002      	beq.n	8023608 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8023602:	68fb      	ldr	r3, [r7, #12]
 8023604:	2200      	movs	r2, #0
 8023606:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8023608:	68fa      	ldr	r2, [r7, #12]
 802360a:	490d      	ldr	r1, [pc, #52]	@ (8023640 <f_mount+0x88>)
 802360c:	69fb      	ldr	r3, [r7, #28]
 802360e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8023612:	68fb      	ldr	r3, [r7, #12]
 8023614:	2b00      	cmp	r3, #0
 8023616:	d002      	beq.n	802361e <f_mount+0x66>
 8023618:	79fb      	ldrb	r3, [r7, #7]
 802361a:	2b01      	cmp	r3, #1
 802361c:	d001      	beq.n	8023622 <f_mount+0x6a>
 802361e:	2300      	movs	r3, #0
 8023620:	e00a      	b.n	8023638 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8023622:	f107 010c 	add.w	r1, r7, #12
 8023626:	f107 0308 	add.w	r3, r7, #8
 802362a:	2200      	movs	r2, #0
 802362c:	4618      	mov	r0, r3
 802362e:	f7ff fd41 	bl	80230b4 <find_volume>
 8023632:	4603      	mov	r3, r0
 8023634:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8023636:	7dfb      	ldrb	r3, [r7, #23]
}
 8023638:	4618      	mov	r0, r3
 802363a:	3720      	adds	r7, #32
 802363c:	46bd      	mov	sp, r7
 802363e:	bd80      	pop	{r7, pc}
 8023640:	24000a88 	.word	0x24000a88

08023644 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8023644:	b580      	push	{r7, lr}
 8023646:	b098      	sub	sp, #96	@ 0x60
 8023648:	af00      	add	r7, sp, #0
 802364a:	60f8      	str	r0, [r7, #12]
 802364c:	60b9      	str	r1, [r7, #8]
 802364e:	4613      	mov	r3, r2
 8023650:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8023652:	68fb      	ldr	r3, [r7, #12]
 8023654:	2b00      	cmp	r3, #0
 8023656:	d101      	bne.n	802365c <f_open+0x18>
 8023658:	2309      	movs	r3, #9
 802365a:	e1a9      	b.n	80239b0 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 802365c:	79fb      	ldrb	r3, [r7, #7]
 802365e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8023662:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8023664:	79fa      	ldrb	r2, [r7, #7]
 8023666:	f107 0110 	add.w	r1, r7, #16
 802366a:	f107 0308 	add.w	r3, r7, #8
 802366e:	4618      	mov	r0, r3
 8023670:	f7ff fd20 	bl	80230b4 <find_volume>
 8023674:	4603      	mov	r3, r0
 8023676:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 802367a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 802367e:	2b00      	cmp	r3, #0
 8023680:	f040 818d 	bne.w	802399e <f_open+0x35a>
		dj.obj.fs = fs;
 8023684:	693b      	ldr	r3, [r7, #16]
 8023686:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8023688:	68ba      	ldr	r2, [r7, #8]
 802368a:	f107 0314 	add.w	r3, r7, #20
 802368e:	4611      	mov	r1, r2
 8023690:	4618      	mov	r0, r3
 8023692:	f7ff fc03 	bl	8022e9c <follow_path>
 8023696:	4603      	mov	r3, r0
 8023698:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 802369c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80236a0:	2b00      	cmp	r3, #0
 80236a2:	d118      	bne.n	80236d6 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80236a4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80236a8:	b25b      	sxtb	r3, r3
 80236aa:	2b00      	cmp	r3, #0
 80236ac:	da03      	bge.n	80236b6 <f_open+0x72>
				res = FR_INVALID_NAME;
 80236ae:	2306      	movs	r3, #6
 80236b0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80236b4:	e00f      	b.n	80236d6 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80236b6:	79fb      	ldrb	r3, [r7, #7]
 80236b8:	2b01      	cmp	r3, #1
 80236ba:	bf8c      	ite	hi
 80236bc:	2301      	movhi	r3, #1
 80236be:	2300      	movls	r3, #0
 80236c0:	b2db      	uxtb	r3, r3
 80236c2:	461a      	mov	r2, r3
 80236c4:	f107 0314 	add.w	r3, r7, #20
 80236c8:	4611      	mov	r1, r2
 80236ca:	4618      	mov	r0, r3
 80236cc:	f7fe fbd8 	bl	8021e80 <chk_lock>
 80236d0:	4603      	mov	r3, r0
 80236d2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80236d6:	79fb      	ldrb	r3, [r7, #7]
 80236d8:	f003 031c 	and.w	r3, r3, #28
 80236dc:	2b00      	cmp	r3, #0
 80236de:	d07f      	beq.n	80237e0 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80236e0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80236e4:	2b00      	cmp	r3, #0
 80236e6:	d017      	beq.n	8023718 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80236e8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80236ec:	2b04      	cmp	r3, #4
 80236ee:	d10e      	bne.n	802370e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80236f0:	f7fe fc22 	bl	8021f38 <enq_lock>
 80236f4:	4603      	mov	r3, r0
 80236f6:	2b00      	cmp	r3, #0
 80236f8:	d006      	beq.n	8023708 <f_open+0xc4>
 80236fa:	f107 0314 	add.w	r3, r7, #20
 80236fe:	4618      	mov	r0, r3
 8023700:	f7ff fb06 	bl	8022d10 <dir_register>
 8023704:	4603      	mov	r3, r0
 8023706:	e000      	b.n	802370a <f_open+0xc6>
 8023708:	2312      	movs	r3, #18
 802370a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 802370e:	79fb      	ldrb	r3, [r7, #7]
 8023710:	f043 0308 	orr.w	r3, r3, #8
 8023714:	71fb      	strb	r3, [r7, #7]
 8023716:	e010      	b.n	802373a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8023718:	7ebb      	ldrb	r3, [r7, #26]
 802371a:	f003 0311 	and.w	r3, r3, #17
 802371e:	2b00      	cmp	r3, #0
 8023720:	d003      	beq.n	802372a <f_open+0xe6>
					res = FR_DENIED;
 8023722:	2307      	movs	r3, #7
 8023724:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8023728:	e007      	b.n	802373a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 802372a:	79fb      	ldrb	r3, [r7, #7]
 802372c:	f003 0304 	and.w	r3, r3, #4
 8023730:	2b00      	cmp	r3, #0
 8023732:	d002      	beq.n	802373a <f_open+0xf6>
 8023734:	2308      	movs	r3, #8
 8023736:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 802373a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 802373e:	2b00      	cmp	r3, #0
 8023740:	d168      	bne.n	8023814 <f_open+0x1d0>
 8023742:	79fb      	ldrb	r3, [r7, #7]
 8023744:	f003 0308 	and.w	r3, r3, #8
 8023748:	2b00      	cmp	r3, #0
 802374a:	d063      	beq.n	8023814 <f_open+0x1d0>
				dw = GET_FATTIME();
 802374c:	f7fd ff6c 	bl	8021628 <get_fattime>
 8023750:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8023752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8023754:	330e      	adds	r3, #14
 8023756:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8023758:	4618      	mov	r0, r3
 802375a:	f7fe fae7 	bl	8021d2c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 802375e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8023760:	3316      	adds	r3, #22
 8023762:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8023764:	4618      	mov	r0, r3
 8023766:	f7fe fae1 	bl	8021d2c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 802376a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802376c:	330b      	adds	r3, #11
 802376e:	2220      	movs	r2, #32
 8023770:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8023772:	693b      	ldr	r3, [r7, #16]
 8023774:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8023776:	4611      	mov	r1, r2
 8023778:	4618      	mov	r0, r3
 802377a:	f7ff fa35 	bl	8022be8 <ld_clust>
 802377e:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8023780:	693b      	ldr	r3, [r7, #16]
 8023782:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8023784:	2200      	movs	r2, #0
 8023786:	4618      	mov	r0, r3
 8023788:	f7ff fa4d 	bl	8022c26 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 802378c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802378e:	331c      	adds	r3, #28
 8023790:	2100      	movs	r1, #0
 8023792:	4618      	mov	r0, r3
 8023794:	f7fe faca 	bl	8021d2c <st_dword>
					fs->wflag = 1;
 8023798:	693b      	ldr	r3, [r7, #16]
 802379a:	2201      	movs	r2, #1
 802379c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 802379e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80237a0:	2b00      	cmp	r3, #0
 80237a2:	d037      	beq.n	8023814 <f_open+0x1d0>
						dw = fs->winsect;
 80237a4:	693b      	ldr	r3, [r7, #16]
 80237a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80237a8:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80237aa:	f107 0314 	add.w	r3, r7, #20
 80237ae:	2200      	movs	r2, #0
 80237b0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80237b2:	4618      	mov	r0, r3
 80237b4:	f7fe ff60 	bl	8022678 <remove_chain>
 80237b8:	4603      	mov	r3, r0
 80237ba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 80237be:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80237c2:	2b00      	cmp	r3, #0
 80237c4:	d126      	bne.n	8023814 <f_open+0x1d0>
							res = move_window(fs, dw);
 80237c6:	693b      	ldr	r3, [r7, #16]
 80237c8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80237ca:	4618      	mov	r0, r3
 80237cc:	f7fe fd08 	bl	80221e0 <move_window>
 80237d0:	4603      	mov	r3, r0
 80237d2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80237d6:	693b      	ldr	r3, [r7, #16]
 80237d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80237da:	3a01      	subs	r2, #1
 80237dc:	60da      	str	r2, [r3, #12]
 80237de:	e019      	b.n	8023814 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80237e0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80237e4:	2b00      	cmp	r3, #0
 80237e6:	d115      	bne.n	8023814 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80237e8:	7ebb      	ldrb	r3, [r7, #26]
 80237ea:	f003 0310 	and.w	r3, r3, #16
 80237ee:	2b00      	cmp	r3, #0
 80237f0:	d003      	beq.n	80237fa <f_open+0x1b6>
					res = FR_NO_FILE;
 80237f2:	2304      	movs	r3, #4
 80237f4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80237f8:	e00c      	b.n	8023814 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80237fa:	79fb      	ldrb	r3, [r7, #7]
 80237fc:	f003 0302 	and.w	r3, r3, #2
 8023800:	2b00      	cmp	r3, #0
 8023802:	d007      	beq.n	8023814 <f_open+0x1d0>
 8023804:	7ebb      	ldrb	r3, [r7, #26]
 8023806:	f003 0301 	and.w	r3, r3, #1
 802380a:	2b00      	cmp	r3, #0
 802380c:	d002      	beq.n	8023814 <f_open+0x1d0>
						res = FR_DENIED;
 802380e:	2307      	movs	r3, #7
 8023810:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8023814:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8023818:	2b00      	cmp	r3, #0
 802381a:	d126      	bne.n	802386a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 802381c:	79fb      	ldrb	r3, [r7, #7]
 802381e:	f003 0308 	and.w	r3, r3, #8
 8023822:	2b00      	cmp	r3, #0
 8023824:	d003      	beq.n	802382e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8023826:	79fb      	ldrb	r3, [r7, #7]
 8023828:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802382c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 802382e:	693b      	ldr	r3, [r7, #16]
 8023830:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8023832:	68fb      	ldr	r3, [r7, #12]
 8023834:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8023836:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8023838:	68fb      	ldr	r3, [r7, #12]
 802383a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 802383c:	79fb      	ldrb	r3, [r7, #7]
 802383e:	2b01      	cmp	r3, #1
 8023840:	bf8c      	ite	hi
 8023842:	2301      	movhi	r3, #1
 8023844:	2300      	movls	r3, #0
 8023846:	b2db      	uxtb	r3, r3
 8023848:	461a      	mov	r2, r3
 802384a:	f107 0314 	add.w	r3, r7, #20
 802384e:	4611      	mov	r1, r2
 8023850:	4618      	mov	r0, r3
 8023852:	f7fe fb93 	bl	8021f7c <inc_lock>
 8023856:	4602      	mov	r2, r0
 8023858:	68fb      	ldr	r3, [r7, #12]
 802385a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 802385c:	68fb      	ldr	r3, [r7, #12]
 802385e:	691b      	ldr	r3, [r3, #16]
 8023860:	2b00      	cmp	r3, #0
 8023862:	d102      	bne.n	802386a <f_open+0x226>
 8023864:	2302      	movs	r3, #2
 8023866:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 802386a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 802386e:	2b00      	cmp	r3, #0
 8023870:	f040 8095 	bne.w	802399e <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8023874:	693b      	ldr	r3, [r7, #16]
 8023876:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8023878:	4611      	mov	r1, r2
 802387a:	4618      	mov	r0, r3
 802387c:	f7ff f9b4 	bl	8022be8 <ld_clust>
 8023880:	4602      	mov	r2, r0
 8023882:	68fb      	ldr	r3, [r7, #12]
 8023884:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8023886:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8023888:	331c      	adds	r3, #28
 802388a:	4618      	mov	r0, r3
 802388c:	f7fe fa10 	bl	8021cb0 <ld_dword>
 8023890:	4602      	mov	r2, r0
 8023892:	68fb      	ldr	r3, [r7, #12]
 8023894:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8023896:	68fb      	ldr	r3, [r7, #12]
 8023898:	2200      	movs	r2, #0
 802389a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 802389c:	693a      	ldr	r2, [r7, #16]
 802389e:	68fb      	ldr	r3, [r7, #12]
 80238a0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80238a2:	693b      	ldr	r3, [r7, #16]
 80238a4:	88da      	ldrh	r2, [r3, #6]
 80238a6:	68fb      	ldr	r3, [r7, #12]
 80238a8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80238aa:	68fb      	ldr	r3, [r7, #12]
 80238ac:	79fa      	ldrb	r2, [r7, #7]
 80238ae:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80238b0:	68fb      	ldr	r3, [r7, #12]
 80238b2:	2200      	movs	r2, #0
 80238b4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80238b6:	68fb      	ldr	r3, [r7, #12]
 80238b8:	2200      	movs	r2, #0
 80238ba:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80238bc:	68fb      	ldr	r3, [r7, #12]
 80238be:	2200      	movs	r2, #0
 80238c0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80238c2:	68fb      	ldr	r3, [r7, #12]
 80238c4:	3330      	adds	r3, #48	@ 0x30
 80238c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80238ca:	2100      	movs	r1, #0
 80238cc:	4618      	mov	r0, r3
 80238ce:	f7fe fa7a 	bl	8021dc6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80238d2:	79fb      	ldrb	r3, [r7, #7]
 80238d4:	f003 0320 	and.w	r3, r3, #32
 80238d8:	2b00      	cmp	r3, #0
 80238da:	d060      	beq.n	802399e <f_open+0x35a>
 80238dc:	68fb      	ldr	r3, [r7, #12]
 80238de:	68db      	ldr	r3, [r3, #12]
 80238e0:	2b00      	cmp	r3, #0
 80238e2:	d05c      	beq.n	802399e <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80238e4:	68fb      	ldr	r3, [r7, #12]
 80238e6:	68da      	ldr	r2, [r3, #12]
 80238e8:	68fb      	ldr	r3, [r7, #12]
 80238ea:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80238ec:	693b      	ldr	r3, [r7, #16]
 80238ee:	895b      	ldrh	r3, [r3, #10]
 80238f0:	025b      	lsls	r3, r3, #9
 80238f2:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80238f4:	68fb      	ldr	r3, [r7, #12]
 80238f6:	689b      	ldr	r3, [r3, #8]
 80238f8:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80238fa:	68fb      	ldr	r3, [r7, #12]
 80238fc:	68db      	ldr	r3, [r3, #12]
 80238fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8023900:	e016      	b.n	8023930 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8023902:	68fb      	ldr	r3, [r7, #12]
 8023904:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8023906:	4618      	mov	r0, r3
 8023908:	f7fe fd25 	bl	8022356 <get_fat>
 802390c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 802390e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8023910:	2b01      	cmp	r3, #1
 8023912:	d802      	bhi.n	802391a <f_open+0x2d6>
 8023914:	2302      	movs	r3, #2
 8023916:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 802391a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 802391c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023920:	d102      	bne.n	8023928 <f_open+0x2e4>
 8023922:	2301      	movs	r3, #1
 8023924:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8023928:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802392a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802392c:	1ad3      	subs	r3, r2, r3
 802392e:	657b      	str	r3, [r7, #84]	@ 0x54
 8023930:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8023934:	2b00      	cmp	r3, #0
 8023936:	d103      	bne.n	8023940 <f_open+0x2fc>
 8023938:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802393a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802393c:	429a      	cmp	r2, r3
 802393e:	d8e0      	bhi.n	8023902 <f_open+0x2be>
				}
				fp->clust = clst;
 8023940:	68fb      	ldr	r3, [r7, #12]
 8023942:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8023944:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8023946:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 802394a:	2b00      	cmp	r3, #0
 802394c:	d127      	bne.n	802399e <f_open+0x35a>
 802394e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8023950:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8023954:	2b00      	cmp	r3, #0
 8023956:	d022      	beq.n	802399e <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8023958:	693b      	ldr	r3, [r7, #16]
 802395a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 802395c:	4618      	mov	r0, r3
 802395e:	f7fe fcdb 	bl	8022318 <clust2sect>
 8023962:	6478      	str	r0, [r7, #68]	@ 0x44
 8023964:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8023966:	2b00      	cmp	r3, #0
 8023968:	d103      	bne.n	8023972 <f_open+0x32e>
						res = FR_INT_ERR;
 802396a:	2302      	movs	r3, #2
 802396c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8023970:	e015      	b.n	802399e <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8023972:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8023974:	0a5a      	lsrs	r2, r3, #9
 8023976:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8023978:	441a      	add	r2, r3
 802397a:	68fb      	ldr	r3, [r7, #12]
 802397c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 802397e:	693b      	ldr	r3, [r7, #16]
 8023980:	7858      	ldrb	r0, [r3, #1]
 8023982:	68fb      	ldr	r3, [r7, #12]
 8023984:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8023988:	68fb      	ldr	r3, [r7, #12]
 802398a:	6a1a      	ldr	r2, [r3, #32]
 802398c:	2301      	movs	r3, #1
 802398e:	f7fe f919 	bl	8021bc4 <disk_read>
 8023992:	4603      	mov	r3, r0
 8023994:	2b00      	cmp	r3, #0
 8023996:	d002      	beq.n	802399e <f_open+0x35a>
 8023998:	2301      	movs	r3, #1
 802399a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 802399e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80239a2:	2b00      	cmp	r3, #0
 80239a4:	d002      	beq.n	80239ac <f_open+0x368>
 80239a6:	68fb      	ldr	r3, [r7, #12]
 80239a8:	2200      	movs	r2, #0
 80239aa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80239ac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80239b0:	4618      	mov	r0, r3
 80239b2:	3760      	adds	r7, #96	@ 0x60
 80239b4:	46bd      	mov	sp, r7
 80239b6:	bd80      	pop	{r7, pc}

080239b8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80239b8:	b580      	push	{r7, lr}
 80239ba:	b08e      	sub	sp, #56	@ 0x38
 80239bc:	af00      	add	r7, sp, #0
 80239be:	60f8      	str	r0, [r7, #12]
 80239c0:	60b9      	str	r1, [r7, #8]
 80239c2:	607a      	str	r2, [r7, #4]
 80239c4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80239c6:	68bb      	ldr	r3, [r7, #8]
 80239c8:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 80239ca:	683b      	ldr	r3, [r7, #0]
 80239cc:	2200      	movs	r2, #0
 80239ce:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80239d0:	68fb      	ldr	r3, [r7, #12]
 80239d2:	f107 0214 	add.w	r2, r7, #20
 80239d6:	4611      	mov	r1, r2
 80239d8:	4618      	mov	r0, r3
 80239da:	f7ff fdb7 	bl	802354c <validate>
 80239de:	4603      	mov	r3, r0
 80239e0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80239e4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80239e8:	2b00      	cmp	r3, #0
 80239ea:	d107      	bne.n	80239fc <f_read+0x44>
 80239ec:	68fb      	ldr	r3, [r7, #12]
 80239ee:	7d5b      	ldrb	r3, [r3, #21]
 80239f0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80239f4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80239f8:	2b00      	cmp	r3, #0
 80239fa:	d002      	beq.n	8023a02 <f_read+0x4a>
 80239fc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8023a00:	e115      	b.n	8023c2e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8023a02:	68fb      	ldr	r3, [r7, #12]
 8023a04:	7d1b      	ldrb	r3, [r3, #20]
 8023a06:	f003 0301 	and.w	r3, r3, #1
 8023a0a:	2b00      	cmp	r3, #0
 8023a0c:	d101      	bne.n	8023a12 <f_read+0x5a>
 8023a0e:	2307      	movs	r3, #7
 8023a10:	e10d      	b.n	8023c2e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8023a12:	68fb      	ldr	r3, [r7, #12]
 8023a14:	68da      	ldr	r2, [r3, #12]
 8023a16:	68fb      	ldr	r3, [r7, #12]
 8023a18:	699b      	ldr	r3, [r3, #24]
 8023a1a:	1ad3      	subs	r3, r2, r3
 8023a1c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8023a1e:	687a      	ldr	r2, [r7, #4]
 8023a20:	6a3b      	ldr	r3, [r7, #32]
 8023a22:	429a      	cmp	r2, r3
 8023a24:	f240 80fe 	bls.w	8023c24 <f_read+0x26c>
 8023a28:	6a3b      	ldr	r3, [r7, #32]
 8023a2a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8023a2c:	e0fa      	b.n	8023c24 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8023a2e:	68fb      	ldr	r3, [r7, #12]
 8023a30:	699b      	ldr	r3, [r3, #24]
 8023a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8023a36:	2b00      	cmp	r3, #0
 8023a38:	f040 80c6 	bne.w	8023bc8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8023a3c:	68fb      	ldr	r3, [r7, #12]
 8023a3e:	699b      	ldr	r3, [r3, #24]
 8023a40:	0a5b      	lsrs	r3, r3, #9
 8023a42:	697a      	ldr	r2, [r7, #20]
 8023a44:	8952      	ldrh	r2, [r2, #10]
 8023a46:	3a01      	subs	r2, #1
 8023a48:	4013      	ands	r3, r2
 8023a4a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8023a4c:	69fb      	ldr	r3, [r7, #28]
 8023a4e:	2b00      	cmp	r3, #0
 8023a50:	d12f      	bne.n	8023ab2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8023a52:	68fb      	ldr	r3, [r7, #12]
 8023a54:	699b      	ldr	r3, [r3, #24]
 8023a56:	2b00      	cmp	r3, #0
 8023a58:	d103      	bne.n	8023a62 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8023a5a:	68fb      	ldr	r3, [r7, #12]
 8023a5c:	689b      	ldr	r3, [r3, #8]
 8023a5e:	633b      	str	r3, [r7, #48]	@ 0x30
 8023a60:	e013      	b.n	8023a8a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8023a62:	68fb      	ldr	r3, [r7, #12]
 8023a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023a66:	2b00      	cmp	r3, #0
 8023a68:	d007      	beq.n	8023a7a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8023a6a:	68fb      	ldr	r3, [r7, #12]
 8023a6c:	699b      	ldr	r3, [r3, #24]
 8023a6e:	4619      	mov	r1, r3
 8023a70:	68f8      	ldr	r0, [r7, #12]
 8023a72:	f7fe fefe 	bl	8022872 <clmt_clust>
 8023a76:	6338      	str	r0, [r7, #48]	@ 0x30
 8023a78:	e007      	b.n	8023a8a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8023a7a:	68fa      	ldr	r2, [r7, #12]
 8023a7c:	68fb      	ldr	r3, [r7, #12]
 8023a7e:	69db      	ldr	r3, [r3, #28]
 8023a80:	4619      	mov	r1, r3
 8023a82:	4610      	mov	r0, r2
 8023a84:	f7fe fc67 	bl	8022356 <get_fat>
 8023a88:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8023a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023a8c:	2b01      	cmp	r3, #1
 8023a8e:	d804      	bhi.n	8023a9a <f_read+0xe2>
 8023a90:	68fb      	ldr	r3, [r7, #12]
 8023a92:	2202      	movs	r2, #2
 8023a94:	755a      	strb	r2, [r3, #21]
 8023a96:	2302      	movs	r3, #2
 8023a98:	e0c9      	b.n	8023c2e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8023a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023aa0:	d104      	bne.n	8023aac <f_read+0xf4>
 8023aa2:	68fb      	ldr	r3, [r7, #12]
 8023aa4:	2201      	movs	r2, #1
 8023aa6:	755a      	strb	r2, [r3, #21]
 8023aa8:	2301      	movs	r3, #1
 8023aaa:	e0c0      	b.n	8023c2e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8023aac:	68fb      	ldr	r3, [r7, #12]
 8023aae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8023ab0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8023ab2:	697a      	ldr	r2, [r7, #20]
 8023ab4:	68fb      	ldr	r3, [r7, #12]
 8023ab6:	69db      	ldr	r3, [r3, #28]
 8023ab8:	4619      	mov	r1, r3
 8023aba:	4610      	mov	r0, r2
 8023abc:	f7fe fc2c 	bl	8022318 <clust2sect>
 8023ac0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8023ac2:	69bb      	ldr	r3, [r7, #24]
 8023ac4:	2b00      	cmp	r3, #0
 8023ac6:	d104      	bne.n	8023ad2 <f_read+0x11a>
 8023ac8:	68fb      	ldr	r3, [r7, #12]
 8023aca:	2202      	movs	r2, #2
 8023acc:	755a      	strb	r2, [r3, #21]
 8023ace:	2302      	movs	r3, #2
 8023ad0:	e0ad      	b.n	8023c2e <f_read+0x276>
			sect += csect;
 8023ad2:	69ba      	ldr	r2, [r7, #24]
 8023ad4:	69fb      	ldr	r3, [r7, #28]
 8023ad6:	4413      	add	r3, r2
 8023ad8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8023ada:	687b      	ldr	r3, [r7, #4]
 8023adc:	0a5b      	lsrs	r3, r3, #9
 8023ade:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8023ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023ae2:	2b00      	cmp	r3, #0
 8023ae4:	d039      	beq.n	8023b5a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8023ae6:	69fa      	ldr	r2, [r7, #28]
 8023ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023aea:	4413      	add	r3, r2
 8023aec:	697a      	ldr	r2, [r7, #20]
 8023aee:	8952      	ldrh	r2, [r2, #10]
 8023af0:	4293      	cmp	r3, r2
 8023af2:	d905      	bls.n	8023b00 <f_read+0x148>
					cc = fs->csize - csect;
 8023af4:	697b      	ldr	r3, [r7, #20]
 8023af6:	895b      	ldrh	r3, [r3, #10]
 8023af8:	461a      	mov	r2, r3
 8023afa:	69fb      	ldr	r3, [r7, #28]
 8023afc:	1ad3      	subs	r3, r2, r3
 8023afe:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8023b00:	697b      	ldr	r3, [r7, #20]
 8023b02:	7858      	ldrb	r0, [r3, #1]
 8023b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023b06:	69ba      	ldr	r2, [r7, #24]
 8023b08:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8023b0a:	f7fe f85b 	bl	8021bc4 <disk_read>
 8023b0e:	4603      	mov	r3, r0
 8023b10:	2b00      	cmp	r3, #0
 8023b12:	d004      	beq.n	8023b1e <f_read+0x166>
 8023b14:	68fb      	ldr	r3, [r7, #12]
 8023b16:	2201      	movs	r2, #1
 8023b18:	755a      	strb	r2, [r3, #21]
 8023b1a:	2301      	movs	r3, #1
 8023b1c:	e087      	b.n	8023c2e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8023b1e:	68fb      	ldr	r3, [r7, #12]
 8023b20:	7d1b      	ldrb	r3, [r3, #20]
 8023b22:	b25b      	sxtb	r3, r3
 8023b24:	2b00      	cmp	r3, #0
 8023b26:	da14      	bge.n	8023b52 <f_read+0x19a>
 8023b28:	68fb      	ldr	r3, [r7, #12]
 8023b2a:	6a1a      	ldr	r2, [r3, #32]
 8023b2c:	69bb      	ldr	r3, [r7, #24]
 8023b2e:	1ad3      	subs	r3, r2, r3
 8023b30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8023b32:	429a      	cmp	r2, r3
 8023b34:	d90d      	bls.n	8023b52 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8023b36:	68fb      	ldr	r3, [r7, #12]
 8023b38:	6a1a      	ldr	r2, [r3, #32]
 8023b3a:	69bb      	ldr	r3, [r7, #24]
 8023b3c:	1ad3      	subs	r3, r2, r3
 8023b3e:	025b      	lsls	r3, r3, #9
 8023b40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8023b42:	18d0      	adds	r0, r2, r3
 8023b44:	68fb      	ldr	r3, [r7, #12]
 8023b46:	3330      	adds	r3, #48	@ 0x30
 8023b48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8023b4c:	4619      	mov	r1, r3
 8023b4e:	f7fe f919 	bl	8021d84 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8023b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023b54:	025b      	lsls	r3, r3, #9
 8023b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8023b58:	e050      	b.n	8023bfc <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8023b5a:	68fb      	ldr	r3, [r7, #12]
 8023b5c:	6a1b      	ldr	r3, [r3, #32]
 8023b5e:	69ba      	ldr	r2, [r7, #24]
 8023b60:	429a      	cmp	r2, r3
 8023b62:	d02e      	beq.n	8023bc2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8023b64:	68fb      	ldr	r3, [r7, #12]
 8023b66:	7d1b      	ldrb	r3, [r3, #20]
 8023b68:	b25b      	sxtb	r3, r3
 8023b6a:	2b00      	cmp	r3, #0
 8023b6c:	da18      	bge.n	8023ba0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8023b6e:	697b      	ldr	r3, [r7, #20]
 8023b70:	7858      	ldrb	r0, [r3, #1]
 8023b72:	68fb      	ldr	r3, [r7, #12]
 8023b74:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8023b78:	68fb      	ldr	r3, [r7, #12]
 8023b7a:	6a1a      	ldr	r2, [r3, #32]
 8023b7c:	2301      	movs	r3, #1
 8023b7e:	f7fe f841 	bl	8021c04 <disk_write>
 8023b82:	4603      	mov	r3, r0
 8023b84:	2b00      	cmp	r3, #0
 8023b86:	d004      	beq.n	8023b92 <f_read+0x1da>
 8023b88:	68fb      	ldr	r3, [r7, #12]
 8023b8a:	2201      	movs	r2, #1
 8023b8c:	755a      	strb	r2, [r3, #21]
 8023b8e:	2301      	movs	r3, #1
 8023b90:	e04d      	b.n	8023c2e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8023b92:	68fb      	ldr	r3, [r7, #12]
 8023b94:	7d1b      	ldrb	r3, [r3, #20]
 8023b96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8023b9a:	b2da      	uxtb	r2, r3
 8023b9c:	68fb      	ldr	r3, [r7, #12]
 8023b9e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8023ba0:	697b      	ldr	r3, [r7, #20]
 8023ba2:	7858      	ldrb	r0, [r3, #1]
 8023ba4:	68fb      	ldr	r3, [r7, #12]
 8023ba6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8023baa:	2301      	movs	r3, #1
 8023bac:	69ba      	ldr	r2, [r7, #24]
 8023bae:	f7fe f809 	bl	8021bc4 <disk_read>
 8023bb2:	4603      	mov	r3, r0
 8023bb4:	2b00      	cmp	r3, #0
 8023bb6:	d004      	beq.n	8023bc2 <f_read+0x20a>
 8023bb8:	68fb      	ldr	r3, [r7, #12]
 8023bba:	2201      	movs	r2, #1
 8023bbc:	755a      	strb	r2, [r3, #21]
 8023bbe:	2301      	movs	r3, #1
 8023bc0:	e035      	b.n	8023c2e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8023bc2:	68fb      	ldr	r3, [r7, #12]
 8023bc4:	69ba      	ldr	r2, [r7, #24]
 8023bc6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8023bc8:	68fb      	ldr	r3, [r7, #12]
 8023bca:	699b      	ldr	r3, [r3, #24]
 8023bcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8023bd0:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8023bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8023bd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8023bd8:	687b      	ldr	r3, [r7, #4]
 8023bda:	429a      	cmp	r2, r3
 8023bdc:	d901      	bls.n	8023be2 <f_read+0x22a>
 8023bde:	687b      	ldr	r3, [r7, #4]
 8023be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8023be2:	68fb      	ldr	r3, [r7, #12]
 8023be4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8023be8:	68fb      	ldr	r3, [r7, #12]
 8023bea:	699b      	ldr	r3, [r3, #24]
 8023bec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8023bf0:	4413      	add	r3, r2
 8023bf2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8023bf4:	4619      	mov	r1, r3
 8023bf6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8023bf8:	f7fe f8c4 	bl	8021d84 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8023bfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8023bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023c00:	4413      	add	r3, r2
 8023c02:	627b      	str	r3, [r7, #36]	@ 0x24
 8023c04:	68fb      	ldr	r3, [r7, #12]
 8023c06:	699a      	ldr	r2, [r3, #24]
 8023c08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023c0a:	441a      	add	r2, r3
 8023c0c:	68fb      	ldr	r3, [r7, #12]
 8023c0e:	619a      	str	r2, [r3, #24]
 8023c10:	683b      	ldr	r3, [r7, #0]
 8023c12:	681a      	ldr	r2, [r3, #0]
 8023c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023c16:	441a      	add	r2, r3
 8023c18:	683b      	ldr	r3, [r7, #0]
 8023c1a:	601a      	str	r2, [r3, #0]
 8023c1c:	687a      	ldr	r2, [r7, #4]
 8023c1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023c20:	1ad3      	subs	r3, r2, r3
 8023c22:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8023c24:	687b      	ldr	r3, [r7, #4]
 8023c26:	2b00      	cmp	r3, #0
 8023c28:	f47f af01 	bne.w	8023a2e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8023c2c:	2300      	movs	r3, #0
}
 8023c2e:	4618      	mov	r0, r3
 8023c30:	3738      	adds	r7, #56	@ 0x38
 8023c32:	46bd      	mov	sp, r7
 8023c34:	bd80      	pop	{r7, pc}

08023c36 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8023c36:	b580      	push	{r7, lr}
 8023c38:	b086      	sub	sp, #24
 8023c3a:	af00      	add	r7, sp, #0
 8023c3c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8023c3e:	687b      	ldr	r3, [r7, #4]
 8023c40:	f107 0208 	add.w	r2, r7, #8
 8023c44:	4611      	mov	r1, r2
 8023c46:	4618      	mov	r0, r3
 8023c48:	f7ff fc80 	bl	802354c <validate>
 8023c4c:	4603      	mov	r3, r0
 8023c4e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8023c50:	7dfb      	ldrb	r3, [r7, #23]
 8023c52:	2b00      	cmp	r3, #0
 8023c54:	d168      	bne.n	8023d28 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8023c56:	687b      	ldr	r3, [r7, #4]
 8023c58:	7d1b      	ldrb	r3, [r3, #20]
 8023c5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8023c5e:	2b00      	cmp	r3, #0
 8023c60:	d062      	beq.n	8023d28 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8023c62:	687b      	ldr	r3, [r7, #4]
 8023c64:	7d1b      	ldrb	r3, [r3, #20]
 8023c66:	b25b      	sxtb	r3, r3
 8023c68:	2b00      	cmp	r3, #0
 8023c6a:	da15      	bge.n	8023c98 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8023c6c:	68bb      	ldr	r3, [r7, #8]
 8023c6e:	7858      	ldrb	r0, [r3, #1]
 8023c70:	687b      	ldr	r3, [r7, #4]
 8023c72:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8023c76:	687b      	ldr	r3, [r7, #4]
 8023c78:	6a1a      	ldr	r2, [r3, #32]
 8023c7a:	2301      	movs	r3, #1
 8023c7c:	f7fd ffc2 	bl	8021c04 <disk_write>
 8023c80:	4603      	mov	r3, r0
 8023c82:	2b00      	cmp	r3, #0
 8023c84:	d001      	beq.n	8023c8a <f_sync+0x54>
 8023c86:	2301      	movs	r3, #1
 8023c88:	e04f      	b.n	8023d2a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8023c8a:	687b      	ldr	r3, [r7, #4]
 8023c8c:	7d1b      	ldrb	r3, [r3, #20]
 8023c8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8023c92:	b2da      	uxtb	r2, r3
 8023c94:	687b      	ldr	r3, [r7, #4]
 8023c96:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8023c98:	f7fd fcc6 	bl	8021628 <get_fattime>
 8023c9c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8023c9e:	68ba      	ldr	r2, [r7, #8]
 8023ca0:	687b      	ldr	r3, [r7, #4]
 8023ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8023ca4:	4619      	mov	r1, r3
 8023ca6:	4610      	mov	r0, r2
 8023ca8:	f7fe fa9a 	bl	80221e0 <move_window>
 8023cac:	4603      	mov	r3, r0
 8023cae:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8023cb0:	7dfb      	ldrb	r3, [r7, #23]
 8023cb2:	2b00      	cmp	r3, #0
 8023cb4:	d138      	bne.n	8023d28 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8023cb6:	687b      	ldr	r3, [r7, #4]
 8023cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023cba:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8023cbc:	68fb      	ldr	r3, [r7, #12]
 8023cbe:	330b      	adds	r3, #11
 8023cc0:	781a      	ldrb	r2, [r3, #0]
 8023cc2:	68fb      	ldr	r3, [r7, #12]
 8023cc4:	330b      	adds	r3, #11
 8023cc6:	f042 0220 	orr.w	r2, r2, #32
 8023cca:	b2d2      	uxtb	r2, r2
 8023ccc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8023cce:	687b      	ldr	r3, [r7, #4]
 8023cd0:	6818      	ldr	r0, [r3, #0]
 8023cd2:	687b      	ldr	r3, [r7, #4]
 8023cd4:	689b      	ldr	r3, [r3, #8]
 8023cd6:	461a      	mov	r2, r3
 8023cd8:	68f9      	ldr	r1, [r7, #12]
 8023cda:	f7fe ffa4 	bl	8022c26 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8023cde:	68fb      	ldr	r3, [r7, #12]
 8023ce0:	f103 021c 	add.w	r2, r3, #28
 8023ce4:	687b      	ldr	r3, [r7, #4]
 8023ce6:	68db      	ldr	r3, [r3, #12]
 8023ce8:	4619      	mov	r1, r3
 8023cea:	4610      	mov	r0, r2
 8023cec:	f7fe f81e 	bl	8021d2c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8023cf0:	68fb      	ldr	r3, [r7, #12]
 8023cf2:	3316      	adds	r3, #22
 8023cf4:	6939      	ldr	r1, [r7, #16]
 8023cf6:	4618      	mov	r0, r3
 8023cf8:	f7fe f818 	bl	8021d2c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8023cfc:	68fb      	ldr	r3, [r7, #12]
 8023cfe:	3312      	adds	r3, #18
 8023d00:	2100      	movs	r1, #0
 8023d02:	4618      	mov	r0, r3
 8023d04:	f7fd fff7 	bl	8021cf6 <st_word>
					fs->wflag = 1;
 8023d08:	68bb      	ldr	r3, [r7, #8]
 8023d0a:	2201      	movs	r2, #1
 8023d0c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8023d0e:	68bb      	ldr	r3, [r7, #8]
 8023d10:	4618      	mov	r0, r3
 8023d12:	f7fe fa93 	bl	802223c <sync_fs>
 8023d16:	4603      	mov	r3, r0
 8023d18:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8023d1a:	687b      	ldr	r3, [r7, #4]
 8023d1c:	7d1b      	ldrb	r3, [r3, #20]
 8023d1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8023d22:	b2da      	uxtb	r2, r3
 8023d24:	687b      	ldr	r3, [r7, #4]
 8023d26:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8023d28:	7dfb      	ldrb	r3, [r7, #23]
}
 8023d2a:	4618      	mov	r0, r3
 8023d2c:	3718      	adds	r7, #24
 8023d2e:	46bd      	mov	sp, r7
 8023d30:	bd80      	pop	{r7, pc}

08023d32 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8023d32:	b580      	push	{r7, lr}
 8023d34:	b084      	sub	sp, #16
 8023d36:	af00      	add	r7, sp, #0
 8023d38:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8023d3a:	6878      	ldr	r0, [r7, #4]
 8023d3c:	f7ff ff7b 	bl	8023c36 <f_sync>
 8023d40:	4603      	mov	r3, r0
 8023d42:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8023d44:	7bfb      	ldrb	r3, [r7, #15]
 8023d46:	2b00      	cmp	r3, #0
 8023d48:	d118      	bne.n	8023d7c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8023d4a:	687b      	ldr	r3, [r7, #4]
 8023d4c:	f107 0208 	add.w	r2, r7, #8
 8023d50:	4611      	mov	r1, r2
 8023d52:	4618      	mov	r0, r3
 8023d54:	f7ff fbfa 	bl	802354c <validate>
 8023d58:	4603      	mov	r3, r0
 8023d5a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8023d5c:	7bfb      	ldrb	r3, [r7, #15]
 8023d5e:	2b00      	cmp	r3, #0
 8023d60:	d10c      	bne.n	8023d7c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8023d62:	687b      	ldr	r3, [r7, #4]
 8023d64:	691b      	ldr	r3, [r3, #16]
 8023d66:	4618      	mov	r0, r3
 8023d68:	f7fe f996 	bl	8022098 <dec_lock>
 8023d6c:	4603      	mov	r3, r0
 8023d6e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8023d70:	7bfb      	ldrb	r3, [r7, #15]
 8023d72:	2b00      	cmp	r3, #0
 8023d74:	d102      	bne.n	8023d7c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8023d76:	687b      	ldr	r3, [r7, #4]
 8023d78:	2200      	movs	r2, #0
 8023d7a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8023d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8023d7e:	4618      	mov	r0, r3
 8023d80:	3710      	adds	r7, #16
 8023d82:	46bd      	mov	sp, r7
 8023d84:	bd80      	pop	{r7, pc}
	...

08023d88 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8023d88:	b480      	push	{r7}
 8023d8a:	b087      	sub	sp, #28
 8023d8c:	af00      	add	r7, sp, #0
 8023d8e:	60f8      	str	r0, [r7, #12]
 8023d90:	60b9      	str	r1, [r7, #8]
 8023d92:	4613      	mov	r3, r2
 8023d94:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8023d96:	2301      	movs	r3, #1
 8023d98:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8023d9a:	2300      	movs	r3, #0
 8023d9c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8023d9e:	4b1f      	ldr	r3, [pc, #124]	@ (8023e1c <FATFS_LinkDriverEx+0x94>)
 8023da0:	7a5b      	ldrb	r3, [r3, #9]
 8023da2:	b2db      	uxtb	r3, r3
 8023da4:	2b00      	cmp	r3, #0
 8023da6:	d131      	bne.n	8023e0c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8023da8:	4b1c      	ldr	r3, [pc, #112]	@ (8023e1c <FATFS_LinkDriverEx+0x94>)
 8023daa:	7a5b      	ldrb	r3, [r3, #9]
 8023dac:	b2db      	uxtb	r3, r3
 8023dae:	461a      	mov	r2, r3
 8023db0:	4b1a      	ldr	r3, [pc, #104]	@ (8023e1c <FATFS_LinkDriverEx+0x94>)
 8023db2:	2100      	movs	r1, #0
 8023db4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8023db6:	4b19      	ldr	r3, [pc, #100]	@ (8023e1c <FATFS_LinkDriverEx+0x94>)
 8023db8:	7a5b      	ldrb	r3, [r3, #9]
 8023dba:	b2db      	uxtb	r3, r3
 8023dbc:	4a17      	ldr	r2, [pc, #92]	@ (8023e1c <FATFS_LinkDriverEx+0x94>)
 8023dbe:	009b      	lsls	r3, r3, #2
 8023dc0:	4413      	add	r3, r2
 8023dc2:	68fa      	ldr	r2, [r7, #12]
 8023dc4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8023dc6:	4b15      	ldr	r3, [pc, #84]	@ (8023e1c <FATFS_LinkDriverEx+0x94>)
 8023dc8:	7a5b      	ldrb	r3, [r3, #9]
 8023dca:	b2db      	uxtb	r3, r3
 8023dcc:	461a      	mov	r2, r3
 8023dce:	4b13      	ldr	r3, [pc, #76]	@ (8023e1c <FATFS_LinkDriverEx+0x94>)
 8023dd0:	4413      	add	r3, r2
 8023dd2:	79fa      	ldrb	r2, [r7, #7]
 8023dd4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8023dd6:	4b11      	ldr	r3, [pc, #68]	@ (8023e1c <FATFS_LinkDriverEx+0x94>)
 8023dd8:	7a5b      	ldrb	r3, [r3, #9]
 8023dda:	b2db      	uxtb	r3, r3
 8023ddc:	1c5a      	adds	r2, r3, #1
 8023dde:	b2d1      	uxtb	r1, r2
 8023de0:	4a0e      	ldr	r2, [pc, #56]	@ (8023e1c <FATFS_LinkDriverEx+0x94>)
 8023de2:	7251      	strb	r1, [r2, #9]
 8023de4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8023de6:	7dbb      	ldrb	r3, [r7, #22]
 8023de8:	3330      	adds	r3, #48	@ 0x30
 8023dea:	b2da      	uxtb	r2, r3
 8023dec:	68bb      	ldr	r3, [r7, #8]
 8023dee:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8023df0:	68bb      	ldr	r3, [r7, #8]
 8023df2:	3301      	adds	r3, #1
 8023df4:	223a      	movs	r2, #58	@ 0x3a
 8023df6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8023df8:	68bb      	ldr	r3, [r7, #8]
 8023dfa:	3302      	adds	r3, #2
 8023dfc:	222f      	movs	r2, #47	@ 0x2f
 8023dfe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8023e00:	68bb      	ldr	r3, [r7, #8]
 8023e02:	3303      	adds	r3, #3
 8023e04:	2200      	movs	r2, #0
 8023e06:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8023e08:	2300      	movs	r3, #0
 8023e0a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8023e0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8023e0e:	4618      	mov	r0, r3
 8023e10:	371c      	adds	r7, #28
 8023e12:	46bd      	mov	sp, r7
 8023e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023e18:	4770      	bx	lr
 8023e1a:	bf00      	nop
 8023e1c:	24000ab0 	.word	0x24000ab0

08023e20 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8023e20:	b580      	push	{r7, lr}
 8023e22:	b082      	sub	sp, #8
 8023e24:	af00      	add	r7, sp, #0
 8023e26:	6078      	str	r0, [r7, #4]
 8023e28:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8023e2a:	2200      	movs	r2, #0
 8023e2c:	6839      	ldr	r1, [r7, #0]
 8023e2e:	6878      	ldr	r0, [r7, #4]
 8023e30:	f7ff ffaa 	bl	8023d88 <FATFS_LinkDriverEx>
 8023e34:	4603      	mov	r3, r0
}
 8023e36:	4618      	mov	r0, r3
 8023e38:	3708      	adds	r7, #8
 8023e3a:	46bd      	mov	sp, r7
 8023e3c:	bd80      	pop	{r7, pc}

08023e3e <_ZdlPvj>:
 8023e3e:	f000 baf5 	b.w	802442c <_ZdlPv>

08023e42 <__cxa_guard_acquire>:
 8023e42:	6802      	ldr	r2, [r0, #0]
 8023e44:	07d2      	lsls	r2, r2, #31
 8023e46:	4603      	mov	r3, r0
 8023e48:	d405      	bmi.n	8023e56 <__cxa_guard_acquire+0x14>
 8023e4a:	7842      	ldrb	r2, [r0, #1]
 8023e4c:	b102      	cbz	r2, 8023e50 <__cxa_guard_acquire+0xe>
 8023e4e:	deff      	udf	#255	@ 0xff
 8023e50:	2001      	movs	r0, #1
 8023e52:	7058      	strb	r0, [r3, #1]
 8023e54:	4770      	bx	lr
 8023e56:	2000      	movs	r0, #0
 8023e58:	4770      	bx	lr

08023e5a <__cxa_guard_release>:
 8023e5a:	2301      	movs	r3, #1
 8023e5c:	6003      	str	r3, [r0, #0]
 8023e5e:	4770      	bx	lr

08023e60 <_Znwj>:
 8023e60:	2801      	cmp	r0, #1
 8023e62:	bf38      	it	cc
 8023e64:	2001      	movcc	r0, #1
 8023e66:	b510      	push	{r4, lr}
 8023e68:	4604      	mov	r4, r0
 8023e6a:	4620      	mov	r0, r4
 8023e6c:	f000 fb8a 	bl	8024584 <malloc>
 8023e70:	b100      	cbz	r0, 8023e74 <_Znwj+0x14>
 8023e72:	bd10      	pop	{r4, pc}
 8023e74:	f000 fadc 	bl	8024430 <_ZSt15get_new_handlerv>
 8023e78:	b908      	cbnz	r0, 8023e7e <_Znwj+0x1e>
 8023e7a:	f000 fb7b 	bl	8024574 <abort>
 8023e7e:	4780      	blx	r0
 8023e80:	e7f3      	b.n	8023e6a <_Znwj+0xa>

08023e82 <_ZNSaIcEC1Ev>:
 8023e82:	4770      	bx	lr

08023e84 <_ZNSaIcED1Ev>:
 8023e84:	4770      	bx	lr

08023e86 <_ZSt17__throw_bad_allocv>:
 8023e86:	b508      	push	{r3, lr}
 8023e88:	f000 fb74 	bl	8024574 <abort>

08023e8c <_ZSt28__throw_bad_array_new_lengthv>:
 8023e8c:	b508      	push	{r3, lr}
 8023e8e:	f000 fb71 	bl	8024574 <abort>

08023e92 <_ZSt19__throw_logic_errorPKc>:
 8023e92:	b508      	push	{r3, lr}
 8023e94:	f000 fb6e 	bl	8024574 <abort>

08023e98 <_ZSt24__throw_invalid_argumentPKc>:
 8023e98:	b508      	push	{r3, lr}
 8023e9a:	f000 fb6b 	bl	8024574 <abort>

08023e9e <_ZSt20__throw_length_errorPKc>:
 8023e9e:	b508      	push	{r3, lr}
 8023ea0:	f000 fb68 	bl	8024574 <abort>

08023ea4 <_ZSt20__throw_out_of_rangePKc>:
 8023ea4:	b508      	push	{r3, lr}
 8023ea6:	f000 fb65 	bl	8024574 <abort>

08023eaa <_ZSt24__throw_out_of_range_fmtPKcz>:
 8023eaa:	b40f      	push	{r0, r1, r2, r3}
 8023eac:	b508      	push	{r3, lr}
 8023eae:	f000 fb61 	bl	8024574 <abort>

08023eb2 <_ZSt25__throw_bad_function_callv>:
 8023eb2:	b508      	push	{r3, lr}
 8023eb4:	f000 fb5e 	bl	8024574 <abort>

08023eb8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 8023eb8:	4901      	ldr	r1, [pc, #4]	@ (8023ec0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 8023eba:	f000 bb45 	b.w	8024548 <_ZNKSt9type_info7__equalERKS_>
 8023ebe:	bf00      	nop
 8023ec0:	08026aac 	.word	0x08026aac

08023ec4 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8023ec4:	b10a      	cbz	r2, 8023eca <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8023ec6:	f000 bfe0 	b.w	8024e8a <memcpy>
 8023eca:	4770      	bx	lr

08023ecc <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 8023ecc:	b10a      	cbz	r2, 8023ed2 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 8023ece:	f000 bee3 	b.w	8024c98 <memcmp>
 8023ed2:	4610      	mov	r0, r2
 8023ed4:	4770      	bx	lr

08023ed6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 8023ed6:	6001      	str	r1, [r0, #0]
 8023ed8:	4770      	bx	lr

08023eda <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 8023eda:	6800      	ldr	r0, [r0, #0]
 8023edc:	4770      	bx	lr

08023ede <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 8023ede:	3008      	adds	r0, #8
 8023ee0:	4770      	bx	lr

08023ee2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 8023ee2:	6081      	str	r1, [r0, #8]
 8023ee4:	4770      	bx	lr

08023ee6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 8023ee6:	6803      	ldr	r3, [r0, #0]
 8023ee8:	6041      	str	r1, [r0, #4]
 8023eea:	2200      	movs	r2, #0
 8023eec:	545a      	strb	r2, [r3, r1]
 8023eee:	4770      	bx	lr

08023ef0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 8023ef0:	f850 3b08 	ldr.w	r3, [r0], #8
 8023ef4:	1a1b      	subs	r3, r3, r0
 8023ef6:	4258      	negs	r0, r3
 8023ef8:	4158      	adcs	r0, r3
 8023efa:	4770      	bx	lr

08023efc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8023efc:	b508      	push	{r3, lr}
 8023efe:	680b      	ldr	r3, [r1, #0]
 8023f00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8023f04:	d302      	bcc.n	8023f0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8023f06:	480d      	ldr	r0, [pc, #52]	@ (8023f3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8023f08:	f7ff ffc9 	bl	8023e9e <_ZSt20__throw_length_errorPKc>
 8023f0c:	4293      	cmp	r3, r2
 8023f0e:	d90b      	bls.n	8023f28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8023f10:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8023f14:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8023f18:	d206      	bcs.n	8023f28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8023f1a:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8023f1e:	bf2a      	itet	cs
 8023f20:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 8023f24:	6008      	strcc	r0, [r1, #0]
 8023f26:	600b      	strcs	r3, [r1, #0]
 8023f28:	6808      	ldr	r0, [r1, #0]
 8023f2a:	3001      	adds	r0, #1
 8023f2c:	d501      	bpl.n	8023f32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8023f2e:	f7ff ffaa 	bl	8023e86 <_ZSt17__throw_bad_allocv>
 8023f32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8023f36:	f7ff bf93 	b.w	8023e60 <_Znwj>
 8023f3a:	bf00      	nop
 8023f3c:	08026ab4 	.word	0x08026ab4

08023f40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8023f40:	b510      	push	{r4, lr}
 8023f42:	4604      	mov	r4, r0
 8023f44:	f7ff ffd4 	bl	8023ef0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8023f48:	b920      	cbnz	r0, 8023f54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 8023f4a:	6820      	ldr	r0, [r4, #0]
 8023f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023f50:	f000 ba6c 	b.w	802442c <_ZdlPv>
 8023f54:	bd10      	pop	{r4, pc}
	...

08023f58 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 8023f58:	b508      	push	{r3, lr}
 8023f5a:	4603      	mov	r3, r0
 8023f5c:	4608      	mov	r0, r1
 8023f5e:	685b      	ldr	r3, [r3, #4]
 8023f60:	4298      	cmp	r0, r3
 8023f62:	4611      	mov	r1, r2
 8023f64:	d903      	bls.n	8023f6e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x16>
 8023f66:	4602      	mov	r2, r0
 8023f68:	4801      	ldr	r0, [pc, #4]	@ (8023f70 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 8023f6a:	f7ff ff9e 	bl	8023eaa <_ZSt24__throw_out_of_range_fmtPKcz>
 8023f6e:	bd08      	pop	{r3, pc}
 8023f70:	08026acc 	.word	0x08026acc

08023f74 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8023f74:	6840      	ldr	r0, [r0, #4]
 8023f76:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8023f7a:	3901      	subs	r1, #1
 8023f7c:	1a09      	subs	r1, r1, r0
 8023f7e:	4291      	cmp	r1, r2
 8023f80:	b508      	push	{r3, lr}
 8023f82:	d202      	bcs.n	8023f8a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8023f84:	4618      	mov	r0, r3
 8023f86:	f7ff ff8a 	bl	8023e9e <_ZSt20__throw_length_errorPKc>
 8023f8a:	bd08      	pop	{r3, pc}

08023f8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8023f8c:	2a01      	cmp	r2, #1
 8023f8e:	b410      	push	{r4}
 8023f90:	d104      	bne.n	8023f9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 8023f92:	780a      	ldrb	r2, [r1, #0]
 8023f94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023f98:	7002      	strb	r2, [r0, #0]
 8023f9a:	4770      	bx	lr
 8023f9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023fa0:	f7ff bf90 	b.w	8023ec4 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

08023fa4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 8023fa4:	2a01      	cmp	r2, #1
 8023fa6:	b430      	push	{r4, r5}
 8023fa8:	d103      	bne.n	8023fb2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8023faa:	780b      	ldrb	r3, [r1, #0]
 8023fac:	7003      	strb	r3, [r0, #0]
 8023fae:	bc30      	pop	{r4, r5}
 8023fb0:	4770      	bx	lr
 8023fb2:	2a00      	cmp	r2, #0
 8023fb4:	d0fb      	beq.n	8023fae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8023fb6:	bc30      	pop	{r4, r5}
 8023fb8:	f000 be7e 	b.w	8024cb8 <memmove>

08023fbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 8023fbc:	460b      	mov	r3, r1
 8023fbe:	2b01      	cmp	r3, #1
 8023fc0:	b410      	push	{r4}
 8023fc2:	4611      	mov	r1, r2
 8023fc4:	4604      	mov	r4, r0
 8023fc6:	d103      	bne.n	8023fd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 8023fc8:	7022      	strb	r2, [r4, #0]
 8023fca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023fce:	4770      	bx	lr
 8023fd0:	2b00      	cmp	r3, #0
 8023fd2:	d0fa      	beq.n	8023fca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 8023fd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023fd8:	461a      	mov	r2, r3
 8023fda:	f000 be87 	b.w	8024cec <memset>

08023fde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8023fde:	b508      	push	{r3, lr}
 8023fe0:	1a52      	subs	r2, r2, r1
 8023fe2:	f7ff ffd3 	bl	8023f8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8023fe6:	bd08      	pop	{r3, pc}

08023fe8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8023fe8:	b508      	push	{r3, lr}
 8023fea:	1a52      	subs	r2, r2, r1
 8023fec:	f7ff ffce 	bl	8023f8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8023ff0:	bd08      	pop	{r3, pc}

08023ff2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8023ff2:	f100 0208 	add.w	r2, r0, #8
 8023ff6:	6002      	str	r2, [r0, #0]
 8023ff8:	2200      	movs	r2, #0
 8023ffa:	6042      	str	r2, [r0, #4]
 8023ffc:	7202      	strb	r2, [r0, #8]
 8023ffe:	4770      	bx	lr

08024000 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 8024000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024002:	f100 0708 	add.w	r7, r0, #8
 8024006:	6007      	str	r7, [r0, #0]
 8024008:	4605      	mov	r5, r0
 802400a:	4608      	mov	r0, r1
 802400c:	460c      	mov	r4, r1
 802400e:	f7ff ff6f 	bl	8023ef0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8024012:	f104 0608 	add.w	r6, r4, #8
 8024016:	6862      	ldr	r2, [r4, #4]
 8024018:	b160      	cbz	r0, 8024034 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x34>
 802401a:	3201      	adds	r2, #1
 802401c:	4631      	mov	r1, r6
 802401e:	4638      	mov	r0, r7
 8024020:	f7ff ff50 	bl	8023ec4 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>
 8024024:	6863      	ldr	r3, [r4, #4]
 8024026:	606b      	str	r3, [r5, #4]
 8024028:	2300      	movs	r3, #0
 802402a:	7223      	strb	r3, [r4, #8]
 802402c:	6026      	str	r6, [r4, #0]
 802402e:	6063      	str	r3, [r4, #4]
 8024030:	4628      	mov	r0, r5
 8024032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024034:	6823      	ldr	r3, [r4, #0]
 8024036:	602b      	str	r3, [r5, #0]
 8024038:	68a3      	ldr	r3, [r4, #8]
 802403a:	60ab      	str	r3, [r5, #8]
 802403c:	e7f2      	b.n	8024024 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x24>

0802403e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 802403e:	b510      	push	{r4, lr}
 8024040:	4604      	mov	r4, r0
 8024042:	f7ff ff7d 	bl	8023f40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8024046:	4620      	mov	r0, r4
 8024048:	bd10      	pop	{r4, pc}

0802404a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 802404a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802404c:	460c      	mov	r4, r1
 802404e:	4605      	mov	r5, r0
 8024050:	f7ff ff4e 	bl	8023ef0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8024054:	4606      	mov	r6, r0
 8024056:	4620      	mov	r0, r4
 8024058:	f7ff ff4a 	bl	8023ef0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 802405c:	b190      	cbz	r0, 8024084 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x3a>
 802405e:	42a5      	cmp	r5, r4
 8024060:	d00a      	beq.n	8024078 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 8024062:	6862      	ldr	r2, [r4, #4]
 8024064:	b11a      	cbz	r2, 802406e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x24>
 8024066:	6821      	ldr	r1, [r4, #0]
 8024068:	6828      	ldr	r0, [r5, #0]
 802406a:	f7ff ff8f 	bl	8023f8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 802406e:	6863      	ldr	r3, [r4, #4]
 8024070:	682a      	ldr	r2, [r5, #0]
 8024072:	606b      	str	r3, [r5, #4]
 8024074:	2100      	movs	r1, #0
 8024076:	54d1      	strb	r1, [r2, r3]
 8024078:	6822      	ldr	r2, [r4, #0]
 802407a:	2300      	movs	r3, #0
 802407c:	6063      	str	r3, [r4, #4]
 802407e:	7013      	strb	r3, [r2, #0]
 8024080:	4628      	mov	r0, r5
 8024082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024084:	b90e      	cbnz	r6, 802408a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 8024086:	6828      	ldr	r0, [r5, #0]
 8024088:	68af      	ldr	r7, [r5, #8]
 802408a:	6823      	ldr	r3, [r4, #0]
 802408c:	602b      	str	r3, [r5, #0]
 802408e:	6863      	ldr	r3, [r4, #4]
 8024090:	606b      	str	r3, [r5, #4]
 8024092:	68a3      	ldr	r3, [r4, #8]
 8024094:	60ab      	str	r3, [r5, #8]
 8024096:	b110      	cbz	r0, 802409e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x54>
 8024098:	6020      	str	r0, [r4, #0]
 802409a:	60a7      	str	r7, [r4, #8]
 802409c:	e7ec      	b.n	8024078 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 802409e:	f104 0308 	add.w	r3, r4, #8
 80240a2:	6023      	str	r3, [r4, #0]
 80240a4:	e7e8      	b.n	8024078 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>

080240a6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 80240a6:	b510      	push	{r4, lr}
 80240a8:	4604      	mov	r4, r0
 80240aa:	f7ff ff21 	bl	8023ef0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 80240ae:	b908      	cbnz	r0, 80240b4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xe>
 80240b0:	68a0      	ldr	r0, [r4, #8]
 80240b2:	bd10      	pop	{r4, pc}
 80240b4:	200f      	movs	r0, #15
 80240b6:	e7fc      	b.n	80240b2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xc>

080240b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 80240b8:	4288      	cmp	r0, r1
 80240ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80240bc:	4604      	mov	r4, r0
 80240be:	460e      	mov	r6, r1
 80240c0:	d01d      	beq.n	80240fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x46>
 80240c2:	684d      	ldr	r5, [r1, #4]
 80240c4:	f7ff ffef 	bl	80240a6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 80240c8:	42a8      	cmp	r0, r5
 80240ca:	4602      	mov	r2, r0
 80240cc:	d211      	bcs.n	80240f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x3a>
 80240ce:	a901      	add	r1, sp, #4
 80240d0:	4620      	mov	r0, r4
 80240d2:	9501      	str	r5, [sp, #4]
 80240d4:	f7ff ff12 	bl	8023efc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80240d8:	4607      	mov	r7, r0
 80240da:	4620      	mov	r0, r4
 80240dc:	f7ff ff30 	bl	8023f40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80240e0:	9b01      	ldr	r3, [sp, #4]
 80240e2:	6027      	str	r7, [r4, #0]
 80240e4:	60a3      	str	r3, [r4, #8]
 80240e6:	6831      	ldr	r1, [r6, #0]
 80240e8:	6820      	ldr	r0, [r4, #0]
 80240ea:	462a      	mov	r2, r5
 80240ec:	f7ff ff4e 	bl	8023f8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80240f0:	e001      	b.n	80240f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x3e>
 80240f2:	2d00      	cmp	r5, #0
 80240f4:	d1f7      	bne.n	80240e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x2e>
 80240f6:	6823      	ldr	r3, [r4, #0]
 80240f8:	6065      	str	r5, [r4, #4]
 80240fa:	2200      	movs	r2, #0
 80240fc:	555a      	strb	r2, [r3, r5]
 80240fe:	b003      	add	sp, #12
 8024100:	bdf0      	pop	{r4, r5, r6, r7, pc}

08024102 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 8024102:	b510      	push	{r4, lr}
 8024104:	4604      	mov	r4, r0
 8024106:	f7ff ffd7 	bl	80240b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 802410a:	4620      	mov	r0, r4
 802410c:	bd10      	pop	{r4, pc}

0802410e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 802410e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8024112:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8024114:	461f      	mov	r7, r3
 8024116:	6843      	ldr	r3, [r0, #4]
 8024118:	eb01 0802 	add.w	r8, r1, r2
 802411c:	1ab2      	subs	r2, r6, r2
 802411e:	441a      	add	r2, r3
 8024120:	4604      	mov	r4, r0
 8024122:	460d      	mov	r5, r1
 8024124:	eba3 0908 	sub.w	r9, r3, r8
 8024128:	9201      	str	r2, [sp, #4]
 802412a:	f7ff ffbc 	bl	80240a6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 802412e:	a901      	add	r1, sp, #4
 8024130:	4602      	mov	r2, r0
 8024132:	4620      	mov	r0, r4
 8024134:	f7ff fee2 	bl	8023efc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8024138:	4682      	mov	sl, r0
 802413a:	b11d      	cbz	r5, 8024144 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x36>
 802413c:	6821      	ldr	r1, [r4, #0]
 802413e:	462a      	mov	r2, r5
 8024140:	f7ff ff24 	bl	8023f8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8024144:	b137      	cbz	r7, 8024154 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 8024146:	b12e      	cbz	r6, 8024154 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 8024148:	4632      	mov	r2, r6
 802414a:	4639      	mov	r1, r7
 802414c:	eb0a 0005 	add.w	r0, sl, r5
 8024150:	f7ff ff1c 	bl	8023f8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8024154:	f1b9 0f00 	cmp.w	r9, #0
 8024158:	d007      	beq.n	802416a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x5c>
 802415a:	6821      	ldr	r1, [r4, #0]
 802415c:	4435      	add	r5, r6
 802415e:	464a      	mov	r2, r9
 8024160:	4441      	add	r1, r8
 8024162:	eb0a 0005 	add.w	r0, sl, r5
 8024166:	f7ff ff11 	bl	8023f8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 802416a:	4620      	mov	r0, r4
 802416c:	f7ff fee8 	bl	8023f40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8024170:	9b01      	ldr	r3, [sp, #4]
 8024172:	f8c4 a000 	str.w	sl, [r4]
 8024176:	60a3      	str	r3, [r4, #8]
 8024178:	b002      	add	sp, #8
 802417a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0802417e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>:
 802417e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8024180:	4604      	mov	r4, r0
 8024182:	9101      	str	r1, [sp, #4]
 8024184:	f7ff ff8f 	bl	80240a6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8024188:	9b01      	ldr	r3, [sp, #4]
 802418a:	4283      	cmp	r3, r0
 802418c:	4602      	mov	r2, r0
 802418e:	d90f      	bls.n	80241b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x32>
 8024190:	a901      	add	r1, sp, #4
 8024192:	4620      	mov	r0, r4
 8024194:	f7ff feb2 	bl	8023efc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8024198:	6862      	ldr	r2, [r4, #4]
 802419a:	6821      	ldr	r1, [r4, #0]
 802419c:	3201      	adds	r2, #1
 802419e:	4605      	mov	r5, r0
 80241a0:	f7ff fef4 	bl	8023f8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80241a4:	4620      	mov	r0, r4
 80241a6:	f7ff fecb 	bl	8023f40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80241aa:	9b01      	ldr	r3, [sp, #4]
 80241ac:	6025      	str	r5, [r4, #0]
 80241ae:	60a3      	str	r3, [r4, #8]
 80241b0:	b003      	add	sp, #12
 80241b2:	bd30      	pop	{r4, r5, pc}

080241b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>:
 80241b4:	6802      	ldr	r2, [r0, #0]
 80241b6:	2300      	movs	r3, #0
 80241b8:	6043      	str	r3, [r0, #4]
 80241ba:	7013      	strb	r3, [r2, #0]
 80241bc:	4770      	bx	lr

080241be <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>:
 80241be:	6840      	ldr	r0, [r0, #4]
 80241c0:	fab0 f080 	clz	r0, r0
 80241c4:	0940      	lsrs	r0, r0, #5
 80241c6:	4770      	bx	lr

080241c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 80241c8:	6800      	ldr	r0, [r0, #0]
 80241ca:	4408      	add	r0, r1
 80241cc:	4770      	bx	lr
	...

080241d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>:
 80241d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80241d4:	4616      	mov	r6, r2
 80241d6:	461d      	mov	r5, r3
 80241d8:	4604      	mov	r4, r0
 80241da:	4b1b      	ldr	r3, [pc, #108]	@ (8024248 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x78>)
 80241dc:	462a      	mov	r2, r5
 80241de:	460f      	mov	r7, r1
 80241e0:	4631      	mov	r1, r6
 80241e2:	f7ff fec7 	bl	8023f74 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80241e6:	4620      	mov	r0, r4
 80241e8:	f7ff ff5d 	bl	80240a6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 80241ec:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80241f0:	eba5 0806 	sub.w	r8, r5, r6
 80241f4:	44c8      	add	r8, r9
 80241f6:	4540      	cmp	r0, r8
 80241f8:	d31d      	bcc.n	8024236 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x66>
 80241fa:	19f3      	adds	r3, r6, r7
 80241fc:	ebb9 0203 	subs.w	r2, r9, r3
 8024200:	d007      	beq.n	8024212 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 8024202:	42ae      	cmp	r6, r5
 8024204:	d005      	beq.n	8024212 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 8024206:	6820      	ldr	r0, [r4, #0]
 8024208:	4438      	add	r0, r7
 802420a:	1981      	adds	r1, r0, r6
 802420c:	4428      	add	r0, r5
 802420e:	f7ff fec9 	bl	8023fa4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8024212:	b135      	cbz	r5, 8024222 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x52>
 8024214:	6820      	ldr	r0, [r4, #0]
 8024216:	f89d 2028 	ldrb.w	r2, [sp, #40]	@ 0x28
 802421a:	4629      	mov	r1, r5
 802421c:	4438      	add	r0, r7
 802421e:	f7ff fecd 	bl	8023fbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 8024222:	6823      	ldr	r3, [r4, #0]
 8024224:	f8c4 8004 	str.w	r8, [r4, #4]
 8024228:	2200      	movs	r2, #0
 802422a:	4620      	mov	r0, r4
 802422c:	f803 2008 	strb.w	r2, [r3, r8]
 8024230:	b003      	add	sp, #12
 8024232:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024236:	9500      	str	r5, [sp, #0]
 8024238:	2300      	movs	r3, #0
 802423a:	4632      	mov	r2, r6
 802423c:	4639      	mov	r1, r7
 802423e:	4620      	mov	r0, r4
 8024240:	f7ff ff65 	bl	802410e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8024244:	e7e5      	b.n	8024212 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 8024246:	bf00      	nop
 8024248:	08026b03 	.word	0x08026b03

0802424c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>:
 802424c:	b507      	push	{r0, r1, r2, lr}
 802424e:	9200      	str	r2, [sp, #0]
 8024250:	460b      	mov	r3, r1
 8024252:	2200      	movs	r2, #0
 8024254:	6841      	ldr	r1, [r0, #4]
 8024256:	f7ff ffbb 	bl	80241d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>
 802425a:	b003      	add	sp, #12
 802425c:	f85d fb04 	ldr.w	pc, [sp], #4

08024260 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8024260:	6800      	ldr	r0, [r0, #0]
 8024262:	4770      	bx	lr

08024264 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>:
 8024264:	b538      	push	{r3, r4, r5, lr}
 8024266:	6845      	ldr	r5, [r0, #4]
 8024268:	684c      	ldr	r4, [r1, #4]
 802426a:	6800      	ldr	r0, [r0, #0]
 802426c:	6809      	ldr	r1, [r1, #0]
 802426e:	42a5      	cmp	r5, r4
 8024270:	462a      	mov	r2, r5
 8024272:	bf28      	it	cs
 8024274:	4622      	movcs	r2, r4
 8024276:	f7ff fe29 	bl	8023ecc <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 802427a:	b900      	cbnz	r0, 802427e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_+0x1a>
 802427c:	1b28      	subs	r0, r5, r4
 802427e:	bd38      	pop	{r3, r4, r5, pc}

08024280 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 8024280:	6001      	str	r1, [r0, #0]
 8024282:	4770      	bx	lr

08024284 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 8024284:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8024286:	1a53      	subs	r3, r2, r1
 8024288:	2b0f      	cmp	r3, #15
 802428a:	4604      	mov	r4, r0
 802428c:	460d      	mov	r5, r1
 802428e:	4616      	mov	r6, r2
 8024290:	9301      	str	r3, [sp, #4]
 8024292:	d906      	bls.n	80242a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x1e>
 8024294:	2200      	movs	r2, #0
 8024296:	a901      	add	r1, sp, #4
 8024298:	f7ff fe30 	bl	8023efc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 802429c:	9b01      	ldr	r3, [sp, #4]
 802429e:	6020      	str	r0, [r4, #0]
 80242a0:	60a3      	str	r3, [r4, #8]
 80242a2:	4632      	mov	r2, r6
 80242a4:	4629      	mov	r1, r5
 80242a6:	6820      	ldr	r0, [r4, #0]
 80242a8:	f7ff fe99 	bl	8023fde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 80242ac:	9b01      	ldr	r3, [sp, #4]
 80242ae:	6822      	ldr	r2, [r4, #0]
 80242b0:	6063      	str	r3, [r4, #4]
 80242b2:	2100      	movs	r1, #0
 80242b4:	54d1      	strb	r1, [r2, r3]
 80242b6:	b002      	add	sp, #8
 80242b8:	bd70      	pop	{r4, r5, r6, pc}

080242ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 80242ba:	f100 0208 	add.w	r2, r0, #8
 80242be:	b510      	push	{r4, lr}
 80242c0:	6002      	str	r2, [r0, #0]
 80242c2:	e9d1 1200 	ldrd	r1, r2, [r1]
 80242c6:	4604      	mov	r4, r0
 80242c8:	f04f 0300 	mov.w	r3, #0
 80242cc:	440a      	add	r2, r1
 80242ce:	f7ff ffd9 	bl	8024284 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 80242d2:	4620      	mov	r0, r4
 80242d4:	bd10      	pop	{r4, pc}
	...

080242d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>:
 80242d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80242dc:	4698      	mov	r8, r3
 80242de:	f100 0308 	add.w	r3, r0, #8
 80242e2:	460d      	mov	r5, r1
 80242e4:	4617      	mov	r7, r2
 80242e6:	6003      	str	r3, [r0, #0]
 80242e8:	680e      	ldr	r6, [r1, #0]
 80242ea:	4a0b      	ldr	r2, [pc, #44]	@ (8024318 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj+0x40>)
 80242ec:	4604      	mov	r4, r0
 80242ee:	4639      	mov	r1, r7
 80242f0:	4628      	mov	r0, r5
 80242f2:	f7ff fe31 	bl	8023f58 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 80242f6:	686a      	ldr	r2, [r5, #4]
 80242f8:	1831      	adds	r1, r6, r0
 80242fa:	1bd2      	subs	r2, r2, r7
 80242fc:	4620      	mov	r0, r4
 80242fe:	f04f 0300 	mov.w	r3, #0
 8024302:	4542      	cmp	r2, r8
 8024304:	bf94      	ite	ls
 8024306:	188a      	addls	r2, r1, r2
 8024308:	eb01 0208 	addhi.w	r2, r1, r8
 802430c:	f7e2 fafb 	bl	8006906 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8024310:	4620      	mov	r0, r4
 8024312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024316:	bf00      	nop
 8024318:	08026b20 	.word	0x08026b20

0802431c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>:
 802431c:	b570      	push	{r4, r5, r6, lr}
 802431e:	460d      	mov	r5, r1
 8024320:	4604      	mov	r4, r0
 8024322:	4611      	mov	r1, r2
 8024324:	4628      	mov	r0, r5
 8024326:	4a06      	ldr	r2, [pc, #24]	@ (8024340 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x24>)
 8024328:	461e      	mov	r6, r3
 802432a:	f7ff fe15 	bl	8023f58 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 802432e:	4633      	mov	r3, r6
 8024330:	4602      	mov	r2, r0
 8024332:	4629      	mov	r1, r5
 8024334:	4620      	mov	r0, r4
 8024336:	f7ff ffcf 	bl	80242d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>
 802433a:	4620      	mov	r0, r4
 802433c:	bd70      	pop	{r4, r5, r6, pc}
 802433e:	bf00      	nop
 8024340:	08026b3b 	.word	0x08026b3b

08024344 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8024344:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8024346:	2400      	movs	r4, #0
 8024348:	2310      	movs	r3, #16
 802434a:	e9cd 3402 	strd	r3, r4, [sp, #8]
 802434e:	6803      	ldr	r3, [r0, #0]
 8024350:	4615      	mov	r5, r2
 8024352:	699e      	ldr	r6, [r3, #24]
 8024354:	6812      	ldr	r2, [r2, #0]
 8024356:	466b      	mov	r3, sp
 8024358:	e9cd 4400 	strd	r4, r4, [sp]
 802435c:	47b0      	blx	r6
 802435e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8024362:	f003 0306 	and.w	r3, r3, #6
 8024366:	2b06      	cmp	r3, #6
 8024368:	bf03      	ittte	eq
 802436a:	9b00      	ldreq	r3, [sp, #0]
 802436c:	602b      	streq	r3, [r5, #0]
 802436e:	2001      	moveq	r0, #1
 8024370:	4620      	movne	r0, r4
 8024372:	b004      	add	sp, #16
 8024374:	bd70      	pop	{r4, r5, r6, pc}

08024376 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8024376:	9800      	ldr	r0, [sp, #0]
 8024378:	4290      	cmp	r0, r2
 802437a:	bf0c      	ite	eq
 802437c:	2006      	moveq	r0, #6
 802437e:	2001      	movne	r0, #1
 8024380:	4770      	bx	lr
	...

08024384 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8024384:	b510      	push	{r4, lr}
 8024386:	4b03      	ldr	r3, [pc, #12]	@ (8024394 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8024388:	6003      	str	r3, [r0, #0]
 802438a:	4604      	mov	r4, r0
 802438c:	f000 f8d9 	bl	8024542 <_ZNSt9type_infoD1Ev>
 8024390:	4620      	mov	r0, r4
 8024392:	bd10      	pop	{r4, pc}
 8024394:	08026b88 	.word	0x08026b88

08024398 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8024398:	b510      	push	{r4, lr}
 802439a:	4604      	mov	r4, r0
 802439c:	f7ff fff2 	bl	8024384 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80243a0:	4620      	mov	r0, r4
 80243a2:	2108      	movs	r1, #8
 80243a4:	f7ff fd4b 	bl	8023e3e <_ZdlPvj>
 80243a8:	4620      	mov	r0, r4
 80243aa:	bd10      	pop	{r4, pc}

080243ac <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 80243ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80243b0:	461f      	mov	r7, r3
 80243b2:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 80243b6:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80243ba:	4598      	cmp	r8, r3
 80243bc:	4606      	mov	r6, r0
 80243be:	4615      	mov	r5, r2
 80243c0:	d107      	bne.n	80243d2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80243c2:	9907      	ldr	r1, [sp, #28]
 80243c4:	f000 f8c0 	bl	8024548 <_ZNKSt9type_info7__equalERKS_>
 80243c8:	b118      	cbz	r0, 80243d2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80243ca:	7165      	strb	r5, [r4, #5]
 80243cc:	2000      	movs	r0, #0
 80243ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80243d2:	4639      	mov	r1, r7
 80243d4:	4630      	mov	r0, r6
 80243d6:	f000 f8b7 	bl	8024548 <_ZNKSt9type_info7__equalERKS_>
 80243da:	2800      	cmp	r0, #0
 80243dc:	d0f6      	beq.n	80243cc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 80243de:	2301      	movs	r3, #1
 80243e0:	f8c4 8000 	str.w	r8, [r4]
 80243e4:	7125      	strb	r5, [r4, #4]
 80243e6:	71a3      	strb	r3, [r4, #6]
 80243e8:	e7f0      	b.n	80243cc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

080243ea <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 80243ea:	b538      	push	{r3, r4, r5, lr}
 80243ec:	4615      	mov	r5, r2
 80243ee:	461c      	mov	r4, r3
 80243f0:	f000 f8aa 	bl	8024548 <_ZNKSt9type_info7__equalERKS_>
 80243f4:	b120      	cbz	r0, 8024400 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 80243f6:	2308      	movs	r3, #8
 80243f8:	60e3      	str	r3, [r4, #12]
 80243fa:	2306      	movs	r3, #6
 80243fc:	6025      	str	r5, [r4, #0]
 80243fe:	7123      	strb	r3, [r4, #4]
 8024400:	bd38      	pop	{r3, r4, r5, pc}

08024402 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8024402:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024406:	4605      	mov	r5, r0
 8024408:	460c      	mov	r4, r1
 802440a:	4616      	mov	r6, r2
 802440c:	461f      	mov	r7, r3
 802440e:	f000 f89b 	bl	8024548 <_ZNKSt9type_info7__equalERKS_>
 8024412:	b948      	cbnz	r0, 8024428 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8024414:	2f03      	cmp	r7, #3
 8024416:	d807      	bhi.n	8024428 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8024418:	6823      	ldr	r3, [r4, #0]
 802441a:	4632      	mov	r2, r6
 802441c:	4629      	mov	r1, r5
 802441e:	4620      	mov	r0, r4
 8024420:	695b      	ldr	r3, [r3, #20]
 8024422:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024426:	4718      	bx	r3
 8024428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0802442c <_ZdlPv>:
 802442c:	f000 b8b2 	b.w	8024594 <free>

08024430 <_ZSt15get_new_handlerv>:
 8024430:	4b02      	ldr	r3, [pc, #8]	@ (802443c <_ZSt15get_new_handlerv+0xc>)
 8024432:	6818      	ldr	r0, [r3, #0]
 8024434:	f3bf 8f5b 	dmb	ish
 8024438:	4770      	bx	lr
 802443a:	bf00      	nop
 802443c:	24000abc 	.word	0x24000abc

08024440 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8024440:	b510      	push	{r4, lr}
 8024442:	4b03      	ldr	r3, [pc, #12]	@ (8024450 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8024444:	6003      	str	r3, [r0, #0]
 8024446:	4604      	mov	r4, r0
 8024448:	f7ff ff9c 	bl	8024384 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 802444c:	4620      	mov	r0, r4
 802444e:	bd10      	pop	{r4, pc}
 8024450:	08026be8 	.word	0x08026be8

08024454 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8024454:	b510      	push	{r4, lr}
 8024456:	4604      	mov	r4, r0
 8024458:	f7ff fff2 	bl	8024440 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 802445c:	4620      	mov	r0, r4
 802445e:	210c      	movs	r1, #12
 8024460:	f7ff fced 	bl	8023e3e <_ZdlPvj>
 8024464:	4620      	mov	r0, r4
 8024466:	bd10      	pop	{r4, pc}

08024468 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8024468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802446c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8024470:	4590      	cmp	r8, r2
 8024472:	4606      	mov	r6, r0
 8024474:	460f      	mov	r7, r1
 8024476:	4615      	mov	r5, r2
 8024478:	461c      	mov	r4, r3
 802447a:	d00b      	beq.n	8024494 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 802447c:	68b0      	ldr	r0, [r6, #8]
 802447e:	6803      	ldr	r3, [r0, #0]
 8024480:	f8cd 8018 	str.w	r8, [sp, #24]
 8024484:	6a1e      	ldr	r6, [r3, #32]
 8024486:	462a      	mov	r2, r5
 8024488:	4623      	mov	r3, r4
 802448a:	4639      	mov	r1, r7
 802448c:	46b4      	mov	ip, r6
 802448e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024492:	4760      	bx	ip
 8024494:	4619      	mov	r1, r3
 8024496:	f000 f857 	bl	8024548 <_ZNKSt9type_info7__equalERKS_>
 802449a:	2800      	cmp	r0, #0
 802449c:	d0ee      	beq.n	802447c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 802449e:	2006      	movs	r0, #6
 80244a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080244a4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 80244a4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80244a8:	460d      	mov	r5, r1
 80244aa:	4619      	mov	r1, r3
 80244ac:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	@ 0x28
 80244b0:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	@ 0x30
 80244b4:	4681      	mov	r9, r0
 80244b6:	4617      	mov	r7, r2
 80244b8:	4698      	mov	r8, r3
 80244ba:	f000 f845 	bl	8024548 <_ZNKSt9type_info7__equalERKS_>
 80244be:	b190      	cbz	r0, 80244e6 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 80244c0:	2d00      	cmp	r5, #0
 80244c2:	6034      	str	r4, [r6, #0]
 80244c4:	7137      	strb	r7, [r6, #4]
 80244c6:	db09      	blt.n	80244dc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 80244c8:	442c      	add	r4, r5
 80244ca:	45a2      	cmp	sl, r4
 80244cc:	bf14      	ite	ne
 80244ce:	2401      	movne	r4, #1
 80244d0:	2406      	moveq	r4, #6
 80244d2:	71b4      	strb	r4, [r6, #6]
 80244d4:	2000      	movs	r0, #0
 80244d6:	b001      	add	sp, #4
 80244d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80244dc:	3502      	adds	r5, #2
 80244de:	d1f9      	bne.n	80244d4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80244e0:	2301      	movs	r3, #1
 80244e2:	71b3      	strb	r3, [r6, #6]
 80244e4:	e7f6      	b.n	80244d4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80244e6:	4554      	cmp	r4, sl
 80244e8:	d106      	bne.n	80244f8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80244ea:	4659      	mov	r1, fp
 80244ec:	4648      	mov	r0, r9
 80244ee:	f000 f82b 	bl	8024548 <_ZNKSt9type_info7__equalERKS_>
 80244f2:	b108      	cbz	r0, 80244f8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80244f4:	7177      	strb	r7, [r6, #5]
 80244f6:	e7ed      	b.n	80244d4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80244f8:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80244fc:	6803      	ldr	r3, [r0, #0]
 80244fe:	e9cd a60c 	strd	sl, r6, [sp, #48]	@ 0x30
 8024502:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	@ 0x28
 8024506:	69dc      	ldr	r4, [r3, #28]
 8024508:	463a      	mov	r2, r7
 802450a:	4643      	mov	r3, r8
 802450c:	4629      	mov	r1, r5
 802450e:	46a4      	mov	ip, r4
 8024510:	b001      	add	sp, #4
 8024512:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024516:	4760      	bx	ip

08024518 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8024518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802451c:	4607      	mov	r7, r0
 802451e:	460c      	mov	r4, r1
 8024520:	4615      	mov	r5, r2
 8024522:	461e      	mov	r6, r3
 8024524:	f7ff ff61 	bl	80243ea <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8024528:	b948      	cbnz	r0, 802453e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 802452a:	68b8      	ldr	r0, [r7, #8]
 802452c:	6803      	ldr	r3, [r0, #0]
 802452e:	699f      	ldr	r7, [r3, #24]
 8024530:	462a      	mov	r2, r5
 8024532:	4633      	mov	r3, r6
 8024534:	4621      	mov	r1, r4
 8024536:	46bc      	mov	ip, r7
 8024538:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802453c:	4760      	bx	ip
 802453e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08024542 <_ZNSt9type_infoD1Ev>:
 8024542:	4770      	bx	lr

08024544 <_ZNKSt9type_info14__is_pointer_pEv>:
 8024544:	2000      	movs	r0, #0
 8024546:	4770      	bx	lr

08024548 <_ZNKSt9type_info7__equalERKS_>:
 8024548:	4281      	cmp	r1, r0
 802454a:	b508      	push	{r3, lr}
 802454c:	d00e      	beq.n	802456c <_ZNKSt9type_info7__equalERKS_+0x24>
 802454e:	6840      	ldr	r0, [r0, #4]
 8024550:	7803      	ldrb	r3, [r0, #0]
 8024552:	2b2a      	cmp	r3, #42	@ 0x2a
 8024554:	d00c      	beq.n	8024570 <_ZNKSt9type_info7__equalERKS_+0x28>
 8024556:	6849      	ldr	r1, [r1, #4]
 8024558:	780b      	ldrb	r3, [r1, #0]
 802455a:	2b2a      	cmp	r3, #42	@ 0x2a
 802455c:	bf08      	it	eq
 802455e:	3101      	addeq	r1, #1
 8024560:	f7db febe 	bl	80002e0 <strcmp>
 8024564:	fab0 f080 	clz	r0, r0
 8024568:	0940      	lsrs	r0, r0, #5
 802456a:	bd08      	pop	{r3, pc}
 802456c:	2001      	movs	r0, #1
 802456e:	e7fc      	b.n	802456a <_ZNKSt9type_info7__equalERKS_+0x22>
 8024570:	2000      	movs	r0, #0
 8024572:	e7fa      	b.n	802456a <_ZNKSt9type_info7__equalERKS_+0x22>

08024574 <abort>:
 8024574:	b508      	push	{r3, lr}
 8024576:	2006      	movs	r0, #6
 8024578:	f000 fbe8 	bl	8024d4c <raise>
 802457c:	2001      	movs	r0, #1
 802457e:	f7e8 ff2b 	bl	800d3d8 <_exit>
	...

08024584 <malloc>:
 8024584:	4b02      	ldr	r3, [pc, #8]	@ (8024590 <malloc+0xc>)
 8024586:	4601      	mov	r1, r0
 8024588:	6818      	ldr	r0, [r3, #0]
 802458a:	f000 b82d 	b.w	80245e8 <_malloc_r>
 802458e:	bf00      	nop
 8024590:	24000038 	.word	0x24000038

08024594 <free>:
 8024594:	4b02      	ldr	r3, [pc, #8]	@ (80245a0 <free+0xc>)
 8024596:	4601      	mov	r1, r0
 8024598:	6818      	ldr	r0, [r3, #0]
 802459a:	f000 bc85 	b.w	8024ea8 <_free_r>
 802459e:	bf00      	nop
 80245a0:	24000038 	.word	0x24000038

080245a4 <sbrk_aligned>:
 80245a4:	b570      	push	{r4, r5, r6, lr}
 80245a6:	4e0f      	ldr	r6, [pc, #60]	@ (80245e4 <sbrk_aligned+0x40>)
 80245a8:	460c      	mov	r4, r1
 80245aa:	6831      	ldr	r1, [r6, #0]
 80245ac:	4605      	mov	r5, r0
 80245ae:	b911      	cbnz	r1, 80245b6 <sbrk_aligned+0x12>
 80245b0:	f000 fc1c 	bl	8024dec <_sbrk_r>
 80245b4:	6030      	str	r0, [r6, #0]
 80245b6:	4621      	mov	r1, r4
 80245b8:	4628      	mov	r0, r5
 80245ba:	f000 fc17 	bl	8024dec <_sbrk_r>
 80245be:	1c43      	adds	r3, r0, #1
 80245c0:	d103      	bne.n	80245ca <sbrk_aligned+0x26>
 80245c2:	f04f 34ff 	mov.w	r4, #4294967295
 80245c6:	4620      	mov	r0, r4
 80245c8:	bd70      	pop	{r4, r5, r6, pc}
 80245ca:	1cc4      	adds	r4, r0, #3
 80245cc:	f024 0403 	bic.w	r4, r4, #3
 80245d0:	42a0      	cmp	r0, r4
 80245d2:	d0f8      	beq.n	80245c6 <sbrk_aligned+0x22>
 80245d4:	1a21      	subs	r1, r4, r0
 80245d6:	4628      	mov	r0, r5
 80245d8:	f000 fc08 	bl	8024dec <_sbrk_r>
 80245dc:	3001      	adds	r0, #1
 80245de:	d1f2      	bne.n	80245c6 <sbrk_aligned+0x22>
 80245e0:	e7ef      	b.n	80245c2 <sbrk_aligned+0x1e>
 80245e2:	bf00      	nop
 80245e4:	24000ac0 	.word	0x24000ac0

080245e8 <_malloc_r>:
 80245e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80245ec:	1ccd      	adds	r5, r1, #3
 80245ee:	f025 0503 	bic.w	r5, r5, #3
 80245f2:	3508      	adds	r5, #8
 80245f4:	2d0c      	cmp	r5, #12
 80245f6:	bf38      	it	cc
 80245f8:	250c      	movcc	r5, #12
 80245fa:	2d00      	cmp	r5, #0
 80245fc:	4606      	mov	r6, r0
 80245fe:	db01      	blt.n	8024604 <_malloc_r+0x1c>
 8024600:	42a9      	cmp	r1, r5
 8024602:	d904      	bls.n	802460e <_malloc_r+0x26>
 8024604:	230c      	movs	r3, #12
 8024606:	6033      	str	r3, [r6, #0]
 8024608:	2000      	movs	r0, #0
 802460a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802460e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80246e4 <_malloc_r+0xfc>
 8024612:	f000 f869 	bl	80246e8 <__malloc_lock>
 8024616:	f8d8 3000 	ldr.w	r3, [r8]
 802461a:	461c      	mov	r4, r3
 802461c:	bb44      	cbnz	r4, 8024670 <_malloc_r+0x88>
 802461e:	4629      	mov	r1, r5
 8024620:	4630      	mov	r0, r6
 8024622:	f7ff ffbf 	bl	80245a4 <sbrk_aligned>
 8024626:	1c43      	adds	r3, r0, #1
 8024628:	4604      	mov	r4, r0
 802462a:	d158      	bne.n	80246de <_malloc_r+0xf6>
 802462c:	f8d8 4000 	ldr.w	r4, [r8]
 8024630:	4627      	mov	r7, r4
 8024632:	2f00      	cmp	r7, #0
 8024634:	d143      	bne.n	80246be <_malloc_r+0xd6>
 8024636:	2c00      	cmp	r4, #0
 8024638:	d04b      	beq.n	80246d2 <_malloc_r+0xea>
 802463a:	6823      	ldr	r3, [r4, #0]
 802463c:	4639      	mov	r1, r7
 802463e:	4630      	mov	r0, r6
 8024640:	eb04 0903 	add.w	r9, r4, r3
 8024644:	f000 fbd2 	bl	8024dec <_sbrk_r>
 8024648:	4581      	cmp	r9, r0
 802464a:	d142      	bne.n	80246d2 <_malloc_r+0xea>
 802464c:	6821      	ldr	r1, [r4, #0]
 802464e:	1a6d      	subs	r5, r5, r1
 8024650:	4629      	mov	r1, r5
 8024652:	4630      	mov	r0, r6
 8024654:	f7ff ffa6 	bl	80245a4 <sbrk_aligned>
 8024658:	3001      	adds	r0, #1
 802465a:	d03a      	beq.n	80246d2 <_malloc_r+0xea>
 802465c:	6823      	ldr	r3, [r4, #0]
 802465e:	442b      	add	r3, r5
 8024660:	6023      	str	r3, [r4, #0]
 8024662:	f8d8 3000 	ldr.w	r3, [r8]
 8024666:	685a      	ldr	r2, [r3, #4]
 8024668:	bb62      	cbnz	r2, 80246c4 <_malloc_r+0xdc>
 802466a:	f8c8 7000 	str.w	r7, [r8]
 802466e:	e00f      	b.n	8024690 <_malloc_r+0xa8>
 8024670:	6822      	ldr	r2, [r4, #0]
 8024672:	1b52      	subs	r2, r2, r5
 8024674:	d420      	bmi.n	80246b8 <_malloc_r+0xd0>
 8024676:	2a0b      	cmp	r2, #11
 8024678:	d917      	bls.n	80246aa <_malloc_r+0xc2>
 802467a:	1961      	adds	r1, r4, r5
 802467c:	42a3      	cmp	r3, r4
 802467e:	6025      	str	r5, [r4, #0]
 8024680:	bf18      	it	ne
 8024682:	6059      	strne	r1, [r3, #4]
 8024684:	6863      	ldr	r3, [r4, #4]
 8024686:	bf08      	it	eq
 8024688:	f8c8 1000 	streq.w	r1, [r8]
 802468c:	5162      	str	r2, [r4, r5]
 802468e:	604b      	str	r3, [r1, #4]
 8024690:	4630      	mov	r0, r6
 8024692:	f000 f82f 	bl	80246f4 <__malloc_unlock>
 8024696:	f104 000b 	add.w	r0, r4, #11
 802469a:	1d23      	adds	r3, r4, #4
 802469c:	f020 0007 	bic.w	r0, r0, #7
 80246a0:	1ac2      	subs	r2, r0, r3
 80246a2:	bf1c      	itt	ne
 80246a4:	1a1b      	subne	r3, r3, r0
 80246a6:	50a3      	strne	r3, [r4, r2]
 80246a8:	e7af      	b.n	802460a <_malloc_r+0x22>
 80246aa:	6862      	ldr	r2, [r4, #4]
 80246ac:	42a3      	cmp	r3, r4
 80246ae:	bf0c      	ite	eq
 80246b0:	f8c8 2000 	streq.w	r2, [r8]
 80246b4:	605a      	strne	r2, [r3, #4]
 80246b6:	e7eb      	b.n	8024690 <_malloc_r+0xa8>
 80246b8:	4623      	mov	r3, r4
 80246ba:	6864      	ldr	r4, [r4, #4]
 80246bc:	e7ae      	b.n	802461c <_malloc_r+0x34>
 80246be:	463c      	mov	r4, r7
 80246c0:	687f      	ldr	r7, [r7, #4]
 80246c2:	e7b6      	b.n	8024632 <_malloc_r+0x4a>
 80246c4:	461a      	mov	r2, r3
 80246c6:	685b      	ldr	r3, [r3, #4]
 80246c8:	42a3      	cmp	r3, r4
 80246ca:	d1fb      	bne.n	80246c4 <_malloc_r+0xdc>
 80246cc:	2300      	movs	r3, #0
 80246ce:	6053      	str	r3, [r2, #4]
 80246d0:	e7de      	b.n	8024690 <_malloc_r+0xa8>
 80246d2:	230c      	movs	r3, #12
 80246d4:	6033      	str	r3, [r6, #0]
 80246d6:	4630      	mov	r0, r6
 80246d8:	f000 f80c 	bl	80246f4 <__malloc_unlock>
 80246dc:	e794      	b.n	8024608 <_malloc_r+0x20>
 80246de:	6005      	str	r5, [r0, #0]
 80246e0:	e7d6      	b.n	8024690 <_malloc_r+0xa8>
 80246e2:	bf00      	nop
 80246e4:	24000ac4 	.word	0x24000ac4

080246e8 <__malloc_lock>:
 80246e8:	4801      	ldr	r0, [pc, #4]	@ (80246f0 <__malloc_lock+0x8>)
 80246ea:	f000 bbcc 	b.w	8024e86 <__retarget_lock_acquire_recursive>
 80246ee:	bf00      	nop
 80246f0:	24000c08 	.word	0x24000c08

080246f4 <__malloc_unlock>:
 80246f4:	4801      	ldr	r0, [pc, #4]	@ (80246fc <__malloc_unlock+0x8>)
 80246f6:	f000 bbc7 	b.w	8024e88 <__retarget_lock_release_recursive>
 80246fa:	bf00      	nop
 80246fc:	24000c08 	.word	0x24000c08

08024700 <realloc>:
 8024700:	4b02      	ldr	r3, [pc, #8]	@ (802470c <realloc+0xc>)
 8024702:	460a      	mov	r2, r1
 8024704:	4601      	mov	r1, r0
 8024706:	6818      	ldr	r0, [r3, #0]
 8024708:	f000 b802 	b.w	8024710 <_realloc_r>
 802470c:	24000038 	.word	0x24000038

08024710 <_realloc_r>:
 8024710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024714:	4680      	mov	r8, r0
 8024716:	4615      	mov	r5, r2
 8024718:	460c      	mov	r4, r1
 802471a:	b921      	cbnz	r1, 8024726 <_realloc_r+0x16>
 802471c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024720:	4611      	mov	r1, r2
 8024722:	f7ff bf61 	b.w	80245e8 <_malloc_r>
 8024726:	b92a      	cbnz	r2, 8024734 <_realloc_r+0x24>
 8024728:	f000 fbbe 	bl	8024ea8 <_free_r>
 802472c:	2400      	movs	r4, #0
 802472e:	4620      	mov	r0, r4
 8024730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024734:	f000 fc02 	bl	8024f3c <_malloc_usable_size_r>
 8024738:	4285      	cmp	r5, r0
 802473a:	4606      	mov	r6, r0
 802473c:	d802      	bhi.n	8024744 <_realloc_r+0x34>
 802473e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8024742:	d8f4      	bhi.n	802472e <_realloc_r+0x1e>
 8024744:	4629      	mov	r1, r5
 8024746:	4640      	mov	r0, r8
 8024748:	f7ff ff4e 	bl	80245e8 <_malloc_r>
 802474c:	4607      	mov	r7, r0
 802474e:	2800      	cmp	r0, #0
 8024750:	d0ec      	beq.n	802472c <_realloc_r+0x1c>
 8024752:	42b5      	cmp	r5, r6
 8024754:	462a      	mov	r2, r5
 8024756:	4621      	mov	r1, r4
 8024758:	bf28      	it	cs
 802475a:	4632      	movcs	r2, r6
 802475c:	f000 fb95 	bl	8024e8a <memcpy>
 8024760:	4621      	mov	r1, r4
 8024762:	4640      	mov	r0, r8
 8024764:	f000 fba0 	bl	8024ea8 <_free_r>
 8024768:	463c      	mov	r4, r7
 802476a:	e7e0      	b.n	802472e <_realloc_r+0x1e>

0802476c <_strtol_l.constprop.0>:
 802476c:	2b24      	cmp	r3, #36	@ 0x24
 802476e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024772:	4686      	mov	lr, r0
 8024774:	4690      	mov	r8, r2
 8024776:	d801      	bhi.n	802477c <_strtol_l.constprop.0+0x10>
 8024778:	2b01      	cmp	r3, #1
 802477a:	d106      	bne.n	802478a <_strtol_l.constprop.0+0x1e>
 802477c:	f000 fb58 	bl	8024e30 <__errno>
 8024780:	2316      	movs	r3, #22
 8024782:	6003      	str	r3, [r0, #0]
 8024784:	2000      	movs	r0, #0
 8024786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802478a:	4834      	ldr	r0, [pc, #208]	@ (802485c <_strtol_l.constprop.0+0xf0>)
 802478c:	460d      	mov	r5, r1
 802478e:	462a      	mov	r2, r5
 8024790:	f815 4b01 	ldrb.w	r4, [r5], #1
 8024794:	5d06      	ldrb	r6, [r0, r4]
 8024796:	f016 0608 	ands.w	r6, r6, #8
 802479a:	d1f8      	bne.n	802478e <_strtol_l.constprop.0+0x22>
 802479c:	2c2d      	cmp	r4, #45	@ 0x2d
 802479e:	d12d      	bne.n	80247fc <_strtol_l.constprop.0+0x90>
 80247a0:	782c      	ldrb	r4, [r5, #0]
 80247a2:	2601      	movs	r6, #1
 80247a4:	1c95      	adds	r5, r2, #2
 80247a6:	f033 0210 	bics.w	r2, r3, #16
 80247aa:	d109      	bne.n	80247c0 <_strtol_l.constprop.0+0x54>
 80247ac:	2c30      	cmp	r4, #48	@ 0x30
 80247ae:	d12a      	bne.n	8024806 <_strtol_l.constprop.0+0x9a>
 80247b0:	782a      	ldrb	r2, [r5, #0]
 80247b2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80247b6:	2a58      	cmp	r2, #88	@ 0x58
 80247b8:	d125      	bne.n	8024806 <_strtol_l.constprop.0+0x9a>
 80247ba:	786c      	ldrb	r4, [r5, #1]
 80247bc:	2310      	movs	r3, #16
 80247be:	3502      	adds	r5, #2
 80247c0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80247c4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80247c8:	2200      	movs	r2, #0
 80247ca:	fbbc f9f3 	udiv	r9, ip, r3
 80247ce:	4610      	mov	r0, r2
 80247d0:	fb03 ca19 	mls	sl, r3, r9, ip
 80247d4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80247d8:	2f09      	cmp	r7, #9
 80247da:	d81b      	bhi.n	8024814 <_strtol_l.constprop.0+0xa8>
 80247dc:	463c      	mov	r4, r7
 80247de:	42a3      	cmp	r3, r4
 80247e0:	dd27      	ble.n	8024832 <_strtol_l.constprop.0+0xc6>
 80247e2:	1c57      	adds	r7, r2, #1
 80247e4:	d007      	beq.n	80247f6 <_strtol_l.constprop.0+0x8a>
 80247e6:	4581      	cmp	r9, r0
 80247e8:	d320      	bcc.n	802482c <_strtol_l.constprop.0+0xc0>
 80247ea:	d101      	bne.n	80247f0 <_strtol_l.constprop.0+0x84>
 80247ec:	45a2      	cmp	sl, r4
 80247ee:	db1d      	blt.n	802482c <_strtol_l.constprop.0+0xc0>
 80247f0:	fb00 4003 	mla	r0, r0, r3, r4
 80247f4:	2201      	movs	r2, #1
 80247f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80247fa:	e7eb      	b.n	80247d4 <_strtol_l.constprop.0+0x68>
 80247fc:	2c2b      	cmp	r4, #43	@ 0x2b
 80247fe:	bf04      	itt	eq
 8024800:	782c      	ldrbeq	r4, [r5, #0]
 8024802:	1c95      	addeq	r5, r2, #2
 8024804:	e7cf      	b.n	80247a6 <_strtol_l.constprop.0+0x3a>
 8024806:	2b00      	cmp	r3, #0
 8024808:	d1da      	bne.n	80247c0 <_strtol_l.constprop.0+0x54>
 802480a:	2c30      	cmp	r4, #48	@ 0x30
 802480c:	bf0c      	ite	eq
 802480e:	2308      	moveq	r3, #8
 8024810:	230a      	movne	r3, #10
 8024812:	e7d5      	b.n	80247c0 <_strtol_l.constprop.0+0x54>
 8024814:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8024818:	2f19      	cmp	r7, #25
 802481a:	d801      	bhi.n	8024820 <_strtol_l.constprop.0+0xb4>
 802481c:	3c37      	subs	r4, #55	@ 0x37
 802481e:	e7de      	b.n	80247de <_strtol_l.constprop.0+0x72>
 8024820:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8024824:	2f19      	cmp	r7, #25
 8024826:	d804      	bhi.n	8024832 <_strtol_l.constprop.0+0xc6>
 8024828:	3c57      	subs	r4, #87	@ 0x57
 802482a:	e7d8      	b.n	80247de <_strtol_l.constprop.0+0x72>
 802482c:	f04f 32ff 	mov.w	r2, #4294967295
 8024830:	e7e1      	b.n	80247f6 <_strtol_l.constprop.0+0x8a>
 8024832:	1c53      	adds	r3, r2, #1
 8024834:	d108      	bne.n	8024848 <_strtol_l.constprop.0+0xdc>
 8024836:	2322      	movs	r3, #34	@ 0x22
 8024838:	f8ce 3000 	str.w	r3, [lr]
 802483c:	4660      	mov	r0, ip
 802483e:	f1b8 0f00 	cmp.w	r8, #0
 8024842:	d0a0      	beq.n	8024786 <_strtol_l.constprop.0+0x1a>
 8024844:	1e69      	subs	r1, r5, #1
 8024846:	e006      	b.n	8024856 <_strtol_l.constprop.0+0xea>
 8024848:	b106      	cbz	r6, 802484c <_strtol_l.constprop.0+0xe0>
 802484a:	4240      	negs	r0, r0
 802484c:	f1b8 0f00 	cmp.w	r8, #0
 8024850:	d099      	beq.n	8024786 <_strtol_l.constprop.0+0x1a>
 8024852:	2a00      	cmp	r2, #0
 8024854:	d1f6      	bne.n	8024844 <_strtol_l.constprop.0+0xd8>
 8024856:	f8c8 1000 	str.w	r1, [r8]
 802485a:	e794      	b.n	8024786 <_strtol_l.constprop.0+0x1a>
 802485c:	08026c25 	.word	0x08026c25

08024860 <strtol>:
 8024860:	4613      	mov	r3, r2
 8024862:	460a      	mov	r2, r1
 8024864:	4601      	mov	r1, r0
 8024866:	4802      	ldr	r0, [pc, #8]	@ (8024870 <strtol+0x10>)
 8024868:	6800      	ldr	r0, [r0, #0]
 802486a:	f7ff bf7f 	b.w	802476c <_strtol_l.constprop.0>
 802486e:	bf00      	nop
 8024870:	24000038 	.word	0x24000038

08024874 <std>:
 8024874:	2300      	movs	r3, #0
 8024876:	b510      	push	{r4, lr}
 8024878:	4604      	mov	r4, r0
 802487a:	e9c0 3300 	strd	r3, r3, [r0]
 802487e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8024882:	6083      	str	r3, [r0, #8]
 8024884:	8181      	strh	r1, [r0, #12]
 8024886:	6643      	str	r3, [r0, #100]	@ 0x64
 8024888:	81c2      	strh	r2, [r0, #14]
 802488a:	6183      	str	r3, [r0, #24]
 802488c:	4619      	mov	r1, r3
 802488e:	2208      	movs	r2, #8
 8024890:	305c      	adds	r0, #92	@ 0x5c
 8024892:	f000 fa2b 	bl	8024cec <memset>
 8024896:	4b0d      	ldr	r3, [pc, #52]	@ (80248cc <std+0x58>)
 8024898:	6263      	str	r3, [r4, #36]	@ 0x24
 802489a:	4b0d      	ldr	r3, [pc, #52]	@ (80248d0 <std+0x5c>)
 802489c:	62a3      	str	r3, [r4, #40]	@ 0x28
 802489e:	4b0d      	ldr	r3, [pc, #52]	@ (80248d4 <std+0x60>)
 80248a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80248a2:	4b0d      	ldr	r3, [pc, #52]	@ (80248d8 <std+0x64>)
 80248a4:	6323      	str	r3, [r4, #48]	@ 0x30
 80248a6:	4b0d      	ldr	r3, [pc, #52]	@ (80248dc <std+0x68>)
 80248a8:	6224      	str	r4, [r4, #32]
 80248aa:	429c      	cmp	r4, r3
 80248ac:	d006      	beq.n	80248bc <std+0x48>
 80248ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80248b2:	4294      	cmp	r4, r2
 80248b4:	d002      	beq.n	80248bc <std+0x48>
 80248b6:	33d0      	adds	r3, #208	@ 0xd0
 80248b8:	429c      	cmp	r4, r3
 80248ba:	d105      	bne.n	80248c8 <std+0x54>
 80248bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80248c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80248c4:	f000 bade 	b.w	8024e84 <__retarget_lock_init_recursive>
 80248c8:	bd10      	pop	{r4, pc}
 80248ca:	bf00      	nop
 80248cc:	08024ae9 	.word	0x08024ae9
 80248d0:	08024b0b 	.word	0x08024b0b
 80248d4:	08024b43 	.word	0x08024b43
 80248d8:	08024b67 	.word	0x08024b67
 80248dc:	24000ac8 	.word	0x24000ac8

080248e0 <stdio_exit_handler>:
 80248e0:	4a02      	ldr	r2, [pc, #8]	@ (80248ec <stdio_exit_handler+0xc>)
 80248e2:	4903      	ldr	r1, [pc, #12]	@ (80248f0 <stdio_exit_handler+0x10>)
 80248e4:	4803      	ldr	r0, [pc, #12]	@ (80248f4 <stdio_exit_handler+0x14>)
 80248e6:	f000 b869 	b.w	80249bc <_fwalk_sglue>
 80248ea:	bf00      	nop
 80248ec:	2400002c 	.word	0x2400002c
 80248f0:	080255f5 	.word	0x080255f5
 80248f4:	2400003c 	.word	0x2400003c

080248f8 <cleanup_stdio>:
 80248f8:	6841      	ldr	r1, [r0, #4]
 80248fa:	4b0c      	ldr	r3, [pc, #48]	@ (802492c <cleanup_stdio+0x34>)
 80248fc:	4299      	cmp	r1, r3
 80248fe:	b510      	push	{r4, lr}
 8024900:	4604      	mov	r4, r0
 8024902:	d001      	beq.n	8024908 <cleanup_stdio+0x10>
 8024904:	f000 fe76 	bl	80255f4 <_fflush_r>
 8024908:	68a1      	ldr	r1, [r4, #8]
 802490a:	4b09      	ldr	r3, [pc, #36]	@ (8024930 <cleanup_stdio+0x38>)
 802490c:	4299      	cmp	r1, r3
 802490e:	d002      	beq.n	8024916 <cleanup_stdio+0x1e>
 8024910:	4620      	mov	r0, r4
 8024912:	f000 fe6f 	bl	80255f4 <_fflush_r>
 8024916:	68e1      	ldr	r1, [r4, #12]
 8024918:	4b06      	ldr	r3, [pc, #24]	@ (8024934 <cleanup_stdio+0x3c>)
 802491a:	4299      	cmp	r1, r3
 802491c:	d004      	beq.n	8024928 <cleanup_stdio+0x30>
 802491e:	4620      	mov	r0, r4
 8024920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024924:	f000 be66 	b.w	80255f4 <_fflush_r>
 8024928:	bd10      	pop	{r4, pc}
 802492a:	bf00      	nop
 802492c:	24000ac8 	.word	0x24000ac8
 8024930:	24000b30 	.word	0x24000b30
 8024934:	24000b98 	.word	0x24000b98

08024938 <global_stdio_init.part.0>:
 8024938:	b510      	push	{r4, lr}
 802493a:	4b0b      	ldr	r3, [pc, #44]	@ (8024968 <global_stdio_init.part.0+0x30>)
 802493c:	4c0b      	ldr	r4, [pc, #44]	@ (802496c <global_stdio_init.part.0+0x34>)
 802493e:	4a0c      	ldr	r2, [pc, #48]	@ (8024970 <global_stdio_init.part.0+0x38>)
 8024940:	601a      	str	r2, [r3, #0]
 8024942:	4620      	mov	r0, r4
 8024944:	2200      	movs	r2, #0
 8024946:	2104      	movs	r1, #4
 8024948:	f7ff ff94 	bl	8024874 <std>
 802494c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8024950:	2201      	movs	r2, #1
 8024952:	2109      	movs	r1, #9
 8024954:	f7ff ff8e 	bl	8024874 <std>
 8024958:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 802495c:	2202      	movs	r2, #2
 802495e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024962:	2112      	movs	r1, #18
 8024964:	f7ff bf86 	b.w	8024874 <std>
 8024968:	24000c00 	.word	0x24000c00
 802496c:	24000ac8 	.word	0x24000ac8
 8024970:	080248e1 	.word	0x080248e1

08024974 <__sfp_lock_acquire>:
 8024974:	4801      	ldr	r0, [pc, #4]	@ (802497c <__sfp_lock_acquire+0x8>)
 8024976:	f000 ba86 	b.w	8024e86 <__retarget_lock_acquire_recursive>
 802497a:	bf00      	nop
 802497c:	24000c09 	.word	0x24000c09

08024980 <__sfp_lock_release>:
 8024980:	4801      	ldr	r0, [pc, #4]	@ (8024988 <__sfp_lock_release+0x8>)
 8024982:	f000 ba81 	b.w	8024e88 <__retarget_lock_release_recursive>
 8024986:	bf00      	nop
 8024988:	24000c09 	.word	0x24000c09

0802498c <__sinit>:
 802498c:	b510      	push	{r4, lr}
 802498e:	4604      	mov	r4, r0
 8024990:	f7ff fff0 	bl	8024974 <__sfp_lock_acquire>
 8024994:	6a23      	ldr	r3, [r4, #32]
 8024996:	b11b      	cbz	r3, 80249a0 <__sinit+0x14>
 8024998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802499c:	f7ff bff0 	b.w	8024980 <__sfp_lock_release>
 80249a0:	4b04      	ldr	r3, [pc, #16]	@ (80249b4 <__sinit+0x28>)
 80249a2:	6223      	str	r3, [r4, #32]
 80249a4:	4b04      	ldr	r3, [pc, #16]	@ (80249b8 <__sinit+0x2c>)
 80249a6:	681b      	ldr	r3, [r3, #0]
 80249a8:	2b00      	cmp	r3, #0
 80249aa:	d1f5      	bne.n	8024998 <__sinit+0xc>
 80249ac:	f7ff ffc4 	bl	8024938 <global_stdio_init.part.0>
 80249b0:	e7f2      	b.n	8024998 <__sinit+0xc>
 80249b2:	bf00      	nop
 80249b4:	080248f9 	.word	0x080248f9
 80249b8:	24000c00 	.word	0x24000c00

080249bc <_fwalk_sglue>:
 80249bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80249c0:	4607      	mov	r7, r0
 80249c2:	4688      	mov	r8, r1
 80249c4:	4614      	mov	r4, r2
 80249c6:	2600      	movs	r6, #0
 80249c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80249cc:	f1b9 0901 	subs.w	r9, r9, #1
 80249d0:	d505      	bpl.n	80249de <_fwalk_sglue+0x22>
 80249d2:	6824      	ldr	r4, [r4, #0]
 80249d4:	2c00      	cmp	r4, #0
 80249d6:	d1f7      	bne.n	80249c8 <_fwalk_sglue+0xc>
 80249d8:	4630      	mov	r0, r6
 80249da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80249de:	89ab      	ldrh	r3, [r5, #12]
 80249e0:	2b01      	cmp	r3, #1
 80249e2:	d907      	bls.n	80249f4 <_fwalk_sglue+0x38>
 80249e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80249e8:	3301      	adds	r3, #1
 80249ea:	d003      	beq.n	80249f4 <_fwalk_sglue+0x38>
 80249ec:	4629      	mov	r1, r5
 80249ee:	4638      	mov	r0, r7
 80249f0:	47c0      	blx	r8
 80249f2:	4306      	orrs	r6, r0
 80249f4:	3568      	adds	r5, #104	@ 0x68
 80249f6:	e7e9      	b.n	80249cc <_fwalk_sglue+0x10>

080249f8 <iprintf>:
 80249f8:	b40f      	push	{r0, r1, r2, r3}
 80249fa:	b507      	push	{r0, r1, r2, lr}
 80249fc:	4906      	ldr	r1, [pc, #24]	@ (8024a18 <iprintf+0x20>)
 80249fe:	ab04      	add	r3, sp, #16
 8024a00:	6808      	ldr	r0, [r1, #0]
 8024a02:	f853 2b04 	ldr.w	r2, [r3], #4
 8024a06:	6881      	ldr	r1, [r0, #8]
 8024a08:	9301      	str	r3, [sp, #4]
 8024a0a:	f000 fac9 	bl	8024fa0 <_vfiprintf_r>
 8024a0e:	b003      	add	sp, #12
 8024a10:	f85d eb04 	ldr.w	lr, [sp], #4
 8024a14:	b004      	add	sp, #16
 8024a16:	4770      	bx	lr
 8024a18:	24000038 	.word	0x24000038

08024a1c <putchar>:
 8024a1c:	4b02      	ldr	r3, [pc, #8]	@ (8024a28 <putchar+0xc>)
 8024a1e:	4601      	mov	r1, r0
 8024a20:	6818      	ldr	r0, [r3, #0]
 8024a22:	6882      	ldr	r2, [r0, #8]
 8024a24:	f000 be70 	b.w	8025708 <_putc_r>
 8024a28:	24000038 	.word	0x24000038

08024a2c <_puts_r>:
 8024a2c:	6a03      	ldr	r3, [r0, #32]
 8024a2e:	b570      	push	{r4, r5, r6, lr}
 8024a30:	6884      	ldr	r4, [r0, #8]
 8024a32:	4605      	mov	r5, r0
 8024a34:	460e      	mov	r6, r1
 8024a36:	b90b      	cbnz	r3, 8024a3c <_puts_r+0x10>
 8024a38:	f7ff ffa8 	bl	802498c <__sinit>
 8024a3c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8024a3e:	07db      	lsls	r3, r3, #31
 8024a40:	d405      	bmi.n	8024a4e <_puts_r+0x22>
 8024a42:	89a3      	ldrh	r3, [r4, #12]
 8024a44:	0598      	lsls	r0, r3, #22
 8024a46:	d402      	bmi.n	8024a4e <_puts_r+0x22>
 8024a48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8024a4a:	f000 fa1c 	bl	8024e86 <__retarget_lock_acquire_recursive>
 8024a4e:	89a3      	ldrh	r3, [r4, #12]
 8024a50:	0719      	lsls	r1, r3, #28
 8024a52:	d502      	bpl.n	8024a5a <_puts_r+0x2e>
 8024a54:	6923      	ldr	r3, [r4, #16]
 8024a56:	2b00      	cmp	r3, #0
 8024a58:	d135      	bne.n	8024ac6 <_puts_r+0x9a>
 8024a5a:	4621      	mov	r1, r4
 8024a5c:	4628      	mov	r0, r5
 8024a5e:	f000 f8c5 	bl	8024bec <__swsetup_r>
 8024a62:	b380      	cbz	r0, 8024ac6 <_puts_r+0x9a>
 8024a64:	f04f 35ff 	mov.w	r5, #4294967295
 8024a68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8024a6a:	07da      	lsls	r2, r3, #31
 8024a6c:	d405      	bmi.n	8024a7a <_puts_r+0x4e>
 8024a6e:	89a3      	ldrh	r3, [r4, #12]
 8024a70:	059b      	lsls	r3, r3, #22
 8024a72:	d402      	bmi.n	8024a7a <_puts_r+0x4e>
 8024a74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8024a76:	f000 fa07 	bl	8024e88 <__retarget_lock_release_recursive>
 8024a7a:	4628      	mov	r0, r5
 8024a7c:	bd70      	pop	{r4, r5, r6, pc}
 8024a7e:	2b00      	cmp	r3, #0
 8024a80:	da04      	bge.n	8024a8c <_puts_r+0x60>
 8024a82:	69a2      	ldr	r2, [r4, #24]
 8024a84:	429a      	cmp	r2, r3
 8024a86:	dc17      	bgt.n	8024ab8 <_puts_r+0x8c>
 8024a88:	290a      	cmp	r1, #10
 8024a8a:	d015      	beq.n	8024ab8 <_puts_r+0x8c>
 8024a8c:	6823      	ldr	r3, [r4, #0]
 8024a8e:	1c5a      	adds	r2, r3, #1
 8024a90:	6022      	str	r2, [r4, #0]
 8024a92:	7019      	strb	r1, [r3, #0]
 8024a94:	68a3      	ldr	r3, [r4, #8]
 8024a96:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8024a9a:	3b01      	subs	r3, #1
 8024a9c:	60a3      	str	r3, [r4, #8]
 8024a9e:	2900      	cmp	r1, #0
 8024aa0:	d1ed      	bne.n	8024a7e <_puts_r+0x52>
 8024aa2:	2b00      	cmp	r3, #0
 8024aa4:	da11      	bge.n	8024aca <_puts_r+0x9e>
 8024aa6:	4622      	mov	r2, r4
 8024aa8:	210a      	movs	r1, #10
 8024aaa:	4628      	mov	r0, r5
 8024aac:	f000 f85f 	bl	8024b6e <__swbuf_r>
 8024ab0:	3001      	adds	r0, #1
 8024ab2:	d0d7      	beq.n	8024a64 <_puts_r+0x38>
 8024ab4:	250a      	movs	r5, #10
 8024ab6:	e7d7      	b.n	8024a68 <_puts_r+0x3c>
 8024ab8:	4622      	mov	r2, r4
 8024aba:	4628      	mov	r0, r5
 8024abc:	f000 f857 	bl	8024b6e <__swbuf_r>
 8024ac0:	3001      	adds	r0, #1
 8024ac2:	d1e7      	bne.n	8024a94 <_puts_r+0x68>
 8024ac4:	e7ce      	b.n	8024a64 <_puts_r+0x38>
 8024ac6:	3e01      	subs	r6, #1
 8024ac8:	e7e4      	b.n	8024a94 <_puts_r+0x68>
 8024aca:	6823      	ldr	r3, [r4, #0]
 8024acc:	1c5a      	adds	r2, r3, #1
 8024ace:	6022      	str	r2, [r4, #0]
 8024ad0:	220a      	movs	r2, #10
 8024ad2:	701a      	strb	r2, [r3, #0]
 8024ad4:	e7ee      	b.n	8024ab4 <_puts_r+0x88>
	...

08024ad8 <puts>:
 8024ad8:	4b02      	ldr	r3, [pc, #8]	@ (8024ae4 <puts+0xc>)
 8024ada:	4601      	mov	r1, r0
 8024adc:	6818      	ldr	r0, [r3, #0]
 8024ade:	f7ff bfa5 	b.w	8024a2c <_puts_r>
 8024ae2:	bf00      	nop
 8024ae4:	24000038 	.word	0x24000038

08024ae8 <__sread>:
 8024ae8:	b510      	push	{r4, lr}
 8024aea:	460c      	mov	r4, r1
 8024aec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024af0:	f000 f956 	bl	8024da0 <_read_r>
 8024af4:	2800      	cmp	r0, #0
 8024af6:	bfab      	itete	ge
 8024af8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8024afa:	89a3      	ldrhlt	r3, [r4, #12]
 8024afc:	181b      	addge	r3, r3, r0
 8024afe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8024b02:	bfac      	ite	ge
 8024b04:	6563      	strge	r3, [r4, #84]	@ 0x54
 8024b06:	81a3      	strhlt	r3, [r4, #12]
 8024b08:	bd10      	pop	{r4, pc}

08024b0a <__swrite>:
 8024b0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024b0e:	461f      	mov	r7, r3
 8024b10:	898b      	ldrh	r3, [r1, #12]
 8024b12:	05db      	lsls	r3, r3, #23
 8024b14:	4605      	mov	r5, r0
 8024b16:	460c      	mov	r4, r1
 8024b18:	4616      	mov	r6, r2
 8024b1a:	d505      	bpl.n	8024b28 <__swrite+0x1e>
 8024b1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024b20:	2302      	movs	r3, #2
 8024b22:	2200      	movs	r2, #0
 8024b24:	f000 f92a 	bl	8024d7c <_lseek_r>
 8024b28:	89a3      	ldrh	r3, [r4, #12]
 8024b2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024b2e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8024b32:	81a3      	strh	r3, [r4, #12]
 8024b34:	4632      	mov	r2, r6
 8024b36:	463b      	mov	r3, r7
 8024b38:	4628      	mov	r0, r5
 8024b3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024b3e:	f000 b965 	b.w	8024e0c <_write_r>

08024b42 <__sseek>:
 8024b42:	b510      	push	{r4, lr}
 8024b44:	460c      	mov	r4, r1
 8024b46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024b4a:	f000 f917 	bl	8024d7c <_lseek_r>
 8024b4e:	1c43      	adds	r3, r0, #1
 8024b50:	89a3      	ldrh	r3, [r4, #12]
 8024b52:	bf15      	itete	ne
 8024b54:	6560      	strne	r0, [r4, #84]	@ 0x54
 8024b56:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8024b5a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8024b5e:	81a3      	strheq	r3, [r4, #12]
 8024b60:	bf18      	it	ne
 8024b62:	81a3      	strhne	r3, [r4, #12]
 8024b64:	bd10      	pop	{r4, pc}

08024b66 <__sclose>:
 8024b66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024b6a:	f000 b8f7 	b.w	8024d5c <_close_r>

08024b6e <__swbuf_r>:
 8024b6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024b70:	460e      	mov	r6, r1
 8024b72:	4614      	mov	r4, r2
 8024b74:	4605      	mov	r5, r0
 8024b76:	b118      	cbz	r0, 8024b80 <__swbuf_r+0x12>
 8024b78:	6a03      	ldr	r3, [r0, #32]
 8024b7a:	b90b      	cbnz	r3, 8024b80 <__swbuf_r+0x12>
 8024b7c:	f7ff ff06 	bl	802498c <__sinit>
 8024b80:	69a3      	ldr	r3, [r4, #24]
 8024b82:	60a3      	str	r3, [r4, #8]
 8024b84:	89a3      	ldrh	r3, [r4, #12]
 8024b86:	071a      	lsls	r2, r3, #28
 8024b88:	d501      	bpl.n	8024b8e <__swbuf_r+0x20>
 8024b8a:	6923      	ldr	r3, [r4, #16]
 8024b8c:	b943      	cbnz	r3, 8024ba0 <__swbuf_r+0x32>
 8024b8e:	4621      	mov	r1, r4
 8024b90:	4628      	mov	r0, r5
 8024b92:	f000 f82b 	bl	8024bec <__swsetup_r>
 8024b96:	b118      	cbz	r0, 8024ba0 <__swbuf_r+0x32>
 8024b98:	f04f 37ff 	mov.w	r7, #4294967295
 8024b9c:	4638      	mov	r0, r7
 8024b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024ba0:	6823      	ldr	r3, [r4, #0]
 8024ba2:	6922      	ldr	r2, [r4, #16]
 8024ba4:	1a98      	subs	r0, r3, r2
 8024ba6:	6963      	ldr	r3, [r4, #20]
 8024ba8:	b2f6      	uxtb	r6, r6
 8024baa:	4283      	cmp	r3, r0
 8024bac:	4637      	mov	r7, r6
 8024bae:	dc05      	bgt.n	8024bbc <__swbuf_r+0x4e>
 8024bb0:	4621      	mov	r1, r4
 8024bb2:	4628      	mov	r0, r5
 8024bb4:	f000 fd1e 	bl	80255f4 <_fflush_r>
 8024bb8:	2800      	cmp	r0, #0
 8024bba:	d1ed      	bne.n	8024b98 <__swbuf_r+0x2a>
 8024bbc:	68a3      	ldr	r3, [r4, #8]
 8024bbe:	3b01      	subs	r3, #1
 8024bc0:	60a3      	str	r3, [r4, #8]
 8024bc2:	6823      	ldr	r3, [r4, #0]
 8024bc4:	1c5a      	adds	r2, r3, #1
 8024bc6:	6022      	str	r2, [r4, #0]
 8024bc8:	701e      	strb	r6, [r3, #0]
 8024bca:	6962      	ldr	r2, [r4, #20]
 8024bcc:	1c43      	adds	r3, r0, #1
 8024bce:	429a      	cmp	r2, r3
 8024bd0:	d004      	beq.n	8024bdc <__swbuf_r+0x6e>
 8024bd2:	89a3      	ldrh	r3, [r4, #12]
 8024bd4:	07db      	lsls	r3, r3, #31
 8024bd6:	d5e1      	bpl.n	8024b9c <__swbuf_r+0x2e>
 8024bd8:	2e0a      	cmp	r6, #10
 8024bda:	d1df      	bne.n	8024b9c <__swbuf_r+0x2e>
 8024bdc:	4621      	mov	r1, r4
 8024bde:	4628      	mov	r0, r5
 8024be0:	f000 fd08 	bl	80255f4 <_fflush_r>
 8024be4:	2800      	cmp	r0, #0
 8024be6:	d0d9      	beq.n	8024b9c <__swbuf_r+0x2e>
 8024be8:	e7d6      	b.n	8024b98 <__swbuf_r+0x2a>
	...

08024bec <__swsetup_r>:
 8024bec:	b538      	push	{r3, r4, r5, lr}
 8024bee:	4b29      	ldr	r3, [pc, #164]	@ (8024c94 <__swsetup_r+0xa8>)
 8024bf0:	4605      	mov	r5, r0
 8024bf2:	6818      	ldr	r0, [r3, #0]
 8024bf4:	460c      	mov	r4, r1
 8024bf6:	b118      	cbz	r0, 8024c00 <__swsetup_r+0x14>
 8024bf8:	6a03      	ldr	r3, [r0, #32]
 8024bfa:	b90b      	cbnz	r3, 8024c00 <__swsetup_r+0x14>
 8024bfc:	f7ff fec6 	bl	802498c <__sinit>
 8024c00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024c04:	0719      	lsls	r1, r3, #28
 8024c06:	d422      	bmi.n	8024c4e <__swsetup_r+0x62>
 8024c08:	06da      	lsls	r2, r3, #27
 8024c0a:	d407      	bmi.n	8024c1c <__swsetup_r+0x30>
 8024c0c:	2209      	movs	r2, #9
 8024c0e:	602a      	str	r2, [r5, #0]
 8024c10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8024c14:	81a3      	strh	r3, [r4, #12]
 8024c16:	f04f 30ff 	mov.w	r0, #4294967295
 8024c1a:	e033      	b.n	8024c84 <__swsetup_r+0x98>
 8024c1c:	0758      	lsls	r0, r3, #29
 8024c1e:	d512      	bpl.n	8024c46 <__swsetup_r+0x5a>
 8024c20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8024c22:	b141      	cbz	r1, 8024c36 <__swsetup_r+0x4a>
 8024c24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8024c28:	4299      	cmp	r1, r3
 8024c2a:	d002      	beq.n	8024c32 <__swsetup_r+0x46>
 8024c2c:	4628      	mov	r0, r5
 8024c2e:	f000 f93b 	bl	8024ea8 <_free_r>
 8024c32:	2300      	movs	r3, #0
 8024c34:	6363      	str	r3, [r4, #52]	@ 0x34
 8024c36:	89a3      	ldrh	r3, [r4, #12]
 8024c38:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8024c3c:	81a3      	strh	r3, [r4, #12]
 8024c3e:	2300      	movs	r3, #0
 8024c40:	6063      	str	r3, [r4, #4]
 8024c42:	6923      	ldr	r3, [r4, #16]
 8024c44:	6023      	str	r3, [r4, #0]
 8024c46:	89a3      	ldrh	r3, [r4, #12]
 8024c48:	f043 0308 	orr.w	r3, r3, #8
 8024c4c:	81a3      	strh	r3, [r4, #12]
 8024c4e:	6923      	ldr	r3, [r4, #16]
 8024c50:	b94b      	cbnz	r3, 8024c66 <__swsetup_r+0x7a>
 8024c52:	89a3      	ldrh	r3, [r4, #12]
 8024c54:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8024c58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8024c5c:	d003      	beq.n	8024c66 <__swsetup_r+0x7a>
 8024c5e:	4621      	mov	r1, r4
 8024c60:	4628      	mov	r0, r5
 8024c62:	f000 fd15 	bl	8025690 <__smakebuf_r>
 8024c66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024c6a:	f013 0201 	ands.w	r2, r3, #1
 8024c6e:	d00a      	beq.n	8024c86 <__swsetup_r+0x9a>
 8024c70:	2200      	movs	r2, #0
 8024c72:	60a2      	str	r2, [r4, #8]
 8024c74:	6962      	ldr	r2, [r4, #20]
 8024c76:	4252      	negs	r2, r2
 8024c78:	61a2      	str	r2, [r4, #24]
 8024c7a:	6922      	ldr	r2, [r4, #16]
 8024c7c:	b942      	cbnz	r2, 8024c90 <__swsetup_r+0xa4>
 8024c7e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8024c82:	d1c5      	bne.n	8024c10 <__swsetup_r+0x24>
 8024c84:	bd38      	pop	{r3, r4, r5, pc}
 8024c86:	0799      	lsls	r1, r3, #30
 8024c88:	bf58      	it	pl
 8024c8a:	6962      	ldrpl	r2, [r4, #20]
 8024c8c:	60a2      	str	r2, [r4, #8]
 8024c8e:	e7f4      	b.n	8024c7a <__swsetup_r+0x8e>
 8024c90:	2000      	movs	r0, #0
 8024c92:	e7f7      	b.n	8024c84 <__swsetup_r+0x98>
 8024c94:	24000038 	.word	0x24000038

08024c98 <memcmp>:
 8024c98:	b510      	push	{r4, lr}
 8024c9a:	3901      	subs	r1, #1
 8024c9c:	4402      	add	r2, r0
 8024c9e:	4290      	cmp	r0, r2
 8024ca0:	d101      	bne.n	8024ca6 <memcmp+0xe>
 8024ca2:	2000      	movs	r0, #0
 8024ca4:	e005      	b.n	8024cb2 <memcmp+0x1a>
 8024ca6:	7803      	ldrb	r3, [r0, #0]
 8024ca8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8024cac:	42a3      	cmp	r3, r4
 8024cae:	d001      	beq.n	8024cb4 <memcmp+0x1c>
 8024cb0:	1b18      	subs	r0, r3, r4
 8024cb2:	bd10      	pop	{r4, pc}
 8024cb4:	3001      	adds	r0, #1
 8024cb6:	e7f2      	b.n	8024c9e <memcmp+0x6>

08024cb8 <memmove>:
 8024cb8:	4288      	cmp	r0, r1
 8024cba:	b510      	push	{r4, lr}
 8024cbc:	eb01 0402 	add.w	r4, r1, r2
 8024cc0:	d902      	bls.n	8024cc8 <memmove+0x10>
 8024cc2:	4284      	cmp	r4, r0
 8024cc4:	4623      	mov	r3, r4
 8024cc6:	d807      	bhi.n	8024cd8 <memmove+0x20>
 8024cc8:	1e43      	subs	r3, r0, #1
 8024cca:	42a1      	cmp	r1, r4
 8024ccc:	d008      	beq.n	8024ce0 <memmove+0x28>
 8024cce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8024cd2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8024cd6:	e7f8      	b.n	8024cca <memmove+0x12>
 8024cd8:	4402      	add	r2, r0
 8024cda:	4601      	mov	r1, r0
 8024cdc:	428a      	cmp	r2, r1
 8024cde:	d100      	bne.n	8024ce2 <memmove+0x2a>
 8024ce0:	bd10      	pop	{r4, pc}
 8024ce2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8024ce6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8024cea:	e7f7      	b.n	8024cdc <memmove+0x24>

08024cec <memset>:
 8024cec:	4402      	add	r2, r0
 8024cee:	4603      	mov	r3, r0
 8024cf0:	4293      	cmp	r3, r2
 8024cf2:	d100      	bne.n	8024cf6 <memset+0xa>
 8024cf4:	4770      	bx	lr
 8024cf6:	f803 1b01 	strb.w	r1, [r3], #1
 8024cfa:	e7f9      	b.n	8024cf0 <memset+0x4>

08024cfc <_raise_r>:
 8024cfc:	291f      	cmp	r1, #31
 8024cfe:	b538      	push	{r3, r4, r5, lr}
 8024d00:	4605      	mov	r5, r0
 8024d02:	460c      	mov	r4, r1
 8024d04:	d904      	bls.n	8024d10 <_raise_r+0x14>
 8024d06:	2316      	movs	r3, #22
 8024d08:	6003      	str	r3, [r0, #0]
 8024d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8024d0e:	bd38      	pop	{r3, r4, r5, pc}
 8024d10:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8024d12:	b112      	cbz	r2, 8024d1a <_raise_r+0x1e>
 8024d14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8024d18:	b94b      	cbnz	r3, 8024d2e <_raise_r+0x32>
 8024d1a:	4628      	mov	r0, r5
 8024d1c:	f000 f864 	bl	8024de8 <_getpid_r>
 8024d20:	4622      	mov	r2, r4
 8024d22:	4601      	mov	r1, r0
 8024d24:	4628      	mov	r0, r5
 8024d26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024d2a:	f000 b84b 	b.w	8024dc4 <_kill_r>
 8024d2e:	2b01      	cmp	r3, #1
 8024d30:	d00a      	beq.n	8024d48 <_raise_r+0x4c>
 8024d32:	1c59      	adds	r1, r3, #1
 8024d34:	d103      	bne.n	8024d3e <_raise_r+0x42>
 8024d36:	2316      	movs	r3, #22
 8024d38:	6003      	str	r3, [r0, #0]
 8024d3a:	2001      	movs	r0, #1
 8024d3c:	e7e7      	b.n	8024d0e <_raise_r+0x12>
 8024d3e:	2100      	movs	r1, #0
 8024d40:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8024d44:	4620      	mov	r0, r4
 8024d46:	4798      	blx	r3
 8024d48:	2000      	movs	r0, #0
 8024d4a:	e7e0      	b.n	8024d0e <_raise_r+0x12>

08024d4c <raise>:
 8024d4c:	4b02      	ldr	r3, [pc, #8]	@ (8024d58 <raise+0xc>)
 8024d4e:	4601      	mov	r1, r0
 8024d50:	6818      	ldr	r0, [r3, #0]
 8024d52:	f7ff bfd3 	b.w	8024cfc <_raise_r>
 8024d56:	bf00      	nop
 8024d58:	24000038 	.word	0x24000038

08024d5c <_close_r>:
 8024d5c:	b538      	push	{r3, r4, r5, lr}
 8024d5e:	4d06      	ldr	r5, [pc, #24]	@ (8024d78 <_close_r+0x1c>)
 8024d60:	2300      	movs	r3, #0
 8024d62:	4604      	mov	r4, r0
 8024d64:	4608      	mov	r0, r1
 8024d66:	602b      	str	r3, [r5, #0]
 8024d68:	f7e8 fb7a 	bl	800d460 <_close>
 8024d6c:	1c43      	adds	r3, r0, #1
 8024d6e:	d102      	bne.n	8024d76 <_close_r+0x1a>
 8024d70:	682b      	ldr	r3, [r5, #0]
 8024d72:	b103      	cbz	r3, 8024d76 <_close_r+0x1a>
 8024d74:	6023      	str	r3, [r4, #0]
 8024d76:	bd38      	pop	{r3, r4, r5, pc}
 8024d78:	24000c04 	.word	0x24000c04

08024d7c <_lseek_r>:
 8024d7c:	b538      	push	{r3, r4, r5, lr}
 8024d7e:	4d07      	ldr	r5, [pc, #28]	@ (8024d9c <_lseek_r+0x20>)
 8024d80:	4604      	mov	r4, r0
 8024d82:	4608      	mov	r0, r1
 8024d84:	4611      	mov	r1, r2
 8024d86:	2200      	movs	r2, #0
 8024d88:	602a      	str	r2, [r5, #0]
 8024d8a:	461a      	mov	r2, r3
 8024d8c:	f7e8 fb8f 	bl	800d4ae <_lseek>
 8024d90:	1c43      	adds	r3, r0, #1
 8024d92:	d102      	bne.n	8024d9a <_lseek_r+0x1e>
 8024d94:	682b      	ldr	r3, [r5, #0]
 8024d96:	b103      	cbz	r3, 8024d9a <_lseek_r+0x1e>
 8024d98:	6023      	str	r3, [r4, #0]
 8024d9a:	bd38      	pop	{r3, r4, r5, pc}
 8024d9c:	24000c04 	.word	0x24000c04

08024da0 <_read_r>:
 8024da0:	b538      	push	{r3, r4, r5, lr}
 8024da2:	4d07      	ldr	r5, [pc, #28]	@ (8024dc0 <_read_r+0x20>)
 8024da4:	4604      	mov	r4, r0
 8024da6:	4608      	mov	r0, r1
 8024da8:	4611      	mov	r1, r2
 8024daa:	2200      	movs	r2, #0
 8024dac:	602a      	str	r2, [r5, #0]
 8024dae:	461a      	mov	r2, r3
 8024db0:	f7e8 fb1d 	bl	800d3ee <_read>
 8024db4:	1c43      	adds	r3, r0, #1
 8024db6:	d102      	bne.n	8024dbe <_read_r+0x1e>
 8024db8:	682b      	ldr	r3, [r5, #0]
 8024dba:	b103      	cbz	r3, 8024dbe <_read_r+0x1e>
 8024dbc:	6023      	str	r3, [r4, #0]
 8024dbe:	bd38      	pop	{r3, r4, r5, pc}
 8024dc0:	24000c04 	.word	0x24000c04

08024dc4 <_kill_r>:
 8024dc4:	b538      	push	{r3, r4, r5, lr}
 8024dc6:	4d07      	ldr	r5, [pc, #28]	@ (8024de4 <_kill_r+0x20>)
 8024dc8:	2300      	movs	r3, #0
 8024dca:	4604      	mov	r4, r0
 8024dcc:	4608      	mov	r0, r1
 8024dce:	4611      	mov	r1, r2
 8024dd0:	602b      	str	r3, [r5, #0]
 8024dd2:	f7e8 faf1 	bl	800d3b8 <_kill>
 8024dd6:	1c43      	adds	r3, r0, #1
 8024dd8:	d102      	bne.n	8024de0 <_kill_r+0x1c>
 8024dda:	682b      	ldr	r3, [r5, #0]
 8024ddc:	b103      	cbz	r3, 8024de0 <_kill_r+0x1c>
 8024dde:	6023      	str	r3, [r4, #0]
 8024de0:	bd38      	pop	{r3, r4, r5, pc}
 8024de2:	bf00      	nop
 8024de4:	24000c04 	.word	0x24000c04

08024de8 <_getpid_r>:
 8024de8:	f7e8 bade 	b.w	800d3a8 <_getpid>

08024dec <_sbrk_r>:
 8024dec:	b538      	push	{r3, r4, r5, lr}
 8024dee:	4d06      	ldr	r5, [pc, #24]	@ (8024e08 <_sbrk_r+0x1c>)
 8024df0:	2300      	movs	r3, #0
 8024df2:	4604      	mov	r4, r0
 8024df4:	4608      	mov	r0, r1
 8024df6:	602b      	str	r3, [r5, #0]
 8024df8:	f7e8 fb66 	bl	800d4c8 <_sbrk>
 8024dfc:	1c43      	adds	r3, r0, #1
 8024dfe:	d102      	bne.n	8024e06 <_sbrk_r+0x1a>
 8024e00:	682b      	ldr	r3, [r5, #0]
 8024e02:	b103      	cbz	r3, 8024e06 <_sbrk_r+0x1a>
 8024e04:	6023      	str	r3, [r4, #0]
 8024e06:	bd38      	pop	{r3, r4, r5, pc}
 8024e08:	24000c04 	.word	0x24000c04

08024e0c <_write_r>:
 8024e0c:	b538      	push	{r3, r4, r5, lr}
 8024e0e:	4d07      	ldr	r5, [pc, #28]	@ (8024e2c <_write_r+0x20>)
 8024e10:	4604      	mov	r4, r0
 8024e12:	4608      	mov	r0, r1
 8024e14:	4611      	mov	r1, r2
 8024e16:	2200      	movs	r2, #0
 8024e18:	602a      	str	r2, [r5, #0]
 8024e1a:	461a      	mov	r2, r3
 8024e1c:	f7e8 fb04 	bl	800d428 <_write>
 8024e20:	1c43      	adds	r3, r0, #1
 8024e22:	d102      	bne.n	8024e2a <_write_r+0x1e>
 8024e24:	682b      	ldr	r3, [r5, #0]
 8024e26:	b103      	cbz	r3, 8024e2a <_write_r+0x1e>
 8024e28:	6023      	str	r3, [r4, #0]
 8024e2a:	bd38      	pop	{r3, r4, r5, pc}
 8024e2c:	24000c04 	.word	0x24000c04

08024e30 <__errno>:
 8024e30:	4b01      	ldr	r3, [pc, #4]	@ (8024e38 <__errno+0x8>)
 8024e32:	6818      	ldr	r0, [r3, #0]
 8024e34:	4770      	bx	lr
 8024e36:	bf00      	nop
 8024e38:	24000038 	.word	0x24000038

08024e3c <__libc_init_array>:
 8024e3c:	b570      	push	{r4, r5, r6, lr}
 8024e3e:	4d0d      	ldr	r5, [pc, #52]	@ (8024e74 <__libc_init_array+0x38>)
 8024e40:	4c0d      	ldr	r4, [pc, #52]	@ (8024e78 <__libc_init_array+0x3c>)
 8024e42:	1b64      	subs	r4, r4, r5
 8024e44:	10a4      	asrs	r4, r4, #2
 8024e46:	2600      	movs	r6, #0
 8024e48:	42a6      	cmp	r6, r4
 8024e4a:	d109      	bne.n	8024e60 <__libc_init_array+0x24>
 8024e4c:	4d0b      	ldr	r5, [pc, #44]	@ (8024e7c <__libc_init_array+0x40>)
 8024e4e:	4c0c      	ldr	r4, [pc, #48]	@ (8024e80 <__libc_init_array+0x44>)
 8024e50:	f000 fcb0 	bl	80257b4 <_init>
 8024e54:	1b64      	subs	r4, r4, r5
 8024e56:	10a4      	asrs	r4, r4, #2
 8024e58:	2600      	movs	r6, #0
 8024e5a:	42a6      	cmp	r6, r4
 8024e5c:	d105      	bne.n	8024e6a <__libc_init_array+0x2e>
 8024e5e:	bd70      	pop	{r4, r5, r6, pc}
 8024e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8024e64:	4798      	blx	r3
 8024e66:	3601      	adds	r6, #1
 8024e68:	e7ee      	b.n	8024e48 <__libc_init_array+0xc>
 8024e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8024e6e:	4798      	blx	r3
 8024e70:	3601      	adds	r6, #1
 8024e72:	e7f2      	b.n	8024e5a <__libc_init_array+0x1e>
 8024e74:	08026d60 	.word	0x08026d60
 8024e78:	08026d60 	.word	0x08026d60
 8024e7c:	08026d60 	.word	0x08026d60
 8024e80:	08026d6c 	.word	0x08026d6c

08024e84 <__retarget_lock_init_recursive>:
 8024e84:	4770      	bx	lr

08024e86 <__retarget_lock_acquire_recursive>:
 8024e86:	4770      	bx	lr

08024e88 <__retarget_lock_release_recursive>:
 8024e88:	4770      	bx	lr

08024e8a <memcpy>:
 8024e8a:	440a      	add	r2, r1
 8024e8c:	4291      	cmp	r1, r2
 8024e8e:	f100 33ff 	add.w	r3, r0, #4294967295
 8024e92:	d100      	bne.n	8024e96 <memcpy+0xc>
 8024e94:	4770      	bx	lr
 8024e96:	b510      	push	{r4, lr}
 8024e98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8024e9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8024ea0:	4291      	cmp	r1, r2
 8024ea2:	d1f9      	bne.n	8024e98 <memcpy+0xe>
 8024ea4:	bd10      	pop	{r4, pc}
	...

08024ea8 <_free_r>:
 8024ea8:	b538      	push	{r3, r4, r5, lr}
 8024eaa:	4605      	mov	r5, r0
 8024eac:	2900      	cmp	r1, #0
 8024eae:	d041      	beq.n	8024f34 <_free_r+0x8c>
 8024eb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8024eb4:	1f0c      	subs	r4, r1, #4
 8024eb6:	2b00      	cmp	r3, #0
 8024eb8:	bfb8      	it	lt
 8024eba:	18e4      	addlt	r4, r4, r3
 8024ebc:	f7ff fc14 	bl	80246e8 <__malloc_lock>
 8024ec0:	4a1d      	ldr	r2, [pc, #116]	@ (8024f38 <_free_r+0x90>)
 8024ec2:	6813      	ldr	r3, [r2, #0]
 8024ec4:	b933      	cbnz	r3, 8024ed4 <_free_r+0x2c>
 8024ec6:	6063      	str	r3, [r4, #4]
 8024ec8:	6014      	str	r4, [r2, #0]
 8024eca:	4628      	mov	r0, r5
 8024ecc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024ed0:	f7ff bc10 	b.w	80246f4 <__malloc_unlock>
 8024ed4:	42a3      	cmp	r3, r4
 8024ed6:	d908      	bls.n	8024eea <_free_r+0x42>
 8024ed8:	6820      	ldr	r0, [r4, #0]
 8024eda:	1821      	adds	r1, r4, r0
 8024edc:	428b      	cmp	r3, r1
 8024ede:	bf01      	itttt	eq
 8024ee0:	6819      	ldreq	r1, [r3, #0]
 8024ee2:	685b      	ldreq	r3, [r3, #4]
 8024ee4:	1809      	addeq	r1, r1, r0
 8024ee6:	6021      	streq	r1, [r4, #0]
 8024ee8:	e7ed      	b.n	8024ec6 <_free_r+0x1e>
 8024eea:	461a      	mov	r2, r3
 8024eec:	685b      	ldr	r3, [r3, #4]
 8024eee:	b10b      	cbz	r3, 8024ef4 <_free_r+0x4c>
 8024ef0:	42a3      	cmp	r3, r4
 8024ef2:	d9fa      	bls.n	8024eea <_free_r+0x42>
 8024ef4:	6811      	ldr	r1, [r2, #0]
 8024ef6:	1850      	adds	r0, r2, r1
 8024ef8:	42a0      	cmp	r0, r4
 8024efa:	d10b      	bne.n	8024f14 <_free_r+0x6c>
 8024efc:	6820      	ldr	r0, [r4, #0]
 8024efe:	4401      	add	r1, r0
 8024f00:	1850      	adds	r0, r2, r1
 8024f02:	4283      	cmp	r3, r0
 8024f04:	6011      	str	r1, [r2, #0]
 8024f06:	d1e0      	bne.n	8024eca <_free_r+0x22>
 8024f08:	6818      	ldr	r0, [r3, #0]
 8024f0a:	685b      	ldr	r3, [r3, #4]
 8024f0c:	6053      	str	r3, [r2, #4]
 8024f0e:	4408      	add	r0, r1
 8024f10:	6010      	str	r0, [r2, #0]
 8024f12:	e7da      	b.n	8024eca <_free_r+0x22>
 8024f14:	d902      	bls.n	8024f1c <_free_r+0x74>
 8024f16:	230c      	movs	r3, #12
 8024f18:	602b      	str	r3, [r5, #0]
 8024f1a:	e7d6      	b.n	8024eca <_free_r+0x22>
 8024f1c:	6820      	ldr	r0, [r4, #0]
 8024f1e:	1821      	adds	r1, r4, r0
 8024f20:	428b      	cmp	r3, r1
 8024f22:	bf04      	itt	eq
 8024f24:	6819      	ldreq	r1, [r3, #0]
 8024f26:	685b      	ldreq	r3, [r3, #4]
 8024f28:	6063      	str	r3, [r4, #4]
 8024f2a:	bf04      	itt	eq
 8024f2c:	1809      	addeq	r1, r1, r0
 8024f2e:	6021      	streq	r1, [r4, #0]
 8024f30:	6054      	str	r4, [r2, #4]
 8024f32:	e7ca      	b.n	8024eca <_free_r+0x22>
 8024f34:	bd38      	pop	{r3, r4, r5, pc}
 8024f36:	bf00      	nop
 8024f38:	24000ac4 	.word	0x24000ac4

08024f3c <_malloc_usable_size_r>:
 8024f3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8024f40:	1f18      	subs	r0, r3, #4
 8024f42:	2b00      	cmp	r3, #0
 8024f44:	bfbc      	itt	lt
 8024f46:	580b      	ldrlt	r3, [r1, r0]
 8024f48:	18c0      	addlt	r0, r0, r3
 8024f4a:	4770      	bx	lr

08024f4c <__sfputc_r>:
 8024f4c:	6893      	ldr	r3, [r2, #8]
 8024f4e:	3b01      	subs	r3, #1
 8024f50:	2b00      	cmp	r3, #0
 8024f52:	b410      	push	{r4}
 8024f54:	6093      	str	r3, [r2, #8]
 8024f56:	da08      	bge.n	8024f6a <__sfputc_r+0x1e>
 8024f58:	6994      	ldr	r4, [r2, #24]
 8024f5a:	42a3      	cmp	r3, r4
 8024f5c:	db01      	blt.n	8024f62 <__sfputc_r+0x16>
 8024f5e:	290a      	cmp	r1, #10
 8024f60:	d103      	bne.n	8024f6a <__sfputc_r+0x1e>
 8024f62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024f66:	f7ff be02 	b.w	8024b6e <__swbuf_r>
 8024f6a:	6813      	ldr	r3, [r2, #0]
 8024f6c:	1c58      	adds	r0, r3, #1
 8024f6e:	6010      	str	r0, [r2, #0]
 8024f70:	7019      	strb	r1, [r3, #0]
 8024f72:	4608      	mov	r0, r1
 8024f74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024f78:	4770      	bx	lr

08024f7a <__sfputs_r>:
 8024f7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024f7c:	4606      	mov	r6, r0
 8024f7e:	460f      	mov	r7, r1
 8024f80:	4614      	mov	r4, r2
 8024f82:	18d5      	adds	r5, r2, r3
 8024f84:	42ac      	cmp	r4, r5
 8024f86:	d101      	bne.n	8024f8c <__sfputs_r+0x12>
 8024f88:	2000      	movs	r0, #0
 8024f8a:	e007      	b.n	8024f9c <__sfputs_r+0x22>
 8024f8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024f90:	463a      	mov	r2, r7
 8024f92:	4630      	mov	r0, r6
 8024f94:	f7ff ffda 	bl	8024f4c <__sfputc_r>
 8024f98:	1c43      	adds	r3, r0, #1
 8024f9a:	d1f3      	bne.n	8024f84 <__sfputs_r+0xa>
 8024f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08024fa0 <_vfiprintf_r>:
 8024fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024fa4:	460d      	mov	r5, r1
 8024fa6:	b09d      	sub	sp, #116	@ 0x74
 8024fa8:	4614      	mov	r4, r2
 8024faa:	4698      	mov	r8, r3
 8024fac:	4606      	mov	r6, r0
 8024fae:	b118      	cbz	r0, 8024fb8 <_vfiprintf_r+0x18>
 8024fb0:	6a03      	ldr	r3, [r0, #32]
 8024fb2:	b90b      	cbnz	r3, 8024fb8 <_vfiprintf_r+0x18>
 8024fb4:	f7ff fcea 	bl	802498c <__sinit>
 8024fb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8024fba:	07d9      	lsls	r1, r3, #31
 8024fbc:	d405      	bmi.n	8024fca <_vfiprintf_r+0x2a>
 8024fbe:	89ab      	ldrh	r3, [r5, #12]
 8024fc0:	059a      	lsls	r2, r3, #22
 8024fc2:	d402      	bmi.n	8024fca <_vfiprintf_r+0x2a>
 8024fc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8024fc6:	f7ff ff5e 	bl	8024e86 <__retarget_lock_acquire_recursive>
 8024fca:	89ab      	ldrh	r3, [r5, #12]
 8024fcc:	071b      	lsls	r3, r3, #28
 8024fce:	d501      	bpl.n	8024fd4 <_vfiprintf_r+0x34>
 8024fd0:	692b      	ldr	r3, [r5, #16]
 8024fd2:	b99b      	cbnz	r3, 8024ffc <_vfiprintf_r+0x5c>
 8024fd4:	4629      	mov	r1, r5
 8024fd6:	4630      	mov	r0, r6
 8024fd8:	f7ff fe08 	bl	8024bec <__swsetup_r>
 8024fdc:	b170      	cbz	r0, 8024ffc <_vfiprintf_r+0x5c>
 8024fde:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8024fe0:	07dc      	lsls	r4, r3, #31
 8024fe2:	d504      	bpl.n	8024fee <_vfiprintf_r+0x4e>
 8024fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8024fe8:	b01d      	add	sp, #116	@ 0x74
 8024fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024fee:	89ab      	ldrh	r3, [r5, #12]
 8024ff0:	0598      	lsls	r0, r3, #22
 8024ff2:	d4f7      	bmi.n	8024fe4 <_vfiprintf_r+0x44>
 8024ff4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8024ff6:	f7ff ff47 	bl	8024e88 <__retarget_lock_release_recursive>
 8024ffa:	e7f3      	b.n	8024fe4 <_vfiprintf_r+0x44>
 8024ffc:	2300      	movs	r3, #0
 8024ffe:	9309      	str	r3, [sp, #36]	@ 0x24
 8025000:	2320      	movs	r3, #32
 8025002:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8025006:	f8cd 800c 	str.w	r8, [sp, #12]
 802500a:	2330      	movs	r3, #48	@ 0x30
 802500c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80251bc <_vfiprintf_r+0x21c>
 8025010:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8025014:	f04f 0901 	mov.w	r9, #1
 8025018:	4623      	mov	r3, r4
 802501a:	469a      	mov	sl, r3
 802501c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8025020:	b10a      	cbz	r2, 8025026 <_vfiprintf_r+0x86>
 8025022:	2a25      	cmp	r2, #37	@ 0x25
 8025024:	d1f9      	bne.n	802501a <_vfiprintf_r+0x7a>
 8025026:	ebba 0b04 	subs.w	fp, sl, r4
 802502a:	d00b      	beq.n	8025044 <_vfiprintf_r+0xa4>
 802502c:	465b      	mov	r3, fp
 802502e:	4622      	mov	r2, r4
 8025030:	4629      	mov	r1, r5
 8025032:	4630      	mov	r0, r6
 8025034:	f7ff ffa1 	bl	8024f7a <__sfputs_r>
 8025038:	3001      	adds	r0, #1
 802503a:	f000 80a7 	beq.w	802518c <_vfiprintf_r+0x1ec>
 802503e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025040:	445a      	add	r2, fp
 8025042:	9209      	str	r2, [sp, #36]	@ 0x24
 8025044:	f89a 3000 	ldrb.w	r3, [sl]
 8025048:	2b00      	cmp	r3, #0
 802504a:	f000 809f 	beq.w	802518c <_vfiprintf_r+0x1ec>
 802504e:	2300      	movs	r3, #0
 8025050:	f04f 32ff 	mov.w	r2, #4294967295
 8025054:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8025058:	f10a 0a01 	add.w	sl, sl, #1
 802505c:	9304      	str	r3, [sp, #16]
 802505e:	9307      	str	r3, [sp, #28]
 8025060:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8025064:	931a      	str	r3, [sp, #104]	@ 0x68
 8025066:	4654      	mov	r4, sl
 8025068:	2205      	movs	r2, #5
 802506a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802506e:	4853      	ldr	r0, [pc, #332]	@ (80251bc <_vfiprintf_r+0x21c>)
 8025070:	f7db f946 	bl	8000300 <memchr>
 8025074:	9a04      	ldr	r2, [sp, #16]
 8025076:	b9d8      	cbnz	r0, 80250b0 <_vfiprintf_r+0x110>
 8025078:	06d1      	lsls	r1, r2, #27
 802507a:	bf44      	itt	mi
 802507c:	2320      	movmi	r3, #32
 802507e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8025082:	0713      	lsls	r3, r2, #28
 8025084:	bf44      	itt	mi
 8025086:	232b      	movmi	r3, #43	@ 0x2b
 8025088:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802508c:	f89a 3000 	ldrb.w	r3, [sl]
 8025090:	2b2a      	cmp	r3, #42	@ 0x2a
 8025092:	d015      	beq.n	80250c0 <_vfiprintf_r+0x120>
 8025094:	9a07      	ldr	r2, [sp, #28]
 8025096:	4654      	mov	r4, sl
 8025098:	2000      	movs	r0, #0
 802509a:	f04f 0c0a 	mov.w	ip, #10
 802509e:	4621      	mov	r1, r4
 80250a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80250a4:	3b30      	subs	r3, #48	@ 0x30
 80250a6:	2b09      	cmp	r3, #9
 80250a8:	d94b      	bls.n	8025142 <_vfiprintf_r+0x1a2>
 80250aa:	b1b0      	cbz	r0, 80250da <_vfiprintf_r+0x13a>
 80250ac:	9207      	str	r2, [sp, #28]
 80250ae:	e014      	b.n	80250da <_vfiprintf_r+0x13a>
 80250b0:	eba0 0308 	sub.w	r3, r0, r8
 80250b4:	fa09 f303 	lsl.w	r3, r9, r3
 80250b8:	4313      	orrs	r3, r2
 80250ba:	9304      	str	r3, [sp, #16]
 80250bc:	46a2      	mov	sl, r4
 80250be:	e7d2      	b.n	8025066 <_vfiprintf_r+0xc6>
 80250c0:	9b03      	ldr	r3, [sp, #12]
 80250c2:	1d19      	adds	r1, r3, #4
 80250c4:	681b      	ldr	r3, [r3, #0]
 80250c6:	9103      	str	r1, [sp, #12]
 80250c8:	2b00      	cmp	r3, #0
 80250ca:	bfbb      	ittet	lt
 80250cc:	425b      	neglt	r3, r3
 80250ce:	f042 0202 	orrlt.w	r2, r2, #2
 80250d2:	9307      	strge	r3, [sp, #28]
 80250d4:	9307      	strlt	r3, [sp, #28]
 80250d6:	bfb8      	it	lt
 80250d8:	9204      	strlt	r2, [sp, #16]
 80250da:	7823      	ldrb	r3, [r4, #0]
 80250dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80250de:	d10a      	bne.n	80250f6 <_vfiprintf_r+0x156>
 80250e0:	7863      	ldrb	r3, [r4, #1]
 80250e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80250e4:	d132      	bne.n	802514c <_vfiprintf_r+0x1ac>
 80250e6:	9b03      	ldr	r3, [sp, #12]
 80250e8:	1d1a      	adds	r2, r3, #4
 80250ea:	681b      	ldr	r3, [r3, #0]
 80250ec:	9203      	str	r2, [sp, #12]
 80250ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80250f2:	3402      	adds	r4, #2
 80250f4:	9305      	str	r3, [sp, #20]
 80250f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80251cc <_vfiprintf_r+0x22c>
 80250fa:	7821      	ldrb	r1, [r4, #0]
 80250fc:	2203      	movs	r2, #3
 80250fe:	4650      	mov	r0, sl
 8025100:	f7db f8fe 	bl	8000300 <memchr>
 8025104:	b138      	cbz	r0, 8025116 <_vfiprintf_r+0x176>
 8025106:	9b04      	ldr	r3, [sp, #16]
 8025108:	eba0 000a 	sub.w	r0, r0, sl
 802510c:	2240      	movs	r2, #64	@ 0x40
 802510e:	4082      	lsls	r2, r0
 8025110:	4313      	orrs	r3, r2
 8025112:	3401      	adds	r4, #1
 8025114:	9304      	str	r3, [sp, #16]
 8025116:	f814 1b01 	ldrb.w	r1, [r4], #1
 802511a:	4829      	ldr	r0, [pc, #164]	@ (80251c0 <_vfiprintf_r+0x220>)
 802511c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8025120:	2206      	movs	r2, #6
 8025122:	f7db f8ed 	bl	8000300 <memchr>
 8025126:	2800      	cmp	r0, #0
 8025128:	d03f      	beq.n	80251aa <_vfiprintf_r+0x20a>
 802512a:	4b26      	ldr	r3, [pc, #152]	@ (80251c4 <_vfiprintf_r+0x224>)
 802512c:	bb1b      	cbnz	r3, 8025176 <_vfiprintf_r+0x1d6>
 802512e:	9b03      	ldr	r3, [sp, #12]
 8025130:	3307      	adds	r3, #7
 8025132:	f023 0307 	bic.w	r3, r3, #7
 8025136:	3308      	adds	r3, #8
 8025138:	9303      	str	r3, [sp, #12]
 802513a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802513c:	443b      	add	r3, r7
 802513e:	9309      	str	r3, [sp, #36]	@ 0x24
 8025140:	e76a      	b.n	8025018 <_vfiprintf_r+0x78>
 8025142:	fb0c 3202 	mla	r2, ip, r2, r3
 8025146:	460c      	mov	r4, r1
 8025148:	2001      	movs	r0, #1
 802514a:	e7a8      	b.n	802509e <_vfiprintf_r+0xfe>
 802514c:	2300      	movs	r3, #0
 802514e:	3401      	adds	r4, #1
 8025150:	9305      	str	r3, [sp, #20]
 8025152:	4619      	mov	r1, r3
 8025154:	f04f 0c0a 	mov.w	ip, #10
 8025158:	4620      	mov	r0, r4
 802515a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802515e:	3a30      	subs	r2, #48	@ 0x30
 8025160:	2a09      	cmp	r2, #9
 8025162:	d903      	bls.n	802516c <_vfiprintf_r+0x1cc>
 8025164:	2b00      	cmp	r3, #0
 8025166:	d0c6      	beq.n	80250f6 <_vfiprintf_r+0x156>
 8025168:	9105      	str	r1, [sp, #20]
 802516a:	e7c4      	b.n	80250f6 <_vfiprintf_r+0x156>
 802516c:	fb0c 2101 	mla	r1, ip, r1, r2
 8025170:	4604      	mov	r4, r0
 8025172:	2301      	movs	r3, #1
 8025174:	e7f0      	b.n	8025158 <_vfiprintf_r+0x1b8>
 8025176:	ab03      	add	r3, sp, #12
 8025178:	9300      	str	r3, [sp, #0]
 802517a:	462a      	mov	r2, r5
 802517c:	4b12      	ldr	r3, [pc, #72]	@ (80251c8 <_vfiprintf_r+0x228>)
 802517e:	a904      	add	r1, sp, #16
 8025180:	4630      	mov	r0, r6
 8025182:	f3af 8000 	nop.w
 8025186:	4607      	mov	r7, r0
 8025188:	1c78      	adds	r0, r7, #1
 802518a:	d1d6      	bne.n	802513a <_vfiprintf_r+0x19a>
 802518c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802518e:	07d9      	lsls	r1, r3, #31
 8025190:	d405      	bmi.n	802519e <_vfiprintf_r+0x1fe>
 8025192:	89ab      	ldrh	r3, [r5, #12]
 8025194:	059a      	lsls	r2, r3, #22
 8025196:	d402      	bmi.n	802519e <_vfiprintf_r+0x1fe>
 8025198:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802519a:	f7ff fe75 	bl	8024e88 <__retarget_lock_release_recursive>
 802519e:	89ab      	ldrh	r3, [r5, #12]
 80251a0:	065b      	lsls	r3, r3, #25
 80251a2:	f53f af1f 	bmi.w	8024fe4 <_vfiprintf_r+0x44>
 80251a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80251a8:	e71e      	b.n	8024fe8 <_vfiprintf_r+0x48>
 80251aa:	ab03      	add	r3, sp, #12
 80251ac:	9300      	str	r3, [sp, #0]
 80251ae:	462a      	mov	r2, r5
 80251b0:	4b05      	ldr	r3, [pc, #20]	@ (80251c8 <_vfiprintf_r+0x228>)
 80251b2:	a904      	add	r1, sp, #16
 80251b4:	4630      	mov	r0, r6
 80251b6:	f000 f879 	bl	80252ac <_printf_i>
 80251ba:	e7e4      	b.n	8025186 <_vfiprintf_r+0x1e6>
 80251bc:	08026d25 	.word	0x08026d25
 80251c0:	08026d2f 	.word	0x08026d2f
 80251c4:	00000000 	.word	0x00000000
 80251c8:	08024f7b 	.word	0x08024f7b
 80251cc:	08026d2b 	.word	0x08026d2b

080251d0 <_printf_common>:
 80251d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80251d4:	4616      	mov	r6, r2
 80251d6:	4698      	mov	r8, r3
 80251d8:	688a      	ldr	r2, [r1, #8]
 80251da:	690b      	ldr	r3, [r1, #16]
 80251dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80251e0:	4293      	cmp	r3, r2
 80251e2:	bfb8      	it	lt
 80251e4:	4613      	movlt	r3, r2
 80251e6:	6033      	str	r3, [r6, #0]
 80251e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80251ec:	4607      	mov	r7, r0
 80251ee:	460c      	mov	r4, r1
 80251f0:	b10a      	cbz	r2, 80251f6 <_printf_common+0x26>
 80251f2:	3301      	adds	r3, #1
 80251f4:	6033      	str	r3, [r6, #0]
 80251f6:	6823      	ldr	r3, [r4, #0]
 80251f8:	0699      	lsls	r1, r3, #26
 80251fa:	bf42      	ittt	mi
 80251fc:	6833      	ldrmi	r3, [r6, #0]
 80251fe:	3302      	addmi	r3, #2
 8025200:	6033      	strmi	r3, [r6, #0]
 8025202:	6825      	ldr	r5, [r4, #0]
 8025204:	f015 0506 	ands.w	r5, r5, #6
 8025208:	d106      	bne.n	8025218 <_printf_common+0x48>
 802520a:	f104 0a19 	add.w	sl, r4, #25
 802520e:	68e3      	ldr	r3, [r4, #12]
 8025210:	6832      	ldr	r2, [r6, #0]
 8025212:	1a9b      	subs	r3, r3, r2
 8025214:	42ab      	cmp	r3, r5
 8025216:	dc26      	bgt.n	8025266 <_printf_common+0x96>
 8025218:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 802521c:	6822      	ldr	r2, [r4, #0]
 802521e:	3b00      	subs	r3, #0
 8025220:	bf18      	it	ne
 8025222:	2301      	movne	r3, #1
 8025224:	0692      	lsls	r2, r2, #26
 8025226:	d42b      	bmi.n	8025280 <_printf_common+0xb0>
 8025228:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 802522c:	4641      	mov	r1, r8
 802522e:	4638      	mov	r0, r7
 8025230:	47c8      	blx	r9
 8025232:	3001      	adds	r0, #1
 8025234:	d01e      	beq.n	8025274 <_printf_common+0xa4>
 8025236:	6823      	ldr	r3, [r4, #0]
 8025238:	6922      	ldr	r2, [r4, #16]
 802523a:	f003 0306 	and.w	r3, r3, #6
 802523e:	2b04      	cmp	r3, #4
 8025240:	bf02      	ittt	eq
 8025242:	68e5      	ldreq	r5, [r4, #12]
 8025244:	6833      	ldreq	r3, [r6, #0]
 8025246:	1aed      	subeq	r5, r5, r3
 8025248:	68a3      	ldr	r3, [r4, #8]
 802524a:	bf0c      	ite	eq
 802524c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8025250:	2500      	movne	r5, #0
 8025252:	4293      	cmp	r3, r2
 8025254:	bfc4      	itt	gt
 8025256:	1a9b      	subgt	r3, r3, r2
 8025258:	18ed      	addgt	r5, r5, r3
 802525a:	2600      	movs	r6, #0
 802525c:	341a      	adds	r4, #26
 802525e:	42b5      	cmp	r5, r6
 8025260:	d11a      	bne.n	8025298 <_printf_common+0xc8>
 8025262:	2000      	movs	r0, #0
 8025264:	e008      	b.n	8025278 <_printf_common+0xa8>
 8025266:	2301      	movs	r3, #1
 8025268:	4652      	mov	r2, sl
 802526a:	4641      	mov	r1, r8
 802526c:	4638      	mov	r0, r7
 802526e:	47c8      	blx	r9
 8025270:	3001      	adds	r0, #1
 8025272:	d103      	bne.n	802527c <_printf_common+0xac>
 8025274:	f04f 30ff 	mov.w	r0, #4294967295
 8025278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802527c:	3501      	adds	r5, #1
 802527e:	e7c6      	b.n	802520e <_printf_common+0x3e>
 8025280:	18e1      	adds	r1, r4, r3
 8025282:	1c5a      	adds	r2, r3, #1
 8025284:	2030      	movs	r0, #48	@ 0x30
 8025286:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 802528a:	4422      	add	r2, r4
 802528c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8025290:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8025294:	3302      	adds	r3, #2
 8025296:	e7c7      	b.n	8025228 <_printf_common+0x58>
 8025298:	2301      	movs	r3, #1
 802529a:	4622      	mov	r2, r4
 802529c:	4641      	mov	r1, r8
 802529e:	4638      	mov	r0, r7
 80252a0:	47c8      	blx	r9
 80252a2:	3001      	adds	r0, #1
 80252a4:	d0e6      	beq.n	8025274 <_printf_common+0xa4>
 80252a6:	3601      	adds	r6, #1
 80252a8:	e7d9      	b.n	802525e <_printf_common+0x8e>
	...

080252ac <_printf_i>:
 80252ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80252b0:	7e0f      	ldrb	r7, [r1, #24]
 80252b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80252b4:	2f78      	cmp	r7, #120	@ 0x78
 80252b6:	4691      	mov	r9, r2
 80252b8:	4680      	mov	r8, r0
 80252ba:	460c      	mov	r4, r1
 80252bc:	469a      	mov	sl, r3
 80252be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80252c2:	d807      	bhi.n	80252d4 <_printf_i+0x28>
 80252c4:	2f62      	cmp	r7, #98	@ 0x62
 80252c6:	d80a      	bhi.n	80252de <_printf_i+0x32>
 80252c8:	2f00      	cmp	r7, #0
 80252ca:	f000 80d2 	beq.w	8025472 <_printf_i+0x1c6>
 80252ce:	2f58      	cmp	r7, #88	@ 0x58
 80252d0:	f000 80b9 	beq.w	8025446 <_printf_i+0x19a>
 80252d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80252d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80252dc:	e03a      	b.n	8025354 <_printf_i+0xa8>
 80252de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80252e2:	2b15      	cmp	r3, #21
 80252e4:	d8f6      	bhi.n	80252d4 <_printf_i+0x28>
 80252e6:	a101      	add	r1, pc, #4	@ (adr r1, 80252ec <_printf_i+0x40>)
 80252e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80252ec:	08025345 	.word	0x08025345
 80252f0:	08025359 	.word	0x08025359
 80252f4:	080252d5 	.word	0x080252d5
 80252f8:	080252d5 	.word	0x080252d5
 80252fc:	080252d5 	.word	0x080252d5
 8025300:	080252d5 	.word	0x080252d5
 8025304:	08025359 	.word	0x08025359
 8025308:	080252d5 	.word	0x080252d5
 802530c:	080252d5 	.word	0x080252d5
 8025310:	080252d5 	.word	0x080252d5
 8025314:	080252d5 	.word	0x080252d5
 8025318:	08025459 	.word	0x08025459
 802531c:	08025383 	.word	0x08025383
 8025320:	08025413 	.word	0x08025413
 8025324:	080252d5 	.word	0x080252d5
 8025328:	080252d5 	.word	0x080252d5
 802532c:	0802547b 	.word	0x0802547b
 8025330:	080252d5 	.word	0x080252d5
 8025334:	08025383 	.word	0x08025383
 8025338:	080252d5 	.word	0x080252d5
 802533c:	080252d5 	.word	0x080252d5
 8025340:	0802541b 	.word	0x0802541b
 8025344:	6833      	ldr	r3, [r6, #0]
 8025346:	1d1a      	adds	r2, r3, #4
 8025348:	681b      	ldr	r3, [r3, #0]
 802534a:	6032      	str	r2, [r6, #0]
 802534c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8025350:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8025354:	2301      	movs	r3, #1
 8025356:	e09d      	b.n	8025494 <_printf_i+0x1e8>
 8025358:	6833      	ldr	r3, [r6, #0]
 802535a:	6820      	ldr	r0, [r4, #0]
 802535c:	1d19      	adds	r1, r3, #4
 802535e:	6031      	str	r1, [r6, #0]
 8025360:	0606      	lsls	r6, r0, #24
 8025362:	d501      	bpl.n	8025368 <_printf_i+0xbc>
 8025364:	681d      	ldr	r5, [r3, #0]
 8025366:	e003      	b.n	8025370 <_printf_i+0xc4>
 8025368:	0645      	lsls	r5, r0, #25
 802536a:	d5fb      	bpl.n	8025364 <_printf_i+0xb8>
 802536c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8025370:	2d00      	cmp	r5, #0
 8025372:	da03      	bge.n	802537c <_printf_i+0xd0>
 8025374:	232d      	movs	r3, #45	@ 0x2d
 8025376:	426d      	negs	r5, r5
 8025378:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802537c:	4859      	ldr	r0, [pc, #356]	@ (80254e4 <_printf_i+0x238>)
 802537e:	230a      	movs	r3, #10
 8025380:	e011      	b.n	80253a6 <_printf_i+0xfa>
 8025382:	6821      	ldr	r1, [r4, #0]
 8025384:	6833      	ldr	r3, [r6, #0]
 8025386:	0608      	lsls	r0, r1, #24
 8025388:	f853 5b04 	ldr.w	r5, [r3], #4
 802538c:	d402      	bmi.n	8025394 <_printf_i+0xe8>
 802538e:	0649      	lsls	r1, r1, #25
 8025390:	bf48      	it	mi
 8025392:	b2ad      	uxthmi	r5, r5
 8025394:	2f6f      	cmp	r7, #111	@ 0x6f
 8025396:	4853      	ldr	r0, [pc, #332]	@ (80254e4 <_printf_i+0x238>)
 8025398:	6033      	str	r3, [r6, #0]
 802539a:	bf14      	ite	ne
 802539c:	230a      	movne	r3, #10
 802539e:	2308      	moveq	r3, #8
 80253a0:	2100      	movs	r1, #0
 80253a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80253a6:	6866      	ldr	r6, [r4, #4]
 80253a8:	60a6      	str	r6, [r4, #8]
 80253aa:	2e00      	cmp	r6, #0
 80253ac:	bfa2      	ittt	ge
 80253ae:	6821      	ldrge	r1, [r4, #0]
 80253b0:	f021 0104 	bicge.w	r1, r1, #4
 80253b4:	6021      	strge	r1, [r4, #0]
 80253b6:	b90d      	cbnz	r5, 80253bc <_printf_i+0x110>
 80253b8:	2e00      	cmp	r6, #0
 80253ba:	d04b      	beq.n	8025454 <_printf_i+0x1a8>
 80253bc:	4616      	mov	r6, r2
 80253be:	fbb5 f1f3 	udiv	r1, r5, r3
 80253c2:	fb03 5711 	mls	r7, r3, r1, r5
 80253c6:	5dc7      	ldrb	r7, [r0, r7]
 80253c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80253cc:	462f      	mov	r7, r5
 80253ce:	42bb      	cmp	r3, r7
 80253d0:	460d      	mov	r5, r1
 80253d2:	d9f4      	bls.n	80253be <_printf_i+0x112>
 80253d4:	2b08      	cmp	r3, #8
 80253d6:	d10b      	bne.n	80253f0 <_printf_i+0x144>
 80253d8:	6823      	ldr	r3, [r4, #0]
 80253da:	07df      	lsls	r7, r3, #31
 80253dc:	d508      	bpl.n	80253f0 <_printf_i+0x144>
 80253de:	6923      	ldr	r3, [r4, #16]
 80253e0:	6861      	ldr	r1, [r4, #4]
 80253e2:	4299      	cmp	r1, r3
 80253e4:	bfde      	ittt	le
 80253e6:	2330      	movle	r3, #48	@ 0x30
 80253e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80253ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80253f0:	1b92      	subs	r2, r2, r6
 80253f2:	6122      	str	r2, [r4, #16]
 80253f4:	f8cd a000 	str.w	sl, [sp]
 80253f8:	464b      	mov	r3, r9
 80253fa:	aa03      	add	r2, sp, #12
 80253fc:	4621      	mov	r1, r4
 80253fe:	4640      	mov	r0, r8
 8025400:	f7ff fee6 	bl	80251d0 <_printf_common>
 8025404:	3001      	adds	r0, #1
 8025406:	d14a      	bne.n	802549e <_printf_i+0x1f2>
 8025408:	f04f 30ff 	mov.w	r0, #4294967295
 802540c:	b004      	add	sp, #16
 802540e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025412:	6823      	ldr	r3, [r4, #0]
 8025414:	f043 0320 	orr.w	r3, r3, #32
 8025418:	6023      	str	r3, [r4, #0]
 802541a:	4833      	ldr	r0, [pc, #204]	@ (80254e8 <_printf_i+0x23c>)
 802541c:	2778      	movs	r7, #120	@ 0x78
 802541e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8025422:	6823      	ldr	r3, [r4, #0]
 8025424:	6831      	ldr	r1, [r6, #0]
 8025426:	061f      	lsls	r7, r3, #24
 8025428:	f851 5b04 	ldr.w	r5, [r1], #4
 802542c:	d402      	bmi.n	8025434 <_printf_i+0x188>
 802542e:	065f      	lsls	r7, r3, #25
 8025430:	bf48      	it	mi
 8025432:	b2ad      	uxthmi	r5, r5
 8025434:	6031      	str	r1, [r6, #0]
 8025436:	07d9      	lsls	r1, r3, #31
 8025438:	bf44      	itt	mi
 802543a:	f043 0320 	orrmi.w	r3, r3, #32
 802543e:	6023      	strmi	r3, [r4, #0]
 8025440:	b11d      	cbz	r5, 802544a <_printf_i+0x19e>
 8025442:	2310      	movs	r3, #16
 8025444:	e7ac      	b.n	80253a0 <_printf_i+0xf4>
 8025446:	4827      	ldr	r0, [pc, #156]	@ (80254e4 <_printf_i+0x238>)
 8025448:	e7e9      	b.n	802541e <_printf_i+0x172>
 802544a:	6823      	ldr	r3, [r4, #0]
 802544c:	f023 0320 	bic.w	r3, r3, #32
 8025450:	6023      	str	r3, [r4, #0]
 8025452:	e7f6      	b.n	8025442 <_printf_i+0x196>
 8025454:	4616      	mov	r6, r2
 8025456:	e7bd      	b.n	80253d4 <_printf_i+0x128>
 8025458:	6833      	ldr	r3, [r6, #0]
 802545a:	6825      	ldr	r5, [r4, #0]
 802545c:	6961      	ldr	r1, [r4, #20]
 802545e:	1d18      	adds	r0, r3, #4
 8025460:	6030      	str	r0, [r6, #0]
 8025462:	062e      	lsls	r6, r5, #24
 8025464:	681b      	ldr	r3, [r3, #0]
 8025466:	d501      	bpl.n	802546c <_printf_i+0x1c0>
 8025468:	6019      	str	r1, [r3, #0]
 802546a:	e002      	b.n	8025472 <_printf_i+0x1c6>
 802546c:	0668      	lsls	r0, r5, #25
 802546e:	d5fb      	bpl.n	8025468 <_printf_i+0x1bc>
 8025470:	8019      	strh	r1, [r3, #0]
 8025472:	2300      	movs	r3, #0
 8025474:	6123      	str	r3, [r4, #16]
 8025476:	4616      	mov	r6, r2
 8025478:	e7bc      	b.n	80253f4 <_printf_i+0x148>
 802547a:	6833      	ldr	r3, [r6, #0]
 802547c:	1d1a      	adds	r2, r3, #4
 802547e:	6032      	str	r2, [r6, #0]
 8025480:	681e      	ldr	r6, [r3, #0]
 8025482:	6862      	ldr	r2, [r4, #4]
 8025484:	2100      	movs	r1, #0
 8025486:	4630      	mov	r0, r6
 8025488:	f7da ff3a 	bl	8000300 <memchr>
 802548c:	b108      	cbz	r0, 8025492 <_printf_i+0x1e6>
 802548e:	1b80      	subs	r0, r0, r6
 8025490:	6060      	str	r0, [r4, #4]
 8025492:	6863      	ldr	r3, [r4, #4]
 8025494:	6123      	str	r3, [r4, #16]
 8025496:	2300      	movs	r3, #0
 8025498:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802549c:	e7aa      	b.n	80253f4 <_printf_i+0x148>
 802549e:	6923      	ldr	r3, [r4, #16]
 80254a0:	4632      	mov	r2, r6
 80254a2:	4649      	mov	r1, r9
 80254a4:	4640      	mov	r0, r8
 80254a6:	47d0      	blx	sl
 80254a8:	3001      	adds	r0, #1
 80254aa:	d0ad      	beq.n	8025408 <_printf_i+0x15c>
 80254ac:	6823      	ldr	r3, [r4, #0]
 80254ae:	079b      	lsls	r3, r3, #30
 80254b0:	d413      	bmi.n	80254da <_printf_i+0x22e>
 80254b2:	68e0      	ldr	r0, [r4, #12]
 80254b4:	9b03      	ldr	r3, [sp, #12]
 80254b6:	4298      	cmp	r0, r3
 80254b8:	bfb8      	it	lt
 80254ba:	4618      	movlt	r0, r3
 80254bc:	e7a6      	b.n	802540c <_printf_i+0x160>
 80254be:	2301      	movs	r3, #1
 80254c0:	4632      	mov	r2, r6
 80254c2:	4649      	mov	r1, r9
 80254c4:	4640      	mov	r0, r8
 80254c6:	47d0      	blx	sl
 80254c8:	3001      	adds	r0, #1
 80254ca:	d09d      	beq.n	8025408 <_printf_i+0x15c>
 80254cc:	3501      	adds	r5, #1
 80254ce:	68e3      	ldr	r3, [r4, #12]
 80254d0:	9903      	ldr	r1, [sp, #12]
 80254d2:	1a5b      	subs	r3, r3, r1
 80254d4:	42ab      	cmp	r3, r5
 80254d6:	dcf2      	bgt.n	80254be <_printf_i+0x212>
 80254d8:	e7eb      	b.n	80254b2 <_printf_i+0x206>
 80254da:	2500      	movs	r5, #0
 80254dc:	f104 0619 	add.w	r6, r4, #25
 80254e0:	e7f5      	b.n	80254ce <_printf_i+0x222>
 80254e2:	bf00      	nop
 80254e4:	08026d36 	.word	0x08026d36
 80254e8:	08026d47 	.word	0x08026d47

080254ec <__sflush_r>:
 80254ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80254f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80254f4:	0716      	lsls	r6, r2, #28
 80254f6:	4605      	mov	r5, r0
 80254f8:	460c      	mov	r4, r1
 80254fa:	d454      	bmi.n	80255a6 <__sflush_r+0xba>
 80254fc:	684b      	ldr	r3, [r1, #4]
 80254fe:	2b00      	cmp	r3, #0
 8025500:	dc02      	bgt.n	8025508 <__sflush_r+0x1c>
 8025502:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8025504:	2b00      	cmp	r3, #0
 8025506:	dd48      	ble.n	802559a <__sflush_r+0xae>
 8025508:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802550a:	2e00      	cmp	r6, #0
 802550c:	d045      	beq.n	802559a <__sflush_r+0xae>
 802550e:	2300      	movs	r3, #0
 8025510:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8025514:	682f      	ldr	r7, [r5, #0]
 8025516:	6a21      	ldr	r1, [r4, #32]
 8025518:	602b      	str	r3, [r5, #0]
 802551a:	d030      	beq.n	802557e <__sflush_r+0x92>
 802551c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802551e:	89a3      	ldrh	r3, [r4, #12]
 8025520:	0759      	lsls	r1, r3, #29
 8025522:	d505      	bpl.n	8025530 <__sflush_r+0x44>
 8025524:	6863      	ldr	r3, [r4, #4]
 8025526:	1ad2      	subs	r2, r2, r3
 8025528:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802552a:	b10b      	cbz	r3, 8025530 <__sflush_r+0x44>
 802552c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802552e:	1ad2      	subs	r2, r2, r3
 8025530:	2300      	movs	r3, #0
 8025532:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8025534:	6a21      	ldr	r1, [r4, #32]
 8025536:	4628      	mov	r0, r5
 8025538:	47b0      	blx	r6
 802553a:	1c43      	adds	r3, r0, #1
 802553c:	89a3      	ldrh	r3, [r4, #12]
 802553e:	d106      	bne.n	802554e <__sflush_r+0x62>
 8025540:	6829      	ldr	r1, [r5, #0]
 8025542:	291d      	cmp	r1, #29
 8025544:	d82b      	bhi.n	802559e <__sflush_r+0xb2>
 8025546:	4a2a      	ldr	r2, [pc, #168]	@ (80255f0 <__sflush_r+0x104>)
 8025548:	410a      	asrs	r2, r1
 802554a:	07d6      	lsls	r6, r2, #31
 802554c:	d427      	bmi.n	802559e <__sflush_r+0xb2>
 802554e:	2200      	movs	r2, #0
 8025550:	6062      	str	r2, [r4, #4]
 8025552:	04d9      	lsls	r1, r3, #19
 8025554:	6922      	ldr	r2, [r4, #16]
 8025556:	6022      	str	r2, [r4, #0]
 8025558:	d504      	bpl.n	8025564 <__sflush_r+0x78>
 802555a:	1c42      	adds	r2, r0, #1
 802555c:	d101      	bne.n	8025562 <__sflush_r+0x76>
 802555e:	682b      	ldr	r3, [r5, #0]
 8025560:	b903      	cbnz	r3, 8025564 <__sflush_r+0x78>
 8025562:	6560      	str	r0, [r4, #84]	@ 0x54
 8025564:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8025566:	602f      	str	r7, [r5, #0]
 8025568:	b1b9      	cbz	r1, 802559a <__sflush_r+0xae>
 802556a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802556e:	4299      	cmp	r1, r3
 8025570:	d002      	beq.n	8025578 <__sflush_r+0x8c>
 8025572:	4628      	mov	r0, r5
 8025574:	f7ff fc98 	bl	8024ea8 <_free_r>
 8025578:	2300      	movs	r3, #0
 802557a:	6363      	str	r3, [r4, #52]	@ 0x34
 802557c:	e00d      	b.n	802559a <__sflush_r+0xae>
 802557e:	2301      	movs	r3, #1
 8025580:	4628      	mov	r0, r5
 8025582:	47b0      	blx	r6
 8025584:	4602      	mov	r2, r0
 8025586:	1c50      	adds	r0, r2, #1
 8025588:	d1c9      	bne.n	802551e <__sflush_r+0x32>
 802558a:	682b      	ldr	r3, [r5, #0]
 802558c:	2b00      	cmp	r3, #0
 802558e:	d0c6      	beq.n	802551e <__sflush_r+0x32>
 8025590:	2b1d      	cmp	r3, #29
 8025592:	d001      	beq.n	8025598 <__sflush_r+0xac>
 8025594:	2b16      	cmp	r3, #22
 8025596:	d11e      	bne.n	80255d6 <__sflush_r+0xea>
 8025598:	602f      	str	r7, [r5, #0]
 802559a:	2000      	movs	r0, #0
 802559c:	e022      	b.n	80255e4 <__sflush_r+0xf8>
 802559e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80255a2:	b21b      	sxth	r3, r3
 80255a4:	e01b      	b.n	80255de <__sflush_r+0xf2>
 80255a6:	690f      	ldr	r7, [r1, #16]
 80255a8:	2f00      	cmp	r7, #0
 80255aa:	d0f6      	beq.n	802559a <__sflush_r+0xae>
 80255ac:	0793      	lsls	r3, r2, #30
 80255ae:	680e      	ldr	r6, [r1, #0]
 80255b0:	bf08      	it	eq
 80255b2:	694b      	ldreq	r3, [r1, #20]
 80255b4:	600f      	str	r7, [r1, #0]
 80255b6:	bf18      	it	ne
 80255b8:	2300      	movne	r3, #0
 80255ba:	eba6 0807 	sub.w	r8, r6, r7
 80255be:	608b      	str	r3, [r1, #8]
 80255c0:	f1b8 0f00 	cmp.w	r8, #0
 80255c4:	dde9      	ble.n	802559a <__sflush_r+0xae>
 80255c6:	6a21      	ldr	r1, [r4, #32]
 80255c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80255ca:	4643      	mov	r3, r8
 80255cc:	463a      	mov	r2, r7
 80255ce:	4628      	mov	r0, r5
 80255d0:	47b0      	blx	r6
 80255d2:	2800      	cmp	r0, #0
 80255d4:	dc08      	bgt.n	80255e8 <__sflush_r+0xfc>
 80255d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80255da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80255de:	81a3      	strh	r3, [r4, #12]
 80255e0:	f04f 30ff 	mov.w	r0, #4294967295
 80255e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80255e8:	4407      	add	r7, r0
 80255ea:	eba8 0800 	sub.w	r8, r8, r0
 80255ee:	e7e7      	b.n	80255c0 <__sflush_r+0xd4>
 80255f0:	dfbffffe 	.word	0xdfbffffe

080255f4 <_fflush_r>:
 80255f4:	b538      	push	{r3, r4, r5, lr}
 80255f6:	690b      	ldr	r3, [r1, #16]
 80255f8:	4605      	mov	r5, r0
 80255fa:	460c      	mov	r4, r1
 80255fc:	b913      	cbnz	r3, 8025604 <_fflush_r+0x10>
 80255fe:	2500      	movs	r5, #0
 8025600:	4628      	mov	r0, r5
 8025602:	bd38      	pop	{r3, r4, r5, pc}
 8025604:	b118      	cbz	r0, 802560e <_fflush_r+0x1a>
 8025606:	6a03      	ldr	r3, [r0, #32]
 8025608:	b90b      	cbnz	r3, 802560e <_fflush_r+0x1a>
 802560a:	f7ff f9bf 	bl	802498c <__sinit>
 802560e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025612:	2b00      	cmp	r3, #0
 8025614:	d0f3      	beq.n	80255fe <_fflush_r+0xa>
 8025616:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8025618:	07d0      	lsls	r0, r2, #31
 802561a:	d404      	bmi.n	8025626 <_fflush_r+0x32>
 802561c:	0599      	lsls	r1, r3, #22
 802561e:	d402      	bmi.n	8025626 <_fflush_r+0x32>
 8025620:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8025622:	f7ff fc30 	bl	8024e86 <__retarget_lock_acquire_recursive>
 8025626:	4628      	mov	r0, r5
 8025628:	4621      	mov	r1, r4
 802562a:	f7ff ff5f 	bl	80254ec <__sflush_r>
 802562e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8025630:	07da      	lsls	r2, r3, #31
 8025632:	4605      	mov	r5, r0
 8025634:	d4e4      	bmi.n	8025600 <_fflush_r+0xc>
 8025636:	89a3      	ldrh	r3, [r4, #12]
 8025638:	059b      	lsls	r3, r3, #22
 802563a:	d4e1      	bmi.n	8025600 <_fflush_r+0xc>
 802563c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802563e:	f7ff fc23 	bl	8024e88 <__retarget_lock_release_recursive>
 8025642:	e7dd      	b.n	8025600 <_fflush_r+0xc>

08025644 <__swhatbuf_r>:
 8025644:	b570      	push	{r4, r5, r6, lr}
 8025646:	460c      	mov	r4, r1
 8025648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802564c:	2900      	cmp	r1, #0
 802564e:	b096      	sub	sp, #88	@ 0x58
 8025650:	4615      	mov	r5, r2
 8025652:	461e      	mov	r6, r3
 8025654:	da0d      	bge.n	8025672 <__swhatbuf_r+0x2e>
 8025656:	89a3      	ldrh	r3, [r4, #12]
 8025658:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802565c:	f04f 0100 	mov.w	r1, #0
 8025660:	bf14      	ite	ne
 8025662:	2340      	movne	r3, #64	@ 0x40
 8025664:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8025668:	2000      	movs	r0, #0
 802566a:	6031      	str	r1, [r6, #0]
 802566c:	602b      	str	r3, [r5, #0]
 802566e:	b016      	add	sp, #88	@ 0x58
 8025670:	bd70      	pop	{r4, r5, r6, pc}
 8025672:	466a      	mov	r2, sp
 8025674:	f000 f87c 	bl	8025770 <_fstat_r>
 8025678:	2800      	cmp	r0, #0
 802567a:	dbec      	blt.n	8025656 <__swhatbuf_r+0x12>
 802567c:	9901      	ldr	r1, [sp, #4]
 802567e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8025682:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8025686:	4259      	negs	r1, r3
 8025688:	4159      	adcs	r1, r3
 802568a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802568e:	e7eb      	b.n	8025668 <__swhatbuf_r+0x24>

08025690 <__smakebuf_r>:
 8025690:	898b      	ldrh	r3, [r1, #12]
 8025692:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8025694:	079d      	lsls	r5, r3, #30
 8025696:	4606      	mov	r6, r0
 8025698:	460c      	mov	r4, r1
 802569a:	d507      	bpl.n	80256ac <__smakebuf_r+0x1c>
 802569c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80256a0:	6023      	str	r3, [r4, #0]
 80256a2:	6123      	str	r3, [r4, #16]
 80256a4:	2301      	movs	r3, #1
 80256a6:	6163      	str	r3, [r4, #20]
 80256a8:	b003      	add	sp, #12
 80256aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80256ac:	ab01      	add	r3, sp, #4
 80256ae:	466a      	mov	r2, sp
 80256b0:	f7ff ffc8 	bl	8025644 <__swhatbuf_r>
 80256b4:	9f00      	ldr	r7, [sp, #0]
 80256b6:	4605      	mov	r5, r0
 80256b8:	4639      	mov	r1, r7
 80256ba:	4630      	mov	r0, r6
 80256bc:	f7fe ff94 	bl	80245e8 <_malloc_r>
 80256c0:	b948      	cbnz	r0, 80256d6 <__smakebuf_r+0x46>
 80256c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80256c6:	059a      	lsls	r2, r3, #22
 80256c8:	d4ee      	bmi.n	80256a8 <__smakebuf_r+0x18>
 80256ca:	f023 0303 	bic.w	r3, r3, #3
 80256ce:	f043 0302 	orr.w	r3, r3, #2
 80256d2:	81a3      	strh	r3, [r4, #12]
 80256d4:	e7e2      	b.n	802569c <__smakebuf_r+0xc>
 80256d6:	89a3      	ldrh	r3, [r4, #12]
 80256d8:	6020      	str	r0, [r4, #0]
 80256da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80256de:	81a3      	strh	r3, [r4, #12]
 80256e0:	9b01      	ldr	r3, [sp, #4]
 80256e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80256e6:	b15b      	cbz	r3, 8025700 <__smakebuf_r+0x70>
 80256e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80256ec:	4630      	mov	r0, r6
 80256ee:	f000 f851 	bl	8025794 <_isatty_r>
 80256f2:	b128      	cbz	r0, 8025700 <__smakebuf_r+0x70>
 80256f4:	89a3      	ldrh	r3, [r4, #12]
 80256f6:	f023 0303 	bic.w	r3, r3, #3
 80256fa:	f043 0301 	orr.w	r3, r3, #1
 80256fe:	81a3      	strh	r3, [r4, #12]
 8025700:	89a3      	ldrh	r3, [r4, #12]
 8025702:	431d      	orrs	r5, r3
 8025704:	81a5      	strh	r5, [r4, #12]
 8025706:	e7cf      	b.n	80256a8 <__smakebuf_r+0x18>

08025708 <_putc_r>:
 8025708:	b570      	push	{r4, r5, r6, lr}
 802570a:	460d      	mov	r5, r1
 802570c:	4614      	mov	r4, r2
 802570e:	4606      	mov	r6, r0
 8025710:	b118      	cbz	r0, 802571a <_putc_r+0x12>
 8025712:	6a03      	ldr	r3, [r0, #32]
 8025714:	b90b      	cbnz	r3, 802571a <_putc_r+0x12>
 8025716:	f7ff f939 	bl	802498c <__sinit>
 802571a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802571c:	07d8      	lsls	r0, r3, #31
 802571e:	d405      	bmi.n	802572c <_putc_r+0x24>
 8025720:	89a3      	ldrh	r3, [r4, #12]
 8025722:	0599      	lsls	r1, r3, #22
 8025724:	d402      	bmi.n	802572c <_putc_r+0x24>
 8025726:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8025728:	f7ff fbad 	bl	8024e86 <__retarget_lock_acquire_recursive>
 802572c:	68a3      	ldr	r3, [r4, #8]
 802572e:	3b01      	subs	r3, #1
 8025730:	2b00      	cmp	r3, #0
 8025732:	60a3      	str	r3, [r4, #8]
 8025734:	da05      	bge.n	8025742 <_putc_r+0x3a>
 8025736:	69a2      	ldr	r2, [r4, #24]
 8025738:	4293      	cmp	r3, r2
 802573a:	db12      	blt.n	8025762 <_putc_r+0x5a>
 802573c:	b2eb      	uxtb	r3, r5
 802573e:	2b0a      	cmp	r3, #10
 8025740:	d00f      	beq.n	8025762 <_putc_r+0x5a>
 8025742:	6823      	ldr	r3, [r4, #0]
 8025744:	1c5a      	adds	r2, r3, #1
 8025746:	6022      	str	r2, [r4, #0]
 8025748:	701d      	strb	r5, [r3, #0]
 802574a:	b2ed      	uxtb	r5, r5
 802574c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802574e:	07da      	lsls	r2, r3, #31
 8025750:	d405      	bmi.n	802575e <_putc_r+0x56>
 8025752:	89a3      	ldrh	r3, [r4, #12]
 8025754:	059b      	lsls	r3, r3, #22
 8025756:	d402      	bmi.n	802575e <_putc_r+0x56>
 8025758:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802575a:	f7ff fb95 	bl	8024e88 <__retarget_lock_release_recursive>
 802575e:	4628      	mov	r0, r5
 8025760:	bd70      	pop	{r4, r5, r6, pc}
 8025762:	4629      	mov	r1, r5
 8025764:	4622      	mov	r2, r4
 8025766:	4630      	mov	r0, r6
 8025768:	f7ff fa01 	bl	8024b6e <__swbuf_r>
 802576c:	4605      	mov	r5, r0
 802576e:	e7ed      	b.n	802574c <_putc_r+0x44>

08025770 <_fstat_r>:
 8025770:	b538      	push	{r3, r4, r5, lr}
 8025772:	4d07      	ldr	r5, [pc, #28]	@ (8025790 <_fstat_r+0x20>)
 8025774:	2300      	movs	r3, #0
 8025776:	4604      	mov	r4, r0
 8025778:	4608      	mov	r0, r1
 802577a:	4611      	mov	r1, r2
 802577c:	602b      	str	r3, [r5, #0]
 802577e:	f7e7 fe7b 	bl	800d478 <_fstat>
 8025782:	1c43      	adds	r3, r0, #1
 8025784:	d102      	bne.n	802578c <_fstat_r+0x1c>
 8025786:	682b      	ldr	r3, [r5, #0]
 8025788:	b103      	cbz	r3, 802578c <_fstat_r+0x1c>
 802578a:	6023      	str	r3, [r4, #0]
 802578c:	bd38      	pop	{r3, r4, r5, pc}
 802578e:	bf00      	nop
 8025790:	24000c04 	.word	0x24000c04

08025794 <_isatty_r>:
 8025794:	b538      	push	{r3, r4, r5, lr}
 8025796:	4d06      	ldr	r5, [pc, #24]	@ (80257b0 <_isatty_r+0x1c>)
 8025798:	2300      	movs	r3, #0
 802579a:	4604      	mov	r4, r0
 802579c:	4608      	mov	r0, r1
 802579e:	602b      	str	r3, [r5, #0]
 80257a0:	f7e7 fe7a 	bl	800d498 <_isatty>
 80257a4:	1c43      	adds	r3, r0, #1
 80257a6:	d102      	bne.n	80257ae <_isatty_r+0x1a>
 80257a8:	682b      	ldr	r3, [r5, #0]
 80257aa:	b103      	cbz	r3, 80257ae <_isatty_r+0x1a>
 80257ac:	6023      	str	r3, [r4, #0]
 80257ae:	bd38      	pop	{r3, r4, r5, pc}
 80257b0:	24000c04 	.word	0x24000c04

080257b4 <_init>:
 80257b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80257b6:	bf00      	nop
 80257b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80257ba:	bc08      	pop	{r3}
 80257bc:	469e      	mov	lr, r3
 80257be:	4770      	bx	lr

080257c0 <_fini>:
 80257c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80257c2:	bf00      	nop
 80257c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80257c6:	bc08      	pop	{r3}
 80257c8:	469e      	mov	lr, r3
 80257ca:	4770      	bx	lr
