
Remora-STM32H7xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00027764  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001604  08027a08  08027a08  00028a08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0802900c  0802900c  0002a00c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   0000000c  08029014  08029014  0002a014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08029020  08029020  0002a020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000088  24000000  08029024  0002b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000b84  24000088  080290ac  0002b088  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000c0c  080290ac  0002bc0c  2**0
                  ALLOC
  9 .dma_buffers  00000100  30000000  00000000  00001000  2**5
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0002b088  2**0
                  CONTENTS, READONLY
 11 .debug_info   00199576  00000000  00000000  0002b0b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00017d13  00000000  00000000  001c462c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00007d30  00000000  00000000  001dc340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00005f82  00000000  00000000  001e4070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00053d03  00000000  00000000  001e9ff2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000896f1  00000000  00000000  0023dcf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001cfc96  00000000  00000000  002c73e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0049707c  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00025bf8  00000000  00000000  004970c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000069  00000000  00000000  004bccb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080279ec 	.word	0x080279ec

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	080279ec 	.word	0x080279ec

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	@ 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_frsub>:
 8000728:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 800072c:	e002      	b.n	8000734 <__addsf3>
 800072e:	bf00      	nop

08000730 <__aeabi_fsub>:
 8000730:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000734 <__addsf3>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	bf1f      	itttt	ne
 8000738:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800073c:	ea92 0f03 	teqne	r2, r3
 8000740:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000744:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000748:	d06a      	beq.n	8000820 <__addsf3+0xec>
 800074a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800074e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000752:	bfc1      	itttt	gt
 8000754:	18d2      	addgt	r2, r2, r3
 8000756:	4041      	eorgt	r1, r0
 8000758:	4048      	eorgt	r0, r1
 800075a:	4041      	eorgt	r1, r0
 800075c:	bfb8      	it	lt
 800075e:	425b      	neglt	r3, r3
 8000760:	2b19      	cmp	r3, #25
 8000762:	bf88      	it	hi
 8000764:	4770      	bxhi	lr
 8000766:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800076a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800076e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000772:	bf18      	it	ne
 8000774:	4240      	negne	r0, r0
 8000776:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800077a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800077e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000782:	bf18      	it	ne
 8000784:	4249      	negne	r1, r1
 8000786:	ea92 0f03 	teq	r2, r3
 800078a:	d03f      	beq.n	800080c <__addsf3+0xd8>
 800078c:	f1a2 0201 	sub.w	r2, r2, #1
 8000790:	fa41 fc03 	asr.w	ip, r1, r3
 8000794:	eb10 000c 	adds.w	r0, r0, ip
 8000798:	f1c3 0320 	rsb	r3, r3, #32
 800079c:	fa01 f103 	lsl.w	r1, r1, r3
 80007a0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80007a4:	d502      	bpl.n	80007ac <__addsf3+0x78>
 80007a6:	4249      	negs	r1, r1
 80007a8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80007ac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80007b0:	d313      	bcc.n	80007da <__addsf3+0xa6>
 80007b2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80007b6:	d306      	bcc.n	80007c6 <__addsf3+0x92>
 80007b8:	0840      	lsrs	r0, r0, #1
 80007ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80007be:	f102 0201 	add.w	r2, r2, #1
 80007c2:	2afe      	cmp	r2, #254	@ 0xfe
 80007c4:	d251      	bcs.n	800086a <__addsf3+0x136>
 80007c6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80007ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007ce:	bf08      	it	eq
 80007d0:	f020 0001 	biceq.w	r0, r0, #1
 80007d4:	ea40 0003 	orr.w	r0, r0, r3
 80007d8:	4770      	bx	lr
 80007da:	0049      	lsls	r1, r1, #1
 80007dc:	eb40 0000 	adc.w	r0, r0, r0
 80007e0:	3a01      	subs	r2, #1
 80007e2:	bf28      	it	cs
 80007e4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80007e8:	d2ed      	bcs.n	80007c6 <__addsf3+0x92>
 80007ea:	fab0 fc80 	clz	ip, r0
 80007ee:	f1ac 0c08 	sub.w	ip, ip, #8
 80007f2:	ebb2 020c 	subs.w	r2, r2, ip
 80007f6:	fa00 f00c 	lsl.w	r0, r0, ip
 80007fa:	bfaa      	itet	ge
 80007fc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000800:	4252      	neglt	r2, r2
 8000802:	4318      	orrge	r0, r3
 8000804:	bfbc      	itt	lt
 8000806:	40d0      	lsrlt	r0, r2
 8000808:	4318      	orrlt	r0, r3
 800080a:	4770      	bx	lr
 800080c:	f092 0f00 	teq	r2, #0
 8000810:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000814:	bf06      	itte	eq
 8000816:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800081a:	3201      	addeq	r2, #1
 800081c:	3b01      	subne	r3, #1
 800081e:	e7b5      	b.n	800078c <__addsf3+0x58>
 8000820:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000824:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000828:	bf18      	it	ne
 800082a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800082e:	d021      	beq.n	8000874 <__addsf3+0x140>
 8000830:	ea92 0f03 	teq	r2, r3
 8000834:	d004      	beq.n	8000840 <__addsf3+0x10c>
 8000836:	f092 0f00 	teq	r2, #0
 800083a:	bf08      	it	eq
 800083c:	4608      	moveq	r0, r1
 800083e:	4770      	bx	lr
 8000840:	ea90 0f01 	teq	r0, r1
 8000844:	bf1c      	itt	ne
 8000846:	2000      	movne	r0, #0
 8000848:	4770      	bxne	lr
 800084a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800084e:	d104      	bne.n	800085a <__addsf3+0x126>
 8000850:	0040      	lsls	r0, r0, #1
 8000852:	bf28      	it	cs
 8000854:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000858:	4770      	bx	lr
 800085a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800085e:	bf3c      	itt	cc
 8000860:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000864:	4770      	bxcc	lr
 8000866:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800086a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800086e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000872:	4770      	bx	lr
 8000874:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000878:	bf16      	itet	ne
 800087a:	4608      	movne	r0, r1
 800087c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000880:	4601      	movne	r1, r0
 8000882:	0242      	lsls	r2, r0, #9
 8000884:	bf06      	itte	eq
 8000886:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800088a:	ea90 0f01 	teqeq	r0, r1
 800088e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000892:	4770      	bx	lr

08000894 <__aeabi_ui2f>:
 8000894:	f04f 0300 	mov.w	r3, #0
 8000898:	e004      	b.n	80008a4 <__aeabi_i2f+0x8>
 800089a:	bf00      	nop

0800089c <__aeabi_i2f>:
 800089c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80008a0:	bf48      	it	mi
 80008a2:	4240      	negmi	r0, r0
 80008a4:	ea5f 0c00 	movs.w	ip, r0
 80008a8:	bf08      	it	eq
 80008aa:	4770      	bxeq	lr
 80008ac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80008b0:	4601      	mov	r1, r0
 80008b2:	f04f 0000 	mov.w	r0, #0
 80008b6:	e01c      	b.n	80008f2 <__aeabi_l2f+0x2a>

080008b8 <__aeabi_ul2f>:
 80008b8:	ea50 0201 	orrs.w	r2, r0, r1
 80008bc:	bf08      	it	eq
 80008be:	4770      	bxeq	lr
 80008c0:	f04f 0300 	mov.w	r3, #0
 80008c4:	e00a      	b.n	80008dc <__aeabi_l2f+0x14>
 80008c6:	bf00      	nop

080008c8 <__aeabi_l2f>:
 80008c8:	ea50 0201 	orrs.w	r2, r0, r1
 80008cc:	bf08      	it	eq
 80008ce:	4770      	bxeq	lr
 80008d0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80008d4:	d502      	bpl.n	80008dc <__aeabi_l2f+0x14>
 80008d6:	4240      	negs	r0, r0
 80008d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008dc:	ea5f 0c01 	movs.w	ip, r1
 80008e0:	bf02      	ittt	eq
 80008e2:	4684      	moveq	ip, r0
 80008e4:	4601      	moveq	r1, r0
 80008e6:	2000      	moveq	r0, #0
 80008e8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80008ec:	bf08      	it	eq
 80008ee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80008f2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80008f6:	fabc f28c 	clz	r2, ip
 80008fa:	3a08      	subs	r2, #8
 80008fc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000900:	db10      	blt.n	8000924 <__aeabi_l2f+0x5c>
 8000902:	fa01 fc02 	lsl.w	ip, r1, r2
 8000906:	4463      	add	r3, ip
 8000908:	fa00 fc02 	lsl.w	ip, r0, r2
 800090c:	f1c2 0220 	rsb	r2, r2, #32
 8000910:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000914:	fa20 f202 	lsr.w	r2, r0, r2
 8000918:	eb43 0002 	adc.w	r0, r3, r2
 800091c:	bf08      	it	eq
 800091e:	f020 0001 	biceq.w	r0, r0, #1
 8000922:	4770      	bx	lr
 8000924:	f102 0220 	add.w	r2, r2, #32
 8000928:	fa01 fc02 	lsl.w	ip, r1, r2
 800092c:	f1c2 0220 	rsb	r2, r2, #32
 8000930:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000934:	fa21 f202 	lsr.w	r2, r1, r2
 8000938:	eb43 0002 	adc.w	r0, r3, r2
 800093c:	bf08      	it	eq
 800093e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000942:	4770      	bx	lr

08000944 <__aeabi_uldivmod>:
 8000944:	b953      	cbnz	r3, 800095c <__aeabi_uldivmod+0x18>
 8000946:	b94a      	cbnz	r2, 800095c <__aeabi_uldivmod+0x18>
 8000948:	2900      	cmp	r1, #0
 800094a:	bf08      	it	eq
 800094c:	2800      	cmpeq	r0, #0
 800094e:	bf1c      	itt	ne
 8000950:	f04f 31ff 	movne.w	r1, #4294967295
 8000954:	f04f 30ff 	movne.w	r0, #4294967295
 8000958:	f000 b96a 	b.w	8000c30 <__aeabi_idiv0>
 800095c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000960:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000964:	f000 f806 	bl	8000974 <__udivmoddi4>
 8000968:	f8dd e004 	ldr.w	lr, [sp, #4]
 800096c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000970:	b004      	add	sp, #16
 8000972:	4770      	bx	lr

08000974 <__udivmoddi4>:
 8000974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000978:	9d08      	ldr	r5, [sp, #32]
 800097a:	460c      	mov	r4, r1
 800097c:	2b00      	cmp	r3, #0
 800097e:	d14e      	bne.n	8000a1e <__udivmoddi4+0xaa>
 8000980:	4694      	mov	ip, r2
 8000982:	458c      	cmp	ip, r1
 8000984:	4686      	mov	lr, r0
 8000986:	fab2 f282 	clz	r2, r2
 800098a:	d962      	bls.n	8000a52 <__udivmoddi4+0xde>
 800098c:	b14a      	cbz	r2, 80009a2 <__udivmoddi4+0x2e>
 800098e:	f1c2 0320 	rsb	r3, r2, #32
 8000992:	4091      	lsls	r1, r2
 8000994:	fa20 f303 	lsr.w	r3, r0, r3
 8000998:	fa0c fc02 	lsl.w	ip, ip, r2
 800099c:	4319      	orrs	r1, r3
 800099e:	fa00 fe02 	lsl.w	lr, r0, r2
 80009a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009a6:	fa1f f68c 	uxth.w	r6, ip
 80009aa:	fbb1 f4f7 	udiv	r4, r1, r7
 80009ae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009b2:	fb07 1114 	mls	r1, r7, r4, r1
 80009b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009ba:	fb04 f106 	mul.w	r1, r4, r6
 80009be:	4299      	cmp	r1, r3
 80009c0:	d90a      	bls.n	80009d8 <__udivmoddi4+0x64>
 80009c2:	eb1c 0303 	adds.w	r3, ip, r3
 80009c6:	f104 30ff 	add.w	r0, r4, #4294967295
 80009ca:	f080 8112 	bcs.w	8000bf2 <__udivmoddi4+0x27e>
 80009ce:	4299      	cmp	r1, r3
 80009d0:	f240 810f 	bls.w	8000bf2 <__udivmoddi4+0x27e>
 80009d4:	3c02      	subs	r4, #2
 80009d6:	4463      	add	r3, ip
 80009d8:	1a59      	subs	r1, r3, r1
 80009da:	fa1f f38e 	uxth.w	r3, lr
 80009de:	fbb1 f0f7 	udiv	r0, r1, r7
 80009e2:	fb07 1110 	mls	r1, r7, r0, r1
 80009e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009ea:	fb00 f606 	mul.w	r6, r0, r6
 80009ee:	429e      	cmp	r6, r3
 80009f0:	d90a      	bls.n	8000a08 <__udivmoddi4+0x94>
 80009f2:	eb1c 0303 	adds.w	r3, ip, r3
 80009f6:	f100 31ff 	add.w	r1, r0, #4294967295
 80009fa:	f080 80fc 	bcs.w	8000bf6 <__udivmoddi4+0x282>
 80009fe:	429e      	cmp	r6, r3
 8000a00:	f240 80f9 	bls.w	8000bf6 <__udivmoddi4+0x282>
 8000a04:	4463      	add	r3, ip
 8000a06:	3802      	subs	r0, #2
 8000a08:	1b9b      	subs	r3, r3, r6
 8000a0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a0e:	2100      	movs	r1, #0
 8000a10:	b11d      	cbz	r5, 8000a1a <__udivmoddi4+0xa6>
 8000a12:	40d3      	lsrs	r3, r2
 8000a14:	2200      	movs	r2, #0
 8000a16:	e9c5 3200 	strd	r3, r2, [r5]
 8000a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a1e:	428b      	cmp	r3, r1
 8000a20:	d905      	bls.n	8000a2e <__udivmoddi4+0xba>
 8000a22:	b10d      	cbz	r5, 8000a28 <__udivmoddi4+0xb4>
 8000a24:	e9c5 0100 	strd	r0, r1, [r5]
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e7f5      	b.n	8000a1a <__udivmoddi4+0xa6>
 8000a2e:	fab3 f183 	clz	r1, r3
 8000a32:	2900      	cmp	r1, #0
 8000a34:	d146      	bne.n	8000ac4 <__udivmoddi4+0x150>
 8000a36:	42a3      	cmp	r3, r4
 8000a38:	d302      	bcc.n	8000a40 <__udivmoddi4+0xcc>
 8000a3a:	4290      	cmp	r0, r2
 8000a3c:	f0c0 80f0 	bcc.w	8000c20 <__udivmoddi4+0x2ac>
 8000a40:	1a86      	subs	r6, r0, r2
 8000a42:	eb64 0303 	sbc.w	r3, r4, r3
 8000a46:	2001      	movs	r0, #1
 8000a48:	2d00      	cmp	r5, #0
 8000a4a:	d0e6      	beq.n	8000a1a <__udivmoddi4+0xa6>
 8000a4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000a50:	e7e3      	b.n	8000a1a <__udivmoddi4+0xa6>
 8000a52:	2a00      	cmp	r2, #0
 8000a54:	f040 8090 	bne.w	8000b78 <__udivmoddi4+0x204>
 8000a58:	eba1 040c 	sub.w	r4, r1, ip
 8000a5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a60:	fa1f f78c 	uxth.w	r7, ip
 8000a64:	2101      	movs	r1, #1
 8000a66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000a72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a76:	fb07 f006 	mul.w	r0, r7, r6
 8000a7a:	4298      	cmp	r0, r3
 8000a7c:	d908      	bls.n	8000a90 <__udivmoddi4+0x11c>
 8000a7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a86:	d202      	bcs.n	8000a8e <__udivmoddi4+0x11a>
 8000a88:	4298      	cmp	r0, r3
 8000a8a:	f200 80cd 	bhi.w	8000c28 <__udivmoddi4+0x2b4>
 8000a8e:	4626      	mov	r6, r4
 8000a90:	1a1c      	subs	r4, r3, r0
 8000a92:	fa1f f38e 	uxth.w	r3, lr
 8000a96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000a9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000aa2:	fb00 f707 	mul.w	r7, r0, r7
 8000aa6:	429f      	cmp	r7, r3
 8000aa8:	d908      	bls.n	8000abc <__udivmoddi4+0x148>
 8000aaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000aae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ab2:	d202      	bcs.n	8000aba <__udivmoddi4+0x146>
 8000ab4:	429f      	cmp	r7, r3
 8000ab6:	f200 80b0 	bhi.w	8000c1a <__udivmoddi4+0x2a6>
 8000aba:	4620      	mov	r0, r4
 8000abc:	1bdb      	subs	r3, r3, r7
 8000abe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ac2:	e7a5      	b.n	8000a10 <__udivmoddi4+0x9c>
 8000ac4:	f1c1 0620 	rsb	r6, r1, #32
 8000ac8:	408b      	lsls	r3, r1
 8000aca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ace:	431f      	orrs	r7, r3
 8000ad0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ad4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ad8:	ea43 030c 	orr.w	r3, r3, ip
 8000adc:	40f4      	lsrs	r4, r6
 8000ade:	fa00 f801 	lsl.w	r8, r0, r1
 8000ae2:	0c38      	lsrs	r0, r7, #16
 8000ae4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ae8:	fbb4 fef0 	udiv	lr, r4, r0
 8000aec:	fa1f fc87 	uxth.w	ip, r7
 8000af0:	fb00 441e 	mls	r4, r0, lr, r4
 8000af4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000af8:	fb0e f90c 	mul.w	r9, lr, ip
 8000afc:	45a1      	cmp	r9, r4
 8000afe:	fa02 f201 	lsl.w	r2, r2, r1
 8000b02:	d90a      	bls.n	8000b1a <__udivmoddi4+0x1a6>
 8000b04:	193c      	adds	r4, r7, r4
 8000b06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b0a:	f080 8084 	bcs.w	8000c16 <__udivmoddi4+0x2a2>
 8000b0e:	45a1      	cmp	r9, r4
 8000b10:	f240 8081 	bls.w	8000c16 <__udivmoddi4+0x2a2>
 8000b14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b18:	443c      	add	r4, r7
 8000b1a:	eba4 0409 	sub.w	r4, r4, r9
 8000b1e:	fa1f f983 	uxth.w	r9, r3
 8000b22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b26:	fb00 4413 	mls	r4, r0, r3, r4
 8000b2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b32:	45a4      	cmp	ip, r4
 8000b34:	d907      	bls.n	8000b46 <__udivmoddi4+0x1d2>
 8000b36:	193c      	adds	r4, r7, r4
 8000b38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000b3c:	d267      	bcs.n	8000c0e <__udivmoddi4+0x29a>
 8000b3e:	45a4      	cmp	ip, r4
 8000b40:	d965      	bls.n	8000c0e <__udivmoddi4+0x29a>
 8000b42:	3b02      	subs	r3, #2
 8000b44:	443c      	add	r4, r7
 8000b46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000b4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000b4e:	eba4 040c 	sub.w	r4, r4, ip
 8000b52:	429c      	cmp	r4, r3
 8000b54:	46ce      	mov	lr, r9
 8000b56:	469c      	mov	ip, r3
 8000b58:	d351      	bcc.n	8000bfe <__udivmoddi4+0x28a>
 8000b5a:	d04e      	beq.n	8000bfa <__udivmoddi4+0x286>
 8000b5c:	b155      	cbz	r5, 8000b74 <__udivmoddi4+0x200>
 8000b5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000b62:	eb64 040c 	sbc.w	r4, r4, ip
 8000b66:	fa04 f606 	lsl.w	r6, r4, r6
 8000b6a:	40cb      	lsrs	r3, r1
 8000b6c:	431e      	orrs	r6, r3
 8000b6e:	40cc      	lsrs	r4, r1
 8000b70:	e9c5 6400 	strd	r6, r4, [r5]
 8000b74:	2100      	movs	r1, #0
 8000b76:	e750      	b.n	8000a1a <__udivmoddi4+0xa6>
 8000b78:	f1c2 0320 	rsb	r3, r2, #32
 8000b7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000b80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b84:	fa24 f303 	lsr.w	r3, r4, r3
 8000b88:	4094      	lsls	r4, r2
 8000b8a:	430c      	orrs	r4, r1
 8000b8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b94:	fa1f f78c 	uxth.w	r7, ip
 8000b98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000ba0:	0c23      	lsrs	r3, r4, #16
 8000ba2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba6:	fb00 f107 	mul.w	r1, r0, r7
 8000baa:	4299      	cmp	r1, r3
 8000bac:	d908      	bls.n	8000bc0 <__udivmoddi4+0x24c>
 8000bae:	eb1c 0303 	adds.w	r3, ip, r3
 8000bb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000bb6:	d22c      	bcs.n	8000c12 <__udivmoddi4+0x29e>
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	d92a      	bls.n	8000c12 <__udivmoddi4+0x29e>
 8000bbc:	3802      	subs	r0, #2
 8000bbe:	4463      	add	r3, ip
 8000bc0:	1a5b      	subs	r3, r3, r1
 8000bc2:	b2a4      	uxth	r4, r4
 8000bc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000bc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000bcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bd0:	fb01 f307 	mul.w	r3, r1, r7
 8000bd4:	42a3      	cmp	r3, r4
 8000bd6:	d908      	bls.n	8000bea <__udivmoddi4+0x276>
 8000bd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000be0:	d213      	bcs.n	8000c0a <__udivmoddi4+0x296>
 8000be2:	42a3      	cmp	r3, r4
 8000be4:	d911      	bls.n	8000c0a <__udivmoddi4+0x296>
 8000be6:	3902      	subs	r1, #2
 8000be8:	4464      	add	r4, ip
 8000bea:	1ae4      	subs	r4, r4, r3
 8000bec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000bf0:	e739      	b.n	8000a66 <__udivmoddi4+0xf2>
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	e6f0      	b.n	80009d8 <__udivmoddi4+0x64>
 8000bf6:	4608      	mov	r0, r1
 8000bf8:	e706      	b.n	8000a08 <__udivmoddi4+0x94>
 8000bfa:	45c8      	cmp	r8, r9
 8000bfc:	d2ae      	bcs.n	8000b5c <__udivmoddi4+0x1e8>
 8000bfe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c02:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c06:	3801      	subs	r0, #1
 8000c08:	e7a8      	b.n	8000b5c <__udivmoddi4+0x1e8>
 8000c0a:	4631      	mov	r1, r6
 8000c0c:	e7ed      	b.n	8000bea <__udivmoddi4+0x276>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	e799      	b.n	8000b46 <__udivmoddi4+0x1d2>
 8000c12:	4630      	mov	r0, r6
 8000c14:	e7d4      	b.n	8000bc0 <__udivmoddi4+0x24c>
 8000c16:	46d6      	mov	lr, sl
 8000c18:	e77f      	b.n	8000b1a <__udivmoddi4+0x1a6>
 8000c1a:	4463      	add	r3, ip
 8000c1c:	3802      	subs	r0, #2
 8000c1e:	e74d      	b.n	8000abc <__udivmoddi4+0x148>
 8000c20:	4606      	mov	r6, r0
 8000c22:	4623      	mov	r3, r4
 8000c24:	4608      	mov	r0, r1
 8000c26:	e70f      	b.n	8000a48 <__udivmoddi4+0xd4>
 8000c28:	3e02      	subs	r6, #2
 8000c2a:	4463      	add	r3, ip
 8000c2c:	e730      	b.n	8000a90 <__udivmoddi4+0x11c>
 8000c2e:	bf00      	nop

08000c30 <__aeabi_idiv0>:
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop

08000c34 <_ZN8rxData_tC1Ev>:
    uint8_t jointEnable;
    uint16_t outputs;
    uint8_t spare0;
  };

  rxData_t() {
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
      header = 0;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
      outputs = 0;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2200      	movs	r2, #0
 8000c46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      jointEnable = 0;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2200      	movs	r2, #0
 8000c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      for (uint8_t i=0;i<Config::joints;i++) {
 8000c58:	2300      	movs	r3, #0
 8000c5a:	73fb      	strb	r3, [r7, #15]
 8000c5c:	e008      	b.n	8000c70 <_ZN8rxData_tC1Ev+0x3c>
         jointFreqCmd[i] = 0;
 8000c5e:	7bfb      	ldrb	r3, [r7, #15]
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	4413      	add	r3, r2
 8000c66:	2200      	movs	r2, #0
 8000c68:	605a      	str	r2, [r3, #4]
      for (uint8_t i=0;i<Config::joints;i++) {
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	73fb      	strb	r3, [r7, #15]
 8000c70:	7bfb      	ldrb	r3, [r7, #15]
 8000c72:	2b07      	cmp	r3, #7
 8000c74:	d9f3      	bls.n	8000c5e <_ZN8rxData_tC1Ev+0x2a>
      }
      for (uint8_t i=0;i<Config::variables;i++) {
 8000c76:	2300      	movs	r3, #0
 8000c78:	73bb      	strb	r3, [r7, #14]
 8000c7a:	e00b      	b.n	8000c94 <_ZN8rxData_tC1Ev+0x60>
         setPoint[i] = 0.0;
 8000c7c:	7bbb      	ldrb	r3, [r7, #14]
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	3308      	adds	r3, #8
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	4413      	add	r3, r2
 8000c86:	3304      	adds	r3, #4
 8000c88:	f04f 0200 	mov.w	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
      for (uint8_t i=0;i<Config::variables;i++) {
 8000c8e:	7bbb      	ldrb	r3, [r7, #14]
 8000c90:	3301      	adds	r3, #1
 8000c92:	73bb      	strb	r3, [r7, #14]
 8000c94:	7bbb      	ldrb	r3, [r7, #14]
 8000c96:	2b05      	cmp	r3, #5
 8000c98:	d9f0      	bls.n	8000c7c <_ZN8rxData_tC1Ev+0x48>
     }
  }
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3714      	adds	r7, #20
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d005      	beq.n	8000cc4 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	2203      	movs	r2, #3
 8000cc2:	4798      	blx	r3
    }
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 8000cce:	b480      	push	{r7}
 8000cd0:	b083      	sub	sp, #12
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	bf0c      	ite	eq
 8000cde:	2301      	moveq	r3, #1
 8000ce0:	2300      	movne	r3, #0
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <_ZNK6Module17getUsesModulePostEv>:
		virtual void update();		// the standard interface for update of the module - use for stepgen, PWM etc
		virtual void updatePost();
		virtual void slowUpdate();	// the standard interface for the slow update - use for PID controller etc
        virtual void configure();   // the standard interface for one off configuration

        virtual bool getUsesModulePost() const { return usesModulePost; }
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	7d1b      	ldrb	r3, [r3, #20]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <_ZNK11ArduinoJson8V730HB226detail9RamStringixEj>:

  size_t size() const {
    return size_;
  }

  char operator[](size_t i) const {
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(str_ != 0);
    ARDUINOJSON_ASSERT(i <= size());
    return str_[i];
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	4413      	add	r3, r2
 8000d1a:	781b      	ldrb	r3, [r3, #0]
  }
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <_ZN14DMA_RxBuffer_tC1Ev>:
} __attribute__((aligned(32))) txData_t;


typedef struct {
    volatile rxData_t buffer[2]; // DMA RX buffers
} DMA_RxBuffer_t;
 8000d28:	b5b0      	push	{r4, r5, r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2401      	movs	r4, #1
 8000d34:	461d      	mov	r5, r3
 8000d36:	e004      	b.n	8000d42 <_ZN14DMA_RxBuffer_tC1Ev+0x1a>
 8000d38:	4628      	mov	r0, r5
 8000d3a:	f7ff ff7b 	bl	8000c34 <_ZN8rxData_tC1Ev>
 8000d3e:	3c01      	subs	r4, #1
 8000d40:	3540      	adds	r5, #64	@ 0x40
 8000d42:	2c00      	cmp	r4, #0
 8000d44:	daf8      	bge.n	8000d38 <_ZN14DMA_RxBuffer_tC1Ev+0x10>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bdb0      	pop	{r4, r5, r7, pc}

08000d50 <_ZNSt8functionIFvbEED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff ffa4 	bl	8000ca8 <_ZNSt14_Function_baseD1Ev>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <_ZN14CommsInterfaceD1Ev>:

#include <functional>

#include "../../modules/module.h"

class CommsInterface : public Module {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	4a08      	ldr	r2, [pc, #32]	@ (8000d98 <_ZN14CommsInterfaceD1Ev+0x2c>)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	3318      	adds	r3, #24
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff ffe6 	bl	8000d50 <_ZNSt8functionIFvbEED1Ev>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f00f ff18 	bl	8010bbc <_ZN6ModuleD1Ev>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	08028800 	.word	0x08028800

08000d9c <_ZN14CommsInterfaceD0Ev>:
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f7ff ffe1 	bl	8000d6c <_ZN14CommsInterfaceD1Ev>
 8000daa:	2128      	movs	r1, #40	@ 0x28
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f025 f884 	bl	8025eba <_ZdlPvj>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4618      	mov	r0, r3
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <_ZN8SPICommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef>:
#include "SPIComms.h"

__attribute__((section(".DmaSection"))) volatile DMA_RxBuffer_t rxDMABuffer;


SPIComms::SPIComms(volatile rxData_t* _ptrRxData, volatile txData_t* _ptrTxData, SPI_TypeDef* _spiType) :
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
 8000dc8:	603b      	str	r3, [r7, #0]
	ptrRxData(_ptrRxData),
	ptrTxData(_ptrTxData),
	spiType(_spiType)
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f001 f9ab 	bl	8002128 <_ZN14CommsInterfaceC1Ev>
 8000dd2:	4a12      	ldr	r2, [pc, #72]	@ (8000e1c <_ZN8SPICommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef+0x60>)
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	601a      	str	r2, [r3, #0]
	ptrRxData(_ptrRxData),
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	629a      	str	r2, [r3, #40]	@ 0x28
	ptrTxData(_ptrTxData),
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	62da      	str	r2, [r3, #44]	@ 0x2c
	spiType(_spiType)
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	683a      	ldr	r2, [r7, #0]
 8000de8:	635a      	str	r2, [r3, #52]	@ 0x34
{
    spiHandle.Instance = spiType;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	651a      	str	r2, [r3, #80]	@ 0x50
    ptrRxDMABuffer = &rxDMABuffer;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	4a0a      	ldr	r2, [pc, #40]	@ (8000e20 <_ZN8SPICommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef+0x64>)
 8000df6:	631a      	str	r2, [r3, #48]	@ 0x30

    irqNss = EXTI4_IRQn;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	220a      	movs	r2, #10
 8000dfc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    irqDMAtx = DMA1_Stream0_IRQn;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	220b      	movs	r2, #11
 8000e04:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    irqDMArx = DMA1_Stream1_IRQn;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
}
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4618      	mov	r0, r3
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	080287d0 	.word	0x080287d0
 8000e20:	30000000 	.word	0x30000000

08000e24 <_ZN8SPICommsD1Ev>:

SPIComms::~SPIComms() {
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	4a05      	ldr	r2, [pc, #20]	@ (8000e44 <_ZN8SPICommsD1Ev+0x20>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	601a      	str	r2, [r3, #0]

}
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff99 	bl	8000d6c <_ZN14CommsInterfaceD1Ev>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	080287d0 	.word	0x080287d0

08000e48 <_ZN8SPICommsD0Ev>:
SPIComms::~SPIComms() {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
}
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f7ff ffe7 	bl	8000e24 <_ZN8SPICommsD1Ev>
 8000e56:	f44f 7111 	mov.w	r1, #580	@ 0x244
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f025 f82d 	bl	8025eba <_ZdlPvj>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4618      	mov	r0, r3
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <_ZN8SPIComms4initEv>:

void SPIComms::init() {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08a      	sub	sp, #40	@ 0x28
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]

    if(spiHandle.Instance == SPI1)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000e88:	4ab1      	ldr	r2, [pc, #708]	@ (8001150 <_ZN8SPIComms4initEv+0x2e4>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	f040 815c 	bne.w	8001148 <_ZN8SPIComms4initEv+0x2dc>
    {
    	// Interrupt pin is the NSS pin
        // Configure GPIO pin : PA_4

        __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e90:	4bb0      	ldr	r3, [pc, #704]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e96:	4aaf      	ldr	r2, [pc, #700]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000e98:	f043 0304 	orr.w	r3, r3, #4
 8000e9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ea0:	4bac      	ldr	r3, [pc, #688]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ea6:	f003 0304 	and.w	r3, r3, #4
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	693b      	ldr	r3, [r7, #16]

        GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000eae:	2310      	movs	r3, #16
 8000eb0:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eb2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000eb6:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	48a5      	ldr	r0, [pc, #660]	@ (8001158 <_ZN8SPIComms4initEv+0x2ec>)
 8000ec4:	f01a fffa 	bl	801bebc <HAL_GPIO_Init>

        printf("	Initialising SPI1 slave\n");
 8000ec8:	48a4      	ldr	r0, [pc, #656]	@ (800115c <_ZN8SPIComms4initEv+0x2f0>)
 8000eca:	f025 ff21 	bl	8026d10 <puts>

        spiHandle.Init.Mode           			= SPI_MODE_SLAVE;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	655a      	str	r2, [r3, #84]	@ 0x54
        spiHandle.Init.Direction      			= SPI_DIRECTION_2LINES;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	659a      	str	r2, [r3, #88]	@ 0x58
        spiHandle.Init.DataSize       			= SPI_DATASIZE_8BIT;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2207      	movs	r2, #7
 8000ede:	65da      	str	r2, [r3, #92]	@ 0x5c
        spiHandle.Init.CLKPolarity    			= SPI_POLARITY_LOW;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	661a      	str	r2, [r3, #96]	@ 0x60
        spiHandle.Init.CLKPhase       			= SPI_PHASE_1EDGE;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	665a      	str	r2, [r3, #100]	@ 0x64
        spiHandle.Init.NSS            			= SPI_NSS_HARD_INPUT;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	669a      	str	r2, [r3, #104]	@ 0x68
        spiHandle.Init.FirstBit       			= SPI_FIRSTBIT_MSB;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	671a      	str	r2, [r3, #112]	@ 0x70
        spiHandle.Init.TIMode         			= SPI_TIMODE_DISABLE;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2200      	movs	r2, #0
 8000efc:	675a      	str	r2, [r3, #116]	@ 0x74
        spiHandle.Init.CRCCalculation 			= SPI_CRCCALCULATION_DISABLE;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	679a      	str	r2, [r3, #120]	@ 0x78
        spiHandle.Init.CRCPolynomial  			= 0x0;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2200      	movs	r2, #0
 8000f08:	67da      	str	r2, [r3, #124]	@ 0x7c
        spiHandle.Init.NSSPMode 				= SPI_NSS_PULSE_DISABLE;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        spiHandle.Init.NSSPolarity 				= SPI_NSS_POLARITY_LOW;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2200      	movs	r2, #0
 8000f16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        spiHandle.Init.FifoThreshold 			= SPI_FIFO_THRESHOLD_01DATA;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        spiHandle.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        spiHandle.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        spiHandle.Init.MasterSSIdleness 		= SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        spiHandle.Init.MasterInterDataIdleness 	= SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        spiHandle.Init.MasterReceiverAutoSusp 	= SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2200      	movs	r2, #0
 8000f46:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        spiHandle.Init.MasterKeepIOState 		= SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        spiHandle.Init.IOSwap 					= SPI_IO_SWAP_DISABLE;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2200      	movs	r2, #0
 8000f56:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8

        HAL_SPI_Init(&this->spiHandle);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	3350      	adds	r3, #80	@ 0x50
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f020 fb10 	bl	8021584 <HAL_SPI_Init>

    	// Peripheral clock enable
    	__HAL_RCC_SPI1_CLK_ENABLE();
 8000f64:	4b7b      	ldr	r3, [pc, #492]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f6a:	4a7a      	ldr	r2, [pc, #488]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f6c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f70:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000f74:	4b77      	ldr	r3, [pc, #476]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]

		printf("	Initialising GPIO for SPI\n");
 8000f82:	4877      	ldr	r0, [pc, #476]	@ (8001160 <_ZN8SPIComms4initEv+0x2f4>)
 8000f84:	f025 fec4 	bl	8026d10 <puts>

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f88:	4b72      	ldr	r3, [pc, #456]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f8e:	4a71      	ldr	r2, [pc, #452]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f98:	4b6e      	ldr	r3, [pc, #440]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
	    PA4     ------> SPI1_NSS
	    PA5     ------> SPI1_SCK
	    PA6     ------> SPI1_MISO
	    PA7     ------> SPI1_MOSI
	    */
    	GPIO_InitStruct = {0};
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
 8000fb4:	611a      	str	r2, [r3, #16]
	    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000fb6:	23f0      	movs	r3, #240	@ 0xf0
 8000fb8:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fc6:	2305      	movs	r3, #5
 8000fc8:	627b      	str	r3, [r7, #36]	@ 0x24
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4861      	ldr	r0, [pc, #388]	@ (8001158 <_ZN8SPIComms4initEv+0x2ec>)
 8000fd2:	f01a ff73 	bl	801bebc <HAL_GPIO_Init>

        printf("	Initialising DMA for SPI\n");
 8000fd6:	4863      	ldr	r0, [pc, #396]	@ (8001164 <_ZN8SPIComms4initEv+0x2f8>)
 8000fd8:	f025 fe9a 	bl	8026d10 <puts>

        hdma_spi_tx.Instance 					= DMA1_Stream0;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a62      	ldr	r2, [pc, #392]	@ (8001168 <_ZN8SPIComms4initEv+0x2fc>)
 8000fe0:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
        hdma_spi_tx.Init.Request 				= DMA_REQUEST_SPI1_TX;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2226      	movs	r2, #38	@ 0x26
 8000fe8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
        hdma_spi_tx.Init.Direction 				= DMA_MEMORY_TO_PERIPH;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2240      	movs	r2, #64	@ 0x40
 8000ff0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
        hdma_spi_tx.Init.PeriphInc 				= DMA_PINC_DISABLE;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
        hdma_spi_tx.Init.MemInc 				= DMA_MINC_ENABLE;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001002:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
        hdma_spi_tx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
        hdma_spi_tx.Init.MemDataAlignment 		= DMA_MDATAALIGN_BYTE;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
        hdma_spi_tx.Init.Mode 					= DMA_CIRCULAR;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800101c:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
        hdma_spi_tx.Init.Priority 				= DMA_PRIORITY_LOW;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
        hdma_spi_tx.Init.FIFOMode 				= DMA_FIFOMODE_DISABLE;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc

        HAL_DMA_Init(&hdma_spi_tx);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	33d8      	adds	r3, #216	@ 0xd8
 8001034:	4618      	mov	r0, r3
 8001036:	f018 fc01 	bl	801983c <HAL_DMA_Init>
        __HAL_LINKDMA(&spiHandle, hdmatx, hdma_spi_tx);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f103 02d8 	add.w	r2, r3, #216	@ 0xd8
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110

        hdma_spi_rx.Instance 					= DMA1_Stream1;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a45      	ldr	r2, [pc, #276]	@ (800116c <_ZN8SPIComms4initEv+0x300>)
 8001056:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
        hdma_spi_rx.Init.Request 				= DMA_REQUEST_SPI1_RX;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2225      	movs	r2, #37	@ 0x25
 800105e:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
        hdma_spi_rx.Init.Direction 				= DMA_PERIPH_TO_MEMORY;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2200      	movs	r2, #0
 8001066:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
        hdma_spi_rx.Init.PeriphInc 				= DMA_PINC_DISABLE;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
        hdma_spi_rx.Init.MemInc 				= DMA_MINC_ENABLE;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001078:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
        hdma_spi_rx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
        hdma_spi_rx.Init.MemDataAlignment 		= DMA_MDATAALIGN_BYTE;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
        hdma_spi_rx.Init.Mode 					= DMA_CIRCULAR;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001092:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
        hdma_spi_rx.Init.Priority 				= DMA_PRIORITY_LOW;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2200      	movs	r2, #0
 800109a:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
        hdma_spi_rx.Init.FIFOMode 				= DMA_FIFOMODE_DISABLE;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174

        HAL_DMA_Init(&hdma_spi_rx);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80010ac:	4618      	mov	r0, r3
 80010ae:	f018 fbc5 	bl	801983c <HAL_DMA_Init>
        __HAL_LINKDMA(&spiHandle, hdmarx, hdma_spi_rx);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f503 72a8 	add.w	r2, r3, #336	@ 0x150
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188

        printf("	Initialising DMA for Memory to Memory transfer\n");
 80010ca:	4829      	ldr	r0, [pc, #164]	@ (8001170 <_ZN8SPIComms4initEv+0x304>)
 80010cc:	f025 fe20 	bl	8026d10 <puts>

        hdma_memtomem.Instance 					= DMA1_Stream2;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4a28      	ldr	r2, [pc, #160]	@ (8001174 <_ZN8SPIComms4initEv+0x308>)
 80010d4:	f8c3 21c8 	str.w	r2, [r3, #456]	@ 0x1c8
        hdma_memtomem.Init.Request 				= DMA_REQUEST_MEM2MEM;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	f8c3 21cc 	str.w	r2, [r3, #460]	@ 0x1cc
        hdma_memtomem.Init.Direction 			= DMA_MEMORY_TO_MEMORY;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2280      	movs	r2, #128	@ 0x80
 80010e4:	f8c3 21d0 	str.w	r2, [r3, #464]	@ 0x1d0
        hdma_memtomem.Init.PeriphInc 			= DMA_PINC_ENABLE;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010ee:	f8c3 21d4 	str.w	r2, [r3, #468]	@ 0x1d4
        hdma_memtomem.Init.MemInc 				= DMA_MINC_ENABLE;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010f8:	f8c3 21d8 	str.w	r2, [r3, #472]	@ 0x1d8
        hdma_memtomem.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2200      	movs	r2, #0
 8001100:	f8c3 21dc 	str.w	r2, [r3, #476]	@ 0x1dc
        hdma_memtomem.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
        hdma_memtomem.Init.Mode 				= DMA_NORMAL;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2200      	movs	r2, #0
 8001110:	f8c3 21e4 	str.w	r2, [r3, #484]	@ 0x1e4
        hdma_memtomem.Init.Priority 			= DMA_PRIORITY_LOW;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	f8c3 21e8 	str.w	r2, [r3, #488]	@ 0x1e8
        hdma_memtomem.Init.FIFOMode 			= DMA_FIFOMODE_ENABLE;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2204      	movs	r2, #4
 8001120:	f8c3 21ec 	str.w	r2, [r3, #492]	@ 0x1ec
        hdma_memtomem.Init.FIFOThreshold 		= DMA_FIFO_THRESHOLD_FULL;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2203      	movs	r2, #3
 8001128:	f8c3 21f0 	str.w	r2, [r3, #496]	@ 0x1f0
        hdma_memtomem.Init.MemBurst 			= DMA_MBURST_SINGLE;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2200      	movs	r2, #0
 8001130:	f8c3 21f4 	str.w	r2, [r3, #500]	@ 0x1f4
        hdma_memtomem.Init.PeriphBurst 			= DMA_PBURST_SINGLE;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	f8c3 21f8 	str.w	r2, [r3, #504]	@ 0x1f8

        HAL_DMA_Init(&hdma_memtomem);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8001142:	4618      	mov	r0, r3
 8001144:	f018 fb7a 	bl	801983c <HAL_DMA_Init>
    }
}
 8001148:	bf00      	nop
 800114a:	3728      	adds	r7, #40	@ 0x28
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40013000 	.word	0x40013000
 8001154:	58024400 	.word	0x58024400
 8001158:	58020000 	.word	0x58020000
 800115c:	08027a08 	.word	0x08027a08
 8001160:	08027a24 	.word	0x08027a24
 8001164:	08027a40 	.word	0x08027a40
 8001168:	40020010 	.word	0x40020010
 800116c:	40020028 	.word	0x40020028
 8001170:	08027a5c 	.word	0x08027a5c
 8001174:	40020040 	.word	0x40020040

08001178 <_ZN8SPIComms5startEv>:

void SPIComms::start() {
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b08f      	sub	sp, #60	@ 0x3c
 800117c:	af02      	add	r7, sp, #8
 800117e:	6078      	str	r0, [r7, #4]
    // Register the NSS (slave select) interrupt
    NssInterrupt = new ModuleInterrupt<SPIComms>(
        irqNss,
        this,
        &SPIComms::handleNssInterrupt
    );
 8001180:	2010      	movs	r0, #16
 8001182:	f024 feab 	bl	8025edc <_Znwj>
 8001186:	4603      	mov	r3, r0
 8001188:	461c      	mov	r4, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f9b3 1048 	ldrsh.w	r1, [r3, #72]	@ 0x48
 8001190:	4b6d      	ldr	r3, [pc, #436]	@ (8001348 <_ZN8SPIComms5startEv+0x1d0>)
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	4620      	mov	r0, r4
 80011a2:	f000 fec5 	bl	8001f30 <_ZN15ModuleInterruptI8SPICommsEC1E9IRQn_TypePS0_MS0_FvvE>
    NssInterrupt = new ModuleInterrupt<SPIComms>(
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	63dc      	str	r4, [r3, #60]	@ 0x3c
    HAL_NVIC_SetPriority(irqNss, Config::spiNssIrqPriority, 0);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 80011b0:	2200      	movs	r2, #0
 80011b2:	2106      	movs	r1, #6
 80011b4:	4618      	mov	r0, r3
 80011b6:	f018 fa90 	bl	80196da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(irqNss);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 80011c0:	4618      	mov	r0, r3
 80011c2:	f018 faa4 	bl	801970e <HAL_NVIC_EnableIRQ>
    // Register the DMA Rx interrupt
    dmaRxInterrupt = new ModuleInterrupt<SPIComms>(
        irqDMArx,
        this,
        &SPIComms::handleRxInterrupt
    );
 80011c6:	2010      	movs	r0, #16
 80011c8:	f024 fe88 	bl	8025edc <_Znwj>
 80011cc:	4603      	mov	r3, r0
 80011ce:	461c      	mov	r4, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f9b3 104a 	ldrsh.w	r1, [r3, #74]	@ 0x4a
 80011d6:	4b5d      	ldr	r3, [pc, #372]	@ (800134c <_ZN8SPIComms5startEv+0x1d4>)
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	4620      	mov	r0, r4
 80011e8:	f000 fea2 	bl	8001f30 <_ZN15ModuleInterruptI8SPICommsEC1E9IRQn_TypePS0_MS0_FvvE>
    dmaRxInterrupt = new ModuleInterrupt<SPIComms>(
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	645c      	str	r4, [r3, #68]	@ 0x44
    HAL_NVIC_SetPriority(irqDMArx, Config::spiDmaRxIrqPriority, 0);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	@ 0x4a
 80011f6:	2200      	movs	r2, #0
 80011f8:	2105      	movs	r1, #5
 80011fa:	4618      	mov	r0, r3
 80011fc:	f018 fa6d 	bl	80196da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(irqDMArx);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	@ 0x4a
 8001206:	4618      	mov	r0, r3
 8001208:	f018 fa81 	bl	801970e <HAL_NVIC_EnableIRQ>
    // Register the DMA Tx interrupt
    dmaTxInterrupt = new ModuleInterrupt<SPIComms>(
        irqDMAtx,
        this,
        &SPIComms::handleTxInterrupt
    );
 800120c:	2010      	movs	r0, #16
 800120e:	f024 fe65 	bl	8025edc <_Znwj>
 8001212:	4603      	mov	r3, r0
 8001214:	461c      	mov	r4, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f9b3 104c 	ldrsh.w	r1, [r3, #76]	@ 0x4c
 800121c:	4b4c      	ldr	r3, [pc, #304]	@ (8001350 <_ZN8SPIComms5startEv+0x1d8>)
 800121e:	61bb      	str	r3, [r7, #24]
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	4620      	mov	r0, r4
 800122e:	f000 fe7f 	bl	8001f30 <_ZN15ModuleInterruptI8SPICommsEC1E9IRQn_TypePS0_MS0_FvvE>
    dmaTxInterrupt = new ModuleInterrupt<SPIComms>(
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	641c      	str	r4, [r3, #64]	@ 0x40
    HAL_NVIC_SetPriority(irqDMAtx, Config::spiDmaTxIrqPriority, 0); // TX needs higher priority than RX
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	@ 0x4c
 800123c:	2200      	movs	r2, #0
 800123e:	2104      	movs	r1, #4
 8001240:	4618      	mov	r0, r3
 8001242:	f018 fa4a 	bl	80196da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(irqDMAtx);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	@ 0x4c
 800124c:	4618      	mov	r0, r3
 800124e:	f018 fa5e 	bl	801970e <HAL_NVIC_EnableIRQ>

    // Initialize the data buffers
    std::fill(std::begin(ptrTxData->txBuffer), std::end(ptrTxData->txBuffer), 0);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001256:	4618      	mov	r0, r3
 8001258:	f000 fe96 	bl	8001f88 <_ZSt5beginIVhLj64EEPT_RAT0__S1_>
 800125c:	4604      	mov	r4, r0
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001262:	4618      	mov	r0, r3
 8001264:	f000 fe9b 	bl	8001f9e <_ZSt3endIVhLj64EEPT_RAT0__S1_>
 8001268:	4601      	mov	r1, r0
 800126a:	2300      	movs	r3, #0
 800126c:	623b      	str	r3, [r7, #32]
 800126e:	f107 0320 	add.w	r3, r7, #32
 8001272:	461a      	mov	r2, r3
 8001274:	4620      	mov	r0, r4
 8001276:	f000 fe9e 	bl	8001fb6 <_ZSt4fillIPVhiEvT_S2_RKT0_>
    std::fill(std::begin(ptrRxData->rxBuffer), std::end(ptrRxData->rxBuffer), 0);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800127e:	4618      	mov	r0, r3
 8001280:	f000 fe82 	bl	8001f88 <_ZSt5beginIVhLj64EEPT_RAT0__S1_>
 8001284:	4604      	mov	r4, r0
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800128a:	4618      	mov	r0, r3
 800128c:	f000 fe87 	bl	8001f9e <_ZSt3endIVhLj64EEPT_RAT0__S1_>
 8001290:	4601      	mov	r1, r0
 8001292:	2300      	movs	r3, #0
 8001294:	627b      	str	r3, [r7, #36]	@ 0x24
 8001296:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800129a:	461a      	mov	r2, r3
 800129c:	4620      	mov	r0, r4
 800129e:	f000 fe8a 	bl	8001fb6 <_ZSt4fillIPVhiEvT_S2_RKT0_>
    std::fill(std::begin(ptrRxDMABuffer->buffer[0].rxBuffer), std::end(ptrRxDMABuffer->buffer[0].rxBuffer), 0);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 fe6e 	bl	8001f88 <_ZSt5beginIVhLj64EEPT_RAT0__S1_>
 80012ac:	4604      	mov	r4, r0
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 fe73 	bl	8001f9e <_ZSt3endIVhLj64EEPT_RAT0__S1_>
 80012b8:	4601      	mov	r1, r0
 80012ba:	2300      	movs	r3, #0
 80012bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80012be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012c2:	461a      	mov	r2, r3
 80012c4:	4620      	mov	r0, r4
 80012c6:	f000 fe76 	bl	8001fb6 <_ZSt4fillIPVhiEvT_S2_RKT0_>
    std::fill(std::begin(ptrRxDMABuffer->buffer[1].rxBuffer), std::end(ptrRxDMABuffer->buffer[1].rxBuffer), 0);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	3340      	adds	r3, #64	@ 0x40
 80012d0:	4618      	mov	r0, r3
 80012d2:	f000 fe59 	bl	8001f88 <_ZSt5beginIVhLj64EEPT_RAT0__S1_>
 80012d6:	4604      	mov	r4, r0
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012dc:	3340      	adds	r3, #64	@ 0x40
 80012de:	4618      	mov	r0, r3
 80012e0:	f000 fe5d 	bl	8001f9e <_ZSt3endIVhLj64EEPT_RAT0__S1_>
 80012e4:	4601      	mov	r1, r0
 80012e6:	2300      	movs	r3, #0
 80012e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012ee:	461a      	mov	r2, r3
 80012f0:	4620      	mov	r0, r4
 80012f2:	f000 fe60 	bl	8001fb6 <_ZSt4fillIPVhiEvT_S2_RKT0_>

    ptrTxData->header = Config::pruData;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012fa:	4a16      	ldr	r2, [pc, #88]	@ (8001354 <_ZN8SPIComms5startEv+0x1dc>)
 80012fc:	601a      	str	r2, [r3, #0]

    // Start the multi-buffer DMA SPI communication
    dmaStatus = startMultiBufferDMASPI(
        (uint8_t*)ptrTxData->txBuffer,
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001302:	4619      	mov	r1, r3
        (uint8_t*)ptrTxData->txBuffer,
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001308:	4618      	mov	r0, r3
        (uint8_t*)ptrRxDMABuffer->buffer[0].rxBuffer,
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	461c      	mov	r4, r3
        (uint8_t*)ptrRxDMABuffer->buffer[1].rxBuffer,
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001314:	3340      	adds	r3, #64	@ 0x40
    dmaStatus = startMultiBufferDMASPI(
 8001316:	2240      	movs	r2, #64	@ 0x40
 8001318:	9201      	str	r2, [sp, #4]
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	4623      	mov	r3, r4
 800131e:	4602      	mov	r2, r0
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f000 f81b 	bl	800135c <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t>
 8001326:	4603      	mov	r3, r0
 8001328:	461a      	mov	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f883 2240 	strb.w	r2, [r3, #576]	@ 0x240
        Config::dataBuffSize
    );

    // Check for DMA initialization errors
    if (dmaStatus != HAL_OK) {
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f893 3240 	ldrb.w	r3, [r3, #576]	@ 0x240
 8001336:	2b00      	cmp	r3, #0
 8001338:	d002      	beq.n	8001340 <_ZN8SPIComms5startEv+0x1c8>
        printf("DMA SPI error\n");
 800133a:	4807      	ldr	r0, [pc, #28]	@ (8001358 <_ZN8SPIComms5startEv+0x1e0>)
 800133c:	f025 fce8 	bl	8026d10 <puts>
    }
}
 8001340:	bf00      	nop
 8001342:	3734      	adds	r7, #52	@ 0x34
 8001344:	46bd      	mov	sp, r7
 8001346:	bd90      	pop	{r4, r7, pc}
 8001348:	08001d7f 	.word	0x08001d7f
 800134c:	08001dd5 	.word	0x08001dd5
 8001350:	08001dad 	.word	0x08001dad
 8001354:	64617461 	.word	0x64617461
 8001358:	08027a8c 	.word	0x08027a8c

0800135c <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t>:

HAL_StatusTypeDef SPIComms::startMultiBufferDMASPI(uint8_t *pTxBuffer0, uint8_t *pTxBuffer1,
                                                   uint8_t *pRxBuffer0, uint8_t *pRxBuffer1,
                                                   uint16_t Size)
{
 800135c:	b590      	push	{r4, r7, lr}
 800135e:	b087      	sub	sp, #28
 8001360:	af02      	add	r7, sp, #8
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
 8001368:	603b      	str	r3, [r7, #0]
    /* Check Direction parameter */
    assert_param(IS_SPI_DIRECTION_2LINES(spiHandle.Init.Direction));

    if (spiHandle.State != HAL_SPI_STATE_READY)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	f893 30d1 	ldrb.w	r3, [r3, #209]	@ 0xd1
 8001370:	b2db      	uxtb	r3, r3
 8001372:	2b01      	cmp	r3, #1
 8001374:	bf14      	ite	ne
 8001376:	2301      	movne	r3, #1
 8001378:	2300      	moveq	r3, #0
 800137a:	b2db      	uxtb	r3, r3
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x28>
    {
        return HAL_BUSY;
 8001380:	2302      	movs	r3, #2
 8001382:	e13e      	b.n	8001602 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    if ((pTxBuffer0 == NULL) || (pRxBuffer0 == NULL) || (Size == 0UL))
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d005      	beq.n	8001396 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x3a>
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d002      	beq.n	8001396 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x3a>
 8001390:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x3e>
    {
        return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e133      	b.n	8001602 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    /* If secondary Tx or Rx buffer is not provided, use the primary buffer */
    if (pTxBuffer1 == NULL)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d101      	bne.n	80013a4 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x48>
    {
        pTxBuffer1 = pTxBuffer0;
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	607b      	str	r3, [r7, #4]
    }

    if (pRxBuffer1 == NULL)
 80013a4:	6a3b      	ldr	r3, [r7, #32]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d101      	bne.n	80013ae <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x52>
    {
        pRxBuffer1 = pRxBuffer0;
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	623b      	str	r3, [r7, #32]
    }

    /* Lock the process */
    __HAL_LOCK(&spiHandle);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d101      	bne.n	80013bc <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x60>
 80013b8:	2302      	movs	r3, #2
 80013ba:	e122      	b.n	8001602 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2201      	movs	r2, #1
 80013c0:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0

    /* Set the transaction information */
    spiHandle.State       = HAL_SPI_STATE_BUSY_TX_RX;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2205      	movs	r2, #5
 80013c8:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
    spiHandle.ErrorCode   = HAL_SPI_ERROR_NONE;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2200      	movs	r2, #0
 80013d0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    spiHandle.TxXferSize  = Size;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80013d8:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
    spiHandle.TxXferCount = Size;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80013e0:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
    spiHandle.RxXferSize  = Size;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80013e8:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8
    spiHandle.RxXferCount = Size;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80013f0:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba

    /* Init unused fields in handle to zero */
    spiHandle.RxISR       = NULL;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2200      	movs	r2, #0
 80013f8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
    spiHandle.TxISR       = NULL;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2200      	movs	r2, #0
 8001400:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

    /* Set Full-Duplex mode */
    SPI_2LINES(&spiHandle);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001408:	68da      	ldr	r2, [r3, #12]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800140e:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8001412:	60da      	str	r2, [r3, #12]

    /* Reset the Tx/Rx DMA bits */
    CLEAR_BIT(spiHandle.Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001418:	689a      	ldr	r2, [r3, #8]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800141e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8001422:	609a      	str	r2, [r3, #8]

    /* Adjust XferCount according to DMA alignment / Data size */
    if (spiHandle.Init.DataSize <= SPI_DATASIZE_8BIT)
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001428:	2b07      	cmp	r3, #7
 800142a:	d820      	bhi.n	800146e <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x112>
    {
        if (hdma_spi_tx.Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001432:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001436:	d109      	bne.n	800144c <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0xf0>
        {
            spiHandle.TxXferCount = (spiHandle.TxXferCount + 1UL) >> 1UL;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 800143e:	b29b      	uxth	r3, r3
 8001440:	3301      	adds	r3, #1
 8001442:	085b      	lsrs	r3, r3, #1
 8001444:	b29a      	uxth	r2, r3
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
        }
        if (hdma_spi_rx.Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8001452:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001456:	d12e      	bne.n	80014b6 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
        {
            spiHandle.RxXferCount = (spiHandle.RxXferCount + 1UL) >> 1UL;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 800145e:	b29b      	uxth	r3, r3
 8001460:	3301      	adds	r3, #1
 8001462:	085b      	lsrs	r3, r3, #1
 8001464:	b29a      	uxth	r2, r3
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
 800146c:	e023      	b.n	80014b6 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
        }
    }
    else if (spiHandle.Init.DataSize <= SPI_DATASIZE_16BIT)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001472:	2b0f      	cmp	r3, #15
 8001474:	d81f      	bhi.n	80014b6 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
    {
        if (hdma_spi_tx.Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800147c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001480:	d109      	bne.n	8001496 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x13a>
        {
            spiHandle.TxXferCount = (spiHandle.TxXferCount + 1UL) >> 1UL;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 8001488:	b29b      	uxth	r3, r3
 800148a:	3301      	adds	r3, #1
 800148c:	085b      	lsrs	r3, r3, #1
 800148e:	b29a      	uxth	r2, r3
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
        }
        if (hdma_spi_rx.Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 800149c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80014a0:	d109      	bne.n	80014b6 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
        {
            spiHandle.RxXferCount = (spiHandle.RxXferCount + 1UL) >> 1UL;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	3301      	adds	r3, #1
 80014ac:	085b      	lsrs	r3, r3, #1
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
        }
    }

    /* Configure Tx DMA with Multi-Buffer */
    hdma_spi_tx.XferHalfCpltCallback = NULL;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
    hdma_spi_tx.XferCpltCallback     = NULL;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    hdma_spi_tx.XferErrorCallback    = NULL;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124

    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_tx,
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f103 00d8 	add.w	r0, r3, #216	@ 0xd8
 80014d4:	68b9      	ldr	r1, [r7, #8]
                                                (uint32_t)pTxBuffer0,
                                                (uint32_t)&spiHandle.Instance->TXDR,
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014da:	3320      	adds	r3, #32
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_tx,
 80014dc:	461c      	mov	r4, r3
 80014de:	687a      	ldr	r2, [r7, #4]
                                                (uint32_t)pTxBuffer1,
                                                spiHandle.TxXferCount))
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 80014e6:	b29b      	uxth	r3, r3
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_tx,
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	4613      	mov	r3, r2
 80014ec:	4622      	mov	r2, r4
 80014ee:	f01a f8d1 	bl	801b694 <HAL_DMAEx_MultiBufferStart_IT>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	bf14      	ite	ne
 80014f8:	2301      	movne	r3, #1
 80014fa:	2300      	moveq	r3, #0
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d005      	beq.n	800150e <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x1b2>
    {
        __HAL_UNLOCK(&spiHandle);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	2200      	movs	r2, #0
 8001506:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e079      	b.n	8001602 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    /* Configure Rx DMA with Multi-Buffer */
    hdma_spi_rx.XferHalfCpltCallback = NULL;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2200      	movs	r2, #0
 8001512:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
    hdma_spi_rx.XferCpltCallback     = NULL;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2200      	movs	r2, #0
 800151a:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
    hdma_spi_rx.XferErrorCallback    = NULL;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2200      	movs	r2, #0
 8001522:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c

    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_rx,
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f503 70a8 	add.w	r0, r3, #336	@ 0x150
                                                (uint32_t)&spiHandle.Instance->RXDR,
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001530:	3330      	adds	r3, #48	@ 0x30
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_rx,
 8001532:	461c      	mov	r4, r3
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	6a39      	ldr	r1, [r7, #32]
                                                (uint32_t)pRxBuffer0,
                                                (uint32_t)pRxBuffer1,
                                                spiHandle.RxXferCount))
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 800153e:	b29b      	uxth	r3, r3
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_rx,
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	460b      	mov	r3, r1
 8001544:	4621      	mov	r1, r4
 8001546:	f01a f8a5 	bl	801b694 <HAL_DMAEx_MultiBufferStart_IT>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	bf14      	ite	ne
 8001550:	2301      	movne	r3, #1
 8001552:	2300      	moveq	r3, #0
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b00      	cmp	r3, #0
 8001558:	d00a      	beq.n	8001570 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x214>
    {
        (void)HAL_DMA_Abort(&hdma_spi_tx);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	33d8      	adds	r3, #216	@ 0xd8
 800155e:	4618      	mov	r0, r3
 8001560:	f018 fde8 	bl	801a134 <HAL_DMA_Abort>
        __HAL_UNLOCK(&spiHandle);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2200      	movs	r2, #0
 8001568:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
        return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e048      	b.n	8001602 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    /* Configure SPI TSIZE for full transfer or circular mode */
    if (hdma_spi_rx.Init.Mode == DMA_CIRCULAR || hdma_spi_tx.Init.Mode == DMA_CIRCULAR)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8001576:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800157a:	d005      	beq.n	8001588 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x22c>
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001582:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001586:	d108      	bne.n	800159a <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x23e>
    {
        MODIFY_REG(spiHandle.Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800158c:	6859      	ldr	r1, [r3, #4]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001592:	4b1e      	ldr	r3, [pc, #120]	@ (800160c <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2b0>)
 8001594:	400b      	ands	r3, r1
 8001596:	6053      	str	r3, [r2, #4]
 8001598:	e009      	b.n	80015ae <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x252>
    }
    else
    {
        MODIFY_REG(spiHandle.Instance->CR2, SPI_CR2_TSIZE, Size);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	4b1a      	ldr	r3, [pc, #104]	@ (800160c <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2b0>)
 80015a2:	4013      	ands	r3, r2
 80015a4:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80015aa:	430b      	orrs	r3, r1
 80015ac:	6053      	str	r3, [r2, #4]
    }

    /* Enable Tx and Rx DMA Requests */
    SET_BIT(spiHandle.Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015b2:	689a      	ldr	r2, [r3, #8]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015b8:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80015bc:	609a      	str	r2, [r3, #8]

    /* Enable SPI error interrupt */
    __HAL_SPI_ENABLE_IT(&spiHandle, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015c2:	691a      	ldr	r2, [r3, #16]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015c8:	f442 7258 	orr.w	r2, r2, #864	@ 0x360
 80015cc:	611a      	str	r2, [r3, #16]

    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(&spiHandle);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015d8:	f042 0201 	orr.w	r2, r2, #1
 80015dc:	601a      	str	r2, [r3, #0]

    if (spiHandle.Init.Mode == SPI_MODE_MASTER)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80015e6:	d107      	bne.n	80015f8 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x29c>
    {
        SET_BIT(spiHandle.Instance->CR1, SPI_CR1_CSTART);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80015f6:	601a      	str	r2, [r3, #0]
    }

    __HAL_UNLOCK(&spiHandle);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0

    return HAL_OK;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	bd90      	pop	{r4, r7, pc}
 800160a:	bf00      	nop
 800160c:	ffff0000 	.word	0xffff0000

08001610 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef>:

int SPIComms::DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001610:	b480      	push	{r7}
 8001612:	b087      	sub	sp, #28
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr_dma;
  int interrupt;

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800161e:	613b      	str	r3, [r7, #16]

  tmpisr_dma  = regs_dma->ISR;
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	60fb      	str	r3, [r7, #12]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a5a      	ldr	r2, [pc, #360]	@ (8001794 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x184>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d04a      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a58      	ldr	r2, [pc, #352]	@ (8001798 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x188>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d045      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a57      	ldr	r2, [pc, #348]	@ (800179c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x18c>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d040      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a55      	ldr	r2, [pc, #340]	@ (80017a0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x190>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d03b      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a54      	ldr	r2, [pc, #336]	@ (80017a4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x194>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d036      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a52      	ldr	r2, [pc, #328]	@ (80017a8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x198>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d031      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a51      	ldr	r2, [pc, #324]	@ (80017ac <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x19c>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d02c      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a4f      	ldr	r2, [pc, #316]	@ (80017b0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a0>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d027      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a4e      	ldr	r2, [pc, #312]	@ (80017b4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a4>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d022      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a4c      	ldr	r2, [pc, #304]	@ (80017b8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a8>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d01d      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a4b      	ldr	r2, [pc, #300]	@ (80017bc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1ac>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d018      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a49      	ldr	r2, [pc, #292]	@ (80017c0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b0>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d013      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a48      	ldr	r2, [pc, #288]	@ (80017c4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b4>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d00e      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a46      	ldr	r2, [pc, #280]	@ (80017c8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b8>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d009      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a45      	ldr	r2, [pc, #276]	@ (80017cc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1bc>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d004      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a43      	ldr	r2, [pc, #268]	@ (80017d0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1c0>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d101      	bne.n	80016ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xba>
 80016c6:	2301      	movs	r3, #1
 80016c8:	e000      	b.n	80016cc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xbc>
 80016ca:	2300      	movs	r3, #0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f000 8338 	beq.w	8001d42 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x732>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016d6:	f003 031f 	and.w	r3, r3, #31
 80016da:	2208      	movs	r2, #8
 80016dc:	409a      	lsls	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	4013      	ands	r3, r2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f000 809a 	beq.w	800181c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x20c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a29      	ldr	r2, [pc, #164]	@ (8001794 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x184>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d04a      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a28      	ldr	r2, [pc, #160]	@ (8001798 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x188>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d045      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a26      	ldr	r2, [pc, #152]	@ (800179c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x18c>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d040      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a25      	ldr	r2, [pc, #148]	@ (80017a0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x190>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d03b      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a23      	ldr	r2, [pc, #140]	@ (80017a4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x194>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d036      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a22      	ldr	r2, [pc, #136]	@ (80017a8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x198>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d031      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a20      	ldr	r2, [pc, #128]	@ (80017ac <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x19c>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d02c      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a1f      	ldr	r2, [pc, #124]	@ (80017b0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a0>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d027      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a1d      	ldr	r2, [pc, #116]	@ (80017b4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a4>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d022      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a1c      	ldr	r2, [pc, #112]	@ (80017b8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a8>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d01d      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a1a      	ldr	r2, [pc, #104]	@ (80017bc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1ac>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d018      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a19      	ldr	r2, [pc, #100]	@ (80017c0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b0>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d013      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a17      	ldr	r2, [pc, #92]	@ (80017c4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b4>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d00e      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a16      	ldr	r2, [pc, #88]	@ (80017c8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b8>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d009      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a14      	ldr	r2, [pc, #80]	@ (80017cc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1bc>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d004      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a13      	ldr	r2, [pc, #76]	@ (80017d0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1c0>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d125      	bne.n	80017d4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1c4>
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0304 	and.w	r3, r3, #4
 8001792:	e024      	b.n	80017de <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1ce>
 8001794:	40020010 	.word	0x40020010
 8001798:	40020028 	.word	0x40020028
 800179c:	40020040 	.word	0x40020040
 80017a0:	40020058 	.word	0x40020058
 80017a4:	40020070 	.word	0x40020070
 80017a8:	40020088 	.word	0x40020088
 80017ac:	400200a0 	.word	0x400200a0
 80017b0:	400200b8 	.word	0x400200b8
 80017b4:	40020410 	.word	0x40020410
 80017b8:	40020428 	.word	0x40020428
 80017bc:	40020440 	.word	0x40020440
 80017c0:	40020458 	.word	0x40020458
 80017c4:	40020470 	.word	0x40020470
 80017c8:	40020488 	.word	0x40020488
 80017cc:	400204a0 	.word	0x400204a0
 80017d0:	400204b8 	.word	0x400204b8
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0308 	and.w	r3, r3, #8
 80017de:	2b00      	cmp	r3, #0
 80017e0:	bf14      	ite	ne
 80017e2:	2301      	movne	r3, #1
 80017e4:	2300      	moveq	r3, #0
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d017      	beq.n	800181c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x20c>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f022 0204 	bic.w	r2, r2, #4
 80017fa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001800:	f003 031f 	and.w	r3, r3, #31
 8001804:	2208      	movs	r2, #8
 8001806:	409a      	lsls	r2, r3
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001810:	f043 0201 	orr.w	r2, r3, #1
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	655a      	str	r2, [r3, #84]	@ 0x54
        interrupt =  DMA_OTHER;
 8001818:	2303      	movs	r3, #3
 800181a:	617b      	str	r3, [r7, #20]
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001820:	f003 031f 	and.w	r3, r3, #31
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	fa22 f303 	lsr.w	r3, r2, r3
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	2b00      	cmp	r3, #0
 8001830:	d070      	beq.n	8001914 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x304>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a68      	ldr	r2, [pc, #416]	@ (80019d8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3c8>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d04a      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a66      	ldr	r2, [pc, #408]	@ (80019dc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3cc>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d045      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a65      	ldr	r2, [pc, #404]	@ (80019e0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d0>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d040      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a63      	ldr	r2, [pc, #396]	@ (80019e4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d4>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d03b      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a62      	ldr	r2, [pc, #392]	@ (80019e8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d8>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d036      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a60      	ldr	r2, [pc, #384]	@ (80019ec <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3dc>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d031      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a5f      	ldr	r2, [pc, #380]	@ (80019f0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e0>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d02c      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a5d      	ldr	r2, [pc, #372]	@ (80019f4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e4>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d027      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a5c      	ldr	r2, [pc, #368]	@ (80019f8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e8>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d022      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a5a      	ldr	r2, [pc, #360]	@ (80019fc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ec>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d01d      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a59      	ldr	r2, [pc, #356]	@ (8001a00 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f0>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d018      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a57      	ldr	r2, [pc, #348]	@ (8001a04 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f4>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d013      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a56      	ldr	r2, [pc, #344]	@ (8001a08 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f8>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d00e      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a54      	ldr	r2, [pc, #336]	@ (8001a0c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3fc>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d009      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a53      	ldr	r2, [pc, #332]	@ (8001a10 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x400>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d004      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a51      	ldr	r2, [pc, #324]	@ (8001a14 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x404>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d105      	bne.n	80018de <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2ce>
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018dc:	e003      	b.n	80018e6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2d6>
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2300      	movs	r3, #0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	bf14      	ite	ne
 80018ea:	2301      	movne	r3, #1
 80018ec:	2300      	moveq	r3, #0
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d00f      	beq.n	8001914 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x304>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018f8:	f003 031f 	and.w	r3, r3, #31
 80018fc:	2201      	movs	r2, #1
 80018fe:	409a      	lsls	r2, r3
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001908:	f043 0202 	orr.w	r2, r3, #2
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	655a      	str	r2, [r3, #84]	@ 0x54
        interrupt =  DMA_OTHER;
 8001910:	2303      	movs	r3, #3
 8001912:	617b      	str	r3, [r7, #20]
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001918:	f003 031f 	and.w	r3, r3, #31
 800191c:	2204      	movs	r2, #4
 800191e:	409a      	lsls	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4013      	ands	r3, r2
 8001924:	2b00      	cmp	r3, #0
 8001926:	f000 8092 	beq.w	8001a4e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x43e>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a2a      	ldr	r2, [pc, #168]	@ (80019d8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3c8>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d04a      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a28      	ldr	r2, [pc, #160]	@ (80019dc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3cc>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d045      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a27      	ldr	r2, [pc, #156]	@ (80019e0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d0>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d040      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a25      	ldr	r2, [pc, #148]	@ (80019e4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d4>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d03b      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a24      	ldr	r2, [pc, #144]	@ (80019e8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d8>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d036      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a22      	ldr	r2, [pc, #136]	@ (80019ec <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3dc>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d031      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a21      	ldr	r2, [pc, #132]	@ (80019f0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e0>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d02c      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a1f      	ldr	r2, [pc, #124]	@ (80019f4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e4>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d027      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a1e      	ldr	r2, [pc, #120]	@ (80019f8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e8>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d022      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a1c      	ldr	r2, [pc, #112]	@ (80019fc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ec>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d01d      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a1b      	ldr	r2, [pc, #108]	@ (8001a00 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f0>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d018      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a19      	ldr	r2, [pc, #100]	@ (8001a04 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f4>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d013      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a18      	ldr	r2, [pc, #96]	@ (8001a08 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f8>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d00e      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a16      	ldr	r2, [pc, #88]	@ (8001a0c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3fc>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d009      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a15      	ldr	r2, [pc, #84]	@ (8001a10 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x400>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d004      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a13      	ldr	r2, [pc, #76]	@ (8001a14 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x404>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d126      	bne.n	8001a18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x408>
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	e024      	b.n	8001a20 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x410>
 80019d6:	bf00      	nop
 80019d8:	40020010 	.word	0x40020010
 80019dc:	40020028 	.word	0x40020028
 80019e0:	40020040 	.word	0x40020040
 80019e4:	40020058 	.word	0x40020058
 80019e8:	40020070 	.word	0x40020070
 80019ec:	40020088 	.word	0x40020088
 80019f0:	400200a0 	.word	0x400200a0
 80019f4:	400200b8 	.word	0x400200b8
 80019f8:	40020410 	.word	0x40020410
 80019fc:	40020428 	.word	0x40020428
 8001a00:	40020440 	.word	0x40020440
 8001a04:	40020458 	.word	0x40020458
 8001a08:	40020470 	.word	0x40020470
 8001a0c:	40020488 	.word	0x40020488
 8001a10:	400204a0 	.word	0x400204a0
 8001a14:	400204b8 	.word	0x400204b8
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2300      	movs	r3, #0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	bf14      	ite	ne
 8001a24:	2301      	movne	r3, #1
 8001a26:	2300      	moveq	r3, #0
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d00f      	beq.n	8001a4e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x43e>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a32:	f003 031f 	and.w	r3, r3, #31
 8001a36:	2204      	movs	r2, #4
 8001a38:	409a      	lsls	r2, r3
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a42:	f043 0204 	orr.w	r2, r3, #4
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	655a      	str	r2, [r3, #84]	@ 0x54
        interrupt =  DMA_OTHER;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	617b      	str	r3, [r7, #20]
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a52:	f003 031f 	and.w	r3, r3, #31
 8001a56:	2210      	movs	r2, #16
 8001a58:	409a      	lsls	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d07f      	beq.n	8001b62 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x552>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a6f      	ldr	r2, [pc, #444]	@ (8001c24 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x614>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d04a      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a6d      	ldr	r2, [pc, #436]	@ (8001c28 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x618>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d045      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a6c      	ldr	r2, [pc, #432]	@ (8001c2c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x61c>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d040      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a6a      	ldr	r2, [pc, #424]	@ (8001c30 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x620>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d03b      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a69      	ldr	r2, [pc, #420]	@ (8001c34 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x624>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d036      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a67      	ldr	r2, [pc, #412]	@ (8001c38 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x628>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d031      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a66      	ldr	r2, [pc, #408]	@ (8001c3c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x62c>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d02c      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a64      	ldr	r2, [pc, #400]	@ (8001c40 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x630>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d027      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a63      	ldr	r2, [pc, #396]	@ (8001c44 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x634>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d022      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a61      	ldr	r2, [pc, #388]	@ (8001c48 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x638>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d01d      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a60      	ldr	r2, [pc, #384]	@ (8001c4c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x63c>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d018      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a5e      	ldr	r2, [pc, #376]	@ (8001c50 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x640>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d013      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a5d      	ldr	r2, [pc, #372]	@ (8001c54 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x644>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d00e      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a5b      	ldr	r2, [pc, #364]	@ (8001c58 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x648>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d009      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a5a      	ldr	r2, [pc, #360]	@ (8001c5c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x64c>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d004      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a58      	ldr	r2, [pc, #352]	@ (8001c60 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x650>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d105      	bne.n	8001b0e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4fe>
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0308 	and.w	r3, r3, #8
 8001b0c:	e004      	b.n	8001b18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x508>
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	bf14      	ite	ne
 8001b1c:	2301      	movne	r3, #1
 8001b1e:	2300      	moveq	r3, #0
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d01b      	beq.n	8001b5e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x54e>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b2a:	f003 031f 	and.w	r3, r3, #31
 8001b2e:	2210      	movs	r2, #16
 8001b30:	409a      	lsls	r2, r3
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	609a      	str	r2, [r3, #8]

        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	bf0c      	ite	eq
 8001b44:	2301      	moveq	r3, #1
 8001b46:	2300      	movne	r3, #0
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d007      	beq.n	8001b5e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x54e>
        {
          /* Disable the half transfer interrupt */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f022 0208 	bic.w	r2, r2, #8
 8001b5c:	601a      	str	r2, [r3, #0]
        }

      }
      interrupt = DMA_HALF_TRANSFER;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	617b      	str	r3, [r7, #20]
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b66:	f003 031f 	and.w	r3, r3, #31
 8001b6a:	2220      	movs	r2, #32
 8001b6c:	409a      	lsls	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	4013      	ands	r3, r2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f000 80e5 	beq.w	8001d42 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x732>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a29      	ldr	r2, [pc, #164]	@ (8001c24 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x614>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d04a      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a28      	ldr	r2, [pc, #160]	@ (8001c28 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x618>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d045      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a26      	ldr	r2, [pc, #152]	@ (8001c2c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x61c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d040      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a25      	ldr	r2, [pc, #148]	@ (8001c30 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x620>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d03b      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a23      	ldr	r2, [pc, #140]	@ (8001c34 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x624>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d036      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a22      	ldr	r2, [pc, #136]	@ (8001c38 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x628>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d031      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a20      	ldr	r2, [pc, #128]	@ (8001c3c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x62c>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d02c      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a1f      	ldr	r2, [pc, #124]	@ (8001c40 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x630>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d027      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a1d      	ldr	r2, [pc, #116]	@ (8001c44 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x634>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d022      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a1c      	ldr	r2, [pc, #112]	@ (8001c48 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x638>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d01d      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a1a      	ldr	r2, [pc, #104]	@ (8001c4c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x63c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d018      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a19      	ldr	r2, [pc, #100]	@ (8001c50 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x640>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d013      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a17      	ldr	r2, [pc, #92]	@ (8001c54 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x644>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d00e      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a16      	ldr	r2, [pc, #88]	@ (8001c58 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x648>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d009      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a14      	ldr	r2, [pc, #80]	@ (8001c5c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x64c>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d004      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a13      	ldr	r2, [pc, #76]	@ (8001c60 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x650>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d125      	bne.n	8001c64 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x654>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0310 	and.w	r3, r3, #16
 8001c22:	e024      	b.n	8001c6e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x65e>
 8001c24:	40020010 	.word	0x40020010
 8001c28:	40020028 	.word	0x40020028
 8001c2c:	40020040 	.word	0x40020040
 8001c30:	40020058 	.word	0x40020058
 8001c34:	40020070 	.word	0x40020070
 8001c38:	40020088 	.word	0x40020088
 8001c3c:	400200a0 	.word	0x400200a0
 8001c40:	400200b8 	.word	0x400200b8
 8001c44:	40020410 	.word	0x40020410
 8001c48:	40020428 	.word	0x40020428
 8001c4c:	40020440 	.word	0x40020440
 8001c50:	40020458 	.word	0x40020458
 8001c54:	40020470 	.word	0x40020470
 8001c58:	40020488 	.word	0x40020488
 8001c5c:	400204a0 	.word	0x400204a0
 8001c60:	400204b8 	.word	0x400204b8
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	bf14      	ite	ne
 8001c72:	2301      	movne	r3, #1
 8001c74:	2300      	moveq	r3, #0
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d062      	beq.n	8001d42 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x732>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c80:	f003 031f 	and.w	r3, r3, #31
 8001c84:	2220      	movs	r2, #32
 8001c86:	409a      	lsls	r2, r3
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	bf0c      	ite	eq
 8001c98:	2301      	moveq	r3, #1
 8001c9a:	2300      	movne	r3, #0
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d031      	beq.n	8001d06 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x6f6>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 0216 	bic.w	r2, r2, #22
 8001cb0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	695a      	ldr	r2, [r3, #20]
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001cc0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d103      	bne.n	8001cd2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x6c2>
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d007      	beq.n	8001ce2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x6d2>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 0208 	bic.w	r2, r2, #8
 8001ce0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ce6:	f003 031f 	and.w	r3, r3, #31
 8001cea:	223f      	movs	r2, #63	@ 0x3f
 8001cec:	409a      	lsls	r2, r3
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          interrupt = DMA_TRANSFER_COMPLETE;
 8001d02:	2302      	movs	r3, #2
 8001d04:	617b      	str	r3, [r7, #20]
        }

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	bf0c      	ite	eq
 8001d14:	2301      	moveq	r3, #1
 8001d16:	2300      	movne	r3, #0
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00f      	beq.n	8001d3e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x72e>
        {
          /* Disable the transfer complete interrupt */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f022 0210 	bic.w	r2, r2, #16
 8001d2c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }
        interrupt =  2;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return interrupt;
 8001d42:	697b      	ldr	r3, [r7, #20]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	371c      	adds	r7, #28
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <_ZN8SPIComms18getActiveDMAmemoryEP19__DMA_HandleTypeDef>:

int SPIComms::getActiveDMAmemory(DMA_HandleTypeDef *hdma)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
    DMA_Stream_TypeDef *dmaStream = (DMA_Stream_TypeDef *)hdma->Instance;
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	60fb      	str	r3, [r7, #12]

    return (dmaStream->CR & DMA_SxCR_CT) ? 1 : 0;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <_ZN8SPIComms18getActiveDMAmemoryEP19__DMA_HandleTypeDef+0x20>
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e000      	b.n	8001d72 <_ZN8SPIComms18getActiveDMAmemoryEP19__DMA_HandleTypeDef+0x22>
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3714      	adds	r7, #20
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <_ZN8SPIComms18handleNssInterruptEv>:

void SPIComms::handleNssInterrupt()
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
	// SPI packet has been fully received
	// Flag the copy the RX buffer if new WRITE data has been received
	// DMA copy is performed during the servo thread update
	if (newWriteData)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 3242 	ldrb.w	r3, [r3, #578]	@ 0x242
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d007      	beq.n	8001da0 <_ZN8SPIComms18handleNssInterruptEv+0x22>
	{
		copyRXbuffer = true;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
		newWriteData = false;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 2242 	strb.w	r2, [r3, #578]	@ 0x242
	}
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <_ZN8SPIComms17handleTxInterruptEv>:

void SPIComms::handleTxInterrupt()
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
	DMA_IRQHandler(&hdma_spi_tx);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	33d8      	adds	r3, #216	@ 0xd8
 8001db8:	4619      	mov	r1, r3
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7ff fc28 	bl	8001610 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef>
	HAL_NVIC_EnableIRQ(irqDMAtx);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	@ 0x4c
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f017 fca1 	bl	801970e <HAL_NVIC_EnableIRQ>
}
 8001dcc:	bf00      	nop
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <_ZN8SPIComms17handleRxInterruptEv>:

void SPIComms::handleRxInterrupt()
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
    // Handle the interrupt and determine the type of interrupt
    interruptType = DMA_IRQHandler(&hdma_spi_rx);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001de2:	4619      	mov	r1, r3
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff fc13 	bl	8001610 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef>
 8001dea:	4603      	mov	r3, r0
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f883 2241 	strb.w	r2, [r3, #577]	@ 0x241

    RxDMAmemoryIdx = getActiveDMAmemory(&hdma_spi_rx);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7ff ffa7 	bl	8001d50 <_ZN8SPIComms18getActiveDMAmemoryEP19__DMA_HandleTypeDef>
 8001e02:	4603      	mov	r3, r0
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    if (interruptType == DMA_HALF_TRANSFER) // Use the HTC interrupt to check the packet being received
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f893 3241 	ldrb.w	r3, [r3, #577]	@ 0x241
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d12d      	bne.n	8001e72 <_ZN8SPIComms17handleRxInterruptEv+0x9e>
    {
        switch (ptrRxDMABuffer->buffer[RxDMAmemoryIdx].header)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e20:	019b      	lsls	r3, r3, #6
 8001e22:	4413      	add	r3, r2
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a1c      	ldr	r2, [pc, #112]	@ (8001e98 <_ZN8SPIComms17handleRxInterruptEv+0xc4>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d003      	beq.n	8001e34 <_ZN8SPIComms17handleRxInterruptEv+0x60>
 8001e2c:	4a1b      	ldr	r2, [pc, #108]	@ (8001e9c <_ZN8SPIComms17handleRxInterruptEv+0xc8>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d007      	beq.n	8001e42 <_ZN8SPIComms17handleRxInterruptEv+0x6e>
 8001e32:	e017      	b.n	8001e64 <_ZN8SPIComms17handleRxInterruptEv+0x90>
        {
            case Config::pruRead:
                // No action needed for PRU_READ.
            	dataCallback(true);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3318      	adds	r3, #24
 8001e38:	2101      	movs	r1, #1
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f000 f8ca 	bl	8001fd4 <_ZNKSt8functionIFvbEEclEb>
                break;
 8001e40:	e01f      	b.n	8001e82 <_ZN8SPIComms17handleRxInterruptEv+0xae>

            case Config::pruWrite:
            	// Valid PRU_WRITE header, flag RX data transfer.
            	dataCallback(true);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	3318      	adds	r3, #24
 8001e46:	2101      	movs	r1, #1
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f000 f8c3 	bl	8001fd4 <_ZNKSt8functionIFvbEEclEb>
            	newWriteData = true;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2242 	strb.w	r2, [r3, #578]	@ 0x242
                RXbufferIdx = RxDMAmemoryIdx;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                break;
 8001e62:	e00e      	b.n	8001e82 <_ZN8SPIComms17handleRxInterruptEv+0xae>

            default:
            	dataCallback(false);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3318      	adds	r3, #24
 8001e68:	2100      	movs	r1, #0
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f000 f8b2 	bl	8001fd4 <_ZNKSt8functionIFvbEEclEb>
                break;
 8001e70:	e007      	b.n	8001e82 <_ZN8SPIComms17handleRxInterruptEv+0xae>
        }
    }
    else if (interruptType == DMA_TRANSFER_COMPLETE) // Transfer complete interrupt
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 3241 	ldrb.w	r3, [r3, #577]	@ 0x241
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d002      	beq.n	8001e82 <_ZN8SPIComms17handleRxInterruptEv+0xae>
    {
        // Placeholder for transfer complete handling if needed in the future.
    }
    else // Other interrupt sources
    {
        printf("DMA SPI Rx error\n");
 8001e7c:	4808      	ldr	r0, [pc, #32]	@ (8001ea0 <_ZN8SPIComms17handleRxInterruptEv+0xcc>)
 8001e7e:	f024 ff47 	bl	8026d10 <puts>
    }

    HAL_NVIC_EnableIRQ(irqDMArx);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	@ 0x4a
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f017 fc40 	bl	801970e <HAL_NVIC_EnableIRQ>
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	72656164 	.word	0x72656164
 8001e9c:	77726974 	.word	0x77726974
 8001ea0:	08027a9c 	.word	0x08027a9c

08001ea4 <_ZN8SPIComms5tasksEv>:

void SPIComms::tasks() {
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]

	if (copyRXbuffer == true)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d138      	bne.n	8001f28 <_ZN8SPIComms5tasksEv+0x84>
    {
	    uint8_t* srcBuffer = (uint8_t*)ptrRxDMABuffer->buffer[RXbufferIdx].rxBuffer;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001ec0:	019b      	lsls	r3, r3, #6
 8001ec2:	4413      	add	r3, r2
 8001ec4:	60fb      	str	r3, [r7, #12]
	    uint8_t* destBuffer = (uint8_t*)ptrRxData->rxBuffer;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eca:	60bb      	str	r3, [r7, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ecc:	b672      	cpsid	i
}
 8001ece:	bf00      	nop

	    __disable_irq();

	    dmaStatus = HAL_DMA_Start(
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f503 70e4 	add.w	r0, r3, #456	@ 0x1c8
 8001ed6:	68f9      	ldr	r1, [r7, #12]
 8001ed8:	68ba      	ldr	r2, [r7, #8]
 8001eda:	2340      	movs	r3, #64	@ 0x40
 8001edc:	f018 f80a 	bl	8019ef4 <HAL_DMA_Start>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f883 2240 	strb.w	r2, [r3, #576]	@ 0x240
									(uint32_t)srcBuffer,
									(uint32_t)destBuffer,
									Config::dataBuffSize
	    							);

	    if (dmaStatus == HAL_OK) {
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 3240 	ldrb.w	r3, [r3, #576]	@ 0x240
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d10d      	bne.n	8001f10 <_ZN8SPIComms5tasksEv+0x6c>
	        dmaStatus = HAL_DMA_PollForTransfer(&hdma_memtomem, HAL_DMA_FULL_TRANSFER, HAL_MAX_DELAY);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8001efa:	f04f 32ff 	mov.w	r2, #4294967295
 8001efe:	2100      	movs	r1, #0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f018 fc35 	bl	801a770 <HAL_DMA_PollForTransfer>
 8001f06:	4603      	mov	r3, r0
 8001f08:	461a      	mov	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f883 2240 	strb.w	r2, [r3, #576]	@ 0x240
  __ASM volatile ("cpsie i" : : : "memory");
 8001f10:	b662      	cpsie	i
}
 8001f12:	bf00      	nop
	    }

	    __enable_irq();
	    HAL_DMA_Abort(&hdma_memtomem);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f018 f90a 	bl	801a134 <HAL_DMA_Abort>
		copyRXbuffer = false;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
}
 8001f28:	bf00      	nop
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <_ZN15ModuleInterruptI8SPICommsEC1E9IRQn_TypePS0_MS0_FvvE>:
private:
	DerivedModule* InterruptOwnerPtr;                                // Pointer to the owning module
	void (DerivedModule::*InterruptHandler)();                       // Member function pointer for the ISR
	
public:
    ModuleInterrupt(IRQn_Type interruptNumber, DerivedModule* ownerPtr, void (DerivedModule::*handler)())
 8001f30:	b082      	sub	sp, #8
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b084      	sub	sp, #16
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	60f8      	str	r0, [r7, #12]
 8001f3a:	607a      	str	r2, [r7, #4]
 8001f3c:	61fb      	str	r3, [r7, #28]
 8001f3e:	460b      	mov	r3, r1
 8001f40:	817b      	strh	r3, [r7, #10]
        : InterruptOwnerPtr(ownerPtr), InterruptHandler(handler)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f001 fec7 	bl	8003cd8 <_ZN9InterruptC1Ev>
 8001f4a:	4a0e      	ldr	r2, [pc, #56]	@ (8001f84 <_ZN15ModuleInterruptI8SPICommsEC1E9IRQn_TypePS0_MS0_FvvE+0x54>)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	3308      	adds	r3, #8
 8001f5a:	f107 021c 	add.w	r2, r7, #28
 8001f5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f62:	e883 0003 	stmia.w	r3, {r0, r1}
    {
        // Register the interrupt
        Interrupt::Register(interruptNumber, this);
 8001f66:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	4611      	mov	r1, r2
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f001 fec2 	bl	8003cf8 <_ZN9Interrupt8RegisterEiPS_>
    }
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4618      	mov	r0, r3
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001f80:	b002      	add	sp, #8
 8001f82:	4770      	bx	lr
 8001f84:	080287c4 	.word	0x080287c4

08001f88 <_ZSt5beginIVhLj64EEPT_RAT0__S1_>:
   *  @param  __arr  Array.
   */
  template<typename _Tp, size_t _Nm>
    [[__nodiscard__]]
    inline _GLIBCXX14_CONSTEXPR _Tp*
    begin(_Tp (&__arr)[_Nm]) noexcept
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
    { return __arr; }
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4618      	mov	r0, r3
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <_ZSt3endIVhLj64EEPT_RAT0__S1_>:
   *  @param  __arr  Array.
   */
  template<typename _Tp, size_t _Nm>
    [[__nodiscard__]]
    inline _GLIBCXX14_CONSTEXPR _Tp*
    end(_Tp (&__arr)[_Nm]) noexcept
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
    { return __arr + _Nm; }
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	3340      	adds	r3, #64	@ 0x40
 8001faa:	4618      	mov	r0, r3
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <_ZSt4fillIPVhiEvT_S2_RKT0_>:
   *  to @c memset or @c wmemset.
  */
  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b084      	sub	sp, #16
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	60f8      	str	r0, [r7, #12]
 8001fbe:	60b9      	str	r1, [r7, #8]
 8001fc0:	607a      	str	r2, [r7, #4]
      // concept requirements
      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
				  _ForwardIterator>)
      __glibcxx_requires_valid_range(__first, __last);

      std::__fill_a(__first, __last, __value);
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	68b9      	ldr	r1, [r7, #8]
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	f000 f82d 	bl	8002026 <_ZSt8__fill_aIPVhiEvT_S2_RKT0_>
    }
 8001fcc:	bf00      	nop
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <_ZNKSt8functionIFvbEEclEb>:
       *
       *  The function call operator invokes the target function object
       *  stored by `this`.
       */
      _Res
      operator()(_ArgTypes... __args) const
 8001fd4:	b5b0      	push	{r4, r5, r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	460b      	mov	r3, r1
 8001fde:	70fb      	strb	r3, [r7, #3]
      {
	if (_M_empty())
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7fe fe73 	bl	8000cce <_ZNKSt14_Function_base8_M_emptyEv>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <_ZNKSt8functionIFvbEEclEb+0x1e>
	  __throw_bad_function_call();
 8001fee:	f023 ff9e 	bl	8025f2e <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68dc      	ldr	r4, [r3, #12]
 8001ff6:	687d      	ldr	r5, [r7, #4]
 8001ff8:	1cfb      	adds	r3, r7, #3
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f000 f808 	bl	8002010 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8002000:	4603      	mov	r3, r0
 8002002:	4619      	mov	r1, r3
 8002004:	4628      	mov	r0, r5
 8002006:	47a0      	blx	r4
 8002008:	bf00      	nop
      }
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bdb0      	pop	{r4, r5, r7, pc}

08002010 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4618      	mov	r0, r3
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <_ZSt8__fill_aIPVhiEvT_S2_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 8002026:	b580      	push	{r7, lr}
 8002028:	b084      	sub	sp, #16
 800202a:	af00      	add	r7, sp, #0
 800202c:	60f8      	str	r0, [r7, #12]
 800202e:	60b9      	str	r1, [r7, #8]
 8002030:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	68b9      	ldr	r1, [r7, #8]
 8002036:	68f8      	ldr	r0, [r7, #12]
 8002038:	f000 f804 	bl	8002044 <_ZSt9__fill_a1IPVhiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_>
 800203c:	bf00      	nop
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <_ZSt9__fill_a1IPVhiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 8002044:	b480      	push	{r7}
 8002046:	b087      	sub	sp, #28
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __value;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first)
 8002056:	e006      	b.n	8002066 <_ZSt9__fill_a1IPVhiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_+0x22>
	*__first = __tmp;
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	b2da      	uxtb	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	701a      	strb	r2, [r3, #0]
      for (; __first != __last; ++__first)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	3301      	adds	r3, #1
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	429a      	cmp	r2, r3
 800206c:	d1f4      	bne.n	8002058 <_ZSt9__fill_a1IPVhiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_+0x14>
    }
 800206e:	bf00      	nop
 8002070:	bf00      	nop
 8002072:	371c      	adds	r7, #28
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <_Z41__static_initialization_and_destruction_0ii>:
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d107      	bne.n	800209c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002092:	4293      	cmp	r3, r2
 8002094:	d102      	bne.n	800209c <_Z41__static_initialization_and_destruction_0ii+0x20>
__attribute__((section(".DmaSection"))) volatile DMA_RxBuffer_t rxDMABuffer;
 8002096:	4803      	ldr	r0, [pc, #12]	@ (80020a4 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8002098:	f7fe fe46 	bl	8000d28 <_ZN14DMA_RxBuffer_tC1Ev>
}
 800209c:	bf00      	nop
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	30000000 	.word	0x30000000

080020a8 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv>:

    void ISR_Handler(void) {
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
        if (this->InterruptOwnerPtr && this->InterruptHandler) {
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d02a      	beq.n	800210e <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x66>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d107      	bne.n	80020d0 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x28>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x28>
 80020cc:	2301      	movs	r3, #1
 80020ce:	e000      	b.n	80020d2 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x2a>
 80020d0:	2300      	movs	r3, #0
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d01b      	beq.n	800210e <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x66>
            (this->InterruptOwnerPtr->*InterruptHandler)(); // Call the member function of the owner
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d102      	bne.n	80020e8 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x40>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	e00a      	b.n	80020fe <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x56>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	68d2      	ldr	r2, [r2, #12]
 80020f0:	1052      	asrs	r2, r2, #1
 80020f2:	4413      	add	r3, r2
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6892      	ldr	r2, [r2, #8]
 80020fa:	4413      	add	r3, r2
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	6852      	ldr	r2, [r2, #4]
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	68c9      	ldr	r1, [r1, #12]
 8002106:	1049      	asrs	r1, r1, #1
 8002108:	440a      	add	r2, r1
 800210a:	4610      	mov	r0, r2
 800210c:	4798      	blx	r3
        }
    }
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <_GLOBAL__sub_I_rxDMABuffer>:
 8002116:	b580      	push	{r7, lr}
 8002118:	af00      	add	r7, sp, #0
 800211a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800211e:	2001      	movs	r0, #1
 8002120:	f7ff ffac 	bl	800207c <_Z41__static_initialization_and_destruction_0ii>
 8002124:	bd80      	pop	{r7, pc}
	...

08002128 <_ZN14CommsInterfaceC1Ev>:
#include "commsInterface.h"

CommsInterface::CommsInterface() {
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4618      	mov	r0, r3
 8002134:	f00e fd26 	bl	8010b84 <_ZN6ModuleC1Ev>
 8002138:	4a06      	ldr	r2, [pc, #24]	@ (8002154 <_ZN14CommsInterfaceC1Ev+0x2c>)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	3318      	adds	r3, #24
 8002142:	4618      	mov	r0, r3
 8002144:	f000 f839 	bl	80021ba <_ZNSt8functionIFvbEEC1Ev>
    // Constructor implementation
}
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	08028800 	.word	0x08028800

08002158 <_ZN14CommsInterface4initEv>:

void CommsInterface::init(){}
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <_ZN14CommsInterface5startEv>:
void CommsInterface::start(){}
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <_ZN14CommsInterface5tasksEv>:
void CommsInterface::tasks(){}
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	461a      	mov	r2, r3
 80021a0:	2300      	movs	r3, #0
 80021a2:	6013      	str	r3, [r2, #0]
 80021a4:	6053      	str	r3, [r2, #4]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4618      	mov	r0, r3
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <_ZNSt8functionIFvbEEC1Ev>:
      function() noexcept
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	461a      	mov	r2, r3
 80021c6:	2300      	movs	r3, #0
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	6053      	str	r3, [r2, #4]
 80021cc:	6093      	str	r3, [r2, #8]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ffdf 	bl	8002194 <_ZNSt14_Function_baseC1Ev>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	60da      	str	r2, [r3, #12]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <_ZN14SoftwareSerial4idleEv>:
    bool listen(void);
    void tickerHandler(void);

    void enableTx(void);
    void enableRx(void);
    void idle() {__NOP();}
 80021e6:	b480      	push	{r7}
 80021e8:	b083      	sub	sp, #12
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
 80021ee:	bf00      	nop
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <_ZN14SoftwareSerialC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_>:
#include "SoftwareSerial.h"
#include <cstdint>



SoftwareSerial::SoftwareSerial(std::string tx, std::string rx)
 80021fc:	b590      	push	{r4, r7, lr}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	4618      	mov	r0, r3
 800220c:	f023 ff3b 	bl	8026086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	3318      	adds	r3, #24
 8002214:	4618      	mov	r0, r3
 8002216:	f023 ff36 	bl	8026086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
{
    if (!tx.empty()) TXportAndPin = tx;
 800221a:	68b8      	ldr	r0, [r7, #8]
 800221c:	f024 f819 	bl	8026252 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
 8002220:	4603      	mov	r3, r0
 8002222:	f083 0301 	eor.w	r3, r3, #1
 8002226:	b2db      	uxtb	r3, r3
 8002228:	2b00      	cmp	r3, #0
 800222a:	d004      	beq.n	8002236 <_ZN14SoftwareSerialC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x3a>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	68b9      	ldr	r1, [r7, #8]
 8002230:	4618      	mov	r0, r3
 8002232:	f023 ffb0 	bl	8026196 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
    if (!rx.empty()) RXportAndPin = rx;
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f024 f80b 	bl	8026252 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
 800223c:	4603      	mov	r3, r0
 800223e:	f083 0301 	eor.w	r3, r3, #1
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b00      	cmp	r3, #0
 8002246:	d005      	beq.n	8002254 <_ZN14SoftwareSerialC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x58>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	3318      	adds	r3, #24
 800224c:	6879      	ldr	r1, [r7, #4]
 800224e:	4618      	mov	r0, r3
 8002250:	f023 ffa1 	bl	8026196 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
    halfDuplex = !TXportAndPin.compare(RXportAndPin);
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	3318      	adds	r3, #24
 800225a:	4619      	mov	r1, r3
 800225c:	4610      	mov	r0, r2
 800225e:	f024 f91d 	bl	802649c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	bf0c      	ite	eq
 8002268:	2301      	moveq	r3, #1
 800226a:	2300      	movne	r3, #0
 800226c:	b2da      	uxtb	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82

    if(halfDuplex)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 800227a:	2b00      	cmp	r3, #0
 800227c:	d015      	beq.n	80022aa <_ZN14SoftwareSerialC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0xae>
    {
        this->rxpin = new Pin(RXportAndPin,1);
 800227e:	2040      	movs	r0, #64	@ 0x40
 8002280:	f023 fe2c 	bl	8025edc <_Znwj>
 8002284:	4603      	mov	r3, r0
 8002286:	461c      	mov	r4, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	3318      	adds	r3, #24
 800228c:	2201      	movs	r2, #1
 800228e:	4619      	mov	r1, r3
 8002290:	4620      	mov	r0, r4
 8002292:	f001 fab1 	bl	80037f8 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	635c      	str	r4, [r3, #52]	@ 0x34
        this->txpin = this->rxpin;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	631a      	str	r2, [r3, #48]	@ 0x30
        setTX();
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f000 f848 	bl	8002338 <_ZN14SoftwareSerial5setTXEv>
 80022a8:	e020      	b.n	80022ec <_ZN14SoftwareSerialC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0xf0>
    }
    else
    {
        this->txpin = new Pin(TXportAndPin,0);
 80022aa:	2040      	movs	r0, #64	@ 0x40
 80022ac:	f023 fe16 	bl	8025edc <_Znwj>
 80022b0:	4603      	mov	r3, r0
 80022b2:	461c      	mov	r4, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2200      	movs	r2, #0
 80022b8:	4619      	mov	r1, r3
 80022ba:	4620      	mov	r0, r4
 80022bc:	f001 fa9c 	bl	80037f8 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	631c      	str	r4, [r3, #48]	@ 0x30
        setTX();
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f000 f837 	bl	8002338 <_ZN14SoftwareSerial5setTXEv>

        this->rxpin = new Pin(RXportAndPin,1);
 80022ca:	2040      	movs	r0, #64	@ 0x40
 80022cc:	f023 fe06 	bl	8025edc <_Znwj>
 80022d0:	4603      	mov	r3, r0
 80022d2:	461c      	mov	r4, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	3318      	adds	r3, #24
 80022d8:	2201      	movs	r2, #1
 80022da:	4619      	mov	r1, r3
 80022dc:	4620      	mov	r0, r4
 80022de:	f001 fa8b 	bl	80037f8 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	635c      	str	r4, [r3, #52]	@ 0x34
        setRX();
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f000 f839 	bl	800235e <_ZN14SoftwareSerial5setRXEv>
    }
    
    qin = 0;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
    qout = 0;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
    activeTx = false;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    activeRx = false;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
}
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	4618      	mov	r0, r3
 8002310:	3714      	adds	r7, #20
 8002312:	46bd      	mov	sp, r7
 8002314:	bd90      	pop	{r4, r7, pc}

08002316 <_ZN14SoftwareSerial5beginEi>:


void SoftwareSerial::begin(int baudrate)
{
 8002316:	b480      	push	{r7}
 8002318:	b083      	sub	sp, #12
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
 800231e:	6039      	str	r1, [r7, #0]
    #ifdef FORCE_BAUD_RATE
    baudrate = FORCE_BAUD_RATE;     // 19200 fastest stable baud rate
 8002320:	f644 4390 	movw	r3, #19600	@ 0x4c90
 8002324:	603b      	str	r3, [r7, #0]
    #endif
    baudRate = baudrate;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	67da      	str	r2, [r3, #124]	@ 0x7c
    //ticker.attach_us(callback(this, &SoftwareSerial::tickerHandler), 1000000.0 / (baudRate * 3.0));
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <_ZN14SoftwareSerial5setTXEv>:
    //ticker.attach_us(callback(this, &SoftwareSerial::tickerHandler), 1000000.0 / (baudrate * 3.0));
    this->baudRate = baudrate;
}

void SoftwareSerial::setTX(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
    // the pin would be output low for a short while before switching to
    // output hihg. Now, it is input with pullup for a short while, which
    // is fine. With inverse logic, either order is fine.

    //this->txpin->set(1);                  // works for LPC1768 but not STM32
    this->txpin->setAsOutput();
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002344:	4618      	mov	r0, r3
 8002346:	f001 fc18 	bl	8003b7a <_ZN3Pin11setAsOutputEv>
    this->txpin->set(1);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234e:	2101      	movs	r1, #1
 8002350:	4618      	mov	r0, r3
 8002352:	f001 fbfb 	bl	8003b4c <_ZN3Pin3setEb>
}
 8002356:	bf00      	nop
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <_ZN14SoftwareSerial5setRXEv>:

void SoftwareSerial::setRX(void)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b082      	sub	sp, #8
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]

    this->rxpin->setAsInput();
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800236a:	4618      	mov	r0, r3
 800236c:	f001 fc16 	bl	8003b9c <_ZN3Pin10setAsInputEv>
    this->rxpin->setPullUp();
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002374:	4618      	mov	r0, r3
 8002376:	f001 fc22 	bl	8003bbe <_ZN3Pin9setPullUpEv>
}
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <_ZN14SoftwareSerial7setRXTXEb>:

void SoftwareSerial::setRXTX(bool input)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b082      	sub	sp, #8
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
 800238a:	460b      	mov	r3, r1
 800238c:	70fb      	strb	r3, [r7, #3]
    if (halfDuplex)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8002394:	2b00      	cmp	r3, #0
 8002396:	d01f      	beq.n	80023d8 <_ZN14SoftwareSerial7setRXTXEb+0x56>
    {
        if (input)
 8002398:	78fb      	ldrb	r3, [r7, #3]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d010      	beq.n	80023c0 <_ZN14SoftwareSerial7setRXTXEb+0x3e>
        {
            setRX();
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7ff ffdd 	bl	800235e <_ZN14SoftwareSerial5setRXEv>
            rxBitCnt = -1;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f04f 32ff 	mov.w	r2, #4294967295
 80023aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
            rxTickCnt = 2;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2202      	movs	r2, #2
 80023b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            activeRx = true;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
                setTX();
                activeRx = false;
            }
        }
    }
}
 80023be:	e00b      	b.n	80023d8 <_ZN14SoftwareSerial7setRXTXEb+0x56>
            if (activeRx)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d006      	beq.n	80023d8 <_ZN14SoftwareSerial7setRXTXEb+0x56>
                setTX();
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7ff ffb4 	bl	8002338 <_ZN14SoftwareSerial5setTXEv>
                activeRx = false;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
}
 80023d8:	bf00      	nop
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <_ZN14SoftwareSerial6listenEv>:

bool SoftwareSerial::listen()
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
    if (rxpin != nullptr)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d005      	beq.n	80023fc <_ZN14SoftwareSerial6listenEv+0x1c>
    {
        setRXTX(true);
 80023f0:	2101      	movs	r1, #1
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f7ff ffc5 	bl	8002382 <_ZN14SoftwareSerial7setRXTXEb>
        return true;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e000      	b.n	80023fe <_ZN14SoftwareSerial6listenEv+0x1e>
    }
    return false;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <_ZN14SoftwareSerial13tickerHandlerEv>:
{
    
}

void SoftwareSerial::tickerHandler(void)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b082      	sub	sp, #8
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
    if (activeTx) this->send();
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8002414:	2b00      	cmp	r3, #0
 8002416:	d002      	beq.n	800241e <_ZN14SoftwareSerial13tickerHandlerEv+0x18>
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 f80c 	bl	8002436 <_ZN14SoftwareSerial4sendEv>
    if (activeRx) this->receive();
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8002424:	2b00      	cmp	r3, #0
 8002426:	d002      	beq.n	800242e <_ZN14SoftwareSerial13tickerHandlerEv+0x28>
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 f867 	bl	80024fc <_ZN14SoftwareSerial7receiveEv>
}
 800242e:	bf00      	nop
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <_ZN14SoftwareSerial4sendEv>:

void SoftwareSerial::send(void)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b082      	sub	sp, #8
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
    if (--txTickCnt <= 0)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002444:	1e5a      	subs	r2, r3, #1
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002452:	2b00      	cmp	r3, #0
 8002454:	bfd4      	ite	le
 8002456:	2301      	movle	r3, #1
 8002458:	2300      	movgt	r3, #0
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2b00      	cmp	r3, #0
 800245e:	d049      	beq.n	80024f4 <_ZN14SoftwareSerial4sendEv+0xbe>
    {
        if (txBitCnt++ < TX_BITS)   // count out the bits in the txBuffer
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002466:	1c59      	adds	r1, r3, #1
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
 800246e:	2b09      	cmp	r3, #9
 8002470:	bfd4      	ite	le
 8002472:	2301      	movle	r3, #1
 8002474:	2300      	movgt	r3, #0
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b00      	cmp	r3, #0
 800247a:	d01b      	beq.n	80024b4 <_ZN14SoftwareSerial4sendEv+0x7e>
        {
            this->txpin->set(txBuffer & 0x01);   // set output equal to the LSB in txBuffer
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	bf14      	ite	ne
 800248e:	2301      	movne	r3, #1
 8002490:	2300      	moveq	r3, #0
 8002492:	b2db      	uxtb	r3, r3
 8002494:	4619      	mov	r1, r3
 8002496:	4610      	mov	r0, r2
 8002498:	f001 fb58 	bl	8003b4c <_ZN3Pin3setEb>
            txBuffer >>= 1;                     // shift txBuffer to right
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024a2:	105a      	asrs	r2, r3, #1
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
            txTickCnt = Config::oversample;     // reset the tick counter
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2203      	movs	r2, #3
 80024ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
                }
                activeTx = false;
            }
        }
    }
}
 80024b2:	e01f      	b.n	80024f4 <_ZN14SoftwareSerial4sendEv+0xbe>
            txTickCnt = 1;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
            if (outputPending)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f893 3083 	ldrb.w	r3, [r3, #131]	@ 0x83
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d004      	beq.n	80024d0 <_ZN14SoftwareSerial4sendEv+0x9a>
                activeTx = false;    // output pending allow new byte to be written to txBuffer from write()
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
}
 80024ce:	e011      	b.n	80024f4 <_ZN14SoftwareSerial4sendEv+0xbe>
            else if (txBitCnt > 10 + Config::oversample*5)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024d6:	2b19      	cmp	r3, #25
 80024d8:	d90c      	bls.n	80024f4 <_ZN14SoftwareSerial4sendEv+0xbe>
                if (halfDuplex)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d003      	beq.n	80024ec <_ZN14SoftwareSerial4sendEv+0xb6>
                    setRXTX(true);        // switch to receive mode
 80024e4:	2101      	movs	r1, #1
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7ff ff4b 	bl	8002382 <_ZN14SoftwareSerial7setRXTXEb>
                activeTx = false;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
}
 80024f4:	bf00      	nop
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <_ZN14SoftwareSerial7receiveEv>:

void SoftwareSerial::receive()
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
    if (--rxTickCnt <= 0)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800250a:	1e5a      	subs	r2, r3, #1
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002518:	2b00      	cmp	r3, #0
 800251a:	bfd4      	ite	le
 800251c:	2301      	movle	r3, #1
 800251e:	2300      	movgt	r3, #0
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d06f      	beq.n	8002606 <_ZN14SoftwareSerial7receiveEv+0x10a>
    {
        uint8_t inbit = this->rxpin->get();   // read the rx line
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800252a:	4618      	mov	r0, r3
 800252c:	f001 faf8 	bl	8003b20 <_ZNK3Pin3getEv>
 8002530:	4603      	mov	r3, r0
 8002532:	73fb      	strb	r3, [r7, #15]
        if (rxBitCnt == -1)                 // waiting for start bit
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800253a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800253e:	d114      	bne.n	800256a <_ZN14SoftwareSerial7receiveEv+0x6e>
        {
            if (!inbit)
 8002540:	7bfb      	ldrb	r3, [r7, #15]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10c      	bne.n	8002560 <_ZN14SoftwareSerial7receiveEv+0x64>
            {
                // got a start bit
                rxBitCnt = 0;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
                rxTickCnt = Config::oversample + 1;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2204      	movs	r2, #4
 8002552:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                rxBuffer = 0;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
            if (inbit)  rxBuffer |= 0x80;
            rxBitCnt++;
            rxTickCnt = Config::oversample;
        }
    }
}
 800255e:	e052      	b.n	8002606 <_ZN14SoftwareSerial7receiveEv+0x10a>
                rxTickCnt = 1;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
}
 8002568:	e04d      	b.n	8002606 <_ZN14SoftwareSerial7receiveEv+0x10a>
        else if (rxBitCnt >= RX_BITS)     // full byte has been read
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002570:	2b07      	cmp	r3, #7
 8002572:	dd2b      	ble.n	80025cc <_ZN14SoftwareSerial7receiveEv+0xd0>
            inbuf[qin] = rxBuffer;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8002580:	4619      	mov	r1, r3
 8002582:	b2d2      	uxtb	r2, r2
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	440b      	add	r3, r1
 8002588:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
			if ( ++qin >= IN_BUF_SIZE )
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8002592:	3301      	adds	r3, #1
 8002594:	b2da      	uxtb	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 80025a2:	2b3f      	cmp	r3, #63	@ 0x3f
 80025a4:	bf8c      	ite	hi
 80025a6:	2301      	movhi	r3, #1
 80025a8:	2300      	movls	r3, #0
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d003      	beq.n	80025b8 <_ZN14SoftwareSerial7receiveEv+0xbc>
				qin = 0;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
            rxTickCnt = 1;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            rxBitCnt = -1;              // flag waiting for start bit
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f04f 32ff 	mov.w	r2, #4294967295
 80025c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
}
 80025ca:	e01c      	b.n	8002606 <_ZN14SoftwareSerial7receiveEv+0x10a>
            rxBuffer >>= 1;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80025d2:	105a      	asrs	r2, r3, #1
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
            if (inbit)  rxBuffer |= 0x80;
 80025da:	7bfb      	ldrb	r3, [r7, #15]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d007      	beq.n	80025f0 <_ZN14SoftwareSerial7receiveEv+0xf4>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80025e6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
            rxBitCnt++;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025f6:	1c5a      	adds	r2, r3, #1
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
            rxTickCnt = Config::oversample;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2203      	movs	r2, #3
 8002602:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
}
 8002606:	bf00      	nop
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <_ZN14SoftwareSerial9availableEv>:


int SoftwareSerial::available()
{
 800260e:	b480      	push	{r7}
 8002610:	b083      	sub	sp, #12
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
    return (qout - qin);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800261c:	461a      	mov	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8002624:	1ad3      	subs	r3, r2, r3
}
 8002626:	4618      	mov	r0, r3
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <_ZN14SoftwareSerial5writeEi>:
    }
}


void SoftwareSerial::write(int b)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b082      	sub	sp, #8
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
 800263a:	6039      	str	r1, [r7, #0]
    outputPending = true;               // notify ticker handler that there are more bytes to transmit after current
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
    while (activeTx)                    // wait for current transmission to complete
 8002644:	e002      	b.n	800264c <_ZN14SoftwareSerial5writeEi+0x1a>
    {
        idle();
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7ff fdcd 	bl	80021e6 <_ZN14SoftwareSerial4idleEv>
    while (activeTx)                    // wait for current transmission to complete
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1f7      	bne.n	8002646 <_ZN14SoftwareSerial5writeEi+0x14>
    }
    txBuffer =      (b << 1) | 0x200;   // add start and stop bits
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    txBitCnt =      0;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    txTickCnt =     Config::oversample;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2203      	movs	r2, #3
 8002670:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    if (halfDuplex) setRXTX(false);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 800267a:	2b00      	cmp	r3, #0
 800267c:	d003      	beq.n	8002686 <_ZN14SoftwareSerial5writeEi+0x54>
 800267e:	2100      	movs	r1, #0
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f7ff fe7e 	bl	8002382 <_ZN14SoftwareSerial7setRXTXEb>
    outputPending = false;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
    activeTx =      true;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
}
 8002696:	bf00      	nop
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <_ZN14SoftwareSerial4readEv>:

int16_t SoftwareSerial::read()
{
 800269e:	b480      	push	{r7}
 80026a0:	b085      	sub	sp, #20
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
    if (qout == qin) return -1;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 2079 	ldrb.w	r2, [r3, #121]	@ 0x79
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d102      	bne.n	80026bc <_ZN14SoftwareSerial4readEv+0x1e>
 80026b6:	f04f 33ff 	mov.w	r3, #4294967295
 80026ba:	e020      	b.n	80026fe <_ZN14SoftwareSerial4readEv+0x60>

    char d = inbuf[qout] & 0xFF;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80026c2:	461a      	mov	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4413      	add	r3, r2
 80026c8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80026cc:	73fb      	strb	r3, [r7, #15]

    if ( ++qout >= IN_BUF_SIZE ) {qout = 0;}
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80026d4:	3301      	adds	r3, #1
 80026d6:	b2da      	uxtb	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80026e4:	2b3f      	cmp	r3, #63	@ 0x3f
 80026e6:	bf8c      	ite	hi
 80026e8:	2301      	movhi	r3, #1
 80026ea:	2300      	movls	r3, #0
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <_ZN14SoftwareSerial4readEv+0x5c>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
    
    return d;
 80026fa:	7bfb      	ldrb	r3, [r7, #15]
 80026fc:	b21b      	sxth	r3, r3
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3714      	adds	r7, #20
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr

0800270a <_ZN14TMC2208Stepper8CHOPCONFEv>:
*/
void TMC2208Stepper::CHOPCONF(uint32_t input) {
    CHOPCONF_register.sr = input;
    write(CHOPCONF_register.address, CHOPCONF_register.sr);
}
uint32_t TMC2208Stepper::CHOPCONF() {
 800270a:	b580      	push	{r7, lr}
 800270c:	b082      	sub	sp, #8
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
    return read(CHOPCONF_register.address);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	3304      	adds	r3, #4
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	216c      	movs	r1, #108	@ 0x6c
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	4798      	blx	r3
 8002720:	4603      	mov	r3, r0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <_ZN14TMC2208Stepper4toffEh>:
void TMC2208Stepper::toff   ( uint8_t  B )  { SET_REG(toff);    }
 800272a:	b580      	push	{r7, lr}
 800272c:	b082      	sub	sp, #8
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
 8002732:	460b      	mov	r3, r1
 8002734:	70fb      	strb	r3, [r7, #3]
 8002736:	78fb      	ldrb	r3, [r7, #3]
 8002738:	f003 030f 	and.w	r3, r3, #15
 800273c:	b2d9      	uxtb	r1, r3
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	f892 302b 	ldrb.w	r3, [r2, #43]	@ 0x2b
 8002744:	f361 0303 	bfi	r3, r1, #0, #4
 8002748:	f882 302b 	strb.w	r3, [r2, #43]	@ 0x2b
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	f8d2 202b 	ldr.w	r2, [r2, #43]	@ 0x2b
 8002758:	216c      	movs	r1, #108	@ 0x6c
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	4798      	blx	r3
 800275e:	bf00      	nop
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <_ZN14TMC2208Stepper5hstrtEh>:
void TMC2208Stepper::hstrt  ( uint8_t  B )  { SET_REG(hstrt);   }
 8002766:	b580      	push	{r7, lr}
 8002768:	b082      	sub	sp, #8
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
 800276e:	460b      	mov	r3, r1
 8002770:	70fb      	strb	r3, [r7, #3]
 8002772:	78fb      	ldrb	r3, [r7, #3]
 8002774:	f003 0307 	and.w	r3, r3, #7
 8002778:	b2d9      	uxtb	r1, r3
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	f892 302b 	ldrb.w	r3, [r2, #43]	@ 0x2b
 8002780:	f361 1306 	bfi	r3, r1, #4, #3
 8002784:	f882 302b 	strb.w	r3, [r2, #43]	@ 0x2b
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	f8d2 202b 	ldr.w	r2, [r2, #43]	@ 0x2b
 8002794:	216c      	movs	r1, #108	@ 0x6c
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	4798      	blx	r3
 800279a:	bf00      	nop
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <_ZN14TMC2208Stepper4hendEh>:
void TMC2208Stepper::hend   ( uint8_t  B )  { SET_REG(hend);    }
 80027a2:	b590      	push	{r4, r7, lr}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
 80027aa:	460b      	mov	r3, r1
 80027ac:	70fb      	strb	r3, [r7, #3]
 80027ae:	78fb      	ldrb	r3, [r7, #3]
 80027b0:	f003 030f 	and.w	r3, r3, #15
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f002 0101 	and.w	r1, r2, #1
 80027bc:	01cc      	lsls	r4, r1, #7
 80027be:	f893 102b 	ldrb.w	r1, [r3, #43]	@ 0x2b
 80027c2:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 80027c6:	4608      	mov	r0, r1
 80027c8:	4621      	mov	r1, r4
 80027ca:	4301      	orrs	r1, r0
 80027cc:	f883 102b 	strb.w	r1, [r3, #43]	@ 0x2b
 80027d0:	0852      	lsrs	r2, r2, #1
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	f002 0207 	and.w	r2, r2, #7
 80027d8:	f002 0007 	and.w	r0, r2, #7
 80027dc:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80027e0:	f022 0207 	bic.w	r2, r2, #7
 80027e4:	4611      	mov	r1, r2
 80027e6:	4602      	mov	r2, r0
 80027e8:	430a      	orrs	r2, r1
 80027ea:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	f8d2 202b 	ldr.w	r2, [r2, #43]	@ 0x2b
 80027fa:	216c      	movs	r1, #108	@ 0x6c
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	4798      	blx	r3
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	bd90      	pop	{r4, r7, pc}

08002808 <_ZN14TMC2208Stepper3tblEh>:
void TMC2208Stepper::tbl    ( uint8_t  B )  { SET_REG(tbl);     }
 8002808:	b590      	push	{r4, r7, lr}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	460b      	mov	r3, r1
 8002812:	70fb      	strb	r3, [r7, #3]
 8002814:	78fb      	ldrb	r3, [r7, #3]
 8002816:	f003 0303 	and.w	r3, r3, #3
 800281a:	b2da      	uxtb	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f002 0101 	and.w	r1, r2, #1
 8002822:	01cc      	lsls	r4, r1, #7
 8002824:	f893 102c 	ldrb.w	r1, [r3, #44]	@ 0x2c
 8002828:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 800282c:	4608      	mov	r0, r1
 800282e:	4621      	mov	r1, r4
 8002830:	4301      	orrs	r1, r0
 8002832:	f883 102c 	strb.w	r1, [r3, #44]	@ 0x2c
 8002836:	0852      	lsrs	r2, r2, #1
 8002838:	b2d2      	uxtb	r2, r2
 800283a:	f002 0201 	and.w	r2, r2, #1
 800283e:	f002 0001 	and.w	r0, r2, #1
 8002842:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 8002846:	f022 0201 	bic.w	r2, r2, #1
 800284a:	4611      	mov	r1, r2
 800284c:	4602      	mov	r2, r0
 800284e:	430a      	orrs	r2, r1
 8002850:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	f8d2 202b 	ldr.w	r2, [r2, #43]	@ 0x2b
 8002860:	216c      	movs	r1, #108	@ 0x6c
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	4798      	blx	r3
 8002866:	bf00      	nop
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	bd90      	pop	{r4, r7, pc}

0800286e <_ZN14TMC2208Stepper6vsenseEb>:
void TMC2208Stepper::vsense ( bool     B )  { SET_REG(vsense);  }
 800286e:	b580      	push	{r7, lr}
 8002870:	b082      	sub	sp, #8
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
 8002876:	460b      	mov	r3, r1
 8002878:	70fb      	strb	r3, [r7, #3]
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	f892 302d 	ldrb.w	r3, [r2, #45]	@ 0x2d
 8002880:	78f9      	ldrb	r1, [r7, #3]
 8002882:	f361 0341 	bfi	r3, r1, #1, #1
 8002886:	f882 302d 	strb.w	r3, [r2, #45]	@ 0x2d
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	f8d2 202b 	ldr.w	r2, [r2, #43]	@ 0x2b
 8002896:	216c      	movs	r1, #108	@ 0x6c
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	4798      	blx	r3
 800289c:	bf00      	nop
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <_ZN14TMC2208Stepper4mresEh>:
void TMC2208Stepper::mres   ( uint8_t  B )  { SET_REG(mres);    }
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	460b      	mov	r3, r1
 80028ae:	70fb      	strb	r3, [r7, #3]
 80028b0:	78fb      	ldrb	r3, [r7, #3]
 80028b2:	f003 030f 	and.w	r3, r3, #15
 80028b6:	b2d9      	uxtb	r1, r3
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	f892 302e 	ldrb.w	r3, [r2, #46]	@ 0x2e
 80028be:	f361 0303 	bfi	r3, r1, #0, #4
 80028c2:	f882 302e 	strb.w	r3, [r2, #46]	@ 0x2e
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	f8d2 202b 	ldr.w	r2, [r2, #43]	@ 0x2b
 80028d2:	216c      	movs	r1, #108	@ 0x6c
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	4798      	blx	r3
 80028d8:	bf00      	nop
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <_ZN14TMC2208Stepper5hstrtEv>:
void TMC2208Stepper::dedge  ( bool     B )  { SET_REG(dedge);   }
void TMC2208Stepper::diss2g ( bool     B )  { SET_REG(diss2g);  }
void TMC2208Stepper::diss2vs( bool     B )  { SET_REG(diss2vs); }

uint8_t TMC2208Stepper::toff()      { TMC2208_n::CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.toff;     }
uint8_t TMC2208Stepper::hstrt()     { TMC2208_n::CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.hstrt;    }
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	2300      	movs	r3, #0
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f7ff ff0c 	bl	800270a <_ZN14TMC2208Stepper8CHOPCONFEv>
 80028f2:	4603      	mov	r3, r0
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	7b3b      	ldrb	r3, [r7, #12]
 80028f8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	4618      	mov	r0, r3
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <_ZN14TMC2208Stepper4hendEv>:
uint8_t TMC2208Stepper::hend()      { TMC2208_n::CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.hend;     }
 8002906:	b580      	push	{r7, lr}
 8002908:	b084      	sub	sp, #16
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
 800290e:	2300      	movs	r3, #0
 8002910:	60fb      	str	r3, [r7, #12]
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f7ff fef9 	bl	800270a <_ZN14TMC2208Stepper8CHOPCONFEv>
 8002918:	4603      	mov	r3, r0
 800291a:	60fb      	str	r3, [r7, #12]
 800291c:	89bb      	ldrh	r3, [r7, #12]
 800291e:	f3c3 13c3 	ubfx	r3, r3, #7, #4
 8002922:	b2db      	uxtb	r3, r3
 8002924:	4618      	mov	r0, r3
 8002926:	3710      	adds	r7, #16
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <_ZN14TMC2208Stepper3tblEv>:
uint8_t TMC2208Stepper::tbl()       { TMC2208_n::CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.tbl;      }
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	2300      	movs	r3, #0
 8002936:	60fb      	str	r3, [r7, #12]
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f7ff fee6 	bl	800270a <_ZN14TMC2208Stepper8CHOPCONFEv>
 800293e:	4603      	mov	r3, r0
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f3c3 33c1 	ubfx	r3, r3, #15, #2
 8002948:	b2db      	uxtb	r3, r3
 800294a:	4618      	mov	r0, r3
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <_ZN14TMC2208Stepper6vsenseEv>:
bool    TMC2208Stepper::vsense()    { TMC2208_n::CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.vsense;   }
 8002952:	b580      	push	{r7, lr}
 8002954:	b084      	sub	sp, #16
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
 800295a:	2300      	movs	r3, #0
 800295c:	60fb      	str	r3, [r7, #12]
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7ff fed3 	bl	800270a <_ZN14TMC2208Stepper8CHOPCONFEv>
 8002964:	4603      	mov	r3, r0
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	7bbb      	ldrb	r3, [r7, #14]
 800296a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800296e:	b2db      	uxtb	r3, r3
 8002970:	4618      	mov	r0, r3
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <_ZN14TMC2208Stepper4mresEv>:
uint8_t TMC2208Stepper::mres()      { TMC2208_n::CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.mres;     }
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	2300      	movs	r3, #0
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f7ff fec0 	bl	800270a <_ZN14TMC2208Stepper8CHOPCONFEv>
 800298a:	4603      	mov	r3, r0
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	7bfb      	ldrb	r3, [r7, #15]
 8002990:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002994:	b2db      	uxtb	r3, r3
 8002996:	4618      	mov	r0, r3
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <_ZN14TMC2209Stepper5seminEh>:
void TMC2209Stepper::COOLCONF(uint16_t input) {
	COOLCONF_register.sr = input;
	write(COOLCONF_register.address, COOLCONF_register.sr);
}

void TMC2209Stepper::semin(	uint8_t B )	{ SET_REG(semin);	}
 800299e:	b580      	push	{r7, lr}
 80029a0:	b082      	sub	sp, #8
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
 80029a6:	460b      	mov	r3, r1
 80029a8:	70fb      	strb	r3, [r7, #3]
 80029aa:	78fb      	ldrb	r3, [r7, #3]
 80029ac:	f003 030f 	and.w	r3, r3, #15
 80029b0:	b2d9      	uxtb	r1, r3
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80029b8:	f361 0303 	bfi	r3, r1, #0, #4
 80029bc:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	f8b2 2069 	ldrh.w	r2, [r2, #105]	@ 0x69
 80029ce:	b292      	uxth	r2, r2
 80029d0:	2142      	movs	r1, #66	@ 0x42
 80029d2:	4798      	blx	r3
 80029d4:	bf00      	nop
 80029d6:	3708      	adds	r7, #8
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <_ZN14TMC2209Stepper5semaxEh>:
void TMC2209Stepper::seup(	uint8_t B )	{ SET_REG(seup);	}
void TMC2209Stepper::semax(	uint8_t B )	{ SET_REG(semax);	}
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	460b      	mov	r3, r1
 80029e6:	70fb      	strb	r3, [r7, #3]
 80029e8:	78fb      	ldrb	r3, [r7, #3]
 80029ea:	f003 030f 	and.w	r3, r3, #15
 80029ee:	b2d9      	uxtb	r1, r3
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 80029f6:	f361 0303 	bfi	r3, r1, #0, #4
 80029fa:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	f8b2 2069 	ldrh.w	r2, [r2, #105]	@ 0x69
 8002a0c:	b292      	uxth	r2, r2
 8002a0e:	2142      	movs	r1, #66	@ 0x42
 8002a10:	4798      	blx	r3
 8002a12:	bf00      	nop
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <_ZN14TMC2209Stepper4sednEh>:
void TMC2209Stepper::sedn(	uint8_t B )	{ SET_REG(sedn);	}
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b082      	sub	sp, #8
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
 8002a22:	460b      	mov	r3, r1
 8002a24:	70fb      	strb	r3, [r7, #3]
 8002a26:	78fb      	ldrb	r3, [r7, #3]
 8002a28:	f003 0303 	and.w	r3, r3, #3
 8002a2c:	b2d9      	uxtb	r1, r3
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8002a34:	f361 1346 	bfi	r3, r1, #5, #2
 8002a38:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	f8b2 2069 	ldrh.w	r2, [r2, #105]	@ 0x69
 8002a4a:	b292      	uxth	r2, r2
 8002a4c:	2142      	movs	r1, #66	@ 0x42
 8002a4e:	4798      	blx	r3
 8002a50:	bf00      	nop
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <_ZN14TMC2208Stepper10DRV_STATUSEv>:
bool TMC2130Stepper::s2gb()         { GET_REG(TMC2130_n, s2gb);         }
bool TMC2130Stepper::ola()          { GET_REG(TMC2130_n, ola);          }
bool TMC2130Stepper::olb()          { GET_REG(TMC2130_n, olb);          }
bool TMC2130Stepper::stst()         { GET_REG(TMC2130_n, stst);         }
*/
uint32_t TMC2208Stepper::DRV_STATUS() {
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
    return read(TMC2208_n::DRV_STATUS_t::address);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	3304      	adds	r3, #4
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	216f      	movs	r1, #111	@ 0x6f
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	4798      	blx	r3
 8002a6e:	4603      	mov	r3, r0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3708      	adds	r7, #8
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <_ZN14TMC2208Stepper14en_spreadCycleEb>:
    write(GCONF_register.address, GCONF_register.sr);
}

void TMC2208Stepper::I_scale_analog(bool B)     { SET_REG(i_scale_analog);  }
void TMC2208Stepper::internal_Rsense(bool B)    { SET_REG(internal_rsense); }
void TMC2208Stepper::en_spreadCycle(bool B)     { SET_REG(en_spreadcycle);  }
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	460b      	mov	r3, r1
 8002a82:	70fb      	strb	r3, [r7, #3]
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8002a8a:	78f9      	ldrb	r1, [r7, #3]
 8002a8c:	f361 0382 	bfi	r3, r1, #2, #1
 8002a90:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	6a12      	ldr	r2, [r2, #32]
 8002a9e:	f3c2 2209 	ubfx	r2, r2, #8, #10
 8002aa2:	b292      	uxth	r2, r2
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	4798      	blx	r3
 8002aaa:	bf00      	nop
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <_ZN14TMC2208Stepper11pdn_disableEb>:
void TMC2208Stepper::shaft(bool B)              { SET_REG(shaft);           }
void TMC2208Stepper::index_otpw(bool B)         { SET_REG(index_otpw);      }
void TMC2208Stepper::index_step(bool B)         { SET_REG(index_step);      }
void TMC2208Stepper::pdn_disable(bool B)        { SET_REG(pdn_disable);     }
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b082      	sub	sp, #8
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
 8002aba:	460b      	mov	r3, r1
 8002abc:	70fb      	strb	r3, [r7, #3]
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8002ac4:	78f9      	ldrb	r1, [r7, #3]
 8002ac6:	f361 1386 	bfi	r3, r1, #6, #1
 8002aca:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	6a12      	ldr	r2, [r2, #32]
 8002ad8:	f3c2 2209 	ubfx	r2, r2, #8, #10
 8002adc:	b292      	uxth	r2, r2
 8002ade:	2100      	movs	r1, #0
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	4798      	blx	r3
 8002ae4:	bf00      	nop
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <_ZN14TMC2208Stepper16mstep_reg_selectEb>:
void TMC2208Stepper::mstep_reg_select(bool B)   { SET_REG(mstep_reg_select);}
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	460b      	mov	r3, r1
 8002af6:	70fb      	strb	r3, [r7, #3]
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8002afe:	78f9      	ldrb	r1, [r7, #3]
 8002b00:	f361 13c7 	bfi	r3, r1, #7, #1
 8002b04:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	6a12      	ldr	r2, [r2, #32]
 8002b12:	f3c2 2209 	ubfx	r2, r2, #8, #10
 8002b16:	b292      	uxth	r2, r2
 8002b18:	2100      	movs	r1, #0
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	4798      	blx	r3
 8002b1e:	bf00      	nop
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <_ZN10TMCStepper5iholdEh>:
void TMCStepper::IHOLD_IRUN(uint32_t input) {
    IHOLD_IRUN_register.sr = input;
    write(IHOLD_IRUN_register.address, IHOLD_IRUN_register.sr);
}

void    TMCStepper::ihold(uint8_t B)        { SET_REG(ihold);       }
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b082      	sub	sp, #8
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
 8002b2e:	460b      	mov	r3, r1
 8002b30:	70fb      	strb	r3, [r7, #3]
 8002b32:	78fb      	ldrb	r3, [r7, #3]
 8002b34:	f003 031f 	and.w	r3, r3, #31
 8002b38:	b2d9      	uxtb	r1, r3
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	7913      	ldrb	r3, [r2, #4]
 8002b3e:	f361 0304 	bfi	r3, r1, #0, #5
 8002b42:	7113      	strb	r3, [r2, #4]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	6852      	ldr	r2, [r2, #4]
 8002b4e:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8002b52:	2110      	movs	r1, #16
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	4798      	blx	r3
 8002b58:	bf00      	nop
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <_ZN10TMCStepper4irunEh>:
void    TMCStepper::irun(uint8_t B)         { SET_REG(irun);        }
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	460b      	mov	r3, r1
 8002b6a:	70fb      	strb	r3, [r7, #3]
 8002b6c:	78fb      	ldrb	r3, [r7, #3]
 8002b6e:	f003 031f 	and.w	r3, r3, #31
 8002b72:	b2d9      	uxtb	r1, r3
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	7953      	ldrb	r3, [r2, #5]
 8002b78:	f361 0304 	bfi	r3, r1, #0, #5
 8002b7c:	7153      	strb	r3, [r2, #5]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	6852      	ldr	r2, [r2, #4]
 8002b88:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8002b8c:	2110      	movs	r1, #16
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	4798      	blx	r3
 8002b92:	bf00      	nop
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <_ZN10TMCStepper10iholddelayEh>:
void    TMCStepper::iholddelay(uint8_t B)   { SET_REG(iholddelay);  }
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b082      	sub	sp, #8
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	70fb      	strb	r3, [r7, #3]
 8002ba6:	78fb      	ldrb	r3, [r7, #3]
 8002ba8:	f003 030f 	and.w	r3, r3, #15
 8002bac:	b2d9      	uxtb	r1, r3
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	7993      	ldrb	r3, [r2, #6]
 8002bb2:	f361 0303 	bfi	r3, r1, #0, #4
 8002bb6:	7193      	strb	r3, [r2, #6]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	6852      	ldr	r2, [r2, #4]
 8002bc2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8002bc6:	2110      	movs	r1, #16
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	4798      	blx	r3
 8002bcc:	bf00      	nop
 8002bce:	3708      	adds	r7, #8
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <_ZN14TMC2208Stepper13pwm_autoscaleEb>:
}

void TMC2208Stepper::pwm_ofs		( uint8_t B ) { PWMCONF_register.pwm_ofs = B; write(PWMCONF_register.address, PWMCONF_register.sr); }
void TMC2208Stepper::pwm_grad		( uint8_t B ) { PWMCONF_register.pwm_grad = B; write(PWMCONF_register.address, PWMCONF_register.sr); }
void TMC2208Stepper::pwm_freq		( uint8_t B ) { PWMCONF_register.pwm_freq = B; write(PWMCONF_register.address, PWMCONF_register.sr); }
void TMC2208Stepper::pwm_autoscale	( bool 	  B ) { PWMCONF_register.pwm_autoscale = B; write(PWMCONF_register.address, PWMCONF_register.sr); }
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	460b      	mov	r3, r1
 8002bde:	70fb      	strb	r3, [r7, #3]
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	f892 3031 	ldrb.w	r3, [r2, #49]	@ 0x31
 8002be6:	78f9      	ldrb	r1, [r7, #3]
 8002be8:	f361 0382 	bfi	r3, r1, #2, #1
 8002bec:	f882 3031 	strb.w	r3, [r2, #49]	@ 0x31
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	f8d2 202f 	ldr.w	r2, [r2, #47]	@ 0x2f
 8002bfc:	2170      	movs	r1, #112	@ 0x70
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	4798      	blx	r3
 8002c02:	bf00      	nop
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
	...

08002c0c <_ZN10TMCStepperC1Ef>:
        int16_t cur_b();

		//Timer tmcTimer;

    protected:
        TMCStepper(float RS) : Rsense(RS) {};
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	ed87 0a00 	vstr	s0, [r7]
 8002c18:	4a10      	ldr	r2, [pc, #64]	@ (8002c5c <_ZN10TMCStepperC1Ef+0x50>)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	601a      	str	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	3304      	adds	r3, #4
 8002c22:	2100      	movs	r1, #0
 8002c24:	460a      	mov	r2, r1
 8002c26:	801a      	strh	r2, [r3, #0]
 8002c28:	460a      	mov	r2, r1
 8002c2a:	709a      	strb	r2, [r3, #2]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	71da      	strb	r2, [r3, #7]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	811a      	strh	r2, [r3, #8]
 8002c38:	7a9a      	ldrb	r2, [r3, #10]
 8002c3a:	f022 020f 	bic.w	r2, r2, #15
 8002c3e:	729a      	strb	r2, [r3, #10]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	60da      	str	r2, [r3, #12]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8002c4c:	611a      	str	r2, [r3, #16]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4618      	mov	r0, r3
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr
 8002c5c:	0802886c 	.word	0x0802886c

08002c60 <_ZN14TMC2208StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_fh>:
#include "TMCStepper.h"
#include "TMC_MACROS.h"

// Protected
// addr needed for TMC2209
TMC2208Stepper::TMC2208Stepper(std::string SWRXpin, std::string SWTXpin, float RS, uint8_t addr) :
 8002c60:	b590      	push	{r4, r7, lr}
 8002c62:	b095      	sub	sp, #84	@ 0x54
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6178      	str	r0, [r7, #20]
 8002c68:	6139      	str	r1, [r7, #16]
 8002c6a:	60fa      	str	r2, [r7, #12]
 8002c6c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002c70:	71fb      	strb	r3, [r7, #7]
    SWRXpin(SWRXpin),
    SWTXpin(SWRXpin),
    TMCStepper(RS),
    //RXTX_pin(SW_RX_pin == SW_TX_pin ? SW_RX_pin : 0),
    slave_address(addr)
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	ed97 0a02 	vldr	s0, [r7, #8]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7ff ffc7 	bl	8002c0c <_ZN10TMCStepperC1Ef>
 8002c7e:	4a47      	ldr	r2, [pc, #284]	@ (8002d9c <_ZN14TMC2208StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_fh+0x13c>)
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	2200      	movs	r2, #0
 8002c88:	831a      	strh	r2, [r3, #24]
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	4a44      	ldr	r2, [pc, #272]	@ (8002da0 <_ZN14TMC2208StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_fh+0x140>)
 8002c8e:	61da      	str	r2, [r3, #28]
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 2020 	strb.w	r2, [r3, #32]
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8002ca0:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8002ca4:	f022 0203 	bic.w	r2, r2, #3
 8002ca8:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 8002cb4:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8002cb8:	f022 020f 	bic.w	r2, r2, #15
 8002cbc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    SWTXpin(SWRXpin),
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	3334      	adds	r3, #52	@ 0x34
 8002d20:	6939      	ldr	r1, [r7, #16]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f023 fbe5 	bl	80264f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
    SWRXpin(SWRXpin),
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	334c      	adds	r3, #76	@ 0x4c
 8002d2c:	6939      	ldr	r1, [r7, #16]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f023 fbdf 	bl	80264f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
    slave_address(addr)
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	79fa      	ldrb	r2, [r7, #7]
 8002d38:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
    {
        SoftwareSerial *SWSerialObj = new SoftwareSerial(SWRXpin, SWTXpin);
 8002d3c:	209c      	movs	r0, #156	@ 0x9c
 8002d3e:	f023 f8cd 	bl	8025edc <_Znwj>
 8002d42:	4603      	mov	r3, r0
 8002d44:	461c      	mov	r4, r3
 8002d46:	f107 031c 	add.w	r3, r7, #28
 8002d4a:	6939      	ldr	r1, [r7, #16]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f023 fbd0 	bl	80264f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8002d52:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002d56:	68f9      	ldr	r1, [r7, #12]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f023 fbca 	bl	80264f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8002d5e:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8002d62:	f107 031c 	add.w	r3, r7, #28
 8002d66:	4619      	mov	r1, r3
 8002d68:	4620      	mov	r0, r4
 8002d6a:	f7ff fa47 	bl	80021fc <_ZN14SoftwareSerialC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_>
 8002d6e:	64fc      	str	r4, [r7, #76]	@ 0x4c
 8002d70:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002d74:	4618      	mov	r0, r3
 8002d76:	f023 f9ac 	bl	80260d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002d7a:	f107 031c 	add.w	r3, r7, #28
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f023 f9a7 	bl	80260d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        SWSerial = SWSerialObj;
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d88:	615a      	str	r2, [r3, #20]
        defaults();
 8002d8a:	6978      	ldr	r0, [r7, #20]
 8002d8c:	f000 f832 	bl	8002df4 <_ZN14TMC2208Stepper8defaultsEv>
    }
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	4618      	mov	r0, r3
 8002d94:	3754      	adds	r7, #84	@ 0x54
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd90      	pop	{r4, r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	08028830 	.word	0x08028830
 8002da0:	3de147ae 	.word	0x3de147ae

08002da4 <_ZN14TMC2208Stepper11beginSerialEm>:


void TMC2208Stepper::beginSerial(uint32_t baudrate) {
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]

    SWSerial->begin(baudrate);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	4611      	mov	r1, r2
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7ff faad 	bl	8002316 <_ZN14SoftwareSerial5beginEi>
}
 8002dbc:	bf00      	nop
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <_ZN14TMC2208Stepper5beginEv>:


void TMC2208Stepper::begin() {
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]

    beginSerial(19600);
 8002dcc:	f644 4190 	movw	r1, #19600	@ 0x4c90
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f7ff ffe7 	bl	8002da4 <_ZN14TMC2208Stepper11beginSerialEm>
    pdn_disable(true);
 8002dd6:	2101      	movs	r1, #1
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f7ff fe6a 	bl	8002ab2 <_ZN14TMC2208Stepper11pdn_disableEb>
    mstep_reg_select(true);
 8002dde:	2101      	movs	r1, #1
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f7ff fe83 	bl	8002aec <_ZN14TMC2208Stepper16mstep_reg_selectEb>
    //Wait to initialize
    HAL_Delay(replyDelay);
 8002de6:	2002      	movs	r0, #2
 8002de8:	f016 fb56 	bl	8019498 <HAL_Delay>

}
 8002dec:	bf00      	nop
 8002dee:	3708      	adds	r7, #8
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <_ZN14TMC2208Stepper8defaultsEv>:

void TMC2208Stepper::defaults() {
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
    GCONF_register.i_scale_analog = 1;
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8002e02:	f043 0301 	orr.w	r3, r3, #1
 8002e06:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
    GCONF_register.internal_rsense = 0; // OTP
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8002e10:	f36f 0341 	bfc	r3, #1, #1
 8002e14:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
    GCONF_register.en_spreadcycle = 0; // OTP
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8002e1e:	f36f 0382 	bfc	r3, #2, #1
 8002e22:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
    GCONF_register.multistep_filt = 1; // OTP
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	f892 3022 	ldrb.w	r3, [r2, #34]	@ 0x22
 8002e2c:	f043 0301 	orr.w	r3, r3, #1
 8002e30:	f882 3022 	strb.w	r3, [r2, #34]	@ 0x22
    IHOLD_IRUN_register.iholddelay = 1; // OTP
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	7993      	ldrb	r3, [r2, #6]
 8002e38:	2101      	movs	r1, #1
 8002e3a:	f361 0303 	bfi	r3, r1, #0, #4
 8002e3e:	7193      	strb	r3, [r2, #6]
    TPOWERDOWN_register.sr = 20;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2214      	movs	r2, #20
 8002e44:	71da      	strb	r2, [r3, #7]
    CHOPCONF_register.sr = 0x10000053;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 8002e4e:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f042 0210 	orr.w	r2, r2, #16
 8002e64:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
    PWMCONF_register.sr = 0xC10D0024;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f042 0224 	orr.w	r2, r2, #36	@ 0x24
 8002e70:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f042 020d 	orr.w	r2, r2, #13
 8002e80:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8002e84:	2200      	movs	r2, #0
 8002e86:	f062 023e 	orn	r2, r2, #62	@ 0x3e
 8002e8a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  //MSLUT4_register.sr = ???;
  //MSLUT5_register.sr = ???;
  //MSLUT6_register.sr = ???;
  //MSLUT7_register.sr = ???;
  //MSLUTSTART_register.start_sin90 = 247;
}
 8002e8e:	bf00      	nop
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr

08002e9a <_ZN14TMC2208Stepper7calcCRCEPhh>:
    PWMCONF(PWMCONF_register.sr);
}

bool TMC2208Stepper::isEnabled() { return !enn() && toff(); }

uint8_t TMC2208Stepper::calcCRC(uint8_t datagram[], uint8_t len) {
 8002e9a:	b480      	push	{r7}
 8002e9c:	b087      	sub	sp, #28
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	60f8      	str	r0, [r7, #12]
 8002ea2:	60b9      	str	r1, [r7, #8]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	71fb      	strb	r3, [r7, #7]
    uint8_t crc = 0;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	75fb      	strb	r3, [r7, #23]
    for (uint8_t i = 0; i < len; i++) {
 8002eac:	2300      	movs	r3, #0
 8002eae:	75bb      	strb	r3, [r7, #22]
 8002eb0:	e027      	b.n	8002f02 <_ZN14TMC2208Stepper7calcCRCEPhh+0x68>
        uint8_t currentByte = datagram[i];
 8002eb2:	7dbb      	ldrb	r3, [r7, #22]
 8002eb4:	68ba      	ldr	r2, [r7, #8]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	757b      	strb	r3, [r7, #21]
        for (uint8_t j = 0; j < 8; j++) {
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	753b      	strb	r3, [r7, #20]
 8002ec0:	e019      	b.n	8002ef6 <_ZN14TMC2208Stepper7calcCRCEPhh+0x5c>
            if ((crc >> 7) ^ (currentByte & 0x01)) {
 8002ec2:	7dfb      	ldrb	r3, [r7, #23]
 8002ec4:	09db      	lsrs	r3, r3, #7
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	7d7b      	ldrb	r3, [r7, #21]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d007      	beq.n	8002ee4 <_ZN14TMC2208Stepper7calcCRCEPhh+0x4a>
                crc = (crc << 1) ^ 0x07;
 8002ed4:	7dfb      	ldrb	r3, [r7, #23]
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	b25b      	sxtb	r3, r3
 8002eda:	f083 0307 	eor.w	r3, r3, #7
 8002ede:	b25b      	sxtb	r3, r3
 8002ee0:	75fb      	strb	r3, [r7, #23]
 8002ee2:	e002      	b.n	8002eea <_ZN14TMC2208Stepper7calcCRCEPhh+0x50>
            } else {
                crc = (crc << 1);
 8002ee4:	7dfb      	ldrb	r3, [r7, #23]
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	75fb      	strb	r3, [r7, #23]
            }
            crc &= 0xff;
            currentByte = currentByte >> 1;
 8002eea:	7d7b      	ldrb	r3, [r7, #21]
 8002eec:	085b      	lsrs	r3, r3, #1
 8002eee:	757b      	strb	r3, [r7, #21]
        for (uint8_t j = 0; j < 8; j++) {
 8002ef0:	7d3b      	ldrb	r3, [r7, #20]
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	753b      	strb	r3, [r7, #20]
 8002ef6:	7d3b      	ldrb	r3, [r7, #20]
 8002ef8:	2b07      	cmp	r3, #7
 8002efa:	d9e2      	bls.n	8002ec2 <_ZN14TMC2208Stepper7calcCRCEPhh+0x28>
    for (uint8_t i = 0; i < len; i++) {
 8002efc:	7dbb      	ldrb	r3, [r7, #22]
 8002efe:	3301      	adds	r3, #1
 8002f00:	75bb      	strb	r3, [r7, #22]
 8002f02:	7dba      	ldrb	r2, [r7, #22]
 8002f04:	79fb      	ldrb	r3, [r7, #7]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d3d3      	bcc.n	8002eb2 <_ZN14TMC2208Stepper7calcCRCEPhh+0x18>
        }
    }
    return crc;
 8002f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	371c      	adds	r7, #28
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <_ZN14TMC2208Stepper9availableEv>:

__attribute__((weak))
int TMC2208Stepper::available() {
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
    int out = 0;
 8002f20:	2300      	movs	r3, #0
 8002f22:	60fb      	str	r3, [r7, #12]

	out = SWSerial->available();
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff fb70 	bl	800260e <_ZN14SoftwareSerial9availableEv>
 8002f2e:	60f8      	str	r0, [r7, #12]

    return out;
 8002f30:	68fb      	ldr	r3, [r7, #12]
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <_ZN14TMC2208Stepper21preWriteCommunicationEv>:


__attribute__((weak))
void TMC2208Stepper::preWriteCommunication() {
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
    //this->debug1->write(1);
}
 8002f42:	bf00      	nop
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr

08002f4e <_ZN14TMC2208Stepper20preReadCommunicationEv>:


__attribute__((weak))
void TMC2208Stepper::preReadCommunication() {
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b082      	sub	sp, #8
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]

	SWSerial->listen();	
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff fa40 	bl	80023e0 <_ZN14SoftwareSerial6listenEv>
    //this->debug2->write(1);				
}
 8002f60:	bf00      	nop
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <_ZN14TMC2208Stepper22postWriteCommunicationEv>:


__attribute__((weak))
void TMC2208Stepper::postWriteCommunication() {
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
    //this->debug1->write(0);
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <_ZN14TMC2208Stepper21postReadCommunicationEv>:


__attribute__((weak))
void TMC2208Stepper::postReadCommunication() {
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
    //this->debug2->write(0);
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <_ZN14TMC2208Stepper11serial_readEv>:


__attribute__((weak))
int16_t TMC2208Stepper::serial_read() {
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
    int16_t out = 0;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	81fb      	strh	r3, [r7, #14]
     
    out = SWSerial->read();
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7ff fb7c 	bl	800269e <_ZN14SoftwareSerial4readEv>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	81fb      	strh	r3, [r7, #14]

	return out;
 8002faa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <_ZN14TMC2208Stepper12serial_writeEh>:

__attribute__((weak))
uint8_t TMC2208Stepper::serial_write(const uint8_t data) {
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b084      	sub	sp, #16
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	70fb      	strb	r3, [r7, #3]
    int out = 0;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	60fb      	str	r3, [r7, #12]

    SWSerial->write(data);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	78fa      	ldrb	r2, [r7, #3]
 8002fcc:	4611      	mov	r1, r2
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7ff fb2f 	bl	8002632 <_ZN14SoftwareSerial5writeEi>

    return out;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	b2db      	uxtb	r3, r3
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3710      	adds	r7, #16
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <_ZN14TMC2208Stepper5writeEhm>:


void TMC2208Stepper::write(uint8_t addr, uint32_t regVal) {
 8002fe0:	b590      	push	{r4, r7, lr}
 8002fe2:	b089      	sub	sp, #36	@ 0x24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	460b      	mov	r3, r1
 8002fea:	607a      	str	r2, [r7, #4]
 8002fec:	72fb      	strb	r3, [r7, #11]
    uint8_t len = 7;
 8002fee:	2307      	movs	r3, #7
 8002ff0:	77bb      	strb	r3, [r7, #30]
    addr |= TMC_WRITE;
 8002ff2:	7afb      	ldrb	r3, [r7, #11]
 8002ff4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002ff8:	72fb      	strb	r3, [r7, #11]
    uint8_t datagram[] = {TMC2208_SYNC, slave_address, addr, (uint8_t)(regVal>>24), (uint8_t)(regVal>>16), (uint8_t)(regVal>>8), (uint8_t)(regVal>>0), 0x00};
 8002ffa:	f107 0314 	add.w	r3, r7, #20
 8002ffe:	2200      	movs	r2, #0
 8003000:	601a      	str	r2, [r3, #0]
 8003002:	605a      	str	r2, [r3, #4]
 8003004:	2305      	movs	r3, #5
 8003006:	753b      	strb	r3, [r7, #20]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 800300e:	757b      	strb	r3, [r7, #21]
 8003010:	7afb      	ldrb	r3, [r7, #11]
 8003012:	75bb      	strb	r3, [r7, #22]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	0e1b      	lsrs	r3, r3, #24
 8003018:	b2db      	uxtb	r3, r3
 800301a:	75fb      	strb	r3, [r7, #23]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	0c1b      	lsrs	r3, r3, #16
 8003020:	b2db      	uxtb	r3, r3
 8003022:	763b      	strb	r3, [r7, #24]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	0a1b      	lsrs	r3, r3, #8
 8003028:	b2db      	uxtb	r3, r3
 800302a:	767b      	strb	r3, [r7, #25]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	b2db      	uxtb	r3, r3
 8003030:	76bb      	strb	r3, [r7, #26]
	
    datagram[len] = calcCRC(datagram, len);
 8003032:	7fbc      	ldrb	r4, [r7, #30]
 8003034:	7fba      	ldrb	r2, [r7, #30]
 8003036:	f107 0314 	add.w	r3, r7, #20
 800303a:	4619      	mov	r1, r3
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f7ff ff2c 	bl	8002e9a <_ZN14TMC2208Stepper7calcCRCEPhh>
 8003042:	4603      	mov	r3, r0
 8003044:	461a      	mov	r2, r3
 8003046:	f104 0320 	add.w	r3, r4, #32
 800304a:	443b      	add	r3, r7
 800304c:	f803 2c0c 	strb.w	r2, [r3, #-12]
	
	//printf("write datagram = %x, %x, %x, %x, %x, %x, %x, %x\n", datagram[0], datagram[1], datagram[2], datagram[3], datagram[4], datagram[5], datagram[6], datagram[7]);
    
    preWriteCommunication();
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f7ff ff72 	bl	8002f3a <_ZN14TMC2208Stepper21preWriteCommunicationEv>

    for(uint8_t i=0; i<=len; i++) {
 8003056:	2300      	movs	r3, #0
 8003058:	77fb      	strb	r3, [r7, #31]
 800305a:	e013      	b.n	8003084 <_ZN14TMC2208Stepper5writeEhm+0xa4>
        bytesWritten += serial_write(datagram[i]);
 800305c:	7ffb      	ldrb	r3, [r7, #31]
 800305e:	3320      	adds	r3, #32
 8003060:	443b      	add	r3, r7
 8003062:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003066:	4619      	mov	r1, r3
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f7ff ffa4 	bl	8002fb6 <_ZN14TMC2208Stepper12serial_writeEh>
 800306e:	4603      	mov	r3, r0
 8003070:	461a      	mov	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	8b1b      	ldrh	r3, [r3, #24]
 8003076:	4413      	add	r3, r2
 8003078:	b29a      	uxth	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	831a      	strh	r2, [r3, #24]
    for(uint8_t i=0; i<=len; i++) {
 800307e:	7ffb      	ldrb	r3, [r7, #31]
 8003080:	3301      	adds	r3, #1
 8003082:	77fb      	strb	r3, [r7, #31]
 8003084:	7ffa      	ldrb	r2, [r7, #31]
 8003086:	7fbb      	ldrb	r3, [r7, #30]
 8003088:	429a      	cmp	r2, r3
 800308a:	d9e7      	bls.n	800305c <_ZN14TMC2208Stepper5writeEhm+0x7c>
    }
    postWriteCommunication();
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	f7ff ff6b 	bl	8002f68 <_ZN14TMC2208Stepper22postWriteCommunicationEv>

    //delay(replyDelay);
    //ThisThread::sleep_for(150);
    HAL_Delay(5);
 8003092:	2005      	movs	r0, #5
 8003094:	f016 fa00 	bl	8019498 <HAL_Delay>
}
 8003098:	bf00      	nop
 800309a:	3724      	adds	r7, #36	@ 0x24
 800309c:	46bd      	mov	sp, r7
 800309e:	bd90      	pop	{r4, r7, pc}

080030a0 <_ZN14TMC2208Stepper13_sendDatagramEPhht>:

uint64_t TMC2208Stepper::_sendDatagram(uint8_t datagram[], const uint8_t len, uint16_t timeout) {
 80030a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030a4:	b092      	sub	sp, #72	@ 0x48
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6178      	str	r0, [r7, #20]
 80030aa:	6139      	str	r1, [r7, #16]
 80030ac:	4611      	mov	r1, r2
 80030ae:	461a      	mov	r2, r3
 80030b0:	460b      	mov	r3, r1
 80030b2:	73fb      	strb	r3, [r7, #15]
 80030b4:	4613      	mov	r3, r2
 80030b6:	81bb      	strh	r3, [r7, #12]
	
    while (available() > 0) serial_read(); // Flush
 80030b8:	e002      	b.n	80030c0 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x20>
 80030ba:	6978      	ldr	r0, [r7, #20]
 80030bc:	f7ff ff68 	bl	8002f90 <_ZN14TMC2208Stepper11serial_readEv>
 80030c0:	6978      	ldr	r0, [r7, #20]
 80030c2:	f7ff ff29 	bl	8002f18 <_ZN14TMC2208Stepper9availableEv>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	bfcc      	ite	gt
 80030cc:	2301      	movgt	r3, #1
 80030ce:	2300      	movle	r3, #0
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1f1      	bne.n	80030ba <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x1a>

    preWriteCommunication();
 80030d6:	6978      	ldr	r0, [r7, #20]
 80030d8:	f7ff ff2f 	bl	8002f3a <_ZN14TMC2208Stepper21preWriteCommunicationEv>
	for(int i=0; i<=len; i++)
 80030dc:	2300      	movs	r3, #0
 80030de:	647b      	str	r3, [r7, #68]	@ 0x44
 80030e0:	e00a      	b.n	80030f8 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x58>
    {   
        serial_write(datagram[i]);
 80030e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	4413      	add	r3, r2
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	4619      	mov	r1, r3
 80030ec:	6978      	ldr	r0, [r7, #20]
 80030ee:	f7ff ff62 	bl	8002fb6 <_ZN14TMC2208Stepper12serial_writeEh>
	for(int i=0; i<=len; i++)
 80030f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030f4:	3301      	adds	r3, #1
 80030f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80030f8:	7bfb      	ldrb	r3, [r7, #15]
 80030fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80030fc:	429a      	cmp	r2, r3
 80030fe:	ddf0      	ble.n	80030e2 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x42>
    }
	//delay(replyDelay);
    //ThisThread::sleep_for(replyDelay);
    postWriteCommunication();
 8003100:	6978      	ldr	r0, [r7, #20]
 8003102:	f7ff ff31 	bl	8002f68 <_ZN14TMC2208Stepper22postWriteCommunicationEv>

	// scan for the rx frame and read it
	uint32_t ms = HAL_GetTick();
 8003106:	f016 f9bb 	bl	8019480 <HAL_GetTick>
 800310a:	6438      	str	r0, [r7, #64]	@ 0x40
	uint32_t sync_target = (static_cast<uint32_t>(datagram[0])<<16) | 0xFF00 | datagram[2];
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	041b      	lsls	r3, r3, #16
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	3202      	adds	r2, #2
 8003116:	7812      	ldrb	r2, [r2, #0]
 8003118:	4313      	orrs	r3, r2
 800311a:	f443 437f 	orr.w	r3, r3, #65280	@ 0xff00
 800311e:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t sync = 0;
 8003120:	2300      	movs	r3, #0
 8003122:	63fb      	str	r3, [r7, #60]	@ 0x3c

	do {
		uint32_t ms2 = HAL_GetTick();
 8003124:	f016 f9ac 	bl	8019480 <HAL_GetTick>
 8003128:	6278      	str	r0, [r7, #36]	@ 0x24
		if (ms2 != ms) {
 800312a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800312c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800312e:	429a      	cmp	r2, r3
 8003130:	d004      	beq.n	800313c <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x9c>
			// 1ms tick
			ms = ms2;
 8003132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003134:	643b      	str	r3, [r7, #64]	@ 0x40
			timeout--;
 8003136:	89bb      	ldrh	r3, [r7, #12]
 8003138:	3b01      	subs	r3, #1
 800313a:	81bb      	strh	r3, [r7, #12]
		}
		if (!timeout) return 0;
 800313c:	89bb      	ldrh	r3, [r7, #12]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d104      	bne.n	800314c <_ZN14TMC2208Stepper13_sendDatagramEPhht+0xac>
 8003142:	f04f 0200 	mov.w	r2, #0
 8003146:	f04f 0300 	mov.w	r3, #0
 800314a:	e080      	b.n	800324e <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x1ae>

		int16_t res = serial_read();
 800314c:	6978      	ldr	r0, [r7, #20]
 800314e:	f7ff ff1f 	bl	8002f90 <_ZN14TMC2208Stepper11serial_readEv>
 8003152:	4603      	mov	r3, r0
 8003154:	847b      	strh	r3, [r7, #34]	@ 0x22
		if (res < 0) continue;
 8003156:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800315a:	2b00      	cmp	r3, #0
 800315c:	db0c      	blt.n	8003178 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0xd8>

		sync <<= 8;
 800315e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003160:	021b      	lsls	r3, r3, #8
 8003162:	63fb      	str	r3, [r7, #60]	@ 0x3c
		sync |= res & 0xFF;
 8003164:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003166:	b2db      	uxtb	r3, r3
 8003168:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800316a:	4313      	orrs	r3, r2
 800316c:	63fb      	str	r3, [r7, #60]	@ 0x3c
		sync &= 0xFFFFFF;
 800316e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003170:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003174:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003176:	e000      	b.n	800317a <_ZN14TMC2208Stepper13_sendDatagramEPhht+0xda>
		if (res < 0) continue;
 8003178:	bf00      	nop

	} while (sync != sync_target);
 800317a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800317c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800317e:	429a      	cmp	r2, r3
 8003180:	d1d0      	bne.n	8003124 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x84>

	uint64_t out = sync;
 8003182:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003184:	2200      	movs	r2, #0
 8003186:	603b      	str	r3, [r7, #0]
 8003188:	607a      	str	r2, [r7, #4]
 800318a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800318e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	ms = HAL_GetTick();
 8003192:	f016 f975 	bl	8019480 <HAL_GetTick>
 8003196:	6438      	str	r0, [r7, #64]	@ 0x40
	timeout = this->abort_window;
 8003198:	2305      	movs	r3, #5
 800319a:	81bb      	strh	r3, [r7, #12]
		 
	for(uint8_t i=0; i<5;) {
 800319c:	2300      	movs	r3, #0
 800319e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80031a2:	e03f      	b.n	8003224 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x184>
		uint32_t ms2 = HAL_GetTick();
 80031a4:	f016 f96c 	bl	8019480 <HAL_GetTick>
 80031a8:	61f8      	str	r0, [r7, #28]
		if (ms2 != ms) {
 80031aa:	69fa      	ldr	r2, [r7, #28]
 80031ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d004      	beq.n	80031bc <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x11c>
			// 1ms tick
			ms = ms2;
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	643b      	str	r3, [r7, #64]	@ 0x40
			timeout--;
 80031b6:	89bb      	ldrh	r3, [r7, #12]
 80031b8:	3b01      	subs	r3, #1
 80031ba:	81bb      	strh	r3, [r7, #12]
		}
		if (!timeout) return 0;
 80031bc:	89bb      	ldrh	r3, [r7, #12]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d104      	bne.n	80031cc <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x12c>
 80031c2:	f04f 0200 	mov.w	r2, #0
 80031c6:	f04f 0300 	mov.w	r3, #0
 80031ca:	e040      	b.n	800324e <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x1ae>

		int16_t res = serial_read();
 80031cc:	6978      	ldr	r0, [r7, #20]
 80031ce:	f7ff fedf 	bl	8002f90 <_ZN14TMC2208Stepper11serial_readEv>
 80031d2:	4603      	mov	r3, r0
 80031d4:	837b      	strh	r3, [r7, #26]
		if (res < 0) continue;
 80031d6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	db21      	blt.n	8003222 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x182>

		out <<= 8;
 80031de:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80031e2:	f04f 0200 	mov.w	r2, #0
 80031e6:	f04f 0300 	mov.w	r3, #0
 80031ea:	020b      	lsls	r3, r1, #8
 80031ec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80031f0:	0202      	lsls	r2, r0, #8
 80031f2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		out |= res & 0xFF;
 80031f6:	8b7b      	ldrh	r3, [r7, #26]
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	2200      	movs	r2, #0
 80031fc:	469a      	mov	sl, r3
 80031fe:	4693      	mov	fp, r2
 8003200:	f00a 04ff 	and.w	r4, sl, #255	@ 0xff
 8003204:	2500      	movs	r5, #0
 8003206:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800320a:	ea42 0804 	orr.w	r8, r2, r4
 800320e:	ea43 0905 	orr.w	r9, r3, r5
 8003212:	e9c7 890c 	strd	r8, r9, [r7, #48]	@ 0x30
		i++;
 8003216:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800321a:	3301      	adds	r3, #1
 800321c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003220:	e000      	b.n	8003224 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x184>
		if (res < 0) continue;
 8003222:	bf00      	nop
	for(uint8_t i=0; i<5;) {
 8003224:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003228:	2b04      	cmp	r3, #4
 800322a:	d9bb      	bls.n	80031a4 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x104>
	}

	while (available() > 0) serial_read(); // Flush
 800322c:	e002      	b.n	8003234 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x194>
 800322e:	6978      	ldr	r0, [r7, #20]
 8003230:	f7ff feae 	bl	8002f90 <_ZN14TMC2208Stepper11serial_readEv>
 8003234:	6978      	ldr	r0, [r7, #20]
 8003236:	f7ff fe6f 	bl	8002f18 <_ZN14TMC2208Stepper9availableEv>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	bfcc      	ite	gt
 8003240:	2301      	movgt	r3, #1
 8003242:	2300      	movle	r3, #0
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1f1      	bne.n	800322e <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x18e>

	return out;
 800324a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
}
 800324e:	4610      	mov	r0, r2
 8003250:	4619      	mov	r1, r3
 8003252:	3748      	adds	r7, #72	@ 0x48
 8003254:	46bd      	mov	sp, r7
 8003256:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800325a <_ZN14TMC2208Stepper4readEh>:

uint32_t TMC2208Stepper::read(uint8_t addr) {
 800325a:	b580      	push	{r7, lr}
 800325c:	b088      	sub	sp, #32
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
 8003262:	460b      	mov	r3, r1
 8003264:	70fb      	strb	r3, [r7, #3]
    constexpr uint8_t len = 3;
 8003266:	2303      	movs	r3, #3
 8003268:	75bb      	strb	r3, [r7, #22]
    addr |= TMC_READ;
    uint8_t datagram[] = {TMC2208_SYNC, slave_address, addr, 0x00};
 800326a:	2300      	movs	r3, #0
 800326c:	613b      	str	r3, [r7, #16]
 800326e:	2305      	movs	r3, #5
 8003270:	743b      	strb	r3, [r7, #16]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8003278:	747b      	strb	r3, [r7, #17]
 800327a:	78fb      	ldrb	r3, [r7, #3]
 800327c:	74bb      	strb	r3, [r7, #18]
    datagram[len] = calcCRC(datagram, len);
 800327e:	f107 0310 	add.w	r3, r7, #16
 8003282:	2203      	movs	r2, #3
 8003284:	4619      	mov	r1, r3
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f7ff fe07 	bl	8002e9a <_ZN14TMC2208Stepper7calcCRCEPhh>
 800328c:	4603      	mov	r3, r0
 800328e:	74fb      	strb	r3, [r7, #19]
    uint64_t out = 0x00000000UL;
 8003290:	f04f 0200 	mov.w	r2, #0
 8003294:	f04f 0300 	mov.w	r3, #0
 8003298:	e9c7 2306 	strd	r2, r3, [r7, #24]

    for (uint8_t i = 0; i < max_retries; i++) {			 
 800329c:	2300      	movs	r3, #0
 800329e:	75fb      	strb	r3, [r7, #23]
 80032a0:	e080      	b.n	80033a4 <_ZN14TMC2208Stepper4readEh+0x14a>
        preReadCommunication();
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f7ff fe53 	bl	8002f4e <_ZN14TMC2208Stepper20preReadCommunicationEv>
        out = _sendDatagram(datagram, len, abort_window);
 80032a8:	f107 0110 	add.w	r1, r7, #16
 80032ac:	2305      	movs	r3, #5
 80032ae:	2203      	movs	r2, #3
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f7ff fef5 	bl	80030a0 <_ZN14TMC2208Stepper13_sendDatagramEPhht>
 80032b6:	e9c7 0106 	strd	r0, r1, [r7, #24]
        postReadCommunication();
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7ff fe5e 	bl	8002f7c <_ZN14TMC2208Stepper21postReadCommunicationEv>

//        delay(replyDelay);
        //ThisThread::sleep_for(replyDelay);
        HAL_Delay(5);
 80032c0:	2005      	movs	r0, #5
 80032c2:	f016 f8e9 	bl	8019498 <HAL_Delay>

        CRCerror = false;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 2020 	strb.w	r2, [r3, #32]
        uint8_t out_datagram[] = {
            static_cast<uint8_t>(out>>56),
 80032ce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80032d2:	f04f 0200 	mov.w	r2, #0
 80032d6:	f04f 0300 	mov.w	r3, #0
 80032da:	0e0a      	lsrs	r2, r1, #24
 80032dc:	2300      	movs	r3, #0
            static_cast<uint8_t>(out>>32),
            static_cast<uint8_t>(out>>24),
            static_cast<uint8_t>(out>>16),
            static_cast<uint8_t>(out>> 8),
            static_cast<uint8_t>(out>> 0)
        };
 80032de:	b2d3      	uxtb	r3, r2
 80032e0:	723b      	strb	r3, [r7, #8]
            static_cast<uint8_t>(out>>48),
 80032e2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80032e6:	f04f 0200 	mov.w	r2, #0
 80032ea:	f04f 0300 	mov.w	r3, #0
 80032ee:	0c0a      	lsrs	r2, r1, #16
 80032f0:	2300      	movs	r3, #0
        };
 80032f2:	b2d3      	uxtb	r3, r2
 80032f4:	727b      	strb	r3, [r7, #9]
            static_cast<uint8_t>(out>>40),
 80032f6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80032fa:	f04f 0200 	mov.w	r2, #0
 80032fe:	f04f 0300 	mov.w	r3, #0
 8003302:	0a0a      	lsrs	r2, r1, #8
 8003304:	2300      	movs	r3, #0
        };
 8003306:	b2d3      	uxtb	r3, r2
 8003308:	72bb      	strb	r3, [r7, #10]
            static_cast<uint8_t>(out>>32),
 800330a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800330e:	f04f 0200 	mov.w	r2, #0
 8003312:	f04f 0300 	mov.w	r3, #0
 8003316:	000a      	movs	r2, r1
 8003318:	2300      	movs	r3, #0
        };
 800331a:	b2d3      	uxtb	r3, r2
 800331c:	72fb      	strb	r3, [r7, #11]
            static_cast<uint8_t>(out>>24),
 800331e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003322:	f04f 0200 	mov.w	r2, #0
 8003326:	f04f 0300 	mov.w	r3, #0
 800332a:	0e02      	lsrs	r2, r0, #24
 800332c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003330:	0e0b      	lsrs	r3, r1, #24
        };
 8003332:	b2d3      	uxtb	r3, r2
 8003334:	733b      	strb	r3, [r7, #12]
            static_cast<uint8_t>(out>>16),
 8003336:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800333a:	f04f 0200 	mov.w	r2, #0
 800333e:	f04f 0300 	mov.w	r3, #0
 8003342:	0c02      	lsrs	r2, r0, #16
 8003344:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003348:	0c0b      	lsrs	r3, r1, #16
        };
 800334a:	b2d3      	uxtb	r3, r2
 800334c:	737b      	strb	r3, [r7, #13]
            static_cast<uint8_t>(out>> 8),
 800334e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003352:	f04f 0200 	mov.w	r2, #0
 8003356:	f04f 0300 	mov.w	r3, #0
 800335a:	0a02      	lsrs	r2, r0, #8
 800335c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003360:	0a0b      	lsrs	r3, r1, #8
        };
 8003362:	b2d3      	uxtb	r3, r2
 8003364:	73bb      	strb	r3, [r7, #14]
 8003366:	7e3b      	ldrb	r3, [r7, #24]
 8003368:	73fb      	strb	r3, [r7, #15]
        //printf("read  datagram = %x, %x, %x, %x, %x, %x, %x, %x\n", out_datagram[0], out_datagram[1], out_datagram[2], out_datagram[3], out_datagram[4], out_datagram[5], out_datagram[6], out_datagram[7]);
		
        uint8_t crc = calcCRC(out_datagram, 7);
 800336a:	f107 0308 	add.w	r3, r7, #8
 800336e:	2207      	movs	r2, #7
 8003370:	4619      	mov	r1, r3
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f7ff fd91 	bl	8002e9a <_ZN14TMC2208Stepper7calcCRCEPhh>
 8003378:	4603      	mov	r3, r0
 800337a:	757b      	strb	r3, [r7, #21]
        if ((crc != static_cast<uint8_t>(out)) || crc == 0 ) {
 800337c:	7e3b      	ldrb	r3, [r7, #24]
 800337e:	7d7a      	ldrb	r2, [r7, #21]
 8003380:	429a      	cmp	r2, r3
 8003382:	d102      	bne.n	800338a <_ZN14TMC2208Stepper4readEh+0x130>
 8003384:	7d7b      	ldrb	r3, [r7, #21]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d110      	bne.n	80033ac <_ZN14TMC2208Stepper4readEh+0x152>
            CRCerror = true;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 2020 	strb.w	r2, [r3, #32]
            out = 0;
 8003392:	f04f 0200 	mov.w	r2, #0
 8003396:	f04f 0300 	mov.w	r3, #0
 800339a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (uint8_t i = 0; i < max_retries; i++) {			 
 800339e:	7dfb      	ldrb	r3, [r7, #23]
 80033a0:	3301      	adds	r3, #1
 80033a2:	75fb      	strb	r3, [r7, #23]
 80033a4:	7dfb      	ldrb	r3, [r7, #23]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	f67f af7b 	bls.w	80032a2 <_ZN14TMC2208Stepper4readEh+0x48>
        } else {
            break;
        }
    }

    return out>>8;
 80033ac:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80033b0:	f04f 0200 	mov.w	r2, #0
 80033b4:	f04f 0300 	mov.w	r3, #0
 80033b8:	0a02      	lsrs	r2, r0, #8
 80033ba:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80033be:	0a0b      	lsrs	r3, r1, #8
 80033c0:	4613      	mov	r3, r2
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3720      	adds	r7, #32
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <_ZN14TMC2209Stepper6SGTHRSEh>:
    CHOPCONF(CHOPCONF_register.sr);
    PWMCONF(PWMCONF_register.sr);
    TCOOLTHRS(TCOOLTHRS_register.sr);
}

void TMC2209Stepper::SGTHRS(uint8_t input) {
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b082      	sub	sp, #8
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
 80033d2:	460b      	mov	r3, r1
 80033d4:	70fb      	strb	r3, [r7, #3]
    SGTHRS_register.sr = input;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	78fa      	ldrb	r2, [r7, #3]
 80033da:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    write(SGTHRS_register.address, SGTHRS_register.sr);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	f892 2068 	ldrb.w	r2, [r2, #104]	@ 0x68
 80033ec:	2140      	movs	r1, #64	@ 0x40
 80033ee:	4798      	blx	r3
}
 80033f0:	bf00      	nop
 80033f2:	3708      	adds	r7, #8
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <_ZN14TMC2209Stepper9TCOOLTHRSEm>:
    return SGTHRS_register.sr;
}

// W: TCOOLTHRS
uint32_t TMC2209Stepper::TCOOLTHRS() { return TCOOLTHRS_register.sr; }
void TMC2209Stepper::TCOOLTHRS(uint32_t input) {
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  TCOOLTHRS_register.sr = input;
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	b2d1      	uxtb	r1, r2
 800340c:	2000      	movs	r0, #0
 800340e:	4301      	orrs	r1, r0
 8003410:	f883 1065 	strb.w	r1, [r3, #101]	@ 0x65
 8003414:	0a11      	lsrs	r1, r2, #8
 8003416:	b2c9      	uxtb	r1, r1
 8003418:	2000      	movs	r0, #0
 800341a:	4301      	orrs	r1, r0
 800341c:	f883 1066 	strb.w	r1, [r3, #102]	@ 0x66
 8003420:	0c12      	lsrs	r2, r2, #16
 8003422:	f002 020f 	and.w	r2, r2, #15
 8003426:	f002 000f 	and.w	r0, r2, #15
 800342a:	f893 2067 	ldrb.w	r2, [r3, #103]	@ 0x67
 800342e:	f022 020f 	bic.w	r2, r2, #15
 8003432:	4611      	mov	r1, r2
 8003434:	4602      	mov	r2, r0
 8003436:	430a      	orrs	r2, r1
 8003438:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
  write(TCOOLTHRS_register.address, TCOOLTHRS_register.sr);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8003448:	f3c2 2213 	ubfx	r2, r2, #8, #20
 800344c:	2114      	movs	r1, #20
 800344e:	4798      	blx	r3
}
 8003450:	bf00      	nop
 8003452:	3708      	adds	r7, #8
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <_ZN10TMCStepper11rms_currentEt>:

uint16_t TMCStepper::cs2rms(uint8_t CS) {
  return (float)(CS+1)/32.0 * (vsense() ? 0.180 : 0.325)/(Rsense+0.02) / 1.41421 * 1000;
}

void TMCStepper::rms_current(uint16_t mA) {
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	460b      	mov	r3, r1
 8003462:	817b      	strh	r3, [r7, #10]
  uint8_t CS = 32.0*1.41421*mA/1000.0*(Rsense+0.02)/0.325 - 1;
 8003464:	897b      	ldrh	r3, [r7, #10]
 8003466:	ee07 3a90 	vmov	s15, r3
 800346a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800346e:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 8003568 <_ZN10TMCStepper11rms_currentEt+0x110>
 8003472:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003476:	ed9f 5b3e 	vldr	d5, [pc, #248]	@ 8003570 <_ZN10TMCStepper11rms_currentEt+0x118>
 800347a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	edd3 7a03 	vldr	s15, [r3, #12]
 8003484:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003488:	ed9f 5b3b 	vldr	d5, [pc, #236]	@ 8003578 <_ZN10TMCStepper11rms_currentEt+0x120>
 800348c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8003490:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003494:	ed9f 5b3a 	vldr	d5, [pc, #232]	@ 8003580 <_ZN10TMCStepper11rms_currentEt+0x128>
 8003498:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800349c:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80034a0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80034a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80034a8:	edc7 7a01 	vstr	s15, [r7, #4]
 80034ac:	793b      	ldrb	r3, [r7, #4]
 80034ae:	75fb      	strb	r3, [r7, #23]
  // If Current Scale is too low, turn on high sensitivity R_sense and calculate again
  if (CS < 16) {
 80034b0:	7dfb      	ldrb	r3, [r7, #23]
 80034b2:	2b0f      	cmp	r3, #15
 80034b4:	d82d      	bhi.n	8003512 <_ZN10TMCStepper11rms_currentEt+0xba>
    vsense(true);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	3308      	adds	r3, #8
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2101      	movs	r1, #1
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	4798      	blx	r3
    CS = 32.0*1.41421*mA/1000.0*(Rsense+0.02)/0.180 - 1;
 80034c4:	897b      	ldrh	r3, [r7, #10]
 80034c6:	ee07 3a90 	vmov	s15, r3
 80034ca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80034ce:	ed9f 6b26 	vldr	d6, [pc, #152]	@ 8003568 <_ZN10TMCStepper11rms_currentEt+0x110>
 80034d2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80034d6:	ed9f 5b26 	vldr	d5, [pc, #152]	@ 8003570 <_ZN10TMCStepper11rms_currentEt+0x118>
 80034da:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	edd3 7a03 	vldr	s15, [r3, #12]
 80034e4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80034e8:	ed9f 5b23 	vldr	d5, [pc, #140]	@ 8003578 <_ZN10TMCStepper11rms_currentEt+0x120>
 80034ec:	ee37 7b05 	vadd.f64	d7, d7, d5
 80034f0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80034f4:	ed9f 5b24 	vldr	d5, [pc, #144]	@ 8003588 <_ZN10TMCStepper11rms_currentEt+0x130>
 80034f8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80034fc:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8003500:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003504:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003508:	edc7 7a01 	vstr	s15, [r7, #4]
 800350c:	793b      	ldrb	r3, [r7, #4]
 800350e:	75fb      	strb	r3, [r7, #23]
 8003510:	e006      	b.n	8003520 <_ZN10TMCStepper11rms_currentEt+0xc8>
  } else { // If CS >= 16, turn off high_sense_r
    vsense(false);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	3308      	adds	r3, #8
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2100      	movs	r1, #0
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	4798      	blx	r3
  }

  if (CS > 31)
 8003520:	7dfb      	ldrb	r3, [r7, #23]
 8003522:	2b1f      	cmp	r3, #31
 8003524:	d901      	bls.n	800352a <_ZN10TMCStepper11rms_currentEt+0xd2>
    CS = 31;
 8003526:	231f      	movs	r3, #31
 8003528:	75fb      	strb	r3, [r7, #23]

  irun(CS);
 800352a:	7dfb      	ldrb	r3, [r7, #23]
 800352c:	4619      	mov	r1, r3
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f7ff fb16 	bl	8002b60 <_ZN10TMCStepper4irunEh>
  ihold(CS*holdMultiplier);
 8003534:	7dfb      	ldrb	r3, [r7, #23]
 8003536:	ee07 3a90 	vmov	s15, r3
 800353a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	edd3 7a04 	vldr	s15, [r3, #16]
 8003544:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003548:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800354c:	edc7 7a01 	vstr	s15, [r7, #4]
 8003550:	793b      	ldrb	r3, [r7, #4]
 8003552:	b2db      	uxtb	r3, r3
 8003554:	4619      	mov	r1, r3
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f7ff fae5 	bl	8002b26 <_ZN10TMCStepper5iholdEh>
  //val_mA = mA;
}
 800355c:	bf00      	nop
 800355e:	3718      	adds	r7, #24
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	f3af 8000 	nop.w
 8003568:	aa3ad18d 	.word	0xaa3ad18d
 800356c:	4046a09a 	.word	0x4046a09a
 8003570:	00000000 	.word	0x00000000
 8003574:	408f4000 	.word	0x408f4000
 8003578:	47ae147b 	.word	0x47ae147b
 800357c:	3f947ae1 	.word	0x3f947ae1
 8003580:	cccccccd 	.word	0xcccccccd
 8003584:	3fd4cccc 	.word	0x3fd4cccc
 8003588:	70a3d70a 	.word	0x70a3d70a
 800358c:	3fc70a3d 	.word	0x3fc70a3d

08003590 <_ZN10TMCStepper15test_connectionEv>:

uint16_t TMCStepper::rms_current() {
  return cs2rms(irun());
}

uint8_t TMCStepper::test_connection() {
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t drv_status = DRV_STATUS();
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	3310      	adds	r3, #16
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	4798      	blx	r3
 80035a4:	60f8      	str	r0, [r7, #12]
  switch (drv_status) {
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d005      	beq.n	80035b8 <_ZN10TMCStepper15test_connectionEv+0x28>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b2:	d103      	bne.n	80035bc <_ZN10TMCStepper15test_connectionEv+0x2c>
      case 0xFFFFFFFF: return 1;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e002      	b.n	80035be <_ZN10TMCStepper15test_connectionEv+0x2e>
      case 0: return 2;
 80035b8:	2302      	movs	r3, #2
 80035ba:	e000      	b.n	80035be <_ZN10TMCStepper15test_connectionEv+0x2e>
      default: return 0;
 80035bc:	2300      	movs	r3, #0
  }
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
	...

080035c8 <_ZN10TMCStepper10microstepsEt>:
int8_t TMCStepper::hysteresis_end() { return hend()-3; };

void TMCStepper::hysteresis_start(uint8_t value) { hstrt(value-1); }
uint8_t TMCStepper::hysteresis_start() { return hstrt()+1; }

void TMCStepper::microsteps(uint16_t ms) {
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	460b      	mov	r3, r1
 80035d2:	807b      	strh	r3, [r7, #2]
  switch(ms) {
 80035d4:	887b      	ldrh	r3, [r7, #2]
 80035d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035da:	d058      	beq.n	800368e <_ZN10TMCStepper10microstepsEt+0xc6>
 80035dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035e0:	f300 809d 	bgt.w	800371e <_ZN10TMCStepper10microstepsEt+0x156>
 80035e4:	2b80      	cmp	r3, #128	@ 0x80
 80035e6:	d05a      	beq.n	800369e <_ZN10TMCStepper10microstepsEt+0xd6>
 80035e8:	2b80      	cmp	r3, #128	@ 0x80
 80035ea:	f300 8098 	bgt.w	800371e <_ZN10TMCStepper10microstepsEt+0x156>
 80035ee:	2b20      	cmp	r3, #32
 80035f0:	dc4a      	bgt.n	8003688 <_ZN10TMCStepper10microstepsEt+0xc0>
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f340 8093 	ble.w	800371e <_ZN10TMCStepper10microstepsEt+0x156>
 80035f8:	3b01      	subs	r3, #1
 80035fa:	2b1f      	cmp	r3, #31
 80035fc:	f200 808f 	bhi.w	800371e <_ZN10TMCStepper10microstepsEt+0x156>
 8003600:	a201      	add	r2, pc, #4	@ (adr r2, 8003608 <_ZN10TMCStepper10microstepsEt+0x40>)
 8003602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003606:	bf00      	nop
 8003608:	0800370f 	.word	0x0800370f
 800360c:	080036ff 	.word	0x080036ff
 8003610:	0800371f 	.word	0x0800371f
 8003614:	080036ef 	.word	0x080036ef
 8003618:	0800371f 	.word	0x0800371f
 800361c:	0800371f 	.word	0x0800371f
 8003620:	0800371f 	.word	0x0800371f
 8003624:	080036df 	.word	0x080036df
 8003628:	0800371f 	.word	0x0800371f
 800362c:	0800371f 	.word	0x0800371f
 8003630:	0800371f 	.word	0x0800371f
 8003634:	0800371f 	.word	0x0800371f
 8003638:	0800371f 	.word	0x0800371f
 800363c:	0800371f 	.word	0x0800371f
 8003640:	0800371f 	.word	0x0800371f
 8003644:	080036cf 	.word	0x080036cf
 8003648:	0800371f 	.word	0x0800371f
 800364c:	0800371f 	.word	0x0800371f
 8003650:	0800371f 	.word	0x0800371f
 8003654:	0800371f 	.word	0x0800371f
 8003658:	0800371f 	.word	0x0800371f
 800365c:	0800371f 	.word	0x0800371f
 8003660:	0800371f 	.word	0x0800371f
 8003664:	0800371f 	.word	0x0800371f
 8003668:	0800371f 	.word	0x0800371f
 800366c:	0800371f 	.word	0x0800371f
 8003670:	0800371f 	.word	0x0800371f
 8003674:	0800371f 	.word	0x0800371f
 8003678:	0800371f 	.word	0x0800371f
 800367c:	0800371f 	.word	0x0800371f
 8003680:	0800371f 	.word	0x0800371f
 8003684:	080036bf 	.word	0x080036bf
 8003688:	2b40      	cmp	r3, #64	@ 0x40
 800368a:	d010      	beq.n	80036ae <_ZN10TMCStepper10microstepsEt+0xe6>
    case  16: mres(4); break;
    case   8: mres(5); break;
    case   4: mres(6); break;
    case   2: mres(7); break;
    case   1: mres(8); break;
    default: break;
 800368c:	e047      	b.n	800371e <_ZN10TMCStepper10microstepsEt+0x156>
    case 256: mres(0); break;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	3324      	adds	r3, #36	@ 0x24
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2100      	movs	r1, #0
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	4798      	blx	r3
 800369c:	e040      	b.n	8003720 <_ZN10TMCStepper10microstepsEt+0x158>
    case 128: mres(1); break;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	3324      	adds	r3, #36	@ 0x24
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2101      	movs	r1, #1
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	4798      	blx	r3
 80036ac:	e038      	b.n	8003720 <_ZN10TMCStepper10microstepsEt+0x158>
    case  64: mres(2); break;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	3324      	adds	r3, #36	@ 0x24
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2102      	movs	r1, #2
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	4798      	blx	r3
 80036bc:	e030      	b.n	8003720 <_ZN10TMCStepper10microstepsEt+0x158>
    case  32: mres(3); break;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	3324      	adds	r3, #36	@ 0x24
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2103      	movs	r1, #3
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	4798      	blx	r3
 80036cc:	e028      	b.n	8003720 <_ZN10TMCStepper10microstepsEt+0x158>
    case  16: mres(4); break;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	3324      	adds	r3, #36	@ 0x24
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2104      	movs	r1, #4
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	4798      	blx	r3
 80036dc:	e020      	b.n	8003720 <_ZN10TMCStepper10microstepsEt+0x158>
    case   8: mres(5); break;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	3324      	adds	r3, #36	@ 0x24
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2105      	movs	r1, #5
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	4798      	blx	r3
 80036ec:	e018      	b.n	8003720 <_ZN10TMCStepper10microstepsEt+0x158>
    case   4: mres(6); break;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	3324      	adds	r3, #36	@ 0x24
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2106      	movs	r1, #6
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	4798      	blx	r3
 80036fc:	e010      	b.n	8003720 <_ZN10TMCStepper10microstepsEt+0x158>
    case   2: mres(7); break;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	3324      	adds	r3, #36	@ 0x24
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2107      	movs	r1, #7
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	4798      	blx	r3
 800370c:	e008      	b.n	8003720 <_ZN10TMCStepper10microstepsEt+0x158>
    case   1: mres(8); break;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	3324      	adds	r3, #36	@ 0x24
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2108      	movs	r1, #8
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	4798      	blx	r3
 800371c:	e000      	b.n	8003720 <_ZN10TMCStepper10microstepsEt+0x158>
    default: break;
 800371e:	bf00      	nop
  }
}
 8003720:	bf00      	nop
 8003722:	3708      	adds	r7, #8
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <_ZN10TMCStepper10blank_timeEh>:
    case 8: return   1;
  }
  return 1;
}

void TMCStepper::blank_time(uint8_t value) {
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	460b      	mov	r3, r1
 8003732:	70fb      	strb	r3, [r7, #3]
  switch (value) {
 8003734:	78fb      	ldrb	r3, [r7, #3]
 8003736:	2b36      	cmp	r3, #54	@ 0x36
 8003738:	d022      	beq.n	8003780 <_ZN10TMCStepper10blank_timeEh+0x58>
 800373a:	2b36      	cmp	r3, #54	@ 0x36
 800373c:	dc28      	bgt.n	8003790 <_ZN10TMCStepper10blank_timeEh+0x68>
 800373e:	2b24      	cmp	r3, #36	@ 0x24
 8003740:	d016      	beq.n	8003770 <_ZN10TMCStepper10blank_timeEh+0x48>
 8003742:	2b24      	cmp	r3, #36	@ 0x24
 8003744:	dc24      	bgt.n	8003790 <_ZN10TMCStepper10blank_timeEh+0x68>
 8003746:	2b10      	cmp	r3, #16
 8003748:	d002      	beq.n	8003750 <_ZN10TMCStepper10blank_timeEh+0x28>
 800374a:	2b18      	cmp	r3, #24
 800374c:	d008      	beq.n	8003760 <_ZN10TMCStepper10blank_timeEh+0x38>
    case 16: tbl(0b00); break;
    case 24: tbl(0b01); break;
    case 36: tbl(0b10); break;
    case 54: tbl(0b11); break;
  }
}
 800374e:	e01f      	b.n	8003790 <_ZN10TMCStepper10blank_timeEh+0x68>
    case 16: tbl(0b00); break;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	332c      	adds	r3, #44	@ 0x2c
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2100      	movs	r1, #0
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	4798      	blx	r3
 800375e:	e017      	b.n	8003790 <_ZN10TMCStepper10blank_timeEh+0x68>
    case 24: tbl(0b01); break;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	332c      	adds	r3, #44	@ 0x2c
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2101      	movs	r1, #1
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	4798      	blx	r3
 800376e:	e00f      	b.n	8003790 <_ZN10TMCStepper10blank_timeEh+0x68>
    case 36: tbl(0b10); break;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	332c      	adds	r3, #44	@ 0x2c
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2102      	movs	r1, #2
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	4798      	blx	r3
 800377e:	e007      	b.n	8003790 <_ZN10TMCStepper10blank_timeEh+0x68>
    case 54: tbl(0b11); break;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	332c      	adds	r3, #44	@ 0x2c
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2103      	movs	r1, #3
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	4798      	blx	r3
 800378e:	bf00      	nop
}
 8003790:	bf00      	nop
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <_ZN10TMCStepper10TPOWERDOWNEh>:
bool  TMCStepper::drv_err()  { GSTAT_t r; r.sr = GSTAT(); return r.drv_err; }
bool  TMCStepper::uv_cp()    { GSTAT_t r; r.sr = GSTAT(); return r.uv_cp; }
///////////////////////////////////////////////////////////////////////////////////////
// W: TPOWERDOWN
uint8_t TMCStepper::TPOWERDOWN() { return TPOWERDOWN_register.sr; }
void TMCStepper::TPOWERDOWN(uint8_t input) {
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	460b      	mov	r3, r1
 80037a2:	70fb      	strb	r3, [r7, #3]
  TPOWERDOWN_register.sr = input;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	78fa      	ldrb	r2, [r7, #3]
 80037a8:	71da      	strb	r2, [r3, #7]
  write(TPOWERDOWN_register.address, TPOWERDOWN_register.sr);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	79d2      	ldrb	r2, [r2, #7]
 80037b4:	2111      	movs	r1, #17
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	4798      	blx	r3
}
 80037ba:	bf00      	nop
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
	...

080037c4 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>:

#if _GLIBCXX_USE_C99_STDLIB
  // 21.4 Numeric Conversions [string.conversions].
  inline int
  stoi(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::strtol, "stoi", __str.c_str(),
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af02      	add	r7, sp, #8
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f022 fe61 	bl	8026498 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80037d6:	4602      	mov	r2, r0
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	9300      	str	r3, [sp, #0]
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	4904      	ldr	r1, [pc, #16]	@ (80037f0 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x2c>)
 80037e0:	4804      	ldr	r0, [pc, #16]	@ (80037f4 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x30>)
 80037e2:	f000 fa34 	bl	8003c4e <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>
 80037e6:	4603      	mov	r3, r0
					__idx, __base); }
 80037e8:	4618      	mov	r0, r3
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	08027ab0 	.word	0x08027ab0
 80037f4:	08026a99 	.word	0x08026a99

080037f8 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>:
#include "pin.h"
#include <cstdio>

Pin::Pin(const std::string& portAndPin, int dir) 
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	607a      	str	r2, [r7, #4]
    : portAndPin(portAndPin), dir(dir), modifier(NONE) {
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	68b9      	ldr	r1, [r7, #8]
 8003808:	4618      	mov	r0, r3
 800380a:	f022 fe72 	bl	80264f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	b2da      	uxtb	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	761a      	strb	r2, [r3, #24]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	765a      	strb	r2, [r3, #25]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	332c      	adds	r3, #44	@ 0x2c
 8003820:	2200      	movs	r2, #0
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	605a      	str	r2, [r3, #4]
 8003826:	609a      	str	r2, [r3, #8]
 8003828:	60da      	str	r2, [r3, #12]
 800382a:	611a      	str	r2, [r3, #16]
    configurePin();
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f000 f835 	bl	800389c <_ZN3Pin12configurePinEv>
    enableClock();
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f000 f8a8 	bl	8003988 <_ZN3Pin11enableClockEv>
    initialisePin();
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f000 f949 	bl	8003ad0 <_ZN3Pin13initialisePinEv>
}
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	4618      	mov	r0, r3
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii>:

Pin::Pin(const std::string& portAndPin, int dir, int modifier) 
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
 8003854:	603b      	str	r3, [r7, #0]
    : portAndPin(portAndPin), dir(dir), modifier(modifier) {
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	68b9      	ldr	r1, [r7, #8]
 800385a:	4618      	mov	r0, r3
 800385c:	f022 fe49 	bl	80264f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	b2da      	uxtb	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	761a      	strb	r2, [r3, #24]
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	b2da      	uxtb	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	765a      	strb	r2, [r3, #25]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	332c      	adds	r3, #44	@ 0x2c
 8003874:	2200      	movs	r2, #0
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	605a      	str	r2, [r3, #4]
 800387a:	609a      	str	r2, [r3, #8]
 800387c:	60da      	str	r2, [r3, #12]
 800387e:	611a      	str	r2, [r3, #16]
    configurePin();
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f000 f80b 	bl	800389c <_ZN3Pin12configurePinEv>
    enableClock();
 8003886:	68f8      	ldr	r0, [r7, #12]
 8003888:	f000 f87e 	bl	8003988 <_ZN3Pin11enableClockEv>
    initialisePin();
 800388c:	68f8      	ldr	r0, [r7, #12]
 800388e:	f000 f91f 	bl	8003ad0 <_ZN3Pin13initialisePinEv>
}
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	4618      	mov	r0, r3
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <_ZN3Pin12configurePinEv>:

void Pin::configurePin() {
 800389c:	b5b0      	push	{r4, r5, r7, lr}
 800389e:	b090      	sub	sp, #64	@ 0x40
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
    GPIO_TypeDef* gpioPorts[8] = {GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, GPIOF, GPIOG, GPIOH};
 80038a4:	4b36      	ldr	r3, [pc, #216]	@ (8003980 <_ZN3Pin12configurePinEv+0xe4>)
 80038a6:	f107 0408 	add.w	r4, r7, #8
 80038aa:	461d      	mov	r5, r3
 80038ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038b0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80038b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    if (portAndPin[0] == 'P') {
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2100      	movs	r1, #0
 80038bc:	4618      	mov	r0, r3
 80038be:	f022 fccd 	bl	802625c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80038c2:	4603      	mov	r3, r0
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	2b50      	cmp	r3, #80	@ 0x50
 80038c8:	bf0c      	ite	eq
 80038ca:	2301      	moveq	r3, #1
 80038cc:	2300      	movne	r3, #0
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d042      	beq.n	800395a <_ZN3Pin12configurePinEv+0xbe>
        portIndex = portAndPin[1] - 'A';
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2101      	movs	r1, #1
 80038d8:	4618      	mov	r0, r3
 80038da:	f022 fcbf 	bl	802625c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80038de:	4603      	mov	r3, r0
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	3b41      	subs	r3, #65	@ 0x41
 80038e4:	b2da      	uxtb	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	769a      	strb	r2, [r3, #26]
        pinNumber = std::stoi(portAndPin.substr(3));
 80038ea:	6879      	ldr	r1, [r7, #4]
 80038ec:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80038f0:	f04f 33ff 	mov.w	r3, #4294967295
 80038f4:	2203      	movs	r2, #3
 80038f6:	f022 fe2d 	bl	8026554 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 80038fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80038fe:	220a      	movs	r2, #10
 8003900:	2100      	movs	r1, #0
 8003902:	4618      	mov	r0, r3
 8003904:	f7ff ff5e 	bl	80037c4 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8003908:	4603      	mov	r3, r0
 800390a:	b29a      	uxth	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	839a      	strh	r2, [r3, #28]
 8003910:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003914:	4618      	mov	r0, r3
 8003916:	f022 fbdc 	bl	80260d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        pin = 1 << pinNumber;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	8b9b      	ldrh	r3, [r3, #28]
 800391e:	461a      	mov	r2, r3
 8003920:	2301      	movs	r3, #1
 8003922:	4093      	lsls	r3, r2
 8003924:	b29a      	uxth	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	83da      	strh	r2, [r3, #30]
    } else {
        printf("Invalid port and pin definition\n");
        return;
    }
    
    GPIOx = gpioPorts[portIndex];
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	7e9b      	ldrb	r3, [r3, #26]
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	3340      	adds	r3, #64	@ 0x40
 8003932:	443b      	add	r3, r7
 8003934:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	629a      	str	r2, [r3, #40]	@ 0x28
    
    mode = (dir == INPUT) ? GPIO_MODE_INPUT : GPIO_MODE_OUTPUT_PP;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	7e1b      	ldrb	r3, [r3, #24]
 8003940:	2b00      	cmp	r3, #0
 8003942:	bf14      	ite	ne
 8003944:	2301      	movne	r3, #1
 8003946:	2300      	moveq	r3, #0
 8003948:	b2db      	uxtb	r3, r3
 800394a:	461a      	mov	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	621a      	str	r2, [r3, #32]
    pull = (modifier == PULLUP) ? GPIO_PULLUP :
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	7e5b      	ldrb	r3, [r3, #25]
 8003954:	2b02      	cmp	r3, #2
 8003956:	d00c      	beq.n	8003972 <_ZN3Pin12configurePinEv+0xd6>
 8003958:	e003      	b.n	8003962 <_ZN3Pin12configurePinEv+0xc6>
        printf("Invalid port and pin definition\n");
 800395a:	480a      	ldr	r0, [pc, #40]	@ (8003984 <_ZN3Pin12configurePinEv+0xe8>)
 800395c:	f023 f9d8 	bl	8026d10 <puts>
 8003960:	e00a      	b.n	8003978 <_ZN3Pin12configurePinEv+0xdc>
           (modifier == PULLDOWN) ? GPIO_PULLDOWN :
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	7e5b      	ldrb	r3, [r3, #25]
    pull = (modifier == PULLUP) ? GPIO_PULLUP :
 8003966:	2b03      	cmp	r3, #3
 8003968:	d101      	bne.n	800396e <_ZN3Pin12configurePinEv+0xd2>
 800396a:	2302      	movs	r3, #2
 800396c:	e002      	b.n	8003974 <_ZN3Pin12configurePinEv+0xd8>
 800396e:	2300      	movs	r3, #0
 8003970:	e000      	b.n	8003974 <_ZN3Pin12configurePinEv+0xd8>
 8003972:	2301      	movs	r3, #1
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	6253      	str	r3, [r2, #36]	@ 0x24
           GPIO_NOPULL;
}
 8003978:	3740      	adds	r7, #64	@ 0x40
 800397a:	46bd      	mov	sp, r7
 800397c:	bdb0      	pop	{r4, r5, r7, pc}
 800397e:	bf00      	nop
 8003980:	08027ad8 	.word	0x08027ad8
 8003984:	08027ab8 	.word	0x08027ab8

08003988 <_ZN3Pin11enableClockEv>:

void Pin::enableClock() {
 8003988:	b480      	push	{r7}
 800398a:	b08b      	sub	sp, #44	@ 0x2c
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
    switch (portIndex) {
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	7e9b      	ldrb	r3, [r3, #26]
 8003994:	2b07      	cmp	r3, #7
 8003996:	f200 8093 	bhi.w	8003ac0 <_ZN3Pin11enableClockEv+0x138>
 800399a:	a201      	add	r2, pc, #4	@ (adr r2, 80039a0 <_ZN3Pin11enableClockEv+0x18>)
 800399c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a0:	080039c1 	.word	0x080039c1
 80039a4:	080039e1 	.word	0x080039e1
 80039a8:	08003a01 	.word	0x08003a01
 80039ac:	08003a21 	.word	0x08003a21
 80039b0:	08003a41 	.word	0x08003a41
 80039b4:	08003a61 	.word	0x08003a61
 80039b8:	08003a81 	.word	0x08003a81
 80039bc:	08003aa1 	.word	0x08003aa1
        case 0: __HAL_RCC_GPIOA_CLK_ENABLE(); break;
 80039c0:	4b42      	ldr	r3, [pc, #264]	@ (8003acc <_ZN3Pin11enableClockEv+0x144>)
 80039c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039c6:	4a41      	ldr	r2, [pc, #260]	@ (8003acc <_ZN3Pin11enableClockEv+0x144>)
 80039c8:	f043 0301 	orr.w	r3, r3, #1
 80039cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80039d0:	4b3e      	ldr	r3, [pc, #248]	@ (8003acc <_ZN3Pin11enableClockEv+0x144>)
 80039d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	627b      	str	r3, [r7, #36]	@ 0x24
 80039dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039de:	e06f      	b.n	8003ac0 <_ZN3Pin11enableClockEv+0x138>
        case 1: __HAL_RCC_GPIOB_CLK_ENABLE(); break;
 80039e0:	4b3a      	ldr	r3, [pc, #232]	@ (8003acc <_ZN3Pin11enableClockEv+0x144>)
 80039e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039e6:	4a39      	ldr	r2, [pc, #228]	@ (8003acc <_ZN3Pin11enableClockEv+0x144>)
 80039e8:	f043 0302 	orr.w	r3, r3, #2
 80039ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80039f0:	4b36      	ldr	r3, [pc, #216]	@ (8003acc <_ZN3Pin11enableClockEv+0x144>)
 80039f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	623b      	str	r3, [r7, #32]
 80039fc:	6a3b      	ldr	r3, [r7, #32]
 80039fe:	e05f      	b.n	8003ac0 <_ZN3Pin11enableClockEv+0x138>
        case 2: __HAL_RCC_GPIOC_CLK_ENABLE(); break;
 8003a00:	4b32      	ldr	r3, [pc, #200]	@ (8003acc <_ZN3Pin11enableClockEv+0x144>)
 8003a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a06:	4a31      	ldr	r2, [pc, #196]	@ (8003acc <_ZN3Pin11enableClockEv+0x144>)
 8003a08:	f043 0304 	orr.w	r3, r3, #4
 8003a0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003a10:	4b2e      	ldr	r3, [pc, #184]	@ (8003acc <_ZN3Pin11enableClockEv+0x144>)
 8003a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a16:	f003 0304 	and.w	r3, r3, #4
 8003a1a:	61fb      	str	r3, [r7, #28]
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	e04f      	b.n	8003ac0 <_ZN3Pin11enableClockEv+0x138>
        case 3: __HAL_RCC_GPIOD_CLK_ENABLE(); break;
 8003a20:	4b2a      	ldr	r3, [pc, #168]	@ (8003acc <_ZN3Pin11enableClockEv+0x144>)
 8003a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a26:	4a29      	ldr	r2, [pc, #164]	@ (8003acc <_ZN3Pin11enableClockEv+0x144>)
 8003a28:	f043 0308 	orr.w	r3, r3, #8
 8003a2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003a30:	4b26      	ldr	r3, [pc, #152]	@ (8003acc <_ZN3Pin11enableClockEv+0x144>)
 8003a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a36:	f003 0308 	and.w	r3, r3, #8
 8003a3a:	61bb      	str	r3, [r7, #24]
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	e03f      	b.n	8003ac0 <_ZN3Pin11enableClockEv+0x138>
        case 4: __HAL_RCC_GPIOE_CLK_ENABLE(); break;
 8003a40:	4b22      	ldr	r3, [pc, #136]	@ (8003acc <_ZN3Pin11enableClockEv+0x144>)
 8003a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a46:	4a21      	ldr	r2, [pc, #132]	@ (8003acc <_ZN3Pin11enableClockEv+0x144>)
 8003a48:	f043 0310 	orr.w	r3, r3, #16
 8003a4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003a50:	4b1e      	ldr	r3, [pc, #120]	@ (8003acc <_ZN3Pin11enableClockEv+0x144>)
 8003a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a56:	f003 0310 	and.w	r3, r3, #16
 8003a5a:	617b      	str	r3, [r7, #20]
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	e02f      	b.n	8003ac0 <_ZN3Pin11enableClockEv+0x138>
        case 5: __HAL_RCC_GPIOF_CLK_ENABLE(); break;
 8003a60:	4b1a      	ldr	r3, [pc, #104]	@ (8003acc <_ZN3Pin11enableClockEv+0x144>)
 8003a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a66:	4a19      	ldr	r2, [pc, #100]	@ (8003acc <_ZN3Pin11enableClockEv+0x144>)
 8003a68:	f043 0320 	orr.w	r3, r3, #32
 8003a6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003a70:	4b16      	ldr	r3, [pc, #88]	@ (8003acc <_ZN3Pin11enableClockEv+0x144>)
 8003a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a76:	f003 0320 	and.w	r3, r3, #32
 8003a7a:	613b      	str	r3, [r7, #16]
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	e01f      	b.n	8003ac0 <_ZN3Pin11enableClockEv+0x138>
        case 6: __HAL_RCC_GPIOG_CLK_ENABLE(); break;
 8003a80:	4b12      	ldr	r3, [pc, #72]	@ (8003acc <_ZN3Pin11enableClockEv+0x144>)
 8003a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a86:	4a11      	ldr	r2, [pc, #68]	@ (8003acc <_ZN3Pin11enableClockEv+0x144>)
 8003a88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003a90:	4b0e      	ldr	r3, [pc, #56]	@ (8003acc <_ZN3Pin11enableClockEv+0x144>)
 8003a92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a9a:	60fb      	str	r3, [r7, #12]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	e00f      	b.n	8003ac0 <_ZN3Pin11enableClockEv+0x138>
        case 7: __HAL_RCC_GPIOH_CLK_ENABLE(); break;
 8003aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8003acc <_ZN3Pin11enableClockEv+0x144>)
 8003aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003aa6:	4a09      	ldr	r2, [pc, #36]	@ (8003acc <_ZN3Pin11enableClockEv+0x144>)
 8003aa8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003aac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003ab0:	4b06      	ldr	r3, [pc, #24]	@ (8003acc <_ZN3Pin11enableClockEv+0x144>)
 8003ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ab6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aba:	60bb      	str	r3, [r7, #8]
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	bf00      	nop
    }
}
 8003ac0:	bf00      	nop
 8003ac2:	372c      	adds	r7, #44	@ 0x2c
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr
 8003acc:	58024400 	.word	0x58024400

08003ad0 <_ZN3Pin13initialisePinEv>:

void Pin::initialisePin() {
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(GPIOx, pin, GPIO_PIN_RESET);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	8bdb      	ldrh	r3, [r3, #30]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	f018 fbb2 	bl	801c24c <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = pin;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	8bdb      	ldrh	r3, [r3, #30]
 8003aec:	461a      	mov	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	62da      	str	r2, [r3, #44]	@ 0x2c
    GPIO_InitStruct.Mode = mode;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a1a      	ldr	r2, [r3, #32]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	631a      	str	r2, [r3, #48]	@ 0x30
    GPIO_InitStruct.Pull = pull;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	635a      	str	r2, [r3, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2202      	movs	r2, #2
 8003b06:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	332c      	adds	r3, #44	@ 0x2c
 8003b10:	4619      	mov	r1, r3
 8003b12:	4610      	mov	r0, r2
 8003b14:	f018 f9d2 	bl	801bebc <HAL_GPIO_Init>
}
 8003b18:	bf00      	nop
 8003b1a:	3708      	adds	r7, #8
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <_ZNK3Pin3getEv>:

bool Pin::get() const {
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
    return HAL_GPIO_ReadPin(GPIOx, pin);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	8bdb      	ldrh	r3, [r3, #30]
 8003b30:	4619      	mov	r1, r3
 8003b32:	4610      	mov	r0, r2
 8003b34:	f018 fb72 	bl	801c21c <HAL_GPIO_ReadPin>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	bf14      	ite	ne
 8003b3e:	2301      	movne	r3, #1
 8003b40:	2300      	moveq	r3, #0
 8003b42:	b2db      	uxtb	r3, r3
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3708      	adds	r7, #8
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <_ZN3Pin3setEb>:

void Pin::set(bool value) {
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	460b      	mov	r3, r1
 8003b56:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(GPIOx, pin, value ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	8bd9      	ldrh	r1, [r3, #30]
 8003b60:	78fb      	ldrb	r3, [r7, #3]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <_ZN3Pin3setEb+0x1e>
 8003b66:	2301      	movs	r3, #1
 8003b68:	e000      	b.n	8003b6c <_ZN3Pin3setEb+0x20>
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	f018 fb6d 	bl	801c24c <HAL_GPIO_WritePin>
}
 8003b72:	bf00      	nop
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <_ZN3Pin11setAsOutputEv>:

void Pin::setAsOutput() {
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b082      	sub	sp, #8
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
    mode = GPIO_MODE_OUTPUT_PP;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	621a      	str	r2, [r3, #32]
    pull = GPIO_NOPULL;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	625a      	str	r2, [r3, #36]	@ 0x24
    initialisePin();
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f7ff ff9e 	bl	8003ad0 <_ZN3Pin13initialisePinEv>
}
 8003b94:	bf00      	nop
 8003b96:	3708      	adds	r7, #8
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <_ZN3Pin10setAsInputEv>:

void Pin::setAsInput() {
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
    mode = GPIO_MODE_INPUT;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	621a      	str	r2, [r3, #32]
    pull = GPIO_NOPULL;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	625a      	str	r2, [r3, #36]	@ 0x24
    initialisePin();
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f7ff ff8d 	bl	8003ad0 <_ZN3Pin13initialisePinEv>
}
 8003bb6:	bf00      	nop
 8003bb8:	3708      	adds	r7, #8
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <_ZN3Pin9setPullUpEv>:
void Pin::setPullNone() {
    pull = GPIO_NOPULL;
    initialisePin();
}

void Pin::setPullUp() {
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b082      	sub	sp, #8
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
    pull = GPIO_PULLUP;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	625a      	str	r2, [r3, #36]	@ 0x24
    initialisePin();
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f7ff ff7f 	bl	8003ad0 <_ZN3Pin13initialisePinEv>
}
 8003bd2:	bf00      	nop
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>:
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
	_Save_errno() : _M_errno(errno) { errno = 0; }
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b082      	sub	sp, #8
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
 8003be2:	f023 fa41 	bl	8027068 <__errno>
 8003be6:	4603      	mov	r3, r0
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	601a      	str	r2, [r3, #0]
 8003bee:	f023 fa3b 	bl	8027068 <__errno>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	601a      	str	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>:
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
 8003c02:	b590      	push	{r4, r7, lr}
 8003c04:	b083      	sub	sp, #12
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
 8003c0a:	f023 fa2d 	bl	8027068 <__errno>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	bf0c      	ite	eq
 8003c16:	2301      	moveq	r3, #1
 8003c18:	2300      	movne	r3, #0
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d005      	beq.n	8003c2c <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev+0x2a>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681c      	ldr	r4, [r3, #0]
 8003c24:	f023 fa20 	bl	8027068 <__errno>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	601c      	str	r4, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd90      	pop	{r4, r7, pc}

08003c36 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb1EE>:
      struct _Range_chk {
	  static bool
	  _S_chk(_TRet, std::false_type) { return false; }

	  static bool
	  _S_chk(_TRet __val, std::true_type) // only called when _Ret is int
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
 8003c3e:	7039      	strb	r1, [r7, #0]
	  {
	    return __val < _TRet(__numeric_traits<int>::__min)
	      || __val > _TRet(__numeric_traits<int>::__max);
 8003c40:	2300      	movs	r3, #0
	  }
 8003c42:	4618      	mov	r0, r3
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>:
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
 8003c4e:	b590      	push	{r4, r7, lr}
 8003c50:	b08b      	sub	sp, #44	@ 0x2c
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	60f8      	str	r0, [r7, #12]
 8003c56:	60b9      	str	r1, [r7, #8]
 8003c58:	607a      	str	r2, [r7, #4]
 8003c5a:	603b      	str	r3, [r7, #0]
      } const __save_errno;
 8003c5c:	f107 0314 	add.w	r3, r7, #20
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7ff ffba 	bl	8003bda <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f107 0118 	add.w	r1, r7, #24
 8003c6c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	4798      	blx	r3
 8003c72:	6278      	str	r0, [r7, #36]	@ 0x24

      if (__endptr == __str)
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d102      	bne.n	8003c82 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x34>
	std::__throw_invalid_argument(__name);
 8003c7c:	68b8      	ldr	r0, [r7, #8]
 8003c7e:	f022 f949 	bl	8025f14 <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
 8003c82:	f023 f9f1 	bl	8027068 <__errno>
 8003c86:	4603      	mov	r3, r0
 8003c88:	681b      	ldr	r3, [r3, #0]
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 8003c8a:	2b22      	cmp	r3, #34	@ 0x22
 8003c8c:	d006      	beq.n	8003c9c <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x4e>
 8003c8e:	4621      	mov	r1, r4
 8003c90:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003c92:	f7ff ffd0 	bl	8003c36 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb1EE>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x52>
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e000      	b.n	8003ca2 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x54>
 8003ca0:	2300      	movs	r3, #0
      else if (errno == ERANGE
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d002      	beq.n	8003cac <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x5e>
	std::__throw_out_of_range(__name);
 8003ca6:	68b8      	ldr	r0, [r7, #8]
 8003ca8:	f022 f93a 	bl	8025f20 <_ZSt20__throw_out_of_rangePKc>
      else
	__ret = __tmp;
 8003cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cae:	623b      	str	r3, [r7, #32]

      if (__idx)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d005      	beq.n	8003cc2 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x74>
	*__idx = __endptr - __str;
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	601a      	str	r2, [r3, #0]

      return __ret;
 8003cc2:	6a3c      	ldr	r4, [r7, #32]
    }
 8003cc4:	f107 0314 	add.w	r3, r7, #20
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7ff ff9a 	bl	8003c02 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>
      return __ret;
 8003cce:	4623      	mov	r3, r4
    }
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	372c      	adds	r7, #44	@ 0x2c
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd90      	pop	{r4, r7, pc}

08003cd8 <_ZN9InterruptC1Ev>:

// Define the vector table, it is only declared in the class declaration
Interrupt* Interrupt::ISRVectorTable[] = {0};

// Constructor
Interrupt::Interrupt(void){}
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	4a04      	ldr	r2, [pc, #16]	@ (8003cf4 <_ZN9InterruptC1Ev+0x1c>)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	601a      	str	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr
 8003cf4:	080288a8 	.word	0x080288a8

08003cf8 <_ZN9Interrupt8RegisterEiPS_>:


// Methods

void Interrupt::Register(int interruptNumber, Interrupt* intThisPtr)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
	printf("Registering interrupt for interrupt number = %d\n", interruptNumber);
 8003d02:	6879      	ldr	r1, [r7, #4]
 8003d04:	4805      	ldr	r0, [pc, #20]	@ (8003d1c <_ZN9Interrupt8RegisterEiPS_+0x24>)
 8003d06:	f022 ff93 	bl	8026c30 <iprintf>
	ISRVectorTable[interruptNumber] = intThisPtr;
 8003d0a:	4905      	ldr	r1, [pc, #20]	@ (8003d20 <_ZN9Interrupt8RegisterEiPS_+0x28>)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003d14:	bf00      	nop
 8003d16:	3708      	adds	r7, #8
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	08027af8 	.word	0x08027af8
 8003d20:	240000a4 	.word	0x240000a4

08003d24 <_ZN9Interrupt13EXTI4_WrapperEv>:

void Interrupt::EXTI4_Wrapper(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	af00      	add	r7, sp, #0
	ISRVectorTable[EXTI4_IRQn]->ISR_Handler();
 8003d28:	4b04      	ldr	r3, [pc, #16]	@ (8003d3c <_ZN9Interrupt13EXTI4_WrapperEv+0x18>)
 8003d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a02      	ldr	r2, [pc, #8]	@ (8003d3c <_ZN9Interrupt13EXTI4_WrapperEv+0x18>)
 8003d32:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003d34:	4610      	mov	r0, r2
 8003d36:	4798      	blx	r3
}
 8003d38:	bf00      	nop
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	240000a4 	.word	0x240000a4

08003d40 <_ZN9Interrupt20DMA1_Stream0_WrapperEv>:

void Interrupt::DMA1_Stream0_Wrapper(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0
	ISRVectorTable[DMA1_Stream0_IRQn]->ISR_Handler();
 8003d44:	4b04      	ldr	r3, [pc, #16]	@ (8003d58 <_ZN9Interrupt20DMA1_Stream0_WrapperEv+0x18>)
 8003d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a02      	ldr	r2, [pc, #8]	@ (8003d58 <_ZN9Interrupt20DMA1_Stream0_WrapperEv+0x18>)
 8003d4e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003d50:	4610      	mov	r0, r2
 8003d52:	4798      	blx	r3
}
 8003d54:	bf00      	nop
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	240000a4 	.word	0x240000a4

08003d5c <_ZN9Interrupt20DMA1_Stream1_WrapperEv>:

void Interrupt::DMA1_Stream1_Wrapper(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
	ISRVectorTable[DMA1_Stream1_IRQn]->ISR_Handler();
 8003d60:	4b04      	ldr	r3, [pc, #16]	@ (8003d74 <_ZN9Interrupt20DMA1_Stream1_WrapperEv+0x18>)
 8003d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a02      	ldr	r2, [pc, #8]	@ (8003d74 <_ZN9Interrupt20DMA1_Stream1_WrapperEv+0x18>)
 8003d6a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003d6c:	4610      	mov	r0, r2
 8003d6e:	4798      	blx	r3
}
 8003d70:	bf00      	nop
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	240000a4 	.word	0x240000a4

08003d78 <_ZN9Interrupt12TIM2_WrapperEv>:


void Interrupt::TIM2_Wrapper(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM2_IRQn]->ISR_Handler();
 8003d7c:	4b04      	ldr	r3, [pc, #16]	@ (8003d90 <_ZN9Interrupt12TIM2_WrapperEv+0x18>)
 8003d7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a02      	ldr	r2, [pc, #8]	@ (8003d90 <_ZN9Interrupt12TIM2_WrapperEv+0x18>)
 8003d86:	6f12      	ldr	r2, [r2, #112]	@ 0x70
 8003d88:	4610      	mov	r0, r2
 8003d8a:	4798      	blx	r3
}
 8003d8c:	bf00      	nop
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	240000a4 	.word	0x240000a4

08003d94 <_ZN9Interrupt12TIM3_WrapperEv>:

void Interrupt::TIM3_Wrapper(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM3_IRQn]->ISR_Handler();
 8003d98:	4b04      	ldr	r3, [pc, #16]	@ (8003dac <_ZN9Interrupt12TIM3_WrapperEv+0x18>)
 8003d9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a02      	ldr	r2, [pc, #8]	@ (8003dac <_ZN9Interrupt12TIM3_WrapperEv+0x18>)
 8003da2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003da4:	4610      	mov	r0, r2
 8003da6:	4798      	blx	r3
}
 8003da8:	bf00      	nop
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	240000a4 	.word	0x240000a4

08003db0 <_ZN9Interrupt12TIM4_WrapperEv>:

void Interrupt::TIM4_Wrapper(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM4_IRQn]->ISR_Handler();
 8003db4:	4b04      	ldr	r3, [pc, #16]	@ (8003dc8 <_ZN9Interrupt12TIM4_WrapperEv+0x18>)
 8003db6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a02      	ldr	r2, [pc, #8]	@ (8003dc8 <_ZN9Interrupt12TIM4_WrapperEv+0x18>)
 8003dbe:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8003dc0:	4610      	mov	r0, r2
 8003dc2:	4798      	blx	r3
}
 8003dc4:	bf00      	nop
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	240000a4 	.word	0x240000a4

08003dcc <_ZSt23__is_constant_evaluatedv>:
  // This can be used without checking if the compiler supports the feature.
  // The macro _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED can be used to check if
  // the compiler support is present to make this function work as expected.
  _GLIBCXX_CONSTEXPR inline bool
  __is_constant_evaluated() _GLIBCXX_NOEXCEPT
  {
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
#if __cpp_if_consteval >= 202106L
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    if consteval { return true; } else { return false; }
#elif __cplusplus >= 201103L && __has_builtin(__builtin_is_constant_evaluated)
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    return __builtin_is_constant_evaluated();
 8003dd0:	2300      	movs	r3, #0
#else
    return false;
#endif
  }
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <_ZNSt11char_traitsIcE6lengthEPKc>:
#endif
	return __builtin_memcmp(__s1, __s2, __n);
      }

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus >= 201703L
	if (std::__is_constant_evaluated())
 8003de4:	f7ff fff2 	bl	8003dcc <_ZSt23__is_constant_evaluatedv>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d004      	beq.n	8003df8 <_ZNSt11char_traitsIcE6lengthEPKc+0x1c>
	  return __gnu_cxx::char_traits<char_type>::length(__s);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f002 f948 	bl	8006084 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>
 8003df4:	4603      	mov	r3, r0
 8003df6:	e004      	b.n	8003e02 <_ZNSt11char_traitsIcE6lengthEPKc+0x26>
#endif
	return __builtin_strlen(__s);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f7fc fad1 	bl	80003a0 <strlen>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	bf00      	nop
      }
 8003e02:	4618      	mov	r0, r3
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator8allocateEj>:
};

namespace detail {
class DefaultAllocator : public Allocator {
 public:
  void* allocate(size_t size) override {
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b082      	sub	sp, #8
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
 8003e12:	6039      	str	r1, [r7, #0]
    return malloc(size);
 8003e14:	6838      	ldr	r0, [r7, #0]
 8003e16:	f022 fcd1 	bl	80267bc <malloc>
 8003e1a:	4603      	mov	r3, r0
  }
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3708      	adds	r7, #8
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator10deallocateEPv>:

  void deallocate(void* ptr) override {
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
    free(ptr);
 8003e2e:	6838      	ldr	r0, [r7, #0]
 8003e30:	f022 fccc 	bl	80267cc <free>
  }
 8003e34:	bf00      	nop
 8003e36:	3708      	adds	r7, #8
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator10reallocateEPvj>:

  void* reallocate(void* ptr, size_t new_size) override {
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
    return realloc(ptr, new_size);
 8003e48:	6879      	ldr	r1, [r7, #4]
 8003e4a:	68b8      	ldr	r0, [r7, #8]
 8003e4c:	f022 fd74 	bl	8026938 <realloc>
 8003e50:	4603      	mov	r3, r0
  }
 8003e52:	4618      	mov	r0, r3
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
	...

08003e5c <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator8instanceEv>:

  static Allocator* instance() {
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0
    static DefaultAllocator allocator;
    return &allocator;
 8003e60:	4b02      	ldr	r3, [pc, #8]	@ (8003e6c <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator8instanceEv+0x10>)
  }
 8003e62:	4618      	mov	r0, r3
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr
 8003e6c:	24000000 	.word	0x24000000

08003e70 <_ZN11ArduinoJson8V730HB226detail10StringNode13sizeForLengthEj>:
  length_type length;
  char data[1];

  static constexpr size_t maxLength = numeric_limits<length_type>::highest();

  static constexpr size_t sizeForLength(size_t n) {
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
    return n + 1 + offsetof(StringNode, data);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	3309      	adds	r3, #9
  }
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE>:

  static StringNode* create(size_t length, Allocator* allocator) {
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
    if (length > maxLength)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e98:	d301      	bcc.n	8003e9e <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x16>
      return nullptr;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	e01b      	b.n	8003ed6 <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x4e>
    auto size = sizeForLength(length);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7ff ffe6 	bl	8003e70 <_ZN11ArduinoJson8V730HB226detail10StringNode13sizeForLengthEj>
 8003ea4:	60f8      	str	r0, [r7, #12]
    if (size < length)  // integer overflow
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d201      	bcs.n	8003eb2 <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x2a>
      return nullptr;   // (not testable on 64-bit)
 8003eae:	2300      	movs	r3, #0
 8003eb0:	e011      	b.n	8003ed6 <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x4e>
    auto node = reinterpret_cast<StringNode*>(allocator->allocate(size));
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68f9      	ldr	r1, [r7, #12]
 8003eba:	6838      	ldr	r0, [r7, #0]
 8003ebc:	4798      	blx	r3
 8003ebe:	60b8      	str	r0, [r7, #8]
    if (node) {
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d006      	beq.n	8003ed4 <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x4c>
      node->length = length_type(length);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	80da      	strh	r2, [r3, #6]
      node->references = 1;
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	809a      	strh	r2, [r3, #4]
    }
    return node;
 8003ed4:	68bb      	ldr	r3, [r7, #8]
  }
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE>:

  static StringNode* resize(StringNode* node, size_t length,
 8003ede:	b5b0      	push	{r4, r5, r7, lr}
 8003ee0:	b086      	sub	sp, #24
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	60f8      	str	r0, [r7, #12]
 8003ee6:	60b9      	str	r1, [r7, #8]
 8003ee8:	607a      	str	r2, [r7, #4]
                            Allocator* allocator) {
    ARDUINOJSON_ASSERT(node != nullptr);
    StringNode* newNode;
    if (length <= maxLength)
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ef0:	d20e      	bcs.n	8003f10 <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE+0x32>
      newNode = reinterpret_cast<StringNode*>(
          allocator->reallocate(node, sizeForLength(length)));
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	3308      	adds	r3, #8
 8003ef8:	681c      	ldr	r4, [r3, #0]
 8003efa:	687d      	ldr	r5, [r7, #4]
 8003efc:	68b8      	ldr	r0, [r7, #8]
 8003efe:	f7ff ffb7 	bl	8003e70 <_ZN11ArduinoJson8V730HB226detail10StringNode13sizeForLengthEj>
 8003f02:	4603      	mov	r3, r0
 8003f04:	461a      	mov	r2, r3
 8003f06:	68f9      	ldr	r1, [r7, #12]
 8003f08:	4628      	mov	r0, r5
 8003f0a:	47a0      	blx	r4
 8003f0c:	6178      	str	r0, [r7, #20]
 8003f0e:	e001      	b.n	8003f14 <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE+0x36>
    else
      newNode = nullptr;
 8003f10:	2300      	movs	r3, #0
 8003f12:	617b      	str	r3, [r7, #20]
    if (newNode)
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d004      	beq.n	8003f24 <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE+0x46>
      newNode->length = length_type(length);
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	80da      	strh	r2, [r3, #6]
 8003f22:	e006      	b.n	8003f32 <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE+0x54>
    else
      allocator->deallocate(node);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	3304      	adds	r3, #4
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68f9      	ldr	r1, [r7, #12]
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	4798      	blx	r3
    return newNode;
 8003f32:	697b      	ldr	r3, [r7, #20]
  }
 8003f34:	4618      	mov	r0, r3
 8003f36:	3718      	adds	r7, #24
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bdb0      	pop	{r4, r5, r7, pc}

08003f3c <_ZN11ArduinoJson8V730HB226detail10StringNode7destroyEPS2_PNS0_9AllocatorE>:

  static void destroy(StringNode* node, Allocator* allocator) {
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
    allocator->deallocate(node);
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	3304      	adds	r3, #4
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	6879      	ldr	r1, [r7, #4]
 8003f50:	6838      	ldr	r0, [r7, #0]
 8003f52:	4798      	blx	r3
  }
 8003f54:	bf00      	nop
 8003f56:	3708      	adds	r7, #8
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>:
  RamString(const char* str, size_t sz, bool isStatic = false)
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
 8003f68:	70fb      	strb	r3, [r7, #3]
      : str_(str), size_(sz & sizeMask), static_(isStatic) {
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	605a      	str	r2, [r3, #4]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	78fa      	ldrb	r2, [r7, #3]
 8003f7a:	721a      	strb	r2, [r3, #8]
  }
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3714      	adds	r7, #20
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>:
  bool isNull() const {
 8003f8a:	b480      	push	{r7}
 8003f8c:	b083      	sub	sp, #12
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
    return !str_;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	bf0c      	ite	eq
 8003f9a:	2301      	moveq	r3, #1
 8003f9c:	2300      	movne	r3, #0
 8003f9e:	b2db      	uxtb	r3, r3
  }
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <_ZNK11ArduinoJson8V730HB226detail9RamString4sizeEv>:
  size_t size() const {
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
    return size_;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
  }
 8003fb8:	4618      	mov	r0, r3
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <_ZNK11ArduinoJson8V730HB226detail9RamString4dataEv>:

  const char* data() const {
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
    return str_;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
  }
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE>:

  friend void swap(StringPool& a, StringPool& b) {
    swap_(a.strings_, b.strings_);
  }

  void clear(Allocator* allocator) {
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
    while (strings_) {
 8003fe6:	e00a      	b.n	8003ffe <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE+0x22>
      auto node = strings_;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	60fb      	str	r3, [r7, #12]
      strings_ = node->next;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	601a      	str	r2, [r3, #0]
      StringNode::destroy(node, allocator);
 8003ff6:	6839      	ldr	r1, [r7, #0]
 8003ff8:	68f8      	ldr	r0, [r7, #12]
 8003ffa:	f7ff ff9f 	bl	8003f3c <_ZN11ArduinoJson8V730HB226detail10StringNode7destroyEPS2_PNS0_9AllocatorE>
    while (strings_) {
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1f0      	bne.n	8003fe8 <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE+0xc>
    }
  }
 8004006:	bf00      	nop
 8004008:	bf00      	nop
 800400a:	3710      	adds	r7, #16
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <_ZN11ArduinoJson8V730HB226detail10StringPool3addEPNS1_10StringNodeE>:
    node->data[n] = 0;  // force NUL terminator
    add(node);
    return node;
  }

  void add(StringNode* node) {
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(node != nullptr);
    node->next = strings_;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	601a      	str	r2, [r3, #0]
    strings_ = node;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	683a      	ldr	r2, [r7, #0]
 8004026:	601a      	str	r2, [r3, #0]
  }
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE>:
        return node;
    }
    return nullptr;
  }

  void dereference(const char* s, Allocator* allocator) {
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
    StringNode* prev = nullptr;
 8004040:	2300      	movs	r3, #0
 8004042:	617b      	str	r3, [r7, #20]
    for (auto node = strings_; node; node = node->next) {
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	613b      	str	r3, [r7, #16]
 800404a:	e029      	b.n	80040a0 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x6c>
      if (node->data == s) {
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	3308      	adds	r3, #8
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	429a      	cmp	r2, r3
 8004054:	d11f      	bne.n	8004096 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x62>
        if (--node->references == 0) {
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	889b      	ldrh	r3, [r3, #4]
 800405a:	3b01      	subs	r3, #1
 800405c:	b29a      	uxth	r2, r3
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	809a      	strh	r2, [r3, #4]
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	889b      	ldrh	r3, [r3, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	bf0c      	ite	eq
 800406a:	2301      	moveq	r3, #1
 800406c:	2300      	movne	r3, #0
 800406e:	b2db      	uxtb	r3, r3
 8004070:	2b00      	cmp	r3, #0
 8004072:	d019      	beq.n	80040a8 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x74>
          if (prev)
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d004      	beq.n	8004084 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x50>
            prev->next = node->next;
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	601a      	str	r2, [r3, #0]
 8004082:	e003      	b.n	800408c <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x58>
          else
            strings_ = node->next;
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	601a      	str	r2, [r3, #0]
          StringNode::destroy(node, allocator);
 800408c:	6879      	ldr	r1, [r7, #4]
 800408e:	6938      	ldr	r0, [r7, #16]
 8004090:	f7ff ff54 	bl	8003f3c <_ZN11ArduinoJson8V730HB226detail10StringNode7destroyEPS2_PNS0_9AllocatorE>
        }
        return;
 8004094:	e008      	b.n	80040a8 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x74>
      }
      prev = node;
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	617b      	str	r3, [r7, #20]
    for (auto node = strings_; node; node = node->next) {
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	613b      	str	r3, [r7, #16]
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1d2      	bne.n	800404c <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x18>
 80040a6:	e000      	b.n	80040aa <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x76>
        return;
 80040a8:	bf00      	nop
    }
  }
 80040aa:	3718      	adds	r7, #24
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <_ZN11ArduinoJson8V730HB2210JsonStringC1Ev>:
// https://arduinojson.org/v7/api/jsonstring/
class JsonString {
  friend struct detail::StringAdapter<JsonString>;

 public:
  JsonString() : str_(nullptr, 0, true) {}
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	2301      	movs	r3, #1
 80040bc:	2200      	movs	r2, #0
 80040be:	2100      	movs	r1, #0
 80040c0:	f7ff ff4c 	bl	8003f5c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4618      	mov	r0, r3
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <_ZN11ArduinoJson8V730HB2210JsonStringC1EPKcb>:

  JsonString(const char* data, bool isStatic = false)
 80040ce:	b590      	push	{r4, r7, lr}
 80040d0:	b085      	sub	sp, #20
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	60f8      	str	r0, [r7, #12]
 80040d6:	60b9      	str	r1, [r7, #8]
 80040d8:	4613      	mov	r3, r2
 80040da:	71fb      	strb	r3, [r7, #7]
      : str_(data, data ? ::strlen(data) : 0, isStatic) {}
 80040dc:	68fc      	ldr	r4, [r7, #12]
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d004      	beq.n	80040ee <_ZN11ArduinoJson8V730HB2210JsonStringC1EPKcb+0x20>
 80040e4:	68b8      	ldr	r0, [r7, #8]
 80040e6:	f7fc f95b 	bl	80003a0 <strlen>
 80040ea:	4602      	mov	r2, r0
 80040ec:	e000      	b.n	80040f0 <_ZN11ArduinoJson8V730HB2210JsonStringC1EPKcb+0x22>
 80040ee:	2200      	movs	r2, #0
 80040f0:	79fb      	ldrb	r3, [r7, #7]
 80040f2:	68b9      	ldr	r1, [r7, #8]
 80040f4:	4620      	mov	r0, r4
 80040f6:	f7ff ff31 	bl	8003f5c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	4618      	mov	r0, r3
 80040fe:	3714      	adds	r7, #20
 8004100:	46bd      	mov	sp, r7
 8004102:	bd90      	pop	{r4, r7, pc}

08004104 <_ZNK11ArduinoJson8V730HB2210JsonString5c_strEv>:
                                int> = 0>
  JsonString(const char* data, TSize sz, bool isStatic = false)
      : str_(data, size_t(sz), isStatic) {}

  // Returns a pointer to the characters.
  const char* c_str() const {
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
    return str_.data();
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4618      	mov	r0, r3
 8004110:	f7ff ff58 	bl	8003fc4 <_ZNK11ArduinoJson8V730HB226detail9RamString4dataEv>
 8004114:	4603      	mov	r3, r0
  }
 8004116:	4618      	mov	r0, r3
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <_ZN11ArduinoJson8V730HB226detail13StringAdapterINS0_10JsonStringEvE5adaptERKS3_>:
namespace detail {
template <>
struct StringAdapter<JsonString> {
  using AdaptedString = RamString;

  static const AdaptedString& adapt(const JsonString& s) {
 800411e:	b480      	push	{r7}
 8004120:	b083      	sub	sp, #12
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
    return s.str_;
 8004126:	687b      	ldr	r3, [r7, #4]
  }
 8004128:	4618      	mov	r0, r3
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1Ev>:

class CollectionIterator {
  friend class CollectionData;

 public:
  CollectionIterator() : slot_(nullptr), currentId_(NULL_SLOT) {}
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	601a      	str	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004148:	809a      	strh	r2, [r3, #4]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4618      	mov	r0, r3
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>:

  void next(const ResourceManager* resources);

  bool done() const {
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
    return slot_ == nullptr;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	bf0c      	ite	eq
 8004168:	2301      	moveq	r3, #1
 800416a:	2300      	movne	r3, #0
 800416c:	b2db      	uxtb	r3, r3
  }
 800416e:	4618      	mov	r0, r3
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <_ZNK11ArduinoJson8V730HB226detail18CollectionIteratorneERKS2_>:

  bool operator==(const CollectionIterator& other) const {
    return slot_ == other.slot_;
  }

  bool operator!=(const CollectionIterator& other) const {
 800417a:	b480      	push	{r7}
 800417c:	b083      	sub	sp, #12
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
 8004182:	6039      	str	r1, [r7, #0]
    return slot_ != other.slot_;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	429a      	cmp	r2, r3
 800418e:	bf14      	ite	ne
 8004190:	2301      	movne	r3, #1
 8004192:	2300      	moveq	r3, #0
 8004194:	b2db      	uxtb	r3, r3
  }
 8004196:	4618      	mov	r0, r3
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr

080041a2 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorptEv>:

  VariantData* operator->() {
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b082      	sub	sp, #8
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(slot_ != nullptr);
    return data();
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 f805 	bl	80041ba <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 80041b0:	4603      	mov	r3, r0
  }
 80041b2:	4618      	mov	r0, r3
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>:
  const VariantData& operator*() const {
    ARDUINOJSON_ASSERT(slot_ != nullptr);
    return *data();
  }

  VariantData* data() {
 80041ba:	b480      	push	{r7}
 80041bc:	b083      	sub	sp, #12
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<VariantData*>(slot_);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
  }
 80041c6:	4618      	mov	r0, r3
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <_ZN11ArduinoJson8V730HB226detail14CollectionDatanwEjPv>:
  SlotId head_ = NULL_SLOT;
  SlotId tail_ = NULL_SLOT;

 public:
  // Placement new
  static void* operator new(size_t, void* p) noexcept {
 80041d2:	b480      	push	{r7}
 80041d4:	b083      	sub	sp, #12
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
 80041da:	6039      	str	r1, [r7, #0]
    return p;
 80041dc:	683b      	ldr	r3, [r7, #0]
  }
 80041de:	4618      	mov	r0, r3
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <_ZN11ArduinoJson8V730HB226detail19collectionToVariantEPNS1_14CollectionDataE>:
    const CollectionData* collection) {
  const void* data = collection;  // prevent warning cast-align
  return reinterpret_cast<const VariantData*>(data);
}

inline VariantData* collectionToVariant(CollectionData* collection) {
 80041ea:	b480      	push	{r7}
 80041ec:	b085      	sub	sp, #20
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
  void* data = collection;  // prevent warning cast-align
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	60fb      	str	r3, [r7, #12]
  return reinterpret_cast<VariantData*>(data);
 80041f6:	68fb      	ldr	r3, [r7, #12]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3714      	adds	r7, #20
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>:
#endif
  Object = 0x20,
  Array = 0x40,
};

inline bool operator&(VariantType type, VariantTypeBits bit) {
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	4603      	mov	r3, r0
 800420c:	460a      	mov	r2, r1
 800420e:	71fb      	strb	r3, [r7, #7]
 8004210:	4613      	mov	r3, r2
 8004212:	71bb      	strb	r3, [r7, #6]
  return (uint8_t(type) & uint8_t(bit)) != 0;
 8004214:	79fa      	ldrb	r2, [r7, #7]
 8004216:	79bb      	ldrb	r3, [r7, #6]
 8004218:	4013      	ands	r3, r2
 800421a:	b2db      	uxtb	r3, r3
 800421c:	2b00      	cmp	r3, #0
 800421e:	bf14      	ite	ne
 8004220:	2301      	movne	r3, #1
 8004222:	2300      	moveq	r3, #0
 8004224:	b2db      	uxtb	r3, r3
}
 8004226:	4618      	mov	r0, r3
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <_ZN11ArduinoJson8V730HB226detail14VariantContentC1Ev>:

union VariantContent {
  VariantContent() {}
 8004232:	b480      	push	{r7}
 8004234:	b083      	sub	sp, #12
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4618      	mov	r0, r3
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <_ZN11ArduinoJson8V730HB226detail11VariantDatanwEjPv>:
  VariantType type_;
  SlotId next_;

 public:
  // Placement new
  static void* operator new(size_t, void* p) noexcept {
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
    return p;
 8004252:	683b      	ldr	r3, [r7, #0]
  }
 8004254:	4618      	mov	r0, r3
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <_ZN11ArduinoJson8V730HB226detail11VariantDataC1Ev>:

  static void operator delete(void*, void*) noexcept {}

  VariantData() : type_(VariantType::Null), next_(NULL_SLOT) {}
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4618      	mov	r0, r3
 800426c:	f7ff ffe1 	bl	8004232 <_ZN11ArduinoJson8V730HB226detail14VariantContentC1Ev>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	711a      	strb	r2, [r3, #4]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800427c:	80da      	strh	r2, [r3, #6]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4618      	mov	r0, r3
 8004282:	3708      	adds	r7, #8
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>:

  SlotId next() const {
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
    return next_;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	88db      	ldrh	r3, [r3, #6]
  }
 8004294:	4618      	mov	r0, r3
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <_ZN11ArduinoJson8V730HB226detail11VariantData7setNextEt>:

  void setNext(SlotId slot) {
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	460b      	mov	r3, r1
 80042aa:	807b      	strh	r3, [r7, #2]
    next_ = slot;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	887a      	ldrh	r2, [r7, #2]
 80042b0:	80da      	strh	r2, [r3, #6]
  }
 80042b2:	bf00      	nop
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr

080042be <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv>:
      default:
        return true;
    }
  }

  ArrayData* asArray() {
 80042be:	b580      	push	{r7, lr}
 80042c0:	b082      	sub	sp, #8
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
    return isArray() ? &content_.asArray : 0;
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 f85f 	bl	800438a <_ZNK11ArduinoJson8V730HB226detail11VariantData7isArrayEv>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d001      	beq.n	80042d6 <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv+0x18>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	e000      	b.n	80042d8 <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv+0x1a>
 80042d6:	2300      	movs	r3, #0
  }
 80042d8:	4618      	mov	r0, r3
 80042da:	3708      	adds	r7, #8
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <_ZN11ArduinoJson8V730HB226detail11VariantData12asCollectionEv>:

  const ArrayData* asArray() const {
    return const_cast<VariantData*>(this)->asArray();
  }

  CollectionData* asCollection() {
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
    return isCollection() ? &content_.asCollection : 0;
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 f85f 	bl	80043ac <_ZNK11ArduinoJson8V730HB226detail11VariantData12isCollectionEv>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d001      	beq.n	80042f8 <_ZN11ArduinoJson8V730HB226detail11VariantData12asCollectionEv+0x18>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	e000      	b.n	80042fa <_ZN11ArduinoJson8V730HB226detail11VariantData12asCollectionEv+0x1a>
 80042f8:	2300      	movs	r3, #0
  }
 80042fa:	4618      	mov	r0, r3
 80042fc:	3708      	adds	r7, #8
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv>:
      default:
        return 0;
    }
  }

  ObjectData* asObject() {
 8004302:	b580      	push	{r7, lr}
 8004304:	b082      	sub	sp, #8
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
    return isObject() ? &content_.asObject : 0;
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 f86c 	bl	80043e8 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isObjectEv>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv+0x18>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	e000      	b.n	800431c <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv+0x1a>
 800431a:	2300      	movs	r3, #0
  }
 800431c:	4618      	mov	r0, r3
 800431e:	3708      	adds	r7, #8
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asObjectEv>:

  const ObjectData* asObject() const {
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
    return const_cast<VariantData*>(this)->asObject();
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f7ff ffe8 	bl	8004302 <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv>
 8004332:	4603      	mov	r3, r0
  }
 8004334:	4618      	mov	r0, r3
 8004336:	3708      	adds	r7, #8
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv>:
      default:
        return JsonString();
    }
  }

  JsonString asString() const {
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
    switch (type_) {
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	791b      	ldrb	r3, [r3, #4]
 800434a:	2b04      	cmp	r3, #4
 800434c:	d002      	beq.n	8004354 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x18>
 800434e:	2b05      	cmp	r3, #5
 8004350:	d008      	beq.n	8004364 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x28>
 8004352:	e013      	b.n	800437c <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x40>
      case VariantType::LinkedString:
        return JsonString(content_.asLinkedString, true);
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2201      	movs	r2, #1
 800435a:	4619      	mov	r1, r3
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f7ff feb6 	bl	80040ce <_ZN11ArduinoJson8V730HB2210JsonStringC1EPKcb>
 8004362:	e00e      	b.n	8004382 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x46>
      case VariantType::OwnedString:
        return JsonString(content_.asOwnedString->data,
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f103 0108 	add.w	r1, r3, #8
                          content_.asOwnedString->length);
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	88da      	ldrh	r2, [r3, #6]
 8004372:	2300      	movs	r3, #0
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f001 fea5 	bl	80060c4 <_ZN11ArduinoJson8V730HB2210JsonStringC1ItLi0EEEPKcT_b>
 800437a:	e002      	b.n	8004382 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x46>
      default:
        return JsonString();
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f7ff fe97 	bl	80040b0 <_ZN11ArduinoJson8V730HB2210JsonStringC1Ev>
    }
  }
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	3708      	adds	r7, #8
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}

0800438a <_ZNK11ArduinoJson8V730HB226detail11VariantData7isArrayEv>:
    if (!obj)
      return nullptr;
    return obj->getOrAddMember(key, resources);
  }

  bool isArray() const {
 800438a:	b480      	push	{r7}
 800438c:	b083      	sub	sp, #12
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
    return type_ == VariantType::Array;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	791b      	ldrb	r3, [r3, #4]
 8004396:	2b40      	cmp	r3, #64	@ 0x40
 8004398:	bf0c      	ite	eq
 800439a:	2301      	moveq	r3, #1
 800439c:	2300      	movne	r3, #0
 800439e:	b2db      	uxtb	r3, r3
  }
 80043a0:	4618      	mov	r0, r3
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <_ZNK11ArduinoJson8V730HB226detail11VariantData12isCollectionEv>:

  bool isBoolean() const {
    return type_ == VariantType::Boolean;
  }

  bool isCollection() const {
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
    return type_ & VariantTypeBits::CollectionMask;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	791b      	ldrb	r3, [r3, #4]
 80043b8:	2160      	movs	r1, #96	@ 0x60
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7ff ff22 	bl	8004204 <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 80043c0:	4603      	mov	r3, r0
  }
 80043c2:	4618      	mov	r0, r3
 80043c4:	3708      	adds	r7, #8
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <_ZNK11ArduinoJson8V730HB226detail11VariantData7isFloatEv>:

  bool isFloat() const {
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b082      	sub	sp, #8
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
    return type_ & VariantTypeBits::NumberBit;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	791b      	ldrb	r3, [r3, #4]
 80043d6:	2108      	movs	r1, #8
 80043d8:	4618      	mov	r0, r3
 80043da:	f7ff ff13 	bl	8004204 <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 80043de:	4603      	mov	r3, r0
  }
 80043e0:	4618      	mov	r0, r3
 80043e2:	3708      	adds	r7, #8
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isObjectEv>:
    if (!var)
      return true;
    return var->isNull();
  }

  bool isObject() const {
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
    return type_ == VariantType::Object;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	791b      	ldrb	r3, [r3, #4]
 80043f4:	2b20      	cmp	r3, #32
 80043f6:	bf0c      	ite	eq
 80043f8:	2301      	moveq	r3, #1
 80043fa:	2300      	movne	r3, #0
 80043fc:	b2db      	uxtb	r3, r3
  }
 80043fe:	4618      	mov	r0, r3
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr

0800440a <_ZN11ArduinoJson8V730HB226detail11VariantData5resetEv>:
    if (!var)
      return;
    var->removeMember(key, resources);
  }

  void reset() {  // TODO: remove
 800440a:	b480      	push	{r7}
 800440c:	b083      	sub	sp, #12
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
    type_ = VariantType::Null;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	711a      	strb	r2, [r3, #4]
  }
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <_ZN11ArduinoJson8V730HB226detail11VariantData10setBooleanEb>:

  void setBoolean(bool value) {
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	460b      	mov	r3, r1
 800442e:	70fb      	strb	r3, [r7, #3]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    type_ = VariantType::Boolean;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2206      	movs	r2, #6
 8004434:	711a      	strb	r2, [r3, #4]
    content_.asBoolean = value;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	78fa      	ldrb	r2, [r7, #3]
 800443a:	701a      	strb	r2, [r3, #0]
  }
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringEPNS1_10StringNodeEPNS1_15ResourceManagerE>:
  }

  template <typename TAdaptedString>
  bool setString(TAdaptedString value, ResourceManager* resources);

  bool setString(StringNode* s, ResourceManager*) {
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
    setOwnedString(s);
 8004454:	68b9      	ldr	r1, [r7, #8]
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f000 f805 	bl	8004466 <_ZN11ArduinoJson8V730HB226detail11VariantData14setOwnedStringEPNS1_10StringNodeE>
    return true;
 800445c:	2301      	movs	r3, #1
  }
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <_ZN11ArduinoJson8V730HB226detail11VariantData14setOwnedStringEPNS1_10StringNodeE>:
    ARDUINOJSON_ASSERT(s);
    type_ = VariantType::LinkedString;
    content_.asLinkedString = s;
  }

  void setOwnedString(StringNode* s) {
 8004466:	b480      	push	{r7}
 8004468:	b083      	sub	sp, #12
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
 800446e:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    ARDUINOJSON_ASSERT(s);
    type_ = VariantType::OwnedString;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2205      	movs	r2, #5
 8004474:	711a      	strb	r2, [r3, #4]
    content_.asOwnedString = s;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	601a      	str	r2, [r3, #0]
  }
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <_ZN11ArduinoJson8V730HB226detail14CollectionDataC1Ev>:
class CollectionData {
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004496:	801a      	strh	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800449e:	805a      	strh	r2, [r3, #2]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4618      	mov	r0, r3
 80044a4:	370c      	adds	r7, #12
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr

080044ae <_ZN11ArduinoJson8V730HB226detail9ArrayDataC1Ev>:

#include <ArduinoJson/Collection/CollectionData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

class ArrayData : public CollectionData {
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b082      	sub	sp, #8
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7ff ffe5 	bl	8004488 <_ZN11ArduinoJson8V730HB226detail14CollectionDataC1Ev>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4618      	mov	r0, r3
 80044c2:	3708      	adds	r7, #8
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <_ZN11ArduinoJson8V730HB226detail11VariantData7toArrayEv>:

  static size_t size(const VariantData* var, const ResourceManager* resources) {
    return var != 0 ? var->size(resources) : 0;
  }

  ArrayData& toArray() {
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    type_ = VariantType::Array;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2240      	movs	r2, #64	@ 0x40
 80044d4:	711a      	strb	r2, [r3, #4]
    new (&content_.asArray) ArrayData();
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4619      	mov	r1, r3
 80044da:	2004      	movs	r0, #4
 80044dc:	f7ff fe79 	bl	80041d2 <_ZN11ArduinoJson8V730HB226detail14CollectionDatanwEjPv>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d006      	beq.n	80044f4 <_ZN11ArduinoJson8V730HB226detail11VariantData7toArrayEv+0x2c>
 80044e6:	2200      	movs	r2, #0
 80044e8:	801a      	strh	r2, [r3, #0]
 80044ea:	2200      	movs	r2, #0
 80044ec:	805a      	strh	r2, [r3, #2]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7ff ffdd 	bl	80044ae <_ZN11ArduinoJson8V730HB226detail9ArrayDataC1Ev>
    return content_.asArray;
 80044f4:	687b      	ldr	r3, [r7, #4]
  }
 80044f6:	4618      	mov	r0, r3
 80044f8:	3708      	adds	r7, #8
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <_ZN11ArduinoJson8V730HB226detail10ObjectDataC1Ev>:

#include <ArduinoJson/Collection/CollectionData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

class ObjectData : public CollectionData {
 80044fe:	b580      	push	{r7, lr}
 8004500:	b082      	sub	sp, #8
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4618      	mov	r0, r3
 800450a:	f7ff ffbd 	bl	8004488 <_ZN11ArduinoJson8V730HB226detail14CollectionDataC1Ev>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4618      	mov	r0, r3
 8004512:	3708      	adds	r7, #8
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <_ZN11ArduinoJson8V730HB226detail11VariantData8toObjectEv>:
      return 0;
    var->clear(resources);
    return &var->toArray();
  }

  ObjectData& toObject() {
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    type_ = VariantType::Object;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2220      	movs	r2, #32
 8004524:	711a      	strb	r2, [r3, #4]
    new (&content_.asObject) ObjectData();
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4619      	mov	r1, r3
 800452a:	2004      	movs	r0, #4
 800452c:	f7ff fe51 	bl	80041d2 <_ZN11ArduinoJson8V730HB226detail14CollectionDatanwEjPv>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d006      	beq.n	8004544 <_ZN11ArduinoJson8V730HB226detail11VariantData8toObjectEv+0x2c>
 8004536:	2200      	movs	r2, #0
 8004538:	801a      	strh	r2, [r3, #0]
 800453a:	2200      	movs	r2, #0
 800453c:	805a      	strh	r2, [r3, #2]
 800453e:	4618      	mov	r0, r3
 8004540:	f7ff ffdd 	bl	80044fe <_ZN11ArduinoJson8V730HB226detail10ObjectDataC1Ev>
    return content_.asObject;
 8004544:	687b      	ldr	r3, [r7, #4]
  }
 8004546:	4618      	mov	r0, r3
 8004548:	3708      	adds	r7, #8
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <_ZN11ArduinoJson8V730HB226detail10StringPoolC1Ev>:
  StringPool() = default;
 800454e:	b480      	push	{r7}
 8004550:	b083      	sub	sp, #12
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	601a      	str	r2, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4618      	mov	r0, r3
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr

0800456a <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEEC1Ev>:
  static_assert(sizeof(FreeSlot) <= sizeof(T), "T is too small");

 public:
  using Pool = MemoryPool<T>;

  MemoryPoolList() = default;
 800456a:	b480      	push	{r7}
 800456c:	b083      	sub	sp, #12
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	621a      	str	r2, [r3, #32]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	849a      	strh	r2, [r3, #36]	@ 0x24
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2204      	movs	r2, #4
 8004582:	84da      	strh	r2, [r3, #38]	@ 0x26
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800458a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4618      	mov	r0, r3
 8004590:	370c      	adds	r7, #12
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr

0800459a <_ZN11ArduinoJson8V730HB226detail15ResourceManagerC1EPNS0_9AllocatorE>:
  };

 public:
  constexpr static size_t slotSize = sizeof(SlotData);

  ResourceManager(Allocator* allocator = DefaultAllocator::instance())
 800459a:	b580      	push	{r7, lr}
 800459c:	b082      	sub	sp, #8
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
 80045a2:	6039      	str	r1, [r7, #0]
      : allocator_(allocator), overflowed_(false) {}
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	601a      	str	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	711a      	strb	r2, [r3, #4]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	3308      	adds	r3, #8
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7ff ffca 	bl	800454e <_ZN11ArduinoJson8V730HB226detail10StringPoolC1Ev>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	330c      	adds	r3, #12
 80045be:	4618      	mov	r0, r3
 80045c0:	f7ff ffd3 	bl	800456a <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEEC1Ev>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4618      	mov	r0, r3
 80045c8:	3708      	adds	r7, #8
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringEPNS1_10StringNodeE>:
      overflowed_ = true;

    return node;
  }

  void saveString(StringNode* node) {
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b082      	sub	sp, #8
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
 80045d6:	6039      	str	r1, [r7, #0]
    stringPool_.add(node);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	3308      	adds	r3, #8
 80045dc:	6839      	ldr	r1, [r7, #0]
 80045de:	4618      	mov	r0, r3
 80045e0:	f7ff fd16 	bl	8004010 <_ZN11ArduinoJson8V730HB226detail10StringPool3addEPNS1_10StringNodeE>
  }
 80045e4:	bf00      	nop
 80045e6:	3708      	adds	r7, #8
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <_ZN11ArduinoJson8V730HB226detail15ResourceManager12createStringEj>:
  template <typename TAdaptedString>
  StringNode* getString(const TAdaptedString& str) const {
    return stringPool_.get(str);
  }

  StringNode* createString(size_t length) {
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
    auto node = StringNode::create(length, allocator_);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4619      	mov	r1, r3
 80045fc:	6838      	ldr	r0, [r7, #0]
 80045fe:	f7ff fc43 	bl	8003e88 <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE>
 8004602:	60f8      	str	r0, [r7, #12]
    if (!node)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d102      	bne.n	8004610 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12createStringEj+0x24>
      overflowed_ = true;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2201      	movs	r2, #1
 800460e:	711a      	strb	r2, [r3, #4]
    return node;
 8004610:	68fb      	ldr	r3, [r7, #12]
  }
 8004612:	4618      	mov	r0, r3
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <_ZN11ArduinoJson8V730HB226detail15ResourceManager12resizeStringEPNS1_10StringNodeEj>:

  StringNode* resizeString(StringNode* node, size_t length) {
 800461a:	b580      	push	{r7, lr}
 800461c:	b084      	sub	sp, #16
 800461e:	af00      	add	r7, sp, #0
 8004620:	60f8      	str	r0, [r7, #12]
 8004622:	60b9      	str	r1, [r7, #8]
 8004624:	607a      	str	r2, [r7, #4]
    node = StringNode::resize(node, length, allocator_);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	461a      	mov	r2, r3
 800462c:	6879      	ldr	r1, [r7, #4]
 800462e:	68b8      	ldr	r0, [r7, #8]
 8004630:	f7ff fc55 	bl	8003ede <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE>
 8004634:	60b8      	str	r0, [r7, #8]
    if (!node)
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d102      	bne.n	8004642 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12resizeStringEPNS1_10StringNodeEj+0x28>
      overflowed_ = true;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2201      	movs	r2, #1
 8004640:	711a      	strb	r2, [r3, #4]
    return node;
 8004642:	68bb      	ldr	r3, [r7, #8]
  }
 8004644:	4618      	mov	r0, r3
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <_ZN11ArduinoJson8V730HB226detail15ResourceManager13destroyStringEPNS1_10StringNodeE>:

  void destroyString(StringNode* node) {
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
    StringNode::destroy(node, allocator_);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4619      	mov	r1, r3
 800465c:	6838      	ldr	r0, [r7, #0]
 800465e:	f7ff fc6d 	bl	8003f3c <_ZN11ArduinoJson8V730HB226detail10StringNode7destroyEPS2_PNS0_9AllocatorE>
  }
 8004662:	bf00      	nop
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <_ZN11ArduinoJson8V730HB226detail15ResourceManager17dereferenceStringEPKc>:

  void dereferenceString(const char* s) {
 800466a:	b580      	push	{r7, lr}
 800466c:	b082      	sub	sp, #8
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
 8004672:	6039      	str	r1, [r7, #0]
    stringPool_.dereference(s, allocator_);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f103 0008 	add.w	r0, r3, #8
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	461a      	mov	r2, r3
 8004680:	6839      	ldr	r1, [r7, #0]
 8004682:	f7ff fcd7 	bl	8004034 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE>
  }
 8004686:	bf00      	nop
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <_ZN11ArduinoJson8V730HB226detail15ResourceManager5clearEv>:

  void clear() {
 800468e:	b580      	push	{r7, lr}
 8004690:	b082      	sub	sp, #8
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
    variantPools_.clear(allocator_);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f103 020c 	add.w	r2, r3, #12
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4619      	mov	r1, r3
 80046a2:	4610      	mov	r0, r2
 80046a4:	f001 fd24 	bl	80060f0 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE>
    overflowed_ = false;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	711a      	strb	r2, [r3, #4]
    stringPool_.clear(allocator_);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f103 0208 	add.w	r2, r3, #8
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4619      	mov	r1, r3
 80046ba:	4610      	mov	r0, r2
 80046bc:	f7ff fc8e 	bl	8003fdc <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE>
  }
 80046c0:	bf00      	nop
 80046c2:	3708      	adds	r7, #8
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <_ZN11ArduinoJson8V730HB226detail15ResourceManager11shrinkToFitEv>:

  void shrinkToFit() {
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
    variantPools_.shrinkToFit(allocator_);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f103 020c 	add.w	r2, r3, #12
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4619      	mov	r1, r3
 80046dc:	4610      	mov	r0, r2
 80046de:	f001 fd3f 	bl	8006160 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE>
  }
 80046e2:	bf00      	nop
 80046e4:	3708      	adds	r7, #8
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>:
 public:
  // Creates an unbound reference.
  JsonVariantConst() : data_(nullptr), resources_(nullptr) {}

  // INTERNAL USE ONLY
  explicit JsonVariantConst(const detail::VariantData* data,
 80046ea:	b480      	push	{r7}
 80046ec:	b085      	sub	sp, #20
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	60f8      	str	r0, [r7, #12]
 80046f2:	60b9      	str	r1, [r7, #8]
 80046f4:	607a      	str	r2, [r7, #4]
                            const detail::ResourceManager* resources)
      : data_(data), resources_(resources) {}
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	68ba      	ldr	r2, [r7, #8]
 80046fa:	601a      	str	r2, [r3, #0]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	605a      	str	r2, [r3, #4]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	4618      	mov	r0, r3
 8004706:	3714      	adds	r7, #20
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <_ZNK11ArduinoJson8V730HB2216JsonVariantConst7getDataEv>:
  size_t memoryUsage() const {
    return 0;
  }

 protected:
  const detail::VariantData* getData() const {
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
    return data_;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
  }
 800471c:	4618      	mov	r0, r3
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <_ZNK11ArduinoJson8V730HB2216JsonVariantConst18getResourceManagerEv>:

  const detail::ResourceManager* getResourceManager() const {
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
    return resources_;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
  }
 8004734:	4618      	mov	r0, r3
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>:
 public:
  // Creates an unbound reference.
  JsonVariant() : data_(0), resources_(0) {}

  // INTERNAL USE ONLY
  JsonVariant(detail::VariantData* data, detail::ResourceManager* resources)
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
      : data_(data), resources_(resources) {}
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	68ba      	ldr	r2, [r7, #8]
 8004750:	601a      	str	r2, [r3, #0]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	605a      	str	r2, [r3, #4]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	4618      	mov	r0, r3
 800475c:	3714      	adds	r7, #20
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr

08004766 <_ZNK11ArduinoJson8V730HB2211JsonVariant18getResourceManagerEv>:

 private:
  detail::ResourceManager* getResourceManager() const {
 8004766:	b480      	push	{r7}
 8004768:	b083      	sub	sp, #12
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
    return resources_;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
  }
 8004772:	4618      	mov	r0, r3
 8004774:	370c      	adds	r7, #12
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr

0800477e <_ZNK11ArduinoJson8V730HB2211JsonVariant7getDataEv>:

  detail::VariantData* getData() const {
 800477e:	b480      	push	{r7}
 8004780:	b083      	sub	sp, #12
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
    return data_;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
  }
 800478a:	4618      	mov	r0, r3
 800478c:	370c      	adds	r7, #12
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr

08004796 <_ZN11ArduinoJson8V730HB229ConverterINS0_11JsonVariantEvE9checkJsonES2_>:

  static JsonVariant fromJson(JsonVariant src) {
    return src;
  }

  static bool checkJson(JsonVariant src) {
 8004796:	b580      	push	{r7, lr}
 8004798:	b084      	sub	sp, #16
 800479a:	af00      	add	r7, sp, #0
 800479c:	463b      	mov	r3, r7
 800479e:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 80047a2:	463b      	mov	r3, r7
 80047a4:	4618      	mov	r0, r3
 80047a6:	f001 fd13 	bl	80061d0 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 80047aa:	60f8      	str	r0, [r7, #12]
    return !!data;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	bf14      	ite	ne
 80047b2:	2301      	movne	r3, #1
 80047b4:	2300      	moveq	r3, #0
 80047b6:	b2db      	uxtb	r3, r3
  }
 80047b8:	4618      	mov	r0, r3
 80047ba:	3710      	adds	r7, #16
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1Ev>:

class JsonArrayIterator {
  friend class JsonArray;

 public:
  JsonArrayIterator() {}
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7ff fcb2 	bl	8004134 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1Ev>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4618      	mov	r0, r3
 80047d4:	3708      	adds	r7, #8
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1ENS0_6detail18CollectionIteratorEPNS2_15ResourceManagerE>:
  explicit JsonArrayIterator(detail::ArrayData::iterator iterator,
 80047da:	b480      	push	{r7}
 80047dc:	b085      	sub	sp, #20
 80047de:	af00      	add	r7, sp, #0
 80047e0:	60f8      	str	r0, [r7, #12]
 80047e2:	1d38      	adds	r0, r7, #4
 80047e4:	e880 0006 	stmia.w	r0, {r1, r2}
 80047e8:	603b      	str	r3, [r7, #0]
                             detail::ResourceManager* resources)
      : iterator_(iterator), resources_(resources) {}
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	461a      	mov	r2, r3
 80047ee:	1d3b      	adds	r3, r7, #4
 80047f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80047f4:	e882 0003 	stmia.w	r2, {r0, r1}
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	609a      	str	r2, [r3, #8]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	4618      	mov	r0, r3
 8004802:	3714      	adds	r7, #20
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <_ZN11ArduinoJson8V730HB2217JsonArrayIteratordeEv>:

  JsonVariant operator*() {
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
    return JsonVariant(iterator_.data(), resources_);
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	4618      	mov	r0, r3
 800481a:	f7ff fcce 	bl	80041ba <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 800481e:	4601      	mov	r1, r0
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	461a      	mov	r2, r3
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f7ff ff8a 	bl	8004740 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
  }
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	3708      	adds	r7, #8
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <_ZNK11ArduinoJson8V730HB2217JsonArrayIteratorneERKS1_>:

  bool operator==(const JsonArrayIterator& other) const {
    return iterator_ == other.iterator_;
  }

  bool operator!=(const JsonArrayIterator& other) const {
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
    return iterator_ != other.iterator_;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	4611      	mov	r1, r2
 8004844:	4618      	mov	r0, r3
 8004846:	f7ff fc98 	bl	800417a <_ZNK11ArduinoJson8V730HB226detail18CollectionIteratorneERKS2_>
 800484a:	4603      	mov	r3, r0
  }
 800484c:	4618      	mov	r0, r3
 800484e:	3708      	adds	r7, #8
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorppEv>:

  JsonArrayIterator& operator++() {
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
    iterator_.next(resources_);
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	4619      	mov	r1, r3
 8004864:	4610      	mov	r0, r2
 8004866:	f000 f936 	bl	8004ad6 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
    return *this;
 800486a:	687b      	ldr	r3, [r7, #4]
  }
 800486c:	4618      	mov	r0, r3
 800486e:	3708      	adds	r7, #8
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <_ZN11ArduinoJson8V730HB229JsonArrayC1Ev>:

 public:
  using iterator = JsonArrayIterator;

  // Constructs an unbound reference.
  JsonArray() : data_(0), resources_(0) {}
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	601a      	str	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	605a      	str	r2, [r3, #4]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4618      	mov	r0, r3
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr

08004896 <_ZN11ArduinoJson8V730HB229JsonArrayC1EPNS0_6detail9ArrayDataEPNS2_15ResourceManagerE>:

  // INTERNAL USE ONLY
  JsonArray(detail::ArrayData* data, detail::ResourceManager* resources)
 8004896:	b480      	push	{r7}
 8004898:	b085      	sub	sp, #20
 800489a:	af00      	add	r7, sp, #0
 800489c:	60f8      	str	r0, [r7, #12]
 800489e:	60b9      	str	r1, [r7, #8]
 80048a0:	607a      	str	r2, [r7, #4]
      : data_(data), resources_(resources) {}
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	68ba      	ldr	r2, [r7, #8]
 80048a6:	601a      	str	r2, [r3, #0]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	605a      	str	r2, [r3, #4]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	4618      	mov	r0, r3
 80048b2:	3714      	adds	r7, #20
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <_ZNK11ArduinoJson8V730HB229JsonArray5beginEv>:
    return detail::ArrayData::addValue(data_, value, resources_);
  }

  // Returns an iterator to the first element of the array.
  // https://arduinojson.org/v7/api/jsonarray/begin/
  iterator begin() const {
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
    if (!data_)
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d103      	bne.n	80048d6 <_ZNK11ArduinoJson8V730HB229JsonArray5beginEv+0x1a>
      return iterator();
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f7ff ff76 	bl	80047c0 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1Ev>
 80048d4:	e011      	b.n	80048fa <_ZNK11ArduinoJson8V730HB229JsonArray5beginEv+0x3e>
    return iterator(data_->createIterator(resources_), resources_);
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4619      	mov	r1, r3
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685a      	ldr	r2, [r3, #4]
 80048e0:	f107 0308 	add.w	r3, r7, #8
 80048e4:	4618      	mov	r0, r3
 80048e6:	f000 f919 	bl	8004b1c <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f107 0208 	add.w	r2, r7, #8
 80048f2:	ca06      	ldmia	r2, {r1, r2}
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f7ff ff70 	bl	80047da <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1ENS0_6detail18CollectionIteratorEPNS2_15ResourceManagerE>
  }
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	3710      	adds	r7, #16
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <_ZNK11ArduinoJson8V730HB229JsonArray3endEv>:

  // Returns an iterator following the last element of the array.
  // https://arduinojson.org/v7/api/jsonarray/end/
  iterator end() const {
 8004902:	b580      	push	{r7, lr}
 8004904:	b082      	sub	sp, #8
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
 800490a:	6039      	str	r1, [r7, #0]
    return iterator();
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f7ff ff57 	bl	80047c0 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1Ev>
  }
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	3708      	adds	r7, #8
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}

0800491a <_ZN11ArduinoJson8V730HB2210JsonObjectC1Ev>:

 public:
  using iterator = JsonObjectIterator;

  // Creates an unbound reference.
  JsonObject() : data_(0), resources_(0) {}
 800491a:	b480      	push	{r7}
 800491c:	b083      	sub	sp, #12
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	601a      	str	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	605a      	str	r2, [r3, #4]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4618      	mov	r0, r3
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <_ZN11ArduinoJson8V730HB2210JsonObjectC1EPNS0_6detail10ObjectDataEPNS2_15ResourceManagerE>:

  // INTERNAL USE ONLY
  JsonObject(detail::ObjectData* data, detail::ResourceManager* resource)
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	607a      	str	r2, [r7, #4]
      : data_(data), resources_(resource) {}
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	68ba      	ldr	r2, [r7, #8]
 800494c:	601a      	str	r2, [r3, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	605a      	str	r2, [r3, #4]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	4618      	mov	r0, r3
 8004958:	3714      	adds	r7, #20
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr

08004962 <_ZNK11ArduinoJson8V730HB2210JsonObject18getResourceManagerEv>:
  size_t memoryUsage() const {
    return 0;
  }

 private:
  detail::ResourceManager* getResourceManager() const {
 8004962:	b480      	push	{r7}
 8004964:	b083      	sub	sp, #12
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
    return resources_;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
  }
 800496e:	4618      	mov	r0, r3
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <_ZNK11ArduinoJson8V730HB2210JsonObject7getDataEv>:

  detail::VariantData* getData() const {
 800497a:	b580      	push	{r7, lr}
 800497c:	b082      	sub	sp, #8
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
    return detail::collectionToVariant(data_);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4618      	mov	r0, r3
 8004988:	f7ff fc2f 	bl	80041ea <_ZN11ArduinoJson8V730HB226detail19collectionToVariantEPNS1_14CollectionDataE>
 800498c:	4603      	mov	r3, r0
  }
 800498e:	4618      	mov	r0, r3
 8004990:	3708      	adds	r7, #8
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}

08004996 <_ZN11ArduinoJson8V730HB2212JsonDocumentC1EPNS0_9AllocatorE>:
// https://arduinojson.org/v7/api/jsondocument/
class JsonDocument : public detail::VariantOperators<const JsonDocument&> {
  friend class detail::VariantAttorney;

 public:
  explicit JsonDocument(Allocator* alloc = detail::DefaultAllocator::instance())
 8004996:	b580      	push	{r7, lr}
 8004998:	b082      	sub	sp, #8
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
 800499e:	6039      	str	r1, [r7, #0]
      : resources_(alloc) {}
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6839      	ldr	r1, [r7, #0]
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7ff fdf8 	bl	800459a <_ZN11ArduinoJson8V730HB226detail15ResourceManagerC1EPNS0_9AllocatorE>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	3338      	adds	r3, #56	@ 0x38
 80049ae:	4618      	mov	r0, r3
 80049b0:	f7ff fc56 	bl	8004260 <_ZN11ArduinoJson8V730HB226detail11VariantDataC1Ev>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4618      	mov	r0, r3
 80049b8:	3708      	adds	r7, #8
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}

080049be <_ZN11ArduinoJson8V730HB2212JsonDocument11shrinkToFitEv>:
    return resources_.allocator();
  }

  // Reduces the capacity of the memory pool to match the current usage.
  // https://arduinojson.org/v7/api/jsondocument/shrinktofit/
  void shrinkToFit() {
 80049be:	b580      	push	{r7, lr}
 80049c0:	b082      	sub	sp, #8
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
    resources_.shrinkToFit();
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7ff fe7d 	bl	80046c8 <_ZN11ArduinoJson8V730HB226detail15ResourceManager11shrinkToFitEv>
  }
 80049ce:	bf00      	nop
 80049d0:	3708      	adds	r7, #8
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}

080049d6 <_ZN11ArduinoJson8V730HB2212JsonDocument5clearEv>:
    return getVariant().template as<T>();
  }

  // Empties the document and resets the memory pool
  // https://arduinojson.org/v7/api/jsondocument/clear/
  void clear() {
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b082      	sub	sp, #8
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
    resources_.clear();
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7ff fe54 	bl	800468e <_ZN11ArduinoJson8V730HB226detail15ResourceManager5clearEv>
    data_.reset();
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	3338      	adds	r3, #56	@ 0x38
 80049ea:	4618      	mov	r0, r3
 80049ec:	f7ff fd0d 	bl	800440a <_ZN11ArduinoJson8V730HB226detail11VariantData5resetEv>
  }
 80049f0:	bf00      	nop
 80049f2:	3708      	adds	r7, #8
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <_ZN11ArduinoJson8V730HB2212JsonDocument18getResourceManagerEv>:

  JsonVariantConst getVariant() const {
    return JsonVariantConst(&data_, &resources_);
  }

  detail::ResourceManager* getResourceManager() {
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
    return &resources_;
 8004a00:	687b      	ldr	r3, [r7, #4]
  }
 8004a02:	4618      	mov	r0, r3
 8004a04:	370c      	adds	r7, #12
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr

08004a0e <_ZN11ArduinoJson8V730HB2212JsonDocument7getDataEv>:

  detail::VariantData* getData() {
 8004a0e:	b480      	push	{r7}
 8004a10:	b083      	sub	sp, #12
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
    return &data_;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	3338      	adds	r3, #56	@ 0x38
  }
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr

08004a26 <_ZN11ArduinoJson8V730HB2212JsonDocument15getOrCreateDataEv>:

  const detail::VariantData* getData() const {
    return &data_;
  }

  detail::VariantData* getOrCreateData() {
 8004a26:	b480      	push	{r7}
 8004a28:	b083      	sub	sp, #12
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
    return &data_;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	3338      	adds	r3, #56	@ 0x38
  }
 8004a32:	4618      	mov	r0, r3
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr

08004a3e <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE>:
    --index;
  }
  return it;
}

inline VariantData* ArrayData::addElement(ResourceManager* resources) {
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b084      	sub	sp, #16
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
 8004a46:	6039      	str	r1, [r7, #0]
  auto slot = resources->allocVariant();
 8004a48:	f107 0308 	add.w	r3, r7, #8
 8004a4c:	6839      	ldr	r1, [r7, #0]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 f93e 	bl	8004cd0 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!slot)
 8004a54:	f107 0308 	add.w	r3, r7, #8
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f001 fbdd 	bl	8006218 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	f083 0301 	eor.w	r3, r3, #1
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE+0x30>
    return nullptr;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	e00d      	b.n	8004a8a <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE+0x4c>
  CollectionData::appendOne(slot, resources);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	f107 0208 	add.w	r2, r7, #8
 8004a76:	ca06      	ldmia	r2, {r1, r2}
 8004a78:	f000 f867 	bl	8004b4a <_ZN11ArduinoJson8V730HB226detail14CollectionData9appendOneENS1_4SlotINS1_11VariantDataEEEPKNS1_15ResourceManagerE>
  return slot.ptr();
 8004a7c:	f107 0308 	add.w	r3, r7, #8
 8004a80:	4618      	mov	r0, r3
 8004a82:	f001 fbda 	bl	800623a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>
 8004a86:	4603      	mov	r3, r0
 8004a88:	bf00      	nop
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3710      	adds	r7, #16
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1EPNS1_11VariantDataEt>:
#include <ArduinoJson/Variant/VariantCompare.hpp>
#include <ArduinoJson/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

inline CollectionIterator::CollectionIterator(VariantData* slot, SlotId slotId)
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b084      	sub	sp, #16
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	60f8      	str	r0, [r7, #12]
 8004a9a:	60b9      	str	r1, [r7, #8]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	80fb      	strh	r3, [r7, #6]
    : slot_(slot), currentId_(slotId) {
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	601a      	str	r2, [r3, #0]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	88fa      	ldrh	r2, [r7, #6]
 8004aaa:	809a      	strh	r2, [r3, #4]
  nextId_ = slot_ ? slot_->next() : NULL_SLOT;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d007      	beq.n	8004ac4 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1EPNS1_11VariantDataEt+0x32>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7ff fbe5 	bl	8004288 <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	e001      	b.n	8004ac8 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1EPNS1_11VariantDataEt+0x36>
 8004ac4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	80da      	strh	r2, [r3, #6]
}
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3710      	adds	r7, #16
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>:

inline void CollectionIterator::next(const ResourceManager* resources) {
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b082      	sub	sp, #8
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
 8004ade:	6039      	str	r1, [r7, #0]
  ARDUINOJSON_ASSERT(currentId_ != NULL_SLOT);
  slot_ = resources->getVariant(nextId_);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	88db      	ldrh	r3, [r3, #6]
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	6838      	ldr	r0, [r7, #0]
 8004ae8:	f000 f965 	bl	8004db6 <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 8004aec:	4602      	mov	r2, r0
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	601a      	str	r2, [r3, #0]
  currentId_ = nextId_;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	88da      	ldrh	r2, [r3, #6]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	809a      	strh	r2, [r3, #4]
  if (slot_)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d008      	beq.n	8004b14 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE+0x3e>
    nextId_ = slot_->next();
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4618      	mov	r0, r3
 8004b08:	f7ff fbbe 	bl	8004288 <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	461a      	mov	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	80da      	strh	r2, [r3, #6]
}
 8004b14:	bf00      	nop
 8004b16:	3708      	adds	r7, #8
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>:

inline CollectionData::iterator CollectionData::createIterator(
    const ResourceManager* resources) const {
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
  return iterator(resources->getVariant(head_), head_);
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	881b      	ldrh	r3, [r3, #0]
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f941 	bl	8004db6 <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 8004b34:	4601      	mov	r1, r0
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	881b      	ldrh	r3, [r3, #0]
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f7ff ffa8 	bl	8004a92 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1EPNS1_11VariantDataEt>
}
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	3710      	adds	r7, #16
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}

08004b4a <_ZN11ArduinoJson8V730HB226detail14CollectionData9appendOneENS1_4SlotINS1_11VariantDataEEEPKNS1_15ResourceManagerE>:

inline void CollectionData::appendOne(Slot<VariantData> slot,
                                      const ResourceManager* resources) {
 8004b4a:	b590      	push	{r4, r7, lr}
 8004b4c:	b087      	sub	sp, #28
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	60f8      	str	r0, [r7, #12]
 8004b52:	1d38      	adds	r0, r7, #4
 8004b54:	e880 0006 	stmia.w	r0, {r1, r2}
 8004b58:	603b      	str	r3, [r7, #0]
  if (tail_ != NULL_SLOT) {
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	885b      	ldrh	r3, [r3, #2]
 8004b5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d019      	beq.n	8004b9a <_ZN11ArduinoJson8V730HB226detail14CollectionData9appendOneENS1_4SlotINS1_11VariantDataEEEPKNS1_15ResourceManagerE+0x50>
    auto tail = resources->getVariant(tail_);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	885b      	ldrh	r3, [r3, #2]
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	6838      	ldr	r0, [r7, #0]
 8004b6e:	f000 f922 	bl	8004db6 <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 8004b72:	6178      	str	r0, [r7, #20]
    tail->setNext(slot.id());
 8004b74:	697c      	ldr	r4, [r7, #20]
 8004b76:	1d3b      	adds	r3, r7, #4
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f001 fb6a 	bl	8006252 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	4619      	mov	r1, r3
 8004b82:	4620      	mov	r0, r4
 8004b84:	f7ff fb8c 	bl	80042a0 <_ZN11ArduinoJson8V730HB226detail11VariantData7setNextEt>
    tail_ = slot.id();
 8004b88:	1d3b      	adds	r3, r7, #4
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f001 fb61 	bl	8006252 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8004b90:	4603      	mov	r3, r0
 8004b92:	461a      	mov	r2, r3
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	805a      	strh	r2, [r3, #2]
  } else {
    head_ = slot.id();
    tail_ = slot.id();
  }
}
 8004b98:	e00f      	b.n	8004bba <_ZN11ArduinoJson8V730HB226detail14CollectionData9appendOneENS1_4SlotINS1_11VariantDataEEEPKNS1_15ResourceManagerE+0x70>
    head_ = slot.id();
 8004b9a:	1d3b      	adds	r3, r7, #4
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f001 fb58 	bl	8006252 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	801a      	strh	r2, [r3, #0]
    tail_ = slot.id();
 8004baa:	1d3b      	adds	r3, r7, #4
 8004bac:	4618      	mov	r0, r3
 8004bae:	f001 fb50 	bl	8006252 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	805a      	strh	r2, [r3, #2]
}
 8004bba:	bf00      	nop
 8004bbc:	371c      	adds	r7, #28
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd90      	pop	{r4, r7, pc}

08004bc2 <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE>:

inline void CollectionData::appendPair(Slot<VariantData> key,
                                       Slot<VariantData> value,
                                       const ResourceManager* resources) {
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	b590      	push	{r4, r7, lr}
 8004bc6:	b087      	sub	sp, #28
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	1d38      	adds	r0, r7, #4
 8004bce:	e880 0006 	stmia.w	r0, {r1, r2}
 8004bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  key->setNext(value.id());
 8004bd4:	1d3b      	adds	r3, r7, #4
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f001 fb47 	bl	800626a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>
 8004bdc:	4604      	mov	r4, r0
 8004bde:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004be2:	4618      	mov	r0, r3
 8004be4:	f001 fb35 	bl	8006252 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8004be8:	4603      	mov	r3, r0
 8004bea:	4619      	mov	r1, r3
 8004bec:	4620      	mov	r0, r4
 8004bee:	f7ff fb57 	bl	80042a0 <_ZN11ArduinoJson8V730HB226detail11VariantData7setNextEt>

  if (tail_ != NULL_SLOT) {
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	885b      	ldrh	r3, [r3, #2]
 8004bf6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d01a      	beq.n	8004c34 <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE+0x72>
    auto tail = resources->getVariant(tail_);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	885b      	ldrh	r3, [r3, #2]
 8004c02:	4619      	mov	r1, r3
 8004c04:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004c06:	f000 f8d6 	bl	8004db6 <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 8004c0a:	6178      	str	r0, [r7, #20]
    tail->setNext(key.id());
 8004c0c:	697c      	ldr	r4, [r7, #20]
 8004c0e:	1d3b      	adds	r3, r7, #4
 8004c10:	4618      	mov	r0, r3
 8004c12:	f001 fb1e 	bl	8006252 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8004c16:	4603      	mov	r3, r0
 8004c18:	4619      	mov	r1, r3
 8004c1a:	4620      	mov	r0, r4
 8004c1c:	f7ff fb40 	bl	80042a0 <_ZN11ArduinoJson8V730HB226detail11VariantData7setNextEt>
    tail_ = value.id();
 8004c20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004c24:	4618      	mov	r0, r3
 8004c26:	f001 fb14 	bl	8006252 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	805a      	strh	r2, [r3, #2]
  } else {
    head_ = key.id();
    tail_ = value.id();
  }
}
 8004c32:	e010      	b.n	8004c56 <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE+0x94>
    head_ = key.id();
 8004c34:	1d3b      	adds	r3, r7, #4
 8004c36:	4618      	mov	r0, r3
 8004c38:	f001 fb0b 	bl	8006252 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	461a      	mov	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	801a      	strh	r2, [r3, #0]
    tail_ = value.id();
 8004c44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f001 fb02 	bl	8006252 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	461a      	mov	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	805a      	strh	r2, [r3, #2]
}
 8004c56:	bf00      	nop
 8004c58:	371c      	adds	r7, #28
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004c60:	b002      	add	sp, #8
 8004c62:	4770      	bx	lr

08004c64 <_ZN11ArduinoJson8V730HB226detail14CollectionData5clearEPNS1_15ResourceManagerE>:

inline void CollectionData::clear(ResourceManager* resources) {
 8004c64:	b590      	push	{r4, r7, lr}
 8004c66:	b087      	sub	sp, #28
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
  auto next = head_;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	881b      	ldrh	r3, [r3, #0]
 8004c72:	82fb      	strh	r3, [r7, #22]
  while (next != NULL_SLOT) {
 8004c74:	e01b      	b.n	8004cae <_ZN11ArduinoJson8V730HB226detail14CollectionData5clearEPNS1_15ResourceManagerE+0x4a>
    auto currId = next;
 8004c76:	8afb      	ldrh	r3, [r7, #22]
 8004c78:	82bb      	strh	r3, [r7, #20]
    auto slot = resources->getVariant(next);
 8004c7a:	8afb      	ldrh	r3, [r7, #22]
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	6838      	ldr	r0, [r7, #0]
 8004c80:	f000 f899 	bl	8004db6 <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 8004c84:	6138      	str	r0, [r7, #16]
    next = slot->next();
 8004c86:	6938      	ldr	r0, [r7, #16]
 8004c88:	f7ff fafe 	bl	8004288 <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	82fb      	strh	r3, [r7, #22]
    resources->freeVariant({slot, currId});
 8004c90:	683c      	ldr	r4, [r7, #0]
 8004c92:	8aba      	ldrh	r2, [r7, #20]
 8004c94:	f107 0308 	add.w	r3, r7, #8
 8004c98:	6939      	ldr	r1, [r7, #16]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f001 faf1 	bl	8006282 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1EPS3_t>
 8004ca0:	f107 0308 	add.w	r3, r7, #8
 8004ca4:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004ca8:	4620      	mov	r0, r4
 8004caa:	f000 f851 	bl	8004d50 <_ZN11ArduinoJson8V730HB226detail15ResourceManager11freeVariantENS1_4SlotINS1_11VariantDataEEE>
  while (next != NULL_SLOT) {
 8004cae:	8afb      	ldrh	r3, [r7, #22]
 8004cb0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d1de      	bne.n	8004c76 <_ZN11ArduinoJson8V730HB226detail14CollectionData5clearEPNS1_15ResourceManagerE+0x12>
  }

  head_ = NULL_SLOT;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004cbe:	801a      	strh	r2, [r3, #0]
  tail_ = NULL_SLOT;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004cc6:	805a      	strh	r2, [r3, #2]
}
 8004cc8:	bf00      	nop
 8004cca:	371c      	adds	r7, #28
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd90      	pop	{r4, r7, pc}

08004cd0 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>:
#include <ArduinoJson/Polyfills/alias_cast.hpp>
#include <ArduinoJson/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

inline Slot<VariantData> ResourceManager::allocVariant() {
 8004cd0:	b590      	push	{r4, r7, lr}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  auto p = variantPools_.allocSlot(allocator_);
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	f103 010c 	add.w	r1, r3, #12
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	f107 0308 	add.w	r3, r7, #8
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f001 faf0 	bl	80062ce <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE>
  if (!p) {
 8004cee:	f107 0308 	add.w	r3, r7, #8
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f001 fb2e 	bl	8006354 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	f083 0301 	eor.w	r3, r3, #1
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d006      	beq.n	8004d12 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv+0x42>
    overflowed_ = true;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	2201      	movs	r2, #1
 8004d08:	711a      	strb	r2, [r3, #4]
    return {};
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f001 facd 	bl	80062aa <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1Ev>
 8004d10:	e01a      	b.n	8004d48 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv+0x78>
  }
  return {new (&p->variant) VariantData, p.id()};
 8004d12:	f107 0308 	add.w	r3, r7, #8
 8004d16:	4618      	mov	r0, r3
 8004d18:	f001 fb2d 	bl	8006376 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEptEv>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	4619      	mov	r1, r3
 8004d20:	2008      	movs	r0, #8
 8004d22:	f7ff fa91 	bl	8004248 <_ZN11ArduinoJson8V730HB226detail11VariantDatanwEjPv>
 8004d26:	4604      	mov	r4, r0
 8004d28:	2c00      	cmp	r4, #0
 8004d2a:	d002      	beq.n	8004d32 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv+0x62>
 8004d2c:	4620      	mov	r0, r4
 8004d2e:	f7ff fa97 	bl	8004260 <_ZN11ArduinoJson8V730HB226detail11VariantDataC1Ev>
 8004d32:	f107 0308 	add.w	r3, r7, #8
 8004d36:	4618      	mov	r0, r3
 8004d38:	f001 fb29 	bl	800638e <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	461a      	mov	r2, r3
 8004d40:	4621      	mov	r1, r4
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f001 fa9d 	bl	8006282 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1EPS3_t>
}
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	3714      	adds	r7, #20
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd90      	pop	{r4, r7, pc}

08004d50 <_ZN11ArduinoJson8V730HB226detail15ResourceManager11freeVariantENS1_4SlotINS1_11VariantDataEEE>:

inline void ResourceManager::freeVariant(Slot<VariantData> variant) {
 8004d50:	b5b0      	push	{r4, r5, r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	1d3b      	adds	r3, r7, #4
 8004d5a:	e883 0006 	stmia.w	r3, {r1, r2}
  variant->clear(this);
 8004d5e:	1d3b      	adds	r3, r7, #4
 8004d60:	4618      	mov	r0, r3
 8004d62:	f001 fa82 	bl	800626a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>
 8004d66:	4603      	mov	r3, r0
 8004d68:	68f9      	ldr	r1, [r7, #12]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f000 fa1c 	bl	80051a8 <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
  variantPools_.freeSlot({alias_cast<SlotData*>(variant.ptr()), variant.id()});
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f103 040c 	add.w	r4, r3, #12
 8004d76:	1d3b      	adds	r3, r7, #4
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f001 fa5e 	bl	800623a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	4618      	mov	r0, r3
 8004d82:	f001 fb10 	bl	80063a6 <_ZN11ArduinoJson8V730HB226detail10alias_castIPNS1_15ResourceManager8SlotDataEPNS1_11VariantDataEEET_T0_>
 8004d86:	4605      	mov	r5, r0
 8004d88:	1d3b      	adds	r3, r7, #4
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f001 fa61 	bl	8006252 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8004d90:	4603      	mov	r3, r0
 8004d92:	461a      	mov	r2, r3
 8004d94:	f107 0310 	add.w	r3, r7, #16
 8004d98:	4629      	mov	r1, r5
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f001 fb10 	bl	80063c0 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
 8004da0:	f107 0310 	add.w	r3, r7, #16
 8004da4:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004da8:	4620      	mov	r0, r4
 8004daa:	f001 fb1d 	bl	80063e8 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE8freeSlotENS1_4SlotIS4_EE>
}
 8004dae:	bf00      	nop
 8004db0:	3718      	adds	r7, #24
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bdb0      	pop	{r4, r5, r7, pc}

08004db6 <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>:

inline VariantData* ResourceManager::getVariant(SlotId id) const {
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b082      	sub	sp, #8
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	807b      	strh	r3, [r7, #2]
  return reinterpret_cast<VariantData*>(variantPools_.getSlot(id));
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	330c      	adds	r3, #12
 8004dc6:	887a      	ldrh	r2, [r7, #2]
 8004dc8:	4611      	mov	r1, r2
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f001 fb28 	bl	8006420 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt>
 8004dd0:	4603      	mov	r3, r0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3708      	adds	r7, #8
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>:

#if ARDUINOJSON_USE_EXTENSIONS
inline Slot<VariantExtension> ResourceManager::allocExtension() {
 8004dda:	b590      	push	{r4, r7, lr}
 8004ddc:	b085      	sub	sp, #20
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
 8004de2:	6039      	str	r1, [r7, #0]
  auto p = variantPools_.allocSlot(allocator_);
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	f103 010c 	add.w	r1, r3, #12
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	f107 0308 	add.w	r3, r7, #8
 8004df2:	4618      	mov	r0, r3
 8004df4:	f001 fa6b 	bl	80062ce <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE>
  if (!p) {
 8004df8:	f107 0308 	add.w	r3, r7, #8
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f001 faa9 	bl	8006354 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>
 8004e02:	4603      	mov	r3, r0
 8004e04:	f083 0301 	eor.w	r3, r3, #1
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d006      	beq.n	8004e1c <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv+0x42>
    overflowed_ = true;
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	2201      	movs	r2, #1
 8004e12:	711a      	strb	r2, [r3, #4]
    return {};
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f001 fb27 	bl	8006468 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEC1Ev>
 8004e1a:	e011      	b.n	8004e40 <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv+0x66>
  }
  return {&p->extension, p.id()};
 8004e1c:	f107 0308 	add.w	r3, r7, #8
 8004e20:	4618      	mov	r0, r3
 8004e22:	f001 faa8 	bl	8006376 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEptEv>
 8004e26:	4603      	mov	r3, r0
 8004e28:	461c      	mov	r4, r3
 8004e2a:	f107 0308 	add.w	r3, r7, #8
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f001 faad 	bl	800638e <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>
 8004e34:	4603      	mov	r3, r0
 8004e36:	461a      	mov	r2, r3
 8004e38:	4621      	mov	r1, r4
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f001 fb26 	bl	800648c <_ZN11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEC1EPS3_t>
}
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	3714      	adds	r7, #20
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd90      	pop	{r4, r7, pc}

08004e48 <_ZN11ArduinoJson8V730HB226detail15ResourceManager13freeExtensionEt>:

inline void ResourceManager::freeExtension(SlotId id) {
 8004e48:	b590      	push	{r4, r7, lr}
 8004e4a:	b087      	sub	sp, #28
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	460b      	mov	r3, r1
 8004e52:	807b      	strh	r3, [r7, #2]
  auto p = getExtension(id);
 8004e54:	887b      	ldrh	r3, [r7, #2]
 8004e56:	4619      	mov	r1, r3
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 f816 	bl	8004e8a <_ZNK11ArduinoJson8V730HB226detail15ResourceManager12getExtensionEt>
 8004e5e:	6178      	str	r0, [r7, #20]
  variantPools_.freeSlot({reinterpret_cast<SlotData*>(p), id});
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f103 040c 	add.w	r4, r3, #12
 8004e66:	887a      	ldrh	r2, [r7, #2]
 8004e68:	f107 030c 	add.w	r3, r7, #12
 8004e6c:	6979      	ldr	r1, [r7, #20]
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f001 faa6 	bl	80063c0 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
 8004e74:	f107 030c 	add.w	r3, r7, #12
 8004e78:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004e7c:	4620      	mov	r0, r4
 8004e7e:	f001 fab3 	bl	80063e8 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE8freeSlotENS1_4SlotIS4_EE>
}
 8004e82:	bf00      	nop
 8004e84:	371c      	adds	r7, #28
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd90      	pop	{r4, r7, pc}

08004e8a <_ZNK11ArduinoJson8V730HB226detail15ResourceManager12getExtensionEt>:

inline VariantExtension* ResourceManager::getExtension(SlotId id) const {
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b082      	sub	sp, #8
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
 8004e92:	460b      	mov	r3, r1
 8004e94:	807b      	strh	r3, [r7, #2]
  return &variantPools_.getSlot(id)->extension;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	330c      	adds	r3, #12
 8004e9a:	887a      	ldrh	r2, [r7, #2]
 8004e9c:	4611      	mov	r1, r2
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f001 fabe 	bl	8006420 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt>
 8004ea4:	4603      	mov	r3, r0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3708      	adds	r7, #8
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc>:
    }
    return p[0];
  }

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b084      	sub	sp, #16
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	71fb      	strb	r3, [r7, #7]
    const char* p = escapeTable(false);
 8004eb8:	2000      	movs	r0, #0
 8004eba:	f000 f819 	bl	8004ef0 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb>
 8004ebe:	60f8      	str	r0, [r7, #12]
    for (;;) {
      if (p[0] == '\0')
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d101      	bne.n	8004ecc <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x1e>
        return 0;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	e00c      	b.n	8004ee6 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x38>
      if (p[0] == c)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	79fa      	ldrb	r2, [r7, #7]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d103      	bne.n	8004ede <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x30>
        return p[1];
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	3301      	adds	r3, #1
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	e003      	b.n	8004ee6 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x38>
      p += 2;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	3302      	adds	r3, #2
 8004ee2:	60fb      	str	r3, [r7, #12]
      if (p[0] == '\0')
 8004ee4:	e7ec      	b.n	8004ec0 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x12>
    }
  }
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
	...

08004ef0 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb>:

 private:
  static const char* escapeTable(bool isSerializing) {
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	71fb      	strb	r3, [r7, #7]
    return &"//''\"\"\\\\b\bf\fn\nr\rt\t"[isSerializing ? 4 : 0];
 8004efa:	79fb      	ldrb	r3, [r7, #7]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d001      	beq.n	8004f04 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb+0x14>
 8004f00:	2304      	movs	r3, #4
 8004f02:	e000      	b.n	8004f06 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb+0x16>
 8004f04:	2300      	movs	r3, #0
 8004f06:	4a04      	ldr	r2, [pc, #16]	@ (8004f18 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb+0x28>)
 8004f08:	4413      	add	r3, r2
  }
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	370c      	adds	r7, #12
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	08027b2c 	.word	0x08027b2c

08004f1c <_ZN11ArduinoJson8V730HB226detail13StringBuilderC1EPNS1_15ResourceManagerE>:

class StringBuilder {
 public:
  static const size_t initialCapacity = 31;

  StringBuilder(ResourceManager* resources) : resources_(resources) {}
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	683a      	ldr	r2, [r7, #0]
 8004f2a:	601a      	str	r2, [r3, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	605a      	str	r2, [r3, #4]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	609a      	str	r2, [r3, #8]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	370c      	adds	r7, #12
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <_ZN11ArduinoJson8V730HB226detail13StringBuilderD1Ev>:

  ~StringBuilder() {
 8004f46:	b580      	push	{r7, lr}
 8004f48:	b082      	sub	sp, #8
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
    if (node_)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d007      	beq.n	8004f66 <_ZN11ArduinoJson8V730HB226detail13StringBuilderD1Ev+0x20>
      resources_->destroyString(node_);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	4619      	mov	r1, r3
 8004f60:	4610      	mov	r0, r2
 8004f62:	f7ff fb73 	bl	800464c <_ZN11ArduinoJson8V730HB226detail15ResourceManager13destroyStringEPNS1_10StringNodeE>
  }
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3708      	adds	r7, #8
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <_ZN11ArduinoJson8V730HB226detail13StringBuilder11startStringEv>:

  void startString() {
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
    size_ = 0;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	609a      	str	r2, [r3, #8]
    if (!node_)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d108      	bne.n	8004f98 <_ZN11ArduinoJson8V730HB226detail13StringBuilder11startStringEv+0x28>
      node_ = resources_->createString(initialCapacity);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	211f      	movs	r1, #31
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f7ff fb2d 	bl	80045ec <_ZN11ArduinoJson8V730HB226detail15ResourceManager12createStringEj>
 8004f92:	4602      	mov	r2, r0
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	605a      	str	r2, [r3, #4]
  }
 8004f98:	bf00      	nop
 8004f9a:	3708      	adds	r7, #8
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv>:

  StringNode* save() {
 8004fa0:	b590      	push	{r4, r7, lr}
 8004fa2:	b087      	sub	sp, #28
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(node_ != nullptr);
    node_->data[size_] = 0;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685a      	ldr	r2, [r3, #4]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	721a      	strb	r2, [r3, #8]
    StringNode* node = resources_->getString(adaptString(node_->data, size_));
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681c      	ldr	r4, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f103 0108 	add.w	r1, r3, #8
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	689a      	ldr	r2, [r3, #8]
 8004fc6:	f107 0308 	add.w	r3, r7, #8
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f001 fa72 	bl	80064b4 <_ZN11ArduinoJson8V730HB226detail11adaptStringIcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIPT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringES7_j>
 8004fd0:	f107 0308 	add.w	r3, r7, #8
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	4620      	mov	r0, r4
 8004fd8:	f001 fa7d 	bl	80064d6 <_ZNK11ArduinoJson8V730HB226detail15ResourceManager9getStringINS1_9RamStringEEEPNS1_10StringNodeERKT_>
 8004fdc:	6178      	str	r0, [r7, #20]
    if (!node) {
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d113      	bne.n	800500c <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv+0x6c>
      node = resources_->resizeString(node_, size_);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6818      	ldr	r0, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6859      	ldr	r1, [r3, #4]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	f7ff fb12 	bl	800461a <_ZN11ArduinoJson8V730HB226detail15ResourceManager12resizeStringEPNS1_10StringNodeEj>
 8004ff6:	6178      	str	r0, [r7, #20]
      ARDUINOJSON_ASSERT(node != nullptr);  // realloc to smaller can't fail
      resources_->saveString(node);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	6979      	ldr	r1, [r7, #20]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7ff fae5 	bl	80045ce <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringEPNS1_10StringNodeE>
      node_ = nullptr;  // next time we need a new string
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	605a      	str	r2, [r3, #4]
 800500a:	e005      	b.n	8005018 <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv+0x78>
    } else {
      node->references++;
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	889b      	ldrh	r3, [r3, #4]
 8005010:	3301      	adds	r3, #1
 8005012:	b29a      	uxth	r2, r3
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	809a      	strh	r2, [r3, #4]
    }
    return node;
 8005018:	697b      	ldr	r3, [r7, #20]
  }
 800501a:	4618      	mov	r0, r3
 800501c:	371c      	adds	r7, #28
 800501e:	46bd      	mov	sp, r7
 8005020:	bd90      	pop	{r4, r7, pc}

08005022 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>:
  void append(const char* s, size_t n) {
    while (n-- > 0)  // TODO: memcpy
      append(*s++);
  }

  void append(char c) {
 8005022:	b590      	push	{r4, r7, lr}
 8005024:	b083      	sub	sp, #12
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
 800502a:	460b      	mov	r3, r1
 800502c:	70fb      	strb	r3, [r7, #3]
    if (node_ && size_ == node_->length)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d014      	beq.n	8005060 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc+0x3e>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	6852      	ldr	r2, [r2, #4]
 800503e:	88d2      	ldrh	r2, [r2, #6]
 8005040:	4293      	cmp	r3, r2
 8005042:	d10d      	bne.n	8005060 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc+0x3e>
      node_ = resources_->resizeString(node_, size_ * 2U + 1);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6818      	ldr	r0, [r3, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6859      	ldr	r1, [r3, #4]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	005b      	lsls	r3, r3, #1
 8005052:	3301      	adds	r3, #1
 8005054:	461a      	mov	r2, r3
 8005056:	f7ff fae0 	bl	800461a <_ZN11ArduinoJson8V730HB226detail15ResourceManager12resizeStringEPNS1_10StringNodeEj>
 800505a:	4602      	mov	r2, r0
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	605a      	str	r2, [r3, #4]
    if (node_)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00a      	beq.n	800507e <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc+0x5c>
      node_->data[size_++] = c;
 8005068:	78fc      	ldrb	r4, [r7, #3]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685a      	ldr	r2, [r3, #4]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	1c58      	adds	r0, r3, #1
 8005074:	6879      	ldr	r1, [r7, #4]
 8005076:	6088      	str	r0, [r1, #8]
 8005078:	4413      	add	r3, r2
 800507a:	4622      	mov	r2, r4
 800507c:	721a      	strb	r2, [r3, #8]
  }
 800507e:	bf00      	nop
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	bd90      	pop	{r4, r7, pc}

08005086 <_ZNK11ArduinoJson8V730HB226detail13StringBuilder7isValidEv>:

  bool isValid() const {
 8005086:	b480      	push	{r7}
 8005088:	b083      	sub	sp, #12
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
    return node_ != nullptr;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	bf14      	ite	ne
 8005096:	2301      	movne	r3, #1
 8005098:	2300      	moveq	r3, #0
 800509a:	b2db      	uxtb	r3, r3
  }
 800509c:	4618      	mov	r0, r3
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <_ZNK11ArduinoJson8V730HB226detail13StringBuilder3strEv>:

  size_t size() const {
    return size_;
  }

  JsonString str() const {
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(node_ != nullptr);
    node_->data[size_] = 0;
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	685a      	ldr	r2, [r3, #4]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	4413      	add	r3, r2
 80050bc:	2200      	movs	r2, #0
 80050be:	721a      	strb	r2, [r3, #8]
    return JsonString(node_->data, size_);
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	f103 0108 	add.w	r1, r3, #8
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	689a      	ldr	r2, [r3, #8]
 80050cc:	2300      	movs	r3, #0
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f001 fa11 	bl	80064f6 <_ZN11ArduinoJson8V730HB2210JsonStringC1IjLi0EEEPKcT_b>
  }
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	3708      	adds	r7, #8
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE>:
  static void toJson(const char* src, JsonVariant dst) {
    detail::VariantData::setString(getData(dst), detail::adaptString(src),
                                   getResourceManager(dst));
  }

  static const char* fromJson(JsonVariantConst src) {
 80050dc:	b580      	push	{r7, lr}
 80050de:	b086      	sub	sp, #24
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	463b      	mov	r3, r7
 80050e4:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 80050e8:	463b      	mov	r3, r7
 80050ea:	4618      	mov	r0, r3
 80050ec:	f001 f87c 	bl	80061e8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 80050f0:	6178      	str	r0, [r7, #20]
    return data ? data->asString().c_str() : 0;
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00c      	beq.n	8005112 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE+0x36>
 80050f8:	f107 0308 	add.w	r3, r7, #8
 80050fc:	6979      	ldr	r1, [r7, #20]
 80050fe:	4618      	mov	r0, r3
 8005100:	f7ff f91c 	bl	800433c <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv>
 8005104:	f107 0308 	add.w	r3, r7, #8
 8005108:	4618      	mov	r0, r3
 800510a:	f7fe fffb 	bl	8004104 <_ZNK11ArduinoJson8V730HB2210JsonString5c_strEv>
 800510e:	4603      	mov	r3, r0
 8005110:	e000      	b.n	8005114 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE+0x38>
 8005112:	2300      	movs	r3, #0
  }
 8005114:	4618      	mov	r0, r3
 8005116:	3718      	adds	r7, #24
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <_ZN11ArduinoJson8V730HB229ConverterINS0_9JsonArrayEvE8fromJsonENS0_11JsonVariantE>:
      dst.set(nullptr);
    else
      dst.to<JsonArray>().set(src);
  }

  static JsonArray fromJson(JsonVariant src) {
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	1d3b      	adds	r3, r7, #4
 8005126:	e883 0006 	stmia.w	r3, {r1, r2}
    auto data = getData(src);
 800512a:	1d3b      	adds	r3, r7, #4
 800512c:	4618      	mov	r0, r3
 800512e:	f001 f84f 	bl	80061d0 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 8005132:	6178      	str	r0, [r7, #20]
    auto resources = getResourceManager(src);
 8005134:	1d3b      	adds	r3, r7, #4
 8005136:	4618      	mov	r0, r3
 8005138:	f001 f9ef 	bl	800651a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 800513c:	6138      	str	r0, [r7, #16]
    return JsonArray(data != 0 ? data->asArray() : 0, resources);
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d004      	beq.n	800514e <_ZN11ArduinoJson8V730HB229ConverterINS0_9JsonArrayEvE8fromJsonENS0_11JsonVariantE+0x32>
 8005144:	6978      	ldr	r0, [r7, #20]
 8005146:	f7ff f8ba 	bl	80042be <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv>
 800514a:	4603      	mov	r3, r0
 800514c:	e000      	b.n	8005150 <_ZN11ArduinoJson8V730HB229ConverterINS0_9JsonArrayEvE8fromJsonENS0_11JsonVariantE+0x34>
 800514e:	2300      	movs	r3, #0
 8005150:	693a      	ldr	r2, [r7, #16]
 8005152:	4619      	mov	r1, r3
 8005154:	68f8      	ldr	r0, [r7, #12]
 8005156:	f7ff fb9e 	bl	8004896 <_ZN11ArduinoJson8V730HB229JsonArrayC1EPNS0_6detail9ArrayDataEPNS2_15ResourceManagerE>
  }
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	3718      	adds	r7, #24
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonObjectEvE8fromJsonENS0_11JsonVariantE>:
      dst.set(nullptr);
    else
      dst.to<JsonObject>().set(src);
  }

  static JsonObject fromJson(JsonVariant src) {
 8005162:	b580      	push	{r7, lr}
 8005164:	b086      	sub	sp, #24
 8005166:	af00      	add	r7, sp, #0
 8005168:	60f8      	str	r0, [r7, #12]
 800516a:	1d3b      	adds	r3, r7, #4
 800516c:	e883 0006 	stmia.w	r3, {r1, r2}
    auto data = getData(src);
 8005170:	1d3b      	adds	r3, r7, #4
 8005172:	4618      	mov	r0, r3
 8005174:	f001 f82c 	bl	80061d0 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 8005178:	6178      	str	r0, [r7, #20]
    auto resources = getResourceManager(src);
 800517a:	1d3b      	adds	r3, r7, #4
 800517c:	4618      	mov	r0, r3
 800517e:	f001 f9cc 	bl	800651a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 8005182:	6138      	str	r0, [r7, #16]
    return JsonObject(data != 0 ? data->asObject() : 0, resources);
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d004      	beq.n	8005194 <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonObjectEvE8fromJsonENS0_11JsonVariantE+0x32>
 800518a:	6978      	ldr	r0, [r7, #20]
 800518c:	f7ff f8b9 	bl	8004302 <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv>
 8005190:	4603      	mov	r3, r0
 8005192:	e000      	b.n	8005196 <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonObjectEvE8fromJsonENS0_11JsonVariantE+0x34>
 8005194:	2300      	movs	r3, #0
 8005196:	693a      	ldr	r2, [r7, #16]
 8005198:	4619      	mov	r1, r3
 800519a:	68f8      	ldr	r0, [r7, #12]
 800519c:	f7ff fbce 	bl	800493c <_ZN11ArduinoJson8V730HB2210JsonObjectC1EPNS0_6detail10ObjectDataEPNS2_15ResourceManagerE>
  }
 80051a0:	68f8      	ldr	r0, [r7, #12]
 80051a2:	3718      	adds	r7, #24
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE>:
  }

  return false;
}

inline void VariantData::clear(ResourceManager* resources) {
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  if (type_ & VariantTypeBits::OwnedStringBit)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	791b      	ldrb	r3, [r3, #4]
 80051b6:	2101      	movs	r1, #1
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7ff f823 	bl	8004204 <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d006      	beq.n	80051d2 <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE+0x2a>
    resources->dereferenceString(content_.asOwnedString->data);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	3308      	adds	r3, #8
 80051ca:	4619      	mov	r1, r3
 80051cc:	6838      	ldr	r0, [r7, #0]
 80051ce:	f7ff fa4c 	bl	800466a <_ZN11ArduinoJson8V730HB226detail15ResourceManager17dereferenceStringEPKc>

#if ARDUINOJSON_USE_EXTENSIONS
  if (type_ & VariantTypeBits::ExtensionBit)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	791b      	ldrb	r3, [r3, #4]
 80051d6:	2110      	movs	r1, #16
 80051d8:	4618      	mov	r0, r3
 80051da:	f7ff f813 	bl	8004204 <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d005      	beq.n	80051f0 <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE+0x48>
    resources->freeExtension(content_.asSlotId);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	881b      	ldrh	r3, [r3, #0]
 80051e8:	4619      	mov	r1, r3
 80051ea:	6838      	ldr	r0, [r7, #0]
 80051ec:	f7ff fe2c 	bl	8004e48 <_ZN11ArduinoJson8V730HB226detail15ResourceManager13freeExtensionEt>
#endif

  auto collection = asCollection();
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f7ff f875 	bl	80042e0 <_ZN11ArduinoJson8V730HB226detail11VariantData12asCollectionEv>
 80051f6:	60f8      	str	r0, [r7, #12]
  if (collection)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d003      	beq.n	8005206 <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE+0x5e>
    collection->clear(resources);
 80051fe:	6839      	ldr	r1, [r7, #0]
 8005200:	68f8      	ldr	r0, [r7, #12]
 8005202:	f7ff fd2f 	bl	8004c64 <_ZN11ArduinoJson8V730HB226detail14CollectionData5clearEPNS1_15ResourceManagerE>

  type_ = VariantType::Null;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	711a      	strb	r2, [r3, #4]
}
 800520c:	bf00      	nop
 800520e:	3710      	adds	r7, #16
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>:

#if ARDUINOJSON_USE_EXTENSIONS
inline const VariantExtension* VariantData::getExtension(
    const ResourceManager* resources) const {
 8005214:	b580      	push	{r7, lr}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  return type_ & VariantTypeBits::ExtensionBit
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	791b      	ldrb	r3, [r3, #4]
 8005222:	2110      	movs	r1, #16
 8005224:	4618      	mov	r0, r3
 8005226:	f7fe ffed 	bl	8004204 <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 800522a:	4603      	mov	r3, r0
             ? resources->getExtension(content_.asSlotId)
 800522c:	2b00      	cmp	r3, #0
 800522e:	d007      	beq.n	8005240 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE+0x2c>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	881b      	ldrh	r3, [r3, #0]
 8005234:	4619      	mov	r1, r3
 8005236:	6838      	ldr	r0, [r7, #0]
 8005238:	f7ff fe27 	bl	8004e8a <_ZNK11ArduinoJson8V730HB226detail15ResourceManager12getExtensionEt>
 800523c:	4603      	mov	r3, r0
             : nullptr;
 800523e:	e000      	b.n	8005242 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE+0x2e>
             ? resources->getExtension(content_.asSlotId)
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3708      	adds	r7, #8
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}

0800524a <_ZN11ArduinoJson8V730HB2220DeserializationErrorC1ENS1_4CodeE>:
    NoMemory,
    TooDeep
  };

  DeserializationError() {}
  DeserializationError(Code c) : code_(c) {}
 800524a:	b480      	push	{r7}
 800524c:	b083      	sub	sp, #12
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
 8005252:	460b      	mov	r3, r1
 8005254:	70fb      	strb	r3, [r7, #3]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	78fa      	ldrb	r2, [r7, #3]
 800525a:	701a      	strb	r2, [r3, #0]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4618      	mov	r0, r3
 8005260:	370c      	adds	r7, #12
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <_ZNK11ArduinoJson8V730HB2220DeserializationError4codeEv>:
  explicit operator bool() const {
    return code_ != Ok;
  }

  // Returns internal enum, useful for switch statement
  Code code() const {
 800526a:	b480      	push	{r7}
 800526c:	b083      	sub	sp, #12
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
    return code_;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	781b      	ldrb	r3, [r3, #0]
  }
 8005276:	4618      	mov	r0, r3
 8005278:	370c      	adds	r7, #12
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
	...

08005284 <_ZNK11ArduinoJson8V730HB2220DeserializationError5c_strEv>:

  const char* c_str() const {
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
    static const char* messages[] = {
        "Ok",           "EmptyInput", "IncompleteInput",
        "InvalidInput", "NoMemory",   "TooDeep"};
    ARDUINOJSON_ASSERT(static_cast<size_t>(code_) <
                       sizeof(messages) / sizeof(messages[0]));
    return messages[code_];
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	461a      	mov	r2, r3
 8005292:	4b04      	ldr	r3, [pc, #16]	@ (80052a4 <_ZNK11ArduinoJson8V730HB2220DeserializationError5c_strEv+0x20>)
 8005294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  }
 8005298:	4618      	mov	r0, r3
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr
 80052a4:	24000004 	.word	0x24000004

080052a8 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter5allowEv>:
};
}  // namespace DeserializationOption

namespace detail {
struct AllowAllFilter {
  bool allow() const {
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
    return true;
 80052b0:	2301      	movs	r3, #1
  }
 80052b2:	4618      	mov	r0, r3
 80052b4:	370c      	adds	r7, #12
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr

080052be <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowArrayEv>:

  bool allowArray() const {
 80052be:	b480      	push	{r7}
 80052c0:	b083      	sub	sp, #12
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
    return true;
 80052c6:	2301      	movs	r3, #1
  }
 80052c8:	4618      	mov	r0, r3
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter11allowObjectEv>:

  bool allowObject() const {
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
    return true;
 80052dc:	2301      	movs	r3, #1
  }
 80052de:	4618      	mov	r0, r3
 80052e0:	370c      	adds	r7, #12
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr

080052ea <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>:

  bool allowValue() const {
 80052ea:	b480      	push	{r7}
 80052ec:	b083      	sub	sp, #12
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
    return true;
 80052f2:	2301      	movs	r3, #1
  }
 80052f4:	4618      	mov	r0, r3
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <_ZN11ArduinoJson8V730HB2221DeserializationOption12NestingLimitC1Ev>:
ARDUINOJSON_BEGIN_PUBLIC_NAMESPACE

namespace DeserializationOption {
class NestingLimit {
 public:
  NestingLimit() : value_(ARDUINOJSON_DEFAULT_NESTING_LIMIT) {}
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	220a      	movs	r2, #10
 800530c:	701a      	strb	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4618      	mov	r0, r3
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <_ZN11ArduinoJson8V730HB2221DeserializationOption12NestingLimitC1Eh>:
  explicit NestingLimit(uint8_t n) : value_(n) {}
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	460b      	mov	r3, r1
 8005326:	70fb      	strb	r3, [r7, #3]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	78fa      	ldrb	r2, [r7, #3]
 800532c:	701a      	strb	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4618      	mov	r0, r3
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>:

  NestingLimit decrement() const {
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(value_ > 0);
    return NestingLimit(static_cast<uint8_t>(value_ - 1));
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	3b01      	subs	r3, #1
 800534a:	b2da      	uxtb	r2, r3
 800534c:	f107 030c 	add.w	r3, r7, #12
 8005350:	4611      	mov	r1, r2
 8005352:	4618      	mov	r0, r3
 8005354:	f7ff ffe2 	bl	800531c <_ZN11ArduinoJson8V730HB2221DeserializationOption12NestingLimitC1Eh>
 8005358:	7b3b      	ldrb	r3, [r7, #12]
  }
 800535a:	4618      	mov	r0, r3
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}

08005362 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>:

  bool reached() const {
 8005362:	b480      	push	{r7}
 8005364:	b083      	sub	sp, #12
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
    return value_ == 0;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	2b00      	cmp	r3, #0
 8005370:	bf0c      	ite	eq
 8005372:	2301      	moveq	r3, #1
 8005374:	2300      	movne	r3, #0
 8005376:	b2db      	uxtb	r3, r3
  }
 8005378:	4618      	mov	r0, r3
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <_ZN11ArduinoJson8V730HB226detail26makeDeserializationOptionsENS0_21DeserializationOption12NestingLimitE>:
    DeserializationOption::NestingLimit nestingLimit, TFilter filter) {
  return {filter, nestingLimit};
}

inline DeserializationOptions<AllowAllFilter> makeDeserializationOptions(
    DeserializationOption::NestingLimit nestingLimit = {}) {
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	7138      	strb	r0, [r7, #4]
  return {{}, nestingLimit};
 800538c:	793b      	ldrb	r3, [r7, #4]
 800538e:	737b      	strb	r3, [r7, #13]
 8005390:	2300      	movs	r3, #0
 8005392:	7b3a      	ldrb	r2, [r7, #12]
 8005394:	f362 0307 	bfi	r3, r2, #0, #8
 8005398:	7b7a      	ldrb	r2, [r7, #13]
 800539a:	f362 230f 	bfi	r3, r2, #8, #8
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3714      	adds	r7, #20
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr

080053aa <_ZN11ArduinoJson8V730HB226detail18shrinkJsonDocumentERNS0_12JsonDocumentE>:
inline void shrinkJsonDocument(TDestination&) {
  // no-op by default
}

#if ARDUINOJSON_AUTO_SHRINK
inline void shrinkJsonDocument(JsonDocument& doc) {
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b082      	sub	sp, #8
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  doc.shrinkToFit();
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f7ff fb03 	bl	80049be <_ZN11ArduinoJson8V730HB2212JsonDocument11shrinkToFitEv>
}
 80053b8:	bf00      	nop
 80053ba:	3708      	adds	r7, #8
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt>:
#endif

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

namespace Utf16 {
inline bool isHighSurrogate(uint16_t codeunit) {
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	4603      	mov	r3, r0
 80053c8:	80fb      	strh	r3, [r7, #6]
  return codeunit >= 0xD800 && codeunit < 0xDC00;
 80053ca:	88fb      	ldrh	r3, [r7, #6]
 80053cc:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 80053d0:	d305      	bcc.n	80053de <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt+0x1e>
 80053d2:	88fb      	ldrh	r3, [r7, #6]
 80053d4:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 80053d8:	d201      	bcs.n	80053de <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt+0x1e>
 80053da:	2301      	movs	r3, #1
 80053dc:	e000      	b.n	80053e0 <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt+0x20>
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt>:

inline bool isLowSurrogate(uint16_t codeunit) {
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	4603      	mov	r3, r0
 80053f4:	80fb      	strh	r3, [r7, #6]
  return codeunit >= 0xDC00 && codeunit < 0xE000;
 80053f6:	88fb      	ldrh	r3, [r7, #6]
 80053f8:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 80053fc:	d305      	bcc.n	800540a <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt+0x1e>
 80053fe:	88fb      	ldrh	r3, [r7, #6]
 8005400:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 8005404:	d201      	bcs.n	800540a <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt+0x1e>
 8005406:	2301      	movs	r3, #1
 8005408:	e000      	b.n	800540c <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt+0x20>
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <_ZN11ArduinoJson8V730HB226detail5Utf169CodepointC1Ev>:

class Codepoint {
 public:
  Codepoint() : highSurrogate_(0), codepoint_(0) {}
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	801a      	strh	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	605a      	str	r2, [r3, #4]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4618      	mov	r0, r3
 8005430:	370c      	adds	r7, #12
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr

0800543a <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt>:

  bool append(uint16_t codeunit) {
 800543a:	b580      	push	{r7, lr}
 800543c:	b082      	sub	sp, #8
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
 8005442:	460b      	mov	r3, r1
 8005444:	807b      	strh	r3, [r7, #2]
    if (isHighSurrogate(codeunit)) {
 8005446:	887b      	ldrh	r3, [r7, #2]
 8005448:	4618      	mov	r0, r3
 800544a:	f7ff ffb9 	bl	80053c0 <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d007      	beq.n	8005464 <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt+0x2a>
      highSurrogate_ = codeunit & 0x3FF;
 8005454:	887b      	ldrh	r3, [r7, #2]
 8005456:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800545a:	b29a      	uxth	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	801a      	strh	r2, [r3, #0]
      return false;
 8005460:	2300      	movs	r3, #0
 8005462:	e018      	b.n	8005496 <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt+0x5c>
    }

    if (isLowSurrogate(codeunit)) {
 8005464:	887b      	ldrh	r3, [r7, #2]
 8005466:	4618      	mov	r0, r3
 8005468:	f7ff ffc0 	bl	80053ec <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00d      	beq.n	800548e <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt+0x54>
      codepoint_ =
          uint32_t(0x10000 + ((highSurrogate_ << 10) | (codeunit & 0x3FF)));
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	881b      	ldrh	r3, [r3, #0]
 8005476:	029a      	lsls	r2, r3, #10
 8005478:	887b      	ldrh	r3, [r7, #2]
 800547a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800547e:	4313      	orrs	r3, r2
 8005480:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005484:	461a      	mov	r2, r3
      codepoint_ =
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	605a      	str	r2, [r3, #4]
      return true;
 800548a:	2301      	movs	r3, #1
 800548c:	e003      	b.n	8005496 <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt+0x5c>
    }

    codepoint_ = codeunit;
 800548e:	887a      	ldrh	r2, [r7, #2]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	605a      	str	r2, [r3, #4]
    return true;
 8005494:	2301      	movs	r3, #1
  }
 8005496:	4618      	mov	r0, r3
 8005498:	3708      	adds	r7, #8
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}

0800549e <_ZNK11ArduinoJson8V730HB226detail5Utf169Codepoint5valueEv>:

  uint32_t value() const {
 800549e:	b480      	push	{r7}
 80054a0:	b083      	sub	sp, #12
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
    return codepoint_;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
  }
 80054aa:	4618      	mov	r0, r3
 80054ac:	370c      	adds	r7, #12
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr

080054b6 <_ZN11ArduinoJson8V730HB226detail7isdigitEc>:
#include <ArduinoJson/Namespace.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

#ifndef isdigit
inline bool isdigit(char c) {
 80054b6:	b480      	push	{r7}
 80054b8:	b083      	sub	sp, #12
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	4603      	mov	r3, r0
 80054be:	71fb      	strb	r3, [r7, #7]
  return '0' <= c && c <= '9';
 80054c0:	79fb      	ldrb	r3, [r7, #7]
 80054c2:	2b2f      	cmp	r3, #47	@ 0x2f
 80054c4:	d904      	bls.n	80054d0 <_ZN11ArduinoJson8V730HB226detail7isdigitEc+0x1a>
 80054c6:	79fb      	ldrb	r3, [r7, #7]
 80054c8:	2b39      	cmp	r3, #57	@ 0x39
 80054ca:	d801      	bhi.n	80054d0 <_ZN11ArduinoJson8V730HB226detail7isdigitEc+0x1a>
 80054cc:	2301      	movs	r3, #1
 80054ce:	e000      	b.n	80054d2 <_ZN11ArduinoJson8V730HB226detail7isdigitEc+0x1c>
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	370c      	adds	r7, #12
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr

080054de <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ev>:
  Double,
#endif
};

union NumberValue {
  NumberValue() {}
 80054de:	b480      	push	{r7}
 80054e0:	b083      	sub	sp, #12
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4618      	mov	r0, r3
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ef>:
  NumberValue(float x) : asFloat(x) {}
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	ed87 0a00 	vstr	s0, [r7]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	683a      	ldr	r2, [r7, #0]
 8005504:	601a      	str	r2, [r3, #0]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4618      	mov	r0, r3
 800550a:	370c      	adds	r7, #12
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ex>:
  NumberValue(JsonInteger x) : asSignedInteger(x) {}
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	e9c7 2300 	strd	r2, r3, [r7]
 8005520:	68f9      	ldr	r1, [r7, #12]
 8005522:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005526:	e9c1 2300 	strd	r2, r3, [r1]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	4618      	mov	r0, r3
 800552e:	3714      	adds	r7, #20
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ey>:
  NumberValue(JsonUInt x) : asUnsignedInteger(x) {}
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	e9c7 2300 	strd	r2, r3, [r7]
 8005544:	68f9      	ldr	r1, [r7, #12]
 8005546:	e9d7 2300 	ldrd	r2, r3, [r7]
 800554a:	e9c1 2300 	strd	r2, r3, [r1]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	4618      	mov	r0, r3
 8005552:	3714      	adds	r7, #20
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ed>:
#if ARDUINOJSON_USE_DOUBLE
  NumberValue(double x) : asDouble(x) {}
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	ed87 0b00 	vstr	d0, [r7]
 8005568:	68f9      	ldr	r1, [r7, #12]
 800556a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800556e:	e9c1 2300 	strd	r2, r3, [r1]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	4618      	mov	r0, r3
 8005576:	3714      	adds	r7, #20
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ev>:
class Number {
  NumberType type_;
  NumberValue value_;

 public:
  Number() : type_(NumberType::Invalid) {}
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	701a      	strb	r2, [r3, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	3308      	adds	r3, #8
 8005592:	4618      	mov	r0, r3
 8005594:	f7ff ffa3 	bl	80054de <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ev>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4618      	mov	r0, r3
 800559c:	3708      	adds	r7, #8
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ef>:
  Number(float value) : type_(NumberType::Float), value_(value) {}
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b082      	sub	sp, #8
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
 80055aa:	ed87 0a00 	vstr	s0, [r7]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2201      	movs	r2, #1
 80055b2:	701a      	strb	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	3308      	adds	r3, #8
 80055b8:	ed97 0a00 	vldr	s0, [r7]
 80055bc:	4618      	mov	r0, r3
 80055be:	f7ff ff99 	bl	80054f4 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ef>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4618      	mov	r0, r3
 80055c6:	3708      	adds	r7, #8
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <_ZN11ArduinoJson8V730HB226detail6NumberC1Ex>:
  Number(JsonInteger value) : type_(NumberType::SignedInteger), value_(value) {}
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	e9c7 2300 	strd	r2, r3, [r7]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2202      	movs	r2, #2
 80055dc:	701a      	strb	r2, [r3, #0]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f103 0108 	add.w	r1, r3, #8
 80055e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055e8:	4608      	mov	r0, r1
 80055ea:	f7ff ff93 	bl	8005514 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ex>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	4618      	mov	r0, r3
 80055f2:	3710      	adds	r7, #16
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ey>:
  Number(JsonUInt value) : type_(NumberType::UnsignedInteger), value_(value) {}
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	e9c7 2300 	strd	r2, r3, [r7]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2203      	movs	r2, #3
 8005608:	701a      	strb	r2, [r3, #0]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f103 0108 	add.w	r1, r3, #8
 8005610:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005614:	4608      	mov	r0, r1
 8005616:	f7ff ff8f 	bl	8005538 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ey>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	4618      	mov	r0, r3
 800561e:	3710      	adds	r7, #16
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ed>:
#if ARDUINOJSON_USE_DOUBLE
  Number(double value) : type_(NumberType::Double), value_(value) {}
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	ed87 0b00 	vstr	d0, [r7]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2204      	movs	r2, #4
 8005634:	701a      	strb	r2, [r3, #0]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	3308      	adds	r3, #8
 800563a:	ed97 0b00 	vldr	d0, [r7]
 800563e:	4618      	mov	r0, r3
 8005640:	f7ff ff8c 	bl	800555c <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ed>
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	4618      	mov	r0, r3
 8005648:	3710      	adds	r7, #16
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <_ZNK11ArduinoJson8V730HB226detail6Number4typeEv>:
      default:
        return T();
    }
  }

  NumberType type() const {
 800564e:	b480      	push	{r7}
 8005650:	b083      	sub	sp, #12
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
    return type_;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	781b      	ldrb	r3, [r3, #0]
  }
 800565a:	4618      	mov	r0, r3
 800565c:	370c      	adds	r7, #12
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr

08005666 <_ZNK11ArduinoJson8V730HB226detail6Number15asSignedIntegerEv>:

  JsonInteger asSignedInteger() const {
 8005666:	b480      	push	{r7}
 8005668:	b083      	sub	sp, #12
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == NumberType::SignedInteger);
    return value_.asSignedInteger;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
  }
 8005674:	4610      	mov	r0, r2
 8005676:	4619      	mov	r1, r3
 8005678:	370c      	adds	r7, #12
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr

08005682 <_ZNK11ArduinoJson8V730HB226detail6Number17asUnsignedIntegerEv>:

  JsonUInt asUnsignedInteger() const {
 8005682:	b480      	push	{r7}
 8005684:	b083      	sub	sp, #12
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == NumberType::UnsignedInteger);
    return value_.asUnsignedInteger;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
  }
 8005690:	4610      	mov	r0, r2
 8005692:	4619      	mov	r1, r3
 8005694:	370c      	adds	r7, #12
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr

0800569e <_ZNK11ArduinoJson8V730HB226detail6Number7asFloatEv>:

  float asFloat() const {
 800569e:	b480      	push	{r7}
 80056a0:	b083      	sub	sp, #12
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == NumberType::Float);
    return value_.asFloat;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	ee07 3a90 	vmov	s15, r3
  }
 80056ae:	eeb0 0a67 	vmov.f32	s0, s15
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <_ZNK11ArduinoJson8V730HB226detail6Number8asDoubleEv>:

#if ARDUINOJSON_USE_DOUBLE
  double asDouble() const {
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == NumberType::Double);
    return value_.asDouble;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80056ca:	ec43 2b17 	vmov	d7, r2, r3
  }
 80056ce:	eeb0 0b47 	vmov.f64	d0, d7
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>:
#endif
};

inline Number parseNumber(const char* s) {
 80056dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056e0:	b0a6      	sub	sp, #152	@ 0x98
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80056e6:	64b9      	str	r1, [r7, #72]	@ 0x48
  using mantissa_t = largest_type<traits::mantissa_type, JsonUInt>;
  using exponent_t = traits::exponent_type;

  ARDUINOJSON_ASSERT(s != 0);

  bool is_negative = false;
 80056e8:	2300      	movs	r3, #0
 80056ea:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  switch (*s) {
 80056ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	2b2b      	cmp	r3, #43	@ 0x2b
 80056f4:	d008      	beq.n	8005708 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x2c>
 80056f6:	2b2d      	cmp	r3, #45	@ 0x2d
 80056f8:	d10a      	bne.n	8005710 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x34>
    case '-':
      is_negative = true;
 80056fa:	2301      	movs	r3, #1
 80056fc:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      s++;
 8005700:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005702:	3301      	adds	r3, #1
 8005704:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005706:	e003      	b.n	8005710 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x34>
    case '+':
      s++;
 8005708:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800570a:	3301      	adds	r3, #1
 800570c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800570e:	bf00      	nop
  if (*s == 'i' || *s == 'I') {
    return Number(is_negative ? -traits::inf() : traits::inf());
  }
#endif

  if (!isdigit(*s) && *s != '.')
 8005710:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	4618      	mov	r0, r3
 8005716:	f7ff fece 	bl	80054b6 <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 800571a:	4603      	mov	r3, r0
 800571c:	f083 0301 	eor.w	r3, r3, #1
 8005720:	b2db      	uxtb	r3, r3
 8005722:	2b00      	cmp	r3, #0
 8005724:	d005      	beq.n	8005732 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x56>
 8005726:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	2b2e      	cmp	r3, #46	@ 0x2e
 800572c:	d001      	beq.n	8005732 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x56>
 800572e:	2301      	movs	r3, #1
 8005730:	e000      	b.n	8005734 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x58>
 8005732:	2300      	movs	r3, #0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d003      	beq.n	8005740 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x64>
    return Number();
 8005738:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800573a:	f7ff ff21 	bl	8005580 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ev>
 800573e:	e1f5      	b.n	8005b2c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>

  mantissa_t mantissa = 0;
 8005740:	f04f 0200 	mov.w	r2, #0
 8005744:	f04f 0300 	mov.w	r3, #0
 8005748:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
  exponent_t exponent_offset = 0;
 800574c:	2300      	movs	r3, #0
 800574e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
  const mantissa_t maxUint = JsonUInt(-1);
 8005752:	f04f 32ff 	mov.w	r2, #4294967295
 8005756:	f04f 33ff 	mov.w	r3, #4294967295
 800575a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  while (isdigit(*s)) {
 800575e:	e054      	b.n	800580a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x12e>
    uint8_t digit = uint8_t(*s - '0');
 8005760:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	3b30      	subs	r3, #48	@ 0x30
 8005766:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    if (mantissa > maxUint / 10)
 800576a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800576e:	f112 3f66 	cmn.w	r2, #1717986918	@ 0x66666666
 8005772:	49ae      	ldr	r1, [pc, #696]	@ (8005a2c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x350>)
 8005774:	418b      	sbcs	r3, r1
 8005776:	d251      	bcs.n	800581c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x140>
      break;
    mantissa *= 10;
 8005778:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 800577c:	4622      	mov	r2, r4
 800577e:	462b      	mov	r3, r5
 8005780:	f04f 0000 	mov.w	r0, #0
 8005784:	f04f 0100 	mov.w	r1, #0
 8005788:	0099      	lsls	r1, r3, #2
 800578a:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800578e:	0090      	lsls	r0, r2, #2
 8005790:	4602      	mov	r2, r0
 8005792:	460b      	mov	r3, r1
 8005794:	eb12 0804 	adds.w	r8, r2, r4
 8005798:	eb43 0905 	adc.w	r9, r3, r5
 800579c:	eb18 0308 	adds.w	r3, r8, r8
 80057a0:	61bb      	str	r3, [r7, #24]
 80057a2:	eb49 0309 	adc.w	r3, r9, r9
 80057a6:	61fb      	str	r3, [r7, #28]
 80057a8:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80057ac:	e9c7 8922 	strd	r8, r9, [r7, #136]	@ 0x88
    if (mantissa > maxUint - digit)
 80057b0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80057b4:	2200      	movs	r2, #0
 80057b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80057b8:	647a      	str	r2, [r7, #68]	@ 0x44
 80057ba:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80057be:	460b      	mov	r3, r1
 80057c0:	43db      	mvns	r3, r3
 80057c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80057c4:	4613      	mov	r3, r2
 80057c6:	43db      	mvns	r3, r3
 80057c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057ca:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80057ce:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 80057d2:	4621      	mov	r1, r4
 80057d4:	4291      	cmp	r1, r2
 80057d6:	4629      	mov	r1, r5
 80057d8:	eb71 0303 	sbcs.w	r3, r1, r3
 80057dc:	d320      	bcc.n	8005820 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x144>
      break;
    mantissa += digit;
 80057de:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80057e2:	2200      	movs	r2, #0
 80057e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80057e6:	637a      	str	r2, [r7, #52]	@ 0x34
 80057e8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80057ec:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80057f0:	4621      	mov	r1, r4
 80057f2:	1851      	adds	r1, r2, r1
 80057f4:	6139      	str	r1, [r7, #16]
 80057f6:	4629      	mov	r1, r5
 80057f8:	414b      	adcs	r3, r1
 80057fa:	617b      	str	r3, [r7, #20]
 80057fc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005800:	e9c7 3422 	strd	r3, r4, [r7, #136]	@ 0x88
    s++;
 8005804:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005806:	3301      	adds	r3, #1
 8005808:	64bb      	str	r3, [r7, #72]	@ 0x48
  while (isdigit(*s)) {
 800580a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	4618      	mov	r0, r3
 8005810:	f7ff fe51 	bl	80054b6 <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1a2      	bne.n	8005760 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x84>
 800581a:	e002      	b.n	8005822 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x146>
      break;
 800581c:	bf00      	nop
 800581e:	e000      	b.n	8005822 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x146>
      break;
 8005820:	bf00      	nop
  }

  if (*s == '\0') {
 8005822:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d136      	bne.n	8005898 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1bc>
    if (is_negative) {
 800582a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800582e:	2b00      	cmp	r3, #0
 8005830:	d019      	beq.n	8005866 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x18a>
      const mantissa_t sintMantissaMax = mantissa_t(1)
 8005832:	f04f 0200 	mov.w	r2, #0
 8005836:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800583a:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
                                         << (sizeof(JsonInteger) * 8 - 1);
      if (mantissa <= sintMantissaMax) {
 800583e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8005842:	2a01      	cmp	r2, #1
 8005844:	f173 4300 	sbcs.w	r3, r3, #2147483648	@ 0x80000000
 8005848:	d226      	bcs.n	8005898 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1bc>
        return Number(JsonInteger(~mantissa + 1));
 800584a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800584e:	2100      	movs	r1, #0
 8005850:	4250      	negs	r0, r2
 8005852:	62b8      	str	r0, [r7, #40]	@ 0x28
 8005854:	eb61 0303 	sbc.w	r3, r1, r3
 8005858:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800585a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800585e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005860:	f7ff feb4 	bl	80055cc <_ZN11ArduinoJson8V730HB226detail6NumberC1Ex>
 8005864:	e162      	b.n	8005b2c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
      }
    } else {
      return Number(JsonUInt(mantissa));
 8005866:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800586a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800586c:	f7ff fec4 	bl	80055f8 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ey>
 8005870:	e15c      	b.n	8005b2c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
    }
  }

  // avoid mantissa overflow
  while (mantissa > traits::mantissa_max) {
    mantissa /= 10;
 8005872:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8005876:	f04f 020a 	mov.w	r2, #10
 800587a:	f04f 0300 	mov.w	r3, #0
 800587e:	f7fb f861 	bl	8000944 <__aeabi_uldivmod>
 8005882:	4602      	mov	r2, r0
 8005884:	460b      	mov	r3, r1
 8005886:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
    exponent_offset++;
 800588a:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 800588e:	b29b      	uxth	r3, r3
 8005890:	3301      	adds	r3, #1
 8005892:	b29b      	uxth	r3, r3
 8005894:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
  while (mantissa > traits::mantissa_max) {
 8005898:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800589c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058a0:	d2e7      	bcs.n	8005872 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x196>
  }

  // remaing digits can't fit in the mantissa
  while (isdigit(*s)) {
 80058a2:	e009      	b.n	80058b8 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1dc>
    exponent_offset++;
 80058a4:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	3301      	adds	r3, #1
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    s++;
 80058b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058b4:	3301      	adds	r3, #1
 80058b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  while (isdigit(*s)) {
 80058b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	4618      	mov	r0, r3
 80058be:	f7ff fdfa 	bl	80054b6 <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d1ed      	bne.n	80058a4 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1c8>
  }

  if (*s == '.') {
 80058c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80058ce:	d14c      	bne.n	800596a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x28e>
    s++;
 80058d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058d2:	3301      	adds	r3, #1
 80058d4:	64bb      	str	r3, [r7, #72]	@ 0x48
    while (isdigit(*s)) {
 80058d6:	e040      	b.n	800595a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x27e>
      if (mantissa < traits::mantissa_max / 10) {
 80058d8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80058dc:	f1b2 3f99 	cmp.w	r2, #2576980377	@ 0x99999999
 80058e0:	4953      	ldr	r1, [pc, #332]	@ (8005a30 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x354>)
 80058e2:	418b      	sbcs	r3, r1
 80058e4:	d236      	bcs.n	8005954 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x278>
        mantissa = mantissa * 10 + uint8_t(*s - '0');
 80058e6:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 80058ea:	4622      	mov	r2, r4
 80058ec:	462b      	mov	r3, r5
 80058ee:	f04f 0000 	mov.w	r0, #0
 80058f2:	f04f 0100 	mov.w	r1, #0
 80058f6:	0099      	lsls	r1, r3, #2
 80058f8:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80058fc:	0090      	lsls	r0, r2, #2
 80058fe:	4602      	mov	r2, r0
 8005900:	460b      	mov	r3, r1
 8005902:	eb12 0a04 	adds.w	sl, r2, r4
 8005906:	eb43 0b05 	adc.w	fp, r3, r5
 800590a:	eb1a 030a 	adds.w	r3, sl, sl
 800590e:	60bb      	str	r3, [r7, #8]
 8005910:	eb4b 030b 	adc.w	r3, fp, fp
 8005914:	60fb      	str	r3, [r7, #12]
 8005916:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800591a:	4652      	mov	r2, sl
 800591c:	465b      	mov	r3, fp
 800591e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005920:	7809      	ldrb	r1, [r1, #0]
 8005922:	3930      	subs	r1, #48	@ 0x30
 8005924:	b2c9      	uxtb	r1, r1
 8005926:	b2c9      	uxtb	r1, r1
 8005928:	2000      	movs	r0, #0
 800592a:	6239      	str	r1, [r7, #32]
 800592c:	6278      	str	r0, [r7, #36]	@ 0x24
 800592e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005932:	4621      	mov	r1, r4
 8005934:	1851      	adds	r1, r2, r1
 8005936:	6039      	str	r1, [r7, #0]
 8005938:	4629      	mov	r1, r5
 800593a:	414b      	adcs	r3, r1
 800593c:	607b      	str	r3, [r7, #4]
 800593e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005942:	e9c7 3422 	strd	r3, r4, [r7, #136]	@ 0x88
        exponent_offset--;
 8005946:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 800594a:	b29b      	uxth	r3, r3
 800594c:	3b01      	subs	r3, #1
 800594e:	b29b      	uxth	r3, r3
 8005950:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
      }
      s++;
 8005954:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005956:	3301      	adds	r3, #1
 8005958:	64bb      	str	r3, [r7, #72]	@ 0x48
    while (isdigit(*s)) {
 800595a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	4618      	mov	r0, r3
 8005960:	f7ff fda9 	bl	80054b6 <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d1b6      	bne.n	80058d8 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1fc>
    }
  }

  int exponent = 0;
 800596a:	2300      	movs	r3, #0
 800596c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (*s == 'e' || *s == 'E') {
 8005970:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	2b65      	cmp	r3, #101	@ 0x65
 8005976:	d003      	beq.n	8005980 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x2a4>
 8005978:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	2b45      	cmp	r3, #69	@ 0x45
 800597e:	d171      	bne.n	8005a64 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x388>
    s++;
 8005980:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005982:	3301      	adds	r3, #1
 8005984:	64bb      	str	r3, [r7, #72]	@ 0x48
    bool negative_exponent = false;
 8005986:	2300      	movs	r3, #0
 8005988:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    if (*s == '-') {
 800598c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	2b2d      	cmp	r3, #45	@ 0x2d
 8005992:	d106      	bne.n	80059a2 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x2c6>
      negative_exponent = true;
 8005994:	2301      	movs	r3, #1
 8005996:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      s++;
 800599a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800599c:	3301      	adds	r3, #1
 800599e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059a0:	e04f      	b.n	8005a42 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x366>
    } else if (*s == '+') {
 80059a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	2b2b      	cmp	r3, #43	@ 0x2b
 80059a8:	d14b      	bne.n	8005a42 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x366>
      s++;
 80059aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059ac:	3301      	adds	r3, #1
 80059ae:	64bb      	str	r3, [r7, #72]	@ 0x48
    }

    while (isdigit(*s)) {
 80059b0:	e047      	b.n	8005a42 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x366>
      exponent = exponent * 10 + (*s - '0');
 80059b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80059b6:	4613      	mov	r3, r2
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	4413      	add	r3, r2
 80059bc:	005b      	lsls	r3, r3, #1
 80059be:	461a      	mov	r2, r3
 80059c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	3b30      	subs	r3, #48	@ 0x30
 80059c6:	4413      	add	r3, r2
 80059c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      if (exponent + exponent_offset > traits::exponent_max) {
 80059cc:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	@ 0x86
 80059d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80059d4:	4413      	add	r3, r2
 80059d6:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 80059da:	dd2f      	ble.n	8005a3c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x360>
        if (negative_exponent)
 80059dc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00e      	beq.n	8005a02 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x326>
          return Number(is_negative ? -0.0f : 0.0f);
 80059e4:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d002      	beq.n	80059f2 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x316>
 80059ec:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8005a34 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x358>
 80059f0:	e001      	b.n	80059f6 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x31a>
 80059f2:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8005a38 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x35c>
 80059f6:	eeb0 0a67 	vmov.f32	s0, s15
 80059fa:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80059fc:	f7ff fdd1 	bl	80055a2 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ef>
 8005a00:	e094      	b.n	8005b2c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
        else
          return Number(is_negative ? -traits::inf() : traits::inf());
 8005a02:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d006      	beq.n	8005a18 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x33c>
 8005a0a:	f000 fda7 	bl	800655c <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE3infEv>
 8005a0e:	eeb0 7b40 	vmov.f64	d7, d0
 8005a12:	eeb1 7b47 	vneg.f64	d7, d7
 8005a16:	e003      	b.n	8005a20 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x344>
 8005a18:	f000 fda0 	bl	800655c <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE3infEv>
 8005a1c:	eeb0 7b40 	vmov.f64	d7, d0
 8005a20:	eeb0 0b47 	vmov.f64	d0, d7
 8005a24:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005a26:	f7ff fdfd 	bl	8005624 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ed>
 8005a2a:	e07f      	b.n	8005b2c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
 8005a2c:	19999999 	.word	0x19999999
 8005a30:	00019999 	.word	0x00019999
 8005a34:	80000000 	.word	0x80000000
 8005a38:	00000000 	.word	0x00000000
      }
      s++;
 8005a3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a3e:	3301      	adds	r3, #1
 8005a40:	64bb      	str	r3, [r7, #72]	@ 0x48
    while (isdigit(*s)) {
 8005a42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7ff fd35 	bl	80054b6 <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1af      	bne.n	80059b2 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x2d6>
    }
    if (negative_exponent)
 8005a52:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d004      	beq.n	8005a64 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x388>
      exponent = -exponent;
 8005a5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005a5e:	425b      	negs	r3, r3
 8005a60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  }
  exponent += exponent_offset;
 8005a64:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 8005a68:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005a6c:	4413      	add	r3, r2
 8005a6e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

  // we should be at the end of the string, otherwise it's an error
  if (*s != '\0')
 8005a72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d003      	beq.n	8005a82 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3a6>
    return Number();
 8005a7a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005a7c:	f7ff fd80 	bl	8005580 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ev>
 8005a80:	e054      	b.n	8005b2c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>

#if ARDUINOJSON_USE_DOUBLE
  bool isDouble = exponent < -FloatTraits<float>::exponent_max ||
                  exponent > FloatTraits<float>::exponent_max ||
 8005a82:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005a86:	f113 0f26 	cmn.w	r3, #38	@ 0x26
 8005a8a:	db0a      	blt.n	8005aa2 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3c6>
  bool isDouble = exponent < -FloatTraits<float>::exponent_max ||
 8005a8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005a90:	2b26      	cmp	r3, #38	@ 0x26
 8005a92:	dc06      	bgt.n	8005aa2 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3c6>
                  exponent > FloatTraits<float>::exponent_max ||
 8005a94:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8005a98:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 8005a9c:	f173 0300 	sbcs.w	r3, r3, #0
 8005aa0:	d301      	bcc.n	8005aa6 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3ca>
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e000      	b.n	8005aa8 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3cc>
 8005aa6:	2300      	movs	r3, #0
  bool isDouble = exponent < -FloatTraits<float>::exponent_max ||
 8005aa8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                  mantissa > FloatTraits<float>::mantissa_max;
  if (isDouble) {
 8005aac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d01e      	beq.n	8005af2 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x416>
    auto final_result = make_float(double(mantissa), exponent);
 8005ab4:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8005ab8:	f7fa fe00 	bl	80006bc <__aeabi_ul2d>
 8005abc:	4602      	mov	r2, r0
 8005abe:	460b      	mov	r3, r1
 8005ac0:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8005ac4:	ec43 2b10 	vmov	d0, r2, r3
 8005ac8:	f000 fd56 	bl	8006578 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_>
 8005acc:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
    return Number(is_negative ? -final_result : final_result);
 8005ad0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d004      	beq.n	8005ae2 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x406>
 8005ad8:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8005adc:	eeb1 7b47 	vneg.f64	d7, d7
 8005ae0:	e001      	b.n	8005ae6 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x40a>
 8005ae2:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8005ae6:	eeb0 0b47 	vmov.f64	d0, d7
 8005aea:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005aec:	f7ff fd9a 	bl	8005624 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ed>
 8005af0:	e01c      	b.n	8005b2c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
  } else
#endif
  {
    auto final_result = make_float(float(mantissa), exponent);
 8005af2:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8005af6:	f7fa fedf 	bl	80008b8 <__aeabi_ul2f>
 8005afa:	4603      	mov	r3, r0
 8005afc:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8005b00:	ee00 3a10 	vmov	s0, r3
 8005b04:	f000 fd79 	bl	80065fa <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_>
 8005b08:	ed87 0a16 	vstr	s0, [r7, #88]	@ 0x58
    return Number(is_negative ? -final_result : final_result);
 8005b0c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d004      	beq.n	8005b1e <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x442>
 8005b14:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8005b18:	eef1 7a67 	vneg.f32	s15, s15
 8005b1c:	e001      	b.n	8005b22 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x446>
 8005b1e:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8005b22:	eeb0 0a67 	vmov.f32	s0, s15
 8005b26:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005b28:	f7ff fd3b 	bl	80055a2 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ef>
  }
}
 8005b2c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005b2e:	3798      	adds	r7, #152	@ 0x98
 8005b30:	46bd      	mov	sp, r7
 8005b32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b36:	bf00      	nop

08005b38 <_ZN6Remora11setBaseFreqEm>:

public:

	Remora();
	void run();
    void setBaseFreq(uint32_t freq) { baseFreq = freq; }
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	683a      	ldr	r2, [r7, #0]
 8005b46:	635a      	str	r2, [r3, #52]	@ 0x34
 8005b48:	bf00      	nop
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <_ZN6Remora12setServoFreqEm>:
    void setServoFreq(uint32_t freq) { servoFreq = freq; }
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	683a      	ldr	r2, [r7, #0]
 8005b62:	639a      	str	r2, [r3, #56]	@ 0x38
 8005b64:	bf00      	nop
 8005b66:	370c      	adds	r7, #12
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <_ZN17JsonConfigHandlerC1EP6Remora>:

#include "jsonConfigHandler.h"
#include "../remora.h"


JsonConfigHandler::JsonConfigHandler(Remora* _remora) :
 8005b70:	b590      	push	{r4, r7, lr}
 8005b72:	b085      	sub	sp, #20
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
	remoraInstance(_remora),
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	683a      	ldr	r2, [r7, #0]
 8005b7e:	601a      	str	r2, [r3, #0]
	configError(false)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	1d1c      	adds	r4, r3, #4
 8005b84:	f107 030c 	add.w	r3, r7, #12
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f020 f9b8 	bl	8025efe <_ZNSaIcEC1Ev>
 8005b8e:	f107 030c 	add.w	r3, r7, #12
 8005b92:	461a      	mov	r2, r3
 8005b94:	4914      	ldr	r1, [pc, #80]	@ (8005be8 <_ZN17JsonConfigHandlerC1EP6Remora+0x78>)
 8005b96:	4620      	mov	r0, r4
 8005b98:	f000 fd70 	bl	800667c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8005b9c:	f107 030c 	add.w	r3, r7, #12
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f020 f9ad 	bl	8025f00 <_ZNSaIcED1Ev>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a10      	ldr	r2, [pc, #64]	@ (8005bec <_ZN17JsonConfigHandlerC1EP6Remora+0x7c>)
 8005baa:	61da      	str	r2, [r3, #28]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f103 0420 	add.w	r4, r3, #32
 8005bb2:	f7fe f953 	bl	8003e5c <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator8instanceEv>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	4619      	mov	r1, r3
 8005bba:	4620      	mov	r0, r4
 8005bbc:	f7fe feeb 	bl	8004996 <_ZN11ArduinoJson8V730HB2212JsonDocumentC1EPNS0_9AllocatorE>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	3360      	adds	r3, #96	@ 0x60
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f7fe fea8 	bl	800491a <_ZN11ArduinoJson8V730HB2210JsonObjectC1Ev>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
{
	loadConfiguration();
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 f80c 	bl	8005bf0 <_ZN17JsonConfigHandler17loadConfigurationEv>
    updateThreadFreq();
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 f82b 	bl	8005c34 <_ZN17JsonConfigHandler16updateThreadFreqEv>
}
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4618      	mov	r0, r3
 8005be2:	3714      	adds	r7, #20
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd90      	pop	{r4, r7, pc}
 8005be8:	08027b84 	.word	0x08027b84
 8005bec:	08027b88 	.word	0x08027b88

08005bf0 <_ZN17JsonConfigHandler17loadConfigurationEv>:

bool JsonConfigHandler::loadConfiguration() {
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
	// Clear any existing configuration
    jsonContent.clear();
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	3304      	adds	r3, #4
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f020 fb23 	bl	8026248 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
    doc.clear();
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	3320      	adds	r3, #32
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7fe fee5 	bl	80049d6 <_ZN11ArduinoJson8V730HB2212JsonDocument5clearEv>

    // Read and parse the configuration file
    if (!readFileContents()) {
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 f903 	bl	8005e18 <_ZN17JsonConfigHandler16readFileContentsEv>
 8005c12:	4603      	mov	r3, r0
 8005c14:	f083 0301 	eor.w	r3, r3, #1
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d001      	beq.n	8005c22 <_ZN17JsonConfigHandler17loadConfigurationEv+0x32>
        return false;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	e003      	b.n	8005c2a <_ZN17JsonConfigHandler17loadConfigurationEv+0x3a>
    }
    parseJson();
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 f9c8 	bl	8005fb8 <_ZN17JsonConfigHandler9parseJsonEv>
    return true;
 8005c28:	2301      	movs	r3, #1
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3708      	adds	r7, #8
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
	...

08005c34 <_ZN17JsonConfigHandler16updateThreadFreqEv>:


void JsonConfigHandler::updateThreadFreq() {
 8005c34:	b590      	push	{r4, r7, lr}
 8005c36:	b0a1      	sub	sp, #132	@ 0x84
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
    if (configError) return;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	f040 808e 	bne.w	8005d64 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x130>

    printf("\n5. Updating thread frequencies\n");
 8005c48:	4848      	ldr	r0, [pc, #288]	@ (8005d6c <_ZN17JsonConfigHandler16updateThreadFreqEv+0x138>)
 8005c4a:	f021 f861 	bl	8026d10 <puts>

    JsonArray Threads = doc["Threads"];
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f103 0120 	add.w	r1, r3, #32
 8005c54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c58:	4a45      	ldr	r2, [pc, #276]	@ (8005d70 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x13c>)
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f000 fd38 	bl	80066d0 <_ZN11ArduinoJson8V730HB2212JsonDocumentixIA8_cLi0EEENS0_6detail11MemberProxyIRS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueESA_NS4_9remove_cvINS4_16remove_referenceISA_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKSA_>
 8005c60:	f107 031c 	add.w	r3, r7, #28
 8005c64:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8005c68:	4611      	mov	r1, r2
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f000 fd49 	bl	8006702 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEcvT_INS0_9JsonArrayELi0EEEv>

    // create objects from JSON data
    for (JsonArray::iterator it=Threads.begin(); it!=Threads.end(); ++it) {
 8005c70:	f107 0310 	add.w	r3, r7, #16
 8005c74:	f107 021c 	add.w	r2, r7, #28
 8005c78:	4611      	mov	r1, r2
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f7fe fe1e 	bl	80048bc <_ZNK11ArduinoJson8V730HB229JsonArray5beginEv>
 8005c80:	e05c      	b.n	8005d3c <_ZN17JsonConfigHandler16updateThreadFreqEv+0x108>
        thread = *it;
 8005c82:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005c86:	f107 0210 	add.w	r2, r7, #16
 8005c8a:	4611      	mov	r1, r2
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f7fe fdbd 	bl	800480c <_ZN11ArduinoJson8V730HB2217JsonArrayIteratordeEv>
 8005c92:	68fc      	ldr	r4, [r7, #12]
 8005c94:	463b      	mov	r3, r7
 8005c96:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8005c9a:	4611      	mov	r1, r2
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f000 fd3f 	bl	8006720 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 8005ca2:	f104 0360 	add.w	r3, r4, #96	@ 0x60
 8005ca6:	463a      	mov	r2, r7
 8005ca8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005cac:	e883 0003 	stmia.w	r3, {r0, r1}
        const char* configor = thread["Thread"];
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8005cb6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8005cba:	4a2e      	ldr	r2, [pc, #184]	@ (8005d74 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x140>)
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f000 fd3e 	bl	800673e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8005cc2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f000 fd5e 	bl	8006788 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8005ccc:	67f8      	str	r0, [r7, #124]	@ 0x7c
        uint32_t    freq = thread["Frequency"];
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8005cd4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005cd8:	4a27      	ldr	r2, [pc, #156]	@ (8005d78 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x144>)
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f000 fd60 	bl	80067a0 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA10_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8005ce0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f000 fd80 	bl	80067ea <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ImLi0EEEv>
 8005cea:	67b8      	str	r0, [r7, #120]	@ 0x78
        if (!strcmp(configor,"Base")) {
 8005cec:	4923      	ldr	r1, [pc, #140]	@ (8005d7c <_ZN17JsonConfigHandler16updateThreadFreqEv+0x148>)
 8005cee:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8005cf0:	f7fa faf6 	bl	80002e0 <strcmp>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d10a      	bne.n	8005d10 <_ZN17JsonConfigHandler16updateThreadFreqEv+0xdc>
            printf("	Setting BASE thread frequency to %lu\n", freq);
 8005cfa:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8005cfc:	4820      	ldr	r0, [pc, #128]	@ (8005d80 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x14c>)
 8005cfe:	f020 ff97 	bl	8026c30 <iprintf>
            remoraInstance->setBaseFreq(freq);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f7ff ff15 	bl	8005b38 <_ZN6Remora11setBaseFreqEm>
 8005d0e:	e010      	b.n	8005d32 <_ZN17JsonConfigHandler16updateThreadFreqEv+0xfe>
        }
        else if (!strcmp(configor,"Servo")) {
 8005d10:	491c      	ldr	r1, [pc, #112]	@ (8005d84 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x150>)
 8005d12:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8005d14:	f7fa fae4 	bl	80002e0 <strcmp>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d109      	bne.n	8005d32 <_ZN17JsonConfigHandler16updateThreadFreqEv+0xfe>
            printf("	Setting SERVO thread frequency to %lu\n", freq);
 8005d1e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8005d20:	4819      	ldr	r0, [pc, #100]	@ (8005d88 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x154>)
 8005d22:	f020 ff85 	bl	8026c30 <iprintf>
            remoraInstance->setServoFreq(freq);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f7ff ff11 	bl	8005b54 <_ZN6Remora12setServoFreqEm>
    for (JsonArray::iterator it=Threads.begin(); it!=Threads.end(); ++it) {
 8005d32:	f107 0310 	add.w	r3, r7, #16
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7fe fd8c 	bl	8004854 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorppEv>
 8005d3c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8005d40:	f107 021c 	add.w	r2, r7, #28
 8005d44:	4611      	mov	r1, r2
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7fe fddb 	bl	8004902 <_ZNK11ArduinoJson8V730HB229JsonArray3endEv>
 8005d4c:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8005d50:	f107 0310 	add.w	r3, r7, #16
 8005d54:	4611      	mov	r1, r2
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7fe fd6c 	bl	8004834 <_ZNK11ArduinoJson8V730HB2217JsonArrayIteratorneERKS1_>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d18f      	bne.n	8005c82 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x4e>
 8005d62:	e000      	b.n	8005d66 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x132>
    if (configError) return;
 8005d64:	bf00      	nop
        }
    }
}
 8005d66:	3784      	adds	r7, #132	@ 0x84
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd90      	pop	{r4, r7, pc}
 8005d6c:	08027b94 	.word	0x08027b94
 8005d70:	08027bb4 	.word	0x08027bb4
 8005d74:	08027bbc 	.word	0x08027bbc
 8005d78:	08027bc4 	.word	0x08027bc4
 8005d7c:	08027bd0 	.word	0x08027bd0
 8005d80:	08027bd8 	.word	0x08027bd8
 8005d84:	08027c00 	.word	0x08027c00
 8005d88:	08027c08 	.word	0x08027c08

08005d8c <_ZN17JsonConfigHandler10getModulesEv>:


JsonArray JsonConfigHandler::getModules() {
 8005d8c:	b590      	push	{r4, r7, lr}
 8005d8e:	b08f      	sub	sp, #60	@ 0x3c
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
	if (doc["Modules"].is<JsonVariant>())
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	f103 0120 	add.w	r1, r3, #32
 8005d9c:	f107 0308 	add.w	r3, r7, #8
 8005da0:	4a1c      	ldr	r2, [pc, #112]	@ (8005e14 <_ZN17JsonConfigHandler10getModulesEv+0x88>)
 8005da2:	4618      	mov	r0, r3
 8005da4:	f000 fc94 	bl	80066d0 <_ZN11ArduinoJson8V730HB2212JsonDocumentixIA8_cLi0EEENS0_6detail11MemberProxyIRS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueESA_NS4_9remove_cvINS4_16remove_referenceISA_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKSA_>
 8005da8:	f107 0308 	add.w	r3, r7, #8
 8005dac:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005db0:	633b      	str	r3, [r7, #48]	@ 0x30
  return containsKey(key.template as<const char*>());
}

template <typename TDerived>
inline JsonVariant VariantRefBase<TDerived>::getVariant() const {
  return JsonVariant(getData(), getResourceManager());
 8005db2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005db4:	f001 fc9a 	bl	80076ec <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7getDataEv>
 8005db8:	4604      	mov	r4, r0
 8005dba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005dbc:	f001 fca6 	bl	800770c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE18getResourceManagerEv>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005dc6:	4621      	mov	r1, r4
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7fe fcb9 	bl	8004740 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
  }

  template <typename T>
  FORCE_INLINE enable_if_t<is_same<T, JsonVariant>::value, T> getVariant()
      const {
    return getVariant();
 8005dce:	bf00      	nop
template <typename TDerived>
template <typename T>
inline bool VariantRefBase<TDerived>::is() const {
  using variant_type =  // JsonVariantConst or JsonVariant?
      typename function_traits<decltype(&Converter<T>::checkJson)>::arg1_type;
  return Converter<T>::checkJson(getVariant<variant_type>());
 8005dd0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005dd4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005dd8:	f7fe fcdd 	bl	8004796 <_ZN11ArduinoJson8V730HB229ConverterINS0_11JsonVariantEvE9checkJsonES2_>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	bf00      	nop
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d010      	beq.n	8005e06 <_ZN17JsonConfigHandler10getModulesEv+0x7a>
        return doc["Modules"].as<JsonArray>();
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	f103 0120 	add.w	r1, r3, #32
 8005dea:	f107 0318 	add.w	r3, r7, #24
 8005dee:	4a09      	ldr	r2, [pc, #36]	@ (8005e14 <_ZN17JsonConfigHandler10getModulesEv+0x88>)
 8005df0:	4618      	mov	r0, r3
 8005df2:	f000 fc6d 	bl	80066d0 <_ZN11ArduinoJson8V730HB2212JsonDocumentixIA8_cLi0EEENS0_6detail11MemberProxyIRS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueESA_NS4_9remove_cvINS4_16remove_referenceISA_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKSA_>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f107 0218 	add.w	r2, r7, #24
 8005dfc:	4611      	mov	r1, r2
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f000 fcff 	bl	8006802 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE2asINS0_9JsonArrayEEET_v>
 8005e04:	e002      	b.n	8005e0c <_ZN17JsonConfigHandler10getModulesEv+0x80>
    else
        return JsonArray();
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f7fe fd34 	bl	8004874 <_ZN11ArduinoJson8V730HB229JsonArrayC1Ev>
}
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	373c      	adds	r7, #60	@ 0x3c
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd90      	pop	{r4, r7, pc}
 8005e14:	08027c30 	.word	0x08027c30

08005e18 <_ZN17JsonConfigHandler16readFileContentsEv>:
    }
    return JsonObject(); // Return empty object if not found
}
*/

bool JsonConfigHandler::readFileContents() {
 8005e18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005e1c:	b08f      	sub	sp, #60	@ 0x3c
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]

	uint32_t bytesread; // bytes read count


    printf("\n1. Reading JSON configuration file\n");
 8005e22:	485a      	ldr	r0, [pc, #360]	@ (8005f8c <_ZN17JsonConfigHandler16readFileContentsEv+0x174>)
 8005e24:	f020 ff74 	bl	8026d10 <puts>

    // Try to mount the file system
    printf("	Mounting the file system... \n");
 8005e28:	4859      	ldr	r0, [pc, #356]	@ (8005f90 <_ZN17JsonConfigHandler16readFileContentsEv+0x178>)
 8005e2a:	f020 ff71 	bl	8026d10 <puts>
    if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 8005e2e:	2200      	movs	r2, #0
 8005e30:	4958      	ldr	r1, [pc, #352]	@ (8005f94 <_ZN17JsonConfigHandler16readFileContentsEv+0x17c>)
 8005e32:	4859      	ldr	r0, [pc, #356]	@ (8005f98 <_ZN17JsonConfigHandler16readFileContentsEv+0x180>)
 8005e34:	f01f fbfe 	bl	8025634 <f_mount>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	bf14      	ite	ne
 8005e3e:	2301      	movne	r3, #1
 8005e40:	2300      	moveq	r3, #0
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d005      	beq.n	8005e54 <_ZN17JsonConfigHandler16readFileContentsEv+0x3c>
	{
    	printf("	Failed to mount SD card\n\r");
 8005e48:	4854      	ldr	r0, [pc, #336]	@ (8005f9c <_ZN17JsonConfigHandler16readFileContentsEv+0x184>)
 8005e4a:	f020 fef1 	bl	8026c30 <iprintf>
    	Error_Handler();
 8005e4e:	f003 fc4b 	bl	80096e8 <Error_Handler>
 8005e52:	e094      	b.n	8005f7e <_ZN17JsonConfigHandler16readFileContentsEv+0x166>
	}
    else
    {
		//Open file for reading
		if(f_open(&SDFile, filename, FA_READ) != FR_OK)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	69db      	ldr	r3, [r3, #28]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	4850      	ldr	r0, [pc, #320]	@ (8005fa0 <_ZN17JsonConfigHandler16readFileContentsEv+0x188>)
 8005e5e:	f01f fc2f 	bl	80256c0 <f_open>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	bf14      	ite	ne
 8005e68:	2301      	movne	r3, #1
 8005e6a:	2300      	moveq	r3, #0
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d005      	beq.n	8005e7e <_ZN17JsonConfigHandler16readFileContentsEv+0x66>
		{
			printf("	Failed to open JSON config file\n");
 8005e72:	484c      	ldr	r0, [pc, #304]	@ (8005fa4 <_ZN17JsonConfigHandler16readFileContentsEv+0x18c>)
 8005e74:	f020 ff4c 	bl	8026d10 <puts>
			Error_Handler();
 8005e78:	f003 fc36 	bl	80096e8 <Error_Handler>
 8005e7c:	e07f      	b.n	8005f7e <_ZN17JsonConfigHandler16readFileContentsEv+0x166>
			    // Remove comments from next line to print out the JSON config file
			    printf("\n%s\n", jsonContent.c_str());
			}

			f_close(&SDFile);
		}
 8005e7e:	466b      	mov	r3, sp
 8005e80:	461e      	mov	r6, r3
			int32_t length = f_size(&SDFile);
 8005e82:	4b47      	ldr	r3, [pc, #284]	@ (8005fa0 <_ZN17JsonConfigHandler16readFileContentsEv+0x188>)
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	633b      	str	r3, [r7, #48]	@ 0x30
			printf("	JSON config file lenght = %2ld\n", length);
 8005e88:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005e8a:	4847      	ldr	r0, [pc, #284]	@ (8005fa8 <_ZN17JsonConfigHandler16readFileContentsEv+0x190>)
 8005e8c:	f020 fed0 	bl	8026c30 <iprintf>
			__attribute__((aligned(32))) char rtext[length];
 8005e90:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005e92:	1e4b      	subs	r3, r1, #1
 8005e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e96:	460a      	mov	r2, r1
 8005e98:	2300      	movs	r3, #0
 8005e9a:	4690      	mov	r8, r2
 8005e9c:	4699      	mov	r9, r3
 8005e9e:	f04f 0200 	mov.w	r2, #0
 8005ea2:	f04f 0300 	mov.w	r3, #0
 8005ea6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005eaa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005eae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005eb2:	460a      	mov	r2, r1
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	4614      	mov	r4, r2
 8005eb8:	461d      	mov	r5, r3
 8005eba:	f04f 0200 	mov.w	r2, #0
 8005ebe:	f04f 0300 	mov.w	r3, #0
 8005ec2:	00eb      	lsls	r3, r5, #3
 8005ec4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ec8:	00e2      	lsls	r2, r4, #3
 8005eca:	460b      	mov	r3, r1
 8005ecc:	3318      	adds	r3, #24
 8005ece:	3307      	adds	r3, #7
 8005ed0:	08db      	lsrs	r3, r3, #3
 8005ed2:	00db      	lsls	r3, r3, #3
 8005ed4:	ebad 0d03 	sub.w	sp, sp, r3
 8005ed8:	466b      	mov	r3, sp
 8005eda:	331f      	adds	r3, #31
 8005edc:	095b      	lsrs	r3, r3, #5
 8005ede:	015b      	lsls	r3, r3, #5
 8005ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
			if(f_read(&SDFile, rtext, length, (UINT *)&bytesread) != FR_OK)
 8005ee2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ee4:	f107 030c 	add.w	r3, r7, #12
 8005ee8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005eea:	482d      	ldr	r0, [pc, #180]	@ (8005fa0 <_ZN17JsonConfigHandler16readFileContentsEv+0x188>)
 8005eec:	f01f fda2 	bl	8025a34 <f_read>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	bf14      	ite	ne
 8005ef6:	2301      	movne	r3, #1
 8005ef8:	2300      	moveq	r3, #0
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d003      	beq.n	8005f08 <_ZN17JsonConfigHandler16readFileContentsEv+0xf0>
				printf("	JSON config file read FAILURE\n");
 8005f00:	482a      	ldr	r0, [pc, #168]	@ (8005fac <_ZN17JsonConfigHandler16readFileContentsEv+0x194>)
 8005f02:	f020 ff05 	bl	8026d10 <puts>
 8005f06:	e036      	b.n	8005f76 <_ZN17JsonConfigHandler16readFileContentsEv+0x15e>
				printf("	JSON config file read SUCCESS!\n");
 8005f08:	4829      	ldr	r0, [pc, #164]	@ (8005fb0 <_ZN17JsonConfigHandler16readFileContentsEv+0x198>)
 8005f0a:	f020 ff01 	bl	8026d10 <puts>
				jsonContent.reserve(length + 1);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	1d1a      	adds	r2, r3, #4
 8005f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f14:	3301      	adds	r3, #1
 8005f16:	4619      	mov	r1, r3
 8005f18:	4610      	mov	r0, r2
 8005f1a:	f020 f97a 	bl	8026212 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>
			    for (int i = 0; i < length; i++) {
 8005f1e:	2300      	movs	r3, #0
 8005f20:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f22:	e01a      	b.n	8005f5a <_ZN17JsonConfigHandler16readFileContentsEv+0x142>
			    	jsonContent = jsonContent + rtext[i];
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	1d19      	adds	r1, r3, #4
 8005f28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f2c:	4413      	add	r3, r2
 8005f2e:	781a      	ldrb	r2, [r3, #0]
 8005f30:	f107 0310 	add.w	r3, r7, #16
 8005f34:	4618      	mov	r0, r3
 8005f36:	f000 fc88 	bl	800684a <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	3304      	adds	r3, #4
 8005f3e:	f107 0210 	add.w	r2, r7, #16
 8005f42:	4611      	mov	r1, r2
 8005f44:	4618      	mov	r0, r3
 8005f46:	f020 f8ca 	bl	80260de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8005f4a:	f107 0310 	add.w	r3, r7, #16
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f020 f8bf 	bl	80260d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			    for (int i = 0; i < length; i++) {
 8005f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f56:	3301      	adds	r3, #1
 8005f58:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f5a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	dbe0      	blt.n	8005f24 <_ZN17JsonConfigHandler16readFileContentsEv+0x10c>
			    printf("\n%s\n", jsonContent.c_str());
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	3304      	adds	r3, #4
 8005f66:	4618      	mov	r0, r3
 8005f68:	f020 fa96 	bl	8026498 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	4619      	mov	r1, r3
 8005f70:	4810      	ldr	r0, [pc, #64]	@ (8005fb4 <_ZN17JsonConfigHandler16readFileContentsEv+0x19c>)
 8005f72:	f020 fe5d 	bl	8026c30 <iprintf>
			f_close(&SDFile);
 8005f76:	480a      	ldr	r0, [pc, #40]	@ (8005fa0 <_ZN17JsonConfigHandler16readFileContentsEv+0x188>)
 8005f78:	f01f ff19 	bl	8025dae <f_close>
 8005f7c:	46b5      	mov	sp, r6
    }

	return true;
 8005f7e:	2301      	movs	r3, #1
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	373c      	adds	r7, #60	@ 0x3c
 8005f84:	46bd      	mov	sp, r7
 8005f86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f8a:	bf00      	nop
 8005f8c:	08027c38 	.word	0x08027c38
 8005f90:	08027c5c 	.word	0x08027c5c
 8005f94:	2400041c 	.word	0x2400041c
 8005f98:	24000420 	.word	0x24000420
 8005f9c:	08027c7c 	.word	0x08027c7c
 8005fa0:	24000650 	.word	0x24000650
 8005fa4:	08027c98 	.word	0x08027c98
 8005fa8:	08027cbc 	.word	0x08027cbc
 8005fac:	08027ce0 	.word	0x08027ce0
 8005fb0:	08027d00 	.word	0x08027d00
 8005fb4:	08027d20 	.word	0x08027d20

08005fb8 <_ZN17JsonConfigHandler9parseJsonEv>:


bool JsonConfigHandler::parseJson() {
 8005fb8:	b590      	push	{r4, r7, lr}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
	
	printf("\n3. Parsing json configuration file\n");
 8005fc0:	482a      	ldr	r0, [pc, #168]	@ (800606c <_ZN17JsonConfigHandler9parseJsonEv+0xb4>)
 8005fc2:	f020 fea5 	bl	8026d10 <puts>
	
    // Clear any existing parsed data
    doc.clear();
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	3320      	adds	r3, #32
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7fe fd03 	bl	80049d6 <_ZN11ArduinoJson8V730HB2212JsonDocument5clearEv>

    // Parse JSON
    DeserializationError error = deserializeJson(doc, jsonContent.c_str());
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f103 0420 	add.w	r4, r3, #32
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	3304      	adds	r3, #4
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f020 fa5c 	bl	8026498 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	4620      	mov	r0, r4
 8005fe6:	f000 fc46 	bl	8006876 <_ZN11ArduinoJson8V730HB2215deserializeJsonIRNS0_12JsonDocumentEKcJELi0EEENS0_20DeserializationErrorEOT_PT0_DpOT1_>
 8005fea:	4603      	mov	r3, r0
 8005fec:	733b      	strb	r3, [r7, #12]

    printf("	Config deserialisation - ");
 8005fee:	4820      	ldr	r0, [pc, #128]	@ (8006070 <_ZN17JsonConfigHandler9parseJsonEv+0xb8>)
 8005ff0:	f020 fe1e 	bl	8026c30 <iprintf>

    switch (error.code())
 8005ff4:	f107 030c 	add.w	r3, r7, #12
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f7ff f936 	bl	800526a <_ZNK11ArduinoJson8V730HB2220DeserializationError4codeEv>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b04      	cmp	r3, #4
 8006002:	d012      	beq.n	800602a <_ZN17JsonConfigHandler9parseJsonEv+0x72>
 8006004:	2b04      	cmp	r3, #4
 8006006:	dc18      	bgt.n	800603a <_ZN17JsonConfigHandler9parseJsonEv+0x82>
 8006008:	2b00      	cmp	r3, #0
 800600a:	d002      	beq.n	8006012 <_ZN17JsonConfigHandler9parseJsonEv+0x5a>
 800600c:	2b03      	cmp	r3, #3
 800600e:	d004      	beq.n	800601a <_ZN17JsonConfigHandler9parseJsonEv+0x62>
 8006010:	e013      	b.n	800603a <_ZN17JsonConfigHandler9parseJsonEv+0x82>
    {
        case DeserializationError::Ok:
            printf("Deserialization succeeded\n");
 8006012:	4818      	ldr	r0, [pc, #96]	@ (8006074 <_ZN17JsonConfigHandler9parseJsonEv+0xbc>)
 8006014:	f020 fe7c 	bl	8026d10 <puts>
            break;
 8006018:	e023      	b.n	8006062 <_ZN17JsonConfigHandler9parseJsonEv+0xaa>
        case DeserializationError::InvalidInput:
            printf("Invalid input!\n");
 800601a:	4817      	ldr	r0, [pc, #92]	@ (8006078 <_ZN17JsonConfigHandler9parseJsonEv+0xc0>)
 800601c:	f020 fe78 	bl	8026d10 <puts>
            configError = true;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            break;
 8006028:	e01b      	b.n	8006062 <_ZN17JsonConfigHandler9parseJsonEv+0xaa>
        case DeserializationError::NoMemory:
            printf("Not enough memory\n");
 800602a:	4814      	ldr	r0, [pc, #80]	@ (800607c <_ZN17JsonConfigHandler9parseJsonEv+0xc4>)
 800602c:	f020 fe70 	bl	8026d10 <puts>
            configError = true;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            break;
 8006038:	e013      	b.n	8006062 <_ZN17JsonConfigHandler9parseJsonEv+0xaa>
        default:
            printf("Deserialization failed: ");
 800603a:	4811      	ldr	r0, [pc, #68]	@ (8006080 <_ZN17JsonConfigHandler9parseJsonEv+0xc8>)
 800603c:	f020 fdf8 	bl	8026c30 <iprintf>
            printf(error.c_str());
 8006040:	f107 030c 	add.w	r3, r7, #12
 8006044:	4618      	mov	r0, r3
 8006046:	f7ff f91d 	bl	8005284 <_ZNK11ArduinoJson8V730HB2220DeserializationError5c_strEv>
 800604a:	4603      	mov	r3, r0
 800604c:	4618      	mov	r0, r3
 800604e:	f020 fdef 	bl	8026c30 <iprintf>
            printf("\n");
 8006052:	200a      	movs	r0, #10
 8006054:	f020 fdfe 	bl	8026c54 <putchar>
            configError = true;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            break;
 8006060:	bf00      	nop
    }

    return true;
 8006062:	2301      	movs	r3, #1
}
 8006064:	4618      	mov	r0, r3
 8006066:	3714      	adds	r7, #20
 8006068:	46bd      	mov	sp, r7
 800606a:	bd90      	pop	{r4, r7, pc}
 800606c:	08027d28 	.word	0x08027d28
 8006070:	08027d4c 	.word	0x08027d4c
 8006074:	08027d68 	.word	0x08027d68
 8006078:	08027d84 	.word	0x08027d84
 800607c:	08027d94 	.word	0x08027d94
 8006080:	08027da8 	.word	0x08027da8

08006084 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>:
    char_traits<_CharT>::
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
      std::size_t __i = 0;
 800608c:	2300      	movs	r3, #0
 800608e:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 8006090:	e002      	b.n	8006098 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0x14>
        ++__i;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	3301      	adds	r3, #1
 8006096:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	4413      	add	r3, r2
 800609e:	2200      	movs	r2, #0
 80060a0:	72fa      	strb	r2, [r7, #11]
 80060a2:	f107 020b 	add.w	r2, r7, #11
 80060a6:	4611      	mov	r1, r2
 80060a8:	4618      	mov	r0, r3
 80060aa:	f000 fbf7 	bl	800689c <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>
 80060ae:	4603      	mov	r3, r0
 80060b0:	f083 0301 	eor.w	r3, r3, #1
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d1eb      	bne.n	8006092 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0xe>
      return __i;
 80060ba:	68fb      	ldr	r3, [r7, #12]
    }
 80060bc:	4618      	mov	r0, r3
 80060be:	3710      	adds	r7, #16
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <_ZN11ArduinoJson8V730HB2210JsonStringC1ItLi0EEEPKcT_b>:
  JsonString(const char* data, TSize sz, bool isStatic = false)
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	4611      	mov	r1, r2
 80060d0:	461a      	mov	r2, r3
 80060d2:	460b      	mov	r3, r1
 80060d4:	80fb      	strh	r3, [r7, #6]
 80060d6:	4613      	mov	r3, r2
 80060d8:	717b      	strb	r3, [r7, #5]
      : str_(data, size_t(sz), isStatic) {}
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	88fa      	ldrh	r2, [r7, #6]
 80060de:	797b      	ldrb	r3, [r7, #5]
 80060e0:	68b9      	ldr	r1, [r7, #8]
 80060e2:	f7fd ff3b 	bl	8003f5c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	4618      	mov	r0, r3
 80060ea:	3710      	adds	r7, #16
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE>:
    auto indexInPool = SlotId(id % ARDUINOJSON_POOL_CAPACITY);
    ARDUINOJSON_ASSERT(poolIndex < count_);
    return pools_[poolIndex].getSlot(indexInPool);
  }

  void clear(Allocator* allocator) {
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
    for (PoolCount i = 0; i < count_; i++)
 80060fa:	2300      	movs	r3, #0
 80060fc:	81fb      	strh	r3, [r7, #14]
 80060fe:	e00b      	b.n	8006118 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE+0x28>
      pools_[i].destroy(allocator);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a1a      	ldr	r2, [r3, #32]
 8006104:	89fb      	ldrh	r3, [r7, #14]
 8006106:	00db      	lsls	r3, r3, #3
 8006108:	4413      	add	r3, r2
 800610a:	6839      	ldr	r1, [r7, #0]
 800610c:	4618      	mov	r0, r3
 800610e:	f000 fc40 	bl	8006992 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7destroyEPNS0_9AllocatorE>
    for (PoolCount i = 0; i < count_; i++)
 8006112:	89fb      	ldrh	r3, [r7, #14]
 8006114:	3301      	adds	r3, #1
 8006116:	81fb      	strh	r3, [r7, #14]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800611c:	89fa      	ldrh	r2, [r7, #14]
 800611e:	429a      	cmp	r2, r3
 8006120:	d3ee      	bcc.n	8006100 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE+0x10>
    count_ = 0;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	849a      	strh	r2, [r3, #36]	@ 0x24
    freeList_ = NULL_SLOT;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800612e:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (pools_ != preallocatedPools_) {
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6a1a      	ldr	r2, [r3, #32]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	429a      	cmp	r2, r3
 8006138:	d00e      	beq.n	8006158 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE+0x68>
      allocator->deallocate(pools_);
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	3304      	adds	r3, #4
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	6a12      	ldr	r2, [r2, #32]
 8006146:	4611      	mov	r1, r2
 8006148:	6838      	ldr	r0, [r7, #0]
 800614a:	4798      	blx	r3
      pools_ = preallocatedPools_;
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	621a      	str	r2, [r3, #32]
      capacity_ = ARDUINOJSON_INITIAL_POOL_COUNT;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2204      	movs	r2, #4
 8006156:	84da      	strh	r2, [r3, #38]	@ 0x26
    }
  }
 8006158:	bf00      	nop
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE>:

  size_t size() const {
    return Pool::slotsToBytes(usage());
  }

  void shrinkToFit(Allocator* allocator) {
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
    if (count_ > 0)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00d      	beq.n	800618e <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE+0x2e>
      pools_[count_ - 1].shrinkToFit(allocator);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a1a      	ldr	r2, [r3, #32]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800617a:	4619      	mov	r1, r3
 800617c:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8006180:	440b      	add	r3, r1
 8006182:	00db      	lsls	r3, r3, #3
 8006184:	4413      	add	r3, r2
 8006186:	6839      	ldr	r1, [r7, #0]
 8006188:	4618      	mov	r0, r3
 800618a:	f000 fc2e 	bl	80069ea <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE>
    if (pools_ != preallocatedPools_ && count_ != capacity_) {
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a1a      	ldr	r2, [r3, #32]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	429a      	cmp	r2, r3
 8006196:	d017      	beq.n	80061c8 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE+0x68>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d011      	beq.n	80061c8 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE+0x68>
      pools_ = static_cast<Pool*>(
          allocator->reallocate(pools_, count_ * sizeof(Pool)));
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	3308      	adds	r3, #8
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	6a11      	ldr	r1, [r2, #32]
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 80061b4:	00d2      	lsls	r2, r2, #3
 80061b6:	6838      	ldr	r0, [r7, #0]
 80061b8:	4798      	blx	r3
 80061ba:	4602      	mov	r2, r0
      pools_ = static_cast<Pool*>(
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	621a      	str	r2, [r3, #32]
      ARDUINOJSON_ASSERT(pools_ != nullptr);  // realloc to smaller can't fail
      capacity_ = count_;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	84da      	strh	r2, [r3, #38]	@ 0x26
    }
  }
 80061c8:	bf00      	nop
 80061ca:	3708      	adds	r7, #8
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>:
      -> decltype(client.getResourceManager()) {
    return client.getResourceManager();
  }

  template <typename TClient>
  static auto getData(TClient& client) -> decltype(client.getData()) {
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
    return client.getData();
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f7fe fad0 	bl	800477e <_ZNK11ArduinoJson8V730HB2211JsonVariant7getDataEv>
 80061de:	4603      	mov	r3, r0
  }
 80061e0:	4618      	mov	r0, r3
 80061e2:	3708      	adds	r7, #8
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
    return client.getData();
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f7fe fa8d 	bl	8004710 <_ZNK11ArduinoJson8V730HB2216JsonVariantConst7getDataEv>
 80061f6:	4603      	mov	r3, r0
  }
 80061f8:	4618      	mov	r0, r3
 80061fa:	3708      	adds	r7, #8
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f7fe fa8d 	bl	8004728 <_ZNK11ArduinoJson8V730HB2216JsonVariantConst18getResourceManagerEv>
 800620e:	4603      	mov	r3, r0
  }
 8006210:	4618      	mov	r0, r3
 8006212:	3708      	adds	r7, #8
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>:
  Slot() : ptr_(nullptr), id_(NULL_SLOT) {}
  Slot(T* p, SlotId id) : ptr_(p), id_(id) {
    ARDUINOJSON_ASSERT((p == nullptr) == (id == NULL_SLOT));
  }

  explicit operator bool() const {
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
    return ptr_ != nullptr;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	bf14      	ite	ne
 8006228:	2301      	movne	r3, #1
 800622a:	2300      	moveq	r3, #0
 800622c:	b2db      	uxtb	r3, r3
  }
 800622e:	4618      	mov	r0, r3
 8006230:	370c      	adds	r7, #12
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr

0800623a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>:

  SlotId id() const {
    return id_;
  }

  T* ptr() const {
 800623a:	b480      	push	{r7}
 800623c:	b083      	sub	sp, #12
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
    return ptr_;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
  }
 8006246:	4618      	mov	r0, r3
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr

08006252 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>:
  SlotId id() const {
 8006252:	b480      	push	{r7}
 8006254:	b083      	sub	sp, #12
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
    return id_;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	889b      	ldrh	r3, [r3, #4]
  }
 800625e:	4618      	mov	r0, r3
 8006260:	370c      	adds	r7, #12
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr

0800626a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>:

  T* operator->() const {
 800626a:	b480      	push	{r7}
 800626c:	b083      	sub	sp, #12
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(ptr_ != nullptr);
    return ptr_;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
  }
 8006276:	4618      	mov	r0, r3
 8006278:	370c      	adds	r7, #12
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr

08006282 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1EPS3_t>:
  Slot(T* p, SlotId id) : ptr_(p), id_(id) {
 8006282:	b480      	push	{r7}
 8006284:	b085      	sub	sp, #20
 8006286:	af00      	add	r7, sp, #0
 8006288:	60f8      	str	r0, [r7, #12]
 800628a:	60b9      	str	r1, [r7, #8]
 800628c:	4613      	mov	r3, r2
 800628e:	80fb      	strh	r3, [r7, #6]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	68ba      	ldr	r2, [r7, #8]
 8006294:	601a      	str	r2, [r3, #0]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	88fa      	ldrh	r2, [r7, #6]
 800629a:	809a      	strh	r2, [r3, #4]
  }
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	4618      	mov	r0, r3
 80062a0:	3714      	adds	r7, #20
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr

080062aa <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1Ev>:
  Slot() : ptr_(nullptr), id_(NULL_SLOT) {}
 80062aa:	b480      	push	{r7}
 80062ac:	b083      	sub	sp, #12
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	601a      	str	r2, [r3, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80062be:	809a      	strh	r2, [r3, #4]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4618      	mov	r0, r3
 80062c4:	370c      	adds	r7, #12
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr

080062ce <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE>:
  Slot<T> allocSlot(Allocator* allocator) {
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b088      	sub	sp, #32
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	60f8      	str	r0, [r7, #12]
 80062d6:	60b9      	str	r1, [r7, #8]
 80062d8:	607a      	str	r2, [r7, #4]
    if (freeList_ != NULL_SLOT) {
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d005      	beq.n	80062f2 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x24>
      return allocFromFreeList();
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	68b9      	ldr	r1, [r7, #8]
 80062ea:	4618      	mov	r0, r3
 80062ec:	f000 fbda 	bl	8006aa4 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromFreeListEv>
 80062f0:	e02c      	b.n	800634c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x7e>
    if (count_) {
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d016      	beq.n	8006328 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x5a>
      auto slot = allocFromLastPool();
 80062fa:	f107 0314 	add.w	r3, r7, #20
 80062fe:	68b9      	ldr	r1, [r7, #8]
 8006300:	4618      	mov	r0, r3
 8006302:	f000 fbec 	bl	8006ade <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv>
      if (slot)
 8006306:	f107 0314 	add.w	r3, r7, #20
 800630a:	4618      	mov	r0, r3
 800630c:	f000 f822 	bl	8006354 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d008      	beq.n	8006328 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x5a>
        return slot;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	461a      	mov	r2, r3
 800631a:	f107 0314 	add.w	r3, r7, #20
 800631e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006322:	e882 0003 	stmia.w	r2, {r0, r1}
  }
 8006326:	e011      	b.n	800634c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x7e>
    auto pool = addPool(allocator);
 8006328:	6879      	ldr	r1, [r7, #4]
 800632a:	68b8      	ldr	r0, [r7, #8]
 800632c:	f000 fc14 	bl	8006b58 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE>
 8006330:	61f8      	str	r0, [r7, #28]
    if (!pool)
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d103      	bne.n	8006340 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x72>
      return {};
 8006338:	68f8      	ldr	r0, [r7, #12]
 800633a:	f000 fc49 	bl	8006bd0 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>
 800633e:	e005      	b.n	800634c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x7e>
    return allocFromLastPool();
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	68b9      	ldr	r1, [r7, #8]
 8006344:	4618      	mov	r0, r3
 8006346:	f000 fbca 	bl	8006ade <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv>
 800634a:	bf00      	nop
  }
 800634c:	68f8      	ldr	r0, [r7, #12]
 800634e:	3720      	adds	r7, #32
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>:
  explicit operator bool() const {
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
    return ptr_ != nullptr;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	bf14      	ite	ne
 8006364:	2301      	movne	r3, #1
 8006366:	2300      	moveq	r3, #0
 8006368:	b2db      	uxtb	r3, r3
  }
 800636a:	4618      	mov	r0, r3
 800636c:	370c      	adds	r7, #12
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr

08006376 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEptEv>:
  T* operator->() const {
 8006376:	b480      	push	{r7}
 8006378:	b083      	sub	sp, #12
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
    return ptr_;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
  }
 8006382:	4618      	mov	r0, r3
 8006384:	370c      	adds	r7, #12
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr

0800638e <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>:
  SlotId id() const {
 800638e:	b480      	push	{r7}
 8006390:	b083      	sub	sp, #12
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
    return id_;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	889b      	ldrh	r3, [r3, #4]
  }
 800639a:	4618      	mov	r0, r3
 800639c:	370c      	adds	r7, #12
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr

080063a6 <_ZN11ArduinoJson8V730HB226detail10alias_castIPNS1_15ResourceManager8SlotDataEPNS1_11VariantDataEEET_T0_>:
    T data;
  };
};

template <typename T, typename F>
T alias_cast(F raw_data) {
 80063a6:	b480      	push	{r7}
 80063a8:	b085      	sub	sp, #20
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
  alias_cast_t<T, F> ac;
  ac.raw = raw_data;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	60fb      	str	r3, [r7, #12]
  return ac.data;
 80063b2:	68fb      	ldr	r3, [r7, #12]
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3714      	adds	r7, #20
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>:
  Slot(T* p, SlotId id) : ptr_(p), id_(id) {
 80063c0:	b480      	push	{r7}
 80063c2:	b085      	sub	sp, #20
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	4613      	mov	r3, r2
 80063cc:	80fb      	strh	r3, [r7, #6]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	68ba      	ldr	r2, [r7, #8]
 80063d2:	601a      	str	r2, [r3, #0]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	88fa      	ldrh	r2, [r7, #6]
 80063d8:	809a      	strh	r2, [r3, #4]
  }
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	4618      	mov	r0, r3
 80063de:	3714      	adds	r7, #20
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE8freeSlotENS1_4SlotIS4_EE>:
  void freeSlot(Slot<T> slot) {
 80063e8:	b590      	push	{r4, r7, lr}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	1d3b      	adds	r3, r7, #4
 80063f2:	e883 0006 	stmia.w	r3, {r1, r2}
    reinterpret_cast<FreeSlot*>(slot.ptr())->next = freeList_;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	8d1c      	ldrh	r4, [r3, #40]	@ 0x28
 80063fa:	1d3b      	adds	r3, r7, #4
 80063fc:	4618      	mov	r0, r3
 80063fe:	f000 fbf9 	bl	8006bf4 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE3ptrEv>
 8006402:	4603      	mov	r3, r0
 8006404:	4622      	mov	r2, r4
 8006406:	801a      	strh	r2, [r3, #0]
    freeList_ = slot.id();
 8006408:	1d3b      	adds	r3, r7, #4
 800640a:	4618      	mov	r0, r3
 800640c:	f7ff ffbf 	bl	800638e <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>
 8006410:	4603      	mov	r3, r0
 8006412:	461a      	mov	r2, r3
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	851a      	strh	r2, [r3, #40]	@ 0x28
  }
 8006418:	bf00      	nop
 800641a:	3714      	adds	r7, #20
 800641c:	46bd      	mov	sp, r7
 800641e:	bd90      	pop	{r4, r7, pc}

08006420 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt>:
  T* getSlot(SlotId id) const {
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	460b      	mov	r3, r1
 800642a:	807b      	strh	r3, [r7, #2]
    if (id == NULL_SLOT)
 800642c:	887b      	ldrh	r3, [r7, #2]
 800642e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006432:	4293      	cmp	r3, r2
 8006434:	d101      	bne.n	800643a <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt+0x1a>
      return nullptr;
 8006436:	2300      	movs	r3, #0
 8006438:	e012      	b.n	8006460 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt+0x40>
    auto poolIndex = SlotId(id / ARDUINOJSON_POOL_CAPACITY);
 800643a:	887b      	ldrh	r3, [r7, #2]
 800643c:	09db      	lsrs	r3, r3, #7
 800643e:	81fb      	strh	r3, [r7, #14]
    auto indexInPool = SlotId(id % ARDUINOJSON_POOL_CAPACITY);
 8006440:	887b      	ldrh	r3, [r7, #2]
 8006442:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006446:	81bb      	strh	r3, [r7, #12]
    return pools_[poolIndex].getSlot(indexInPool);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6a1a      	ldr	r2, [r3, #32]
 800644c:	89fb      	ldrh	r3, [r7, #14]
 800644e:	00db      	lsls	r3, r3, #3
 8006450:	4413      	add	r3, r2
 8006452:	89ba      	ldrh	r2, [r7, #12]
 8006454:	4611      	mov	r1, r2
 8006456:	4618      	mov	r0, r3
 8006458:	f000 fbd8 	bl	8006c0c <_ZNK11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7getSlotEt>
 800645c:	4603      	mov	r3, r0
 800645e:	bf00      	nop
  }
 8006460:	4618      	mov	r0, r3
 8006462:	3710      	adds	r7, #16
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEC1Ev>:
  Slot() : ptr_(nullptr), id_(NULL_SLOT) {}
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	601a      	str	r2, [r3, #0]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800647c:	809a      	strh	r2, [r3, #4]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4618      	mov	r0, r3
 8006482:	370c      	adds	r7, #12
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <_ZN11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEC1EPS3_t>:
  Slot(T* p, SlotId id) : ptr_(p), id_(id) {
 800648c:	b480      	push	{r7}
 800648e:	b085      	sub	sp, #20
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	4613      	mov	r3, r2
 8006498:	80fb      	strh	r3, [r7, #6]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	68ba      	ldr	r2, [r7, #8]
 800649e:	601a      	str	r2, [r3, #0]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	88fa      	ldrh	r2, [r7, #6]
 80064a4:	809a      	strh	r2, [r3, #4]
  }
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	4618      	mov	r0, r3
 80064aa:	3714      	adds	r7, #20
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <_ZN11ArduinoJson8V730HB226detail11adaptStringIcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIPT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringES7_j>:
AdaptedString<TChar*> adaptString(TChar* p) {
  return StringAdapter<TChar*>::adapt(p);
}

template <typename TChar>
AdaptedString<TChar*> adaptString(TChar* p, size_t n) {
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	607a      	str	r2, [r7, #4]
  return SizedStringAdapter<TChar*>::adapt(p, n);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	68b9      	ldr	r1, [r7, #8]
 80064c6:	4618      	mov	r0, r3
 80064c8:	f000 fbe6 	bl	8006c98 <_ZN11ArduinoJson8V730HB226detail18SizedStringAdapterIPcvE5adaptEPKcj>
 80064cc:	bf00      	nop
}
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <_ZNK11ArduinoJson8V730HB226detail15ResourceManager9getStringINS1_9RamStringEEEPNS1_10StringNodeERKT_>:
  StringNode* getString(const TAdaptedString& str) const {
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b082      	sub	sp, #8
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
 80064de:	6039      	str	r1, [r7, #0]
    return stringPool_.get(str);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	3308      	adds	r3, #8
 80064e4:	6839      	ldr	r1, [r7, #0]
 80064e6:	4618      	mov	r0, r3
 80064e8:	f000 fbe6 	bl	8006cb8 <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_>
 80064ec:	4603      	mov	r3, r0
  }
 80064ee:	4618      	mov	r0, r3
 80064f0:	3708      	adds	r7, #8
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}

080064f6 <_ZN11ArduinoJson8V730HB2210JsonStringC1IjLi0EEEPKcT_b>:
  JsonString(const char* data, TSize sz, bool isStatic = false)
 80064f6:	b580      	push	{r7, lr}
 80064f8:	b084      	sub	sp, #16
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	60f8      	str	r0, [r7, #12]
 80064fe:	60b9      	str	r1, [r7, #8]
 8006500:	607a      	str	r2, [r7, #4]
 8006502:	70fb      	strb	r3, [r7, #3]
      : str_(data, size_t(sz), isStatic) {}
 8006504:	68f8      	ldr	r0, [r7, #12]
 8006506:	78fb      	ldrb	r3, [r7, #3]
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	68b9      	ldr	r1, [r7, #8]
 800650c:	f7fd fd26 	bl	8003f5c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	4618      	mov	r0, r3
 8006514:	3710      	adds	r7, #16
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}

0800651a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 800651a:	b580      	push	{r7, lr}
 800651c:	b082      	sub	sp, #8
 800651e:	af00      	add	r7, sp, #0
 8006520:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f7fe f91f 	bl	8004766 <_ZNK11ArduinoJson8V730HB2211JsonVariant18getResourceManagerEv>
 8006528:	4603      	mov	r3, r0
  }
 800652a:	4618      	mov	r0, r3
 800652c:	3708      	adds	r7, #8
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}

08006532 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRNS0_10JsonStringEEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES8_NS1_9remove_cvINS1_16remove_referenceIS8_E4typeEE4typeEE4typeEvE13AdaptedStringEOS8_>:
AdaptedString<TString> adaptString(TString&& s) {
 8006532:	b580      	push	{r7, lr}
 8006534:	b082      	sub	sp, #8
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
 800653a:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800653c:	6838      	ldr	r0, [r7, #0]
 800653e:	f000 fbf6 	bl	8006d2e <_ZN11ArduinoJson8V730HB226detail7forwardIRNS0_10JsonStringEEEOT_RNS1_16remove_referenceIS5_E4typeE>
 8006542:	4603      	mov	r3, r0
 8006544:	4618      	mov	r0, r3
 8006546:	f7fd fdea 	bl	800411e <_ZN11ArduinoJson8V730HB226detail13StringAdapterINS0_10JsonStringEvE5adaptERKS3_>
 800654a:	4602      	mov	r2, r0
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	ca07      	ldmia	r2, {r0, r1, r2}
 8006550:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	3708      	adds	r7, #8
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE3infEv>:

  static T nan() {
    return forge(0x7ff8000000000000);
  }

  static T inf() {
 800655c:	b580      	push	{r7, lr}
 800655e:	af00      	add	r7, sp, #0
    return forge(0x7ff0000000000000);
 8006560:	f04f 0000 	mov.w	r0, #0
 8006564:	4903      	ldr	r1, [pc, #12]	@ (8006574 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE3infEv+0x18>)
 8006566:	f000 fc0d 	bl	8006d84 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE5forgeEy>
 800656a:	eeb0 7b40 	vmov.f64	d7, d0
  }
 800656e:	eeb0 0b47 	vmov.f64	d0, d7
 8006572:	bd80      	pop	{r7, pc}
 8006574:	7ff00000 	.word	0x7ff00000

08006578 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_>:
    return forge(0xFf7fffff);
  }
};

template <typename TFloat, typename TExponent>
inline TFloat make_float(TFloat m, TExponent e) {
 8006578:	b580      	push	{r7, lr}
 800657a:	b086      	sub	sp, #24
 800657c:	af00      	add	r7, sp, #0
 800657e:	ed87 0b02 	vstr	d0, [r7, #8]
 8006582:	6078      	str	r0, [r7, #4]
  using traits = FloatTraits<TFloat>;

  auto powersOfTen = e > 0 ? traits::positiveBinaryPowersOfTen()
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2b00      	cmp	r3, #0
 8006588:	dd04      	ble.n	8006594 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x1c>
 800658a:	f000 fb51 	bl	8006c30 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>
 800658e:	4603      	mov	r3, r0
 8006590:	613b      	str	r3, [r7, #16]
 8006592:	e003      	b.n	800659c <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x24>
                           : traits::negativeBinaryPowersOfTen();
 8006594:	f000 fb70 	bl	8006c78 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>
 8006598:	4603      	mov	r3, r0
 800659a:	613b      	str	r3, [r7, #16]
  if (e <= 0)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	dc02      	bgt.n	80065a8 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x30>
    e = TExponent(-e);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	425b      	negs	r3, r3
 80065a6:	607b      	str	r3, [r7, #4]

  for (uint8_t index = 0; e != 0; index++) {
 80065a8:	2300      	movs	r3, #0
 80065aa:	75fb      	strb	r3, [r7, #23]
 80065ac:	e019      	b.n	80065e2 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x6a>
    if (e & 1)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f003 0301 	and.w	r3, r3, #1
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d00e      	beq.n	80065d6 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x5e>
      m *= powersOfTen[index];
 80065b8:	7dfa      	ldrb	r2, [r7, #23]
 80065ba:	f107 0310 	add.w	r3, r7, #16
 80065be:	4611      	mov	r1, r2
 80065c0:	4618      	mov	r0, r3
 80065c2:	f000 fb45 	bl	8006c50 <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIdEixEi>
 80065c6:	eeb0 6b40 	vmov.f64	d6, d0
 80065ca:	ed97 7b02 	vldr	d7, [r7, #8]
 80065ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 80065d2:	ed87 7b02 	vstr	d7, [r7, #8]
    e >>= 1;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	105b      	asrs	r3, r3, #1
 80065da:	607b      	str	r3, [r7, #4]
  for (uint8_t index = 0; e != 0; index++) {
 80065dc:	7dfb      	ldrb	r3, [r7, #23]
 80065de:	3301      	adds	r3, #1
 80065e0:	75fb      	strb	r3, [r7, #23]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d1e2      	bne.n	80065ae <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x36>
  }
  return m;
 80065e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80065ec:	ec43 2b17 	vmov	d7, r2, r3
}
 80065f0:	eeb0 0b47 	vmov.f64	d0, d7
 80065f4:	3718      	adds	r7, #24
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}

080065fa <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_>:
inline TFloat make_float(TFloat m, TExponent e) {
 80065fa:	b580      	push	{r7, lr}
 80065fc:	b084      	sub	sp, #16
 80065fe:	af00      	add	r7, sp, #0
 8006600:	ed87 0a01 	vstr	s0, [r7, #4]
 8006604:	6038      	str	r0, [r7, #0]
  auto powersOfTen = e > 0 ? traits::positiveBinaryPowersOfTen()
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	2b00      	cmp	r3, #0
 800660a:	dd04      	ble.n	8006616 <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x1c>
 800660c:	f000 fbca 	bl	8006da4 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25positiveBinaryPowersOfTenEv>
 8006610:	4603      	mov	r3, r0
 8006612:	60bb      	str	r3, [r7, #8]
 8006614:	e003      	b.n	800661e <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x24>
                           : traits::negativeBinaryPowersOfTen();
 8006616:	f000 fbd5 	bl	8006dc4 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25negativeBinaryPowersOfTenEv>
 800661a:	4603      	mov	r3, r0
 800661c:	60bb      	str	r3, [r7, #8]
  if (e <= 0)
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	dc02      	bgt.n	800662a <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x30>
    e = TExponent(-e);
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	425b      	negs	r3, r3
 8006628:	603b      	str	r3, [r7, #0]
  for (uint8_t index = 0; e != 0; index++) {
 800662a:	2300      	movs	r3, #0
 800662c:	73fb      	strb	r3, [r7, #15]
 800662e:	e019      	b.n	8006664 <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x6a>
    if (e & 1)
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	f003 0301 	and.w	r3, r3, #1
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00e      	beq.n	8006658 <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x5e>
      m *= powersOfTen[index];
 800663a:	7bfa      	ldrb	r2, [r7, #15]
 800663c:	f107 0308 	add.w	r3, r7, #8
 8006640:	4611      	mov	r1, r2
 8006642:	4618      	mov	r0, r3
 8006644:	f000 fbce 	bl	8006de4 <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIfEixEi>
 8006648:	eeb0 7a40 	vmov.f32	s14, s0
 800664c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006650:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006654:	edc7 7a01 	vstr	s15, [r7, #4]
    e >>= 1;
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	105b      	asrs	r3, r3, #1
 800665c:	603b      	str	r3, [r7, #0]
  for (uint8_t index = 0; e != 0; index++) {
 800665e:	7bfb      	ldrb	r3, [r7, #15]
 8006660:	3301      	adds	r3, #1
 8006662:	73fb      	strb	r3, [r7, #15]
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d1e2      	bne.n	8006630 <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x36>
  return m;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	ee07 3a90 	vmov	s15, r3
}
 8006670:	eeb0 0a67 	vmov.f32	s0, s15
 8006674:	3710      	adds	r7, #16
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
	...

0800667c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>:
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 800667c:	b5b0      	push	{r4, r5, r7, lr}
 800667e:	b086      	sub	sp, #24
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	607a      	str	r2, [r7, #4]
      : _M_dataplus(_M_local_data(), __a)
 8006688:	68fc      	ldr	r4, [r7, #12]
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	f01f fc65 	bl	8025f5a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8006690:	4603      	mov	r3, r0
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	4619      	mov	r1, r3
 8006696:	4620      	mov	r0, r4
 8006698:	f01f ff0e 	bl	80264b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	if (__s == 0)
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d102      	bne.n	80066a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x2c>
	  std::__throw_logic_error(__N("basic_string: "
 80066a2:	480a      	ldr	r0, [pc, #40]	@ (80066cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x50>)
 80066a4:	f01f fc33 	bl	8025f0e <_ZSt19__throw_logic_errorPKc>
	const _CharT* __end = __s + traits_type::length(__s);
 80066a8:	68b8      	ldr	r0, [r7, #8]
 80066aa:	f7fd fb97 	bl	8003ddc <_ZNSt11char_traitsIcE6lengthEPKc>
 80066ae:	4602      	mov	r2, r0
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	4413      	add	r3, r2
 80066b4:	617b      	str	r3, [r7, #20]
	_M_construct(__s, __end, forward_iterator_tag());
 80066b6:	462b      	mov	r3, r5
 80066b8:	697a      	ldr	r2, [r7, #20]
 80066ba:	68b9      	ldr	r1, [r7, #8]
 80066bc:	68f8      	ldr	r0, [r7, #12]
 80066be:	f000 f922 	bl	8006906 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
      }
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	4618      	mov	r0, r3
 80066c6:	3718      	adds	r7, #24
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bdb0      	pop	{r4, r5, r7, pc}
 80066cc:	08027dc4 	.word	0x08027dc4

080066d0 <_ZN11ArduinoJson8V730HB2212JsonDocumentixIA8_cLi0EEENS0_6detail11MemberProxyIRS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueESA_NS4_9remove_cvINS4_16remove_referenceISA_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKSA_>:
  detail::MemberProxy<JsonDocument&, detail::AdaptedString<TString>> operator[](
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b08a      	sub	sp, #40	@ 0x28
 80066d4:	af02      	add	r7, sp, #8
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 80066dc:	f107 0314 	add.w	r3, r7, #20
 80066e0:	6879      	ldr	r1, [r7, #4]
 80066e2:	4618      	mov	r0, r3
 80066e4:	f000 fb92 	bl	8006e0c <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA8_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	9300      	str	r3, [sp, #0]
 80066ec:	f107 0314 	add.w	r3, r7, #20
 80066f0:	cb0c      	ldmia	r3, {r2, r3}
 80066f2:	68b9      	ldr	r1, [r7, #8]
 80066f4:	68f8      	ldr	r0, [r7, #12]
 80066f6:	f000 fb9c 	bl	8006e32 <_ZN11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEC1ES4_S5_>
  }
 80066fa:	68f8      	ldr	r0, [r7, #12]
 80066fc:	3720      	adds	r7, #32
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}

08006702 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEcvT_INS0_9JsonArrayELi0EEEv>:
  operator T() const {
 8006702:	b580      	push	{r7, lr}
 8006704:	b082      	sub	sp, #8
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
 800670a:	6039      	str	r1, [r7, #0]
    return as<T>();
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6839      	ldr	r1, [r7, #0]
 8006710:	4618      	mov	r0, r3
 8006712:	f000 f876 	bl	8006802 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE2asINS0_9JsonArrayEEET_v>
 8006716:	bf00      	nop
  }
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	3708      	adds	r7, #8
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>:
  operator T() const {
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
    return as<T>();
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6839      	ldr	r1, [r7, #0]
 800672e:	4618      	mov	r0, r3
 8006730:	f000 fb9b 	bl	8006e6a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE2asINS0_10JsonObjectEEET_v>
 8006734:	bf00      	nop
  }
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	3708      	adds	r7, #8
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}

0800673e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 800673e:	b580      	push	{r7, lr}
 8006740:	b08c      	sub	sp, #48	@ 0x30
 8006742:	af02      	add	r7, sp, #8
 8006744:	60f8      	str	r0, [r7, #12]
 8006746:	60b9      	str	r1, [r7, #8]
 8006748:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 800674a:	68ba      	ldr	r2, [r7, #8]
 800674c:	f107 0314 	add.w	r3, r7, #20
 8006750:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006754:	e883 0003 	stmia.w	r3, {r0, r1}
 8006758:	f107 031c 	add.w	r3, r7, #28
 800675c:	6879      	ldr	r1, [r7, #4]
 800675e:	4618      	mov	r0, r3
 8006760:	f000 fba7 	bl	8006eb2 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA7_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8006764:	466a      	mov	r2, sp
 8006766:	f107 0320 	add.w	r3, r7, #32
 800676a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800676e:	e882 0003 	stmia.w	r2, {r0, r1}
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	f107 0214 	add.w	r2, r7, #20
 8006778:	ca06      	ldmia	r2, {r1, r2}
 800677a:	68f8      	ldr	r0, [r7, #12]
 800677c:	f000 f973 	bl	8006a66 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 8006780:	68f8      	ldr	r0, [r7, #12]
 8006782:	3728      	adds	r7, #40	@ 0x28
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>:
  operator T() const {
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
    return as<T>();
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 fba1 	bl	8006ed8 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIPKcEET_v>
 8006796:	4603      	mov	r3, r0
  }
 8006798:	4618      	mov	r0, r3
 800679a:	3708      	adds	r7, #8
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA10_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b08c      	sub	sp, #48	@ 0x30
 80067a4:	af02      	add	r7, sp, #8
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 80067ac:	68ba      	ldr	r2, [r7, #8]
 80067ae:	f107 0314 	add.w	r3, r7, #20
 80067b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80067b6:	e883 0003 	stmia.w	r3, {r0, r1}
 80067ba:	f107 031c 	add.w	r3, r7, #28
 80067be:	6879      	ldr	r1, [r7, #4]
 80067c0:	4618      	mov	r0, r3
 80067c2:	f000 fbab 	bl	8006f1c <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA10_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 80067c6:	466a      	mov	r2, sp
 80067c8:	f107 0320 	add.w	r3, r7, #32
 80067cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80067d0:	e882 0003 	stmia.w	r2, {r0, r1}
 80067d4:	69fb      	ldr	r3, [r7, #28]
 80067d6:	f107 0214 	add.w	r2, r7, #20
 80067da:	ca06      	ldmia	r2, {r1, r2}
 80067dc:	68f8      	ldr	r0, [r7, #12]
 80067de:	f000 f942 	bl	8006a66 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 80067e2:	68f8      	ldr	r0, [r7, #12]
 80067e4:	3728      	adds	r7, #40	@ 0x28
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}

080067ea <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ImLi0EEEv>:
  operator T() const {
 80067ea:	b580      	push	{r7, lr}
 80067ec:	b082      	sub	sp, #8
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
    return as<T>();
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 fba5 	bl	8006f42 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asImEET_v>
 80067f8:	4603      	mov	r3, r0
  }
 80067fa:	4618      	mov	r0, r3
 80067fc:	3708      	adds	r7, #8
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE2asINS0_9JsonArrayEEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 8006802:	b590      	push	{r4, r7, lr}
 8006804:	b087      	sub	sp, #28
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
 800680a:	6039      	str	r1, [r7, #0]
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	617b      	str	r3, [r7, #20]
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	613b      	str	r3, [r7, #16]
  return JsonVariant(getData(), getResourceManager());
 8006814:	6938      	ldr	r0, [r7, #16]
 8006816:	f000 ff69 	bl	80076ec <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7getDataEv>
 800681a:	4604      	mov	r4, r0
 800681c:	6938      	ldr	r0, [r7, #16]
 800681e:	f000 ff75 	bl	800770c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE18getResourceManagerEv>
 8006822:	4602      	mov	r2, r0
 8006824:	f107 0308 	add.w	r3, r7, #8
 8006828:	4621      	mov	r1, r4
 800682a:	4618      	mov	r0, r3
 800682c:	f7fd ff88 	bl	8004740 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
    return getVariant();
 8006830:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f107 0308 	add.w	r3, r7, #8
 8006838:	e893 0006 	ldmia.w	r3, {r1, r2}
 800683c:	f7fe fc6e 	bl	800511c <_ZN11ArduinoJson8V730HB229ConverterINS0_9JsonArrayEvE8fromJsonENS0_11JsonVariantE>
 8006840:	bf00      	nop
}
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	371c      	adds	r7, #28
 8006846:	46bd      	mov	sp, r7
 8006848:	bd90      	pop	{r4, r7, pc}

0800684a <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_>:
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
 800684a:	b580      	push	{r7, lr}
 800684c:	b084      	sub	sp, #16
 800684e:	af00      	add	r7, sp, #0
 8006850:	60f8      	str	r0, [r7, #12]
 8006852:	60b9      	str	r1, [r7, #8]
 8006854:	4613      	mov	r3, r2
 8006856:	71fb      	strb	r3, [r7, #7]
      __string_type __str(__lhs);
 8006858:	68b9      	ldr	r1, [r7, #8]
 800685a:	68f8      	ldr	r0, [r7, #12]
 800685c:	f01f fe49 	bl	80264f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      __str.append(__size_type(1), __rhs);
 8006860:	79fb      	ldrb	r3, [r7, #7]
 8006862:	461a      	mov	r2, r3
 8006864:	2101      	movs	r1, #1
 8006866:	68f8      	ldr	r0, [r7, #12]
 8006868:	f01f fd52 	bl	8026310 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>
      return __str;
 800686c:	bf00      	nop
    }
 800686e:	68f8      	ldr	r0, [r7, #12]
 8006870:	3710      	adds	r7, #16
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}

08006876 <_ZN11ArduinoJson8V730HB2215deserializeJsonIRNS0_12JsonDocumentEKcJELi0EEENS0_20DeserializationErrorEOT_PT0_DpOT1_>:
// Parses a JSON input, filters, and puts the result in a JsonDocument.
// https://arduinojson.org/v7/api/json/deserializejson/
template <typename TDestination, typename TChar, typename... Args,
          detail::enable_if_t<
              detail::is_deserialize_destination<TDestination>::value, int> = 0>
inline DeserializationError deserializeJson(TDestination&& dst, TChar* input,
 8006876:	b580      	push	{r7, lr}
 8006878:	b082      	sub	sp, #8
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
 800687e:	6039      	str	r1, [r7, #0]
                                            Args&&... args) {
  using namespace detail;
  return deserialize<JsonDeserializer>(detail::forward<TDestination>(dst),
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 fb80 	bl	8006f86 <_ZN11ArduinoJson8V730HB226detail7forwardIRNS0_12JsonDocumentEEEOT_RNS1_16remove_referenceIS5_E4typeE>
 8006886:	4602      	mov	r2, r0
 8006888:	463b      	mov	r3, r7
 800688a:	4619      	mov	r1, r3
 800688c:	4610      	mov	r0, r2
 800688e:	f000 fb85 	bl	8006f9c <_ZN11ArduinoJson8V730HB226detail11deserializeINS1_16JsonDeserializerERNS0_12JsonDocumentERPKcJELi0EEENS0_20DeserializationErrorEOT0_OT1_DpT2_>
 8006892:	4603      	mov	r3, r0
                                       input, detail::forward<Args>(args)...);
}
 8006894:	4618      	mov	r0, r3
 8006896:	3708      	adds	r7, #8
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>:
      eq(const char_type& __c1, const char_type& __c2)
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
      { return __c1 == __c2; }
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	781a      	ldrb	r2, [r3, #0]
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	429a      	cmp	r2, r3
 80068b0:	bf0c      	ite	eq
 80068b2:	2301      	moveq	r3, #1
 80068b4:	2300      	movne	r3, #0
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	4618      	mov	r0, r3
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC1EPS4_>:

	// Check for out_of_range and length_error exceptions.
	struct _Guard
	{
	  _GLIBCXX20_CONSTEXPR
	  explicit _Guard(basic_string* __s) : _M_guarded(__s) { }
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	683a      	ldr	r2, [r7, #0]
 80068d2:	601a      	str	r2, [r3, #0]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4618      	mov	r0, r3
 80068d8:	370c      	adds	r7, #12
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr

080068e2 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev>:

	  _GLIBCXX20_CONSTEXPR
	  ~_Guard() { if (_M_guarded) _M_guarded->_M_dispose(); }
 80068e2:	b580      	push	{r7, lr}
 80068e4:	b082      	sub	sp, #8
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d004      	beq.n	80068fc <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev+0x1a>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4618      	mov	r0, r3
 80068f8:	f01f fb60 	bl	8025fbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4618      	mov	r0, r3
 8006900:	3708      	adds	r7, #8
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
      basic_string<_CharT, _Traits, _Alloc>::
 8006906:	b580      	push	{r7, lr}
 8006908:	b088      	sub	sp, #32
 800690a:	af00      	add	r7, sp, #0
 800690c:	60f8      	str	r0, [r7, #12]
 800690e:	60b9      	str	r1, [r7, #8]
 8006910:	607a      	str	r2, [r7, #4]
 8006912:	703b      	strb	r3, [r7, #0]
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8006914:	6879      	ldr	r1, [r7, #4]
 8006916:	68b8      	ldr	r0, [r7, #8]
 8006918:	f000 fb61 	bl	8006fde <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 800691c:	4603      	mov	r3, r0
 800691e:	61bb      	str	r3, [r7, #24]
	if (__dnew > size_type(_S_local_capacity))
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	2b0f      	cmp	r3, #15
 8006924:	d911      	bls.n	800694a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>
	    _M_data(_M_create(__dnew, size_type(0)));
 8006926:	f107 0318 	add.w	r3, r7, #24
 800692a:	2200      	movs	r2, #0
 800692c:	4619      	mov	r1, r3
 800692e:	68f8      	ldr	r0, [r7, #12]
 8006930:	f01f fb22 	bl	8025f78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8006934:	4603      	mov	r3, r0
 8006936:	4619      	mov	r1, r3
 8006938:	68f8      	ldr	r0, [r7, #12]
 800693a:	f01f fb0a 	bl	8025f52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	4619      	mov	r1, r3
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	f01f fb0b 	bl	8025f5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
 8006948:	e005      	b.n	8006956 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x50>
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	61fb      	str	r3, [r7, #28]
	return _M_local_data();
 800694e:	69f8      	ldr	r0, [r7, #28]
 8006950:	f01f fb03 	bl	8025f5a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8006954:	bf00      	nop

	  basic_string* _M_guarded;
	} __guard(this);
 8006956:	f107 0314 	add.w	r3, r7, #20
 800695a:	68f9      	ldr	r1, [r7, #12]
 800695c:	4618      	mov	r0, r3
 800695e:	f7ff ffb1 	bl	80068c4 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC1EPS4_>

	this->_S_copy_chars(_M_data(), __beg, __end);
 8006962:	68f8      	ldr	r0, [r7, #12]
 8006964:	f01f faf7 	bl	8025f56 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8006968:	4603      	mov	r3, r0
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	68b9      	ldr	r1, [r7, #8]
 800696e:	4618      	mov	r0, r3
 8006970:	f01f fb84 	bl	802607c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>

	__guard._M_guarded = 0;
 8006974:	2300      	movs	r3, #0
 8006976:	617b      	str	r3, [r7, #20]

	_M_set_length(__dnew);
 8006978:	69bb      	ldr	r3, [r7, #24]
 800697a:	4619      	mov	r1, r3
 800697c:	68f8      	ldr	r0, [r7, #12]
 800697e:	f01f faf0 	bl	8025f62 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 8006982:	f107 0314 	add.w	r3, r7, #20
 8006986:	4618      	mov	r0, r3
 8006988:	f7ff ffab 	bl	80068e2 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev>
 800698c:	3720      	adds	r7, #32
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}

08006992 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7destroyEPNS0_9AllocatorE>:
    slots_ = reinterpret_cast<T*>(allocator->allocate(slotsToBytes(cap)));
    capacity_ = slots_ ? cap : 0;
    usage_ = 0;
  }

  void destroy(Allocator* allocator) {
 8006992:	b580      	push	{r7, lr}
 8006994:	b082      	sub	sp, #8
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
 800699a:	6039      	str	r1, [r7, #0]
    if (slots_)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d008      	beq.n	80069b6 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7destroyEPNS0_9AllocatorE+0x24>
      allocator->deallocate(slots_);
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	3304      	adds	r3, #4
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	6852      	ldr	r2, [r2, #4]
 80069b0:	4611      	mov	r1, r2
 80069b2:	6838      	ldr	r0, [r7, #0]
 80069b4:	4798      	blx	r3
    slots_ = nullptr;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	605a      	str	r2, [r3, #4]
    capacity_ = 0;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	801a      	strh	r2, [r3, #0]
    usage_ = 0;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	805a      	strh	r2, [r3, #2]
  }
 80069c8:	bf00      	nop
 80069ca:	3708      	adds	r7, #8
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE12slotsToBytesEt>:

  static SlotCount bytesToSlots(size_t n) {
    return static_cast<SlotCount>(n / sizeof(T));
  }

  static size_t slotsToBytes(SlotCount n) {
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	4603      	mov	r3, r0
 80069d8:	80fb      	strh	r3, [r7, #6]
    return n * sizeof(T);
 80069da:	88fb      	ldrh	r3, [r7, #6]
 80069dc:	00db      	lsls	r3, r3, #3
  }
 80069de:	4618      	mov	r0, r3
 80069e0:	370c      	adds	r7, #12
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr

080069ea <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE>:
  void shrinkToFit(Allocator* allocator) {
 80069ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069ec:	b085      	sub	sp, #20
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
 80069f2:	6039      	str	r1, [r7, #0]
        allocator->reallocate(slots_, slotsToBytes(usage_)));
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	3308      	adds	r3, #8
 80069fa:	681c      	ldr	r4, [r3, #0]
 80069fc:	683d      	ldr	r5, [r7, #0]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	685e      	ldr	r6, [r3, #4]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	885b      	ldrh	r3, [r3, #2]
 8006a06:	4618      	mov	r0, r3
 8006a08:	f7ff ffe2 	bl	80069d0 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE12slotsToBytesEt>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	461a      	mov	r2, r3
 8006a10:	4631      	mov	r1, r6
 8006a12:	4628      	mov	r0, r5
 8006a14:	47a0      	blx	r4
 8006a16:	60f8      	str	r0, [r7, #12]
    if (newSlots) {
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d006      	beq.n	8006a2c <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE+0x42>
      slots_ = newSlots;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	605a      	str	r2, [r3, #4]
      capacity_ = usage_;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	885a      	ldrh	r2, [r3, #2]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	801a      	strh	r2, [r3, #0]
  }
 8006a2c:	bf00      	nop
 8006a2e:	3714      	adds	r7, #20
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006a34 <_ZN11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataEPKS2_T_PKNS1_15ResourceManagerE>:
  template <typename TAdaptedString>
  VariantData* getMember(TAdaptedString key,
                         const ResourceManager* resources) const;

  template <typename TAdaptedString>
  static VariantData* getMember(const ObjectData* object, TAdaptedString key,
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b086      	sub	sp, #24
 8006a38:	af02      	add	r7, sp, #8
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	4638      	mov	r0, r7
 8006a3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
                                const ResourceManager* resources) {
    if (!object)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d101      	bne.n	8006a4c <_ZN11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataEPKS2_T_PKNS1_15ResourceManagerE+0x18>
      return nullptr;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	e008      	b.n	8006a5e <_ZN11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataEPKS2_T_PKNS1_15ResourceManagerE+0x2a>
    return object->getMember(key, resources);
 8006a4c:	68f8      	ldr	r0, [r7, #12]
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	9300      	str	r3, [sp, #0]
 8006a52:	463b      	mov	r3, r7
 8006a54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006a56:	f000 fad6 	bl	8007006 <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	bf00      	nop
  }
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3710      	adds	r7, #16
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}

08006a66 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>:

  template <typename>
  friend class ElementProxy;

 public:
  MemberProxy(TUpstream upstream, AdaptedString key)
 8006a66:	b082      	sub	sp, #8
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	1d38      	adds	r0, r7, #4
 8006a72:	e880 0006 	stmia.w	r0, {r1, r2}
 8006a76:	61fb      	str	r3, [r7, #28]
      : upstream_(upstream), key_(key) {}
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	3304      	adds	r3, #4
 8006a7c:	1d3a      	adds	r2, r7, #4
 8006a7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006a82:	e883 0003 	stmia.w	r3, {r0, r1}
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	330c      	adds	r3, #12
 8006a8a:	f107 021c 	add.w	r2, r7, #28
 8006a8e:	ca07      	ldmia	r2, {r0, r1, r2}
 8006a90:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	4618      	mov	r0, r3
 8006a98:	3714      	adds	r7, #20
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	b002      	add	sp, #8
 8006aa2:	4770      	bx	lr

08006aa4 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromFreeListEv>:

 private:
  Slot<T> allocFromFreeList() {
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(freeList_ != NULL_SLOT);
    auto id = freeList_;
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ab2:	81fb      	strh	r3, [r7, #14]
    auto slot = getSlot(freeList_);
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ab8:	4619      	mov	r1, r3
 8006aba:	6838      	ldr	r0, [r7, #0]
 8006abc:	f7ff fcb0 	bl	8006420 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt>
 8006ac0:	60b8      	str	r0, [r7, #8]
    freeList_ = reinterpret_cast<FreeSlot*>(slot)->next;
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	881a      	ldrh	r2, [r3, #0]
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	851a      	strh	r2, [r3, #40]	@ 0x28
    return {slot, id};
 8006aca:	89fb      	ldrh	r3, [r7, #14]
 8006acc:	461a      	mov	r2, r3
 8006ace:	68b9      	ldr	r1, [r7, #8]
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f7ff fc75 	bl	80063c0 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
  }
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	3710      	adds	r7, #16
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}

08006ade <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv>:

  Slot<T> allocFromLastPool() {
 8006ade:	b5b0      	push	{r4, r5, r7, lr}
 8006ae0:	b086      	sub	sp, #24
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
 8006ae6:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(count_ > 0);
    auto poolIndex = SlotId(count_ - 1);
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006aec:	3b01      	subs	r3, #1
 8006aee:	82fb      	strh	r3, [r7, #22]
    auto slot = pools_[poolIndex].allocSlot();
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	6a1a      	ldr	r2, [r3, #32]
 8006af4:	8afb      	ldrh	r3, [r7, #22]
 8006af6:	00db      	lsls	r3, r3, #3
 8006af8:	441a      	add	r2, r3
 8006afa:	f107 030c 	add.w	r3, r7, #12
 8006afe:	4611      	mov	r1, r2
 8006b00:	4618      	mov	r0, r3
 8006b02:	f000 faad 	bl	8007060 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv>
    if (!slot)
 8006b06:	f107 030c 	add.w	r3, r7, #12
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f7ff fc22 	bl	8006354 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>
 8006b10:	4603      	mov	r3, r0
 8006b12:	f083 0301 	eor.w	r3, r3, #1
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d003      	beq.n	8006b24 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv+0x46>
      return {};
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 f857 	bl	8006bd0 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>
 8006b22:	e015      	b.n	8006b50 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv+0x72>
    return {slot.ptr(),
            SlotId(poolIndex * ARDUINOJSON_POOL_CAPACITY + slot.id())};
 8006b24:	f107 030c 	add.w	r3, r7, #12
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f000 f863 	bl	8006bf4 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE3ptrEv>
 8006b2e:	4605      	mov	r5, r0
 8006b30:	8afb      	ldrh	r3, [r7, #22]
 8006b32:	01db      	lsls	r3, r3, #7
 8006b34:	b29c      	uxth	r4, r3
 8006b36:	f107 030c 	add.w	r3, r7, #12
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f7ff fc27 	bl	800638e <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>
 8006b40:	4603      	mov	r3, r0
 8006b42:	4423      	add	r3, r4
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	461a      	mov	r2, r3
 8006b48:	4629      	mov	r1, r5
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f7ff fc38 	bl	80063c0 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
  }
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	3718      	adds	r7, #24
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bdb0      	pop	{r4, r5, r7, pc}

08006b58 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE>:

  Pool* addPool(Allocator* allocator) {
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
    if (count_ == capacity_ && !increaseCapacity(allocator))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d10b      	bne.n	8006b86 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x2e>
 8006b6e:	6839      	ldr	r1, [r7, #0]
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 faa1 	bl	80070b8 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE>
 8006b76:	4603      	mov	r3, r0
 8006b78:	f083 0301 	eor.w	r3, r3, #1
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d001      	beq.n	8006b86 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x2e>
 8006b82:	2301      	movs	r3, #1
 8006b84:	e000      	b.n	8006b88 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x30>
 8006b86:	2300      	movs	r3, #0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d001      	beq.n	8006b90 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x38>
      return nullptr;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	e01b      	b.n	8006bc8 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x70>
    auto pool = &pools_[count_++];
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6a1a      	ldr	r2, [r3, #32]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006b98:	1c59      	adds	r1, r3, #1
 8006b9a:	b288      	uxth	r0, r1
 8006b9c:	6879      	ldr	r1, [r7, #4]
 8006b9e:	8488      	strh	r0, [r1, #36]	@ 0x24
 8006ba0:	00db      	lsls	r3, r3, #3
 8006ba2:	4413      	add	r3, r2
 8006ba4:	60bb      	str	r3, [r7, #8]
    SlotCount poolCapacity = ARDUINOJSON_POOL_CAPACITY;
 8006ba6:	2380      	movs	r3, #128	@ 0x80
 8006ba8:	81fb      	strh	r3, [r7, #14]
    if (count_ == maxPools)  // last pool is smaller because of NULL_SLOT
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006bae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bb2:	d102      	bne.n	8006bba <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x62>
      poolCapacity--;
 8006bb4:	89fb      	ldrh	r3, [r7, #14]
 8006bb6:	3b01      	subs	r3, #1
 8006bb8:	81fb      	strh	r3, [r7, #14]
    pool->create(poolCapacity, allocator);
 8006bba:	89fb      	ldrh	r3, [r7, #14]
 8006bbc:	683a      	ldr	r2, [r7, #0]
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	68b8      	ldr	r0, [r7, #8]
 8006bc2:	f000 fabe 	bl	8007142 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE6createEtPNS0_9AllocatorE>
    return pool;
 8006bc6:	68bb      	ldr	r3, [r7, #8]
  }
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3710      	adds	r7, #16
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>:
  Slot() : ptr_(nullptr), id_(NULL_SLOT) {}
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	601a      	str	r2, [r3, #0]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006be4:	809a      	strh	r2, [r3, #4]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4618      	mov	r0, r3
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE3ptrEv>:
  T* ptr() const {
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
    return ptr_;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
  }
 8006c00:	4618      	mov	r0, r3
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <_ZNK11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7getSlotEt>:
  T* getSlot(SlotId id) const {
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	460b      	mov	r3, r1
 8006c16:	807b      	strh	r3, [r7, #2]
    return slots_ + id;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	685a      	ldr	r2, [r3, #4]
 8006c1c:	887b      	ldrh	r3, [r7, #2]
 8006c1e:	00db      	lsls	r3, r3, #3
 8006c20:	4413      	add	r3, r2
  }
 8006c22:	4618      	mov	r0, r3
 8006c24:	370c      	adds	r7, #12
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr
	...

08006c30 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>:
  static pgm_ptr<T> positiveBinaryPowersOfTen() {
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 8006c36:	1d3b      	adds	r3, r7, #4
 8006c38:	4904      	ldr	r1, [pc, #16]	@ (8006c4c <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv+0x1c>)
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f000 faa7 	bl	800718e <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIdEC1EPKd>
 8006c40:	687b      	ldr	r3, [r7, #4]
  }
 8006c42:	4618      	mov	r0, r3
 8006c44:	3708      	adds	r7, #8
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	080288b0 	.word	0x080288b0

08006c50 <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIdEixEi>:
template <typename T>
class pgm_ptr {
 public:
  explicit pgm_ptr(const T* ptr) : ptr_(ptr) {}

  T operator[](intptr_t index) const {
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b082      	sub	sp, #8
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
    return pgm_read(ptr_ + index);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	00db      	lsls	r3, r3, #3
 8006c62:	4413      	add	r3, r2
 8006c64:	4618      	mov	r0, r3
 8006c66:	f000 faa1 	bl	80071ac <_ZN11ArduinoJson8V730HB226detail8pgm_readIdEET_PKS3_>
 8006c6a:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8006c6e:	eeb0 0b47 	vmov.f64	d0, d7
 8006c72:	3708      	adds	r7, #8
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>:
  static pgm_ptr<T> negativeBinaryPowersOfTen() {
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 8006c7e:	1d3b      	adds	r3, r7, #4
 8006c80:	4904      	ldr	r1, [pc, #16]	@ (8006c94 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv+0x1c>)
 8006c82:	4618      	mov	r0, r3
 8006c84:	f000 fa83 	bl	800718e <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIdEC1EPKd>
 8006c88:	687b      	ldr	r3, [r7, #4]
  }
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3708      	adds	r7, #8
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	080288f8 	.word	0x080288f8

08006c98 <_ZN11ArduinoJson8V730HB226detail18SizedStringAdapterIPcvE5adaptEPKcj>:

template <typename TChar>
struct SizedStringAdapter<TChar*, enable_if_t<IsChar<TChar>::value>> {
  using AdaptedString = RamString;

  static AdaptedString adapt(const TChar* p, size_t n) {
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	607a      	str	r2, [r7, #4]
    return AdaptedString(reinterpret_cast<const char*>(p), n);
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	68b9      	ldr	r1, [r7, #8]
 8006caa:	68f8      	ldr	r0, [r7, #12]
 8006cac:	f7fd f956 	bl	8003f5c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 8006cb0:	68f8      	ldr	r0, [r7, #12]
 8006cb2:	3710      	adds	r7, #16
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_>:
  StringNode* get(const TAdaptedString& str) const {
 8006cb8:	b590      	push	{r4, r7, lr}
 8006cba:	b089      	sub	sp, #36	@ 0x24
 8006cbc:	af02      	add	r7, sp, #8
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
    for (auto node = strings_; node; node = node->next) {
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	617b      	str	r3, [r7, #20]
 8006cc8:	e01e      	b.n	8006d08 <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_+0x50>
      if (stringEquals(str, adaptString(node->data, node->length)))
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	f103 0108 	add.w	r1, r3, #8
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	88db      	ldrh	r3, [r3, #6]
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	f107 0308 	add.w	r3, r7, #8
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f7ff fbea 	bl	80064b4 <_ZN11ArduinoJson8V730HB226detail11adaptStringIcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIPT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringES7_j>
 8006ce0:	683a      	ldr	r2, [r7, #0]
 8006ce2:	466c      	mov	r4, sp
 8006ce4:	f107 030c 	add.w	r3, r7, #12
 8006ce8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006cec:	e884 0003 	stmia.w	r4, {r0, r1}
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	ca07      	ldmia	r2, {r0, r1, r2}
 8006cf4:	f000 fa6a 	bl	80071cc <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d001      	beq.n	8006d02 <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_+0x4a>
        return node;
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	e006      	b.n	8006d10 <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_+0x58>
    for (auto node = strings_; node; node = node->next) {
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	617b      	str	r3, [r7, #20]
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d1dd      	bne.n	8006cca <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_+0x12>
    return nullptr;
 8006d0e:	2300      	movs	r3, #0
  }
 8006d10:	4618      	mov	r0, r3
 8006d12:	371c      	adds	r7, #28
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd90      	pop	{r4, r7, pc}

08006d18 <_ZN11ArduinoJson8V730HB226detail7forwardIRPKcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

using nullptr_t = decltype(nullptr);

template <class T>
T&& forward(remove_reference_t<T>& t) noexcept {
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8006d20:	687b      	ldr	r3, [r7, #4]
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	370c      	adds	r7, #12
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr

08006d2e <_ZN11ArduinoJson8V730HB226detail7forwardIRNS0_10JsonStringEEEOT_RNS1_16remove_referenceIS5_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8006d2e:	b480      	push	{r7}
 8006d30:	b083      	sub	sp, #12
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8006d36:	687b      	ldr	r3, [r7, #4]
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	370c      	adds	r7, #12
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 fa7f 	bl	8007250 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7derivedEv>
 8006d52:	4603      	mov	r3, r0
 8006d54:	4618      	mov	r0, r3
 8006d56:	f000 fa86 	bl	8007266 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 8006d5a:	4603      	mov	r3, r0
  }
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3708      	adds	r7, #8
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7getDataEv>:
  VariantData* getData() const {
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 fa6f 	bl	8007250 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7derivedEv>
 8006d72:	4603      	mov	r3, r0
 8006d74:	4618      	mov	r0, r3
 8006d76:	f000 fa82 	bl	800727e <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 8006d7a:	4603      	mov	r3, r0
  }
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3708      	adds	r7, #8
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE5forgeEy>:
  static T forge(uint64_t bits) {
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b082      	sub	sp, #8
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	e9c7 0100 	strd	r0, r1, [r7]
    return alias_cast<T>(bits);
 8006d8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d92:	f000 fa80 	bl	8007296 <_ZN11ArduinoJson8V730HB226detail10alias_castIdyEET_T0_>
 8006d96:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8006d9a:	eeb0 0b47 	vmov.f64	d0, d7
 8006d9e:	3708      	adds	r7, #8
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25positiveBinaryPowersOfTenEv>:
  static pgm_ptr<T> positiveBinaryPowersOfTen() {
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 8006daa:	1d3b      	adds	r3, r7, #4
 8006dac:	4904      	ldr	r1, [pc, #16]	@ (8006dc0 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25positiveBinaryPowersOfTenEv+0x1c>)
 8006dae:	4618      	mov	r0, r3
 8006db0:	f000 fa85 	bl	80072be <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIfEC1EPKf>
 8006db4:	687b      	ldr	r3, [r7, #4]
  }
 8006db6:	4618      	mov	r0, r3
 8006db8:	3708      	adds	r7, #8
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	08028940 	.word	0x08028940

08006dc4 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25negativeBinaryPowersOfTenEv>:
  static pgm_ptr<T> negativeBinaryPowersOfTen() {
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 8006dca:	1d3b      	adds	r3, r7, #4
 8006dcc:	4904      	ldr	r1, [pc, #16]	@ (8006de0 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25negativeBinaryPowersOfTenEv+0x1c>)
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f000 fa75 	bl	80072be <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIfEC1EPKf>
 8006dd4:	687b      	ldr	r3, [r7, #4]
  }
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3708      	adds	r7, #8
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	08028958 	.word	0x08028958

08006de4 <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIfEixEi>:
  T operator[](intptr_t index) const {
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b082      	sub	sp, #8
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
    return pgm_read(ptr_ + index);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	4413      	add	r3, r2
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f000 fa6f 	bl	80072dc <_ZN11ArduinoJson8V730HB226detail8pgm_readIfEET_PKS3_>
 8006dfe:	eef0 7a40 	vmov.f32	s15, s0
  }
 8006e02:	eeb0 0a67 	vmov.f32	s0, s15
 8006e06:	3708      	adds	r7, #8
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA8_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8006e16:	6838      	ldr	r0, [r7, #0]
 8006e18:	f000 fa6f 	bl	80072fa <_ZN11ArduinoJson8V730HB226detail7forwardIRA8_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4611      	mov	r1, r2
 8006e22:	4618      	mov	r0, r3
 8006e24:	f000 fa74 	bl	8007310 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA8_KcvE5adaptES5_>
 8006e28:	bf00      	nop
}
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	3708      	adds	r7, #8
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <_ZN11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEC1ES4_S5_>:
  MemberProxy(TUpstream upstream, AdaptedString key)
 8006e32:	b082      	sub	sp, #8
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
 8006e3e:	f107 0110 	add.w	r1, r7, #16
 8006e42:	e881 000c 	stmia.w	r1, {r2, r3}
      : upstream_(upstream), key_(key) {}
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	683a      	ldr	r2, [r7, #0]
 8006e4a:	601a      	str	r2, [r3, #0]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	3304      	adds	r3, #4
 8006e50:	f107 0210 	add.w	r2, r7, #16
 8006e54:	ca07      	ldmia	r2, {r0, r1, r2}
 8006e56:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	b002      	add	sp, #8
 8006e68:	4770      	bx	lr

08006e6a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE2asINS0_10JsonObjectEEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 8006e6a:	b590      	push	{r4, r7, lr}
 8006e6c:	b087      	sub	sp, #28
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
 8006e72:	6039      	str	r1, [r7, #0]
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	617b      	str	r3, [r7, #20]
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	613b      	str	r3, [r7, #16]
  return JsonVariant(getData(), getResourceManager());
 8006e7c:	6938      	ldr	r0, [r7, #16]
 8006e7e:	f7ff ff71 	bl	8006d64 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7getDataEv>
 8006e82:	4604      	mov	r4, r0
 8006e84:	6938      	ldr	r0, [r7, #16]
 8006e86:	f7ff ff5d 	bl	8006d44 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE18getResourceManagerEv>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	f107 0308 	add.w	r3, r7, #8
 8006e90:	4621      	mov	r1, r4
 8006e92:	4618      	mov	r0, r3
 8006e94:	f7fd fc54 	bl	8004740 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
    return getVariant();
 8006e98:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f107 0308 	add.w	r3, r7, #8
 8006ea0:	e893 0006 	ldmia.w	r3, {r1, r2}
 8006ea4:	f7fe f95d 	bl	8005162 <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonObjectEvE8fromJsonENS0_11JsonVariantE>
 8006ea8:	bf00      	nop
}
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	371c      	adds	r7, #28
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd90      	pop	{r4, r7, pc}

08006eb2 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA7_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b082      	sub	sp, #8
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
 8006eba:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8006ebc:	6838      	ldr	r0, [r7, #0]
 8006ebe:	f000 fa36 	bl	800732e <_ZN11ArduinoJson8V730HB226detail7forwardIRA7_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	4611      	mov	r1, r2
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f000 fa3b 	bl	8007344 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA7_KcvE5adaptES5_>
 8006ece:	bf00      	nop
}
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	3708      	adds	r7, #8
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIPKcEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 8006ed8:	b590      	push	{r4, r7, lr}
 8006eda:	b087      	sub	sp, #28
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	617b      	str	r3, [r7, #20]
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 8006ee8:	6938      	ldr	r0, [r7, #16]
 8006eea:	f000 fcce 	bl	800788a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 8006eee:	4604      	mov	r4, r0
 8006ef0:	6938      	ldr	r0, [r7, #16]
 8006ef2:	f000 fb58 	bl	80075a6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	f107 0308 	add.w	r3, r7, #8
 8006efc:	4621      	mov	r1, r4
 8006efe:	4618      	mov	r0, r3
 8006f00:	f7fd fbf3 	bl	80046ea <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 8006f04:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 8006f06:	f107 0308 	add.w	r3, r7, #8
 8006f0a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006f0e:	f7fe f8e5 	bl	80050dc <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE>
 8006f12:	4603      	mov	r3, r0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	371c      	adds	r7, #28
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd90      	pop	{r4, r7, pc}

08006f1c <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA10_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8006f26:	6838      	ldr	r0, [r7, #0]
 8006f28:	f000 fa1b 	bl	8007362 <_ZN11ArduinoJson8V730HB226detail7forwardIRA10_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4611      	mov	r1, r2
 8006f32:	4618      	mov	r0, r3
 8006f34:	f000 fa20 	bl	8007378 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA10_KcvE5adaptES5_>
 8006f38:	bf00      	nop
}
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	3708      	adds	r7, #8
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asImEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 8006f42:	b590      	push	{r4, r7, lr}
 8006f44:	b087      	sub	sp, #28
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	617b      	str	r3, [r7, #20]
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 8006f52:	6938      	ldr	r0, [r7, #16]
 8006f54:	f000 fc99 	bl	800788a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 8006f58:	4604      	mov	r4, r0
 8006f5a:	6938      	ldr	r0, [r7, #16]
 8006f5c:	f000 fb23 	bl	80075a6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 8006f60:	4602      	mov	r2, r0
 8006f62:	f107 0308 	add.w	r3, r7, #8
 8006f66:	4621      	mov	r1, r4
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f7fd fbbe 	bl	80046ea <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 8006f6e:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 8006f70:	f107 0308 	add.w	r3, r7, #8
 8006f74:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006f78:	f000 fa0d 	bl	8007396 <_ZN11ArduinoJson8V730HB229ConverterImvE8fromJsonENS0_16JsonVariantConstE>
 8006f7c:	4603      	mov	r3, r0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	371c      	adds	r7, #28
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd90      	pop	{r4, r7, pc}

08006f86 <_ZN11ArduinoJson8V730HB226detail7forwardIRNS0_12JsonDocumentEEEOT_RNS1_16remove_referenceIS5_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8006f86:	b480      	push	{r7}
 8006f88:	b083      	sub	sp, #12
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8006f8e:	687b      	ldr	r3, [r7, #4]
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	370c      	adds	r7, #12
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <_ZN11ArduinoJson8V730HB226detail11deserializeINS1_16JsonDeserializerERNS0_12JsonDocumentERPKcJELi0EEENS0_20DeserializationErrorEOT0_OT1_DpT2_>:
template <
    template <typename> class TDeserializer, typename TDestination,
    typename TStream, typename... Args,
    enable_if_t<  // issue #1897
        !is_integral<typename first_or_void<Args...>::type>::value, int> = 0>
DeserializationError deserialize(TDestination&& dst, TStream&& input,
 8006f9c:	b590      	push	{r4, r7, lr}
 8006f9e:	b085      	sub	sp, #20
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
                                 Args... args) {
  return doDeserialize<TDeserializer>(
 8006fa6:	6838      	ldr	r0, [r7, #0]
 8006fa8:	f7ff feb6 	bl	8006d18 <_ZN11ArduinoJson8V730HB226detail7forwardIRPKcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8006fac:	4603      	mov	r3, r0
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f000 fa0f 	bl	80073d2 <_ZN11ArduinoJson8V730HB226detail10makeReaderIRPKcEENS1_6ReaderINS1_16remove_referenceIT_E4typeEvEEOS8_>
 8006fb4:	4604      	mov	r4, r0
 8006fb6:	f107 0308 	add.w	r3, r7, #8
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f7fe f9a0 	bl	8005300 <_ZN11ArduinoJson8V730HB2221DeserializationOption12NestingLimitC1Ev>
 8006fc0:	7a38      	ldrb	r0, [r7, #8]
 8006fc2:	f7fe f9df 	bl	8005384 <_ZN11ArduinoJson8V730HB226detail26makeDeserializationOptionsENS0_21DeserializationOption12NestingLimitE>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	81bb      	strh	r3, [r7, #12]
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	4621      	mov	r1, r4
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 fa20 	bl	8007414 <_ZN11ArduinoJson8V730HB226detail13doDeserializeINS1_16JsonDeserializerERNS0_12JsonDocumentENS1_6ReaderIPKcvEENS1_22DeserializationOptionsINS1_14AllowAllFilterEEEEENS0_20DeserializationErrorEOT0_T1_T2_>
 8006fd4:	4603      	mov	r3, r0
      dst, makeReader(detail::forward<TStream>(input)),
      makeDeserializationOptions(args...));
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3714      	adds	r7, #20
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd90      	pop	{r4, r7, pc}

08006fde <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
  */
  template<typename _InputIterator>
    _GLIBCXX_NODISCARD
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8006fde:	b5b0      	push	{r4, r5, r7, lr}
 8006fe0:	b082      	sub	sp, #8
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
 8006fe6:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8006fe8:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8006fea:	1d3b      	adds	r3, r7, #4
 8006fec:	4618      	mov	r0, r3
 8006fee:	f000 fa4a 	bl	8007486 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 8006ff2:	462a      	mov	r2, r5
 8006ff4:	6839      	ldr	r1, [r7, #0]
 8006ff6:	4620      	mov	r0, r4
 8006ff8:	f000 fa4f 	bl	800749a <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 8006ffc:	4603      	mov	r3, r0
    }
 8006ffe:	4618      	mov	r0, r3
 8007000:	3708      	adds	r7, #8
 8007002:	46bd      	mov	sp, r7
 8007004:	bdb0      	pop	{r4, r5, r7, pc}

08007006 <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE>:
#include <ArduinoJson/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TAdaptedString>
inline VariantData* ObjectData::getMember(
 8007006:	b580      	push	{r7, lr}
 8007008:	b088      	sub	sp, #32
 800700a:	af02      	add	r7, sp, #8
 800700c:	60f8      	str	r0, [r7, #12]
 800700e:	4638      	mov	r0, r7
 8007010:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    TAdaptedString key, const ResourceManager* resources) const {
  auto it = findKey(key, resources);
 8007014:	f107 0010 	add.w	r0, r7, #16
 8007018:	6a3b      	ldr	r3, [r7, #32]
 800701a:	9301      	str	r3, [sp, #4]
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	9300      	str	r3, [sp, #0]
 8007020:	463b      	mov	r3, r7
 8007022:	cb0c      	ldmia	r3, {r2, r3}
 8007024:	68f9      	ldr	r1, [r7, #12]
 8007026:	f000 fa47 	bl	80074b8 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE>
  if (it.done())
 800702a:	f107 0310 	add.w	r3, r7, #16
 800702e:	4618      	mov	r0, r3
 8007030:	f7fd f892 	bl	8004158 <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 8007034:	4603      	mov	r3, r0
 8007036:	2b00      	cmp	r3, #0
 8007038:	d001      	beq.n	800703e <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE+0x38>
    return nullptr;
 800703a:	2300      	movs	r3, #0
 800703c:	e00c      	b.n	8007058 <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE+0x52>
  it.next(resources);
 800703e:	f107 0310 	add.w	r3, r7, #16
 8007042:	6a39      	ldr	r1, [r7, #32]
 8007044:	4618      	mov	r0, r3
 8007046:	f7fd fd46 	bl	8004ad6 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
  return it.data();
 800704a:	f107 0310 	add.w	r3, r7, #16
 800704e:	4618      	mov	r0, r3
 8007050:	f7fd f8b3 	bl	80041ba <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 8007054:	4603      	mov	r3, r0
 8007056:	bf00      	nop
}
 8007058:	4618      	mov	r0, r3
 800705a:	3718      	adds	r7, #24
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv>:
  Slot<T> allocSlot() {
 8007060:	b580      	push	{r7, lr}
 8007062:	b084      	sub	sp, #16
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
    if (!slots_)
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d103      	bne.n	800707a <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv+0x1a>
      return {};
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f7ff fdac 	bl	8006bd0 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>
 8007078:	e01a      	b.n	80070b0 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv+0x50>
    if (usage_ >= capacity_)
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	885a      	ldrh	r2, [r3, #2]
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	881b      	ldrh	r3, [r3, #0]
 8007082:	429a      	cmp	r2, r3
 8007084:	d303      	bcc.n	800708e <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv+0x2e>
      return {};
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f7ff fda2 	bl	8006bd0 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>
 800708c:	e010      	b.n	80070b0 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv+0x50>
    auto index = usage_++;
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	885b      	ldrh	r3, [r3, #2]
 8007092:	1c5a      	adds	r2, r3, #1
 8007094:	b291      	uxth	r1, r2
 8007096:	683a      	ldr	r2, [r7, #0]
 8007098:	8051      	strh	r1, [r2, #2]
 800709a:	81fb      	strh	r3, [r7, #14]
    return {slots_ + index, SlotId(index)};
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	685a      	ldr	r2, [r3, #4]
 80070a0:	89fb      	ldrh	r3, [r7, #14]
 80070a2:	00db      	lsls	r3, r3, #3
 80070a4:	4413      	add	r3, r2
 80070a6:	89fa      	ldrh	r2, [r7, #14]
 80070a8:	4619      	mov	r1, r3
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f7ff f988 	bl	80063c0 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
  }
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	3710      	adds	r7, #16
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE>:

  bool increaseCapacity(Allocator* allocator) {
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
    if (capacity_ == maxPools)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80070c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070ca:	d101      	bne.n	80070d0 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x18>
      return false;
 80070cc:	2300      	movs	r3, #0
 80070ce:	e034      	b.n	800713a <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x82>
    void* newPools;
    auto newCapacity = PoolCount(capacity_ * 2);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80070d4:	005b      	lsls	r3, r3, #1
 80070d6:	817b      	strh	r3, [r7, #10]

    if (pools_ == preallocatedPools_) {
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6a1a      	ldr	r2, [r3, #32]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	429a      	cmp	r2, r3
 80070e0:	d114      	bne.n	800710c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x54>
      newPools = allocator->allocate(newCapacity * sizeof(Pool));
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	897a      	ldrh	r2, [r7, #10]
 80070ea:	00d2      	lsls	r2, r2, #3
 80070ec:	4611      	mov	r1, r2
 80070ee:	6838      	ldr	r0, [r7, #0]
 80070f0:	4798      	blx	r3
 80070f2:	60f8      	str	r0, [r7, #12]
      if (!newPools)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d101      	bne.n	80070fe <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x46>
        return false;
 80070fa:	2300      	movs	r3, #0
 80070fc:	e01d      	b.n	800713a <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x82>
      memcpy(newPools, preallocatedPools_, sizeof(preallocatedPools_));
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2220      	movs	r2, #32
 8007102:	4619      	mov	r1, r3
 8007104:	68f8      	ldr	r0, [r7, #12]
 8007106:	f01f ffdc 	bl	80270c2 <memcpy>
 800710a:	e00f      	b.n	800712c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x74>
    } else {
      newPools = allocator->reallocate(pools_, newCapacity * sizeof(Pool));
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	3308      	adds	r3, #8
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	6a11      	ldr	r1, [r2, #32]
 8007118:	897a      	ldrh	r2, [r7, #10]
 800711a:	00d2      	lsls	r2, r2, #3
 800711c:	6838      	ldr	r0, [r7, #0]
 800711e:	4798      	blx	r3
 8007120:	60f8      	str	r0, [r7, #12]
      if (!newPools)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d101      	bne.n	800712c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x74>
        return false;
 8007128:	2300      	movs	r3, #0
 800712a:	e006      	b.n	800713a <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x82>
    }

    pools_ = static_cast<Pool*>(newPools);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	68fa      	ldr	r2, [r7, #12]
 8007130:	621a      	str	r2, [r3, #32]
    capacity_ = newCapacity;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	897a      	ldrh	r2, [r7, #10]
 8007136:	84da      	strh	r2, [r3, #38]	@ 0x26
    return true;
 8007138:	2301      	movs	r3, #1
  }
 800713a:	4618      	mov	r0, r3
 800713c:	3710      	adds	r7, #16
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}

08007142 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE6createEtPNS0_9AllocatorE>:
  void create(SlotCount cap, Allocator* allocator) {
 8007142:	b5b0      	push	{r4, r5, r7, lr}
 8007144:	b084      	sub	sp, #16
 8007146:	af00      	add	r7, sp, #0
 8007148:	60f8      	str	r0, [r7, #12]
 800714a:	460b      	mov	r3, r1
 800714c:	607a      	str	r2, [r7, #4]
 800714e:	817b      	strh	r3, [r7, #10]
    slots_ = reinterpret_cast<T*>(allocator->allocate(slotsToBytes(cap)));
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	681c      	ldr	r4, [r3, #0]
 8007156:	687d      	ldr	r5, [r7, #4]
 8007158:	897b      	ldrh	r3, [r7, #10]
 800715a:	4618      	mov	r0, r3
 800715c:	f7ff fc38 	bl	80069d0 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE12slotsToBytesEt>
 8007160:	4603      	mov	r3, r0
 8007162:	4619      	mov	r1, r3
 8007164:	4628      	mov	r0, r5
 8007166:	47a0      	blx	r4
 8007168:	4602      	mov	r2, r0
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	605a      	str	r2, [r3, #4]
    capacity_ = slots_ ? cap : 0;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d001      	beq.n	800717a <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE6createEtPNS0_9AllocatorE+0x38>
 8007176:	897a      	ldrh	r2, [r7, #10]
 8007178:	e000      	b.n	800717c <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE6createEtPNS0_9AllocatorE+0x3a>
 800717a:	2200      	movs	r2, #0
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	801a      	strh	r2, [r3, #0]
    usage_ = 0;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2200      	movs	r2, #0
 8007184:	805a      	strh	r2, [r3, #2]
  }
 8007186:	bf00      	nop
 8007188:	3710      	adds	r7, #16
 800718a:	46bd      	mov	sp, r7
 800718c:	bdb0      	pop	{r4, r5, r7, pc}

0800718e <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIdEC1EPKd>:
  explicit pgm_ptr(const T* ptr) : ptr_(ptr) {}
 800718e:	b480      	push	{r7}
 8007190:	b083      	sub	sp, #12
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
 8007196:	6039      	str	r1, [r7, #0]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	683a      	ldr	r2, [r7, #0]
 800719c:	601a      	str	r2, [r3, #0]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4618      	mov	r0, r3
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <_ZN11ArduinoJson8V730HB226detail8pgm_readIdEET_PKS3_>:
inline T pgm_read(const T* p) {
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  return *p;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ba:	ec43 2b17 	vmov	d7, r2, r3
}
 80071be:	eeb0 0b47 	vmov.f64	d0, d7
 80071c2:	370c      	adds	r7, #12
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr

080071cc <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>:
  return -stringCompare(s2, s1);
}

template <typename TAdaptedString1, typename TAdaptedString2>
enable_if_t<TAdaptedString1::typeSortKey <= TAdaptedString2::typeSortKey, bool>
stringEquals(TAdaptedString1 s1, TAdaptedString2 s2) {
 80071cc:	b082      	sub	sp, #8
 80071ce:	b590      	push	{r4, r7, lr}
 80071d0:	b089      	sub	sp, #36	@ 0x24
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	1d3c      	adds	r4, r7, #4
 80071d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80071da:	637b      	str	r3, [r7, #52]	@ 0x34
  ARDUINOJSON_ASSERT(!s1.isNull());
  ARDUINOJSON_ASSERT(!s2.isNull());
  size_t size1 = s1.size();
 80071dc:	1d3b      	adds	r3, r7, #4
 80071de:	4618      	mov	r0, r3
 80071e0:	f7fc fee4 	bl	8003fac <_ZNK11ArduinoJson8V730HB226detail9RamString4sizeEv>
 80071e4:	61b8      	str	r0, [r7, #24]
  size_t size2 = s2.size();
 80071e6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7fc fede 	bl	8003fac <_ZNK11ArduinoJson8V730HB226detail9RamString4sizeEv>
 80071f0:	6178      	str	r0, [r7, #20]
  if (size1 != size2)
 80071f2:	69ba      	ldr	r2, [r7, #24]
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d001      	beq.n	80071fe <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x32>
    return false;
 80071fa:	2300      	movs	r3, #0
 80071fc:	e021      	b.n	8007242 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x76>
  for (size_t i = 0; i < size1; i++) {
 80071fe:	2300      	movs	r3, #0
 8007200:	61fb      	str	r3, [r7, #28]
 8007202:	e019      	b.n	8007238 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x6c>
    if (s1[i] != s2[i])
 8007204:	1d3b      	adds	r3, r7, #4
 8007206:	69f9      	ldr	r1, [r7, #28]
 8007208:	4618      	mov	r0, r3
 800720a:	f7f9 fd7d 	bl	8000d08 <_ZNK11ArduinoJson8V730HB226detail9RamStringixEj>
 800720e:	4603      	mov	r3, r0
 8007210:	461c      	mov	r4, r3
 8007212:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8007216:	69f9      	ldr	r1, [r7, #28]
 8007218:	4618      	mov	r0, r3
 800721a:	f7f9 fd75 	bl	8000d08 <_ZNK11ArduinoJson8V730HB226detail9RamStringixEj>
 800721e:	4603      	mov	r3, r0
 8007220:	429c      	cmp	r4, r3
 8007222:	bf14      	ite	ne
 8007224:	2301      	movne	r3, #1
 8007226:	2300      	moveq	r3, #0
 8007228:	b2db      	uxtb	r3, r3
 800722a:	2b00      	cmp	r3, #0
 800722c:	d001      	beq.n	8007232 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x66>
      return false;
 800722e:	2300      	movs	r3, #0
 8007230:	e007      	b.n	8007242 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x76>
  for (size_t i = 0; i < size1; i++) {
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	3301      	adds	r3, #1
 8007236:	61fb      	str	r3, [r7, #28]
 8007238:	69fa      	ldr	r2, [r7, #28]
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	429a      	cmp	r2, r3
 800723e:	d3e1      	bcc.n	8007204 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x38>
  }
  return true;
 8007240:	2301      	movs	r3, #1
}
 8007242:	4618      	mov	r0, r3
 8007244:	3724      	adds	r7, #36	@ 0x24
 8007246:	46bd      	mov	sp, r7
 8007248:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800724c:	b002      	add	sp, #8
 800724e:	4770      	bx	lr

08007250 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7derivedEv>:
  const TDerived& derived() const {
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 8007258:	687b      	ldr	r3, [r7, #4]
  }
 800725a:	4618      	mov	r0, r3
 800725c:	370c      	adds	r7, #12
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr

08007266 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8007266:	b580      	push	{r7, lr}
 8007268:	b082      	sub	sp, #8
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f7fd fa79 	bl	8004766 <_ZNK11ArduinoJson8V730HB2211JsonVariant18getResourceManagerEv>
 8007274:	4603      	mov	r3, r0
  }
 8007276:	4618      	mov	r0, r3
 8007278:	3708      	adds	r7, #8
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}

0800727e <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 800727e:	b580      	push	{r7, lr}
 8007280:	b082      	sub	sp, #8
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
    return client.getData();
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f7fd fa79 	bl	800477e <_ZNK11ArduinoJson8V730HB2211JsonVariant7getDataEv>
 800728c:	4603      	mov	r3, r0
  }
 800728e:	4618      	mov	r0, r3
 8007290:	3708      	adds	r7, #8
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}

08007296 <_ZN11ArduinoJson8V730HB226detail10alias_castIdyEET_T0_>:
T alias_cast(F raw_data) {
 8007296:	b480      	push	{r7}
 8007298:	b085      	sub	sp, #20
 800729a:	af00      	add	r7, sp, #0
 800729c:	e9c7 0100 	strd	r0, r1, [r7]
  ac.raw = raw_data;
 80072a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072a4:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ac.data;
 80072a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072ac:	ec43 2b17 	vmov	d7, r2, r3
}
 80072b0:	eeb0 0b47 	vmov.f64	d0, d7
 80072b4:	3714      	adds	r7, #20
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr

080072be <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIfEC1EPKf>:
  explicit pgm_ptr(const T* ptr) : ptr_(ptr) {}
 80072be:	b480      	push	{r7}
 80072c0:	b083      	sub	sp, #12
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
 80072c6:	6039      	str	r1, [r7, #0]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	683a      	ldr	r2, [r7, #0]
 80072cc:	601a      	str	r2, [r3, #0]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4618      	mov	r0, r3
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <_ZN11ArduinoJson8V730HB226detail8pgm_readIfEET_PKS3_>:
inline T pgm_read(const T* p) {
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  return *p;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	ee07 3a90 	vmov	s15, r3
}
 80072ec:	eeb0 0a67 	vmov.f32	s0, s15
 80072f0:	370c      	adds	r7, #12
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr

080072fa <_ZN11ArduinoJson8V730HB226detail7forwardIRA8_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 80072fa:	b480      	push	{r7}
 80072fc:	b083      	sub	sp, #12
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8007302:	687b      	ldr	r3, [r7, #4]
}
 8007304:	4618      	mov	r0, r3
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA8_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800731a:	2301      	movs	r3, #1
 800731c:	2207      	movs	r2, #7
 800731e:	6839      	ldr	r1, [r7, #0]
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f7fc fe1b 	bl	8003f5c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	3708      	adds	r7, #8
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}

0800732e <_ZN11ArduinoJson8V730HB226detail7forwardIRA7_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800732e:	b480      	push	{r7}
 8007330:	b083      	sub	sp, #12
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8007336:	687b      	ldr	r3, [r7, #4]
}
 8007338:	4618      	mov	r0, r3
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA7_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 8007344:	b580      	push	{r7, lr}
 8007346:	b082      	sub	sp, #8
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800734e:	2301      	movs	r3, #1
 8007350:	2206      	movs	r2, #6
 8007352:	6839      	ldr	r1, [r7, #0]
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f7fc fe01 	bl	8003f5c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	3708      	adds	r7, #8
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}

08007362 <_ZN11ArduinoJson8V730HB226detail7forwardIRA10_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8007362:	b480      	push	{r7}
 8007364:	b083      	sub	sp, #12
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800736a:	687b      	ldr	r3, [r7, #4]
}
 800736c:	4618      	mov	r0, r3
 800736e:	370c      	adds	r7, #12
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr

08007378 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA10_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 8007382:	2301      	movs	r3, #1
 8007384:	2209      	movs	r2, #9
 8007386:	6839      	ldr	r1, [r7, #0]
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f7fc fde7 	bl	8003f5c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	3708      	adds	r7, #8
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <_ZN11ArduinoJson8V730HB229ConverterImvE8fromJsonENS0_16JsonVariantConstE>:
  static T fromJson(JsonVariantConst src) {
 8007396:	b580      	push	{r7, lr}
 8007398:	b084      	sub	sp, #16
 800739a:	af00      	add	r7, sp, #0
 800739c:	463b      	mov	r3, r7
 800739e:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 80073a2:	463b      	mov	r3, r7
 80073a4:	4618      	mov	r0, r3
 80073a6:	f7fe ff1f 	bl	80061e8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 80073aa:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 80073ac:	463b      	mov	r3, r7
 80073ae:	4618      	mov	r0, r3
 80073b0:	f7fe ff26 	bl	8006200 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 80073b4:	60b8      	str	r0, [r7, #8]
    return data ? data->template asIntegral<T>(resources) : T();
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d005      	beq.n	80073c8 <_ZN11ArduinoJson8V730HB229ConverterImvE8fromJsonENS0_16JsonVariantConstE+0x32>
 80073bc:	68b9      	ldr	r1, [r7, #8]
 80073be:	68f8      	ldr	r0, [r7, #12]
 80073c0:	f000 f902 	bl	80075c8 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE>
 80073c4:	4603      	mov	r3, r0
 80073c6:	e000      	b.n	80073ca <_ZN11ArduinoJson8V730HB229ConverterImvE8fromJsonENS0_16JsonVariantConstE+0x34>
 80073c8:	2300      	movs	r3, #0
  }
 80073ca:	4618      	mov	r0, r3
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}

080073d2 <_ZN11ArduinoJson8V730HB226detail10makeReaderIRPKcEENS1_6ReaderINS1_16remove_referenceIT_E4typeEvEEOS8_>:
#endif

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TInput>
Reader<remove_reference_t<TInput>> makeReader(TInput&& input) {
 80073d2:	b580      	push	{r7, lr}
 80073d4:	b084      	sub	sp, #16
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
  return Reader<remove_reference_t<TInput>>{detail::forward<TInput>(input)};
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f7ff fc9c 	bl	8006d18 <_ZN11ArduinoJson8V730HB226detail7forwardIRPKcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 80073e0:	4603      	mov	r3, r0
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	f107 030c 	add.w	r3, r7, #12
 80073e8:	4611      	mov	r1, r2
 80073ea:	4618      	mov	r0, r3
 80073ec:	f000 f99e 	bl	800772c <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv>
 80073f0:	68fb      	ldr	r3, [r7, #12]
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3710      	adds	r7, #16
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}

080073fa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEED1Ev>:
class JsonDeserializer {
 80073fa:	b580      	push	{r7, lr}
 80073fc:	b082      	sub	sp, #8
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4618      	mov	r0, r3
 8007406:	f7fd fd9e 	bl	8004f46 <_ZN11ArduinoJson8V730HB226detail13StringBuilderD1Ev>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4618      	mov	r0, r3
 800740e:	3708      	adds	r7, #8
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <_ZN11ArduinoJson8V730HB226detail13doDeserializeINS1_16JsonDeserializerERNS0_12JsonDocumentENS1_6ReaderIPKcvEENS1_22DeserializationOptionsINS1_14AllowAllFilterEEEEENS0_20DeserializationErrorEOT0_T1_T2_>:
DeserializationError doDeserialize(TDestination&& dst, TReader reader,
 8007414:	b590      	push	{r4, r7, lr}
 8007416:	b0a1      	sub	sp, #132	@ 0x84
 8007418:	af00      	add	r7, sp, #0
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	80ba      	strh	r2, [r7, #4]
  auto data = VariantAttorney::getOrCreateData(dst);
 8007420:	68f8      	ldr	r0, [r7, #12]
 8007422:	f000 f999 	bl	8007758 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataINS0_12JsonDocumentEEEPNS1_11VariantDataERT_>
 8007426:	67f8      	str	r0, [r7, #124]	@ 0x7c
  if (!data)
 8007428:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800742a:	2b00      	cmp	r3, #0
 800742c:	d107      	bne.n	800743e <_ZN11ArduinoJson8V730HB226detail13doDeserializeINS1_16JsonDeserializerERNS0_12JsonDocumentENS1_6ReaderIPKcvEENS1_22DeserializationOptionsINS1_14AllowAllFilterEEEEENS0_20DeserializationErrorEOT0_T1_T2_+0x2a>
    return DeserializationError::NoMemory;
 800742e:	f107 0318 	add.w	r3, r7, #24
 8007432:	2104      	movs	r1, #4
 8007434:	4618      	mov	r0, r3
 8007436:	f7fd ff08 	bl	800524a <_ZN11ArduinoJson8V730HB2220DeserializationErrorC1ENS1_4CodeE>
 800743a:	7e3b      	ldrb	r3, [r7, #24]
 800743c:	e01f      	b.n	800747e <_ZN11ArduinoJson8V730HB226detail13doDeserializeINS1_16JsonDeserializerERNS0_12JsonDocumentENS1_6ReaderIPKcvEENS1_22DeserializationOptionsINS1_14AllowAllFilterEEEEENS0_20DeserializationErrorEOT0_T1_T2_+0x6a>
  auto resources = VariantAttorney::getResourceManager(dst);
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	f000 f996 	bl	8007770 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_12JsonDocumentEEEDTcldtfp_18getResourceManagerEERT_>
 8007444:	67b8      	str	r0, [r7, #120]	@ 0x78
  dst.clear();
 8007446:	68f8      	ldr	r0, [r7, #12]
 8007448:	f7fd fac5 	bl	80049d6 <_ZN11ArduinoJson8V730HB2212JsonDocument5clearEv>
  auto err = TDeserializer<TReader>(resources, reader)
 800744c:	f107 031c 	add.w	r3, r7, #28
 8007450:	68ba      	ldr	r2, [r7, #8]
 8007452:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007454:	4618      	mov	r0, r3
 8007456:	f000 f997 	bl	8007788 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEEC1EPNS1_15ResourceManagerES6_>
                 .parse(*data, options.filter, options.nestingLimit);
 800745a:	f107 001c 	add.w	r0, r7, #28
 800745e:	797b      	ldrb	r3, [r7, #5]
 8007460:	4622      	mov	r2, r4
 8007462:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007464:	f000 f9ac 	bl	80077c0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 8007468:	4603      	mov	r3, r0
 800746a:	753b      	strb	r3, [r7, #20]
  auto err = TDeserializer<TReader>(resources, reader)
 800746c:	f107 031c 	add.w	r3, r7, #28
 8007470:	4618      	mov	r0, r3
 8007472:	f7ff ffc2 	bl	80073fa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEED1Ev>
  shrinkJsonDocument(dst);
 8007476:	68f8      	ldr	r0, [r7, #12]
 8007478:	f7fd ff97 	bl	80053aa <_ZN11ArduinoJson8V730HB226detail18shrinkJsonDocumentERNS0_12JsonDocumentE>
  return err;
 800747c:	7d3b      	ldrb	r3, [r7, #20]
}
 800747e:	4618      	mov	r0, r3
 8007480:	3784      	adds	r7, #132	@ 0x84
 8007482:	46bd      	mov	sp, r7
 8007484:	bd90      	pop	{r4, r7, pc}

08007486 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8007486:	b480      	push	{r7}
 8007488:	b083      	sub	sp, #12
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800748e:	4618      	mov	r0, r3
 8007490:	370c      	adds	r7, #12
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr

0800749a <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800749a:	b480      	push	{r7}
 800749c:	b085      	sub	sp, #20
 800749e:	af00      	add	r7, sp, #0
 80074a0:	60f8      	str	r0, [r7, #12]
 80074a2:	60b9      	str	r1, [r7, #8]
 80074a4:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 80074a6:	68ba      	ldr	r2, [r7, #8]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	1ad3      	subs	r3, r2, r3
    }
 80074ac:	4618      	mov	r0, r3
 80074ae:	3714      	adds	r7, #20
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE>:
    return data;
  return addMember(key, resources);
}

template <typename TAdaptedString>
inline ObjectData::iterator ObjectData::findKey(
 80074b8:	b082      	sub	sp, #8
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b08e      	sub	sp, #56	@ 0x38
 80074be:	af02      	add	r7, sp, #8
 80074c0:	6078      	str	r0, [r7, #4]
 80074c2:	6039      	str	r1, [r7, #0]
 80074c4:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80074c8:	e881 000c 	stmia.w	r1, {r2, r3}
    TAdaptedString key, const ResourceManager* resources) const {
  if (key.isNull())
 80074cc:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 80074d0:	f7fc fd5b 	bl	8003f8a <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>
 80074d4:	4603      	mov	r3, r0
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d003      	beq.n	80074e2 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x2a>
    return iterator();
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f7fc fe2a 	bl	8004134 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1Ev>
 80074e0:	e05a      	b.n	8007598 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xe0>
  bool isKey = true;
 80074e2:	2301      	movs	r3, #1
 80074e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  for (auto it = createIterator(resources); !it.done(); it.next(resources)) {
 80074e8:	6839      	ldr	r1, [r7, #0]
 80074ea:	f107 030c 	add.w	r3, r7, #12
 80074ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80074f0:	4618      	mov	r0, r3
 80074f2:	f7fd fb13 	bl	8004b1c <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
 80074f6:	e041      	b.n	800757c <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xc4>
    if (isKey && stringEquals(key, adaptString(it->asString())))
 80074f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d025      	beq.n	800754c <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x94>
 8007500:	f107 030c 	add.w	r3, r7, #12
 8007504:	4618      	mov	r0, r3
 8007506:	f7fc fe4c 	bl	80041a2 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorptEv>
 800750a:	4602      	mov	r2, r0
 800750c:	f107 0314 	add.w	r3, r7, #20
 8007510:	4611      	mov	r1, r2
 8007512:	4618      	mov	r0, r3
 8007514:	f7fc ff12 	bl	800433c <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv>
 8007518:	f107 0320 	add.w	r3, r7, #32
 800751c:	f107 0214 	add.w	r2, r7, #20
 8007520:	4611      	mov	r1, r2
 8007522:	4618      	mov	r0, r3
 8007524:	f000 f985 	bl	8007832 <_ZN11ArduinoJson8V730HB226detail11adaptStringINS0_10JsonStringEEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringEOS7_>
 8007528:	466a      	mov	r2, sp
 800752a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800752e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007532:	e882 0003 	stmia.w	r2, {r0, r1}
 8007536:	6a3b      	ldr	r3, [r7, #32]
 8007538:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800753c:	ca07      	ldmia	r2, {r0, r1, r2}
 800753e:	f7ff fe45 	bl	80071cc <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>
 8007542:	4603      	mov	r3, r0
 8007544:	2b00      	cmp	r3, #0
 8007546:	d001      	beq.n	800754c <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x94>
 8007548:	2301      	movs	r3, #1
 800754a:	e000      	b.n	800754e <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x96>
 800754c:	2300      	movs	r3, #0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d008      	beq.n	8007564 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xac>
      return it;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	461a      	mov	r2, r3
 8007556:	f107 030c 	add.w	r3, r7, #12
 800755a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800755e:	e882 0003 	stmia.w	r2, {r0, r1}
    isKey = !isKey;
  }
  return iterator();
}
 8007562:	e019      	b.n	8007598 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xe0>
    isKey = !isKey;
 8007564:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007568:	f083 0301 	eor.w	r3, r3, #1
 800756c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  for (auto it = createIterator(resources); !it.done(); it.next(resources)) {
 8007570:	f107 030c 	add.w	r3, r7, #12
 8007574:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007576:	4618      	mov	r0, r3
 8007578:	f7fd faad 	bl	8004ad6 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
 800757c:	f107 030c 	add.w	r3, r7, #12
 8007580:	4618      	mov	r0, r3
 8007582:	f7fc fde9 	bl	8004158 <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 8007586:	4603      	mov	r3, r0
 8007588:	f083 0301 	eor.w	r3, r3, #1
 800758c:	b2db      	uxtb	r3, r3
 800758e:	2b00      	cmp	r3, #0
 8007590:	d1b2      	bne.n	80074f8 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x40>
  return iterator();
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f7fc fdce 	bl	8004134 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1Ev>
}
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	3730      	adds	r7, #48	@ 0x30
 800759c:	46bd      	mov	sp, r7
 800759e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80075a2:	b002      	add	sp, #8
 80075a4:	4770      	bx	lr

080075a6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b082      	sub	sp, #8
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 f954 	bl	800785c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7derivedEv>
 80075b4:	4603      	mov	r3, r0
 80075b6:	4618      	mov	r0, r3
 80075b8:	f000 f95b 	bl	8007872 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>
 80075bc:	4603      	mov	r3, r0
  }
 80075be:	4618      	mov	r0, r3
 80075c0:	3708      	adds	r7, #8
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
	...

080075c8 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE>:
  T asIntegral(const ResourceManager* resources) const {
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 80075d2:	6839      	ldr	r1, [r7, #0]
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f7fd fe1d 	bl	8005214 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 80075da:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	791b      	ldrb	r3, [r3, #4]
 80075e0:	3b04      	subs	r3, #4
 80075e2:	2b1a      	cmp	r3, #26
 80075e4:	d87c      	bhi.n	80076e0 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x118>
 80075e6:	a201      	add	r2, pc, #4	@ (adr r2, 80075ec <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x24>)
 80075e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ec:	0800769f 	.word	0x0800769f
 80075f0:	080076ad 	.word	0x080076ad
 80075f4:	08007659 	.word	0x08007659
 80075f8:	080076e1 	.word	0x080076e1
 80075fc:	080076e1 	.word	0x080076e1
 8007600:	080076e1 	.word	0x080076e1
 8007604:	0800765f 	.word	0x0800765f
 8007608:	080076e1 	.word	0x080076e1
 800760c:	0800766d 	.word	0x0800766d
 8007610:	080076e1 	.word	0x080076e1
 8007614:	080076bd 	.word	0x080076bd
 8007618:	080076e1 	.word	0x080076e1
 800761c:	080076e1 	.word	0x080076e1
 8007620:	080076e1 	.word	0x080076e1
 8007624:	080076e1 	.word	0x080076e1
 8007628:	080076e1 	.word	0x080076e1
 800762c:	080076e1 	.word	0x080076e1
 8007630:	080076e1 	.word	0x080076e1
 8007634:	080076e1 	.word	0x080076e1
 8007638:	080076e1 	.word	0x080076e1
 800763c:	080076e1 	.word	0x080076e1
 8007640:	080076e1 	.word	0x080076e1
 8007644:	0800767b 	.word	0x0800767b
 8007648:	080076e1 	.word	0x080076e1
 800764c:	0800768d 	.word	0x0800768d
 8007650:	080076e1 	.word	0x080076e1
 8007654:	080076cf 	.word	0x080076cf
        return content_.asBoolean;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	e041      	b.n	80076e2 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asUint32);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4618      	mov	r0, r3
 8007664:	f000 f921 	bl	80078aa <_ZN11ArduinoJson8V730HB226detail13convertNumberImmEET_T0_>
 8007668:	4603      	mov	r3, r0
 800766a:	e03a      	b.n	80076e2 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asInt32);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4618      	mov	r0, r3
 8007672:	f000 f92b 	bl	80078cc <_ZN11ArduinoJson8V730HB226detail13convertNumberImlEET_T0_>
 8007676:	4603      	mov	r3, r0
 8007678:	e033      	b.n	80076e2 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asUint64);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007680:	4610      	mov	r0, r2
 8007682:	4619      	mov	r1, r3
 8007684:	f000 f933 	bl	80078ee <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_>
 8007688:	4603      	mov	r3, r0
 800768a:	e02a      	b.n	80076e2 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asInt64);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007692:	4610      	mov	r0, r2
 8007694:	4619      	mov	r1, r3
 8007696:	f000 f93d 	bl	8007914 <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_>
 800769a:	4603      	mov	r3, r0
 800769c:	e021      	b.n	80076e2 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asLinkedString);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4618      	mov	r0, r3
 80076a4:	f000 f949 	bl	800793a <_ZN11ArduinoJson8V730HB226detail11parseNumberImEET_PKc>
 80076a8:	4603      	mov	r3, r0
 80076aa:	e01a      	b.n	80076e2 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asOwnedString->data);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	3308      	adds	r3, #8
 80076b2:	4618      	mov	r0, r3
 80076b4:	f000 f941 	bl	800793a <_ZN11ArduinoJson8V730HB226detail11parseNumberImEET_PKc>
 80076b8:	4603      	mov	r3, r0
 80076ba:	e012      	b.n	80076e2 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asFloat);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	edd3 7a00 	vldr	s15, [r3]
 80076c2:	eeb0 0a67 	vmov.f32	s0, s15
 80076c6:	f000 f94c 	bl	8007962 <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_>
 80076ca:	4603      	mov	r3, r0
 80076cc:	e009      	b.n	80076e2 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asDouble);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	ed93 7b00 	vldr	d7, [r3]
 80076d4:	eeb0 0b47 	vmov.f64	d0, d7
 80076d8:	f000 f95b 	bl	8007992 <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_>
 80076dc:	4603      	mov	r3, r0
 80076de:	e000      	b.n	80076e2 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return 0;
 80076e0:	2300      	movs	r3, #0
  }
 80076e2:	4618      	mov	r0, r3
 80076e4:	3710      	adds	r7, #16
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	bf00      	nop

080076ec <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7getDataEv>:
  VariantData* getData() const {
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b082      	sub	sp, #8
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 f964 	bl	80079c2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7derivedEv>
 80076fa:	4603      	mov	r3, r0
 80076fc:	4618      	mov	r0, r3
 80076fe:	f000 f96b 	bl	80079d8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>
 8007702:	4603      	mov	r3, r0
  }
 8007704:	4618      	mov	r0, r3
 8007706:	3708      	adds	r7, #8
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 800770c:	b580      	push	{r7, lr}
 800770e:	b082      	sub	sp, #8
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 f954 	bl	80079c2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7derivedEv>
 800771a:	4603      	mov	r3, r0
 800771c:	4618      	mov	r0, r3
 800771e:	f000 f967 	bl	80079f0 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>
 8007722:	4603      	mov	r3, r0
  }
 8007724:	4618      	mov	r0, r3
 8007726:	3708      	adds	r7, #8
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv>:
template <typename TSource>
struct Reader<TSource*, enable_if_t<IsCharOrVoid<TSource>::value>> {
  const char* ptr_;

 public:
  explicit Reader(const void* ptr)
 800772c:	b480      	push	{r7}
 800772e:	b083      	sub	sp, #12
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
      : ptr_(ptr ? reinterpret_cast<const char*>(ptr) : "") {}
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d001      	beq.n	8007740 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv+0x14>
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	e000      	b.n	8007742 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv+0x16>
 8007740:	4b04      	ldr	r3, [pc, #16]	@ (8007754 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv+0x28>)
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	6013      	str	r3, [r2, #0]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4618      	mov	r0, r3
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr
 8007754:	08027b84 	.word	0x08027b84

08007758 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataINS0_12JsonDocumentEEEPNS1_11VariantDataERT_>:

  template <typename TClient>
  static VariantData* getOrCreateData(TClient& client) {
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
    return client.getOrCreateData();
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f7fd f960 	bl	8004a26 <_ZN11ArduinoJson8V730HB2212JsonDocument15getOrCreateDataEv>
 8007766:	4603      	mov	r3, r0
  }
 8007768:	4618      	mov	r0, r3
 800776a:	3708      	adds	r7, #8
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_12JsonDocumentEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f7fd f93d 	bl	80049f8 <_ZN11ArduinoJson8V730HB2212JsonDocument18getResourceManagerEv>
 800777e:	4603      	mov	r3, r0
  }
 8007780:	4618      	mov	r0, r3
 8007782:	3708      	adds	r7, #8
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEEC1EPNS1_15ResourceManagerES6_>:
  JsonDeserializer(ResourceManager* resources, TReader reader)
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	607a      	str	r2, [r7, #4]
      : stringBuilder_(resources),
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	68b9      	ldr	r1, [r7, #8]
 8007798:	4618      	mov	r0, r3
 800779a:	f7fd fbbf 	bl	8004f1c <_ZN11ArduinoJson8V730HB226detail13StringBuilderC1EPNS1_15ResourceManagerE>
        foundSomething_(false),
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2200      	movs	r2, #0
 80077a2:	731a      	strb	r2, [r3, #12]
        latch_(reader),
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	3310      	adds	r3, #16
 80077a8:	6879      	ldr	r1, [r7, #4]
 80077aa:	4618      	mov	r0, r3
 80077ac:	f000 f92c 	bl	8007a08 <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEEC1ES6_>
        resources_(resources) {}
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	68ba      	ldr	r2, [r7, #8]
 80077b4:	619a      	str	r2, [r3, #24]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	4618      	mov	r0, r3
 80077ba:	3710      	adds	r7, #16
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError parse(VariantData& variant, TFilter filter,
 80077c0:	b590      	push	{r4, r7, lr}
 80077c2:	b089      	sub	sp, #36	@ 0x24
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	713a      	strb	r2, [r7, #4]
 80077cc:	703b      	strb	r3, [r7, #0]
    err = parseVariant(variant, filter, nestingLimit);
 80077ce:	783b      	ldrb	r3, [r7, #0]
 80077d0:	4622      	mov	r2, r4
 80077d2:	68b9      	ldr	r1, [r7, #8]
 80077d4:	68f8      	ldr	r0, [r7, #12]
 80077d6:	f000 f929 	bl	8007a2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 80077da:	4603      	mov	r3, r0
 80077dc:	75fb      	strb	r3, [r7, #23]
    if (!err && latch_.last() != 0 && variant.isFloat()) {
 80077de:	7dfb      	ldrb	r3, [r7, #23]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d10f      	bne.n	8007804 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x44>
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	3310      	adds	r3, #16
 80077e8:	4618      	mov	r0, r3
 80077ea:	f000 fa0d 	bl	8007c08 <_ZNK11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE4lastEv>
 80077ee:	4603      	mov	r3, r0
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d007      	beq.n	8007804 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x44>
 80077f4:	68b8      	ldr	r0, [r7, #8]
 80077f6:	f7fc fde8 	bl	80043ca <_ZNK11ArduinoJson8V730HB226detail11VariantData7isFloatEv>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d001      	beq.n	8007804 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x44>
 8007800:	2301      	movs	r3, #1
 8007802:	e000      	b.n	8007806 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x46>
 8007804:	2300      	movs	r3, #0
 8007806:	2b00      	cmp	r3, #0
 8007808:	d007      	beq.n	800781a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x5a>
      return DeserializationError::InvalidInput;
 800780a:	f107 0318 	add.w	r3, r7, #24
 800780e:	2103      	movs	r1, #3
 8007810:	4618      	mov	r0, r3
 8007812:	f7fd fd1a 	bl	800524a <_ZN11ArduinoJson8V730HB2220DeserializationErrorC1ENS1_4CodeE>
 8007816:	7e3b      	ldrb	r3, [r7, #24]
 8007818:	e007      	b.n	800782a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x6a>
    return err;
 800781a:	7dfa      	ldrb	r2, [r7, #23]
 800781c:	f107 031c 	add.w	r3, r7, #28
 8007820:	4611      	mov	r1, r2
 8007822:	4618      	mov	r0, r3
 8007824:	f7fd fd11 	bl	800524a <_ZN11ArduinoJson8V730HB2220DeserializationErrorC1ENS1_4CodeE>
 8007828:	7f3b      	ldrb	r3, [r7, #28]
  }
 800782a:	4618      	mov	r0, r3
 800782c:	3724      	adds	r7, #36	@ 0x24
 800782e:	46bd      	mov	sp, r7
 8007830:	bd90      	pop	{r4, r7, pc}

08007832 <_ZN11ArduinoJson8V730HB226detail11adaptStringINS0_10JsonStringEEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringEOS7_>:
AdaptedString<TString> adaptString(TString&& s) {
 8007832:	b580      	push	{r7, lr}
 8007834:	b082      	sub	sp, #8
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
 800783a:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800783c:	6838      	ldr	r0, [r7, #0]
 800783e:	f000 f9ef 	bl	8007c20 <_ZN11ArduinoJson8V730HB226detail7forwardINS0_10JsonStringEEEOT_RNS1_16remove_referenceIS4_E4typeE>
 8007842:	4603      	mov	r3, r0
 8007844:	4618      	mov	r0, r3
 8007846:	f7fc fc6a 	bl	800411e <_ZN11ArduinoJson8V730HB226detail13StringAdapterINS0_10JsonStringEvE5adaptERKS3_>
 800784a:	4602      	mov	r2, r0
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	ca07      	ldmia	r2, {r0, r1, r2}
 8007850:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	3708      	adds	r7, #8
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7derivedEv>:
  const TDerived& derived() const {
 800785c:	b480      	push	{r7}
 800785e:	b083      	sub	sp, #12
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 8007864:	687b      	ldr	r3, [r7, #4]
  }
 8007866:	4618      	mov	r0, r3
 8007868:	370c      	adds	r7, #12
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr

08007872 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8007872:	b580      	push	{r7, lr}
 8007874:	b082      	sub	sp, #8
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 f9db 	bl	8007c36 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEE18getResourceManagerEv>
 8007880:	4603      	mov	r3, r0
  }
 8007882:	4618      	mov	r0, r3
 8007884:	3708      	adds	r7, #8
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}

0800788a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>:
  VariantData* getData() const {
 800788a:	b580      	push	{r7, lr}
 800788c:	b082      	sub	sp, #8
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f7ff ffe2 	bl	800785c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7derivedEv>
 8007898:	4603      	mov	r3, r0
 800789a:	4618      	mov	r0, r3
 800789c:	f000 f9d9 	bl	8007c52 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>
 80078a0:	4603      	mov	r3, r0
  }
 80078a2:	4618      	mov	r0, r3
 80078a4:	3708      	adds	r7, #8
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}

080078aa <_ZN11ArduinoJson8V730HB226detail13convertNumberImmEET_T0_>:
canConvertNumber(TIn) {
  return true;
}

template <typename TOut, typename TIn>
TOut convertNumber(TIn value) {
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b082      	sub	sp, #8
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 f9d9 	bl	8007c6a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d001      	beq.n	80078c2 <_ZN11ArduinoJson8V730HB226detail13convertNumberImmEET_T0_+0x18>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	e000      	b.n	80078c4 <_ZN11ArduinoJson8V730HB226detail13convertNumberImmEET_T0_+0x1a>
 80078c2:	2300      	movs	r3, #0
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3708      	adds	r7, #8
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <_ZN11ArduinoJson8V730HB226detail13convertNumberImlEET_T0_>:
TOut convertNumber(TIn value) {
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 f9d9 	bl	8007c8c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_>
 80078da:	4603      	mov	r3, r0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d001      	beq.n	80078e4 <_ZN11ArduinoJson8V730HB226detail13convertNumberImlEET_T0_+0x18>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	e000      	b.n	80078e6 <_ZN11ArduinoJson8V730HB226detail13convertNumberImlEET_T0_+0x1a>
 80078e4:	2300      	movs	r3, #0
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3708      	adds	r7, #8
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}

080078ee <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_>:
TOut convertNumber(TIn value) {
 80078ee:	b580      	push	{r7, lr}
 80078f0:	b082      	sub	sp, #8
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80078f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078fc:	f000 f9dc 	bl	8007cb8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 8007900:	4603      	mov	r3, r0
 8007902:	2b00      	cmp	r3, #0
 8007904:	d001      	beq.n	800790a <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_+0x1c>
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	e000      	b.n	800790c <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_+0x1e>
 800790a:	2300      	movs	r3, #0
}
 800790c:	4618      	mov	r0, r3
 800790e:	3708      	adds	r7, #8
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_>:
TOut convertNumber(TIn value) {
 8007914:	b580      	push	{r7, lr}
 8007916:	b082      	sub	sp, #8
 8007918:	af00      	add	r7, sp, #0
 800791a:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800791e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007922:	f000 f9e1 	bl	8007ce8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>
 8007926:	4603      	mov	r3, r0
 8007928:	2b00      	cmp	r3, #0
 800792a:	d001      	beq.n	8007930 <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_+0x1c>
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	e000      	b.n	8007932 <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_+0x1e>
 8007930:	2300      	movs	r3, #0
}
 8007932:	4618      	mov	r0, r3
 8007934:	3708      	adds	r7, #8
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <_ZN11ArduinoJson8V730HB226detail11parseNumberImEET_PKc>:

template <typename T>
inline T parseNumber(const char* s) {
 800793a:	b580      	push	{r7, lr}
 800793c:	b086      	sub	sp, #24
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
  return parseNumber(s).convertTo<T>();
 8007942:	f107 0308 	add.w	r3, r7, #8
 8007946:	6879      	ldr	r1, [r7, #4]
 8007948:	4618      	mov	r0, r3
 800794a:	f7fd fec7 	bl	80056dc <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>
 800794e:	f107 0308 	add.w	r3, r7, #8
 8007952:	4618      	mov	r0, r3
 8007954:	f000 f9e6 	bl	8007d24 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v>
 8007958:	4603      	mov	r3, r0
}
 800795a:	4618      	mov	r0, r3
 800795c:	3718      	adds	r7, #24
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}

08007962 <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_>:
TOut convertNumber(TIn value) {
 8007962:	b580      	push	{r7, lr}
 8007964:	b082      	sub	sp, #8
 8007966:	af00      	add	r7, sp, #0
 8007968:	ed87 0a01 	vstr	s0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800796c:	ed97 0a01 	vldr	s0, [r7, #4]
 8007970:	f000 fa1e 	bl	8007db0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_>
 8007974:	4603      	mov	r3, r0
 8007976:	2b00      	cmp	r3, #0
 8007978:	d006      	beq.n	8007988 <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_+0x26>
 800797a:	edd7 7a01 	vldr	s15, [r7, #4]
 800797e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007982:	ee17 3a90 	vmov	r3, s15
 8007986:	e000      	b.n	800798a <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_+0x28>
 8007988:	2300      	movs	r3, #0
}
 800798a:	4618      	mov	r0, r3
 800798c:	3708      	adds	r7, #8
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_>:
TOut convertNumber(TIn value) {
 8007992:	b580      	push	{r7, lr}
 8007994:	b082      	sub	sp, #8
 8007996:	af00      	add	r7, sp, #0
 8007998:	ed87 0b00 	vstr	d0, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800799c:	ed97 0b00 	vldr	d0, [r7]
 80079a0:	f000 fa34 	bl	8007e0c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 80079a4:	4603      	mov	r3, r0
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d006      	beq.n	80079b8 <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_+0x26>
 80079aa:	ed97 7b00 	vldr	d7, [r7]
 80079ae:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80079b2:	ee17 3a90 	vmov	r3, s15
 80079b6:	e000      	b.n	80079ba <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_+0x28>
 80079b8:	2300      	movs	r3, #0
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3708      	adds	r7, #8
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7derivedEv>:
  const TDerived& derived() const {
 80079c2:	b480      	push	{r7}
 80079c4:	b083      	sub	sp, #12
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 80079ca:	687b      	ldr	r3, [r7, #4]
  }
 80079cc:	4618      	mov	r0, r3
 80079ce:	370c      	adds	r7, #12
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 80079d8:	b580      	push	{r7, lr}
 80079da:	b082      	sub	sp, #8
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
    return client.getData();
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 fa39 	bl	8007e58 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEE7getDataEv>
 80079e6:	4603      	mov	r3, r0
  }
 80079e8:	4618      	mov	r0, r3
 80079ea:	3708      	adds	r7, #8
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 fa49 	bl	8007e90 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEE18getResourceManagerEv>
 80079fe:	4603      	mov	r3, r0
  }
 8007a00:	4618      	mov	r0, r3
 8007a02:	3708      	adds	r7, #8
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEEC1ES6_>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TReader>
class Latch {
 public:
  Latch(TReader reader) : reader_(reader), loaded_(false) {
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	683a      	ldr	r2, [r7, #0]
 8007a16:	601a      	str	r2, [r3, #0]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	715a      	strb	r2, [r3, #5]
#if ARDUINOJSON_DEBUG
    ended_ = false;
#endif
  }
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4618      	mov	r0, r3
 8007a22:	370c      	adds	r7, #12
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code parseVariant(
 8007a2c:	b5b0      	push	{r4, r5, r7, lr}
 8007a2e:	b086      	sub	sp, #24
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	60f8      	str	r0, [r7, #12]
 8007a34:	60b9      	str	r1, [r7, #8]
 8007a36:	713a      	strb	r2, [r7, #4]
 8007a38:	703b      	strb	r3, [r7, #0]
    err = skipSpacesAndComments();
 8007a3a:	68f8      	ldr	r0, [r7, #12]
 8007a3c:	f000 fa36 	bl	8007eac <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8007a40:	4603      	mov	r3, r0
 8007a42:	75fb      	strb	r3, [r7, #23]
    if (err)
 8007a44:	7dfb      	ldrb	r3, [r7, #23]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d001      	beq.n	8007a4e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x22>
      return err;
 8007a4a:	7dfb      	ldrb	r3, [r7, #23]
 8007a4c:	e0d2      	b.n	8007bf4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
    switch (current()) {
 8007a4e:	68f8      	ldr	r0, [r7, #12]
 8007a50:	f000 fa62 	bl	8007f18 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8007a54:	4603      	mov	r3, r0
 8007a56:	2b7b      	cmp	r3, #123	@ 0x7b
 8007a58:	f300 80ba 	bgt.w	8007bd0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1a4>
 8007a5c:	2b5b      	cmp	r3, #91	@ 0x5b
 8007a5e:	da04      	bge.n	8007a6a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x3e>
 8007a60:	2b22      	cmp	r3, #34	@ 0x22
 8007a62:	d07b      	beq.n	8007b5c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x130>
 8007a64:	2b27      	cmp	r3, #39	@ 0x27
 8007a66:	d079      	beq.n	8007b5c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x130>
 8007a68:	e0b2      	b.n	8007bd0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1a4>
 8007a6a:	3b5b      	subs	r3, #91	@ 0x5b
 8007a6c:	2b20      	cmp	r3, #32
 8007a6e:	f200 80af 	bhi.w	8007bd0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1a4>
 8007a72:	a201      	add	r2, pc, #4	@ (adr r2, 8007a78 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x4c>)
 8007a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a78:	08007afd 	.word	0x08007afd
 8007a7c:	08007bd1 	.word	0x08007bd1
 8007a80:	08007bd1 	.word	0x08007bd1
 8007a84:	08007bd1 	.word	0x08007bd1
 8007a88:	08007bd1 	.word	0x08007bd1
 8007a8c:	08007bd1 	.word	0x08007bd1
 8007a90:	08007bd1 	.word	0x08007bd1
 8007a94:	08007bd1 	.word	0x08007bd1
 8007a98:	08007bd1 	.word	0x08007bd1
 8007a9c:	08007bd1 	.word	0x08007bd1
 8007aa0:	08007bd1 	.word	0x08007bd1
 8007aa4:	08007ba3 	.word	0x08007ba3
 8007aa8:	08007bd1 	.word	0x08007bd1
 8007aac:	08007bd1 	.word	0x08007bd1
 8007ab0:	08007bd1 	.word	0x08007bd1
 8007ab4:	08007bd1 	.word	0x08007bd1
 8007ab8:	08007bd1 	.word	0x08007bd1
 8007abc:	08007bd1 	.word	0x08007bd1
 8007ac0:	08007bd1 	.word	0x08007bd1
 8007ac4:	08007bc5 	.word	0x08007bc5
 8007ac8:	08007bd1 	.word	0x08007bd1
 8007acc:	08007bd1 	.word	0x08007bd1
 8007ad0:	08007bd1 	.word	0x08007bd1
 8007ad4:	08007bd1 	.word	0x08007bd1
 8007ad8:	08007bd1 	.word	0x08007bd1
 8007adc:	08007b81 	.word	0x08007b81
 8007ae0:	08007bd1 	.word	0x08007bd1
 8007ae4:	08007bd1 	.word	0x08007bd1
 8007ae8:	08007bd1 	.word	0x08007bd1
 8007aec:	08007bd1 	.word	0x08007bd1
 8007af0:	08007bd1 	.word	0x08007bd1
 8007af4:	08007bd1 	.word	0x08007bd1
 8007af8:	08007b2d 	.word	0x08007b2d
        if (filter.allowArray())
 8007afc:	1d3b      	adds	r3, r7, #4
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7fd fbdd 	bl	80052be <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowArrayEv>
 8007b04:	4603      	mov	r3, r0
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d00a      	beq.n	8007b20 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0xf4>
          return parseArray(variant.toArray(), filter, nestingLimit);
 8007b0a:	68b8      	ldr	r0, [r7, #8]
 8007b0c:	f7fc fcdc 	bl	80044c8 <_ZN11ArduinoJson8V730HB226detail11VariantData7toArrayEv>
 8007b10:	4601      	mov	r1, r0
 8007b12:	783b      	ldrb	r3, [r7, #0]
 8007b14:	462a      	mov	r2, r5
 8007b16:	68f8      	ldr	r0, [r7, #12]
 8007b18:	f000 fa15 	bl	8007f46 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	e069      	b.n	8007bf4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipArray(nestingLimit);
 8007b20:	7839      	ldrb	r1, [r7, #0]
 8007b22:	68f8      	ldr	r0, [r7, #12]
 8007b24:	f000 fa95 	bl	8008052 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	e063      	b.n	8007bf4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowObject())
 8007b2c:	1d3b      	adds	r3, r7, #4
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f7fd fbd0 	bl	80052d4 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter11allowObjectEv>
 8007b34:	4603      	mov	r3, r0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d00a      	beq.n	8007b50 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x124>
          return parseObject(variant.toObject(), filter, nestingLimit);
 8007b3a:	68b8      	ldr	r0, [r7, #8]
 8007b3c:	f7fc fcec 	bl	8004518 <_ZN11ArduinoJson8V730HB226detail11VariantData8toObjectEv>
 8007b40:	4601      	mov	r1, r0
 8007b42:	783b      	ldrb	r3, [r7, #0]
 8007b44:	4622      	mov	r2, r4
 8007b46:	68f8      	ldr	r0, [r7, #12]
 8007b48:	f000 fac6 	bl	80080d8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	e051      	b.n	8007bf4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipObject(nestingLimit);
 8007b50:	7839      	ldrb	r1, [r7, #0]
 8007b52:	68f8      	ldr	r0, [r7, #12]
 8007b54:	f000 fbac 	bl	80082b0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	e04b      	b.n	8007bf4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 8007b5c:	1d3b      	adds	r3, r7, #4
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7fd fbc3 	bl	80052ea <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>
 8007b64:	4603      	mov	r3, r0
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d005      	beq.n	8007b76 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x14a>
          return parseStringValue(variant);
 8007b6a:	68b9      	ldr	r1, [r7, #8]
 8007b6c:	68f8      	ldr	r0, [r7, #12]
 8007b6e:	f000 fc1f 	bl	80083b0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16parseStringValueERNS1_11VariantDataE>
 8007b72:	4603      	mov	r3, r0
 8007b74:	e03e      	b.n	8007bf4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipQuotedString();
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	f000 fc3b 	bl	80083f2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	e039      	b.n	8007bf4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 8007b80:	1d3b      	adds	r3, r7, #4
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7fd fbb1 	bl	80052ea <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d003      	beq.n	8007b96 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x16a>
          variant.setBoolean(true);
 8007b8e:	2101      	movs	r1, #1
 8007b90:	68b8      	ldr	r0, [r7, #8]
 8007b92:	f7fc fc47 	bl	8004424 <_ZN11ArduinoJson8V730HB226detail11VariantData10setBooleanEb>
        return skipKeyword("true");
 8007b96:	4919      	ldr	r1, [pc, #100]	@ (8007bfc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>)
 8007b98:	68f8      	ldr	r0, [r7, #12]
 8007b9a:	f000 fc5f 	bl	800845c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	e028      	b.n	8007bf4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 8007ba2:	1d3b      	adds	r3, r7, #4
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f7fd fba0 	bl	80052ea <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d003      	beq.n	8007bb8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x18c>
          variant.setBoolean(false);
 8007bb0:	2100      	movs	r1, #0
 8007bb2:	68b8      	ldr	r0, [r7, #8]
 8007bb4:	f7fc fc36 	bl	8004424 <_ZN11ArduinoJson8V730HB226detail11VariantData10setBooleanEb>
        return skipKeyword("false");
 8007bb8:	4911      	ldr	r1, [pc, #68]	@ (8007c00 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1d4>)
 8007bba:	68f8      	ldr	r0, [r7, #12]
 8007bbc:	f000 fc4e 	bl	800845c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	e017      	b.n	8007bf4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        return skipKeyword("null");
 8007bc4:	490f      	ldr	r1, [pc, #60]	@ (8007c04 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1d8>)
 8007bc6:	68f8      	ldr	r0, [r7, #12]
 8007bc8:	f000 fc48 	bl	800845c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	e011      	b.n	8007bf4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 8007bd0:	1d3b      	adds	r3, r7, #4
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f7fd fb89 	bl	80052ea <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d005      	beq.n	8007bea <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1be>
          return parseNumericValue(variant);
 8007bde:	68b9      	ldr	r1, [r7, #8]
 8007be0:	68f8      	ldr	r0, [r7, #12]
 8007be2:	f000 fc61 	bl	80084a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE>
 8007be6:	4603      	mov	r3, r0
 8007be8:	e004      	b.n	8007bf4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipNumericValue();
 8007bea:	68f8      	ldr	r0, [r7, #12]
 8007bec:	f000 fd04 	bl	80085f8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	bf00      	nop
  }
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3718      	adds	r7, #24
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bdb0      	pop	{r4, r5, r7, pc}
 8007bfc:	08027df8 	.word	0x08027df8
 8007c00:	08027e00 	.word	0x08027e00
 8007c04:	08027e08 	.word	0x08027e08

08007c08 <_ZNK11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE4lastEv>:

  void clear() {
    loaded_ = false;
  }

  int last() const {
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
    return current_;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	791b      	ldrb	r3, [r3, #4]
  }
 8007c14:	4618      	mov	r0, r3
 8007c16:	370c      	adds	r7, #12
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <_ZN11ArduinoJson8V730HB226detail7forwardINS0_10JsonStringEEEOT_RNS1_16remove_referenceIS4_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8007c28:	687b      	ldr	r3, [r7, #4]
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	370c      	adds	r7, #12
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr

08007c36 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEE18getResourceManagerEv>:
  // clang-format off
  MemberProxy(const MemberProxy& src) // Error here? See https://arduinojson.org/v7/proxy-non-copyable/
      : upstream_(src.upstream_), key_(src.key_) {}
  // clang-format on

  ResourceManager* getResourceManager() const {
 8007c36:	b580      	push	{r7, lr}
 8007c38:	b082      	sub	sp, #8
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(upstream_);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	3304      	adds	r3, #4
 8007c42:	4618      	mov	r0, r3
 8007c44:	f000 fcf6 	bl	8008634 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_10JsonObjectEEEDTcldtfp_18getResourceManagerEERT_>
 8007c48:	4603      	mov	r3, r0
  }
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3708      	adds	r7, #8
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}

08007c52 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 8007c52:	b580      	push	{r7, lr}
 8007c54:	b082      	sub	sp, #8
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
    return client.getData();
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 fd04 	bl	8008668 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEE7getDataEv>
 8007c60:	4603      	mov	r3, r0
  }
 8007c62:	4618      	mov	r0, r3
 8007c64:	3708      	adds	r7, #8
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}

08007c6a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b082      	sub	sp, #8
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
  return value <= TIn(numeric_limits<TOut>::highest());
 8007c72:	f000 f8c2 	bl	8007dfa <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 8007c76:	4602      	mov	r2, r0
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	bf94      	ite	ls
 8007c7e:	2301      	movls	r3, #1
 8007c80:	2300      	movhi	r3, #0
 8007c82:	b2db      	uxtb	r3, r3
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3708      	adds	r7, #8
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b082      	sub	sp, #8
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  if (value < 0)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	da01      	bge.n	8007c9e <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_+0x12>
    return false;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	e008      	b.n	8007cb0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_+0x24>
  return TOut(value) <= numeric_limits<TOut>::highest();
 8007c9e:	f000 f8ac 	bl	8007dfa <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	bf2c      	ite	cs
 8007caa:	2301      	movcs	r3, #1
 8007cac:	2300      	movcc	r3, #0
 8007cae:	b2db      	uxtb	r3, r3
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3708      	adds	r7, #8
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8007cb8:	b5b0      	push	{r4, r5, r7, lr}
 8007cba:	b082      	sub	sp, #8
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	e9c7 0100 	strd	r0, r1, [r7]
  return value <= TIn(numeric_limits<TOut>::highest());
 8007cc2:	f000 f89a 	bl	8007dfa <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2200      	movs	r2, #0
 8007cca:	461c      	mov	r4, r3
 8007ccc:	4615      	mov	r5, r2
 8007cce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cd2:	4294      	cmp	r4, r2
 8007cd4:	eb75 0303 	sbcs.w	r3, r5, r3
 8007cd8:	bf2c      	ite	cs
 8007cda:	2301      	movcs	r3, #1
 8007cdc:	2300      	movcc	r3, #0
 8007cde:	b2db      	uxtb	r3, r3
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3708      	adds	r7, #8
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bdb0      	pop	{r4, r5, r7, pc}

08007ce8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8007ce8:	b5b0      	push	{r4, r5, r7, lr}
 8007cea:	b082      	sub	sp, #8
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	e9c7 0100 	strd	r0, r1, [r7]
  if (value < 0)
 8007cf2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	da01      	bge.n	8007cfe <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x16>
    return false;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	e00e      	b.n	8007d1c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x34>
  return value <= TIn(numeric_limits<TOut>::highest());
 8007cfe:	f000 f87c 	bl	8007dfa <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 8007d02:	4603      	mov	r3, r0
 8007d04:	2200      	movs	r2, #0
 8007d06:	461c      	mov	r4, r3
 8007d08:	4615      	mov	r5, r2
 8007d0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d0e:	4294      	cmp	r4, r2
 8007d10:	eb75 0303 	sbcs.w	r3, r5, r3
 8007d14:	bfac      	ite	ge
 8007d16:	2301      	movge	r3, #1
 8007d18:	2300      	movlt	r3, #0
 8007d1a:	b2db      	uxtb	r3, r3
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3708      	adds	r7, #8
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bdb0      	pop	{r4, r5, r7, pc}

08007d24 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v>:
  T convertTo() const {
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
    switch (type_) {
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	3b01      	subs	r3, #1
 8007d32:	2b03      	cmp	r3, #3
 8007d34:	d82e      	bhi.n	8007d94 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x70>
 8007d36:	a201      	add	r2, pc, #4	@ (adr r2, 8007d3c <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x18>)
 8007d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d3c:	08007d4d 	.word	0x08007d4d
 8007d40:	08007d5f 	.word	0x08007d5f
 8007d44:	08007d71 	.word	0x08007d71
 8007d48:	08007d83 	.word	0x08007d83
        return convertNumber<T>(value_.asFloat);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	edd3 7a02 	vldr	s15, [r3, #8]
 8007d52:	eeb0 0a67 	vmov.f32	s0, s15
 8007d56:	f7ff fe04 	bl	8007962 <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	e01b      	b.n	8007d96 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x72>
        return convertNumber<T>(value_.asSignedInteger);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007d64:	4610      	mov	r0, r2
 8007d66:	4619      	mov	r1, r3
 8007d68:	f7ff fdd4 	bl	8007914 <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	e012      	b.n	8007d96 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x72>
        return convertNumber<T>(value_.asUnsignedInteger);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007d76:	4610      	mov	r0, r2
 8007d78:	4619      	mov	r1, r3
 8007d7a:	f7ff fdb8 	bl	80078ee <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	e009      	b.n	8007d96 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x72>
        return convertNumber<T>(value_.asDouble);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	ed93 7b02 	vldr	d7, [r3, #8]
 8007d88:	eeb0 0b47 	vmov.f64	d0, d7
 8007d8c:	f7ff fe01 	bl	8007992 <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_>
 8007d90:	4603      	mov	r3, r0
 8007d92:	e000      	b.n	8007d96 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x72>
        return T();
 8007d94:	2300      	movs	r3, #0
  }
 8007d96:	4618      	mov	r0, r3
 8007d98:	3708      	adds	r7, #8
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop

08007da0 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE6lowestEv>:
template <typename T, typename Enable = void>
struct numeric_limits;

template <typename T>
struct numeric_limits<T, enable_if_t<is_unsigned<T>::value>> {
  static constexpr T lowest() {
 8007da0:	b480      	push	{r7}
 8007da2:	af00      	add	r7, sp, #0
    return 0;
 8007da4:	2300      	movs	r3, #0
  }
 8007da6:	4618      	mov	r0, r3
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr

08007db0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	ed87 0a01 	vstr	s0, [r7, #4]
  return value >= numeric_limits<TOut>::lowest() &&
 8007dba:	f7ff fff1 	bl	8007da0 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE6lowestEv>
 8007dbe:	ee07 0a90 	vmov	s15, r0
 8007dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dc6:	ed97 7a01 	vldr	s14, [r7, #4]
 8007dca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dd2:	db0d      	blt.n	8007df0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x40>
         value <= FloatTraits<TIn>::template highest_for<TOut>();
 8007dd4:	2000      	movs	r0, #0
 8007dd6:	f000 fc63 	bl	80086a0 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forImEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_11is_unsignedIS7_EE5valueeqstS7_Li4EEjE4typeE>
 8007dda:	eeb0 7a40 	vmov.f32	s14, s0
  return value >= numeric_limits<TOut>::lowest() &&
 8007dde:	edd7 7a01 	vldr	s15, [r7, #4]
 8007de2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dea:	d801      	bhi.n	8007df0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x40>
 8007dec:	2301      	movs	r3, #1
 8007dee:	e000      	b.n	8007df2 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x42>
 8007df0:	2300      	movs	r3, #0
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3708      	adds	r7, #8
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>:
  static constexpr T highest() {
 8007dfa:	b480      	push	{r7}
 8007dfc:	af00      	add	r7, sp, #0
    return T(-1);
 8007dfe:	f04f 33ff 	mov.w	r3, #4294967295
  }
 8007e02:	4618      	mov	r0, r3
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	ed87 0b00 	vstr	d0, [r7]
  return value >= numeric_limits<TOut>::lowest() &&
 8007e16:	f7ff ffc3 	bl	8007da0 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE6lowestEv>
 8007e1a:	ee07 0a90 	vmov	s15, r0
 8007e1e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007e22:	ed97 6b00 	vldr	d6, [r7]
 8007e26:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e2e:	db0e      	blt.n	8007e4e <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x42>
         value <= numeric_limits<TOut>::highest();
 8007e30:	f7ff ffe3 	bl	8007dfa <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 8007e34:	ee07 0a90 	vmov	s15, r0
 8007e38:	eeb8 7b67 	vcvt.f64.u32	d7, s15
  return value >= numeric_limits<TOut>::lowest() &&
 8007e3c:	ed97 6b00 	vldr	d6, [r7]
 8007e40:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e48:	d801      	bhi.n	8007e4e <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x42>
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e000      	b.n	8007e50 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x44>
 8007e4e:	2300      	movs	r3, #0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3708      	adds	r7, #8
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEE7getDataEv>:

  VariantData* getData() const {
 8007e58:	b590      	push	{r4, r7, lr}
 8007e5a:	b085      	sub	sp, #20
 8007e5c:	af02      	add	r7, sp, #8
 8007e5e:	6078      	str	r0, [r7, #4]
    return VariantData::getMember(
        VariantAttorney::getData(upstream_), key_,
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4618      	mov	r0, r3
 8007e66:	f000 fc2b 	bl	80086c0 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_12JsonDocumentEEEDTcldtfp_7getDataEERT_>
 8007e6a:	4604      	mov	r4, r0
        VariantAttorney::getResourceManager(upstream_));
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4618      	mov	r0, r3
 8007e72:	f7ff fc7d 	bl	8007770 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_12JsonDocumentEEEDTcldtfp_18getResourceManagerEERT_>
 8007e76:	4602      	mov	r2, r0
    return VariantData::getMember(
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	9200      	str	r2, [sp, #0]
 8007e7c:	3304      	adds	r3, #4
 8007e7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007e80:	4620      	mov	r0, r4
 8007e82:	f000 fc29 	bl	80086d8 <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE>
 8007e86:	4603      	mov	r3, r0
  }
 8007e88:	4618      	mov	r0, r3
 8007e8a:	370c      	adds	r7, #12
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd90      	pop	{r4, r7, pc}

08007e90 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b082      	sub	sp, #8
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(upstream_);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f7ff fc67 	bl	8007770 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_12JsonDocumentEEEDTcldtfp_18getResourceManagerEERT_>
 8007ea2:	4603      	mov	r3, r0
  }
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3708      	adds	r7, #8
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>:
  DeserializationError::Code skipSpacesAndComments() {
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b082      	sub	sp, #8
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
      switch (current()) {
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 f82f 	bl	8007f18 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d013      	beq.n	8007ee8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x3c>
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	db1d      	blt.n	8007f00 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x54>
 8007ec4:	2b20      	cmp	r3, #32
 8007ec6:	dc1b      	bgt.n	8007f00 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x54>
 8007ec8:	2b09      	cmp	r3, #9
 8007eca:	db19      	blt.n	8007f00 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x54>
 8007ecc:	3b09      	subs	r3, #9
 8007ece:	4a11      	ldr	r2, [pc, #68]	@ (8007f14 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x68>)
 8007ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8007ed4:	f003 0301 	and.w	r3, r3, #1
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	bf14      	ite	ne
 8007edc:	2301      	movne	r3, #1
 8007ede:	2300      	moveq	r3, #0
 8007ee0:	b2db      	uxtb	r3, r3
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d108      	bne.n	8007ef8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x4c>
 8007ee6:	e00b      	b.n	8007f00 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x54>
          return foundSomething_ ? DeserializationError::IncompleteInput
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	7b1b      	ldrb	r3, [r3, #12]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d001      	beq.n	8007ef4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x48>
 8007ef0:	2302      	movs	r3, #2
                                 : DeserializationError::EmptyInput;
 8007ef2:	e00b      	b.n	8007f0c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x60>
          return foundSomething_ ? DeserializationError::IncompleteInput
 8007ef4:	2301      	movs	r3, #1
                                 : DeserializationError::EmptyInput;
 8007ef6:	e009      	b.n	8007f0c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x60>
          move();
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 fc06 	bl	800870a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
          continue;
 8007efe:	e004      	b.n	8007f0a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x5e>
          foundSomething_ = true;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	731a      	strb	r2, [r3, #12]
          return DeserializationError::Ok;
 8007f06:	2300      	movs	r3, #0
 8007f08:	e000      	b.n	8007f0c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x60>
      switch (current()) {
 8007f0a:	e7d3      	b.n	8007eb4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x8>
  }
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3708      	adds	r7, #8
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	00800013 	.word	0x00800013

08007f18 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>:
  char current() {
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
    return latch_.current();
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	3310      	adds	r3, #16
 8007f24:	60fb      	str	r3, [r7, #12]

  FORCE_INLINE char current() {
    if (!loaded_) {
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	795b      	ldrb	r3, [r3, #5]
 8007f2a:	f083 0301 	eor.w	r3, r3, #1
 8007f2e:	b2db      	uxtb	r3, r3
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d002      	beq.n	8007f3a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv+0x22>
      load();
 8007f34:	68f8      	ldr	r0, [r7, #12]
 8007f36:	f000 ff1a 	bl	8008d6e <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE4loadEv>
    }
    return current_;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	791b      	ldrb	r3, [r3, #4]
  }
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3710      	adds	r7, #16
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}

08007f46 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code parseArray(
 8007f46:	b590      	push	{r4, r7, lr}
 8007f48:	b089      	sub	sp, #36	@ 0x24
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	60f8      	str	r0, [r7, #12]
 8007f4e:	60b9      	str	r1, [r7, #8]
 8007f50:	713a      	strb	r2, [r7, #4]
 8007f52:	703b      	strb	r3, [r7, #0]
    if (nestingLimit.reached())
 8007f54:	463b      	mov	r3, r7
 8007f56:	4618      	mov	r0, r3
 8007f58:	f7fd fa03 	bl	8005362 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d001      	beq.n	8007f66 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x20>
      return DeserializationError::TooDeep;
 8007f62:	2305      	movs	r3, #5
 8007f64:	e071      	b.n	800804a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
    move();
 8007f66:	68f8      	ldr	r0, [r7, #12]
 8007f68:	f000 fbcf 	bl	800870a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    err = skipSpacesAndComments();
 8007f6c:	68f8      	ldr	r0, [r7, #12]
 8007f6e:	f7ff ff9d 	bl	8007eac <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8007f72:	4603      	mov	r3, r0
 8007f74:	77fb      	strb	r3, [r7, #31]
    if (err)
 8007f76:	7ffb      	ldrb	r3, [r7, #31]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d001      	beq.n	8007f80 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x3a>
      return err;
 8007f7c:	7ffb      	ldrb	r3, [r7, #31]
 8007f7e:	e064      	b.n	800804a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
    if (eat(']'))
 8007f80:	215d      	movs	r1, #93	@ 0x5d
 8007f82:	68f8      	ldr	r0, [r7, #12]
 8007f84:	f000 fbce 	bl	8008724 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d001      	beq.n	8007f92 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x4c>
      return DeserializationError::Ok;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	e05b      	b.n	800804a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
    TFilter elementFilter = filter[0UL];
 8007f92:	2300      	movs	r3, #0
 8007f94:	617b      	str	r3, [r7, #20]
 8007f96:	f107 0214 	add.w	r2, r7, #20
 8007f9a:	1d3b      	adds	r3, r7, #4
 8007f9c:	4611      	mov	r1, r2
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f000 fbdd 	bl	800875e <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilterixImEES2_RKT_>
      if (elementFilter.allow()) {
 8007fa4:	f107 0310 	add.w	r3, r7, #16
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f7fd f97d 	bl	80052a8 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter5allowEv>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d01c      	beq.n	8007fee <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xa8>
        VariantData* value = array.addElement(resources_);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	699b      	ldr	r3, [r3, #24]
 8007fb8:	4619      	mov	r1, r3
 8007fba:	68b8      	ldr	r0, [r7, #8]
 8007fbc:	f7fc fd3f 	bl	8004a3e <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE>
 8007fc0:	61b8      	str	r0, [r7, #24]
        if (!value)
 8007fc2:	69bb      	ldr	r3, [r7, #24]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d101      	bne.n	8007fcc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x86>
          return DeserializationError::NoMemory;
 8007fc8:	2304      	movs	r3, #4
 8007fca:	e03e      	b.n	800804a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
        err = parseVariant(*value, elementFilter, nestingLimit.decrement());
 8007fcc:	463b      	mov	r3, r7
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7fd f9b4 	bl	800533c <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	4622      	mov	r2, r4
 8007fd8:	69b9      	ldr	r1, [r7, #24]
 8007fda:	68f8      	ldr	r0, [r7, #12]
 8007fdc:	f7ff fd26 	bl	8007a2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	77fb      	strb	r3, [r7, #31]
        if (err)
 8007fe4:	7ffb      	ldrb	r3, [r7, #31]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d011      	beq.n	800800e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xc8>
          return err;
 8007fea:	7ffb      	ldrb	r3, [r7, #31]
 8007fec:	e02d      	b.n	800804a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
        err = skipVariant(nestingLimit.decrement());
 8007fee:	463b      	mov	r3, r7
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f7fd f9a3 	bl	800533c <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	68f8      	ldr	r0, [r7, #12]
 8007ffc:	f000 fbbc 	bl	8008778 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 8008000:	4603      	mov	r3, r0
 8008002:	77fb      	strb	r3, [r7, #31]
        if (err)
 8008004:	7ffb      	ldrb	r3, [r7, #31]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d001      	beq.n	800800e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xc8>
          return err;
 800800a:	7ffb      	ldrb	r3, [r7, #31]
 800800c:	e01d      	b.n	800804a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
      err = skipSpacesAndComments();
 800800e:	68f8      	ldr	r0, [r7, #12]
 8008010:	f7ff ff4c 	bl	8007eac <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8008014:	4603      	mov	r3, r0
 8008016:	77fb      	strb	r3, [r7, #31]
      if (err)
 8008018:	7ffb      	ldrb	r3, [r7, #31]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d001      	beq.n	8008022 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xdc>
        return err;
 800801e:	7ffb      	ldrb	r3, [r7, #31]
 8008020:	e013      	b.n	800804a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
      if (eat(']'))
 8008022:	215d      	movs	r1, #93	@ 0x5d
 8008024:	68f8      	ldr	r0, [r7, #12]
 8008026:	f000 fb7d 	bl	8008724 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 800802a:	4603      	mov	r3, r0
 800802c:	2b00      	cmp	r3, #0
 800802e:	d001      	beq.n	8008034 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xee>
        return DeserializationError::Ok;
 8008030:	2300      	movs	r3, #0
 8008032:	e00a      	b.n	800804a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
      if (!eat(','))
 8008034:	212c      	movs	r1, #44	@ 0x2c
 8008036:	68f8      	ldr	r0, [r7, #12]
 8008038:	f000 fb74 	bl	8008724 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 800803c:	4603      	mov	r3, r0
 800803e:	f083 0301 	eor.w	r3, r3, #1
 8008042:	b2db      	uxtb	r3, r3
 8008044:	2b00      	cmp	r3, #0
 8008046:	d0ad      	beq.n	8007fa4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x5e>
        return DeserializationError::InvalidInput;
 8008048:	2303      	movs	r3, #3
  }
 800804a:	4618      	mov	r0, r3
 800804c:	3724      	adds	r7, #36	@ 0x24
 800804e:	46bd      	mov	sp, r7
 8008050:	bd90      	pop	{r4, r7, pc}

08008052 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code skipArray(
 8008052:	b580      	push	{r7, lr}
 8008054:	b084      	sub	sp, #16
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
 800805a:	7039      	strb	r1, [r7, #0]
    if (nestingLimit.reached())
 800805c:	463b      	mov	r3, r7
 800805e:	4618      	mov	r0, r3
 8008060:	f7fd f97f 	bl	8005362 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>
 8008064:	4603      	mov	r3, r0
 8008066:	2b00      	cmp	r3, #0
 8008068:	d001      	beq.n	800806e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x1c>
      return DeserializationError::TooDeep;
 800806a:	2305      	movs	r3, #5
 800806c:	e030      	b.n	80080d0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
    move();
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 fb4b 	bl	800870a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      err = skipVariant(nestingLimit.decrement());
 8008074:	463b      	mov	r3, r7
 8008076:	4618      	mov	r0, r3
 8008078:	f7fd f960 	bl	800533c <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 800807c:	4603      	mov	r3, r0
 800807e:	4619      	mov	r1, r3
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 fb79 	bl	8008778 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 8008086:	4603      	mov	r3, r0
 8008088:	73fb      	strb	r3, [r7, #15]
      if (err)
 800808a:	7bfb      	ldrb	r3, [r7, #15]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d001      	beq.n	8008094 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x42>
        return err;
 8008090:	7bfb      	ldrb	r3, [r7, #15]
 8008092:	e01d      	b.n	80080d0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
      err = skipSpacesAndComments();
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f7ff ff09 	bl	8007eac <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 800809a:	4603      	mov	r3, r0
 800809c:	73fb      	strb	r3, [r7, #15]
      if (err)
 800809e:	7bfb      	ldrb	r3, [r7, #15]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d001      	beq.n	80080a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x56>
        return err;
 80080a4:	7bfb      	ldrb	r3, [r7, #15]
 80080a6:	e013      	b.n	80080d0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
      if (eat(']'))
 80080a8:	215d      	movs	r1, #93	@ 0x5d
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 fb3a 	bl	8008724 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 80080b0:	4603      	mov	r3, r0
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d001      	beq.n	80080ba <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x68>
        return DeserializationError::Ok;
 80080b6:	2300      	movs	r3, #0
 80080b8:	e00a      	b.n	80080d0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
      if (!eat(','))
 80080ba:	212c      	movs	r1, #44	@ 0x2c
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 fb31 	bl	8008724 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 80080c2:	4603      	mov	r3, r0
 80080c4:	f083 0301 	eor.w	r3, r3, #1
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d0d2      	beq.n	8008074 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x22>
        return DeserializationError::InvalidInput;
 80080ce:	2303      	movs	r3, #3
  }
 80080d0:	4618      	mov	r0, r3
 80080d2:	3710      	adds	r7, #16
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code parseObject(
 80080d8:	b590      	push	{r4, r7, lr}
 80080da:	b091      	sub	sp, #68	@ 0x44
 80080dc:	af02      	add	r7, sp, #8
 80080de:	60f8      	str	r0, [r7, #12]
 80080e0:	60b9      	str	r1, [r7, #8]
 80080e2:	713a      	strb	r2, [r7, #4]
 80080e4:	703b      	strb	r3, [r7, #0]
    if (nestingLimit.reached())
 80080e6:	463b      	mov	r3, r7
 80080e8:	4618      	mov	r0, r3
 80080ea:	f7fd f93a 	bl	8005362 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>
 80080ee:	4603      	mov	r3, r0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d001      	beq.n	80080f8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x20>
      return DeserializationError::TooDeep;
 80080f4:	2305      	movs	r3, #5
 80080f6:	e0d7      	b.n	80082a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
    move();
 80080f8:	68f8      	ldr	r0, [r7, #12]
 80080fa:	f000 fb06 	bl	800870a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    err = skipSpacesAndComments();
 80080fe:	68f8      	ldr	r0, [r7, #12]
 8008100:	f7ff fed4 	bl	8007eac <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8008104:	4603      	mov	r3, r0
 8008106:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (err)
 800810a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800810e:	2b00      	cmp	r3, #0
 8008110:	d002      	beq.n	8008118 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x40>
      return err;
 8008112:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008116:	e0c7      	b.n	80082a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
    if (eat('}'))
 8008118:	217d      	movs	r1, #125	@ 0x7d
 800811a:	68f8      	ldr	r0, [r7, #12]
 800811c:	f000 fb02 	bl	8008724 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8008120:	4603      	mov	r3, r0
 8008122:	2b00      	cmp	r3, #0
 8008124:	d001      	beq.n	800812a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x52>
      return DeserializationError::Ok;
 8008126:	2300      	movs	r3, #0
 8008128:	e0be      	b.n	80082a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      err = parseKey();
 800812a:	68f8      	ldr	r0, [r7, #12]
 800812c:	f000 fbba 	bl	80088a4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE8parseKeyEv>
 8008130:	4603      	mov	r3, r0
 8008132:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      if (err)
 8008136:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800813a:	2b00      	cmp	r3, #0
 800813c:	d002      	beq.n	8008144 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x6c>
        return err;
 800813e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008142:	e0b1      	b.n	80082a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      err = skipSpacesAndComments();
 8008144:	68f8      	ldr	r0, [r7, #12]
 8008146:	f7ff feb1 	bl	8007eac <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 800814a:	4603      	mov	r3, r0
 800814c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      if (err)
 8008150:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008154:	2b00      	cmp	r3, #0
 8008156:	d002      	beq.n	800815e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x86>
        return err;
 8008158:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800815c:	e0a4      	b.n	80082a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      if (!eat(':'))
 800815e:	213a      	movs	r1, #58	@ 0x3a
 8008160:	68f8      	ldr	r0, [r7, #12]
 8008162:	f000 fadf 	bl	8008724 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8008166:	4603      	mov	r3, r0
 8008168:	f083 0301 	eor.w	r3, r3, #1
 800816c:	b2db      	uxtb	r3, r3
 800816e:	2b00      	cmp	r3, #0
 8008170:	d001      	beq.n	8008176 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x9e>
        return DeserializationError::InvalidInput;
 8008172:	2303      	movs	r3, #3
 8008174:	e098      	b.n	80082a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      JsonString key = stringBuilder_.str();
 8008176:	68fa      	ldr	r2, [r7, #12]
 8008178:	f107 0314 	add.w	r3, r7, #20
 800817c:	4611      	mov	r1, r2
 800817e:	4618      	mov	r0, r3
 8008180:	f7fc ff92 	bl	80050a8 <_ZNK11ArduinoJson8V730HB226detail13StringBuilder3strEv>
      TFilter memberFilter = filter[key];
 8008184:	f107 0214 	add.w	r2, r7, #20
 8008188:	1d3b      	adds	r3, r7, #4
 800818a:	4611      	mov	r1, r2
 800818c:	4618      	mov	r0, r3
 800818e:	f000 fba9 	bl	80088e4 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilterixINS0_10JsonStringEEES2_RKT_>
      if (memberFilter.allow()) {
 8008192:	f107 0310 	add.w	r3, r7, #16
 8008196:	4618      	mov	r0, r3
 8008198:	f7fd f886 	bl	80052a8 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter5allowEv>
 800819c:	4603      	mov	r3, r0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d040      	beq.n	8008224 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x14c>
        auto member = object.getMember(adaptString(key), resources_);
 80081a2:	f107 0320 	add.w	r3, r7, #32
 80081a6:	f107 0214 	add.w	r2, r7, #20
 80081aa:	4611      	mov	r1, r2
 80081ac:	4618      	mov	r0, r3
 80081ae:	f7fe f9c0 	bl	8006532 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRNS0_10JsonStringEEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES8_NS1_9remove_cvINS1_16remove_referenceIS8_E4typeEE4typeEE4typeEvE13AdaptedStringEOS8_>
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	699b      	ldr	r3, [r3, #24]
 80081b6:	9300      	str	r3, [sp, #0]
 80081b8:	f107 0320 	add.w	r3, r7, #32
 80081bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80081be:	68b8      	ldr	r0, [r7, #8]
 80081c0:	f7fe ff21 	bl	8007006 <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE>
 80081c4:	6378      	str	r0, [r7, #52]	@ 0x34
        if (!member) {
 80081c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d111      	bne.n	80081f0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x118>
          auto savedKey = stringBuilder_.save();
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	4618      	mov	r0, r3
 80081d0:	f7fc fee6 	bl	8004fa0 <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv>
 80081d4:	62f8      	str	r0, [r7, #44]	@ 0x2c
          member = object.addMember(savedKey, resources_);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	699b      	ldr	r3, [r3, #24]
 80081da:	461a      	mov	r2, r3
 80081dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80081de:	68b8      	ldr	r0, [r7, #8]
 80081e0:	f000 fb8c 	bl	80088fc <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>
 80081e4:	6378      	str	r0, [r7, #52]	@ 0x34
          if (!member)
 80081e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d107      	bne.n	80081fc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x124>
            return DeserializationError::NoMemory;
 80081ec:	2304      	movs	r3, #4
 80081ee:	e05b      	b.n	80082a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
          member->clear(resources_);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	699b      	ldr	r3, [r3, #24]
 80081f4:	4619      	mov	r1, r3
 80081f6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80081f8:	f7fc ffd6 	bl	80051a8 <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
        err = parseVariant(*member, memberFilter, nestingLimit.decrement());
 80081fc:	463b      	mov	r3, r7
 80081fe:	4618      	mov	r0, r3
 8008200:	f7fd f89c 	bl	800533c <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 8008204:	4603      	mov	r3, r0
 8008206:	4622      	mov	r2, r4
 8008208:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800820a:	68f8      	ldr	r0, [r7, #12]
 800820c:	f7ff fc0e 	bl	8007a2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 8008210:	4603      	mov	r3, r0
 8008212:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (err)
 8008216:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800821a:	2b00      	cmp	r3, #0
 800821c:	d015      	beq.n	800824a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x172>
          return err;
 800821e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008222:	e041      	b.n	80082a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
        err = skipVariant(nestingLimit.decrement());
 8008224:	463b      	mov	r3, r7
 8008226:	4618      	mov	r0, r3
 8008228:	f7fd f888 	bl	800533c <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 800822c:	4603      	mov	r3, r0
 800822e:	4619      	mov	r1, r3
 8008230:	68f8      	ldr	r0, [r7, #12]
 8008232:	f000 faa1 	bl	8008778 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 8008236:	4603      	mov	r3, r0
 8008238:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (err)
 800823c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008240:	2b00      	cmp	r3, #0
 8008242:	d002      	beq.n	800824a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x172>
          return err;
 8008244:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008248:	e02e      	b.n	80082a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      err = skipSpacesAndComments();
 800824a:	68f8      	ldr	r0, [r7, #12]
 800824c:	f7ff fe2e 	bl	8007eac <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8008250:	4603      	mov	r3, r0
 8008252:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      if (err)
 8008256:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800825a:	2b00      	cmp	r3, #0
 800825c:	d002      	beq.n	8008264 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x18c>
        return err;
 800825e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008262:	e021      	b.n	80082a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      if (eat('}'))
 8008264:	217d      	movs	r1, #125	@ 0x7d
 8008266:	68f8      	ldr	r0, [r7, #12]
 8008268:	f000 fa5c 	bl	8008724 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 800826c:	4603      	mov	r3, r0
 800826e:	2b00      	cmp	r3, #0
 8008270:	d001      	beq.n	8008276 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x19e>
        return DeserializationError::Ok;
 8008272:	2300      	movs	r3, #0
 8008274:	e018      	b.n	80082a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      if (!eat(','))
 8008276:	212c      	movs	r1, #44	@ 0x2c
 8008278:	68f8      	ldr	r0, [r7, #12]
 800827a:	f000 fa53 	bl	8008724 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 800827e:	4603      	mov	r3, r0
 8008280:	f083 0301 	eor.w	r3, r3, #1
 8008284:	b2db      	uxtb	r3, r3
 8008286:	2b00      	cmp	r3, #0
 8008288:	d001      	beq.n	800828e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1b6>
        return DeserializationError::InvalidInput;
 800828a:	2303      	movs	r3, #3
 800828c:	e00c      	b.n	80082a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      err = skipSpacesAndComments();
 800828e:	68f8      	ldr	r0, [r7, #12]
 8008290:	f7ff fe0c 	bl	8007eac <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8008294:	4603      	mov	r3, r0
 8008296:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      if (err)
 800829a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800829e:	2b00      	cmp	r3, #0
 80082a0:	f43f af43 	beq.w	800812a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x52>
        return err;
 80082a4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
  }
 80082a8:	4618      	mov	r0, r3
 80082aa:	373c      	adds	r7, #60	@ 0x3c
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd90      	pop	{r4, r7, pc}

080082b0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code skipObject(
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b084      	sub	sp, #16
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	7039      	strb	r1, [r7, #0]
    if (nestingLimit.reached())
 80082ba:	463b      	mov	r3, r7
 80082bc:	4618      	mov	r0, r3
 80082be:	f7fd f850 	bl	8005362 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>
 80082c2:	4603      	mov	r3, r0
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d001      	beq.n	80082cc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x1c>
      return DeserializationError::TooDeep;
 80082c8:	2305      	movs	r3, #5
 80082ca:	e06d      	b.n	80083a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
    move();
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f000 fa1c 	bl	800870a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    err = skipSpacesAndComments();
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f7ff fdea 	bl	8007eac <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 80082d8:	4603      	mov	r3, r0
 80082da:	73fb      	strb	r3, [r7, #15]
    if (err)
 80082dc:	7bfb      	ldrb	r3, [r7, #15]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d001      	beq.n	80082e6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x36>
      return err;
 80082e2:	7bfb      	ldrb	r3, [r7, #15]
 80082e4:	e060      	b.n	80083a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
    if (eat('}'))
 80082e6:	217d      	movs	r1, #125	@ 0x7d
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 fa1b 	bl	8008724 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 80082ee:	4603      	mov	r3, r0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d001      	beq.n	80082f8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x48>
      return DeserializationError::Ok;
 80082f4:	2300      	movs	r3, #0
 80082f6:	e057      	b.n	80083a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipKey();
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 fb54 	bl	80089a6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7skipKeyEv>
 80082fe:	4603      	mov	r3, r0
 8008300:	73fb      	strb	r3, [r7, #15]
      if (err)
 8008302:	7bfb      	ldrb	r3, [r7, #15]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d001      	beq.n	800830c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x5c>
        return err;
 8008308:	7bfb      	ldrb	r3, [r7, #15]
 800830a:	e04d      	b.n	80083a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipSpacesAndComments();
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f7ff fdcd 	bl	8007eac <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8008312:	4603      	mov	r3, r0
 8008314:	73fb      	strb	r3, [r7, #15]
      if (err)
 8008316:	7bfb      	ldrb	r3, [r7, #15]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d001      	beq.n	8008320 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x70>
        return err;
 800831c:	7bfb      	ldrb	r3, [r7, #15]
 800831e:	e043      	b.n	80083a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      if (!eat(':'))
 8008320:	213a      	movs	r1, #58	@ 0x3a
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 f9fe 	bl	8008724 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8008328:	4603      	mov	r3, r0
 800832a:	f083 0301 	eor.w	r3, r3, #1
 800832e:	b2db      	uxtb	r3, r3
 8008330:	2b00      	cmp	r3, #0
 8008332:	d001      	beq.n	8008338 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x88>
        return DeserializationError::InvalidInput;
 8008334:	2303      	movs	r3, #3
 8008336:	e037      	b.n	80083a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipVariant(nestingLimit.decrement());
 8008338:	463b      	mov	r3, r7
 800833a:	4618      	mov	r0, r3
 800833c:	f7fc fffe 	bl	800533c <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 8008340:	4603      	mov	r3, r0
 8008342:	4619      	mov	r1, r3
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 fa17 	bl	8008778 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 800834a:	4603      	mov	r3, r0
 800834c:	73fb      	strb	r3, [r7, #15]
      if (err)
 800834e:	7bfb      	ldrb	r3, [r7, #15]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d001      	beq.n	8008358 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xa8>
        return err;
 8008354:	7bfb      	ldrb	r3, [r7, #15]
 8008356:	e027      	b.n	80083a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipSpacesAndComments();
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f7ff fda7 	bl	8007eac <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 800835e:	4603      	mov	r3, r0
 8008360:	73fb      	strb	r3, [r7, #15]
      if (err)
 8008362:	7bfb      	ldrb	r3, [r7, #15]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d001      	beq.n	800836c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xbc>
        return err;
 8008368:	7bfb      	ldrb	r3, [r7, #15]
 800836a:	e01d      	b.n	80083a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      if (eat('}'))
 800836c:	217d      	movs	r1, #125	@ 0x7d
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 f9d8 	bl	8008724 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8008374:	4603      	mov	r3, r0
 8008376:	2b00      	cmp	r3, #0
 8008378:	d001      	beq.n	800837e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xce>
        return DeserializationError::Ok;
 800837a:	2300      	movs	r3, #0
 800837c:	e014      	b.n	80083a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      if (!eat(','))
 800837e:	212c      	movs	r1, #44	@ 0x2c
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f000 f9cf 	bl	8008724 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8008386:	4603      	mov	r3, r0
 8008388:	f083 0301 	eor.w	r3, r3, #1
 800838c:	b2db      	uxtb	r3, r3
 800838e:	2b00      	cmp	r3, #0
 8008390:	d001      	beq.n	8008396 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xe6>
        return DeserializationError::InvalidInput;
 8008392:	2303      	movs	r3, #3
 8008394:	e008      	b.n	80083a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipSpacesAndComments();
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f7ff fd88 	bl	8007eac <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 800839c:	4603      	mov	r3, r0
 800839e:	73fb      	strb	r3, [r7, #15]
      if (err)
 80083a0:	7bfb      	ldrb	r3, [r7, #15]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d0a8      	beq.n	80082f8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x48>
        return err;
 80083a6:	7bfb      	ldrb	r3, [r7, #15]
  }
 80083a8:	4618      	mov	r0, r3
 80083aa:	3710      	adds	r7, #16
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16parseStringValueERNS1_11VariantDataE>:
  DeserializationError::Code parseStringValue(VariantData& variant) {
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	6039      	str	r1, [r7, #0]
    stringBuilder_.startString();
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	4618      	mov	r0, r3
 80083be:	f7fc fdd7 	bl	8004f70 <_ZN11ArduinoJson8V730HB226detail13StringBuilder11startStringEv>
    err = parseQuotedString();
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 fb0b 	bl	80089de <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv>
 80083c8:	4603      	mov	r3, r0
 80083ca:	73fb      	strb	r3, [r7, #15]
    if (err)
 80083cc:	7bfb      	ldrb	r3, [r7, #15]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d001      	beq.n	80083d6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16parseStringValueERNS1_11VariantDataE+0x26>
      return err;
 80083d2:	7bfb      	ldrb	r3, [r7, #15]
 80083d4:	e009      	b.n	80083ea <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16parseStringValueERNS1_11VariantDataE+0x3a>
    variant.setOwnedString(stringBuilder_.save());
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	4618      	mov	r0, r3
 80083da:	f7fc fde1 	bl	8004fa0 <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv>
 80083de:	4603      	mov	r3, r0
 80083e0:	4619      	mov	r1, r3
 80083e2:	6838      	ldr	r0, [r7, #0]
 80083e4:	f7fc f83f 	bl	8004466 <_ZN11ArduinoJson8V730HB226detail11VariantData14setOwnedStringEPNS1_10StringNodeE>
    return DeserializationError::Ok;
 80083e8:	2300      	movs	r3, #0
  }
 80083ea:	4618      	mov	r0, r3
 80083ec:	3710      	adds	r7, #16
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}

080083f2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv>:
  DeserializationError::Code skipQuotedString() {
 80083f2:	b580      	push	{r7, lr}
 80083f4:	b084      	sub	sp, #16
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
    const char stopChar = current();
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f7ff fd8c 	bl	8007f18 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8008400:	4603      	mov	r3, r0
 8008402:	73fb      	strb	r3, [r7, #15]
    move();
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 f980 	bl	800870a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      char c = current();
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f7ff fd84 	bl	8007f18 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8008410:	4603      	mov	r3, r0
 8008412:	73bb      	strb	r3, [r7, #14]
      move();
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 f978 	bl	800870a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      if (c == stopChar)
 800841a:	7bba      	ldrb	r2, [r7, #14]
 800841c:	7bfb      	ldrb	r3, [r7, #15]
 800841e:	429a      	cmp	r2, r3
 8008420:	d016      	beq.n	8008450 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x5e>
      if (c == '\0')
 8008422:	7bbb      	ldrb	r3, [r7, #14]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d101      	bne.n	800842c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x3a>
        return DeserializationError::IncompleteInput;
 8008428:	2302      	movs	r3, #2
 800842a:	e013      	b.n	8008454 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x62>
      if (c == '\\') {
 800842c:	7bbb      	ldrb	r3, [r7, #14]
 800842e:	2b5c      	cmp	r3, #92	@ 0x5c
 8008430:	d1eb      	bne.n	800840a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x18>
        if (current() != '\0')
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f7ff fd70 	bl	8007f18 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8008438:	4603      	mov	r3, r0
 800843a:	2b00      	cmp	r3, #0
 800843c:	bf14      	ite	ne
 800843e:	2301      	movne	r3, #1
 8008440:	2300      	moveq	r3, #0
 8008442:	b2db      	uxtb	r3, r3
 8008444:	2b00      	cmp	r3, #0
 8008446:	d0e0      	beq.n	800840a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x18>
          move();
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 f95e 	bl	800870a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    for (;;) {
 800844e:	e7dc      	b.n	800840a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x18>
        break;
 8008450:	bf00      	nop
    return DeserializationError::Ok;
 8008452:	2300      	movs	r3, #0
  }
 8008454:	4618      	mov	r0, r3
 8008456:	3710      	adds	r7, #16
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>:
  DeserializationError::Code skipKeyword(const char* s) {
 800845c:	b580      	push	{r7, lr}
 800845e:	b084      	sub	sp, #16
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	6039      	str	r1, [r7, #0]
    while (*s) {
 8008466:	e016      	b.n	8008496 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x3a>
      char c = current();
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f7ff fd55 	bl	8007f18 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 800846e:	4603      	mov	r3, r0
 8008470:	73fb      	strb	r3, [r7, #15]
      if (c == '\0')
 8008472:	7bfb      	ldrb	r3, [r7, #15]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d101      	bne.n	800847c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x20>
        return DeserializationError::IncompleteInput;
 8008478:	2302      	movs	r3, #2
 800847a:	e011      	b.n	80084a0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x44>
      if (*s != c)
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	7bfa      	ldrb	r2, [r7, #15]
 8008482:	429a      	cmp	r2, r3
 8008484:	d001      	beq.n	800848a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x2e>
        return DeserializationError::InvalidInput;
 8008486:	2303      	movs	r3, #3
 8008488:	e00a      	b.n	80084a0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x44>
      ++s;
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	3301      	adds	r3, #1
 800848e:	603b      	str	r3, [r7, #0]
      move();
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 f93a 	bl	800870a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    while (*s) {
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d1e4      	bne.n	8008468 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0xc>
    return DeserializationError::Ok;
 800849e:	2300      	movs	r3, #0
  }
 80084a0:	4618      	mov	r0, r3
 80084a2:	3710      	adds	r7, #16
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE>:
  DeserializationError::Code parseNumericValue(VariantData& result) {
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b08a      	sub	sp, #40	@ 0x28
 80084ac:	af02      	add	r7, sp, #8
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	6039      	str	r1, [r7, #0]
    uint8_t n = 0;
 80084b2:	2300      	movs	r3, #0
 80084b4:	77fb      	strb	r3, [r7, #31]
    char c = current();
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f7ff fd2e 	bl	8007f18 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 80084bc:	4603      	mov	r3, r0
 80084be:	77bb      	strb	r3, [r7, #30]
    while (canBeInNumber(c) && n < 63) {
 80084c0:	e00f      	b.n	80084e2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x3a>
      move();
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 f921 	bl	800870a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      buffer_[n++] = c;
 80084c8:	7fba      	ldrb	r2, [r7, #30]
 80084ca:	7ffb      	ldrb	r3, [r7, #31]
 80084cc:	1c59      	adds	r1, r3, #1
 80084ce:	77f9      	strb	r1, [r7, #31]
 80084d0:	4619      	mov	r1, r3
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	440b      	add	r3, r1
 80084d6:	771a      	strb	r2, [r3, #28]
      c = current();
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f7ff fd1d 	bl	8007f18 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 80084de:	4603      	mov	r3, r0
 80084e0:	77bb      	strb	r3, [r7, #30]
    while (canBeInNumber(c) && n < 63) {
 80084e2:	7fbb      	ldrb	r3, [r7, #30]
 80084e4:	4618      	mov	r0, r3
 80084e6:	f000 fafb 	bl	8008ae0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc>
 80084ea:	4603      	mov	r3, r0
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d004      	beq.n	80084fa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x52>
 80084f0:	7ffb      	ldrb	r3, [r7, #31]
 80084f2:	2b3e      	cmp	r3, #62	@ 0x3e
 80084f4:	d801      	bhi.n	80084fa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x52>
 80084f6:	2301      	movs	r3, #1
 80084f8:	e000      	b.n	80084fc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x54>
 80084fa:	2300      	movs	r3, #0
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d1e0      	bne.n	80084c2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x1a>
    buffer_[n] = 0;
 8008500:	7ffb      	ldrb	r3, [r7, #31]
 8008502:	687a      	ldr	r2, [r7, #4]
 8008504:	4413      	add	r3, r2
 8008506:	2200      	movs	r2, #0
 8008508:	771a      	strb	r2, [r3, #28]
    auto number = parseNumber(buffer_);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f103 021c 	add.w	r2, r3, #28
 8008510:	f107 0308 	add.w	r3, r7, #8
 8008514:	4611      	mov	r1, r2
 8008516:	4618      	mov	r0, r3
 8008518:	f7fd f8e0 	bl	80056dc <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>
    switch (number.type()) {
 800851c:	f107 0308 	add.w	r3, r7, #8
 8008520:	4618      	mov	r0, r3
 8008522:	f7fd f894 	bl	800564e <_ZNK11ArduinoJson8V730HB226detail6Number4typeEv>
 8008526:	4603      	mov	r3, r0
 8008528:	3b01      	subs	r3, #1
 800852a:	2b03      	cmp	r3, #3
 800852c:	d85e      	bhi.n	80085ec <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x144>
 800852e:	a201      	add	r2, pc, #4	@ (adr r2, 8008534 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x8c>)
 8008530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008534:	08008595 	.word	0x08008595
 8008538:	0800856d 	.word	0x0800856d
 800853c:	08008545 	.word	0x08008545
 8008540:	080085c1 	.word	0x080085c1
        if (result.setInteger(number.asUnsignedInteger(), resources_))
 8008544:	f107 0308 	add.w	r3, r7, #8
 8008548:	4618      	mov	r0, r3
 800854a:	f7fd f89a 	bl	8005682 <_ZNK11ArduinoJson8V730HB226detail6Number17asUnsignedIntegerEv>
 800854e:	4602      	mov	r2, r0
 8008550:	460b      	mov	r3, r1
 8008552:	6879      	ldr	r1, [r7, #4]
 8008554:	6989      	ldr	r1, [r1, #24]
 8008556:	9100      	str	r1, [sp, #0]
 8008558:	6838      	ldr	r0, [r7, #0]
 800855a:	f000 fae5 	bl	8008b28 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>
 800855e:	4603      	mov	r3, r0
 8008560:	2b00      	cmp	r3, #0
 8008562:	d001      	beq.n	8008568 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0xc0>
          return DeserializationError::Ok;
 8008564:	2300      	movs	r3, #0
 8008566:	e042      	b.n	80085ee <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
          return DeserializationError::NoMemory;
 8008568:	2304      	movs	r3, #4
 800856a:	e040      	b.n	80085ee <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
        if (result.setInteger(number.asSignedInteger(), resources_))
 800856c:	f107 0308 	add.w	r3, r7, #8
 8008570:	4618      	mov	r0, r3
 8008572:	f7fd f878 	bl	8005666 <_ZNK11ArduinoJson8V730HB226detail6Number15asSignedIntegerEv>
 8008576:	4602      	mov	r2, r0
 8008578:	460b      	mov	r3, r1
 800857a:	6879      	ldr	r1, [r7, #4]
 800857c:	6989      	ldr	r1, [r1, #24]
 800857e:	9100      	str	r1, [sp, #0]
 8008580:	6838      	ldr	r0, [r7, #0]
 8008582:	f000 fb13 	bl	8008bac <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>
 8008586:	4603      	mov	r3, r0
 8008588:	2b00      	cmp	r3, #0
 800858a:	d001      	beq.n	8008590 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0xe8>
          return DeserializationError::Ok;
 800858c:	2300      	movs	r3, #0
 800858e:	e02e      	b.n	80085ee <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
          return DeserializationError::NoMemory;
 8008590:	2304      	movs	r3, #4
 8008592:	e02c      	b.n	80085ee <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
        if (result.setFloat(number.asFloat(), resources_))
 8008594:	f107 0308 	add.w	r3, r7, #8
 8008598:	4618      	mov	r0, r3
 800859a:	f7fd f880 	bl	800569e <_ZNK11ArduinoJson8V730HB226detail6Number7asFloatEv>
 800859e:	eef0 7a40 	vmov.f32	s15, s0
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	699b      	ldr	r3, [r3, #24]
 80085a6:	4619      	mov	r1, r3
 80085a8:	eeb0 0a67 	vmov.f32	s0, s15
 80085ac:	6838      	ldr	r0, [r7, #0]
 80085ae:	f000 fb3f 	bl	8008c30 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIfEENS1_9enable_ifIXeqstT_Li4EEbE4typeES5_PNS1_15ResourceManagerE>
 80085b2:	4603      	mov	r3, r0
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d001      	beq.n	80085bc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x114>
          return DeserializationError::Ok;
 80085b8:	2300      	movs	r3, #0
 80085ba:	e018      	b.n	80085ee <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
          return DeserializationError::NoMemory;
 80085bc:	2304      	movs	r3, #4
 80085be:	e016      	b.n	80085ee <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
        if (result.setFloat(number.asDouble(), resources_))
 80085c0:	f107 0308 	add.w	r3, r7, #8
 80085c4:	4618      	mov	r0, r3
 80085c6:	f7fd f879 	bl	80056bc <_ZNK11ArduinoJson8V730HB226detail6Number8asDoubleEv>
 80085ca:	eeb0 7b40 	vmov.f64	d7, d0
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	699b      	ldr	r3, [r3, #24]
 80085d2:	4619      	mov	r1, r3
 80085d4:	eeb0 0b47 	vmov.f64	d0, d7
 80085d8:	6838      	ldr	r0, [r7, #0]
 80085da:	f000 fb3d 	bl	8008c58 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE>
 80085de:	4603      	mov	r3, r0
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d001      	beq.n	80085e8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x140>
          return DeserializationError::Ok;
 80085e4:	2300      	movs	r3, #0
 80085e6:	e002      	b.n	80085ee <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
          return DeserializationError::NoMemory;
 80085e8:	2304      	movs	r3, #4
 80085ea:	e000      	b.n	80085ee <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
        return DeserializationError::InvalidInput;
 80085ec:	2303      	movs	r3, #3
  }
 80085ee:	4618      	mov	r0, r3
 80085f0:	3720      	adds	r7, #32
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop

080085f8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv>:
  DeserializationError::Code skipNumericValue() {
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b084      	sub	sp, #16
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
    char c = current();
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f7ff fc89 	bl	8007f18 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8008606:	4603      	mov	r3, r0
 8008608:	73fb      	strb	r3, [r7, #15]
    while (canBeInNumber(c)) {
 800860a:	e007      	b.n	800861c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv+0x24>
      move();
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 f87c 	bl	800870a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      c = current();
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f7ff fc80 	bl	8007f18 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8008618:	4603      	mov	r3, r0
 800861a:	73fb      	strb	r3, [r7, #15]
    while (canBeInNumber(c)) {
 800861c:	7bfb      	ldrb	r3, [r7, #15]
 800861e:	4618      	mov	r0, r3
 8008620:	f000 fa5e 	bl	8008ae0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc>
 8008624:	4603      	mov	r3, r0
 8008626:	2b00      	cmp	r3, #0
 8008628:	d1f0      	bne.n	800860c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv+0x14>
    return DeserializationError::Ok;
 800862a:	2300      	movs	r3, #0
  }
 800862c:	4618      	mov	r0, r3
 800862e:	3710      	adds	r7, #16
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_10JsonObjectEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8008634:	b580      	push	{r7, lr}
 8008636:	b082      	sub	sp, #8
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f7fc f990 	bl	8004962 <_ZNK11ArduinoJson8V730HB2210JsonObject18getResourceManagerEv>
 8008642:	4603      	mov	r3, r0
  }
 8008644:	4618      	mov	r0, r3
 8008646:	3708      	adds	r7, #8
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE5forgeEm>:
  static T forge(uint32_t bits) {
 800864c:	b580      	push	{r7, lr}
 800864e:	b082      	sub	sp, #8
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
    return alias_cast<T>(bits);
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 fb4c 	bl	8008cf2 <_ZN11ArduinoJson8V730HB226detail10alias_castIfmEET_T0_>
 800865a:	eef0 7a40 	vmov.f32	s15, s0
  }
 800865e:	eeb0 0a67 	vmov.f32	s0, s15
 8008662:	3708      	adds	r7, #8
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}

08008668 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEE7getDataEv>:
  VariantData* getData() const {
 8008668:	b590      	push	{r4, r7, lr}
 800866a:	b085      	sub	sp, #20
 800866c:	af02      	add	r7, sp, #8
 800866e:	6078      	str	r0, [r7, #4]
        VariantAttorney::getData(upstream_), key_,
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	3304      	adds	r3, #4
 8008674:	4618      	mov	r0, r3
 8008676:	f000 fb4c 	bl	8008d12 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_10JsonObjectEEEDTcldtfp_7getDataEERT_>
 800867a:	4604      	mov	r4, r0
        VariantAttorney::getResourceManager(upstream_));
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	3304      	adds	r3, #4
 8008680:	4618      	mov	r0, r3
 8008682:	f7ff ffd7 	bl	8008634 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_10JsonObjectEEEDTcldtfp_18getResourceManagerEERT_>
 8008686:	4602      	mov	r2, r0
    return VariantData::getMember(
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	9200      	str	r2, [sp, #0]
 800868c:	330c      	adds	r3, #12
 800868e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008690:	4620      	mov	r0, r4
 8008692:	f000 f821 	bl	80086d8 <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE>
 8008696:	4603      	mov	r3, r0
  }
 8008698:	4618      	mov	r0, r3
 800869a:	370c      	adds	r7, #12
 800869c:	46bd      	mov	sp, r7
 800869e:	bd90      	pop	{r4, r7, pc}

080086a0 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forImEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_11is_unsignedIS7_EE5valueeqstS7_Li4EEjE4typeE>:
  static T highest_for(
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b082      	sub	sp, #8
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
    return forge(0x4F7FFFFF);  // 4.29496704E9
 80086a8:	4804      	ldr	r0, [pc, #16]	@ (80086bc <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forImEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_11is_unsignedIS7_EE5valueeqstS7_Li4EEjE4typeE+0x1c>)
 80086aa:	f7ff ffcf 	bl	800864c <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE5forgeEm>
 80086ae:	eef0 7a40 	vmov.f32	s15, s0
  }
 80086b2:	eeb0 0a67 	vmov.f32	s0, s15
 80086b6:	3708      	adds	r7, #8
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	4f7fffff 	.word	0x4f7fffff

080086c0 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_12JsonDocumentEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
    return client.getData();
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f7fc f9a0 	bl	8004a0e <_ZN11ArduinoJson8V730HB2212JsonDocument7getDataEv>
 80086ce:	4603      	mov	r3, r0
  }
 80086d0:	4618      	mov	r0, r3
 80086d2:	3708      	adds	r7, #8
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE>:
  static VariantData* getMember(const VariantData* var, TAdaptedString key,
 80086d8:	b580      	push	{r7, lr}
 80086da:	b086      	sub	sp, #24
 80086dc:	af02      	add	r7, sp, #8
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	4638      	mov	r0, r7
 80086e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (!var)
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d101      	bne.n	80086f0 <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE+0x18>
      return 0;
 80086ec:	2300      	movs	r3, #0
 80086ee:	e008      	b.n	8008702 <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE+0x2a>
    return var->getMember(key, resources);
 80086f0:	68f8      	ldr	r0, [r7, #12]
 80086f2:	69bb      	ldr	r3, [r7, #24]
 80086f4:	9300      	str	r3, [sp, #0]
 80086f6:	463b      	mov	r3, r7
 80086f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80086fa:	f000 fb16 	bl	8008d2a <_ZNK11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_T_PKNS1_15ResourceManagerE>
 80086fe:	4603      	mov	r3, r0
 8008700:	bf00      	nop
  }
 8008702:	4618      	mov	r0, r3
 8008704:	3710      	adds	r7, #16
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}

0800870a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>:
  void move() {
 800870a:	b580      	push	{r7, lr}
 800870c:	b082      	sub	sp, #8
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
    latch_.clear();
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	3310      	adds	r3, #16
 8008716:	4618      	mov	r0, r3
 8008718:	f000 fb1c 	bl	8008d54 <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE5clearEv>
  }
 800871c:	bf00      	nop
 800871e:	3708      	adds	r7, #8
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>:
  bool eat(char charToSkip) {
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	460b      	mov	r3, r1
 800872e:	70fb      	strb	r3, [r7, #3]
    if (current() != charToSkip)
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f7ff fbf1 	bl	8007f18 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8008736:	4603      	mov	r3, r0
 8008738:	461a      	mov	r2, r3
 800873a:	78fb      	ldrb	r3, [r7, #3]
 800873c:	4293      	cmp	r3, r2
 800873e:	bf14      	ite	ne
 8008740:	2301      	movne	r3, #1
 8008742:	2300      	moveq	r3, #0
 8008744:	b2db      	uxtb	r3, r3
 8008746:	2b00      	cmp	r3, #0
 8008748:	d001      	beq.n	800874e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc+0x2a>
      return false;
 800874a:	2300      	movs	r3, #0
 800874c:	e003      	b.n	8008756 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc+0x32>
    move();
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f7ff ffdb 	bl	800870a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    return true;
 8008754:	2301      	movs	r3, #1
  }
 8008756:	4618      	mov	r0, r3
 8008758:	3708      	adds	r7, #8
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}

0800875e <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilterixImEES2_RKT_>:

  template <typename TKey>
  AllowAllFilter operator[](const TKey&) const {
 800875e:	b480      	push	{r7}
 8008760:	b083      	sub	sp, #12
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
 8008766:	6039      	str	r1, [r7, #0]
    return AllowAllFilter();
 8008768:	bf00      	nop
  }
 800876a:	4618      	mov	r0, r3
 800876c:	370c      	adds	r7, #12
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr
	...

08008778 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code skipVariant(
 8008778:	b580      	push	{r7, lr}
 800877a:	b084      	sub	sp, #16
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	7039      	strb	r1, [r7, #0]
    err = skipSpacesAndComments();
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f7ff fb92 	bl	8007eac <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8008788:	4603      	mov	r3, r0
 800878a:	73fb      	strb	r3, [r7, #15]
    if (err)
 800878c:	7bfb      	ldrb	r3, [r7, #15]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d001      	beq.n	8008796 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x1e>
      return err;
 8008792:	7bfb      	ldrb	r3, [r7, #15]
 8008794:	e07c      	b.n	8008890 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
    switch (current()) {
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f7ff fbbe 	bl	8007f18 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 800879c:	4603      	mov	r3, r0
 800879e:	2b7b      	cmp	r3, #123	@ 0x7b
 80087a0:	dc71      	bgt.n	8008886 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x10e>
 80087a2:	2b5b      	cmp	r3, #91	@ 0x5b
 80087a4:	da04      	bge.n	80087b0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x38>
 80087a6:	2b22      	cmp	r3, #34	@ 0x22
 80087a8:	d056      	beq.n	8008858 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0xe0>
 80087aa:	2b27      	cmp	r3, #39	@ 0x27
 80087ac:	d054      	beq.n	8008858 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0xe0>
 80087ae:	e06a      	b.n	8008886 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x10e>
 80087b0:	3b5b      	subs	r3, #91	@ 0x5b
 80087b2:	2b20      	cmp	r3, #32
 80087b4:	d867      	bhi.n	8008886 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x10e>
 80087b6:	a201      	add	r2, pc, #4	@ (adr r2, 80087bc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x44>)
 80087b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087bc:	08008841 	.word	0x08008841
 80087c0:	08008887 	.word	0x08008887
 80087c4:	08008887 	.word	0x08008887
 80087c8:	08008887 	.word	0x08008887
 80087cc:	08008887 	.word	0x08008887
 80087d0:	08008887 	.word	0x08008887
 80087d4:	08008887 	.word	0x08008887
 80087d8:	08008887 	.word	0x08008887
 80087dc:	08008887 	.word	0x08008887
 80087e0:	08008887 	.word	0x08008887
 80087e4:	08008887 	.word	0x08008887
 80087e8:	0800886f 	.word	0x0800886f
 80087ec:	08008887 	.word	0x08008887
 80087f0:	08008887 	.word	0x08008887
 80087f4:	08008887 	.word	0x08008887
 80087f8:	08008887 	.word	0x08008887
 80087fc:	08008887 	.word	0x08008887
 8008800:	08008887 	.word	0x08008887
 8008804:	08008887 	.word	0x08008887
 8008808:	0800887b 	.word	0x0800887b
 800880c:	08008887 	.word	0x08008887
 8008810:	08008887 	.word	0x08008887
 8008814:	08008887 	.word	0x08008887
 8008818:	08008887 	.word	0x08008887
 800881c:	08008887 	.word	0x08008887
 8008820:	08008863 	.word	0x08008863
 8008824:	08008887 	.word	0x08008887
 8008828:	08008887 	.word	0x08008887
 800882c:	08008887 	.word	0x08008887
 8008830:	08008887 	.word	0x08008887
 8008834:	08008887 	.word	0x08008887
 8008838:	08008887 	.word	0x08008887
 800883c:	0800884d 	.word	0x0800884d
        return skipArray(nestingLimit);
 8008840:	7839      	ldrb	r1, [r7, #0]
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f7ff fc05 	bl	8008052 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE>
 8008848:	4603      	mov	r3, r0
 800884a:	e021      	b.n	8008890 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipObject(nestingLimit);
 800884c:	7839      	ldrb	r1, [r7, #0]
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f7ff fd2e 	bl	80082b0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE>
 8008854:	4603      	mov	r3, r0
 8008856:	e01b      	b.n	8008890 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipQuotedString();
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f7ff fdca 	bl	80083f2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv>
 800885e:	4603      	mov	r3, r0
 8008860:	e016      	b.n	8008890 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipKeyword("true");
 8008862:	490d      	ldr	r1, [pc, #52]	@ (8008898 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x120>)
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f7ff fdf9 	bl	800845c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 800886a:	4603      	mov	r3, r0
 800886c:	e010      	b.n	8008890 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipKeyword("false");
 800886e:	490b      	ldr	r1, [pc, #44]	@ (800889c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x124>)
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f7ff fdf3 	bl	800845c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8008876:	4603      	mov	r3, r0
 8008878:	e00a      	b.n	8008890 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipKeyword("null");
 800887a:	4909      	ldr	r1, [pc, #36]	@ (80088a0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x128>)
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f7ff fded 	bl	800845c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8008882:	4603      	mov	r3, r0
 8008884:	e004      	b.n	8008890 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipNumericValue();
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f7ff feb6 	bl	80085f8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv>
 800888c:	4603      	mov	r3, r0
 800888e:	bf00      	nop
  }
 8008890:	4618      	mov	r0, r3
 8008892:	3710      	adds	r7, #16
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}
 8008898:	08027df8 	.word	0x08027df8
 800889c:	08027e00 	.word	0x08027e00
 80088a0:	08027e08 	.word	0x08027e08

080088a4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE8parseKeyEv>:
  DeserializationError::Code parseKey() {
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
    stringBuilder_.startString();
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7fc fb5e 	bl	8004f70 <_ZN11ArduinoJson8V730HB226detail13StringBuilder11startStringEv>
    if (isQuote(current())) {
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f7ff fb2f 	bl	8007f18 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 80088ba:	4603      	mov	r3, r0
 80088bc:	4618      	mov	r0, r3
 80088be:	f000 fa6c 	bl	8008d9a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc>
 80088c2:	4603      	mov	r3, r0
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d004      	beq.n	80088d2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE8parseKeyEv+0x2e>
      return parseQuotedString();
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 f888 	bl	80089de <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv>
 80088ce:	4603      	mov	r3, r0
 80088d0:	e004      	b.n	80088dc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE8parseKeyEv+0x38>
      return parseNonQuotedString();
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 fa75 	bl	8008dc2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv>
 80088d8:	4603      	mov	r3, r0
 80088da:	bf00      	nop
  }
 80088dc:	4618      	mov	r0, r3
 80088de:	3708      	adds	r7, #8
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilterixINS0_10JsonStringEEES2_RKT_>:
  AllowAllFilter operator[](const TKey&) const {
 80088e4:	b480      	push	{r7}
 80088e6:	b083      	sub	sp, #12
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	6039      	str	r1, [r7, #0]
    return AllowAllFilter();
 80088ee:	bf00      	nop
  }
 80088f0:	4618      	mov	r0, r3
 80088f2:	370c      	adds	r7, #12
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr

080088fc <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>:
                                     ResourceManager* resources) {
  remove(findKey(key, resources), resources);
}

template <typename TAdaptedString>
inline VariantData* ObjectData::addMember(TAdaptedString key,
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b08a      	sub	sp, #40	@ 0x28
 8008900:	af02      	add	r7, sp, #8
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	60b9      	str	r1, [r7, #8]
 8008906:	607a      	str	r2, [r7, #4]
                                          ResourceManager* resources) {
  auto keySlot = resources->allocVariant();
 8008908:	f107 0318 	add.w	r3, r7, #24
 800890c:	6879      	ldr	r1, [r7, #4]
 800890e:	4618      	mov	r0, r3
 8008910:	f7fc f9de 	bl	8004cd0 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!keySlot)
 8008914:	f107 0318 	add.w	r3, r7, #24
 8008918:	4618      	mov	r0, r3
 800891a:	f7fd fc7d 	bl	8006218 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 800891e:	4603      	mov	r3, r0
 8008920:	f083 0301 	eor.w	r3, r3, #1
 8008924:	b2db      	uxtb	r3, r3
 8008926:	2b00      	cmp	r3, #0
 8008928:	d001      	beq.n	800892e <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x32>
    return nullptr;
 800892a:	2300      	movs	r3, #0
 800892c:	e037      	b.n	800899e <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa2>

  auto valueSlot = resources->allocVariant();
 800892e:	f107 0310 	add.w	r3, r7, #16
 8008932:	6879      	ldr	r1, [r7, #4]
 8008934:	4618      	mov	r0, r3
 8008936:	f7fc f9cb 	bl	8004cd0 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!valueSlot)
 800893a:	f107 0310 	add.w	r3, r7, #16
 800893e:	4618      	mov	r0, r3
 8008940:	f7fd fc6a 	bl	8006218 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 8008944:	4603      	mov	r3, r0
 8008946:	f083 0301 	eor.w	r3, r3, #1
 800894a:	b2db      	uxtb	r3, r3
 800894c:	2b00      	cmp	r3, #0
 800894e:	d001      	beq.n	8008954 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x58>
    return nullptr;
 8008950:	2300      	movs	r3, #0
 8008952:	e024      	b.n	800899e <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa2>

  if (!keySlot->setString(key, resources))
 8008954:	f107 0318 	add.w	r3, r7, #24
 8008958:	4618      	mov	r0, r3
 800895a:	f7fd fc86 	bl	800626a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>
 800895e:	4603      	mov	r3, r0
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	68b9      	ldr	r1, [r7, #8]
 8008964:	4618      	mov	r0, r3
 8008966:	f7fb fd6f 	bl	8004448 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringEPNS1_10StringNodeEPNS1_15ResourceManagerE>
 800896a:	4603      	mov	r3, r0
 800896c:	f083 0301 	eor.w	r3, r3, #1
 8008970:	b2db      	uxtb	r3, r3
 8008972:	2b00      	cmp	r3, #0
 8008974:	d001      	beq.n	800897a <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x7e>
    return nullptr;
 8008976:	2300      	movs	r3, #0
 8008978:	e011      	b.n	800899e <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa2>

  CollectionData::appendPair(keySlot, valueSlot, resources);
 800897a:	68f8      	ldr	r0, [r7, #12]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	9301      	str	r3, [sp, #4]
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	9300      	str	r3, [sp, #0]
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	f107 0218 	add.w	r2, r7, #24
 800898a:	ca06      	ldmia	r2, {r1, r2}
 800898c:	f7fc f919 	bl	8004bc2 <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE>

  return valueSlot.ptr();
 8008990:	f107 0310 	add.w	r3, r7, #16
 8008994:	4618      	mov	r0, r3
 8008996:	f7fd fc50 	bl	800623a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>
 800899a:	4603      	mov	r3, r0
 800899c:	bf00      	nop
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3720      	adds	r7, #32
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}

080089a6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7skipKeyEv>:
  DeserializationError::Code skipKey() {
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b082      	sub	sp, #8
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
    if (isQuote(current())) {
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f7ff fab2 	bl	8007f18 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 80089b4:	4603      	mov	r3, r0
 80089b6:	4618      	mov	r0, r3
 80089b8:	f000 f9ef 	bl	8008d9a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc>
 80089bc:	4603      	mov	r3, r0
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d004      	beq.n	80089cc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7skipKeyEv+0x26>
      return skipQuotedString();
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f7ff fd15 	bl	80083f2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv>
 80089c8:	4603      	mov	r3, r0
 80089ca:	e004      	b.n	80089d6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7skipKeyEv+0x30>
      return skipNonQuotedString();
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f000 fa31 	bl	8008e34 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE19skipNonQuotedStringEv>
 80089d2:	4603      	mov	r3, r0
 80089d4:	bf00      	nop
  }
 80089d6:	4618      	mov	r0, r3
 80089d8:	3708      	adds	r7, #8
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}

080089de <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv>:
  DeserializationError::Code parseQuotedString() {
 80089de:	b580      	push	{r7, lr}
 80089e0:	b086      	sub	sp, #24
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	6078      	str	r0, [r7, #4]
    Utf16::Codepoint codepoint;
 80089e6:	f107 030c 	add.w	r3, r7, #12
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7fc fd14 	bl	8005418 <_ZN11ArduinoJson8V730HB226detail5Utf169CodepointC1Ev>
    const char stopChar = current();
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f7ff fa91 	bl	8007f18 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 80089f6:	4603      	mov	r3, r0
 80089f8:	75bb      	strb	r3, [r7, #22]
    move();
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f7ff fe85 	bl	800870a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      char c = current();
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f7ff fa89 	bl	8007f18 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8008a06:	4603      	mov	r3, r0
 8008a08:	75fb      	strb	r3, [r7, #23]
      move();
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f7ff fe7d 	bl	800870a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      if (c == stopChar)
 8008a10:	7dfa      	ldrb	r2, [r7, #23]
 8008a12:	7dbb      	ldrb	r3, [r7, #22]
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d051      	beq.n	8008abc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xde>
      if (c == '\0')
 8008a18:	7dfb      	ldrb	r3, [r7, #23]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d101      	bne.n	8008a22 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x44>
        return DeserializationError::IncompleteInput;
 8008a1e:	2302      	movs	r3, #2
 8008a20:	e05a      	b.n	8008ad8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
      if (c == '\\') {
 8008a22:	7dfb      	ldrb	r3, [r7, #23]
 8008a24:	2b5c      	cmp	r3, #92	@ 0x5c
 8008a26:	d140      	bne.n	8008aaa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xcc>
        c = current();
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f7ff fa75 	bl	8007f18 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	75fb      	strb	r3, [r7, #23]
        if (c == '\0')
 8008a32:	7dfb      	ldrb	r3, [r7, #23]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d101      	bne.n	8008a3c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x5e>
          return DeserializationError::IncompleteInput;
 8008a38:	2302      	movs	r3, #2
 8008a3a:	e04d      	b.n	8008ad8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
        if (c == 'u') {
 8008a3c:	7dfb      	ldrb	r3, [r7, #23]
 8008a3e:	2b75      	cmp	r3, #117	@ 0x75
 8008a40:	d125      	bne.n	8008a8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xb0>
          move();
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f7ff fe61 	bl	800870a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
          err = parseHex4(codeunit);
 8008a48:	f107 030a 	add.w	r3, r7, #10
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 fa0e 	bl	8008e70 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt>
 8008a54:	4603      	mov	r3, r0
 8008a56:	757b      	strb	r3, [r7, #21]
          if (err)
 8008a58:	7d7b      	ldrb	r3, [r7, #21]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d001      	beq.n	8008a62 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x84>
            return err;
 8008a5e:	7d7b      	ldrb	r3, [r7, #21]
 8008a60:	e03a      	b.n	8008ad8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
          if (codepoint.append(codeunit))
 8008a62:	897a      	ldrh	r2, [r7, #10]
 8008a64:	f107 030c 	add.w	r3, r7, #12
 8008a68:	4611      	mov	r1, r2
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f7fc fce5 	bl	800543a <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt>
 8008a70:	4603      	mov	r3, r0
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d020      	beq.n	8008ab8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xda>
            Utf8::encodeCodepoint(codepoint.value(), stringBuilder_);
 8008a76:	f107 030c 	add.w	r3, r7, #12
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f7fc fd0f 	bl	800549e <_ZNK11ArduinoJson8V730HB226detail5Utf169Codepoint5valueEv>
 8008a80:	4602      	mov	r2, r0
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	4619      	mov	r1, r3
 8008a86:	4610      	mov	r0, r2
 8008a88:	f000 fa2b 	bl	8008ee2 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_>
 8008a8c:	e7b8      	b.n	8008a00 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x22>
        c = EscapeSequence::unescapeChar(c);
 8008a8e:	7dfb      	ldrb	r3, [r7, #23]
 8008a90:	4618      	mov	r0, r3
 8008a92:	f7fc fa0c 	bl	8004eae <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc>
 8008a96:	4603      	mov	r3, r0
 8008a98:	75fb      	strb	r3, [r7, #23]
        if (c == '\0')
 8008a9a:	7dfb      	ldrb	r3, [r7, #23]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d101      	bne.n	8008aa4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xc6>
          return DeserializationError::InvalidInput;
 8008aa0:	2303      	movs	r3, #3
 8008aa2:	e019      	b.n	8008ad8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
        move();
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f7ff fe30 	bl	800870a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      stringBuilder_.append(c);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	7dfa      	ldrb	r2, [r7, #23]
 8008aae:	4611      	mov	r1, r2
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f7fc fab6 	bl	8005022 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>
 8008ab6:	e7a3      	b.n	8008a00 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x22>
          continue;
 8008ab8:	bf00      	nop
    for (;;) {
 8008aba:	e7a1      	b.n	8008a00 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x22>
        break;
 8008abc:	bf00      	nop
    if (!stringBuilder_.isValid())
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f7fc fae0 	bl	8005086 <_ZNK11ArduinoJson8V730HB226detail13StringBuilder7isValidEv>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	f083 0301 	eor.w	r3, r3, #1
 8008acc:	b2db      	uxtb	r3, r3
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d001      	beq.n	8008ad6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xf8>
      return DeserializationError::NoMemory;
 8008ad2:	2304      	movs	r3, #4
 8008ad4:	e000      	b.n	8008ad8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
    return DeserializationError::Ok;
 8008ad6:	2300      	movs	r3, #0
  }
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3718      	adds	r7, #24
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc>:
  static inline bool canBeInNumber(char c) {
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	71fb      	strb	r3, [r7, #7]
    return isBetween(c, '0', '9') || c == '+' || c == '-' || c == '.' ||
 8008aea:	79fb      	ldrb	r3, [r7, #7]
 8008aec:	2239      	movs	r2, #57	@ 0x39
 8008aee:	2130      	movs	r1, #48	@ 0x30
 8008af0:	4618      	mov	r0, r3
 8008af2:	f000 fa7a 	bl	8008fea <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>
 8008af6:	4603      	mov	r3, r0
           c == 'e' || c == 'E';
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d10e      	bne.n	8008b1a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
    return isBetween(c, '0', '9') || c == '+' || c == '-' || c == '.' ||
 8008afc:	79fb      	ldrb	r3, [r7, #7]
 8008afe:	2b2b      	cmp	r3, #43	@ 0x2b
 8008b00:	d00b      	beq.n	8008b1a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
 8008b02:	79fb      	ldrb	r3, [r7, #7]
 8008b04:	2b2d      	cmp	r3, #45	@ 0x2d
 8008b06:	d008      	beq.n	8008b1a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
 8008b08:	79fb      	ldrb	r3, [r7, #7]
 8008b0a:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b0c:	d005      	beq.n	8008b1a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
 8008b0e:	79fb      	ldrb	r3, [r7, #7]
 8008b10:	2b65      	cmp	r3, #101	@ 0x65
 8008b12:	d002      	beq.n	8008b1a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
           c == 'e' || c == 'E';
 8008b14:	79fb      	ldrb	r3, [r7, #7]
 8008b16:	2b45      	cmp	r3, #69	@ 0x45
 8008b18:	d101      	bne.n	8008b1e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3e>
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	e000      	b.n	8008b20 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x40>
 8008b1e:	2300      	movs	r3, #0
  }
 8008b20:	4618      	mov	r0, r3
 8008b22:	3708      	adds	r7, #8
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>:
#endif
  return true;
}

template <typename T>
enable_if_t<is_unsigned<T>::value, bool> VariantData::setInteger(
 8008b28:	b5b0      	push	{r4, r5, r7, lr}
 8008b2a:	b086      	sub	sp, #24
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	60f8      	str	r0, [r7, #12]
 8008b30:	e9c7 2300 	strd	r2, r3, [r7]
    T value, ResourceManager* resources) {
  ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
  (void)resources;                                 // silence warning

  if (canConvertNumber<uint32_t>(value)) {
 8008b34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b38:	f7ff f8be 	bl	8007cb8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d006      	beq.n	8008b50 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x28>
    type_ = VariantType::Uint32;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	220a      	movs	r2, #10
 8008b46:	711a      	strb	r2, [r3, #4]
    content_.asUint32 = static_cast<uint32_t>(value);
 8008b48:	683a      	ldr	r2, [r7, #0]
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	601a      	str	r2, [r3, #0]
 8008b4e:	e028      	b.n	8008ba2 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7a>
  }
#if ARDUINOJSON_USE_LONG_LONG
  else {
    auto extension = resources->allocExtension();
 8008b50:	f107 0310 	add.w	r3, r7, #16
 8008b54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b56:	4618      	mov	r0, r3
 8008b58:	f7fc f93f 	bl	8004dda <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 8008b5c:	f107 0310 	add.w	r3, r7, #16
 8008b60:	4618      	mov	r0, r3
 8008b62:	f000 fa5c 	bl	800901e <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 8008b66:	4603      	mov	r3, r0
 8008b68:	f083 0301 	eor.w	r3, r3, #1
 8008b6c:	b2db      	uxtb	r3, r3
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d001      	beq.n	8008b76 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x4e>
      return false;
 8008b72:	2300      	movs	r3, #0
 8008b74:	e016      	b.n	8008ba4 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7c>
    type_ = VariantType::Uint64;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	221a      	movs	r2, #26
 8008b7a:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 8008b7c:	f107 0310 	add.w	r3, r7, #16
 8008b80:	4618      	mov	r0, r3
 8008b82:	f000 fa5d 	bl	8009040 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 8008b86:	4603      	mov	r3, r0
 8008b88:	461a      	mov	r2, r3
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	801a      	strh	r2, [r3, #0]
    extension->asUint64 = value;
 8008b8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008b92:	f107 0310 	add.w	r3, r7, #16
 8008b96:	4618      	mov	r0, r3
 8008b98:	f000 fa5e 	bl	8009058 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	e9c3 4500 	strd	r4, r5, [r3]
  }
#endif
  return true;
 8008ba2:	2301      	movs	r3, #1
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3718      	adds	r7, #24
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bdb0      	pop	{r4, r5, r7, pc}

08008bac <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>:
enable_if_t<is_signed<T>::value, bool> VariantData::setInteger(
 8008bac:	b5b0      	push	{r4, r5, r7, lr}
 8008bae:	b086      	sub	sp, #24
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	60f8      	str	r0, [r7, #12]
 8008bb4:	e9c7 2300 	strd	r2, r3, [r7]
  if (canConvertNumber<int32_t>(value)) {
 8008bb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008bbc:	f000 fa58 	bl	8009070 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d006      	beq.n	8008bd4 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x28>
    type_ = VariantType::Int32;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	220c      	movs	r2, #12
 8008bca:	711a      	strb	r2, [r3, #4]
    content_.asInt32 = static_cast<int32_t>(value);
 8008bcc:	683a      	ldr	r2, [r7, #0]
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	601a      	str	r2, [r3, #0]
 8008bd2:	e028      	b.n	8008c26 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7a>
    auto extension = resources->allocExtension();
 8008bd4:	f107 0310 	add.w	r3, r7, #16
 8008bd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f7fc f8fd 	bl	8004dda <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 8008be0:	f107 0310 	add.w	r3, r7, #16
 8008be4:	4618      	mov	r0, r3
 8008be6:	f000 fa1a 	bl	800901e <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 8008bea:	4603      	mov	r3, r0
 8008bec:	f083 0301 	eor.w	r3, r3, #1
 8008bf0:	b2db      	uxtb	r3, r3
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d001      	beq.n	8008bfa <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x4e>
      return false;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	e016      	b.n	8008c28 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7c>
    type_ = VariantType::Int64;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	221c      	movs	r2, #28
 8008bfe:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 8008c00:	f107 0310 	add.w	r3, r7, #16
 8008c04:	4618      	mov	r0, r3
 8008c06:	f000 fa1b 	bl	8009040 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	801a      	strh	r2, [r3, #0]
    extension->asInt64 = value;
 8008c12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008c16:	f107 0310 	add.w	r3, r7, #16
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f000 fa1c 	bl	8009058 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>
 8008c20:	4603      	mov	r3, r0
 8008c22:	e9c3 4500 	strd	r4, r5, [r3]
  return true;
 8008c26:	2301      	movs	r3, #1
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3718      	adds	r7, #24
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bdb0      	pop	{r4, r5, r7, pc}

08008c30 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIfEENS1_9enable_ifIXeqstT_Li4EEbE4typeES5_PNS1_15ResourceManagerE>:
  enable_if_t<sizeof(T) == 4, bool> setFloat(T value, ResourceManager*) {
 8008c30:	b480      	push	{r7}
 8008c32:	b085      	sub	sp, #20
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	60f8      	str	r0, [r7, #12]
 8008c38:	ed87 0a02 	vstr	s0, [r7, #8]
 8008c3c:	6079      	str	r1, [r7, #4]
    type_ = VariantType::Float;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	220e      	movs	r2, #14
 8008c42:	711a      	strb	r2, [r3, #4]
    content_.asFloat = value;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	68ba      	ldr	r2, [r7, #8]
 8008c48:	601a      	str	r2, [r3, #0]
    return true;
 8008c4a:	2301      	movs	r3, #1
  }
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3714      	adds	r7, #20
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr

08008c58 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE>:
enable_if_t<sizeof(T) == 8, bool> VariantData::setFloat(
 8008c58:	b5b0      	push	{r4, r5, r7, lr}
 8008c5a:	b088      	sub	sp, #32
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	60f8      	str	r0, [r7, #12]
 8008c60:	ed87 0b00 	vstr	d0, [r7]
 8008c64:	60b9      	str	r1, [r7, #8]
  float valueAsFloat = static_cast<float>(value);
 8008c66:	ed97 7b00 	vldr	d7, [r7]
 8008c6a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8008c6e:	edc7 7a07 	vstr	s15, [r7, #28]
  if (value == valueAsFloat) {
 8008c72:	edd7 7a07 	vldr	s15, [r7, #28]
 8008c76:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008c7a:	ed97 6b00 	vldr	d6, [r7]
 8008c7e:	eeb4 6b47 	vcmp.f64	d6, d7
 8008c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c86:	d106      	bne.n	8008c96 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE+0x3e>
    type_ = VariantType::Float;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	220e      	movs	r2, #14
 8008c8c:	711a      	strb	r2, [r3, #4]
    content_.asFloat = valueAsFloat;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	69fa      	ldr	r2, [r7, #28]
 8008c92:	601a      	str	r2, [r3, #0]
 8008c94:	e028      	b.n	8008ce8 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE+0x90>
    auto extension = resources->allocExtension();
 8008c96:	f107 0314 	add.w	r3, r7, #20
 8008c9a:	68b9      	ldr	r1, [r7, #8]
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f7fc f89c 	bl	8004dda <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 8008ca2:	f107 0314 	add.w	r3, r7, #20
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f000 f9b9 	bl	800901e <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 8008cac:	4603      	mov	r3, r0
 8008cae:	f083 0301 	eor.w	r3, r3, #1
 8008cb2:	b2db      	uxtb	r3, r3
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d001      	beq.n	8008cbc <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE+0x64>
      return false;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	e016      	b.n	8008cea <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE+0x92>
    type_ = VariantType::Double;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	221e      	movs	r2, #30
 8008cc0:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 8008cc2:	f107 0314 	add.w	r3, r7, #20
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f000 f9ba 	bl	8009040 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	461a      	mov	r2, r3
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	801a      	strh	r2, [r3, #0]
    extension->asDouble = value;
 8008cd4:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008cd8:	f107 0314 	add.w	r3, r7, #20
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f000 f9bb 	bl	8009058 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	e9c3 4500 	strd	r4, r5, [r3]
  return true;
 8008ce8:	2301      	movs	r3, #1
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3720      	adds	r7, #32
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bdb0      	pop	{r4, r5, r7, pc}

08008cf2 <_ZN11ArduinoJson8V730HB226detail10alias_castIfmEET_T0_>:
T alias_cast(F raw_data) {
 8008cf2:	b480      	push	{r7}
 8008cf4:	b085      	sub	sp, #20
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
  ac.raw = raw_data;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	60fb      	str	r3, [r7, #12]
  return ac.data;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	ee07 3a90 	vmov	s15, r3
}
 8008d04:	eeb0 0a67 	vmov.f32	s0, s15
 8008d08:	3714      	adds	r7, #20
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr

08008d12 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_10JsonObjectEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 8008d12:	b580      	push	{r7, lr}
 8008d14:	b082      	sub	sp, #8
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
    return client.getData();
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f7fb fe2d 	bl	800497a <_ZNK11ArduinoJson8V730HB2210JsonObject7getDataEv>
 8008d20:	4603      	mov	r3, r0
  }
 8008d22:	4618      	mov	r0, r3
 8008d24:	3708      	adds	r7, #8
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}

08008d2a <_ZNK11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_T_PKNS1_15ResourceManagerE>:
  VariantData* getMember(TAdaptedString key,
 8008d2a:	b580      	push	{r7, lr}
 8008d2c:	b086      	sub	sp, #24
 8008d2e:	af02      	add	r7, sp, #8
 8008d30:	60f8      	str	r0, [r7, #12]
 8008d32:	4638      	mov	r0, r7
 8008d34:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    return ObjectData::getMember(asObject(), key, resources);
 8008d38:	68f8      	ldr	r0, [r7, #12]
 8008d3a:	f7fb faf3 	bl	8004324 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asObjectEv>
 8008d3e:	69bb      	ldr	r3, [r7, #24]
 8008d40:	9300      	str	r3, [sp, #0]
 8008d42:	463b      	mov	r3, r7
 8008d44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008d46:	f7fd fe75 	bl	8006a34 <_ZN11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataEPKS2_T_PKNS1_15ResourceManagerE>
 8008d4a:	4603      	mov	r3, r0
  }
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3710      	adds	r7, #16
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE5clearEv>:
  void clear() {
 8008d54:	b480      	push	{r7}
 8008d56:	b083      	sub	sp, #12
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
    loaded_ = false;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	715a      	strb	r2, [r3, #5]
  }
 8008d62:	bf00      	nop
 8008d64:	370c      	adds	r7, #12
 8008d66:	46bd      	mov	sp, r7
 8008d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6c:	4770      	bx	lr

08008d6e <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE4loadEv>:
  }

 private:
  void load() {
 8008d6e:	b580      	push	{r7, lr}
 8008d70:	b084      	sub	sp, #16
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(!ended_);
    int c = reader_.read();
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f000 f99f 	bl	80090bc <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvE4readEv>
 8008d7e:	60f8      	str	r0, [r7, #12]
#if ARDUINOJSON_DEBUG
    if (c <= 0)
      ended_ = true;
#endif
    current_ = static_cast<char>(c > 0 ? c : 0);
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008d86:	b2da      	uxtb	r2, r3
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	711a      	strb	r2, [r3, #4]
    loaded_ = true;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	715a      	strb	r2, [r3, #5]
  }
 8008d92:	bf00      	nop
 8008d94:	3710      	adds	r7, #16
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}

08008d9a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc>:
  static inline bool isQuote(char c) {
 8008d9a:	b480      	push	{r7}
 8008d9c:	b083      	sub	sp, #12
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	4603      	mov	r3, r0
 8008da2:	71fb      	strb	r3, [r7, #7]
    return c == '\'' || c == '\"';
 8008da4:	79fb      	ldrb	r3, [r7, #7]
 8008da6:	2b27      	cmp	r3, #39	@ 0x27
 8008da8:	d002      	beq.n	8008db0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc+0x16>
 8008daa:	79fb      	ldrb	r3, [r7, #7]
 8008dac:	2b22      	cmp	r3, #34	@ 0x22
 8008dae:	d101      	bne.n	8008db4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc+0x1a>
 8008db0:	2301      	movs	r3, #1
 8008db2:	e000      	b.n	8008db6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc+0x1c>
 8008db4:	2300      	movs	r3, #0
  }
 8008db6:	4618      	mov	r0, r3
 8008db8:	370c      	adds	r7, #12
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc0:	4770      	bx	lr

08008dc2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv>:
  DeserializationError::Code parseNonQuotedString() {
 8008dc2:	b580      	push	{r7, lr}
 8008dc4:	b084      	sub	sp, #16
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	6078      	str	r0, [r7, #4]
    char c = current();
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f7ff f8a4 	bl	8007f18 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	73fb      	strb	r3, [r7, #15]
    if (canBeInNonQuotedString(c)) {  // no quotes
 8008dd4:	7bfb      	ldrb	r3, [r7, #15]
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f000 f980 	bl	80090dc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d015      	beq.n	8008e0e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x4c>
        move();
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f7ff fc91 	bl	800870a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
        stringBuilder_.append(c);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	7bfa      	ldrb	r2, [r7, #15]
 8008dec:	4611      	mov	r1, r2
 8008dee:	4618      	mov	r0, r3
 8008df0:	f7fc f917 	bl	8005022 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>
        c = current();
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f7ff f88f 	bl	8007f18 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	73fb      	strb	r3, [r7, #15]
      } while (canBeInNonQuotedString(c));
 8008dfe:	7bfb      	ldrb	r3, [r7, #15]
 8008e00:	4618      	mov	r0, r3
 8008e02:	f000 f96b 	bl	80090dc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc>
 8008e06:	4603      	mov	r3, r0
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d1ea      	bne.n	8008de2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x20>
 8008e0c:	e001      	b.n	8008e12 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x50>
      return DeserializationError::InvalidInput;
 8008e0e:	2303      	movs	r3, #3
 8008e10:	e00c      	b.n	8008e2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x6a>
    if (!stringBuilder_.isValid())
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	4618      	mov	r0, r3
 8008e16:	f7fc f936 	bl	8005086 <_ZNK11ArduinoJson8V730HB226detail13StringBuilder7isValidEv>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	f083 0301 	eor.w	r3, r3, #1
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d001      	beq.n	8008e2a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x68>
      return DeserializationError::NoMemory;
 8008e26:	2304      	movs	r3, #4
 8008e28:	e000      	b.n	8008e2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x6a>
    return DeserializationError::Ok;
 8008e2a:	2300      	movs	r3, #0
  }
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3710      	adds	r7, #16
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE19skipNonQuotedStringEv>:
  DeserializationError::Code skipNonQuotedString() {
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b084      	sub	sp, #16
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
    char c = current();
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f7ff f86b 	bl	8007f18 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8008e42:	4603      	mov	r3, r0
 8008e44:	73fb      	strb	r3, [r7, #15]
    while (canBeInNonQuotedString(c)) {
 8008e46:	e007      	b.n	8008e58 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE19skipNonQuotedStringEv+0x24>
      move();
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f7ff fc5e 	bl	800870a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      c = current();
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f7ff f862 	bl	8007f18 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8008e54:	4603      	mov	r3, r0
 8008e56:	73fb      	strb	r3, [r7, #15]
    while (canBeInNonQuotedString(c)) {
 8008e58:	7bfb      	ldrb	r3, [r7, #15]
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f000 f93e 	bl	80090dc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc>
 8008e60:	4603      	mov	r3, r0
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d1f0      	bne.n	8008e48 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE19skipNonQuotedStringEv+0x14>
    return DeserializationError::Ok;
 8008e66:	2300      	movs	r3, #0
  }
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3710      	adds	r7, #16
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt>:
  DeserializationError::Code parseHex4(uint16_t& result) {
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b084      	sub	sp, #16
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	6039      	str	r1, [r7, #0]
    result = 0;
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; ++i) {
 8008e80:	2300      	movs	r3, #0
 8008e82:	73fb      	strb	r3, [r7, #15]
 8008e84:	e025      	b.n	8008ed2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x62>
      char digit = current();
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f7ff f846 	bl	8007f18 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	73bb      	strb	r3, [r7, #14]
      if (!digit)
 8008e90:	7bbb      	ldrb	r3, [r7, #14]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d101      	bne.n	8008e9a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x2a>
        return DeserializationError::IncompleteInput;
 8008e96:	2302      	movs	r3, #2
 8008e98:	e01f      	b.n	8008eda <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x6a>
      uint8_t value = decodeHex(digit);
 8008e9a:	7bbb      	ldrb	r3, [r7, #14]
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f000 f944 	bl	800912a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9decodeHexEc>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	737b      	strb	r3, [r7, #13]
      if (value > 0x0F)
 8008ea6:	7b7b      	ldrb	r3, [r7, #13]
 8008ea8:	2b0f      	cmp	r3, #15
 8008eaa:	d901      	bls.n	8008eb0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x40>
        return DeserializationError::InvalidInput;
 8008eac:	2303      	movs	r3, #3
 8008eae:	e014      	b.n	8008eda <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x6a>
      result = uint16_t((result << 4) | value);
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	881b      	ldrh	r3, [r3, #0]
 8008eb4:	011b      	lsls	r3, r3, #4
 8008eb6:	b21a      	sxth	r2, r3
 8008eb8:	7b7b      	ldrb	r3, [r7, #13]
 8008eba:	b21b      	sxth	r3, r3
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	b21b      	sxth	r3, r3
 8008ec0:	b29a      	uxth	r2, r3
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	801a      	strh	r2, [r3, #0]
      move();
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f7ff fc1f 	bl	800870a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    for (uint8_t i = 0; i < 4; ++i) {
 8008ecc:	7bfb      	ldrb	r3, [r7, #15]
 8008ece:	3301      	adds	r3, #1
 8008ed0:	73fb      	strb	r3, [r7, #15]
 8008ed2:	7bfb      	ldrb	r3, [r7, #15]
 8008ed4:	2b03      	cmp	r3, #3
 8008ed6:	d9d6      	bls.n	8008e86 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x16>
    return DeserializationError::Ok;
 8008ed8:	2300      	movs	r3, #0
  }
 8008eda:	4618      	mov	r0, r3
 8008edc:	3710      	adds	r7, #16
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}

08008ee2 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_>:

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

namespace Utf8 {
template <typename TStringBuilder>
inline void encodeCodepoint(uint32_t codepoint32, TStringBuilder& str) {
 8008ee2:	b580      	push	{r7, lr}
 8008ee4:	b086      	sub	sp, #24
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
 8008eea:	6039      	str	r1, [r7, #0]
  // this function was optimize for code size on AVR

  if (codepoint32 < 0x80) {
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2b7f      	cmp	r3, #127	@ 0x7f
 8008ef0:	d806      	bhi.n	8008f00 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0x1e>
    str.append(char(codepoint32));
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	b2db      	uxtb	r3, r3
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	6838      	ldr	r0, [r7, #0]
 8008efa:	f7fc f892 	bl	8005022 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>

    while (*(--p)) {
      str.append(*p);
    }
  }
}
 8008efe:	e070      	b.n	8008fe2 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0x100>
    char* p = buf;
 8008f00:	f107 030c 	add.w	r3, r7, #12
 8008f04:	617b      	str	r3, [r7, #20]
    *(p++) = 0;
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	1c5a      	adds	r2, r3, #1
 8008f0a:	617a      	str	r2, [r7, #20]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	701a      	strb	r2, [r3, #0]
    *(p++) = char((codepoint32 | 0x80) & 0xBF);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	b2db      	uxtb	r3, r3
 8008f14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008f18:	b2db      	uxtb	r3, r3
 8008f1a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008f1e:	b2d9      	uxtb	r1, r3
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	1c5a      	adds	r2, r3, #1
 8008f24:	617a      	str	r2, [r7, #20]
 8008f26:	460a      	mov	r2, r1
 8008f28:	701a      	strb	r2, [r3, #0]
    uint16_t codepoint16 = uint16_t(codepoint32 >> 6);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	099b      	lsrs	r3, r3, #6
 8008f2e:	827b      	strh	r3, [r7, #18]
    if (codepoint16 < 0x20) {  // 0x800
 8008f30:	8a7b      	ldrh	r3, [r7, #18]
 8008f32:	2b1f      	cmp	r3, #31
 8008f34:	d80a      	bhi.n	8008f4c <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0x6a>
      *(p++) = char(codepoint16 | 0xC0);
 8008f36:	8a7b      	ldrh	r3, [r7, #18]
 8008f38:	b2db      	uxtb	r3, r3
 8008f3a:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8008f3e:	b2d9      	uxtb	r1, r3
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	1c5a      	adds	r2, r3, #1
 8008f44:	617a      	str	r2, [r7, #20]
 8008f46:	460a      	mov	r2, r1
 8008f48:	701a      	strb	r2, [r3, #0]
 8008f4a:	e03e      	b.n	8008fca <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xe8>
      *(p++) = char((codepoint16 | 0x80) & 0xBF);
 8008f4c:	8a7b      	ldrh	r3, [r7, #18]
 8008f4e:	b2db      	uxtb	r3, r3
 8008f50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008f54:	b2db      	uxtb	r3, r3
 8008f56:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008f5a:	b2d9      	uxtb	r1, r3
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	1c5a      	adds	r2, r3, #1
 8008f60:	617a      	str	r2, [r7, #20]
 8008f62:	460a      	mov	r2, r1
 8008f64:	701a      	strb	r2, [r3, #0]
      codepoint16 = uint16_t(codepoint16 >> 6);
 8008f66:	8a7b      	ldrh	r3, [r7, #18]
 8008f68:	099b      	lsrs	r3, r3, #6
 8008f6a:	827b      	strh	r3, [r7, #18]
      if (codepoint16 < 0x10) {  // 0x10000
 8008f6c:	8a7b      	ldrh	r3, [r7, #18]
 8008f6e:	2b0f      	cmp	r3, #15
 8008f70:	d80a      	bhi.n	8008f88 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xa6>
        *(p++) = char(codepoint16 | 0xE0);
 8008f72:	8a7b      	ldrh	r3, [r7, #18]
 8008f74:	b2db      	uxtb	r3, r3
 8008f76:	f063 031f 	orn	r3, r3, #31
 8008f7a:	b2d9      	uxtb	r1, r3
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	1c5a      	adds	r2, r3, #1
 8008f80:	617a      	str	r2, [r7, #20]
 8008f82:	460a      	mov	r2, r1
 8008f84:	701a      	strb	r2, [r3, #0]
 8008f86:	e020      	b.n	8008fca <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xe8>
        *(p++) = char((codepoint16 | 0x80) & 0xBF);
 8008f88:	8a7b      	ldrh	r3, [r7, #18]
 8008f8a:	b2db      	uxtb	r3, r3
 8008f8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008f96:	b2d9      	uxtb	r1, r3
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	1c5a      	adds	r2, r3, #1
 8008f9c:	617a      	str	r2, [r7, #20]
 8008f9e:	460a      	mov	r2, r1
 8008fa0:	701a      	strb	r2, [r3, #0]
        codepoint16 = uint16_t(codepoint16 >> 6);
 8008fa2:	8a7b      	ldrh	r3, [r7, #18]
 8008fa4:	099b      	lsrs	r3, r3, #6
 8008fa6:	827b      	strh	r3, [r7, #18]
        *(p++) = char(codepoint16 | 0xF0);
 8008fa8:	8a7b      	ldrh	r3, [r7, #18]
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	f063 030f 	orn	r3, r3, #15
 8008fb0:	b2d9      	uxtb	r1, r3
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	1c5a      	adds	r2, r3, #1
 8008fb6:	617a      	str	r2, [r7, #20]
 8008fb8:	460a      	mov	r2, r1
 8008fba:	701a      	strb	r2, [r3, #0]
    while (*(--p)) {
 8008fbc:	e005      	b.n	8008fca <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xe8>
      str.append(*p);
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	6838      	ldr	r0, [r7, #0]
 8008fc6:	f7fc f82c 	bl	8005022 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>
    while (*(--p)) {
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	3b01      	subs	r3, #1
 8008fce:	617b      	str	r3, [r7, #20]
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	bf14      	ite	ne
 8008fd8:	2301      	movne	r3, #1
 8008fda:	2300      	moveq	r3, #0
 8008fdc:	b2db      	uxtb	r3, r3
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d1ed      	bne.n	8008fbe <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xdc>
}
 8008fe2:	bf00      	nop
 8008fe4:	3718      	adds	r7, #24
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}

08008fea <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>:
  static inline bool isBetween(char c, char min, char max) {
 8008fea:	b480      	push	{r7}
 8008fec:	b083      	sub	sp, #12
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	71fb      	strb	r3, [r7, #7]
 8008ff4:	460b      	mov	r3, r1
 8008ff6:	71bb      	strb	r3, [r7, #6]
 8008ff8:	4613      	mov	r3, r2
 8008ffa:	717b      	strb	r3, [r7, #5]
    return min <= c && c <= max;
 8008ffc:	79ba      	ldrb	r2, [r7, #6]
 8008ffe:	79fb      	ldrb	r3, [r7, #7]
 8009000:	429a      	cmp	r2, r3
 8009002:	d805      	bhi.n	8009010 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc+0x26>
 8009004:	79fa      	ldrb	r2, [r7, #7]
 8009006:	797b      	ldrb	r3, [r7, #5]
 8009008:	429a      	cmp	r2, r3
 800900a:	d801      	bhi.n	8009010 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc+0x26>
 800900c:	2301      	movs	r3, #1
 800900e:	e000      	b.n	8009012 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc+0x28>
 8009010:	2300      	movs	r3, #0
  }
 8009012:	4618      	mov	r0, r3
 8009014:	370c      	adds	r7, #12
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr

0800901e <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>:
  explicit operator bool() const {
 800901e:	b480      	push	{r7}
 8009020:	b083      	sub	sp, #12
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
    return ptr_ != nullptr;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	2b00      	cmp	r3, #0
 800902c:	bf14      	ite	ne
 800902e:	2301      	movne	r3, #1
 8009030:	2300      	moveq	r3, #0
 8009032:	b2db      	uxtb	r3, r3
  }
 8009034:	4618      	mov	r0, r3
 8009036:	370c      	adds	r7, #12
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr

08009040 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>:
  SlotId id() const {
 8009040:	b480      	push	{r7}
 8009042:	b083      	sub	sp, #12
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
    return id_;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	889b      	ldrh	r3, [r3, #4]
  }
 800904c:	4618      	mov	r0, r3
 800904e:	370c      	adds	r7, #12
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr

08009058 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>:
  T* operator->() const {
 8009058:	b480      	push	{r7}
 800905a:	b083      	sub	sp, #12
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
    return ptr_;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
  }
 8009064:	4618      	mov	r0, r3
 8009066:	370c      	adds	r7, #12
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr

08009070 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8009070:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009074:	b082      	sub	sp, #8
 8009076:	af00      	add	r7, sp, #0
 8009078:	e9c7 0100 	strd	r0, r1, [r7]
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 800907c:	f000 f86e 	bl	800915c <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE6lowestEv>
 8009080:	4603      	mov	r3, r0
 8009082:	17da      	asrs	r2, r3, #31
 8009084:	4698      	mov	r8, r3
 8009086:	4691      	mov	r9, r2
 8009088:	e9d7 2300 	ldrd	r2, r3, [r7]
 800908c:	4542      	cmp	r2, r8
 800908e:	eb73 0309 	sbcs.w	r3, r3, r9
 8009092:	db0d      	blt.n	80090b0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x40>
         value <= TIn(numeric_limits<TOut>::highest());
 8009094:	f000 f86b 	bl	800916e <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE7highestEv>
 8009098:	4603      	mov	r3, r0
 800909a:	17da      	asrs	r2, r3, #31
 800909c:	461c      	mov	r4, r3
 800909e:	4615      	mov	r5, r2
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 80090a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090a4:	4294      	cmp	r4, r2
 80090a6:	eb75 0303 	sbcs.w	r3, r5, r3
 80090aa:	db01      	blt.n	80090b0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x40>
 80090ac:	2301      	movs	r3, #1
 80090ae:	e000      	b.n	80090b2 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x42>
 80090b0:	2300      	movs	r3, #0
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3708      	adds	r7, #8
 80090b6:	46bd      	mov	sp, r7
 80090b8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080090bc <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvE4readEv>:

  int read() {
 80090bc:	b480      	push	{r7}
 80090be:	b083      	sub	sp, #12
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
    return static_cast<unsigned char>(*ptr_++);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	1c59      	adds	r1, r3, #1
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	6011      	str	r1, [r2, #0]
 80090ce:	781b      	ldrb	r3, [r3, #0]
  }
 80090d0:	4618      	mov	r0, r3
 80090d2:	370c      	adds	r7, #12
 80090d4:	46bd      	mov	sp, r7
 80090d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090da:	4770      	bx	lr

080090dc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc>:
  static inline bool canBeInNonQuotedString(char c) {
 80090dc:	b580      	push	{r7, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	4603      	mov	r3, r0
 80090e4:	71fb      	strb	r3, [r7, #7]
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 80090e6:	79fb      	ldrb	r3, [r7, #7]
 80090e8:	2239      	movs	r2, #57	@ 0x39
 80090ea:	2130      	movs	r1, #48	@ 0x30
 80090ec:	4618      	mov	r0, r3
 80090ee:	f7ff ff7c 	bl	8008fea <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>
 80090f2:	4603      	mov	r3, r0
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d111      	bne.n	800911c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc+0x40>
 80090f8:	79fb      	ldrb	r3, [r7, #7]
 80090fa:	227a      	movs	r2, #122	@ 0x7a
 80090fc:	215f      	movs	r1, #95	@ 0x5f
 80090fe:	4618      	mov	r0, r3
 8009100:	f7ff ff73 	bl	8008fea <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>
 8009104:	4603      	mov	r3, r0
 8009106:	2b00      	cmp	r3, #0
 8009108:	d108      	bne.n	800911c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc+0x40>
           isBetween(c, 'A', 'Z');
 800910a:	79fb      	ldrb	r3, [r7, #7]
 800910c:	225a      	movs	r2, #90	@ 0x5a
 800910e:	2141      	movs	r1, #65	@ 0x41
 8009110:	4618      	mov	r0, r3
 8009112:	f7ff ff6a 	bl	8008fea <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>
 8009116:	4603      	mov	r3, r0
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 8009118:	2b00      	cmp	r3, #0
 800911a:	d001      	beq.n	8009120 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc+0x44>
 800911c:	2301      	movs	r3, #1
 800911e:	e000      	b.n	8009122 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc+0x46>
 8009120:	2300      	movs	r3, #0
  }
 8009122:	4618      	mov	r0, r3
 8009124:	3708      	adds	r7, #8
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}

0800912a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9decodeHexEc>:
  static inline uint8_t decodeHex(char c) {
 800912a:	b480      	push	{r7}
 800912c:	b083      	sub	sp, #12
 800912e:	af00      	add	r7, sp, #0
 8009130:	4603      	mov	r3, r0
 8009132:	71fb      	strb	r3, [r7, #7]
    if (c < 'A')
 8009134:	79fb      	ldrb	r3, [r7, #7]
 8009136:	2b40      	cmp	r3, #64	@ 0x40
 8009138:	d803      	bhi.n	8009142 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9decodeHexEc+0x18>
      return uint8_t(c - '0');
 800913a:	79fb      	ldrb	r3, [r7, #7]
 800913c:	3b30      	subs	r3, #48	@ 0x30
 800913e:	b2db      	uxtb	r3, r3
 8009140:	e006      	b.n	8009150 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9decodeHexEc+0x26>
    c = char(c & ~0x20);  // uppercase
 8009142:	79fb      	ldrb	r3, [r7, #7]
 8009144:	f023 0320 	bic.w	r3, r3, #32
 8009148:	71fb      	strb	r3, [r7, #7]
    return uint8_t(c - 'A' + 10);
 800914a:	79fb      	ldrb	r3, [r7, #7]
 800914c:	3b37      	subs	r3, #55	@ 0x37
 800914e:	b2db      	uxtb	r3, r3
  }
 8009150:	4618      	mov	r0, r3
 8009152:	370c      	adds	r7, #12
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr

0800915c <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE6lowestEv>:
};

template <typename T>
struct numeric_limits<
    T, enable_if_t<is_integral<T>::value && is_signed<T>::value>> {
  static constexpr T lowest() {
 800915c:	b480      	push	{r7}
 800915e:	af00      	add	r7, sp, #0
    return T(T(1) << (sizeof(T) * 8 - 1));
 8009160:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
  }
 8009164:	4618      	mov	r0, r3
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr

0800916e <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE7highestEv>:
  static constexpr T highest() {
 800916e:	b580      	push	{r7, lr}
 8009170:	af00      	add	r7, sp, #0
    return T(~lowest());
 8009172:	f7ff fff3 	bl	800915c <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE6lowestEv>
 8009176:	4603      	mov	r3, r0
 8009178:	43db      	mvns	r3, r3
  }
 800917a:	4618      	mov	r0, r3
 800917c:	bd80      	pop	{r7, pc}
	...

08009180 <__io_putchar>:


// re-target printf to UART1 by redeclaring week function in syscalls.c
extern "C" {
	int __io_putchar(int ch)
	{
 8009180:	b580      	push	{r7, lr}
 8009182:	b082      	sub	sp, #8
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
	  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8009188:	1d39      	adds	r1, r7, #4
 800918a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800918e:	2201      	movs	r2, #1
 8009190:	4803      	ldr	r0, [pc, #12]	@ (80091a0 <__io_putchar+0x20>)
 8009192:	f018 fb90 	bl	80218b6 <HAL_UART_Transmit>
	  return ch;
 8009196:	687b      	ldr	r3, [r7, #4]
	}
 8009198:	4618      	mov	r0, r3
 800919a:	3708      	adds	r7, #8
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}
 80091a0:	24000374 	.word	0x24000374

080091a4 <main>:
}

int main(void)
{
 80091a4:	b590      	push	{r4, r7, lr}
 80091a6:	b083      	sub	sp, #12
 80091a8:	af00      	add	r7, sp, #0
	MPU_Config();
 80091aa:	f000 fa55 	bl	8009658 <_ZL10MPU_Configv>
	//SCB->VTOR = 0x08000000;
	HAL_Init();
 80091ae:	f010 f8e1 	bl	8019374 <HAL_Init>
	SystemClock_Config();
 80091b2:	f000 f867 	bl	8009284 <_Z18SystemClock_Configv>
	PeriphCommonClock_Config();
 80091b6:	f000 f92f 	bl	8009418 <_Z24PeriphCommonClock_Configv>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80091ba:	f3bf 8f4f 	dsb	sy
}
 80091be:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80091c0:	f3bf 8f6f 	isb	sy
}
 80091c4:	bf00      	nop
__STATIC_FORCEINLINE void SCB_InvalidateICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;
 80091c6:	4b2d      	ldr	r3, [pc, #180]	@ (800927c <main+0xd8>)
 80091c8:	2200      	movs	r2, #0
 80091ca:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80091ce:	f3bf 8f4f 	dsb	sy
}
 80091d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80091d4:	f3bf 8f6f 	isb	sy
}
 80091d8:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80091da:	bf00      	nop
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80091dc:	4b27      	ldr	r3, [pc, #156]	@ (800927c <main+0xd8>)
 80091de:	695b      	ldr	r3, [r3, #20]
 80091e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	bf14      	ite	ne
 80091e8:	2301      	movne	r3, #1
 80091ea:	2300      	moveq	r3, #0
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d11b      	bne.n	800922a <main+0x86>
  __ASM volatile ("dsb 0xF":::"memory");
 80091f2:	f3bf 8f4f 	dsb	sy
}
 80091f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80091f8:	f3bf 8f6f 	isb	sy
}
 80091fc:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80091fe:	4b1f      	ldr	r3, [pc, #124]	@ (800927c <main+0xd8>)
 8009200:	2200      	movs	r2, #0
 8009202:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8009206:	f3bf 8f4f 	dsb	sy
}
 800920a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800920c:	f3bf 8f6f 	isb	sy
}
 8009210:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8009212:	4b1a      	ldr	r3, [pc, #104]	@ (800927c <main+0xd8>)
 8009214:	695b      	ldr	r3, [r3, #20]
 8009216:	4a19      	ldr	r2, [pc, #100]	@ (800927c <main+0xd8>)
 8009218:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800921c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800921e:	f3bf 8f4f 	dsb	sy
}
 8009222:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009224:	f3bf 8f6f 	isb	sy
}
 8009228:	e000      	b.n	800922c <main+0x88>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800922a:	bf00      	nop
	SCB_InvalidateICache();
	SCB_EnableICache();
	//SCB_InvalidateDCache();
	//SCB_EnableDCache();

    __HAL_RCC_DMA1_CLK_ENABLE();
 800922c:	4b14      	ldr	r3, [pc, #80]	@ (8009280 <main+0xdc>)
 800922e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009232:	4a13      	ldr	r2, [pc, #76]	@ (8009280 <main+0xdc>)
 8009234:	f043 0301 	orr.w	r3, r3, #1
 8009238:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800923c:	4b10      	ldr	r3, [pc, #64]	@ (8009280 <main+0xdc>)
 800923e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009242:	f003 0301 	and.w	r3, r3, #1
 8009246:	603b      	str	r3, [r7, #0]
 8009248:	683b      	ldr	r3, [r7, #0]

	MX_GPIO_Init(); 			// used for SD card detect
 800924a:	f000 f9a9 	bl	80095a0 <_ZL12MX_GPIO_Initv>
	MX_USART1_UART_Init();
 800924e:	f000 f947 	bl	80094e0 <_ZL19MX_USART1_UART_Initv>
	MX_SDMMC1_SD_Init();		// uncomment line 62 #define ENABLE_SD_DMA_CACHE_MAINTENANCE  1 in FATFT/Target/sd_diskio.c
 8009252:	f000 f919 	bl	8009488 <_ZL17MX_SDMMC1_SD_Initv>
	MX_FATFS_Init();
 8009256:	f01a fa13 	bl	8023680 <MX_FATFS_Init>

	Remora *remora = new Remora();
 800925a:	2044      	movs	r0, #68	@ 0x44
 800925c:	f01c fe3e 	bl	8025edc <_Znwj>
 8009260:	4603      	mov	r3, r0
 8009262:	461c      	mov	r4, r3
 8009264:	4620      	mov	r0, r4
 8009266:	f000 fe61 	bl	8009f2c <_ZN6RemoraC1Ev>
 800926a:	607c      	str	r4, [r7, #4]
	remora->run();
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f001 f8ff 	bl	800a470 <_ZN6Remora3runEv>
}
 8009272:	2300      	movs	r3, #0
 8009274:	4618      	mov	r0, r3
 8009276:	370c      	adds	r7, #12
 8009278:	46bd      	mov	sp, r7
 800927a:	bd90      	pop	{r4, r7, pc}
 800927c:	e000ed00 	.word	0xe000ed00
 8009280:	58024400 	.word	0x58024400

08009284 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b09e      	sub	sp, #120	@ 0x78
 8009288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800928a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800928e:	224c      	movs	r2, #76	@ 0x4c
 8009290:	2100      	movs	r1, #0
 8009292:	4618      	mov	r0, r3
 8009294:	f01d fe46 	bl	8026f24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009298:	f107 030c 	add.w	r3, r7, #12
 800929c:	2220      	movs	r2, #32
 800929e:	2100      	movs	r1, #0
 80092a0:	4618      	mov	r0, r3
 80092a2:	f01d fe3f 	bl	8026f24 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80092a6:	2002      	movs	r0, #2
 80092a8:	f012 ffea 	bl	801c280 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80092ac:	2300      	movs	r3, #0
 80092ae:	60bb      	str	r3, [r7, #8]
 80092b0:	4b56      	ldr	r3, [pc, #344]	@ (800940c <_Z18SystemClock_Configv+0x188>)
 80092b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092b4:	4a55      	ldr	r2, [pc, #340]	@ (800940c <_Z18SystemClock_Configv+0x188>)
 80092b6:	f023 0301 	bic.w	r3, r3, #1
 80092ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80092bc:	4b53      	ldr	r3, [pc, #332]	@ (800940c <_Z18SystemClock_Configv+0x188>)
 80092be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092c0:	f003 0301 	and.w	r3, r3, #1
 80092c4:	60bb      	str	r3, [r7, #8]
 80092c6:	4b52      	ldr	r3, [pc, #328]	@ (8009410 <_Z18SystemClock_Configv+0x18c>)
 80092c8:	699b      	ldr	r3, [r3, #24]
 80092ca:	4a51      	ldr	r2, [pc, #324]	@ (8009410 <_Z18SystemClock_Configv+0x18c>)
 80092cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80092d0:	6193      	str	r3, [r2, #24]
 80092d2:	4b4f      	ldr	r3, [pc, #316]	@ (8009410 <_Z18SystemClock_Configv+0x18c>)
 80092d4:	699b      	ldr	r3, [r3, #24]
 80092d6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80092da:	60bb      	str	r3, [r7, #8]
 80092dc:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80092de:	bf00      	nop
 80092e0:	4b4b      	ldr	r3, [pc, #300]	@ (8009410 <_Z18SystemClock_Configv+0x18c>)
 80092e2:	699b      	ldr	r3, [r3, #24]
 80092e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80092e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092ec:	bf14      	ite	ne
 80092ee:	2301      	movne	r3, #1
 80092f0:	2300      	moveq	r3, #0
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d1f3      	bne.n	80092e0 <_Z18SystemClock_Configv+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80092f8:	4b46      	ldr	r3, [pc, #280]	@ (8009414 <_Z18SystemClock_Configv+0x190>)
 80092fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80092fe:	4a45      	ldr	r2, [pc, #276]	@ (8009414 <_Z18SystemClock_Configv+0x190>)
 8009300:	f043 0302 	orr.w	r3, r3, #2
 8009304:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8009308:	4b42      	ldr	r3, [pc, #264]	@ (8009414 <_Z18SystemClock_Configv+0x190>)
 800930a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800930e:	f003 0302 	and.w	r3, r3, #2
 8009312:	607b      	str	r3, [r7, #4]
 8009314:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8009316:	2300      	movs	r3, #0
 8009318:	603b      	str	r3, [r7, #0]
 800931a:	4b3d      	ldr	r3, [pc, #244]	@ (8009410 <_Z18SystemClock_Configv+0x18c>)
 800931c:	699b      	ldr	r3, [r3, #24]
 800931e:	4a3c      	ldr	r2, [pc, #240]	@ (8009410 <_Z18SystemClock_Configv+0x18c>)
 8009320:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009324:	6193      	str	r3, [r2, #24]
 8009326:	4b3a      	ldr	r3, [pc, #232]	@ (8009410 <_Z18SystemClock_Configv+0x18c>)
 8009328:	699b      	ldr	r3, [r3, #24]
 800932a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800932e:	603b      	str	r3, [r7, #0]
 8009330:	4b36      	ldr	r3, [pc, #216]	@ (800940c <_Z18SystemClock_Configv+0x188>)
 8009332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009334:	4a35      	ldr	r2, [pc, #212]	@ (800940c <_Z18SystemClock_Configv+0x188>)
 8009336:	f043 0301 	orr.w	r3, r3, #1
 800933a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800933c:	4b33      	ldr	r3, [pc, #204]	@ (800940c <_Z18SystemClock_Configv+0x188>)
 800933e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009340:	f003 0301 	and.w	r3, r3, #1
 8009344:	603b      	str	r3, [r7, #0]
 8009346:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8009348:	bf00      	nop
 800934a:	4b31      	ldr	r3, [pc, #196]	@ (8009410 <_Z18SystemClock_Configv+0x18c>)
 800934c:	699b      	ldr	r3, [r3, #24]
 800934e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009352:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009356:	bf14      	ite	ne
 8009358:	2301      	movne	r3, #1
 800935a:	2300      	moveq	r3, #0
 800935c:	b2db      	uxtb	r3, r3
 800935e:	2b00      	cmp	r3, #0
 8009360:	d1f3      	bne.n	800934a <_Z18SystemClock_Configv+0xc6>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8009362:	4b2c      	ldr	r3, [pc, #176]	@ (8009414 <_Z18SystemClock_Configv+0x190>)
 8009364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009366:	f023 0303 	bic.w	r3, r3, #3
 800936a:	4a2a      	ldr	r2, [pc, #168]	@ (8009414 <_Z18SystemClock_Configv+0x190>)
 800936c:	f043 0302 	orr.w	r3, r3, #2
 8009370:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009372:	2301      	movs	r3, #1
 8009374:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009376:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800937a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800937c:	2302      	movs	r3, #2
 800937e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009380:	2302      	movs	r3, #2
 8009382:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8009384:	2305      	movs	r3, #5
 8009386:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8009388:	23c0      	movs	r3, #192	@ 0xc0
 800938a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 800938c:	2302      	movs	r3, #2
 800938e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8009390:	2304      	movs	r3, #4
 8009392:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8009394:	2302      	movs	r3, #2
 8009396:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8009398:	2308      	movs	r3, #8
 800939a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800939c:	2300      	movs	r3, #0
 800939e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80093a0:	2300      	movs	r3, #0
 80093a2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80093a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80093a8:	4618      	mov	r0, r3
 80093aa:	f012 ffa3 	bl	801c2f4 <HAL_RCC_OscConfig>
 80093ae:	4603      	mov	r3, r0
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	bf14      	ite	ne
 80093b4:	2301      	movne	r3, #1
 80093b6:	2300      	moveq	r3, #0
 80093b8:	b2db      	uxtb	r3, r3
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d001      	beq.n	80093c2 <_Z18SystemClock_Configv+0x13e>
  {
    Error_Handler();
 80093be:	f000 f993 	bl	80096e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80093c2:	233f      	movs	r3, #63	@ 0x3f
 80093c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80093c6:	2303      	movs	r3, #3
 80093c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80093ca:	2300      	movs	r3, #0
 80093cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80093ce:	2308      	movs	r3, #8
 80093d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80093d2:	2340      	movs	r3, #64	@ 0x40
 80093d4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80093d6:	2340      	movs	r3, #64	@ 0x40
 80093d8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80093da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80093de:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80093e0:	2340      	movs	r3, #64	@ 0x40
 80093e2:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80093e4:	f107 030c 	add.w	r3, r7, #12
 80093e8:	2104      	movs	r1, #4
 80093ea:	4618      	mov	r0, r3
 80093ec:	f013 fbdc 	bl	801cba8 <HAL_RCC_ClockConfig>
 80093f0:	4603      	mov	r3, r0
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	bf14      	ite	ne
 80093f6:	2301      	movne	r3, #1
 80093f8:	2300      	moveq	r3, #0
 80093fa:	b2db      	uxtb	r3, r3
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d001      	beq.n	8009404 <_Z18SystemClock_Configv+0x180>
  {
    Error_Handler();
 8009400:	f000 f972 	bl	80096e8 <Error_Handler>
  }
}
 8009404:	bf00      	nop
 8009406:	3778      	adds	r7, #120	@ 0x78
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}
 800940c:	58000400 	.word	0x58000400
 8009410:	58024800 	.word	0x58024800
 8009414:	58024400 	.word	0x58024400

08009418 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b0b0      	sub	sp, #192	@ 0xc0
 800941c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800941e:	463b      	mov	r3, r7
 8009420:	22c0      	movs	r2, #192	@ 0xc0
 8009422:	2100      	movs	r1, #0
 8009424:	4618      	mov	r0, r3
 8009426:	f01d fd7d 	bl	8026f24 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SPI1;
 800942a:	f44f 3288 	mov.w	r2, #69632	@ 0x11000
 800942e:	f04f 0300 	mov.w	r3, #0
 8009432:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8009436:	2302      	movs	r3, #2
 8009438:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 800943a:	230c      	movs	r3, #12
 800943c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 800943e:	2301      	movs	r3, #1
 8009440:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 10;
 8009442:	230a      	movs	r3, #10
 8009444:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8009446:	2302      	movs	r3, #2
 8009448:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800944a:	23c0      	movs	r3, #192	@ 0xc0
 800944c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800944e:	2320      	movs	r3, #32
 8009450:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8009452:	2300      	movs	r3, #0
 8009454:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8009456:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800945a:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800945c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009460:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009462:	463b      	mov	r3, r7
 8009464:	4618      	mov	r0, r3
 8009466:	f013 ff2b 	bl	801d2c0 <HAL_RCCEx_PeriphCLKConfig>
 800946a:	4603      	mov	r3, r0
 800946c:	2b00      	cmp	r3, #0
 800946e:	bf14      	ite	ne
 8009470:	2301      	movne	r3, #1
 8009472:	2300      	moveq	r3, #0
 8009474:	b2db      	uxtb	r3, r3
 8009476:	2b00      	cmp	r3, #0
 8009478:	d001      	beq.n	800947e <_Z24PeriphCommonClock_Configv+0x66>
  {
    Error_Handler();
 800947a:	f000 f935 	bl	80096e8 <Error_Handler>
  }
}
 800947e:	bf00      	nop
 8009480:	37c0      	adds	r7, #192	@ 0xc0
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
	...

08009488 <_ZL17MX_SDMMC1_SD_Initv>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800948c:	4b11      	ldr	r3, [pc, #68]	@ (80094d4 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800948e:	4a12      	ldr	r2, [pc, #72]	@ (80094d8 <_ZL17MX_SDMMC1_SD_Initv+0x50>)
 8009490:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8009492:	4b10      	ldr	r3, [pc, #64]	@ (80094d4 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8009494:	2200      	movs	r2, #0
 8009496:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_ENABLE;
 8009498:	4b0e      	ldr	r3, [pc, #56]	@ (80094d4 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800949a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800949e:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80094a0:	4b0c      	ldr	r3, [pc, #48]	@ (80094d4 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 80094a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80094a6:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80094a8:	4b0a      	ldr	r3, [pc, #40]	@ (80094d4 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 80094aa:	2200      	movs	r2, #0
 80094ac:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 8;
 80094ae:	4b09      	ldr	r3, [pc, #36]	@ (80094d4 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 80094b0:	2208      	movs	r2, #8
 80094b2:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 80094b4:	4807      	ldr	r0, [pc, #28]	@ (80094d4 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 80094b6:	f016 fc01 	bl	801fcbc <HAL_SD_Init>
 80094ba:	4603      	mov	r3, r0
 80094bc:	2b00      	cmp	r3, #0
 80094be:	bf14      	ite	ne
 80094c0:	2301      	movne	r3, #1
 80094c2:	2300      	moveq	r3, #0
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d002      	beq.n	80094d0 <_ZL17MX_SDMMC1_SD_Initv+0x48>
  {
      printf("SD_Init error\n");
 80094ca:	4804      	ldr	r0, [pc, #16]	@ (80094dc <_ZL17MX_SDMMC1_SD_Initv+0x54>)
 80094cc:	f01d fc20 	bl	8026d10 <puts>
  }
  /* USER CODE END SDMMC1_Init 2 */

}
 80094d0:	bf00      	nop
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	240002f8 	.word	0x240002f8
 80094d8:	52007000 	.word	0x52007000
 80094dc:	08027e10 	.word	0x08027e10

080094e0 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80094e4:	4b2c      	ldr	r3, [pc, #176]	@ (8009598 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80094e6:	4a2d      	ldr	r2, [pc, #180]	@ (800959c <_ZL19MX_USART1_UART_Initv+0xbc>)
 80094e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = Config::pcBaud;
 80094ea:	4b2b      	ldr	r3, [pc, #172]	@ (8009598 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80094ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80094f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80094f2:	4b29      	ldr	r3, [pc, #164]	@ (8009598 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80094f4:	2200      	movs	r2, #0
 80094f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80094f8:	4b27      	ldr	r3, [pc, #156]	@ (8009598 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80094fa:	2200      	movs	r2, #0
 80094fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80094fe:	4b26      	ldr	r3, [pc, #152]	@ (8009598 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8009500:	2200      	movs	r2, #0
 8009502:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009504:	4b24      	ldr	r3, [pc, #144]	@ (8009598 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8009506:	220c      	movs	r2, #12
 8009508:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800950a:	4b23      	ldr	r3, [pc, #140]	@ (8009598 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800950c:	2200      	movs	r2, #0
 800950e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009510:	4b21      	ldr	r3, [pc, #132]	@ (8009598 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8009512:	2200      	movs	r2, #0
 8009514:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009516:	4b20      	ldr	r3, [pc, #128]	@ (8009598 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8009518:	2200      	movs	r2, #0
 800951a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800951c:	4b1e      	ldr	r3, [pc, #120]	@ (8009598 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800951e:	2200      	movs	r2, #0
 8009520:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009522:	4b1d      	ldr	r3, [pc, #116]	@ (8009598 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8009524:	2200      	movs	r2, #0
 8009526:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009528:	481b      	ldr	r0, [pc, #108]	@ (8009598 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800952a:	f018 f974 	bl	8021816 <HAL_UART_Init>
 800952e:	4603      	mov	r3, r0
 8009530:	2b00      	cmp	r3, #0
 8009532:	bf14      	ite	ne
 8009534:	2301      	movne	r3, #1
 8009536:	2300      	moveq	r3, #0
 8009538:	b2db      	uxtb	r3, r3
 800953a:	2b00      	cmp	r3, #0
 800953c:	d001      	beq.n	8009542 <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 800953e:	f000 f8d3 	bl	80096e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009542:	2100      	movs	r1, #0
 8009544:	4814      	ldr	r0, [pc, #80]	@ (8009598 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8009546:	f019 fa06 	bl	8022956 <HAL_UARTEx_SetTxFifoThreshold>
 800954a:	4603      	mov	r3, r0
 800954c:	2b00      	cmp	r3, #0
 800954e:	bf14      	ite	ne
 8009550:	2301      	movne	r3, #1
 8009552:	2300      	moveq	r3, #0
 8009554:	b2db      	uxtb	r3, r3
 8009556:	2b00      	cmp	r3, #0
 8009558:	d001      	beq.n	800955e <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 800955a:	f000 f8c5 	bl	80096e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800955e:	2100      	movs	r1, #0
 8009560:	480d      	ldr	r0, [pc, #52]	@ (8009598 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8009562:	f019 fa36 	bl	80229d2 <HAL_UARTEx_SetRxFifoThreshold>
 8009566:	4603      	mov	r3, r0
 8009568:	2b00      	cmp	r3, #0
 800956a:	bf14      	ite	ne
 800956c:	2301      	movne	r3, #1
 800956e:	2300      	moveq	r3, #0
 8009570:	b2db      	uxtb	r3, r3
 8009572:	2b00      	cmp	r3, #0
 8009574:	d001      	beq.n	800957a <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 8009576:	f000 f8b7 	bl	80096e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800957a:	4807      	ldr	r0, [pc, #28]	@ (8009598 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800957c:	f019 f9b2 	bl	80228e4 <HAL_UARTEx_DisableFifoMode>
 8009580:	4603      	mov	r3, r0
 8009582:	2b00      	cmp	r3, #0
 8009584:	bf14      	ite	ne
 8009586:	2301      	movne	r3, #1
 8009588:	2300      	moveq	r3, #0
 800958a:	b2db      	uxtb	r3, r3
 800958c:	2b00      	cmp	r3, #0
 800958e:	d001      	beq.n	8009594 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8009590:	f000 f8aa 	bl	80096e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8009594:	bf00      	nop
 8009596:	bd80      	pop	{r7, pc}
 8009598:	24000374 	.word	0x24000374
 800959c:	40011000 	.word	0x40011000

080095a0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b08a      	sub	sp, #40	@ 0x28
 80095a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80095a6:	f107 0314 	add.w	r3, r7, #20
 80095aa:	2200      	movs	r2, #0
 80095ac:	601a      	str	r2, [r3, #0]
 80095ae:	605a      	str	r2, [r3, #4]
 80095b0:	609a      	str	r2, [r3, #8]
 80095b2:	60da      	str	r2, [r3, #12]
 80095b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80095b6:	4b26      	ldr	r3, [pc, #152]	@ (8009650 <_ZL12MX_GPIO_Initv+0xb0>)
 80095b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80095bc:	4a24      	ldr	r2, [pc, #144]	@ (8009650 <_ZL12MX_GPIO_Initv+0xb0>)
 80095be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80095c6:	4b22      	ldr	r3, [pc, #136]	@ (8009650 <_ZL12MX_GPIO_Initv+0xb0>)
 80095c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80095cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095d0:	613b      	str	r3, [r7, #16]
 80095d2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80095d4:	4b1e      	ldr	r3, [pc, #120]	@ (8009650 <_ZL12MX_GPIO_Initv+0xb0>)
 80095d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80095da:	4a1d      	ldr	r2, [pc, #116]	@ (8009650 <_ZL12MX_GPIO_Initv+0xb0>)
 80095dc:	f043 0304 	orr.w	r3, r3, #4
 80095e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80095e4:	4b1a      	ldr	r3, [pc, #104]	@ (8009650 <_ZL12MX_GPIO_Initv+0xb0>)
 80095e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80095ea:	f003 0304 	and.w	r3, r3, #4
 80095ee:	60fb      	str	r3, [r7, #12]
 80095f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80095f2:	4b17      	ldr	r3, [pc, #92]	@ (8009650 <_ZL12MX_GPIO_Initv+0xb0>)
 80095f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80095f8:	4a15      	ldr	r2, [pc, #84]	@ (8009650 <_ZL12MX_GPIO_Initv+0xb0>)
 80095fa:	f043 0301 	orr.w	r3, r3, #1
 80095fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8009602:	4b13      	ldr	r3, [pc, #76]	@ (8009650 <_ZL12MX_GPIO_Initv+0xb0>)
 8009604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009608:	f003 0301 	and.w	r3, r3, #1
 800960c:	60bb      	str	r3, [r7, #8]
 800960e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009610:	4b0f      	ldr	r3, [pc, #60]	@ (8009650 <_ZL12MX_GPIO_Initv+0xb0>)
 8009612:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009616:	4a0e      	ldr	r2, [pc, #56]	@ (8009650 <_ZL12MX_GPIO_Initv+0xb0>)
 8009618:	f043 0308 	orr.w	r3, r3, #8
 800961c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8009620:	4b0b      	ldr	r3, [pc, #44]	@ (8009650 <_ZL12MX_GPIO_Initv+0xb0>)
 8009622:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009626:	f003 0308 	and.w	r3, r3, #8
 800962a:	607b      	str	r3, [r7, #4]
 800962c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800962e:	2310      	movs	r3, #16
 8009630:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009632:	2300      	movs	r3, #0
 8009634:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009636:	2300      	movs	r3, #0
 8009638:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800963a:	f107 0314 	add.w	r3, r7, #20
 800963e:	4619      	mov	r1, r3
 8009640:	4804      	ldr	r0, [pc, #16]	@ (8009654 <_ZL12MX_GPIO_Initv+0xb4>)
 8009642:	f012 fc3b 	bl	801bebc <HAL_GPIO_Init>

}
 8009646:	bf00      	nop
 8009648:	3728      	adds	r7, #40	@ 0x28
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}
 800964e:	bf00      	nop
 8009650:	58024400 	.word	0x58024400
 8009654:	58020800 	.word	0x58020800

08009658 <_ZL10MPU_Configv>:
/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

void MPU_Config(void)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800965e:	463b      	mov	r3, r7
 8009660:	2200      	movs	r2, #0
 8009662:	601a      	str	r2, [r3, #0]
 8009664:	605a      	str	r2, [r3, #4]
 8009666:	609a      	str	r2, [r3, #8]
 8009668:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800966a:	f010 f86f 	bl	801974c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800966e:	2301      	movs	r3, #1
 8009670:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8009672:	2300      	movs	r3, #0
 8009674:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8009676:	2300      	movs	r3, #0
 8009678:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800967a:	231f      	movs	r3, #31
 800967c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800967e:	2387      	movs	r3, #135	@ 0x87
 8009680:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8009682:	2300      	movs	r3, #0
 8009684:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8009686:	2300      	movs	r3, #0
 8009688:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800968a:	2301      	movs	r3, #1
 800968c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800968e:	2301      	movs	r3, #1
 8009690:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8009692:	2300      	movs	r3, #0
 8009694:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8009696:	2300      	movs	r3, #0
 8009698:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800969a:	463b      	mov	r3, r7
 800969c:	4618      	mov	r0, r3
 800969e:	f010 f88d 	bl	80197bc <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes as Device not cacheable
     for DMA buffers */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80096a2:	2301      	movs	r3, #1
 80096a4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x30000000;
 80096a6:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80096aa:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 80096ac:	2307      	movs	r3, #7
 80096ae:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80096b0:	2303      	movs	r3, #3
 80096b2:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80096b4:	2301      	movs	r3, #1
 80096b6:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80096b8:	2300      	movs	r3, #0
 80096ba:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80096bc:	2300      	movs	r3, #0
 80096be:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80096c0:	2301      	movs	r3, #1
 80096c2:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80096c4:	2300      	movs	r3, #0
 80096c6:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 80096c8:	2300      	movs	r3, #0
 80096ca:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80096cc:	2300      	movs	r3, #0
 80096ce:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80096d0:	463b      	mov	r3, r7
 80096d2:	4618      	mov	r0, r3
 80096d4:	f010 f872 	bl	80197bc <HAL_MPU_ConfigRegion>

  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80096d8:	2004      	movs	r0, #4
 80096da:	f010 f84f 	bl	801977c <HAL_MPU_Enable>

}
 80096de:	bf00      	nop
 80096e0:	3710      	adds	r7, #16
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}
	...

080096e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	printf("error\n\r");
 80096ec:	4803      	ldr	r0, [pc, #12]	@ (80096fc <Error_Handler+0x14>)
 80096ee:	f01d fa9f 	bl	8026c30 <iprintf>
  __ASM volatile ("cpsid i" : : : "memory");
 80096f2:	b672      	cpsid	i
}
 80096f4:	bf00      	nop

  __disable_irq();
  while (1)
 80096f6:	bf00      	nop
 80096f8:	e7fd      	b.n	80096f6 <Error_Handler+0xe>
 80096fa:	bf00      	nop
 80096fc:	08027e20 	.word	0x08027e20

08009700 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8009700:	b480      	push	{r7}
 8009702:	b083      	sub	sp, #12
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	6039      	str	r1, [r7, #0]
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	4618      	mov	r0, r3
 800970e:	370c      	adds	r7, #12
 8009710:	46bd      	mov	sp, r7
 8009712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009716:	4770      	bx	lr

08009718 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>:
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 8009718:	b480      	push	{r7}
 800971a:	b083      	sub	sp, #12
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	1c5a      	adds	r2, r3, #1
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	605a      	str	r2, [r3, #4]
 800972a:	bf00      	nop
 800972c:	370c      	adds	r7, #12
 800972e:	46bd      	mov	sp, r7
 8009730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009734:	4770      	bx	lr

08009736 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
 8009736:	b580      	push	{r7, lr}
 8009738:	b082      	sub	sp, #8
 800973a:	af00      	add	r7, sp, #0
 800973c:	6078      	str	r0, [r7, #4]
      if (--_M_use_count == 0)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	1e5a      	subs	r2, r3, #1
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	605a      	str	r2, [r3, #4]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	685b      	ldr	r3, [r3, #4]
 800974c:	2b00      	cmp	r3, #0
 800974e:	bf0c      	ite	eq
 8009750:	2301      	moveq	r3, #1
 8009752:	2300      	movne	r3, #0
 8009754:	b2db      	uxtb	r3, r3
 8009756:	2b00      	cmp	r3, #0
 8009758:	d019      	beq.n	800978e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
        {
          _M_dispose();
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	3308      	adds	r3, #8
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	689b      	ldr	r3, [r3, #8]
 800976a:	1e5a      	subs	r2, r3, #1
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	609a      	str	r2, [r3, #8]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	689b      	ldr	r3, [r3, #8]
 8009774:	2b00      	cmp	r3, #0
 8009776:	bf0c      	ite	eq
 8009778:	2301      	moveq	r3, #1
 800977a:	2300      	movne	r3, #0
 800977c:	b2db      	uxtb	r3, r3
 800977e:	2b00      	cmp	r3, #0
 8009780:	d005      	beq.n	800978e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
            _M_destroy();
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	330c      	adds	r3, #12
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	4798      	blx	r3
        }
    }
 800978e:	bf00      	nop
 8009790:	3708      	adds	r7, #8
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
	...

08009798 <_ZNSt19_Sp_make_shared_tag5_S_tiEv>:
  private:
    template<typename _Tp, typename _Alloc, _Lock_policy _Lp>
      friend class _Sp_counted_ptr_inplace;

    static const type_info&
    _S_ti() noexcept _GLIBCXX_VISIBILITY(default)
 8009798:	b480      	push	{r7}
 800979a:	af00      	add	r7, sp, #0
    {
      alignas(type_info) static constexpr char __tag[sizeof(type_info)] = { };
      return reinterpret_cast<const type_info&>(__tag);
 800979c:	4b02      	ldr	r3, [pc, #8]	@ (80097a8 <_ZNSt19_Sp_make_shared_tag5_S_tiEv+0x10>)
    }
 800979e:	4618      	mov	r0, r3
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr
 80097a8:	08028984 	.word	0x08028984

080097ac <_ZN8txData_tC1Ev>:
    int32_t jointFeedback[Config::joints];	  // Base thread feedback ??
    float processVariable[Config::variables];		     // Servo thread feedback ??
	uint16_t inputs;
  };

  txData_t() {
 80097ac:	b480      	push	{r7}
 80097ae:	b085      	sub	sp, #20
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
      header = 0;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2200      	movs	r2, #0
 80097b8:	601a      	str	r2, [r3, #0]
      inputs = 0;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2200      	movs	r2, #0
 80097be:	879a      	strh	r2, [r3, #60]	@ 0x3c
      for (uint8_t i=0;i<Config::joints;i++) {
 80097c0:	2300      	movs	r3, #0
 80097c2:	73fb      	strb	r3, [r7, #15]
 80097c4:	e008      	b.n	80097d8 <_ZN8txData_tC1Ev+0x2c>
         jointFeedback[i] = 0;
 80097c6:	7bfb      	ldrb	r3, [r7, #15]
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	009b      	lsls	r3, r3, #2
 80097cc:	4413      	add	r3, r2
 80097ce:	2200      	movs	r2, #0
 80097d0:	605a      	str	r2, [r3, #4]
      for (uint8_t i=0;i<Config::joints;i++) {
 80097d2:	7bfb      	ldrb	r3, [r7, #15]
 80097d4:	3301      	adds	r3, #1
 80097d6:	73fb      	strb	r3, [r7, #15]
 80097d8:	7bfb      	ldrb	r3, [r7, #15]
 80097da:	2b07      	cmp	r3, #7
 80097dc:	d9f3      	bls.n	80097c6 <_ZN8txData_tC1Ev+0x1a>
      }
      for (uint8_t i=0;i<Config::variables;i++) {
 80097de:	2300      	movs	r3, #0
 80097e0:	73bb      	strb	r3, [r7, #14]
 80097e2:	e00b      	b.n	80097fc <_ZN8txData_tC1Ev+0x50>
         processVariable[i] = 0.0;
 80097e4:	7bbb      	ldrb	r3, [r7, #14]
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	3308      	adds	r3, #8
 80097ea:	009b      	lsls	r3, r3, #2
 80097ec:	4413      	add	r3, r2
 80097ee:	3304      	adds	r3, #4
 80097f0:	f04f 0200 	mov.w	r2, #0
 80097f4:	601a      	str	r2, [r3, #0]
      for (uint8_t i=0;i<Config::variables;i++) {
 80097f6:	7bbb      	ldrb	r3, [r7, #14]
 80097f8:	3301      	adds	r3, #1
 80097fa:	73bb      	strb	r3, [r7, #14]
 80097fc:	7bbb      	ldrb	r3, [r7, #14]
 80097fe:	2b05      	cmp	r3, #5
 8009800:	d9f0      	bls.n	80097e4 <_ZN8txData_tC1Ev+0x38>
     }
  }
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	4618      	mov	r0, r3
 8009806:	3714      	adds	r7, #20
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr

08009810 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8009810:	b480      	push	{r7}
 8009812:	b083      	sub	sp, #12
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	681a      	ldr	r2, [r3, #0]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	429a      	cmp	r2, r3
 8009824:	d201      	bcs.n	800982a <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	e000      	b.n	800982c <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 800982a:	687b      	ldr	r3, [r7, #4]
    }
 800982c:	4618      	mov	r0, r3
 800982e:	370c      	adds	r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr

08009838 <_ZNK11ArduinoJson8V730HB226detail9RamString8isStaticEv>:
  bool isStatic() const {
 8009838:	b480      	push	{r7}
 800983a:	b083      	sub	sp, #12
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
    return static_;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	7a1b      	ldrb	r3, [r3, #8]
  }
 8009844:	4618      	mov	r0, r3
 8009846:	370c      	adds	r7, #12
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr

08009850 <_ZN11ArduinoJson8V730HB226detail10StringPoolD1Ev>:
  ~StringPool() {
 8009850:	b480      	push	{r7}
 8009852:	b083      	sub	sp, #12
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  }
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	4618      	mov	r0, r3
 800985c:	370c      	adds	r7, #12
 800985e:	46bd      	mov	sp, r7
 8009860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009864:	4770      	bx	lr

08009866 <_ZN11ArduinoJson8V730HB226detail9ArrayData10getElementEPKS2_jPKNS1_15ResourceManagerE>:

  VariantData* getOrAddElement(size_t index, ResourceManager* resources);

  VariantData* getElement(size_t index, const ResourceManager* resources) const;

  static VariantData* getElement(const ArrayData* array, size_t index,
 8009866:	b580      	push	{r7, lr}
 8009868:	b084      	sub	sp, #16
 800986a:	af00      	add	r7, sp, #0
 800986c:	60f8      	str	r0, [r7, #12]
 800986e:	60b9      	str	r1, [r7, #8]
 8009870:	607a      	str	r2, [r7, #4]
                                 const ResourceManager* resources) {
    if (!array)
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d101      	bne.n	800987c <_ZN11ArduinoJson8V730HB226detail9ArrayData10getElementEPKS2_jPKNS1_15ResourceManagerE+0x16>
      return nullptr;
 8009878:	2300      	movs	r3, #0
 800987a:	e006      	b.n	800988a <_ZN11ArduinoJson8V730HB226detail9ArrayData10getElementEPKS2_jPKNS1_15ResourceManagerE+0x24>
    return array->getElement(index, resources);
 800987c:	687a      	ldr	r2, [r7, #4]
 800987e:	68b9      	ldr	r1, [r7, #8]
 8009880:	68f8      	ldr	r0, [r7, #12]
 8009882:	f000 f9ab 	bl	8009bdc <_ZNK11ArduinoJson8V730HB226detail9ArrayData10getElementEjPKNS1_15ResourceManagerE>
 8009886:	4603      	mov	r3, r0
 8009888:	bf00      	nop
  }
 800988a:	4618      	mov	r0, r3
 800988c:	3710      	adds	r7, #16
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}

08009892 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asArrayEv>:
  const ArrayData* asArray() const {
 8009892:	b580      	push	{r7, lr}
 8009894:	b082      	sub	sp, #8
 8009896:	af00      	add	r7, sp, #0
 8009898:	6078      	str	r0, [r7, #4]
    return const_cast<VariantData*>(this)->asArray();
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f7fa fd0f 	bl	80042be <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv>
 80098a0:	4603      	mov	r3, r0
  }
 80098a2:	4618      	mov	r0, r3
 80098a4:	3708      	adds	r7, #8
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}

080098aa <_ZNK11ArduinoJson8V730HB226detail11VariantData10getElementEjPKNS1_15ResourceManagerE>:
  VariantData* getElement(size_t index,
 80098aa:	b580      	push	{r7, lr}
 80098ac:	b084      	sub	sp, #16
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	60f8      	str	r0, [r7, #12]
 80098b2:	60b9      	str	r1, [r7, #8]
 80098b4:	607a      	str	r2, [r7, #4]
    return ArrayData::getElement(asArray(), index, resources);
 80098b6:	68f8      	ldr	r0, [r7, #12]
 80098b8:	f7ff ffeb 	bl	8009892 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asArrayEv>
 80098bc:	4603      	mov	r3, r0
 80098be:	687a      	ldr	r2, [r7, #4]
 80098c0:	68b9      	ldr	r1, [r7, #8]
 80098c2:	4618      	mov	r0, r3
 80098c4:	f7ff ffcf 	bl	8009866 <_ZN11ArduinoJson8V730HB226detail9ArrayData10getElementEPKS2_jPKNS1_15ResourceManagerE>
 80098c8:	4603      	mov	r3, r0
  }
 80098ca:	4618      	mov	r0, r3
 80098cc:	3710      	adds	r7, #16
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}

080098d2 <_ZN11ArduinoJson8V730HB226detail11VariantData10getElementEPKS2_jPKNS1_15ResourceManagerE>:
  static VariantData* getElement(const VariantData* var, size_t index,
 80098d2:	b580      	push	{r7, lr}
 80098d4:	b084      	sub	sp, #16
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	60f8      	str	r0, [r7, #12]
 80098da:	60b9      	str	r1, [r7, #8]
 80098dc:	607a      	str	r2, [r7, #4]
    return var != 0 ? var->getElement(index, resources) : 0;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d006      	beq.n	80098f2 <_ZN11ArduinoJson8V730HB226detail11VariantData10getElementEPKS2_jPKNS1_15ResourceManagerE+0x20>
 80098e4:	687a      	ldr	r2, [r7, #4]
 80098e6:	68b9      	ldr	r1, [r7, #8]
 80098e8:	68f8      	ldr	r0, [r7, #12]
 80098ea:	f7ff ffde 	bl	80098aa <_ZNK11ArduinoJson8V730HB226detail11VariantData10getElementEjPKNS1_15ResourceManagerE>
 80098ee:	4603      	mov	r3, r0
 80098f0:	e000      	b.n	80098f4 <_ZN11ArduinoJson8V730HB226detail11VariantData10getElementEPKS2_jPKNS1_15ResourceManagerE+0x22>
 80098f2:	2300      	movs	r3, #0
  }
 80098f4:	4618      	mov	r0, r3
 80098f6:	3710      	adds	r7, #16
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE>:
  VariantData* getOrAddElement(size_t index, ResourceManager* resources) {
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b086      	sub	sp, #24
 8009900:	af00      	add	r7, sp, #0
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	60b9      	str	r1, [r7, #8]
 8009906:	607a      	str	r2, [r7, #4]
    auto array = isNull() ? &toArray() : asArray();
 8009908:	68f8      	ldr	r0, [r7, #12]
 800990a:	f000 f81d 	bl	8009948 <_ZNK11ArduinoJson8V730HB226detail11VariantData6isNullEv>
 800990e:	4603      	mov	r3, r0
 8009910:	2b00      	cmp	r3, #0
 8009912:	d004      	beq.n	800991e <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE+0x22>
 8009914:	68f8      	ldr	r0, [r7, #12]
 8009916:	f7fa fdd7 	bl	80044c8 <_ZN11ArduinoJson8V730HB226detail11VariantData7toArrayEv>
 800991a:	4603      	mov	r3, r0
 800991c:	e003      	b.n	8009926 <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE+0x2a>
 800991e:	68f8      	ldr	r0, [r7, #12]
 8009920:	f7fa fccd 	bl	80042be <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv>
 8009924:	4603      	mov	r3, r0
 8009926:	617b      	str	r3, [r7, #20]
    if (!array)
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d101      	bne.n	8009932 <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE+0x36>
      return nullptr;
 800992e:	2300      	movs	r3, #0
 8009930:	e006      	b.n	8009940 <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE+0x44>
    return array->getOrAddElement(index, resources);
 8009932:	687a      	ldr	r2, [r7, #4]
 8009934:	68b9      	ldr	r1, [r7, #8]
 8009936:	6978      	ldr	r0, [r7, #20]
 8009938:	f000 f8ff 	bl	8009b3a <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE>
 800993c:	4603      	mov	r3, r0
 800993e:	bf00      	nop
  }
 8009940:	4618      	mov	r0, r3
 8009942:	3718      	adds	r7, #24
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}

08009948 <_ZNK11ArduinoJson8V730HB226detail11VariantData6isNullEv>:
  bool isNull() const {
 8009948:	b480      	push	{r7}
 800994a:	b083      	sub	sp, #12
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
    return type_ == VariantType::Null;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	791b      	ldrb	r3, [r3, #4]
 8009954:	2b00      	cmp	r3, #0
 8009956:	bf0c      	ite	eq
 8009958:	2301      	moveq	r3, #1
 800995a:	2300      	movne	r3, #0
 800995c:	b2db      	uxtb	r3, r3
  }
 800995e:	4618      	mov	r0, r3
 8009960:	370c      	adds	r7, #12
 8009962:	46bd      	mov	sp, r7
 8009964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009968:	4770      	bx	lr

0800996a <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv>:
  bool isString() const {
 800996a:	b480      	push	{r7}
 800996c:	b083      	sub	sp, #12
 800996e:	af00      	add	r7, sp, #0
 8009970:	6078      	str	r0, [r7, #4]
    return type_ == VariantType::LinkedString ||
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	791b      	ldrb	r3, [r3, #4]
 8009976:	2b04      	cmp	r3, #4
 8009978:	d003      	beq.n	8009982 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv+0x18>
           type_ == VariantType::OwnedString;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	791b      	ldrb	r3, [r3, #4]
    return type_ == VariantType::LinkedString ||
 800997e:	2b05      	cmp	r3, #5
 8009980:	d101      	bne.n	8009986 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv+0x1c>
 8009982:	2301      	movs	r3, #1
 8009984:	e000      	b.n	8009988 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv+0x1e>
 8009986:	2300      	movs	r3, #0
  }
 8009988:	4618      	mov	r0, r3
 800998a:	370c      	adds	r7, #12
 800998c:	46bd      	mov	sp, r7
 800998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009992:	4770      	bx	lr

08009994 <_ZN11ArduinoJson8V730HB226detail11VariantData15setLinkedStringEPKc>:
  void setLinkedString(const char* s) {
 8009994:	b480      	push	{r7}
 8009996:	b083      	sub	sp, #12
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	6039      	str	r1, [r7, #0]
    type_ = VariantType::LinkedString;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2204      	movs	r2, #4
 80099a2:	711a      	strb	r2, [r3, #4]
    content_.asLinkedString = s;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	683a      	ldr	r2, [r7, #0]
 80099a8:	601a      	str	r2, [r3, #0]
  }
 80099aa:	bf00      	nop
 80099ac:	370c      	adds	r7, #12
 80099ae:	46bd      	mov	sp, r7
 80099b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b4:	4770      	bx	lr

080099b6 <_ZN11ArduinoJson8V730HB226detail15ResourceManagerD1Ev>:
  ~ResourceManager() {
 80099b6:	b580      	push	{r7, lr}
 80099b8:	b082      	sub	sp, #8
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	6078      	str	r0, [r7, #4]
    stringPool_.clear(allocator_);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f103 0208 	add.w	r2, r3, #8
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4619      	mov	r1, r3
 80099ca:	4610      	mov	r0, r2
 80099cc:	f7fa fb06 	bl	8003fdc <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE>
    variantPools_.clear(allocator_);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f103 020c 	add.w	r2, r3, #12
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4619      	mov	r1, r3
 80099dc:	4610      	mov	r0, r2
 80099de:	f7fc fb87 	bl	80060f0 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE>
  }
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	330c      	adds	r3, #12
 80099e6:	4618      	mov	r0, r3
 80099e8:	f001 f879 	bl	800aade <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEED1Ev>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	3308      	adds	r3, #8
 80099f0:	4618      	mov	r0, r3
 80099f2:	f7ff ff2d 	bl	8009850 <_ZN11ArduinoJson8V730HB226detail10StringPoolD1Ev>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	4618      	mov	r0, r3
 80099fa:	3708      	adds	r7, #8
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}

08009a00 <_ZN11ArduinoJson8V730HB229ConverterINS0_11JsonVariantEvE8fromJsonES2_>:
  static JsonVariant fromJson(JsonVariant src) {
 8009a00:	b480      	push	{r7}
 8009a02:	b085      	sub	sp, #20
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	60f8      	str	r0, [r7, #12]
 8009a08:	1d3b      	adds	r3, r7, #4
 8009a0a:	e883 0006 	stmia.w	r3, {r1, r2}
    return src;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	461a      	mov	r2, r3
 8009a12:	1d3b      	adds	r3, r7, #4
 8009a14:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009a18:	e882 0003 	stmia.w	r2, {r0, r1}
  }
 8009a1c:	68f8      	ldr	r0, [r7, #12]
 8009a1e:	3714      	adds	r7, #20
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr

08009a28 <_ZNK11ArduinoJson8V730HB229JsonArray6isNullEv>:
    return JsonVariantConst(collectionToVariant(data_), resources_);
  }

  // Returns true if the reference is unbound.
  // https://arduinojson.org/v7/api/jsonarray/isnull/
  bool isNull() const {
 8009a28:	b480      	push	{r7}
 8009a2a:	b083      	sub	sp, #12
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
    return data_ == 0;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	bf0c      	ite	eq
 8009a38:	2301      	moveq	r3, #1
 8009a3a:	2300      	movne	r3, #0
 8009a3c:	b2db      	uxtb	r3, r3
  }
 8009a3e:	4618      	mov	r0, r3
 8009a40:	370c      	adds	r7, #12
 8009a42:	46bd      	mov	sp, r7
 8009a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a48:	4770      	bx	lr

08009a4a <_ZNK11ArduinoJson8V730HB229JsonArray4sizeEv>:
    return detail::VariantData::nesting(collectionToVariant(data_), resources_);
  }

  // Returns the number of elements in the array.
  // https://arduinojson.org/v7/api/jsonarray/size/
  size_t size() const {
 8009a4a:	b580      	push	{r7, lr}
 8009a4c:	b082      	sub	sp, #8
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	6078      	str	r0, [r7, #4]
    return data_ ? data_->size(resources_) : 0;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d00a      	beq.n	8009a70 <_ZNK11ArduinoJson8V730HB229JsonArray4sizeEv+0x26>
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	461a      	mov	r2, r3
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	4619      	mov	r1, r3
 8009a66:	4610      	mov	r0, r2
 8009a68:	f000 f8cf 	bl	8009c0a <_ZNK11ArduinoJson8V730HB226detail14CollectionData4sizeEPKNS1_15ResourceManagerE>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	e000      	b.n	8009a72 <_ZNK11ArduinoJson8V730HB229JsonArray4sizeEv+0x28>
 8009a70:	2300      	movs	r3, #0
  }
 8009a72:	4618      	mov	r0, r3
 8009a74:	3708      	adds	r7, #8
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}

08009a7a <_ZNK11ArduinoJson8V730HB229JsonArray18getResourceManagerEv>:
  size_t memoryUsage() const {
    return 0;
  }

 private:
  detail::ResourceManager* getResourceManager() const {
 8009a7a:	b480      	push	{r7}
 8009a7c:	b083      	sub	sp, #12
 8009a7e:	af00      	add	r7, sp, #0
 8009a80:	6078      	str	r0, [r7, #4]
    return resources_;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	685b      	ldr	r3, [r3, #4]
  }
 8009a86:	4618      	mov	r0, r3
 8009a88:	370c      	adds	r7, #12
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a90:	4770      	bx	lr

08009a92 <_ZNK11ArduinoJson8V730HB229JsonArray7getDataEv>:

  detail::VariantData* getData() const {
 8009a92:	b580      	push	{r7, lr}
 8009a94:	b082      	sub	sp, #8
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	6078      	str	r0, [r7, #4]
    return collectionToVariant(data_);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f7fa fba3 	bl	80041ea <_ZN11ArduinoJson8V730HB226detail19collectionToVariantEPNS1_14CollectionDataE>
 8009aa4:	4603      	mov	r3, r0
  }
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3708      	adds	r7, #8
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}

08009aae <_ZNK11ArduinoJson8V730HB229JsonArray15getOrCreateDataEv>:

  detail::VariantData* getOrCreateData() const {
 8009aae:	b580      	push	{r7, lr}
 8009ab0:	b082      	sub	sp, #8
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	6078      	str	r0, [r7, #4]
    return collectionToVariant(data_);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4618      	mov	r0, r3
 8009abc:	f7fa fb95 	bl	80041ea <_ZN11ArduinoJson8V730HB226detail19collectionToVariantEPNS1_14CollectionDataE>
 8009ac0:	4603      	mov	r3, r0
  }
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3708      	adds	r7, #8
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}

08009aca <_ZN11ArduinoJson8V730HB2212JsonDocumentD1Ev>:

ARDUINOJSON_BEGIN_PUBLIC_NAMESPACE

// A JSON document.
// https://arduinojson.org/v7/api/jsondocument/
class JsonDocument : public detail::VariantOperators<const JsonDocument&> {
 8009aca:	b580      	push	{r7, lr}
 8009acc:	b082      	sub	sp, #8
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	6078      	str	r0, [r7, #4]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f7ff ff6e 	bl	80099b6 <_ZN11ArduinoJson8V730HB226detail15ResourceManagerD1Ev>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	4618      	mov	r0, r3
 8009ade:	3708      	adds	r7, #8
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}

08009ae4 <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE>:
#include <ArduinoJson/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

inline ArrayData::iterator ArrayData::at(
    size_t index, const ResourceManager* resources) const {
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b084      	sub	sp, #16
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	60f8      	str	r0, [r7, #12]
 8009aec:	60b9      	str	r1, [r7, #8]
 8009aee:	607a      	str	r2, [r7, #4]
 8009af0:	603b      	str	r3, [r7, #0]
  auto it = createIterator(resources);
 8009af2:	68b9      	ldr	r1, [r7, #8]
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	683a      	ldr	r2, [r7, #0]
 8009af8:	4618      	mov	r0, r3
 8009afa:	f7fb f80f 	bl	8004b1c <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
  while (!it.done() && index) {
 8009afe:	e006      	b.n	8009b0e <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x2a>
    it.next(resources);
 8009b00:	6839      	ldr	r1, [r7, #0]
 8009b02:	68f8      	ldr	r0, [r7, #12]
 8009b04:	f7fa ffe7 	bl	8004ad6 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
    --index;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	3b01      	subs	r3, #1
 8009b0c:	607b      	str	r3, [r7, #4]
  while (!it.done() && index) {
 8009b0e:	68f8      	ldr	r0, [r7, #12]
 8009b10:	f7fa fb22 	bl	8004158 <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 8009b14:	4603      	mov	r3, r0
 8009b16:	f083 0301 	eor.w	r3, r3, #1
 8009b1a:	b2db      	uxtb	r3, r3
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d004      	beq.n	8009b2a <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x46>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d001      	beq.n	8009b2a <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x46>
 8009b26:	2301      	movs	r3, #1
 8009b28:	e000      	b.n	8009b2c <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x48>
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d1e7      	bne.n	8009b00 <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x1c>
  }
  return it;
 8009b30:	bf00      	nop
}
 8009b32:	68f8      	ldr	r0, [r7, #12]
 8009b34:	3710      	adds	r7, #16
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}

08009b3a <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE>:
  CollectionData::appendOne(slot, resources);
  return slot.ptr();
}

inline VariantData* ArrayData::getOrAddElement(size_t index,
                                               ResourceManager* resources) {
 8009b3a:	b580      	push	{r7, lr}
 8009b3c:	b088      	sub	sp, #32
 8009b3e:	af00      	add	r7, sp, #0
 8009b40:	60f8      	str	r0, [r7, #12]
 8009b42:	60b9      	str	r1, [r7, #8]
 8009b44:	607a      	str	r2, [r7, #4]
  auto it = createIterator(resources);
 8009b46:	68f9      	ldr	r1, [r7, #12]
 8009b48:	f107 0314 	add.w	r3, r7, #20
 8009b4c:	687a      	ldr	r2, [r7, #4]
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f7fa ffe4 	bl	8004b1c <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
  while (!it.done() && index > 0) {
 8009b54:	e008      	b.n	8009b68 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x2e>
    it.next(resources);
 8009b56:	f107 0314 	add.w	r3, r7, #20
 8009b5a:	6879      	ldr	r1, [r7, #4]
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f7fa ffba 	bl	8004ad6 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
    index--;
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	3b01      	subs	r3, #1
 8009b66:	60bb      	str	r3, [r7, #8]
  while (!it.done() && index > 0) {
 8009b68:	f107 0314 	add.w	r3, r7, #20
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f7fa faf3 	bl	8004158 <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 8009b72:	4603      	mov	r3, r0
 8009b74:	f083 0301 	eor.w	r3, r3, #1
 8009b78:	b2db      	uxtb	r3, r3
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d004      	beq.n	8009b88 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x4e>
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d001      	beq.n	8009b88 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x4e>
 8009b84:	2301      	movs	r3, #1
 8009b86:	e000      	b.n	8009b8a <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x50>
 8009b88:	2300      	movs	r3, #0
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d1e3      	bne.n	8009b56 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x1c>
  }
  if (it.done())
 8009b8e:	f107 0314 	add.w	r3, r7, #20
 8009b92:	4618      	mov	r0, r3
 8009b94:	f7fa fae0 	bl	8004158 <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d002      	beq.n	8009ba4 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x6a>
    index++;
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	3301      	adds	r3, #1
 8009ba2:	60bb      	str	r3, [r7, #8]
  VariantData* element = it.data();
 8009ba4:	f107 0314 	add.w	r3, r7, #20
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f7fa fb06 	bl	80041ba <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 8009bae:	61f8      	str	r0, [r7, #28]
  while (index > 0) {
 8009bb0:	e00c      	b.n	8009bcc <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x92>
    element = addElement(resources);
 8009bb2:	6879      	ldr	r1, [r7, #4]
 8009bb4:	68f8      	ldr	r0, [r7, #12]
 8009bb6:	f7fa ff42 	bl	8004a3e <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE>
 8009bba:	61f8      	str	r0, [r7, #28]
    if (!element)
 8009bbc:	69fb      	ldr	r3, [r7, #28]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d101      	bne.n	8009bc6 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x8c>
      return nullptr;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	e006      	b.n	8009bd4 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x9a>
    index--;
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	3b01      	subs	r3, #1
 8009bca:	60bb      	str	r3, [r7, #8]
  while (index > 0) {
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d1ef      	bne.n	8009bb2 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x78>
  }
  return element;
 8009bd2:	69fb      	ldr	r3, [r7, #28]
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3720      	adds	r7, #32
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}

08009bdc <_ZNK11ArduinoJson8V730HB226detail9ArrayData10getElementEjPKNS1_15ResourceManagerE>:

inline VariantData* ArrayData::getElement(
    size_t index, const ResourceManager* resources) const {
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b086      	sub	sp, #24
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	60f8      	str	r0, [r7, #12]
 8009be4:	60b9      	str	r1, [r7, #8]
 8009be6:	607a      	str	r2, [r7, #4]
  return at(index, resources).data();
 8009be8:	f107 0010 	add.w	r0, r7, #16
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	68ba      	ldr	r2, [r7, #8]
 8009bf0:	68f9      	ldr	r1, [r7, #12]
 8009bf2:	f7ff ff77 	bl	8009ae4 <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE>
 8009bf6:	f107 0310 	add.w	r3, r7, #16
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f7fa fadd 	bl	80041ba <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 8009c00:	4603      	mov	r3, r0
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3718      	adds	r7, #24
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}

08009c0a <_ZNK11ArduinoJson8V730HB226detail14CollectionData4sizeEPKNS1_15ResourceManagerE>:
      maxChildNesting = childNesting;
  }
  return maxChildNesting + 1;
}

inline size_t CollectionData::size(const ResourceManager* resources) const {
 8009c0a:	b580      	push	{r7, lr}
 8009c0c:	b086      	sub	sp, #24
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	6078      	str	r0, [r7, #4]
 8009c12:	6039      	str	r1, [r7, #0]
  size_t count = 0;
 8009c14:	2300      	movs	r3, #0
 8009c16:	617b      	str	r3, [r7, #20]
  for (auto it = createIterator(resources); !it.done(); it.next(resources))
 8009c18:	f107 030c 	add.w	r3, r7, #12
 8009c1c:	683a      	ldr	r2, [r7, #0]
 8009c1e:	6879      	ldr	r1, [r7, #4]
 8009c20:	4618      	mov	r0, r3
 8009c22:	f7fa ff7b 	bl	8004b1c <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
 8009c26:	e008      	b.n	8009c3a <_ZNK11ArduinoJson8V730HB226detail14CollectionData4sizeEPKNS1_15ResourceManagerE+0x30>
    count++;
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	3301      	adds	r3, #1
 8009c2c:	617b      	str	r3, [r7, #20]
  for (auto it = createIterator(resources); !it.done(); it.next(resources))
 8009c2e:	f107 030c 	add.w	r3, r7, #12
 8009c32:	6839      	ldr	r1, [r7, #0]
 8009c34:	4618      	mov	r0, r3
 8009c36:	f7fa ff4e 	bl	8004ad6 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
 8009c3a:	f107 030c 	add.w	r3, r7, #12
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f7fa fa8a 	bl	8004158 <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 8009c44:	4603      	mov	r3, r0
 8009c46:	f083 0301 	eor.w	r3, r3, #1
 8009c4a:	b2db      	uxtb	r3, r3
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d1eb      	bne.n	8009c28 <_ZNK11ArduinoJson8V730HB226detail14CollectionData4sizeEPKNS1_15ResourceManagerE+0x1e>
  return count;
 8009c50:	697b      	ldr	r3, [r7, #20]
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3718      	adds	r7, #24
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}

08009c5a <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE>:
  static const char* fromJson(JsonVariantConst src) {
    auto data = getData(src);
    return data ? data->asString().c_str() : 0;
  }

  static bool checkJson(JsonVariantConst src) {
 8009c5a:	b580      	push	{r7, lr}
 8009c5c:	b084      	sub	sp, #16
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	463b      	mov	r3, r7
 8009c62:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 8009c66:	463b      	mov	r3, r7
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f7fc fabd 	bl	80061e8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8009c6e:	60f8      	str	r0, [r7, #12]
    return data && data->isString();
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d007      	beq.n	8009c86 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE+0x2c>
 8009c76:	68f8      	ldr	r0, [r7, #12]
 8009c78:	f7ff fe77 	bl	800996a <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d001      	beq.n	8009c86 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE+0x2c>
 8009c82:	2301      	movs	r3, #1
 8009c84:	e000      	b.n	8009c88 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE+0x2e>
 8009c86:	2300      	movs	r3, #0
  }
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3710      	adds	r7, #16
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>:
	    bool = is_move_assignable<_Dp>::value>
    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
      __uniq_ptr_data(__uniq_ptr_data&&) = default;
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b082      	sub	sp, #8
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
 8009c98:	6039      	str	r1, [r7, #0]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	683a      	ldr	r2, [r7, #0]
 8009c9e:	4611      	mov	r1, r2
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f000 ff32 	bl	800ab0a <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEaSEOS3_>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3708      	adds	r7, #8
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEaSEOS3_>:

      /** @brief Move assignment operator.
       *
       * Invokes the deleter if this object owns a pointer.
       */
      unique_ptr& operator=(unique_ptr&&) = default;
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b082      	sub	sp, #8
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	6039      	str	r1, [r7, #0]
 8009cba:	683a      	ldr	r2, [r7, #0]
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	4611      	mov	r1, r2
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f7ff ffe5 	bl	8009c90 <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	4618      	mov	r0, r3
 8009cca:	3708      	adds	r7, #8
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}

08009cd0 <_ZN12CommsHandler12setInterfaceESt10unique_ptrI14CommsInterfaceSt14default_deleteIS1_EE>:
	virtual ~CommsHandler();

	void update(void) override;
	void tasks();

    void setInterface(std::unique_ptr<CommsInterface> commsInterface) {
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b082      	sub	sp, #8
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	6039      	str	r1, [r7, #0]
        interface = std::move(commsInterface);
 8009cda:	6838      	ldr	r0, [r7, #0]
 8009cdc:	f000 ff0a 	bl	800aaf4 <_ZSt4moveIRSt10unique_ptrI14CommsInterfaceSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 8009ce0:	4602      	mov	r2, r0
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	3318      	adds	r3, #24
 8009ce6:	4611      	mov	r1, r2
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f7ff ffe1 	bl	8009cb0 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEaSEOS3_>
    }
 8009cee:	bf00      	nop
 8009cf0:	3708      	adds	r7, #8
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}

08009cf6 <_ZNK12CommsHandler9getStatusEv>:
    void setNoDataCount(int count) { noDataCount = count; }
    void setStatus(bool value) { status = value; }

    bool getData() const { return data; }
    int getNoDataCount() const { return noDataCount; }
    bool getStatus() const { return status; }
 8009cf6:	b480      	push	{r7}
 8009cf8:	b083      	sub	sp, #12
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	6078      	str	r0, [r7, #4]
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	7f9b      	ldrb	r3, [r3, #30]
 8009d02:	4618      	mov	r0, r3
 8009d04:	370c      	adds	r7, #12
 8009d06:	46bd      	mov	sp, r7
 8009d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0c:	4770      	bx	lr

08009d0e <EXTI4_IRQHandler>:
#include "interrupt.h"

extern "C" {

	void EXTI4_IRQHandler()
	{
 8009d0e:	b580      	push	{r7, lr}
 8009d10:	af00      	add	r7, sp, #0
		// Chip select pin is PA_4 (EXTI4 PIN 4)
		if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
 8009d12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d1a:	f003 0310 	and.w	r3, r3, #16
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	bf14      	ite	ne
 8009d22:	2301      	movne	r3, #1
 8009d24:	2300      	moveq	r3, #0
 8009d26:	b2db      	uxtb	r3, r3
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d006      	beq.n	8009d3a <EXTI4_IRQHandler+0x2c>
		{
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 8009d2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009d30:	2210      	movs	r2, #16
 8009d32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
		Interrupt::EXTI4_Wrapper();
 8009d36:	f7f9 fff5 	bl	8003d24 <_ZN9Interrupt13EXTI4_WrapperEv>
		}
	}
 8009d3a:	bf00      	nop
 8009d3c:	bd80      	pop	{r7, pc}

08009d3e <DMA1_Stream0_IRQHandler>:

	void DMA1_Stream0_IRQHandler()
	{
 8009d3e:	b580      	push	{r7, lr}
 8009d40:	af00      	add	r7, sp, #0
		// DMA interrupt management in the moduelInterrupt handleInterrupt() routine
		Interrupt::DMA1_Stream0_Wrapper();
 8009d42:	f7f9 fffd 	bl	8003d40 <_ZN9Interrupt20DMA1_Stream0_WrapperEv>
	}
 8009d46:	bf00      	nop
 8009d48:	bd80      	pop	{r7, pc}

08009d4a <DMA1_Stream1_IRQHandler>:

	void DMA1_Stream1_IRQHandler()
	{
 8009d4a:	b580      	push	{r7, lr}
 8009d4c:	af00      	add	r7, sp, #0
		// DMA interrupt management in the moduelInterrupt handleInterrupt() routine
		Interrupt::DMA1_Stream1_Wrapper();
 8009d4e:	f7fa f805 	bl	8003d5c <_ZN9Interrupt20DMA1_Stream1_WrapperEv>
	}
 8009d52:	bf00      	nop
 8009d54:	bd80      	pop	{r7, pc}

08009d56 <TIM2_IRQHandler>:


	void TIM2_IRQHandler()
	{
 8009d56:	b580      	push	{r7, lr}
 8009d58:	af00      	add	r7, sp, #0
	  if(TIM2->SR & TIM_SR_UIF) // if UIF flag is set
 8009d5a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009d5e:	691b      	ldr	r3, [r3, #16]
 8009d60:	f003 0301 	and.w	r3, r3, #1
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	bf14      	ite	ne
 8009d68:	2301      	movne	r3, #1
 8009d6a:	2300      	moveq	r3, #0
 8009d6c:	b2db      	uxtb	r3, r3
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d009      	beq.n	8009d86 <TIM2_IRQHandler+0x30>
	  {
		TIM2->SR &= ~TIM_SR_UIF; // clear UIF flag
 8009d72:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009d76:	691b      	ldr	r3, [r3, #16]
 8009d78:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8009d7c:	f023 0301 	bic.w	r3, r3, #1
 8009d80:	6113      	str	r3, [r2, #16]

		Interrupt::TIM2_Wrapper();
 8009d82:	f7f9 fff9 	bl	8003d78 <_ZN9Interrupt12TIM2_WrapperEv>
	  }
	}
 8009d86:	bf00      	nop
 8009d88:	bd80      	pop	{r7, pc}
	...

08009d8c <TIM3_IRQHandler>:


	void TIM3_IRQHandler()
	{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	af00      	add	r7, sp, #0
	  if(TIM3->SR & TIM_SR_UIF) // if UIF flag is set
 8009d90:	4b0a      	ldr	r3, [pc, #40]	@ (8009dbc <TIM3_IRQHandler+0x30>)
 8009d92:	691b      	ldr	r3, [r3, #16]
 8009d94:	f003 0301 	and.w	r3, r3, #1
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	bf14      	ite	ne
 8009d9c:	2301      	movne	r3, #1
 8009d9e:	2300      	moveq	r3, #0
 8009da0:	b2db      	uxtb	r3, r3
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d007      	beq.n	8009db6 <TIM3_IRQHandler+0x2a>
	  {
		TIM3->SR &= ~TIM_SR_UIF; // clear UIF flag
 8009da6:	4b05      	ldr	r3, [pc, #20]	@ (8009dbc <TIM3_IRQHandler+0x30>)
 8009da8:	691b      	ldr	r3, [r3, #16]
 8009daa:	4a04      	ldr	r2, [pc, #16]	@ (8009dbc <TIM3_IRQHandler+0x30>)
 8009dac:	f023 0301 	bic.w	r3, r3, #1
 8009db0:	6113      	str	r3, [r2, #16]

		Interrupt::TIM3_Wrapper();
 8009db2:	f7f9 ffef 	bl	8003d94 <_ZN9Interrupt12TIM3_WrapperEv>
	  }
	}
 8009db6:	bf00      	nop
 8009db8:	bd80      	pop	{r7, pc}
 8009dba:	bf00      	nop
 8009dbc:	40000400 	.word	0x40000400

08009dc0 <TIM4_IRQHandler>:

	void TIM4_IRQHandler()
	{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	af00      	add	r7, sp, #0
	  if(TIM4->SR & TIM_SR_UIF) // if UIF flag is set
 8009dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8009df0 <TIM4_IRQHandler+0x30>)
 8009dc6:	691b      	ldr	r3, [r3, #16]
 8009dc8:	f003 0301 	and.w	r3, r3, #1
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	bf14      	ite	ne
 8009dd0:	2301      	movne	r3, #1
 8009dd2:	2300      	moveq	r3, #0
 8009dd4:	b2db      	uxtb	r3, r3
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d007      	beq.n	8009dea <TIM4_IRQHandler+0x2a>
	  {
		TIM4->SR &= ~TIM_SR_UIF; // clear UIF flag
 8009dda:	4b05      	ldr	r3, [pc, #20]	@ (8009df0 <TIM4_IRQHandler+0x30>)
 8009ddc:	691b      	ldr	r3, [r3, #16]
 8009dde:	4a04      	ldr	r2, [pc, #16]	@ (8009df0 <TIM4_IRQHandler+0x30>)
 8009de0:	f023 0301 	bic.w	r3, r3, #1
 8009de4:	6113      	str	r3, [r2, #16]

		Interrupt::TIM4_Wrapper();
 8009de6:	f7f9 ffe3 	bl	8003db0 <_ZN9Interrupt12TIM4_WrapperEv>
	  }
	}
 8009dea:	bf00      	nop
 8009dec:	bd80      	pop	{r7, pc}
 8009dee:	bf00      	nop
 8009df0:	40000800 	.word	0x40000800

08009df4 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
	  __r._M_ptr = nullptr;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b082      	sub	sp, #8
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	3304      	adds	r3, #4
 8009e00:	4618      	mov	r0, r3
 8009e02:	f000 fe9e 	bl	800ab42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3708      	adds	r7, #8
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}

08009e10 <_ZNSt10shared_ptrI12CommsHandlerED1Ev>:
   * the stored pointer returned by `get()`, not the owned pointer.
   * To test whether two `shared_ptr` objects share ownership of the same
   * pointer see `std::shared_ptr::owner_before` and `std::owner_less`.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b082      	sub	sp, #8
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f7ff ffea 	bl	8009df4 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	4618      	mov	r0, r3
 8009e24:	3708      	adds	r7, #8
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}

08009e2a <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8009e2a:	b580      	push	{r7, lr}
 8009e2c:	b082      	sub	sp, #8
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	6078      	str	r0, [r7, #4]
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f000 ff59 	bl	800acea <_ZNSaISt10shared_ptrI6ModuleEED1Ev>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3708      	adds	r7, #8
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}

08009e42 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8009e42:	b580      	push	{r7, lr}
 8009e44:	b082      	sub	sp, #8
 8009e46:	af00      	add	r7, sp, #0
 8009e48:	6078      	str	r0, [r7, #4]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f000 ff3c 	bl	800acca <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE12_Vector_implC1Ev>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	4618      	mov	r0, r3
 8009e56:	3708      	adds	r7, #8
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}

08009e5c <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b082      	sub	sp, #8
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	4618      	mov	r0, r3
 8009e68:	f7ff ffeb 	bl	8009e42 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EEC1Ev>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3708      	adds	r7, #8
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}

08009e76 <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>:
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 8009e76:	b580      	push	{r7, lr}
 8009e78:	b082      	sub	sp, #8
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	6078      	str	r0, [r7, #4]
 8009e7e:	6039      	str	r1, [r7, #0]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	683a      	ldr	r2, [r7, #0]
 8009e84:	4611      	mov	r1, r2
 8009e86:	4618      	mov	r0, r3
 8009e88:	f000 ff8a 	bl	800ada0 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEaSEOS3_>
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3708      	adds	r7, #8
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}

08009e96 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEaSEOS3_>:
      unique_ptr& operator=(unique_ptr&&) = default;
 8009e96:	b580      	push	{r7, lr}
 8009e98:	b082      	sub	sp, #8
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
 8009e9e:	6039      	str	r1, [r7, #0]
 8009ea0:	683a      	ldr	r2, [r7, #0]
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	4611      	mov	r1, r2
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f7ff ffe5 	bl	8009e76 <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3708      	adds	r7, #8
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}

08009eb6 <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>:
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 8009eb6:	b580      	push	{r7, lr}
 8009eb8:	b082      	sub	sp, #8
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	6078      	str	r0, [r7, #4]
 8009ebe:	6039      	str	r1, [r7, #0]
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	683a      	ldr	r2, [r7, #0]
 8009ec4:	4611      	mov	r1, r2
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f001 f8a9 	bl	800b01e <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEaSEOS3_>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3708      	adds	r7, #8
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}

08009ed6 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEaSEOS3_>:
      unique_ptr& operator=(unique_ptr&&) = default;
 8009ed6:	b580      	push	{r7, lr}
 8009ed8:	b082      	sub	sp, #8
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
 8009ede:	6039      	str	r1, [r7, #0]
 8009ee0:	683a      	ldr	r2, [r7, #0]
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	4611      	mov	r1, r2
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f7ff ffe5 	bl	8009eb6 <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3708      	adds	r7, #8
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}

08009ef6 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 8009ef6:	b580      	push	{r7, lr}
 8009ef8:	b082      	sub	sp, #8
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	6078      	str	r0, [r7, #4]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	3304      	adds	r3, #4
 8009f02:	4618      	mov	r0, r3
 8009f04:	f000 fe1d 	bl	800ab42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3708      	adds	r7, #8
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}

08009f12 <_ZNSt10shared_ptrI6ModuleED1Ev>:
 8009f12:	b580      	push	{r7, lr}
 8009f14:	b082      	sub	sp, #8
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	6078      	str	r0, [r7, #4]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f7ff ffea 	bl	8009ef6 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	4618      	mov	r0, r3
 8009f26:	3708      	adds	r7, #8
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd80      	pop	{r7, pc}

08009f2c <_ZN6RemoraC1Ev>:

// unions for TX and RX data
__attribute__((section(".DmaSection"))) volatile txData_t txData;
__attribute__((section(".DmaSection"))) volatile rxData_t rxData;

Remora::Remora() :
 8009f2c:	b590      	push	{r4, r7, lr}
 8009f2e:	b097      	sub	sp, #92	@ 0x5c
 8009f30:	af02      	add	r7, sp, #8
 8009f32:	6078      	str	r0, [r7, #4]
	baseFreq(Config::pruBaseFreq),
	servoFreq(Config::pruServoFreq),
	serialFreq(Config::pruSerialFreq)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	3310      	adds	r3, #16
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f000 fe3b 	bl	800abb4 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEC1IS2_vEEv>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	3314      	adds	r3, #20
 8009f42:	4618      	mov	r0, r3
 8009f44:	f000 fe68 	bl	800ac18 <_ZNSt10shared_ptrI12CommsHandlerEC1Ev>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	331c      	adds	r3, #28
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f000 fe8a 	bl	800ac66 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEv>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	3320      	adds	r3, #32
 8009f56:	4618      	mov	r0, r3
 8009f58:	f000 fe85 	bl	800ac66 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEv>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	3324      	adds	r3, #36	@ 0x24
 8009f60:	4618      	mov	r0, r3
 8009f62:	f000 fe80 	bl	800ac66 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEv>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	3328      	adds	r3, #40	@ 0x28
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f7ff ff76 	bl	8009e5c <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EEC1Ev>
	baseFreq(Config::pruBaseFreq),
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8009f76:	635a      	str	r2, [r3, #52]	@ 0x34
	servoFreq(Config::pruServoFreq),
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009f7e:	639a      	str	r2, [r3, #56]	@ 0x38
	serialFreq(Config::pruSerialFreq)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8009f86:	63da      	str	r2, [r3, #60]	@ 0x3c
{
	threadsRunning = false;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	currentState = ST_SETUP;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2200      	movs	r2, #0
 8009f94:	701a      	strb	r2, [r3, #0]
	prevState = ST_RESET;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2205      	movs	r2, #5
 8009f9a:	705a      	strb	r2, [r3, #1]

	configHandler = std::make_unique<JsonConfigHandler>(this);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	613b      	str	r3, [r7, #16]
 8009fa0:	f107 030c 	add.w	r3, r7, #12
 8009fa4:	f107 0210 	add.w	r2, r7, #16
 8009fa8:	4611      	mov	r1, r2
 8009faa:	4618      	mov	r0, r3
 8009fac:	f000 fedd 	bl	800ad6a <_ZSt11make_uniqueI17JsonConfigHandlerJP6RemoraEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	3310      	adds	r3, #16
 8009fb4:	f107 020c 	add.w	r2, r7, #12
 8009fb8:	4611      	mov	r1, r2
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f7ff ff6b 	bl	8009e96 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEaSEOS3_>
 8009fc0:	f107 030c 	add.w	r3, r7, #12
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f000 fe05 	bl	800abd4 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EED1Ev>

    ptrTxData = &txData;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	4a6c      	ldr	r2, [pc, #432]	@ (800a180 <_ZN6RemoraC1Ev+0x254>)
 8009fce:	605a      	str	r2, [r3, #4]
    ptrRxData = &rxData;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	4a6c      	ldr	r2, [pc, #432]	@ (800a184 <_ZN6RemoraC1Ev+0x258>)
 8009fd4:	609a      	str	r2, [r3, #8]

	auto spiComms = std::make_unique<SPIComms>(ptrRxData, ptrTxData, SPI1);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f103 0108 	add.w	r1, r3, #8
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	1d1a      	adds	r2, r3, #4
 8009fe0:	4b69      	ldr	r3, [pc, #420]	@ (800a188 <_ZN6RemoraC1Ev+0x25c>)
 8009fe2:	617b      	str	r3, [r7, #20]
 8009fe4:	f107 0008 	add.w	r0, r7, #8
 8009fe8:	f107 0314 	add.w	r3, r7, #20
 8009fec:	f000 fef4 	bl	800add8 <_ZSt11make_uniqueI8SPICommsJRPV8rxData_tRPV8txData_tP11SPI_TypeDefEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>

	comms = std::make_shared<CommsHandler>();
 8009ff0:	f107 0318 	add.w	r3, r7, #24
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f000 ff3a 	bl	800ae6e <_ZSt11make_sharedI12CommsHandlerJEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueES4_E4typeEEDpOT0_>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	3314      	adds	r3, #20
 8009ffe:	f107 0218 	add.w	r2, r7, #24
 800a002:	4611      	mov	r1, r2
 800a004:	4618      	mov	r0, r3
 800a006:	f000 ff40 	bl	800ae8a <_ZNSt10shared_ptrI12CommsHandlerEaSEOS1_>
 800a00a:	f107 0318 	add.w	r3, r7, #24
 800a00e:	4618      	mov	r0, r3
 800a010:	f7ff fefe 	bl	8009e10 <_ZNSt10shared_ptrI12CommsHandlerED1Ev>
	comms->setInterface(std::move(spiComms));
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	3314      	adds	r3, #20
 800a018:	4618      	mov	r0, r3
 800a01a:	f000 ff49 	bl	800aeb0 <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800a01e:	4604      	mov	r4, r0
 800a020:	f107 0308 	add.w	r3, r7, #8
 800a024:	4618      	mov	r0, r3
 800a026:	f000 ff4f 	bl	800aec8 <_ZSt4moveIRSt10unique_ptrI8SPICommsSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800a02a:	4602      	mov	r2, r0
 800a02c:	f107 0320 	add.w	r3, r7, #32
 800a030:	4611      	mov	r1, r2
 800a032:	4618      	mov	r0, r3
 800a034:	f000 ff64 	bl	800af00 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEC1I8SPICommsS1_IS5_EvEEOS_IT_T0_E>
 800a038:	f107 0320 	add.w	r3, r7, #32
 800a03c:	4619      	mov	r1, r3
 800a03e:	4620      	mov	r0, r4
 800a040:	f7ff fe46 	bl	8009cd0 <_ZN12CommsHandler12setInterfaceESt10unique_ptrI14CommsInterfaceSt14default_deleteIS1_EE>
 800a044:	f107 0320 	add.w	r3, r7, #32
 800a048:	4618      	mov	r0, r3
 800a04a:	f000 ff75 	bl	800af38 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EED1Ev>
	comms->init();
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	3314      	adds	r3, #20
 800a052:	4618      	mov	r0, r3
 800a054:	f000 ff2c 	bl	800aeb0 <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800a058:	4603      	mov	r3, r0
 800a05a:	4618      	mov	r0, r3
 800a05c:	f005 fa5d 	bl	800f51a <_ZN12CommsHandler4initEv>
	comms->start();
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	3314      	adds	r3, #20
 800a064:	4618      	mov	r0, r3
 800a066:	f000 ff23 	bl	800aeb0 <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800a06a:	4603      	mov	r3, r0
 800a06c:	4618      	mov	r0, r3
 800a06e:	f005 fa82 	bl	800f576 <_ZN12CommsHandler5startEv>

    baseThread = make_unique<pruThread>(
    									"Base",
										TIM3,
 800a072:	4b46      	ldr	r3, [pc, #280]	@ (800a18c <_ZN6RemoraC1Ev+0x260>)
 800a074:	62bb      	str	r3, [r7, #40]	@ 0x28
										TIM3_IRQn,
 800a076:	231d      	movs	r3, #29
 800a078:	85fb      	strh	r3, [r7, #46]	@ 0x2e
										baseFreq,
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	3334      	adds	r3, #52	@ 0x34
    baseThread = make_unique<pruThread>(
 800a07e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a082:	f107 012e 	add.w	r1, r7, #46	@ 0x2e
 800a086:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800a08a:	4c41      	ldr	r4, [pc, #260]	@ (800a190 <_ZN6RemoraC1Ev+0x264>)
 800a08c:	9401      	str	r4, [sp, #4]
 800a08e:	9300      	str	r3, [sp, #0]
 800a090:	460b      	mov	r3, r1
 800a092:	4940      	ldr	r1, [pc, #256]	@ (800a194 <_ZN6RemoraC1Ev+0x268>)
 800a094:	f000 ff72 	bl	800af7c <_ZSt11make_uniqueI9pruThreadJRA5_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
										Config::baseThreadIrqPriority
										);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	331c      	adds	r3, #28
 800a09c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800a0a0:	4611      	mov	r1, r2
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f7ff ff17 	bl	8009ed6 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEaSEOS3_>
    baseThread = make_unique<pruThread>(
 800a0a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f000 fdea 	bl	800ac86 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EED1Ev>
    servoThread = make_unique<pruThread>(
    									"Servo",
										TIM2,
 800a0b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a0b6:	637b      	str	r3, [r7, #52]	@ 0x34
										TIM2_IRQn,
 800a0b8:	231c      	movs	r3, #28
 800a0ba:	877b      	strh	r3, [r7, #58]	@ 0x3a
										servoFreq,
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	3338      	adds	r3, #56	@ 0x38
    servoThread = make_unique<pruThread>(
 800a0c0:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 800a0c4:	f107 013a 	add.w	r1, r7, #58	@ 0x3a
 800a0c8:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800a0cc:	4c32      	ldr	r4, [pc, #200]	@ (800a198 <_ZN6RemoraC1Ev+0x26c>)
 800a0ce:	9401      	str	r4, [sp, #4]
 800a0d0:	9300      	str	r3, [sp, #0]
 800a0d2:	460b      	mov	r3, r1
 800a0d4:	4931      	ldr	r1, [pc, #196]	@ (800a19c <_ZN6RemoraC1Ev+0x270>)
 800a0d6:	f000 ffbe 	bl	800b056 <_ZSt11make_uniqueI9pruThreadJRA6_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
										Config::servoThreadIrqPriority
										);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	3320      	adds	r3, #32
 800a0de:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800a0e2:	4611      	mov	r1, r2
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f7ff fef6 	bl	8009ed6 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEaSEOS3_>
    servoThread = make_unique<pruThread>(
 800a0ea:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f000 fdc9 	bl	800ac86 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EED1Ev>
    serialThread = make_unique<pruThread>(
    									"Serial",
										TIM4,
 800a0f4:	4b2a      	ldr	r3, [pc, #168]	@ (800a1a0 <_ZN6RemoraC1Ev+0x274>)
 800a0f6:	643b      	str	r3, [r7, #64]	@ 0x40
										TIM4_IRQn,
 800a0f8:	231e      	movs	r3, #30
 800a0fa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
										serialFreq,
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	333c      	adds	r3, #60	@ 0x3c
    serialThread = make_unique<pruThread>(
 800a102:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 800a106:	f107 0146 	add.w	r1, r7, #70	@ 0x46
 800a10a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800a10e:	4c25      	ldr	r4, [pc, #148]	@ (800a1a4 <_ZN6RemoraC1Ev+0x278>)
 800a110:	9401      	str	r4, [sp, #4]
 800a112:	9300      	str	r3, [sp, #0]
 800a114:	460b      	mov	r3, r1
 800a116:	4924      	ldr	r1, [pc, #144]	@ (800a1a8 <_ZN6RemoraC1Ev+0x27c>)
 800a118:	f000 ffee 	bl	800b0f8 <_ZSt11make_uniqueI9pruThreadJRA7_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
										Config::commsThreadIrqPriority
										);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	3324      	adds	r3, #36	@ 0x24
 800a120:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800a124:	4611      	mov	r1, r2
 800a126:	4618      	mov	r0, r3
 800a128:	f7ff fed5 	bl	8009ed6 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEaSEOS3_>
    serialThread = make_unique<pruThread>(
 800a12c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800a130:	4618      	mov	r0, r3
 800a132:	f000 fda8 	bl	800ac86 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EED1Ev>

    servoThread->registerModule(comms);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	3320      	adds	r3, #32
 800a13a:	4618      	mov	r0, r3
 800a13c:	f001 f82d 	bl	800b19a <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 800a140:	4604      	mov	r4, r0
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f103 0214 	add.w	r2, r3, #20
 800a148:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800a14c:	4611      	mov	r1, r2
 800a14e:	4618      	mov	r0, r3
 800a150:	f001 f82f 	bl	800b1b2 <_ZNSt10shared_ptrI6ModuleEC1I12CommsHandlervEERKS_IT_E>
 800a154:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800a158:	4619      	mov	r1, r3
 800a15a:	4620      	mov	r0, r4
 800a15c:	f00e fa12 	bl	8018584 <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE>
 800a160:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800a164:	4618      	mov	r0, r3
 800a166:	f7ff fed4 	bl	8009f12 <_ZNSt10shared_ptrI6ModuleED1Ev>
}
 800a16a:	f107 0308 	add.w	r3, r7, #8
 800a16e:	4618      	mov	r0, r3
 800a170:	f000 fe5b 	bl	800ae2a <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EED1Ev>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	4618      	mov	r0, r3
 800a178:	3754      	adds	r7, #84	@ 0x54
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd90      	pop	{r4, r7, pc}
 800a17e:	bf00      	nop
 800a180:	30000080 	.word	0x30000080
 800a184:	300000c0 	.word	0x300000c0
 800a188:	40013000 	.word	0x40013000
 800a18c:	40000400 	.word	0x40000400
 800a190:	0802898c 	.word	0x0802898c
 800a194:	08027e28 	.word	0x08027e28
 800a198:	08028990 	.word	0x08028990
 800a19c:	08027e30 	.word	0x08027e30
 800a1a0:	40000800 	.word	0x40000800
 800a1a4:	08028994 	.word	0x08028994
 800a1a8:	08027e38 	.word	0x08027e38

0800a1ac <_ZN6Remora17transitionToStateENS_5StateE>:

void Remora::transitionToState(State newState) {
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b082      	sub	sp, #8
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	460b      	mov	r3, r1
 800a1b6:	70fb      	strb	r3, [r7, #3]
    if (currentState != newState) {
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	781b      	ldrb	r3, [r3, #0]
 800a1bc:	78fa      	ldrb	r2, [r7, #3]
 800a1be:	429a      	cmp	r2, r3
 800a1c0:	d00e      	beq.n	800a1e0 <_ZN6Remora17transitionToStateENS_5StateE+0x34>
        printf("\n## Transitioning from state %d to state %d\n", currentState, newState);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	781b      	ldrb	r3, [r3, #0]
 800a1c6:	4619      	mov	r1, r3
 800a1c8:	78fb      	ldrb	r3, [r7, #3]
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	4806      	ldr	r0, [pc, #24]	@ (800a1e8 <_ZN6Remora17transitionToStateENS_5StateE+0x3c>)
 800a1ce:	f01c fd2f 	bl	8026c30 <iprintf>
        prevState = currentState;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	781a      	ldrb	r2, [r3, #0]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	705a      	strb	r2, [r3, #1]
        currentState = newState;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	78fa      	ldrb	r2, [r7, #3]
 800a1de:	701a      	strb	r2, [r3, #0]
    }
}
 800a1e0:	bf00      	nop
 800a1e2:	3708      	adds	r7, #8
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}
 800a1e8:	08027e40 	.word	0x08027e40

0800a1ec <_ZN6Remora16handleSetupStateEv>:

void Remora::handleSetupState() {
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b082      	sub	sp, #8
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
    if (currentState != prevState) {
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	781a      	ldrb	r2, [r3, #0]
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	785b      	ldrb	r3, [r3, #1]
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	d002      	beq.n	800a206 <_ZN6Remora16handleSetupStateEv+0x1a>
        printf("\n## Entering SETUP state\n");
 800a200:	4808      	ldr	r0, [pc, #32]	@ (800a224 <_ZN6Remora16handleSetupStateEv+0x38>)
 800a202:	f01c fd85 	bl	8026d10 <puts>
    }
    prevState = currentState;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	781a      	ldrb	r2, [r3, #0]
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	705a      	strb	r2, [r3, #1]

    loadModules();
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f000 f996 	bl	800a540 <_ZN6Remora11loadModulesEv>
    transitionToState(ST_START);
 800a214:	2101      	movs	r1, #1
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f7ff ffc8 	bl	800a1ac <_ZN6Remora17transitionToStateENS_5StateE>
}
 800a21c:	bf00      	nop
 800a21e:	3708      	adds	r7, #8
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}
 800a224:	08027e70 	.word	0x08027e70

0800a228 <_ZN6Remora16handleStartStateEv>:

void Remora::handleStartState() {
 800a228:	b580      	push	{r7, lr}
 800a22a:	b086      	sub	sp, #24
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
    if (currentState != prevState) {
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	781a      	ldrb	r2, [r3, #0]
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	785b      	ldrb	r3, [r3, #1]
 800a238:	429a      	cmp	r2, r3
 800a23a:	d002      	beq.n	800a242 <_ZN6Remora16handleStartStateEv+0x1a>
        printf("\n## Entering START state\n");
 800a23c:	482e      	ldr	r0, [pc, #184]	@ (800a2f8 <_ZN6Remora16handleStartStateEv+0xd0>)
 800a23e:	f01c fd67 	bl	8026d10 <puts>
    }
    prevState = currentState;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	781a      	ldrb	r2, [r3, #0]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	705a      	strb	r2, [r3, #1]

    for (const auto& module : onLoad) {
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	3328      	adds	r3, #40	@ 0x28
 800a24e:	617b      	str	r3, [r7, #20]
 800a250:	6978      	ldr	r0, [r7, #20]
 800a252:	f000 ffbe 	bl	800b1d2 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>
 800a256:	4603      	mov	r3, r0
 800a258:	60fb      	str	r3, [r7, #12]
 800a25a:	6978      	ldr	r0, [r7, #20]
 800a25c:	f000 ffc9 	bl	800b1f2 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 800a260:	4603      	mov	r3, r0
 800a262:	60bb      	str	r3, [r7, #8]
 800a264:	e01a      	b.n	800a29c <_ZN6Remora16handleStartStateEv+0x74>
 800a266:	f107 030c 	add.w	r3, r7, #12
 800a26a:	4618      	mov	r0, r3
 800a26c:	f000 fffb 	bl	800b266 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>
 800a270:	6138      	str	r0, [r7, #16]
        if (module) {
 800a272:	693b      	ldr	r3, [r7, #16]
 800a274:	4618      	mov	r0, r3
 800a276:	f001 f802 	bl	800b27e <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 800a27a:	4603      	mov	r3, r0
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d008      	beq.n	800a292 <_ZN6Remora16handleStartStateEv+0x6a>
            module->configure();
 800a280:	6938      	ldr	r0, [r7, #16]
 800a282:	f001 f80d 	bl	800b2a0 <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800a286:	4603      	mov	r3, r0
 800a288:	681a      	ldr	r2, [r3, #0]
 800a28a:	3214      	adds	r2, #20
 800a28c:	6812      	ldr	r2, [r2, #0]
 800a28e:	4618      	mov	r0, r3
 800a290:	4790      	blx	r2
    for (const auto& module : onLoad) {
 800a292:	f107 030c 	add.w	r3, r7, #12
 800a296:	4618      	mov	r0, r3
 800a298:	f000 ffd4 	bl	800b244 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
 800a29c:	f107 0208 	add.w	r2, r7, #8
 800a2a0:	f107 030c 	add.w	r3, r7, #12
 800a2a4:	4611      	mov	r1, r2
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f000 ffb4 	bl	800b214 <_ZN9__gnu_cxxneIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d1d9      	bne.n	800a266 <_ZN6Remora16handleStartStateEv+0x3e>
        }
    }

    if (!threadsRunning) {
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a2b8:	f083 0301 	eor.w	r3, r3, #1
 800a2bc:	b2db      	uxtb	r3, r3
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d011      	beq.n	800a2e6 <_ZN6Remora16handleStartStateEv+0xbe>
        startThread(servoThread, "SERVO");
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	3320      	adds	r3, #32
 800a2c6:	4a0d      	ldr	r2, [pc, #52]	@ (800a2fc <_ZN6Remora16handleStartStateEv+0xd4>)
 800a2c8:	4619      	mov	r1, r3
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f000 f8a8 	bl	800a420 <_ZN6Remora11startThreadERKSt10unique_ptrI9pruThreadSt14default_deleteIS1_EEPKc>
        startThread(baseThread, "BASE");
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	331c      	adds	r3, #28
 800a2d4:	4a0a      	ldr	r2, [pc, #40]	@ (800a300 <_ZN6Remora16handleStartStateEv+0xd8>)
 800a2d6:	4619      	mov	r1, r3
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f000 f8a1 	bl	800a420 <_ZN6Remora11startThreadERKSt10unique_ptrI9pruThreadSt14default_deleteIS1_EEPKc>
        threadsRunning = true;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2201      	movs	r2, #1
 800a2e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    }

    transitionToState(ST_IDLE);
 800a2e6:	2102      	movs	r1, #2
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f7ff ff5f 	bl	800a1ac <_ZN6Remora17transitionToStateENS_5StateE>
}
 800a2ee:	bf00      	nop
 800a2f0:	3718      	adds	r7, #24
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}
 800a2f6:	bf00      	nop
 800a2f8:	08027e8c 	.word	0x08027e8c
 800a2fc:	08027ea8 	.word	0x08027ea8
 800a300:	08027eb0 	.word	0x08027eb0

0800a304 <_ZN6Remora15handleIdleStateEv>:

void Remora::handleIdleState() {
 800a304:	b580      	push	{r7, lr}
 800a306:	b082      	sub	sp, #8
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
    if (currentState != prevState) {
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	781a      	ldrb	r2, [r3, #0]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	785b      	ldrb	r3, [r3, #1]
 800a314:	429a      	cmp	r2, r3
 800a316:	d002      	beq.n	800a31e <_ZN6Remora15handleIdleStateEv+0x1a>
        printf("\n## Entering IDLE state\n");
 800a318:	480d      	ldr	r0, [pc, #52]	@ (800a350 <_ZN6Remora15handleIdleStateEv+0x4c>)
 800a31a:	f01c fcf9 	bl	8026d10 <puts>
    }
    prevState = currentState;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	781a      	ldrb	r2, [r3, #0]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	705a      	strb	r2, [r3, #1]

    if (comms->getStatus()) {
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	3314      	adds	r3, #20
 800a32a:	4618      	mov	r0, r3
 800a32c:	f000 fdc0 	bl	800aeb0 <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800a330:	4603      	mov	r3, r0
 800a332:	4618      	mov	r0, r3
 800a334:	f7ff fcdf 	bl	8009cf6 <_ZNK12CommsHandler9getStatusEv>
 800a338:	4603      	mov	r3, r0
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d003      	beq.n	800a346 <_ZN6Remora15handleIdleStateEv+0x42>
        transitionToState(ST_RUNNING);
 800a33e:	2103      	movs	r1, #3
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f7ff ff33 	bl	800a1ac <_ZN6Remora17transitionToStateENS_5StateE>
    }
}
 800a346:	bf00      	nop
 800a348:	3708      	adds	r7, #8
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}
 800a34e:	bf00      	nop
 800a350:	08027eb8 	.word	0x08027eb8

0800a354 <_ZN6Remora18handleRunningStateEv>:

void Remora::handleRunningState() {
 800a354:	b580      	push	{r7, lr}
 800a356:	b082      	sub	sp, #8
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
    if (currentState != prevState) {
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	781a      	ldrb	r2, [r3, #0]
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	785b      	ldrb	r3, [r3, #1]
 800a364:	429a      	cmp	r2, r3
 800a366:	d002      	beq.n	800a36e <_ZN6Remora18handleRunningStateEv+0x1a>
        printf("\n## Entering RUNNING state\n");
 800a368:	4813      	ldr	r0, [pc, #76]	@ (800a3b8 <_ZN6Remora18handleRunningStateEv+0x64>)
 800a36a:	f01c fcd1 	bl	8026d10 <puts>
    }
    prevState = currentState;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	781a      	ldrb	r2, [r3, #0]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	705a      	strb	r2, [r3, #1]

    if (!comms->getStatus()) {
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	3314      	adds	r3, #20
 800a37a:	4618      	mov	r0, r3
 800a37c:	f000 fd98 	bl	800aeb0 <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800a380:	4603      	mov	r3, r0
 800a382:	4618      	mov	r0, r3
 800a384:	f7ff fcb7 	bl	8009cf6 <_ZNK12CommsHandler9getStatusEv>
 800a388:	4603      	mov	r3, r0
 800a38a:	f083 0301 	eor.w	r3, r3, #1
 800a38e:	b2db      	uxtb	r3, r3
 800a390:	2b00      	cmp	r3, #0
 800a392:	d003      	beq.n	800a39c <_ZN6Remora18handleRunningStateEv+0x48>
        transitionToState(ST_RESET);
 800a394:	2105      	movs	r1, #5
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f7ff ff08 	bl	800a1ac <_ZN6Remora17transitionToStateENS_5StateE>
    }

    if (reset) {
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	7b1b      	ldrb	r3, [r3, #12]
 800a3a0:	b2db      	uxtb	r3, r3
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d003      	beq.n	800a3ae <_ZN6Remora18handleRunningStateEv+0x5a>
    	transitionToState(ST_SYSRESET);
 800a3a6:	2106      	movs	r1, #6
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f7ff feff 	bl	800a1ac <_ZN6Remora17transitionToStateENS_5StateE>
    }
}
 800a3ae:	bf00      	nop
 800a3b0:	3708      	adds	r7, #8
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}
 800a3b6:	bf00      	nop
 800a3b8:	08027ed0 	.word	0x08027ed0

0800a3bc <_ZN6Remora16handleResetStateEv>:

void Remora::handleResetState() {
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b082      	sub	sp, #8
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
    if (currentState != prevState) {
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	781a      	ldrb	r2, [r3, #0]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	785b      	ldrb	r3, [r3, #1]
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	d002      	beq.n	800a3d6 <_ZN6Remora16handleResetStateEv+0x1a>
        printf("\n## Entering RESET state\n");
 800a3d0:	480c      	ldr	r0, [pc, #48]	@ (800a404 <_ZN6Remora16handleResetStateEv+0x48>)
 800a3d2:	f01c fc9d 	bl	8026d10 <puts>
    }
    prevState = currentState;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	781a      	ldrb	r2, [r3, #0]
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	705a      	strb	r2, [r3, #1]

    printf("   Resetting rxBuffer\n");
 800a3de:	480a      	ldr	r0, [pc, #40]	@ (800a408 <_ZN6Remora16handleResetStateEv+0x4c>)
 800a3e0:	f01c fc96 	bl	8026d10 <puts>
    resetBuffer(ptrRxData->rxBuffer, Config::dataBuffSize);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	689b      	ldr	r3, [r3, #8]
 800a3e8:	2240      	movs	r2, #64	@ 0x40
 800a3ea:	4619      	mov	r1, r3
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f000 f82f 	bl	800a450 <_ZN6Remora11resetBufferEPVhj>
    transitionToState(ST_IDLE);
 800a3f2:	2102      	movs	r1, #2
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f7ff fed9 	bl	800a1ac <_ZN6Remora17transitionToStateENS_5StateE>
}
 800a3fa:	bf00      	nop
 800a3fc:	3708      	adds	r7, #8
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}
 800a402:	bf00      	nop
 800a404:	08027eec 	.word	0x08027eec
 800a408:	08027f08 	.word	0x08027f08

0800a40c <_ZN6Remora19handleSysResetStateEv>:

void Remora::handleSysResetState() {
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b082      	sub	sp, #8
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
	HAL_NVIC_SystemReset();
 800a414:	f00f f989 	bl	801972a <HAL_NVIC_SystemReset>
}
 800a418:	bf00      	nop
 800a41a:	3708      	adds	r7, #8
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}

0800a420 <_ZN6Remora11startThreadERKSt10unique_ptrI9pruThreadSt14default_deleteIS1_EEPKc>:

void Remora::startThread(const std::unique_ptr<pruThread>& thread, const char* name) {
 800a420:	b580      	push	{r7, lr}
 800a422:	b084      	sub	sp, #16
 800a424:	af00      	add	r7, sp, #0
 800a426:	60f8      	str	r0, [r7, #12]
 800a428:	60b9      	str	r1, [r7, #8]
 800a42a:	607a      	str	r2, [r7, #4]
    printf("Starting the %s thread\n", name);
 800a42c:	6879      	ldr	r1, [r7, #4]
 800a42e:	4807      	ldr	r0, [pc, #28]	@ (800a44c <_ZN6Remora11startThreadERKSt10unique_ptrI9pruThreadSt14default_deleteIS1_EEPKc+0x2c>)
 800a430:	f01c fbfe 	bl	8026c30 <iprintf>
    thread->startThread();
 800a434:	68b8      	ldr	r0, [r7, #8]
 800a436:	f000 feb0 	bl	800b19a <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 800a43a:	4603      	mov	r3, r0
 800a43c:	4618      	mov	r0, r3
 800a43e:	f00e f935 	bl	80186ac <_ZN9pruThread11startThreadEv>
}
 800a442:	bf00      	nop
 800a444:	3710      	adds	r7, #16
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}
 800a44a:	bf00      	nop
 800a44c:	08027f20 	.word	0x08027f20

0800a450 <_ZN6Remora11resetBufferEPVhj>:

void Remora::resetBuffer(volatile uint8_t* buffer, size_t size) {
 800a450:	b580      	push	{r7, lr}
 800a452:	b084      	sub	sp, #16
 800a454:	af00      	add	r7, sp, #0
 800a456:	60f8      	str	r0, [r7, #12]
 800a458:	60b9      	str	r1, [r7, #8]
 800a45a:	607a      	str	r2, [r7, #4]
    memset((void*)buffer, 0, size);
 800a45c:	687a      	ldr	r2, [r7, #4]
 800a45e:	2100      	movs	r1, #0
 800a460:	68b8      	ldr	r0, [r7, #8]
 800a462:	f01c fd5f 	bl	8026f24 <memset>
}
 800a466:	bf00      	nop
 800a468:	3710      	adds	r7, #16
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}
	...

0800a470 <_ZN6Remora3runEv>:

void Remora::run() {
 800a470:	b580      	push	{r7, lr}
 800a472:	b082      	sub	sp, #8
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
    while (true) {
        switch (currentState) {
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	781b      	ldrb	r3, [r3, #0]
 800a47c:	2b06      	cmp	r3, #6
 800a47e:	d829      	bhi.n	800a4d4 <_ZN6Remora3runEv+0x64>
 800a480:	a201      	add	r2, pc, #4	@ (adr r2, 800a488 <_ZN6Remora3runEv+0x18>)
 800a482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a486:	bf00      	nop
 800a488:	0800a4a5 	.word	0x0800a4a5
 800a48c:	0800a4ad 	.word	0x0800a4ad
 800a490:	0800a4b5 	.word	0x0800a4b5
 800a494:	0800a4bd 	.word	0x0800a4bd
 800a498:	0800a4d5 	.word	0x0800a4d5
 800a49c:	0800a4c5 	.word	0x0800a4c5
 800a4a0:	0800a4cd 	.word	0x0800a4cd
            case ST_SETUP:
                handleSetupState();
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f7ff fea1 	bl	800a1ec <_ZN6Remora16handleSetupStateEv>
                break;
 800a4aa:	e017      	b.n	800a4dc <_ZN6Remora3runEv+0x6c>
            case ST_START:
                handleStartState();
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f7ff febb 	bl	800a228 <_ZN6Remora16handleStartStateEv>
                break;
 800a4b2:	e013      	b.n	800a4dc <_ZN6Remora3runEv+0x6c>
            case ST_IDLE:
                handleIdleState();
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f7ff ff25 	bl	800a304 <_ZN6Remora15handleIdleStateEv>
                break;
 800a4ba:	e00f      	b.n	800a4dc <_ZN6Remora3runEv+0x6c>
            case ST_RUNNING:
                handleRunningState();
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f7ff ff49 	bl	800a354 <_ZN6Remora18handleRunningStateEv>
                break;
 800a4c2:	e00b      	b.n	800a4dc <_ZN6Remora3runEv+0x6c>
            case ST_RESET:
                handleResetState();
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f7ff ff79 	bl	800a3bc <_ZN6Remora16handleResetStateEv>
                break;
 800a4ca:	e007      	b.n	800a4dc <_ZN6Remora3runEv+0x6c>
            case ST_SYSRESET:
                handleSysResetState();
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f7ff ff9d 	bl	800a40c <_ZN6Remora19handleSysResetStateEv>
                break;
 800a4d2:	e003      	b.n	800a4dc <_ZN6Remora3runEv+0x6c>
            default:
                printf("Error: Invalid state\n");
 800a4d4:	4806      	ldr	r0, [pc, #24]	@ (800a4f0 <_ZN6Remora3runEv+0x80>)
 800a4d6:	f01c fc1b 	bl	8026d10 <puts>
                break;
 800a4da:	bf00      	nop
        }
        comms->tasks();
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	3314      	adds	r3, #20
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f000 fce5 	bl	800aeb0 <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f005 f857 	bl	800f59c <_ZN12CommsHandler5tasksEv>
        switch (currentState) {
 800a4ee:	e7c3      	b.n	800a478 <_ZN6Remora3runEv+0x8>
 800a4f0:	08027f38 	.word	0x08027f38

0800a4f4 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b082      	sub	sp, #8
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
 800a4fc:	6039      	str	r1, [r7, #0]
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	681a      	ldr	r2, [r3, #0]
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	601a      	str	r2, [r3, #0]
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	1d1a      	adds	r2, r3, #4
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	3304      	adds	r3, #4
 800a50e:	4619      	mov	r1, r3
 800a510:	4610      	mov	r0, r2
 800a512:	f000 ff16 	bl	800b342 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	4618      	mov	r0, r3
 800a51a:	3708      	adds	r7, #8
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}

0800a520 <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>:
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 800a520:	b580      	push	{r7, lr}
 800a522:	b082      	sub	sp, #8
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	6039      	str	r1, [r7, #0]
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	683a      	ldr	r2, [r7, #0]
 800a52e:	4611      	mov	r1, r2
 800a530:	4618      	mov	r0, r3
 800a532:	f7ff ffdf 	bl	800a4f4 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	4618      	mov	r0, r3
 800a53a:	3708      	adds	r7, #8
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}

0800a540 <_ZN6Remora11loadModulesEv>:
    }
}

void Remora::loadModules() {
 800a540:	b5b0      	push	{r4, r5, r7, lr}
 800a542:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 800a546:	af04      	add	r7, sp, #16
 800a548:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800a54c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800a550:	6018      	str	r0, [r3, #0]
    ModuleFactory* factory = ModuleFactory::getInstance();
 800a552:	f006 fc83 	bl	8010e5c <_ZN13ModuleFactory11getInstanceEv>
 800a556:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
    JsonArray modules = configHandler->getModules();
 800a55a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800a55e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	3310      	adds	r3, #16
 800a566:	4618      	mov	r0, r3
 800a568:	f000 fea6 	bl	800b2b8 <_ZNKSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEptEv>
 800a56c:	4602      	mov	r2, r0
 800a56e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800a572:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 800a576:	4611      	mov	r1, r2
 800a578:	4618      	mov	r0, r3
 800a57a:	f7fb fc07 	bl	8005d8c <_ZN17JsonConfigHandler10getModulesEv>
    if (modules.isNull()) {
 800a57e:	f107 0318 	add.w	r3, r7, #24
 800a582:	4618      	mov	r0, r3
 800a584:	f7ff fa50 	bl	8009a28 <_ZNK11ArduinoJson8V730HB229JsonArray6isNullEv>
      //printf something here
    }

    for (size_t i = 0; i < modules.size(); i++) {
 800a588:	2300      	movs	r3, #0
 800a58a:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 800a58e:	e266      	b.n	800aa5e <_ZN6Remora11loadModulesEv+0x51e>
        //if (modules[i].containsKey("Thread") && modules[i].containsKey("Type")) {
    	if (modules[i]["Thread"].is<const char*>() && modules[i]["Type"].is<const char*>()) {
 800a590:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800a594:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 800a598:	f107 0118 	add.w	r1, r7, #24
 800a59c:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f000 fe95 	bl	800b2d0 <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 800a5a6:	f107 0420 	add.w	r4, r7, #32

template <typename TDerived>
template <typename TString, enable_if_t<IsString<TString>::value, int>>
inline MemberProxy<TDerived, AdaptedString<TString>>
VariantRefBase<TDerived>::operator[](const TString& key) const {
  return {derived(), adaptString(key)};
 800a5aa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f001 fb79 	bl	800bca6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 800a5b4:	4602      	mov	r2, r0
 800a5b6:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 800a5ba:	4611      	mov	r1, r2
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f001 fb7d 	bl	800bcbc <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 800a5c2:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800a5c6:	49c3      	ldr	r1, [pc, #780]	@ (800a8d4 <_ZN6Remora11loadModulesEv+0x394>)
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f7fc fc72 	bl	8006eb2 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA7_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800a5ce:	f507 71ae 	add.w	r1, r7, #348	@ 0x15c
 800a5d2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800a5d6:	9300      	str	r3, [sp, #0]
 800a5d8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800a5dc:	cb0c      	ldmia	r3, {r2, r3}
 800a5de:	4620      	mov	r0, r4
 800a5e0:	f001 fb84 	bl	800bcec <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 800a5e4:	f107 0320 	add.w	r3, r7, #32
 800a5e8:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 800a5ec:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800a5f0:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 800a5f4:	f8d7 01ec 	ldr.w	r0, [r7, #492]	@ 0x1ec
 800a5f8:	f002 f8df 	bl	800c7ba <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7getDataEv>
 800a5fc:	4604      	mov	r4, r0
 800a5fe:	f8d7 01ec 	ldr.w	r0, [r7, #492]	@ 0x1ec
 800a602:	f002 f8ea 	bl	800c7da <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>
 800a606:	4602      	mov	r2, r0
 800a608:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800a60c:	4621      	mov	r1, r4
 800a60e:	4618      	mov	r0, r3
 800a610:	f7fa f86b 	bl	80046ea <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 800a614:	bf00      	nop
  return Converter<T>::checkJson(getVariant<variant_type>());
 800a616:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800a61a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a61e:	f7ff fb1c 	bl	8009c5a <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE>
 800a622:	4603      	mov	r3, r0
 800a624:	bf00      	nop
 800a626:	2b00      	cmp	r3, #0
 800a628:	d04e      	beq.n	800a6c8 <_ZN6Remora11loadModulesEv+0x188>
 800a62a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800a62e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800a632:	f107 0118 	add.w	r1, r7, #24
 800a636:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 800a63a:	4618      	mov	r0, r3
 800a63c:	f000 fe48 	bl	800b2d0 <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 800a640:	f107 0450 	add.w	r4, r7, #80	@ 0x50
  return {derived(), adaptString(key)};
 800a644:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800a648:	4618      	mov	r0, r3
 800a64a:	f001 fb2c 	bl	800bca6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 800a64e:	4602      	mov	r2, r0
 800a650:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800a654:	4611      	mov	r1, r2
 800a656:	4618      	mov	r0, r3
 800a658:	f001 fb30 	bl	800bcbc <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 800a65c:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 800a660:	499d      	ldr	r1, [pc, #628]	@ (800a8d8 <_ZN6Remora11loadModulesEv+0x398>)
 800a662:	4618      	mov	r0, r3
 800a664:	f001 fb61 	bl	800bd2a <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA5_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800a668:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 800a66c:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800a670:	9300      	str	r3, [sp, #0]
 800a672:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 800a676:	cb0c      	ldmia	r3, {r2, r3}
 800a678:	4620      	mov	r0, r4
 800a67a:	f001 fb37 	bl	800bcec <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 800a67e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800a682:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 800a686:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800a68a:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 800a68e:	f8d7 01e4 	ldr.w	r0, [r7, #484]	@ 0x1e4
 800a692:	f002 f892 	bl	800c7ba <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7getDataEv>
 800a696:	4604      	mov	r4, r0
 800a698:	f8d7 01e4 	ldr.w	r0, [r7, #484]	@ 0x1e4
 800a69c:	f002 f89d 	bl	800c7da <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 800a6a6:	4621      	mov	r1, r4
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f7fa f81e 	bl	80046ea <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 800a6ae:	bf00      	nop
  return Converter<T>::checkJson(getVariant<variant_type>());
 800a6b0:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 800a6b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a6b8:	f7ff facf 	bl	8009c5a <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	bf00      	nop
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d001      	beq.n	800a6c8 <_ZN6Remora11loadModulesEv+0x188>
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	e000      	b.n	800a6ca <_ZN6Remora11loadModulesEv+0x18a>
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	f000 81c2 	beq.w	800aa54 <_ZN6Remora11loadModulesEv+0x514>
            const char* threadName = modules[i]["Thread"];
 800a6d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800a6d4:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800a6d8:	f107 0118 	add.w	r1, r7, #24
 800a6dc:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f000 fdf5 	bl	800b2d0 <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 800a6e6:	f107 0480 	add.w	r4, r7, #128	@ 0x80
  return {derived(), adaptString(key)};
 800a6ea:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f001 fad9 	bl	800bca6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 800a6f4:	4602      	mov	r2, r0
 800a6f6:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800a6fa:	4611      	mov	r1, r2
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f001 fadd 	bl	800bcbc <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 800a702:	f507 73d6 	add.w	r3, r7, #428	@ 0x1ac
 800a706:	4973      	ldr	r1, [pc, #460]	@ (800a8d4 <_ZN6Remora11loadModulesEv+0x394>)
 800a708:	4618      	mov	r0, r3
 800a70a:	f7fc fbd2 	bl	8006eb2 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA7_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800a70e:	f507 71dc 	add.w	r1, r7, #440	@ 0x1b8
 800a712:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800a716:	9300      	str	r3, [sp, #0]
 800a718:	f507 73d6 	add.w	r3, r7, #428	@ 0x1ac
 800a71c:	cb0c      	ldmia	r3, {r2, r3}
 800a71e:	4620      	mov	r0, r4
 800a720:	f001 fae4 	bl	800bcec <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 800a724:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800a728:	4618      	mov	r0, r3
 800a72a:	f000 fde1 	bl	800b2f0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800a72e:	f8c7 01fc 	str.w	r0, [r7, #508]	@ 0x1fc
            const char* moduleType = modules[i]["Type"];
 800a732:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800a736:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800a73a:	f107 0118 	add.w	r1, r7, #24
 800a73e:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 800a742:	4618      	mov	r0, r3
 800a744:	f000 fdc4 	bl	800b2d0 <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 800a748:	f107 04b0 	add.w	r4, r7, #176	@ 0xb0
 800a74c:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800a750:	4618      	mov	r0, r3
 800a752:	f001 faa8 	bl	800bca6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 800a756:	4602      	mov	r2, r0
 800a758:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
 800a75c:	4611      	mov	r1, r2
 800a75e:	4618      	mov	r0, r3
 800a760:	f001 faac 	bl	800bcbc <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 800a764:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800a768:	495b      	ldr	r1, [pc, #364]	@ (800a8d8 <_ZN6Remora11loadModulesEv+0x398>)
 800a76a:	4618      	mov	r0, r3
 800a76c:	f001 fadd 	bl	800bd2a <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA5_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800a770:	f507 71ce 	add.w	r1, r7, #412	@ 0x19c
 800a774:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 800a778:	9300      	str	r3, [sp, #0]
 800a77a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800a77e:	cb0c      	ldmia	r3, {r2, r3}
 800a780:	4620      	mov	r0, r4
 800a782:	f001 fab3 	bl	800bcec <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 800a786:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 800a78a:	4618      	mov	r0, r3
 800a78c:	f000 fdb0 	bl	800b2f0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800a790:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
            uint32_t threadFreq = 0;
 800a794:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800a798:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800a79c:	2200      	movs	r2, #0
 800a79e:	601a      	str	r2, [r3, #0]

            // Determine the thread frequency based on the thread name
            if (strcmp(threadName, "Servo") == 0) {
 800a7a0:	494e      	ldr	r1, [pc, #312]	@ (800a8dc <_ZN6Remora11loadModulesEv+0x39c>)
 800a7a2:	f8d7 01fc 	ldr.w	r0, [r7, #508]	@ 0x1fc
 800a7a6:	f7f5 fd9b 	bl	80002e0 <strcmp>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d10b      	bne.n	800a7c8 <_ZN6Remora11loadModulesEv+0x288>
                threadFreq = servoFreq;
 800a7b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800a7b4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a7bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800a7c0:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800a7c4:	601a      	str	r2, [r3, #0]
 800a7c6:	e012      	b.n	800a7ee <_ZN6Remora11loadModulesEv+0x2ae>
            } else if (strcmp(threadName, "Base") == 0) {
 800a7c8:	4945      	ldr	r1, [pc, #276]	@ (800a8e0 <_ZN6Remora11loadModulesEv+0x3a0>)
 800a7ca:	f8d7 01fc 	ldr.w	r0, [r7, #508]	@ 0x1fc
 800a7ce:	f7f5 fd87 	bl	80002e0 <strcmp>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d10a      	bne.n	800a7ee <_ZN6Remora11loadModulesEv+0x2ae>
                threadFreq = baseFreq;
 800a7d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800a7dc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a7e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800a7e8:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800a7ec:	601a      	str	r2, [r3, #0]
            }

            // Add the "ThreadFreq" key and its value to the module's JSON object
            modules[i]["ThreadFreq"] = threadFreq;
 800a7ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800a7f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7f6:	f107 0118 	add.w	r1, r7, #24
 800a7fa:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 800a7fe:	4618      	mov	r0, r3
 800a800:	f000 fd66 	bl	800b2d0 <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 800a804:	f107 04e0 	add.w	r4, r7, #224	@ 0xe0
 800a808:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800a80c:	4618      	mov	r0, r3
 800a80e:	f001 fa4a 	bl	800bca6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 800a812:	4602      	mov	r2, r0
 800a814:	f507 73ea 	add.w	r3, r7, #468	@ 0x1d4
 800a818:	4611      	mov	r1, r2
 800a81a:	4618      	mov	r0, r3
 800a81c:	f001 fa4e 	bl	800bcbc <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 800a820:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 800a824:	492f      	ldr	r1, [pc, #188]	@ (800a8e4 <_ZN6Remora11loadModulesEv+0x3a4>)
 800a826:	4618      	mov	r0, r3
 800a828:	f001 fab4 	bl	800bd94 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA11_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800a82c:	f507 71ea 	add.w	r1, r7, #468	@ 0x1d4
 800a830:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800a834:	9300      	str	r3, [sp, #0]
 800a836:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 800a83a:	cb0c      	ldmia	r3, {r2, r3}
 800a83c:	4620      	mov	r0, r4
 800a83e:	f001 fa55 	bl	800bcec <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 800a842:	f107 0214 	add.w	r2, r7, #20
 800a846:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800a84a:	4611      	mov	r1, r2
 800a84c:	4618      	mov	r0, r3
 800a84e:	f000 fd5b 	bl	800b308 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEaSImEERS7_RKT_>

            // Create module using factory
            std::shared_ptr<Module> _mod = factory->createModule(threadName, moduleType, modules[i], this);
 800a852:	f8d7 5200 	ldr.w	r5, [r7, #512]	@ 0x200
 800a856:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a85a:	f107 0118 	add.w	r1, r7, #24
 800a85e:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 800a862:	4618      	mov	r0, r3
 800a864:	f000 fd34 	bl	800b2d0 <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 800a868:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a86c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800a870:	4611      	mov	r1, r2
 800a872:	4618      	mov	r0, r3
 800a874:	f000 fd56 	bl	800b324 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEEcvT_INS0_11JsonVariantELi0EEEv>
 800a878:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800a87c:	f5a3 74fe 	sub.w	r4, r3, #508	@ 0x1fc
 800a880:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800a884:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	9302      	str	r3, [sp, #8]
 800a88c:	466a      	mov	r2, sp
 800a88e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a892:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a896:	e882 0003 	stmia.w	r2, {r0, r1}
 800a89a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800a89e:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 800a8a2:	4629      	mov	r1, r5
 800a8a4:	4620      	mov	r0, r4
 800a8a6:	f006 f9ff 	bl	8010ca8 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora>

            // Check if the module creation was successful
            if (!_mod) {
 800a8aa:	f107 030c 	add.w	r3, r7, #12
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f000 fce5 	bl	800b27e <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	f083 0301 	eor.w	r3, r3, #1
 800a8ba:	b2db      	uxtb	r3, r3
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d015      	beq.n	800a8ec <_ZN6Remora11loadModulesEv+0x3ac>
            	printf("Error: Failed to create module of type '%s' for thread '%s'. Skipping registration.\n",
 800a8c0:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 800a8c4:	f8d7 11f8 	ldr.w	r1, [r7, #504]	@ 0x1f8
 800a8c8:	4807      	ldr	r0, [pc, #28]	@ (800a8e8 <_ZN6Remora11loadModulesEv+0x3a8>)
 800a8ca:	f01c f9b1 	bl	8026c30 <iprintf>
						moduleType, threadName);
				continue; // Skip to the next iteration
 800a8ce:	2400      	movs	r4, #0
 800a8d0:	e0ba      	b.n	800aa48 <_ZN6Remora11loadModulesEv+0x508>
 800a8d2:	bf00      	nop
 800a8d4:	08027f50 	.word	0x08027f50
 800a8d8:	08027f58 	.word	0x08027f58
 800a8dc:	08027e30 	.word	0x08027e30
 800a8e0:	08027e28 	.word	0x08027e28
 800a8e4:	08027f60 	.word	0x08027f60
 800a8e8:	08027f6c 	.word	0x08027f6c
			}

            bool _modPost = _mod->getUsesModulePost();
 800a8ec:	f107 030c 	add.w	r3, r7, #12
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	f000 fcd5 	bl	800b2a0 <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	681a      	ldr	r2, [r3, #0]
 800a8fa:	3218      	adds	r2, #24
 800a8fc:	6812      	ldr	r2, [r2, #0]
 800a8fe:	4618      	mov	r0, r3
 800a900:	4790      	blx	r2
 800a902:	4603      	mov	r3, r0
 800a904:	f887 31f7 	strb.w	r3, [r7, #503]	@ 0x1f7

            if (strcmp(threadName, "Servo") == 0) {
 800a908:	4960      	ldr	r1, [pc, #384]	@ (800aa8c <_ZN6Remora11loadModulesEv+0x54c>)
 800a90a:	f8d7 01fc 	ldr.w	r0, [r7, #508]	@ 0x1fc
 800a90e:	f7f5 fce7 	bl	80002e0 <strcmp>
 800a912:	4603      	mov	r3, r0
 800a914:	2b00      	cmp	r3, #0
 800a916:	d13e      	bne.n	800a996 <_ZN6Remora11loadModulesEv+0x456>
                servoThread->registerModule(_mod);
 800a918:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800a91c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	3320      	adds	r3, #32
 800a924:	4618      	mov	r0, r3
 800a926:	f000 fc38 	bl	800b19a <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 800a92a:	4604      	mov	r4, r0
 800a92c:	f107 020c 	add.w	r2, r7, #12
 800a930:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800a934:	4611      	mov	r1, r2
 800a936:	4618      	mov	r0, r3
 800a938:	f7ff fdf2 	bl	800a520 <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>
 800a93c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800a940:	4619      	mov	r1, r3
 800a942:	4620      	mov	r0, r4
 800a944:	f00d fe1e 	bl	8018584 <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE>
 800a948:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800a94c:	4618      	mov	r0, r3
 800a94e:	f7ff fae0 	bl	8009f12 <_ZNSt10shared_ptrI6ModuleED1Ev>
            	if (_modPost) {
 800a952:	f897 31f7 	ldrb.w	r3, [r7, #503]	@ 0x1f7
 800a956:	2b00      	cmp	r3, #0
 800a958:	d075      	beq.n	800aa46 <_ZN6Remora11loadModulesEv+0x506>
            		servoThread->registerModulePost(_mod);
 800a95a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800a95e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	3320      	adds	r3, #32
 800a966:	4618      	mov	r0, r3
 800a968:	f000 fc17 	bl	800b19a <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 800a96c:	4604      	mov	r4, r0
 800a96e:	f107 020c 	add.w	r2, r7, #12
 800a972:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a976:	4611      	mov	r1, r2
 800a978:	4618      	mov	r0, r3
 800a97a:	f7ff fdd1 	bl	800a520 <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>
 800a97e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a982:	4619      	mov	r1, r3
 800a984:	4620      	mov	r0, r4
 800a986:	f00d fe19 	bl	80185bc <_ZN9pruThread18registerModulePostESt10shared_ptrI6ModuleE>
 800a98a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a98e:	4618      	mov	r0, r3
 800a990:	f7ff fabf 	bl	8009f12 <_ZNSt10shared_ptrI6ModuleED1Ev>
 800a994:	e057      	b.n	800aa46 <_ZN6Remora11loadModulesEv+0x506>
            	}
            }
            else if (strcmp(threadName, "Base") == 0) {
 800a996:	493e      	ldr	r1, [pc, #248]	@ (800aa90 <_ZN6Remora11loadModulesEv+0x550>)
 800a998:	f8d7 01fc 	ldr.w	r0, [r7, #508]	@ 0x1fc
 800a99c:	f7f5 fca0 	bl	80002e0 <strcmp>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d13e      	bne.n	800aa24 <_ZN6Remora11loadModulesEv+0x4e4>
                baseThread->registerModule(_mod);
 800a9a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800a9aa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	331c      	adds	r3, #28
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f000 fbf1 	bl	800b19a <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 800a9b8:	4604      	mov	r4, r0
 800a9ba:	f107 020c 	add.w	r2, r7, #12
 800a9be:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a9c2:	4611      	mov	r1, r2
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f7ff fdab 	bl	800a520 <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>
 800a9ca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	4620      	mov	r0, r4
 800a9d2:	f00d fdd7 	bl	8018584 <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE>
 800a9d6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f7ff fa99 	bl	8009f12 <_ZNSt10shared_ptrI6ModuleED1Ev>
            	if (_modPost) {
 800a9e0:	f897 31f7 	ldrb.w	r3, [r7, #503]	@ 0x1f7
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d02e      	beq.n	800aa46 <_ZN6Remora11loadModulesEv+0x506>
            		servoThread->registerModulePost(_mod);
 800a9e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800a9ec:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	3320      	adds	r3, #32
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f000 fbd0 	bl	800b19a <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 800a9fa:	4604      	mov	r4, r0
 800a9fc:	f107 020c 	add.w	r2, r7, #12
 800aa00:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800aa04:	4611      	mov	r1, r2
 800aa06:	4618      	mov	r0, r3
 800aa08:	f7ff fd8a 	bl	800a520 <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>
 800aa0c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800aa10:	4619      	mov	r1, r3
 800aa12:	4620      	mov	r0, r4
 800aa14:	f00d fdd2 	bl	80185bc <_ZN9pruThread18registerModulePostESt10shared_ptrI6ModuleE>
 800aa18:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f7ff fa78 	bl	8009f12 <_ZNSt10shared_ptrI6ModuleED1Ev>
 800aa22:	e010      	b.n	800aa46 <_ZN6Remora11loadModulesEv+0x506>
            	}
            }
            else {
                onLoad.push_back(move(_mod));
 800aa24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800aa28:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 800aa32:	f107 030c 	add.w	r3, r7, #12
 800aa36:	4618      	mov	r0, r3
 800aa38:	f000 fc9a 	bl	800b370 <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	4619      	mov	r1, r3
 800aa40:	4620      	mov	r0, r4
 800aa42:	f000 fca0 	bl	800b386 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backEOS2_>
            }
        }
 800aa46:	2401      	movs	r4, #1
 800aa48:	f107 030c 	add.w	r3, r7, #12
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f7ff fa60 	bl	8009f12 <_ZNSt10shared_ptrI6ModuleED1Ev>
 800aa52:	2c01      	cmp	r4, #1
    for (size_t i = 0; i < modules.size(); i++) {
 800aa54:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 800aa58:	3301      	adds	r3, #1
 800aa5a:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 800aa5e:	f107 0318 	add.w	r3, r7, #24
 800aa62:	4618      	mov	r0, r3
 800aa64:	f7fe fff1 	bl	8009a4a <_ZNK11ArduinoJson8V730HB229JsonArray4sizeEv>
 800aa68:	4602      	mov	r2, r0
 800aa6a:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	bf34      	ite	cc
 800aa72:	2301      	movcc	r3, #1
 800aa74:	2300      	movcs	r3, #0
 800aa76:	b2db      	uxtb	r3, r3
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	f47f ad89 	bne.w	800a590 <_ZN6Remora11loadModulesEv+0x50>
    }

}
 800aa7e:	bf00      	nop
 800aa80:	bf00      	nop
 800aa82:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bdb0      	pop	{r4, r5, r7, pc}
 800aa8a:	bf00      	nop
 800aa8c:	08027e30 	.word	0x08027e30
 800aa90:	08027e28 	.word	0x08027e28

0800aa94 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b082      	sub	sp, #8
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
      { delete this; }
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d005      	beq.n	800aaae <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x1a>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	3304      	adds	r3, #4
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	4798      	blx	r3
 800aaae:	bf00      	nop
 800aab0:	3708      	adds	r7, #8
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}

0800aab6 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800aab6:	b480      	push	{r7}
 800aab8:	b083      	sub	sp, #12
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	6078      	str	r0, [r7, #4]
 800aabe:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681a      	ldr	r2, [r3, #0]
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	429a      	cmp	r2, r3
 800aaca:	d201      	bcs.n	800aad0 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	e000      	b.n	800aad2 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800aad0:	687b      	ldr	r3, [r7, #4]
    }
 800aad2:	4618      	mov	r0, r3
 800aad4:	370c      	adds	r7, #12
 800aad6:	46bd      	mov	sp, r7
 800aad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aadc:	4770      	bx	lr

0800aade <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEED1Ev>:
  ~MemoryPoolList() {
 800aade:	b480      	push	{r7}
 800aae0:	b083      	sub	sp, #12
 800aae2:	af00      	add	r7, sp, #0
 800aae4:	6078      	str	r0, [r7, #4]
  }
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	4618      	mov	r0, r3
 800aaea:	370c      	adds	r7, #12
 800aaec:	46bd      	mov	sp, r7
 800aaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf2:	4770      	bx	lr

0800aaf4 <_ZSt4moveIRSt10unique_ptrI14CommsInterfaceSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800aaf4:	b480      	push	{r7}
 800aaf6:	b083      	sub	sp, #12
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	4618      	mov	r0, r3
 800ab00:	370c      	adds	r7, #12
 800ab02:	46bd      	mov	sp, r7
 800ab04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab08:	4770      	bx	lr

0800ab0a <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEaSEOS3_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 800ab0a:	b580      	push	{r7, lr}
 800ab0c:	b082      	sub	sp, #8
 800ab0e:	af00      	add	r7, sp, #0
 800ab10:	6078      	str	r0, [r7, #4]
 800ab12:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 800ab14:	6838      	ldr	r0, [r7, #0]
 800ab16:	f000 fcbd 	bl	800b494 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE7releaseEv>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	4619      	mov	r1, r3
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f000 fc98 	bl	800b454 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE5resetEPS0_>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 800ab24:	6838      	ldr	r0, [r7, #0]
 800ab26:	f000 fcca 	bl	800b4be <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE10_M_deleterEv>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f000 fcd3 	bl	800b4d8 <_ZSt7forwardISt14default_deleteI14CommsInterfaceEEOT_RNSt16remove_referenceIS3_E4typeE>
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f000 fcc3 	bl	800b4be <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE10_M_deleterEv>
	return *this;
 800ab38:	687b      	ldr	r3, [r7, #4]
      }
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3708      	adds	r7, #8
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}

0800ab42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 800ab42:	b580      	push	{r7, lr}
 800ab44:	b082      	sub	sp, #8
 800ab46:	af00      	add	r7, sp, #0
 800ab48:	6078      	str	r0, [r7, #4]
	if (_M_pi != nullptr)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d004      	beq.n	800ab5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1a>
	  _M_pi->_M_release();
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	4618      	mov	r0, r3
 800ab58:	f7fe fded 	bl	8009736 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3708      	adds	r7, #8
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}

0800ab66 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EE3getEv>:
      }

      /// Return the stored pointer.
      _GLIBCXX23_CONSTEXPR
      pointer
      get() const noexcept
 800ab66:	b580      	push	{r7, lr}
 800ab68:	b082      	sub	sp, #8
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	4618      	mov	r0, r3
 800ab72:	f000 fcbc 	bl	800b4ee <_ZNKSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800ab76:	4603      	mov	r3, r0
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3708      	adds	r7, #8
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}

0800ab80 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEC1Ev>:
      __uniq_ptr_impl() = default;
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b082      	sub	sp, #8
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f000 fcbd 	bl	800b50a <_ZNSt5tupleIJP17JsonConfigHandlerSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	4618      	mov	r0, r3
 800ab94:	3708      	adds	r7, #8
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}

0800ab9a <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800ab9a:	b580      	push	{r7, lr}
 800ab9c:	b082      	sub	sp, #8
 800ab9e:	af00      	add	r7, sp, #0
 800aba0:	6078      	str	r0, [r7, #4]
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	4618      	mov	r0, r3
 800aba6:	f7ff ffeb 	bl	800ab80 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEC1Ev>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	4618      	mov	r0, r3
 800abae:	3708      	adds	r7, #8
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}

0800abb4 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEC1IS2_vEEv>:
	constexpr unique_ptr() noexcept
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b082      	sub	sp, #8
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
	: _M_t()
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2200      	movs	r2, #0
 800abc0:	601a      	str	r2, [r3, #0]
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	4618      	mov	r0, r3
 800abc6:	f7ff ffe8 	bl	800ab9a <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>
	{ }
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	4618      	mov	r0, r3
 800abce:	3708      	adds	r7, #8
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800abd4:	b590      	push	{r4, r7, lr}
 800abd6:	b085      	sub	sp, #20
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	4618      	mov	r0, r3
 800abe0:	f000 fca0 	bl	800b524 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800abe4:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d00c      	beq.n	800ac08 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f000 fca5 	bl	800b53e <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EE11get_deleterEv>
 800abf4:	4604      	mov	r4, r0
 800abf6:	68f8      	ldr	r0, [r7, #12]
 800abf8:	f000 fcae 	bl	800b558 <_ZSt4moveIRP17JsonConfigHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 800abfc:	4603      	mov	r3, r0
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	4619      	mov	r1, r3
 800ac02:	4620      	mov	r0, r4
 800ac04:	f000 fcc6 	bl	800b594 <_ZNKSt14default_deleteI17JsonConfigHandlerEclEPS0_>
	__ptr = pointer();
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	601a      	str	r2, [r3, #0]
      }
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	4618      	mov	r0, r3
 800ac12:	3714      	adds	r7, #20
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd90      	pop	{r4, r7, pc}

0800ac18 <_ZNSt10shared_ptrI12CommsHandlerEC1Ev>:
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b082      	sub	sp, #8
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	4618      	mov	r0, r3
 800ac24:	f000 fcc9 	bl	800b5ba <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3708      	adds	r7, #8
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}

0800ac32 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEC1Ev>:
      __uniq_ptr_impl() = default;
 800ac32:	b580      	push	{r7, lr}
 800ac34:	b082      	sub	sp, #8
 800ac36:	af00      	add	r7, sp, #0
 800ac38:	6078      	str	r0, [r7, #4]
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f000 fccd 	bl	800b5dc <_ZNSt5tupleIJP9pruThreadSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	4618      	mov	r0, r3
 800ac46:	3708      	adds	r7, #8
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}

0800ac4c <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b082      	sub	sp, #8
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	4618      	mov	r0, r3
 800ac58:	f7ff ffeb 	bl	800ac32 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEC1Ev>
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3708      	adds	r7, #8
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}

0800ac66 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEv>:
	constexpr unique_ptr() noexcept
 800ac66:	b580      	push	{r7, lr}
 800ac68:	b082      	sub	sp, #8
 800ac6a:	af00      	add	r7, sp, #0
 800ac6c:	6078      	str	r0, [r7, #4]
	: _M_t()
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2200      	movs	r2, #0
 800ac72:	601a      	str	r2, [r3, #0]
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	4618      	mov	r0, r3
 800ac78:	f7ff ffe8 	bl	800ac4c <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>
	{ }
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3708      	adds	r7, #8
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}

0800ac86 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800ac86:	b590      	push	{r4, r7, lr}
 800ac88:	b085      	sub	sp, #20
 800ac8a:	af00      	add	r7, sp, #0
 800ac8c:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	4618      	mov	r0, r3
 800ac92:	f000 fcb0 	bl	800b5f6 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800ac96:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d00c      	beq.n	800acba <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f000 fcb5 	bl	800b610 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EE11get_deleterEv>
 800aca6:	4604      	mov	r4, r0
 800aca8:	68f8      	ldr	r0, [r7, #12]
 800acaa:	f000 fcbe 	bl	800b62a <_ZSt4moveIRP9pruThreadEONSt16remove_referenceIT_E4typeEOS4_>
 800acae:	4603      	mov	r3, r0
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	4619      	mov	r1, r3
 800acb4:	4620      	mov	r0, r4
 800acb6:	f000 fcda 	bl	800b66e <_ZNKSt14default_deleteI9pruThreadEclEPS0_>
	__ptr = pointer();
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	2200      	movs	r2, #0
 800acbe:	601a      	str	r2, [r3, #0]
      }
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	4618      	mov	r0, r3
 800acc4:	3714      	adds	r7, #20
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd90      	pop	{r4, r7, pc}

0800acca <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800acca:	b580      	push	{r7, lr}
 800accc:	b082      	sub	sp, #8
 800acce:	af00      	add	r7, sp, #0
 800acd0:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f000 fcde 	bl	800b694 <_ZNSaISt10shared_ptrI6ModuleEEC1Ev>
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	4618      	mov	r0, r3
 800acdc:	f000 fce6 	bl	800b6ac <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE17_Vector_impl_dataC1Ev>
	{ }
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	4618      	mov	r0, r3
 800ace4:	3708      	adds	r7, #8
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}

0800acea <_ZNSaISt10shared_ptrI6ModuleEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 800acea:	b580      	push	{r7, lr}
 800acec:	b082      	sub	sp, #8
 800acee:	af00      	add	r7, sp, #0
 800acf0:	6078      	str	r0, [r7, #4]
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f000 fcee 	bl	800b6d4 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEED1Ev>
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	4618      	mov	r0, r3
 800acfc:	3708      	adds	r7, #8
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}

0800ad02 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800ad02:	b580      	push	{r7, lr}
 800ad04:	b082      	sub	sp, #8
 800ad06:	af00      	add	r7, sp, #0
 800ad08:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	689a      	ldr	r2, [r3, #8]
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	1ad3      	subs	r3, r2, r3
 800ad18:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f000 fce4 	bl	800b6ea <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE13_M_deallocateEPS2_j>
      }
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	4618      	mov	r0, r3
 800ad26:	f7ff f880 	bl	8009e2a <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE12_Vector_implD1Ev>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	3708      	adds	r7, #8
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}

0800ad34 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EED1Ev>:
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT
 800ad34:	b5b0      	push	{r4, r5, r7, lr}
 800ad36:	b082      	sub	sp, #8
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681c      	ldr	r4, [r3, #0]
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	4618      	mov	r0, r3
 800ad48:	f000 fce2 	bl	800b710 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 800ad4c:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800ad4e:	461a      	mov	r2, r3
 800ad50:	4629      	mov	r1, r5
 800ad52:	4620      	mov	r0, r4
 800ad54:	f000 fce7 	bl	800b726 <_ZSt8_DestroyIPSt10shared_ptrI6ModuleES2_EvT_S4_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f7ff ffd1 	bl	800ad02 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EED1Ev>
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	4618      	mov	r0, r3
 800ad64:	3708      	adds	r7, #8
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bdb0      	pop	{r4, r5, r7, pc}

0800ad6a <_ZSt11make_uniqueI17JsonConfigHandlerJP6RemoraEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
   *  @relates unique_ptr
   */
  template<typename _Tp, typename... _Args>
    _GLIBCXX23_CONSTEXPR
    inline __detail::__unique_ptr_t<_Tp>
    make_unique(_Args&&... __args)
 800ad6a:	b590      	push	{r4, r7, lr}
 800ad6c:	b083      	sub	sp, #12
 800ad6e:	af00      	add	r7, sp, #0
 800ad70:	6078      	str	r0, [r7, #4]
 800ad72:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800ad74:	206c      	movs	r0, #108	@ 0x6c
 800ad76:	f01b f8b1 	bl	8025edc <_Znwj>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	461c      	mov	r4, r3
 800ad7e:	6838      	ldr	r0, [r7, #0]
 800ad80:	f000 fcdf 	bl	800b742 <_ZSt7forwardIP6RemoraEOT_RNSt16remove_referenceIS2_E4typeE>
 800ad84:	4603      	mov	r3, r0
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	4619      	mov	r1, r3
 800ad8a:	4620      	mov	r0, r4
 800ad8c:	f7fa fef0 	bl	8005b70 <_ZN17JsonConfigHandlerC1EP6Remora>
 800ad90:	4621      	mov	r1, r4
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f000 fcf0 	bl	800b778 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	370c      	adds	r7, #12
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd90      	pop	{r4, r7, pc}

0800ada0 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEaSEOS3_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b082      	sub	sp, #8
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
 800ada8:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 800adaa:	6838      	ldr	r0, [r7, #0]
 800adac:	f000 fd13 	bl	800b7d6 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE7releaseEv>
 800adb0:	4603      	mov	r3, r0
 800adb2:	4619      	mov	r1, r3
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f000 fcee 	bl	800b796 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE5resetEPS0_>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 800adba:	6838      	ldr	r0, [r7, #0]
 800adbc:	f000 fd20 	bl	800b800 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE10_M_deleterEv>
 800adc0:	4603      	mov	r3, r0
 800adc2:	4618      	mov	r0, r3
 800adc4:	f000 fd29 	bl	800b81a <_ZSt7forwardISt14default_deleteI17JsonConfigHandlerEEOT_RNSt16remove_referenceIS3_E4typeE>
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f000 fd19 	bl	800b800 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE10_M_deleterEv>
	return *this;
 800adce:	687b      	ldr	r3, [r7, #4]
      }
 800add0:	4618      	mov	r0, r3
 800add2:	3708      	adds	r7, #8
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}

0800add8 <_ZSt11make_uniqueI8SPICommsJRPV8rxData_tRPV8txData_tP11SPI_TypeDefEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800add8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adda:	b085      	sub	sp, #20
 800addc:	af00      	add	r7, sp, #0
 800adde:	60f8      	str	r0, [r7, #12]
 800ade0:	60b9      	str	r1, [r7, #8]
 800ade2:	607a      	str	r2, [r7, #4]
 800ade4:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800ade6:	f44f 7011 	mov.w	r0, #580	@ 0x244
 800adea:	f01b f877 	bl	8025edc <_Znwj>
 800adee:	4603      	mov	r3, r0
 800adf0:	461e      	mov	r6, r3
 800adf2:	68b8      	ldr	r0, [r7, #8]
 800adf4:	f000 fd1c 	bl	800b830 <_ZSt7forwardIRPV8rxData_tEOT_RNSt16remove_referenceIS4_E4typeE>
 800adf8:	4603      	mov	r3, r0
 800adfa:	681c      	ldr	r4, [r3, #0]
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f000 fd22 	bl	800b846 <_ZSt7forwardIRPV8txData_tEOT_RNSt16remove_referenceIS4_E4typeE>
 800ae02:	4603      	mov	r3, r0
 800ae04:	681d      	ldr	r5, [r3, #0]
 800ae06:	6838      	ldr	r0, [r7, #0]
 800ae08:	f000 fd28 	bl	800b85c <_ZSt7forwardIP11SPI_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	462a      	mov	r2, r5
 800ae12:	4621      	mov	r1, r4
 800ae14:	4630      	mov	r0, r6
 800ae16:	f7f5 ffd1 	bl	8000dbc <_ZN8SPICommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef>
 800ae1a:	4631      	mov	r1, r6
 800ae1c:	68f8      	ldr	r0, [r7, #12]
 800ae1e:	f000 fd38 	bl	800b892 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800ae22:	68f8      	ldr	r0, [r7, #12]
 800ae24:	3714      	adds	r7, #20
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ae2a <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800ae2a:	b590      	push	{r4, r7, lr}
 800ae2c:	b085      	sub	sp, #20
 800ae2e:	af00      	add	r7, sp, #0
 800ae30:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	4618      	mov	r0, r3
 800ae36:	f000 fd3b 	bl	800b8b0 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE6_M_ptrEv>
 800ae3a:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d00c      	beq.n	800ae5e <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f000 fd40 	bl	800b8ca <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EE11get_deleterEv>
 800ae4a:	4604      	mov	r4, r0
 800ae4c:	68f8      	ldr	r0, [r7, #12]
 800ae4e:	f000 fd49 	bl	800b8e4 <_ZSt4moveIRP8SPICommsEONSt16remove_referenceIT_E4typeEOS4_>
 800ae52:	4603      	mov	r3, r0
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	4619      	mov	r1, r3
 800ae58:	4620      	mov	r0, r4
 800ae5a:	f000 fd4e 	bl	800b8fa <_ZNKSt14default_deleteI8SPICommsEclEPS0_>
	__ptr = pointer();
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	2200      	movs	r2, #0
 800ae62:	601a      	str	r2, [r3, #0]
      }
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	4618      	mov	r0, r3
 800ae68:	3714      	adds	r7, #20
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd90      	pop	{r4, r7, pc}

0800ae6e <_ZSt11make_sharedI12CommsHandlerJEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueES4_E4typeEEDpOT0_>:
   *  @throw  std::bad_alloc, or an exception thrown from the
   *          constructor of @a _Tp.
   */
  template<typename _Tp, typename... _Args>
    inline shared_ptr<_NonArray<_Tp>>
    make_shared(_Args&&... __args)
 800ae6e:	b580      	push	{r7, lr}
 800ae70:	b084      	sub	sp, #16
 800ae72:	af00      	add	r7, sp, #0
 800ae74:	6078      	str	r0, [r7, #4]
    {
      using _Alloc = allocator<void>;
      _Alloc __a;
      return shared_ptr<_Tp>(_Sp_alloc_shared_tag<_Alloc>{__a},
			     std::forward<_Args>(__args)...);
 800ae76:	f107 030c 	add.w	r3, r7, #12
 800ae7a:	4619      	mov	r1, r3
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f000 fd4d 	bl	800b91c <_ZNSt10shared_ptrI12CommsHandlerEC1ISaIvEJEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
    }
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	3710      	adds	r7, #16
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}

0800ae8a <_ZNSt10shared_ptrI12CommsHandlerEaSEOS1_>:
      operator=(shared_ptr&& __r) noexcept
 800ae8a:	b590      	push	{r4, r7, lr}
 800ae8c:	b083      	sub	sp, #12
 800ae8e:	af00      	add	r7, sp, #0
 800ae90:	6078      	str	r0, [r7, #4]
 800ae92:	6039      	str	r1, [r7, #0]
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
 800ae94:	687c      	ldr	r4, [r7, #4]
 800ae96:	6838      	ldr	r0, [r7, #0]
 800ae98:	f000 fd4f 	bl	800b93a <_ZSt4moveIRSt10shared_ptrI12CommsHandlerEEONSt16remove_referenceIT_E4typeEOS5_>
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	4619      	mov	r1, r3
 800aea0:	4620      	mov	r0, r4
 800aea2:	f000 fd55 	bl	800b950 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>
	return *this;
 800aea6:	687b      	ldr	r3, [r7, #4]
      }
 800aea8:	4618      	mov	r0, r3
 800aeaa:	370c      	adds	r7, #12
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd90      	pop	{r4, r7, pc}

0800aeb0 <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b082      	sub	sp, #8
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
	return _M_get();
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f000 fd68 	bl	800b98e <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 800aebe:	4603      	mov	r3, r0
      }
 800aec0:	4618      	mov	r0, r3
 800aec2:	3708      	adds	r7, #8
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}

0800aec8 <_ZSt4moveIRSt10unique_ptrI8SPICommsSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800aec8:	b480      	push	{r7}
 800aeca:	b083      	sub	sp, #12
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	4618      	mov	r0, r3
 800aed4:	370c      	adds	r7, #12
 800aed6:	46bd      	mov	sp, r7
 800aed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aedc:	4770      	bx	lr

0800aede <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EIS1_I8SPICommsEEEPS0_OT_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800aede:	b580      	push	{r7, lr}
 800aee0:	b084      	sub	sp, #16
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	60f8      	str	r0, [r7, #12]
 800aee6:	60b9      	str	r1, [r7, #8]
 800aee8:	607a      	str	r2, [r7, #4]
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	68b9      	ldr	r1, [r7, #8]
 800aeee:	687a      	ldr	r2, [r7, #4]
 800aef0:	4618      	mov	r0, r3
 800aef2:	f000 fd70 	bl	800b9d6 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEC1IS1_I8SPICommsEEEPS0_OT_>
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	4618      	mov	r0, r3
 800aefa:	3710      	adds	r7, #16
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}

0800af00 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEC1I8SPICommsS1_IS5_EvEEOS_IT_T0_E>:
	unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
 800af00:	b5b0      	push	{r4, r5, r7, lr}
 800af02:	b082      	sub	sp, #8
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
 800af08:	6039      	str	r1, [r7, #0]
	: _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
 800af0a:	687c      	ldr	r4, [r7, #4]
 800af0c:	6838      	ldr	r0, [r7, #0]
 800af0e:	f000 fd4a 	bl	800b9a6 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EE7releaseEv>
 800af12:	4605      	mov	r5, r0
 800af14:	6838      	ldr	r0, [r7, #0]
 800af16:	f000 fcd8 	bl	800b8ca <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EE11get_deleterEv>
 800af1a:	4603      	mov	r3, r0
 800af1c:	4618      	mov	r0, r3
 800af1e:	f000 fd4f 	bl	800b9c0 <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800af22:	4603      	mov	r3, r0
 800af24:	461a      	mov	r2, r3
 800af26:	4629      	mov	r1, r5
 800af28:	4620      	mov	r0, r4
 800af2a:	f7ff ffd8 	bl	800aede <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EIS1_I8SPICommsEEEPS0_OT_>
	{ }
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	4618      	mov	r0, r3
 800af32:	3708      	adds	r7, #8
 800af34:	46bd      	mov	sp, r7
 800af36:	bdb0      	pop	{r4, r5, r7, pc}

0800af38 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800af38:	b590      	push	{r4, r7, lr}
 800af3a:	b085      	sub	sp, #20
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	4618      	mov	r0, r3
 800af44:	f000 fd5d 	bl	800ba02 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 800af48:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d00c      	beq.n	800af6c <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800af52:	6878      	ldr	r0, [r7, #4]
 800af54:	f000 fd62 	bl	800ba1c <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EE11get_deleterEv>
 800af58:	4604      	mov	r4, r0
 800af5a:	68f8      	ldr	r0, [r7, #12]
 800af5c:	f000 fd6b 	bl	800ba36 <_ZSt4moveIRP14CommsInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 800af60:	4603      	mov	r3, r0
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	4619      	mov	r1, r3
 800af66:	4620      	mov	r0, r4
 800af68:	f000 fd70 	bl	800ba4c <_ZNKSt14default_deleteI14CommsInterfaceEclEPS0_>
	__ptr = pointer();
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	2200      	movs	r2, #0
 800af70:	601a      	str	r2, [r3, #0]
      }
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	4618      	mov	r0, r3
 800af76:	3714      	adds	r7, #20
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd90      	pop	{r4, r7, pc}

0800af7c <_ZSt11make_uniqueI9pruThreadJRA5_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800af7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af80:	b08e      	sub	sp, #56	@ 0x38
 800af82:	af02      	add	r7, sp, #8
 800af84:	60f8      	str	r0, [r7, #12]
 800af86:	60b9      	str	r1, [r7, #8]
 800af88:	607a      	str	r2, [r7, #4]
 800af8a:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800af8c:	2044      	movs	r0, #68	@ 0x44
 800af8e:	f01a ffa5 	bl	8025edc <_Znwj>
 800af92:	4603      	mov	r3, r0
 800af94:	4698      	mov	r8, r3
 800af96:	68b8      	ldr	r0, [r7, #8]
 800af98:	f000 fd69 	bl	800ba6e <_ZSt7forwardIRA5_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 800af9c:	4604      	mov	r4, r0
 800af9e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800afa2:	4618      	mov	r0, r3
 800afa4:	f01a ffab 	bl	8025efe <_ZNSaIcEC1Ev>
 800afa8:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800afac:	f107 0314 	add.w	r3, r7, #20
 800afb0:	4621      	mov	r1, r4
 800afb2:	4618      	mov	r0, r3
 800afb4:	f7fb fb62 	bl	800667c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f000 fd63 	bl	800ba84 <_ZSt7forwardIP11TIM_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800afbe:	4603      	mov	r3, r0
 800afc0:	681d      	ldr	r5, [r3, #0]
 800afc2:	6838      	ldr	r0, [r7, #0]
 800afc4:	f000 fd69 	bl	800ba9a <_ZSt7forwardI9IRQn_TypeEOT_RNSt16remove_referenceIS1_E4typeE>
 800afc8:	4603      	mov	r3, r0
 800afca:	f9b3 6000 	ldrsh.w	r6, [r3]
 800afce:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800afd0:	f000 fd6e 	bl	800bab0 <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
 800afd4:	4603      	mov	r3, r0
 800afd6:	681c      	ldr	r4, [r3, #0]
 800afd8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800afda:	f000 fd74 	bl	800bac6 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 800afde:	4603      	mov	r3, r0
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	b2db      	uxtb	r3, r3
 800afe4:	f107 0114 	add.w	r1, r7, #20
 800afe8:	9301      	str	r3, [sp, #4]
 800afea:	9400      	str	r4, [sp, #0]
 800afec:	4633      	mov	r3, r6
 800afee:	462a      	mov	r2, r5
 800aff0:	4640      	mov	r0, r8
 800aff2:	f00d fa0b 	bl	801840c <_ZN9pruThreadC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP11TIM_TypeDef9IRQn_Typemh>
 800aff6:	4641      	mov	r1, r8
 800aff8:	68f8      	ldr	r0, [r7, #12]
 800affa:	f000 fd7f 	bl	800bafc <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800affe:	f107 0314 	add.w	r3, r7, #20
 800b002:	4618      	mov	r0, r3
 800b004:	f01b f865 	bl	80260d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b008:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b00c:	4618      	mov	r0, r3
 800b00e:	f01a ff77 	bl	8025f00 <_ZNSaIcED1Ev>
 800b012:	bf00      	nop
 800b014:	68f8      	ldr	r0, [r7, #12]
 800b016:	3730      	adds	r7, #48	@ 0x30
 800b018:	46bd      	mov	sp, r7
 800b01a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b01e <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEaSEOS3_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 800b01e:	b580      	push	{r7, lr}
 800b020:	b082      	sub	sp, #8
 800b022:	af00      	add	r7, sp, #0
 800b024:	6078      	str	r0, [r7, #4]
 800b026:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 800b028:	6838      	ldr	r0, [r7, #0]
 800b02a:	f000 fd96 	bl	800bb5a <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE7releaseEv>
 800b02e:	4603      	mov	r3, r0
 800b030:	4619      	mov	r1, r3
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f000 fd71 	bl	800bb1a <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE5resetEPS0_>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 800b038:	6838      	ldr	r0, [r7, #0]
 800b03a:	f000 fda3 	bl	800bb84 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>
 800b03e:	4603      	mov	r3, r0
 800b040:	4618      	mov	r0, r3
 800b042:	f000 fdac 	bl	800bb9e <_ZSt7forwardISt14default_deleteI9pruThreadEEOT_RNSt16remove_referenceIS3_E4typeE>
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f000 fd9c 	bl	800bb84 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>
	return *this;
 800b04c:	687b      	ldr	r3, [r7, #4]
      }
 800b04e:	4618      	mov	r0, r3
 800b050:	3708      	adds	r7, #8
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}

0800b056 <_ZSt11make_uniqueI9pruThreadJRA6_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800b056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b05a:	b08e      	sub	sp, #56	@ 0x38
 800b05c:	af02      	add	r7, sp, #8
 800b05e:	60f8      	str	r0, [r7, #12]
 800b060:	60b9      	str	r1, [r7, #8]
 800b062:	607a      	str	r2, [r7, #4]
 800b064:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800b066:	2044      	movs	r0, #68	@ 0x44
 800b068:	f01a ff38 	bl	8025edc <_Znwj>
 800b06c:	4603      	mov	r3, r0
 800b06e:	4698      	mov	r8, r3
 800b070:	68b8      	ldr	r0, [r7, #8]
 800b072:	f000 fd9f 	bl	800bbb4 <_ZSt7forwardIRA6_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 800b076:	4604      	mov	r4, r0
 800b078:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b07c:	4618      	mov	r0, r3
 800b07e:	f01a ff3e 	bl	8025efe <_ZNSaIcEC1Ev>
 800b082:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800b086:	f107 0314 	add.w	r3, r7, #20
 800b08a:	4621      	mov	r1, r4
 800b08c:	4618      	mov	r0, r3
 800b08e:	f7fb faf5 	bl	800667c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f000 fcf6 	bl	800ba84 <_ZSt7forwardIP11TIM_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800b098:	4603      	mov	r3, r0
 800b09a:	681d      	ldr	r5, [r3, #0]
 800b09c:	6838      	ldr	r0, [r7, #0]
 800b09e:	f000 fcfc 	bl	800ba9a <_ZSt7forwardI9IRQn_TypeEOT_RNSt16remove_referenceIS1_E4typeE>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b0a8:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800b0aa:	f000 fd01 	bl	800bab0 <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	681c      	ldr	r4, [r3, #0]
 800b0b2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800b0b4:	f000 fd07 	bl	800bac6 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	b2db      	uxtb	r3, r3
 800b0be:	f107 0114 	add.w	r1, r7, #20
 800b0c2:	9301      	str	r3, [sp, #4]
 800b0c4:	9400      	str	r4, [sp, #0]
 800b0c6:	4633      	mov	r3, r6
 800b0c8:	462a      	mov	r2, r5
 800b0ca:	4640      	mov	r0, r8
 800b0cc:	f00d f99e 	bl	801840c <_ZN9pruThreadC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP11TIM_TypeDef9IRQn_Typemh>
 800b0d0:	4641      	mov	r1, r8
 800b0d2:	68f8      	ldr	r0, [r7, #12]
 800b0d4:	f000 fd12 	bl	800bafc <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800b0d8:	f107 0314 	add.w	r3, r7, #20
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f01a fff8 	bl	80260d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b0e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f01a ff0a 	bl	8025f00 <_ZNSaIcED1Ev>
 800b0ec:	bf00      	nop
 800b0ee:	68f8      	ldr	r0, [r7, #12]
 800b0f0:	3730      	adds	r7, #48	@ 0x30
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b0f8 <_ZSt11make_uniqueI9pruThreadJRA7_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800b0f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0fc:	b08e      	sub	sp, #56	@ 0x38
 800b0fe:	af02      	add	r7, sp, #8
 800b100:	60f8      	str	r0, [r7, #12]
 800b102:	60b9      	str	r1, [r7, #8]
 800b104:	607a      	str	r2, [r7, #4]
 800b106:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800b108:	2044      	movs	r0, #68	@ 0x44
 800b10a:	f01a fee7 	bl	8025edc <_Znwj>
 800b10e:	4603      	mov	r3, r0
 800b110:	4698      	mov	r8, r3
 800b112:	68b8      	ldr	r0, [r7, #8]
 800b114:	f000 fd59 	bl	800bbca <_ZSt7forwardIRA7_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 800b118:	4604      	mov	r4, r0
 800b11a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b11e:	4618      	mov	r0, r3
 800b120:	f01a feed 	bl	8025efe <_ZNSaIcEC1Ev>
 800b124:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800b128:	f107 0314 	add.w	r3, r7, #20
 800b12c:	4621      	mov	r1, r4
 800b12e:	4618      	mov	r0, r3
 800b130:	f7fb faa4 	bl	800667c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f000 fca5 	bl	800ba84 <_ZSt7forwardIP11TIM_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800b13a:	4603      	mov	r3, r0
 800b13c:	681d      	ldr	r5, [r3, #0]
 800b13e:	6838      	ldr	r0, [r7, #0]
 800b140:	f000 fcab 	bl	800ba9a <_ZSt7forwardI9IRQn_TypeEOT_RNSt16remove_referenceIS1_E4typeE>
 800b144:	4603      	mov	r3, r0
 800b146:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b14a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800b14c:	f000 fcb0 	bl	800bab0 <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
 800b150:	4603      	mov	r3, r0
 800b152:	681c      	ldr	r4, [r3, #0]
 800b154:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800b156:	f000 fcb6 	bl	800bac6 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 800b15a:	4603      	mov	r3, r0
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	b2db      	uxtb	r3, r3
 800b160:	f107 0114 	add.w	r1, r7, #20
 800b164:	9301      	str	r3, [sp, #4]
 800b166:	9400      	str	r4, [sp, #0]
 800b168:	4633      	mov	r3, r6
 800b16a:	462a      	mov	r2, r5
 800b16c:	4640      	mov	r0, r8
 800b16e:	f00d f94d 	bl	801840c <_ZN9pruThreadC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP11TIM_TypeDef9IRQn_Typemh>
 800b172:	4641      	mov	r1, r8
 800b174:	68f8      	ldr	r0, [r7, #12]
 800b176:	f000 fcc1 	bl	800bafc <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800b17a:	f107 0314 	add.w	r3, r7, #20
 800b17e:	4618      	mov	r0, r3
 800b180:	f01a ffa7 	bl	80260d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b184:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b188:	4618      	mov	r0, r3
 800b18a:	f01a feb9 	bl	8025f00 <_ZNSaIcED1Ev>
 800b18e:	bf00      	nop
 800b190:	68f8      	ldr	r0, [r7, #12]
 800b192:	3730      	adds	r7, #48	@ 0x30
 800b194:	46bd      	mov	sp, r7
 800b196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b19a <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800b19a:	b580      	push	{r7, lr}
 800b19c:	b082      	sub	sp, #8
 800b19e:	af00      	add	r7, sp, #0
 800b1a0:	6078      	str	r0, [r7, #4]
	return get();
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f7ff fcdf 	bl	800ab66 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EE3getEv>
 800b1a8:	4603      	mov	r3, r0
      }
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	3708      	adds	r7, #8
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bd80      	pop	{r7, pc}

0800b1b2 <_ZNSt10shared_ptrI6ModuleEC1I12CommsHandlervEERKS_IT_E>:
	shared_ptr(const shared_ptr<_Yp>& __r) noexcept
 800b1b2:	b580      	push	{r7, lr}
 800b1b4:	b082      	sub	sp, #8
 800b1b6:	af00      	add	r7, sp, #0
 800b1b8:	6078      	str	r0, [r7, #4]
 800b1ba:	6039      	str	r1, [r7, #0]
        : __shared_ptr<_Tp>(__r) { }
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	683a      	ldr	r2, [r7, #0]
 800b1c0:	4611      	mov	r1, r2
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	f000 fd0c 	bl	800bbe0 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I12CommsHandlervEERKS_IT_LS2_0EE>
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3708      	adds	r7, #8
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}

0800b1d2 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      begin() _GLIBCXX_NOEXCEPT
 800b1d2:	b580      	push	{r7, lr}
 800b1d4:	b084      	sub	sp, #16
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800b1da:	687a      	ldr	r2, [r7, #4]
 800b1dc:	f107 030c 	add.w	r3, r7, #12
 800b1e0:	4611      	mov	r1, r2
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f000 fd12 	bl	800bc0c <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3710      	adds	r7, #16
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}

0800b1f2 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      end() _GLIBCXX_NOEXCEPT
 800b1f2:	b580      	push	{r7, lr}
 800b1f4:	b084      	sub	sp, #16
 800b1f6:	af00      	add	r7, sp, #0
 800b1f8:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	1d1a      	adds	r2, r3, #4
 800b1fe:	f107 030c 	add.w	r3, r7, #12
 800b202:	4611      	mov	r1, r2
 800b204:	4618      	mov	r0, r3
 800b206:	f000 fd01 	bl	800bc0c <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	4618      	mov	r0, r3
 800b20e:	3710      	adds	r7, #16
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}

0800b214 <_ZN9__gnu_cxxneIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800b214:	b590      	push	{r4, r7, lr}
 800b216:	b083      	sub	sp, #12
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
 800b21c:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f000 fd04 	bl	800bc2c <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 800b224:	4603      	mov	r3, r0
 800b226:	681c      	ldr	r4, [r3, #0]
 800b228:	6838      	ldr	r0, [r7, #0]
 800b22a:	f000 fcff 	bl	800bc2c <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 800b22e:	4603      	mov	r3, r0
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	429c      	cmp	r4, r3
 800b234:	bf14      	ite	ne
 800b236:	2301      	movne	r3, #1
 800b238:	2300      	moveq	r3, #0
 800b23a:	b2db      	uxtb	r3, r3
 800b23c:	4618      	mov	r0, r3
 800b23e:	370c      	adds	r7, #12
 800b240:	46bd      	mov	sp, r7
 800b242:	bd90      	pop	{r4, r7, pc}

0800b244 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800b244:	b480      	push	{r7}
 800b246:	b083      	sub	sp, #12
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
	++_M_current;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f103 0208 	add.w	r2, r3, #8
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	601a      	str	r2, [r3, #0]
	return *this;
 800b258:	687b      	ldr	r3, [r7, #4]
      }
 800b25a:	4618      	mov	r0, r3
 800b25c:	370c      	adds	r7, #12
 800b25e:	46bd      	mov	sp, r7
 800b260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b264:	4770      	bx	lr

0800b266 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800b266:	b480      	push	{r7}
 800b268:	b083      	sub	sp, #12
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	4618      	mov	r0, r3
 800b274:	370c      	adds	r7, #12
 800b276:	46bd      	mov	sp, r7
 800b278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27c:	4770      	bx	lr

0800b27e <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>:
      element_type*
      get() const noexcept
      { return _M_ptr; }

      /// Return true if the stored pointer is not null.
      explicit operator bool() const noexcept
 800b27e:	b480      	push	{r7}
 800b280:	b083      	sub	sp, #12
 800b282:	af00      	add	r7, sp, #0
 800b284:	6078      	str	r0, [r7, #4]
      { return _M_ptr != nullptr; }
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	bf14      	ite	ne
 800b28e:	2301      	movne	r3, #1
 800b290:	2300      	moveq	r3, #0
 800b292:	b2db      	uxtb	r3, r3
 800b294:	4618      	mov	r0, r3
 800b296:	370c      	adds	r7, #12
 800b298:	46bd      	mov	sp, r7
 800b29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29e:	4770      	bx	lr

0800b2a0 <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b082      	sub	sp, #8
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
	return _M_get();
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f000 fcca 	bl	800bc42 <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 800b2ae:	4603      	mov	r3, r0
      }
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	3708      	adds	r7, #8
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}

0800b2b8 <_ZNKSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b082      	sub	sp, #8
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
	return get();
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f000 fcca 	bl	800bc5a <_ZNKSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EE3getEv>
 800b2c6:	4603      	mov	r3, r0
      }
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	3708      	adds	r7, #8
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}

0800b2d0 <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>:
  detail::ElementProxy<JsonArray> operator[](T index) const {
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b084      	sub	sp, #16
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	60f8      	str	r0, [r7, #12]
 800b2d8:	60b9      	str	r1, [r7, #8]
 800b2da:	607a      	str	r2, [r7, #4]
    return {*this, size_t(index)};
 800b2dc:	68ba      	ldr	r2, [r7, #8]
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	ca06      	ldmia	r2, {r1, r2}
 800b2e2:	68f8      	ldr	r0, [r7, #12]
 800b2e4:	f000 fcc6 	bl	800bc74 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ES3_j>
  }
 800b2e8:	68f8      	ldr	r0, [r7, #12]
 800b2ea:	3710      	adds	r7, #16
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd80      	pop	{r7, pc}

0800b2f0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEcvT_IPKcLi0EEEv>:
  operator T() const {
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b082      	sub	sp, #8
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
    return as<T>();
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	f000 fd29 	bl	800bd50 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE2asIPKcEET_v>
 800b2fe:	4603      	mov	r3, r0
  }
 800b300:	4618      	mov	r0, r3
 800b302:	3708      	adds	r7, #8
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}

0800b308 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEaSImEERS7_RKT_>:
  MemberProxy& operator=(const T& src) {
 800b308:	b580      	push	{r7, lr}
 800b30a:	b082      	sub	sp, #8
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
 800b310:	6039      	str	r1, [r7, #0]
    this->set(src);
 800b312:	6839      	ldr	r1, [r7, #0]
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f000 fd50 	bl	800bdba <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE3setImEEbRKT_>
    return *this;
 800b31a:	687b      	ldr	r3, [r7, #4]
  }
 800b31c:	4618      	mov	r0, r3
 800b31e:	3708      	adds	r7, #8
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}

0800b324 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEEcvT_INS0_11JsonVariantELi0EEEv>:
  operator T() const {
 800b324:	b580      	push	{r7, lr}
 800b326:	b082      	sub	sp, #8
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
 800b32c:	6039      	str	r1, [r7, #0]
    return as<T>();
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6839      	ldr	r1, [r7, #0]
 800b332:	4618      	mov	r0, r3
 800b334:	f000 fd4f 	bl	800bdd6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE2asINS0_11JsonVariantEEET_v>
 800b338:	bf00      	nop
  }
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	3708      	adds	r7, #8
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}

0800b342 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      __shared_count(const __shared_count& __r) noexcept
 800b342:	b580      	push	{r7, lr}
 800b344:	b082      	sub	sp, #8
 800b346:	af00      	add	r7, sp, #0
 800b348:	6078      	str	r0, [r7, #4]
 800b34a:	6039      	str	r1, [r7, #0]
      : _M_pi(__r._M_pi)
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	681a      	ldr	r2, [r3, #0]
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	601a      	str	r2, [r3, #0]
	if (_M_pi != nullptr)
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d004      	beq.n	800b366 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0x24>
	  _M_pi->_M_add_ref_copy();
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	4618      	mov	r0, r3
 800b362:	f7fe f9d9 	bl	8009718 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>
      }
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	4618      	mov	r0, r3
 800b36a:	3708      	adds	r7, #8
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}

0800b370 <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800b370:	b480      	push	{r7}
 800b372:	b083      	sub	sp, #12
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	4618      	mov	r0, r3
 800b37c:	370c      	adds	r7, #12
 800b37e:	46bd      	mov	sp, r7
 800b380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b384:	4770      	bx	lr

0800b386 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backEOS2_>:
      }

#if __cplusplus >= 201103L
      _GLIBCXX20_CONSTEXPR
      void
      push_back(value_type&& __x)
 800b386:	b580      	push	{r7, lr}
 800b388:	b082      	sub	sp, #8
 800b38a:	af00      	add	r7, sp, #0
 800b38c:	6078      	str	r0, [r7, #4]
 800b38e:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800b390:	6838      	ldr	r0, [r7, #0]
 800b392:	f7ff ffed 	bl	800b370 <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>
 800b396:	4603      	mov	r3, r0
 800b398:	4619      	mov	r1, r3
 800b39a:	6878      	ldr	r0, [r7, #4]
 800b39c:	f000 fd3f 	bl	800be1e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12emplace_backIJS2_EEERS2_DpOT_>
 800b3a0:	bf00      	nop
 800b3a2:	3708      	adds	r7, #8
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}

0800b3a8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_base() noexcept
 800b3a8:	b480      	push	{r7}
 800b3aa:	b083      	sub	sp, #12
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
      { }
 800b3b0:	4a04      	ldr	r2, [pc, #16]	@ (800b3c4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1c>)
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	601a      	str	r2, [r3, #0]
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	370c      	adds	r7, #12
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c2:	4770      	bx	lr
 800b3c4:	080289bc 	.word	0x080289bc

0800b3c8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_base() noexcept
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b082      	sub	sp, #8
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
      { }
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f7ff ffe9 	bl	800b3a8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800b3d6:	210c      	movs	r1, #12
 800b3d8:	6878      	ldr	r0, [r7, #4]
 800b3da:	f01a fd6e 	bl	8025eba <_ZdlPvj>
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3708      	adds	r7, #8
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}

0800b3e8 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE>:
  if (dup)
    setRawString(dup);
}

template <typename TAdaptedString>
inline bool VariantData::setString(TAdaptedString value,
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b086      	sub	sp, #24
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	60f8      	str	r0, [r7, #12]
 800b3f0:	4638      	mov	r0, r7
 800b3f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
                                   ResourceManager* resources) {
  ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first

  if (value.isNull())
 800b3f6:	463b      	mov	r3, r7
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	f7f8 fdc6 	bl	8003f8a <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>
 800b3fe:	4603      	mov	r3, r0
 800b400:	2b00      	cmp	r3, #0
 800b402:	d001      	beq.n	800b408 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x20>
    return false;
 800b404:	2300      	movs	r3, #0
 800b406:	e021      	b.n	800b44c <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x64>

  if (value.isStatic()) {
 800b408:	463b      	mov	r3, r7
 800b40a:	4618      	mov	r0, r3
 800b40c:	f7fe fa14 	bl	8009838 <_ZNK11ArduinoJson8V730HB226detail9RamString8isStaticEv>
 800b410:	4603      	mov	r3, r0
 800b412:	2b00      	cmp	r3, #0
 800b414:	d00a      	beq.n	800b42c <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x44>
    setLinkedString(value.data());
 800b416:	463b      	mov	r3, r7
 800b418:	4618      	mov	r0, r3
 800b41a:	f7f8 fdd3 	bl	8003fc4 <_ZNK11ArduinoJson8V730HB226detail9RamString4dataEv>
 800b41e:	4603      	mov	r3, r0
 800b420:	4619      	mov	r1, r3
 800b422:	68f8      	ldr	r0, [r7, #12]
 800b424:	f7fe fab6 	bl	8009994 <_ZN11ArduinoJson8V730HB226detail11VariantData15setLinkedStringEPKc>
    return true;
 800b428:	2301      	movs	r3, #1
 800b42a:	e00f      	b.n	800b44c <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x64>
  }

  auto dup = resources->saveString(value);
 800b42c:	6a38      	ldr	r0, [r7, #32]
 800b42e:	463b      	mov	r3, r7
 800b430:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b432:	f000 fd27 	bl	800be84 <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_>
 800b436:	6178      	str	r0, [r7, #20]
  if (dup) {
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d005      	beq.n	800b44a <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x62>
    setOwnedString(dup);
 800b43e:	6979      	ldr	r1, [r7, #20]
 800b440:	68f8      	ldr	r0, [r7, #12]
 800b442:	f7f9 f810 	bl	8004466 <_ZN11ArduinoJson8V730HB226detail11VariantData14setOwnedStringEPNS1_10StringNodeE>
    return true;
 800b446:	2301      	movs	r3, #1
 800b448:	e000      	b.n	800b44c <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x64>
  }

  return false;
 800b44a:	2300      	movs	r3, #0
}
 800b44c:	4618      	mov	r0, r3
 800b44e:	3718      	adds	r7, #24
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}

0800b454 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 800b454:	b590      	push	{r4, r7, lr}
 800b456:	b085      	sub	sp, #20
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
 800b45c:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f000 facf 	bl	800ba02 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 800b464:	4603      	mov	r3, r0
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 800b46a:	683c      	ldr	r4, [r7, #0]
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f000 fac8 	bl	800ba02 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 800b472:	4603      	mov	r3, r0
 800b474:	601c      	str	r4, [r3, #0]
	if (__old_p)
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d007      	beq.n	800b48c <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f000 f81e 	bl	800b4be <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE10_M_deleterEv>
 800b482:	4603      	mov	r3, r0
 800b484:	68f9      	ldr	r1, [r7, #12]
 800b486:	4618      	mov	r0, r3
 800b488:	f000 fae0 	bl	800ba4c <_ZNKSt14default_deleteI14CommsInterfaceEclEPS0_>
      }
 800b48c:	bf00      	nop
 800b48e:	3714      	adds	r7, #20
 800b490:	46bd      	mov	sp, r7
 800b492:	bd90      	pop	{r4, r7, pc}

0800b494 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800b494:	b580      	push	{r7, lr}
 800b496:	b084      	sub	sp, #16
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f000 fab0 	bl	800ba02 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800b4a8:	6878      	ldr	r0, [r7, #4]
 800b4aa:	f000 faaa 	bl	800ba02 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	601a      	str	r2, [r3, #0]
	return __p;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
      }
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	3710      	adds	r7, #16
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd80      	pop	{r7, pc}

0800b4be <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800b4be:	b580      	push	{r7, lr}
 800b4c0:	b082      	sub	sp, #8
 800b4c2:	af00      	add	r7, sp, #0
 800b4c4:	6078      	str	r0, [r7, #4]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f000 fd01 	bl	800bed0 <_ZSt3getILj1EJP14CommsInterfaceSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	3708      	adds	r7, #8
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd80      	pop	{r7, pc}

0800b4d8 <_ZSt7forwardISt14default_deleteI14CommsInterfaceEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b4d8:	b480      	push	{r7}
 800b4da:	b083      	sub	sp, #12
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	370c      	adds	r7, #12
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ec:	4770      	bx	lr

0800b4ee <_ZNKSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800b4ee:	b580      	push	{r7, lr}
 800b4f0:	b082      	sub	sp, #8
 800b4f2:	af00      	add	r7, sp, #0
 800b4f4:	6078      	str	r0, [r7, #4]
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f000 fcf5 	bl	800bee8 <_ZSt3getILj0EJP9pruThreadSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800b4fe:	4603      	mov	r3, r0
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	4618      	mov	r0, r3
 800b504:	3708      	adds	r7, #8
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}

0800b50a <_ZNSt5tupleIJP17JsonConfigHandlerSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:

    public:
      template<bool _Dummy = true,
	       _ImplicitDefaultCtor<_Dummy, _T1, _T2> = true>
	constexpr
	tuple()
 800b50a:	b580      	push	{r7, lr}
 800b50c:	b082      	sub	sp, #8
 800b50e:	af00      	add	r7, sp, #0
 800b510:	6078      	str	r0, [r7, #4]
	noexcept(__nothrow_default_constructible())
	: _Inherited() { }
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	4618      	mov	r0, r3
 800b516:	f000 fcf4 	bl	800bf02 <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEEC1Ev>
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	4618      	mov	r0, r3
 800b51e:	3708      	adds	r7, #8
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}

0800b524 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800b524:	b580      	push	{r7, lr}
 800b526:	b082      	sub	sp, #8
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	4618      	mov	r0, r3
 800b530:	f000 fcf7 	bl	800bf22 <_ZSt3getILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800b534:	4603      	mov	r3, r0
 800b536:	4618      	mov	r0, r3
 800b538:	3708      	adds	r7, #8
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}

0800b53e <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800b53e:	b580      	push	{r7, lr}
 800b540:	b082      	sub	sp, #8
 800b542:	af00      	add	r7, sp, #0
 800b544:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	4618      	mov	r0, r3
 800b54a:	f000 f959 	bl	800b800 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE10_M_deleterEv>
 800b54e:	4603      	mov	r3, r0
 800b550:	4618      	mov	r0, r3
 800b552:	3708      	adds	r7, #8
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}

0800b558 <_ZSt4moveIRP17JsonConfigHandlerEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800b558:	b480      	push	{r7}
 800b55a:	b083      	sub	sp, #12
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	4618      	mov	r0, r3
 800b564:	370c      	adds	r7, #12
 800b566:	46bd      	mov	sp, r7
 800b568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56c:	4770      	bx	lr

0800b56e <_ZN17JsonConfigHandlerD1Ev>:
#include "../lib/ArduinoJson7/ArduinoJson.h"
#include "fatfs.h"

class Remora; //forward declaration

class JsonConfigHandler {
 800b56e:	b580      	push	{r7, lr}
 800b570:	b082      	sub	sp, #8
 800b572:	af00      	add	r7, sp, #0
 800b574:	6078      	str	r0, [r7, #4]
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	3320      	adds	r3, #32
 800b57a:	4618      	mov	r0, r3
 800b57c:	f7fe faa5 	bl	8009aca <_ZN11ArduinoJson8V730HB2212JsonDocumentD1Ev>
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	3304      	adds	r3, #4
 800b584:	4618      	mov	r0, r3
 800b586:	f01a fda4 	bl	80260d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	4618      	mov	r0, r3
 800b58e:	3708      	adds	r7, #8
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}

0800b594 <_ZNKSt14default_deleteI17JsonConfigHandlerEclEPS0_>:
      operator()(_Tp* __ptr) const
 800b594:	b590      	push	{r4, r7, lr}
 800b596:	b083      	sub	sp, #12
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
 800b59c:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800b59e:	683c      	ldr	r4, [r7, #0]
 800b5a0:	2c00      	cmp	r4, #0
 800b5a2:	d006      	beq.n	800b5b2 <_ZNKSt14default_deleteI17JsonConfigHandlerEclEPS0_+0x1e>
 800b5a4:	4620      	mov	r0, r4
 800b5a6:	f7ff ffe2 	bl	800b56e <_ZN17JsonConfigHandlerD1Ev>
 800b5aa:	216c      	movs	r1, #108	@ 0x6c
 800b5ac:	4620      	mov	r0, r4
 800b5ae:	f01a fc84 	bl	8025eba <_ZdlPvj>
      }
 800b5b2:	bf00      	nop
 800b5b4:	370c      	adds	r7, #12
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd90      	pop	{r4, r7, pc}

0800b5ba <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_ptr() noexcept
 800b5ba:	b580      	push	{r7, lr}
 800b5bc:	b082      	sub	sp, #8
 800b5be:	af00      	add	r7, sp, #0
 800b5c0:	6078      	str	r0, [r7, #4]
      : _M_ptr(0), _M_refcount()
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	601a      	str	r2, [r3, #0]
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	3304      	adds	r3, #4
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	f000 fcb5 	bl	800bf3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
      { }
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	3708      	adds	r7, #8
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}

0800b5dc <_ZNSt5tupleIJP9pruThreadSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b082      	sub	sp, #8
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	f000 fcb6 	bl	800bf58 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEEC1Ev>
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	3708      	adds	r7, #8
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}

0800b5f6 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800b5f6:	b580      	push	{r7, lr}
 800b5f8:	b082      	sub	sp, #8
 800b5fa:	af00      	add	r7, sp, #0
 800b5fc:	6078      	str	r0, [r7, #4]
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	4618      	mov	r0, r3
 800b602:	f000 fcb9 	bl	800bf78 <_ZSt3getILj0EJP9pruThreadSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800b606:	4603      	mov	r3, r0
 800b608:	4618      	mov	r0, r3
 800b60a:	3708      	adds	r7, #8
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}

0800b610 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800b610:	b580      	push	{r7, lr}
 800b612:	b082      	sub	sp, #8
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	4618      	mov	r0, r3
 800b61c:	f000 fab2 	bl	800bb84 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>
 800b620:	4603      	mov	r3, r0
 800b622:	4618      	mov	r0, r3
 800b624:	3708      	adds	r7, #8
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}

0800b62a <_ZSt4moveIRP9pruThreadEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800b62a:	b480      	push	{r7}
 800b62c:	b083      	sub	sp, #12
 800b62e:	af00      	add	r7, sp, #0
 800b630:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	4618      	mov	r0, r3
 800b636:	370c      	adds	r7, #12
 800b638:	46bd      	mov	sp, r7
 800b63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63e:	4770      	bx	lr

0800b640 <_ZN9pruThreadD1Ev>:

using namespace std;

class Module;

class pruThread
 800b640:	b580      	push	{r7, lr}
 800b642:	b082      	sub	sp, #8
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	3338      	adds	r3, #56	@ 0x38
 800b64c:	4618      	mov	r0, r3
 800b64e:	f7ff fb71 	bl	800ad34 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EED1Ev>
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	332c      	adds	r3, #44	@ 0x2c
 800b656:	4618      	mov	r0, r3
 800b658:	f7ff fb6c 	bl	800ad34 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EED1Ev>
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	4618      	mov	r0, r3
 800b660:	f01a fd37 	bl	80260d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	4618      	mov	r0, r3
 800b668:	3708      	adds	r7, #8
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd80      	pop	{r7, pc}

0800b66e <_ZNKSt14default_deleteI9pruThreadEclEPS0_>:
      operator()(_Tp* __ptr) const
 800b66e:	b590      	push	{r4, r7, lr}
 800b670:	b083      	sub	sp, #12
 800b672:	af00      	add	r7, sp, #0
 800b674:	6078      	str	r0, [r7, #4]
 800b676:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800b678:	683c      	ldr	r4, [r7, #0]
 800b67a:	2c00      	cmp	r4, #0
 800b67c:	d006      	beq.n	800b68c <_ZNKSt14default_deleteI9pruThreadEclEPS0_+0x1e>
 800b67e:	4620      	mov	r0, r4
 800b680:	f7ff ffde 	bl	800b640 <_ZN9pruThreadD1Ev>
 800b684:	2144      	movs	r1, #68	@ 0x44
 800b686:	4620      	mov	r0, r4
 800b688:	f01a fc17 	bl	8025eba <_ZdlPvj>
      }
 800b68c:	bf00      	nop
 800b68e:	370c      	adds	r7, #12
 800b690:	46bd      	mov	sp, r7
 800b692:	bd90      	pop	{r4, r7, pc}

0800b694 <_ZNSaISt10shared_ptrI6ModuleEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800b694:	b580      	push	{r7, lr}
 800b696:	b082      	sub	sp, #8
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f000 fc78 	bl	800bf92 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEEC1Ev>
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	3708      	adds	r7, #8
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}

0800b6ac <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800b6ac:	b480      	push	{r7}
 800b6ae:	b083      	sub	sp, #12
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	601a      	str	r2, [r3, #0]
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2200      	movs	r2, #0
 800b6be:	605a      	str	r2, [r3, #4]
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	609a      	str	r2, [r3, #8]
	{ }
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	370c      	adds	r7, #12
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d2:	4770      	bx	lr

0800b6d4 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800b6d4:	b480      	push	{r7}
 800b6d6:	b083      	sub	sp, #12
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	4618      	mov	r0, r3
 800b6e0:	370c      	adds	r7, #12
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e8:	4770      	bx	lr

0800b6ea <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE13_M_deallocateEPS2_j>:
      _M_deallocate(pointer __p, size_t __n)
 800b6ea:	b580      	push	{r7, lr}
 800b6ec:	b084      	sub	sp, #16
 800b6ee:	af00      	add	r7, sp, #0
 800b6f0:	60f8      	str	r0, [r7, #12]
 800b6f2:	60b9      	str	r1, [r7, #8]
 800b6f4:	607a      	str	r2, [r7, #4]
	if (__p)
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d005      	beq.n	800b708 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE13_M_deallocateEPS2_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	687a      	ldr	r2, [r7, #4]
 800b700:	68b9      	ldr	r1, [r7, #8]
 800b702:	4618      	mov	r0, r3
 800b704:	f000 fc50 	bl	800bfa8 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE10deallocateERS3_PS2_j>
      }
 800b708:	bf00      	nop
 800b70a:	3710      	adds	r7, #16
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}

0800b710 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800b710:	b480      	push	{r7}
 800b712:	b083      	sub	sp, #12
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	4618      	mov	r0, r3
 800b71c:	370c      	adds	r7, #12
 800b71e:	46bd      	mov	sp, r7
 800b720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b724:	4770      	bx	lr

0800b726 <_ZSt8_DestroyIPSt10shared_ptrI6ModuleES2_EvT_S4_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800b726:	b580      	push	{r7, lr}
 800b728:	b084      	sub	sp, #16
 800b72a:	af00      	add	r7, sp, #0
 800b72c:	60f8      	str	r0, [r7, #12]
 800b72e:	60b9      	str	r1, [r7, #8]
 800b730:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 800b732:	68b9      	ldr	r1, [r7, #8]
 800b734:	68f8      	ldr	r0, [r7, #12]
 800b736:	f000 fc46 	bl	800bfc6 <_ZSt8_DestroyIPSt10shared_ptrI6ModuleEEvT_S4_>
    }
 800b73a:	bf00      	nop
 800b73c:	3710      	adds	r7, #16
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}

0800b742 <_ZSt7forwardIP6RemoraEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b742:	b480      	push	{r7}
 800b744:	b083      	sub	sp, #12
 800b746:	af00      	add	r7, sp, #0
 800b748:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	4618      	mov	r0, r3
 800b74e:	370c      	adds	r7, #12
 800b750:	46bd      	mov	sp, r7
 800b752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b756:	4770      	bx	lr

0800b758 <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800b758:	b580      	push	{r7, lr}
 800b75a:	b082      	sub	sp, #8
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
 800b760:	6039      	str	r1, [r7, #0]
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	683a      	ldr	r2, [r7, #0]
 800b766:	4611      	mov	r1, r2
 800b768:	4618      	mov	r0, r3
 800b76a:	f000 fc39 	bl	800bfe0 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEC1EPS0_>
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	4618      	mov	r0, r3
 800b772:	3708      	adds	r7, #8
 800b774:	46bd      	mov	sp, r7
 800b776:	bd80      	pop	{r7, pc}

0800b778 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800b778:	b580      	push	{r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
 800b780:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6839      	ldr	r1, [r7, #0]
 800b786:	4618      	mov	r0, r3
 800b788:	f7ff ffe6 	bl	800b758 <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	4618      	mov	r0, r3
 800b790:	3708      	adds	r7, #8
 800b792:	46bd      	mov	sp, r7
 800b794:	bd80      	pop	{r7, pc}

0800b796 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 800b796:	b590      	push	{r4, r7, lr}
 800b798:	b085      	sub	sp, #20
 800b79a:	af00      	add	r7, sp, #0
 800b79c:	6078      	str	r0, [r7, #4]
 800b79e:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f7ff febf 	bl	800b524 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 800b7ac:	683c      	ldr	r4, [r7, #0]
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f7ff feb8 	bl	800b524 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	601c      	str	r4, [r3, #0]
	if (__old_p)
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d007      	beq.n	800b7ce <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f000 f81e 	bl	800b800 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE10_M_deleterEv>
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	68f9      	ldr	r1, [r7, #12]
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	f7ff fee3 	bl	800b594 <_ZNKSt14default_deleteI17JsonConfigHandlerEclEPS0_>
      }
 800b7ce:	bf00      	nop
 800b7d0:	3714      	adds	r7, #20
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd90      	pop	{r4, r7, pc}

0800b7d6 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800b7d6:	b580      	push	{r7, lr}
 800b7d8:	b084      	sub	sp, #16
 800b7da:	af00      	add	r7, sp, #0
 800b7dc:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f7ff fea0 	bl	800b524 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	f7ff fe9a 	bl	800b524 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	601a      	str	r2, [r3, #0]
	return __p;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
      }
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	3710      	adds	r7, #16
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bd80      	pop	{r7, pc}

0800b800 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800b800:	b580      	push	{r7, lr}
 800b802:	b082      	sub	sp, #8
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	4618      	mov	r0, r3
 800b80c:	f000 fbfc 	bl	800c008 <_ZSt3getILj1EJP17JsonConfigHandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800b810:	4603      	mov	r3, r0
 800b812:	4618      	mov	r0, r3
 800b814:	3708      	adds	r7, #8
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}

0800b81a <_ZSt7forwardISt14default_deleteI17JsonConfigHandlerEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b81a:	b480      	push	{r7}
 800b81c:	b083      	sub	sp, #12
 800b81e:	af00      	add	r7, sp, #0
 800b820:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	4618      	mov	r0, r3
 800b826:	370c      	adds	r7, #12
 800b828:	46bd      	mov	sp, r7
 800b82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82e:	4770      	bx	lr

0800b830 <_ZSt7forwardIRPV8rxData_tEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b830:	b480      	push	{r7}
 800b832:	b083      	sub	sp, #12
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	4618      	mov	r0, r3
 800b83c:	370c      	adds	r7, #12
 800b83e:	46bd      	mov	sp, r7
 800b840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b844:	4770      	bx	lr

0800b846 <_ZSt7forwardIRPV8txData_tEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b846:	b480      	push	{r7}
 800b848:	b083      	sub	sp, #12
 800b84a:	af00      	add	r7, sp, #0
 800b84c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	4618      	mov	r0, r3
 800b852:	370c      	adds	r7, #12
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr

0800b85c <_ZSt7forwardIP11SPI_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b85c:	b480      	push	{r7}
 800b85e:	b083      	sub	sp, #12
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	4618      	mov	r0, r3
 800b868:	370c      	adds	r7, #12
 800b86a:	46bd      	mov	sp, r7
 800b86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b870:	4770      	bx	lr

0800b872 <_ZNSt15__uniq_ptr_dataI8SPICommsSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800b872:	b580      	push	{r7, lr}
 800b874:	b082      	sub	sp, #8
 800b876:	af00      	add	r7, sp, #0
 800b878:	6078      	str	r0, [r7, #4]
 800b87a:	6039      	str	r1, [r7, #0]
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	683a      	ldr	r2, [r7, #0]
 800b880:	4611      	mov	r1, r2
 800b882:	4618      	mov	r0, r3
 800b884:	f000 fbcc 	bl	800c020 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EEC1EPS0_>
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	4618      	mov	r0, r3
 800b88c:	3708      	adds	r7, #8
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}

0800b892 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800b892:	b580      	push	{r7, lr}
 800b894:	b082      	sub	sp, #8
 800b896:	af00      	add	r7, sp, #0
 800b898:	6078      	str	r0, [r7, #4]
 800b89a:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	6839      	ldr	r1, [r7, #0]
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	f7ff ffe6 	bl	800b872 <_ZNSt15__uniq_ptr_dataI8SPICommsSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	3708      	adds	r7, #8
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd80      	pop	{r7, pc}

0800b8b0 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b082      	sub	sp, #8
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f000 fbc4 	bl	800c048 <_ZSt3getILj0EJP8SPICommsSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	3708      	adds	r7, #8
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}

0800b8ca <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800b8ca:	b580      	push	{r7, lr}
 800b8cc:	b082      	sub	sp, #8
 800b8ce:	af00      	add	r7, sp, #0
 800b8d0:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f000 fbc4 	bl	800c062 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE10_M_deleterEv>
 800b8da:	4603      	mov	r3, r0
 800b8dc:	4618      	mov	r0, r3
 800b8de:	3708      	adds	r7, #8
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}

0800b8e4 <_ZSt4moveIRP8SPICommsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800b8e4:	b480      	push	{r7}
 800b8e6:	b083      	sub	sp, #12
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	370c      	adds	r7, #12
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f8:	4770      	bx	lr

0800b8fa <_ZNKSt14default_deleteI8SPICommsEclEPS0_>:
      operator()(_Tp* __ptr) const
 800b8fa:	b580      	push	{r7, lr}
 800b8fc:	b082      	sub	sp, #8
 800b8fe:	af00      	add	r7, sp, #0
 800b900:	6078      	str	r0, [r7, #4]
 800b902:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d004      	beq.n	800b914 <_ZNKSt14default_deleteI8SPICommsEclEPS0_+0x1a>
 800b90a:	681a      	ldr	r2, [r3, #0]
 800b90c:	3204      	adds	r2, #4
 800b90e:	6812      	ldr	r2, [r2, #0]
 800b910:	4618      	mov	r0, r3
 800b912:	4790      	blx	r2
      }
 800b914:	bf00      	nop
 800b916:	3708      	adds	r7, #8
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd80      	pop	{r7, pc}

0800b91c <_ZNSt10shared_ptrI12CommsHandlerEC1ISaIvEJEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b082      	sub	sp, #8
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
 800b924:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6839      	ldr	r1, [r7, #0]
 800b92a:	4618      	mov	r0, r3
 800b92c:	f000 fba6 	bl	800c07c <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
	{ }
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	4618      	mov	r0, r3
 800b934:	3708      	adds	r7, #8
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}

0800b93a <_ZSt4moveIRSt10shared_ptrI12CommsHandlerEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800b93a:	b480      	push	{r7}
 800b93c:	b083      	sub	sp, #12
 800b93e:	af00      	add	r7, sp, #0
 800b940:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	4618      	mov	r0, r3
 800b946:	370c      	adds	r7, #12
 800b948:	46bd      	mov	sp, r7
 800b94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94e:	4770      	bx	lr

0800b950 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>:
      operator=(__shared_ptr&& __r) noexcept
 800b950:	b580      	push	{r7, lr}
 800b952:	b084      	sub	sp, #16
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
 800b958:	6039      	str	r1, [r7, #0]
	__shared_ptr(std::move(__r)).swap(*this);
 800b95a:	6838      	ldr	r0, [r7, #0]
 800b95c:	f000 fba8 	bl	800c0b0 <_ZSt4moveIRSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>
 800b960:	4602      	mov	r2, r0
 800b962:	f107 0308 	add.w	r3, r7, #8
 800b966:	4611      	mov	r1, r2
 800b968:	4618      	mov	r0, r3
 800b96a:	f000 fbac 	bl	800c0c6 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>
 800b96e:	f107 0308 	add.w	r3, r7, #8
 800b972:	6879      	ldr	r1, [r7, #4]
 800b974:	4618      	mov	r0, r3
 800b976:	f000 fbc4 	bl	800c102 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>
 800b97a:	f107 0308 	add.w	r3, r7, #8
 800b97e:	4618      	mov	r0, r3
 800b980:	f7fe fa38 	bl	8009df4 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EED1Ev>
	return *this;
 800b984:	687b      	ldr	r3, [r7, #4]
      }
 800b986:	4618      	mov	r0, r3
 800b988:	3710      	adds	r7, #16
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}

0800b98e <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 800b98e:	b580      	push	{r7, lr}
 800b990:	b082      	sub	sp, #8
 800b992:	af00      	add	r7, sp, #0
 800b994:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f000 fbca 	bl	800c130 <_ZNKSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 800b99c:	4603      	mov	r3, r0
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3708      	adds	r7, #8
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}

0800b9a6 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 800b9a6:	b580      	push	{r7, lr}
 800b9a8:	b082      	sub	sp, #8
 800b9aa:	af00      	add	r7, sp, #0
 800b9ac:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f000 fbc9 	bl	800c148 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE7releaseEv>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	3708      	adds	r7, #8
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}

0800b9c0 <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b9c0:	b480      	push	{r7}
 800b9c2:	b083      	sub	sp, #12
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	370c      	adds	r7, #12
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d4:	4770      	bx	lr

0800b9d6 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEC1IS1_I8SPICommsEEEPS0_OT_>:
	__uniq_ptr_impl(pointer __p, _Del&& __d)
 800b9d6:	b590      	push	{r4, r7, lr}
 800b9d8:	b085      	sub	sp, #20
 800b9da:	af00      	add	r7, sp, #0
 800b9dc:	60f8      	str	r0, [r7, #12]
 800b9de:	60b9      	str	r1, [r7, #8]
 800b9e0:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800b9e2:	68fc      	ldr	r4, [r7, #12]
 800b9e4:	6878      	ldr	r0, [r7, #4]
 800b9e6:	f7ff ffeb 	bl	800b9c0 <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800b9ea:	4602      	mov	r2, r0
 800b9ec:	f107 0308 	add.w	r3, r7, #8
 800b9f0:	4619      	mov	r1, r3
 800b9f2:	4620      	mov	r0, r4
 800b9f4:	f000 fbbd 	bl	800c172 <_ZNSt5tupleIJP14CommsInterfaceSt14default_deleteIS0_EEEC1IRS1_S2_I8SPICommsELb1EEEOT_OT0_>
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	3714      	adds	r7, #20
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	bd90      	pop	{r4, r7, pc}

0800ba02 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800ba02:	b580      	push	{r7, lr}
 800ba04:	b082      	sub	sp, #8
 800ba06:	af00      	add	r7, sp, #0
 800ba08:	6078      	str	r0, [r7, #4]
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f000 fbc9 	bl	800c1a4 <_ZSt3getILj0EJP14CommsInterfaceSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800ba12:	4603      	mov	r3, r0
 800ba14:	4618      	mov	r0, r3
 800ba16:	3708      	adds	r7, #8
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}

0800ba1c <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b082      	sub	sp, #8
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	4618      	mov	r0, r3
 800ba28:	f7ff fd49 	bl	800b4be <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE10_M_deleterEv>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3708      	adds	r7, #8
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}

0800ba36 <_ZSt4moveIRP14CommsInterfaceEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800ba36:	b480      	push	{r7}
 800ba38:	b083      	sub	sp, #12
 800ba3a:	af00      	add	r7, sp, #0
 800ba3c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	4618      	mov	r0, r3
 800ba42:	370c      	adds	r7, #12
 800ba44:	46bd      	mov	sp, r7
 800ba46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4a:	4770      	bx	lr

0800ba4c <_ZNKSt14default_deleteI14CommsInterfaceEclEPS0_>:
      operator()(_Tp* __ptr) const
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b082      	sub	sp, #8
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
 800ba54:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d004      	beq.n	800ba66 <_ZNKSt14default_deleteI14CommsInterfaceEclEPS0_+0x1a>
 800ba5c:	681a      	ldr	r2, [r3, #0]
 800ba5e:	3204      	adds	r2, #4
 800ba60:	6812      	ldr	r2, [r2, #0]
 800ba62:	4618      	mov	r0, r3
 800ba64:	4790      	blx	r2
      }
 800ba66:	bf00      	nop
 800ba68:	3708      	adds	r7, #8
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}

0800ba6e <_ZSt7forwardIRA5_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ba6e:	b480      	push	{r7}
 800ba70:	b083      	sub	sp, #12
 800ba72:	af00      	add	r7, sp, #0
 800ba74:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	4618      	mov	r0, r3
 800ba7a:	370c      	adds	r7, #12
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba82:	4770      	bx	lr

0800ba84 <_ZSt7forwardIP11TIM_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ba84:	b480      	push	{r7}
 800ba86:	b083      	sub	sp, #12
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	4618      	mov	r0, r3
 800ba90:	370c      	adds	r7, #12
 800ba92:	46bd      	mov	sp, r7
 800ba94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba98:	4770      	bx	lr

0800ba9a <_ZSt7forwardI9IRQn_TypeEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ba9a:	b480      	push	{r7}
 800ba9c:	b083      	sub	sp, #12
 800ba9e:	af00      	add	r7, sp, #0
 800baa0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	4618      	mov	r0, r3
 800baa6:	370c      	adds	r7, #12
 800baa8:	46bd      	mov	sp, r7
 800baaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baae:	4770      	bx	lr

0800bab0 <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800bab0:	b480      	push	{r7}
 800bab2:	b083      	sub	sp, #12
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	4618      	mov	r0, r3
 800babc:	370c      	adds	r7, #12
 800babe:	46bd      	mov	sp, r7
 800bac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac4:	4770      	bx	lr

0800bac6 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800bac6:	b480      	push	{r7}
 800bac8:	b083      	sub	sp, #12
 800baca:	af00      	add	r7, sp, #0
 800bacc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	4618      	mov	r0, r3
 800bad2:	370c      	adds	r7, #12
 800bad4:	46bd      	mov	sp, r7
 800bad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bada:	4770      	bx	lr

0800badc <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800badc:	b580      	push	{r7, lr}
 800bade:	b082      	sub	sp, #8
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
 800bae4:	6039      	str	r1, [r7, #0]
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	683a      	ldr	r2, [r7, #0]
 800baea:	4611      	mov	r1, r2
 800baec:	4618      	mov	r0, r3
 800baee:	f000 fb66 	bl	800c1be <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEC1EPS0_>
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	4618      	mov	r0, r3
 800baf6:	3708      	adds	r7, #8
 800baf8:	46bd      	mov	sp, r7
 800bafa:	bd80      	pop	{r7, pc}

0800bafc <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b082      	sub	sp, #8
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
 800bb04:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6839      	ldr	r1, [r7, #0]
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f7ff ffe6 	bl	800badc <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	4618      	mov	r0, r3
 800bb14:	3708      	adds	r7, #8
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}

0800bb1a <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 800bb1a:	b590      	push	{r4, r7, lr}
 800bb1c:	b085      	sub	sp, #20
 800bb1e:	af00      	add	r7, sp, #0
 800bb20:	6078      	str	r0, [r7, #4]
 800bb22:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	f7ff fd66 	bl	800b5f6 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 800bb30:	683c      	ldr	r4, [r7, #0]
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	f7ff fd5f 	bl	800b5f6 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	601c      	str	r4, [r3, #0]
	if (__old_p)
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d007      	beq.n	800bb52 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f000 f81e 	bl	800bb84 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	68f9      	ldr	r1, [r7, #12]
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	f7ff fd8e 	bl	800b66e <_ZNKSt14default_deleteI9pruThreadEclEPS0_>
      }
 800bb52:	bf00      	nop
 800bb54:	3714      	adds	r7, #20
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd90      	pop	{r4, r7, pc}

0800bb5a <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800bb5a:	b580      	push	{r7, lr}
 800bb5c:	b084      	sub	sp, #16
 800bb5e:	af00      	add	r7, sp, #0
 800bb60:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	f7ff fd47 	bl	800b5f6 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	f7ff fd41 	bl	800b5f6 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800bb74:	4603      	mov	r3, r0
 800bb76:	2200      	movs	r2, #0
 800bb78:	601a      	str	r2, [r3, #0]
	return __p;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
      }
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3710      	adds	r7, #16
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}

0800bb84 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b082      	sub	sp, #8
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f000 fb29 	bl	800c1e6 <_ZSt3getILj1EJP9pruThreadSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800bb94:	4603      	mov	r3, r0
 800bb96:	4618      	mov	r0, r3
 800bb98:	3708      	adds	r7, #8
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	bd80      	pop	{r7, pc}

0800bb9e <_ZSt7forwardISt14default_deleteI9pruThreadEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800bb9e:	b480      	push	{r7}
 800bba0:	b083      	sub	sp, #12
 800bba2:	af00      	add	r7, sp, #0
 800bba4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	4618      	mov	r0, r3
 800bbaa:	370c      	adds	r7, #12
 800bbac:	46bd      	mov	sp, r7
 800bbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb2:	4770      	bx	lr

0800bbb4 <_ZSt7forwardIRA6_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800bbb4:	b480      	push	{r7}
 800bbb6:	b083      	sub	sp, #12
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	370c      	adds	r7, #12
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc8:	4770      	bx	lr

0800bbca <_ZSt7forwardIRA7_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800bbca:	b480      	push	{r7}
 800bbcc:	b083      	sub	sp, #12
 800bbce:	af00      	add	r7, sp, #0
 800bbd0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	370c      	adds	r7, #12
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbde:	4770      	bx	lr

0800bbe0 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I12CommsHandlervEERKS_IT_LS2_0EE>:
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b082      	sub	sp, #8
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
 800bbe8:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	681a      	ldr	r2, [r3, #0]
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	601a      	str	r2, [r3, #0]
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	1d1a      	adds	r2, r3, #4
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	3304      	adds	r3, #4
 800bbfa:	4619      	mov	r1, r3
 800bbfc:	4610      	mov	r0, r2
 800bbfe:	f7ff fba0 	bl	800b342 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	{ }
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	4618      	mov	r0, r3
 800bc06:	3708      	adds	r7, #8
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	bd80      	pop	{r7, pc}

0800bc0c <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800bc0c:	b480      	push	{r7}
 800bc0e:	b083      	sub	sp, #12
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
 800bc14:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	681a      	ldr	r2, [r3, #0]
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	601a      	str	r2, [r3, #0]
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	4618      	mov	r0, r3
 800bc22:	370c      	adds	r7, #12
 800bc24:	46bd      	mov	sp, r7
 800bc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2a:	4770      	bx	lr

0800bc2c <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800bc2c:	b480      	push	{r7}
 800bc2e:	b083      	sub	sp, #12
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	4618      	mov	r0, r3
 800bc38:	370c      	adds	r7, #12
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc40:	4770      	bx	lr

0800bc42 <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 800bc42:	b580      	push	{r7, lr}
 800bc44:	b082      	sub	sp, #8
 800bc46:	af00      	add	r7, sp, #0
 800bc48:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f000 fad7 	bl	800c1fe <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 800bc50:	4603      	mov	r3, r0
 800bc52:	4618      	mov	r0, r3
 800bc54:	3708      	adds	r7, #8
 800bc56:	46bd      	mov	sp, r7
 800bc58:	bd80      	pop	{r7, pc}

0800bc5a <_ZNKSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800bc5a:	b580      	push	{r7, lr}
 800bc5c:	b082      	sub	sp, #8
 800bc5e:	af00      	add	r7, sp, #0
 800bc60:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	4618      	mov	r0, r3
 800bc66:	f000 fad6 	bl	800c216 <_ZNKSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	3708      	adds	r7, #8
 800bc70:	46bd      	mov	sp, r7
 800bc72:	bd80      	pop	{r7, pc}

0800bc74 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ES3_j>:

  template <typename>
  friend class ElementProxy;

 public:
  ElementProxy(TUpstream upstream, size_t index)
 800bc74:	b480      	push	{r7}
 800bc76:	b085      	sub	sp, #20
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	60f8      	str	r0, [r7, #12]
 800bc7c:	1d38      	adds	r0, r7, #4
 800bc7e:	e880 0006 	stmia.w	r0, {r1, r2}
 800bc82:	603b      	str	r3, [r7, #0]
      : upstream_(upstream), index_(index) {}
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	3304      	adds	r3, #4
 800bc88:	1d3a      	adds	r2, r7, #4
 800bc8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bc8e:	e883 0003 	stmia.w	r3, {r0, r1}
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	683a      	ldr	r2, [r7, #0]
 800bc96:	60da      	str	r2, [r3, #12]
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	3714      	adds	r7, #20
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca4:	4770      	bx	lr

0800bca6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>:
  const TDerived& derived() const {
 800bca6:	b480      	push	{r7}
 800bca8:	b083      	sub	sp, #12
 800bcaa:	af00      	add	r7, sp, #0
 800bcac:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 800bcae:	687b      	ldr	r3, [r7, #4]
  }
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	370c      	adds	r7, #12
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcba:	4770      	bx	lr

0800bcbc <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>:
    return *this;
  }

 private:
  // clang-format off
  ElementProxy(const ElementProxy& src)  // Error here? See https://arduinojson.org/v7/proxy-non-copyable/
 800bcbc:	b480      	push	{r7}
 800bcbe:	b083      	sub	sp, #12
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
 800bcc4:	6039      	str	r1, [r7, #0]
      : upstream_(src.upstream_), index_(src.index_) {}
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	683a      	ldr	r2, [r7, #0]
 800bcca:	3304      	adds	r3, #4
 800bccc:	3204      	adds	r2, #4
 800bcce:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bcd2:	e883 0003 	stmia.w	r3, {r0, r1}
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	68da      	ldr	r2, [r3, #12]
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	60da      	str	r2, [r3, #12]
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	4618      	mov	r0, r3
 800bce2:	370c      	adds	r7, #12
 800bce4:	46bd      	mov	sp, r7
 800bce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcea:	4770      	bx	lr

0800bcec <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>:
  MemberProxy(TUpstream upstream, AdaptedString key)
 800bcec:	b082      	sub	sp, #8
 800bcee:	b580      	push	{r7, lr}
 800bcf0:	b082      	sub	sp, #8
 800bcf2:	af00      	add	r7, sp, #0
 800bcf4:	6078      	str	r0, [r7, #4]
 800bcf6:	6039      	str	r1, [r7, #0]
 800bcf8:	f107 0110 	add.w	r1, r7, #16
 800bcfc:	e881 000c 	stmia.w	r1, {r2, r3}
      : upstream_(upstream), key_(key) {}
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	3304      	adds	r3, #4
 800bd04:	6839      	ldr	r1, [r7, #0]
 800bd06:	4618      	mov	r0, r3
 800bd08:	f7ff ffd8 	bl	800bcbc <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	3314      	adds	r3, #20
 800bd10:	f107 0210 	add.w	r2, r7, #16
 800bd14:	ca07      	ldmia	r2, {r0, r1, r2}
 800bd16:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	3708      	adds	r7, #8
 800bd20:	46bd      	mov	sp, r7
 800bd22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bd26:	b002      	add	sp, #8
 800bd28:	4770      	bx	lr

0800bd2a <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA5_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 800bd2a:	b580      	push	{r7, lr}
 800bd2c:	b082      	sub	sp, #8
 800bd2e:	af00      	add	r7, sp, #0
 800bd30:	6078      	str	r0, [r7, #4]
 800bd32:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800bd34:	6838      	ldr	r0, [r7, #0]
 800bd36:	f000 fa7c 	bl	800c232 <_ZN11ArduinoJson8V730HB226detail7forwardIRA5_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 800bd3a:	4602      	mov	r2, r0
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	4611      	mov	r1, r2
 800bd40:	4618      	mov	r0, r3
 800bd42:	f000 fa81 	bl	800c248 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA5_KcvE5adaptES5_>
 800bd46:	bf00      	nop
}
 800bd48:	6878      	ldr	r0, [r7, #4]
 800bd4a:	3708      	adds	r7, #8
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}

0800bd50 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE2asIPKcEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 800bd50:	b590      	push	{r4, r7, lr}
 800bd52:	b087      	sub	sp, #28
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	617b      	str	r3, [r7, #20]
 800bd5c:	697b      	ldr	r3, [r7, #20]
 800bd5e:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 800bd60:	6938      	ldr	r0, [r7, #16]
 800bd62:	f000 fd2a 	bl	800c7ba <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7getDataEv>
 800bd66:	4604      	mov	r4, r0
 800bd68:	6938      	ldr	r0, [r7, #16]
 800bd6a:	f000 fd36 	bl	800c7da <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>
 800bd6e:	4602      	mov	r2, r0
 800bd70:	f107 0308 	add.w	r3, r7, #8
 800bd74:	4621      	mov	r1, r4
 800bd76:	4618      	mov	r0, r3
 800bd78:	f7f8 fcb7 	bl	80046ea <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 800bd7c:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 800bd7e:	f107 0308 	add.w	r3, r7, #8
 800bd82:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bd86:	f7f9 f9a9 	bl	80050dc <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE>
 800bd8a:	4603      	mov	r3, r0
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	371c      	adds	r7, #28
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bd90      	pop	{r4, r7, pc}

0800bd94 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA11_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b082      	sub	sp, #8
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
 800bd9c:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800bd9e:	6838      	ldr	r0, [r7, #0]
 800bda0:	f000 fa61 	bl	800c266 <_ZN11ArduinoJson8V730HB226detail7forwardIRA11_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 800bda4:	4602      	mov	r2, r0
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	4611      	mov	r1, r2
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f000 fa66 	bl	800c27c <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA11_KcvE5adaptES5_>
 800bdb0:	bf00      	nop
}
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	3708      	adds	r7, #8
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}

0800bdba <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE3setImEEbRKT_>:
  bool set(const T& value) const {
 800bdba:	b580      	push	{r7, lr}
 800bdbc:	b082      	sub	sp, #8
 800bdbe:	af00      	add	r7, sp, #0
 800bdc0:	6078      	str	r0, [r7, #4]
 800bdc2:	6039      	str	r1, [r7, #0]
    return doSet<Converter<TypeForConverter>>(value);
 800bdc4:	6839      	ldr	r1, [r7, #0]
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f000 fa67 	bl	800c29a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE5doSetINS0_9ConverterImvEEmEEbRKT0_>
 800bdcc:	4603      	mov	r3, r0
  }
 800bdce:	4618      	mov	r0, r3
 800bdd0:	3708      	adds	r7, #8
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}

0800bdd6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE2asINS0_11JsonVariantEEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 800bdd6:	b590      	push	{r4, r7, lr}
 800bdd8:	b087      	sub	sp, #28
 800bdda:	af00      	add	r7, sp, #0
 800bddc:	6078      	str	r0, [r7, #4]
 800bdde:	6039      	str	r1, [r7, #0]
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	617b      	str	r3, [r7, #20]
 800bde4:	697b      	ldr	r3, [r7, #20]
 800bde6:	613b      	str	r3, [r7, #16]
  return JsonVariant(getData(), getResourceManager());
 800bde8:	6938      	ldr	r0, [r7, #16]
 800bdea:	f000 ffd3 	bl	800cd94 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7getDataEv>
 800bdee:	4604      	mov	r4, r0
 800bdf0:	6938      	ldr	r0, [r7, #16]
 800bdf2:	f000 ffdf 	bl	800cdb4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE18getResourceManagerEv>
 800bdf6:	4602      	mov	r2, r0
 800bdf8:	f107 0308 	add.w	r3, r7, #8
 800bdfc:	4621      	mov	r1, r4
 800bdfe:	4618      	mov	r0, r3
 800be00:	f7f8 fc9e 	bl	8004740 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
    return getVariant();
 800be04:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	f107 0308 	add.w	r3, r7, #8
 800be0c:	e893 0006 	ldmia.w	r3, {r1, r2}
 800be10:	f7fd fdf6 	bl	8009a00 <_ZN11ArduinoJson8V730HB229ConverterINS0_11JsonVariantEvE8fromJsonES2_>
 800be14:	bf00      	nop
}
 800be16:	6878      	ldr	r0, [r7, #4]
 800be18:	371c      	adds	r7, #28
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd90      	pop	{r4, r7, pc}

0800be1e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12emplace_backIJS2_EEERS2_DpOT_>:
      _GLIBCXX20_CONSTEXPR
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 800be1e:	b5b0      	push	{r4, r5, r7, lr}
 800be20:	b082      	sub	sp, #8
 800be22:	af00      	add	r7, sp, #0
 800be24:	6078      	str	r0, [r7, #4]
 800be26:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	685a      	ldr	r2, [r3, #4]
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	689b      	ldr	r3, [r3, #8]
 800be30:	429a      	cmp	r2, r3
 800be32:	d012      	beq.n	800be5a <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12emplace_backIJS2_EEERS2_DpOT_+0x3c>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800be34:	687c      	ldr	r4, [r7, #4]
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	685d      	ldr	r5, [r3, #4]
 800be3a:	6838      	ldr	r0, [r7, #0]
 800be3c:	f000 fa3c 	bl	800c2b8 <_ZSt7forwardISt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS3_E4typeE>
 800be40:	4603      	mov	r3, r0
 800be42:	461a      	mov	r2, r3
 800be44:	4629      	mov	r1, r5
 800be46:	4620      	mov	r0, r4
 800be48:	f000 fa41 	bl	800c2ce <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	685b      	ldr	r3, [r3, #4]
 800be50:	f103 0208 	add.w	r2, r3, #8
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	605a      	str	r2, [r3, #4]
 800be58:	e00c      	b.n	800be74 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12emplace_backIJS2_EEERS2_DpOT_+0x56>
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	f7ff f9c9 	bl	800b1f2 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 800be60:	4604      	mov	r4, r0
 800be62:	6838      	ldr	r0, [r7, #0]
 800be64:	f000 fa28 	bl	800c2b8 <_ZSt7forwardISt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS3_E4typeE>
 800be68:	4603      	mov	r3, r0
 800be6a:	461a      	mov	r2, r3
 800be6c:	4621      	mov	r1, r4
 800be6e:	6878      	ldr	r0, [r7, #4]
 800be70:	f000 fa40 	bl	800c2f4 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
#if __cplusplus > 201402L
	return back();
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	f000 fab9 	bl	800c3ec <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4backEv>
 800be7a:	4603      	mov	r3, r0
#endif
      }
 800be7c:	4618      	mov	r0, r3
 800be7e:	3708      	adds	r7, #8
 800be80:	46bd      	mov	sp, r7
 800be82:	bdb0      	pop	{r4, r5, r7, pc}

0800be84 <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_>:
  StringNode* saveString(TAdaptedString str) {
 800be84:	b580      	push	{r7, lr}
 800be86:	b088      	sub	sp, #32
 800be88:	af02      	add	r7, sp, #8
 800be8a:	60f8      	str	r0, [r7, #12]
 800be8c:	4638      	mov	r0, r7
 800be8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (str.isNull())
 800be92:	463b      	mov	r3, r7
 800be94:	4618      	mov	r0, r3
 800be96:	f7f8 f878 	bl	8003f8a <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>
 800be9a:	4603      	mov	r3, r0
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d001      	beq.n	800bea4 <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_+0x20>
      return 0;
 800bea0:	2300      	movs	r3, #0
 800bea2:	e011      	b.n	800bec8 <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_+0x44>
    auto node = stringPool_.add(str, allocator_);
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	f103 0008 	add.w	r0, r3, #8
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	9300      	str	r3, [sp, #0]
 800beb0:	463b      	mov	r3, r7
 800beb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800beb4:	f000 fab5 	bl	800c422 <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE>
 800beb8:	6178      	str	r0, [r7, #20]
    if (!node)
 800beba:	697b      	ldr	r3, [r7, #20]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d102      	bne.n	800bec6 <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_+0x42>
      overflowed_ = true;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	2201      	movs	r2, #1
 800bec4:	711a      	strb	r2, [r3, #4]
    return node;
 800bec6:	697b      	ldr	r3, [r7, #20]
  }
 800bec8:	4618      	mov	r0, r3
 800beca:	3718      	adds	r7, #24
 800becc:	46bd      	mov	sp, r7
 800bece:	bd80      	pop	{r7, pc}

0800bed0 <_ZSt3getILj1EJP14CommsInterfaceSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b082      	sub	sp, #8
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f000 fae2 	bl	800c4a2 <_ZSt12__get_helperILj1ESt14default_deleteI14CommsInterfaceEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800bede:	4603      	mov	r3, r0
 800bee0:	4618      	mov	r0, r3
 800bee2:	3708      	adds	r7, #8
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}

0800bee8 <_ZSt3getILj0EJP9pruThreadSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 800bee8:	b580      	push	{r7, lr}
 800beea:	b082      	sub	sp, #8
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	4618      	mov	r0, r3
 800bef4:	f000 fae1 	bl	800c4ba <_ZSt12__get_helperILj0EP9pruThreadJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800bef8:	4603      	mov	r3, r0
 800befa:	4618      	mov	r0, r3
 800befc:	3708      	adds	r7, #8
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}

0800bf02 <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800bf02:	b580      	push	{r7, lr}
 800bf04:	b082      	sub	sp, #8
 800bf06:	af00      	add	r7, sp, #0
 800bf08:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	f000 fae1 	bl	800c4d2 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17JsonConfigHandlerEEEC1Ev>
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	4618      	mov	r0, r3
 800bf14:	f000 fae9 	bl	800c4ea <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EEC1Ev>
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	3708      	adds	r7, #8
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}

0800bf22 <_ZSt3getILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800bf22:	b580      	push	{r7, lr}
 800bf24:	b082      	sub	sp, #8
 800bf26:	af00      	add	r7, sp, #0
 800bf28:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	f000 faea 	bl	800c506 <_ZSt12__get_helperILj0EP17JsonConfigHandlerJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800bf32:	4603      	mov	r3, r0
 800bf34:	4618      	mov	r0, r3
 800bf36:	3708      	adds	r7, #8
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}

0800bf3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_count() noexcept : _M_pi(0)
 800bf3c:	b480      	push	{r7}
 800bf3e:	b083      	sub	sp, #12
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2200      	movs	r2, #0
 800bf48:	601a      	str	r2, [r3, #0]
      { }
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	370c      	adds	r7, #12
 800bf50:	46bd      	mov	sp, r7
 800bf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf56:	4770      	bx	lr

0800bf58 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b082      	sub	sp, #8
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800bf60:	6878      	ldr	r0, [r7, #4]
 800bf62:	f000 fadc 	bl	800c51e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9pruThreadEEEC1Ev>
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	4618      	mov	r0, r3
 800bf6a:	f000 fae4 	bl	800c536 <_ZNSt10_Head_baseILj0EP9pruThreadLb0EEC1Ev>
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	4618      	mov	r0, r3
 800bf72:	3708      	adds	r7, #8
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd80      	pop	{r7, pc}

0800bf78 <_ZSt3getILj0EJP9pruThreadSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b082      	sub	sp, #8
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	4618      	mov	r0, r3
 800bf84:	f000 fae5 	bl	800c552 <_ZSt12__get_helperILj0EP9pruThreadJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	3708      	adds	r7, #8
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	bd80      	pop	{r7, pc}

0800bf92 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800bf92:	b480      	push	{r7}
 800bf94:	b083      	sub	sp, #12
 800bf96:	af00      	add	r7, sp, #0
 800bf98:	6078      	str	r0, [r7, #4]
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	370c      	adds	r7, #12
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa6:	4770      	bx	lr

0800bfa8 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b084      	sub	sp, #16
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	60f8      	str	r0, [r7, #12]
 800bfb0:	60b9      	str	r1, [r7, #8]
 800bfb2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800bfb4:	687a      	ldr	r2, [r7, #4]
 800bfb6:	68b9      	ldr	r1, [r7, #8]
 800bfb8:	68f8      	ldr	r0, [r7, #12]
 800bfba:	f000 fad6 	bl	800c56a <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE10deallocateEPS2_j>
 800bfbe:	bf00      	nop
 800bfc0:	3710      	adds	r7, #16
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}

0800bfc6 <_ZSt8_DestroyIPSt10shared_ptrI6ModuleEEvT_S4_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800bfc6:	b580      	push	{r7, lr}
 800bfc8:	b082      	sub	sp, #8
 800bfca:	af00      	add	r7, sp, #0
 800bfcc:	6078      	str	r0, [r7, #4]
 800bfce:	6039      	str	r1, [r7, #0]
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 800bfd0:	6839      	ldr	r1, [r7, #0]
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f000 fad8 	bl	800c588 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrI6ModuleEEEvT_S6_>
    }
 800bfd8:	bf00      	nop
 800bfda:	3708      	adds	r7, #8
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bd80      	pop	{r7, pc}

0800bfe0 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800bfe0:	b590      	push	{r4, r7, lr}
 800bfe2:	b083      	sub	sp, #12
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
 800bfe8:	6039      	str	r1, [r7, #0]
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	4618      	mov	r0, r3
 800bfee:	f7ff fa8c 	bl	800b50a <_ZNSt5tupleIJP17JsonConfigHandlerSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800bff2:	683c      	ldr	r4, [r7, #0]
 800bff4:	6878      	ldr	r0, [r7, #4]
 800bff6:	f7ff fa95 	bl	800b524 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800bffa:	4603      	mov	r3, r0
 800bffc:	601c      	str	r4, [r3, #0]
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	4618      	mov	r0, r3
 800c002:	370c      	adds	r7, #12
 800c004:	46bd      	mov	sp, r7
 800c006:	bd90      	pop	{r4, r7, pc}

0800c008 <_ZSt3getILj1EJP17JsonConfigHandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800c008:	b580      	push	{r7, lr}
 800c00a:	b082      	sub	sp, #8
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f000 fad2 	bl	800c5ba <_ZSt12__get_helperILj1ESt14default_deleteI17JsonConfigHandlerEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800c016:	4603      	mov	r3, r0
 800c018:	4618      	mov	r0, r3
 800c01a:	3708      	adds	r7, #8
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}

0800c020 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EEC1EPS0_>:
 800c020:	b590      	push	{r4, r7, lr}
 800c022:	b083      	sub	sp, #12
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
 800c028:	6039      	str	r1, [r7, #0]
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	4618      	mov	r0, r3
 800c02e:	f000 fad0 	bl	800c5d2 <_ZNSt5tupleIJP8SPICommsSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800c032:	683c      	ldr	r4, [r7, #0]
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f7ff fc3b 	bl	800b8b0 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE6_M_ptrEv>
 800c03a:	4603      	mov	r3, r0
 800c03c:	601c      	str	r4, [r3, #0]
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	4618      	mov	r0, r3
 800c042:	370c      	adds	r7, #12
 800c044:	46bd      	mov	sp, r7
 800c046:	bd90      	pop	{r4, r7, pc}

0800c048 <_ZSt3getILj0EJP8SPICommsSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800c048:	b580      	push	{r7, lr}
 800c04a:	b082      	sub	sp, #8
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	4618      	mov	r0, r3
 800c054:	f000 faca 	bl	800c5ec <_ZSt12__get_helperILj0EP8SPICommsJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800c058:	4603      	mov	r3, r0
 800c05a:	4618      	mov	r0, r3
 800c05c:	3708      	adds	r7, #8
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd80      	pop	{r7, pc}

0800c062 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800c062:	b580      	push	{r7, lr}
 800c064:	b082      	sub	sp, #8
 800c066:	af00      	add	r7, sp, #0
 800c068:	6078      	str	r0, [r7, #4]
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	4618      	mov	r0, r3
 800c06e:	f000 fac9 	bl	800c604 <_ZSt3getILj1EJP8SPICommsSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800c072:	4603      	mov	r3, r0
 800c074:	4618      	mov	r0, r3
 800c076:	3708      	adds	r7, #8
 800c078:	46bd      	mov	sp, r7
 800c07a:	bd80      	pop	{r7, pc}

0800c07c <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
      /// @}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b082      	sub	sp, #8
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
 800c084:	6039      	str	r1, [r7, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2200      	movs	r2, #0
 800c08a:	601a      	str	r2, [r3, #0]
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	3304      	adds	r3, #4
 800c090:	6879      	ldr	r1, [r7, #4]
 800c092:	683a      	ldr	r2, [r7, #0]
 800c094:	4618      	mov	r0, r3
 800c096:	f000 fac1 	bl	800c61c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I12CommsHandlerSaIvEJEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>
	{ _M_enable_shared_from_this_with(_M_ptr); }
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	4619      	mov	r1, r3
 800c0a0:	6878      	ldr	r0, [r7, #4]
 800c0a2:	f000 faff 	bl	800c6a4 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	3708      	adds	r7, #8
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}

0800c0b0 <_ZSt4moveIRSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800c0b0:	b480      	push	{r7}
 800c0b2:	b083      	sub	sp, #12
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	370c      	adds	r7, #12
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c4:	4770      	bx	lr

0800c0c6 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 800c0c6:	b580      	push	{r7, lr}
 800c0c8:	b082      	sub	sp, #8
 800c0ca:	af00      	add	r7, sp, #0
 800c0cc:	6078      	str	r0, [r7, #4]
 800c0ce:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	681a      	ldr	r2, [r3, #0]
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	601a      	str	r2, [r3, #0]
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	3304      	adds	r3, #4
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f7ff ff2d 	bl	800bf3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	1d1a      	adds	r2, r3, #4
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	3304      	adds	r3, #4
 800c0ea:	4619      	mov	r1, r3
 800c0ec:	4610      	mov	r0, r2
 800c0ee:	f000 fae4 	bl	800c6ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = nullptr;
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	601a      	str	r2, [r3, #0]
      }
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	3708      	adds	r7, #8
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}

0800c102 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>:
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
 800c102:	b580      	push	{r7, lr}
 800c104:	b082      	sub	sp, #8
 800c106:	af00      	add	r7, sp, #0
 800c108:	6078      	str	r0, [r7, #4]
 800c10a:	6039      	str	r1, [r7, #0]
	std::swap(_M_ptr, __other._M_ptr);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	683a      	ldr	r2, [r7, #0]
 800c110:	4611      	mov	r1, r2
 800c112:	4618      	mov	r0, r3
 800c114:	f000 fae6 	bl	800c6e4 <_ZSt4swapIP12CommsHandlerENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>
	_M_refcount._M_swap(__other._M_refcount);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	1d1a      	adds	r2, r3, #4
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	3304      	adds	r3, #4
 800c120:	4619      	mov	r1, r3
 800c122:	4610      	mov	r0, r2
 800c124:	f000 fac9 	bl	800c6ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
      }
 800c128:	bf00      	nop
 800c12a:	3708      	adds	r7, #8
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}

0800c130 <_ZNKSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 800c130:	b480      	push	{r7}
 800c132:	b083      	sub	sp, #12
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	4618      	mov	r0, r3
 800c13e:	370c      	adds	r7, #12
 800c140:	46bd      	mov	sp, r7
 800c142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c146:	4770      	bx	lr

0800c148 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800c148:	b580      	push	{r7, lr}
 800c14a:	b084      	sub	sp, #16
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	f7ff fbad 	bl	800b8b0 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE6_M_ptrEv>
 800c156:	4603      	mov	r3, r0
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800c15c:	6878      	ldr	r0, [r7, #4]
 800c15e:	f7ff fba7 	bl	800b8b0 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE6_M_ptrEv>
 800c162:	4603      	mov	r3, r0
 800c164:	2200      	movs	r2, #0
 800c166:	601a      	str	r2, [r3, #0]
	return __p;
 800c168:	68fb      	ldr	r3, [r7, #12]
      }
 800c16a:	4618      	mov	r0, r3
 800c16c:	3710      	adds	r7, #16
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd80      	pop	{r7, pc}

0800c172 <_ZNSt5tupleIJP14CommsInterfaceSt14default_deleteIS0_EEEC1IRS1_S2_I8SPICommsELb1EEEOT_OT0_>:
	tuple(_U1&& __a1, _U2&& __a2)
 800c172:	b5b0      	push	{r4, r5, r7, lr}
 800c174:	b084      	sub	sp, #16
 800c176:	af00      	add	r7, sp, #0
 800c178:	60f8      	str	r0, [r7, #12]
 800c17a:	60b9      	str	r1, [r7, #8]
 800c17c:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800c17e:	68fc      	ldr	r4, [r7, #12]
 800c180:	68b8      	ldr	r0, [r7, #8]
 800c182:	f000 face 	bl	800c722 <_ZSt7forwardIRP14CommsInterfaceEOT_RNSt16remove_referenceIS3_E4typeE>
 800c186:	4605      	mov	r5, r0
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f7ff fc19 	bl	800b9c0 <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800c18e:	4603      	mov	r3, r0
 800c190:	461a      	mov	r2, r3
 800c192:	4629      	mov	r1, r5
 800c194:	4620      	mov	r0, r4
 800c196:	f000 facf 	bl	800c738 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEEC1IRS1_JS2_I8SPICommsEEvEEOT_DpOT0_>
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	4618      	mov	r0, r3
 800c19e:	3710      	adds	r7, #16
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bdb0      	pop	{r4, r5, r7, pc}

0800c1a4 <_ZSt3getILj0EJP14CommsInterfaceSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b082      	sub	sp, #8
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f000 fade 	bl	800c770 <_ZSt12__get_helperILj0EP14CommsInterfaceJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	3708      	adds	r7, #8
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}

0800c1be <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800c1be:	b590      	push	{r4, r7, lr}
 800c1c0:	b083      	sub	sp, #12
 800c1c2:	af00      	add	r7, sp, #0
 800c1c4:	6078      	str	r0, [r7, #4]
 800c1c6:	6039      	str	r1, [r7, #0]
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	f7ff fa06 	bl	800b5dc <_ZNSt5tupleIJP9pruThreadSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800c1d0:	683c      	ldr	r4, [r7, #0]
 800c1d2:	6878      	ldr	r0, [r7, #4]
 800c1d4:	f7ff fa0f 	bl	800b5f6 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	601c      	str	r4, [r3, #0]
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	4618      	mov	r0, r3
 800c1e0:	370c      	adds	r7, #12
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd90      	pop	{r4, r7, pc}

0800c1e6 <_ZSt3getILj1EJP9pruThreadSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800c1e6:	b580      	push	{r7, lr}
 800c1e8:	b082      	sub	sp, #8
 800c1ea:	af00      	add	r7, sp, #0
 800c1ec:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	f000 faca 	bl	800c788 <_ZSt12__get_helperILj1ESt14default_deleteI9pruThreadEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	3708      	adds	r7, #8
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd80      	pop	{r7, pc}

0800c1fe <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 800c1fe:	b480      	push	{r7}
 800c200:	b083      	sub	sp, #12
 800c202:	af00      	add	r7, sp, #0
 800c204:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	4618      	mov	r0, r3
 800c20c:	370c      	adds	r7, #12
 800c20e:	46bd      	mov	sp, r7
 800c210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c214:	4770      	bx	lr

0800c216 <_ZNKSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800c216:	b580      	push	{r7, lr}
 800c218:	b082      	sub	sp, #8
 800c21a:	af00      	add	r7, sp, #0
 800c21c:	6078      	str	r0, [r7, #4]
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	4618      	mov	r0, r3
 800c222:	f000 fabd 	bl	800c7a0 <_ZSt3getILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800c226:	4603      	mov	r3, r0
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	4618      	mov	r0, r3
 800c22c:	3708      	adds	r7, #8
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}

0800c232 <_ZN11ArduinoJson8V730HB226detail7forwardIRA5_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800c232:	b480      	push	{r7}
 800c234:	b083      	sub	sp, #12
 800c236:	af00      	add	r7, sp, #0
 800c238:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800c23a:	687b      	ldr	r3, [r7, #4]
}
 800c23c:	4618      	mov	r0, r3
 800c23e:	370c      	adds	r7, #12
 800c240:	46bd      	mov	sp, r7
 800c242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c246:	4770      	bx	lr

0800c248 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA5_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 800c248:	b580      	push	{r7, lr}
 800c24a:	b082      	sub	sp, #8
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
 800c250:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800c252:	2301      	movs	r3, #1
 800c254:	2204      	movs	r2, #4
 800c256:	6839      	ldr	r1, [r7, #0]
 800c258:	6878      	ldr	r0, [r7, #4]
 800c25a:	f7f7 fe7f 	bl	8003f5c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	3708      	adds	r7, #8
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}

0800c266 <_ZN11ArduinoJson8V730HB226detail7forwardIRA11_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800c266:	b480      	push	{r7}
 800c268:	b083      	sub	sp, #12
 800c26a:	af00      	add	r7, sp, #0
 800c26c:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800c26e:	687b      	ldr	r3, [r7, #4]
}
 800c270:	4618      	mov	r0, r3
 800c272:	370c      	adds	r7, #12
 800c274:	46bd      	mov	sp, r7
 800c276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27a:	4770      	bx	lr

0800c27c <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA11_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b082      	sub	sp, #8
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
 800c284:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800c286:	2301      	movs	r3, #1
 800c288:	220a      	movs	r2, #10
 800c28a:	6839      	ldr	r1, [r7, #0]
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	f7f7 fe65 	bl	8003f5c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800c292:	6878      	ldr	r0, [r7, #4]
 800c294:	3708      	adds	r7, #8
 800c296:	46bd      	mov	sp, r7
 800c298:	bd80      	pop	{r7, pc}

0800c29a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE5doSetINS0_9ConverterImvEEmEEbRKT0_>:
  }

  template <typename TConverter, typename T>
  bool doSet(const T& value) const {
 800c29a:	b580      	push	{r7, lr}
 800c29c:	b084      	sub	sp, #16
 800c29e:	af00      	add	r7, sp, #0
 800c2a0:	6078      	str	r0, [r7, #4]
 800c2a2:	6039      	str	r1, [r7, #0]
    return doSet<TConverter>(
 800c2a4:	461a      	mov	r2, r3
 800c2a6:	6839      	ldr	r1, [r7, #0]
 800c2a8:	6878      	ldr	r0, [r7, #4]
 800c2aa:	f000 faa6 	bl	800c7fa <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE5doSetINS0_9ConverterImvEEmEEbRKT0_NS1_17integral_constantIbLb1EEE>
 800c2ae:	4603      	mov	r3, r0
        value, is_same<typename function_traits<
                           decltype(&TConverter::toJson)>::return_type,
                       bool>{});
  }
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	3710      	adds	r7, #16
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd80      	pop	{r7, pc}

0800c2b8 <_ZSt7forwardISt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c2b8:	b480      	push	{r7}
 800c2ba:	b083      	sub	sp, #12
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	370c      	adds	r7, #12
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2cc:	4770      	bx	lr

0800c2ce <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800c2ce:	b580      	push	{r7, lr}
 800c2d0:	b084      	sub	sp, #16
 800c2d2:	af00      	add	r7, sp, #0
 800c2d4:	60f8      	str	r0, [r7, #12]
 800c2d6:	60b9      	str	r1, [r7, #8]
 800c2d8:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800c2da:	6878      	ldr	r0, [r7, #4]
 800c2dc:	f7ff ffec 	bl	800c2b8 <_ZSt7forwardISt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS3_E4typeE>
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	461a      	mov	r2, r3
 800c2e4:	68b9      	ldr	r1, [r7, #8]
 800c2e6:	68f8      	ldr	r0, [r7, #12]
 800c2e8:	f000 faa1 	bl	800c82e <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE9constructIS2_JS2_EEEvPT_DpOT0_>
	}
 800c2ec:	bf00      	nop
 800c2ee:	3710      	adds	r7, #16
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	bd80      	pop	{r7, pc}

0800c2f4 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 800c2f4:	b5b0      	push	{r4, r5, r7, lr}
 800c2f6:	b08c      	sub	sp, #48	@ 0x30
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	60f8      	str	r0, [r7, #12]
 800c2fc:	60b9      	str	r1, [r7, #8]
 800c2fe:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800c300:	4a39      	ldr	r2, [pc, #228]	@ (800c3e8 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xf4>)
 800c302:	2101      	movs	r1, #1
 800c304:	68f8      	ldr	r0, [r7, #12]
 800c306:	f000 faaa 	bl	800c85e <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc>
 800c30a:	62f8      	str	r0, [r7, #44]	@ 0x2c
      pointer __old_start = this->_M_impl._M_start;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	62bb      	str	r3, [r7, #40]	@ 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	685b      	ldr	r3, [r3, #4]
 800c316:	627b      	str	r3, [r7, #36]	@ 0x24
      const size_type __elems_before = __position - begin();
 800c318:	68f8      	ldr	r0, [r7, #12]
 800c31a:	f7fe ff5a 	bl	800b1d2 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>
 800c31e:	4603      	mov	r3, r0
 800c320:	617b      	str	r3, [r7, #20]
 800c322:	f107 0214 	add.w	r2, r7, #20
 800c326:	f107 0308 	add.w	r3, r7, #8
 800c32a:	4611      	mov	r1, r2
 800c32c:	4618      	mov	r0, r3
 800c32e:	f000 fadd 	bl	800c8ec <_ZN9__gnu_cxxmiIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 800c332:	4603      	mov	r3, r0
 800c334:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c33a:	4618      	mov	r0, r3
 800c33c:	f000 faeb 	bl	800c916 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE11_M_allocateEj>
 800c340:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800c342:	69fb      	ldr	r3, [r7, #28]
 800c344:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800c346:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800c348:	6a3b      	ldr	r3, [r7, #32]
 800c34a:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 800c34c:	69fa      	ldr	r2, [r7, #28]
 800c34e:	18d5      	adds	r5, r2, r3
 800c350:	6878      	ldr	r0, [r7, #4]
 800c352:	f7ff ffb1 	bl	800c2b8 <_ZSt7forwardISt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS3_E4typeE>
 800c356:	4603      	mov	r3, r0
 800c358:	461a      	mov	r2, r3
 800c35a:	4629      	mov	r1, r5
 800c35c:	4620      	mov	r0, r4
 800c35e:	f7ff ffb6 	bl	800c2ce <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800c362:	2300      	movs	r3, #0
 800c364:	61bb      	str	r3, [r7, #24]

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800c366:	f107 0308 	add.w	r3, r7, #8
 800c36a:	4618      	mov	r0, r3
 800c36c:	f7ff fc5e 	bl	800bc2c <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 800c370:	4603      	mov	r3, r0
 800c372:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	4618      	mov	r0, r3
 800c378:	f7ff f9ca 	bl	800b710 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 800c37c:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800c37e:	69fa      	ldr	r2, [r7, #28]
 800c380:	4621      	mov	r1, r4
 800c382:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c384:	f000 fadb 	bl	800c93e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
 800c388:	61b8      	str	r0, [r7, #24]

	      ++__new_finish;
 800c38a:	69bb      	ldr	r3, [r7, #24]
 800c38c:	3308      	adds	r3, #8
 800c38e:	61bb      	str	r3, [r7, #24]

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800c390:	f107 0308 	add.w	r3, r7, #8
 800c394:	4618      	mov	r0, r3
 800c396:	f7ff fc49 	bl	800bc2c <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 800c39a:	4603      	mov	r3, r0
 800c39c:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	f7ff f9b5 	bl	800b710 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 800c3a6:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800c3a8:	69ba      	ldr	r2, [r7, #24]
 800c3aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c3ac:	4620      	mov	r0, r4
 800c3ae:	f000 fac6 	bl	800c93e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
 800c3b2:	61b8      	str	r0, [r7, #24]
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 800c3b4:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	689a      	ldr	r2, [r3, #8]
 800c3ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3bc:	1ad3      	subs	r3, r2, r3
 800c3be:	10db      	asrs	r3, r3, #3
      _M_deallocate(__old_start,
 800c3c0:	461a      	mov	r2, r3
 800c3c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c3c4:	f7ff f991 	bl	800b6ea <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE13_M_deallocateEPS2_j>
      this->_M_impl._M_start = __new_start;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	69fa      	ldr	r2, [r7, #28]
 800c3cc:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	69ba      	ldr	r2, [r7, #24]
 800c3d2:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800c3d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3d6:	00db      	lsls	r3, r3, #3
 800c3d8:	69fa      	ldr	r2, [r7, #28]
 800c3da:	441a      	add	r2, r3
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	609a      	str	r2, [r3, #8]
    }
 800c3e0:	bf00      	nop
 800c3e2:	3730      	adds	r7, #48	@ 0x30
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bdb0      	pop	{r4, r5, r7, pc}
 800c3e8:	08027ff8 	.word	0x08027ff8

0800c3ec <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b084      	sub	sp, #16
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 800c3f4:	6878      	ldr	r0, [r7, #4]
 800c3f6:	f7fe fefc 	bl	800b1f2 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	60fb      	str	r3, [r7, #12]
 800c3fe:	f107 030c 	add.w	r3, r7, #12
 800c402:	2101      	movs	r1, #1
 800c404:	4618      	mov	r0, r3
 800c406:	f000 fab9 	bl	800c97c <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEmiEi>
 800c40a:	4603      	mov	r3, r0
 800c40c:	60bb      	str	r3, [r7, #8]
 800c40e:	f107 0308 	add.w	r3, r7, #8
 800c412:	4618      	mov	r0, r3
 800c414:	f7fe ff27 	bl	800b266 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>
 800c418:	4603      	mov	r3, r0
      }
 800c41a:	4618      	mov	r0, r3
 800c41c:	3710      	adds	r7, #16
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}

0800c422 <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE>:
  StringNode* add(TAdaptedString str, Allocator* allocator) {
 800c422:	b580      	push	{r7, lr}
 800c424:	b088      	sub	sp, #32
 800c426:	af02      	add	r7, sp, #8
 800c428:	60f8      	str	r0, [r7, #12]
 800c42a:	4638      	mov	r0, r7
 800c42c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    auto node = get(str);
 800c430:	463b      	mov	r3, r7
 800c432:	4619      	mov	r1, r3
 800c434:	68f8      	ldr	r0, [r7, #12]
 800c436:	f7fa fc3f 	bl	8006cb8 <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_>
 800c43a:	6178      	str	r0, [r7, #20]
    if (node) {
 800c43c:	697b      	ldr	r3, [r7, #20]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d007      	beq.n	800c452 <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x30>
      node->references++;
 800c442:	697b      	ldr	r3, [r7, #20]
 800c444:	889b      	ldrh	r3, [r3, #4]
 800c446:	3301      	adds	r3, #1
 800c448:	b29a      	uxth	r2, r3
 800c44a:	697b      	ldr	r3, [r7, #20]
 800c44c:	809a      	strh	r2, [r3, #4]
      return node;
 800c44e:	697b      	ldr	r3, [r7, #20]
 800c450:	e023      	b.n	800c49a <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x78>
    size_t n = str.size();
 800c452:	463b      	mov	r3, r7
 800c454:	4618      	mov	r0, r3
 800c456:	f7f7 fda9 	bl	8003fac <_ZNK11ArduinoJson8V730HB226detail9RamString4sizeEv>
 800c45a:	6138      	str	r0, [r7, #16]
    node = StringNode::create(n, allocator);
 800c45c:	6a39      	ldr	r1, [r7, #32]
 800c45e:	6938      	ldr	r0, [r7, #16]
 800c460:	f7f7 fd12 	bl	8003e88 <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE>
 800c464:	6178      	str	r0, [r7, #20]
    if (!node)
 800c466:	697b      	ldr	r3, [r7, #20]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d101      	bne.n	800c470 <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x4e>
      return nullptr;
 800c46c:	2300      	movs	r3, #0
 800c46e:	e014      	b.n	800c49a <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x78>
    stringGetChars(str, node->data, n);
 800c470:	697b      	ldr	r3, [r7, #20]
 800c472:	f103 0208 	add.w	r2, r3, #8
 800c476:	693b      	ldr	r3, [r7, #16]
 800c478:	9300      	str	r3, [sp, #0]
 800c47a:	4613      	mov	r3, r2
 800c47c:	463a      	mov	r2, r7
 800c47e:	ca07      	ldmia	r2, {r0, r1, r2}
 800c480:	f000 fa95 	bl	800c9ae <_ZN11ArduinoJson8V730HB226detailL14stringGetCharsINS1_9RamStringEEEvT_Pcj>
    node->data[n] = 0;  // force NUL terminator
 800c484:	697a      	ldr	r2, [r7, #20]
 800c486:	693b      	ldr	r3, [r7, #16]
 800c488:	4413      	add	r3, r2
 800c48a:	3308      	adds	r3, #8
 800c48c:	2200      	movs	r2, #0
 800c48e:	701a      	strb	r2, [r3, #0]
    add(node);
 800c490:	6979      	ldr	r1, [r7, #20]
 800c492:	68f8      	ldr	r0, [r7, #12]
 800c494:	f7f7 fdbc 	bl	8004010 <_ZN11ArduinoJson8V730HB226detail10StringPool3addEPNS1_10StringNodeE>
    return node;
 800c498:	697b      	ldr	r3, [r7, #20]
  }
 800c49a:	4618      	mov	r0, r3
 800c49c:	3718      	adds	r7, #24
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}

0800c4a2 <_ZSt12__get_helperILj1ESt14default_deleteI14CommsInterfaceEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800c4a2:	b580      	push	{r7, lr}
 800c4a4:	b082      	sub	sp, #8
 800c4a6:	af00      	add	r7, sp, #0
 800c4a8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f000 fa9f 	bl	800c9ee <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEE7_M_headERS3_>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	3708      	adds	r7, #8
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}

0800c4ba <_ZSt12__get_helperILj0EP9pruThreadJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800c4ba:	b580      	push	{r7, lr}
 800c4bc:	b082      	sub	sp, #8
 800c4be:	af00      	add	r7, sp, #0
 800c4c0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f000 fa9f 	bl	800ca06 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEE7_M_headERKS4_>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	3708      	adds	r7, #8
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}

0800c4d2 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17JsonConfigHandlerEEEC1Ev>:
      _Tuple_impl()
 800c4d2:	b580      	push	{r7, lr}
 800c4d4:	b082      	sub	sp, #8
 800c4d6:	af00      	add	r7, sp, #0
 800c4d8:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800c4da:	6878      	ldr	r0, [r7, #4]
 800c4dc:	f000 faa0 	bl	800ca20 <_ZNSt10_Head_baseILj1ESt14default_deleteI17JsonConfigHandlerELb1EEC1Ev>
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	3708      	adds	r7, #8
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}

0800c4ea <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EEC1Ev>:
      constexpr _Head_base()
 800c4ea:	b480      	push	{r7}
 800c4ec:	b083      	sub	sp, #12
 800c4ee:	af00      	add	r7, sp, #0
 800c4f0:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	601a      	str	r2, [r3, #0]
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	370c      	adds	r7, #12
 800c4fe:	46bd      	mov	sp, r7
 800c500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c504:	4770      	bx	lr

0800c506 <_ZSt12__get_helperILj0EP17JsonConfigHandlerJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800c506:	b580      	push	{r7, lr}
 800c508:	b082      	sub	sp, #8
 800c50a:	af00      	add	r7, sp, #0
 800c50c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	f000 fa91 	bl	800ca36 <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEE7_M_headERS4_>
 800c514:	4603      	mov	r3, r0
 800c516:	4618      	mov	r0, r3
 800c518:	3708      	adds	r7, #8
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}

0800c51e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9pruThreadEEEC1Ev>:
      _Tuple_impl()
 800c51e:	b580      	push	{r7, lr}
 800c520:	b082      	sub	sp, #8
 800c522:	af00      	add	r7, sp, #0
 800c524:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800c526:	6878      	ldr	r0, [r7, #4]
 800c528:	f000 fa92 	bl	800ca50 <_ZNSt10_Head_baseILj1ESt14default_deleteI9pruThreadELb1EEC1Ev>
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	4618      	mov	r0, r3
 800c530:	3708      	adds	r7, #8
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}

0800c536 <_ZNSt10_Head_baseILj0EP9pruThreadLb0EEC1Ev>:
      constexpr _Head_base()
 800c536:	b480      	push	{r7}
 800c538:	b083      	sub	sp, #12
 800c53a:	af00      	add	r7, sp, #0
 800c53c:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2200      	movs	r2, #0
 800c542:	601a      	str	r2, [r3, #0]
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	4618      	mov	r0, r3
 800c548:	370c      	adds	r7, #12
 800c54a:	46bd      	mov	sp, r7
 800c54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c550:	4770      	bx	lr

0800c552 <_ZSt12__get_helperILj0EP9pruThreadJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800c552:	b580      	push	{r7, lr}
 800c554:	b082      	sub	sp, #8
 800c556:	af00      	add	r7, sp, #0
 800c558:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800c55a:	6878      	ldr	r0, [r7, #4]
 800c55c:	f000 fa83 	bl	800ca66 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEE7_M_headERS4_>
 800c560:	4603      	mov	r3, r0
 800c562:	4618      	mov	r0, r3
 800c564:	3708      	adds	r7, #8
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}

0800c56a <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE10deallocateEPS2_j>:
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 800c56a:	b580      	push	{r7, lr}
 800c56c:	b084      	sub	sp, #16
 800c56e:	af00      	add	r7, sp, #0
 800c570:	60f8      	str	r0, [r7, #12]
 800c572:	60b9      	str	r1, [r7, #8]
 800c574:	607a      	str	r2, [r7, #4]
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	00db      	lsls	r3, r3, #3
 800c57a:	4619      	mov	r1, r3
 800c57c:	68b8      	ldr	r0, [r7, #8]
 800c57e:	f019 fc9c 	bl	8025eba <_ZdlPvj>
      }
 800c582:	3710      	adds	r7, #16
 800c584:	46bd      	mov	sp, r7
 800c586:	bd80      	pop	{r7, pc}

0800c588 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrI6ModuleEEEvT_S6_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800c588:	b580      	push	{r7, lr}
 800c58a:	b082      	sub	sp, #8
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
 800c590:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800c592:	e009      	b.n	800c5a8 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrI6ModuleEEEvT_S6_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f000 fa73 	bl	800ca80 <_ZSt11__addressofISt10shared_ptrI6ModuleEEPT_RS3_>
 800c59a:	4603      	mov	r3, r0
 800c59c:	4618      	mov	r0, r3
 800c59e:	f000 fa7a 	bl	800ca96 <_ZSt8_DestroyISt10shared_ptrI6ModuleEEvPT_>
	  for (; __first != __last; ++__first)
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	3308      	adds	r3, #8
 800c5a6:	607b      	str	r3, [r7, #4]
 800c5a8:	687a      	ldr	r2, [r7, #4]
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	429a      	cmp	r2, r3
 800c5ae:	d1f1      	bne.n	800c594 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrI6ModuleEEEvT_S6_+0xc>
	}
 800c5b0:	bf00      	nop
 800c5b2:	bf00      	nop
 800c5b4:	3708      	adds	r7, #8
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	bd80      	pop	{r7, pc}

0800c5ba <_ZSt12__get_helperILj1ESt14default_deleteI17JsonConfigHandlerEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800c5ba:	b580      	push	{r7, lr}
 800c5bc:	b082      	sub	sp, #8
 800c5be:	af00      	add	r7, sp, #0
 800c5c0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800c5c2:	6878      	ldr	r0, [r7, #4]
 800c5c4:	f000 fa72 	bl	800caac <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17JsonConfigHandlerEEE7_M_headERS3_>
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	3708      	adds	r7, #8
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}

0800c5d2 <_ZNSt5tupleIJP8SPICommsSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800c5d2:	b580      	push	{r7, lr}
 800c5d4:	b082      	sub	sp, #8
 800c5d6:	af00      	add	r7, sp, #0
 800c5d8:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f000 fa71 	bl	800cac4 <_ZNSt11_Tuple_implILj0EJP8SPICommsSt14default_deleteIS0_EEEC1Ev>
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	3708      	adds	r7, #8
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bd80      	pop	{r7, pc}

0800c5ec <_ZSt12__get_helperILj0EP8SPICommsJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b082      	sub	sp, #8
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800c5f4:	6878      	ldr	r0, [r7, #4]
 800c5f6:	f000 fa75 	bl	800cae4 <_ZNSt11_Tuple_implILj0EJP8SPICommsSt14default_deleteIS0_EEE7_M_headERS4_>
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	3708      	adds	r7, #8
 800c600:	46bd      	mov	sp, r7
 800c602:	bd80      	pop	{r7, pc}

0800c604 <_ZSt3getILj1EJP8SPICommsSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800c604:	b580      	push	{r7, lr}
 800c606:	b082      	sub	sp, #8
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800c60c:	6878      	ldr	r0, [r7, #4]
 800c60e:	f000 fa76 	bl	800cafe <_ZSt12__get_helperILj1ESt14default_deleteI8SPICommsEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800c612:	4603      	mov	r3, r0
 800c614:	4618      	mov	r0, r3
 800c616:	3708      	adds	r7, #8
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}

0800c61c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I12CommsHandlerSaIvEJEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>:
	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
 800c61c:	b5b0      	push	{r4, r5, r7, lr}
 800c61e:	b08a      	sub	sp, #40	@ 0x28
 800c620:	af00      	add	r7, sp, #0
 800c622:	60f8      	str	r0, [r7, #12]
 800c624:	60b9      	str	r1, [r7, #8]
 800c626:	607a      	str	r2, [r7, #4]
	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 800c628:	687a      	ldr	r2, [r7, #4]
 800c62a:	f107 031c 	add.w	r3, r7, #28
 800c62e:	4611      	mov	r1, r2
 800c630:	4618      	mov	r0, r3
 800c632:	f000 fa70 	bl	800cb16 <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	  auto __guard = std::__allocate_guarded(__a2);
 800c636:	f107 0314 	add.w	r3, r7, #20
 800c63a:	f107 021c 	add.w	r2, r7, #28
 800c63e:	4611      	mov	r1, r2
 800c640:	4618      	mov	r0, r3
 800c642:	f000 fa81 	bl	800cb48 <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>
	  _Sp_cp_type* __mem = __guard.get();
 800c646:	f107 0314 	add.w	r3, r7, #20
 800c64a:	4618      	mov	r0, r3
 800c64c:	f000 faa4 	bl	800cb98 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>
 800c650:	6278      	str	r0, [r7, #36]	@ 0x24
	  auto __pi = ::new (__mem)
 800c652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c654:	4619      	mov	r1, r3
 800c656:	202c      	movs	r0, #44	@ 0x2c
 800c658:	f7fd f852 	bl	8009700 <_ZnwjPv>
 800c65c:	4604      	mov	r4, r0
 800c65e:	4629      	mov	r1, r5
 800c660:	4620      	mov	r0, r4
 800c662:	f000 faa7 	bl	800cbb4 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJEEES1_DpOT_>
 800c666:	623c      	str	r4, [r7, #32]
	  __guard = nullptr;
 800c668:	f107 0314 	add.w	r3, r7, #20
 800c66c:	2100      	movs	r1, #0
 800c66e:	4618      	mov	r0, r3
 800c670:	f000 fac2 	bl	800cbf8 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>
	  _M_pi = __pi;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	6a3a      	ldr	r2, [r7, #32]
 800c678:	601a      	str	r2, [r3, #0]
	  __p = __pi->_M_ptr();
 800c67a:	6a38      	ldr	r0, [r7, #32]
 800c67c:	f000 facb 	bl	800cc16 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800c680:	4602      	mov	r2, r0
 800c682:	68bb      	ldr	r3, [r7, #8]
 800c684:	601a      	str	r2, [r3, #0]
	}
 800c686:	f107 0314 	add.w	r3, r7, #20
 800c68a:	4618      	mov	r0, r3
 800c68c:	f000 fa6f 	bl	800cb6e <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 800c690:	f107 031c 	add.w	r3, r7, #28
 800c694:	4618      	mov	r0, r3
 800c696:	f000 fa4b 	bl	800cb30 <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	4618      	mov	r0, r3
 800c69e:	3728      	adds	r7, #40	@ 0x28
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	bdb0      	pop	{r4, r5, r7, pc}

0800c6a4 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	    __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
	}

      template<typename _Yp, typename _Yp2 = typename remove_cv<_Yp>::type>
	typename enable_if<!__has_esft_base<_Yp2>::value>::type
	_M_enable_shared_from_this_with(_Yp*) noexcept
 800c6a4:	b480      	push	{r7}
 800c6a6:	b083      	sub	sp, #12
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
 800c6ac:	6039      	str	r1, [r7, #0]
	{ }
 800c6ae:	bf00      	nop
 800c6b0:	370c      	adds	r7, #12
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b8:	4770      	bx	lr

0800c6ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>:
      _M_swap(__shared_count& __r) noexcept
 800c6ba:	b480      	push	{r7}
 800c6bc:	b085      	sub	sp, #20
 800c6be:	af00      	add	r7, sp, #0
 800c6c0:	6078      	str	r0, [r7, #4]
 800c6c2:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	60fb      	str	r3, [r7, #12]
	__r._M_pi = _M_pi;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681a      	ldr	r2, [r3, #0]
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	601a      	str	r2, [r3, #0]
	_M_pi = __tmp;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	68fa      	ldr	r2, [r7, #12]
 800c6d6:	601a      	str	r2, [r3, #0]
      }
 800c6d8:	bf00      	nop
 800c6da:	3714      	adds	r7, #20
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e2:	4770      	bx	lr

0800c6e4 <_ZSt4swapIP12CommsHandlerENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b084      	sub	sp, #16
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
 800c6ec:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800c6ee:	6878      	ldr	r0, [r7, #4]
 800c6f0:	f000 fa9f 	bl	800cc32 <_ZSt4moveIRP12CommsHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800c6fa:	6838      	ldr	r0, [r7, #0]
 800c6fc:	f000 fa99 	bl	800cc32 <_ZSt4moveIRP12CommsHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 800c700:	4603      	mov	r3, r0
 800c702:	681a      	ldr	r2, [r3, #0]
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800c708:	f107 030c 	add.w	r3, r7, #12
 800c70c:	4618      	mov	r0, r3
 800c70e:	f000 fa90 	bl	800cc32 <_ZSt4moveIRP12CommsHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 800c712:	4603      	mov	r3, r0
 800c714:	681a      	ldr	r2, [r3, #0]
 800c716:	683b      	ldr	r3, [r7, #0]
 800c718:	601a      	str	r2, [r3, #0]
    }
 800c71a:	bf00      	nop
 800c71c:	3710      	adds	r7, #16
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd80      	pop	{r7, pc}

0800c722 <_ZSt7forwardIRP14CommsInterfaceEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c722:	b480      	push	{r7}
 800c724:	b083      	sub	sp, #12
 800c726:	af00      	add	r7, sp, #0
 800c728:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	4618      	mov	r0, r3
 800c72e:	370c      	adds	r7, #12
 800c730:	46bd      	mov	sp, r7
 800c732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c736:	4770      	bx	lr

0800c738 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEEC1IRS1_JS2_I8SPICommsEEvEEOT_DpOT0_>:
	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800c738:	b590      	push	{r4, r7, lr}
 800c73a:	b085      	sub	sp, #20
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	60f8      	str	r0, [r7, #12]
 800c740:	60b9      	str	r1, [r7, #8]
 800c742:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head))
 800c744:	6878      	ldr	r0, [r7, #4]
 800c746:	f7ff f93b 	bl	800b9c0 <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800c74a:	4603      	mov	r3, r0
 800c74c:	4619      	mov	r1, r3
 800c74e:	68f8      	ldr	r0, [r7, #12]
 800c750:	f000 fa7a 	bl	800cc48 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEEC1IS0_I8SPICommsEEEOT_>
 800c754:	68fc      	ldr	r4, [r7, #12]
 800c756:	68b8      	ldr	r0, [r7, #8]
 800c758:	f7ff ffe3 	bl	800c722 <_ZSt7forwardIRP14CommsInterfaceEOT_RNSt16remove_referenceIS3_E4typeE>
 800c75c:	4603      	mov	r3, r0
 800c75e:	4619      	mov	r1, r3
 800c760:	4620      	mov	r0, r4
 800c762:	f000 fa83 	bl	800cc6c <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EEC1IRS1_EEOT_>
	{ }
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	4618      	mov	r0, r3
 800c76a:	3714      	adds	r7, #20
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bd90      	pop	{r4, r7, pc}

0800c770 <_ZSt12__get_helperILj0EP14CommsInterfaceJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800c770:	b580      	push	{r7, lr}
 800c772:	b082      	sub	sp, #8
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800c778:	6878      	ldr	r0, [r7, #4]
 800c77a:	f000 fa88 	bl	800cc8e <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEE7_M_headERS4_>
 800c77e:	4603      	mov	r3, r0
 800c780:	4618      	mov	r0, r3
 800c782:	3708      	adds	r7, #8
 800c784:	46bd      	mov	sp, r7
 800c786:	bd80      	pop	{r7, pc}

0800c788 <_ZSt12__get_helperILj1ESt14default_deleteI9pruThreadEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800c788:	b580      	push	{r7, lr}
 800c78a:	b082      	sub	sp, #8
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800c790:	6878      	ldr	r0, [r7, #4]
 800c792:	f000 fa89 	bl	800cca8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9pruThreadEEE7_M_headERS3_>
 800c796:	4603      	mov	r3, r0
 800c798:	4618      	mov	r0, r3
 800c79a:	3708      	adds	r7, #8
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bd80      	pop	{r7, pc}

0800c7a0 <_ZSt3getILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b082      	sub	sp, #8
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f000 fa88 	bl	800ccc0 <_ZSt12__get_helperILj0EP17JsonConfigHandlerJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	3708      	adds	r7, #8
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bd80      	pop	{r7, pc}

0800c7ba <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7getDataEv>:
  VariantData* getData() const {
 800c7ba:	b580      	push	{r7, lr}
 800c7bc:	b082      	sub	sp, #8
 800c7be:	af00      	add	r7, sp, #0
 800c7c0:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 800c7c2:	6878      	ldr	r0, [r7, #4]
 800c7c4:	f000 fa88 	bl	800ccd8 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7derivedEv>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f000 fa8f 	bl	800ccee <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>
 800c7d0:	4603      	mov	r3, r0
  }
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	3708      	adds	r7, #8
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	bd80      	pop	{r7, pc}

0800c7da <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 800c7da:	b580      	push	{r7, lr}
 800c7dc:	b082      	sub	sp, #8
 800c7de:	af00      	add	r7, sp, #0
 800c7e0:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 800c7e2:	6878      	ldr	r0, [r7, #4]
 800c7e4:	f000 fa78 	bl	800ccd8 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7derivedEv>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	f000 fa8b 	bl	800cd06 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>
 800c7f0:	4603      	mov	r3, r0
  }
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	3708      	adds	r7, #8
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd80      	pop	{r7, pc}

0800c7fa <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE5doSetINS0_9ConverterImvEEmEEbRKT0_NS1_17integral_constantIbLb1EEE>:
  return resources && !resources->overflowed();
}

template <typename TDerived>
template <typename TConverter, typename T>
inline bool VariantRefBase<TDerived>::doSet(const T& value, true_type) const {
 800c7fa:	b590      	push	{r4, r7, lr}
 800c7fc:	b087      	sub	sp, #28
 800c7fe:	af00      	add	r7, sp, #0
 800c800:	60f8      	str	r0, [r7, #12]
 800c802:	60b9      	str	r1, [r7, #8]
 800c804:	713a      	strb	r2, [r7, #4]
  return TConverter::toJson(value, getOrCreateVariant());
 800c806:	68bb      	ldr	r3, [r7, #8]
 800c808:	681c      	ldr	r4, [r3, #0]
 800c80a:	f107 0310 	add.w	r3, r7, #16
 800c80e:	68f9      	ldr	r1, [r7, #12]
 800c810:	4618      	mov	r0, r3
 800c812:	f000 fa84 	bl	800cd1e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getOrCreateVariantEv>
 800c816:	f107 0310 	add.w	r3, r7, #16
 800c81a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800c81e:	4620      	mov	r0, r4
 800c820:	f000 fa93 	bl	800cd4a <_ZN11ArduinoJson8V730HB229ConverterImvE6toJsonEmNS0_11JsonVariantE>
 800c824:	4603      	mov	r3, r0
}
 800c826:	4618      	mov	r0, r3
 800c828:	371c      	adds	r7, #28
 800c82a:	46bd      	mov	sp, r7
 800c82c:	bd90      	pop	{r4, r7, pc}

0800c82e <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE9constructIS2_JS2_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 800c82e:	b590      	push	{r4, r7, lr}
 800c830:	b085      	sub	sp, #20
 800c832:	af00      	add	r7, sp, #0
 800c834:	60f8      	str	r0, [r7, #12]
 800c836:	60b9      	str	r1, [r7, #8]
 800c838:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800c83a:	68bb      	ldr	r3, [r7, #8]
 800c83c:	4619      	mov	r1, r3
 800c83e:	2008      	movs	r0, #8
 800c840:	f7fc ff5e 	bl	8009700 <_ZnwjPv>
 800c844:	4604      	mov	r4, r0
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	f7ff fd36 	bl	800c2b8 <_ZSt7forwardISt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS3_E4typeE>
 800c84c:	4603      	mov	r3, r0
 800c84e:	4619      	mov	r1, r3
 800c850:	4620      	mov	r0, r4
 800c852:	f000 fabf 	bl	800cdd4 <_ZNSt10shared_ptrI6ModuleEC1EOS1_>
 800c856:	bf00      	nop
 800c858:	3714      	adds	r7, #20
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd90      	pop	{r4, r7, pc}

0800c85e <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc>:
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
 800c85e:	b590      	push	{r4, r7, lr}
 800c860:	b087      	sub	sp, #28
 800c862:	af00      	add	r7, sp, #0
 800c864:	60f8      	str	r0, [r7, #12]
 800c866:	60b9      	str	r1, [r7, #8]
 800c868:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 800c86a:	68f8      	ldr	r0, [r7, #12]
 800c86c:	f000 fac5 	bl	800cdfa <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8max_sizeEv>
 800c870:	4604      	mov	r4, r0
 800c872:	68f8      	ldr	r0, [r7, #12]
 800c874:	f000 fad2 	bl	800ce1c <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4sizeEv>
 800c878:	4603      	mov	r3, r0
 800c87a:	1ae2      	subs	r2, r4, r3
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	429a      	cmp	r2, r3
 800c880:	bf34      	ite	cc
 800c882:	2301      	movcc	r3, #1
 800c884:	2300      	movcs	r3, #0
 800c886:	b2db      	uxtb	r3, r3
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d002      	beq.n	800c892 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800c88c:	6878      	ldr	r0, [r7, #4]
 800c88e:	f019 fb44 	bl	8025f1a <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 800c892:	68f8      	ldr	r0, [r7, #12]
 800c894:	f000 fac2 	bl	800ce1c <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4sizeEv>
 800c898:	4604      	mov	r4, r0
 800c89a:	68f8      	ldr	r0, [r7, #12]
 800c89c:	f000 fabe 	bl	800ce1c <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4sizeEv>
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	613b      	str	r3, [r7, #16]
 800c8a4:	f107 0208 	add.w	r2, r7, #8
 800c8a8:	f107 0310 	add.w	r3, r7, #16
 800c8ac:	4611      	mov	r1, r2
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	f7fe f901 	bl	800aab6 <_ZSt3maxIjERKT_S2_S2_>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	4423      	add	r3, r4
 800c8ba:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800c8bc:	68f8      	ldr	r0, [r7, #12]
 800c8be:	f000 faad 	bl	800ce1c <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4sizeEv>
 800c8c2:	4602      	mov	r2, r0
 800c8c4:	697b      	ldr	r3, [r7, #20]
 800c8c6:	4293      	cmp	r3, r2
 800c8c8:	d306      	bcc.n	800c8d8 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc+0x7a>
 800c8ca:	68f8      	ldr	r0, [r7, #12]
 800c8cc:	f000 fa95 	bl	800cdfa <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8max_sizeEv>
 800c8d0:	4602      	mov	r2, r0
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	4293      	cmp	r3, r2
 800c8d6:	d904      	bls.n	800c8e2 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc+0x84>
 800c8d8:	68f8      	ldr	r0, [r7, #12]
 800c8da:	f000 fa8e 	bl	800cdfa <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8max_sizeEv>
 800c8de:	4603      	mov	r3, r0
 800c8e0:	e000      	b.n	800c8e4 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc+0x86>
 800c8e2:	697b      	ldr	r3, [r7, #20]
      }
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	371c      	adds	r7, #28
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd90      	pop	{r4, r7, pc}

0800c8ec <_ZN9__gnu_cxxmiIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800c8ec:	b590      	push	{r4, r7, lr}
 800c8ee:	b083      	sub	sp, #12
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
 800c8f4:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800c8f6:	6878      	ldr	r0, [r7, #4]
 800c8f8:	f7ff f998 	bl	800bc2c <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	681c      	ldr	r4, [r3, #0]
 800c900:	6838      	ldr	r0, [r7, #0]
 800c902:	f7ff f993 	bl	800bc2c <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 800c906:	4603      	mov	r3, r0
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	1ae3      	subs	r3, r4, r3
 800c90c:	10db      	asrs	r3, r3, #3
 800c90e:	4618      	mov	r0, r3
 800c910:	370c      	adds	r7, #12
 800c912:	46bd      	mov	sp, r7
 800c914:	bd90      	pop	{r4, r7, pc}

0800c916 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800c916:	b580      	push	{r7, lr}
 800c918:	b082      	sub	sp, #8
 800c91a:	af00      	add	r7, sp, #0
 800c91c:	6078      	str	r0, [r7, #4]
 800c91e:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d006      	beq.n	800c934 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE11_M_allocateEj+0x1e>
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	6839      	ldr	r1, [r7, #0]
 800c92a:	4618      	mov	r0, r3
 800c92c:	f000 fa86 	bl	800ce3c <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE8allocateERS3_j>
 800c930:	4603      	mov	r3, r0
 800c932:	e000      	b.n	800c936 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE11_M_allocateEj+0x20>
 800c934:	2300      	movs	r3, #0
      }
 800c936:	4618      	mov	r0, r3
 800c938:	3708      	adds	r7, #8
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd80      	pop	{r7, pc}

0800c93e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800c93e:	b580      	push	{r7, lr}
 800c940:	b084      	sub	sp, #16
 800c942:	af00      	add	r7, sp, #0
 800c944:	60f8      	str	r0, [r7, #12]
 800c946:	60b9      	str	r1, [r7, #8]
 800c948:	607a      	str	r2, [r7, #4]
 800c94a:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	687a      	ldr	r2, [r7, #4]
 800c950:	68b9      	ldr	r1, [r7, #8]
 800c952:	68f8      	ldr	r0, [r7, #12]
 800c954:	f000 fa81 	bl	800ce5a <_ZSt12__relocate_aIPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_>
 800c958:	4603      	mov	r3, r0
      }
 800c95a:	4618      	mov	r0, r3
 800c95c:	3710      	adds	r7, #16
 800c95e:	46bd      	mov	sp, r7
 800c960:	bd80      	pop	{r7, pc}

0800c962 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE7destroyIS2_EEvRS3_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800c962:	b580      	push	{r7, lr}
 800c964:	b082      	sub	sp, #8
 800c966:	af00      	add	r7, sp, #0
 800c968:	6078      	str	r0, [r7, #4]
 800c96a:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 800c96c:	6839      	ldr	r1, [r7, #0]
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f000 fa90 	bl	800ce94 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE7destroyIS2_EEvPT_>
	}
 800c974:	bf00      	nop
 800c976:	3708      	adds	r7, #8
 800c978:	46bd      	mov	sp, r7
 800c97a:	bd80      	pop	{r7, pc}

0800c97c <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b084      	sub	sp, #16
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
 800c984:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681a      	ldr	r2, [r3, #0]
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	00db      	lsls	r3, r3, #3
 800c98e:	425b      	negs	r3, r3
 800c990:	4413      	add	r3, r2
 800c992:	60fb      	str	r3, [r7, #12]
 800c994:	f107 020c 	add.w	r2, r7, #12
 800c998:	f107 0308 	add.w	r3, r7, #8
 800c99c:	4611      	mov	r1, r2
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f7ff f934 	bl	800bc0c <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 800c9a4:	68bb      	ldr	r3, [r7, #8]
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	3710      	adds	r7, #16
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bd80      	pop	{r7, pc}

0800c9ae <_ZN11ArduinoJson8V730HB226detailL14stringGetCharsINS1_9RamStringEEEvT_Pcj>:
stringEquals(TAdaptedString1 s1, TAdaptedString2 s2) {
  return stringEquals(s2, s1);
}

template <typename TAdaptedString>
static void stringGetChars(TAdaptedString s, char* p, size_t n) {
 800c9ae:	b590      	push	{r4, r7, lr}
 800c9b0:	b087      	sub	sp, #28
 800c9b2:	af00      	add	r7, sp, #0
 800c9b4:	1d3c      	adds	r4, r7, #4
 800c9b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c9ba:	603b      	str	r3, [r7, #0]
  ARDUINOJSON_ASSERT(s.size() <= n);
  for (size_t i = 0; i < n; i++) {
 800c9bc:	2300      	movs	r3, #0
 800c9be:	617b      	str	r3, [r7, #20]
 800c9c0:	e00c      	b.n	800c9dc <_ZN11ArduinoJson8V730HB226detailL14stringGetCharsINS1_9RamStringEEEvT_Pcj+0x2e>
    p[i] = s[i];
 800c9c2:	683a      	ldr	r2, [r7, #0]
 800c9c4:	697b      	ldr	r3, [r7, #20]
 800c9c6:	18d4      	adds	r4, r2, r3
 800c9c8:	1d3b      	adds	r3, r7, #4
 800c9ca:	6979      	ldr	r1, [r7, #20]
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	f7f4 f99b 	bl	8000d08 <_ZNK11ArduinoJson8V730HB226detail9RamStringixEj>
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	7023      	strb	r3, [r4, #0]
  for (size_t i = 0; i < n; i++) {
 800c9d6:	697b      	ldr	r3, [r7, #20]
 800c9d8:	3301      	adds	r3, #1
 800c9da:	617b      	str	r3, [r7, #20]
 800c9dc:	697a      	ldr	r2, [r7, #20]
 800c9de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9e0:	429a      	cmp	r2, r3
 800c9e2:	d3ee      	bcc.n	800c9c2 <_ZN11ArduinoJson8V730HB226detailL14stringGetCharsINS1_9RamStringEEEvT_Pcj+0x14>
  }
}
 800c9e4:	bf00      	nop
 800c9e6:	bf00      	nop
 800c9e8:	371c      	adds	r7, #28
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd90      	pop	{r4, r7, pc}

0800c9ee <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800c9ee:	b580      	push	{r7, lr}
 800c9f0:	b082      	sub	sp, #8
 800c9f2:	af00      	add	r7, sp, #0
 800c9f4:	6078      	str	r0, [r7, #4]
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	f000 fa58 	bl	800ceac <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EE7_M_headERS3_>
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	4618      	mov	r0, r3
 800ca00:	3708      	adds	r7, #8
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bd80      	pop	{r7, pc}

0800ca06 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800ca06:	b580      	push	{r7, lr}
 800ca08:	b082      	sub	sp, #8
 800ca0a:	af00      	add	r7, sp, #0
 800ca0c:	6078      	str	r0, [r7, #4]
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	4618      	mov	r0, r3
 800ca12:	f000 fa56 	bl	800cec2 <_ZNSt10_Head_baseILj0EP9pruThreadLb0EE7_M_headERKS2_>
 800ca16:	4603      	mov	r3, r0
 800ca18:	4618      	mov	r0, r3
 800ca1a:	3708      	adds	r7, #8
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}

0800ca20 <_ZNSt10_Head_baseILj1ESt14default_deleteI17JsonConfigHandlerELb1EEC1Ev>:
      constexpr _Head_base()
 800ca20:	b480      	push	{r7}
 800ca22:	b083      	sub	sp, #12
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	370c      	adds	r7, #12
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca34:	4770      	bx	lr

0800ca36 <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800ca36:	b580      	push	{r7, lr}
 800ca38:	b082      	sub	sp, #8
 800ca3a:	af00      	add	r7, sp, #0
 800ca3c:	6078      	str	r0, [r7, #4]
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	4618      	mov	r0, r3
 800ca42:	f000 fa49 	bl	800ced8 <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EE7_M_headERS2_>
 800ca46:	4603      	mov	r3, r0
 800ca48:	4618      	mov	r0, r3
 800ca4a:	3708      	adds	r7, #8
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	bd80      	pop	{r7, pc}

0800ca50 <_ZNSt10_Head_baseILj1ESt14default_deleteI9pruThreadELb1EEC1Ev>:
      constexpr _Head_base()
 800ca50:	b480      	push	{r7}
 800ca52:	b083      	sub	sp, #12
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	370c      	adds	r7, #12
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca64:	4770      	bx	lr

0800ca66 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800ca66:	b580      	push	{r7, lr}
 800ca68:	b082      	sub	sp, #8
 800ca6a:	af00      	add	r7, sp, #0
 800ca6c:	6078      	str	r0, [r7, #4]
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	4618      	mov	r0, r3
 800ca72:	f000 fa3c 	bl	800ceee <_ZNSt10_Head_baseILj0EP9pruThreadLb0EE7_M_headERS2_>
 800ca76:	4603      	mov	r3, r0
 800ca78:	4618      	mov	r0, r3
 800ca7a:	3708      	adds	r7, #8
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd80      	pop	{r7, pc}

0800ca80 <_ZSt11__addressofISt10shared_ptrI6ModuleEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800ca80:	b480      	push	{r7}
 800ca82:	b083      	sub	sp, #12
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	370c      	adds	r7, #12
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca94:	4770      	bx	lr

0800ca96 <_ZSt8_DestroyISt10shared_ptrI6ModuleEEvPT_>:
    _Destroy(_Tp* __pointer)
 800ca96:	b580      	push	{r7, lr}
 800ca98:	b082      	sub	sp, #8
 800ca9a:	af00      	add	r7, sp, #0
 800ca9c:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 800ca9e:	6878      	ldr	r0, [r7, #4]
 800caa0:	f7fd fa37 	bl	8009f12 <_ZNSt10shared_ptrI6ModuleED1Ev>
    }
 800caa4:	bf00      	nop
 800caa6:	3708      	adds	r7, #8
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bd80      	pop	{r7, pc}

0800caac <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17JsonConfigHandlerEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800caac:	b580      	push	{r7, lr}
 800caae:	b082      	sub	sp, #8
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
 800cab4:	6878      	ldr	r0, [r7, #4]
 800cab6:	f000 fa25 	bl	800cf04 <_ZNSt10_Head_baseILj1ESt14default_deleteI17JsonConfigHandlerELb1EE7_M_headERS3_>
 800caba:	4603      	mov	r3, r0
 800cabc:	4618      	mov	r0, r3
 800cabe:	3708      	adds	r7, #8
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bd80      	pop	{r7, pc}

0800cac4 <_ZNSt11_Tuple_implILj0EJP8SPICommsSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b082      	sub	sp, #8
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800cacc:	6878      	ldr	r0, [r7, #4]
 800cace:	f000 fa24 	bl	800cf1a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8SPICommsEEEC1Ev>
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	4618      	mov	r0, r3
 800cad6:	f000 fa2c 	bl	800cf32 <_ZNSt10_Head_baseILj0EP8SPICommsLb0EEC1Ev>
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	4618      	mov	r0, r3
 800cade:	3708      	adds	r7, #8
 800cae0:	46bd      	mov	sp, r7
 800cae2:	bd80      	pop	{r7, pc}

0800cae4 <_ZNSt11_Tuple_implILj0EJP8SPICommsSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b082      	sub	sp, #8
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	4618      	mov	r0, r3
 800caf0:	f000 fa2d 	bl	800cf4e <_ZNSt10_Head_baseILj0EP8SPICommsLb0EE7_M_headERS2_>
 800caf4:	4603      	mov	r3, r0
 800caf6:	4618      	mov	r0, r3
 800caf8:	3708      	adds	r7, #8
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bd80      	pop	{r7, pc}

0800cafe <_ZSt12__get_helperILj1ESt14default_deleteI8SPICommsEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800cafe:	b580      	push	{r7, lr}
 800cb00:	b082      	sub	sp, #8
 800cb02:	af00      	add	r7, sp, #0
 800cb04:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800cb06:	6878      	ldr	r0, [r7, #4]
 800cb08:	f000 fa2c 	bl	800cf64 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8SPICommsEEE7_M_headERS3_>
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	4618      	mov	r0, r3
 800cb10:	3708      	adds	r7, #8
 800cb12:	46bd      	mov	sp, r7
 800cb14:	bd80      	pop	{r7, pc}

0800cb16 <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800cb16:	b580      	push	{r7, lr}
 800cb18:	b082      	sub	sp, #8
 800cb1a:	af00      	add	r7, sp, #0
 800cb1c:	6078      	str	r0, [r7, #4]
 800cb1e:	6039      	str	r1, [r7, #0]
 800cb20:	6878      	ldr	r0, [r7, #4]
 800cb22:	f000 fa2b 	bl	800cf7c <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	4618      	mov	r0, r3
 800cb2a:	3708      	adds	r7, #8
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	bd80      	pop	{r7, pc}

0800cb30 <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b082      	sub	sp, #8
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
 800cb38:	6878      	ldr	r0, [r7, #4]
 800cb3a:	f000 fa2a 	bl	800cf92 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	4618      	mov	r0, r3
 800cb42:	3708      	adds	r7, #8
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bd80      	pop	{r7, pc}

0800cb48 <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>:
    };

  /// Allocate space for a single object using __a
  template<typename _Alloc>
    __allocated_ptr<_Alloc>
    __allocate_guarded(_Alloc& __a)
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b082      	sub	sp, #8
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
 800cb50:	6039      	str	r1, [r7, #0]
    {
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 800cb52:	2101      	movs	r1, #1
 800cb54:	6838      	ldr	r0, [r7, #0]
 800cb56:	f000 fa27 	bl	800cfa8 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	461a      	mov	r2, r3
 800cb5e:	6839      	ldr	r1, [r7, #0]
 800cb60:	6878      	ldr	r0, [r7, #4]
 800cb62:	f000 fa30 	bl	800cfc6 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
    }
 800cb66:	6878      	ldr	r0, [r7, #4]
 800cb68:	3708      	adds	r7, #8
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bd80      	pop	{r7, pc}

0800cb6e <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 800cb6e:	b580      	push	{r7, lr}
 800cb70:	b082      	sub	sp, #8
 800cb72:	af00      	add	r7, sp, #0
 800cb74:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	685b      	ldr	r3, [r3, #4]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d007      	beq.n	800cb8e <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	6818      	ldr	r0, [r3, #0]
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	685b      	ldr	r3, [r3, #4]
 800cb86:	2201      	movs	r2, #1
 800cb88:	4619      	mov	r1, r3
 800cb8a:	f000 fa30 	bl	800cfee <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>
      }
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	4618      	mov	r0, r3
 800cb92:	3708      	adds	r7, #8
 800cb94:	46bd      	mov	sp, r7
 800cb96:	bd80      	pop	{r7, pc}

0800cb98 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>:
      value_type* get() { return std::__to_address(_M_ptr); }
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b082      	sub	sp, #8
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	685b      	ldr	r3, [r3, #4]
 800cba4:	4618      	mov	r0, r3
 800cba6:	f000 fa31 	bl	800d00c <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>
 800cbaa:	4603      	mov	r3, r0
 800cbac:	4618      	mov	r0, r3
 800cbae:	3708      	adds	r7, #8
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	bd80      	pop	{r7, pc}

0800cbb4 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJEEES1_DpOT_>:
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 800cbb4:	b590      	push	{r4, r7, lr}
 800cbb6:	b083      	sub	sp, #12
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
 800cbbc:	7039      	strb	r1, [r7, #0]
	: _M_impl(__a)
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f000 fa2f 	bl	800d024 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800cbc6:	4a0b      	ldr	r2, [pc, #44]	@ (800cbf4 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJEEES1_DpOT_+0x40>)
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	601a      	str	r2, [r3, #0]
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	330c      	adds	r3, #12
 800cbd0:	4621      	mov	r1, r4
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f000 fa3c 	bl	800d050 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
 800cbd8:	6878      	ldr	r0, [r7, #4]
 800cbda:	f000 f81c 	bl	800cc16 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800cbde:	4602      	mov	r2, r0
 800cbe0:	463b      	mov	r3, r7
 800cbe2:	4611      	mov	r1, r2
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	f000 fa42 	bl	800d06e <_ZNSt16allocator_traitsISaIvEE9constructI12CommsHandlerJEEEvRS0_PT_DpOT0_>
	}
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	4618      	mov	r0, r3
 800cbee:	370c      	adds	r7, #12
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	bd90      	pop	{r4, r7, pc}
 800cbf4:	080289a0 	.word	0x080289a0

0800cbf8 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 800cbf8:	b480      	push	{r7}
 800cbfa:	b083      	sub	sp, #12
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
 800cc00:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	2200      	movs	r2, #0
 800cc06:	605a      	str	r2, [r3, #4]
	return *this;
 800cc08:	687b      	ldr	r3, [r7, #4]
      }
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	370c      	adds	r7, #12
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc14:	4770      	bx	lr

0800cc16 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>:
      _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }
 800cc16:	b580      	push	{r7, lr}
 800cc18:	b082      	sub	sp, #8
 800cc1a:	af00      	add	r7, sp, #0
 800cc1c:	6078      	str	r0, [r7, #4]
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	330c      	adds	r3, #12
 800cc22:	4618      	mov	r0, r3
 800cc24:	f000 fa2f 	bl	800d086 <_ZN9__gnu_cxx16__aligned_bufferI12CommsHandlerE6_M_ptrEv>
 800cc28:	4603      	mov	r3, r0
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	3708      	adds	r7, #8
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bd80      	pop	{r7, pc}

0800cc32 <_ZSt4moveIRP12CommsHandlerEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800cc32:	b480      	push	{r7}
 800cc34:	b083      	sub	sp, #12
 800cc36:	af00      	add	r7, sp, #0
 800cc38:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	370c      	adds	r7, #12
 800cc40:	46bd      	mov	sp, r7
 800cc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc46:	4770      	bx	lr

0800cc48 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEEC1IS0_I8SPICommsEEEOT_>:
	_Tuple_impl(_UHead&& __head)
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b082      	sub	sp, #8
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
 800cc50:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 800cc52:	6838      	ldr	r0, [r7, #0]
 800cc54:	f7fe feb4 	bl	800b9c0 <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	4619      	mov	r1, r3
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	f000 fa1e 	bl	800d09e <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EEC1IS0_I8SPICommsEEEOT_>
	{ }
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	4618      	mov	r0, r3
 800cc66:	3708      	adds	r7, #8
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	bd80      	pop	{r7, pc}

0800cc6c <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b082      	sub	sp, #8
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
 800cc74:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800cc76:	6838      	ldr	r0, [r7, #0]
 800cc78:	f7ff fd53 	bl	800c722 <_ZSt7forwardIRP14CommsInterfaceEOT_RNSt16remove_referenceIS3_E4typeE>
 800cc7c:	4603      	mov	r3, r0
 800cc7e:	681a      	ldr	r2, [r3, #0]
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	601a      	str	r2, [r3, #0]
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	4618      	mov	r0, r3
 800cc88:	3708      	adds	r7, #8
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}

0800cc8e <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800cc8e:	b580      	push	{r7, lr}
 800cc90:	b082      	sub	sp, #8
 800cc92:	af00      	add	r7, sp, #0
 800cc94:	6078      	str	r0, [r7, #4]
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	4618      	mov	r0, r3
 800cc9a:	f000 fa13 	bl	800d0c4 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EE7_M_headERS2_>
 800cc9e:	4603      	mov	r3, r0
 800cca0:	4618      	mov	r0, r3
 800cca2:	3708      	adds	r7, #8
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}

0800cca8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9pruThreadEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b082      	sub	sp, #8
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
 800ccb0:	6878      	ldr	r0, [r7, #4]
 800ccb2:	f000 fa12 	bl	800d0da <_ZNSt10_Head_baseILj1ESt14default_deleteI9pruThreadELb1EE7_M_headERS3_>
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	4618      	mov	r0, r3
 800ccba:	3708      	adds	r7, #8
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	bd80      	pop	{r7, pc}

0800ccc0 <_ZSt12__get_helperILj0EP17JsonConfigHandlerJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b082      	sub	sp, #8
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800ccc8:	6878      	ldr	r0, [r7, #4]
 800ccca:	f000 fa11 	bl	800d0f0 <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEE7_M_headERKS4_>
 800ccce:	4603      	mov	r3, r0
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	3708      	adds	r7, #8
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	bd80      	pop	{r7, pc}

0800ccd8 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7derivedEv>:
  const TDerived& derived() const {
 800ccd8:	b480      	push	{r7}
 800ccda:	b083      	sub	sp, #12
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 800cce0:	687b      	ldr	r3, [r7, #4]
  }
 800cce2:	4618      	mov	r0, r3
 800cce4:	370c      	adds	r7, #12
 800cce6:	46bd      	mov	sp, r7
 800cce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccec:	4770      	bx	lr

0800ccee <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 800ccee:	b580      	push	{r7, lr}
 800ccf0:	b082      	sub	sp, #8
 800ccf2:	af00      	add	r7, sp, #0
 800ccf4:	6078      	str	r0, [r7, #4]
    return client.getData();
 800ccf6:	6878      	ldr	r0, [r7, #4]
 800ccf8:	f000 fa07 	bl	800d10a <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE7getDataEv>
 800ccfc:	4603      	mov	r3, r0
  }
 800ccfe:	4618      	mov	r0, r3
 800cd00:	3708      	adds	r7, #8
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}

0800cd06 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 800cd06:	b580      	push	{r7, lr}
 800cd08:	b082      	sub	sp, #8
 800cd0a:	af00      	add	r7, sp, #0
 800cd0c:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 800cd0e:	6878      	ldr	r0, [r7, #4]
 800cd10:	f000 fa17 	bl	800d142 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE18getResourceManagerEv>
 800cd14:	4603      	mov	r3, r0
  }
 800cd16:	4618      	mov	r0, r3
 800cd18:	3708      	adds	r7, #8
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd80      	pop	{r7, pc}

0800cd1e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getOrCreateVariantEv>:
inline JsonVariant VariantRefBase<TDerived>::getOrCreateVariant() const {
 800cd1e:	b590      	push	{r4, r7, lr}
 800cd20:	b083      	sub	sp, #12
 800cd22:	af00      	add	r7, sp, #0
 800cd24:	6078      	str	r0, [r7, #4]
 800cd26:	6039      	str	r1, [r7, #0]
  return JsonVariant(getOrCreateData(), getResourceManager());
 800cd28:	6838      	ldr	r0, [r7, #0]
 800cd2a:	f000 fa18 	bl	800d15e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE15getOrCreateDataEv>
 800cd2e:	4604      	mov	r4, r0
 800cd30:	6838      	ldr	r0, [r7, #0]
 800cd32:	f7ff fd52 	bl	800c7da <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>
 800cd36:	4603      	mov	r3, r0
 800cd38:	461a      	mov	r2, r3
 800cd3a:	4621      	mov	r1, r4
 800cd3c:	6878      	ldr	r0, [r7, #4]
 800cd3e:	f7f7 fcff 	bl	8004740 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
}
 800cd42:	6878      	ldr	r0, [r7, #4]
 800cd44:	370c      	adds	r7, #12
 800cd46:	46bd      	mov	sp, r7
 800cd48:	bd90      	pop	{r4, r7, pc}

0800cd4a <_ZN11ArduinoJson8V730HB229ConverterImvE6toJsonEmNS0_11JsonVariantE>:
  static bool toJson(T src, JsonVariant dst) {
 800cd4a:	b580      	push	{r7, lr}
 800cd4c:	b086      	sub	sp, #24
 800cd4e:	af00      	add	r7, sp, #0
 800cd50:	60f8      	str	r0, [r7, #12]
 800cd52:	1d3b      	adds	r3, r7, #4
 800cd54:	e883 0006 	stmia.w	r3, {r1, r2}
    auto data = getData(dst);
 800cd58:	1d3b      	adds	r3, r7, #4
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	f7f9 fa38 	bl	80061d0 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 800cd60:	6178      	str	r0, [r7, #20]
    if (!data)
 800cd62:	697b      	ldr	r3, [r7, #20]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d101      	bne.n	800cd6c <_ZN11ArduinoJson8V730HB229ConverterImvE6toJsonEmNS0_11JsonVariantE+0x22>
      return false;
 800cd68:	2300      	movs	r3, #0
 800cd6a:	e00f      	b.n	800cd8c <_ZN11ArduinoJson8V730HB229ConverterImvE6toJsonEmNS0_11JsonVariantE+0x42>
    auto resources = getResourceManager(dst);
 800cd6c:	1d3b      	adds	r3, r7, #4
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f7f9 fbd3 	bl	800651a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 800cd74:	6138      	str	r0, [r7, #16]
    data->clear(resources);
 800cd76:	6939      	ldr	r1, [r7, #16]
 800cd78:	6978      	ldr	r0, [r7, #20]
 800cd7a:	f7f8 fa15 	bl	80051a8 <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
    return data->setInteger(src, resources);
 800cd7e:	693a      	ldr	r2, [r7, #16]
 800cd80:	68f9      	ldr	r1, [r7, #12]
 800cd82:	6978      	ldr	r0, [r7, #20]
 800cd84:	f000 f9fb 	bl	800d17e <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>
 800cd88:	4603      	mov	r3, r0
 800cd8a:	bf00      	nop
  }
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	3718      	adds	r7, #24
 800cd90:	46bd      	mov	sp, r7
 800cd92:	bd80      	pop	{r7, pc}

0800cd94 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7getDataEv>:
  VariantData* getData() const {
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b082      	sub	sp, #8
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 800cd9c:	6878      	ldr	r0, [r7, #4]
 800cd9e:	f7fe ff82 	bl	800bca6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 800cda2:	4603      	mov	r3, r0
 800cda4:	4618      	mov	r0, r3
 800cda6:	f000 fa2d 	bl	800d204 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_7getDataEERT_>
 800cdaa:	4603      	mov	r3, r0
  }
 800cdac:	4618      	mov	r0, r3
 800cdae:	3708      	adds	r7, #8
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	bd80      	pop	{r7, pc}

0800cdb4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b082      	sub	sp, #8
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 800cdbc:	6878      	ldr	r0, [r7, #4]
 800cdbe:	f7fe ff72 	bl	800bca6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	f000 fa3c 	bl	800d242 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>
 800cdca:	4603      	mov	r3, r0
  }
 800cdcc:	4618      	mov	r0, r3
 800cdce:	3708      	adds	r7, #8
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd80      	pop	{r7, pc}

0800cdd4 <_ZNSt10shared_ptrI6ModuleEC1EOS1_>:
      shared_ptr(shared_ptr&& __r) noexcept
 800cdd4:	b590      	push	{r4, r7, lr}
 800cdd6:	b083      	sub	sp, #12
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
 800cddc:	6039      	str	r1, [r7, #0]
      : __shared_ptr<_Tp>(std::move(__r)) { }
 800cdde:	687c      	ldr	r4, [r7, #4]
 800cde0:	6838      	ldr	r0, [r7, #0]
 800cde2:	f7fe fac5 	bl	800b370 <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>
 800cde6:	4603      	mov	r3, r0
 800cde8:	4619      	mov	r1, r3
 800cdea:	4620      	mov	r0, r4
 800cdec:	f000 fa35 	bl	800d25a <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	370c      	adds	r7, #12
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	bd90      	pop	{r4, r7, pc}

0800cdfa <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800cdfa:	b580      	push	{r7, lr}
 800cdfc:	b082      	sub	sp, #8
 800cdfe:	af00      	add	r7, sp, #0
 800ce00:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	4618      	mov	r0, r3
 800ce06:	f000 fa60 	bl	800d2ca <_ZNKSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 800ce0a:	4603      	mov	r3, r0
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	f000 fa42 	bl	800d296 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_max_sizeERKS3_>
 800ce12:	4603      	mov	r3, r0
 800ce14:	4618      	mov	r0, r3
 800ce16:	3708      	adds	r7, #8
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	bd80      	pop	{r7, pc}

0800ce1c <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800ce1c:	b480      	push	{r7}
 800ce1e:	b083      	sub	sp, #12
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	685a      	ldr	r2, [r3, #4]
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	1ad3      	subs	r3, r2, r3
 800ce2e:	10db      	asrs	r3, r3, #3
 800ce30:	4618      	mov	r0, r3
 800ce32:	370c      	adds	r7, #12
 800ce34:	46bd      	mov	sp, r7
 800ce36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3a:	4770      	bx	lr

0800ce3c <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b082      	sub	sp, #8
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
 800ce44:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800ce46:	2200      	movs	r2, #0
 800ce48:	6839      	ldr	r1, [r7, #0]
 800ce4a:	6878      	ldr	r0, [r7, #4]
 800ce4c:	f000 fa48 	bl	800d2e0 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE8allocateEjPKv>
 800ce50:	4603      	mov	r3, r0
 800ce52:	4618      	mov	r0, r3
 800ce54:	3708      	adds	r7, #8
 800ce56:	46bd      	mov	sp, r7
 800ce58:	bd80      	pop	{r7, pc}

0800ce5a <_ZSt12__relocate_aIPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_>:

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800ce5a:	b5b0      	push	{r4, r5, r7, lr}
 800ce5c:	b084      	sub	sp, #16
 800ce5e:	af00      	add	r7, sp, #0
 800ce60:	60f8      	str	r0, [r7, #12]
 800ce62:	60b9      	str	r1, [r7, #8]
 800ce64:	607a      	str	r2, [r7, #4]
 800ce66:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
 800ce68:	68f8      	ldr	r0, [r7, #12]
 800ce6a:	f000 fa63 	bl	800d334 <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleEET_S4_>
 800ce6e:	4604      	mov	r4, r0
 800ce70:	68b8      	ldr	r0, [r7, #8]
 800ce72:	f000 fa5f 	bl	800d334 <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleEET_S4_>
 800ce76:	4605      	mov	r5, r0
 800ce78:	6878      	ldr	r0, [r7, #4]
 800ce7a:	f000 fa5b 	bl	800d334 <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleEET_S4_>
 800ce7e:	4602      	mov	r2, r0
 800ce80:	683b      	ldr	r3, [r7, #0]
 800ce82:	4629      	mov	r1, r5
 800ce84:	4620      	mov	r0, r4
 800ce86:	f000 fa60 	bl	800d34a <_ZSt14__relocate_a_1IPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_>
 800ce8a:	4603      	mov	r3, r0
				 std::__niter_base(__last),
				 std::__niter_base(__result), __alloc);
    }
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	3710      	adds	r7, #16
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bdb0      	pop	{r4, r5, r7, pc}

0800ce94 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE7destroyIS2_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b082      	sub	sp, #8
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
 800ce9c:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 800ce9e:	6838      	ldr	r0, [r7, #0]
 800cea0:	f7fd f837 	bl	8009f12 <_ZNSt10shared_ptrI6ModuleED1Ev>
 800cea4:	bf00      	nop
 800cea6:	3708      	adds	r7, #8
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bd80      	pop	{r7, pc}

0800ceac <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800ceac:	b480      	push	{r7}
 800ceae:	b083      	sub	sp, #12
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	370c      	adds	r7, #12
 800ceba:	46bd      	mov	sp, r7
 800cebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec0:	4770      	bx	lr

0800cec2 <_ZNSt10_Head_baseILj0EP9pruThreadLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800cec2:	b480      	push	{r7}
 800cec4:	b083      	sub	sp, #12
 800cec6:	af00      	add	r7, sp, #0
 800cec8:	6078      	str	r0, [r7, #4]
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	4618      	mov	r0, r3
 800cece:	370c      	adds	r7, #12
 800ced0:	46bd      	mov	sp, r7
 800ced2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced6:	4770      	bx	lr

0800ced8 <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800ced8:	b480      	push	{r7}
 800ceda:	b083      	sub	sp, #12
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	4618      	mov	r0, r3
 800cee4:	370c      	adds	r7, #12
 800cee6:	46bd      	mov	sp, r7
 800cee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceec:	4770      	bx	lr

0800ceee <_ZNSt10_Head_baseILj0EP9pruThreadLb0EE7_M_headERS2_>:
 800ceee:	b480      	push	{r7}
 800cef0:	b083      	sub	sp, #12
 800cef2:	af00      	add	r7, sp, #0
 800cef4:	6078      	str	r0, [r7, #4]
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	4618      	mov	r0, r3
 800cefa:	370c      	adds	r7, #12
 800cefc:	46bd      	mov	sp, r7
 800cefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf02:	4770      	bx	lr

0800cf04 <_ZNSt10_Head_baseILj1ESt14default_deleteI17JsonConfigHandlerELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800cf04:	b480      	push	{r7}
 800cf06:	b083      	sub	sp, #12
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	4618      	mov	r0, r3
 800cf10:	370c      	adds	r7, #12
 800cf12:	46bd      	mov	sp, r7
 800cf14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf18:	4770      	bx	lr

0800cf1a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8SPICommsEEEC1Ev>:
      _Tuple_impl()
 800cf1a:	b580      	push	{r7, lr}
 800cf1c:	b082      	sub	sp, #8
 800cf1e:	af00      	add	r7, sp, #0
 800cf20:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800cf22:	6878      	ldr	r0, [r7, #4]
 800cf24:	f000 fa37 	bl	800d396 <_ZNSt10_Head_baseILj1ESt14default_deleteI8SPICommsELb1EEC1Ev>
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	3708      	adds	r7, #8
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bd80      	pop	{r7, pc}

0800cf32 <_ZNSt10_Head_baseILj0EP8SPICommsLb0EEC1Ev>:
      constexpr _Head_base()
 800cf32:	b480      	push	{r7}
 800cf34:	b083      	sub	sp, #12
 800cf36:	af00      	add	r7, sp, #0
 800cf38:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	2200      	movs	r2, #0
 800cf3e:	601a      	str	r2, [r3, #0]
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	4618      	mov	r0, r3
 800cf44:	370c      	adds	r7, #12
 800cf46:	46bd      	mov	sp, r7
 800cf48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4c:	4770      	bx	lr

0800cf4e <_ZNSt10_Head_baseILj0EP8SPICommsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800cf4e:	b480      	push	{r7}
 800cf50:	b083      	sub	sp, #12
 800cf52:	af00      	add	r7, sp, #0
 800cf54:	6078      	str	r0, [r7, #4]
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	4618      	mov	r0, r3
 800cf5a:	370c      	adds	r7, #12
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf62:	4770      	bx	lr

0800cf64 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8SPICommsEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b082      	sub	sp, #8
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
 800cf6c:	6878      	ldr	r0, [r7, #4]
 800cf6e:	f000 fa1d 	bl	800d3ac <_ZNSt10_Head_baseILj1ESt14default_deleteI8SPICommsELb1EE7_M_headERS3_>
 800cf72:	4603      	mov	r3, r0
 800cf74:	4618      	mov	r0, r3
 800cf76:	3708      	adds	r7, #8
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	bd80      	pop	{r7, pc}

0800cf7c <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800cf7c:	b480      	push	{r7}
 800cf7e:	b083      	sub	sp, #12
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	4618      	mov	r0, r3
 800cf88:	370c      	adds	r7, #12
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf90:	4770      	bx	lr

0800cf92 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800cf92:	b480      	push	{r7}
 800cf94:	b083      	sub	sp, #12
 800cf96:	af00      	add	r7, sp, #0
 800cf98:	6078      	str	r0, [r7, #4]
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	370c      	adds	r7, #12
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa6:	4770      	bx	lr

0800cfa8 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b082      	sub	sp, #8
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
 800cfb0:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	6839      	ldr	r1, [r7, #0]
 800cfb6:	6878      	ldr	r0, [r7, #4]
 800cfb8:	f000 fa04 	bl	800d3c4 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3708      	adds	r7, #8
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}

0800cfc6 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800cfc6:	b580      	push	{r7, lr}
 800cfc8:	b084      	sub	sp, #16
 800cfca:	af00      	add	r7, sp, #0
 800cfcc:	60f8      	str	r0, [r7, #12]
 800cfce:	60b9      	str	r1, [r7, #8]
 800cfd0:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800cfd2:	68b8      	ldr	r0, [r7, #8]
 800cfd4:	f000 fa24 	bl	800d420 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>
 800cfd8:	4602      	mov	r2, r0
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	601a      	str	r2, [r3, #0]
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	687a      	ldr	r2, [r7, #4]
 800cfe2:	605a      	str	r2, [r3, #4]
      { }
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	3710      	adds	r7, #16
 800cfea:	46bd      	mov	sp, r7
 800cfec:	bd80      	pop	{r7, pc}

0800cfee <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800cfee:	b580      	push	{r7, lr}
 800cff0:	b084      	sub	sp, #16
 800cff2:	af00      	add	r7, sp, #0
 800cff4:	60f8      	str	r0, [r7, #12]
 800cff6:	60b9      	str	r1, [r7, #8]
 800cff8:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800cffa:	687a      	ldr	r2, [r7, #4]
 800cffc:	68b9      	ldr	r1, [r7, #8]
 800cffe:	68f8      	ldr	r0, [r7, #12]
 800d000:	f000 fa19 	bl	800d436 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>
 800d004:	bf00      	nop
 800d006:	3710      	adds	r7, #16
 800d008:	46bd      	mov	sp, r7
 800d00a:	bd80      	pop	{r7, pc}

0800d00c <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>:
  template<typename _Ptr, typename _Tp>
    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;

  template<typename _Tp>
    constexpr _Tp*
    __to_address(_Tp* __ptr) noexcept
 800d00c:	b480      	push	{r7}
 800d00e:	b083      	sub	sp, #12
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
    {
      static_assert(!std::is_function<_Tp>::value, "not a function pointer");
      return __ptr;
 800d014:	687b      	ldr	r3, [r7, #4]
    }
 800d016:	4618      	mov	r0, r3
 800d018:	370c      	adds	r7, #12
 800d01a:	46bd      	mov	sp, r7
 800d01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d020:	4770      	bx	lr
	...

0800d024 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      _Sp_counted_base() noexcept
 800d024:	b480      	push	{r7}
 800d026:	b083      	sub	sp, #12
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
      : _M_use_count(1), _M_weak_count(1) { }
 800d02c:	4a07      	ldr	r2, [pc, #28]	@ (800d04c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev+0x28>)
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	601a      	str	r2, [r3, #0]
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	2201      	movs	r2, #1
 800d036:	605a      	str	r2, [r3, #4]
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2201      	movs	r2, #1
 800d03c:	609a      	str	r2, [r3, #8]
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	4618      	mov	r0, r3
 800d042:	370c      	adds	r7, #12
 800d044:	46bd      	mov	sp, r7
 800d046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04a:	4770      	bx	lr
 800d04c:	080289bc 	.word	0x080289bc

0800d050 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>:
	explicit _Impl(_Alloc __a) noexcept : _A_base(__a) { }
 800d050:	b580      	push	{r7, lr}
 800d052:	b082      	sub	sp, #8
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
 800d058:	7039      	strb	r1, [r7, #0]
 800d05a:	463b      	mov	r3, r7
 800d05c:	4619      	mov	r1, r3
 800d05e:	6878      	ldr	r0, [r7, #4]
 800d060:	f000 f9fa 	bl	800d458 <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EEC1ERKS0_>
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	4618      	mov	r0, r3
 800d068:	3708      	adds	r7, #8
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}

0800d06e <_ZNSt16allocator_traitsISaIvEE9constructI12CommsHandlerJEEEvRS0_PT_DpOT0_>:
	construct(allocator_type&, _Up* __p, _Args&&... __args)
 800d06e:	b580      	push	{r7, lr}
 800d070:	b082      	sub	sp, #8
 800d072:	af00      	add	r7, sp, #0
 800d074:	6078      	str	r0, [r7, #4]
 800d076:	6039      	str	r1, [r7, #0]
	{ std::_Construct(__p, std::forward<_Args>(__args)...); }
 800d078:	6838      	ldr	r0, [r7, #0]
 800d07a:	f000 f9f9 	bl	800d470 <_ZSt10_ConstructI12CommsHandlerJEEvPT_DpOT0_>
 800d07e:	bf00      	nop
 800d080:	3708      	adds	r7, #8
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}

0800d086 <_ZN9__gnu_cxx16__aligned_bufferI12CommsHandlerE6_M_ptrEv>:
      {
        return static_cast<const void*>(&_M_storage);
      }

      _Tp*
      _M_ptr() noexcept
 800d086:	b580      	push	{r7, lr}
 800d088:	b082      	sub	sp, #8
 800d08a:	af00      	add	r7, sp, #0
 800d08c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800d08e:	6878      	ldr	r0, [r7, #4]
 800d090:	f000 f9ff 	bl	800d492 <_ZN9__gnu_cxx16__aligned_bufferI12CommsHandlerE7_M_addrEv>
 800d094:	4603      	mov	r3, r0
 800d096:	4618      	mov	r0, r3
 800d098:	3708      	adds	r7, #8
 800d09a:	46bd      	mov	sp, r7
 800d09c:	bd80      	pop	{r7, pc}

0800d09e <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EEC1IS0_I8SPICommsEEEOT_>:
	constexpr _Head_base(_UHead&& __h)
 800d09e:	b590      	push	{r4, r7, lr}
 800d0a0:	b083      	sub	sp, #12
 800d0a2:	af00      	add	r7, sp, #0
 800d0a4:	6078      	str	r0, [r7, #4]
 800d0a6:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800d0a8:	687c      	ldr	r4, [r7, #4]
 800d0aa:	6838      	ldr	r0, [r7, #0]
 800d0ac:	f7fe fc88 	bl	800b9c0 <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800d0b0:	4603      	mov	r3, r0
 800d0b2:	4619      	mov	r1, r3
 800d0b4:	4620      	mov	r0, r4
 800d0b6:	f000 f9f7 	bl	800d4a8 <_ZNSt14default_deleteI14CommsInterfaceEC1I8SPICommsvEERKS_IT_E>
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	4618      	mov	r0, r3
 800d0be:	370c      	adds	r7, #12
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bd90      	pop	{r4, r7, pc}

0800d0c4 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800d0c4:	b480      	push	{r7}
 800d0c6:	b083      	sub	sp, #12
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	370c      	adds	r7, #12
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d8:	4770      	bx	lr

0800d0da <_ZNSt10_Head_baseILj1ESt14default_deleteI9pruThreadELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800d0da:	b480      	push	{r7}
 800d0dc:	b083      	sub	sp, #12
 800d0de:	af00      	add	r7, sp, #0
 800d0e0:	6078      	str	r0, [r7, #4]
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	370c      	adds	r7, #12
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ee:	4770      	bx	lr

0800d0f0 <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b082      	sub	sp, #8
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f000 f9e0 	bl	800d4c0 <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EE7_M_headERKS2_>
 800d100:	4603      	mov	r3, r0
 800d102:	4618      	mov	r0, r3
 800d104:	3708      	adds	r7, #8
 800d106:	46bd      	mov	sp, r7
 800d108:	bd80      	pop	{r7, pc}

0800d10a <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE7getDataEv>:
  VariantData* getData() const {
 800d10a:	b590      	push	{r4, r7, lr}
 800d10c:	b085      	sub	sp, #20
 800d10e:	af02      	add	r7, sp, #8
 800d110:	6078      	str	r0, [r7, #4]
        VariantAttorney::getData(upstream_), key_,
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	3304      	adds	r3, #4
 800d116:	4618      	mov	r0, r3
 800d118:	f000 f874 	bl	800d204 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_7getDataEERT_>
 800d11c:	4604      	mov	r4, r0
        VariantAttorney::getResourceManager(upstream_));
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	3304      	adds	r3, #4
 800d122:	4618      	mov	r0, r3
 800d124:	f000 f88d 	bl	800d242 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>
 800d128:	4602      	mov	r2, r0
    return VariantData::getMember(
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	9200      	str	r2, [sp, #0]
 800d12e:	3314      	adds	r3, #20
 800d130:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d132:	4620      	mov	r0, r4
 800d134:	f7fb fad0 	bl	80086d8 <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE>
 800d138:	4603      	mov	r3, r0
  }
 800d13a:	4618      	mov	r0, r3
 800d13c:	370c      	adds	r7, #12
 800d13e:	46bd      	mov	sp, r7
 800d140:	bd90      	pop	{r4, r7, pc}

0800d142 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 800d142:	b580      	push	{r7, lr}
 800d144:	b082      	sub	sp, #8
 800d146:	af00      	add	r7, sp, #0
 800d148:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(upstream_);
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	3304      	adds	r3, #4
 800d14e:	4618      	mov	r0, r3
 800d150:	f000 f877 	bl	800d242 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>
 800d154:	4603      	mov	r3, r0
  }
 800d156:	4618      	mov	r0, r3
 800d158:	3708      	adds	r7, #8
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd80      	pop	{r7, pc}

0800d15e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE15getOrCreateDataEv>:
  VariantData* getOrCreateData() const {
 800d15e:	b580      	push	{r7, lr}
 800d160:	b082      	sub	sp, #8
 800d162:	af00      	add	r7, sp, #0
 800d164:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getOrCreateData(derived());
 800d166:	6878      	ldr	r0, [r7, #4]
 800d168:	f7ff fdb6 	bl	800ccd8 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7derivedEv>
 800d16c:	4603      	mov	r3, r0
 800d16e:	4618      	mov	r0, r3
 800d170:	f000 f9b1 	bl	800d4d6 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEPNS1_11VariantDataERT_>
 800d174:	4603      	mov	r3, r0
  }
 800d176:	4618      	mov	r0, r3
 800d178:	3708      	adds	r7, #8
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bd80      	pop	{r7, pc}

0800d17e <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>:
#endif
  return true;
}

template <typename T>
enable_if_t<is_unsigned<T>::value, bool> VariantData::setInteger(
 800d17e:	b5b0      	push	{r4, r5, r7, lr}
 800d180:	b086      	sub	sp, #24
 800d182:	af00      	add	r7, sp, #0
 800d184:	60f8      	str	r0, [r7, #12]
 800d186:	60b9      	str	r1, [r7, #8]
 800d188:	607a      	str	r2, [r7, #4]
    T value, ResourceManager* resources) {
  ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
  (void)resources;                                 // silence warning

  if (canConvertNumber<uint32_t>(value)) {
 800d18a:	68b8      	ldr	r0, [r7, #8]
 800d18c:	f7fa fd6d 	bl	8007c6a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 800d190:	4603      	mov	r3, r0
 800d192:	2b00      	cmp	r3, #0
 800d194:	d006      	beq.n	800d1a4 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x26>
    type_ = VariantType::Uint32;
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	220a      	movs	r2, #10
 800d19a:	711a      	strb	r2, [r3, #4]
    content_.asUint32 = static_cast<uint32_t>(value);
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	68ba      	ldr	r2, [r7, #8]
 800d1a0:	601a      	str	r2, [r3, #0]
 800d1a2:	e02a      	b.n	800d1fa <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7c>
  }
#if ARDUINOJSON_USE_LONG_LONG
  else {
    auto extension = resources->allocExtension();
 800d1a4:	f107 0310 	add.w	r3, r7, #16
 800d1a8:	6879      	ldr	r1, [r7, #4]
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	f7f7 fe15 	bl	8004dda <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 800d1b0:	f107 0310 	add.w	r3, r7, #16
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	f7fb ff32 	bl	800901e <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	f083 0301 	eor.w	r3, r3, #1
 800d1c0:	b2db      	uxtb	r3, r3
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d001      	beq.n	800d1ca <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x4c>
      return false;
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	e018      	b.n	800d1fc <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7e>
    type_ = VariantType::Uint64;
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	221a      	movs	r2, #26
 800d1ce:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 800d1d0:	f107 0310 	add.w	r3, r7, #16
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	f7fb ff33 	bl	8009040 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 800d1da:	4603      	mov	r3, r0
 800d1dc:	461a      	mov	r2, r3
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	801a      	strh	r2, [r3, #0]
    extension->asUint64 = value;
 800d1e2:	68bb      	ldr	r3, [r7, #8]
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	461c      	mov	r4, r3
 800d1e8:	4615      	mov	r5, r2
 800d1ea:	f107 0310 	add.w	r3, r7, #16
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	f7fb ff32 	bl	8009058 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>
 800d1f4:	4603      	mov	r3, r0
 800d1f6:	e9c3 4500 	strd	r4, r5, [r3]
  }
#endif
  return true;
 800d1fa:	2301      	movs	r3, #1
}
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	3718      	adds	r7, #24
 800d200:	46bd      	mov	sp, r7
 800d202:	bdb0      	pop	{r4, r5, r7, pc}

0800d204 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 800d204:	b5b0      	push	{r4, r5, r7, lr}
 800d206:	b084      	sub	sp, #16
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	60fb      	str	r3, [r7, #12]
    return VariantAttorney::getResourceManager(upstream_);
  }

  FORCE_INLINE VariantData* getData() const {
    return VariantData::getElement(
        VariantAttorney::getData(upstream_), index_,
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	3304      	adds	r3, #4
 800d214:	4618      	mov	r0, r3
 800d216:	f000 fa0e 	bl	800d636 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_9JsonArrayEEEDTcldtfp_7getDataEERT_>
 800d21a:	4605      	mov	r5, r0
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	68dc      	ldr	r4, [r3, #12]
        VariantAttorney::getResourceManager(upstream_));
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	3304      	adds	r3, #4
 800d224:	4618      	mov	r0, r3
 800d226:	f000 fa12 	bl	800d64e <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_9JsonArrayEEEDTcldtfp_18getResourceManagerEERT_>
 800d22a:	4603      	mov	r3, r0
    return VariantData::getElement(
 800d22c:	461a      	mov	r2, r3
 800d22e:	4621      	mov	r1, r4
 800d230:	4628      	mov	r0, r5
 800d232:	f7fc fb4e 	bl	80098d2 <_ZN11ArduinoJson8V730HB226detail11VariantData10getElementEPKS2_jPKNS1_15ResourceManagerE>
 800d236:	4603      	mov	r3, r0
        VariantAttorney::getResourceManager(upstream_));
 800d238:	bf00      	nop
  }
 800d23a:	4618      	mov	r0, r3
 800d23c:	3710      	adds	r7, #16
 800d23e:	46bd      	mov	sp, r7
 800d240:	bdb0      	pop	{r4, r5, r7, pc}

0800d242 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 800d242:	b580      	push	{r7, lr}
 800d244:	b082      	sub	sp, #8
 800d246:	af00      	add	r7, sp, #0
 800d248:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 800d24a:	6878      	ldr	r0, [r7, #4]
 800d24c:	f000 f94f 	bl	800d4ee <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE18getResourceManagerEv>
 800d250:	4603      	mov	r3, r0
  }
 800d252:	4618      	mov	r0, r3
 800d254:	3708      	adds	r7, #8
 800d256:	46bd      	mov	sp, r7
 800d258:	bd80      	pop	{r7, pc}

0800d25a <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 800d25a:	b580      	push	{r7, lr}
 800d25c:	b082      	sub	sp, #8
 800d25e:	af00      	add	r7, sp, #0
 800d260:	6078      	str	r0, [r7, #4]
 800d262:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 800d264:	683b      	ldr	r3, [r7, #0]
 800d266:	681a      	ldr	r2, [r3, #0]
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	601a      	str	r2, [r3, #0]
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	3304      	adds	r3, #4
 800d270:	4618      	mov	r0, r3
 800d272:	f7fe fe63 	bl	800bf3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	1d1a      	adds	r2, r3, #4
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	3304      	adds	r3, #4
 800d27e:	4619      	mov	r1, r3
 800d280:	4610      	mov	r0, r2
 800d282:	f7ff fa1a 	bl	800c6ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = nullptr;
 800d286:	683b      	ldr	r3, [r7, #0]
 800d288:	2200      	movs	r2, #0
 800d28a:	601a      	str	r2, [r3, #0]
      }
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	4618      	mov	r0, r3
 800d290:	3708      	adds	r7, #8
 800d292:	46bd      	mov	sp, r7
 800d294:	bd80      	pop	{r7, pc}

0800d296 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_max_sizeERKS3_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static _GLIBCXX20_CONSTEXPR size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800d296:	b580      	push	{r7, lr}
 800d298:	b084      	sub	sp, #16
 800d29a:	af00      	add	r7, sp, #0
 800d29c:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 800d29e:	f06f 4370 	mvn.w	r3, #4026531840	@ 0xf0000000
 800d2a2:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800d2a4:	6878      	ldr	r0, [r7, #4]
 800d2a6:	f000 f930 	bl	800d50a <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE8max_sizeERKS3_>
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800d2ae:	f107 0208 	add.w	r2, r7, #8
 800d2b2:	f107 030c 	add.w	r3, r7, #12
 800d2b6:	4611      	mov	r1, r2
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f7fc faa9 	bl	8009810 <_ZSt3minIjERKT_S2_S2_>
 800d2be:	4603      	mov	r3, r0
 800d2c0:	681b      	ldr	r3, [r3, #0]
      }
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	3710      	adds	r7, #16
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	bd80      	pop	{r7, pc}

0800d2ca <_ZNKSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800d2ca:	b480      	push	{r7}
 800d2cc:	b083      	sub	sp, #12
 800d2ce:	af00      	add	r7, sp, #0
 800d2d0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	370c      	adds	r7, #12
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2de:	4770      	bx	lr

0800d2e0 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b084      	sub	sp, #16
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	60f8      	str	r0, [r7, #12]
 800d2e8:	60b9      	str	r1, [r7, #8]
 800d2ea:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800d2ec:	68f8      	ldr	r0, [r7, #12]
 800d2ee:	f000 f918 	bl	800d522 <_ZNKSt15__new_allocatorISt10shared_ptrI6ModuleEE11_M_max_sizeEv>
 800d2f2:	4602      	mov	r2, r0
 800d2f4:	68bb      	ldr	r3, [r7, #8]
 800d2f6:	4293      	cmp	r3, r2
 800d2f8:	bf8c      	ite	hi
 800d2fa:	2301      	movhi	r3, #1
 800d2fc:	2300      	movls	r3, #0
 800d2fe:	b2db      	uxtb	r3, r3
 800d300:	2b00      	cmp	r3, #0
 800d302:	bf14      	ite	ne
 800d304:	2301      	movne	r3, #1
 800d306:	2300      	moveq	r3, #0
 800d308:	b2db      	uxtb	r3, r3
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d007      	beq.n	800d31e <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800d30e:	68bb      	ldr	r3, [r7, #8]
 800d310:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d314:	d301      	bcc.n	800d31a <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800d316:	f018 fdf7 	bl	8025f08 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800d31a:	f018 fdf2 	bl	8025f02 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800d31e:	68bb      	ldr	r3, [r7, #8]
 800d320:	00db      	lsls	r3, r3, #3
 800d322:	4618      	mov	r0, r3
 800d324:	f018 fdda 	bl	8025edc <_Znwj>
 800d328:	4603      	mov	r3, r0
 800d32a:	bf00      	nop
      }
 800d32c:	4618      	mov	r0, r3
 800d32e:	3710      	adds	r7, #16
 800d330:	46bd      	mov	sp, r7
 800d332:	bd80      	pop	{r7, pc}

0800d334 <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleEET_S4_>:
    __niter_base(_Iterator __it)
 800d334:	b480      	push	{r7}
 800d336:	b083      	sub	sp, #12
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
    { return __it; }
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	4618      	mov	r0, r3
 800d340:	370c      	adds	r7, #12
 800d342:	46bd      	mov	sp, r7
 800d344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d348:	4770      	bx	lr

0800d34a <_ZSt14__relocate_a_1IPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 800d34a:	b590      	push	{r4, r7, lr}
 800d34c:	b087      	sub	sp, #28
 800d34e:	af00      	add	r7, sp, #0
 800d350:	60f8      	str	r0, [r7, #12]
 800d352:	60b9      	str	r1, [r7, #8]
 800d354:	607a      	str	r2, [r7, #4]
 800d356:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 800d35c:	e012      	b.n	800d384 <_ZSt14__relocate_a_1IPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_+0x3a>
	std::__relocate_object_a(std::__addressof(*__cur),
 800d35e:	6978      	ldr	r0, [r7, #20]
 800d360:	f7ff fb8e 	bl	800ca80 <_ZSt11__addressofISt10shared_ptrI6ModuleEEPT_RS3_>
 800d364:	4604      	mov	r4, r0
 800d366:	68f8      	ldr	r0, [r7, #12]
 800d368:	f7ff fb8a 	bl	800ca80 <_ZSt11__addressofISt10shared_ptrI6ModuleEEPT_RS3_>
 800d36c:	4603      	mov	r3, r0
 800d36e:	683a      	ldr	r2, [r7, #0]
 800d370:	4619      	mov	r1, r3
 800d372:	4620      	mov	r0, r4
 800d374:	f000 f8e1 	bl	800d53a <_ZSt19__relocate_object_aISt10shared_ptrI6ModuleES2_SaIS2_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	3308      	adds	r3, #8
 800d37c:	60fb      	str	r3, [r7, #12]
 800d37e:	697b      	ldr	r3, [r7, #20]
 800d380:	3308      	adds	r3, #8
 800d382:	617b      	str	r3, [r7, #20]
 800d384:	68fa      	ldr	r2, [r7, #12]
 800d386:	68bb      	ldr	r3, [r7, #8]
 800d388:	429a      	cmp	r2, r3
 800d38a:	d1e8      	bne.n	800d35e <_ZSt14__relocate_a_1IPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_+0x14>
      return __cur;
 800d38c:	697b      	ldr	r3, [r7, #20]
    }
 800d38e:	4618      	mov	r0, r3
 800d390:	371c      	adds	r7, #28
 800d392:	46bd      	mov	sp, r7
 800d394:	bd90      	pop	{r4, r7, pc}

0800d396 <_ZNSt10_Head_baseILj1ESt14default_deleteI8SPICommsELb1EEC1Ev>:
      constexpr _Head_base()
 800d396:	b480      	push	{r7}
 800d398:	b083      	sub	sp, #12
 800d39a:	af00      	add	r7, sp, #0
 800d39c:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	370c      	adds	r7, #12
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3aa:	4770      	bx	lr

0800d3ac <_ZNSt10_Head_baseILj1ESt14default_deleteI8SPICommsELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800d3ac:	b480      	push	{r7}
 800d3ae:	b083      	sub	sp, #12
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	370c      	adds	r7, #12
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c0:	4770      	bx	lr
	...

0800d3c4 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b084      	sub	sp, #16
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	60f8      	str	r0, [r7, #12]
 800d3cc:	60b9      	str	r1, [r7, #8]
 800d3ce:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800d3d0:	68f8      	ldr	r0, [r7, #12]
 800d3d2:	f000 f8ff 	bl	800d5d4 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 800d3d6:	4602      	mov	r2, r0
 800d3d8:	68bb      	ldr	r3, [r7, #8]
 800d3da:	4293      	cmp	r3, r2
 800d3dc:	bf8c      	ite	hi
 800d3de:	2301      	movhi	r3, #1
 800d3e0:	2300      	movls	r3, #0
 800d3e2:	b2db      	uxtb	r3, r3
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	bf14      	ite	ne
 800d3e8:	2301      	movne	r3, #1
 800d3ea:	2300      	moveq	r3, #0
 800d3ec:	b2db      	uxtb	r3, r3
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d007      	beq.n	800d402 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800d3f2:	68bb      	ldr	r3, [r7, #8]
 800d3f4:	4a09      	ldr	r2, [pc, #36]	@ (800d41c <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x58>)
 800d3f6:	4293      	cmp	r3, r2
 800d3f8:	d901      	bls.n	800d3fe <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800d3fa:	f018 fd85 	bl	8025f08 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800d3fe:	f018 fd80 	bl	8025f02 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800d402:	68bb      	ldr	r3, [r7, #8]
 800d404:	222c      	movs	r2, #44	@ 0x2c
 800d406:	fb02 f303 	mul.w	r3, r2, r3
 800d40a:	4618      	mov	r0, r3
 800d40c:	f018 fd66 	bl	8025edc <_Znwj>
 800d410:	4603      	mov	r3, r0
 800d412:	bf00      	nop
      }
 800d414:	4618      	mov	r0, r3
 800d416:	3710      	adds	r7, #16
 800d418:	46bd      	mov	sp, r7
 800d41a:	bd80      	pop	{r7, pc}
 800d41c:	05d1745d 	.word	0x05d1745d

0800d420 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800d420:	b480      	push	{r7}
 800d422:	b083      	sub	sp, #12
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	4618      	mov	r0, r3
 800d42c:	370c      	adds	r7, #12
 800d42e:	46bd      	mov	sp, r7
 800d430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d434:	4770      	bx	lr

0800d436 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 800d436:	b580      	push	{r7, lr}
 800d438:	b084      	sub	sp, #16
 800d43a:	af00      	add	r7, sp, #0
 800d43c:	60f8      	str	r0, [r7, #12]
 800d43e:	60b9      	str	r1, [r7, #8]
 800d440:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	222c      	movs	r2, #44	@ 0x2c
 800d446:	fb02 f303 	mul.w	r3, r2, r3
 800d44a:	4619      	mov	r1, r3
 800d44c:	68b8      	ldr	r0, [r7, #8]
 800d44e:	f018 fd34 	bl	8025eba <_ZdlPvj>
      }
 800d452:	3710      	adds	r7, #16
 800d454:	46bd      	mov	sp, r7
 800d456:	bd80      	pop	{r7, pc}

0800d458 <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EEC1ERKS0_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 800d458:	b480      	push	{r7}
 800d45a:	b083      	sub	sp, #12
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
 800d460:	6039      	str	r1, [r7, #0]
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	4618      	mov	r0, r3
 800d466:	370c      	adds	r7, #12
 800d468:	46bd      	mov	sp, r7
 800d46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46e:	4770      	bx	lr

0800d470 <_ZSt10_ConstructI12CommsHandlerJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 800d470:	b580      	push	{r7, lr}
 800d472:	b082      	sub	sp, #8
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	4619      	mov	r1, r3
 800d47c:	2020      	movs	r0, #32
 800d47e:	f7fc f93f 	bl	8009700 <_ZnwjPv>
 800d482:	4603      	mov	r3, r0
 800d484:	4618      	mov	r0, r3
 800d486:	f001 ffef 	bl	800f468 <_ZN12CommsHandlerC1Ev>
    }
 800d48a:	bf00      	nop
 800d48c:	3708      	adds	r7, #8
 800d48e:	46bd      	mov	sp, r7
 800d490:	bd80      	pop	{r7, pc}

0800d492 <_ZN9__gnu_cxx16__aligned_bufferI12CommsHandlerE7_M_addrEv>:
      _M_addr() noexcept
 800d492:	b480      	push	{r7}
 800d494:	b083      	sub	sp, #12
 800d496:	af00      	add	r7, sp, #0
 800d498:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 800d49a:	687b      	ldr	r3, [r7, #4]
      }
 800d49c:	4618      	mov	r0, r3
 800d49e:	370c      	adds	r7, #12
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a6:	4770      	bx	lr

0800d4a8 <_ZNSt14default_deleteI14CommsInterfaceEC1I8SPICommsvEERKS_IT_E>:
        default_delete(const default_delete<_Up>&) noexcept { }
 800d4a8:	b480      	push	{r7}
 800d4aa:	b083      	sub	sp, #12
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
 800d4b0:	6039      	str	r1, [r7, #0]
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	370c      	adds	r7, #12
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4be:	4770      	bx	lr

0800d4c0 <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800d4c0:	b480      	push	{r7}
 800d4c2:	b083      	sub	sp, #12
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	370c      	adds	r7, #12
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d4:	4770      	bx	lr

0800d4d6 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEPNS1_11VariantDataERT_>:
  static VariantData* getOrCreateData(TClient& client) {
 800d4d6:	b580      	push	{r7, lr}
 800d4d8:	b082      	sub	sp, #8
 800d4da:	af00      	add	r7, sp, #0
 800d4dc:	6078      	str	r0, [r7, #4]
    return client.getOrCreateData();
 800d4de:	6878      	ldr	r0, [r7, #4]
 800d4e0:	f000 f886 	bl	800d5f0 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE15getOrCreateDataEv>
 800d4e4:	4603      	mov	r3, r0
  }
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	3708      	adds	r7, #8
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	bd80      	pop	{r7, pc}

0800d4ee <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 800d4ee:	b580      	push	{r7, lr}
 800d4f0:	b082      	sub	sp, #8
 800d4f2:	af00      	add	r7, sp, #0
 800d4f4:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(upstream_);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	3304      	adds	r3, #4
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f000 f8a7 	bl	800d64e <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_9JsonArrayEEEDTcldtfp_18getResourceManagerEERT_>
 800d500:	4603      	mov	r3, r0
  }
 800d502:	4618      	mov	r0, r3
 800d504:	3708      	adds	r7, #8
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}

0800d50a <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE8max_sizeERKS3_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800d50a:	b580      	push	{r7, lr}
 800d50c:	b082      	sub	sp, #8
 800d50e:	af00      	add	r7, sp, #0
 800d510:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 800d512:	6878      	ldr	r0, [r7, #4]
 800d514:	f000 f8a7 	bl	800d666 <_ZNKSt15__new_allocatorISt10shared_ptrI6ModuleEE8max_sizeEv>
 800d518:	4603      	mov	r3, r0
      }
 800d51a:	4618      	mov	r0, r3
 800d51c:	3708      	adds	r7, #8
 800d51e:	46bd      	mov	sp, r7
 800d520:	bd80      	pop	{r7, pc}

0800d522 <_ZNKSt15__new_allocatorISt10shared_ptrI6ModuleEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800d522:	b480      	push	{r7}
 800d524:	b083      	sub	sp, #12
 800d526:	af00      	add	r7, sp, #0
 800d528:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800d52a:	f06f 4370 	mvn.w	r3, #4026531840	@ 0xf0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 800d52e:	4618      	mov	r0, r3
 800d530:	370c      	adds	r7, #12
 800d532:	46bd      	mov	sp, r7
 800d534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d538:	4770      	bx	lr

0800d53a <_ZSt19__relocate_object_aISt10shared_ptrI6ModuleES2_SaIS2_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 800d53a:	b580      	push	{r7, lr}
 800d53c:	b084      	sub	sp, #16
 800d53e:	af00      	add	r7, sp, #0
 800d540:	60f8      	str	r0, [r7, #12]
 800d542:	60b9      	str	r1, [r7, #8]
 800d544:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 800d546:	68b8      	ldr	r0, [r7, #8]
 800d548:	f7fd ff12 	bl	800b370 <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>
 800d54c:	4603      	mov	r3, r0
 800d54e:	461a      	mov	r2, r3
 800d550:	68f9      	ldr	r1, [r7, #12]
 800d552:	6878      	ldr	r0, [r7, #4]
 800d554:	f7fe febb 	bl	800c2ce <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 800d558:	68b8      	ldr	r0, [r7, #8]
 800d55a:	f7ff fa91 	bl	800ca80 <_ZSt11__addressofISt10shared_ptrI6ModuleEEPT_RS3_>
 800d55e:	4603      	mov	r3, r0
 800d560:	4619      	mov	r1, r3
 800d562:	6878      	ldr	r0, [r7, #4]
 800d564:	f7ff f9fd 	bl	800c962 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE7destroyIS2_EEvRS3_PT_>
    }
 800d568:	bf00      	nop
 800d56a:	3710      	adds	r7, #16
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd80      	pop	{r7, pc}

0800d570 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE>:
  VariantData* getOrAddMember(TAdaptedString key, ResourceManager* resources) {
 800d570:	b580      	push	{r7, lr}
 800d572:	b088      	sub	sp, #32
 800d574:	af02      	add	r7, sp, #8
 800d576:	60f8      	str	r0, [r7, #12]
 800d578:	4638      	mov	r0, r7
 800d57a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (key.isNull())
 800d57e:	463b      	mov	r3, r7
 800d580:	4618      	mov	r0, r3
 800d582:	f7f6 fd02 	bl	8003f8a <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>
 800d586:	4603      	mov	r3, r0
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d001      	beq.n	800d590 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x20>
      return nullptr;
 800d58c:	2300      	movs	r3, #0
 800d58e:	e01d      	b.n	800d5cc <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x5c>
    auto obj = isNull() ? &toObject() : asObject();
 800d590:	68f8      	ldr	r0, [r7, #12]
 800d592:	f7fc f9d9 	bl	8009948 <_ZNK11ArduinoJson8V730HB226detail11VariantData6isNullEv>
 800d596:	4603      	mov	r3, r0
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d004      	beq.n	800d5a6 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x36>
 800d59c:	68f8      	ldr	r0, [r7, #12]
 800d59e:	f7f6 ffbb 	bl	8004518 <_ZN11ArduinoJson8V730HB226detail11VariantData8toObjectEv>
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	e003      	b.n	800d5ae <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x3e>
 800d5a6:	68f8      	ldr	r0, [r7, #12]
 800d5a8:	f7f6 feab 	bl	8004302 <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	617b      	str	r3, [r7, #20]
    if (!obj)
 800d5b0:	697b      	ldr	r3, [r7, #20]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d101      	bne.n	800d5ba <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x4a>
      return nullptr;
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	e008      	b.n	800d5cc <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x5c>
    return obj->getOrAddMember(key, resources);
 800d5ba:	6978      	ldr	r0, [r7, #20]
 800d5bc:	6a3b      	ldr	r3, [r7, #32]
 800d5be:	9300      	str	r3, [sp, #0]
 800d5c0:	463b      	mov	r3, r7
 800d5c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d5c4:	f000 f85b 	bl	800d67e <_ZN11ArduinoJson8V730HB226detail10ObjectData14getOrAddMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	bf00      	nop
  }
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	3718      	adds	r7, #24
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}

0800d5d4 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800d5d4:	b480      	push	{r7}
 800d5d6:	b083      	sub	sp, #12
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800d5dc:	4b03      	ldr	r3, [pc, #12]	@ (800d5ec <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv+0x18>)
      }
 800d5de:	4618      	mov	r0, r3
 800d5e0:	370c      	adds	r7, #12
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e8:	4770      	bx	lr
 800d5ea:	bf00      	nop
 800d5ec:	02e8ba2e 	.word	0x02e8ba2e

0800d5f0 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE15getOrCreateDataEv>:

  VariantData* getOrCreateData() const {
 800d5f0:	b590      	push	{r4, r7, lr}
 800d5f2:	b087      	sub	sp, #28
 800d5f4:	af02      	add	r7, sp, #8
 800d5f6:	6078      	str	r0, [r7, #4]
    auto data = VariantAttorney::getOrCreateData(upstream_);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	3304      	adds	r3, #4
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	f000 f85f 	bl	800d6c0 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEPNS1_11VariantDataERT_>
 800d602:	60f8      	str	r0, [r7, #12]
    if (!data)
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d101      	bne.n	800d60e <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE15getOrCreateDataEv+0x1e>
      return nullptr;
 800d60a:	2300      	movs	r3, #0
 800d60c:	e00f      	b.n	800d62e <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE15getOrCreateDataEv+0x3e>
    return data->getOrAddMember(key_,
 800d60e:	68fc      	ldr	r4, [r7, #12]
                                VariantAttorney::getResourceManager(upstream_));
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	3304      	adds	r3, #4
    return data->getOrAddMember(key_,
 800d614:	4618      	mov	r0, r3
 800d616:	f7ff fe14 	bl	800d242 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>
 800d61a:	4602      	mov	r2, r0
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	9200      	str	r2, [sp, #0]
 800d620:	3314      	adds	r3, #20
 800d622:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d624:	4620      	mov	r0, r4
 800d626:	f7ff ffa3 	bl	800d570 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE>
 800d62a:	4603      	mov	r3, r0
                                VariantAttorney::getResourceManager(upstream_));
 800d62c:	bf00      	nop
  }
 800d62e:	4618      	mov	r0, r3
 800d630:	3714      	adds	r7, #20
 800d632:	46bd      	mov	sp, r7
 800d634:	bd90      	pop	{r4, r7, pc}

0800d636 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_9JsonArrayEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 800d636:	b580      	push	{r7, lr}
 800d638:	b082      	sub	sp, #8
 800d63a:	af00      	add	r7, sp, #0
 800d63c:	6078      	str	r0, [r7, #4]
    return client.getData();
 800d63e:	6878      	ldr	r0, [r7, #4]
 800d640:	f7fc fa27 	bl	8009a92 <_ZNK11ArduinoJson8V730HB229JsonArray7getDataEv>
 800d644:	4603      	mov	r3, r0
  }
 800d646:	4618      	mov	r0, r3
 800d648:	3708      	adds	r7, #8
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd80      	pop	{r7, pc}

0800d64e <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_9JsonArrayEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 800d64e:	b580      	push	{r7, lr}
 800d650:	b082      	sub	sp, #8
 800d652:	af00      	add	r7, sp, #0
 800d654:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 800d656:	6878      	ldr	r0, [r7, #4]
 800d658:	f7fc fa0f 	bl	8009a7a <_ZNK11ArduinoJson8V730HB229JsonArray18getResourceManagerEv>
 800d65c:	4603      	mov	r3, r0
  }
 800d65e:	4618      	mov	r0, r3
 800d660:	3708      	adds	r7, #8
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}

0800d666 <_ZNKSt15__new_allocatorISt10shared_ptrI6ModuleEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800d666:	b580      	push	{r7, lr}
 800d668:	b082      	sub	sp, #8
 800d66a:	af00      	add	r7, sp, #0
 800d66c:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 800d66e:	6878      	ldr	r0, [r7, #4]
 800d670:	f7ff ff57 	bl	800d522 <_ZNKSt15__new_allocatorISt10shared_ptrI6ModuleEE11_M_max_sizeEv>
 800d674:	4603      	mov	r3, r0
 800d676:	4618      	mov	r0, r3
 800d678:	3708      	adds	r7, #8
 800d67a:	46bd      	mov	sp, r7
 800d67c:	bd80      	pop	{r7, pc}

0800d67e <_ZN11ArduinoJson8V730HB226detail10ObjectData14getOrAddMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>:
  it.next(resources);
  return it.data();
}

template <typename TAdaptedString>
VariantData* ObjectData::getOrAddMember(TAdaptedString key,
 800d67e:	b580      	push	{r7, lr}
 800d680:	b088      	sub	sp, #32
 800d682:	af02      	add	r7, sp, #8
 800d684:	60f8      	str	r0, [r7, #12]
 800d686:	4638      	mov	r0, r7
 800d688:	e880 000e 	stmia.w	r0, {r1, r2, r3}
                                        ResourceManager* resources) {
  auto data = getMember(key, resources);
 800d68c:	6a3b      	ldr	r3, [r7, #32]
 800d68e:	9300      	str	r3, [sp, #0]
 800d690:	463b      	mov	r3, r7
 800d692:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d694:	68f8      	ldr	r0, [r7, #12]
 800d696:	f7f9 fcb6 	bl	8007006 <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE>
 800d69a:	6178      	str	r0, [r7, #20]
  if (data)
 800d69c:	697b      	ldr	r3, [r7, #20]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d001      	beq.n	800d6a6 <_ZN11ArduinoJson8V730HB226detail10ObjectData14getOrAddMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x28>
    return data;
 800d6a2:	697b      	ldr	r3, [r7, #20]
 800d6a4:	e008      	b.n	800d6b8 <_ZN11ArduinoJson8V730HB226detail10ObjectData14getOrAddMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x3a>
  return addMember(key, resources);
 800d6a6:	6a3b      	ldr	r3, [r7, #32]
 800d6a8:	9300      	str	r3, [sp, #0]
 800d6aa:	463b      	mov	r3, r7
 800d6ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d6ae:	68f8      	ldr	r0, [r7, #12]
 800d6b0:	f000 f812 	bl	800d6d8 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	bf00      	nop
}
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	3718      	adds	r7, #24
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	bd80      	pop	{r7, pc}

0800d6c0 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEPNS1_11VariantDataERT_>:
  static VariantData* getOrCreateData(TClient& client) {
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b082      	sub	sp, #8
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
    return client.getOrCreateData();
 800d6c8:	6878      	ldr	r0, [r7, #4]
 800d6ca:	f000 f85b 	bl	800d784 <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE15getOrCreateDataEv>
 800d6ce:	4603      	mov	r3, r0
  }
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	3708      	adds	r7, #8
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	bd80      	pop	{r7, pc}

0800d6d8 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>:
                                     ResourceManager* resources) {
  remove(findKey(key, resources), resources);
}

template <typename TAdaptedString>
inline VariantData* ObjectData::addMember(TAdaptedString key,
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b08a      	sub	sp, #40	@ 0x28
 800d6dc:	af02      	add	r7, sp, #8
 800d6de:	60f8      	str	r0, [r7, #12]
 800d6e0:	4638      	mov	r0, r7
 800d6e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
                                          ResourceManager* resources) {
  auto keySlot = resources->allocVariant();
 800d6e6:	f107 0318 	add.w	r3, r7, #24
 800d6ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	f7f7 faef 	bl	8004cd0 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!keySlot)
 800d6f2:	f107 0318 	add.w	r3, r7, #24
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	f7f8 fd8e 	bl	8006218 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 800d6fc:	4603      	mov	r3, r0
 800d6fe:	f083 0301 	eor.w	r3, r3, #1
 800d702:	b2db      	uxtb	r3, r3
 800d704:	2b00      	cmp	r3, #0
 800d706:	d001      	beq.n	800d70c <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x34>
    return nullptr;
 800d708:	2300      	movs	r3, #0
 800d70a:	e037      	b.n	800d77c <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa4>

  auto valueSlot = resources->allocVariant();
 800d70c:	f107 0310 	add.w	r3, r7, #16
 800d710:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d712:	4618      	mov	r0, r3
 800d714:	f7f7 fadc 	bl	8004cd0 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!valueSlot)
 800d718:	f107 0310 	add.w	r3, r7, #16
 800d71c:	4618      	mov	r0, r3
 800d71e:	f7f8 fd7b 	bl	8006218 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 800d722:	4603      	mov	r3, r0
 800d724:	f083 0301 	eor.w	r3, r3, #1
 800d728:	b2db      	uxtb	r3, r3
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d001      	beq.n	800d732 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x5a>
    return nullptr;
 800d72e:	2300      	movs	r3, #0
 800d730:	e024      	b.n	800d77c <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa4>

  if (!keySlot->setString(key, resources))
 800d732:	f107 0318 	add.w	r3, r7, #24
 800d736:	4618      	mov	r0, r3
 800d738:	f7f8 fd97 	bl	800626a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>
 800d73c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d73e:	9300      	str	r3, [sp, #0]
 800d740:	463b      	mov	r3, r7
 800d742:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d744:	f7fd fe50 	bl	800b3e8 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE>
 800d748:	4603      	mov	r3, r0
 800d74a:	f083 0301 	eor.w	r3, r3, #1
 800d74e:	b2db      	uxtb	r3, r3
 800d750:	2b00      	cmp	r3, #0
 800d752:	d001      	beq.n	800d758 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x80>
    return nullptr;
 800d754:	2300      	movs	r3, #0
 800d756:	e011      	b.n	800d77c <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa4>

  CollectionData::appendPair(keySlot, valueSlot, resources);
 800d758:	68f8      	ldr	r0, [r7, #12]
 800d75a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d75c:	9301      	str	r3, [sp, #4]
 800d75e:	697b      	ldr	r3, [r7, #20]
 800d760:	9300      	str	r3, [sp, #0]
 800d762:	693b      	ldr	r3, [r7, #16]
 800d764:	f107 0218 	add.w	r2, r7, #24
 800d768:	ca06      	ldmia	r2, {r1, r2}
 800d76a:	f7f7 fa2a 	bl	8004bc2 <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE>

  return valueSlot.ptr();
 800d76e:	f107 0310 	add.w	r3, r7, #16
 800d772:	4618      	mov	r0, r3
 800d774:	f7f8 fd61 	bl	800623a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>
 800d778:	4603      	mov	r3, r0
 800d77a:	bf00      	nop
}
 800d77c:	4618      	mov	r0, r3
 800d77e:	3720      	adds	r7, #32
 800d780:	46bd      	mov	sp, r7
 800d782:	bd80      	pop	{r7, pc}

0800d784 <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE15getOrCreateDataEv>:
  }

  VariantData* getOrCreateData() const {
 800d784:	b5b0      	push	{r4, r5, r7, lr}
 800d786:	b084      	sub	sp, #16
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
    auto data = VariantAttorney::getOrCreateData(upstream_);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	3304      	adds	r3, #4
 800d790:	4618      	mov	r0, r3
 800d792:	f000 f81a 	bl	800d7ca <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS0_9JsonArrayEEEPNS1_11VariantDataERT_>
 800d796:	60f8      	str	r0, [r7, #12]
    if (!data)
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d101      	bne.n	800d7a2 <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE15getOrCreateDataEv+0x1e>
      return nullptr;
 800d79e:	2300      	movs	r3, #0
 800d7a0:	e00f      	b.n	800d7c2 <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE15getOrCreateDataEv+0x3e>
    return data->getOrAddElement(
 800d7a2:	68fc      	ldr	r4, [r7, #12]
        index_, VariantAttorney::getResourceManager(upstream_));
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	68dd      	ldr	r5, [r3, #12]
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	3304      	adds	r3, #4
    return data->getOrAddElement(
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	f7ff ff4e 	bl	800d64e <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_9JsonArrayEEEDTcldtfp_18getResourceManagerEERT_>
 800d7b2:	4603      	mov	r3, r0
 800d7b4:	461a      	mov	r2, r3
 800d7b6:	4629      	mov	r1, r5
 800d7b8:	4620      	mov	r0, r4
 800d7ba:	f7fc f89f 	bl	80098fc <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE>
 800d7be:	4603      	mov	r3, r0
        index_, VariantAttorney::getResourceManager(upstream_));
 800d7c0:	bf00      	nop
  }
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	3710      	adds	r7, #16
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	bdb0      	pop	{r4, r5, r7, pc}

0800d7ca <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS0_9JsonArrayEEEPNS1_11VariantDataERT_>:
  static VariantData* getOrCreateData(TClient& client) {
 800d7ca:	b580      	push	{r7, lr}
 800d7cc:	b082      	sub	sp, #8
 800d7ce:	af00      	add	r7, sp, #0
 800d7d0:	6078      	str	r0, [r7, #4]
    return client.getOrCreateData();
 800d7d2:	6878      	ldr	r0, [r7, #4]
 800d7d4:	f7fc f96b 	bl	8009aae <_ZNK11ArduinoJson8V730HB229JsonArray15getOrCreateDataEv>
 800d7d8:	4603      	mov	r3, r0
  }
 800d7da:	4618      	mov	r0, r3
 800d7dc:	3708      	adds	r7, #8
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bd80      	pop	{r7, pc}
	...

0800d7e4 <_Z41__static_initialization_and_destruction_0ii>:
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b082      	sub	sp, #8
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
 800d7ec:	6039      	str	r1, [r7, #0]
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	2b01      	cmp	r3, #1
 800d7f2:	d10a      	bne.n	800d80a <_Z41__static_initialization_and_destruction_0ii+0x26>
 800d7f4:	683b      	ldr	r3, [r7, #0]
 800d7f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d7fa:	4293      	cmp	r3, r2
 800d7fc:	d105      	bne.n	800d80a <_Z41__static_initialization_and_destruction_0ii+0x26>
__attribute__((section(".DmaSection"))) volatile txData_t txData;
 800d7fe:	4805      	ldr	r0, [pc, #20]	@ (800d814 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800d800:	f7fb ffd4 	bl	80097ac <_ZN8txData_tC1Ev>
__attribute__((section(".DmaSection"))) volatile rxData_t rxData;
 800d804:	4804      	ldr	r0, [pc, #16]	@ (800d818 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800d806:	f7f3 fa15 	bl	8000c34 <_ZN8rxData_tC1Ev>
}
 800d80a:	bf00      	nop
 800d80c:	3708      	adds	r7, #8
 800d80e:	46bd      	mov	sp, r7
 800d810:	bd80      	pop	{r7, pc}
 800d812:	bf00      	nop
 800d814:	30000080 	.word	0x30000080
 800d818:	300000c0 	.word	0x300000c0

0800d81c <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b082      	sub	sp, #8
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
 800d824:	4a05      	ldr	r2, [pc, #20]	@ (800d83c <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	601a      	str	r2, [r3, #0]
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	4618      	mov	r0, r3
 800d82e:	f7fd fdbb 	bl	800b3a8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	4618      	mov	r0, r3
 800d836:	3708      	adds	r7, #8
 800d838:	46bd      	mov	sp, r7
 800d83a:	bd80      	pop	{r7, pc}
 800d83c:	080289a0 	.word	0x080289a0

0800d840 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 800d840:	b580      	push	{r7, lr}
 800d842:	b082      	sub	sp, #8
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
 800d848:	6878      	ldr	r0, [r7, #4]
 800d84a:	f7ff ffe7 	bl	800d81c <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800d84e:	212c      	movs	r1, #44	@ 0x2c
 800d850:	6878      	ldr	r0, [r7, #4]
 800d852:	f018 fb32 	bl	8025eba <_ZdlPvj>
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	4618      	mov	r0, r3
 800d85a:	3708      	adds	r7, #8
 800d85c:	46bd      	mov	sp, r7
 800d85e:	bd80      	pop	{r7, pc}

0800d860 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800d860:	b590      	push	{r4, r7, lr}
 800d862:	b083      	sub	sp, #12
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
	allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	330c      	adds	r3, #12
 800d86c:	4618      	mov	r0, r3
 800d86e:	f000 f856 	bl	800d91e <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 800d872:	4604      	mov	r4, r0
 800d874:	6878      	ldr	r0, [r7, #4]
 800d876:	f7ff f9ce 	bl	800cc16 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800d87a:	4603      	mov	r3, r0
 800d87c:	4619      	mov	r1, r3
 800d87e:	4620      	mov	r0, r4
 800d880:	f000 f859 	bl	800d936 <_ZNSt16allocator_traitsISaIvEE7destroyI12CommsHandlerEEvRS0_PT_>
      }
 800d884:	bf00      	nop
 800d886:	370c      	adds	r7, #12
 800d888:	46bd      	mov	sp, r7
 800d88a:	bd90      	pop	{r4, r7, pc}

0800d88c <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b086      	sub	sp, #24
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	330c      	adds	r3, #12
 800d898:	4618      	mov	r0, r3
 800d89a:	f000 f840 	bl	800d91e <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 800d89e:	4602      	mov	r2, r0
 800d8a0:	f107 0314 	add.w	r3, r7, #20
 800d8a4:	4611      	mov	r1, r2
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	f7ff f935 	bl	800cb16 <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800d8ac:	f107 0114 	add.w	r1, r7, #20
 800d8b0:	f107 030c 	add.w	r3, r7, #12
 800d8b4:	687a      	ldr	r2, [r7, #4]
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	f7ff fb85 	bl	800cfc6 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
	this->~_Sp_counted_ptr_inplace();
 800d8bc:	6878      	ldr	r0, [r7, #4]
 800d8be:	f7ff ffad 	bl	800d81c <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 800d8c2:	f107 030c 	add.w	r3, r7, #12
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f7ff f951 	bl	800cb6e <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 800d8cc:	f107 0314 	add.w	r3, r7, #20
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	f7ff f92d 	bl	800cb30 <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800d8d6:	3718      	adds	r7, #24
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	bd80      	pop	{r7, pc}

0800d8dc <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b084      	sub	sp, #16
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
 800d8e4:	6039      	str	r1, [r7, #0]
	auto __ptr = const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());
 800d8e6:	6878      	ldr	r0, [r7, #4]
 800d8e8:	f7ff f995 	bl	800cc16 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800d8ec:	60f8      	str	r0, [r7, #12]
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 800d8ee:	f7fb ff53 	bl	8009798 <_ZNSt19_Sp_make_shared_tag5_S_tiEv>
 800d8f2:	4602      	mov	r2, r0
	    ||
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	4293      	cmp	r3, r2
 800d8f8:	d005      	beq.n	800d906 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 800d8fa:	6838      	ldr	r0, [r7, #0]
 800d8fc:	f018 fb1a 	bl	8025f34 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
 800d900:	4603      	mov	r3, r0
	    ||
 800d902:	2b00      	cmp	r3, #0
 800d904:	d001      	beq.n	800d90a <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2e>
 800d906:	2301      	movs	r3, #1
 800d908:	e000      	b.n	800d90c <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x30>
 800d90a:	2300      	movs	r3, #0
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d001      	beq.n	800d914 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x38>
	  return __ptr;
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	e000      	b.n	800d916 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x3a>
	return nullptr;
 800d914:	2300      	movs	r3, #0
      }
 800d916:	4618      	mov	r0, r3
 800d918:	3710      	adds	r7, #16
 800d91a:	46bd      	mov	sp, r7
 800d91c:	bd80      	pop	{r7, pc}

0800d91e <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _A_base::_S_get(*this); }
 800d91e:	b580      	push	{r7, lr}
 800d920:	b082      	sub	sp, #8
 800d922:	af00      	add	r7, sp, #0
 800d924:	6078      	str	r0, [r7, #4]
 800d926:	6878      	ldr	r0, [r7, #4]
 800d928:	f000 f811 	bl	800d94e <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EE6_S_getERS1_>
 800d92c:	4603      	mov	r3, r0
 800d92e:	4618      	mov	r0, r3
 800d930:	3708      	adds	r7, #8
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}

0800d936 <_ZNSt16allocator_traitsISaIvEE7destroyI12CommsHandlerEEvRS0_PT_>:
	destroy(allocator_type&, _Up* __p)
 800d936:	b580      	push	{r7, lr}
 800d938:	b082      	sub	sp, #8
 800d93a:	af00      	add	r7, sp, #0
 800d93c:	6078      	str	r0, [r7, #4]
 800d93e:	6039      	str	r1, [r7, #0]
	{ std::_Destroy(__p); }
 800d940:	6838      	ldr	r0, [r7, #0]
 800d942:	f000 f80f 	bl	800d964 <_ZSt8_DestroyI12CommsHandlerEvPT_>
 800d946:	bf00      	nop
 800d948:	3708      	adds	r7, #8
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd80      	pop	{r7, pc}

0800d94e <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EE6_S_getERS1_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 800d94e:	b480      	push	{r7}
 800d950:	b083      	sub	sp, #12
 800d952:	af00      	add	r7, sp, #0
 800d954:	6078      	str	r0, [r7, #4]
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	4618      	mov	r0, r3
 800d95a:	370c      	adds	r7, #12
 800d95c:	46bd      	mov	sp, r7
 800d95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d962:	4770      	bx	lr

0800d964 <_ZSt8_DestroyI12CommsHandlerEvPT_>:
    _Destroy(_Tp* __pointer)
 800d964:	b580      	push	{r7, lr}
 800d966:	b082      	sub	sp, #8
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	6878      	ldr	r0, [r7, #4]
 800d974:	4798      	blx	r3
    }
 800d976:	bf00      	nop
 800d978:	3708      	adds	r7, #8
 800d97a:	46bd      	mov	sp, r7
 800d97c:	bd80      	pop	{r7, pc}

0800d97e <_GLOBAL__sub_I_EXTI4_IRQHandler>:
 800d97e:	b580      	push	{r7, lr}
 800d980:	af00      	add	r7, sp, #0
 800d982:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800d986:	2001      	movs	r0, #1
 800d988:	f7ff ff2c 	bl	800d7e4 <_Z41__static_initialization_and_destruction_0ii>
 800d98c:	bd80      	pop	{r7, pc}
	...

0800d990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d990:	b480      	push	{r7}
 800d992:	b083      	sub	sp, #12
 800d994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d996:	4b0a      	ldr	r3, [pc, #40]	@ (800d9c0 <HAL_MspInit+0x30>)
 800d998:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d99c:	4a08      	ldr	r2, [pc, #32]	@ (800d9c0 <HAL_MspInit+0x30>)
 800d99e:	f043 0302 	orr.w	r3, r3, #2
 800d9a2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800d9a6:	4b06      	ldr	r3, [pc, #24]	@ (800d9c0 <HAL_MspInit+0x30>)
 800d9a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d9ac:	f003 0302 	and.w	r3, r3, #2
 800d9b0:	607b      	str	r3, [r7, #4]
 800d9b2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d9b4:	bf00      	nop
 800d9b6:	370c      	adds	r7, #12
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9be:	4770      	bx	lr
 800d9c0:	58024400 	.word	0x58024400

0800d9c4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b0bc      	sub	sp, #240	@ 0xf0
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d9cc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	601a      	str	r2, [r3, #0]
 800d9d4:	605a      	str	r2, [r3, #4]
 800d9d6:	609a      	str	r2, [r3, #8]
 800d9d8:	60da      	str	r2, [r3, #12]
 800d9da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d9dc:	f107 0318 	add.w	r3, r7, #24
 800d9e0:	22c0      	movs	r2, #192	@ 0xc0
 800d9e2:	2100      	movs	r1, #0
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	f019 fa9d 	bl	8026f24 <memset>
  if(hsd->Instance==SDMMC1)
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	4a3c      	ldr	r2, [pc, #240]	@ (800dae0 <HAL_SD_MspInit+0x11c>)
 800d9f0:	4293      	cmp	r3, r2
 800d9f2:	d171      	bne.n	800dad8 <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 800d9f4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800d9f8:	f04f 0300 	mov.w	r3, #0
 800d9fc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800da00:	2300      	movs	r3, #0
 800da02:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800da04:	f107 0318 	add.w	r3, r7, #24
 800da08:	4618      	mov	r0, r3
 800da0a:	f00f fc59 	bl	801d2c0 <HAL_RCCEx_PeriphCLKConfig>
 800da0e:	4603      	mov	r3, r0
 800da10:	2b00      	cmp	r3, #0
 800da12:	d001      	beq.n	800da18 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 800da14:	f7fb fe68 	bl	80096e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800da18:	4b32      	ldr	r3, [pc, #200]	@ (800dae4 <HAL_SD_MspInit+0x120>)
 800da1a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800da1e:	4a31      	ldr	r2, [pc, #196]	@ (800dae4 <HAL_SD_MspInit+0x120>)
 800da20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800da24:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800da28:	4b2e      	ldr	r3, [pc, #184]	@ (800dae4 <HAL_SD_MspInit+0x120>)
 800da2a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800da2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800da32:	617b      	str	r3, [r7, #20]
 800da34:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800da36:	4b2b      	ldr	r3, [pc, #172]	@ (800dae4 <HAL_SD_MspInit+0x120>)
 800da38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800da3c:	4a29      	ldr	r2, [pc, #164]	@ (800dae4 <HAL_SD_MspInit+0x120>)
 800da3e:	f043 0304 	orr.w	r3, r3, #4
 800da42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800da46:	4b27      	ldr	r3, [pc, #156]	@ (800dae4 <HAL_SD_MspInit+0x120>)
 800da48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800da4c:	f003 0304 	and.w	r3, r3, #4
 800da50:	613b      	str	r3, [r7, #16]
 800da52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800da54:	4b23      	ldr	r3, [pc, #140]	@ (800dae4 <HAL_SD_MspInit+0x120>)
 800da56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800da5a:	4a22      	ldr	r2, [pc, #136]	@ (800dae4 <HAL_SD_MspInit+0x120>)
 800da5c:	f043 0308 	orr.w	r3, r3, #8
 800da60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800da64:	4b1f      	ldr	r3, [pc, #124]	@ (800dae4 <HAL_SD_MspInit+0x120>)
 800da66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800da6a:	f003 0308 	and.w	r3, r3, #8
 800da6e:	60fb      	str	r3, [r7, #12]
 800da70:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800da72:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800da76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800da7a:	2302      	movs	r3, #2
 800da7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da80:	2300      	movs	r3, #0
 800da82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800da86:	2303      	movs	r3, #3
 800da88:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800da8c:	230c      	movs	r3, #12
 800da8e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800da92:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800da96:	4619      	mov	r1, r3
 800da98:	4813      	ldr	r0, [pc, #76]	@ (800dae8 <HAL_SD_MspInit+0x124>)
 800da9a:	f00e fa0f 	bl	801bebc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800da9e:	2304      	movs	r3, #4
 800daa0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800daa4:	2302      	movs	r3, #2
 800daa6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800daaa:	2300      	movs	r3, #0
 800daac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dab0:	2303      	movs	r3, #3
 800dab2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800dab6:	230c      	movs	r3, #12
 800dab8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800dabc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800dac0:	4619      	mov	r1, r3
 800dac2:	480a      	ldr	r0, [pc, #40]	@ (800daec <HAL_SD_MspInit+0x128>)
 800dac4:	f00e f9fa 	bl	801bebc <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800dac8:	2200      	movs	r2, #0
 800daca:	2100      	movs	r1, #0
 800dacc:	2031      	movs	r0, #49	@ 0x31
 800dace:	f00b fe04 	bl	80196da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800dad2:	2031      	movs	r0, #49	@ 0x31
 800dad4:	f00b fe1b 	bl	801970e <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 800dad8:	bf00      	nop
 800dada:	37f0      	adds	r7, #240	@ 0xf0
 800dadc:	46bd      	mov	sp, r7
 800dade:	bd80      	pop	{r7, pc}
 800dae0:	52007000 	.word	0x52007000
 800dae4:	58024400 	.word	0x58024400
 800dae8:	58020800 	.word	0x58020800
 800daec:	58020c00 	.word	0x58020c00

0800daf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b0ba      	sub	sp, #232	@ 0xe8
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800daf8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800dafc:	2200      	movs	r2, #0
 800dafe:	601a      	str	r2, [r3, #0]
 800db00:	605a      	str	r2, [r3, #4]
 800db02:	609a      	str	r2, [r3, #8]
 800db04:	60da      	str	r2, [r3, #12]
 800db06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800db08:	f107 0310 	add.w	r3, r7, #16
 800db0c:	22c0      	movs	r2, #192	@ 0xc0
 800db0e:	2100      	movs	r1, #0
 800db10:	4618      	mov	r0, r3
 800db12:	f019 fa07 	bl	8026f24 <memset>
  if(huart->Instance==USART1)
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	4a27      	ldr	r2, [pc, #156]	@ (800dbb8 <HAL_UART_MspInit+0xc8>)
 800db1c:	4293      	cmp	r3, r2
 800db1e:	d146      	bne.n	800dbae <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800db20:	f04f 0201 	mov.w	r2, #1
 800db24:	f04f 0300 	mov.w	r3, #0
 800db28:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800db2c:	2300      	movs	r3, #0
 800db2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800db32:	f107 0310 	add.w	r3, r7, #16
 800db36:	4618      	mov	r0, r3
 800db38:	f00f fbc2 	bl	801d2c0 <HAL_RCCEx_PeriphCLKConfig>
 800db3c:	4603      	mov	r3, r0
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d001      	beq.n	800db46 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800db42:	f7fb fdd1 	bl	80096e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800db46:	4b1d      	ldr	r3, [pc, #116]	@ (800dbbc <HAL_UART_MspInit+0xcc>)
 800db48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800db4c:	4a1b      	ldr	r2, [pc, #108]	@ (800dbbc <HAL_UART_MspInit+0xcc>)
 800db4e:	f043 0310 	orr.w	r3, r3, #16
 800db52:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800db56:	4b19      	ldr	r3, [pc, #100]	@ (800dbbc <HAL_UART_MspInit+0xcc>)
 800db58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800db5c:	f003 0310 	and.w	r3, r3, #16
 800db60:	60fb      	str	r3, [r7, #12]
 800db62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800db64:	4b15      	ldr	r3, [pc, #84]	@ (800dbbc <HAL_UART_MspInit+0xcc>)
 800db66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800db6a:	4a14      	ldr	r2, [pc, #80]	@ (800dbbc <HAL_UART_MspInit+0xcc>)
 800db6c:	f043 0301 	orr.w	r3, r3, #1
 800db70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800db74:	4b11      	ldr	r3, [pc, #68]	@ (800dbbc <HAL_UART_MspInit+0xcc>)
 800db76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800db7a:	f003 0301 	and.w	r3, r3, #1
 800db7e:	60bb      	str	r3, [r7, #8]
 800db80:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800db82:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800db86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800db8a:	2302      	movs	r3, #2
 800db8c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800db90:	2300      	movs	r3, #0
 800db92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800db96:	2300      	movs	r3, #0
 800db98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800db9c:	2307      	movs	r3, #7
 800db9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dba2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800dba6:	4619      	mov	r1, r3
 800dba8:	4805      	ldr	r0, [pc, #20]	@ (800dbc0 <HAL_UART_MspInit+0xd0>)
 800dbaa:	f00e f987 	bl	801bebc <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800dbae:	bf00      	nop
 800dbb0:	37e8      	adds	r7, #232	@ 0xe8
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}
 800dbb6:	bf00      	nop
 800dbb8:	40011000 	.word	0x40011000
 800dbbc:	58024400 	.word	0x58024400
 800dbc0:	58020000 	.word	0x58020000

0800dbc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800dbc4:	b480      	push	{r7}
 800dbc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800dbc8:	bf00      	nop
 800dbca:	e7fd      	b.n	800dbc8 <NMI_Handler+0x4>

0800dbcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800dbcc:	b480      	push	{r7}
 800dbce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800dbd0:	bf00      	nop
 800dbd2:	e7fd      	b.n	800dbd0 <HardFault_Handler+0x4>

0800dbd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800dbd4:	b480      	push	{r7}
 800dbd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800dbd8:	bf00      	nop
 800dbda:	e7fd      	b.n	800dbd8 <MemManage_Handler+0x4>

0800dbdc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800dbdc:	b480      	push	{r7}
 800dbde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800dbe0:	bf00      	nop
 800dbe2:	e7fd      	b.n	800dbe0 <BusFault_Handler+0x4>

0800dbe4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800dbe4:	b480      	push	{r7}
 800dbe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800dbe8:	bf00      	nop
 800dbea:	e7fd      	b.n	800dbe8 <UsageFault_Handler+0x4>

0800dbec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800dbec:	b480      	push	{r7}
 800dbee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800dbf0:	bf00      	nop
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf8:	4770      	bx	lr

0800dbfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800dbfa:	b480      	push	{r7}
 800dbfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800dbfe:	bf00      	nop
 800dc00:	46bd      	mov	sp, r7
 800dc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc06:	4770      	bx	lr

0800dc08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800dc08:	b480      	push	{r7}
 800dc0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800dc0c:	bf00      	nop
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc14:	4770      	bx	lr

0800dc16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800dc16:	b580      	push	{r7, lr}
 800dc18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800dc1a:	f00b fc1d 	bl	8019458 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800dc1e:	bf00      	nop
 800dc20:	bd80      	pop	{r7, pc}
	...

0800dc24 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800dc28:	4802      	ldr	r0, [pc, #8]	@ (800dc34 <SDMMC1_IRQHandler+0x10>)
 800dc2a:	f012 fab7 	bl	802019c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800dc2e:	bf00      	nop
 800dc30:	bd80      	pop	{r7, pc}
 800dc32:	bf00      	nop
 800dc34:	240002f8 	.word	0x240002f8

0800dc38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800dc38:	b480      	push	{r7}
 800dc3a:	af00      	add	r7, sp, #0
	return 1;
 800dc3c:	2301      	movs	r3, #1
}
 800dc3e:	4618      	mov	r0, r3
 800dc40:	46bd      	mov	sp, r7
 800dc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc46:	4770      	bx	lr

0800dc48 <_kill>:

int _kill(int pid, int sig)
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b082      	sub	sp, #8
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
 800dc50:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800dc52:	f019 fa09 	bl	8027068 <__errno>
 800dc56:	4603      	mov	r3, r0
 800dc58:	2216      	movs	r2, #22
 800dc5a:	601a      	str	r2, [r3, #0]
	return -1;
 800dc5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800dc60:	4618      	mov	r0, r3
 800dc62:	3708      	adds	r7, #8
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}

0800dc68 <_exit>:

void _exit (int status)
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b082      	sub	sp, #8
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800dc70:	f04f 31ff 	mov.w	r1, #4294967295
 800dc74:	6878      	ldr	r0, [r7, #4]
 800dc76:	f7ff ffe7 	bl	800dc48 <_kill>
	while (1) {}		/* Make sure we hang here */
 800dc7a:	bf00      	nop
 800dc7c:	e7fd      	b.n	800dc7a <_exit+0x12>

0800dc7e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800dc7e:	b580      	push	{r7, lr}
 800dc80:	b086      	sub	sp, #24
 800dc82:	af00      	add	r7, sp, #0
 800dc84:	60f8      	str	r0, [r7, #12]
 800dc86:	60b9      	str	r1, [r7, #8]
 800dc88:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	617b      	str	r3, [r7, #20]
 800dc8e:	e00a      	b.n	800dca6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800dc90:	f3af 8000 	nop.w
 800dc94:	4601      	mov	r1, r0
 800dc96:	68bb      	ldr	r3, [r7, #8]
 800dc98:	1c5a      	adds	r2, r3, #1
 800dc9a:	60ba      	str	r2, [r7, #8]
 800dc9c:	b2ca      	uxtb	r2, r1
 800dc9e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800dca0:	697b      	ldr	r3, [r7, #20]
 800dca2:	3301      	adds	r3, #1
 800dca4:	617b      	str	r3, [r7, #20]
 800dca6:	697a      	ldr	r2, [r7, #20]
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	429a      	cmp	r2, r3
 800dcac:	dbf0      	blt.n	800dc90 <_read+0x12>
	}

return len;
 800dcae:	687b      	ldr	r3, [r7, #4]
}
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	3718      	adds	r7, #24
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bd80      	pop	{r7, pc}

0800dcb8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b086      	sub	sp, #24
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	60f8      	str	r0, [r7, #12]
 800dcc0:	60b9      	str	r1, [r7, #8]
 800dcc2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	617b      	str	r3, [r7, #20]
 800dcc8:	e009      	b.n	800dcde <_write+0x26>
	{
		__io_putchar(*ptr++);
 800dcca:	68bb      	ldr	r3, [r7, #8]
 800dccc:	1c5a      	adds	r2, r3, #1
 800dcce:	60ba      	str	r2, [r7, #8]
 800dcd0:	781b      	ldrb	r3, [r3, #0]
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f7fb fa54 	bl	8009180 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800dcd8:	697b      	ldr	r3, [r7, #20]
 800dcda:	3301      	adds	r3, #1
 800dcdc:	617b      	str	r3, [r7, #20]
 800dcde:	697a      	ldr	r2, [r7, #20]
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	429a      	cmp	r2, r3
 800dce4:	dbf1      	blt.n	800dcca <_write+0x12>
	}
	return len;
 800dce6:	687b      	ldr	r3, [r7, #4]
}
 800dce8:	4618      	mov	r0, r3
 800dcea:	3718      	adds	r7, #24
 800dcec:	46bd      	mov	sp, r7
 800dcee:	bd80      	pop	{r7, pc}

0800dcf0 <_close>:

int _close(int file)
{
 800dcf0:	b480      	push	{r7}
 800dcf2:	b083      	sub	sp, #12
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
	return -1;
 800dcf8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	370c      	adds	r7, #12
 800dd00:	46bd      	mov	sp, r7
 800dd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd06:	4770      	bx	lr

0800dd08 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800dd08:	b480      	push	{r7}
 800dd0a:	b083      	sub	sp, #12
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
 800dd10:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800dd12:	683b      	ldr	r3, [r7, #0]
 800dd14:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800dd18:	605a      	str	r2, [r3, #4]
	return 0;
 800dd1a:	2300      	movs	r3, #0
}
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	370c      	adds	r7, #12
 800dd20:	46bd      	mov	sp, r7
 800dd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd26:	4770      	bx	lr

0800dd28 <_isatty>:

int _isatty(int file)
{
 800dd28:	b480      	push	{r7}
 800dd2a:	b083      	sub	sp, #12
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
	return 1;
 800dd30:	2301      	movs	r3, #1
}
 800dd32:	4618      	mov	r0, r3
 800dd34:	370c      	adds	r7, #12
 800dd36:	46bd      	mov	sp, r7
 800dd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3c:	4770      	bx	lr

0800dd3e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800dd3e:	b480      	push	{r7}
 800dd40:	b085      	sub	sp, #20
 800dd42:	af00      	add	r7, sp, #0
 800dd44:	60f8      	str	r0, [r7, #12]
 800dd46:	60b9      	str	r1, [r7, #8]
 800dd48:	607a      	str	r2, [r7, #4]
	return 0;
 800dd4a:	2300      	movs	r3, #0
}
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	3714      	adds	r7, #20
 800dd50:	46bd      	mov	sp, r7
 800dd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd56:	4770      	bx	lr

0800dd58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b086      	sub	sp, #24
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800dd60:	4a14      	ldr	r2, [pc, #80]	@ (800ddb4 <_sbrk+0x5c>)
 800dd62:	4b15      	ldr	r3, [pc, #84]	@ (800ddb8 <_sbrk+0x60>)
 800dd64:	1ad3      	subs	r3, r2, r3
 800dd66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800dd68:	697b      	ldr	r3, [r7, #20]
 800dd6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800dd6c:	4b13      	ldr	r3, [pc, #76]	@ (800ddbc <_sbrk+0x64>)
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d102      	bne.n	800dd7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800dd74:	4b11      	ldr	r3, [pc, #68]	@ (800ddbc <_sbrk+0x64>)
 800dd76:	4a12      	ldr	r2, [pc, #72]	@ (800ddc0 <_sbrk+0x68>)
 800dd78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800dd7a:	4b10      	ldr	r3, [pc, #64]	@ (800ddbc <_sbrk+0x64>)
 800dd7c:	681a      	ldr	r2, [r3, #0]
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	4413      	add	r3, r2
 800dd82:	693a      	ldr	r2, [r7, #16]
 800dd84:	429a      	cmp	r2, r3
 800dd86:	d207      	bcs.n	800dd98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800dd88:	f019 f96e 	bl	8027068 <__errno>
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	220c      	movs	r2, #12
 800dd90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800dd92:	f04f 33ff 	mov.w	r3, #4294967295
 800dd96:	e009      	b.n	800ddac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800dd98:	4b08      	ldr	r3, [pc, #32]	@ (800ddbc <_sbrk+0x64>)
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800dd9e:	4b07      	ldr	r3, [pc, #28]	@ (800ddbc <_sbrk+0x64>)
 800dda0:	681a      	ldr	r2, [r3, #0]
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	4413      	add	r3, r2
 800dda6:	4a05      	ldr	r2, [pc, #20]	@ (800ddbc <_sbrk+0x64>)
 800dda8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800ddaa:	68fb      	ldr	r3, [r7, #12]
}
 800ddac:	4618      	mov	r0, r3
 800ddae:	3718      	adds	r7, #24
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	bd80      	pop	{r7, pc}
 800ddb4:	24080000 	.word	0x24080000
 800ddb8:	00000400 	.word	0x00000400
 800ddbc:	24000408 	.word	0x24000408
 800ddc0:	24000c10 	.word	0x24000c10

0800ddc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800ddc4:	b480      	push	{r7}
 800ddc6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800ddc8:	4b37      	ldr	r3, [pc, #220]	@ (800dea8 <SystemInit+0xe4>)
 800ddca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ddce:	4a36      	ldr	r2, [pc, #216]	@ (800dea8 <SystemInit+0xe4>)
 800ddd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ddd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800ddd8:	4b34      	ldr	r3, [pc, #208]	@ (800deac <SystemInit+0xe8>)
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	f003 030f 	and.w	r3, r3, #15
 800dde0:	2b06      	cmp	r3, #6
 800dde2:	d807      	bhi.n	800ddf4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800dde4:	4b31      	ldr	r3, [pc, #196]	@ (800deac <SystemInit+0xe8>)
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	f023 030f 	bic.w	r3, r3, #15
 800ddec:	4a2f      	ldr	r2, [pc, #188]	@ (800deac <SystemInit+0xe8>)
 800ddee:	f043 0307 	orr.w	r3, r3, #7
 800ddf2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800ddf4:	4b2e      	ldr	r3, [pc, #184]	@ (800deb0 <SystemInit+0xec>)
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	4a2d      	ldr	r2, [pc, #180]	@ (800deb0 <SystemInit+0xec>)
 800ddfa:	f043 0301 	orr.w	r3, r3, #1
 800ddfe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800de00:	4b2b      	ldr	r3, [pc, #172]	@ (800deb0 <SystemInit+0xec>)
 800de02:	2200      	movs	r2, #0
 800de04:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800de06:	4b2a      	ldr	r3, [pc, #168]	@ (800deb0 <SystemInit+0xec>)
 800de08:	681a      	ldr	r2, [r3, #0]
 800de0a:	4929      	ldr	r1, [pc, #164]	@ (800deb0 <SystemInit+0xec>)
 800de0c:	4b29      	ldr	r3, [pc, #164]	@ (800deb4 <SystemInit+0xf0>)
 800de0e:	4013      	ands	r3, r2
 800de10:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800de12:	4b26      	ldr	r3, [pc, #152]	@ (800deac <SystemInit+0xe8>)
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	f003 0308 	and.w	r3, r3, #8
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d007      	beq.n	800de2e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800de1e:	4b23      	ldr	r3, [pc, #140]	@ (800deac <SystemInit+0xe8>)
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	f023 030f 	bic.w	r3, r3, #15
 800de26:	4a21      	ldr	r2, [pc, #132]	@ (800deac <SystemInit+0xe8>)
 800de28:	f043 0307 	orr.w	r3, r3, #7
 800de2c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800de2e:	4b20      	ldr	r3, [pc, #128]	@ (800deb0 <SystemInit+0xec>)
 800de30:	2200      	movs	r2, #0
 800de32:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800de34:	4b1e      	ldr	r3, [pc, #120]	@ (800deb0 <SystemInit+0xec>)
 800de36:	2200      	movs	r2, #0
 800de38:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800de3a:	4b1d      	ldr	r3, [pc, #116]	@ (800deb0 <SystemInit+0xec>)
 800de3c:	2200      	movs	r2, #0
 800de3e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800de40:	4b1b      	ldr	r3, [pc, #108]	@ (800deb0 <SystemInit+0xec>)
 800de42:	4a1d      	ldr	r2, [pc, #116]	@ (800deb8 <SystemInit+0xf4>)
 800de44:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800de46:	4b1a      	ldr	r3, [pc, #104]	@ (800deb0 <SystemInit+0xec>)
 800de48:	4a1c      	ldr	r2, [pc, #112]	@ (800debc <SystemInit+0xf8>)
 800de4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800de4c:	4b18      	ldr	r3, [pc, #96]	@ (800deb0 <SystemInit+0xec>)
 800de4e:	4a1c      	ldr	r2, [pc, #112]	@ (800dec0 <SystemInit+0xfc>)
 800de50:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800de52:	4b17      	ldr	r3, [pc, #92]	@ (800deb0 <SystemInit+0xec>)
 800de54:	2200      	movs	r2, #0
 800de56:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800de58:	4b15      	ldr	r3, [pc, #84]	@ (800deb0 <SystemInit+0xec>)
 800de5a:	4a19      	ldr	r2, [pc, #100]	@ (800dec0 <SystemInit+0xfc>)
 800de5c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800de5e:	4b14      	ldr	r3, [pc, #80]	@ (800deb0 <SystemInit+0xec>)
 800de60:	2200      	movs	r2, #0
 800de62:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800de64:	4b12      	ldr	r3, [pc, #72]	@ (800deb0 <SystemInit+0xec>)
 800de66:	4a16      	ldr	r2, [pc, #88]	@ (800dec0 <SystemInit+0xfc>)
 800de68:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800de6a:	4b11      	ldr	r3, [pc, #68]	@ (800deb0 <SystemInit+0xec>)
 800de6c:	2200      	movs	r2, #0
 800de6e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800de70:	4b0f      	ldr	r3, [pc, #60]	@ (800deb0 <SystemInit+0xec>)
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	4a0e      	ldr	r2, [pc, #56]	@ (800deb0 <SystemInit+0xec>)
 800de76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800de7a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800de7c:	4b0c      	ldr	r3, [pc, #48]	@ (800deb0 <SystemInit+0xec>)
 800de7e:	2200      	movs	r2, #0
 800de80:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800de82:	4b10      	ldr	r3, [pc, #64]	@ (800dec4 <SystemInit+0x100>)
 800de84:	681a      	ldr	r2, [r3, #0]
 800de86:	4b10      	ldr	r3, [pc, #64]	@ (800dec8 <SystemInit+0x104>)
 800de88:	4013      	ands	r3, r2
 800de8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800de8e:	d202      	bcs.n	800de96 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800de90:	4b0e      	ldr	r3, [pc, #56]	@ (800decc <SystemInit+0x108>)
 800de92:	2201      	movs	r2, #1
 800de94:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800de96:	4b0e      	ldr	r3, [pc, #56]	@ (800ded0 <SystemInit+0x10c>)
 800de98:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800de9c:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800de9e:	bf00      	nop
 800dea0:	46bd      	mov	sp, r7
 800dea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea6:	4770      	bx	lr
 800dea8:	e000ed00 	.word	0xe000ed00
 800deac:	52002000 	.word	0x52002000
 800deb0:	58024400 	.word	0x58024400
 800deb4:	eaf6ed7f 	.word	0xeaf6ed7f
 800deb8:	02020200 	.word	0x02020200
 800debc:	01ff0000 	.word	0x01ff0000
 800dec0:	01010280 	.word	0x01010280
 800dec4:	5c001000 	.word	0x5c001000
 800dec8:	ffff0000 	.word	0xffff0000
 800decc:	51008108 	.word	0x51008108
 800ded0:	52004000 	.word	0x52004000

0800ded4 <_ZN5Blink6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>:
#include "blink.h"


shared_ptr<Module> Blink::create(const JsonObject& config, Remora* instance) {
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b09a      	sub	sp, #104	@ 0x68
 800ded8:	af00      	add	r7, sp, #0
 800deda:	60f8      	str	r0, [r7, #12]
 800dedc:	60b9      	str	r1, [r7, #8]
 800dede:	607a      	str	r2, [r7, #4]
    const char* pin = config["Pin"];
 800dee0:	f107 031c 	add.w	r3, r7, #28
 800dee4:	4a23      	ldr	r2, [pc, #140]	@ (800df74 <_ZN5Blink6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xa0>)
 800dee6:	68b9      	ldr	r1, [r7, #8]
 800dee8:	4618      	mov	r0, r3
 800deea:	f000 f8b7 	bl	800e05c <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA4_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800deee:	f107 031c 	add.w	r3, r7, #28
 800def2:	4618      	mov	r0, r3
 800def4:	f7f8 fc48 	bl	8006788 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800def8:	4603      	mov	r3, r0
 800defa:	61bb      	str	r3, [r7, #24]
    int frequency = config["Frequency"];
 800defc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800df00:	4a1d      	ldr	r2, [pc, #116]	@ (800df78 <_ZN5Blink6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xa4>)
 800df02:	68b9      	ldr	r1, [r7, #8]
 800df04:	4618      	mov	r0, r3
 800df06:	f7f8 fc4b 	bl	80067a0 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA10_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800df0a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800df0e:	4618      	mov	r0, r3
 800df10:	f000 f8c9 	bl	800e0a6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>
 800df14:	4603      	mov	r3, r0
 800df16:	617b      	str	r3, [r7, #20]
    uint32_t threadFreq = config["ThreadFreq"];
 800df18:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800df1c:	4a17      	ldr	r2, [pc, #92]	@ (800df7c <_ZN5Blink6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xa8>)
 800df1e:	68b9      	ldr	r1, [r7, #8]
 800df20:	4618      	mov	r0, r3
 800df22:	f000 f8cc 	bl	800e0be <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800df26:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800df2a:	4618      	mov	r0, r3
 800df2c:	f7f8 fc5d 	bl	80067ea <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ImLi0EEEv>
 800df30:	4603      	mov	r3, r0
 800df32:	613b      	str	r3, [r7, #16]
    
    printf("Creating Blink module on pin %s with frequency %d Hz\n", pin, frequency);
 800df34:	69bb      	ldr	r3, [r7, #24]
 800df36:	697a      	ldr	r2, [r7, #20]
 800df38:	4619      	mov	r1, r3
 800df3a:	4811      	ldr	r0, [pc, #68]	@ (800df80 <_ZN5Blink6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xac>)
 800df3c:	f018 fe78 	bl	8026c30 <iprintf>
	return std::make_unique<Blink>(pin, threadFreq, frequency);
 800df40:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 800df44:	f107 0314 	add.w	r3, r7, #20
 800df48:	f107 0210 	add.w	r2, r7, #16
 800df4c:	f107 0118 	add.w	r1, r7, #24
 800df50:	f000 f8da 	bl	800e108 <_ZSt11make_uniqueI5BlinkJRPKcRmRiEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 800df54:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800df58:	4619      	mov	r1, r3
 800df5a:	68f8      	ldr	r0, [r7, #12]
 800df5c:	f000 f937 	bl	800e1ce <_ZNSt10shared_ptrI6ModuleEC1I5BlinkSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>
 800df60:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800df64:	4618      	mov	r0, r3
 800df66:	f000 f910 	bl	800e18a <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EED1Ev>
 800df6a:	bf00      	nop
}
 800df6c:	68f8      	ldr	r0, [r7, #12]
 800df6e:	3768      	adds	r7, #104	@ 0x68
 800df70:	46bd      	mov	sp, r7
 800df72:	bd80      	pop	{r7, pc}
 800df74:	08028014 	.word	0x08028014
 800df78:	08028018 	.word	0x08028018
 800df7c:	08028024 	.word	0x08028024
 800df80:	08028030 	.word	0x08028030

0800df84 <_ZN5BlinkC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmm>:
 * @brief Constructs a Blink module.
 * 
 * Initializes the blink pin and sets up the toggle period based on the 
 * servo thread frequency and desired blink frequency.
 */
Blink::Blink(std::string _portAndPin, uint32_t _threadFreq, uint32_t _freq) :
 800df84:	b580      	push	{r7, lr}
 800df86:	b086      	sub	sp, #24
 800df88:	af00      	add	r7, sp, #0
 800df8a:	60f8      	str	r0, [r7, #12]
 800df8c:	60b9      	str	r1, [r7, #8]
 800df8e:	607a      	str	r2, [r7, #4]
 800df90:	603b      	str	r3, [r7, #0]
	bState(false),
    periodCount(_threadFreq / _freq),
    blinkCount(0),
    blinkPin(std::make_unique<Pin>(_portAndPin, OUTPUT))
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	4618      	mov	r0, r3
 800df96:	f002 fdf5 	bl	8010b84 <_ZN6ModuleC1Ev>
 800df9a:	4a15      	ldr	r2, [pc, #84]	@ (800dff0 <_ZN5BlinkC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmm+0x6c>)
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	601a      	str	r2, [r3, #0]
	bState(false),
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	755a      	strb	r2, [r3, #21]
    periodCount(_threadFreq / _freq),
 800dfa6:	687a      	ldr	r2, [r7, #4]
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	fbb2 f2f3 	udiv	r2, r2, r3
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	619a      	str	r2, [r3, #24]
    blinkCount(0),
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	61da      	str	r2, [r3, #28]
    blinkPin(std::make_unique<Pin>(_portAndPin, OUTPUT))
 800dfb8:	2301      	movs	r3, #1
 800dfba:	617b      	str	r3, [r7, #20]
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	3320      	adds	r3, #32
 800dfc0:	f107 0214 	add.w	r2, r7, #20
 800dfc4:	68b9      	ldr	r1, [r7, #8]
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	f000 f914 	bl	800e1f4 <_ZSt11make_uniqueI3PinJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
{
	blinkPin->set(bState);
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	3320      	adds	r3, #32
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	f000 f952 	bl	800e27a <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EEptEv>
 800dfd6:	4602      	mov	r2, r0
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	7d5b      	ldrb	r3, [r3, #21]
 800dfdc:	4619      	mov	r1, r3
 800dfde:	4610      	mov	r0, r2
 800dfe0:	f7f5 fdb4 	bl	8003b4c <_ZN3Pin3setEb>
}
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	3718      	adds	r7, #24
 800dfea:	46bd      	mov	sp, r7
 800dfec:	bd80      	pop	{r7, pc}
 800dfee:	bf00      	nop
 800dff0:	08028a04 	.word	0x08028a04

0800dff4 <_ZN5Blink6updateEv>:

void Blink::update(void)
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b082      	sub	sp, #8
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
	++blinkCount;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	69db      	ldr	r3, [r3, #28]
 800e000:	1c5a      	adds	r2, r3, #1
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	61da      	str	r2, [r3, #28]
	if (blinkCount >= periodCount / 2)
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	69da      	ldr	r2, [r3, #28]
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	699b      	ldr	r3, [r3, #24]
 800e00e:	085b      	lsrs	r3, r3, #1
 800e010:	429a      	cmp	r2, r3
 800e012:	d315      	bcc.n	800e040 <_ZN5Blink6updateEv+0x4c>
	{
        bState = !bState;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	7d5b      	ldrb	r3, [r3, #21]
 800e018:	f083 0301 	eor.w	r3, r3, #1
 800e01c:	b2da      	uxtb	r2, r3
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	755a      	strb	r2, [r3, #21]
        blinkPin->set(bState);
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	3320      	adds	r3, #32
 800e026:	4618      	mov	r0, r3
 800e028:	f000 f927 	bl	800e27a <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EEptEv>
 800e02c:	4602      	mov	r2, r0
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	7d5b      	ldrb	r3, [r3, #21]
 800e032:	4619      	mov	r1, r3
 800e034:	4610      	mov	r0, r2
 800e036:	f7f5 fd89 	bl	8003b4c <_ZN3Pin3setEb>
        blinkCount = 0;
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	2200      	movs	r2, #0
 800e03e:	61da      	str	r2, [r3, #28]
	}
}
 800e040:	bf00      	nop
 800e042:	3708      	adds	r7, #8
 800e044:	46bd      	mov	sp, r7
 800e046:	bd80      	pop	{r7, pc}

0800e048 <_ZN5Blink10slowUpdateEv>:

void Blink::slowUpdate(void)
{
 800e048:	b480      	push	{r7}
 800e04a:	b083      	sub	sp, #12
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
	return;
 800e050:	bf00      	nop
}
 800e052:	370c      	adds	r7, #12
 800e054:	46bd      	mov	sp, r7
 800e056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05a:	4770      	bx	lr

0800e05c <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA4_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:

  // Gets or sets the member with specified key.
  // https://arduinojson.org/v7/api/jsonobject/subscript/
  template <typename TString,
            detail::enable_if_t<detail::IsString<TString>::value, int> = 0>
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b08c      	sub	sp, #48	@ 0x30
 800e060:	af02      	add	r7, sp, #8
 800e062:	60f8      	str	r0, [r7, #12]
 800e064:	60b9      	str	r1, [r7, #8]
 800e066:	607a      	str	r2, [r7, #4]
      const TString& key) const {
    return {*this, detail::adaptString(key)};
 800e068:	68ba      	ldr	r2, [r7, #8]
 800e06a:	f107 0314 	add.w	r3, r7, #20
 800e06e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e072:	e883 0003 	stmia.w	r3, {r0, r1}
 800e076:	f107 031c 	add.w	r3, r7, #28
 800e07a:	6879      	ldr	r1, [r7, #4]
 800e07c:	4618      	mov	r0, r3
 800e07e:	f000 f913 	bl	800e2a8 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA4_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800e082:	466a      	mov	r2, sp
 800e084:	f107 0320 	add.w	r3, r7, #32
 800e088:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e08c:	e882 0003 	stmia.w	r2, {r0, r1}
 800e090:	69fb      	ldr	r3, [r7, #28]
 800e092:	f107 0214 	add.w	r2, r7, #20
 800e096:	ca06      	ldmia	r2, {r1, r2}
 800e098:	68f8      	ldr	r0, [r7, #12]
 800e09a:	f7f8 fce4 	bl	8006a66 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 800e09e:	68f8      	ldr	r0, [r7, #12]
 800e0a0:	3728      	adds	r7, #40	@ 0x28
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	bd80      	pop	{r7, pc}

0800e0a6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>:
  operator T() const {
 800e0a6:	b580      	push	{r7, lr}
 800e0a8:	b082      	sub	sp, #8
 800e0aa:	af00      	add	r7, sp, #0
 800e0ac:	6078      	str	r0, [r7, #4]
    return as<T>();
 800e0ae:	6878      	ldr	r0, [r7, #4]
 800e0b0:	f000 f90d 	bl	800e2ce <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIiEET_v>
 800e0b4:	4603      	mov	r3, r0
  }
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	3708      	adds	r7, #8
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	bd80      	pop	{r7, pc}

0800e0be <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 800e0be:	b580      	push	{r7, lr}
 800e0c0:	b08c      	sub	sp, #48	@ 0x30
 800e0c2:	af02      	add	r7, sp, #8
 800e0c4:	60f8      	str	r0, [r7, #12]
 800e0c6:	60b9      	str	r1, [r7, #8]
 800e0c8:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 800e0ca:	68ba      	ldr	r2, [r7, #8]
 800e0cc:	f107 0314 	add.w	r3, r7, #20
 800e0d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e0d4:	e883 0003 	stmia.w	r3, {r0, r1}
 800e0d8:	f107 031c 	add.w	r3, r7, #28
 800e0dc:	6879      	ldr	r1, [r7, #4]
 800e0de:	4618      	mov	r0, r3
 800e0e0:	f7fd fe58 	bl	800bd94 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA11_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800e0e4:	466a      	mov	r2, sp
 800e0e6:	f107 0320 	add.w	r3, r7, #32
 800e0ea:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e0ee:	e882 0003 	stmia.w	r2, {r0, r1}
 800e0f2:	69fb      	ldr	r3, [r7, #28]
 800e0f4:	f107 0214 	add.w	r2, r7, #20
 800e0f8:	ca06      	ldmia	r2, {r1, r2}
 800e0fa:	68f8      	ldr	r0, [r7, #12]
 800e0fc:	f7f8 fcb3 	bl	8006a66 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 800e100:	68f8      	ldr	r0, [r7, #12]
 800e102:	3728      	adds	r7, #40	@ 0x28
 800e104:	46bd      	mov	sp, r7
 800e106:	bd80      	pop	{r7, pc}

0800e108 <_ZSt11make_uniqueI5BlinkJRPKcRmRiEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800e108:	b5b0      	push	{r4, r5, r7, lr}
 800e10a:	b08c      	sub	sp, #48	@ 0x30
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	60f8      	str	r0, [r7, #12]
 800e110:	60b9      	str	r1, [r7, #8]
 800e112:	607a      	str	r2, [r7, #4]
 800e114:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800e116:	2024      	movs	r0, #36	@ 0x24
 800e118:	f017 fee0 	bl	8025edc <_Znwj>
 800e11c:	4603      	mov	r3, r0
 800e11e:	461d      	mov	r5, r3
 800e120:	68b8      	ldr	r0, [r7, #8]
 800e122:	f000 f8f6 	bl	800e312 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 800e126:	4603      	mov	r3, r0
 800e128:	681c      	ldr	r4, [r3, #0]
 800e12a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800e12e:	4618      	mov	r0, r3
 800e130:	f017 fee5 	bl	8025efe <_ZNSaIcEC1Ev>
 800e134:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800e138:	f107 0314 	add.w	r3, r7, #20
 800e13c:	4621      	mov	r1, r4
 800e13e:	4618      	mov	r0, r3
 800e140:	f7f8 fa9c 	bl	800667c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800e144:	6878      	ldr	r0, [r7, #4]
 800e146:	f7fd fcb3 	bl	800bab0 <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
 800e14a:	4603      	mov	r3, r0
 800e14c:	681c      	ldr	r4, [r3, #0]
 800e14e:	6838      	ldr	r0, [r7, #0]
 800e150:	f000 f8ea 	bl	800e328 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 800e154:	4603      	mov	r3, r0
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	f107 0114 	add.w	r1, r7, #20
 800e15c:	4622      	mov	r2, r4
 800e15e:	4628      	mov	r0, r5
 800e160:	f7ff ff10 	bl	800df84 <_ZN5BlinkC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmm>
 800e164:	4629      	mov	r1, r5
 800e166:	68f8      	ldr	r0, [r7, #12]
 800e168:	f000 f8f9 	bl	800e35e <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800e16c:	f107 0314 	add.w	r3, r7, #20
 800e170:	4618      	mov	r0, r3
 800e172:	f017 ffae 	bl	80260d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800e176:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800e17a:	4618      	mov	r0, r3
 800e17c:	f017 fec0 	bl	8025f00 <_ZNSaIcED1Ev>
 800e180:	bf00      	nop
 800e182:	68f8      	ldr	r0, [r7, #12]
 800e184:	3730      	adds	r7, #48	@ 0x30
 800e186:	46bd      	mov	sp, r7
 800e188:	bdb0      	pop	{r4, r5, r7, pc}

0800e18a <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800e18a:	b590      	push	{r4, r7, lr}
 800e18c:	b085      	sub	sp, #20
 800e18e:	af00      	add	r7, sp, #0
 800e190:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	4618      	mov	r0, r3
 800e196:	f000 f8f1 	bl	800e37c <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 800e19a:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d00c      	beq.n	800e1be <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800e1a4:	6878      	ldr	r0, [r7, #4]
 800e1a6:	f000 f8f6 	bl	800e396 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE11get_deleterEv>
 800e1aa:	4604      	mov	r4, r0
 800e1ac:	68f8      	ldr	r0, [r7, #12]
 800e1ae:	f000 f8ff 	bl	800e3b0 <_ZSt4moveIRP5BlinkEONSt16remove_referenceIT_E4typeEOS4_>
 800e1b2:	4603      	mov	r3, r0
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	4619      	mov	r1, r3
 800e1b8:	4620      	mov	r0, r4
 800e1ba:	f000 f92d 	bl	800e418 <_ZNKSt14default_deleteI5BlinkEclEPS0_>
	__ptr = pointer();
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	601a      	str	r2, [r3, #0]
      }
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	3714      	adds	r7, #20
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	bd90      	pop	{r4, r7, pc}

0800e1ce <_ZNSt10shared_ptrI6ModuleEC1I5BlinkSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>:
	shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 800e1ce:	b590      	push	{r4, r7, lr}
 800e1d0:	b083      	sub	sp, #12
 800e1d2:	af00      	add	r7, sp, #0
 800e1d4:	6078      	str	r0, [r7, #4]
 800e1d6:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 800e1d8:	687c      	ldr	r4, [r7, #4]
 800e1da:	6838      	ldr	r0, [r7, #0]
 800e1dc:	f000 f92d 	bl	800e43a <_ZSt4moveIRSt10unique_ptrI5BlinkSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800e1e0:	4603      	mov	r3, r0
 800e1e2:	4619      	mov	r1, r3
 800e1e4:	4620      	mov	r0, r4
 800e1e6:	f000 f933 	bl	800e450 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	370c      	adds	r7, #12
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	bd90      	pop	{r4, r7, pc}

0800e1f4 <_ZSt11make_uniqueI3PinJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800e1f4:	b5b0      	push	{r4, r5, r7, lr}
 800e1f6:	b084      	sub	sp, #16
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	60f8      	str	r0, [r7, #12]
 800e1fc:	60b9      	str	r1, [r7, #8]
 800e1fe:	607a      	str	r2, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800e200:	2040      	movs	r0, #64	@ 0x40
 800e202:	f017 fe6b 	bl	8025edc <_Znwj>
 800e206:	4603      	mov	r3, r0
 800e208:	461c      	mov	r4, r3
 800e20a:	68b8      	ldr	r0, [r7, #8]
 800e20c:	f000 f958 	bl	800e4c0 <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800e210:	4605      	mov	r5, r0
 800e212:	6878      	ldr	r0, [r7, #4]
 800e214:	f000 f83d 	bl	800e292 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 800e218:	4603      	mov	r3, r0
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	461a      	mov	r2, r3
 800e21e:	4629      	mov	r1, r5
 800e220:	4620      	mov	r0, r4
 800e222:	f7f5 fae9 	bl	80037f8 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 800e226:	4621      	mov	r1, r4
 800e228:	68f8      	ldr	r0, [r7, #12]
 800e22a:	f000 f964 	bl	800e4f6 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800e22e:	68f8      	ldr	r0, [r7, #12]
 800e230:	3710      	adds	r7, #16
 800e232:	46bd      	mov	sp, r7
 800e234:	bdb0      	pop	{r4, r5, r7, pc}

0800e236 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800e236:	b590      	push	{r4, r7, lr}
 800e238:	b085      	sub	sp, #20
 800e23a:	af00      	add	r7, sp, #0
 800e23c:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	4618      	mov	r0, r3
 800e242:	f000 f967 	bl	800e514 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>
 800e246:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d00c      	beq.n	800e26a <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800e250:	6878      	ldr	r0, [r7, #4]
 800e252:	f000 f96c 	bl	800e52e <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EE11get_deleterEv>
 800e256:	4604      	mov	r4, r0
 800e258:	68f8      	ldr	r0, [r7, #12]
 800e25a:	f000 f975 	bl	800e548 <_ZSt4moveIRP3PinEONSt16remove_referenceIT_E4typeEOS4_>
 800e25e:	4603      	mov	r3, r0
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	4619      	mov	r1, r3
 800e264:	4620      	mov	r0, r4
 800e266:	f000 f987 	bl	800e578 <_ZNKSt14default_deleteI3PinEclEPS0_>
	__ptr = pointer();
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	2200      	movs	r2, #0
 800e26e:	601a      	str	r2, [r3, #0]
      }
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	4618      	mov	r0, r3
 800e274:	3714      	adds	r7, #20
 800e276:	46bd      	mov	sp, r7
 800e278:	bd90      	pop	{r4, r7, pc}

0800e27a <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800e27a:	b580      	push	{r7, lr}
 800e27c:	b082      	sub	sp, #8
 800e27e:	af00      	add	r7, sp, #0
 800e280:	6078      	str	r0, [r7, #4]
	return get();
 800e282:	6878      	ldr	r0, [r7, #4]
 800e284:	f000 f98b 	bl	800e59e <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EE3getEv>
 800e288:	4603      	mov	r3, r0
      }
 800e28a:	4618      	mov	r0, r3
 800e28c:	3708      	adds	r7, #8
 800e28e:	46bd      	mov	sp, r7
 800e290:	bd80      	pop	{r7, pc}

0800e292 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e292:	b480      	push	{r7}
 800e294:	b083      	sub	sp, #12
 800e296:	af00      	add	r7, sp, #0
 800e298:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	4618      	mov	r0, r3
 800e29e:	370c      	adds	r7, #12
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a6:	4770      	bx	lr

0800e2a8 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA4_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	b082      	sub	sp, #8
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
 800e2b0:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800e2b2:	6838      	ldr	r0, [r7, #0]
 800e2b4:	f000 f980 	bl	800e5b8 <_ZN11ArduinoJson8V730HB226detail7forwardIRA4_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 800e2b8:	4602      	mov	r2, r0
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	4611      	mov	r1, r2
 800e2be:	4618      	mov	r0, r3
 800e2c0:	f000 f985 	bl	800e5ce <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA4_KcvE5adaptES5_>
 800e2c4:	bf00      	nop
}
 800e2c6:	6878      	ldr	r0, [r7, #4]
 800e2c8:	3708      	adds	r7, #8
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	bd80      	pop	{r7, pc}

0800e2ce <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIiEET_v>:
  return add<JsonVariant>();
}

template <typename TDerived>
template <typename T>
inline T VariantRefBase<TDerived>::as() const {
 800e2ce:	b590      	push	{r4, r7, lr}
 800e2d0:	b087      	sub	sp, #28
 800e2d2:	af00      	add	r7, sp, #0
 800e2d4:	6078      	str	r0, [r7, #4]
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	617b      	str	r3, [r7, #20]
 800e2da:	697b      	ldr	r3, [r7, #20]
 800e2dc:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 800e2de:	6938      	ldr	r0, [r7, #16]
 800e2e0:	f7f9 fad3 	bl	800788a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 800e2e4:	4604      	mov	r4, r0
 800e2e6:	6938      	ldr	r0, [r7, #16]
 800e2e8:	f7f9 f95d 	bl	80075a6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 800e2ec:	4602      	mov	r2, r0
 800e2ee:	f107 0308 	add.w	r3, r7, #8
 800e2f2:	4621      	mov	r1, r4
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	f7f6 f9f8 	bl	80046ea <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 800e2fa:	bf00      	nop
  using variant_type =  // JsonVariantConst or JsonVariant?
      typename function_traits<decltype(&Converter<T>::fromJson)>::arg1_type;
  return Converter<T>::fromJson(getVariant<variant_type>());
 800e2fc:	f107 0308 	add.w	r3, r7, #8
 800e300:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e304:	f000 f972 	bl	800e5ec <_ZN11ArduinoJson8V730HB229ConverterIivE8fromJsonENS0_16JsonVariantConstE>
 800e308:	4603      	mov	r3, r0
}
 800e30a:	4618      	mov	r0, r3
 800e30c:	371c      	adds	r7, #28
 800e30e:	46bd      	mov	sp, r7
 800e310:	bd90      	pop	{r4, r7, pc}

0800e312 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e312:	b480      	push	{r7}
 800e314:	b083      	sub	sp, #12
 800e316:	af00      	add	r7, sp, #0
 800e318:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	4618      	mov	r0, r3
 800e31e:	370c      	adds	r7, #12
 800e320:	46bd      	mov	sp, r7
 800e322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e326:	4770      	bx	lr

0800e328 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e328:	b480      	push	{r7}
 800e32a:	b083      	sub	sp, #12
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	4618      	mov	r0, r3
 800e334:	370c      	adds	r7, #12
 800e336:	46bd      	mov	sp, r7
 800e338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33c:	4770      	bx	lr

0800e33e <_ZNSt15__uniq_ptr_dataI5BlinkSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800e33e:	b580      	push	{r7, lr}
 800e340:	b082      	sub	sp, #8
 800e342:	af00      	add	r7, sp, #0
 800e344:	6078      	str	r0, [r7, #4]
 800e346:	6039      	str	r1, [r7, #0]
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	683a      	ldr	r2, [r7, #0]
 800e34c:	4611      	mov	r1, r2
 800e34e:	4618      	mov	r0, r3
 800e350:	f000 f96a 	bl	800e628 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EEC1EPS0_>
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	4618      	mov	r0, r3
 800e358:	3708      	adds	r7, #8
 800e35a:	46bd      	mov	sp, r7
 800e35c:	bd80      	pop	{r7, pc}

0800e35e <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800e35e:	b580      	push	{r7, lr}
 800e360:	b082      	sub	sp, #8
 800e362:	af00      	add	r7, sp, #0
 800e364:	6078      	str	r0, [r7, #4]
 800e366:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	6839      	ldr	r1, [r7, #0]
 800e36c:	4618      	mov	r0, r3
 800e36e:	f7ff ffe6 	bl	800e33e <_ZNSt15__uniq_ptr_dataI5BlinkSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	4618      	mov	r0, r3
 800e376:	3708      	adds	r7, #8
 800e378:	46bd      	mov	sp, r7
 800e37a:	bd80      	pop	{r7, pc}

0800e37c <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800e37c:	b580      	push	{r7, lr}
 800e37e:	b082      	sub	sp, #8
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	4618      	mov	r0, r3
 800e388:	f000 f962 	bl	800e650 <_ZSt3getILj0EJP5BlinkSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800e38c:	4603      	mov	r3, r0
 800e38e:	4618      	mov	r0, r3
 800e390:	3708      	adds	r7, #8
 800e392:	46bd      	mov	sp, r7
 800e394:	bd80      	pop	{r7, pc}

0800e396 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800e396:	b580      	push	{r7, lr}
 800e398:	b082      	sub	sp, #8
 800e39a:	af00      	add	r7, sp, #0
 800e39c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	f000 f962 	bl	800e66a <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE10_M_deleterEv>
 800e3a6:	4603      	mov	r3, r0
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	3708      	adds	r7, #8
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	bd80      	pop	{r7, pc}

0800e3b0 <_ZSt4moveIRP5BlinkEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800e3b0:	b480      	push	{r7}
 800e3b2:	b083      	sub	sp, #12
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	370c      	adds	r7, #12
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c4:	4770      	bx	lr
	...

0800e3c8 <_ZN5BlinkD1Ev>:
 * @class Blink
 * @brief A module for toggling a pin at a specific frequency.
 * 
 * The Blink class controls a GPIO pin, toggling its state at a specified frequency.
 */
class Blink : public Module
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b082      	sub	sp, #8
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
 800e3d0:	4a08      	ldr	r2, [pc, #32]	@ (800e3f4 <_ZN5BlinkD1Ev+0x2c>)
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	601a      	str	r2, [r3, #0]
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	3320      	adds	r3, #32
 800e3da:	4618      	mov	r0, r3
 800e3dc:	f7ff ff2b 	bl	800e236 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EED1Ev>
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	f002 fbea 	bl	8010bbc <_ZN6ModuleD1Ev>
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	3708      	adds	r7, #8
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	bd80      	pop	{r7, pc}
 800e3f2:	bf00      	nop
 800e3f4:	08028a04 	.word	0x08028a04

0800e3f8 <_ZN5BlinkD0Ev>:
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b082      	sub	sp, #8
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]
 800e400:	6878      	ldr	r0, [r7, #4]
 800e402:	f7ff ffe1 	bl	800e3c8 <_ZN5BlinkD1Ev>
 800e406:	2124      	movs	r1, #36	@ 0x24
 800e408:	6878      	ldr	r0, [r7, #4]
 800e40a:	f017 fd56 	bl	8025eba <_ZdlPvj>
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	4618      	mov	r0, r3
 800e412:	3708      	adds	r7, #8
 800e414:	46bd      	mov	sp, r7
 800e416:	bd80      	pop	{r7, pc}

0800e418 <_ZNKSt14default_deleteI5BlinkEclEPS0_>:
      operator()(_Tp* __ptr) const
 800e418:	b580      	push	{r7, lr}
 800e41a:	b082      	sub	sp, #8
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
 800e420:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800e422:	683b      	ldr	r3, [r7, #0]
 800e424:	2b00      	cmp	r3, #0
 800e426:	d004      	beq.n	800e432 <_ZNKSt14default_deleteI5BlinkEclEPS0_+0x1a>
 800e428:	681a      	ldr	r2, [r3, #0]
 800e42a:	3204      	adds	r2, #4
 800e42c:	6812      	ldr	r2, [r2, #0]
 800e42e:	4618      	mov	r0, r3
 800e430:	4790      	blx	r2
      }
 800e432:	bf00      	nop
 800e434:	3708      	adds	r7, #8
 800e436:	46bd      	mov	sp, r7
 800e438:	bd80      	pop	{r7, pc}

0800e43a <_ZSt4moveIRSt10unique_ptrI5BlinkSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800e43a:	b480      	push	{r7}
 800e43c:	b083      	sub	sp, #12
 800e43e:	af00      	add	r7, sp, #0
 800e440:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	4618      	mov	r0, r3
 800e446:	370c      	adds	r7, #12
 800e448:	46bd      	mov	sp, r7
 800e44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44e:	4770      	bx	lr

0800e450 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>:
	__shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 800e450:	b580      	push	{r7, lr}
 800e452:	b084      	sub	sp, #16
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
 800e458:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r.get()), _M_refcount()
 800e45a:	6838      	ldr	r0, [r7, #0]
 800e45c:	f000 f912 	bl	800e684 <_ZNKSt10unique_ptrI5BlinkSt14default_deleteIS0_EE3getEv>
 800e460:	4602      	mov	r2, r0
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	601a      	str	r2, [r3, #0]
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	3304      	adds	r3, #4
 800e46a:	4618      	mov	r0, r3
 800e46c:	f7fd fd66 	bl	800bf3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  auto __raw = __to_address(__r.get());
 800e470:	6838      	ldr	r0, [r7, #0]
 800e472:	f000 f907 	bl	800e684 <_ZNKSt10unique_ptrI5BlinkSt14default_deleteIS0_EE3getEv>
 800e476:	4603      	mov	r3, r0
 800e478:	4618      	mov	r0, r3
 800e47a:	f000 f910 	bl	800e69e <_ZSt12__to_addressI5BlinkEPT_S2_>
 800e47e:	60f8      	str	r0, [r7, #12]
	  _M_refcount = __shared_count<_Lp>(std::move(__r));
 800e480:	6838      	ldr	r0, [r7, #0]
 800e482:	f7ff ffda 	bl	800e43a <_ZSt4moveIRSt10unique_ptrI5BlinkSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800e486:	4602      	mov	r2, r0
 800e488:	f107 0308 	add.w	r3, r7, #8
 800e48c:	4611      	mov	r1, r2
 800e48e:	4618      	mov	r0, r3
 800e490:	f000 f910 	bl	800e6b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	3304      	adds	r3, #4
 800e498:	f107 0208 	add.w	r2, r7, #8
 800e49c:	4611      	mov	r1, r2
 800e49e:	4618      	mov	r0, r3
 800e4a0:	f000 f94a 	bl	800e738 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 800e4a4:	f107 0308 	add.w	r3, r7, #8
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	f7fc fb4a 	bl	800ab42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  _M_enable_shared_from_this_with(__raw);
 800e4ae:	68f9      	ldr	r1, [r7, #12]
 800e4b0:	6878      	ldr	r0, [r7, #4]
 800e4b2:	f000 f965 	bl	800e780 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI5BlinkS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	3710      	adds	r7, #16
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	bd80      	pop	{r7, pc}

0800e4c0 <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e4c0:	b480      	push	{r7}
 800e4c2:	b083      	sub	sp, #12
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	370c      	adds	r7, #12
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d4:	4770      	bx	lr

0800e4d6 <_ZNSt15__uniq_ptr_dataI3PinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800e4d6:	b580      	push	{r7, lr}
 800e4d8:	b082      	sub	sp, #8
 800e4da:	af00      	add	r7, sp, #0
 800e4dc:	6078      	str	r0, [r7, #4]
 800e4de:	6039      	str	r1, [r7, #0]
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	683a      	ldr	r2, [r7, #0]
 800e4e4:	4611      	mov	r1, r2
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	f000 f955 	bl	800e796 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EEC1EPS0_>
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	3708      	adds	r7, #8
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	bd80      	pop	{r7, pc}

0800e4f6 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800e4f6:	b580      	push	{r7, lr}
 800e4f8:	b082      	sub	sp, #8
 800e4fa:	af00      	add	r7, sp, #0
 800e4fc:	6078      	str	r0, [r7, #4]
 800e4fe:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	6839      	ldr	r1, [r7, #0]
 800e504:	4618      	mov	r0, r3
 800e506:	f7ff ffe6 	bl	800e4d6 <_ZNSt15__uniq_ptr_dataI3PinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	4618      	mov	r0, r3
 800e50e:	3708      	adds	r7, #8
 800e510:	46bd      	mov	sp, r7
 800e512:	bd80      	pop	{r7, pc}

0800e514 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800e514:	b580      	push	{r7, lr}
 800e516:	b082      	sub	sp, #8
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	4618      	mov	r0, r3
 800e520:	f000 f94d 	bl	800e7be <_ZSt3getILj0EJP3PinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800e524:	4603      	mov	r3, r0
 800e526:	4618      	mov	r0, r3
 800e528:	3708      	adds	r7, #8
 800e52a:	46bd      	mov	sp, r7
 800e52c:	bd80      	pop	{r7, pc}

0800e52e <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800e52e:	b580      	push	{r7, lr}
 800e530:	b082      	sub	sp, #8
 800e532:	af00      	add	r7, sp, #0
 800e534:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	4618      	mov	r0, r3
 800e53a:	f000 f94d 	bl	800e7d8 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE10_M_deleterEv>
 800e53e:	4603      	mov	r3, r0
 800e540:	4618      	mov	r0, r3
 800e542:	3708      	adds	r7, #8
 800e544:	46bd      	mov	sp, r7
 800e546:	bd80      	pop	{r7, pc}

0800e548 <_ZSt4moveIRP3PinEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800e548:	b480      	push	{r7}
 800e54a:	b083      	sub	sp, #12
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	4618      	mov	r0, r3
 800e554:	370c      	adds	r7, #12
 800e556:	46bd      	mov	sp, r7
 800e558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55c:	4770      	bx	lr

0800e55e <_ZN3PinD1Ev>:
#define OPENDRAIN   0b001
#define PULLUP      0b010
#define PULLDOWN    0b011
#define PULLNONE    0b100

class Pin {
 800e55e:	b580      	push	{r7, lr}
 800e560:	b082      	sub	sp, #8
 800e562:	af00      	add	r7, sp, #0
 800e564:	6078      	str	r0, [r7, #4]
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	4618      	mov	r0, r3
 800e56a:	f017 fdb2 	bl	80260d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	4618      	mov	r0, r3
 800e572:	3708      	adds	r7, #8
 800e574:	46bd      	mov	sp, r7
 800e576:	bd80      	pop	{r7, pc}

0800e578 <_ZNKSt14default_deleteI3PinEclEPS0_>:
      operator()(_Tp* __ptr) const
 800e578:	b590      	push	{r4, r7, lr}
 800e57a:	b083      	sub	sp, #12
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
 800e580:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800e582:	683c      	ldr	r4, [r7, #0]
 800e584:	2c00      	cmp	r4, #0
 800e586:	d006      	beq.n	800e596 <_ZNKSt14default_deleteI3PinEclEPS0_+0x1e>
 800e588:	4620      	mov	r0, r4
 800e58a:	f7ff ffe8 	bl	800e55e <_ZN3PinD1Ev>
 800e58e:	2140      	movs	r1, #64	@ 0x40
 800e590:	4620      	mov	r0, r4
 800e592:	f017 fc92 	bl	8025eba <_ZdlPvj>
      }
 800e596:	bf00      	nop
 800e598:	370c      	adds	r7, #12
 800e59a:	46bd      	mov	sp, r7
 800e59c:	bd90      	pop	{r4, r7, pc}

0800e59e <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800e59e:	b580      	push	{r7, lr}
 800e5a0:	b082      	sub	sp, #8
 800e5a2:	af00      	add	r7, sp, #0
 800e5a4:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	f000 f922 	bl	800e7f2 <_ZNKSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>
 800e5ae:	4603      	mov	r3, r0
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	3708      	adds	r7, #8
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	bd80      	pop	{r7, pc}

0800e5b8 <_ZN11ArduinoJson8V730HB226detail7forwardIRA4_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800e5b8:	b480      	push	{r7}
 800e5ba:	b083      	sub	sp, #12
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800e5c0:	687b      	ldr	r3, [r7, #4]
}
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	370c      	adds	r7, #12
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5cc:	4770      	bx	lr

0800e5ce <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA4_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 800e5ce:	b580      	push	{r7, lr}
 800e5d0:	b082      	sub	sp, #8
 800e5d2:	af00      	add	r7, sp, #0
 800e5d4:	6078      	str	r0, [r7, #4]
 800e5d6:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800e5d8:	2301      	movs	r3, #1
 800e5da:	2203      	movs	r2, #3
 800e5dc:	6839      	ldr	r1, [r7, #0]
 800e5de:	6878      	ldr	r0, [r7, #4]
 800e5e0:	f7f5 fcbc 	bl	8003f5c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800e5e4:	6878      	ldr	r0, [r7, #4]
 800e5e6:	3708      	adds	r7, #8
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	bd80      	pop	{r7, pc}

0800e5ec <_ZN11ArduinoJson8V730HB229ConverterIivE8fromJsonENS0_16JsonVariantConstE>:
    auto resources = getResourceManager(dst);
    data->clear(resources);
    return data->setInteger(src, resources);
  }

  static T fromJson(JsonVariantConst src) {
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b084      	sub	sp, #16
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	463b      	mov	r3, r7
 800e5f4:	e883 0003 	stmia.w	r3, {r0, r1}
    ARDUINOJSON_ASSERT_INTEGER_TYPE_IS_SUPPORTED(T);
    auto data = getData(src);
 800e5f8:	463b      	mov	r3, r7
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	f7f7 fdf4 	bl	80061e8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 800e600:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 800e602:	463b      	mov	r3, r7
 800e604:	4618      	mov	r0, r3
 800e606:	f7f7 fdfb 	bl	8006200 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 800e60a:	60b8      	str	r0, [r7, #8]
    return data ? data->template asIntegral<T>(resources) : T();
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d005      	beq.n	800e61e <_ZN11ArduinoJson8V730HB229ConverterIivE8fromJsonENS0_16JsonVariantConstE+0x32>
 800e612:	68b9      	ldr	r1, [r7, #8]
 800e614:	68f8      	ldr	r0, [r7, #12]
 800e616:	f000 f8fb 	bl	800e810 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE>
 800e61a:	4603      	mov	r3, r0
 800e61c:	e000      	b.n	800e620 <_ZN11ArduinoJson8V730HB229ConverterIivE8fromJsonENS0_16JsonVariantConstE+0x34>
 800e61e:	2300      	movs	r3, #0
  }
 800e620:	4618      	mov	r0, r3
 800e622:	3710      	adds	r7, #16
 800e624:	46bd      	mov	sp, r7
 800e626:	bd80      	pop	{r7, pc}

0800e628 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800e628:	b590      	push	{r4, r7, lr}
 800e62a:	b083      	sub	sp, #12
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
 800e630:	6039      	str	r1, [r7, #0]
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	4618      	mov	r0, r3
 800e636:	f000 f97d 	bl	800e934 <_ZNSt5tupleIJP5BlinkSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800e63a:	683c      	ldr	r4, [r7, #0]
 800e63c:	6878      	ldr	r0, [r7, #4]
 800e63e:	f7ff fe9d 	bl	800e37c <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 800e642:	4603      	mov	r3, r0
 800e644:	601c      	str	r4, [r3, #0]
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	4618      	mov	r0, r3
 800e64a:	370c      	adds	r7, #12
 800e64c:	46bd      	mov	sp, r7
 800e64e:	bd90      	pop	{r4, r7, pc}

0800e650 <_ZSt3getILj0EJP5BlinkSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800e650:	b580      	push	{r7, lr}
 800e652:	b082      	sub	sp, #8
 800e654:	af00      	add	r7, sp, #0
 800e656:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	4618      	mov	r0, r3
 800e65c:	f000 f977 	bl	800e94e <_ZSt12__get_helperILj0EP5BlinkJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800e660:	4603      	mov	r3, r0
 800e662:	4618      	mov	r0, r3
 800e664:	3708      	adds	r7, #8
 800e666:	46bd      	mov	sp, r7
 800e668:	bd80      	pop	{r7, pc}

0800e66a <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800e66a:	b580      	push	{r7, lr}
 800e66c:	b082      	sub	sp, #8
 800e66e:	af00      	add	r7, sp, #0
 800e670:	6078      	str	r0, [r7, #4]
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	4618      	mov	r0, r3
 800e676:	f000 f976 	bl	800e966 <_ZSt3getILj1EJP5BlinkSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800e67a:	4603      	mov	r3, r0
 800e67c:	4618      	mov	r0, r3
 800e67e:	3708      	adds	r7, #8
 800e680:	46bd      	mov	sp, r7
 800e682:	bd80      	pop	{r7, pc}

0800e684 <_ZNKSt10unique_ptrI5BlinkSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800e684:	b580      	push	{r7, lr}
 800e686:	b082      	sub	sp, #8
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	4618      	mov	r0, r3
 800e690:	f000 f975 	bl	800e97e <_ZNKSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 800e694:	4603      	mov	r3, r0
 800e696:	4618      	mov	r0, r3
 800e698:	3708      	adds	r7, #8
 800e69a:	46bd      	mov	sp, r7
 800e69c:	bd80      	pop	{r7, pc}

0800e69e <_ZSt12__to_addressI5BlinkEPT_S2_>:
    __to_address(_Tp* __ptr) noexcept
 800e69e:	b480      	push	{r7}
 800e6a0:	b083      	sub	sp, #12
 800e6a2:	af00      	add	r7, sp, #0
 800e6a4:	6078      	str	r0, [r7, #4]
      return __ptr;
 800e6a6:	687b      	ldr	r3, [r7, #4]
    }
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	370c      	adds	r7, #12
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b2:	4770      	bx	lr

0800e6b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>:
	__shared_count(std::unique_ptr<_Tp, _Del>&& __r) : _M_pi(0)
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b086      	sub	sp, #24
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
 800e6bc:	6039      	str	r1, [r7, #0]
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	601a      	str	r2, [r3, #0]
	  if (__r.get() == nullptr)
 800e6c4:	6838      	ldr	r0, [r7, #0]
 800e6c6:	f7ff ffdd 	bl	800e684 <_ZNKSt10unique_ptrI5BlinkSt14default_deleteIS0_EE3getEv>
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	bf0c      	ite	eq
 800e6d0:	2301      	moveq	r3, #1
 800e6d2:	2300      	movne	r3, #0
 800e6d4:	b2db      	uxtb	r3, r3
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d128      	bne.n	800e72c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x78>
	  _Alloc __a;
 800e6da:	f107 030c 	add.w	r3, r7, #12
 800e6de:	4618      	mov	r0, r3
 800e6e0:	f000 f95b 	bl	800e99a <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
	  _Sp_cd_type* __mem = _Alloc_traits::allocate(__a, 1);
 800e6e4:	f107 030c 	add.w	r3, r7, #12
 800e6e8:	2101      	movs	r1, #1
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	f000 f96d 	bl	800e9ca <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>
 800e6f0:	6178      	str	r0, [r7, #20]
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 800e6f2:	6838      	ldr	r0, [r7, #0]
 800e6f4:	f000 f978 	bl	800e9e8 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE7releaseEv>
 800e6f8:	4603      	mov	r3, r0
 800e6fa:	613b      	str	r3, [r7, #16]
				   std::forward<_Del>(__r.get_deleter()));
 800e6fc:	6838      	ldr	r0, [r7, #0]
 800e6fe:	f7ff fe4a 	bl	800e396 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE11get_deleterEv>
 800e702:	4603      	mov	r3, r0
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 800e704:	4618      	mov	r0, r3
 800e706:	f000 f97c 	bl	800ea02 <_ZSt7forwardISt14default_deleteI5BlinkEEOT_RNSt16remove_referenceIS3_E4typeE>
 800e70a:	4603      	mov	r3, r0
 800e70c:	f107 0210 	add.w	r2, r7, #16
 800e710:	f107 000c 	add.w	r0, r7, #12
 800e714:	6979      	ldr	r1, [r7, #20]
 800e716:	f000 f97f 	bl	800ea18 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>
	  _M_pi = __mem;
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	697a      	ldr	r2, [r7, #20]
 800e71e:	601a      	str	r2, [r3, #0]
	}
 800e720:	f107 030c 	add.w	r3, r7, #12
 800e724:	4618      	mov	r0, r3
 800e726:	f000 f944 	bl	800e9b2 <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800e72a:	e000      	b.n	800e72e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x7a>
	    return;
 800e72c:	bf00      	nop
	}
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	4618      	mov	r0, r3
 800e732:	3718      	adds	r7, #24
 800e734:	46bd      	mov	sp, r7
 800e736:	bd80      	pop	{r7, pc}

0800e738 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
      operator=(const __shared_count& __r) noexcept
 800e738:	b580      	push	{r7, lr}
 800e73a:	b084      	sub	sp, #16
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
 800e740:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 800e742:	683b      	ldr	r3, [r7, #0]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	60fb      	str	r3, [r7, #12]
	if (__tmp != _M_pi)
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	68fa      	ldr	r2, [r7, #12]
 800e74e:	429a      	cmp	r2, r3
 800e750:	d011      	beq.n	800e776 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x3e>
	    if (__tmp != nullptr)
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d002      	beq.n	800e75e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	      __tmp->_M_add_ref_copy();
 800e758:	68f8      	ldr	r0, [r7, #12]
 800e75a:	f7fa ffdd 	bl	8009718 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>
	    if (_M_pi != nullptr)
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d004      	beq.n	800e770 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x38>
	      _M_pi->_M_release();
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	4618      	mov	r0, r3
 800e76c:	f7fa ffe3 	bl	8009736 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	68fa      	ldr	r2, [r7, #12]
 800e774:	601a      	str	r2, [r3, #0]
	return *this;
 800e776:	687b      	ldr	r3, [r7, #4]
      }
 800e778:	4618      	mov	r0, r3
 800e77a:	3710      	adds	r7, #16
 800e77c:	46bd      	mov	sp, r7
 800e77e:	bd80      	pop	{r7, pc}

0800e780 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI5BlinkS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 800e780:	b480      	push	{r7}
 800e782:	b083      	sub	sp, #12
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
 800e788:	6039      	str	r1, [r7, #0]
	{ }
 800e78a:	bf00      	nop
 800e78c:	370c      	adds	r7, #12
 800e78e:	46bd      	mov	sp, r7
 800e790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e794:	4770      	bx	lr

0800e796 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800e796:	b590      	push	{r4, r7, lr}
 800e798:	b083      	sub	sp, #12
 800e79a:	af00      	add	r7, sp, #0
 800e79c:	6078      	str	r0, [r7, #4]
 800e79e:	6039      	str	r1, [r7, #0]
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	f000 f950 	bl	800ea48 <_ZNSt5tupleIJP3PinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800e7a8:	683c      	ldr	r4, [r7, #0]
 800e7aa:	6878      	ldr	r0, [r7, #4]
 800e7ac:	f7ff feb2 	bl	800e514 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>
 800e7b0:	4603      	mov	r3, r0
 800e7b2:	601c      	str	r4, [r3, #0]
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	370c      	adds	r7, #12
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	bd90      	pop	{r4, r7, pc}

0800e7be <_ZSt3getILj0EJP3PinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800e7be:	b580      	push	{r7, lr}
 800e7c0:	b082      	sub	sp, #8
 800e7c2:	af00      	add	r7, sp, #0
 800e7c4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	f000 f94a 	bl	800ea62 <_ZSt12__get_helperILj0EP3PinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800e7ce:	4603      	mov	r3, r0
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	3708      	adds	r7, #8
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	bd80      	pop	{r7, pc}

0800e7d8 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b082      	sub	sp, #8
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	f000 f949 	bl	800ea7a <_ZSt3getILj1EJP3PinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800e7e8:	4603      	mov	r3, r0
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	3708      	adds	r7, #8
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bd80      	pop	{r7, pc}

0800e7f2 <_ZNKSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800e7f2:	b580      	push	{r7, lr}
 800e7f4:	b082      	sub	sp, #8
 800e7f6:	af00      	add	r7, sp, #0
 800e7f8:	6078      	str	r0, [r7, #4]
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	f000 f948 	bl	800ea92 <_ZSt3getILj0EJP3PinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800e802:	4603      	mov	r3, r0
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	4618      	mov	r0, r3
 800e808:	3708      	adds	r7, #8
 800e80a:	46bd      	mov	sp, r7
 800e80c:	bd80      	pop	{r7, pc}
	...

0800e810 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE>:
  T asIntegral(const ResourceManager* resources) const {
 800e810:	b580      	push	{r7, lr}
 800e812:	b084      	sub	sp, #16
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
 800e818:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 800e81a:	6839      	ldr	r1, [r7, #0]
 800e81c:	6878      	ldr	r0, [r7, #4]
 800e81e:	f7f6 fcf9 	bl	8005214 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 800e822:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	791b      	ldrb	r3, [r3, #4]
 800e828:	3b04      	subs	r3, #4
 800e82a:	2b1a      	cmp	r3, #26
 800e82c:	d87c      	bhi.n	800e928 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x118>
 800e82e:	a201      	add	r2, pc, #4	@ (adr r2, 800e834 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x24>)
 800e830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e834:	0800e8e7 	.word	0x0800e8e7
 800e838:	0800e8f5 	.word	0x0800e8f5
 800e83c:	0800e8a1 	.word	0x0800e8a1
 800e840:	0800e929 	.word	0x0800e929
 800e844:	0800e929 	.word	0x0800e929
 800e848:	0800e929 	.word	0x0800e929
 800e84c:	0800e8a7 	.word	0x0800e8a7
 800e850:	0800e929 	.word	0x0800e929
 800e854:	0800e8b5 	.word	0x0800e8b5
 800e858:	0800e929 	.word	0x0800e929
 800e85c:	0800e905 	.word	0x0800e905
 800e860:	0800e929 	.word	0x0800e929
 800e864:	0800e929 	.word	0x0800e929
 800e868:	0800e929 	.word	0x0800e929
 800e86c:	0800e929 	.word	0x0800e929
 800e870:	0800e929 	.word	0x0800e929
 800e874:	0800e929 	.word	0x0800e929
 800e878:	0800e929 	.word	0x0800e929
 800e87c:	0800e929 	.word	0x0800e929
 800e880:	0800e929 	.word	0x0800e929
 800e884:	0800e929 	.word	0x0800e929
 800e888:	0800e929 	.word	0x0800e929
 800e88c:	0800e8c3 	.word	0x0800e8c3
 800e890:	0800e929 	.word	0x0800e929
 800e894:	0800e8d5 	.word	0x0800e8d5
 800e898:	0800e929 	.word	0x0800e929
 800e89c:	0800e917 	.word	0x0800e917
        return content_.asBoolean;
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	781b      	ldrb	r3, [r3, #0]
 800e8a4:	e041      	b.n	800e92a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asUint32);
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	f000 f8fe 	bl	800eaac <_ZN11ArduinoJson8V730HB226detail13convertNumberIimEET_T0_>
 800e8b0:	4603      	mov	r3, r0
 800e8b2:	e03a      	b.n	800e92a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asInt32);
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	f000 f908 	bl	800eace <_ZN11ArduinoJson8V730HB226detail13convertNumberIilEET_T0_>
 800e8be:	4603      	mov	r3, r0
 800e8c0:	e033      	b.n	800e92a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asUint64);
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8c8:	4610      	mov	r0, r2
 800e8ca:	4619      	mov	r1, r3
 800e8cc:	f000 f910 	bl	800eaf0 <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_>
 800e8d0:	4603      	mov	r3, r0
 800e8d2:	e02a      	b.n	800e92a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asInt64);
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8da:	4610      	mov	r0, r2
 800e8dc:	4619      	mov	r1, r3
 800e8de:	f000 f91a 	bl	800eb16 <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_>
 800e8e2:	4603      	mov	r3, r0
 800e8e4:	e021      	b.n	800e92a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asLinkedString);
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	f000 f926 	bl	800eb3c <_ZN11ArduinoJson8V730HB226detail11parseNumberIiEET_PKc>
 800e8f0:	4603      	mov	r3, r0
 800e8f2:	e01a      	b.n	800e92a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asOwnedString->data);
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	3308      	adds	r3, #8
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	f000 f91e 	bl	800eb3c <_ZN11ArduinoJson8V730HB226detail11parseNumberIiEET_PKc>
 800e900:	4603      	mov	r3, r0
 800e902:	e012      	b.n	800e92a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asFloat);
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	edd3 7a00 	vldr	s15, [r3]
 800e90a:	eeb0 0a67 	vmov.f32	s0, s15
 800e90e:	f000 f929 	bl	800eb64 <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_>
 800e912:	4603      	mov	r3, r0
 800e914:	e009      	b.n	800e92a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asDouble);
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	ed93 7b00 	vldr	d7, [r3]
 800e91c:	eeb0 0b47 	vmov.f64	d0, d7
 800e920:	f000 f938 	bl	800eb94 <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_>
 800e924:	4603      	mov	r3, r0
 800e926:	e000      	b.n	800e92a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return 0;
 800e928:	2300      	movs	r3, #0
  }
 800e92a:	4618      	mov	r0, r3
 800e92c:	3710      	adds	r7, #16
 800e92e:	46bd      	mov	sp, r7
 800e930:	bd80      	pop	{r7, pc}
 800e932:	bf00      	nop

0800e934 <_ZNSt5tupleIJP5BlinkSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800e934:	b580      	push	{r7, lr}
 800e936:	b082      	sub	sp, #8
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	4618      	mov	r0, r3
 800e940:	f000 f940 	bl	800ebc4 <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEEC1Ev>
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	4618      	mov	r0, r3
 800e948:	3708      	adds	r7, #8
 800e94a:	46bd      	mov	sp, r7
 800e94c:	bd80      	pop	{r7, pc}

0800e94e <_ZSt12__get_helperILj0EP5BlinkJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e94e:	b580      	push	{r7, lr}
 800e950:	b082      	sub	sp, #8
 800e952:	af00      	add	r7, sp, #0
 800e954:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e956:	6878      	ldr	r0, [r7, #4]
 800e958:	f000 f944 	bl	800ebe4 <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEE7_M_headERS4_>
 800e95c:	4603      	mov	r3, r0
 800e95e:	4618      	mov	r0, r3
 800e960:	3708      	adds	r7, #8
 800e962:	46bd      	mov	sp, r7
 800e964:	bd80      	pop	{r7, pc}

0800e966 <_ZSt3getILj1EJP5BlinkSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800e966:	b580      	push	{r7, lr}
 800e968:	b082      	sub	sp, #8
 800e96a:	af00      	add	r7, sp, #0
 800e96c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800e96e:	6878      	ldr	r0, [r7, #4]
 800e970:	f000 f945 	bl	800ebfe <_ZSt12__get_helperILj1ESt14default_deleteI5BlinkEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800e974:	4603      	mov	r3, r0
 800e976:	4618      	mov	r0, r3
 800e978:	3708      	adds	r7, #8
 800e97a:	46bd      	mov	sp, r7
 800e97c:	bd80      	pop	{r7, pc}

0800e97e <_ZNKSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>:
 800e97e:	b580      	push	{r7, lr}
 800e980:	b082      	sub	sp, #8
 800e982:	af00      	add	r7, sp, #0
 800e984:	6078      	str	r0, [r7, #4]
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	4618      	mov	r0, r3
 800e98a:	f000 f944 	bl	800ec16 <_ZSt3getILj0EJP5BlinkSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800e98e:	4603      	mov	r3, r0
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	4618      	mov	r0, r3
 800e994:	3708      	adds	r7, #8
 800e996:	46bd      	mov	sp, r7
 800e998:	bd80      	pop	{r7, pc}

0800e99a <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800e99a:	b580      	push	{r7, lr}
 800e99c:	b082      	sub	sp, #8
 800e99e:	af00      	add	r7, sp, #0
 800e9a0:	6078      	str	r0, [r7, #4]
 800e9a2:	6878      	ldr	r0, [r7, #4]
 800e9a4:	f000 f944 	bl	800ec30 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	3708      	adds	r7, #8
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	bd80      	pop	{r7, pc}

0800e9b2 <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800e9b2:	b580      	push	{r7, lr}
 800e9b4:	b082      	sub	sp, #8
 800e9b6:	af00      	add	r7, sp, #0
 800e9b8:	6078      	str	r0, [r7, #4]
 800e9ba:	6878      	ldr	r0, [r7, #4]
 800e9bc:	f000 f943 	bl	800ec46 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	3708      	adds	r7, #8
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	bd80      	pop	{r7, pc}

0800e9ca <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 800e9ca:	b580      	push	{r7, lr}
 800e9cc:	b082      	sub	sp, #8
 800e9ce:	af00      	add	r7, sp, #0
 800e9d0:	6078      	str	r0, [r7, #4]
 800e9d2:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	6839      	ldr	r1, [r7, #0]
 800e9d8:	6878      	ldr	r0, [r7, #4]
 800e9da:	f000 f93f 	bl	800ec5c <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	3708      	adds	r7, #8
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd80      	pop	{r7, pc}

0800e9e8 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b082      	sub	sp, #8
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	f000 f95c 	bl	800ecb0 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE7releaseEv>
 800e9f8:	4603      	mov	r3, r0
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	3708      	adds	r7, #8
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	bd80      	pop	{r7, pc}

0800ea02 <_ZSt7forwardISt14default_deleteI5BlinkEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ea02:	b480      	push	{r7}
 800ea04:	b083      	sub	sp, #12
 800ea06:	af00      	add	r7, sp, #0
 800ea08:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	370c      	adds	r7, #12
 800ea10:	46bd      	mov	sp, r7
 800ea12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea16:	4770      	bx	lr

0800ea18 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800ea18:	b590      	push	{r4, r7, lr}
 800ea1a:	b085      	sub	sp, #20
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	60f8      	str	r0, [r7, #12]
 800ea20:	60b9      	str	r1, [r7, #8]
 800ea22:	607a      	str	r2, [r7, #4]
 800ea24:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800ea26:	6878      	ldr	r0, [r7, #4]
 800ea28:	f000 f957 	bl	800ecda <_ZSt7forwardIP5BlinkEOT_RNSt16remove_referenceIS2_E4typeE>
 800ea2c:	4604      	mov	r4, r0
 800ea2e:	6838      	ldr	r0, [r7, #0]
 800ea30:	f7ff ffe7 	bl	800ea02 <_ZSt7forwardISt14default_deleteI5BlinkEEOT_RNSt16remove_referenceIS3_E4typeE>
 800ea34:	4603      	mov	r3, r0
 800ea36:	4622      	mov	r2, r4
 800ea38:	68b9      	ldr	r1, [r7, #8]
 800ea3a:	68f8      	ldr	r0, [r7, #12]
 800ea3c:	f000 f958 	bl	800ecf0 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>
	}
 800ea40:	bf00      	nop
 800ea42:	3714      	adds	r7, #20
 800ea44:	46bd      	mov	sp, r7
 800ea46:	bd90      	pop	{r4, r7, pc}

0800ea48 <_ZNSt5tupleIJP3PinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b082      	sub	sp, #8
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	4618      	mov	r0, r3
 800ea54:	f000 f96a 	bl	800ed2c <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEEC1Ev>
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	3708      	adds	r7, #8
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	bd80      	pop	{r7, pc}

0800ea62 <_ZSt12__get_helperILj0EP3PinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800ea62:	b580      	push	{r7, lr}
 800ea64:	b082      	sub	sp, #8
 800ea66:	af00      	add	r7, sp, #0
 800ea68:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800ea6a:	6878      	ldr	r0, [r7, #4]
 800ea6c:	f000 f96e 	bl	800ed4c <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEE7_M_headERS4_>
 800ea70:	4603      	mov	r3, r0
 800ea72:	4618      	mov	r0, r3
 800ea74:	3708      	adds	r7, #8
 800ea76:	46bd      	mov	sp, r7
 800ea78:	bd80      	pop	{r7, pc}

0800ea7a <_ZSt3getILj1EJP3PinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800ea7a:	b580      	push	{r7, lr}
 800ea7c:	b082      	sub	sp, #8
 800ea7e:	af00      	add	r7, sp, #0
 800ea80:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800ea82:	6878      	ldr	r0, [r7, #4]
 800ea84:	f000 f96f 	bl	800ed66 <_ZSt12__get_helperILj1ESt14default_deleteI3PinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800ea88:	4603      	mov	r3, r0
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	3708      	adds	r7, #8
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	bd80      	pop	{r7, pc}

0800ea92 <_ZSt3getILj0EJP3PinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800ea92:	b580      	push	{r7, lr}
 800ea94:	b082      	sub	sp, #8
 800ea96:	af00      	add	r7, sp, #0
 800ea98:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	f000 f96e 	bl	800ed7e <_ZSt12__get_helperILj0EP3PinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800eaa2:	4603      	mov	r3, r0
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	3708      	adds	r7, #8
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bd80      	pop	{r7, pc}

0800eaac <_ZN11ArduinoJson8V730HB226detail13convertNumberIimEET_T0_>:
TOut convertNumber(TIn value) {
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b082      	sub	sp, #8
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800eab4:	6878      	ldr	r0, [r7, #4]
 800eab6:	f000 f96e 	bl	800ed96 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIimEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 800eaba:	4603      	mov	r3, r0
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d001      	beq.n	800eac4 <_ZN11ArduinoJson8V730HB226detail13convertNumberIimEET_T0_+0x18>
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	e000      	b.n	800eac6 <_ZN11ArduinoJson8V730HB226detail13convertNumberIimEET_T0_+0x1a>
 800eac4:	2300      	movs	r3, #0
}
 800eac6:	4618      	mov	r0, r3
 800eac8:	3708      	adds	r7, #8
 800eaca:	46bd      	mov	sp, r7
 800eacc:	bd80      	pop	{r7, pc}

0800eace <_ZN11ArduinoJson8V730HB226detail13convertNumberIilEET_T0_>:
TOut convertNumber(TIn value) {
 800eace:	b580      	push	{r7, lr}
 800ead0:	b082      	sub	sp, #8
 800ead2:	af00      	add	r7, sp, #0
 800ead4:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800ead6:	6878      	ldr	r0, [r7, #4]
 800ead8:	f000 f96f 	bl	800edba <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIilEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valuelestS5_stS9_EbE4typeES5_>
 800eadc:	4603      	mov	r3, r0
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d001      	beq.n	800eae6 <_ZN11ArduinoJson8V730HB226detail13convertNumberIilEET_T0_+0x18>
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	e000      	b.n	800eae8 <_ZN11ArduinoJson8V730HB226detail13convertNumberIilEET_T0_+0x1a>
 800eae6:	2300      	movs	r3, #0
}
 800eae8:	4618      	mov	r0, r3
 800eaea:	3708      	adds	r7, #8
 800eaec:	46bd      	mov	sp, r7
 800eaee:	bd80      	pop	{r7, pc}

0800eaf0 <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_>:
TOut convertNumber(TIn value) {
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b082      	sub	sp, #8
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800eafa:	e9d7 0100 	ldrd	r0, r1, [r7]
 800eafe:	f000 f967 	bl	800edd0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIiyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 800eb02:	4603      	mov	r3, r0
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d001      	beq.n	800eb0c <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_+0x1c>
 800eb08:	683b      	ldr	r3, [r7, #0]
 800eb0a:	e000      	b.n	800eb0e <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_+0x1e>
 800eb0c:	2300      	movs	r3, #0
}
 800eb0e:	4618      	mov	r0, r3
 800eb10:	3708      	adds	r7, #8
 800eb12:	46bd      	mov	sp, r7
 800eb14:	bd80      	pop	{r7, pc}

0800eb16 <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_>:
TOut convertNumber(TIn value) {
 800eb16:	b580      	push	{r7, lr}
 800eb18:	b082      	sub	sp, #8
 800eb1a:	af00      	add	r7, sp, #0
 800eb1c:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800eb20:	e9d7 0100 	ldrd	r0, r1, [r7]
 800eb24:	f000 f96c 	bl	800ee00 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>
 800eb28:	4603      	mov	r3, r0
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d001      	beq.n	800eb32 <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_+0x1c>
 800eb2e:	683b      	ldr	r3, [r7, #0]
 800eb30:	e000      	b.n	800eb34 <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_+0x1e>
 800eb32:	2300      	movs	r3, #0
}
 800eb34:	4618      	mov	r0, r3
 800eb36:	3708      	adds	r7, #8
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	bd80      	pop	{r7, pc}

0800eb3c <_ZN11ArduinoJson8V730HB226detail11parseNumberIiEET_PKc>:
inline T parseNumber(const char* s) {
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b086      	sub	sp, #24
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
  return parseNumber(s).convertTo<T>();
 800eb44:	f107 0308 	add.w	r3, r7, #8
 800eb48:	6879      	ldr	r1, [r7, #4]
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	f7f6 fdc6 	bl	80056dc <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>
 800eb50:	f107 0308 	add.w	r3, r7, #8
 800eb54:	4618      	mov	r0, r3
 800eb56:	f000 f979 	bl	800ee4c <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v>
 800eb5a:	4603      	mov	r3, r0
}
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	3718      	adds	r7, #24
 800eb60:	46bd      	mov	sp, r7
 800eb62:	bd80      	pop	{r7, pc}

0800eb64 <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_>:
TOut convertNumber(TIn value) {
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b082      	sub	sp, #8
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	ed87 0a01 	vstr	s0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800eb6e:	ed97 0a01 	vldr	s0, [r7, #4]
 800eb72:	f000 f9b2 	bl	800eeda <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_>
 800eb76:	4603      	mov	r3, r0
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d006      	beq.n	800eb8a <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_+0x26>
 800eb7c:	edd7 7a01 	vldr	s15, [r7, #4]
 800eb80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800eb84:	ee17 3a90 	vmov	r3, s15
 800eb88:	e000      	b.n	800eb8c <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_+0x28>
 800eb8a:	2300      	movs	r3, #0
}
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	3708      	adds	r7, #8
 800eb90:	46bd      	mov	sp, r7
 800eb92:	bd80      	pop	{r7, pc}

0800eb94 <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_>:
TOut convertNumber(TIn value) {
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b082      	sub	sp, #8
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	ed87 0b00 	vstr	d0, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800eb9e:	ed97 0b00 	vldr	d0, [r7]
 800eba2:	f000 f9c7 	bl	800ef34 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 800eba6:	4603      	mov	r3, r0
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d006      	beq.n	800ebba <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_+0x26>
 800ebac:	ed97 7b00 	vldr	d7, [r7]
 800ebb0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800ebb4:	ee17 3a90 	vmov	r3, s15
 800ebb8:	e000      	b.n	800ebbc <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_+0x28>
 800ebba:	2300      	movs	r3, #0
}
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	3708      	adds	r7, #8
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	bd80      	pop	{r7, pc}

0800ebc4 <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b082      	sub	sp, #8
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800ebcc:	6878      	ldr	r0, [r7, #4]
 800ebce:	f000 f9d7 	bl	800ef80 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5BlinkEEEC1Ev>
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	f000 f9df 	bl	800ef98 <_ZNSt10_Head_baseILj0EP5BlinkLb0EEC1Ev>
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	4618      	mov	r0, r3
 800ebde:	3708      	adds	r7, #8
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	bd80      	pop	{r7, pc}

0800ebe4 <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b082      	sub	sp, #8
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	4618      	mov	r0, r3
 800ebf0:	f000 f9e0 	bl	800efb4 <_ZNSt10_Head_baseILj0EP5BlinkLb0EE7_M_headERS2_>
 800ebf4:	4603      	mov	r3, r0
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	3708      	adds	r7, #8
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	bd80      	pop	{r7, pc}

0800ebfe <_ZSt12__get_helperILj1ESt14default_deleteI5BlinkEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800ebfe:	b580      	push	{r7, lr}
 800ec00:	b082      	sub	sp, #8
 800ec02:	af00      	add	r7, sp, #0
 800ec04:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800ec06:	6878      	ldr	r0, [r7, #4]
 800ec08:	f000 f9df 	bl	800efca <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5BlinkEEE7_M_headERS3_>
 800ec0c:	4603      	mov	r3, r0
 800ec0e:	4618      	mov	r0, r3
 800ec10:	3708      	adds	r7, #8
 800ec12:	46bd      	mov	sp, r7
 800ec14:	bd80      	pop	{r7, pc}

0800ec16 <_ZSt3getILj0EJP5BlinkSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800ec16:	b580      	push	{r7, lr}
 800ec18:	b082      	sub	sp, #8
 800ec1a:	af00      	add	r7, sp, #0
 800ec1c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	4618      	mov	r0, r3
 800ec22:	f000 f9de 	bl	800efe2 <_ZSt12__get_helperILj0EP5BlinkJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800ec26:	4603      	mov	r3, r0
 800ec28:	4618      	mov	r0, r3
 800ec2a:	3708      	adds	r7, #8
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	bd80      	pop	{r7, pc}

0800ec30 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800ec30:	b480      	push	{r7}
 800ec32:	b083      	sub	sp, #12
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	6078      	str	r0, [r7, #4]
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	370c      	adds	r7, #12
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec44:	4770      	bx	lr

0800ec46 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800ec46:	b480      	push	{r7}
 800ec48:	b083      	sub	sp, #12
 800ec4a:	af00      	add	r7, sp, #0
 800ec4c:	6078      	str	r0, [r7, #4]
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	4618      	mov	r0, r3
 800ec52:	370c      	adds	r7, #12
 800ec54:	46bd      	mov	sp, r7
 800ec56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5a:	4770      	bx	lr

0800ec5c <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b084      	sub	sp, #16
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	60f8      	str	r0, [r7, #12]
 800ec64:	60b9      	str	r1, [r7, #8]
 800ec66:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800ec68:	68f8      	ldr	r0, [r7, #12]
 800ec6a:	f000 f9c6 	bl	800effa <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 800ec6e:	4602      	mov	r2, r0
 800ec70:	68bb      	ldr	r3, [r7, #8]
 800ec72:	4293      	cmp	r3, r2
 800ec74:	bf8c      	ite	hi
 800ec76:	2301      	movhi	r3, #1
 800ec78:	2300      	movls	r3, #0
 800ec7a:	b2db      	uxtb	r3, r3
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	bf14      	ite	ne
 800ec80:	2301      	movne	r3, #1
 800ec82:	2300      	moveq	r3, #0
 800ec84:	b2db      	uxtb	r3, r3
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d007      	beq.n	800ec9a <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800ec8a:	68bb      	ldr	r3, [r7, #8]
 800ec8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ec90:	d301      	bcc.n	800ec96 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800ec92:	f017 f939 	bl	8025f08 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800ec96:	f017 f934 	bl	8025f02 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800ec9a:	68bb      	ldr	r3, [r7, #8]
 800ec9c:	011b      	lsls	r3, r3, #4
 800ec9e:	4618      	mov	r0, r3
 800eca0:	f017 f91c 	bl	8025edc <_Znwj>
 800eca4:	4603      	mov	r3, r0
 800eca6:	bf00      	nop
      }
 800eca8:	4618      	mov	r0, r3
 800ecaa:	3710      	adds	r7, #16
 800ecac:	46bd      	mov	sp, r7
 800ecae:	bd80      	pop	{r7, pc}

0800ecb0 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b084      	sub	sp, #16
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800ecb8:	6878      	ldr	r0, [r7, #4]
 800ecba:	f7ff fb5f 	bl	800e37c <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 800ecbe:	4603      	mov	r3, r0
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800ecc4:	6878      	ldr	r0, [r7, #4]
 800ecc6:	f7ff fb59 	bl	800e37c <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 800ecca:	4603      	mov	r3, r0
 800eccc:	2200      	movs	r2, #0
 800ecce:	601a      	str	r2, [r3, #0]
	return __p;
 800ecd0:	68fb      	ldr	r3, [r7, #12]
      }
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	3710      	adds	r7, #16
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	bd80      	pop	{r7, pc}

0800ecda <_ZSt7forwardIP5BlinkEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ecda:	b480      	push	{r7}
 800ecdc:	b083      	sub	sp, #12
 800ecde:	af00      	add	r7, sp, #0
 800ece0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	4618      	mov	r0, r3
 800ece6:	370c      	adds	r7, #12
 800ece8:	46bd      	mov	sp, r7
 800ecea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecee:	4770      	bx	lr

0800ecf0 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800ecf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ecf2:	b085      	sub	sp, #20
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	60f8      	str	r0, [r7, #12]
 800ecf8:	60b9      	str	r1, [r7, #8]
 800ecfa:	607a      	str	r2, [r7, #4]
 800ecfc:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800ecfe:	68bb      	ldr	r3, [r7, #8]
 800ed00:	4619      	mov	r1, r3
 800ed02:	2010      	movs	r0, #16
 800ed04:	f7fa fcfc 	bl	8009700 <_ZnwjPv>
 800ed08:	4605      	mov	r5, r0
 800ed0a:	6878      	ldr	r0, [r7, #4]
 800ed0c:	f7ff ffe5 	bl	800ecda <_ZSt7forwardIP5BlinkEOT_RNSt16remove_referenceIS2_E4typeE>
 800ed10:	4603      	mov	r3, r0
 800ed12:	681c      	ldr	r4, [r3, #0]
 800ed14:	6838      	ldr	r0, [r7, #0]
 800ed16:	f7ff fe74 	bl	800ea02 <_ZSt7forwardISt14default_deleteI5BlinkEEOT_RNSt16remove_referenceIS3_E4typeE>
 800ed1a:	4632      	mov	r2, r6
 800ed1c:	4621      	mov	r1, r4
 800ed1e:	4628      	mov	r0, r5
 800ed20:	f000 f978 	bl	800f014 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>
 800ed24:	bf00      	nop
 800ed26:	3714      	adds	r7, #20
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ed2c <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b082      	sub	sp, #8
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800ed34:	6878      	ldr	r0, [r7, #4]
 800ed36:	f000 f98f 	bl	800f058 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI3PinEEEC1Ev>
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	f000 f997 	bl	800f070 <_ZNSt10_Head_baseILj0EP3PinLb0EEC1Ev>
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	4618      	mov	r0, r3
 800ed46:	3708      	adds	r7, #8
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	bd80      	pop	{r7, pc}

0800ed4c <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	b082      	sub	sp, #8
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	4618      	mov	r0, r3
 800ed58:	f000 f998 	bl	800f08c <_ZNSt10_Head_baseILj0EP3PinLb0EE7_M_headERS2_>
 800ed5c:	4603      	mov	r3, r0
 800ed5e:	4618      	mov	r0, r3
 800ed60:	3708      	adds	r7, #8
 800ed62:	46bd      	mov	sp, r7
 800ed64:	bd80      	pop	{r7, pc}

0800ed66 <_ZSt12__get_helperILj1ESt14default_deleteI3PinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800ed66:	b580      	push	{r7, lr}
 800ed68:	b082      	sub	sp, #8
 800ed6a:	af00      	add	r7, sp, #0
 800ed6c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800ed6e:	6878      	ldr	r0, [r7, #4]
 800ed70:	f000 f997 	bl	800f0a2 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI3PinEEE7_M_headERS3_>
 800ed74:	4603      	mov	r3, r0
 800ed76:	4618      	mov	r0, r3
 800ed78:	3708      	adds	r7, #8
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	bd80      	pop	{r7, pc}

0800ed7e <_ZSt12__get_helperILj0EP3PinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800ed7e:	b580      	push	{r7, lr}
 800ed80:	b082      	sub	sp, #8
 800ed82:	af00      	add	r7, sp, #0
 800ed84:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800ed86:	6878      	ldr	r0, [r7, #4]
 800ed88:	f000 f997 	bl	800f0ba <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEE7_M_headERKS4_>
 800ed8c:	4603      	mov	r3, r0
 800ed8e:	4618      	mov	r0, r3
 800ed90:	3708      	adds	r7, #8
 800ed92:	46bd      	mov	sp, r7
 800ed94:	bd80      	pop	{r7, pc}

0800ed96 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIimEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800ed96:	b580      	push	{r7, lr}
 800ed98:	b082      	sub	sp, #8
 800ed9a:	af00      	add	r7, sp, #0
 800ed9c:	6078      	str	r0, [r7, #4]
  return value <= TIn(numeric_limits<TOut>::highest());
 800ed9e:	f000 f8c1 	bl	800ef24 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>
 800eda2:	4603      	mov	r3, r0
 800eda4:	461a      	mov	r2, r3
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	4293      	cmp	r3, r2
 800edaa:	bf94      	ite	ls
 800edac:	2301      	movls	r3, #1
 800edae:	2300      	movhi	r3, #0
 800edb0:	b2db      	uxtb	r3, r3
}
 800edb2:	4618      	mov	r0, r3
 800edb4:	3708      	adds	r7, #8
 800edb6:	46bd      	mov	sp, r7
 800edb8:	bd80      	pop	{r7, pc}

0800edba <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIilEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valuelestS5_stS9_EbE4typeES5_>:
canConvertNumber(TIn) {
 800edba:	b480      	push	{r7}
 800edbc:	b083      	sub	sp, #12
 800edbe:	af00      	add	r7, sp, #0
 800edc0:	6078      	str	r0, [r7, #4]
  return true;
 800edc2:	2301      	movs	r3, #1
}
 800edc4:	4618      	mov	r0, r3
 800edc6:	370c      	adds	r7, #12
 800edc8:	46bd      	mov	sp, r7
 800edca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edce:	4770      	bx	lr

0800edd0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIiyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800edd0:	b5b0      	push	{r4, r5, r7, lr}
 800edd2:	b082      	sub	sp, #8
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	e9c7 0100 	strd	r0, r1, [r7]
  return value <= TIn(numeric_limits<TOut>::highest());
 800edda:	f000 f8a3 	bl	800ef24 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>
 800edde:	4603      	mov	r3, r0
 800ede0:	17da      	asrs	r2, r3, #31
 800ede2:	461c      	mov	r4, r3
 800ede4:	4615      	mov	r5, r2
 800ede6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800edea:	4294      	cmp	r4, r2
 800edec:	eb75 0303 	sbcs.w	r3, r5, r3
 800edf0:	bf2c      	ite	cs
 800edf2:	2301      	movcs	r3, #1
 800edf4:	2300      	movcc	r3, #0
 800edf6:	b2db      	uxtb	r3, r3
}
 800edf8:	4618      	mov	r0, r3
 800edfa:	3708      	adds	r7, #8
 800edfc:	46bd      	mov	sp, r7
 800edfe:	bdb0      	pop	{r4, r5, r7, pc}

0800ee00 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800ee00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ee04:	b082      	sub	sp, #8
 800ee06:	af00      	add	r7, sp, #0
 800ee08:	e9c7 0100 	strd	r0, r1, [r7]
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 800ee0c:	f000 f85c 	bl	800eec8 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>
 800ee10:	4603      	mov	r3, r0
 800ee12:	17da      	asrs	r2, r3, #31
 800ee14:	4698      	mov	r8, r3
 800ee16:	4691      	mov	r9, r2
 800ee18:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee1c:	4542      	cmp	r2, r8
 800ee1e:	eb73 0309 	sbcs.w	r3, r3, r9
 800ee22:	db0d      	blt.n	800ee40 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x40>
         value <= TIn(numeric_limits<TOut>::highest());
 800ee24:	f000 f87e 	bl	800ef24 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>
 800ee28:	4603      	mov	r3, r0
 800ee2a:	17da      	asrs	r2, r3, #31
 800ee2c:	461c      	mov	r4, r3
 800ee2e:	4615      	mov	r5, r2
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 800ee30:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee34:	4294      	cmp	r4, r2
 800ee36:	eb75 0303 	sbcs.w	r3, r5, r3
 800ee3a:	db01      	blt.n	800ee40 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x40>
 800ee3c:	2301      	movs	r3, #1
 800ee3e:	e000      	b.n	800ee42 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x42>
 800ee40:	2300      	movs	r3, #0
}
 800ee42:	4618      	mov	r0, r3
 800ee44:	3708      	adds	r7, #8
 800ee46:	46bd      	mov	sp, r7
 800ee48:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800ee4c <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v>:
  T convertTo() const {
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b082      	sub	sp, #8
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	6078      	str	r0, [r7, #4]
    switch (type_) {
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	781b      	ldrb	r3, [r3, #0]
 800ee58:	3b01      	subs	r3, #1
 800ee5a:	2b03      	cmp	r3, #3
 800ee5c:	d82e      	bhi.n	800eebc <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x70>
 800ee5e:	a201      	add	r2, pc, #4	@ (adr r2, 800ee64 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x18>)
 800ee60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee64:	0800ee75 	.word	0x0800ee75
 800ee68:	0800ee87 	.word	0x0800ee87
 800ee6c:	0800ee99 	.word	0x0800ee99
 800ee70:	0800eeab 	.word	0x0800eeab
        return convertNumber<T>(value_.asFloat);
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	edd3 7a02 	vldr	s15, [r3, #8]
 800ee7a:	eeb0 0a67 	vmov.f32	s0, s15
 800ee7e:	f7ff fe71 	bl	800eb64 <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_>
 800ee82:	4603      	mov	r3, r0
 800ee84:	e01b      	b.n	800eebe <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x72>
        return convertNumber<T>(value_.asSignedInteger);
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800ee8c:	4610      	mov	r0, r2
 800ee8e:	4619      	mov	r1, r3
 800ee90:	f7ff fe41 	bl	800eb16 <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_>
 800ee94:	4603      	mov	r3, r0
 800ee96:	e012      	b.n	800eebe <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x72>
        return convertNumber<T>(value_.asUnsignedInteger);
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800ee9e:	4610      	mov	r0, r2
 800eea0:	4619      	mov	r1, r3
 800eea2:	f7ff fe25 	bl	800eaf0 <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_>
 800eea6:	4603      	mov	r3, r0
 800eea8:	e009      	b.n	800eebe <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x72>
        return convertNumber<T>(value_.asDouble);
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	ed93 7b02 	vldr	d7, [r3, #8]
 800eeb0:	eeb0 0b47 	vmov.f64	d0, d7
 800eeb4:	f7ff fe6e 	bl	800eb94 <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_>
 800eeb8:	4603      	mov	r3, r0
 800eeba:	e000      	b.n	800eebe <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x72>
        return T();
 800eebc:	2300      	movs	r3, #0
  }
 800eebe:	4618      	mov	r0, r3
 800eec0:	3708      	adds	r7, #8
 800eec2:	46bd      	mov	sp, r7
 800eec4:	bd80      	pop	{r7, pc}
 800eec6:	bf00      	nop

0800eec8 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>:
  static constexpr T lowest() {
 800eec8:	b480      	push	{r7}
 800eeca:	af00      	add	r7, sp, #0
    return T(T(1) << (sizeof(T) * 8 - 1));
 800eecc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
  }
 800eed0:	4618      	mov	r0, r3
 800eed2:	46bd      	mov	sp, r7
 800eed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed8:	4770      	bx	lr

0800eeda <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800eeda:	b580      	push	{r7, lr}
 800eedc:	b082      	sub	sp, #8
 800eede:	af00      	add	r7, sp, #0
 800eee0:	ed87 0a01 	vstr	s0, [r7, #4]
  return value >= numeric_limits<TOut>::lowest() &&
 800eee4:	f7ff fff0 	bl	800eec8 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>
 800eee8:	ee07 0a90 	vmov	s15, r0
 800eeec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eef0:	ed97 7a01 	vldr	s14, [r7, #4]
 800eef4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800eef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eefc:	db0d      	blt.n	800ef1a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x40>
         value <= FloatTraits<TIn>::template highest_for<TOut>();
 800eefe:	2000      	movs	r0, #0
 800ef00:	f000 f8e8 	bl	800f0d4 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forIiEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_9is_signedIS7_EE5valueeqstS7_Li4EEiE4typeE>
 800ef04:	eeb0 7a40 	vmov.f32	s14, s0
  return value >= numeric_limits<TOut>::lowest() &&
 800ef08:	edd7 7a01 	vldr	s15, [r7, #4]
 800ef0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ef10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef14:	d801      	bhi.n	800ef1a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x40>
 800ef16:	2301      	movs	r3, #1
 800ef18:	e000      	b.n	800ef1c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x42>
 800ef1a:	2300      	movs	r3, #0
}
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	3708      	adds	r7, #8
 800ef20:	46bd      	mov	sp, r7
 800ef22:	bd80      	pop	{r7, pc}

0800ef24 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>:
  static constexpr T highest() {
 800ef24:	b580      	push	{r7, lr}
 800ef26:	af00      	add	r7, sp, #0
    return T(~lowest());
 800ef28:	f7ff ffce 	bl	800eec8 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>
 800ef2c:	4603      	mov	r3, r0
 800ef2e:	43db      	mvns	r3, r3
  }
 800ef30:	4618      	mov	r0, r3
 800ef32:	bd80      	pop	{r7, pc}

0800ef34 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b082      	sub	sp, #8
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	ed87 0b00 	vstr	d0, [r7]
  return value >= numeric_limits<TOut>::lowest() &&
 800ef3e:	f7ff ffc3 	bl	800eec8 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>
 800ef42:	ee07 0a90 	vmov	s15, r0
 800ef46:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ef4a:	ed97 6b00 	vldr	d6, [r7]
 800ef4e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ef52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef56:	db0e      	blt.n	800ef76 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x42>
         value <= numeric_limits<TOut>::highest();
 800ef58:	f7ff ffe4 	bl	800ef24 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>
 800ef5c:	ee07 0a90 	vmov	s15, r0
 800ef60:	eeb8 7be7 	vcvt.f64.s32	d7, s15
  return value >= numeric_limits<TOut>::lowest() &&
 800ef64:	ed97 6b00 	vldr	d6, [r7]
 800ef68:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ef6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef70:	d801      	bhi.n	800ef76 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x42>
 800ef72:	2301      	movs	r3, #1
 800ef74:	e000      	b.n	800ef78 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x44>
 800ef76:	2300      	movs	r3, #0
}
 800ef78:	4618      	mov	r0, r3
 800ef7a:	3708      	adds	r7, #8
 800ef7c:	46bd      	mov	sp, r7
 800ef7e:	bd80      	pop	{r7, pc}

0800ef80 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5BlinkEEEC1Ev>:
      _Tuple_impl()
 800ef80:	b580      	push	{r7, lr}
 800ef82:	b082      	sub	sp, #8
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800ef88:	6878      	ldr	r0, [r7, #4]
 800ef8a:	f000 f8b2 	bl	800f0f2 <_ZNSt10_Head_baseILj1ESt14default_deleteI5BlinkELb1EEC1Ev>
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	4618      	mov	r0, r3
 800ef92:	3708      	adds	r7, #8
 800ef94:	46bd      	mov	sp, r7
 800ef96:	bd80      	pop	{r7, pc}

0800ef98 <_ZNSt10_Head_baseILj0EP5BlinkLb0EEC1Ev>:
      constexpr _Head_base()
 800ef98:	b480      	push	{r7}
 800ef9a:	b083      	sub	sp, #12
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	2200      	movs	r2, #0
 800efa4:	601a      	str	r2, [r3, #0]
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	4618      	mov	r0, r3
 800efaa:	370c      	adds	r7, #12
 800efac:	46bd      	mov	sp, r7
 800efae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb2:	4770      	bx	lr

0800efb4 <_ZNSt10_Head_baseILj0EP5BlinkLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800efb4:	b480      	push	{r7}
 800efb6:	b083      	sub	sp, #12
 800efb8:	af00      	add	r7, sp, #0
 800efba:	6078      	str	r0, [r7, #4]
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	4618      	mov	r0, r3
 800efc0:	370c      	adds	r7, #12
 800efc2:	46bd      	mov	sp, r7
 800efc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc8:	4770      	bx	lr

0800efca <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5BlinkEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800efca:	b580      	push	{r7, lr}
 800efcc:	b082      	sub	sp, #8
 800efce:	af00      	add	r7, sp, #0
 800efd0:	6078      	str	r0, [r7, #4]
 800efd2:	6878      	ldr	r0, [r7, #4]
 800efd4:	f000 f898 	bl	800f108 <_ZNSt10_Head_baseILj1ESt14default_deleteI5BlinkELb1EE7_M_headERS3_>
 800efd8:	4603      	mov	r3, r0
 800efda:	4618      	mov	r0, r3
 800efdc:	3708      	adds	r7, #8
 800efde:	46bd      	mov	sp, r7
 800efe0:	bd80      	pop	{r7, pc}

0800efe2 <_ZSt12__get_helperILj0EP5BlinkJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800efe2:	b580      	push	{r7, lr}
 800efe4:	b082      	sub	sp, #8
 800efe6:	af00      	add	r7, sp, #0
 800efe8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800efea:	6878      	ldr	r0, [r7, #4]
 800efec:	f000 f897 	bl	800f11e <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEE7_M_headERKS4_>
 800eff0:	4603      	mov	r3, r0
 800eff2:	4618      	mov	r0, r3
 800eff4:	3708      	adds	r7, #8
 800eff6:	46bd      	mov	sp, r7
 800eff8:	bd80      	pop	{r7, pc}

0800effa <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800effa:	b480      	push	{r7}
 800effc:	b083      	sub	sp, #12
 800effe:	af00      	add	r7, sp, #0
 800f000:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800f002:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      }
 800f006:	4618      	mov	r0, r3
 800f008:	370c      	adds	r7, #12
 800f00a:	46bd      	mov	sp, r7
 800f00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f010:	4770      	bx	lr
	...

0800f014 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
 800f014:	b5b0      	push	{r4, r5, r7, lr}
 800f016:	b086      	sub	sp, #24
 800f018:	af00      	add	r7, sp, #0
 800f01a:	60f8      	str	r0, [r7, #12]
 800f01c:	60b9      	str	r1, [r7, #8]
 800f01e:	713a      	strb	r2, [r7, #4]
      : _M_impl(__p, std::move(__d), _Alloc()) { }
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	4618      	mov	r0, r3
 800f024:	f7fd fffe 	bl	800d024 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800f028:	4a0a      	ldr	r2, [pc, #40]	@ (800f054 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_+0x40>)
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	601a      	str	r2, [r3, #0]
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	f103 040c 	add.w	r4, r3, #12
 800f034:	1d3b      	adds	r3, r7, #4
 800f036:	4618      	mov	r0, r3
 800f038:	f000 f87e 	bl	800f138 <_ZSt4moveIRSt14default_deleteI5BlinkEEONSt16remove_referenceIT_E4typeEOS5_>
 800f03c:	f107 0314 	add.w	r3, r7, #20
 800f040:	462a      	mov	r2, r5
 800f042:	68b9      	ldr	r1, [r7, #8]
 800f044:	4620      	mov	r0, r4
 800f046:	f000 f882 	bl	800f14e <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	4618      	mov	r0, r3
 800f04e:	3718      	adds	r7, #24
 800f050:	46bd      	mov	sp, r7
 800f052:	bdb0      	pop	{r4, r5, r7, pc}
 800f054:	080289e8 	.word	0x080289e8

0800f058 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI3PinEEEC1Ev>:
      _Tuple_impl()
 800f058:	b580      	push	{r7, lr}
 800f05a:	b082      	sub	sp, #8
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800f060:	6878      	ldr	r0, [r7, #4]
 800f062:	f000 f890 	bl	800f186 <_ZNSt10_Head_baseILj1ESt14default_deleteI3PinELb1EEC1Ev>
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	4618      	mov	r0, r3
 800f06a:	3708      	adds	r7, #8
 800f06c:	46bd      	mov	sp, r7
 800f06e:	bd80      	pop	{r7, pc}

0800f070 <_ZNSt10_Head_baseILj0EP3PinLb0EEC1Ev>:
      constexpr _Head_base()
 800f070:	b480      	push	{r7}
 800f072:	b083      	sub	sp, #12
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	2200      	movs	r2, #0
 800f07c:	601a      	str	r2, [r3, #0]
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	4618      	mov	r0, r3
 800f082:	370c      	adds	r7, #12
 800f084:	46bd      	mov	sp, r7
 800f086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f08a:	4770      	bx	lr

0800f08c <_ZNSt10_Head_baseILj0EP3PinLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800f08c:	b480      	push	{r7}
 800f08e:	b083      	sub	sp, #12
 800f090:	af00      	add	r7, sp, #0
 800f092:	6078      	str	r0, [r7, #4]
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	4618      	mov	r0, r3
 800f098:	370c      	adds	r7, #12
 800f09a:	46bd      	mov	sp, r7
 800f09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a0:	4770      	bx	lr

0800f0a2 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI3PinEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800f0a2:	b580      	push	{r7, lr}
 800f0a4:	b082      	sub	sp, #8
 800f0a6:	af00      	add	r7, sp, #0
 800f0a8:	6078      	str	r0, [r7, #4]
 800f0aa:	6878      	ldr	r0, [r7, #4]
 800f0ac:	f000 f876 	bl	800f19c <_ZNSt10_Head_baseILj1ESt14default_deleteI3PinELb1EE7_M_headERS3_>
 800f0b0:	4603      	mov	r3, r0
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	3708      	adds	r7, #8
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	bd80      	pop	{r7, pc}

0800f0ba <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800f0ba:	b580      	push	{r7, lr}
 800f0bc:	b082      	sub	sp, #8
 800f0be:	af00      	add	r7, sp, #0
 800f0c0:	6078      	str	r0, [r7, #4]
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	f000 f874 	bl	800f1b2 <_ZNSt10_Head_baseILj0EP3PinLb0EE7_M_headERKS2_>
 800f0ca:	4603      	mov	r3, r0
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	3708      	adds	r7, #8
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	bd80      	pop	{r7, pc}

0800f0d4 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forIiEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_9is_signedIS7_EE5valueeqstS7_Li4EEiE4typeE>:
  static T highest_for(
 800f0d4:	b580      	push	{r7, lr}
 800f0d6:	b082      	sub	sp, #8
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	6078      	str	r0, [r7, #4]
    return forge(0x4EFFFFFF);  // 2.14748352E9
 800f0dc:	f06f 4031 	mvn.w	r0, #2969567232	@ 0xb1000000
 800f0e0:	f7f9 fab4 	bl	800864c <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE5forgeEm>
 800f0e4:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f0e8:	eeb0 0a67 	vmov.f32	s0, s15
 800f0ec:	3708      	adds	r7, #8
 800f0ee:	46bd      	mov	sp, r7
 800f0f0:	bd80      	pop	{r7, pc}

0800f0f2 <_ZNSt10_Head_baseILj1ESt14default_deleteI5BlinkELb1EEC1Ev>:
      constexpr _Head_base()
 800f0f2:	b480      	push	{r7}
 800f0f4:	b083      	sub	sp, #12
 800f0f6:	af00      	add	r7, sp, #0
 800f0f8:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	370c      	adds	r7, #12
 800f100:	46bd      	mov	sp, r7
 800f102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f106:	4770      	bx	lr

0800f108 <_ZNSt10_Head_baseILj1ESt14default_deleteI5BlinkELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800f108:	b480      	push	{r7}
 800f10a:	b083      	sub	sp, #12
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	4618      	mov	r0, r3
 800f114:	370c      	adds	r7, #12
 800f116:	46bd      	mov	sp, r7
 800f118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f11c:	4770      	bx	lr

0800f11e <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800f11e:	b580      	push	{r7, lr}
 800f120:	b082      	sub	sp, #8
 800f122:	af00      	add	r7, sp, #0
 800f124:	6078      	str	r0, [r7, #4]
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	4618      	mov	r0, r3
 800f12a:	f000 f84d 	bl	800f1c8 <_ZNSt10_Head_baseILj0EP5BlinkLb0EE7_M_headERKS2_>
 800f12e:	4603      	mov	r3, r0
 800f130:	4618      	mov	r0, r3
 800f132:	3708      	adds	r7, #8
 800f134:	46bd      	mov	sp, r7
 800f136:	bd80      	pop	{r7, pc}

0800f138 <_ZSt4moveIRSt14default_deleteI5BlinkEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800f138:	b480      	push	{r7}
 800f13a:	b083      	sub	sp, #12
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	4618      	mov	r0, r3
 800f144:	370c      	adds	r7, #12
 800f146:	46bd      	mov	sp, r7
 800f148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f14c:	4770      	bx	lr

0800f14e <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800f14e:	b580      	push	{r7, lr}
 800f150:	b084      	sub	sp, #16
 800f152:	af00      	add	r7, sp, #0
 800f154:	60f8      	str	r0, [r7, #12]
 800f156:	60b9      	str	r1, [r7, #8]
 800f158:	713a      	strb	r2, [r7, #4]
 800f15a:	603b      	str	r3, [r7, #0]
	: _Del_base(std::move(__d)), _Alloc_base(__a), _M_ptr(__p)
 800f15c:	1d3b      	adds	r3, r7, #4
 800f15e:	4618      	mov	r0, r3
 800f160:	f7ff ffea 	bl	800f138 <_ZSt4moveIRSt14default_deleteI5BlinkEEONSt16remove_referenceIT_E4typeEOS5_>
 800f164:	4603      	mov	r3, r0
 800f166:	4619      	mov	r1, r3
 800f168:	68f8      	ldr	r0, [r7, #12]
 800f16a:	f000 f838 	bl	800f1de <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI5BlinkELb1EEC1EOS2_>
 800f16e:	6839      	ldr	r1, [r7, #0]
 800f170:	68f8      	ldr	r0, [r7, #12]
 800f172:	f000 f841 	bl	800f1f8 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EEC1ERKS0_>
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	68ba      	ldr	r2, [r7, #8]
 800f17a:	601a      	str	r2, [r3, #0]
	{ }
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	4618      	mov	r0, r3
 800f180:	3710      	adds	r7, #16
 800f182:	46bd      	mov	sp, r7
 800f184:	bd80      	pop	{r7, pc}

0800f186 <_ZNSt10_Head_baseILj1ESt14default_deleteI3PinELb1EEC1Ev>:
      constexpr _Head_base()
 800f186:	b480      	push	{r7}
 800f188:	b083      	sub	sp, #12
 800f18a:	af00      	add	r7, sp, #0
 800f18c:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	4618      	mov	r0, r3
 800f192:	370c      	adds	r7, #12
 800f194:	46bd      	mov	sp, r7
 800f196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19a:	4770      	bx	lr

0800f19c <_ZNSt10_Head_baseILj1ESt14default_deleteI3PinELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800f19c:	b480      	push	{r7}
 800f19e:	b083      	sub	sp, #12
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	6078      	str	r0, [r7, #4]
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	370c      	adds	r7, #12
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b0:	4770      	bx	lr

0800f1b2 <_ZNSt10_Head_baseILj0EP3PinLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800f1b2:	b480      	push	{r7}
 800f1b4:	b083      	sub	sp, #12
 800f1b6:	af00      	add	r7, sp, #0
 800f1b8:	6078      	str	r0, [r7, #4]
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	4618      	mov	r0, r3
 800f1be:	370c      	adds	r7, #12
 800f1c0:	46bd      	mov	sp, r7
 800f1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c6:	4770      	bx	lr

0800f1c8 <_ZNSt10_Head_baseILj0EP5BlinkLb0EE7_M_headERKS2_>:
 800f1c8:	b480      	push	{r7}
 800f1ca:	b083      	sub	sp, #12
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	6078      	str	r0, [r7, #4]
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	370c      	adds	r7, #12
 800f1d6:	46bd      	mov	sp, r7
 800f1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1dc:	4770      	bx	lr

0800f1de <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI5BlinkELb1EEC1EOS2_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _Tp(std::move(__tp)) { }
 800f1de:	b580      	push	{r7, lr}
 800f1e0:	b082      	sub	sp, #8
 800f1e2:	af00      	add	r7, sp, #0
 800f1e4:	6078      	str	r0, [r7, #4]
 800f1e6:	6039      	str	r1, [r7, #0]
 800f1e8:	6838      	ldr	r0, [r7, #0]
 800f1ea:	f7ff ffa5 	bl	800f138 <_ZSt4moveIRSt14default_deleteI5BlinkEEONSt16remove_referenceIT_E4typeEOS5_>
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	3708      	adds	r7, #8
 800f1f4:	46bd      	mov	sp, r7
 800f1f6:	bd80      	pop	{r7, pc}

0800f1f8 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EEC1ERKS0_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 800f1f8:	b480      	push	{r7}
 800f1fa:	b083      	sub	sp, #12
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	6078      	str	r0, [r7, #4]
 800f200:	6039      	str	r1, [r7, #0]
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	4618      	mov	r0, r3
 800f206:	370c      	adds	r7, #12
 800f208:	46bd      	mov	sp, r7
 800f20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f20e:	4770      	bx	lr

0800f210 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 800f210:	b580      	push	{r7, lr}
 800f212:	b082      	sub	sp, #8
 800f214:	af00      	add	r7, sp, #0
 800f216:	6078      	str	r0, [r7, #4]
 800f218:	4a05      	ldr	r2, [pc, #20]	@ (800f230 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	601a      	str	r2, [r3, #0]
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	4618      	mov	r0, r3
 800f222:	f7fc f8c1 	bl	800b3a8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	4618      	mov	r0, r3
 800f22a:	3708      	adds	r7, #8
 800f22c:	46bd      	mov	sp, r7
 800f22e:	bd80      	pop	{r7, pc}
 800f230:	080289e8 	.word	0x080289e8

0800f234 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 800f234:	b580      	push	{r7, lr}
 800f236:	b082      	sub	sp, #8
 800f238:	af00      	add	r7, sp, #0
 800f23a:	6078      	str	r0, [r7, #4]
 800f23c:	6878      	ldr	r0, [r7, #4]
 800f23e:	f7ff ffe7 	bl	800f210 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800f242:	2110      	movs	r1, #16
 800f244:	6878      	ldr	r0, [r7, #4]
 800f246:	f016 fe38 	bl	8025eba <_ZdlPvj>
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	4618      	mov	r0, r3
 800f24e:	3708      	adds	r7, #8
 800f250:	46bd      	mov	sp, r7
 800f252:	bd80      	pop	{r7, pc}

0800f254 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800f254:	b580      	push	{r7, lr}
 800f256:	b082      	sub	sp, #8
 800f258:	af00      	add	r7, sp, #0
 800f25a:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	330c      	adds	r3, #12
 800f260:	4618      	mov	r0, r3
 800f262:	f000 f83f 	bl	800f2e4 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>
 800f266:	4602      	mov	r2, r0
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	68db      	ldr	r3, [r3, #12]
 800f26c:	4619      	mov	r1, r3
 800f26e:	4610      	mov	r0, r2
 800f270:	f7ff f8d2 	bl	800e418 <_ZNKSt14default_deleteI5BlinkEclEPS0_>
 800f274:	bf00      	nop
 800f276:	3708      	adds	r7, #8
 800f278:	46bd      	mov	sp, r7
 800f27a:	bd80      	pop	{r7, pc}

0800f27c <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b086      	sub	sp, #24
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	330c      	adds	r3, #12
 800f288:	4618      	mov	r0, r3
 800f28a:	f000 f837 	bl	800f2fc <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 800f28e:	4602      	mov	r2, r0
 800f290:	f107 0314 	add.w	r3, r7, #20
 800f294:	4611      	mov	r1, r2
 800f296:	4618      	mov	r0, r3
 800f298:	f000 f83c 	bl	800f314 <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800f29c:	f107 0114 	add.w	r1, r7, #20
 800f2a0:	f107 030c 	add.w	r3, r7, #12
 800f2a4:	687a      	ldr	r2, [r7, #4]
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	f000 f841 	bl	800f32e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>
	this->~_Sp_counted_deleter();
 800f2ac:	6878      	ldr	r0, [r7, #4]
 800f2ae:	f7ff ffaf 	bl	800f210 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 800f2b2:	f107 030c 	add.w	r3, r7, #12
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	f000 f84d 	bl	800f356 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 800f2bc:	f107 0314 	add.w	r3, r7, #20
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	f7ff fb76 	bl	800e9b2 <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800f2c6:	3718      	adds	r7, #24
 800f2c8:	46bd      	mov	sp, r7
 800f2ca:	bd80      	pop	{r7, pc}

0800f2cc <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const type_info& __ti [[__gnu__::__unused__]]) noexcept
 800f2cc:	b480      	push	{r7}
 800f2ce:	b083      	sub	sp, #12
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
 800f2d4:	6039      	str	r1, [r7, #0]
        return nullptr;
 800f2d6:	2300      	movs	r3, #0
      }
 800f2d8:	4618      	mov	r0, r3
 800f2da:	370c      	adds	r7, #12
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e2:	4770      	bx	lr

0800f2e4 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b082      	sub	sp, #8
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
 800f2ec:	6878      	ldr	r0, [r7, #4]
 800f2ee:	f000 f847 	bl	800f380 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI5BlinkELb1EE6_S_getERS3_>
 800f2f2:	4603      	mov	r3, r0
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	3708      	adds	r7, #8
 800f2f8:	46bd      	mov	sp, r7
 800f2fa:	bd80      	pop	{r7, pc}

0800f2fc <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 800f2fc:	b580      	push	{r7, lr}
 800f2fe:	b082      	sub	sp, #8
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]
 800f304:	6878      	ldr	r0, [r7, #4]
 800f306:	f000 f846 	bl	800f396 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EE6_S_getERS1_>
 800f30a:	4603      	mov	r3, r0
 800f30c:	4618      	mov	r0, r3
 800f30e:	3708      	adds	r7, #8
 800f310:	46bd      	mov	sp, r7
 800f312:	bd80      	pop	{r7, pc}

0800f314 <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800f314:	b580      	push	{r7, lr}
 800f316:	b082      	sub	sp, #8
 800f318:	af00      	add	r7, sp, #0
 800f31a:	6078      	str	r0, [r7, #4]
 800f31c:	6039      	str	r1, [r7, #0]
 800f31e:	6878      	ldr	r0, [r7, #4]
 800f320:	f7ff fc86 	bl	800ec30 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	4618      	mov	r0, r3
 800f328:	3708      	adds	r7, #8
 800f32a:	46bd      	mov	sp, r7
 800f32c:	bd80      	pop	{r7, pc}

0800f32e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800f32e:	b580      	push	{r7, lr}
 800f330:	b084      	sub	sp, #16
 800f332:	af00      	add	r7, sp, #0
 800f334:	60f8      	str	r0, [r7, #12]
 800f336:	60b9      	str	r1, [r7, #8]
 800f338:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800f33a:	68b8      	ldr	r0, [r7, #8]
 800f33c:	f000 f836 	bl	800f3ac <_ZSt11__addressofISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>
 800f340:	4602      	mov	r2, r0
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	601a      	str	r2, [r3, #0]
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	687a      	ldr	r2, [r7, #4]
 800f34a:	605a      	str	r2, [r3, #4]
      { }
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	4618      	mov	r0, r3
 800f350:	3710      	adds	r7, #16
 800f352:	46bd      	mov	sp, r7
 800f354:	bd80      	pop	{r7, pc}

0800f356 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 800f356:	b580      	push	{r7, lr}
 800f358:	b082      	sub	sp, #8
 800f35a:	af00      	add	r7, sp, #0
 800f35c:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	685b      	ldr	r3, [r3, #4]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d007      	beq.n	800f376 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	6818      	ldr	r0, [r3, #0]
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	685b      	ldr	r3, [r3, #4]
 800f36e:	2201      	movs	r2, #1
 800f370:	4619      	mov	r1, r3
 800f372:	f000 f826 	bl	800f3c2 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>
      }
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	4618      	mov	r0, r3
 800f37a:	3708      	adds	r7, #8
 800f37c:	46bd      	mov	sp, r7
 800f37e:	bd80      	pop	{r7, pc}

0800f380 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI5BlinkELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 800f380:	b480      	push	{r7}
 800f382:	b083      	sub	sp, #12
 800f384:	af00      	add	r7, sp, #0
 800f386:	6078      	str	r0, [r7, #4]
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	4618      	mov	r0, r3
 800f38c:	370c      	adds	r7, #12
 800f38e:	46bd      	mov	sp, r7
 800f390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f394:	4770      	bx	lr

0800f396 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EE6_S_getERS1_>:
 800f396:	b480      	push	{r7}
 800f398:	b083      	sub	sp, #12
 800f39a:	af00      	add	r7, sp, #0
 800f39c:	6078      	str	r0, [r7, #4]
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	370c      	adds	r7, #12
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3aa:	4770      	bx	lr

0800f3ac <_ZSt11__addressofISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800f3ac:	b480      	push	{r7}
 800f3ae:	b083      	sub	sp, #12
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	370c      	adds	r7, #12
 800f3ba:	46bd      	mov	sp, r7
 800f3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c0:	4770      	bx	lr

0800f3c2 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800f3c2:	b580      	push	{r7, lr}
 800f3c4:	b084      	sub	sp, #16
 800f3c6:	af00      	add	r7, sp, #0
 800f3c8:	60f8      	str	r0, [r7, #12]
 800f3ca:	60b9      	str	r1, [r7, #8]
 800f3cc:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800f3ce:	687a      	ldr	r2, [r7, #4]
 800f3d0:	68b9      	ldr	r1, [r7, #8]
 800f3d2:	68f8      	ldr	r0, [r7, #12]
 800f3d4:	f000 f804 	bl	800f3e0 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>
 800f3d8:	bf00      	nop
 800f3da:	3710      	adds	r7, #16
 800f3dc:	46bd      	mov	sp, r7
 800f3de:	bd80      	pop	{r7, pc}

0800f3e0 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b084      	sub	sp, #16
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	60f8      	str	r0, [r7, #12]
 800f3e8:	60b9      	str	r1, [r7, #8]
 800f3ea:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	011b      	lsls	r3, r3, #4
 800f3f0:	4619      	mov	r1, r3
 800f3f2:	68b8      	ldr	r0, [r7, #8]
 800f3f4:	f016 fd61 	bl	8025eba <_ZdlPvj>
      }
 800f3f8:	3710      	adds	r7, #16
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	bd80      	pop	{r7, pc}

0800f3fe <_ZNSt9_Any_data9_M_accessEv>:
    void*       _M_access()       noexcept { return &_M_pod_data[0]; }
 800f3fe:	b480      	push	{r7}
 800f400:	b083      	sub	sp, #12
 800f402:	af00      	add	r7, sp, #0
 800f404:	6078      	str	r0, [r7, #4]
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	4618      	mov	r0, r3
 800f40a:	370c      	adds	r7, #12
 800f40c:	46bd      	mov	sp, r7
 800f40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f412:	4770      	bx	lr

0800f414 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const noexcept { return &_M_pod_data[0]; }
 800f414:	b480      	push	{r7}
 800f416:	b083      	sub	sp, #12
 800f418:	af00      	add	r7, sp, #0
 800f41a:	6078      	str	r0, [r7, #4]
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	4618      	mov	r0, r3
 800f420:	370c      	adds	r7, #12
 800f422:	46bd      	mov	sp, r7
 800f424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f428:	4770      	bx	lr

0800f42a <_ZN14CommsInterface15setDataCallbackERKSt8functionIFvbEE>:

	virtual void init(void);
	virtual void start(void);
	virtual void tasks(void);

    void setDataCallback(const std::function<void(bool)>& callback) {
 800f42a:	b580      	push	{r7, lr}
 800f42c:	b082      	sub	sp, #8
 800f42e:	af00      	add	r7, sp, #0
 800f430:	6078      	str	r0, [r7, #4]
 800f432:	6039      	str	r1, [r7, #0]
        dataCallback = callback;
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	3318      	adds	r3, #24
 800f438:	6839      	ldr	r1, [r7, #0]
 800f43a:	4618      	mov	r0, r3
 800f43c:	f000 f8e9 	bl	800f612 <_ZNSt8functionIFvbEEaSERKS1_>
    }
 800f440:	bf00      	nop
 800f442:	3708      	adds	r7, #8
 800f444:	46bd      	mov	sp, r7
 800f446:	bd80      	pop	{r7, pc}

0800f448 <_ZN12CommsHandler7setDataEb>:
    void setData(bool value) { data = value; }
 800f448:	b480      	push	{r7}
 800f44a:	b083      	sub	sp, #12
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
 800f450:	460b      	mov	r3, r1
 800f452:	70fb      	strb	r3, [r7, #3]
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	78fa      	ldrb	r2, [r7, #3]
 800f458:	771a      	strb	r2, [r3, #28]
 800f45a:	bf00      	nop
 800f45c:	370c      	adds	r7, #12
 800f45e:	46bd      	mov	sp, r7
 800f460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f464:	4770      	bx	lr
	...

0800f468 <_ZN12CommsHandlerC1Ev>:
#include "commsHandler.h"
#include "../../remora.h"

CommsHandler::CommsHandler() : data(false), noDataCount(0), status(false) {
 800f468:	b580      	push	{r7, lr}
 800f46a:	b082      	sub	sp, #8
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	6078      	str	r0, [r7, #4]
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	4618      	mov	r0, r3
 800f474:	f001 fb86 	bl	8010b84 <_ZN6ModuleC1Ev>
 800f478:	4a0a      	ldr	r2, [pc, #40]	@ (800f4a4 <_ZN12CommsHandlerC1Ev+0x3c>)
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	601a      	str	r2, [r3, #0]
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	3318      	adds	r3, #24
 800f482:	4618      	mov	r0, r3
 800f484:	f000 f8fa 	bl	800f67c <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEC1IS2_vEEv>
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	2200      	movs	r2, #0
 800f48c:	771a      	strb	r2, [r3, #28]
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	2200      	movs	r2, #0
 800f492:	775a      	strb	r2, [r3, #29]
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	2200      	movs	r2, #0
 800f498:	779a      	strb	r2, [r3, #30]

}
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	4618      	mov	r0, r3
 800f49e:	3708      	adds	r7, #8
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	bd80      	pop	{r7, pc}
 800f4a4:	08028a28 	.word	0x08028a28

0800f4a8 <_ZN12CommsHandlerD1Ev>:

CommsHandler::~CommsHandler() {}
 800f4a8:	b580      	push	{r7, lr}
 800f4aa:	b082      	sub	sp, #8
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	6078      	str	r0, [r7, #4]
 800f4b0:	4a08      	ldr	r2, [pc, #32]	@ (800f4d4 <_ZN12CommsHandlerD1Ev+0x2c>)
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	601a      	str	r2, [r3, #0]
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	3318      	adds	r3, #24
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	f7fb fd3c 	bl	800af38 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EED1Ev>
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	f001 fb7a 	bl	8010bbc <_ZN6ModuleD1Ev>
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	3708      	adds	r7, #8
 800f4ce:	46bd      	mov	sp, r7
 800f4d0:	bd80      	pop	{r7, pc}
 800f4d2:	bf00      	nop
 800f4d4:	08028a28 	.word	0x08028a28

0800f4d8 <_ZN12CommsHandlerD0Ev>:
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b082      	sub	sp, #8
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
 800f4e0:	6878      	ldr	r0, [r7, #4]
 800f4e2:	f7ff ffe1 	bl	800f4a8 <_ZN12CommsHandlerD1Ev>
 800f4e6:	2120      	movs	r1, #32
 800f4e8:	6878      	ldr	r0, [r7, #4]
 800f4ea:	f016 fce6 	bl	8025eba <_ZdlPvj>
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	3708      	adds	r7, #8
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	bd80      	pop	{r7, pc}

0800f4f8 <_ZZN12CommsHandler4initEvENKUlbE_clEb>:

void CommsHandler::init() {
    interface->setDataCallback([this](bool dataReceived) {
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	b082      	sub	sp, #8
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	6078      	str	r0, [r7, #4]
 800f500:	460b      	mov	r3, r1
 800f502:	70fb      	strb	r3, [r7, #3]
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	681b      	ldr	r3, [r3, #0]
        this->setData(dataReceived);
 800f508:	78fa      	ldrb	r2, [r7, #3]
 800f50a:	4611      	mov	r1, r2
 800f50c:	4618      	mov	r0, r3
 800f50e:	f7ff ff9b 	bl	800f448 <_ZN12CommsHandler7setDataEb>
    });
 800f512:	bf00      	nop
 800f514:	3708      	adds	r7, #8
 800f516:	46bd      	mov	sp, r7
 800f518:	bd80      	pop	{r7, pc}

0800f51a <_ZN12CommsHandler4initEv>:
void CommsHandler::init() {
 800f51a:	b590      	push	{r4, r7, lr}
 800f51c:	b089      	sub	sp, #36	@ 0x24
 800f51e:	af00      	add	r7, sp, #0
 800f520:	6078      	str	r0, [r7, #4]
    interface->setDataCallback([this](bool dataReceived) {
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	3318      	adds	r3, #24
 800f526:	4618      	mov	r0, r3
 800f528:	f000 f8b8 	bl	800f69c <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEptEv>
 800f52c:	4604      	mov	r4, r0
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	61fb      	str	r3, [r7, #28]
 800f532:	f107 021c 	add.w	r2, r7, #28
 800f536:	f107 030c 	add.w	r3, r7, #12
 800f53a:	4611      	mov	r1, r2
 800f53c:	4618      	mov	r0, r3
 800f53e:	f000 f8b9 	bl	800f6b4 <_ZNSt8functionIFvbEEC1IZN12CommsHandler4initEvEUlbE_vEEOT_>
 800f542:	f107 030c 	add.w	r3, r7, #12
 800f546:	4619      	mov	r1, r3
 800f548:	4620      	mov	r0, r4
 800f54a:	f7ff ff6e 	bl	800f42a <_ZN14CommsInterface15setDataCallbackERKSt8functionIFvbEE>
 800f54e:	f107 030c 	add.w	r3, r7, #12
 800f552:	4618      	mov	r0, r3
 800f554:	f7f1 fbfc 	bl	8000d50 <_ZNSt8functionIFvbEED1Ev>

    interface->init();
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	3318      	adds	r3, #24
 800f55c:	4618      	mov	r0, r3
 800f55e:	f000 f89d 	bl	800f69c <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEptEv>
 800f562:	4603      	mov	r3, r0
 800f564:	681a      	ldr	r2, [r3, #0]
 800f566:	321c      	adds	r2, #28
 800f568:	6812      	ldr	r2, [r2, #0]
 800f56a:	4618      	mov	r0, r3
 800f56c:	4790      	blx	r2
}
 800f56e:	bf00      	nop
 800f570:	3724      	adds	r7, #36	@ 0x24
 800f572:	46bd      	mov	sp, r7
 800f574:	bd90      	pop	{r4, r7, pc}

0800f576 <_ZN12CommsHandler5startEv>:

void CommsHandler::start() {
 800f576:	b580      	push	{r7, lr}
 800f578:	b082      	sub	sp, #8
 800f57a:	af00      	add	r7, sp, #0
 800f57c:	6078      	str	r0, [r7, #4]
	interface->start();
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	3318      	adds	r3, #24
 800f582:	4618      	mov	r0, r3
 800f584:	f000 f88a 	bl	800f69c <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEptEv>
 800f588:	4603      	mov	r3, r0
 800f58a:	681a      	ldr	r2, [r3, #0]
 800f58c:	3220      	adds	r2, #32
 800f58e:	6812      	ldr	r2, [r2, #0]
 800f590:	4618      	mov	r0, r3
 800f592:	4790      	blx	r2
}
 800f594:	bf00      	nop
 800f596:	3708      	adds	r7, #8
 800f598:	46bd      	mov	sp, r7
 800f59a:	bd80      	pop	{r7, pc}

0800f59c <_ZN12CommsHandler5tasksEv>:

// tasks is run in the main loop to do polling tasks, eg Ethernet, processing data etc
void CommsHandler::tasks() {
 800f59c:	b580      	push	{r7, lr}
 800f59e:	b082      	sub	sp, #8
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	6078      	str	r0, [r7, #4]
	interface->tasks();
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	3318      	adds	r3, #24
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	f000 f877 	bl	800f69c <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEptEv>
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	681a      	ldr	r2, [r3, #0]
 800f5b2:	3224      	adds	r2, #36	@ 0x24
 800f5b4:	6812      	ldr	r2, [r2, #0]
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	4790      	blx	r2
}
 800f5ba:	bf00      	nop
 800f5bc:	3708      	adds	r7, #8
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	bd80      	pop	{r7, pc}

0800f5c2 <_ZN12CommsHandler6updateEv>:

// update it run in the servo thread to monitor communications
void CommsHandler::update() {
 800f5c2:	b480      	push	{r7}
 800f5c4:	b083      	sub	sp, #12
 800f5c6:	af00      	add	r7, sp, #0
 800f5c8:	6078      	str	r0, [r7, #4]
	if (data)
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	7f1b      	ldrb	r3, [r3, #28]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d006      	beq.n	800f5e0 <_ZN12CommsHandler6updateEv+0x1e>
	{
		noDataCount = 0;
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	2200      	movs	r2, #0
 800f5d6:	775a      	strb	r2, [r3, #29]
		status = true;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	2201      	movs	r2, #1
 800f5dc:	779a      	strb	r2, [r3, #30]
 800f5de:	e005      	b.n	800f5ec <_ZN12CommsHandler6updateEv+0x2a>
	}
	else
	{
		noDataCount++;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	7f5b      	ldrb	r3, [r3, #29]
 800f5e4:	3301      	adds	r3, #1
 800f5e6:	b2da      	uxtb	r2, r3
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	775a      	strb	r2, [r3, #29]
	}

	if (noDataCount > Config::dataErrMax)
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	7f5b      	ldrb	r3, [r3, #29]
 800f5f0:	2b64      	cmp	r3, #100	@ 0x64
 800f5f2:	d905      	bls.n	800f600 <_ZN12CommsHandler6updateEv+0x3e>
	{
		noDataCount = 0;
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	2200      	movs	r2, #0
 800f5f8:	775a      	strb	r2, [r3, #29]
		status = false;
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	2200      	movs	r2, #0
 800f5fe:	779a      	strb	r2, [r3, #30]
	}

	data = false;
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	2200      	movs	r2, #0
 800f604:	771a      	strb	r2, [r3, #28]
}
 800f606:	bf00      	nop
 800f608:	370c      	adds	r7, #12
 800f60a:	46bd      	mov	sp, r7
 800f60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f610:	4770      	bx	lr

0800f612 <_ZNSt8functionIFvbEEaSERKS1_>:
      operator=(const function& __x)
 800f612:	b580      	push	{r7, lr}
 800f614:	b086      	sub	sp, #24
 800f616:	af00      	add	r7, sp, #0
 800f618:	6078      	str	r0, [r7, #4]
 800f61a:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 800f61c:	f107 0308 	add.w	r3, r7, #8
 800f620:	6839      	ldr	r1, [r7, #0]
 800f622:	4618      	mov	r0, r3
 800f624:	f000 f876 	bl	800f714 <_ZNSt8functionIFvbEEC1ERKS1_>
 800f628:	f107 0308 	add.w	r3, r7, #8
 800f62c:	6879      	ldr	r1, [r7, #4]
 800f62e:	4618      	mov	r0, r3
 800f630:	f000 f89b 	bl	800f76a <_ZNSt8functionIFvbEE4swapERS1_>
 800f634:	f107 0308 	add.w	r3, r7, #8
 800f638:	4618      	mov	r0, r3
 800f63a:	f7f1 fb89 	bl	8000d50 <_ZNSt8functionIFvbEED1Ev>
	return *this;
 800f63e:	687b      	ldr	r3, [r7, #4]
      }
 800f640:	4618      	mov	r0, r3
 800f642:	3718      	adds	r7, #24
 800f644:	46bd      	mov	sp, r7
 800f646:	bd80      	pop	{r7, pc}

0800f648 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEC1Ev>:
      __uniq_ptr_impl() = default;
 800f648:	b580      	push	{r7, lr}
 800f64a:	b082      	sub	sp, #8
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	6078      	str	r0, [r7, #4]
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	4618      	mov	r0, r3
 800f654:	f000 f8aa 	bl	800f7ac <_ZNSt5tupleIJP14CommsInterfaceSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	4618      	mov	r0, r3
 800f65c:	3708      	adds	r7, #8
 800f65e:	46bd      	mov	sp, r7
 800f660:	bd80      	pop	{r7, pc}

0800f662 <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800f662:	b580      	push	{r7, lr}
 800f664:	b082      	sub	sp, #8
 800f666:	af00      	add	r7, sp, #0
 800f668:	6078      	str	r0, [r7, #4]
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	4618      	mov	r0, r3
 800f66e:	f7ff ffeb 	bl	800f648 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEC1Ev>
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	4618      	mov	r0, r3
 800f676:	3708      	adds	r7, #8
 800f678:	46bd      	mov	sp, r7
 800f67a:	bd80      	pop	{r7, pc}

0800f67c <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEC1IS2_vEEv>:
	constexpr unique_ptr() noexcept
 800f67c:	b580      	push	{r7, lr}
 800f67e:	b082      	sub	sp, #8
 800f680:	af00      	add	r7, sp, #0
 800f682:	6078      	str	r0, [r7, #4]
	: _M_t()
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	2200      	movs	r2, #0
 800f688:	601a      	str	r2, [r3, #0]
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	4618      	mov	r0, r3
 800f68e:	f7ff ffe8 	bl	800f662 <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>
	{ }
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	4618      	mov	r0, r3
 800f696:	3708      	adds	r7, #8
 800f698:	46bd      	mov	sp, r7
 800f69a:	bd80      	pop	{r7, pc}

0800f69c <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800f69c:	b580      	push	{r7, lr}
 800f69e:	b082      	sub	sp, #8
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	6078      	str	r0, [r7, #4]
	return get();
 800f6a4:	6878      	ldr	r0, [r7, #4]
 800f6a6:	f000 f88e 	bl	800f7c6 <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EE3getEv>
 800f6aa:	4603      	mov	r3, r0
      }
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	3708      	adds	r7, #8
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	bd80      	pop	{r7, pc}

0800f6b4 <_ZNSt8functionIFvbEEC1IZN12CommsHandler4initEvEUlbE_vEEOT_>:
	function(_Functor&& __f)
 800f6b4:	b590      	push	{r4, r7, lr}
 800f6b6:	b083      	sub	sp, #12
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	6078      	str	r0, [r7, #4]
 800f6bc:	6039      	str	r1, [r7, #0]
	: _Function_base()
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	461a      	mov	r2, r3
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	6013      	str	r3, [r2, #0]
 800f6c6:	6053      	str	r3, [r2, #4]
 800f6c8:	6093      	str	r3, [r2, #8]
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	f7f2 fd61 	bl	8002194 <_ZNSt14_Function_baseC1Ev>
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	2200      	movs	r2, #0
 800f6d6:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 800f6d8:	6838      	ldr	r0, [r7, #0]
 800f6da:	f000 f881 	bl	800f7e0 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E21_M_not_empty_functionIS2_EEbRKT_>
 800f6de:	4603      	mov	r3, r0
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d00e      	beq.n	800f702 <_ZNSt8functionIFvbEEC1IZN12CommsHandler4initEvEUlbE_vEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 800f6e4:	687c      	ldr	r4, [r7, #4]
 800f6e6:	6838      	ldr	r0, [r7, #0]
 800f6e8:	f000 f885 	bl	800f7f6 <_ZSt7forwardIZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS2_E4typeE>
 800f6ec:	4603      	mov	r3, r0
 800f6ee:	4619      	mov	r1, r3
 800f6f0:	4620      	mov	r0, r4
 800f6f2:	f000 f88b 	bl	800f80c <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E15_M_init_functorIS2_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	4a04      	ldr	r2, [pc, #16]	@ (800f70c <_ZNSt8functionIFvbEEC1IZN12CommsHandler4initEvEUlbE_vEEOT_+0x58>)
 800f6fa:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	4a04      	ldr	r2, [pc, #16]	@ (800f710 <_ZNSt8functionIFvbEEC1IZN12CommsHandler4initEvEUlbE_vEEOT_+0x5c>)
 800f700:	609a      	str	r2, [r3, #8]
	}
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	4618      	mov	r0, r3
 800f706:	370c      	adds	r7, #12
 800f708:	46bd      	mov	sp, r7
 800f70a:	bd90      	pop	{r4, r7, pc}
 800f70c:	0800f831 	.word	0x0800f831
 800f710:	0800f85b 	.word	0x0800f85b

0800f714 <_ZNSt8functionIFvbEEC1ERKS1_>:
      function(const function& __x)
 800f714:	b580      	push	{r7, lr}
 800f716:	b082      	sub	sp, #8
 800f718:	af00      	add	r7, sp, #0
 800f71a:	6078      	str	r0, [r7, #4]
 800f71c:	6039      	str	r1, [r7, #0]
      : _Function_base()
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	461a      	mov	r2, r3
 800f722:	2300      	movs	r3, #0
 800f724:	6013      	str	r3, [r2, #0]
 800f726:	6053      	str	r3, [r2, #4]
 800f728:	6093      	str	r3, [r2, #8]
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	4618      	mov	r0, r3
 800f72e:	f7f2 fd31 	bl	8002194 <_ZNSt14_Function_baseC1Ev>
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	2200      	movs	r2, #0
 800f736:	60da      	str	r2, [r3, #12]
	if (static_cast<bool>(__x))
 800f738:	6838      	ldr	r0, [r7, #0]
 800f73a:	f000 f8ad 	bl	800f898 <_ZNKSt8functionIFvbEEcvbEv>
 800f73e:	4603      	mov	r3, r0
 800f740:	2b00      	cmp	r3, #0
 800f742:	d00d      	beq.n	800f760 <_ZNSt8functionIFvbEEC1ERKS1_+0x4c>
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 800f744:	683b      	ldr	r3, [r7, #0]
 800f746:	689b      	ldr	r3, [r3, #8]
 800f748:	6878      	ldr	r0, [r7, #4]
 800f74a:	6839      	ldr	r1, [r7, #0]
 800f74c:	2202      	movs	r2, #2
 800f74e:	4798      	blx	r3
	    _M_invoker = __x._M_invoker;
 800f750:	683b      	ldr	r3, [r7, #0]
 800f752:	68da      	ldr	r2, [r3, #12]
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	60da      	str	r2, [r3, #12]
	    _M_manager = __x._M_manager;
 800f758:	683b      	ldr	r3, [r7, #0]
 800f75a:	689a      	ldr	r2, [r3, #8]
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	609a      	str	r2, [r3, #8]
      }
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	4618      	mov	r0, r3
 800f764:	3708      	adds	r7, #8
 800f766:	46bd      	mov	sp, r7
 800f768:	bd80      	pop	{r7, pc}

0800f76a <_ZNSt8functionIFvbEE4swapERS1_>:
      void swap(function& __x) noexcept
 800f76a:	b580      	push	{r7, lr}
 800f76c:	b082      	sub	sp, #8
 800f76e:	af00      	add	r7, sp, #0
 800f770:	6078      	str	r0, [r7, #4]
 800f772:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	683a      	ldr	r2, [r7, #0]
 800f778:	4611      	mov	r1, r2
 800f77a:	4618      	mov	r0, r3
 800f77c:	f000 f89c 	bl	800f8b8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	f103 0208 	add.w	r2, r3, #8
 800f786:	683b      	ldr	r3, [r7, #0]
 800f788:	3308      	adds	r3, #8
 800f78a:	4619      	mov	r1, r3
 800f78c:	4610      	mov	r0, r2
 800f78e:	f000 f8ba 	bl	800f906 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	f103 020c 	add.w	r2, r3, #12
 800f798:	683b      	ldr	r3, [r7, #0]
 800f79a:	330c      	adds	r3, #12
 800f79c:	4619      	mov	r1, r3
 800f79e:	4610      	mov	r0, r2
 800f7a0:	f000 f8d0 	bl	800f944 <_ZSt4swapIPFvRKSt9_Any_dataObEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>
      }
 800f7a4:	bf00      	nop
 800f7a6:	3708      	adds	r7, #8
 800f7a8:	46bd      	mov	sp, r7
 800f7aa:	bd80      	pop	{r7, pc}

0800f7ac <_ZNSt5tupleIJP14CommsInterfaceSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	b082      	sub	sp, #8
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	f000 f8e3 	bl	800f982 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEEC1Ev>
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	4618      	mov	r0, r3
 800f7c0:	3708      	adds	r7, #8
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	bd80      	pop	{r7, pc}

0800f7c6 <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800f7c6:	b580      	push	{r7, lr}
 800f7c8:	b082      	sub	sp, #8
 800f7ca:	af00      	add	r7, sp, #0
 800f7cc:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	f000 f8e6 	bl	800f9a2 <_ZNKSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	4618      	mov	r0, r3
 800f7da:	3708      	adds	r7, #8
 800f7dc:	46bd      	mov	sp, r7
 800f7de:	bd80      	pop	{r7, pc}

0800f7e0 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E21_M_not_empty_functionIS2_EEbRKT_>:
	  _M_not_empty_function(const _Tp&) noexcept
 800f7e0:	b480      	push	{r7}
 800f7e2:	b083      	sub	sp, #12
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	6078      	str	r0, [r7, #4]
	  { return true; }
 800f7e8:	2301      	movs	r3, #1
 800f7ea:	4618      	mov	r0, r3
 800f7ec:	370c      	adds	r7, #12
 800f7ee:	46bd      	mov	sp, r7
 800f7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f4:	4770      	bx	lr

0800f7f6 <_ZSt7forwardIZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f7f6:	b480      	push	{r7}
 800f7f8:	b083      	sub	sp, #12
 800f7fa:	af00      	add	r7, sp, #0
 800f7fc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	4618      	mov	r0, r3
 800f802:	370c      	adds	r7, #12
 800f804:	46bd      	mov	sp, r7
 800f806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80a:	4770      	bx	lr

0800f80c <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E15_M_init_functorIS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800f80c:	b590      	push	{r4, r7, lr}
 800f80e:	b083      	sub	sp, #12
 800f810:	af00      	add	r7, sp, #0
 800f812:	6078      	str	r0, [r7, #4]
 800f814:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 800f816:	6838      	ldr	r0, [r7, #0]
 800f818:	f7ff ffed 	bl	800f7f6 <_ZSt7forwardIZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS2_E4typeE>
 800f81c:	4603      	mov	r3, r0
 800f81e:	4622      	mov	r2, r4
 800f820:	4619      	mov	r1, r3
 800f822:	6878      	ldr	r0, [r7, #4]
 800f824:	f000 f8cb 	bl	800f9be <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E9_M_createIS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 800f828:	bf00      	nop
 800f82a:	370c      	adds	r7, #12
 800f82c:	46bd      	mov	sp, r7
 800f82e:	bd90      	pop	{r4, r7, pc}

0800f830 <_ZNSt17_Function_handlerIFvbEZN12CommsHandler4initEvEUlbE_E9_M_invokeERKSt9_Any_dataOb>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800f830:	b590      	push	{r4, r7, lr}
 800f832:	b083      	sub	sp, #12
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
 800f838:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800f83a:	6878      	ldr	r0, [r7, #4]
 800f83c:	f000 f8d8 	bl	800f9f0 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E14_M_get_pointerERKSt9_Any_data>
 800f840:	4604      	mov	r4, r0
 800f842:	6838      	ldr	r0, [r7, #0]
 800f844:	f7f2 fbe4 	bl	8002010 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 800f848:	4603      	mov	r3, r0
 800f84a:	4619      	mov	r1, r3
 800f84c:	4620      	mov	r0, r4
 800f84e:	f000 f8df 	bl	800fa10 <_ZSt10__invoke_rIvRZN12CommsHandler4initEvEUlbE_JbEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
				     std::forward<_ArgTypes>(__args)...);
 800f852:	bf00      	nop
      }
 800f854:	370c      	adds	r7, #12
 800f856:	46bd      	mov	sp, r7
 800f858:	bd90      	pop	{r4, r7, pc}

0800f85a <_ZNSt17_Function_handlerIFvbEZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800f85a:	b590      	push	{r4, r7, lr}
 800f85c:	b085      	sub	sp, #20
 800f85e:	af00      	add	r7, sp, #0
 800f860:	60f8      	str	r0, [r7, #12]
 800f862:	60b9      	str	r1, [r7, #8]
 800f864:	4613      	mov	r3, r2
 800f866:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800f868:	79fb      	ldrb	r3, [r7, #7]
 800f86a:	2b01      	cmp	r3, #1
 800f86c:	d109      	bne.n	800f882 <_ZNSt17_Function_handlerIFvbEZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800f86e:	68b8      	ldr	r0, [r7, #8]
 800f870:	f000 f8be 	bl	800f9f0 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E14_M_get_pointerERKSt9_Any_data>
 800f874:	4604      	mov	r4, r0
 800f876:	68f8      	ldr	r0, [r7, #12]
 800f878:	f000 f8e0 	bl	800fa3c <_ZNSt9_Any_data9_M_accessIPZN12CommsHandler4initEvEUlbE_EERT_v>
 800f87c:	4603      	mov	r3, r0
 800f87e:	601c      	str	r4, [r3, #0]
	    break;
 800f880:	e005      	b.n	800f88e <_ZNSt17_Function_handlerIFvbEZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800f882:	79fb      	ldrb	r3, [r7, #7]
 800f884:	461a      	mov	r2, r3
 800f886:	68b9      	ldr	r1, [r7, #8]
 800f888:	68f8      	ldr	r0, [r7, #12]
 800f88a:	f000 f8e3 	bl	800fa54 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 800f88e:	2300      	movs	r3, #0
      }
 800f890:	4618      	mov	r0, r3
 800f892:	3714      	adds	r7, #20
 800f894:	46bd      	mov	sp, r7
 800f896:	bd90      	pop	{r4, r7, pc}

0800f898 <_ZNKSt8functionIFvbEEcvbEv>:
      explicit operator bool() const noexcept
 800f898:	b580      	push	{r7, lr}
 800f89a:	b082      	sub	sp, #8
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	f7f1 fa13 	bl	8000cce <_ZNKSt14_Function_base8_M_emptyEv>
 800f8a8:	4603      	mov	r3, r0
 800f8aa:	f083 0301 	eor.w	r3, r3, #1
 800f8ae:	b2db      	uxtb	r3, r3
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	3708      	adds	r7, #8
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	bd80      	pop	{r7, pc}

0800f8b8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 800f8b8:	b580      	push	{r7, lr}
 800f8ba:	b084      	sub	sp, #16
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	6078      	str	r0, [r7, #4]
 800f8c0:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800f8c2:	6878      	ldr	r0, [r7, #4]
 800f8c4:	f000 f900 	bl	800fac8 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800f8c8:	4602      	mov	r2, r0
 800f8ca:	f107 0308 	add.w	r3, r7, #8
 800f8ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f8d2:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 800f8d6:	6838      	ldr	r0, [r7, #0]
 800f8d8:	f000 f8f6 	bl	800fac8 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800f8dc:	4602      	mov	r2, r0
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f8e4:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800f8e8:	f107 0308 	add.w	r3, r7, #8
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	f000 f8eb 	bl	800fac8 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800f8f2:	4602      	mov	r2, r0
 800f8f4:	683b      	ldr	r3, [r7, #0]
 800f8f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f8fa:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800f8fe:	bf00      	nop
 800f900:	3710      	adds	r7, #16
 800f902:	46bd      	mov	sp, r7
 800f904:	bd80      	pop	{r7, pc}

0800f906 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 800f906:	b580      	push	{r7, lr}
 800f908:	b084      	sub	sp, #16
 800f90a:	af00      	add	r7, sp, #0
 800f90c:	6078      	str	r0, [r7, #4]
 800f90e:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800f910:	6878      	ldr	r0, [r7, #4]
 800f912:	f000 f8e4 	bl	800fade <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800f916:	4603      	mov	r3, r0
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800f91c:	6838      	ldr	r0, [r7, #0]
 800f91e:	f000 f8de 	bl	800fade <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800f922:	4603      	mov	r3, r0
 800f924:	681a      	ldr	r2, [r3, #0]
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800f92a:	f107 030c 	add.w	r3, r7, #12
 800f92e:	4618      	mov	r0, r3
 800f930:	f000 f8d5 	bl	800fade <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800f934:	4603      	mov	r3, r0
 800f936:	681a      	ldr	r2, [r3, #0]
 800f938:	683b      	ldr	r3, [r7, #0]
 800f93a:	601a      	str	r2, [r3, #0]
    }
 800f93c:	bf00      	nop
 800f93e:	3710      	adds	r7, #16
 800f940:	46bd      	mov	sp, r7
 800f942:	bd80      	pop	{r7, pc}

0800f944 <_ZSt4swapIPFvRKSt9_Any_dataObEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>:
    swap(_Tp& __a, _Tp& __b)
 800f944:	b580      	push	{r7, lr}
 800f946:	b084      	sub	sp, #16
 800f948:	af00      	add	r7, sp, #0
 800f94a:	6078      	str	r0, [r7, #4]
 800f94c:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800f94e:	6878      	ldr	r0, [r7, #4]
 800f950:	f000 f8d0 	bl	800faf4 <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>
 800f954:	4603      	mov	r3, r0
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800f95a:	6838      	ldr	r0, [r7, #0]
 800f95c:	f000 f8ca 	bl	800faf4 <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>
 800f960:	4603      	mov	r3, r0
 800f962:	681a      	ldr	r2, [r3, #0]
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800f968:	f107 030c 	add.w	r3, r7, #12
 800f96c:	4618      	mov	r0, r3
 800f96e:	f000 f8c1 	bl	800faf4 <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>
 800f972:	4603      	mov	r3, r0
 800f974:	681a      	ldr	r2, [r3, #0]
 800f976:	683b      	ldr	r3, [r7, #0]
 800f978:	601a      	str	r2, [r3, #0]
    }
 800f97a:	bf00      	nop
 800f97c:	3710      	adds	r7, #16
 800f97e:	46bd      	mov	sp, r7
 800f980:	bd80      	pop	{r7, pc}

0800f982 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800f982:	b580      	push	{r7, lr}
 800f984:	b082      	sub	sp, #8
 800f986:	af00      	add	r7, sp, #0
 800f988:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800f98a:	6878      	ldr	r0, [r7, #4]
 800f98c:	f000 f8bd 	bl	800fb0a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEEC1Ev>
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	4618      	mov	r0, r3
 800f994:	f000 f8c5 	bl	800fb22 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EEC1Ev>
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	4618      	mov	r0, r3
 800f99c:	3708      	adds	r7, #8
 800f99e:	46bd      	mov	sp, r7
 800f9a0:	bd80      	pop	{r7, pc}

0800f9a2 <_ZNKSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800f9a2:	b580      	push	{r7, lr}
 800f9a4:	b082      	sub	sp, #8
 800f9a6:	af00      	add	r7, sp, #0
 800f9a8:	6078      	str	r0, [r7, #4]
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	4618      	mov	r0, r3
 800f9ae:	f000 f8c6 	bl	800fb3e <_ZSt3getILj0EJP14CommsInterfaceSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800f9b2:	4603      	mov	r3, r0
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	3708      	adds	r7, #8
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	bd80      	pop	{r7, pc}

0800f9be <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E9_M_createIS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 800f9be:	b590      	push	{r4, r7, lr}
 800f9c0:	b085      	sub	sp, #20
 800f9c2:	af00      	add	r7, sp, #0
 800f9c4:	60f8      	str	r0, [r7, #12]
 800f9c6:	60b9      	str	r1, [r7, #8]
 800f9c8:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800f9ca:	68f8      	ldr	r0, [r7, #12]
 800f9cc:	f7ff fd17 	bl	800f3fe <_ZNSt9_Any_data9_M_accessEv>
 800f9d0:	4603      	mov	r3, r0
 800f9d2:	4619      	mov	r1, r3
 800f9d4:	2004      	movs	r0, #4
 800f9d6:	f7f9 fe93 	bl	8009700 <_ZnwjPv>
 800f9da:	4604      	mov	r4, r0
 800f9dc:	68b8      	ldr	r0, [r7, #8]
 800f9de:	f7ff ff0a 	bl	800f7f6 <_ZSt7forwardIZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS2_E4typeE>
 800f9e2:	4603      	mov	r3, r0
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	6023      	str	r3, [r4, #0]
	  }
 800f9e8:	bf00      	nop
 800f9ea:	3714      	adds	r7, #20
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	bd90      	pop	{r4, r7, pc}

0800f9f0 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b084      	sub	sp, #16
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800f9f8:	6878      	ldr	r0, [r7, #4]
 800f9fa:	f000 f8ad 	bl	800fb58 <_ZNKSt9_Any_data9_M_accessIZN12CommsHandler4initEvEUlbE_EERKT_v>
 800f9fe:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800fa00:	68f8      	ldr	r0, [r7, #12]
 800fa02:	f000 f8b5 	bl	800fb70 <_ZSt11__addressofIKZN12CommsHandler4initEvEUlbE_EPT_RS3_>
 800fa06:	4603      	mov	r3, r0
	}
 800fa08:	4618      	mov	r0, r3
 800fa0a:	3710      	adds	r7, #16
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	bd80      	pop	{r7, pc}

0800fa10 <_ZSt10__invoke_rIvRZN12CommsHandler4initEvEUlbE_JbEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:

#if __cplusplus >= 201703L
  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr enable_if_t<is_invocable_r_v<_Res, _Callable, _Args...>, _Res>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800fa10:	b5b0      	push	{r4, r5, r7, lr}
 800fa12:	b082      	sub	sp, #8
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	6078      	str	r0, [r7, #4]
 800fa18:	6039      	str	r1, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      if constexpr (is_void_v<_Res>)
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800fa1a:	6878      	ldr	r0, [r7, #4]
 800fa1c:	f000 f8b3 	bl	800fb86 <_ZSt7forwardIRZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS3_E4typeE>
 800fa20:	4604      	mov	r4, r0
 800fa22:	6838      	ldr	r0, [r7, #0]
 800fa24:	f7f2 faf4 	bl	8002010 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 800fa28:	4603      	mov	r3, r0
 800fa2a:	461a      	mov	r2, r3
 800fa2c:	4621      	mov	r1, r4
 800fa2e:	4628      	mov	r0, r5
 800fa30:	f000 f8b4 	bl	800fb9c <_ZSt13__invoke_implIvRZN12CommsHandler4initEvEUlbE_JbEET_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
      else
	return std::__invoke_impl<__type>(__tag{},
					  std::forward<_Callable>(__fn),
					  std::forward<_Args>(__args)...);
    }
 800fa34:	bf00      	nop
 800fa36:	3708      	adds	r7, #8
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	bdb0      	pop	{r4, r5, r7, pc}

0800fa3c <_ZNSt9_Any_data9_M_accessIPZN12CommsHandler4initEvEUlbE_EERT_v>:
      _M_access() noexcept
 800fa3c:	b580      	push	{r7, lr}
 800fa3e:	b082      	sub	sp, #8
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800fa44:	6878      	ldr	r0, [r7, #4]
 800fa46:	f7ff fcda 	bl	800f3fe <_ZNSt9_Any_data9_M_accessEv>
 800fa4a:	4603      	mov	r3, r0
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	3708      	adds	r7, #8
 800fa50:	46bd      	mov	sp, r7
 800fa52:	bd80      	pop	{r7, pc}

0800fa54 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800fa54:	b590      	push	{r4, r7, lr}
 800fa56:	b085      	sub	sp, #20
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	60f8      	str	r0, [r7, #12]
 800fa5c:	60b9      	str	r1, [r7, #8]
 800fa5e:	4613      	mov	r3, r2
 800fa60:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800fa62:	79fb      	ldrb	r3, [r7, #7]
 800fa64:	2b03      	cmp	r3, #3
 800fa66:	d82a      	bhi.n	800fabe <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
 800fa68:	a201      	add	r2, pc, #4	@ (adr r2, 800fa70 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x1c>)
 800fa6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa6e:	bf00      	nop
 800fa70:	0800fa81 	.word	0x0800fa81
 800fa74:	0800fa8f 	.word	0x0800fa8f
 800fa78:	0800faa3 	.word	0x0800faa3
 800fa7c:	0800fab5 	.word	0x0800fab5
	      __dest._M_access<const type_info*>() = nullptr;
 800fa80:	68f8      	ldr	r0, [r7, #12]
 800fa82:	f000 f8a2 	bl	800fbca <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 800fa86:	4603      	mov	r3, r0
 800fa88:	2200      	movs	r2, #0
 800fa8a:	601a      	str	r2, [r3, #0]
	      break;
 800fa8c:	e017      	b.n	800fabe <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800fa8e:	68b8      	ldr	r0, [r7, #8]
 800fa90:	f7ff ffae 	bl	800f9f0 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E14_M_get_pointerERKSt9_Any_data>
 800fa94:	4604      	mov	r4, r0
 800fa96:	68f8      	ldr	r0, [r7, #12]
 800fa98:	f7ff ffd0 	bl	800fa3c <_ZNSt9_Any_data9_M_accessIPZN12CommsHandler4initEvEUlbE_EERT_v>
 800fa9c:	4603      	mov	r3, r0
 800fa9e:	601c      	str	r4, [r3, #0]
	      break;
 800faa0:	e00d      	b.n	800fabe <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 800faa2:	68b8      	ldr	r0, [r7, #8]
 800faa4:	f7ff ffa4 	bl	800f9f0 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E14_M_get_pointerERKSt9_Any_data>
 800faa8:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 800faaa:	4619      	mov	r1, r3
 800faac:	68f8      	ldr	r0, [r7, #12]
 800faae:	f000 f898 	bl	800fbe2 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>
	      break;
 800fab2:	e004      	b.n	800fabe <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 800fab4:	4621      	mov	r1, r4
 800fab6:	68f8      	ldr	r0, [r7, #12]
 800fab8:	f000 f8a5 	bl	800fc06 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 800fabc:	bf00      	nop
	  return false;
 800fabe:	2300      	movs	r3, #0
	}
 800fac0:	4618      	mov	r0, r3
 800fac2:	3714      	adds	r7, #20
 800fac4:	46bd      	mov	sp, r7
 800fac6:	bd90      	pop	{r4, r7, pc}

0800fac8 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800fac8:	b480      	push	{r7}
 800faca:	b083      	sub	sp, #12
 800facc:	af00      	add	r7, sp, #0
 800face:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	4618      	mov	r0, r3
 800fad4:	370c      	adds	r7, #12
 800fad6:	46bd      	mov	sp, r7
 800fad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fadc:	4770      	bx	lr

0800fade <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 800fade:	b480      	push	{r7}
 800fae0:	b083      	sub	sp, #12
 800fae2:	af00      	add	r7, sp, #0
 800fae4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	4618      	mov	r0, r3
 800faea:	370c      	adds	r7, #12
 800faec:	46bd      	mov	sp, r7
 800faee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf2:	4770      	bx	lr

0800faf4 <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 800faf4:	b480      	push	{r7}
 800faf6:	b083      	sub	sp, #12
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	4618      	mov	r0, r3
 800fb00:	370c      	adds	r7, #12
 800fb02:	46bd      	mov	sp, r7
 800fb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb08:	4770      	bx	lr

0800fb0a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEEC1Ev>:
      _Tuple_impl()
 800fb0a:	b580      	push	{r7, lr}
 800fb0c:	b082      	sub	sp, #8
 800fb0e:	af00      	add	r7, sp, #0
 800fb10:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800fb12:	6878      	ldr	r0, [r7, #4]
 800fb14:	f000 f883 	bl	800fc1e <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EEC1Ev>
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	3708      	adds	r7, #8
 800fb1e:	46bd      	mov	sp, r7
 800fb20:	bd80      	pop	{r7, pc}

0800fb22 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EEC1Ev>:
      constexpr _Head_base()
 800fb22:	b480      	push	{r7}
 800fb24:	b083      	sub	sp, #12
 800fb26:	af00      	add	r7, sp, #0
 800fb28:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	2200      	movs	r2, #0
 800fb2e:	601a      	str	r2, [r3, #0]
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	4618      	mov	r0, r3
 800fb34:	370c      	adds	r7, #12
 800fb36:	46bd      	mov	sp, r7
 800fb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb3c:	4770      	bx	lr

0800fb3e <_ZSt3getILj0EJP14CommsInterfaceSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800fb3e:	b580      	push	{r7, lr}
 800fb40:	b082      	sub	sp, #8
 800fb42:	af00      	add	r7, sp, #0
 800fb44:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	4618      	mov	r0, r3
 800fb4a:	f000 f873 	bl	800fc34 <_ZSt12__get_helperILj0EP14CommsInterfaceJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800fb4e:	4603      	mov	r3, r0
 800fb50:	4618      	mov	r0, r3
 800fb52:	3708      	adds	r7, #8
 800fb54:	46bd      	mov	sp, r7
 800fb56:	bd80      	pop	{r7, pc}

0800fb58 <_ZNKSt9_Any_data9_M_accessIZN12CommsHandler4initEvEUlbE_EERKT_v>:
      _M_access() const noexcept
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	b082      	sub	sp, #8
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800fb60:	6878      	ldr	r0, [r7, #4]
 800fb62:	f7ff fc57 	bl	800f414 <_ZNKSt9_Any_data9_M_accessEv>
 800fb66:	4603      	mov	r3, r0
 800fb68:	4618      	mov	r0, r3
 800fb6a:	3708      	adds	r7, #8
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	bd80      	pop	{r7, pc}

0800fb70 <_ZSt11__addressofIKZN12CommsHandler4initEvEUlbE_EPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800fb70:	b480      	push	{r7}
 800fb72:	b083      	sub	sp, #12
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	370c      	adds	r7, #12
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb84:	4770      	bx	lr

0800fb86 <_ZSt7forwardIRZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800fb86:	b480      	push	{r7}
 800fb88:	b083      	sub	sp, #12
 800fb8a:	af00      	add	r7, sp, #0
 800fb8c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	4618      	mov	r0, r3
 800fb92:	370c      	adds	r7, #12
 800fb94:	46bd      	mov	sp, r7
 800fb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb9a:	4770      	bx	lr

0800fb9c <_ZSt13__invoke_implIvRZN12CommsHandler4initEvEUlbE_JbEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800fb9c:	b590      	push	{r4, r7, lr}
 800fb9e:	b085      	sub	sp, #20
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	7338      	strb	r0, [r7, #12]
 800fba4:	60b9      	str	r1, [r7, #8]
 800fba6:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800fba8:	68b8      	ldr	r0, [r7, #8]
 800fbaa:	f7ff ffec 	bl	800fb86 <_ZSt7forwardIRZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS3_E4typeE>
 800fbae:	4604      	mov	r4, r0
 800fbb0:	6878      	ldr	r0, [r7, #4]
 800fbb2:	f7f2 fa2d 	bl	8002010 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 800fbb6:	4603      	mov	r3, r0
 800fbb8:	781b      	ldrb	r3, [r3, #0]
 800fbba:	4619      	mov	r1, r3
 800fbbc:	4620      	mov	r0, r4
 800fbbe:	f7ff fc9b 	bl	800f4f8 <_ZZN12CommsHandler4initEvENKUlbE_clEb>
 800fbc2:	bf00      	nop
 800fbc4:	3714      	adds	r7, #20
 800fbc6:	46bd      	mov	sp, r7
 800fbc8:	bd90      	pop	{r4, r7, pc}

0800fbca <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access() noexcept
 800fbca:	b580      	push	{r7, lr}
 800fbcc:	b082      	sub	sp, #8
 800fbce:	af00      	add	r7, sp, #0
 800fbd0:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800fbd2:	6878      	ldr	r0, [r7, #4]
 800fbd4:	f7ff fc13 	bl	800f3fe <_ZNSt9_Any_data9_M_accessEv>
 800fbd8:	4603      	mov	r3, r0
 800fbda:	4618      	mov	r0, r3
 800fbdc:	3708      	adds	r7, #8
 800fbde:	46bd      	mov	sp, r7
 800fbe0:	bd80      	pop	{r7, pc}

0800fbe2 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800fbe2:	b590      	push	{r4, r7, lr}
 800fbe4:	b083      	sub	sp, #12
 800fbe6:	af00      	add	r7, sp, #0
 800fbe8:	6078      	str	r0, [r7, #4]
 800fbea:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 800fbec:	6838      	ldr	r0, [r7, #0]
 800fbee:	f000 f82d 	bl	800fc4c <_ZSt7forwardIRKZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS4_E4typeE>
 800fbf2:	4603      	mov	r3, r0
 800fbf4:	4622      	mov	r2, r4
 800fbf6:	4619      	mov	r1, r3
 800fbf8:	6878      	ldr	r0, [r7, #4]
 800fbfa:	f000 f832 	bl	800fc62 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 800fbfe:	bf00      	nop
 800fc00:	370c      	adds	r7, #12
 800fc02:	46bd      	mov	sp, r7
 800fc04:	bd90      	pop	{r4, r7, pc}

0800fc06 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800fc06:	b580      	push	{r7, lr}
 800fc08:	b082      	sub	sp, #8
 800fc0a:	af00      	add	r7, sp, #0
 800fc0c:	6078      	str	r0, [r7, #4]
 800fc0e:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800fc10:	6878      	ldr	r0, [r7, #4]
 800fc12:	f000 f83f 	bl	800fc94 <_ZNSt9_Any_data9_M_accessIZN12CommsHandler4initEvEUlbE_EERT_v>
	}
 800fc16:	bf00      	nop
 800fc18:	3708      	adds	r7, #8
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	bd80      	pop	{r7, pc}

0800fc1e <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EEC1Ev>:
      constexpr _Head_base()
 800fc1e:	b480      	push	{r7}
 800fc20:	b083      	sub	sp, #12
 800fc22:	af00      	add	r7, sp, #0
 800fc24:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	4618      	mov	r0, r3
 800fc2a:	370c      	adds	r7, #12
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc32:	4770      	bx	lr

0800fc34 <_ZSt12__get_helperILj0EP14CommsInterfaceJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b082      	sub	sp, #8
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800fc3c:	6878      	ldr	r0, [r7, #4]
 800fc3e:	f000 f835 	bl	800fcac <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEE7_M_headERKS4_>
 800fc42:	4603      	mov	r3, r0
 800fc44:	4618      	mov	r0, r3
 800fc46:	3708      	adds	r7, #8
 800fc48:	46bd      	mov	sp, r7
 800fc4a:	bd80      	pop	{r7, pc}

0800fc4c <_ZSt7forwardIRKZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800fc4c:	b480      	push	{r7}
 800fc4e:	b083      	sub	sp, #12
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	4618      	mov	r0, r3
 800fc58:	370c      	adds	r7, #12
 800fc5a:	46bd      	mov	sp, r7
 800fc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc60:	4770      	bx	lr

0800fc62 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 800fc62:	b590      	push	{r4, r7, lr}
 800fc64:	b085      	sub	sp, #20
 800fc66:	af00      	add	r7, sp, #0
 800fc68:	60f8      	str	r0, [r7, #12]
 800fc6a:	60b9      	str	r1, [r7, #8]
 800fc6c:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800fc6e:	68f8      	ldr	r0, [r7, #12]
 800fc70:	f7ff fbc5 	bl	800f3fe <_ZNSt9_Any_data9_M_accessEv>
 800fc74:	4603      	mov	r3, r0
 800fc76:	4619      	mov	r1, r3
 800fc78:	2004      	movs	r0, #4
 800fc7a:	f7f9 fd41 	bl	8009700 <_ZnwjPv>
 800fc7e:	4604      	mov	r4, r0
 800fc80:	68b8      	ldr	r0, [r7, #8]
 800fc82:	f7ff ffe3 	bl	800fc4c <_ZSt7forwardIRKZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS4_E4typeE>
 800fc86:	4603      	mov	r3, r0
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	6023      	str	r3, [r4, #0]
	  }
 800fc8c:	bf00      	nop
 800fc8e:	3714      	adds	r7, #20
 800fc90:	46bd      	mov	sp, r7
 800fc92:	bd90      	pop	{r4, r7, pc}

0800fc94 <_ZNSt9_Any_data9_M_accessIZN12CommsHandler4initEvEUlbE_EERT_v>:
      _M_access() noexcept
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b082      	sub	sp, #8
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800fc9c:	6878      	ldr	r0, [r7, #4]
 800fc9e:	f7ff fbae 	bl	800f3fe <_ZNSt9_Any_data9_M_accessEv>
 800fca2:	4603      	mov	r3, r0
 800fca4:	4618      	mov	r0, r3
 800fca6:	3708      	adds	r7, #8
 800fca8:	46bd      	mov	sp, r7
 800fcaa:	bd80      	pop	{r7, pc}

0800fcac <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800fcac:	b580      	push	{r7, lr}
 800fcae:	b082      	sub	sp, #8
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	6078      	str	r0, [r7, #4]
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	f000 f805 	bl	800fcc6 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EE7_M_headERKS2_>
 800fcbc:	4603      	mov	r3, r0
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	3708      	adds	r7, #8
 800fcc2:	46bd      	mov	sp, r7
 800fcc4:	bd80      	pop	{r7, pc}

0800fcc6 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800fcc6:	b480      	push	{r7}
 800fcc8:	b083      	sub	sp, #12
 800fcca:	af00      	add	r7, sp, #0
 800fccc:	6078      	str	r0, [r7, #4]
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	370c      	adds	r7, #12
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcda:	4770      	bx	lr

0800fcdc <_ZN6Remora9getTxDataEv>:
	Remora();
	void run();
    void setBaseFreq(uint32_t freq) { baseFreq = freq; }
    void setServoFreq(uint32_t freq) { servoFreq = freq; }

    volatile txData_t* getTxData() { return &txData; }
 800fcdc:	b480      	push	{r7}
 800fcde:	b083      	sub	sp, #12
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	6078      	str	r0, [r7, #4]
 800fce4:	4b03      	ldr	r3, [pc, #12]	@ (800fcf4 <_ZN6Remora9getTxDataEv+0x18>)
 800fce6:	4618      	mov	r0, r3
 800fce8:	370c      	adds	r7, #12
 800fcea:	46bd      	mov	sp, r7
 800fcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf0:	4770      	bx	lr
 800fcf2:	bf00      	nop
 800fcf4:	30000080 	.word	0x30000080

0800fcf8 <_ZN6Remora9getRxDataEv>:
    volatile rxData_t* getRxData() { return &rxData; }
 800fcf8:	b480      	push	{r7}
 800fcfa:	b083      	sub	sp, #12
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	6078      	str	r0, [r7, #4]
 800fd00:	4b03      	ldr	r3, [pc, #12]	@ (800fd10 <_ZN6Remora9getRxDataEv+0x18>)
 800fd02:	4618      	mov	r0, r3
 800fd04:	370c      	adds	r7, #12
 800fd06:	46bd      	mov	sp, r7
 800fd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd0c:	4770      	bx	lr
 800fd0e:	bf00      	nop
 800fd10:	300000c0 	.word	0x300000c0

0800fd14 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>:
#include "digitalPin.h"

std::shared_ptr<Module> DigitalPin::create(const JsonObject& config, Remora* instance) {
 800fd14:	b580      	push	{r7, lr}
 800fd16:	b0b0      	sub	sp, #192	@ 0xc0
 800fd18:	af04      	add	r7, sp, #16
 800fd1a:	60f8      	str	r0, [r7, #12]
 800fd1c:	60b9      	str	r1, [r7, #8]
 800fd1e:	607a      	str	r2, [r7, #4]
	const char* pin = config["Pin"];
 800fd20:	f107 0320 	add.w	r3, r7, #32
 800fd24:	4a65      	ldr	r2, [pc, #404]	@ (800febc <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1a8>)
 800fd26:	68b9      	ldr	r1, [r7, #8]
 800fd28:	4618      	mov	r0, r3
 800fd2a:	f7fe f997 	bl	800e05c <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA4_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800fd2e:	f107 0320 	add.w	r3, r7, #32
 800fd32:	4618      	mov	r0, r3
 800fd34:	f7f6 fd28 	bl	8006788 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800fd38:	4603      	mov	r3, r0
 800fd3a:	61fb      	str	r3, [r7, #28]
	const char* mode = config["Mode"];
 800fd3c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800fd40:	4a5f      	ldr	r2, [pc, #380]	@ (800fec0 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1ac>)
 800fd42:	68b9      	ldr	r1, [r7, #8]
 800fd44:	4618      	mov	r0, r3
 800fd46:	f000 f985 	bl	8010054 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA5_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800fd4a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800fd4e:	4618      	mov	r0, r3
 800fd50:	f7f6 fd1a 	bl	8006788 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800fd54:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
	const char* invert = config["Invert"];
 800fd58:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800fd5c:	4a59      	ldr	r2, [pc, #356]	@ (800fec4 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1b0>)
 800fd5e:	68b9      	ldr	r1, [r7, #8]
 800fd60:	4618      	mov	r0, r3
 800fd62:	f7f6 fcec 	bl	800673e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800fd66:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	f7f6 fd0c 	bl	8006788 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800fd70:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
	const char* modifier = config["Modifier"];
 800fd74:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800fd78:	4a53      	ldr	r2, [pc, #332]	@ (800fec8 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1b4>)
 800fd7a:	68b9      	ldr	r1, [r7, #8]
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	f000 f98e 	bl	801009e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA9_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800fd82:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800fd86:	4618      	mov	r0, r3
 800fd88:	f7f6 fcfe 	bl	8006788 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800fd8c:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
	int dataBit = config["Data Bit"];
 800fd90:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800fd94:	4a4d      	ldr	r2, [pc, #308]	@ (800fecc <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1b8>)
 800fd96:	68b9      	ldr	r1, [r7, #8]
 800fd98:	4618      	mov	r0, r3
 800fd9a:	f000 f980 	bl	801009e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA9_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800fd9e:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800fda2:	4618      	mov	r0, r3
 800fda4:	f7fe f97f 	bl	800e0a6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>
 800fda8:	4603      	mov	r3, r0
 800fdaa:	61bb      	str	r3, [r7, #24]

	int mod;
	bool inv;

	if (!strcmp(modifier, "Open Drain")) {
 800fdac:	4948      	ldr	r1, [pc, #288]	@ (800fed0 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1bc>)
 800fdae:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800fdb2:	f7f0 fa95 	bl	80002e0 <strcmp>
 800fdb6:	4603      	mov	r3, r0
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d102      	bne.n	800fdc2 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xae>
		mod = OPENDRAIN;
 800fdbc:	2301      	movs	r3, #1
 800fdbe:	617b      	str	r3, [r7, #20]
 800fdc0:	e022      	b.n	800fe08 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xf4>
	} else if (!strcmp(modifier, "Pull Up")) {
 800fdc2:	4944      	ldr	r1, [pc, #272]	@ (800fed4 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1c0>)
 800fdc4:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800fdc8:	f7f0 fa8a 	bl	80002e0 <strcmp>
 800fdcc:	4603      	mov	r3, r0
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d102      	bne.n	800fdd8 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xc4>
		mod = PULLUP;
 800fdd2:	2302      	movs	r3, #2
 800fdd4:	617b      	str	r3, [r7, #20]
 800fdd6:	e017      	b.n	800fe08 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xf4>
	} else if (!strcmp(modifier, "Pull Down")) {
 800fdd8:	493f      	ldr	r1, [pc, #252]	@ (800fed8 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1c4>)
 800fdda:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800fdde:	f7f0 fa7f 	bl	80002e0 <strcmp>
 800fde2:	4603      	mov	r3, r0
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d102      	bne.n	800fdee <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xda>
		mod = PULLDOWN;
 800fde8:	2303      	movs	r3, #3
 800fdea:	617b      	str	r3, [r7, #20]
 800fdec:	e00c      	b.n	800fe08 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xf4>
	} else if (!strcmp(modifier, "Pull None")) {
 800fdee:	493b      	ldr	r1, [pc, #236]	@ (800fedc <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1c8>)
 800fdf0:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800fdf4:	f7f0 fa74 	bl	80002e0 <strcmp>
 800fdf8:	4603      	mov	r3, r0
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d102      	bne.n	800fe04 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xf0>
		mod = PULLNONE;
 800fdfe:	2304      	movs	r3, #4
 800fe00:	617b      	str	r3, [r7, #20]
 800fe02:	e001      	b.n	800fe08 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xf4>
	} else {
		mod = NONE;
 800fe04:	2300      	movs	r3, #0
 800fe06:	617b      	str	r3, [r7, #20]
	}

	inv = !strcmp(invert, "True");
 800fe08:	4935      	ldr	r1, [pc, #212]	@ (800fee0 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1cc>)
 800fe0a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 800fe0e:	f7f0 fa67 	bl	80002e0 <strcmp>
 800fe12:	4603      	mov	r3, r0
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	bf0c      	ite	eq
 800fe18:	2301      	moveq	r3, #1
 800fe1a:	2300      	movne	r3, #0
 800fe1c:	b2db      	uxtb	r3, r3
 800fe1e:	74fb      	strb	r3, [r7, #19]

	volatile uint16_t* ptrData = (!strcmp(mode, "Output")) ? &instance->getRxData()->outputs : &instance->getTxData()->inputs;
 800fe20:	4930      	ldr	r1, [pc, #192]	@ (800fee4 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1d0>)
 800fe22:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 800fe26:	f7f0 fa5b 	bl	80002e0 <strcmp>
 800fe2a:	4603      	mov	r3, r0
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d105      	bne.n	800fe3c <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x128>
 800fe30:	6878      	ldr	r0, [r7, #4]
 800fe32:	f7ff ff61 	bl	800fcf8 <_ZN6Remora9getRxDataEv>
 800fe36:	4603      	mov	r3, r0
 800fe38:	333d      	adds	r3, #61	@ 0x3d
 800fe3a:	e004      	b.n	800fe46 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x132>
 800fe3c:	6878      	ldr	r0, [r7, #4]
 800fe3e:	f7ff ff4d 	bl	800fcdc <_ZN6Remora9getTxDataEv>
 800fe42:	4603      	mov	r3, r0
 800fe44:	333c      	adds	r3, #60	@ 0x3c
 800fe46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

	printf("Creating DigitalPin module: Mode=%s, Pin=%s\n", mode, pin);
 800fe4a:	69fb      	ldr	r3, [r7, #28]
 800fe4c:	461a      	mov	r2, r3
 800fe4e:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 800fe52:	4825      	ldr	r0, [pc, #148]	@ (800fee8 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1d4>)
 800fe54:	f016 feec 	bl	8026c30 <iprintf>
	return std::make_unique<DigitalPin>(*ptrData, (!strcmp(mode, "Output")) ? 1 : 0, pin, dataBit, inv, mod);
 800fe58:	4922      	ldr	r1, [pc, #136]	@ (800fee4 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1d0>)
 800fe5a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 800fe5e:	f7f0 fa3f 	bl	80002e0 <strcmp>
 800fe62:	4603      	mov	r3, r0
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d101      	bne.n	800fe6c <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x158>
 800fe68:	2301      	movs	r3, #1
 800fe6a:	e000      	b.n	800fe6e <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x15a>
 800fe6c:	2300      	movs	r3, #0
 800fe6e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800fe72:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 800fe76:	f107 011c 	add.w	r1, r7, #28
 800fe7a:	f107 029c 	add.w	r2, r7, #156	@ 0x9c
 800fe7e:	f107 0314 	add.w	r3, r7, #20
 800fe82:	9302      	str	r3, [sp, #8]
 800fe84:	f107 0313 	add.w	r3, r7, #19
 800fe88:	9301      	str	r3, [sp, #4]
 800fe8a:	f107 0318 	add.w	r3, r7, #24
 800fe8e:	9300      	str	r3, [sp, #0]
 800fe90:	460b      	mov	r3, r1
 800fe92:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 800fe96:	f000 f927 	bl	80100e8 <_ZSt11make_uniqueI10DigitalPinJRVtiRPKcRiRbS6_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 800fe9a:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800fe9e:	4619      	mov	r1, r3
 800fea0:	68f8      	ldr	r0, [r7, #12]
 800fea2:	f000 f999 	bl	80101d8 <_ZNSt10shared_ptrI6ModuleEC1I10DigitalPinSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>
 800fea6:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800feaa:	4618      	mov	r0, r3
 800feac:	f000 f972 	bl	8010194 <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EED1Ev>
 800feb0:	bf00      	nop
}
 800feb2:	68f8      	ldr	r0, [r7, #12]
 800feb4:	37b0      	adds	r7, #176	@ 0xb0
 800feb6:	46bd      	mov	sp, r7
 800feb8:	bd80      	pop	{r7, pc}
 800feba:	bf00      	nop
 800febc:	0802809c 	.word	0x0802809c
 800fec0:	080280a0 	.word	0x080280a0
 800fec4:	080280a8 	.word	0x080280a8
 800fec8:	080280b0 	.word	0x080280b0
 800fecc:	080280bc 	.word	0x080280bc
 800fed0:	080280c8 	.word	0x080280c8
 800fed4:	080280d4 	.word	0x080280d4
 800fed8:	080280dc 	.word	0x080280dc
 800fedc:	080280e8 	.word	0x080280e8
 800fee0:	080280f4 	.word	0x080280f4
 800fee4:	080280fc 	.word	0x080280fc
 800fee8:	08028104 	.word	0x08028104

0800feec <_ZN10DigitalPinC1ERVtiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEibi>:

DigitalPin::DigitalPin(volatile uint16_t& _ptrData, int _mode, std::string _portAndPin, 
 800feec:	b590      	push	{r4, r7, lr}
 800feee:	b085      	sub	sp, #20
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	60f8      	str	r0, [r7, #12]
 800fef4:	60b9      	str	r1, [r7, #8]
 800fef6:	607a      	str	r2, [r7, #4]
 800fef8:	603b      	str	r3, [r7, #0]
    portAndPin(std::move(_portAndPin)),
    bitNumber(_bitNumber),
    invert(_invert),
    modifier(_modifier),
    pin(std::make_unique<Pin>(portAndPin, mode, modifier)),
    mask(1 << bitNumber)
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	4618      	mov	r0, r3
 800fefe:	f000 fe41 	bl	8010b84 <_ZN6ModuleC1Ev>
 800ff02:	4a1c      	ldr	r2, [pc, #112]	@ (800ff74 <_ZN10DigitalPinC1ERVtiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEibi+0x88>)
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	601a      	str	r2, [r3, #0]
    ptrData(&_ptrData),
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	68ba      	ldr	r2, [r7, #8]
 800ff0c:	619a      	str	r2, [r3, #24]
    mode(_mode),
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	687a      	ldr	r2, [r7, #4]
 800ff12:	61da      	str	r2, [r3, #28]
    portAndPin(std::move(_portAndPin)),
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	f103 0420 	add.w	r4, r3, #32
 800ff1a:	6838      	ldr	r0, [r7, #0]
 800ff1c:	f000 f96f 	bl	80101fe <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 800ff20:	4603      	mov	r3, r0
 800ff22:	4619      	mov	r1, r3
 800ff24:	4620      	mov	r0, r4
 800ff26:	f016 f8b5 	bl	8026094 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
    bitNumber(_bitNumber),
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	6a3a      	ldr	r2, [r7, #32]
 800ff2e:	639a      	str	r2, [r3, #56]	@ 0x38
    invert(_invert),
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800ff36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    modifier(_modifier),
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ff3e:	641a      	str	r2, [r3, #64]	@ 0x40
    pin(std::make_unique<Pin>(portAndPin, mode, modifier)),
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	f103 0120 	add.w	r1, r3, #32
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	f103 021c 	add.w	r2, r3, #28
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	f103 0044 	add.w	r0, r3, #68	@ 0x44
 800ff58:	4623      	mov	r3, r4
 800ff5a:	f000 f95b 	bl	8010214 <_ZSt11make_uniqueI3PinJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERiS8_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
    mask(1 << bitNumber)
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff62:	2201      	movs	r2, #1
 800ff64:	409a      	lsls	r2, r3
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	649a      	str	r2, [r3, #72]	@ 0x48
{
}
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	3714      	adds	r7, #20
 800ff70:	46bd      	mov	sp, r7
 800ff72:	bd90      	pop	{r4, r7, pc}
 800ff74:	08028a68 	.word	0x08028a68

0800ff78 <_ZN10DigitalPin6updateEv>:

void DigitalPin::update()
{
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	b084      	sub	sp, #16
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	6078      	str	r0, [r7, #4]
    bool pinState;
    if (mode == 0) {  // Input mode
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	69db      	ldr	r3, [r3, #28]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d136      	bne.n	800fff6 <_ZN10DigitalPin6updateEv+0x7e>
        pinState = pin->get();
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	3344      	adds	r3, #68	@ 0x44
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	f7fe f974 	bl	800e27a <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EEptEv>
 800ff92:	4603      	mov	r3, r0
 800ff94:	4618      	mov	r0, r3
 800ff96:	f7f3 fdc3 	bl	8003b20 <_ZNK3Pin3getEv>
 800ff9a:	4603      	mov	r3, r0
 800ff9c:	73fb      	strb	r3, [r7, #15]
        if (invert) {
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d003      	beq.n	800ffb0 <_ZN10DigitalPin6updateEv+0x38>
            pinState = !pinState;
 800ffa8:	7bfb      	ldrb	r3, [r7, #15]
 800ffaa:	f083 0301 	eor.w	r3, r3, #1
 800ffae:	73fb      	strb	r3, [r7, #15]
        }
        if (pinState) {
 800ffb0:	7bfb      	ldrb	r3, [r7, #15]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d00e      	beq.n	800ffd4 <_ZN10DigitalPin6updateEv+0x5c>
            *ptrData |= mask;
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	699b      	ldr	r3, [r3, #24]
 800ffba:	881b      	ldrh	r3, [r3, #0]
 800ffbc:	b29b      	uxth	r3, r3
 800ffbe:	b21a      	sxth	r2, r3
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ffc4:	b21b      	sxth	r3, r3
 800ffc6:	4313      	orrs	r3, r2
 800ffc8:	b21a      	sxth	r2, r3
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	699b      	ldr	r3, [r3, #24]
 800ffce:	b292      	uxth	r2, r2
 800ffd0:	801a      	strh	r2, [r3, #0]
        if (invert) {
            pinState = !pinState;
        }
        pin->set(pinState);
    }
}
 800ffd2:	e031      	b.n	8010038 <_ZN10DigitalPin6updateEv+0xc0>
            *ptrData &= ~mask;
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	699b      	ldr	r3, [r3, #24]
 800ffd8:	881b      	ldrh	r3, [r3, #0]
 800ffda:	b29b      	uxth	r3, r3
 800ffdc:	b21a      	sxth	r2, r3
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ffe2:	b21b      	sxth	r3, r3
 800ffe4:	43db      	mvns	r3, r3
 800ffe6:	b21b      	sxth	r3, r3
 800ffe8:	4013      	ands	r3, r2
 800ffea:	b21a      	sxth	r2, r3
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	699b      	ldr	r3, [r3, #24]
 800fff0:	b292      	uxth	r2, r2
 800fff2:	801a      	strh	r2, [r3, #0]
}
 800fff4:	e020      	b.n	8010038 <_ZN10DigitalPin6updateEv+0xc0>
        pinState = (*ptrData & mask) ? true : false;
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	699b      	ldr	r3, [r3, #24]
 800fffa:	881b      	ldrh	r3, [r3, #0]
 800fffc:	b29b      	uxth	r3, r3
 800fffe:	461a      	mov	r2, r3
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010004:	4013      	ands	r3, r2
 8010006:	2b00      	cmp	r3, #0
 8010008:	bf14      	ite	ne
 801000a:	2301      	movne	r3, #1
 801000c:	2300      	moveq	r3, #0
 801000e:	73fb      	strb	r3, [r7, #15]
        if (invert) {
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010016:	2b00      	cmp	r3, #0
 8010018:	d003      	beq.n	8010022 <_ZN10DigitalPin6updateEv+0xaa>
            pinState = !pinState;
 801001a:	7bfb      	ldrb	r3, [r7, #15]
 801001c:	f083 0301 	eor.w	r3, r3, #1
 8010020:	73fb      	strb	r3, [r7, #15]
        pin->set(pinState);
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	3344      	adds	r3, #68	@ 0x44
 8010026:	4618      	mov	r0, r3
 8010028:	f7fe f927 	bl	800e27a <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EEptEv>
 801002c:	4602      	mov	r2, r0
 801002e:	7bfb      	ldrb	r3, [r7, #15]
 8010030:	4619      	mov	r1, r3
 8010032:	4610      	mov	r0, r2
 8010034:	f7f3 fd8a 	bl	8003b4c <_ZN3Pin3setEb>
}
 8010038:	bf00      	nop
 801003a:	3710      	adds	r7, #16
 801003c:	46bd      	mov	sp, r7
 801003e:	bd80      	pop	{r7, pc}

08010040 <_ZN10DigitalPin10slowUpdateEv>:

void DigitalPin::slowUpdate()
{
 8010040:	b480      	push	{r7}
 8010042:	b083      	sub	sp, #12
 8010044:	af00      	add	r7, sp, #0
 8010046:	6078      	str	r0, [r7, #4]
    return;
 8010048:	bf00      	nop
}
 801004a:	370c      	adds	r7, #12
 801004c:	46bd      	mov	sp, r7
 801004e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010052:	4770      	bx	lr

08010054 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA5_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:

  // Gets or sets the member with specified key.
  // https://arduinojson.org/v7/api/jsonobject/subscript/
  template <typename TString,
            detail::enable_if_t<detail::IsString<TString>::value, int> = 0>
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 8010054:	b580      	push	{r7, lr}
 8010056:	b08c      	sub	sp, #48	@ 0x30
 8010058:	af02      	add	r7, sp, #8
 801005a:	60f8      	str	r0, [r7, #12]
 801005c:	60b9      	str	r1, [r7, #8]
 801005e:	607a      	str	r2, [r7, #4]
      const TString& key) const {
    return {*this, detail::adaptString(key)};
 8010060:	68ba      	ldr	r2, [r7, #8]
 8010062:	f107 0314 	add.w	r3, r7, #20
 8010066:	e892 0003 	ldmia.w	r2, {r0, r1}
 801006a:	e883 0003 	stmia.w	r3, {r0, r1}
 801006e:	f107 031c 	add.w	r3, r7, #28
 8010072:	6879      	ldr	r1, [r7, #4]
 8010074:	4618      	mov	r0, r3
 8010076:	f7fb fe58 	bl	800bd2a <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA5_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 801007a:	466a      	mov	r2, sp
 801007c:	f107 0320 	add.w	r3, r7, #32
 8010080:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010084:	e882 0003 	stmia.w	r2, {r0, r1}
 8010088:	69fb      	ldr	r3, [r7, #28]
 801008a:	f107 0214 	add.w	r2, r7, #20
 801008e:	ca06      	ldmia	r2, {r1, r2}
 8010090:	68f8      	ldr	r0, [r7, #12]
 8010092:	f7f6 fce8 	bl	8006a66 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 8010096:	68f8      	ldr	r0, [r7, #12]
 8010098:	3728      	adds	r7, #40	@ 0x28
 801009a:	46bd      	mov	sp, r7
 801009c:	bd80      	pop	{r7, pc}

0801009e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA9_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 801009e:	b580      	push	{r7, lr}
 80100a0:	b08c      	sub	sp, #48	@ 0x30
 80100a2:	af02      	add	r7, sp, #8
 80100a4:	60f8      	str	r0, [r7, #12]
 80100a6:	60b9      	str	r1, [r7, #8]
 80100a8:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 80100aa:	68ba      	ldr	r2, [r7, #8]
 80100ac:	f107 0314 	add.w	r3, r7, #20
 80100b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80100b4:	e883 0003 	stmia.w	r3, {r0, r1}
 80100b8:	f107 031c 	add.w	r3, r7, #28
 80100bc:	6879      	ldr	r1, [r7, #4]
 80100be:	4618      	mov	r0, r3
 80100c0:	f000 f8cf 	bl	8010262 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA9_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 80100c4:	466a      	mov	r2, sp
 80100c6:	f107 0320 	add.w	r3, r7, #32
 80100ca:	e893 0003 	ldmia.w	r3, {r0, r1}
 80100ce:	e882 0003 	stmia.w	r2, {r0, r1}
 80100d2:	69fb      	ldr	r3, [r7, #28]
 80100d4:	f107 0214 	add.w	r2, r7, #20
 80100d8:	ca06      	ldmia	r2, {r1, r2}
 80100da:	68f8      	ldr	r0, [r7, #12]
 80100dc:	f7f6 fcc3 	bl	8006a66 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 80100e0:	68f8      	ldr	r0, [r7, #12]
 80100e2:	3728      	adds	r7, #40	@ 0x28
 80100e4:	46bd      	mov	sp, r7
 80100e6:	bd80      	pop	{r7, pc}

080100e8 <_ZSt11make_uniqueI10DigitalPinJRVtiRPKcRiRbS6_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 80100e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80100ec:	b091      	sub	sp, #68	@ 0x44
 80100ee:	af04      	add	r7, sp, #16
 80100f0:	60f8      	str	r0, [r7, #12]
 80100f2:	60b9      	str	r1, [r7, #8]
 80100f4:	607a      	str	r2, [r7, #4]
 80100f6:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 80100f8:	204c      	movs	r0, #76	@ 0x4c
 80100fa:	f015 feef 	bl	8025edc <_Znwj>
 80100fe:	4603      	mov	r3, r0
 8010100:	4698      	mov	r8, r3
 8010102:	68b8      	ldr	r0, [r7, #8]
 8010104:	f000 f8c0 	bl	8010288 <_ZSt7forwardIRVtEOT_RNSt16remove_referenceIS2_E4typeE>
 8010108:	4681      	mov	r9, r0
 801010a:	6878      	ldr	r0, [r7, #4]
 801010c:	f7fe f8c1 	bl	800e292 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8010110:	4603      	mov	r3, r0
 8010112:	681e      	ldr	r6, [r3, #0]
 8010114:	6838      	ldr	r0, [r7, #0]
 8010116:	f7fe f8fc 	bl	800e312 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 801011a:	4603      	mov	r3, r0
 801011c:	681c      	ldr	r4, [r3, #0]
 801011e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8010122:	4618      	mov	r0, r3
 8010124:	f015 feeb 	bl	8025efe <_ZNSaIcEC1Ev>
 8010128:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 801012c:	f107 0314 	add.w	r3, r7, #20
 8010130:	4621      	mov	r1, r4
 8010132:	4618      	mov	r0, r3
 8010134:	f7f6 faa2 	bl	800667c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8010138:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 801013a:	f7fe f8f5 	bl	800e328 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 801013e:	4603      	mov	r3, r0
 8010140:	681c      	ldr	r4, [r3, #0]
 8010142:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8010144:	f000 f8ab 	bl	801029e <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8010148:	4603      	mov	r3, r0
 801014a:	781d      	ldrb	r5, [r3, #0]
 801014c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801014e:	f7fe f8eb 	bl	800e328 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 8010152:	4603      	mov	r3, r0
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	f107 0214 	add.w	r2, r7, #20
 801015a:	9302      	str	r3, [sp, #8]
 801015c:	9501      	str	r5, [sp, #4]
 801015e:	9400      	str	r4, [sp, #0]
 8010160:	4613      	mov	r3, r2
 8010162:	4632      	mov	r2, r6
 8010164:	4649      	mov	r1, r9
 8010166:	4640      	mov	r0, r8
 8010168:	f7ff fec0 	bl	800feec <_ZN10DigitalPinC1ERVtiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEibi>
 801016c:	4641      	mov	r1, r8
 801016e:	68f8      	ldr	r0, [r7, #12]
 8010170:	f000 f8b0 	bl	80102d4 <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8010174:	f107 0314 	add.w	r3, r7, #20
 8010178:	4618      	mov	r0, r3
 801017a:	f015 ffaa 	bl	80260d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801017e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8010182:	4618      	mov	r0, r3
 8010184:	f015 febc 	bl	8025f00 <_ZNSaIcED1Ev>
 8010188:	bf00      	nop
 801018a:	68f8      	ldr	r0, [r7, #12]
 801018c:	3734      	adds	r7, #52	@ 0x34
 801018e:	46bd      	mov	sp, r7
 8010190:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08010194 <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8010194:	b590      	push	{r4, r7, lr}
 8010196:	b085      	sub	sp, #20
 8010198:	af00      	add	r7, sp, #0
 801019a:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	4618      	mov	r0, r3
 80101a0:	f000 f8a7 	bl	80102f2 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE6_M_ptrEv>
 80101a4:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d00c      	beq.n	80101c8 <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80101ae:	6878      	ldr	r0, [r7, #4]
 80101b0:	f000 f8ac 	bl	801030c <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE11get_deleterEv>
 80101b4:	4604      	mov	r4, r0
 80101b6:	68f8      	ldr	r0, [r7, #12]
 80101b8:	f000 f8b5 	bl	8010326 <_ZSt4moveIRP10DigitalPinEONSt16remove_referenceIT_E4typeEOS4_>
 80101bc:	4603      	mov	r3, r0
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	4619      	mov	r1, r3
 80101c2:	4620      	mov	r0, r4
 80101c4:	f000 f8e6 	bl	8010394 <_ZNKSt14default_deleteI10DigitalPinEclEPS0_>
	__ptr = pointer();
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	2200      	movs	r2, #0
 80101cc:	601a      	str	r2, [r3, #0]
      }
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	4618      	mov	r0, r3
 80101d2:	3714      	adds	r7, #20
 80101d4:	46bd      	mov	sp, r7
 80101d6:	bd90      	pop	{r4, r7, pc}

080101d8 <_ZNSt10shared_ptrI6ModuleEC1I10DigitalPinSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>:
	shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 80101d8:	b590      	push	{r4, r7, lr}
 80101da:	b083      	sub	sp, #12
 80101dc:	af00      	add	r7, sp, #0
 80101de:	6078      	str	r0, [r7, #4]
 80101e0:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 80101e2:	687c      	ldr	r4, [r7, #4]
 80101e4:	6838      	ldr	r0, [r7, #0]
 80101e6:	f000 f8e6 	bl	80103b6 <_ZSt4moveIRSt10unique_ptrI10DigitalPinSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 80101ea:	4603      	mov	r3, r0
 80101ec:	4619      	mov	r1, r3
 80101ee:	4620      	mov	r0, r4
 80101f0:	f000 f8ec 	bl	80103cc <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I10DigitalPinSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	4618      	mov	r0, r3
 80101f8:	370c      	adds	r7, #12
 80101fa:	46bd      	mov	sp, r7
 80101fc:	bd90      	pop	{r4, r7, pc}

080101fe <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 80101fe:	b480      	push	{r7}
 8010200:	b083      	sub	sp, #12
 8010202:	af00      	add	r7, sp, #0
 8010204:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	4618      	mov	r0, r3
 801020a:	370c      	adds	r7, #12
 801020c:	46bd      	mov	sp, r7
 801020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010212:	4770      	bx	lr

08010214 <_ZSt11make_uniqueI3PinJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERiS8_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8010214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010216:	b085      	sub	sp, #20
 8010218:	af00      	add	r7, sp, #0
 801021a:	60f8      	str	r0, [r7, #12]
 801021c:	60b9      	str	r1, [r7, #8]
 801021e:	607a      	str	r2, [r7, #4]
 8010220:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8010222:	2040      	movs	r0, #64	@ 0x40
 8010224:	f015 fe5a 	bl	8025edc <_Znwj>
 8010228:	4603      	mov	r3, r0
 801022a:	461d      	mov	r5, r3
 801022c:	68b8      	ldr	r0, [r7, #8]
 801022e:	f7fe f947 	bl	800e4c0 <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8010232:	4606      	mov	r6, r0
 8010234:	6878      	ldr	r0, [r7, #4]
 8010236:	f7fe f877 	bl	800e328 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 801023a:	4603      	mov	r3, r0
 801023c:	681c      	ldr	r4, [r3, #0]
 801023e:	6838      	ldr	r0, [r7, #0]
 8010240:	f7fe f872 	bl	800e328 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 8010244:	4603      	mov	r3, r0
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	4622      	mov	r2, r4
 801024a:	4631      	mov	r1, r6
 801024c:	4628      	mov	r0, r5
 801024e:	f7f3 fafb 	bl	8003848 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii>
 8010252:	4629      	mov	r1, r5
 8010254:	68f8      	ldr	r0, [r7, #12]
 8010256:	f7fe f94e 	bl	800e4f6 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 801025a:	68f8      	ldr	r0, [r7, #12]
 801025c:	3714      	adds	r7, #20
 801025e:	46bd      	mov	sp, r7
 8010260:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010262 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA9_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 8010262:	b580      	push	{r7, lr}
 8010264:	b082      	sub	sp, #8
 8010266:	af00      	add	r7, sp, #0
 8010268:	6078      	str	r0, [r7, #4]
 801026a:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 801026c:	6838      	ldr	r0, [r7, #0]
 801026e:	f000 f8e5 	bl	801043c <_ZN11ArduinoJson8V730HB226detail7forwardIRA9_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8010272:	4602      	mov	r2, r0
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	4611      	mov	r1, r2
 8010278:	4618      	mov	r0, r3
 801027a:	f000 f8ea 	bl	8010452 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA9_KcvE5adaptES5_>
 801027e:	bf00      	nop
}
 8010280:	6878      	ldr	r0, [r7, #4]
 8010282:	3708      	adds	r7, #8
 8010284:	46bd      	mov	sp, r7
 8010286:	bd80      	pop	{r7, pc}

08010288 <_ZSt7forwardIRVtEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010288:	b480      	push	{r7}
 801028a:	b083      	sub	sp, #12
 801028c:	af00      	add	r7, sp, #0
 801028e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	4618      	mov	r0, r3
 8010294:	370c      	adds	r7, #12
 8010296:	46bd      	mov	sp, r7
 8010298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801029c:	4770      	bx	lr

0801029e <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801029e:	b480      	push	{r7}
 80102a0:	b083      	sub	sp, #12
 80102a2:	af00      	add	r7, sp, #0
 80102a4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	4618      	mov	r0, r3
 80102aa:	370c      	adds	r7, #12
 80102ac:	46bd      	mov	sp, r7
 80102ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b2:	4770      	bx	lr

080102b4 <_ZNSt15__uniq_ptr_dataI10DigitalPinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80102b4:	b580      	push	{r7, lr}
 80102b6:	b082      	sub	sp, #8
 80102b8:	af00      	add	r7, sp, #0
 80102ba:	6078      	str	r0, [r7, #4]
 80102bc:	6039      	str	r1, [r7, #0]
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	683a      	ldr	r2, [r7, #0]
 80102c2:	4611      	mov	r1, r2
 80102c4:	4618      	mov	r0, r3
 80102c6:	f000 f8d3 	bl	8010470 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EEC1EPS0_>
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	4618      	mov	r0, r3
 80102ce:	3708      	adds	r7, #8
 80102d0:	46bd      	mov	sp, r7
 80102d2:	bd80      	pop	{r7, pc}

080102d4 <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 80102d4:	b580      	push	{r7, lr}
 80102d6:	b082      	sub	sp, #8
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
 80102dc:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	6839      	ldr	r1, [r7, #0]
 80102e2:	4618      	mov	r0, r3
 80102e4:	f7ff ffe6 	bl	80102b4 <_ZNSt15__uniq_ptr_dataI10DigitalPinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	4618      	mov	r0, r3
 80102ec:	3708      	adds	r7, #8
 80102ee:	46bd      	mov	sp, r7
 80102f0:	bd80      	pop	{r7, pc}

080102f2 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 80102f2:	b580      	push	{r7, lr}
 80102f4:	b082      	sub	sp, #8
 80102f6:	af00      	add	r7, sp, #0
 80102f8:	6078      	str	r0, [r7, #4]
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	4618      	mov	r0, r3
 80102fe:	f000 f8cb 	bl	8010498 <_ZSt3getILj0EJP10DigitalPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8010302:	4603      	mov	r3, r0
 8010304:	4618      	mov	r0, r3
 8010306:	3708      	adds	r7, #8
 8010308:	46bd      	mov	sp, r7
 801030a:	bd80      	pop	{r7, pc}

0801030c <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 801030c:	b580      	push	{r7, lr}
 801030e:	b082      	sub	sp, #8
 8010310:	af00      	add	r7, sp, #0
 8010312:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	4618      	mov	r0, r3
 8010318:	f000 f8cb 	bl	80104b2 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE10_M_deleterEv>
 801031c:	4603      	mov	r3, r0
 801031e:	4618      	mov	r0, r3
 8010320:	3708      	adds	r7, #8
 8010322:	46bd      	mov	sp, r7
 8010324:	bd80      	pop	{r7, pc}

08010326 <_ZSt4moveIRP10DigitalPinEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8010326:	b480      	push	{r7}
 8010328:	b083      	sub	sp, #12
 801032a:	af00      	add	r7, sp, #0
 801032c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	4618      	mov	r0, r3
 8010332:	370c      	adds	r7, #12
 8010334:	46bd      	mov	sp, r7
 8010336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801033a:	4770      	bx	lr

0801033c <_ZN10DigitalPinD1Ev>:
 * @brief Digital I/O pin control module.
 * 
 * The DigitalPin class manages digital input and output operations, allowing
 * interaction with external devices via GPIO.
 */
class DigitalPin : public Module
 801033c:	b580      	push	{r7, lr}
 801033e:	b082      	sub	sp, #8
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]
 8010344:	4a0a      	ldr	r2, [pc, #40]	@ (8010370 <_ZN10DigitalPinD1Ev+0x34>)
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	601a      	str	r2, [r3, #0]
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	3344      	adds	r3, #68	@ 0x44
 801034e:	4618      	mov	r0, r3
 8010350:	f7fd ff71 	bl	800e236 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EED1Ev>
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	3320      	adds	r3, #32
 8010358:	4618      	mov	r0, r3
 801035a:	f015 feba 	bl	80260d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	4618      	mov	r0, r3
 8010362:	f000 fc2b 	bl	8010bbc <_ZN6ModuleD1Ev>
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	4618      	mov	r0, r3
 801036a:	3708      	adds	r7, #8
 801036c:	46bd      	mov	sp, r7
 801036e:	bd80      	pop	{r7, pc}
 8010370:	08028a68 	.word	0x08028a68

08010374 <_ZN10DigitalPinD0Ev>:
 8010374:	b580      	push	{r7, lr}
 8010376:	b082      	sub	sp, #8
 8010378:	af00      	add	r7, sp, #0
 801037a:	6078      	str	r0, [r7, #4]
 801037c:	6878      	ldr	r0, [r7, #4]
 801037e:	f7ff ffdd 	bl	801033c <_ZN10DigitalPinD1Ev>
 8010382:	214c      	movs	r1, #76	@ 0x4c
 8010384:	6878      	ldr	r0, [r7, #4]
 8010386:	f015 fd98 	bl	8025eba <_ZdlPvj>
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	4618      	mov	r0, r3
 801038e:	3708      	adds	r7, #8
 8010390:	46bd      	mov	sp, r7
 8010392:	bd80      	pop	{r7, pc}

08010394 <_ZNKSt14default_deleteI10DigitalPinEclEPS0_>:
      operator()(_Tp* __ptr) const
 8010394:	b580      	push	{r7, lr}
 8010396:	b082      	sub	sp, #8
 8010398:	af00      	add	r7, sp, #0
 801039a:	6078      	str	r0, [r7, #4]
 801039c:	6039      	str	r1, [r7, #0]
	delete __ptr;
 801039e:	683b      	ldr	r3, [r7, #0]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d004      	beq.n	80103ae <_ZNKSt14default_deleteI10DigitalPinEclEPS0_+0x1a>
 80103a4:	681a      	ldr	r2, [r3, #0]
 80103a6:	3204      	adds	r2, #4
 80103a8:	6812      	ldr	r2, [r2, #0]
 80103aa:	4618      	mov	r0, r3
 80103ac:	4790      	blx	r2
      }
 80103ae:	bf00      	nop
 80103b0:	3708      	adds	r7, #8
 80103b2:	46bd      	mov	sp, r7
 80103b4:	bd80      	pop	{r7, pc}

080103b6 <_ZSt4moveIRSt10unique_ptrI10DigitalPinSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 80103b6:	b480      	push	{r7}
 80103b8:	b083      	sub	sp, #12
 80103ba:	af00      	add	r7, sp, #0
 80103bc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	4618      	mov	r0, r3
 80103c2:	370c      	adds	r7, #12
 80103c4:	46bd      	mov	sp, r7
 80103c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ca:	4770      	bx	lr

080103cc <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I10DigitalPinSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>:
	__shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 80103cc:	b580      	push	{r7, lr}
 80103ce:	b084      	sub	sp, #16
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
 80103d4:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r.get()), _M_refcount()
 80103d6:	6838      	ldr	r0, [r7, #0]
 80103d8:	f000 f878 	bl	80104cc <_ZNKSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE3getEv>
 80103dc:	4602      	mov	r2, r0
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	601a      	str	r2, [r3, #0]
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	3304      	adds	r3, #4
 80103e6:	4618      	mov	r0, r3
 80103e8:	f7fb fda8 	bl	800bf3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  auto __raw = __to_address(__r.get());
 80103ec:	6838      	ldr	r0, [r7, #0]
 80103ee:	f000 f86d 	bl	80104cc <_ZNKSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE3getEv>
 80103f2:	4603      	mov	r3, r0
 80103f4:	4618      	mov	r0, r3
 80103f6:	f000 f876 	bl	80104e6 <_ZSt12__to_addressI10DigitalPinEPT_S2_>
 80103fa:	60f8      	str	r0, [r7, #12]
	  _M_refcount = __shared_count<_Lp>(std::move(__r));
 80103fc:	6838      	ldr	r0, [r7, #0]
 80103fe:	f7ff ffda 	bl	80103b6 <_ZSt4moveIRSt10unique_ptrI10DigitalPinSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 8010402:	4602      	mov	r2, r0
 8010404:	f107 0308 	add.w	r3, r7, #8
 8010408:	4611      	mov	r1, r2
 801040a:	4618      	mov	r0, r3
 801040c:	f000 f876 	bl	80104fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I10DigitalPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	3304      	adds	r3, #4
 8010414:	f107 0208 	add.w	r2, r7, #8
 8010418:	4611      	mov	r1, r2
 801041a:	4618      	mov	r0, r3
 801041c:	f7fe f98c 	bl	800e738 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 8010420:	f107 0308 	add.w	r3, r7, #8
 8010424:	4618      	mov	r0, r3
 8010426:	f7fa fb8c 	bl	800ab42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  _M_enable_shared_from_this_with(__raw);
 801042a:	68f9      	ldr	r1, [r7, #12]
 801042c:	6878      	ldr	r0, [r7, #4]
 801042e:	f000 f8a7 	bl	8010580 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI10DigitalPinS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	4618      	mov	r0, r3
 8010436:	3710      	adds	r7, #16
 8010438:	46bd      	mov	sp, r7
 801043a:	bd80      	pop	{r7, pc}

0801043c <_ZN11ArduinoJson8V730HB226detail7forwardIRA9_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 801043c:	b480      	push	{r7}
 801043e:	b083      	sub	sp, #12
 8010440:	af00      	add	r7, sp, #0
 8010442:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8010444:	687b      	ldr	r3, [r7, #4]
}
 8010446:	4618      	mov	r0, r3
 8010448:	370c      	adds	r7, #12
 801044a:	46bd      	mov	sp, r7
 801044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010450:	4770      	bx	lr

08010452 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA9_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 8010452:	b580      	push	{r7, lr}
 8010454:	b082      	sub	sp, #8
 8010456:	af00      	add	r7, sp, #0
 8010458:	6078      	str	r0, [r7, #4]
 801045a:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 801045c:	2301      	movs	r3, #1
 801045e:	2208      	movs	r2, #8
 8010460:	6839      	ldr	r1, [r7, #0]
 8010462:	6878      	ldr	r0, [r7, #4]
 8010464:	f7f3 fd7a 	bl	8003f5c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 8010468:	6878      	ldr	r0, [r7, #4]
 801046a:	3708      	adds	r7, #8
 801046c:	46bd      	mov	sp, r7
 801046e:	bd80      	pop	{r7, pc}

08010470 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8010470:	b590      	push	{r4, r7, lr}
 8010472:	b083      	sub	sp, #12
 8010474:	af00      	add	r7, sp, #0
 8010476:	6078      	str	r0, [r7, #4]
 8010478:	6039      	str	r1, [r7, #0]
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	4618      	mov	r0, r3
 801047e:	f000 f88a 	bl	8010596 <_ZNSt5tupleIJP10DigitalPinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8010482:	683c      	ldr	r4, [r7, #0]
 8010484:	6878      	ldr	r0, [r7, #4]
 8010486:	f7ff ff34 	bl	80102f2 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE6_M_ptrEv>
 801048a:	4603      	mov	r3, r0
 801048c:	601c      	str	r4, [r3, #0]
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	4618      	mov	r0, r3
 8010492:	370c      	adds	r7, #12
 8010494:	46bd      	mov	sp, r7
 8010496:	bd90      	pop	{r4, r7, pc}

08010498 <_ZSt3getILj0EJP10DigitalPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8010498:	b580      	push	{r7, lr}
 801049a:	b082      	sub	sp, #8
 801049c:	af00      	add	r7, sp, #0
 801049e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	4618      	mov	r0, r3
 80104a4:	f000 f884 	bl	80105b0 <_ZSt12__get_helperILj0EP10DigitalPinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80104a8:	4603      	mov	r3, r0
 80104aa:	4618      	mov	r0, r3
 80104ac:	3708      	adds	r7, #8
 80104ae:	46bd      	mov	sp, r7
 80104b0:	bd80      	pop	{r7, pc}

080104b2 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 80104b2:	b580      	push	{r7, lr}
 80104b4:	b082      	sub	sp, #8
 80104b6:	af00      	add	r7, sp, #0
 80104b8:	6078      	str	r0, [r7, #4]
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	4618      	mov	r0, r3
 80104be:	f000 f883 	bl	80105c8 <_ZSt3getILj1EJP10DigitalPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80104c2:	4603      	mov	r3, r0
 80104c4:	4618      	mov	r0, r3
 80104c6:	3708      	adds	r7, #8
 80104c8:	46bd      	mov	sp, r7
 80104ca:	bd80      	pop	{r7, pc}

080104cc <_ZNKSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 80104cc:	b580      	push	{r7, lr}
 80104ce:	b082      	sub	sp, #8
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	4618      	mov	r0, r3
 80104d8:	f000 f882 	bl	80105e0 <_ZNKSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE6_M_ptrEv>
 80104dc:	4603      	mov	r3, r0
 80104de:	4618      	mov	r0, r3
 80104e0:	3708      	adds	r7, #8
 80104e2:	46bd      	mov	sp, r7
 80104e4:	bd80      	pop	{r7, pc}

080104e6 <_ZSt12__to_addressI10DigitalPinEPT_S2_>:
    __to_address(_Tp* __ptr) noexcept
 80104e6:	b480      	push	{r7}
 80104e8:	b083      	sub	sp, #12
 80104ea:	af00      	add	r7, sp, #0
 80104ec:	6078      	str	r0, [r7, #4]
      return __ptr;
 80104ee:	687b      	ldr	r3, [r7, #4]
    }
 80104f0:	4618      	mov	r0, r3
 80104f2:	370c      	adds	r7, #12
 80104f4:	46bd      	mov	sp, r7
 80104f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104fa:	4770      	bx	lr

080104fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I10DigitalPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>:
	__shared_count(std::unique_ptr<_Tp, _Del>&& __r) : _M_pi(0)
 80104fc:	b580      	push	{r7, lr}
 80104fe:	b086      	sub	sp, #24
 8010500:	af00      	add	r7, sp, #0
 8010502:	6078      	str	r0, [r7, #4]
 8010504:	6039      	str	r1, [r7, #0]
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	2200      	movs	r2, #0
 801050a:	601a      	str	r2, [r3, #0]
	  if (__r.get() == nullptr)
 801050c:	6838      	ldr	r0, [r7, #0]
 801050e:	f7ff ffdd 	bl	80104cc <_ZNKSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE3getEv>
 8010512:	4603      	mov	r3, r0
 8010514:	2b00      	cmp	r3, #0
 8010516:	bf0c      	ite	eq
 8010518:	2301      	moveq	r3, #1
 801051a:	2300      	movne	r3, #0
 801051c:	b2db      	uxtb	r3, r3
 801051e:	2b00      	cmp	r3, #0
 8010520:	d128      	bne.n	8010574 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I10DigitalPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x78>
	  _Alloc __a;
 8010522:	f107 030c 	add.w	r3, r7, #12
 8010526:	4618      	mov	r0, r3
 8010528:	f000 f868 	bl	80105fc <_ZNSaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
	  _Sp_cd_type* __mem = _Alloc_traits::allocate(__a, 1);
 801052c:	f107 030c 	add.w	r3, r7, #12
 8010530:	2101      	movs	r1, #1
 8010532:	4618      	mov	r0, r3
 8010534:	f000 f87a 	bl	801062c <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>
 8010538:	6178      	str	r0, [r7, #20]
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 801053a:	6838      	ldr	r0, [r7, #0]
 801053c:	f000 f885 	bl	801064a <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE7releaseEv>
 8010540:	4603      	mov	r3, r0
 8010542:	613b      	str	r3, [r7, #16]
				   std::forward<_Del>(__r.get_deleter()));
 8010544:	6838      	ldr	r0, [r7, #0]
 8010546:	f7ff fee1 	bl	801030c <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE11get_deleterEv>
 801054a:	4603      	mov	r3, r0
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 801054c:	4618      	mov	r0, r3
 801054e:	f000 f889 	bl	8010664 <_ZSt7forwardISt14default_deleteI10DigitalPinEEOT_RNSt16remove_referenceIS3_E4typeE>
 8010552:	4603      	mov	r3, r0
 8010554:	f107 0210 	add.w	r2, r7, #16
 8010558:	f107 000c 	add.w	r0, r7, #12
 801055c:	6979      	ldr	r1, [r7, #20]
 801055e:	f000 f88c 	bl	801067a <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>
	  _M_pi = __mem;
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	697a      	ldr	r2, [r7, #20]
 8010566:	601a      	str	r2, [r3, #0]
	}
 8010568:	f107 030c 	add.w	r3, r7, #12
 801056c:	4618      	mov	r0, r3
 801056e:	f000 f851 	bl	8010614 <_ZNSaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8010572:	e000      	b.n	8010576 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I10DigitalPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x7a>
	    return;
 8010574:	bf00      	nop
	}
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	4618      	mov	r0, r3
 801057a:	3718      	adds	r7, #24
 801057c:	46bd      	mov	sp, r7
 801057e:	bd80      	pop	{r7, pc}

08010580 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI10DigitalPinS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 8010580:	b480      	push	{r7}
 8010582:	b083      	sub	sp, #12
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]
 8010588:	6039      	str	r1, [r7, #0]
	{ }
 801058a:	bf00      	nop
 801058c:	370c      	adds	r7, #12
 801058e:	46bd      	mov	sp, r7
 8010590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010594:	4770      	bx	lr

08010596 <_ZNSt5tupleIJP10DigitalPinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 8010596:	b580      	push	{r7, lr}
 8010598:	b082      	sub	sp, #8
 801059a:	af00      	add	r7, sp, #0
 801059c:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	4618      	mov	r0, r3
 80105a2:	f000 f882 	bl	80106aa <_ZNSt11_Tuple_implILj0EJP10DigitalPinSt14default_deleteIS0_EEEC1Ev>
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	4618      	mov	r0, r3
 80105aa:	3708      	adds	r7, #8
 80105ac:	46bd      	mov	sp, r7
 80105ae:	bd80      	pop	{r7, pc}

080105b0 <_ZSt12__get_helperILj0EP10DigitalPinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80105b0:	b580      	push	{r7, lr}
 80105b2:	b082      	sub	sp, #8
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80105b8:	6878      	ldr	r0, [r7, #4]
 80105ba:	f000 f886 	bl	80106ca <_ZNSt11_Tuple_implILj0EJP10DigitalPinSt14default_deleteIS0_EEE7_M_headERS4_>
 80105be:	4603      	mov	r3, r0
 80105c0:	4618      	mov	r0, r3
 80105c2:	3708      	adds	r7, #8
 80105c4:	46bd      	mov	sp, r7
 80105c6:	bd80      	pop	{r7, pc}

080105c8 <_ZSt3getILj1EJP10DigitalPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80105c8:	b580      	push	{r7, lr}
 80105ca:	b082      	sub	sp, #8
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80105d0:	6878      	ldr	r0, [r7, #4]
 80105d2:	f000 f887 	bl	80106e4 <_ZSt12__get_helperILj1ESt14default_deleteI10DigitalPinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 80105d6:	4603      	mov	r3, r0
 80105d8:	4618      	mov	r0, r3
 80105da:	3708      	adds	r7, #8
 80105dc:	46bd      	mov	sp, r7
 80105de:	bd80      	pop	{r7, pc}

080105e0 <_ZNKSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 80105e0:	b580      	push	{r7, lr}
 80105e2:	b082      	sub	sp, #8
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	6078      	str	r0, [r7, #4]
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	4618      	mov	r0, r3
 80105ec:	f000 f886 	bl	80106fc <_ZSt3getILj0EJP10DigitalPinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 80105f0:	4603      	mov	r3, r0
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	4618      	mov	r0, r3
 80105f6:	3708      	adds	r7, #8
 80105f8:	46bd      	mov	sp, r7
 80105fa:	bd80      	pop	{r7, pc}

080105fc <_ZNSaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80105fc:	b580      	push	{r7, lr}
 80105fe:	b082      	sub	sp, #8
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]
 8010604:	6878      	ldr	r0, [r7, #4]
 8010606:	f000 f886 	bl	8010716 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	4618      	mov	r0, r3
 801060e:	3708      	adds	r7, #8
 8010610:	46bd      	mov	sp, r7
 8010612:	bd80      	pop	{r7, pc}

08010614 <_ZNSaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8010614:	b580      	push	{r7, lr}
 8010616:	b082      	sub	sp, #8
 8010618:	af00      	add	r7, sp, #0
 801061a:	6078      	str	r0, [r7, #4]
 801061c:	6878      	ldr	r0, [r7, #4]
 801061e:	f000 f885 	bl	801072c <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	4618      	mov	r0, r3
 8010626:	3708      	adds	r7, #8
 8010628:	46bd      	mov	sp, r7
 801062a:	bd80      	pop	{r7, pc}

0801062c <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 801062c:	b580      	push	{r7, lr}
 801062e:	b082      	sub	sp, #8
 8010630:	af00      	add	r7, sp, #0
 8010632:	6078      	str	r0, [r7, #4]
 8010634:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8010636:	2200      	movs	r2, #0
 8010638:	6839      	ldr	r1, [r7, #0]
 801063a:	6878      	ldr	r0, [r7, #4]
 801063c:	f000 f881 	bl	8010742 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 8010640:	4603      	mov	r3, r0
 8010642:	4618      	mov	r0, r3
 8010644:	3708      	adds	r7, #8
 8010646:	46bd      	mov	sp, r7
 8010648:	bd80      	pop	{r7, pc}

0801064a <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 801064a:	b580      	push	{r7, lr}
 801064c:	b082      	sub	sp, #8
 801064e:	af00      	add	r7, sp, #0
 8010650:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	4618      	mov	r0, r3
 8010656:	f000 f89e 	bl	8010796 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE7releaseEv>
 801065a:	4603      	mov	r3, r0
 801065c:	4618      	mov	r0, r3
 801065e:	3708      	adds	r7, #8
 8010660:	46bd      	mov	sp, r7
 8010662:	bd80      	pop	{r7, pc}

08010664 <_ZSt7forwardISt14default_deleteI10DigitalPinEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010664:	b480      	push	{r7}
 8010666:	b083      	sub	sp, #12
 8010668:	af00      	add	r7, sp, #0
 801066a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	4618      	mov	r0, r3
 8010670:	370c      	adds	r7, #12
 8010672:	46bd      	mov	sp, r7
 8010674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010678:	4770      	bx	lr

0801067a <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 801067a:	b590      	push	{r4, r7, lr}
 801067c:	b085      	sub	sp, #20
 801067e:	af00      	add	r7, sp, #0
 8010680:	60f8      	str	r0, [r7, #12]
 8010682:	60b9      	str	r1, [r7, #8]
 8010684:	607a      	str	r2, [r7, #4]
 8010686:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8010688:	6878      	ldr	r0, [r7, #4]
 801068a:	f000 f899 	bl	80107c0 <_ZSt7forwardIP10DigitalPinEOT_RNSt16remove_referenceIS2_E4typeE>
 801068e:	4604      	mov	r4, r0
 8010690:	6838      	ldr	r0, [r7, #0]
 8010692:	f7ff ffe7 	bl	8010664 <_ZSt7forwardISt14default_deleteI10DigitalPinEEOT_RNSt16remove_referenceIS3_E4typeE>
 8010696:	4603      	mov	r3, r0
 8010698:	4622      	mov	r2, r4
 801069a:	68b9      	ldr	r1, [r7, #8]
 801069c:	68f8      	ldr	r0, [r7, #12]
 801069e:	f000 f89a 	bl	80107d6 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>
	}
 80106a2:	bf00      	nop
 80106a4:	3714      	adds	r7, #20
 80106a6:	46bd      	mov	sp, r7
 80106a8:	bd90      	pop	{r4, r7, pc}

080106aa <_ZNSt11_Tuple_implILj0EJP10DigitalPinSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 80106aa:	b580      	push	{r7, lr}
 80106ac:	b082      	sub	sp, #8
 80106ae:	af00      	add	r7, sp, #0
 80106b0:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 80106b2:	6878      	ldr	r0, [r7, #4]
 80106b4:	f000 f8ad 	bl	8010812 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI10DigitalPinEEEC1Ev>
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	4618      	mov	r0, r3
 80106bc:	f000 f8b5 	bl	801082a <_ZNSt10_Head_baseILj0EP10DigitalPinLb0EEC1Ev>
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	4618      	mov	r0, r3
 80106c4:	3708      	adds	r7, #8
 80106c6:	46bd      	mov	sp, r7
 80106c8:	bd80      	pop	{r7, pc}

080106ca <_ZNSt11_Tuple_implILj0EJP10DigitalPinSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80106ca:	b580      	push	{r7, lr}
 80106cc:	b082      	sub	sp, #8
 80106ce:	af00      	add	r7, sp, #0
 80106d0:	6078      	str	r0, [r7, #4]
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	4618      	mov	r0, r3
 80106d6:	f000 f8b6 	bl	8010846 <_ZNSt10_Head_baseILj0EP10DigitalPinLb0EE7_M_headERS2_>
 80106da:	4603      	mov	r3, r0
 80106dc:	4618      	mov	r0, r3
 80106de:	3708      	adds	r7, #8
 80106e0:	46bd      	mov	sp, r7
 80106e2:	bd80      	pop	{r7, pc}

080106e4 <_ZSt12__get_helperILj1ESt14default_deleteI10DigitalPinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80106e4:	b580      	push	{r7, lr}
 80106e6:	b082      	sub	sp, #8
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80106ec:	6878      	ldr	r0, [r7, #4]
 80106ee:	f000 f8b5 	bl	801085c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI10DigitalPinEEE7_M_headERS3_>
 80106f2:	4603      	mov	r3, r0
 80106f4:	4618      	mov	r0, r3
 80106f6:	3708      	adds	r7, #8
 80106f8:	46bd      	mov	sp, r7
 80106fa:	bd80      	pop	{r7, pc}

080106fc <_ZSt3getILj0EJP10DigitalPinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b082      	sub	sp, #8
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	4618      	mov	r0, r3
 8010708:	f000 f8b4 	bl	8010874 <_ZSt12__get_helperILj0EP10DigitalPinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 801070c:	4603      	mov	r3, r0
 801070e:	4618      	mov	r0, r3
 8010710:	3708      	adds	r7, #8
 8010712:	46bd      	mov	sp, r7
 8010714:	bd80      	pop	{r7, pc}

08010716 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8010716:	b480      	push	{r7}
 8010718:	b083      	sub	sp, #12
 801071a:	af00      	add	r7, sp, #0
 801071c:	6078      	str	r0, [r7, #4]
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	4618      	mov	r0, r3
 8010722:	370c      	adds	r7, #12
 8010724:	46bd      	mov	sp, r7
 8010726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801072a:	4770      	bx	lr

0801072c <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801072c:	b480      	push	{r7}
 801072e:	b083      	sub	sp, #12
 8010730:	af00      	add	r7, sp, #0
 8010732:	6078      	str	r0, [r7, #4]
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	4618      	mov	r0, r3
 8010738:	370c      	adds	r7, #12
 801073a:	46bd      	mov	sp, r7
 801073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010740:	4770      	bx	lr

08010742 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8010742:	b580      	push	{r7, lr}
 8010744:	b084      	sub	sp, #16
 8010746:	af00      	add	r7, sp, #0
 8010748:	60f8      	str	r0, [r7, #12]
 801074a:	60b9      	str	r1, [r7, #8]
 801074c:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 801074e:	68f8      	ldr	r0, [r7, #12]
 8010750:	f000 f89c 	bl	801088c <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 8010754:	4602      	mov	r2, r0
 8010756:	68bb      	ldr	r3, [r7, #8]
 8010758:	4293      	cmp	r3, r2
 801075a:	bf8c      	ite	hi
 801075c:	2301      	movhi	r3, #1
 801075e:	2300      	movls	r3, #0
 8010760:	b2db      	uxtb	r3, r3
 8010762:	2b00      	cmp	r3, #0
 8010764:	bf14      	ite	ne
 8010766:	2301      	movne	r3, #1
 8010768:	2300      	moveq	r3, #0
 801076a:	b2db      	uxtb	r3, r3
 801076c:	2b00      	cmp	r3, #0
 801076e:	d007      	beq.n	8010780 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8010770:	68bb      	ldr	r3, [r7, #8]
 8010772:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010776:	d301      	bcc.n	801077c <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8010778:	f015 fbc6 	bl	8025f08 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 801077c:	f015 fbc1 	bl	8025f02 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8010780:	68bb      	ldr	r3, [r7, #8]
 8010782:	011b      	lsls	r3, r3, #4
 8010784:	4618      	mov	r0, r3
 8010786:	f015 fba9 	bl	8025edc <_Znwj>
 801078a:	4603      	mov	r3, r0
 801078c:	bf00      	nop
      }
 801078e:	4618      	mov	r0, r3
 8010790:	3710      	adds	r7, #16
 8010792:	46bd      	mov	sp, r7
 8010794:	bd80      	pop	{r7, pc}

08010796 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 8010796:	b580      	push	{r7, lr}
 8010798:	b084      	sub	sp, #16
 801079a:	af00      	add	r7, sp, #0
 801079c:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 801079e:	6878      	ldr	r0, [r7, #4]
 80107a0:	f7ff fda7 	bl	80102f2 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE6_M_ptrEv>
 80107a4:	4603      	mov	r3, r0
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 80107aa:	6878      	ldr	r0, [r7, #4]
 80107ac:	f7ff fda1 	bl	80102f2 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE6_M_ptrEv>
 80107b0:	4603      	mov	r3, r0
 80107b2:	2200      	movs	r2, #0
 80107b4:	601a      	str	r2, [r3, #0]
	return __p;
 80107b6:	68fb      	ldr	r3, [r7, #12]
      }
 80107b8:	4618      	mov	r0, r3
 80107ba:	3710      	adds	r7, #16
 80107bc:	46bd      	mov	sp, r7
 80107be:	bd80      	pop	{r7, pc}

080107c0 <_ZSt7forwardIP10DigitalPinEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80107c0:	b480      	push	{r7}
 80107c2:	b083      	sub	sp, #12
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	4618      	mov	r0, r3
 80107cc:	370c      	adds	r7, #12
 80107ce:	46bd      	mov	sp, r7
 80107d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d4:	4770      	bx	lr

080107d6 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80107d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80107d8:	b085      	sub	sp, #20
 80107da:	af00      	add	r7, sp, #0
 80107dc:	60f8      	str	r0, [r7, #12]
 80107de:	60b9      	str	r1, [r7, #8]
 80107e0:	607a      	str	r2, [r7, #4]
 80107e2:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80107e4:	68bb      	ldr	r3, [r7, #8]
 80107e6:	4619      	mov	r1, r3
 80107e8:	2010      	movs	r0, #16
 80107ea:	f7f8 ff89 	bl	8009700 <_ZnwjPv>
 80107ee:	4605      	mov	r5, r0
 80107f0:	6878      	ldr	r0, [r7, #4]
 80107f2:	f7ff ffe5 	bl	80107c0 <_ZSt7forwardIP10DigitalPinEOT_RNSt16remove_referenceIS2_E4typeE>
 80107f6:	4603      	mov	r3, r0
 80107f8:	681c      	ldr	r4, [r3, #0]
 80107fa:	6838      	ldr	r0, [r7, #0]
 80107fc:	f7ff ff32 	bl	8010664 <_ZSt7forwardISt14default_deleteI10DigitalPinEEOT_RNSt16remove_referenceIS3_E4typeE>
 8010800:	4632      	mov	r2, r6
 8010802:	4621      	mov	r1, r4
 8010804:	4628      	mov	r0, r5
 8010806:	f000 f84d 	bl	80108a4 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>
 801080a:	bf00      	nop
 801080c:	3714      	adds	r7, #20
 801080e:	46bd      	mov	sp, r7
 8010810:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010812 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI10DigitalPinEEEC1Ev>:
      _Tuple_impl()
 8010812:	b580      	push	{r7, lr}
 8010814:	b082      	sub	sp, #8
 8010816:	af00      	add	r7, sp, #0
 8010818:	6078      	str	r0, [r7, #4]
      : _Base() { }
 801081a:	6878      	ldr	r0, [r7, #4]
 801081c:	f000 f864 	bl	80108e8 <_ZNSt10_Head_baseILj1ESt14default_deleteI10DigitalPinELb1EEC1Ev>
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	4618      	mov	r0, r3
 8010824:	3708      	adds	r7, #8
 8010826:	46bd      	mov	sp, r7
 8010828:	bd80      	pop	{r7, pc}

0801082a <_ZNSt10_Head_baseILj0EP10DigitalPinLb0EEC1Ev>:
      constexpr _Head_base()
 801082a:	b480      	push	{r7}
 801082c:	b083      	sub	sp, #12
 801082e:	af00      	add	r7, sp, #0
 8010830:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	2200      	movs	r2, #0
 8010836:	601a      	str	r2, [r3, #0]
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	4618      	mov	r0, r3
 801083c:	370c      	adds	r7, #12
 801083e:	46bd      	mov	sp, r7
 8010840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010844:	4770      	bx	lr

08010846 <_ZNSt10_Head_baseILj0EP10DigitalPinLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8010846:	b480      	push	{r7}
 8010848:	b083      	sub	sp, #12
 801084a:	af00      	add	r7, sp, #0
 801084c:	6078      	str	r0, [r7, #4]
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	4618      	mov	r0, r3
 8010852:	370c      	adds	r7, #12
 8010854:	46bd      	mov	sp, r7
 8010856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801085a:	4770      	bx	lr

0801085c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI10DigitalPinEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801085c:	b580      	push	{r7, lr}
 801085e:	b082      	sub	sp, #8
 8010860:	af00      	add	r7, sp, #0
 8010862:	6078      	str	r0, [r7, #4]
 8010864:	6878      	ldr	r0, [r7, #4]
 8010866:	f000 f84a 	bl	80108fe <_ZNSt10_Head_baseILj1ESt14default_deleteI10DigitalPinELb1EE7_M_headERS3_>
 801086a:	4603      	mov	r3, r0
 801086c:	4618      	mov	r0, r3
 801086e:	3708      	adds	r7, #8
 8010870:	46bd      	mov	sp, r7
 8010872:	bd80      	pop	{r7, pc}

08010874 <_ZSt12__get_helperILj0EP10DigitalPinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8010874:	b580      	push	{r7, lr}
 8010876:	b082      	sub	sp, #8
 8010878:	af00      	add	r7, sp, #0
 801087a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801087c:	6878      	ldr	r0, [r7, #4]
 801087e:	f000 f849 	bl	8010914 <_ZNSt11_Tuple_implILj0EJP10DigitalPinSt14default_deleteIS0_EEE7_M_headERKS4_>
 8010882:	4603      	mov	r3, r0
 8010884:	4618      	mov	r0, r3
 8010886:	3708      	adds	r7, #8
 8010888:	46bd      	mov	sp, r7
 801088a:	bd80      	pop	{r7, pc}

0801088c <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 801088c:	b480      	push	{r7}
 801088e:	b083      	sub	sp, #12
 8010890:	af00      	add	r7, sp, #0
 8010892:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8010894:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      }
 8010898:	4618      	mov	r0, r3
 801089a:	370c      	adds	r7, #12
 801089c:	46bd      	mov	sp, r7
 801089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a2:	4770      	bx	lr

080108a4 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
 80108a4:	b5b0      	push	{r4, r5, r7, lr}
 80108a6:	b086      	sub	sp, #24
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	60f8      	str	r0, [r7, #12]
 80108ac:	60b9      	str	r1, [r7, #8]
 80108ae:	713a      	strb	r2, [r7, #4]
      : _M_impl(__p, std::move(__d), _Alloc()) { }
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	4618      	mov	r0, r3
 80108b4:	f7fc fbb6 	bl	800d024 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 80108b8:	4a0a      	ldr	r2, [pc, #40]	@ (80108e4 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_+0x40>)
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	601a      	str	r2, [r3, #0]
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	f103 040c 	add.w	r4, r3, #12
 80108c4:	1d3b      	adds	r3, r7, #4
 80108c6:	4618      	mov	r0, r3
 80108c8:	f000 f831 	bl	801092e <_ZSt4moveIRSt14default_deleteI10DigitalPinEEONSt16remove_referenceIT_E4typeEOS5_>
 80108cc:	f107 0314 	add.w	r3, r7, #20
 80108d0:	462a      	mov	r2, r5
 80108d2:	68b9      	ldr	r1, [r7, #8]
 80108d4:	4620      	mov	r0, r4
 80108d6:	f000 f835 	bl	8010944 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	4618      	mov	r0, r3
 80108de:	3718      	adds	r7, #24
 80108e0:	46bd      	mov	sp, r7
 80108e2:	bdb0      	pop	{r4, r5, r7, pc}
 80108e4:	08028a4c 	.word	0x08028a4c

080108e8 <_ZNSt10_Head_baseILj1ESt14default_deleteI10DigitalPinELb1EEC1Ev>:
      constexpr _Head_base()
 80108e8:	b480      	push	{r7}
 80108ea:	b083      	sub	sp, #12
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	4618      	mov	r0, r3
 80108f4:	370c      	adds	r7, #12
 80108f6:	46bd      	mov	sp, r7
 80108f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108fc:	4770      	bx	lr

080108fe <_ZNSt10_Head_baseILj1ESt14default_deleteI10DigitalPinELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80108fe:	b480      	push	{r7}
 8010900:	b083      	sub	sp, #12
 8010902:	af00      	add	r7, sp, #0
 8010904:	6078      	str	r0, [r7, #4]
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	4618      	mov	r0, r3
 801090a:	370c      	adds	r7, #12
 801090c:	46bd      	mov	sp, r7
 801090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010912:	4770      	bx	lr

08010914 <_ZNSt11_Tuple_implILj0EJP10DigitalPinSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8010914:	b580      	push	{r7, lr}
 8010916:	b082      	sub	sp, #8
 8010918:	af00      	add	r7, sp, #0
 801091a:	6078      	str	r0, [r7, #4]
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	4618      	mov	r0, r3
 8010920:	f000 f82c 	bl	801097c <_ZNSt10_Head_baseILj0EP10DigitalPinLb0EE7_M_headERKS2_>
 8010924:	4603      	mov	r3, r0
 8010926:	4618      	mov	r0, r3
 8010928:	3708      	adds	r7, #8
 801092a:	46bd      	mov	sp, r7
 801092c:	bd80      	pop	{r7, pc}

0801092e <_ZSt4moveIRSt14default_deleteI10DigitalPinEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 801092e:	b480      	push	{r7}
 8010930:	b083      	sub	sp, #12
 8010932:	af00      	add	r7, sp, #0
 8010934:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	4618      	mov	r0, r3
 801093a:	370c      	adds	r7, #12
 801093c:	46bd      	mov	sp, r7
 801093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010942:	4770      	bx	lr

08010944 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8010944:	b580      	push	{r7, lr}
 8010946:	b084      	sub	sp, #16
 8010948:	af00      	add	r7, sp, #0
 801094a:	60f8      	str	r0, [r7, #12]
 801094c:	60b9      	str	r1, [r7, #8]
 801094e:	713a      	strb	r2, [r7, #4]
 8010950:	603b      	str	r3, [r7, #0]
	: _Del_base(std::move(__d)), _Alloc_base(__a), _M_ptr(__p)
 8010952:	1d3b      	adds	r3, r7, #4
 8010954:	4618      	mov	r0, r3
 8010956:	f7ff ffea 	bl	801092e <_ZSt4moveIRSt14default_deleteI10DigitalPinEEONSt16remove_referenceIT_E4typeEOS5_>
 801095a:	4603      	mov	r3, r0
 801095c:	4619      	mov	r1, r3
 801095e:	68f8      	ldr	r0, [r7, #12]
 8010960:	f000 f817 	bl	8010992 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI10DigitalPinELb1EEC1EOS2_>
 8010964:	6839      	ldr	r1, [r7, #0]
 8010966:	68f8      	ldr	r0, [r7, #12]
 8010968:	f7fe fc46 	bl	800f1f8 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EEC1ERKS0_>
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	68ba      	ldr	r2, [r7, #8]
 8010970:	601a      	str	r2, [r3, #0]
	{ }
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	4618      	mov	r0, r3
 8010976:	3710      	adds	r7, #16
 8010978:	46bd      	mov	sp, r7
 801097a:	bd80      	pop	{r7, pc}

0801097c <_ZNSt10_Head_baseILj0EP10DigitalPinLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 801097c:	b480      	push	{r7}
 801097e:	b083      	sub	sp, #12
 8010980:	af00      	add	r7, sp, #0
 8010982:	6078      	str	r0, [r7, #4]
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	4618      	mov	r0, r3
 8010988:	370c      	adds	r7, #12
 801098a:	46bd      	mov	sp, r7
 801098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010990:	4770      	bx	lr

08010992 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI10DigitalPinELb1EEC1EOS2_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _Tp(std::move(__tp)) { }
 8010992:	b580      	push	{r7, lr}
 8010994:	b082      	sub	sp, #8
 8010996:	af00      	add	r7, sp, #0
 8010998:	6078      	str	r0, [r7, #4]
 801099a:	6039      	str	r1, [r7, #0]
 801099c:	6838      	ldr	r0, [r7, #0]
 801099e:	f7ff ffc6 	bl	801092e <_ZSt4moveIRSt14default_deleteI10DigitalPinEEONSt16remove_referenceIT_E4typeEOS5_>
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	4618      	mov	r0, r3
 80109a6:	3708      	adds	r7, #8
 80109a8:	46bd      	mov	sp, r7
 80109aa:	bd80      	pop	{r7, pc}

080109ac <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 80109ac:	b580      	push	{r7, lr}
 80109ae:	b082      	sub	sp, #8
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	6078      	str	r0, [r7, #4]
 80109b4:	4a05      	ldr	r2, [pc, #20]	@ (80109cc <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	601a      	str	r2, [r3, #0]
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	4618      	mov	r0, r3
 80109be:	f7fa fcf3 	bl	800b3a8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	4618      	mov	r0, r3
 80109c6:	3708      	adds	r7, #8
 80109c8:	46bd      	mov	sp, r7
 80109ca:	bd80      	pop	{r7, pc}
 80109cc:	08028a4c 	.word	0x08028a4c

080109d0 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b082      	sub	sp, #8
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	6078      	str	r0, [r7, #4]
 80109d8:	6878      	ldr	r0, [r7, #4]
 80109da:	f7ff ffe7 	bl	80109ac <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80109de:	2110      	movs	r1, #16
 80109e0:	6878      	ldr	r0, [r7, #4]
 80109e2:	f015 fa6a 	bl	8025eba <_ZdlPvj>
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	4618      	mov	r0, r3
 80109ea:	3708      	adds	r7, #8
 80109ec:	46bd      	mov	sp, r7
 80109ee:	bd80      	pop	{r7, pc}

080109f0 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80109f0:	b580      	push	{r7, lr}
 80109f2:	b082      	sub	sp, #8
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	330c      	adds	r3, #12
 80109fc:	4618      	mov	r0, r3
 80109fe:	f000 f83f 	bl	8010a80 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>
 8010a02:	4602      	mov	r2, r0
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	68db      	ldr	r3, [r3, #12]
 8010a08:	4619      	mov	r1, r3
 8010a0a:	4610      	mov	r0, r2
 8010a0c:	f7ff fcc2 	bl	8010394 <_ZNKSt14default_deleteI10DigitalPinEclEPS0_>
 8010a10:	bf00      	nop
 8010a12:	3708      	adds	r7, #8
 8010a14:	46bd      	mov	sp, r7
 8010a16:	bd80      	pop	{r7, pc}

08010a18 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8010a18:	b580      	push	{r7, lr}
 8010a1a:	b086      	sub	sp, #24
 8010a1c:	af00      	add	r7, sp, #0
 8010a1e:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	330c      	adds	r3, #12
 8010a24:	4618      	mov	r0, r3
 8010a26:	f000 f837 	bl	8010a98 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 8010a2a:	4602      	mov	r2, r0
 8010a2c:	f107 0314 	add.w	r3, r7, #20
 8010a30:	4611      	mov	r1, r2
 8010a32:	4618      	mov	r0, r3
 8010a34:	f000 f83c 	bl	8010ab0 <_ZNSaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8010a38:	f107 0114 	add.w	r1, r7, #20
 8010a3c:	f107 030c 	add.w	r3, r7, #12
 8010a40:	687a      	ldr	r2, [r7, #4]
 8010a42:	4618      	mov	r0, r3
 8010a44:	f000 f841 	bl	8010aca <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>
	this->~_Sp_counted_deleter();
 8010a48:	6878      	ldr	r0, [r7, #4]
 8010a4a:	f7ff ffaf 	bl	80109ac <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 8010a4e:	f107 030c 	add.w	r3, r7, #12
 8010a52:	4618      	mov	r0, r3
 8010a54:	f000 f84d 	bl	8010af2 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 8010a58:	f107 0314 	add.w	r3, r7, #20
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	f7ff fdd9 	bl	8010614 <_ZNSaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8010a62:	3718      	adds	r7, #24
 8010a64:	46bd      	mov	sp, r7
 8010a66:	bd80      	pop	{r7, pc}

08010a68 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const type_info& __ti [[__gnu__::__unused__]]) noexcept
 8010a68:	b480      	push	{r7}
 8010a6a:	b083      	sub	sp, #12
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	6078      	str	r0, [r7, #4]
 8010a70:	6039      	str	r1, [r7, #0]
        return nullptr;
 8010a72:	2300      	movs	r3, #0
      }
 8010a74:	4618      	mov	r0, r3
 8010a76:	370c      	adds	r7, #12
 8010a78:	46bd      	mov	sp, r7
 8010a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a7e:	4770      	bx	lr

08010a80 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 8010a80:	b580      	push	{r7, lr}
 8010a82:	b082      	sub	sp, #8
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	6078      	str	r0, [r7, #4]
 8010a88:	6878      	ldr	r0, [r7, #4]
 8010a8a:	f000 f847 	bl	8010b1c <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI10DigitalPinELb1EE6_S_getERS3_>
 8010a8e:	4603      	mov	r3, r0
 8010a90:	4618      	mov	r0, r3
 8010a92:	3708      	adds	r7, #8
 8010a94:	46bd      	mov	sp, r7
 8010a96:	bd80      	pop	{r7, pc}

08010a98 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 8010a98:	b580      	push	{r7, lr}
 8010a9a:	b082      	sub	sp, #8
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	6078      	str	r0, [r7, #4]
 8010aa0:	6878      	ldr	r0, [r7, #4]
 8010aa2:	f7fe fc78 	bl	800f396 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EE6_S_getERS1_>
 8010aa6:	4603      	mov	r3, r0
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	3708      	adds	r7, #8
 8010aac:	46bd      	mov	sp, r7
 8010aae:	bd80      	pop	{r7, pc}

08010ab0 <_ZNSaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8010ab0:	b580      	push	{r7, lr}
 8010ab2:	b082      	sub	sp, #8
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	6078      	str	r0, [r7, #4]
 8010ab8:	6039      	str	r1, [r7, #0]
 8010aba:	6878      	ldr	r0, [r7, #4]
 8010abc:	f7ff fe2b 	bl	8010716 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	4618      	mov	r0, r3
 8010ac4:	3708      	adds	r7, #8
 8010ac6:	46bd      	mov	sp, r7
 8010ac8:	bd80      	pop	{r7, pc}

08010aca <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8010aca:	b580      	push	{r7, lr}
 8010acc:	b084      	sub	sp, #16
 8010ace:	af00      	add	r7, sp, #0
 8010ad0:	60f8      	str	r0, [r7, #12]
 8010ad2:	60b9      	str	r1, [r7, #8]
 8010ad4:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8010ad6:	68b8      	ldr	r0, [r7, #8]
 8010ad8:	f000 f82b 	bl	8010b32 <_ZSt11__addressofISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>
 8010adc:	4602      	mov	r2, r0
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	601a      	str	r2, [r3, #0]
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	687a      	ldr	r2, [r7, #4]
 8010ae6:	605a      	str	r2, [r3, #4]
      { }
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	4618      	mov	r0, r3
 8010aec:	3710      	adds	r7, #16
 8010aee:	46bd      	mov	sp, r7
 8010af0:	bd80      	pop	{r7, pc}

08010af2 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 8010af2:	b580      	push	{r7, lr}
 8010af4:	b082      	sub	sp, #8
 8010af6:	af00      	add	r7, sp, #0
 8010af8:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	685b      	ldr	r3, [r3, #4]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d007      	beq.n	8010b12 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	6818      	ldr	r0, [r3, #0]
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	685b      	ldr	r3, [r3, #4]
 8010b0a:	2201      	movs	r2, #1
 8010b0c:	4619      	mov	r1, r3
 8010b0e:	f000 f81b 	bl	8010b48 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>
      }
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	4618      	mov	r0, r3
 8010b16:	3708      	adds	r7, #8
 8010b18:	46bd      	mov	sp, r7
 8010b1a:	bd80      	pop	{r7, pc}

08010b1c <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI10DigitalPinELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 8010b1c:	b480      	push	{r7}
 8010b1e:	b083      	sub	sp, #12
 8010b20:	af00      	add	r7, sp, #0
 8010b22:	6078      	str	r0, [r7, #4]
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	4618      	mov	r0, r3
 8010b28:	370c      	adds	r7, #12
 8010b2a:	46bd      	mov	sp, r7
 8010b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b30:	4770      	bx	lr

08010b32 <_ZSt11__addressofISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8010b32:	b480      	push	{r7}
 8010b34:	b083      	sub	sp, #12
 8010b36:	af00      	add	r7, sp, #0
 8010b38:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	370c      	adds	r7, #12
 8010b40:	46bd      	mov	sp, r7
 8010b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b46:	4770      	bx	lr

08010b48 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8010b48:	b580      	push	{r7, lr}
 8010b4a:	b084      	sub	sp, #16
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	60f8      	str	r0, [r7, #12]
 8010b50:	60b9      	str	r1, [r7, #8]
 8010b52:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8010b54:	687a      	ldr	r2, [r7, #4]
 8010b56:	68b9      	ldr	r1, [r7, #8]
 8010b58:	68f8      	ldr	r0, [r7, #12]
 8010b5a:	f000 f804 	bl	8010b66 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>
 8010b5e:	bf00      	nop
 8010b60:	3710      	adds	r7, #16
 8010b62:	46bd      	mov	sp, r7
 8010b64:	bd80      	pop	{r7, pc}

08010b66 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8010b66:	b580      	push	{r7, lr}
 8010b68:	b084      	sub	sp, #16
 8010b6a:	af00      	add	r7, sp, #0
 8010b6c:	60f8      	str	r0, [r7, #12]
 8010b6e:	60b9      	str	r1, [r7, #8]
 8010b70:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	011b      	lsls	r3, r3, #4
 8010b76:	4619      	mov	r1, r3
 8010b78:	68b8      	ldr	r0, [r7, #8]
 8010b7a:	f015 f99e 	bl	8025eba <_ZdlPvj>
      }
 8010b7e:	3710      	adds	r7, #16
 8010b80:	46bd      	mov	sp, r7
 8010b82:	bd80      	pop	{r7, pc}

08010b84 <_ZN6ModuleC1Ev>:
#include "module.h"

#include <cstdio>

Module::Module()
 8010b84:	b580      	push	{r7, lr}
 8010b86:	b082      	sub	sp, #8
 8010b88:	af00      	add	r7, sp, #0
 8010b8a:	6078      	str	r0, [r7, #4]
 8010b8c:	4a09      	ldr	r2, [pc, #36]	@ (8010bb4 <_ZN6ModuleC1Ev+0x30>)
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	601a      	str	r2, [r3, #0]
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	2200      	movs	r2, #0
 8010b96:	751a      	strb	r2, [r3, #20]
{
	this->counter = 0;
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	2200      	movs	r2, #0
 8010b9c:	611a      	str	r2, [r3, #16]
	this->updateCount = 1;
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	2201      	movs	r2, #1
 8010ba2:	60da      	str	r2, [r3, #12]
	printf("\nCreating a std module\n");
 8010ba4:	4804      	ldr	r0, [pc, #16]	@ (8010bb8 <_ZN6ModuleC1Ev+0x34>)
 8010ba6:	f016 f8b3 	bl	8026d10 <puts>
}
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	4618      	mov	r0, r3
 8010bae:	3708      	adds	r7, #8
 8010bb0:	46bd      	mov	sp, r7
 8010bb2:	bd80      	pop	{r7, pc}
 8010bb4:	08028a8c 	.word	0x08028a8c
 8010bb8:	08028168 	.word	0x08028168

08010bbc <_ZN6ModuleD1Ev>:
	this->counter = 0;
	this->updateCount = this->threadFreq / this->slowUpdateFreq;
	printf("\nCreating a slower module, updating every %ld thread cycles\n",this->updateCount);
}

Module::~Module(){}
 8010bbc:	b480      	push	{r7}
 8010bbe:	b083      	sub	sp, #12
 8010bc0:	af00      	add	r7, sp, #0
 8010bc2:	6078      	str	r0, [r7, #4]
 8010bc4:	4a04      	ldr	r2, [pc, #16]	@ (8010bd8 <_ZN6ModuleD1Ev+0x1c>)
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	601a      	str	r2, [r3, #0]
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	4618      	mov	r0, r3
 8010bce:	370c      	adds	r7, #12
 8010bd0:	46bd      	mov	sp, r7
 8010bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd6:	4770      	bx	lr
 8010bd8:	08028a8c 	.word	0x08028a8c

08010bdc <_ZN6ModuleD0Ev>:
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	b082      	sub	sp, #8
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	6078      	str	r0, [r7, #4]
 8010be4:	6878      	ldr	r0, [r7, #4]
 8010be6:	f7ff ffe9 	bl	8010bbc <_ZN6ModuleD1Ev>
 8010bea:	2118      	movs	r1, #24
 8010bec:	6878      	ldr	r0, [r7, #4]
 8010bee:	f015 f964 	bl	8025eba <_ZdlPvj>
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	3708      	adds	r7, #8
 8010bf8:	46bd      	mov	sp, r7
 8010bfa:	bd80      	pop	{r7, pc}

08010bfc <_ZN6Module9runModuleEv>:


void Module::runModule()
{
 8010bfc:	b580      	push	{r7, lr}
 8010bfe:	b082      	sub	sp, #8
 8010c00:	af00      	add	r7, sp, #0
 8010c02:	6078      	str	r0, [r7, #4]
	++this->counter;
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	691b      	ldr	r3, [r3, #16]
 8010c08:	1c5a      	adds	r2, r3, #1
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	611a      	str	r2, [r3, #16]

	if (this->counter >= this->updateCount)
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	691a      	ldr	r2, [r3, #16]
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	68db      	ldr	r3, [r3, #12]
 8010c16:	429a      	cmp	r2, r3
 8010c18:	db08      	blt.n	8010c2c <_ZN6Module9runModuleEv+0x30>
	{
		this->slowUpdate();
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	3310      	adds	r3, #16
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	6878      	ldr	r0, [r7, #4]
 8010c24:	4798      	blx	r3
		this->counter = 0;
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	2200      	movs	r2, #0
 8010c2a:	611a      	str	r2, [r3, #16]
	}

	this->update();
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	3308      	adds	r3, #8
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	6878      	ldr	r0, [r7, #4]
 8010c36:	4798      	blx	r3
}
 8010c38:	bf00      	nop
 8010c3a:	3708      	adds	r7, #8
 8010c3c:	46bd      	mov	sp, r7
 8010c3e:	bd80      	pop	{r7, pc}

08010c40 <_ZN6Module6updateEv>:
void Module::runModulePost()
{
	this->updatePost();
}

void Module::update(){}
 8010c40:	b480      	push	{r7}
 8010c42:	b083      	sub	sp, #12
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	6078      	str	r0, [r7, #4]
 8010c48:	bf00      	nop
 8010c4a:	370c      	adds	r7, #12
 8010c4c:	46bd      	mov	sp, r7
 8010c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c52:	4770      	bx	lr

08010c54 <_ZN6Module10updatePostEv>:
void Module::updatePost(){}
 8010c54:	b480      	push	{r7}
 8010c56:	b083      	sub	sp, #12
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	6078      	str	r0, [r7, #4]
 8010c5c:	bf00      	nop
 8010c5e:	370c      	adds	r7, #12
 8010c60:	46bd      	mov	sp, r7
 8010c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c66:	4770      	bx	lr

08010c68 <_ZN6Module10slowUpdateEv>:
void Module::slowUpdate(){}
 8010c68:	b480      	push	{r7}
 8010c6a:	b083      	sub	sp, #12
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	6078      	str	r0, [r7, #4]
 8010c70:	bf00      	nop
 8010c72:	370c      	adds	r7, #12
 8010c74:	46bd      	mov	sp, r7
 8010c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c7a:	4770      	bx	lr

08010c7c <_ZN6Module9configureEv>:
void Module::configure(){}
 8010c7c:	b480      	push	{r7}
 8010c7e:	b083      	sub	sp, #12
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	6078      	str	r0, [r7, #4]
 8010c84:	bf00      	nop
 8010c86:	370c      	adds	r7, #12
 8010c88:	46bd      	mov	sp, r7
 8010c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c8e:	4770      	bx	lr

08010c90 <_ZN13ModuleFactoryC1Ev>:

class ModuleFactory {
private:

    // Private constructor for singleton
    ModuleFactory() {};
 8010c90:	b480      	push	{r7}
 8010c92:	b083      	sub	sp, #12
 8010c94:	af00      	add	r7, sp, #0
 8010c96:	6078      	str	r0, [r7, #4]
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	370c      	adds	r7, #12
 8010c9e:	46bd      	mov	sp, r7
 8010ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca4:	4770      	bx	lr
	...

08010ca8 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora>:

// Create module based on thread and type
std::shared_ptr<Module> ModuleFactory::createModule(const char* _tname,
                                   const char* _mtype,
                                   const JsonVariant config,
                                   Remora* instance) {
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	b092      	sub	sp, #72	@ 0x48
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	60f8      	str	r0, [r7, #12]
 8010cb0:	60b9      	str	r1, [r7, #8]
 8010cb2:	607a      	str	r2, [r7, #4]
 8010cb4:	603b      	str	r3, [r7, #0]
    if (strcmp(_tname, "Base") == 0) {
 8010cb6:	495e      	ldr	r1, [pc, #376]	@ (8010e30 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x188>)
 8010cb8:	6878      	ldr	r0, [r7, #4]
 8010cba:	f7ef fb11 	bl	80002e0 <strcmp>
 8010cbe:	4603      	mov	r3, r0
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d116      	bne.n	8010cf2 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x4a>
        if (strcmp(_mtype, "Stepgen") == 0) {
 8010cc4:	495b      	ldr	r1, [pc, #364]	@ (8010e34 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x18c>)
 8010cc6:	6838      	ldr	r0, [r7, #0]
 8010cc8:	f7ef fb0a 	bl	80002e0 <strcmp>
 8010ccc:	4603      	mov	r3, r0
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	f040 80a6 	bne.w	8010e20 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x178>
            return Stepgen::create(config, instance);
 8010cd4:	f107 0310 	add.w	r3, r7, #16
 8010cd8:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8010cdc:	4618      	mov	r0, r3
 8010cde:	f7f5 fd1f 	bl	8006720 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	f107 0110 	add.w	r1, r7, #16
 8010ce8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010cea:	4618      	mov	r0, r3
 8010cec:	f001 fe3c 	bl	8012968 <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>
    } else {
        printf("Error: Unknown thread type '%s' or module type '%s'\n", _tname, _mtype);
    }

    return nullptr;
}
 8010cf0:	e09a      	b.n	8010e28 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x180>
    } else if (strcmp(_tname, "Servo") == 0) {
 8010cf2:	4951      	ldr	r1, [pc, #324]	@ (8010e38 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x190>)
 8010cf4:	6878      	ldr	r0, [r7, #4]
 8010cf6:	f7ef faf3 	bl	80002e0 <strcmp>
 8010cfa:	4603      	mov	r3, r0
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d157      	bne.n	8010db0 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x108>
        if (strcmp(_mtype, "Blink") == 0) {
 8010d00:	494e      	ldr	r1, [pc, #312]	@ (8010e3c <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x194>)
 8010d02:	6838      	ldr	r0, [r7, #0]
 8010d04:	f7ef faec 	bl	80002e0 <strcmp>
 8010d08:	4603      	mov	r3, r0
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d10e      	bne.n	8010d2c <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x84>
            return Blink::create(config, instance);
 8010d0e:	f107 0318 	add.w	r3, r7, #24
 8010d12:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8010d16:	4618      	mov	r0, r3
 8010d18:	f7f5 fd02 	bl	8006720 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	f107 0118 	add.w	r1, r7, #24
 8010d22:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010d24:	4618      	mov	r0, r3
 8010d26:	f7fd f8d5 	bl	800ded4 <_ZN5Blink6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>
}
 8010d2a:	e07d      	b.n	8010e28 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x180>
        } else if (strcmp(_mtype, "Reset Pin") == 0) {
 8010d2c:	4944      	ldr	r1, [pc, #272]	@ (8010e40 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x198>)
 8010d2e:	6838      	ldr	r0, [r7, #0]
 8010d30:	f7ef fad6 	bl	80002e0 <strcmp>
 8010d34:	4603      	mov	r3, r0
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d10e      	bne.n	8010d58 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0xb0>
            return ResetPin::create(config, instance);
 8010d3a:	f107 0320 	add.w	r3, r7, #32
 8010d3e:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8010d42:	4618      	mov	r0, r3
 8010d44:	f7f5 fcec 	bl	8006720 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	f107 0120 	add.w	r1, r7, #32
 8010d4e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010d50:	4618      	mov	r0, r3
 8010d52:	f000 f8eb 	bl	8010f2c <_ZN8ResetPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>
}
 8010d56:	e067      	b.n	8010e28 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x180>
        } else if (strcmp(_mtype, "Digital Pin") == 0) {
 8010d58:	493a      	ldr	r1, [pc, #232]	@ (8010e44 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x19c>)
 8010d5a:	6838      	ldr	r0, [r7, #0]
 8010d5c:	f7ef fac0 	bl	80002e0 <strcmp>
 8010d60:	4603      	mov	r3, r0
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d10e      	bne.n	8010d84 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0xdc>
            return DigitalPin::create(config, instance);
 8010d66:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8010d6a:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8010d6e:	4618      	mov	r0, r3
 8010d70:	f7f5 fcd6 	bl	8006720 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8010d7a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	f7fe ffc9 	bl	800fd14 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>
}
 8010d82:	e051      	b.n	8010e28 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x180>
        } else if (strcmp(_mtype, "Sigma Delta") == 0) {
 8010d84:	4930      	ldr	r1, [pc, #192]	@ (8010e48 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1a0>)
 8010d86:	6838      	ldr	r0, [r7, #0]
 8010d88:	f7ef faaa 	bl	80002e0 <strcmp>
 8010d8c:	4603      	mov	r3, r0
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d146      	bne.n	8010e20 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x178>
            return SigmaDelta::create(config, instance);
 8010d92:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8010d96:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8010d9a:	4618      	mov	r0, r3
 8010d9c:	f7f5 fcc0 	bl	8006720 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8010da6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010da8:	4618      	mov	r0, r3
 8010daa:	f000 fe59 	bl	8011a60 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>
}
 8010dae:	e03b      	b.n	8010e28 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x180>
    } else if (strcmp(_tname, "On load") == 0) {
 8010db0:	4926      	ldr	r1, [pc, #152]	@ (8010e4c <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1a4>)
 8010db2:	6878      	ldr	r0, [r7, #4]
 8010db4:	f7ef fa94 	bl	80002e0 <strcmp>
 8010db8:	4603      	mov	r3, r0
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d12b      	bne.n	8010e16 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x16e>
    	if (strcmp(_mtype, "TMC2208") == 0) {
 8010dbe:	4924      	ldr	r1, [pc, #144]	@ (8010e50 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1a8>)
 8010dc0:	6838      	ldr	r0, [r7, #0]
 8010dc2:	f7ef fa8d 	bl	80002e0 <strcmp>
 8010dc6:	4603      	mov	r3, r0
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d10e      	bne.n	8010dea <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x142>
   	        return TMC2208::create(config, instance);
 8010dcc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8010dd0:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	f7f5 fca3 	bl	8006720 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8010de0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010de2:	4618      	mov	r0, r3
 8010de4:	f003 f80a 	bl	8013dfc <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>
}
 8010de8:	e01e      	b.n	8010e28 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x180>
   	    } else if (strcmp(_mtype, "TMC2209") == 0) {
 8010dea:	491a      	ldr	r1, [pc, #104]	@ (8010e54 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1ac>)
 8010dec:	6838      	ldr	r0, [r7, #0]
 8010dee:	f7ef fa77 	bl	80002e0 <strcmp>
 8010df2:	4603      	mov	r3, r0
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d113      	bne.n	8010e20 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x178>
    		return TMC2209::create(config, instance);
 8010df8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8010dfc:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8010e00:	4618      	mov	r0, r3
 8010e02:	f7f5 fc8d 	bl	8006720 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8010e0c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010e0e:	4618      	mov	r0, r3
 8010e10:	f005 fdf4 	bl	80169fc <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>
}
 8010e14:	e008      	b.n	8010e28 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x180>
        printf("Error: Unknown thread type '%s' or module type '%s'\n", _tname, _mtype);
 8010e16:	683a      	ldr	r2, [r7, #0]
 8010e18:	6879      	ldr	r1, [r7, #4]
 8010e1a:	480f      	ldr	r0, [pc, #60]	@ (8010e58 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1b0>)
 8010e1c:	f015 ff08 	bl	8026c30 <iprintf>
    return nullptr;
 8010e20:	2100      	movs	r1, #0
 8010e22:	68f8      	ldr	r0, [r7, #12]
 8010e24:	f000 f84a 	bl	8010ebc <_ZNSt10shared_ptrI6ModuleEC1EDn>
}
 8010e28:	68f8      	ldr	r0, [r7, #12]
 8010e2a:	3748      	adds	r7, #72	@ 0x48
 8010e2c:	46bd      	mov	sp, r7
 8010e2e:	bd80      	pop	{r7, pc}
 8010e30:	080281c0 	.word	0x080281c0
 8010e34:	080281c8 	.word	0x080281c8
 8010e38:	080281d0 	.word	0x080281d0
 8010e3c:	080281d8 	.word	0x080281d8
 8010e40:	080281e0 	.word	0x080281e0
 8010e44:	080281ec 	.word	0x080281ec
 8010e48:	080281f8 	.word	0x080281f8
 8010e4c:	08028204 	.word	0x08028204
 8010e50:	0802820c 	.word	0x0802820c
 8010e54:	08028214 	.word	0x08028214
 8010e58:	0802821c 	.word	0x0802821c

08010e5c <_ZN13ModuleFactory11getInstanceEv>:


// Static instance accessor
ModuleFactory* ModuleFactory::getInstance() {
 8010e5c:	b598      	push	{r3, r4, r7, lr}
 8010e5e:	af00      	add	r7, sp, #0
    static ModuleFactory* instance = new ModuleFactory();
 8010e60:	4b14      	ldr	r3, [pc, #80]	@ (8010eb4 <_ZN13ModuleFactory11getInstanceEv+0x58>)
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	f3bf 8f5b 	dmb	ish
 8010e68:	f003 0301 	and.w	r3, r3, #1
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	bf0c      	ite	eq
 8010e70:	2301      	moveq	r3, #1
 8010e72:	2300      	movne	r3, #0
 8010e74:	b2db      	uxtb	r3, r3
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d017      	beq.n	8010eaa <_ZN13ModuleFactory11getInstanceEv+0x4e>
 8010e7a:	480e      	ldr	r0, [pc, #56]	@ (8010eb4 <_ZN13ModuleFactory11getInstanceEv+0x58>)
 8010e7c:	f015 f81f 	bl	8025ebe <__cxa_guard_acquire>
 8010e80:	4603      	mov	r3, r0
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	bf14      	ite	ne
 8010e86:	2301      	movne	r3, #1
 8010e88:	2300      	moveq	r3, #0
 8010e8a:	b2db      	uxtb	r3, r3
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d00c      	beq.n	8010eaa <_ZN13ModuleFactory11getInstanceEv+0x4e>
 8010e90:	2001      	movs	r0, #1
 8010e92:	f015 f823 	bl	8025edc <_Znwj>
 8010e96:	4603      	mov	r3, r0
 8010e98:	461c      	mov	r4, r3
 8010e9a:	4620      	mov	r0, r4
 8010e9c:	f7ff fef8 	bl	8010c90 <_ZN13ModuleFactoryC1Ev>
 8010ea0:	4b05      	ldr	r3, [pc, #20]	@ (8010eb8 <_ZN13ModuleFactory11getInstanceEv+0x5c>)
 8010ea2:	601c      	str	r4, [r3, #0]
 8010ea4:	4803      	ldr	r0, [pc, #12]	@ (8010eb4 <_ZN13ModuleFactory11getInstanceEv+0x58>)
 8010ea6:	f015 f816 	bl	8025ed6 <__cxa_guard_release>
    return instance;
 8010eaa:	4b03      	ldr	r3, [pc, #12]	@ (8010eb8 <_ZN13ModuleFactory11getInstanceEv+0x5c>)
 8010eac:	681b      	ldr	r3, [r3, #0]
}
 8010eae:	4618      	mov	r0, r3
 8010eb0:	bd98      	pop	{r3, r4, r7, pc}
 8010eb2:	bf00      	nop
 8010eb4:	24000410 	.word	0x24000410
 8010eb8:	2400040c 	.word	0x2400040c

08010ebc <_ZNSt10shared_ptrI6ModuleEC1EDn>:
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }
 8010ebc:	b580      	push	{r7, lr}
 8010ebe:	b082      	sub	sp, #8
 8010ec0:	af00      	add	r7, sp, #0
 8010ec2:	6078      	str	r0, [r7, #4]
 8010ec4:	6039      	str	r1, [r7, #0]
 8010ec6:	6878      	ldr	r0, [r7, #4]
 8010ec8:	f000 f805 	bl	8010ed6 <_ZNSt10shared_ptrI6ModuleEC1Ev>
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	4618      	mov	r0, r3
 8010ed0:	3708      	adds	r7, #8
 8010ed2:	46bd      	mov	sp, r7
 8010ed4:	bd80      	pop	{r7, pc}

08010ed6 <_ZNSt10shared_ptrI6ModuleEC1Ev>:
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }
 8010ed6:	b580      	push	{r7, lr}
 8010ed8:	b082      	sub	sp, #8
 8010eda:	af00      	add	r7, sp, #0
 8010edc:	6078      	str	r0, [r7, #4]
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	f000 f805 	bl	8010ef0 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	4618      	mov	r0, r3
 8010eea:	3708      	adds	r7, #8
 8010eec:	46bd      	mov	sp, r7
 8010eee:	bd80      	pop	{r7, pc}

08010ef0 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_ptr() noexcept
 8010ef0:	b580      	push	{r7, lr}
 8010ef2:	b082      	sub	sp, #8
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	6078      	str	r0, [r7, #4]
      : _M_ptr(0), _M_refcount()
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	2200      	movs	r2, #0
 8010efc:	601a      	str	r2, [r3, #0]
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	3304      	adds	r3, #4
 8010f02:	4618      	mov	r0, r3
 8010f04:	f7fb f81a 	bl	800bf3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
      { }
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	3708      	adds	r7, #8
 8010f0e:	46bd      	mov	sp, r7
 8010f10:	bd80      	pop	{r7, pc}

08010f12 <_ZN6Remora8getResetEv>:
    void setBaseFreq(uint32_t freq) { baseFreq = freq; }
    void setServoFreq(uint32_t freq) { servoFreq = freq; }

    volatile txData_t* getTxData() { return &txData; }
    volatile rxData_t* getRxData() { return &rxData; }
    volatile bool* getReset() { return &reset; };
 8010f12:	b480      	push	{r7}
 8010f14:	b083      	sub	sp, #12
 8010f16:	af00      	add	r7, sp, #0
 8010f18:	6078      	str	r0, [r7, #4]
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	330c      	adds	r3, #12
 8010f1e:	4618      	mov	r0, r3
 8010f20:	370c      	adds	r7, #12
 8010f22:	46bd      	mov	sp, r7
 8010f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f28:	4770      	bx	lr
	...

08010f2c <_ZN8ResetPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>:
#include "resetPin.h"
#include <cstdio>

std::shared_ptr<Module> ResetPin::create(const JsonObject& config, Remora* instance) {
 8010f2c:	b580      	push	{r7, lr}
 8010f2e:	b094      	sub	sp, #80	@ 0x50
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	60f8      	str	r0, [r7, #12]
 8010f34:	60b9      	str	r1, [r7, #8]
 8010f36:	607a      	str	r2, [r7, #4]
	const char* comment = config["Comment"];
 8010f38:	f107 0314 	add.w	r3, r7, #20
 8010f3c:	4a1f      	ldr	r2, [pc, #124]	@ (8010fbc <_ZN8ResetPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x90>)
 8010f3e:	68b9      	ldr	r1, [r7, #8]
 8010f40:	4618      	mov	r0, r3
 8010f42:	f000 f886 	bl	8011052 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8010f46:	f107 0314 	add.w	r3, r7, #20
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	f7f5 fc1c 	bl	8006788 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8010f50:	64f8      	str	r0, [r7, #76]	@ 0x4c
	printf("%s\n", comment);
 8010f52:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8010f54:	f015 fedc 	bl	8026d10 <puts>

	const char* pin = config["Pin"];
 8010f58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8010f5c:	4a18      	ldr	r2, [pc, #96]	@ (8010fc0 <_ZN8ResetPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x94>)
 8010f5e:	68b9      	ldr	r1, [r7, #8]
 8010f60:	4618      	mov	r0, r3
 8010f62:	f7fd f87b 	bl	800e05c <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA4_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8010f66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	f7f5 fc0c 	bl	8006788 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8010f70:	4603      	mov	r3, r0
 8010f72:	613b      	str	r3, [r7, #16]
	printf("Make Reset Pin at pin %s\n", pin);
 8010f74:	693b      	ldr	r3, [r7, #16]
 8010f76:	4619      	mov	r1, r3
 8010f78:	4812      	ldr	r0, [pc, #72]	@ (8010fc4 <_ZN8ResetPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x98>)
 8010f7a:	f015 fe59 	bl	8026c30 <iprintf>

	return std::make_unique<ResetPin>(instance->getReset(), pin);
 8010f7e:	6878      	ldr	r0, [r7, #4]
 8010f80:	f7ff ffc7 	bl	8010f12 <_ZN6Remora8getResetEv>
 8010f84:	4603      	mov	r3, r0
 8010f86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010f88:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8010f8c:	f107 0210 	add.w	r2, r7, #16
 8010f90:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8010f94:	4618      	mov	r0, r3
 8010f96:	f000 f881 	bl	801109c <_ZSt11make_uniqueI8ResetPinJPVbRPKcEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 8010f9a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8010f9e:	4619      	mov	r1, r3
 8010fa0:	68f8      	ldr	r0, [r7, #12]
 8010fa2:	f000 f8d9 	bl	8011158 <_ZNSt10shared_ptrI6ModuleEC1I8ResetPinSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>
 8010fa6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8010faa:	4618      	mov	r0, r3
 8010fac:	f000 f8b2 	bl	8011114 <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EED1Ev>
 8010fb0:	bf00      	nop
}
 8010fb2:	68f8      	ldr	r0, [r7, #12]
 8010fb4:	3750      	adds	r7, #80	@ 0x50
 8010fb6:	46bd      	mov	sp, r7
 8010fb8:	bd80      	pop	{r7, pc}
 8010fba:	bf00      	nop
 8010fbc:	08028254 	.word	0x08028254
 8010fc0:	0802825c 	.word	0x0802825c
 8010fc4:	08028260 	.word	0x08028260

08010fc8 <_ZN8ResetPinC1EPVbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

ResetPin::ResetPin(volatile bool* ptrReset, const std::string& portAndPin) :
 8010fc8:	b590      	push	{r4, r7, lr}
 8010fca:	b085      	sub	sp, #20
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	60f8      	str	r0, [r7, #12]
 8010fd0:	60b9      	str	r1, [r7, #8]
 8010fd2:	607a      	str	r2, [r7, #4]
    ptrReset(ptrReset),
    portAndPin(portAndPin),
    pin(new Pin(portAndPin, 0)) {}  // Input mode (0x0)
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	4618      	mov	r0, r3
 8010fd8:	f7ff fdd4 	bl	8010b84 <_ZN6ModuleC1Ev>
 8010fdc:	4a0e      	ldr	r2, [pc, #56]	@ (8011018 <_ZN8ResetPinC1EPVbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x50>)
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	601a      	str	r2, [r3, #0]
    ptrReset(ptrReset),
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	68ba      	ldr	r2, [r7, #8]
 8010fe6:	619a      	str	r2, [r3, #24]
    portAndPin(portAndPin),
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	331c      	adds	r3, #28
 8010fec:	6879      	ldr	r1, [r7, #4]
 8010fee:	4618      	mov	r0, r3
 8010ff0:	f015 fa7f 	bl	80264f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
    pin(new Pin(portAndPin, 0)) {}  // Input mode (0x0)
 8010ff4:	2040      	movs	r0, #64	@ 0x40
 8010ff6:	f014 ff71 	bl	8025edc <_Znwj>
 8010ffa:	4603      	mov	r3, r0
 8010ffc:	461c      	mov	r4, r3
 8010ffe:	2200      	movs	r2, #0
 8011000:	6879      	ldr	r1, [r7, #4]
 8011002:	4620      	mov	r0, r4
 8011004:	f7f2 fbf8 	bl	80037f8 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	635c      	str	r4, [r3, #52]	@ 0x34
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	4618      	mov	r0, r3
 8011010:	3714      	adds	r7, #20
 8011012:	46bd      	mov	sp, r7
 8011014:	bd90      	pop	{r4, r7, pc}
 8011016:	bf00      	nop
 8011018:	08028acc 	.word	0x08028acc

0801101c <_ZN8ResetPin6updateEv>:

void ResetPin::update() {
 801101c:	b590      	push	{r4, r7, lr}
 801101e:	b083      	sub	sp, #12
 8011020:	af00      	add	r7, sp, #0
 8011022:	6078      	str	r0, [r7, #4]
    *ptrReset = pin->get();
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	699c      	ldr	r4, [r3, #24]
 801102c:	4610      	mov	r0, r2
 801102e:	f7f2 fd77 	bl	8003b20 <_ZNK3Pin3getEv>
 8011032:	4603      	mov	r3, r0
 8011034:	7023      	strb	r3, [r4, #0]
}
 8011036:	bf00      	nop
 8011038:	370c      	adds	r7, #12
 801103a:	46bd      	mov	sp, r7
 801103c:	bd90      	pop	{r4, r7, pc}

0801103e <_ZN8ResetPin10slowUpdateEv>:

void ResetPin::slowUpdate() {
 801103e:	b480      	push	{r7}
 8011040:	b083      	sub	sp, #12
 8011042:	af00      	add	r7, sp, #0
 8011044:	6078      	str	r0, [r7, #4]
    return;
 8011046:	bf00      	nop
}
 8011048:	370c      	adds	r7, #12
 801104a:	46bd      	mov	sp, r7
 801104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011050:	4770      	bx	lr

08011052 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:

  // Gets or sets the member with specified key.
  // https://arduinojson.org/v7/api/jsonobject/subscript/
  template <typename TString,
            detail::enable_if_t<detail::IsString<TString>::value, int> = 0>
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 8011052:	b580      	push	{r7, lr}
 8011054:	b08c      	sub	sp, #48	@ 0x30
 8011056:	af02      	add	r7, sp, #8
 8011058:	60f8      	str	r0, [r7, #12]
 801105a:	60b9      	str	r1, [r7, #8]
 801105c:	607a      	str	r2, [r7, #4]
      const TString& key) const {
    return {*this, detail::adaptString(key)};
 801105e:	68ba      	ldr	r2, [r7, #8]
 8011060:	f107 0314 	add.w	r3, r7, #20
 8011064:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011068:	e883 0003 	stmia.w	r3, {r0, r1}
 801106c:	f107 031c 	add.w	r3, r7, #28
 8011070:	6879      	ldr	r1, [r7, #4]
 8011072:	4618      	mov	r0, r3
 8011074:	f7f5 feca 	bl	8006e0c <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA8_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8011078:	466a      	mov	r2, sp
 801107a:	f107 0320 	add.w	r3, r7, #32
 801107e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011082:	e882 0003 	stmia.w	r2, {r0, r1}
 8011086:	69fb      	ldr	r3, [r7, #28]
 8011088:	f107 0214 	add.w	r2, r7, #20
 801108c:	ca06      	ldmia	r2, {r1, r2}
 801108e:	68f8      	ldr	r0, [r7, #12]
 8011090:	f7f5 fce9 	bl	8006a66 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 8011094:	68f8      	ldr	r0, [r7, #12]
 8011096:	3728      	adds	r7, #40	@ 0x28
 8011098:	46bd      	mov	sp, r7
 801109a:	bd80      	pop	{r7, pc}

0801109c <_ZSt11make_uniqueI8ResetPinJPVbRPKcEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 801109c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801109e:	b08d      	sub	sp, #52	@ 0x34
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	60f8      	str	r0, [r7, #12]
 80110a4:	60b9      	str	r1, [r7, #8]
 80110a6:	607a      	str	r2, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 80110a8:	2038      	movs	r0, #56	@ 0x38
 80110aa:	f014 ff17 	bl	8025edc <_Znwj>
 80110ae:	4603      	mov	r3, r0
 80110b0:	461e      	mov	r6, r3
 80110b2:	68b8      	ldr	r0, [r7, #8]
 80110b4:	f000 f863 	bl	801117e <_ZSt7forwardIPVbEOT_RNSt16remove_referenceIS2_E4typeE>
 80110b8:	4603      	mov	r3, r0
 80110ba:	681c      	ldr	r4, [r3, #0]
 80110bc:	6878      	ldr	r0, [r7, #4]
 80110be:	f7fd f928 	bl	800e312 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 80110c2:	4603      	mov	r3, r0
 80110c4:	681d      	ldr	r5, [r3, #0]
 80110c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80110ca:	4618      	mov	r0, r3
 80110cc:	f014 ff17 	bl	8025efe <_ZNSaIcEC1Ev>
 80110d0:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80110d4:	f107 0314 	add.w	r3, r7, #20
 80110d8:	4629      	mov	r1, r5
 80110da:	4618      	mov	r0, r3
 80110dc:	f7f5 face 	bl	800667c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 80110e0:	f107 0314 	add.w	r3, r7, #20
 80110e4:	461a      	mov	r2, r3
 80110e6:	4621      	mov	r1, r4
 80110e8:	4630      	mov	r0, r6
 80110ea:	f7ff ff6d 	bl	8010fc8 <_ZN8ResetPinC1EPVbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80110ee:	4631      	mov	r1, r6
 80110f0:	68f8      	ldr	r0, [r7, #12]
 80110f2:	f000 f85f 	bl	80111b4 <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 80110f6:	f107 0314 	add.w	r3, r7, #20
 80110fa:	4618      	mov	r0, r3
 80110fc:	f014 ffe9 	bl	80260d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8011100:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011104:	4618      	mov	r0, r3
 8011106:	f014 fefb 	bl	8025f00 <_ZNSaIcED1Ev>
 801110a:	bf00      	nop
 801110c:	68f8      	ldr	r0, [r7, #12]
 801110e:	3734      	adds	r7, #52	@ 0x34
 8011110:	46bd      	mov	sp, r7
 8011112:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011114 <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8011114:	b590      	push	{r4, r7, lr}
 8011116:	b085      	sub	sp, #20
 8011118:	af00      	add	r7, sp, #0
 801111a:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	4618      	mov	r0, r3
 8011120:	f000 f857 	bl	80111d2 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE6_M_ptrEv>
 8011124:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	2b00      	cmp	r3, #0
 801112c:	d00c      	beq.n	8011148 <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 801112e:	6878      	ldr	r0, [r7, #4]
 8011130:	f000 f85c 	bl	80111ec <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE11get_deleterEv>
 8011134:	4604      	mov	r4, r0
 8011136:	68f8      	ldr	r0, [r7, #12]
 8011138:	f000 f865 	bl	8011206 <_ZSt4moveIRP8ResetPinEONSt16remove_referenceIT_E4typeEOS4_>
 801113c:	4603      	mov	r3, r0
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	4619      	mov	r1, r3
 8011142:	4620      	mov	r0, r4
 8011144:	f000 f892 	bl	801126c <_ZNKSt14default_deleteI8ResetPinEclEPS0_>
	__ptr = pointer();
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	2200      	movs	r2, #0
 801114c:	601a      	str	r2, [r3, #0]
      }
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	4618      	mov	r0, r3
 8011152:	3714      	adds	r7, #20
 8011154:	46bd      	mov	sp, r7
 8011156:	bd90      	pop	{r4, r7, pc}

08011158 <_ZNSt10shared_ptrI6ModuleEC1I8ResetPinSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>:
	shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 8011158:	b590      	push	{r4, r7, lr}
 801115a:	b083      	sub	sp, #12
 801115c:	af00      	add	r7, sp, #0
 801115e:	6078      	str	r0, [r7, #4]
 8011160:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 8011162:	687c      	ldr	r4, [r7, #4]
 8011164:	6838      	ldr	r0, [r7, #0]
 8011166:	f000 f892 	bl	801128e <_ZSt4moveIRSt10unique_ptrI8ResetPinSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 801116a:	4603      	mov	r3, r0
 801116c:	4619      	mov	r1, r3
 801116e:	4620      	mov	r0, r4
 8011170:	f000 f898 	bl	80112a4 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I8ResetPinSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	4618      	mov	r0, r3
 8011178:	370c      	adds	r7, #12
 801117a:	46bd      	mov	sp, r7
 801117c:	bd90      	pop	{r4, r7, pc}

0801117e <_ZSt7forwardIPVbEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801117e:	b480      	push	{r7}
 8011180:	b083      	sub	sp, #12
 8011182:	af00      	add	r7, sp, #0
 8011184:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	4618      	mov	r0, r3
 801118a:	370c      	adds	r7, #12
 801118c:	46bd      	mov	sp, r7
 801118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011192:	4770      	bx	lr

08011194 <_ZNSt15__uniq_ptr_dataI8ResetPinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8011194:	b580      	push	{r7, lr}
 8011196:	b082      	sub	sp, #8
 8011198:	af00      	add	r7, sp, #0
 801119a:	6078      	str	r0, [r7, #4]
 801119c:	6039      	str	r1, [r7, #0]
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	683a      	ldr	r2, [r7, #0]
 80111a2:	4611      	mov	r1, r2
 80111a4:	4618      	mov	r0, r3
 80111a6:	f000 f8b5 	bl	8011314 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EEC1EPS0_>
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	4618      	mov	r0, r3
 80111ae:	3708      	adds	r7, #8
 80111b0:	46bd      	mov	sp, r7
 80111b2:	bd80      	pop	{r7, pc}

080111b4 <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 80111b4:	b580      	push	{r7, lr}
 80111b6:	b082      	sub	sp, #8
 80111b8:	af00      	add	r7, sp, #0
 80111ba:	6078      	str	r0, [r7, #4]
 80111bc:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	6839      	ldr	r1, [r7, #0]
 80111c2:	4618      	mov	r0, r3
 80111c4:	f7ff ffe6 	bl	8011194 <_ZNSt15__uniq_ptr_dataI8ResetPinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	4618      	mov	r0, r3
 80111cc:	3708      	adds	r7, #8
 80111ce:	46bd      	mov	sp, r7
 80111d0:	bd80      	pop	{r7, pc}

080111d2 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 80111d2:	b580      	push	{r7, lr}
 80111d4:	b082      	sub	sp, #8
 80111d6:	af00      	add	r7, sp, #0
 80111d8:	6078      	str	r0, [r7, #4]
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	4618      	mov	r0, r3
 80111de:	f000 f8ad 	bl	801133c <_ZSt3getILj0EJP8ResetPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80111e2:	4603      	mov	r3, r0
 80111e4:	4618      	mov	r0, r3
 80111e6:	3708      	adds	r7, #8
 80111e8:	46bd      	mov	sp, r7
 80111ea:	bd80      	pop	{r7, pc}

080111ec <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 80111ec:	b580      	push	{r7, lr}
 80111ee:	b082      	sub	sp, #8
 80111f0:	af00      	add	r7, sp, #0
 80111f2:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	4618      	mov	r0, r3
 80111f8:	f000 f8ad 	bl	8011356 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE10_M_deleterEv>
 80111fc:	4603      	mov	r3, r0
 80111fe:	4618      	mov	r0, r3
 8011200:	3708      	adds	r7, #8
 8011202:	46bd      	mov	sp, r7
 8011204:	bd80      	pop	{r7, pc}

08011206 <_ZSt4moveIRP8ResetPinEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8011206:	b480      	push	{r7}
 8011208:	b083      	sub	sp, #12
 801120a:	af00      	add	r7, sp, #0
 801120c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	4618      	mov	r0, r3
 8011212:	370c      	adds	r7, #12
 8011214:	46bd      	mov	sp, r7
 8011216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801121a:	4770      	bx	lr

0801121c <_ZN8ResetPinD1Ev>:
#include "../../drivers/pin/pin.h"

// Global PRUreset variable (declared in extern.h or another source file)
extern volatile bool PRUreset;

class ResetPin : public Module {
 801121c:	b580      	push	{r7, lr}
 801121e:	b082      	sub	sp, #8
 8011220:	af00      	add	r7, sp, #0
 8011222:	6078      	str	r0, [r7, #4]
 8011224:	4a08      	ldr	r2, [pc, #32]	@ (8011248 <_ZN8ResetPinD1Ev+0x2c>)
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	601a      	str	r2, [r3, #0]
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	331c      	adds	r3, #28
 801122e:	4618      	mov	r0, r3
 8011230:	f014 ff4f 	bl	80260d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	4618      	mov	r0, r3
 8011238:	f7ff fcc0 	bl	8010bbc <_ZN6ModuleD1Ev>
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	4618      	mov	r0, r3
 8011240:	3708      	adds	r7, #8
 8011242:	46bd      	mov	sp, r7
 8011244:	bd80      	pop	{r7, pc}
 8011246:	bf00      	nop
 8011248:	08028acc 	.word	0x08028acc

0801124c <_ZN8ResetPinD0Ev>:
 801124c:	b580      	push	{r7, lr}
 801124e:	b082      	sub	sp, #8
 8011250:	af00      	add	r7, sp, #0
 8011252:	6078      	str	r0, [r7, #4]
 8011254:	6878      	ldr	r0, [r7, #4]
 8011256:	f7ff ffe1 	bl	801121c <_ZN8ResetPinD1Ev>
 801125a:	2138      	movs	r1, #56	@ 0x38
 801125c:	6878      	ldr	r0, [r7, #4]
 801125e:	f014 fe2c 	bl	8025eba <_ZdlPvj>
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	4618      	mov	r0, r3
 8011266:	3708      	adds	r7, #8
 8011268:	46bd      	mov	sp, r7
 801126a:	bd80      	pop	{r7, pc}

0801126c <_ZNKSt14default_deleteI8ResetPinEclEPS0_>:
      operator()(_Tp* __ptr) const
 801126c:	b580      	push	{r7, lr}
 801126e:	b082      	sub	sp, #8
 8011270:	af00      	add	r7, sp, #0
 8011272:	6078      	str	r0, [r7, #4]
 8011274:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8011276:	683b      	ldr	r3, [r7, #0]
 8011278:	2b00      	cmp	r3, #0
 801127a:	d004      	beq.n	8011286 <_ZNKSt14default_deleteI8ResetPinEclEPS0_+0x1a>
 801127c:	681a      	ldr	r2, [r3, #0]
 801127e:	3204      	adds	r2, #4
 8011280:	6812      	ldr	r2, [r2, #0]
 8011282:	4618      	mov	r0, r3
 8011284:	4790      	blx	r2
      }
 8011286:	bf00      	nop
 8011288:	3708      	adds	r7, #8
 801128a:	46bd      	mov	sp, r7
 801128c:	bd80      	pop	{r7, pc}

0801128e <_ZSt4moveIRSt10unique_ptrI8ResetPinSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 801128e:	b480      	push	{r7}
 8011290:	b083      	sub	sp, #12
 8011292:	af00      	add	r7, sp, #0
 8011294:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	4618      	mov	r0, r3
 801129a:	370c      	adds	r7, #12
 801129c:	46bd      	mov	sp, r7
 801129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a2:	4770      	bx	lr

080112a4 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I8ResetPinSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>:
	__shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 80112a4:	b580      	push	{r7, lr}
 80112a6:	b084      	sub	sp, #16
 80112a8:	af00      	add	r7, sp, #0
 80112aa:	6078      	str	r0, [r7, #4]
 80112ac:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r.get()), _M_refcount()
 80112ae:	6838      	ldr	r0, [r7, #0]
 80112b0:	f000 f85e 	bl	8011370 <_ZNKSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE3getEv>
 80112b4:	4602      	mov	r2, r0
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	601a      	str	r2, [r3, #0]
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	3304      	adds	r3, #4
 80112be:	4618      	mov	r0, r3
 80112c0:	f7fa fe3c 	bl	800bf3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  auto __raw = __to_address(__r.get());
 80112c4:	6838      	ldr	r0, [r7, #0]
 80112c6:	f000 f853 	bl	8011370 <_ZNKSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE3getEv>
 80112ca:	4603      	mov	r3, r0
 80112cc:	4618      	mov	r0, r3
 80112ce:	f000 f85c 	bl	801138a <_ZSt12__to_addressI8ResetPinEPT_S2_>
 80112d2:	60f8      	str	r0, [r7, #12]
	  _M_refcount = __shared_count<_Lp>(std::move(__r));
 80112d4:	6838      	ldr	r0, [r7, #0]
 80112d6:	f7ff ffda 	bl	801128e <_ZSt4moveIRSt10unique_ptrI8ResetPinSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 80112da:	4602      	mov	r2, r0
 80112dc:	f107 0308 	add.w	r3, r7, #8
 80112e0:	4611      	mov	r1, r2
 80112e2:	4618      	mov	r0, r3
 80112e4:	f000 f85c 	bl	80113a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I8ResetPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	3304      	adds	r3, #4
 80112ec:	f107 0208 	add.w	r2, r7, #8
 80112f0:	4611      	mov	r1, r2
 80112f2:	4618      	mov	r0, r3
 80112f4:	f7fd fa20 	bl	800e738 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 80112f8:	f107 0308 	add.w	r3, r7, #8
 80112fc:	4618      	mov	r0, r3
 80112fe:	f7f9 fc20 	bl	800ab42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  _M_enable_shared_from_this_with(__raw);
 8011302:	68f9      	ldr	r1, [r7, #12]
 8011304:	6878      	ldr	r0, [r7, #4]
 8011306:	f000 f88d 	bl	8011424 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI8ResetPinS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	4618      	mov	r0, r3
 801130e:	3710      	adds	r7, #16
 8011310:	46bd      	mov	sp, r7
 8011312:	bd80      	pop	{r7, pc}

08011314 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8011314:	b590      	push	{r4, r7, lr}
 8011316:	b083      	sub	sp, #12
 8011318:	af00      	add	r7, sp, #0
 801131a:	6078      	str	r0, [r7, #4]
 801131c:	6039      	str	r1, [r7, #0]
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	4618      	mov	r0, r3
 8011322:	f000 f88a 	bl	801143a <_ZNSt5tupleIJP8ResetPinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8011326:	683c      	ldr	r4, [r7, #0]
 8011328:	6878      	ldr	r0, [r7, #4]
 801132a:	f7ff ff52 	bl	80111d2 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE6_M_ptrEv>
 801132e:	4603      	mov	r3, r0
 8011330:	601c      	str	r4, [r3, #0]
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	4618      	mov	r0, r3
 8011336:	370c      	adds	r7, #12
 8011338:	46bd      	mov	sp, r7
 801133a:	bd90      	pop	{r4, r7, pc}

0801133c <_ZSt3getILj0EJP8ResetPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 801133c:	b580      	push	{r7, lr}
 801133e:	b082      	sub	sp, #8
 8011340:	af00      	add	r7, sp, #0
 8011342:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	4618      	mov	r0, r3
 8011348:	f000 f884 	bl	8011454 <_ZSt12__get_helperILj0EP8ResetPinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 801134c:	4603      	mov	r3, r0
 801134e:	4618      	mov	r0, r3
 8011350:	3708      	adds	r7, #8
 8011352:	46bd      	mov	sp, r7
 8011354:	bd80      	pop	{r7, pc}

08011356 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8011356:	b580      	push	{r7, lr}
 8011358:	b082      	sub	sp, #8
 801135a:	af00      	add	r7, sp, #0
 801135c:	6078      	str	r0, [r7, #4]
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	4618      	mov	r0, r3
 8011362:	f000 f883 	bl	801146c <_ZSt3getILj1EJP8ResetPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8011366:	4603      	mov	r3, r0
 8011368:	4618      	mov	r0, r3
 801136a:	3708      	adds	r7, #8
 801136c:	46bd      	mov	sp, r7
 801136e:	bd80      	pop	{r7, pc}

08011370 <_ZNKSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8011370:	b580      	push	{r7, lr}
 8011372:	b082      	sub	sp, #8
 8011374:	af00      	add	r7, sp, #0
 8011376:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	4618      	mov	r0, r3
 801137c:	f000 f882 	bl	8011484 <_ZNKSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE6_M_ptrEv>
 8011380:	4603      	mov	r3, r0
 8011382:	4618      	mov	r0, r3
 8011384:	3708      	adds	r7, #8
 8011386:	46bd      	mov	sp, r7
 8011388:	bd80      	pop	{r7, pc}

0801138a <_ZSt12__to_addressI8ResetPinEPT_S2_>:
    __to_address(_Tp* __ptr) noexcept
 801138a:	b480      	push	{r7}
 801138c:	b083      	sub	sp, #12
 801138e:	af00      	add	r7, sp, #0
 8011390:	6078      	str	r0, [r7, #4]
      return __ptr;
 8011392:	687b      	ldr	r3, [r7, #4]
    }
 8011394:	4618      	mov	r0, r3
 8011396:	370c      	adds	r7, #12
 8011398:	46bd      	mov	sp, r7
 801139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801139e:	4770      	bx	lr

080113a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I8ResetPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>:
	__shared_count(std::unique_ptr<_Tp, _Del>&& __r) : _M_pi(0)
 80113a0:	b580      	push	{r7, lr}
 80113a2:	b086      	sub	sp, #24
 80113a4:	af00      	add	r7, sp, #0
 80113a6:	6078      	str	r0, [r7, #4]
 80113a8:	6039      	str	r1, [r7, #0]
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	2200      	movs	r2, #0
 80113ae:	601a      	str	r2, [r3, #0]
	  if (__r.get() == nullptr)
 80113b0:	6838      	ldr	r0, [r7, #0]
 80113b2:	f7ff ffdd 	bl	8011370 <_ZNKSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE3getEv>
 80113b6:	4603      	mov	r3, r0
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	bf0c      	ite	eq
 80113bc:	2301      	moveq	r3, #1
 80113be:	2300      	movne	r3, #0
 80113c0:	b2db      	uxtb	r3, r3
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d128      	bne.n	8011418 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I8ResetPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x78>
	  _Alloc __a;
 80113c6:	f107 030c 	add.w	r3, r7, #12
 80113ca:	4618      	mov	r0, r3
 80113cc:	f000 f868 	bl	80114a0 <_ZNSaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
	  _Sp_cd_type* __mem = _Alloc_traits::allocate(__a, 1);
 80113d0:	f107 030c 	add.w	r3, r7, #12
 80113d4:	2101      	movs	r1, #1
 80113d6:	4618      	mov	r0, r3
 80113d8:	f000 f87a 	bl	80114d0 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>
 80113dc:	6178      	str	r0, [r7, #20]
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 80113de:	6838      	ldr	r0, [r7, #0]
 80113e0:	f000 f885 	bl	80114ee <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE7releaseEv>
 80113e4:	4603      	mov	r3, r0
 80113e6:	613b      	str	r3, [r7, #16]
				   std::forward<_Del>(__r.get_deleter()));
 80113e8:	6838      	ldr	r0, [r7, #0]
 80113ea:	f7ff feff 	bl	80111ec <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE11get_deleterEv>
 80113ee:	4603      	mov	r3, r0
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 80113f0:	4618      	mov	r0, r3
 80113f2:	f000 f889 	bl	8011508 <_ZSt7forwardISt14default_deleteI8ResetPinEEOT_RNSt16remove_referenceIS3_E4typeE>
 80113f6:	4603      	mov	r3, r0
 80113f8:	f107 0210 	add.w	r2, r7, #16
 80113fc:	f107 000c 	add.w	r0, r7, #12
 8011400:	6979      	ldr	r1, [r7, #20]
 8011402:	f000 f88c 	bl	801151e <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>
	  _M_pi = __mem;
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	697a      	ldr	r2, [r7, #20]
 801140a:	601a      	str	r2, [r3, #0]
	}
 801140c:	f107 030c 	add.w	r3, r7, #12
 8011410:	4618      	mov	r0, r3
 8011412:	f000 f851 	bl	80114b8 <_ZNSaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8011416:	e000      	b.n	801141a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I8ResetPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x7a>
	    return;
 8011418:	bf00      	nop
	}
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	4618      	mov	r0, r3
 801141e:	3718      	adds	r7, #24
 8011420:	46bd      	mov	sp, r7
 8011422:	bd80      	pop	{r7, pc}

08011424 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI8ResetPinS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 8011424:	b480      	push	{r7}
 8011426:	b083      	sub	sp, #12
 8011428:	af00      	add	r7, sp, #0
 801142a:	6078      	str	r0, [r7, #4]
 801142c:	6039      	str	r1, [r7, #0]
	{ }
 801142e:	bf00      	nop
 8011430:	370c      	adds	r7, #12
 8011432:	46bd      	mov	sp, r7
 8011434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011438:	4770      	bx	lr

0801143a <_ZNSt5tupleIJP8ResetPinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 801143a:	b580      	push	{r7, lr}
 801143c:	b082      	sub	sp, #8
 801143e:	af00      	add	r7, sp, #0
 8011440:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	4618      	mov	r0, r3
 8011446:	f000 f882 	bl	801154e <_ZNSt11_Tuple_implILj0EJP8ResetPinSt14default_deleteIS0_EEEC1Ev>
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	4618      	mov	r0, r3
 801144e:	3708      	adds	r7, #8
 8011450:	46bd      	mov	sp, r7
 8011452:	bd80      	pop	{r7, pc}

08011454 <_ZSt12__get_helperILj0EP8ResetPinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8011454:	b580      	push	{r7, lr}
 8011456:	b082      	sub	sp, #8
 8011458:	af00      	add	r7, sp, #0
 801145a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801145c:	6878      	ldr	r0, [r7, #4]
 801145e:	f000 f886 	bl	801156e <_ZNSt11_Tuple_implILj0EJP8ResetPinSt14default_deleteIS0_EEE7_M_headERS4_>
 8011462:	4603      	mov	r3, r0
 8011464:	4618      	mov	r0, r3
 8011466:	3708      	adds	r7, #8
 8011468:	46bd      	mov	sp, r7
 801146a:	bd80      	pop	{r7, pc}

0801146c <_ZSt3getILj1EJP8ResetPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 801146c:	b580      	push	{r7, lr}
 801146e:	b082      	sub	sp, #8
 8011470:	af00      	add	r7, sp, #0
 8011472:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8011474:	6878      	ldr	r0, [r7, #4]
 8011476:	f000 f887 	bl	8011588 <_ZSt12__get_helperILj1ESt14default_deleteI8ResetPinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 801147a:	4603      	mov	r3, r0
 801147c:	4618      	mov	r0, r3
 801147e:	3708      	adds	r7, #8
 8011480:	46bd      	mov	sp, r7
 8011482:	bd80      	pop	{r7, pc}

08011484 <_ZNKSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 8011484:	b580      	push	{r7, lr}
 8011486:	b082      	sub	sp, #8
 8011488:	af00      	add	r7, sp, #0
 801148a:	6078      	str	r0, [r7, #4]
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	4618      	mov	r0, r3
 8011490:	f000 f886 	bl	80115a0 <_ZSt3getILj0EJP8ResetPinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8011494:	4603      	mov	r3, r0
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	4618      	mov	r0, r3
 801149a:	3708      	adds	r7, #8
 801149c:	46bd      	mov	sp, r7
 801149e:	bd80      	pop	{r7, pc}

080114a0 <_ZNSaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80114a0:	b580      	push	{r7, lr}
 80114a2:	b082      	sub	sp, #8
 80114a4:	af00      	add	r7, sp, #0
 80114a6:	6078      	str	r0, [r7, #4]
 80114a8:	6878      	ldr	r0, [r7, #4]
 80114aa:	f000 f886 	bl	80115ba <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	4618      	mov	r0, r3
 80114b2:	3708      	adds	r7, #8
 80114b4:	46bd      	mov	sp, r7
 80114b6:	bd80      	pop	{r7, pc}

080114b8 <_ZNSaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80114b8:	b580      	push	{r7, lr}
 80114ba:	b082      	sub	sp, #8
 80114bc:	af00      	add	r7, sp, #0
 80114be:	6078      	str	r0, [r7, #4]
 80114c0:	6878      	ldr	r0, [r7, #4]
 80114c2:	f000 f885 	bl	80115d0 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	4618      	mov	r0, r3
 80114ca:	3708      	adds	r7, #8
 80114cc:	46bd      	mov	sp, r7
 80114ce:	bd80      	pop	{r7, pc}

080114d0 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 80114d0:	b580      	push	{r7, lr}
 80114d2:	b082      	sub	sp, #8
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	6078      	str	r0, [r7, #4]
 80114d8:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80114da:	2200      	movs	r2, #0
 80114dc:	6839      	ldr	r1, [r7, #0]
 80114de:	6878      	ldr	r0, [r7, #4]
 80114e0:	f000 f881 	bl	80115e6 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 80114e4:	4603      	mov	r3, r0
 80114e6:	4618      	mov	r0, r3
 80114e8:	3708      	adds	r7, #8
 80114ea:	46bd      	mov	sp, r7
 80114ec:	bd80      	pop	{r7, pc}

080114ee <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 80114ee:	b580      	push	{r7, lr}
 80114f0:	b082      	sub	sp, #8
 80114f2:	af00      	add	r7, sp, #0
 80114f4:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	4618      	mov	r0, r3
 80114fa:	f000 f89e 	bl	801163a <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE7releaseEv>
 80114fe:	4603      	mov	r3, r0
 8011500:	4618      	mov	r0, r3
 8011502:	3708      	adds	r7, #8
 8011504:	46bd      	mov	sp, r7
 8011506:	bd80      	pop	{r7, pc}

08011508 <_ZSt7forwardISt14default_deleteI8ResetPinEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011508:	b480      	push	{r7}
 801150a:	b083      	sub	sp, #12
 801150c:	af00      	add	r7, sp, #0
 801150e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	4618      	mov	r0, r3
 8011514:	370c      	adds	r7, #12
 8011516:	46bd      	mov	sp, r7
 8011518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801151c:	4770      	bx	lr

0801151e <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 801151e:	b590      	push	{r4, r7, lr}
 8011520:	b085      	sub	sp, #20
 8011522:	af00      	add	r7, sp, #0
 8011524:	60f8      	str	r0, [r7, #12]
 8011526:	60b9      	str	r1, [r7, #8]
 8011528:	607a      	str	r2, [r7, #4]
 801152a:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 801152c:	6878      	ldr	r0, [r7, #4]
 801152e:	f000 f899 	bl	8011664 <_ZSt7forwardIP8ResetPinEOT_RNSt16remove_referenceIS2_E4typeE>
 8011532:	4604      	mov	r4, r0
 8011534:	6838      	ldr	r0, [r7, #0]
 8011536:	f7ff ffe7 	bl	8011508 <_ZSt7forwardISt14default_deleteI8ResetPinEEOT_RNSt16remove_referenceIS3_E4typeE>
 801153a:	4603      	mov	r3, r0
 801153c:	4622      	mov	r2, r4
 801153e:	68b9      	ldr	r1, [r7, #8]
 8011540:	68f8      	ldr	r0, [r7, #12]
 8011542:	f000 f89a 	bl	801167a <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>
	}
 8011546:	bf00      	nop
 8011548:	3714      	adds	r7, #20
 801154a:	46bd      	mov	sp, r7
 801154c:	bd90      	pop	{r4, r7, pc}

0801154e <_ZNSt11_Tuple_implILj0EJP8ResetPinSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 801154e:	b580      	push	{r7, lr}
 8011550:	b082      	sub	sp, #8
 8011552:	af00      	add	r7, sp, #0
 8011554:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8011556:	6878      	ldr	r0, [r7, #4]
 8011558:	f000 f8ad 	bl	80116b6 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8ResetPinEEEC1Ev>
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	4618      	mov	r0, r3
 8011560:	f000 f8b5 	bl	80116ce <_ZNSt10_Head_baseILj0EP8ResetPinLb0EEC1Ev>
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	4618      	mov	r0, r3
 8011568:	3708      	adds	r7, #8
 801156a:	46bd      	mov	sp, r7
 801156c:	bd80      	pop	{r7, pc}

0801156e <_ZNSt11_Tuple_implILj0EJP8ResetPinSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801156e:	b580      	push	{r7, lr}
 8011570:	b082      	sub	sp, #8
 8011572:	af00      	add	r7, sp, #0
 8011574:	6078      	str	r0, [r7, #4]
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	4618      	mov	r0, r3
 801157a:	f000 f8b6 	bl	80116ea <_ZNSt10_Head_baseILj0EP8ResetPinLb0EE7_M_headERS2_>
 801157e:	4603      	mov	r3, r0
 8011580:	4618      	mov	r0, r3
 8011582:	3708      	adds	r7, #8
 8011584:	46bd      	mov	sp, r7
 8011586:	bd80      	pop	{r7, pc}

08011588 <_ZSt12__get_helperILj1ESt14default_deleteI8ResetPinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8011588:	b580      	push	{r7, lr}
 801158a:	b082      	sub	sp, #8
 801158c:	af00      	add	r7, sp, #0
 801158e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8011590:	6878      	ldr	r0, [r7, #4]
 8011592:	f000 f8b5 	bl	8011700 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8ResetPinEEE7_M_headERS3_>
 8011596:	4603      	mov	r3, r0
 8011598:	4618      	mov	r0, r3
 801159a:	3708      	adds	r7, #8
 801159c:	46bd      	mov	sp, r7
 801159e:	bd80      	pop	{r7, pc}

080115a0 <_ZSt3getILj0EJP8ResetPinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 80115a0:	b580      	push	{r7, lr}
 80115a2:	b082      	sub	sp, #8
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	4618      	mov	r0, r3
 80115ac:	f000 f8b4 	bl	8011718 <_ZSt12__get_helperILj0EP8ResetPinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80115b0:	4603      	mov	r3, r0
 80115b2:	4618      	mov	r0, r3
 80115b4:	3708      	adds	r7, #8
 80115b6:	46bd      	mov	sp, r7
 80115b8:	bd80      	pop	{r7, pc}

080115ba <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80115ba:	b480      	push	{r7}
 80115bc:	b083      	sub	sp, #12
 80115be:	af00      	add	r7, sp, #0
 80115c0:	6078      	str	r0, [r7, #4]
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	4618      	mov	r0, r3
 80115c6:	370c      	adds	r7, #12
 80115c8:	46bd      	mov	sp, r7
 80115ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ce:	4770      	bx	lr

080115d0 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80115d0:	b480      	push	{r7}
 80115d2:	b083      	sub	sp, #12
 80115d4:	af00      	add	r7, sp, #0
 80115d6:	6078      	str	r0, [r7, #4]
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	4618      	mov	r0, r3
 80115dc:	370c      	adds	r7, #12
 80115de:	46bd      	mov	sp, r7
 80115e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e4:	4770      	bx	lr

080115e6 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80115e6:	b580      	push	{r7, lr}
 80115e8:	b084      	sub	sp, #16
 80115ea:	af00      	add	r7, sp, #0
 80115ec:	60f8      	str	r0, [r7, #12]
 80115ee:	60b9      	str	r1, [r7, #8]
 80115f0:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80115f2:	68f8      	ldr	r0, [r7, #12]
 80115f4:	f000 f89c 	bl	8011730 <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 80115f8:	4602      	mov	r2, r0
 80115fa:	68bb      	ldr	r3, [r7, #8]
 80115fc:	4293      	cmp	r3, r2
 80115fe:	bf8c      	ite	hi
 8011600:	2301      	movhi	r3, #1
 8011602:	2300      	movls	r3, #0
 8011604:	b2db      	uxtb	r3, r3
 8011606:	2b00      	cmp	r3, #0
 8011608:	bf14      	ite	ne
 801160a:	2301      	movne	r3, #1
 801160c:	2300      	moveq	r3, #0
 801160e:	b2db      	uxtb	r3, r3
 8011610:	2b00      	cmp	r3, #0
 8011612:	d007      	beq.n	8011624 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8011614:	68bb      	ldr	r3, [r7, #8]
 8011616:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801161a:	d301      	bcc.n	8011620 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 801161c:	f014 fc74 	bl	8025f08 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8011620:	f014 fc6f 	bl	8025f02 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8011624:	68bb      	ldr	r3, [r7, #8]
 8011626:	011b      	lsls	r3, r3, #4
 8011628:	4618      	mov	r0, r3
 801162a:	f014 fc57 	bl	8025edc <_Znwj>
 801162e:	4603      	mov	r3, r0
 8011630:	bf00      	nop
      }
 8011632:	4618      	mov	r0, r3
 8011634:	3710      	adds	r7, #16
 8011636:	46bd      	mov	sp, r7
 8011638:	bd80      	pop	{r7, pc}

0801163a <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 801163a:	b580      	push	{r7, lr}
 801163c:	b084      	sub	sp, #16
 801163e:	af00      	add	r7, sp, #0
 8011640:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8011642:	6878      	ldr	r0, [r7, #4]
 8011644:	f7ff fdc5 	bl	80111d2 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE6_M_ptrEv>
 8011648:	4603      	mov	r3, r0
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 801164e:	6878      	ldr	r0, [r7, #4]
 8011650:	f7ff fdbf 	bl	80111d2 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE6_M_ptrEv>
 8011654:	4603      	mov	r3, r0
 8011656:	2200      	movs	r2, #0
 8011658:	601a      	str	r2, [r3, #0]
	return __p;
 801165a:	68fb      	ldr	r3, [r7, #12]
      }
 801165c:	4618      	mov	r0, r3
 801165e:	3710      	adds	r7, #16
 8011660:	46bd      	mov	sp, r7
 8011662:	bd80      	pop	{r7, pc}

08011664 <_ZSt7forwardIP8ResetPinEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011664:	b480      	push	{r7}
 8011666:	b083      	sub	sp, #12
 8011668:	af00      	add	r7, sp, #0
 801166a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	4618      	mov	r0, r3
 8011670:	370c      	adds	r7, #12
 8011672:	46bd      	mov	sp, r7
 8011674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011678:	4770      	bx	lr

0801167a <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 801167a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801167c:	b085      	sub	sp, #20
 801167e:	af00      	add	r7, sp, #0
 8011680:	60f8      	str	r0, [r7, #12]
 8011682:	60b9      	str	r1, [r7, #8]
 8011684:	607a      	str	r2, [r7, #4]
 8011686:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8011688:	68bb      	ldr	r3, [r7, #8]
 801168a:	4619      	mov	r1, r3
 801168c:	2010      	movs	r0, #16
 801168e:	f7f8 f837 	bl	8009700 <_ZnwjPv>
 8011692:	4605      	mov	r5, r0
 8011694:	6878      	ldr	r0, [r7, #4]
 8011696:	f7ff ffe5 	bl	8011664 <_ZSt7forwardIP8ResetPinEOT_RNSt16remove_referenceIS2_E4typeE>
 801169a:	4603      	mov	r3, r0
 801169c:	681c      	ldr	r4, [r3, #0]
 801169e:	6838      	ldr	r0, [r7, #0]
 80116a0:	f7ff ff32 	bl	8011508 <_ZSt7forwardISt14default_deleteI8ResetPinEEOT_RNSt16remove_referenceIS3_E4typeE>
 80116a4:	4632      	mov	r2, r6
 80116a6:	4621      	mov	r1, r4
 80116a8:	4628      	mov	r0, r5
 80116aa:	f000 f84d 	bl	8011748 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>
 80116ae:	bf00      	nop
 80116b0:	3714      	adds	r7, #20
 80116b2:	46bd      	mov	sp, r7
 80116b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080116b6 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8ResetPinEEEC1Ev>:
      _Tuple_impl()
 80116b6:	b580      	push	{r7, lr}
 80116b8:	b082      	sub	sp, #8
 80116ba:	af00      	add	r7, sp, #0
 80116bc:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80116be:	6878      	ldr	r0, [r7, #4]
 80116c0:	f000 f864 	bl	801178c <_ZNSt10_Head_baseILj1ESt14default_deleteI8ResetPinELb1EEC1Ev>
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	4618      	mov	r0, r3
 80116c8:	3708      	adds	r7, #8
 80116ca:	46bd      	mov	sp, r7
 80116cc:	bd80      	pop	{r7, pc}

080116ce <_ZNSt10_Head_baseILj0EP8ResetPinLb0EEC1Ev>:
      constexpr _Head_base()
 80116ce:	b480      	push	{r7}
 80116d0:	b083      	sub	sp, #12
 80116d2:	af00      	add	r7, sp, #0
 80116d4:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	2200      	movs	r2, #0
 80116da:	601a      	str	r2, [r3, #0]
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	4618      	mov	r0, r3
 80116e0:	370c      	adds	r7, #12
 80116e2:	46bd      	mov	sp, r7
 80116e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116e8:	4770      	bx	lr

080116ea <_ZNSt10_Head_baseILj0EP8ResetPinLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80116ea:	b480      	push	{r7}
 80116ec:	b083      	sub	sp, #12
 80116ee:	af00      	add	r7, sp, #0
 80116f0:	6078      	str	r0, [r7, #4]
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	4618      	mov	r0, r3
 80116f6:	370c      	adds	r7, #12
 80116f8:	46bd      	mov	sp, r7
 80116fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116fe:	4770      	bx	lr

08011700 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8ResetPinEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8011700:	b580      	push	{r7, lr}
 8011702:	b082      	sub	sp, #8
 8011704:	af00      	add	r7, sp, #0
 8011706:	6078      	str	r0, [r7, #4]
 8011708:	6878      	ldr	r0, [r7, #4]
 801170a:	f000 f84a 	bl	80117a2 <_ZNSt10_Head_baseILj1ESt14default_deleteI8ResetPinELb1EE7_M_headERS3_>
 801170e:	4603      	mov	r3, r0
 8011710:	4618      	mov	r0, r3
 8011712:	3708      	adds	r7, #8
 8011714:	46bd      	mov	sp, r7
 8011716:	bd80      	pop	{r7, pc}

08011718 <_ZSt12__get_helperILj0EP8ResetPinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8011718:	b580      	push	{r7, lr}
 801171a:	b082      	sub	sp, #8
 801171c:	af00      	add	r7, sp, #0
 801171e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8011720:	6878      	ldr	r0, [r7, #4]
 8011722:	f000 f849 	bl	80117b8 <_ZNSt11_Tuple_implILj0EJP8ResetPinSt14default_deleteIS0_EEE7_M_headERKS4_>
 8011726:	4603      	mov	r3, r0
 8011728:	4618      	mov	r0, r3
 801172a:	3708      	adds	r7, #8
 801172c:	46bd      	mov	sp, r7
 801172e:	bd80      	pop	{r7, pc}

08011730 <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8011730:	b480      	push	{r7}
 8011732:	b083      	sub	sp, #12
 8011734:	af00      	add	r7, sp, #0
 8011736:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8011738:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      }
 801173c:	4618      	mov	r0, r3
 801173e:	370c      	adds	r7, #12
 8011740:	46bd      	mov	sp, r7
 8011742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011746:	4770      	bx	lr

08011748 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
 8011748:	b5b0      	push	{r4, r5, r7, lr}
 801174a:	b086      	sub	sp, #24
 801174c:	af00      	add	r7, sp, #0
 801174e:	60f8      	str	r0, [r7, #12]
 8011750:	60b9      	str	r1, [r7, #8]
 8011752:	713a      	strb	r2, [r7, #4]
      : _M_impl(__p, std::move(__d), _Alloc()) { }
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	4618      	mov	r0, r3
 8011758:	f7fb fc64 	bl	800d024 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 801175c:	4a0a      	ldr	r2, [pc, #40]	@ (8011788 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_+0x40>)
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	601a      	str	r2, [r3, #0]
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	f103 040c 	add.w	r4, r3, #12
 8011768:	1d3b      	adds	r3, r7, #4
 801176a:	4618      	mov	r0, r3
 801176c:	f000 f831 	bl	80117d2 <_ZSt4moveIRSt14default_deleteI8ResetPinEEONSt16remove_referenceIT_E4typeEOS5_>
 8011770:	f107 0314 	add.w	r3, r7, #20
 8011774:	462a      	mov	r2, r5
 8011776:	68b9      	ldr	r1, [r7, #8]
 8011778:	4620      	mov	r0, r4
 801177a:	f000 f835 	bl	80117e8 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	4618      	mov	r0, r3
 8011782:	3718      	adds	r7, #24
 8011784:	46bd      	mov	sp, r7
 8011786:	bdb0      	pop	{r4, r5, r7, pc}
 8011788:	08028ab0 	.word	0x08028ab0

0801178c <_ZNSt10_Head_baseILj1ESt14default_deleteI8ResetPinELb1EEC1Ev>:
      constexpr _Head_base()
 801178c:	b480      	push	{r7}
 801178e:	b083      	sub	sp, #12
 8011790:	af00      	add	r7, sp, #0
 8011792:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	4618      	mov	r0, r3
 8011798:	370c      	adds	r7, #12
 801179a:	46bd      	mov	sp, r7
 801179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117a0:	4770      	bx	lr

080117a2 <_ZNSt10_Head_baseILj1ESt14default_deleteI8ResetPinELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80117a2:	b480      	push	{r7}
 80117a4:	b083      	sub	sp, #12
 80117a6:	af00      	add	r7, sp, #0
 80117a8:	6078      	str	r0, [r7, #4]
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	4618      	mov	r0, r3
 80117ae:	370c      	adds	r7, #12
 80117b0:	46bd      	mov	sp, r7
 80117b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b6:	4770      	bx	lr

080117b8 <_ZNSt11_Tuple_implILj0EJP8ResetPinSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80117b8:	b580      	push	{r7, lr}
 80117ba:	b082      	sub	sp, #8
 80117bc:	af00      	add	r7, sp, #0
 80117be:	6078      	str	r0, [r7, #4]
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	4618      	mov	r0, r3
 80117c4:	f000 f82c 	bl	8011820 <_ZNSt10_Head_baseILj0EP8ResetPinLb0EE7_M_headERKS2_>
 80117c8:	4603      	mov	r3, r0
 80117ca:	4618      	mov	r0, r3
 80117cc:	3708      	adds	r7, #8
 80117ce:	46bd      	mov	sp, r7
 80117d0:	bd80      	pop	{r7, pc}

080117d2 <_ZSt4moveIRSt14default_deleteI8ResetPinEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80117d2:	b480      	push	{r7}
 80117d4:	b083      	sub	sp, #12
 80117d6:	af00      	add	r7, sp, #0
 80117d8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	4618      	mov	r0, r3
 80117de:	370c      	adds	r7, #12
 80117e0:	46bd      	mov	sp, r7
 80117e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e6:	4770      	bx	lr

080117e8 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 80117e8:	b580      	push	{r7, lr}
 80117ea:	b084      	sub	sp, #16
 80117ec:	af00      	add	r7, sp, #0
 80117ee:	60f8      	str	r0, [r7, #12]
 80117f0:	60b9      	str	r1, [r7, #8]
 80117f2:	713a      	strb	r2, [r7, #4]
 80117f4:	603b      	str	r3, [r7, #0]
	: _Del_base(std::move(__d)), _Alloc_base(__a), _M_ptr(__p)
 80117f6:	1d3b      	adds	r3, r7, #4
 80117f8:	4618      	mov	r0, r3
 80117fa:	f7ff ffea 	bl	80117d2 <_ZSt4moveIRSt14default_deleteI8ResetPinEEONSt16remove_referenceIT_E4typeEOS5_>
 80117fe:	4603      	mov	r3, r0
 8011800:	4619      	mov	r1, r3
 8011802:	68f8      	ldr	r0, [r7, #12]
 8011804:	f000 f817 	bl	8011836 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI8ResetPinELb1EEC1EOS2_>
 8011808:	6839      	ldr	r1, [r7, #0]
 801180a:	68f8      	ldr	r0, [r7, #12]
 801180c:	f7fd fcf4 	bl	800f1f8 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EEC1ERKS0_>
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	68ba      	ldr	r2, [r7, #8]
 8011814:	601a      	str	r2, [r3, #0]
	{ }
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	4618      	mov	r0, r3
 801181a:	3710      	adds	r7, #16
 801181c:	46bd      	mov	sp, r7
 801181e:	bd80      	pop	{r7, pc}

08011820 <_ZNSt10_Head_baseILj0EP8ResetPinLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8011820:	b480      	push	{r7}
 8011822:	b083      	sub	sp, #12
 8011824:	af00      	add	r7, sp, #0
 8011826:	6078      	str	r0, [r7, #4]
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	4618      	mov	r0, r3
 801182c:	370c      	adds	r7, #12
 801182e:	46bd      	mov	sp, r7
 8011830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011834:	4770      	bx	lr

08011836 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI8ResetPinELb1EEC1EOS2_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _Tp(std::move(__tp)) { }
 8011836:	b580      	push	{r7, lr}
 8011838:	b082      	sub	sp, #8
 801183a:	af00      	add	r7, sp, #0
 801183c:	6078      	str	r0, [r7, #4]
 801183e:	6039      	str	r1, [r7, #0]
 8011840:	6838      	ldr	r0, [r7, #0]
 8011842:	f7ff ffc6 	bl	80117d2 <_ZSt4moveIRSt14default_deleteI8ResetPinEEONSt16remove_referenceIT_E4typeEOS5_>
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	4618      	mov	r0, r3
 801184a:	3708      	adds	r7, #8
 801184c:	46bd      	mov	sp, r7
 801184e:	bd80      	pop	{r7, pc}

08011850 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 8011850:	b580      	push	{r7, lr}
 8011852:	b082      	sub	sp, #8
 8011854:	af00      	add	r7, sp, #0
 8011856:	6078      	str	r0, [r7, #4]
 8011858:	4a05      	ldr	r2, [pc, #20]	@ (8011870 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	601a      	str	r2, [r3, #0]
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	4618      	mov	r0, r3
 8011862:	f7f9 fda1 	bl	800b3a8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	4618      	mov	r0, r3
 801186a:	3708      	adds	r7, #8
 801186c:	46bd      	mov	sp, r7
 801186e:	bd80      	pop	{r7, pc}
 8011870:	08028ab0 	.word	0x08028ab0

08011874 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 8011874:	b580      	push	{r7, lr}
 8011876:	b082      	sub	sp, #8
 8011878:	af00      	add	r7, sp, #0
 801187a:	6078      	str	r0, [r7, #4]
 801187c:	6878      	ldr	r0, [r7, #4]
 801187e:	f7ff ffe7 	bl	8011850 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8011882:	2110      	movs	r1, #16
 8011884:	6878      	ldr	r0, [r7, #4]
 8011886:	f014 fb18 	bl	8025eba <_ZdlPvj>
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	4618      	mov	r0, r3
 801188e:	3708      	adds	r7, #8
 8011890:	46bd      	mov	sp, r7
 8011892:	bd80      	pop	{r7, pc}

08011894 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8011894:	b580      	push	{r7, lr}
 8011896:	b082      	sub	sp, #8
 8011898:	af00      	add	r7, sp, #0
 801189a:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	330c      	adds	r3, #12
 80118a0:	4618      	mov	r0, r3
 80118a2:	f000 f83f 	bl	8011924 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>
 80118a6:	4602      	mov	r2, r0
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	68db      	ldr	r3, [r3, #12]
 80118ac:	4619      	mov	r1, r3
 80118ae:	4610      	mov	r0, r2
 80118b0:	f7ff fcdc 	bl	801126c <_ZNKSt14default_deleteI8ResetPinEclEPS0_>
 80118b4:	bf00      	nop
 80118b6:	3708      	adds	r7, #8
 80118b8:	46bd      	mov	sp, r7
 80118ba:	bd80      	pop	{r7, pc}

080118bc <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80118bc:	b580      	push	{r7, lr}
 80118be:	b086      	sub	sp, #24
 80118c0:	af00      	add	r7, sp, #0
 80118c2:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	330c      	adds	r3, #12
 80118c8:	4618      	mov	r0, r3
 80118ca:	f000 f837 	bl	801193c <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 80118ce:	4602      	mov	r2, r0
 80118d0:	f107 0314 	add.w	r3, r7, #20
 80118d4:	4611      	mov	r1, r2
 80118d6:	4618      	mov	r0, r3
 80118d8:	f000 f83c 	bl	8011954 <_ZNSaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 80118dc:	f107 0114 	add.w	r1, r7, #20
 80118e0:	f107 030c 	add.w	r3, r7, #12
 80118e4:	687a      	ldr	r2, [r7, #4]
 80118e6:	4618      	mov	r0, r3
 80118e8:	f000 f841 	bl	801196e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>
	this->~_Sp_counted_deleter();
 80118ec:	6878      	ldr	r0, [r7, #4]
 80118ee:	f7ff ffaf 	bl	8011850 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 80118f2:	f107 030c 	add.w	r3, r7, #12
 80118f6:	4618      	mov	r0, r3
 80118f8:	f000 f84d 	bl	8011996 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 80118fc:	f107 0314 	add.w	r3, r7, #20
 8011900:	4618      	mov	r0, r3
 8011902:	f7ff fdd9 	bl	80114b8 <_ZNSaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8011906:	3718      	adds	r7, #24
 8011908:	46bd      	mov	sp, r7
 801190a:	bd80      	pop	{r7, pc}

0801190c <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const type_info& __ti [[__gnu__::__unused__]]) noexcept
 801190c:	b480      	push	{r7}
 801190e:	b083      	sub	sp, #12
 8011910:	af00      	add	r7, sp, #0
 8011912:	6078      	str	r0, [r7, #4]
 8011914:	6039      	str	r1, [r7, #0]
        return nullptr;
 8011916:	2300      	movs	r3, #0
      }
 8011918:	4618      	mov	r0, r3
 801191a:	370c      	adds	r7, #12
 801191c:	46bd      	mov	sp, r7
 801191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011922:	4770      	bx	lr

08011924 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 8011924:	b580      	push	{r7, lr}
 8011926:	b082      	sub	sp, #8
 8011928:	af00      	add	r7, sp, #0
 801192a:	6078      	str	r0, [r7, #4]
 801192c:	6878      	ldr	r0, [r7, #4]
 801192e:	f000 f847 	bl	80119c0 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI8ResetPinELb1EE6_S_getERS3_>
 8011932:	4603      	mov	r3, r0
 8011934:	4618      	mov	r0, r3
 8011936:	3708      	adds	r7, #8
 8011938:	46bd      	mov	sp, r7
 801193a:	bd80      	pop	{r7, pc}

0801193c <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 801193c:	b580      	push	{r7, lr}
 801193e:	b082      	sub	sp, #8
 8011940:	af00      	add	r7, sp, #0
 8011942:	6078      	str	r0, [r7, #4]
 8011944:	6878      	ldr	r0, [r7, #4]
 8011946:	f7fd fd26 	bl	800f396 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EE6_S_getERS1_>
 801194a:	4603      	mov	r3, r0
 801194c:	4618      	mov	r0, r3
 801194e:	3708      	adds	r7, #8
 8011950:	46bd      	mov	sp, r7
 8011952:	bd80      	pop	{r7, pc}

08011954 <_ZNSaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8011954:	b580      	push	{r7, lr}
 8011956:	b082      	sub	sp, #8
 8011958:	af00      	add	r7, sp, #0
 801195a:	6078      	str	r0, [r7, #4]
 801195c:	6039      	str	r1, [r7, #0]
 801195e:	6878      	ldr	r0, [r7, #4]
 8011960:	f7ff fe2b 	bl	80115ba <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	4618      	mov	r0, r3
 8011968:	3708      	adds	r7, #8
 801196a:	46bd      	mov	sp, r7
 801196c:	bd80      	pop	{r7, pc}

0801196e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 801196e:	b580      	push	{r7, lr}
 8011970:	b084      	sub	sp, #16
 8011972:	af00      	add	r7, sp, #0
 8011974:	60f8      	str	r0, [r7, #12]
 8011976:	60b9      	str	r1, [r7, #8]
 8011978:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 801197a:	68b8      	ldr	r0, [r7, #8]
 801197c:	f000 f82b 	bl	80119d6 <_ZSt11__addressofISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>
 8011980:	4602      	mov	r2, r0
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	601a      	str	r2, [r3, #0]
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	687a      	ldr	r2, [r7, #4]
 801198a:	605a      	str	r2, [r3, #4]
      { }
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	4618      	mov	r0, r3
 8011990:	3710      	adds	r7, #16
 8011992:	46bd      	mov	sp, r7
 8011994:	bd80      	pop	{r7, pc}

08011996 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 8011996:	b580      	push	{r7, lr}
 8011998:	b082      	sub	sp, #8
 801199a:	af00      	add	r7, sp, #0
 801199c:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	685b      	ldr	r3, [r3, #4]
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d007      	beq.n	80119b6 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	6818      	ldr	r0, [r3, #0]
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	685b      	ldr	r3, [r3, #4]
 80119ae:	2201      	movs	r2, #1
 80119b0:	4619      	mov	r1, r3
 80119b2:	f000 f81b 	bl	80119ec <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>
      }
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	4618      	mov	r0, r3
 80119ba:	3708      	adds	r7, #8
 80119bc:	46bd      	mov	sp, r7
 80119be:	bd80      	pop	{r7, pc}

080119c0 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI8ResetPinELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 80119c0:	b480      	push	{r7}
 80119c2:	b083      	sub	sp, #12
 80119c4:	af00      	add	r7, sp, #0
 80119c6:	6078      	str	r0, [r7, #4]
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	4618      	mov	r0, r3
 80119cc:	370c      	adds	r7, #12
 80119ce:	46bd      	mov	sp, r7
 80119d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119d4:	4770      	bx	lr

080119d6 <_ZSt11__addressofISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80119d6:	b480      	push	{r7}
 80119d8:	b083      	sub	sp, #12
 80119da:	af00      	add	r7, sp, #0
 80119dc:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	4618      	mov	r0, r3
 80119e2:	370c      	adds	r7, #12
 80119e4:	46bd      	mov	sp, r7
 80119e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ea:	4770      	bx	lr

080119ec <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80119ec:	b580      	push	{r7, lr}
 80119ee:	b084      	sub	sp, #16
 80119f0:	af00      	add	r7, sp, #0
 80119f2:	60f8      	str	r0, [r7, #12]
 80119f4:	60b9      	str	r1, [r7, #8]
 80119f6:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80119f8:	687a      	ldr	r2, [r7, #4]
 80119fa:	68b9      	ldr	r1, [r7, #8]
 80119fc:	68f8      	ldr	r0, [r7, #12]
 80119fe:	f000 f804 	bl	8011a0a <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>
 8011a02:	bf00      	nop
 8011a04:	3710      	adds	r7, #16
 8011a06:	46bd      	mov	sp, r7
 8011a08:	bd80      	pop	{r7, pc}

08011a0a <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8011a0a:	b580      	push	{r7, lr}
 8011a0c:	b084      	sub	sp, #16
 8011a0e:	af00      	add	r7, sp, #0
 8011a10:	60f8      	str	r0, [r7, #12]
 8011a12:	60b9      	str	r1, [r7, #8]
 8011a14:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	011b      	lsls	r3, r3, #4
 8011a1a:	4619      	mov	r1, r3
 8011a1c:	68b8      	ldr	r0, [r7, #8]
 8011a1e:	f014 fa4c 	bl	8025eba <_ZdlPvj>
      }
 8011a22:	3710      	adds	r7, #16
 8011a24:	46bd      	mov	sp, r7
 8011a26:	bd80      	pop	{r7, pc}

08011a28 <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 8011a28:	b580      	push	{r7, lr}
 8011a2a:	b082      	sub	sp, #8
 8011a2c:	af00      	add	r7, sp, #0
 8011a2e:	6078      	str	r0, [r7, #4]
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	3304      	adds	r3, #4
 8011a34:	4618      	mov	r0, r3
 8011a36:	f7f9 f884 	bl	800ab42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	4618      	mov	r0, r3
 8011a3e:	3708      	adds	r7, #8
 8011a40:	46bd      	mov	sp, r7
 8011a42:	bd80      	pop	{r7, pc}

08011a44 <_ZNSt10shared_ptrI10SigmaDeltaED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 8011a44:	b580      	push	{r7, lr}
 8011a46:	b082      	sub	sp, #8
 8011a48:	af00      	add	r7, sp, #0
 8011a4a:	6078      	str	r0, [r7, #4]
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	4618      	mov	r0, r3
 8011a50:	f7ff ffea 	bl	8011a28 <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	4618      	mov	r0, r3
 8011a58:	3708      	adds	r7, #8
 8011a5a:	46bd      	mov	sp, r7
 8011a5c:	bd80      	pop	{r7, pc}
	...

08011a60 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>:
#include <cstdio>

#define CONFINE(value, min, max) (((value) < (min)) ? (min) : (((value) > (max)) ? (max) : (value)))
#define PID_SD_MAX 256 // 8-bit resolution

std::shared_ptr<Module> SigmaDelta::create(const JsonObject& config, Remora* instance) {
 8011a60:	b590      	push	{r4, r7, lr}
 8011a62:	b0b1      	sub	sp, #196	@ 0xc4
 8011a64:	af00      	add	r7, sp, #0
 8011a66:	60f8      	str	r0, [r7, #12]
 8011a68:	60b9      	str	r1, [r7, #8]
 8011a6a:	607a      	str	r2, [r7, #4]
    const char* comment = config["Comment"];
 8011a6c:	f107 0320 	add.w	r3, r7, #32
 8011a70:	4a55      	ldr	r2, [pc, #340]	@ (8011bc8 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x168>)
 8011a72:	68b9      	ldr	r1, [r7, #8]
 8011a74:	4618      	mov	r0, r3
 8011a76:	f7ff faec 	bl	8011052 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8011a7a:	f107 0320 	add.w	r3, r7, #32
 8011a7e:	4618      	mov	r0, r3
 8011a80:	f7f4 fe82 	bl	8006788 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8011a84:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
    printf("%s\n", comment);
 8011a88:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8011a8c:	f015 f940 	bl	8026d10 <puts>

    int spIndex = config["SP[i]"];
 8011a90:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8011a94:	4a4d      	ldr	r2, [pc, #308]	@ (8011bcc <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x16c>)
 8011a96:	68b9      	ldr	r1, [r7, #8]
 8011a98:	4618      	mov	r0, r3
 8011a9a:	f000 f9bb 	bl	8011e14 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA6_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8011a9e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	f7fc faff 	bl	800e0a6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>
 8011aa8:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
    const char* pin = config["SD Pin"];
 8011aac:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8011ab0:	4a47      	ldr	r2, [pc, #284]	@ (8011bd0 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x170>)
 8011ab2:	68b9      	ldr	r1, [r7, #8]
 8011ab4:	4618      	mov	r0, r3
 8011ab6:	f7f4 fe42 	bl	800673e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8011aba:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8011abe:	4618      	mov	r0, r3
 8011ac0:	f7f4 fe62 	bl	8006788 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8011ac4:	4603      	mov	r3, r0
 8011ac6:	61fb      	str	r3, [r7, #28]

    // Get pointer to the setpoint from the Remora instance
    volatile float* ptrSP = &instance->getRxData()->setPoint[spIndex];
 8011ac8:	6878      	ldr	r0, [r7, #4]
 8011aca:	f7fe f915 	bl	800fcf8 <_ZN6Remora9getRxDataEv>
 8011ace:	4602      	mov	r2, r0
 8011ad0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8011ad4:	3308      	adds	r3, #8
 8011ad6:	009b      	lsls	r3, r3, #2
 8011ad8:	4413      	add	r3, r2
 8011ada:	3304      	adds	r3, #4
 8011adc:	61bb      	str	r3, [r7, #24]

    printf("Creating SigmaDelta module: Pin=%s, SP Index=%d\n", pin, spIndex);
 8011ade:	69fb      	ldr	r3, [r7, #28]
 8011ae0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8011ae4:	4619      	mov	r1, r3
 8011ae6:	483b      	ldr	r0, [pc, #236]	@ (8011bd4 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x174>)
 8011ae8:	f015 f8a2 	bl	8026c30 <iprintf>

    // Check if "SD Max" exists in the config
    if (config["SD Max"].is<int>()) {
 8011aec:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8011af0:	4a39      	ldr	r2, [pc, #228]	@ (8011bd8 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x178>)
 8011af2:	68b9      	ldr	r1, [r7, #8]
 8011af4:	4618      	mov	r0, r3
 8011af6:	f7f4 fe22 	bl	800673e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8011afa:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8011afe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8011b02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011b06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 8011b0a:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8011b0e:	f7f5 febc 	bl	800788a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 8011b12:	4604      	mov	r4, r0
 8011b14:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8011b18:	f7f5 fd45 	bl	80075a6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 8011b1c:	4602      	mov	r2, r0
 8011b1e:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8011b22:	4621      	mov	r1, r4
 8011b24:	4618      	mov	r0, r3
 8011b26:	f7f2 fde0 	bl	80046ea <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 8011b2a:	bf00      	nop
template <typename TDerived>
template <typename T>
inline bool VariantRefBase<TDerived>::is() const {
  using variant_type =  // JsonVariantConst or JsonVariant?
      typename function_traits<decltype(&Converter<T>::checkJson)>::arg1_type;
  return Converter<T>::checkJson(getVariant<variant_type>());
 8011b2c:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8011b30:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011b34:	f000 f9f4 	bl	8011f20 <_ZN11ArduinoJson8V730HB229ConverterIivE9checkJsonENS0_16JsonVariantConstE>
 8011b38:	4603      	mov	r3, r0
 8011b3a:	bf00      	nop
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d028      	beq.n	8011b92 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x132>
        int SDmax = config["SD Max"];
 8011b40:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8011b44:	4a24      	ldr	r2, [pc, #144]	@ (8011bd8 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x178>)
 8011b46:	68b9      	ldr	r1, [r7, #8]
 8011b48:	4618      	mov	r0, r3
 8011b4a:	f7f4 fdf8 	bl	800673e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8011b4e:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8011b52:	4618      	mov	r0, r3
 8011b54:	f7fc faa7 	bl	800e0a6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>
 8011b58:	4603      	mov	r3, r0
 8011b5a:	617b      	str	r3, [r7, #20]
        printf("Using SD Max=%d\n", SDmax);
 8011b5c:	697b      	ldr	r3, [r7, #20]
 8011b5e:	4619      	mov	r1, r3
 8011b60:	481e      	ldr	r0, [pc, #120]	@ (8011bdc <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x17c>)
 8011b62:	f015 f865 	bl	8026c30 <iprintf>
        return std::make_shared<SigmaDelta>(pin, ptrSP, SDmax);
 8011b66:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 8011b6a:	f107 0314 	add.w	r3, r7, #20
 8011b6e:	f107 0218 	add.w	r2, r7, #24
 8011b72:	f107 011c 	add.w	r1, r7, #28
 8011b76:	f000 f972 	bl	8011e5e <_ZSt11make_sharedI10SigmaDeltaJRPKcRPVfRiEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESB_E4typeEEDpOT0_>
 8011b7a:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8011b7e:	4619      	mov	r1, r3
 8011b80:	68f8      	ldr	r0, [r7, #12]
 8011b82:	f000 f98d 	bl	8011ea0 <_ZNSt10shared_ptrI6ModuleEC1I10SigmaDeltavEEOS_IT_E>
 8011b86:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8011b8a:	4618      	mov	r0, r3
 8011b8c:	f7ff ff5a 	bl	8011a44 <_ZNSt10shared_ptrI10SigmaDeltaED1Ev>
    } else {
        printf("Using default SD Max\n");
        return std::make_shared<SigmaDelta>(pin, ptrSP);
    }
}
 8011b90:	e016      	b.n	8011bc0 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x160>
        printf("Using default SD Max\n");
 8011b92:	4813      	ldr	r0, [pc, #76]	@ (8011be0 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x180>)
 8011b94:	f015 f8bc 	bl	8026d10 <puts>
        return std::make_shared<SigmaDelta>(pin, ptrSP);
 8011b98:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8011b9c:	f107 0218 	add.w	r2, r7, #24
 8011ba0:	f107 011c 	add.w	r1, r7, #28
 8011ba4:	4618      	mov	r0, r3
 8011ba6:	f000 f98e 	bl	8011ec6 <_ZSt11make_sharedI10SigmaDeltaJRPKcRPVfEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESA_E4typeEEDpOT0_>
 8011baa:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8011bae:	4619      	mov	r1, r3
 8011bb0:	68f8      	ldr	r0, [r7, #12]
 8011bb2:	f000 f975 	bl	8011ea0 <_ZNSt10shared_ptrI6ModuleEC1I10SigmaDeltavEEOS_IT_E>
 8011bb6:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8011bba:	4618      	mov	r0, r3
 8011bbc:	f7ff ff42 	bl	8011a44 <_ZNSt10shared_ptrI10SigmaDeltaED1Ev>
}
 8011bc0:	68f8      	ldr	r0, [r7, #12]
 8011bc2:	37c4      	adds	r7, #196	@ 0xc4
 8011bc4:	46bd      	mov	sp, r7
 8011bc6:	bd90      	pop	{r4, r7, pc}
 8011bc8:	080282b0 	.word	0x080282b0
 8011bcc:	080282b8 	.word	0x080282b8
 8011bd0:	080282c0 	.word	0x080282c0
 8011bd4:	080282c8 	.word	0x080282c8
 8011bd8:	080282fc 	.word	0x080282fc
 8011bdc:	08028304 	.word	0x08028304
 8011be0:	08028318 	.word	0x08028318

08011be4 <_ZN10SigmaDeltaC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPVf>:

SigmaDelta::SigmaDelta(const std::string& pin, volatile float* ptrSP) :
 8011be4:	b590      	push	{r4, r7, lr}
 8011be6:	b085      	sub	sp, #20
 8011be8:	af00      	add	r7, sp, #0
 8011bea:	60f8      	str	r0, [r7, #12]
 8011bec:	60b9      	str	r1, [r7, #8]
 8011bee:	607a      	str	r2, [r7, #4]
    SDmax(PID_SD_MAX - 1),
    setPoint(0),
    SDaccumulator(0),
    SDdirection(false),
    SDpin(new Pin(pin, OUTPUT)),
    ptrSP(ptrSP) {}
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	f7fe ffc6 	bl	8010b84 <_ZN6ModuleC1Ev>
 8011bf8:	4a14      	ldr	r2, [pc, #80]	@ (8011c4c <_ZN10SigmaDeltaC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPVf+0x68>)
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	601a      	str	r2, [r3, #0]
    pin(pin),
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	3318      	adds	r3, #24
 8011c02:	68b9      	ldr	r1, [r7, #8]
 8011c04:	4618      	mov	r0, r3
 8011c06:	f014 fc74 	bl	80264f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
    SDmax(PID_SD_MAX - 1),
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	22ff      	movs	r2, #255	@ 0xff
 8011c0e:	631a      	str	r2, [r3, #48]	@ 0x30
    setPoint(0),
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	2200      	movs	r2, #0
 8011c14:	635a      	str	r2, [r3, #52]	@ 0x34
    SDaccumulator(0),
 8011c16:	68fb      	ldr	r3, [r7, #12]
 8011c18:	2200      	movs	r2, #0
 8011c1a:	639a      	str	r2, [r3, #56]	@ 0x38
    SDdirection(false),
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	2200      	movs	r2, #0
 8011c20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    SDpin(new Pin(pin, OUTPUT)),
 8011c24:	2040      	movs	r0, #64	@ 0x40
 8011c26:	f014 f959 	bl	8025edc <_Znwj>
 8011c2a:	4603      	mov	r3, r0
 8011c2c:	461c      	mov	r4, r3
 8011c2e:	2201      	movs	r2, #1
 8011c30:	68b9      	ldr	r1, [r7, #8]
 8011c32:	4620      	mov	r0, r4
 8011c34:	f7f1 fde0 	bl	80037f8 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	641c      	str	r4, [r3, #64]	@ 0x40
    ptrSP(ptrSP) {}
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	687a      	ldr	r2, [r7, #4]
 8011c40:	645a      	str	r2, [r3, #68]	@ 0x44
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	4618      	mov	r0, r3
 8011c46:	3714      	adds	r7, #20
 8011c48:	46bd      	mov	sp, r7
 8011c4a:	bd90      	pop	{r4, r7, pc}
 8011c4c:	08028b0c 	.word	0x08028b0c

08011c50 <_ZN10SigmaDeltaC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPVfi>:

SigmaDelta::SigmaDelta(const std::string& pin, volatile float* ptrSP, int SDmax) :
 8011c50:	b590      	push	{r4, r7, lr}
 8011c52:	b085      	sub	sp, #20
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	60f8      	str	r0, [r7, #12]
 8011c58:	60b9      	str	r1, [r7, #8]
 8011c5a:	607a      	str	r2, [r7, #4]
 8011c5c:	603b      	str	r3, [r7, #0]
    SDmax(CONFINE(SDmax, 0, PID_SD_MAX - 1)),
    setPoint(0),
    SDaccumulator(0),
    SDdirection(false),
    SDpin(new Pin(pin, OUTPUT)),
    ptrSP(ptrSP) {}
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	4618      	mov	r0, r3
 8011c62:	f7fe ff8f 	bl	8010b84 <_ZN6ModuleC1Ev>
 8011c66:	4a19      	ldr	r2, [pc, #100]	@ (8011ccc <_ZN10SigmaDeltaC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPVfi+0x7c>)
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	601a      	str	r2, [r3, #0]
    pin(pin),
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	3318      	adds	r3, #24
 8011c70:	68b9      	ldr	r1, [r7, #8]
 8011c72:	4618      	mov	r0, r3
 8011c74:	f014 fc3d 	bl	80264f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
    SDmax(CONFINE(SDmax, 0, PID_SD_MAX - 1)),
 8011c78:	683b      	ldr	r3, [r7, #0]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	db04      	blt.n	8011c88 <_ZN10SigmaDeltaC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPVfi+0x38>
 8011c7e:	683b      	ldr	r3, [r7, #0]
 8011c80:	2bff      	cmp	r3, #255	@ 0xff
 8011c82:	bfa8      	it	ge
 8011c84:	23ff      	movge	r3, #255	@ 0xff
 8011c86:	e000      	b.n	8011c8a <_ZN10SigmaDeltaC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPVfi+0x3a>
 8011c88:	2300      	movs	r3, #0
 8011c8a:	68fa      	ldr	r2, [r7, #12]
 8011c8c:	6313      	str	r3, [r2, #48]	@ 0x30
    setPoint(0),
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	2200      	movs	r2, #0
 8011c92:	635a      	str	r2, [r3, #52]	@ 0x34
    SDaccumulator(0),
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	2200      	movs	r2, #0
 8011c98:	639a      	str	r2, [r3, #56]	@ 0x38
    SDdirection(false),
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	2200      	movs	r2, #0
 8011c9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    SDpin(new Pin(pin, OUTPUT)),
 8011ca2:	2040      	movs	r0, #64	@ 0x40
 8011ca4:	f014 f91a 	bl	8025edc <_Znwj>
 8011ca8:	4603      	mov	r3, r0
 8011caa:	461c      	mov	r4, r3
 8011cac:	2201      	movs	r2, #1
 8011cae:	68b9      	ldr	r1, [r7, #8]
 8011cb0:	4620      	mov	r0, r4
 8011cb2:	f7f1 fda1 	bl	80037f8 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	641c      	str	r4, [r3, #64]	@ 0x40
    ptrSP(ptrSP) {}
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	687a      	ldr	r2, [r7, #4]
 8011cbe:	645a      	str	r2, [r3, #68]	@ 0x44
 8011cc0:	68fb      	ldr	r3, [r7, #12]
 8011cc2:	4618      	mov	r0, r3
 8011cc4:	3714      	adds	r7, #20
 8011cc6:	46bd      	mov	sp, r7
 8011cc8:	bd90      	pop	{r4, r7, pc}
 8011cca:	bf00      	nop
 8011ccc:	08028b0c 	.word	0x08028b0c

08011cd0 <_ZN10SigmaDelta6updateEv>:
    newSdSP = CONFINE(newSdSP, 0, 100);
    // Scale the percentage to fit within the range of PID_SD_MAX
    this->setPoint = (newSdSP * (PID_SD_MAX - 1)) / 100;
}

void SigmaDelta::update() {
 8011cd0:	b580      	push	{r7, lr}
 8011cd2:	b084      	sub	sp, #16
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	6078      	str	r0, [r7, #4]
    // Read set point from the data source
    float newSP = *ptrSP;
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	60fb      	str	r3, [r7, #12]

    // Scale from 0-100% to 0-SDmax
    int scaledSP = static_cast<int>((newSP / 100.0f) * SDmax);
 8011ce0:	edd7 7a03 	vldr	s15, [r7, #12]
 8011ce4:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8011dfc <_ZN10SigmaDelta6updateEv+0x12c>
 8011ce8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011cf0:	ee07 3a90 	vmov	s15, r3
 8011cf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011cf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011cfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011d00:	ee17 3a90 	vmov	r3, s15
 8011d04:	60bb      	str	r3, [r7, #8]

    // Check if the setpoint has changed
    if (scaledSP != setPoint) {
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011d0a:	68ba      	ldr	r2, [r7, #8]
 8011d0c:	429a      	cmp	r2, r3
 8011d0e:	d00f      	beq.n	8011d30 <_ZN10SigmaDelta6updateEv+0x60>
        setPoint = CONFINE(scaledSP, 0, SDmax);
 8011d10:	68bb      	ldr	r3, [r7, #8]
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	db09      	blt.n	8011d2a <_ZN10SigmaDelta6updateEv+0x5a>
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011d1a:	68ba      	ldr	r2, [r7, #8]
 8011d1c:	429a      	cmp	r2, r3
 8011d1e:	dd02      	ble.n	8011d26 <_ZN10SigmaDelta6updateEv+0x56>
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011d24:	e002      	b.n	8011d2c <_ZN10SigmaDelta6updateEv+0x5c>
 8011d26:	68bb      	ldr	r3, [r7, #8]
 8011d28:	e000      	b.n	8011d2c <_ZN10SigmaDelta6updateEv+0x5c>
 8011d2a:	2300      	movs	r3, #0
 8011d2c:	687a      	ldr	r2, [r7, #4]
 8011d2e:	6353      	str	r3, [r2, #52]	@ 0x34
    }

    // Sigma-Delta modulation logic
    if (setPoint <= 0) {
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	dc06      	bgt.n	8011d46 <_ZN10SigmaDelta6updateEv+0x76>
        SDpin->set(false);
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011d3c:	2100      	movs	r1, #0
 8011d3e:	4618      	mov	r0, r3
 8011d40:	f7f1 ff04 	bl	8003b4c <_ZN3Pin3setEb>
        return;
 8011d44:	e057      	b.n	8011df6 <_ZN10SigmaDelta6updateEv+0x126>
    } else if (setPoint >= SDmax) {
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011d4e:	429a      	cmp	r2, r3
 8011d50:	db06      	blt.n	8011d60 <_ZN10SigmaDelta6updateEv+0x90>
        SDpin->set(true);
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011d56:	2101      	movs	r1, #1
 8011d58:	4618      	mov	r0, r3
 8011d5a:	f7f1 fef7 	bl	8003b4c <_ZN3Pin3setEb>
        return;
 8011d5e:	e04a      	b.n	8011df6 <_ZN10SigmaDelta6updateEv+0x126>
    }

    SDaccumulator = CONFINE(SDaccumulator, -SDmax, SDmax << 1);
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011d68:	425b      	negs	r3, r3
 8011d6a:	429a      	cmp	r2, r3
 8011d6c:	da03      	bge.n	8011d76 <_ZN10SigmaDelta6updateEv+0xa6>
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011d72:	425b      	negs	r3, r3
 8011d74:	e007      	b.n	8011d86 <_ZN10SigmaDelta6updateEv+0xb6>
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011d7e:	005b      	lsls	r3, r3, #1
 8011d80:	4293      	cmp	r3, r2
 8011d82:	bfa8      	it	ge
 8011d84:	4613      	movge	r3, r2
 8011d86:	687a      	ldr	r2, [r7, #4]
 8011d88:	6393      	str	r3, [r2, #56]	@ 0x38

    if (!SDdirection) {
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011d90:	f083 0301 	eor.w	r3, r3, #1
 8011d94:	b2db      	uxtb	r3, r3
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d012      	beq.n	8011dc0 <_ZN10SigmaDelta6updateEv+0xf0>
        SDaccumulator += setPoint;
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011da2:	441a      	add	r2, r3
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	639a      	str	r2, [r3, #56]	@ 0x38
        if (SDaccumulator >= (SDmax >> 1)) {
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011db0:	105b      	asrs	r3, r3, #1
 8011db2:	429a      	cmp	r2, r3
 8011db4:	db16      	blt.n	8011de4 <_ZN10SigmaDelta6updateEv+0x114>
            SDdirection = true;
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	2201      	movs	r2, #1
 8011dba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8011dbe:	e011      	b.n	8011de4 <_ZN10SigmaDelta6updateEv+0x114>
        }
    } else {
        SDaccumulator -= (SDmax - setPoint);
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011dcc:	1acb      	subs	r3, r1, r3
 8011dce:	1ad2      	subs	r2, r2, r3
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	639a      	str	r2, [r3, #56]	@ 0x38
        if (SDaccumulator <= 0) {
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	dc03      	bgt.n	8011de4 <_ZN10SigmaDelta6updateEv+0x114>
            SDdirection = false;
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	2200      	movs	r2, #0
 8011de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        }
    }

    SDpin->set(SDdirection);
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011dee:	4619      	mov	r1, r3
 8011df0:	4610      	mov	r0, r2
 8011df2:	f7f1 feab 	bl	8003b4c <_ZN3Pin3setEb>
}
 8011df6:	3710      	adds	r7, #16
 8011df8:	46bd      	mov	sp, r7
 8011dfa:	bd80      	pop	{r7, pc}
 8011dfc:	42c80000 	.word	0x42c80000

08011e00 <_ZN10SigmaDelta10slowUpdateEv>:

void SigmaDelta::slowUpdate() {}
 8011e00:	b480      	push	{r7}
 8011e02:	b083      	sub	sp, #12
 8011e04:	af00      	add	r7, sp, #0
 8011e06:	6078      	str	r0, [r7, #4]
 8011e08:	bf00      	nop
 8011e0a:	370c      	adds	r7, #12
 8011e0c:	46bd      	mov	sp, r7
 8011e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e12:	4770      	bx	lr

08011e14 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA6_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:

  // Gets or sets the member with specified key.
  // https://arduinojson.org/v7/api/jsonobject/subscript/
  template <typename TString,
            detail::enable_if_t<detail::IsString<TString>::value, int> = 0>
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 8011e14:	b580      	push	{r7, lr}
 8011e16:	b08c      	sub	sp, #48	@ 0x30
 8011e18:	af02      	add	r7, sp, #8
 8011e1a:	60f8      	str	r0, [r7, #12]
 8011e1c:	60b9      	str	r1, [r7, #8]
 8011e1e:	607a      	str	r2, [r7, #4]
      const TString& key) const {
    return {*this, detail::adaptString(key)};
 8011e20:	68ba      	ldr	r2, [r7, #8]
 8011e22:	f107 0314 	add.w	r3, r7, #20
 8011e26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011e2a:	e883 0003 	stmia.w	r3, {r0, r1}
 8011e2e:	f107 031c 	add.w	r3, r7, #28
 8011e32:	6879      	ldr	r1, [r7, #4]
 8011e34:	4618      	mov	r0, r3
 8011e36:	f000 f860 	bl	8011efa <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA6_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8011e3a:	466a      	mov	r2, sp
 8011e3c:	f107 0320 	add.w	r3, r7, #32
 8011e40:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011e44:	e882 0003 	stmia.w	r2, {r0, r1}
 8011e48:	69fb      	ldr	r3, [r7, #28]
 8011e4a:	f107 0214 	add.w	r2, r7, #20
 8011e4e:	ca06      	ldmia	r2, {r1, r2}
 8011e50:	68f8      	ldr	r0, [r7, #12]
 8011e52:	f7f4 fe08 	bl	8006a66 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 8011e56:	68f8      	ldr	r0, [r7, #12]
 8011e58:	3728      	adds	r7, #40	@ 0x28
 8011e5a:	46bd      	mov	sp, r7
 8011e5c:	bd80      	pop	{r7, pc}

08011e5e <_ZSt11make_sharedI10SigmaDeltaJRPKcRPVfRiEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESB_E4typeEEDpOT0_>:
    make_shared(_Args&&... __args)
 8011e5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e60:	b089      	sub	sp, #36	@ 0x24
 8011e62:	af02      	add	r7, sp, #8
 8011e64:	60f8      	str	r0, [r7, #12]
 8011e66:	60b9      	str	r1, [r7, #8]
 8011e68:	607a      	str	r2, [r7, #4]
 8011e6a:	603b      	str	r3, [r7, #0]
			     std::forward<_Args>(__args)...);
 8011e6c:	f107 0314 	add.w	r3, r7, #20
 8011e70:	461e      	mov	r6, r3
 8011e72:	68b8      	ldr	r0, [r7, #8]
 8011e74:	f7fc fa4d 	bl	800e312 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8011e78:	4604      	mov	r4, r0
 8011e7a:	6878      	ldr	r0, [r7, #4]
 8011e7c:	f000 f871 	bl	8011f62 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 8011e80:	4605      	mov	r5, r0
 8011e82:	6838      	ldr	r0, [r7, #0]
 8011e84:	f7fc fa50 	bl	800e328 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 8011e88:	4603      	mov	r3, r0
 8011e8a:	9300      	str	r3, [sp, #0]
 8011e8c:	462b      	mov	r3, r5
 8011e8e:	4622      	mov	r2, r4
 8011e90:	4631      	mov	r1, r6
 8011e92:	68f8      	ldr	r0, [r7, #12]
 8011e94:	f000 f870 	bl	8011f78 <_ZNSt10shared_ptrI10SigmaDeltaEC1ISaIvEJRPKcRPVfRiEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
    }
 8011e98:	68f8      	ldr	r0, [r7, #12]
 8011e9a:	371c      	adds	r7, #28
 8011e9c:	46bd      	mov	sp, r7
 8011e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011ea0 <_ZNSt10shared_ptrI6ModuleEC1I10SigmaDeltavEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 8011ea0:	b590      	push	{r4, r7, lr}
 8011ea2:	b083      	sub	sp, #12
 8011ea4:	af00      	add	r7, sp, #0
 8011ea6:	6078      	str	r0, [r7, #4]
 8011ea8:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 8011eaa:	687c      	ldr	r4, [r7, #4]
 8011eac:	6838      	ldr	r0, [r7, #0]
 8011eae:	f000 f883 	bl	8011fb8 <_ZSt4moveIRSt10shared_ptrI10SigmaDeltaEEONSt16remove_referenceIT_E4typeEOS5_>
 8011eb2:	4603      	mov	r3, r0
 8011eb4:	4619      	mov	r1, r3
 8011eb6:	4620      	mov	r0, r4
 8011eb8:	f000 f889 	bl	8011fce <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I10SigmaDeltavEEOS_IT_LS2_0EE>
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	4618      	mov	r0, r3
 8011ec0:	370c      	adds	r7, #12
 8011ec2:	46bd      	mov	sp, r7
 8011ec4:	bd90      	pop	{r4, r7, pc}

08011ec6 <_ZSt11make_sharedI10SigmaDeltaJRPKcRPVfEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESA_E4typeEEDpOT0_>:
    make_shared(_Args&&... __args)
 8011ec6:	b5b0      	push	{r4, r5, r7, lr}
 8011ec8:	b086      	sub	sp, #24
 8011eca:	af00      	add	r7, sp, #0
 8011ecc:	60f8      	str	r0, [r7, #12]
 8011ece:	60b9      	str	r1, [r7, #8]
 8011ed0:	607a      	str	r2, [r7, #4]
			     std::forward<_Args>(__args)...);
 8011ed2:	f107 0314 	add.w	r3, r7, #20
 8011ed6:	461d      	mov	r5, r3
 8011ed8:	68b8      	ldr	r0, [r7, #8]
 8011eda:	f7fc fa1a 	bl	800e312 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8011ede:	4604      	mov	r4, r0
 8011ee0:	6878      	ldr	r0, [r7, #4]
 8011ee2:	f000 f83e 	bl	8011f62 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 8011ee6:	4603      	mov	r3, r0
 8011ee8:	4622      	mov	r2, r4
 8011eea:	4629      	mov	r1, r5
 8011eec:	68f8      	ldr	r0, [r7, #12]
 8011eee:	f000 f88c 	bl	801200a <_ZNSt10shared_ptrI10SigmaDeltaEC1ISaIvEJRPKcRPVfEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
    }
 8011ef2:	68f8      	ldr	r0, [r7, #12]
 8011ef4:	3718      	adds	r7, #24
 8011ef6:	46bd      	mov	sp, r7
 8011ef8:	bdb0      	pop	{r4, r5, r7, pc}

08011efa <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA6_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 8011efa:	b580      	push	{r7, lr}
 8011efc:	b082      	sub	sp, #8
 8011efe:	af00      	add	r7, sp, #0
 8011f00:	6078      	str	r0, [r7, #4]
 8011f02:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8011f04:	6838      	ldr	r0, [r7, #0]
 8011f06:	f000 f89a 	bl	801203e <_ZN11ArduinoJson8V730HB226detail7forwardIRA6_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8011f0a:	4602      	mov	r2, r0
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	4611      	mov	r1, r2
 8011f10:	4618      	mov	r0, r3
 8011f12:	f000 f89f 	bl	8012054 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA6_KcvE5adaptES5_>
 8011f16:	bf00      	nop
}
 8011f18:	6878      	ldr	r0, [r7, #4]
 8011f1a:	3708      	adds	r7, #8
 8011f1c:	46bd      	mov	sp, r7
 8011f1e:	bd80      	pop	{r7, pc}

08011f20 <_ZN11ArduinoJson8V730HB229ConverterIivE9checkJsonENS0_16JsonVariantConstE>:
    auto data = getData(src);
    auto resources = getResourceManager(src);
    return data ? data->template asIntegral<T>(resources) : T();
  }

  static bool checkJson(JsonVariantConst src) {
 8011f20:	b580      	push	{r7, lr}
 8011f22:	b084      	sub	sp, #16
 8011f24:	af00      	add	r7, sp, #0
 8011f26:	463b      	mov	r3, r7
 8011f28:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 8011f2c:	463b      	mov	r3, r7
 8011f2e:	4618      	mov	r0, r3
 8011f30:	f7f4 f95a 	bl	80061e8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8011f34:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 8011f36:	463b      	mov	r3, r7
 8011f38:	4618      	mov	r0, r3
 8011f3a:	f7f4 f961 	bl	8006200 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 8011f3e:	60b8      	str	r0, [r7, #8]
    return data && data->template isInteger<T>(resources);
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d008      	beq.n	8011f58 <_ZN11ArduinoJson8V730HB229ConverterIivE9checkJsonENS0_16JsonVariantConstE+0x38>
 8011f46:	68b9      	ldr	r1, [r7, #8]
 8011f48:	68f8      	ldr	r0, [r7, #12]
 8011f4a:	f000 f893 	bl	8012074 <_ZNK11ArduinoJson8V730HB226detail11VariantData9isIntegerIiEEbPKNS1_15ResourceManagerE>
 8011f4e:	4603      	mov	r3, r0
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d001      	beq.n	8011f58 <_ZN11ArduinoJson8V730HB229ConverterIivE9checkJsonENS0_16JsonVariantConstE+0x38>
 8011f54:	2301      	movs	r3, #1
 8011f56:	e000      	b.n	8011f5a <_ZN11ArduinoJson8V730HB229ConverterIivE9checkJsonENS0_16JsonVariantConstE+0x3a>
 8011f58:	2300      	movs	r3, #0
  }
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	3710      	adds	r7, #16
 8011f5e:	46bd      	mov	sp, r7
 8011f60:	bd80      	pop	{r7, pc}

08011f62 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011f62:	b480      	push	{r7}
 8011f64:	b083      	sub	sp, #12
 8011f66:	af00      	add	r7, sp, #0
 8011f68:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	4618      	mov	r0, r3
 8011f6e:	370c      	adds	r7, #12
 8011f70:	46bd      	mov	sp, r7
 8011f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f76:	4770      	bx	lr

08011f78 <_ZNSt10shared_ptrI10SigmaDeltaEC1ISaIvEJRPKcRPVfRiEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 8011f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f7a:	b087      	sub	sp, #28
 8011f7c:	af02      	add	r7, sp, #8
 8011f7e:	60f8      	str	r0, [r7, #12]
 8011f80:	60b9      	str	r1, [r7, #8]
 8011f82:	607a      	str	r2, [r7, #4]
 8011f84:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 8011f86:	68fc      	ldr	r4, [r7, #12]
 8011f88:	6878      	ldr	r0, [r7, #4]
 8011f8a:	f7fc f9c2 	bl	800e312 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8011f8e:	4605      	mov	r5, r0
 8011f90:	6838      	ldr	r0, [r7, #0]
 8011f92:	f7ff ffe6 	bl	8011f62 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 8011f96:	4606      	mov	r6, r0
 8011f98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011f9a:	f7fc f9c5 	bl	800e328 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 8011f9e:	4603      	mov	r3, r0
 8011fa0:	9300      	str	r3, [sp, #0]
 8011fa2:	4633      	mov	r3, r6
 8011fa4:	462a      	mov	r2, r5
 8011fa6:	68b9      	ldr	r1, [r7, #8]
 8011fa8:	4620      	mov	r0, r4
 8011faa:	f000 f8c1 	bl	8012130 <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJRPKcRPVfRiEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
	{ }
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	4618      	mov	r0, r3
 8011fb2:	3714      	adds	r7, #20
 8011fb4:	46bd      	mov	sp, r7
 8011fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011fb8 <_ZSt4moveIRSt10shared_ptrI10SigmaDeltaEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8011fb8:	b480      	push	{r7}
 8011fba:	b083      	sub	sp, #12
 8011fbc:	af00      	add	r7, sp, #0
 8011fbe:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	4618      	mov	r0, r3
 8011fc4:	370c      	adds	r7, #12
 8011fc6:	46bd      	mov	sp, r7
 8011fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fcc:	4770      	bx	lr

08011fce <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I10SigmaDeltavEEOS_IT_LS2_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 8011fce:	b580      	push	{r7, lr}
 8011fd0:	b082      	sub	sp, #8
 8011fd2:	af00      	add	r7, sp, #0
 8011fd4:	6078      	str	r0, [r7, #4]
 8011fd6:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 8011fd8:	683b      	ldr	r3, [r7, #0]
 8011fda:	681a      	ldr	r2, [r3, #0]
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	601a      	str	r2, [r3, #0]
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	3304      	adds	r3, #4
 8011fe4:	4618      	mov	r0, r3
 8011fe6:	f7f9 ffa9 	bl	800bf3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	1d1a      	adds	r2, r3, #4
 8011fee:	683b      	ldr	r3, [r7, #0]
 8011ff0:	3304      	adds	r3, #4
 8011ff2:	4619      	mov	r1, r3
 8011ff4:	4610      	mov	r0, r2
 8011ff6:	f7fa fb60 	bl	800c6ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = nullptr;
 8011ffa:	683b      	ldr	r3, [r7, #0]
 8011ffc:	2200      	movs	r2, #0
 8011ffe:	601a      	str	r2, [r3, #0]
	}
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	4618      	mov	r0, r3
 8012004:	3708      	adds	r7, #8
 8012006:	46bd      	mov	sp, r7
 8012008:	bd80      	pop	{r7, pc}

0801200a <_ZNSt10shared_ptrI10SigmaDeltaEC1ISaIvEJRPKcRPVfEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 801200a:	b5b0      	push	{r4, r5, r7, lr}
 801200c:	b084      	sub	sp, #16
 801200e:	af00      	add	r7, sp, #0
 8012010:	60f8      	str	r0, [r7, #12]
 8012012:	60b9      	str	r1, [r7, #8]
 8012014:	607a      	str	r2, [r7, #4]
 8012016:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 8012018:	68fc      	ldr	r4, [r7, #12]
 801201a:	6878      	ldr	r0, [r7, #4]
 801201c:	f7fc f979 	bl	800e312 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8012020:	4605      	mov	r5, r0
 8012022:	6838      	ldr	r0, [r7, #0]
 8012024:	f7ff ff9d 	bl	8011f62 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 8012028:	4603      	mov	r3, r0
 801202a:	462a      	mov	r2, r5
 801202c:	68b9      	ldr	r1, [r7, #8]
 801202e:	4620      	mov	r0, r4
 8012030:	f000 f8ac 	bl	801218c <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJRPKcRPVfEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
	{ }
 8012034:	68fb      	ldr	r3, [r7, #12]
 8012036:	4618      	mov	r0, r3
 8012038:	3710      	adds	r7, #16
 801203a:	46bd      	mov	sp, r7
 801203c:	bdb0      	pop	{r4, r5, r7, pc}

0801203e <_ZN11ArduinoJson8V730HB226detail7forwardIRA6_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 801203e:	b480      	push	{r7}
 8012040:	b083      	sub	sp, #12
 8012042:	af00      	add	r7, sp, #0
 8012044:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8012046:	687b      	ldr	r3, [r7, #4]
}
 8012048:	4618      	mov	r0, r3
 801204a:	370c      	adds	r7, #12
 801204c:	46bd      	mov	sp, r7
 801204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012052:	4770      	bx	lr

08012054 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA6_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 8012054:	b580      	push	{r7, lr}
 8012056:	b082      	sub	sp, #8
 8012058:	af00      	add	r7, sp, #0
 801205a:	6078      	str	r0, [r7, #4]
 801205c:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 801205e:	2301      	movs	r3, #1
 8012060:	2205      	movs	r2, #5
 8012062:	6839      	ldr	r1, [r7, #0]
 8012064:	6878      	ldr	r0, [r7, #4]
 8012066:	f7f1 ff79 	bl	8003f5c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 801206a:	6878      	ldr	r0, [r7, #4]
 801206c:	3708      	adds	r7, #8
 801206e:	46bd      	mov	sp, r7
 8012070:	bd80      	pop	{r7, pc}
	...

08012074 <_ZNK11ArduinoJson8V730HB226detail11VariantData9isIntegerIiEEbPKNS1_15ResourceManagerE>:
  bool isInteger(const ResourceManager* resources) const {
 8012074:	b580      	push	{r7, lr}
 8012076:	b084      	sub	sp, #16
 8012078:	af00      	add	r7, sp, #0
 801207a:	6078      	str	r0, [r7, #4]
 801207c:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 801207e:	6839      	ldr	r1, [r7, #0]
 8012080:	6878      	ldr	r0, [r7, #4]
 8012082:	f7f3 f8c7 	bl	8005214 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 8012086:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	791b      	ldrb	r3, [r3, #4]
 801208c:	3b0a      	subs	r3, #10
 801208e:	2b12      	cmp	r3, #18
 8012090:	d848      	bhi.n	8012124 <_ZNK11ArduinoJson8V730HB226detail11VariantData9isIntegerIiEEbPKNS1_15ResourceManagerE+0xb0>
 8012092:	a201      	add	r2, pc, #4	@ (adr r2, 8012098 <_ZNK11ArduinoJson8V730HB226detail11VariantData9isIntegerIiEEbPKNS1_15ResourceManagerE+0x24>)
 8012094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012098:	080120e5 	.word	0x080120e5
 801209c:	08012125 	.word	0x08012125
 80120a0:	080120f3 	.word	0x080120f3
 80120a4:	08012125 	.word	0x08012125
 80120a8:	08012125 	.word	0x08012125
 80120ac:	08012125 	.word	0x08012125
 80120b0:	08012125 	.word	0x08012125
 80120b4:	08012125 	.word	0x08012125
 80120b8:	08012125 	.word	0x08012125
 80120bc:	08012125 	.word	0x08012125
 80120c0:	08012125 	.word	0x08012125
 80120c4:	08012125 	.word	0x08012125
 80120c8:	08012125 	.word	0x08012125
 80120cc:	08012125 	.word	0x08012125
 80120d0:	08012125 	.word	0x08012125
 80120d4:	08012125 	.word	0x08012125
 80120d8:	08012101 	.word	0x08012101
 80120dc:	08012125 	.word	0x08012125
 80120e0:	08012113 	.word	0x08012113
        return canConvertNumber<T>(content_.asUint32);
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	4618      	mov	r0, r3
 80120ea:	f7fc fe54 	bl	800ed96 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIimEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 80120ee:	4603      	mov	r3, r0
 80120f0:	e019      	b.n	8012126 <_ZNK11ArduinoJson8V730HB226detail11VariantData9isIntegerIiEEbPKNS1_15ResourceManagerE+0xb2>
        return canConvertNumber<T>(content_.asInt32);
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	4618      	mov	r0, r3
 80120f8:	f7fc fe5f 	bl	800edba <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIilEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valuelestS5_stS9_EbE4typeES5_>
 80120fc:	4603      	mov	r3, r0
 80120fe:	e012      	b.n	8012126 <_ZNK11ArduinoJson8V730HB226detail11VariantData9isIntegerIiEEbPKNS1_15ResourceManagerE+0xb2>
        return canConvertNumber<T>(extension->asUint64);
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012106:	4610      	mov	r0, r2
 8012108:	4619      	mov	r1, r3
 801210a:	f7fc fe61 	bl	800edd0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIiyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 801210e:	4603      	mov	r3, r0
 8012110:	e009      	b.n	8012126 <_ZNK11ArduinoJson8V730HB226detail11VariantData9isIntegerIiEEbPKNS1_15ResourceManagerE+0xb2>
        return canConvertNumber<T>(extension->asInt64);
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012118:	4610      	mov	r0, r2
 801211a:	4619      	mov	r1, r3
 801211c:	f7fc fe70 	bl	800ee00 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>
 8012120:	4603      	mov	r3, r0
 8012122:	e000      	b.n	8012126 <_ZNK11ArduinoJson8V730HB226detail11VariantData9isIntegerIiEEbPKNS1_15ResourceManagerE+0xb2>
        return false;
 8012124:	2300      	movs	r3, #0
  }
 8012126:	4618      	mov	r0, r3
 8012128:	3710      	adds	r7, #16
 801212a:	46bd      	mov	sp, r7
 801212c:	bd80      	pop	{r7, pc}
 801212e:	bf00      	nop

08012130 <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJRPKcRPVfRiEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 8012130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012134:	b086      	sub	sp, #24
 8012136:	af02      	add	r7, sp, #8
 8012138:	60f8      	str	r0, [r7, #12]
 801213a:	60b9      	str	r1, [r7, #8]
 801213c:	607a      	str	r2, [r7, #4]
 801213e:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	2200      	movs	r2, #0
 8012144:	601a      	str	r2, [r3, #0]
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	1d1c      	adds	r4, r3, #4
 801214a:	68fd      	ldr	r5, [r7, #12]
 801214c:	6878      	ldr	r0, [r7, #4]
 801214e:	f7fc f8e0 	bl	800e312 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8012152:	4680      	mov	r8, r0
 8012154:	6838      	ldr	r0, [r7, #0]
 8012156:	f7ff ff04 	bl	8011f62 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 801215a:	4606      	mov	r6, r0
 801215c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801215e:	f7fc f8e3 	bl	800e328 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 8012162:	4603      	mov	r3, r0
 8012164:	9301      	str	r3, [sp, #4]
 8012166:	9600      	str	r6, [sp, #0]
 8012168:	4643      	mov	r3, r8
 801216a:	68ba      	ldr	r2, [r7, #8]
 801216c:	4629      	mov	r1, r5
 801216e:	4620      	mov	r0, r4
 8012170:	f000 f833 	bl	80121da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I10SigmaDeltaSaIvEJRPKcRPVfRiEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>
	{ _M_enable_shared_from_this_with(_M_ptr); }
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	4619      	mov	r1, r3
 801217a:	68f8      	ldr	r0, [r7, #12]
 801217c:	f000 f883 	bl	8012286 <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
 8012180:	68fb      	ldr	r3, [r7, #12]
 8012182:	4618      	mov	r0, r3
 8012184:	3710      	adds	r7, #16
 8012186:	46bd      	mov	sp, r7
 8012188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801218c <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJRPKcRPVfEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 801218c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801218e:	b087      	sub	sp, #28
 8012190:	af02      	add	r7, sp, #8
 8012192:	60f8      	str	r0, [r7, #12]
 8012194:	60b9      	str	r1, [r7, #8]
 8012196:	607a      	str	r2, [r7, #4]
 8012198:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	2200      	movs	r2, #0
 801219e:	601a      	str	r2, [r3, #0]
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	1d1c      	adds	r4, r3, #4
 80121a4:	68fd      	ldr	r5, [r7, #12]
 80121a6:	6878      	ldr	r0, [r7, #4]
 80121a8:	f7fc f8b3 	bl	800e312 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 80121ac:	4606      	mov	r6, r0
 80121ae:	6838      	ldr	r0, [r7, #0]
 80121b0:	f7ff fed7 	bl	8011f62 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 80121b4:	4603      	mov	r3, r0
 80121b6:	9300      	str	r3, [sp, #0]
 80121b8:	4633      	mov	r3, r6
 80121ba:	68ba      	ldr	r2, [r7, #8]
 80121bc:	4629      	mov	r1, r5
 80121be:	4620      	mov	r0, r4
 80121c0:	f000 f86c 	bl	801229c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I10SigmaDeltaSaIvEJRPKcRPVfEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>
	{ _M_enable_shared_from_this_with(_M_ptr); }
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	4619      	mov	r1, r3
 80121ca:	68f8      	ldr	r0, [r7, #12]
 80121cc:	f000 f85b 	bl	8012286 <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	4618      	mov	r0, r3
 80121d4:	3714      	adds	r7, #20
 80121d6:	46bd      	mov	sp, r7
 80121d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080121da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I10SigmaDeltaSaIvEJRPKcRPVfRiEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>:
	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
 80121da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121de:	b08c      	sub	sp, #48	@ 0x30
 80121e0:	af02      	add	r7, sp, #8
 80121e2:	60f8      	str	r0, [r7, #12]
 80121e4:	60b9      	str	r1, [r7, #8]
 80121e6:	607a      	str	r2, [r7, #4]
 80121e8:	603b      	str	r3, [r7, #0]
	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 80121ea:	687a      	ldr	r2, [r7, #4]
 80121ec:	f107 031c 	add.w	r3, r7, #28
 80121f0:	4611      	mov	r1, r2
 80121f2:	4618      	mov	r0, r3
 80121f4:	f000 f8a0 	bl	8012338 <_ZNSaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	  auto __guard = std::__allocate_guarded(__a2);
 80121f8:	f107 0314 	add.w	r3, r7, #20
 80121fc:	f107 021c 	add.w	r2, r7, #28
 8012200:	4611      	mov	r1, r2
 8012202:	4618      	mov	r0, r3
 8012204:	f000 f8b1 	bl	801236a <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>
	  _Sp_cp_type* __mem = __guard.get();
 8012208:	f107 0314 	add.w	r3, r7, #20
 801220c:	4618      	mov	r0, r3
 801220e:	f000 f8d4 	bl	80123ba <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>
 8012212:	6278      	str	r0, [r7, #36]	@ 0x24
	  auto __pi = ::new (__mem)
 8012214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012216:	4619      	mov	r1, r3
 8012218:	2054      	movs	r0, #84	@ 0x54
 801221a:	f7f7 fa71 	bl	8009700 <_ZnwjPv>
 801221e:	4604      	mov	r4, r0
 8012220:	6838      	ldr	r0, [r7, #0]
 8012222:	f7fc f876 	bl	800e312 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8012226:	4605      	mov	r5, r0
 8012228:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801222a:	f7ff fe9a 	bl	8011f62 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 801222e:	4606      	mov	r6, r0
 8012230:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8012232:	f7fc f879 	bl	800e328 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 8012236:	4603      	mov	r3, r0
 8012238:	9300      	str	r3, [sp, #0]
 801223a:	4633      	mov	r3, r6
 801223c:	462a      	mov	r2, r5
 801223e:	4641      	mov	r1, r8
 8012240:	4620      	mov	r0, r4
 8012242:	f000 f8c9 	bl	80123d8 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcRPVfRiEEES1_DpOT_>
 8012246:	623c      	str	r4, [r7, #32]
	  __guard = nullptr;
 8012248:	f107 0314 	add.w	r3, r7, #20
 801224c:	2100      	movs	r1, #0
 801224e:	4618      	mov	r0, r3
 8012250:	f000 f8f6 	bl	8012440 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>
	  _M_pi = __pi;
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	6a3a      	ldr	r2, [r7, #32]
 8012258:	601a      	str	r2, [r3, #0]
	  __p = __pi->_M_ptr();
 801225a:	6a38      	ldr	r0, [r7, #32]
 801225c:	f000 f8ff 	bl	801245e <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8012260:	4602      	mov	r2, r0
 8012262:	68bb      	ldr	r3, [r7, #8]
 8012264:	601a      	str	r2, [r3, #0]
	}
 8012266:	f107 0314 	add.w	r3, r7, #20
 801226a:	4618      	mov	r0, r3
 801226c:	f000 f890 	bl	8012390 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 8012270:	f107 031c 	add.w	r3, r7, #28
 8012274:	4618      	mov	r0, r3
 8012276:	f000 f86c 	bl	8012352 <_ZNSaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	4618      	mov	r0, r3
 801227e:	3728      	adds	r7, #40	@ 0x28
 8012280:	46bd      	mov	sp, r7
 8012282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012286 <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 8012286:	b480      	push	{r7}
 8012288:	b083      	sub	sp, #12
 801228a:	af00      	add	r7, sp, #0
 801228c:	6078      	str	r0, [r7, #4]
 801228e:	6039      	str	r1, [r7, #0]
	{ }
 8012290:	bf00      	nop
 8012292:	370c      	adds	r7, #12
 8012294:	46bd      	mov	sp, r7
 8012296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801229a:	4770      	bx	lr

0801229c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I10SigmaDeltaSaIvEJRPKcRPVfEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>:
	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
 801229c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801229e:	b08b      	sub	sp, #44	@ 0x2c
 80122a0:	af00      	add	r7, sp, #0
 80122a2:	60f8      	str	r0, [r7, #12]
 80122a4:	60b9      	str	r1, [r7, #8]
 80122a6:	607a      	str	r2, [r7, #4]
 80122a8:	603b      	str	r3, [r7, #0]
	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 80122aa:	687a      	ldr	r2, [r7, #4]
 80122ac:	f107 031c 	add.w	r3, r7, #28
 80122b0:	4611      	mov	r1, r2
 80122b2:	4618      	mov	r0, r3
 80122b4:	f000 f840 	bl	8012338 <_ZNSaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	  auto __guard = std::__allocate_guarded(__a2);
 80122b8:	f107 0314 	add.w	r3, r7, #20
 80122bc:	f107 021c 	add.w	r2, r7, #28
 80122c0:	4611      	mov	r1, r2
 80122c2:	4618      	mov	r0, r3
 80122c4:	f000 f851 	bl	801236a <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>
	  _Sp_cp_type* __mem = __guard.get();
 80122c8:	f107 0314 	add.w	r3, r7, #20
 80122cc:	4618      	mov	r0, r3
 80122ce:	f000 f874 	bl	80123ba <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>
 80122d2:	6278      	str	r0, [r7, #36]	@ 0x24
	  auto __pi = ::new (__mem)
 80122d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122d6:	4619      	mov	r1, r3
 80122d8:	2054      	movs	r0, #84	@ 0x54
 80122da:	f7f7 fa11 	bl	8009700 <_ZnwjPv>
 80122de:	4604      	mov	r4, r0
 80122e0:	6838      	ldr	r0, [r7, #0]
 80122e2:	f7fc f816 	bl	800e312 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 80122e6:	4605      	mov	r5, r0
 80122e8:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80122ea:	f7ff fe3a 	bl	8011f62 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 80122ee:	4603      	mov	r3, r0
 80122f0:	462a      	mov	r2, r5
 80122f2:	4631      	mov	r1, r6
 80122f4:	4620      	mov	r0, r4
 80122f6:	f000 f8c1 	bl	801247c <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcRPVfEEES1_DpOT_>
 80122fa:	623c      	str	r4, [r7, #32]
	  __guard = nullptr;
 80122fc:	f107 0314 	add.w	r3, r7, #20
 8012300:	2100      	movs	r1, #0
 8012302:	4618      	mov	r0, r3
 8012304:	f000 f89c 	bl	8012440 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>
	  _M_pi = __pi;
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	6a3a      	ldr	r2, [r7, #32]
 801230c:	601a      	str	r2, [r3, #0]
	  __p = __pi->_M_ptr();
 801230e:	6a38      	ldr	r0, [r7, #32]
 8012310:	f000 f8a5 	bl	801245e <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8012314:	4602      	mov	r2, r0
 8012316:	68bb      	ldr	r3, [r7, #8]
 8012318:	601a      	str	r2, [r3, #0]
	}
 801231a:	f107 0314 	add.w	r3, r7, #20
 801231e:	4618      	mov	r0, r3
 8012320:	f000 f836 	bl	8012390 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 8012324:	f107 031c 	add.w	r3, r7, #28
 8012328:	4618      	mov	r0, r3
 801232a:	f000 f812 	bl	8012352 <_ZNSaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 801232e:	68fb      	ldr	r3, [r7, #12]
 8012330:	4618      	mov	r0, r3
 8012332:	372c      	adds	r7, #44	@ 0x2c
 8012334:	46bd      	mov	sp, r7
 8012336:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012338 <_ZNSaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
 8012338:	b580      	push	{r7, lr}
 801233a:	b082      	sub	sp, #8
 801233c:	af00      	add	r7, sp, #0
 801233e:	6078      	str	r0, [r7, #4]
 8012340:	6039      	str	r1, [r7, #0]
 8012342:	6878      	ldr	r0, [r7, #4]
 8012344:	f000 f8c8 	bl	80124d8 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	4618      	mov	r0, r3
 801234c:	3708      	adds	r7, #8
 801234e:	46bd      	mov	sp, r7
 8012350:	bd80      	pop	{r7, pc}

08012352 <_ZNSaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8012352:	b580      	push	{r7, lr}
 8012354:	b082      	sub	sp, #8
 8012356:	af00      	add	r7, sp, #0
 8012358:	6078      	str	r0, [r7, #4]
 801235a:	6878      	ldr	r0, [r7, #4]
 801235c:	f000 f8c7 	bl	80124ee <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	4618      	mov	r0, r3
 8012364:	3708      	adds	r7, #8
 8012366:	46bd      	mov	sp, r7
 8012368:	bd80      	pop	{r7, pc}

0801236a <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>:
    __allocate_guarded(_Alloc& __a)
 801236a:	b580      	push	{r7, lr}
 801236c:	b082      	sub	sp, #8
 801236e:	af00      	add	r7, sp, #0
 8012370:	6078      	str	r0, [r7, #4]
 8012372:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8012374:	2101      	movs	r1, #1
 8012376:	6838      	ldr	r0, [r7, #0]
 8012378:	f000 f8c4 	bl	8012504 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>
 801237c:	4603      	mov	r3, r0
 801237e:	461a      	mov	r2, r3
 8012380:	6839      	ldr	r1, [r7, #0]
 8012382:	6878      	ldr	r0, [r7, #4]
 8012384:	f000 f8cd 	bl	8012522 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
    }
 8012388:	6878      	ldr	r0, [r7, #4]
 801238a:	3708      	adds	r7, #8
 801238c:	46bd      	mov	sp, r7
 801238e:	bd80      	pop	{r7, pc}

08012390 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 8012390:	b580      	push	{r7, lr}
 8012392:	b082      	sub	sp, #8
 8012394:	af00      	add	r7, sp, #0
 8012396:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	685b      	ldr	r3, [r3, #4]
 801239c:	2b00      	cmp	r3, #0
 801239e:	d007      	beq.n	80123b0 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	6818      	ldr	r0, [r3, #0]
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	685b      	ldr	r3, [r3, #4]
 80123a8:	2201      	movs	r2, #1
 80123aa:	4619      	mov	r1, r3
 80123ac:	f000 f8cd 	bl	801254a <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>
      }
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	4618      	mov	r0, r3
 80123b4:	3708      	adds	r7, #8
 80123b6:	46bd      	mov	sp, r7
 80123b8:	bd80      	pop	{r7, pc}

080123ba <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>:
      value_type* get() { return std::__to_address(_M_ptr); }
 80123ba:	b580      	push	{r7, lr}
 80123bc:	b082      	sub	sp, #8
 80123be:	af00      	add	r7, sp, #0
 80123c0:	6078      	str	r0, [r7, #4]
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	685b      	ldr	r3, [r3, #4]
 80123c6:	4618      	mov	r0, r3
 80123c8:	f000 f8ce 	bl	8012568 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>
 80123cc:	4603      	mov	r3, r0
 80123ce:	4618      	mov	r0, r3
 80123d0:	3708      	adds	r7, #8
 80123d2:	46bd      	mov	sp, r7
 80123d4:	bd80      	pop	{r7, pc}
	...

080123d8 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcRPVfRiEEES1_DpOT_>:
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 80123d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80123da:	b087      	sub	sp, #28
 80123dc:	af02      	add	r7, sp, #8
 80123de:	60f8      	str	r0, [r7, #12]
 80123e0:	7239      	strb	r1, [r7, #8]
 80123e2:	607a      	str	r2, [r7, #4]
 80123e4:	603b      	str	r3, [r7, #0]
	: _M_impl(__a)
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	4618      	mov	r0, r3
 80123ea:	f7fa fe1b 	bl	800d024 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 80123ee:	4a13      	ldr	r2, [pc, #76]	@ (801243c <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcRPVfRiEEES1_DpOT_+0x64>)
 80123f0:	68fb      	ldr	r3, [r7, #12]
 80123f2:	601a      	str	r2, [r3, #0]
 80123f4:	68fb      	ldr	r3, [r7, #12]
 80123f6:	330c      	adds	r3, #12
 80123f8:	4621      	mov	r1, r4
 80123fa:	4618      	mov	r0, r3
 80123fc:	f000 f8bf 	bl	801257e <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
 8012400:	68f8      	ldr	r0, [r7, #12]
 8012402:	f000 f82c 	bl	801245e <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8012406:	4604      	mov	r4, r0
 8012408:	6878      	ldr	r0, [r7, #4]
 801240a:	f7fb ff82 	bl	800e312 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 801240e:	4605      	mov	r5, r0
 8012410:	6838      	ldr	r0, [r7, #0]
 8012412:	f7ff fda6 	bl	8011f62 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 8012416:	4606      	mov	r6, r0
 8012418:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801241a:	f7fb ff85 	bl	800e328 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 801241e:	4603      	mov	r3, r0
 8012420:	f107 0008 	add.w	r0, r7, #8
 8012424:	9300      	str	r3, [sp, #0]
 8012426:	4633      	mov	r3, r6
 8012428:	462a      	mov	r2, r5
 801242a:	4621      	mov	r1, r4
 801242c:	f000 f8b6 	bl	801259c <_ZNSt16allocator_traitsISaIvEE9constructI10SigmaDeltaJRPKcRPVfRiEEEvRS0_PT_DpOT0_>
	}
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	4618      	mov	r0, r3
 8012434:	3714      	adds	r7, #20
 8012436:	46bd      	mov	sp, r7
 8012438:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801243a:	bf00      	nop
 801243c:	08028af0 	.word	0x08028af0

08012440 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8012440:	b480      	push	{r7}
 8012442:	b083      	sub	sp, #12
 8012444:	af00      	add	r7, sp, #0
 8012446:	6078      	str	r0, [r7, #4]
 8012448:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	2200      	movs	r2, #0
 801244e:	605a      	str	r2, [r3, #4]
	return *this;
 8012450:	687b      	ldr	r3, [r7, #4]
      }
 8012452:	4618      	mov	r0, r3
 8012454:	370c      	adds	r7, #12
 8012456:	46bd      	mov	sp, r7
 8012458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801245c:	4770      	bx	lr

0801245e <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>:
      _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }
 801245e:	b580      	push	{r7, lr}
 8012460:	b082      	sub	sp, #8
 8012462:	af00      	add	r7, sp, #0
 8012464:	6078      	str	r0, [r7, #4]
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	330c      	adds	r3, #12
 801246a:	4618      	mov	r0, r3
 801246c:	f000 f8b2 	bl	80125d4 <_ZN9__gnu_cxx16__aligned_bufferI10SigmaDeltaE6_M_ptrEv>
 8012470:	4603      	mov	r3, r0
 8012472:	4618      	mov	r0, r3
 8012474:	3708      	adds	r7, #8
 8012476:	46bd      	mov	sp, r7
 8012478:	bd80      	pop	{r7, pc}
	...

0801247c <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcRPVfEEES1_DpOT_>:
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 801247c:	b5b0      	push	{r4, r5, r7, lr}
 801247e:	b084      	sub	sp, #16
 8012480:	af00      	add	r7, sp, #0
 8012482:	60f8      	str	r0, [r7, #12]
 8012484:	7239      	strb	r1, [r7, #8]
 8012486:	607a      	str	r2, [r7, #4]
 8012488:	603b      	str	r3, [r7, #0]
	: _M_impl(__a)
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	4618      	mov	r0, r3
 801248e:	f7fa fdc9 	bl	800d024 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8012492:	4a10      	ldr	r2, [pc, #64]	@ (80124d4 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcRPVfEEES1_DpOT_+0x58>)
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	601a      	str	r2, [r3, #0]
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	330c      	adds	r3, #12
 801249c:	4621      	mov	r1, r4
 801249e:	4618      	mov	r0, r3
 80124a0:	f000 f86d 	bl	801257e <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
 80124a4:	68f8      	ldr	r0, [r7, #12]
 80124a6:	f7ff ffda 	bl	801245e <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 80124aa:	4604      	mov	r4, r0
 80124ac:	6878      	ldr	r0, [r7, #4]
 80124ae:	f7fb ff30 	bl	800e312 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 80124b2:	4605      	mov	r5, r0
 80124b4:	6838      	ldr	r0, [r7, #0]
 80124b6:	f7ff fd54 	bl	8011f62 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 80124ba:	4603      	mov	r3, r0
 80124bc:	f107 0008 	add.w	r0, r7, #8
 80124c0:	462a      	mov	r2, r5
 80124c2:	4621      	mov	r1, r4
 80124c4:	f000 f892 	bl	80125ec <_ZNSt16allocator_traitsISaIvEE9constructI10SigmaDeltaJRPKcRPVfEEEvRS0_PT_DpOT0_>
	}
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	4618      	mov	r0, r3
 80124cc:	3710      	adds	r7, #16
 80124ce:	46bd      	mov	sp, r7
 80124d0:	bdb0      	pop	{r4, r5, r7, pc}
 80124d2:	bf00      	nop
 80124d4:	08028af0 	.word	0x08028af0

080124d8 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80124d8:	b480      	push	{r7}
 80124da:	b083      	sub	sp, #12
 80124dc:	af00      	add	r7, sp, #0
 80124de:	6078      	str	r0, [r7, #4]
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	4618      	mov	r0, r3
 80124e4:	370c      	adds	r7, #12
 80124e6:	46bd      	mov	sp, r7
 80124e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ec:	4770      	bx	lr

080124ee <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80124ee:	b480      	push	{r7}
 80124f0:	b083      	sub	sp, #12
 80124f2:	af00      	add	r7, sp, #0
 80124f4:	6078      	str	r0, [r7, #4]
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	4618      	mov	r0, r3
 80124fa:	370c      	adds	r7, #12
 80124fc:	46bd      	mov	sp, r7
 80124fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012502:	4770      	bx	lr

08012504 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 8012504:	b580      	push	{r7, lr}
 8012506:	b082      	sub	sp, #8
 8012508:	af00      	add	r7, sp, #0
 801250a:	6078      	str	r0, [r7, #4]
 801250c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 801250e:	2200      	movs	r2, #0
 8012510:	6839      	ldr	r1, [r7, #0]
 8012512:	6878      	ldr	r0, [r7, #4]
 8012514:	f000 f882 	bl	801261c <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 8012518:	4603      	mov	r3, r0
 801251a:	4618      	mov	r0, r3
 801251c:	3708      	adds	r7, #8
 801251e:	46bd      	mov	sp, r7
 8012520:	bd80      	pop	{r7, pc}

08012522 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8012522:	b580      	push	{r7, lr}
 8012524:	b084      	sub	sp, #16
 8012526:	af00      	add	r7, sp, #0
 8012528:	60f8      	str	r0, [r7, #12]
 801252a:	60b9      	str	r1, [r7, #8]
 801252c:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 801252e:	68b8      	ldr	r0, [r7, #8]
 8012530:	f000 f8a2 	bl	8012678 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>
 8012534:	4602      	mov	r2, r0
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	601a      	str	r2, [r3, #0]
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	687a      	ldr	r2, [r7, #4]
 801253e:	605a      	str	r2, [r3, #4]
      { }
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	4618      	mov	r0, r3
 8012544:	3710      	adds	r7, #16
 8012546:	46bd      	mov	sp, r7
 8012548:	bd80      	pop	{r7, pc}

0801254a <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 801254a:	b580      	push	{r7, lr}
 801254c:	b084      	sub	sp, #16
 801254e:	af00      	add	r7, sp, #0
 8012550:	60f8      	str	r0, [r7, #12]
 8012552:	60b9      	str	r1, [r7, #8]
 8012554:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8012556:	687a      	ldr	r2, [r7, #4]
 8012558:	68b9      	ldr	r1, [r7, #8]
 801255a:	68f8      	ldr	r0, [r7, #12]
 801255c:	f000 f897 	bl	801268e <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>
 8012560:	bf00      	nop
 8012562:	3710      	adds	r7, #16
 8012564:	46bd      	mov	sp, r7
 8012566:	bd80      	pop	{r7, pc}

08012568 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>:
    __to_address(_Tp* __ptr) noexcept
 8012568:	b480      	push	{r7}
 801256a:	b083      	sub	sp, #12
 801256c:	af00      	add	r7, sp, #0
 801256e:	6078      	str	r0, [r7, #4]
      return __ptr;
 8012570:	687b      	ldr	r3, [r7, #4]
    }
 8012572:	4618      	mov	r0, r3
 8012574:	370c      	adds	r7, #12
 8012576:	46bd      	mov	sp, r7
 8012578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801257c:	4770      	bx	lr

0801257e <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>:
	explicit _Impl(_Alloc __a) noexcept : _A_base(__a) { }
 801257e:	b580      	push	{r7, lr}
 8012580:	b082      	sub	sp, #8
 8012582:	af00      	add	r7, sp, #0
 8012584:	6078      	str	r0, [r7, #4]
 8012586:	7039      	strb	r1, [r7, #0]
 8012588:	463b      	mov	r3, r7
 801258a:	4619      	mov	r1, r3
 801258c:	6878      	ldr	r0, [r7, #4]
 801258e:	f7fa ff63 	bl	800d458 <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EEC1ERKS0_>
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	4618      	mov	r0, r3
 8012596:	3708      	adds	r7, #8
 8012598:	46bd      	mov	sp, r7
 801259a:	bd80      	pop	{r7, pc}

0801259c <_ZNSt16allocator_traitsISaIvEE9constructI10SigmaDeltaJRPKcRPVfRiEEEvRS0_PT_DpOT0_>:
	construct(allocator_type&, _Up* __p, _Args&&... __args)
 801259c:	b5b0      	push	{r4, r5, r7, lr}
 801259e:	b084      	sub	sp, #16
 80125a0:	af00      	add	r7, sp, #0
 80125a2:	60f8      	str	r0, [r7, #12]
 80125a4:	60b9      	str	r1, [r7, #8]
 80125a6:	607a      	str	r2, [r7, #4]
 80125a8:	603b      	str	r3, [r7, #0]
	{ std::_Construct(__p, std::forward<_Args>(__args)...); }
 80125aa:	6878      	ldr	r0, [r7, #4]
 80125ac:	f7fb feb1 	bl	800e312 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 80125b0:	4604      	mov	r4, r0
 80125b2:	6838      	ldr	r0, [r7, #0]
 80125b4:	f7ff fcd5 	bl	8011f62 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 80125b8:	4605      	mov	r5, r0
 80125ba:	6a38      	ldr	r0, [r7, #32]
 80125bc:	f7fb feb4 	bl	800e328 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 80125c0:	4603      	mov	r3, r0
 80125c2:	462a      	mov	r2, r5
 80125c4:	4621      	mov	r1, r4
 80125c6:	68b8      	ldr	r0, [r7, #8]
 80125c8:	f000 f872 	bl	80126b0 <_ZSt10_ConstructI10SigmaDeltaJRPKcRPVfRiEEvPT_DpOT0_>
 80125cc:	bf00      	nop
 80125ce:	3710      	adds	r7, #16
 80125d0:	46bd      	mov	sp, r7
 80125d2:	bdb0      	pop	{r4, r5, r7, pc}

080125d4 <_ZN9__gnu_cxx16__aligned_bufferI10SigmaDeltaE6_M_ptrEv>:
      _M_ptr() noexcept
 80125d4:	b580      	push	{r7, lr}
 80125d6:	b082      	sub	sp, #8
 80125d8:	af00      	add	r7, sp, #0
 80125da:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80125dc:	6878      	ldr	r0, [r7, #4]
 80125de:	f000 f8a4 	bl	801272a <_ZN9__gnu_cxx16__aligned_bufferI10SigmaDeltaE7_M_addrEv>
 80125e2:	4603      	mov	r3, r0
 80125e4:	4618      	mov	r0, r3
 80125e6:	3708      	adds	r7, #8
 80125e8:	46bd      	mov	sp, r7
 80125ea:	bd80      	pop	{r7, pc}

080125ec <_ZNSt16allocator_traitsISaIvEE9constructI10SigmaDeltaJRPKcRPVfEEEvRS0_PT_DpOT0_>:
	construct(allocator_type&, _Up* __p, _Args&&... __args)
 80125ec:	b590      	push	{r4, r7, lr}
 80125ee:	b085      	sub	sp, #20
 80125f0:	af00      	add	r7, sp, #0
 80125f2:	60f8      	str	r0, [r7, #12]
 80125f4:	60b9      	str	r1, [r7, #8]
 80125f6:	607a      	str	r2, [r7, #4]
 80125f8:	603b      	str	r3, [r7, #0]
	{ std::_Construct(__p, std::forward<_Args>(__args)...); }
 80125fa:	6878      	ldr	r0, [r7, #4]
 80125fc:	f7fb fe89 	bl	800e312 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8012600:	4604      	mov	r4, r0
 8012602:	6838      	ldr	r0, [r7, #0]
 8012604:	f7ff fcad 	bl	8011f62 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 8012608:	4603      	mov	r3, r0
 801260a:	461a      	mov	r2, r3
 801260c:	4621      	mov	r1, r4
 801260e:	68b8      	ldr	r0, [r7, #8]
 8012610:	f000 f896 	bl	8012740 <_ZSt10_ConstructI10SigmaDeltaJRPKcRPVfEEvPT_DpOT0_>
 8012614:	bf00      	nop
 8012616:	3714      	adds	r7, #20
 8012618:	46bd      	mov	sp, r7
 801261a:	bd90      	pop	{r4, r7, pc}

0801261c <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 801261c:	b580      	push	{r7, lr}
 801261e:	b084      	sub	sp, #16
 8012620:	af00      	add	r7, sp, #0
 8012622:	60f8      	str	r0, [r7, #12]
 8012624:	60b9      	str	r1, [r7, #8]
 8012626:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8012628:	68f8      	ldr	r0, [r7, #12]
 801262a:	f000 f8c1 	bl	80127b0 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 801262e:	4602      	mov	r2, r0
 8012630:	68bb      	ldr	r3, [r7, #8]
 8012632:	4293      	cmp	r3, r2
 8012634:	bf8c      	ite	hi
 8012636:	2301      	movhi	r3, #1
 8012638:	2300      	movls	r3, #0
 801263a:	b2db      	uxtb	r3, r3
 801263c:	2b00      	cmp	r3, #0
 801263e:	bf14      	ite	ne
 8012640:	2301      	movne	r3, #1
 8012642:	2300      	moveq	r3, #0
 8012644:	b2db      	uxtb	r3, r3
 8012646:	2b00      	cmp	r3, #0
 8012648:	d007      	beq.n	801265a <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 801264a:	68bb      	ldr	r3, [r7, #8]
 801264c:	4a09      	ldr	r2, [pc, #36]	@ (8012674 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x58>)
 801264e:	4293      	cmp	r3, r2
 8012650:	d901      	bls.n	8012656 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8012652:	f013 fc59 	bl	8025f08 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8012656:	f013 fc54 	bl	8025f02 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801265a:	68bb      	ldr	r3, [r7, #8]
 801265c:	2254      	movs	r2, #84	@ 0x54
 801265e:	fb02 f303 	mul.w	r3, r2, r3
 8012662:	4618      	mov	r0, r3
 8012664:	f013 fc3a 	bl	8025edc <_Znwj>
 8012668:	4603      	mov	r3, r0
 801266a:	bf00      	nop
      }
 801266c:	4618      	mov	r0, r3
 801266e:	3710      	adds	r7, #16
 8012670:	46bd      	mov	sp, r7
 8012672:	bd80      	pop	{r7, pc}
 8012674:	030c30c3 	.word	0x030c30c3

08012678 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8012678:	b480      	push	{r7}
 801267a:	b083      	sub	sp, #12
 801267c:	af00      	add	r7, sp, #0
 801267e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	4618      	mov	r0, r3
 8012684:	370c      	adds	r7, #12
 8012686:	46bd      	mov	sp, r7
 8012688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801268c:	4770      	bx	lr

0801268e <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 801268e:	b580      	push	{r7, lr}
 8012690:	b084      	sub	sp, #16
 8012692:	af00      	add	r7, sp, #0
 8012694:	60f8      	str	r0, [r7, #12]
 8012696:	60b9      	str	r1, [r7, #8]
 8012698:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	2254      	movs	r2, #84	@ 0x54
 801269e:	fb02 f303 	mul.w	r3, r2, r3
 80126a2:	4619      	mov	r1, r3
 80126a4:	68b8      	ldr	r0, [r7, #8]
 80126a6:	f013 fc08 	bl	8025eba <_ZdlPvj>
      }
 80126aa:	3710      	adds	r7, #16
 80126ac:	46bd      	mov	sp, r7
 80126ae:	bd80      	pop	{r7, pc}

080126b0 <_ZSt10_ConstructI10SigmaDeltaJRPKcRPVfRiEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 80126b0:	b5b0      	push	{r4, r5, r7, lr}
 80126b2:	b08c      	sub	sp, #48	@ 0x30
 80126b4:	af00      	add	r7, sp, #0
 80126b6:	60f8      	str	r0, [r7, #12]
 80126b8:	60b9      	str	r1, [r7, #8]
 80126ba:	607a      	str	r2, [r7, #4]
 80126bc:	603b      	str	r3, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 80126be:	68fb      	ldr	r3, [r7, #12]
 80126c0:	4619      	mov	r1, r3
 80126c2:	2048      	movs	r0, #72	@ 0x48
 80126c4:	f7f7 f81c 	bl	8009700 <_ZnwjPv>
 80126c8:	4605      	mov	r5, r0
 80126ca:	68b8      	ldr	r0, [r7, #8]
 80126cc:	f7fb fe21 	bl	800e312 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 80126d0:	4603      	mov	r3, r0
 80126d2:	681c      	ldr	r4, [r3, #0]
 80126d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80126d8:	4618      	mov	r0, r3
 80126da:	f013 fc10 	bl	8025efe <_ZNSaIcEC1Ev>
 80126de:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80126e2:	f107 0314 	add.w	r3, r7, #20
 80126e6:	4621      	mov	r1, r4
 80126e8:	4618      	mov	r0, r3
 80126ea:	f7f3 ffc7 	bl	800667c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 80126ee:	6878      	ldr	r0, [r7, #4]
 80126f0:	f7ff fc37 	bl	8011f62 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 80126f4:	4603      	mov	r3, r0
 80126f6:	681c      	ldr	r4, [r3, #0]
 80126f8:	6838      	ldr	r0, [r7, #0]
 80126fa:	f7fb fe15 	bl	800e328 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 80126fe:	4603      	mov	r3, r0
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	f107 0114 	add.w	r1, r7, #20
 8012706:	4622      	mov	r2, r4
 8012708:	4628      	mov	r0, r5
 801270a:	f7ff faa1 	bl	8011c50 <_ZN10SigmaDeltaC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPVfi>
 801270e:	f107 0314 	add.w	r3, r7, #20
 8012712:	4618      	mov	r0, r3
 8012714:	f013 fcdd 	bl	80260d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8012718:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801271c:	4618      	mov	r0, r3
 801271e:	f013 fbef 	bl	8025f00 <_ZNSaIcED1Ev>
    }
 8012722:	bf00      	nop
 8012724:	3730      	adds	r7, #48	@ 0x30
 8012726:	46bd      	mov	sp, r7
 8012728:	bdb0      	pop	{r4, r5, r7, pc}

0801272a <_ZN9__gnu_cxx16__aligned_bufferI10SigmaDeltaE7_M_addrEv>:
      _M_addr() noexcept
 801272a:	b480      	push	{r7}
 801272c:	b083      	sub	sp, #12
 801272e:	af00      	add	r7, sp, #0
 8012730:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 8012732:	687b      	ldr	r3, [r7, #4]
      }
 8012734:	4618      	mov	r0, r3
 8012736:	370c      	adds	r7, #12
 8012738:	46bd      	mov	sp, r7
 801273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801273e:	4770      	bx	lr

08012740 <_ZSt10_ConstructI10SigmaDeltaJRPKcRPVfEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8012740:	b5b0      	push	{r4, r5, r7, lr}
 8012742:	b08c      	sub	sp, #48	@ 0x30
 8012744:	af00      	add	r7, sp, #0
 8012746:	60f8      	str	r0, [r7, #12]
 8012748:	60b9      	str	r1, [r7, #8]
 801274a:	607a      	str	r2, [r7, #4]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 801274c:	68fb      	ldr	r3, [r7, #12]
 801274e:	4619      	mov	r1, r3
 8012750:	2048      	movs	r0, #72	@ 0x48
 8012752:	f7f6 ffd5 	bl	8009700 <_ZnwjPv>
 8012756:	4605      	mov	r5, r0
 8012758:	68b8      	ldr	r0, [r7, #8]
 801275a:	f7fb fdda 	bl	800e312 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 801275e:	4603      	mov	r3, r0
 8012760:	681c      	ldr	r4, [r3, #0]
 8012762:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012766:	4618      	mov	r0, r3
 8012768:	f013 fbc9 	bl	8025efe <_ZNSaIcEC1Ev>
 801276c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8012770:	f107 0314 	add.w	r3, r7, #20
 8012774:	4621      	mov	r1, r4
 8012776:	4618      	mov	r0, r3
 8012778:	f7f3 ff80 	bl	800667c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 801277c:	6878      	ldr	r0, [r7, #4]
 801277e:	f7ff fbf0 	bl	8011f62 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 8012782:	4603      	mov	r3, r0
 8012784:	681a      	ldr	r2, [r3, #0]
 8012786:	f107 0314 	add.w	r3, r7, #20
 801278a:	4619      	mov	r1, r3
 801278c:	4628      	mov	r0, r5
 801278e:	f7ff fa29 	bl	8011be4 <_ZN10SigmaDeltaC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPVf>
 8012792:	f107 0314 	add.w	r3, r7, #20
 8012796:	4618      	mov	r0, r3
 8012798:	f013 fc9b 	bl	80260d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801279c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80127a0:	4618      	mov	r0, r3
 80127a2:	f013 fbad 	bl	8025f00 <_ZNSaIcED1Ev>
    }
 80127a6:	bf00      	nop
 80127a8:	3730      	adds	r7, #48	@ 0x30
 80127aa:	46bd      	mov	sp, r7
 80127ac:	bdb0      	pop	{r4, r5, r7, pc}
	...

080127b0 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80127b0:	b480      	push	{r7}
 80127b2:	b083      	sub	sp, #12
 80127b4:	af00      	add	r7, sp, #0
 80127b6:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80127b8:	4b03      	ldr	r3, [pc, #12]	@ (80127c8 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv+0x18>)
      }
 80127ba:	4618      	mov	r0, r3
 80127bc:	370c      	adds	r7, #12
 80127be:	46bd      	mov	sp, r7
 80127c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127c4:	4770      	bx	lr
 80127c6:	bf00      	nop
 80127c8:	01861861 	.word	0x01861861

080127cc <_ZN10SigmaDeltaD1Ev>:
#include <string>
#include "../../remora.h"
#include "../../modules/module.h"
#include "../../drivers/pin/pin.h"

class SigmaDelta : public Module {
 80127cc:	b580      	push	{r7, lr}
 80127ce:	b082      	sub	sp, #8
 80127d0:	af00      	add	r7, sp, #0
 80127d2:	6078      	str	r0, [r7, #4]
 80127d4:	4a08      	ldr	r2, [pc, #32]	@ (80127f8 <_ZN10SigmaDeltaD1Ev+0x2c>)
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	601a      	str	r2, [r3, #0]
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	3318      	adds	r3, #24
 80127de:	4618      	mov	r0, r3
 80127e0:	f013 fc77 	bl	80260d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	4618      	mov	r0, r3
 80127e8:	f7fe f9e8 	bl	8010bbc <_ZN6ModuleD1Ev>
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	4618      	mov	r0, r3
 80127f0:	3708      	adds	r7, #8
 80127f2:	46bd      	mov	sp, r7
 80127f4:	bd80      	pop	{r7, pc}
 80127f6:	bf00      	nop
 80127f8:	08028b0c 	.word	0x08028b0c

080127fc <_ZN10SigmaDeltaD0Ev>:
 80127fc:	b580      	push	{r7, lr}
 80127fe:	b082      	sub	sp, #8
 8012800:	af00      	add	r7, sp, #0
 8012802:	6078      	str	r0, [r7, #4]
 8012804:	6878      	ldr	r0, [r7, #4]
 8012806:	f7ff ffe1 	bl	80127cc <_ZN10SigmaDeltaD1Ev>
 801280a:	2148      	movs	r1, #72	@ 0x48
 801280c:	6878      	ldr	r0, [r7, #4]
 801280e:	f013 fb54 	bl	8025eba <_ZdlPvj>
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	4618      	mov	r0, r3
 8012816:	3708      	adds	r7, #8
 8012818:	46bd      	mov	sp, r7
 801281a:	bd80      	pop	{r7, pc}

0801281c <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 801281c:	b580      	push	{r7, lr}
 801281e:	b082      	sub	sp, #8
 8012820:	af00      	add	r7, sp, #0
 8012822:	6078      	str	r0, [r7, #4]
 8012824:	4a05      	ldr	r2, [pc, #20]	@ (801283c <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	601a      	str	r2, [r3, #0]
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	4618      	mov	r0, r3
 801282e:	f7f8 fdbb 	bl	800b3a8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	4618      	mov	r0, r3
 8012836:	3708      	adds	r7, #8
 8012838:	46bd      	mov	sp, r7
 801283a:	bd80      	pop	{r7, pc}
 801283c:	08028af0 	.word	0x08028af0

08012840 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 8012840:	b580      	push	{r7, lr}
 8012842:	b082      	sub	sp, #8
 8012844:	af00      	add	r7, sp, #0
 8012846:	6078      	str	r0, [r7, #4]
 8012848:	6878      	ldr	r0, [r7, #4]
 801284a:	f7ff ffe7 	bl	801281c <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 801284e:	2154      	movs	r1, #84	@ 0x54
 8012850:	6878      	ldr	r0, [r7, #4]
 8012852:	f013 fb32 	bl	8025eba <_ZdlPvj>
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	4618      	mov	r0, r3
 801285a:	3708      	adds	r7, #8
 801285c:	46bd      	mov	sp, r7
 801285e:	bd80      	pop	{r7, pc}

08012860 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8012860:	b590      	push	{r4, r7, lr}
 8012862:	b083      	sub	sp, #12
 8012864:	af00      	add	r7, sp, #0
 8012866:	6078      	str	r0, [r7, #4]
	allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	330c      	adds	r3, #12
 801286c:	4618      	mov	r0, r3
 801286e:	f000 f856 	bl	801291e <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 8012872:	4604      	mov	r4, r0
 8012874:	6878      	ldr	r0, [r7, #4]
 8012876:	f7ff fdf2 	bl	801245e <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 801287a:	4603      	mov	r3, r0
 801287c:	4619      	mov	r1, r3
 801287e:	4620      	mov	r0, r4
 8012880:	f000 f859 	bl	8012936 <_ZNSt16allocator_traitsISaIvEE7destroyI10SigmaDeltaEEvRS0_PT_>
      }
 8012884:	bf00      	nop
 8012886:	370c      	adds	r7, #12
 8012888:	46bd      	mov	sp, r7
 801288a:	bd90      	pop	{r4, r7, pc}

0801288c <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 801288c:	b580      	push	{r7, lr}
 801288e:	b086      	sub	sp, #24
 8012890:	af00      	add	r7, sp, #0
 8012892:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	330c      	adds	r3, #12
 8012898:	4618      	mov	r0, r3
 801289a:	f000 f840 	bl	801291e <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 801289e:	4602      	mov	r2, r0
 80128a0:	f107 0314 	add.w	r3, r7, #20
 80128a4:	4611      	mov	r1, r2
 80128a6:	4618      	mov	r0, r3
 80128a8:	f7ff fd46 	bl	8012338 <_ZNSaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 80128ac:	f107 0114 	add.w	r1, r7, #20
 80128b0:	f107 030c 	add.w	r3, r7, #12
 80128b4:	687a      	ldr	r2, [r7, #4]
 80128b6:	4618      	mov	r0, r3
 80128b8:	f7ff fe33 	bl	8012522 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
	this->~_Sp_counted_ptr_inplace();
 80128bc:	6878      	ldr	r0, [r7, #4]
 80128be:	f7ff ffad 	bl	801281c <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 80128c2:	f107 030c 	add.w	r3, r7, #12
 80128c6:	4618      	mov	r0, r3
 80128c8:	f7ff fd62 	bl	8012390 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 80128cc:	f107 0314 	add.w	r3, r7, #20
 80128d0:	4618      	mov	r0, r3
 80128d2:	f7ff fd3e 	bl	8012352 <_ZNSaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 80128d6:	3718      	adds	r7, #24
 80128d8:	46bd      	mov	sp, r7
 80128da:	bd80      	pop	{r7, pc}

080128dc <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80128dc:	b580      	push	{r7, lr}
 80128de:	b084      	sub	sp, #16
 80128e0:	af00      	add	r7, sp, #0
 80128e2:	6078      	str	r0, [r7, #4]
 80128e4:	6039      	str	r1, [r7, #0]
	auto __ptr = const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());
 80128e6:	6878      	ldr	r0, [r7, #4]
 80128e8:	f7ff fdb9 	bl	801245e <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 80128ec:	60f8      	str	r0, [r7, #12]
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 80128ee:	f7f6 ff53 	bl	8009798 <_ZNSt19_Sp_make_shared_tag5_S_tiEv>
 80128f2:	4602      	mov	r2, r0
	    ||
 80128f4:	683b      	ldr	r3, [r7, #0]
 80128f6:	4293      	cmp	r3, r2
 80128f8:	d005      	beq.n	8012906 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 80128fa:	6838      	ldr	r0, [r7, #0]
 80128fc:	f013 fb1a 	bl	8025f34 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
 8012900:	4603      	mov	r3, r0
	    ||
 8012902:	2b00      	cmp	r3, #0
 8012904:	d001      	beq.n	801290a <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2e>
 8012906:	2301      	movs	r3, #1
 8012908:	e000      	b.n	801290c <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x30>
 801290a:	2300      	movs	r3, #0
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 801290c:	2b00      	cmp	r3, #0
 801290e:	d001      	beq.n	8012914 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x38>
	  return __ptr;
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	e000      	b.n	8012916 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x3a>
	return nullptr;
 8012914:	2300      	movs	r3, #0
      }
 8012916:	4618      	mov	r0, r3
 8012918:	3710      	adds	r7, #16
 801291a:	46bd      	mov	sp, r7
 801291c:	bd80      	pop	{r7, pc}

0801291e <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _A_base::_S_get(*this); }
 801291e:	b580      	push	{r7, lr}
 8012920:	b082      	sub	sp, #8
 8012922:	af00      	add	r7, sp, #0
 8012924:	6078      	str	r0, [r7, #4]
 8012926:	6878      	ldr	r0, [r7, #4]
 8012928:	f7fb f811 	bl	800d94e <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EE6_S_getERS1_>
 801292c:	4603      	mov	r3, r0
 801292e:	4618      	mov	r0, r3
 8012930:	3708      	adds	r7, #8
 8012932:	46bd      	mov	sp, r7
 8012934:	bd80      	pop	{r7, pc}

08012936 <_ZNSt16allocator_traitsISaIvEE7destroyI10SigmaDeltaEEvRS0_PT_>:
	destroy(allocator_type&, _Up* __p)
 8012936:	b580      	push	{r7, lr}
 8012938:	b082      	sub	sp, #8
 801293a:	af00      	add	r7, sp, #0
 801293c:	6078      	str	r0, [r7, #4]
 801293e:	6039      	str	r1, [r7, #0]
	{ std::_Destroy(__p); }
 8012940:	6838      	ldr	r0, [r7, #0]
 8012942:	f000 f804 	bl	801294e <_ZSt8_DestroyI10SigmaDeltaEvPT_>
 8012946:	bf00      	nop
 8012948:	3708      	adds	r7, #8
 801294a:	46bd      	mov	sp, r7
 801294c:	bd80      	pop	{r7, pc}

0801294e <_ZSt8_DestroyI10SigmaDeltaEvPT_>:
    _Destroy(_Tp* __pointer)
 801294e:	b580      	push	{r7, lr}
 8012950:	b082      	sub	sp, #8
 8012952:	af00      	add	r7, sp, #0
 8012954:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	6878      	ldr	r0, [r7, #4]
 801295e:	4798      	blx	r3
    }
 8012960:	bf00      	nop
 8012962:	3708      	adds	r7, #8
 8012964:	46bd      	mov	sp, r7
 8012966:	bd80      	pop	{r7, pc}

08012968 <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>:
#include "stepgen.h"


shared_ptr<Module> Stepgen::create(const JsonObject& config, Remora* instance)
	{
 8012968:	b590      	push	{r4, r7, lr}
 801296a:	b0bd      	sub	sp, #244	@ 0xf4
 801296c:	af08      	add	r7, sp, #32
 801296e:	60f8      	str	r0, [r7, #12]
 8012970:	60b9      	str	r1, [r7, #8]
 8012972:	607a      	str	r2, [r7, #4]
	    const char* comment = config["Comment"];
 8012974:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012978:	4a50      	ldr	r2, [pc, #320]	@ (8012abc <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x154>)
 801297a:	68b9      	ldr	r1, [r7, #8]
 801297c:	4618      	mov	r0, r3
 801297e:	f7fe fb68 	bl	8011052 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8012982:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012986:	4618      	mov	r0, r3
 8012988:	f7f3 fefe 	bl	8006788 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 801298c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
	    uint32_t threadFreq = config["ThreadFreq"];
 8012990:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8012994:	4a4a      	ldr	r2, [pc, #296]	@ (8012ac0 <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x158>)
 8012996:	68b9      	ldr	r1, [r7, #8]
 8012998:	4618      	mov	r0, r3
 801299a:	f7fb fb90 	bl	800e0be <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 801299e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80129a2:	4618      	mov	r0, r3
 80129a4:	f7f3 ff21 	bl	80067ea <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ImLi0EEEv>
 80129a8:	4603      	mov	r3, r0
 80129aa:	62bb      	str	r3, [r7, #40]	@ 0x28

	    printf("%s\n", comment);
 80129ac:	f8d7 00cc 	ldr.w	r0, [r7, #204]	@ 0xcc
 80129b0:	f014 f9ae 	bl	8026d10 <puts>

	    int joint = config["Joint Number"];
 80129b4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80129b8:	4a42      	ldr	r2, [pc, #264]	@ (8012ac4 <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x15c>)
 80129ba:	68b9      	ldr	r1, [r7, #8]
 80129bc:	4618      	mov	r0, r3
 80129be:	f000 fa1d 	bl	8012dfc <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA13_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 80129c2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80129c6:	4618      	mov	r0, r3
 80129c8:	f7fb fb6d 	bl	800e0a6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>
 80129cc:	4603      	mov	r3, r0
 80129ce:	627b      	str	r3, [r7, #36]	@ 0x24
	    const char* enable = config["Enable Pin"];
 80129d0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80129d4:	4a3c      	ldr	r2, [pc, #240]	@ (8012ac8 <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x160>)
 80129d6:	68b9      	ldr	r1, [r7, #8]
 80129d8:	4618      	mov	r0, r3
 80129da:	f7fb fb70 	bl	800e0be <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 80129de:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80129e2:	4618      	mov	r0, r3
 80129e4:	f7f3 fed0 	bl	8006788 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 80129e8:	4603      	mov	r3, r0
 80129ea:	623b      	str	r3, [r7, #32]
	    const char* step = config["Step Pin"];
 80129ec:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80129f0:	4a36      	ldr	r2, [pc, #216]	@ (8012acc <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x164>)
 80129f2:	68b9      	ldr	r1, [r7, #8]
 80129f4:	4618      	mov	r0, r3
 80129f6:	f7fd fb52 	bl	801009e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA9_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 80129fa:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80129fe:	4618      	mov	r0, r3
 8012a00:	f7f3 fec2 	bl	8006788 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8012a04:	4603      	mov	r3, r0
 8012a06:	61fb      	str	r3, [r7, #28]
	    const char* dir = config["Direction Pin"];
 8012a08:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8012a0c:	4a30      	ldr	r2, [pc, #192]	@ (8012ad0 <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x168>)
 8012a0e:	68b9      	ldr	r1, [r7, #8]
 8012a10:	4618      	mov	r0, r3
 8012a12:	f000 fa18 	bl	8012e46 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA14_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8012a16:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8012a1a:	4618      	mov	r0, r3
 8012a1c:	f7f3 feb4 	bl	8006788 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8012a20:	4603      	mov	r3, r0
 8012a22:	61bb      	str	r3, [r7, #24]

	    // Configure pointers to data source and feedback location
	    volatile int32_t* ptrJointFreqCmd = &instance->getRxData()->jointFreqCmd[joint];
 8012a24:	6878      	ldr	r0, [r7, #4]
 8012a26:	f7fd f967 	bl	800fcf8 <_ZN6Remora9getRxDataEv>
 8012a2a:	4602      	mov	r2, r0
 8012a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a2e:	009b      	lsls	r3, r3, #2
 8012a30:	4413      	add	r3, r2
 8012a32:	3304      	adds	r3, #4
 8012a34:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	    volatile int32_t* ptrJointFeedback = &instance->getTxData()->jointFeedback[joint];
 8012a38:	6878      	ldr	r0, [r7, #4]
 8012a3a:	f7fd f94f 	bl	800fcdc <_ZN6Remora9getTxDataEv>
 8012a3e:	4602      	mov	r2, r0
 8012a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a42:	009b      	lsls	r3, r3, #2
 8012a44:	4413      	add	r3, r2
 8012a46:	3304      	adds	r3, #4
 8012a48:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	    volatile uint8_t* ptrJointEnable = &instance->getRxData()->jointEnable;
 8012a4c:	6878      	ldr	r0, [r7, #4]
 8012a4e:	f7fd f953 	bl	800fcf8 <_ZN6Remora9getRxDataEv>
 8012a52:	4603      	mov	r3, r0
 8012a54:	333c      	adds	r3, #60	@ 0x3c
 8012a56:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

	    bool usesModulePost = true;		// stepgen uses the thread modulesPost vector
 8012a5a:	2301      	movs	r3, #1
 8012a5c:	75fb      	strb	r3, [r7, #23]

	    // Create the step generator and register it in the thread
	    return make_unique<Stepgen>(threadFreq, joint, enable, step, dir, Config::stepBit, *ptrJointFreqCmd, *ptrJointFeedback, *ptrJointEnable, usesModulePost);
 8012a5e:	f107 00bc 	add.w	r0, r7, #188	@ 0xbc
 8012a62:	f107 0420 	add.w	r4, r7, #32
 8012a66:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8012a6a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8012a6e:	f107 0317 	add.w	r3, r7, #23
 8012a72:	9306      	str	r3, [sp, #24]
 8012a74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8012a78:	9305      	str	r3, [sp, #20]
 8012a7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012a7e:	9304      	str	r3, [sp, #16]
 8012a80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8012a84:	9303      	str	r3, [sp, #12]
 8012a86:	4b13      	ldr	r3, [pc, #76]	@ (8012ad4 <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x16c>)
 8012a88:	9302      	str	r3, [sp, #8]
 8012a8a:	f107 0318 	add.w	r3, r7, #24
 8012a8e:	9301      	str	r3, [sp, #4]
 8012a90:	f107 031c 	add.w	r3, r7, #28
 8012a94:	9300      	str	r3, [sp, #0]
 8012a96:	4623      	mov	r3, r4
 8012a98:	f000 f9fa 	bl	8012e90 <_ZSt11make_uniqueI7StepgenJRmRiRPKcS5_S5_RKmRVlS9_RVhRbEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 8012a9c:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8012aa0:	4619      	mov	r1, r3
 8012aa2:	68f8      	ldr	r0, [r7, #12]
 8012aa4:	f000 fa70 	bl	8012f88 <_ZNSt10shared_ptrI6ModuleEC1I7StepgenSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>
 8012aa8:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8012aac:	4618      	mov	r0, r3
 8012aae:	f000 fa49 	bl	8012f44 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EED1Ev>
 8012ab2:	bf00      	nop
	}
 8012ab4:	68f8      	ldr	r0, [r7, #12]
 8012ab6:	37d4      	adds	r7, #212	@ 0xd4
 8012ab8:	46bd      	mov	sp, r7
 8012aba:	bd90      	pop	{r4, r7, pc}
 8012abc:	08028364 	.word	0x08028364
 8012ac0:	0802836c 	.word	0x0802836c
 8012ac4:	08028378 	.word	0x08028378
 8012ac8:	08028388 	.word	0x08028388
 8012acc:	08028394 	.word	0x08028394
 8012ad0:	080283a0 	.word	0x080283a0
 8012ad4:	08028b28 	.word	0x08028b28

08012ad8 <_ZN7StepgenC1EliPKcS1_S1_iRVlS3_RVhb>:
 * @param _stepBit The number of bits used for the step value.
 * @param _ptrFrequencyCommand A reference to the frequency command data for the joint.
 * @param _ptrFeedback A reference to the feedback data for the joint.
 * @param _ptrJointEnable A reference to the joint enable data.
 */
Stepgen::Stepgen(int32_t _threadFreq, int _jointNumber, const char* _enable, const char* _step, const char* _direction, int _stepBit, volatile int32_t& _ptrFrequencyCommand, volatile int32_t& _ptrFeedback,  volatile uint8_t& _ptrJointEnable, bool _usesModulePost)
 8012ad8:	b590      	push	{r4, r7, lr}
 8012ada:	b09b      	sub	sp, #108	@ 0x6c
 8012adc:	af00      	add	r7, sp, #0
 8012ade:	60f8      	str	r0, [r7, #12]
 8012ae0:	60b9      	str	r1, [r7, #8]
 8012ae2:	607a      	str	r2, [r7, #4]
 8012ae4:	603b      	str	r3, [r7, #0]
      DDSaccumulator(0),
      frequencyScale(1.0f * (1 << _stepBit) / _threadFreq),  // Frequency scaling without unnecessary cast
      mask(1 << _jointNumber),  // Mask for checking the joint number
      isEnabled(false),
      isForward(false),
      isStepping(false)
 8012ae6:	68fb      	ldr	r3, [r7, #12]
 8012ae8:	4618      	mov	r0, r3
 8012aea:	f7fe f84b 	bl	8010b84 <_ZN6ModuleC1Ev>
 8012aee:	4a5c      	ldr	r2, [pc, #368]	@ (8012c60 <_ZN7StepgenC1EliPKcS1_S1_iRVlS3_RVhb+0x188>)
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	601a      	str	r2, [r3, #0]
    : jointNumber(_jointNumber),
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	687a      	ldr	r2, [r7, #4]
 8012af8:	619a      	str	r2, [r3, #24]
      enable(_enable),
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	683a      	ldr	r2, [r7, #0]
 8012afe:	61da      	str	r2, [r3, #28]
      step(_step),
 8012b00:	68fb      	ldr	r3, [r7, #12]
 8012b02:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8012b04:	621a      	str	r2, [r3, #32]
      direction(_direction),
 8012b06:	68fb      	ldr	r3, [r7, #12]
 8012b08:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8012b0a:	625a      	str	r2, [r3, #36]	@ 0x24
      stepBit(_stepBit),
 8012b0c:	68fb      	ldr	r3, [r7, #12]
 8012b0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8012b12:	629a      	str	r2, [r3, #40]	@ 0x28
      ptrFrequencyCommand(&_ptrFrequencyCommand),
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8012b1a:	62da      	str	r2, [r3, #44]	@ 0x2c
      ptrFeedback(&_ptrFeedback),
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8012b22:	631a      	str	r2, [r3, #48]	@ 0x30
      ptrJointEnable(&_ptrJointEnable),
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8012b2a:	635a      	str	r2, [r3, #52]	@ 0x34
	  enablePin(_enable, OUTPUT),
 8012b2c:	68fb      	ldr	r3, [r7, #12]
 8012b2e:	f103 0438 	add.w	r4, r3, #56	@ 0x38
 8012b32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012b36:	4618      	mov	r0, r3
 8012b38:	f013 f9e1 	bl	8025efe <_ZNSaIcEC1Ev>
 8012b3c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8012b40:	f107 0314 	add.w	r3, r7, #20
 8012b44:	6839      	ldr	r1, [r7, #0]
 8012b46:	4618      	mov	r0, r3
 8012b48:	f7f3 fd98 	bl	800667c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8012b4c:	f107 0314 	add.w	r3, r7, #20
 8012b50:	2201      	movs	r2, #1
 8012b52:	4619      	mov	r1, r3
 8012b54:	4620      	mov	r0, r4
 8012b56:	f7f0 fe4f 	bl	80037f8 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 8012b5a:	f107 0314 	add.w	r3, r7, #20
 8012b5e:	4618      	mov	r0, r3
 8012b60:	f013 fab7 	bl	80260d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8012b64:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012b68:	4618      	mov	r0, r3
 8012b6a:	f013 f9c9 	bl	8025f00 <_ZNSaIcED1Ev>
      stepPin(_step, OUTPUT),
 8012b6e:	68fb      	ldr	r3, [r7, #12]
 8012b70:	f103 0478 	add.w	r4, r3, #120	@ 0x78
 8012b74:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8012b78:	4618      	mov	r0, r3
 8012b7a:	f013 f9c0 	bl	8025efe <_ZNSaIcEC1Ev>
 8012b7e:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8012b82:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8012b86:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8012b88:	4618      	mov	r0, r3
 8012b8a:	f7f3 fd77 	bl	800667c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8012b8e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8012b92:	2201      	movs	r2, #1
 8012b94:	4619      	mov	r1, r3
 8012b96:	4620      	mov	r0, r4
 8012b98:	f7f0 fe2e 	bl	80037f8 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 8012b9c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8012ba0:	4618      	mov	r0, r3
 8012ba2:	f013 fa96 	bl	80260d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8012ba6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8012baa:	4618      	mov	r0, r3
 8012bac:	f013 f9a8 	bl	8025f00 <_ZNSaIcED1Ev>
      directionPin(_direction, OUTPUT),
 8012bb0:	68fb      	ldr	r3, [r7, #12]
 8012bb2:	f103 04b8 	add.w	r4, r3, #184	@ 0xb8
 8012bb6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8012bba:	4618      	mov	r0, r3
 8012bbc:	f013 f99f 	bl	8025efe <_ZNSaIcEC1Ev>
 8012bc0:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8012bc4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012bc8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8012bca:	4618      	mov	r0, r3
 8012bcc:	f7f3 fd56 	bl	800667c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8012bd0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012bd4:	2201      	movs	r2, #1
 8012bd6:	4619      	mov	r1, r3
 8012bd8:	4620      	mov	r0, r4
 8012bda:	f7f0 fe0d 	bl	80037f8 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 8012bde:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012be2:	4618      	mov	r0, r3
 8012be4:	f013 fa75 	bl	80260d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8012be8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8012bec:	4618      	mov	r0, r3
 8012bee:	f013 f987 	bl	8025f00 <_ZNSaIcED1Ev>
      rawCount(0),
 8012bf2:	68fb      	ldr	r3, [r7, #12]
 8012bf4:	2200      	movs	r2, #0
 8012bf6:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
      DDSaccumulator(0),
 8012bfa:	68fb      	ldr	r3, [r7, #12]
 8012bfc:	2200      	movs	r2, #0
 8012bfe:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
      frequencyScale(1.0f * (1 << _stepBit) / _threadFreq),  // Frequency scaling without unnecessary cast
 8012c02:	2201      	movs	r2, #1
 8012c04:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8012c08:	fa02 f303 	lsl.w	r3, r2, r3
 8012c0c:	ee07 3a90 	vmov	s15, r3
 8012c10:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8012c14:	68bb      	ldr	r3, [r7, #8]
 8012c16:	ee07 3a90 	vmov	s15, r3
 8012c1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8012c1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012c22:	68fb      	ldr	r3, [r7, #12]
 8012c24:	edc3 7a40 	vstr	s15, [r3, #256]	@ 0x100
      mask(1 << _jointNumber),  // Mask for checking the joint number
 8012c28:	2201      	movs	r2, #1
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	409a      	lsls	r2, r3
 8012c2e:	68fb      	ldr	r3, [r7, #12]
 8012c30:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
      isEnabled(false),
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	2200      	movs	r2, #0
 8012c38:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
      isForward(false),
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	2200      	movs	r2, #0
 8012c40:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
      isStepping(false)
 8012c44:	68fb      	ldr	r3, [r7, #12]
 8012c46:	2200      	movs	r2, #0
 8012c48:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112
{
	usesModulePost = _usesModulePost;
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	f897 2090 	ldrb.w	r2, [r7, #144]	@ 0x90
 8012c52:	751a      	strb	r2, [r3, #20]
}
 8012c54:	68fb      	ldr	r3, [r7, #12]
 8012c56:	4618      	mov	r0, r3
 8012c58:	376c      	adds	r7, #108	@ 0x6c
 8012c5a:	46bd      	mov	sp, r7
 8012c5c:	bd90      	pop	{r4, r7, pc}
 8012c5e:	bf00      	nop
 8012c60:	08028b50 	.word	0x08028b50

08012c64 <_ZN7Stepgen6updateEv>:
 * 
 * This method generates pulses for stepping according to the current
 * frequency command and direction.
 */
void Stepgen::update()
{
 8012c64:	b580      	push	{r7, lr}
 8012c66:	b082      	sub	sp, #8
 8012c68:	af00      	add	r7, sp, #0
 8012c6a:	6078      	str	r0, [r7, #4]
    makePulses();  // Generate pulses for stepping and direction
 8012c6c:	6878      	ldr	r0, [r7, #4]
 8012c6e:	f000 f819 	bl	8012ca4 <_ZN7Stepgen10makePulsesEv>
}
 8012c72:	bf00      	nop
 8012c74:	3708      	adds	r7, #8
 8012c76:	46bd      	mov	sp, r7
 8012c78:	bd80      	pop	{r7, pc}

08012c7a <_ZN7Stepgen10updatePostEv>:
 * @brief Post-update method for the Stepgen.
 * 
 * This method stops any ongoing pulses after the update phase.
 */
void Stepgen::updatePost()
{
 8012c7a:	b580      	push	{r7, lr}
 8012c7c:	b082      	sub	sp, #8
 8012c7e:	af00      	add	r7, sp, #0
 8012c80:	6078      	str	r0, [r7, #4]
    stopPulses();  // Stop pulse generation after update
 8012c82:	6878      	ldr	r0, [r7, #4]
 8012c84:	f000 f8a8 	bl	8012dd8 <_ZN7Stepgen10stopPulsesEv>
}
 8012c88:	bf00      	nop
 8012c8a:	3708      	adds	r7, #8
 8012c8c:	46bd      	mov	sp, r7
 8012c8e:	bd80      	pop	{r7, pc}

08012c90 <_ZN7Stepgen10slowUpdateEv>:
 * 
 * This is a placeholder for performing any slow or low-priority updates,
 * though it currently does nothing.
 */
void Stepgen::slowUpdate()
{
 8012c90:	b480      	push	{r7}
 8012c92:	b083      	sub	sp, #12
 8012c94:	af00      	add	r7, sp, #0
 8012c96:	6078      	str	r0, [r7, #4]
    // Currently no operation for slow update
}
 8012c98:	bf00      	nop
 8012c9a:	370c      	adds	r7, #12
 8012c9c:	46bd      	mov	sp, r7
 8012c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ca2:	4770      	bx	lr

08012ca4 <_ZN7Stepgen10makePulsesEv>:
 * This method calculates the next step and updates the step and direction
 * pins accordingly. It uses the DDS (Direct Digital Synthesis) technique
 * to generate precise frequency-based stepping.
 */
void Stepgen::makePulses()
{
 8012ca4:	b580      	push	{r7, lr}
 8012ca6:	b084      	sub	sp, #16
 8012ca8:	af00      	add	r7, sp, #0
 8012caa:	6078      	str	r0, [r7, #4]
    isEnabled = ((*(ptrJointEnable) & mask) != 0);
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012cb0:	781b      	ldrb	r3, [r3, #0]
 8012cb2:	b2db      	uxtb	r3, r3
 8012cb4:	461a      	mov	r2, r3
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8012cbc:	4013      	ands	r3, r2
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	bf14      	ite	ne
 8012cc2:	2301      	movne	r3, #1
 8012cc4:	2300      	moveq	r3, #0
 8012cc6:	b2da      	uxtb	r2, r3
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
    if (!isEnabled)
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 8012cd4:	f083 0301 	eor.w	r3, r3, #1
 8012cd8:	b2db      	uxtb	r3, r3
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d006      	beq.n	8012cec <_ZN7Stepgen10makePulsesEv+0x48>
    {
        enablePin.set(true);  	// Disable the driver if not enabled
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	3338      	adds	r3, #56	@ 0x38
 8012ce2:	2101      	movs	r1, #1
 8012ce4:	4618      	mov	r0, r3
 8012ce6:	f7f0 ff31 	bl	8003b4c <_ZN3Pin3setEb>
        return;  				// Exit early if the generator is disabled
 8012cea:	e072      	b.n	8012dd2 <_ZN7Stepgen10makePulsesEv+0x12e>
    }

    enablePin.set(false); 		// Enable the driver
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	3338      	adds	r3, #56	@ 0x38
 8012cf0:	2100      	movs	r1, #0
 8012cf2:	4618      	mov	r0, r3
 8012cf4:	f7f0 ff2a 	bl	8003b4c <_ZN3Pin3setEb>

    // Get the current frequency command and scale it using the frequency scale
    frequencyCommand = *ptrFrequencyCommand;
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012cfc:	681a      	ldr	r2, [r3, #0]
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
    DDSaddValue = frequencyCommand * frequencyScale;
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8012d0a:	ee07 3a90 	vmov	s15, r3
 8012d0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	edd3 7a40 	vldr	s15, [r3, #256]	@ 0x100
 8012d18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012d1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012d20:	ee17 2a90 	vmov	r2, s15
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108

    // Save the current DDS accumulator value and update it
    int32_t stepNow = DDSaccumulator;
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8012d30:	60fb      	str	r3, [r7, #12]
    DDSaccumulator += DDSaddValue;
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8012d3e:	441a      	add	r2, r3
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc

    // Check for changes in the low half of the DDS accumulator
    stepNow ^= DDSaccumulator;
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8012d4c:	68fa      	ldr	r2, [r7, #12]
 8012d4e:	4053      	eors	r3, r2
 8012d50:	60fb      	str	r3, [r7, #12]
    stepNow &= (1L << stepBit);  // Check for the step bit
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012d56:	2201      	movs	r2, #1
 8012d58:	fa02 f303 	lsl.w	r3, r2, r3
 8012d5c:	68fa      	ldr	r2, [r7, #12]
 8012d5e:	4013      	ands	r3, r2
 8012d60:	60fb      	str	r3, [r7, #12]

    // Determine direction based on the sign of DDSaddValue
    isForward = DDSaddValue > 0;
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	bfcc      	ite	gt
 8012d6c:	2301      	movgt	r3, #1
 8012d6e:	2300      	movle	r3, #0
 8012d70:	b2da      	uxtb	r2, r3
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111

    // If a step is to be made, set the direction and step pins accordingly
    if (stepNow)
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d029      	beq.n	8012dd2 <_ZN7Stepgen10makePulsesEv+0x12e>
    {
        directionPin.set(isForward);  // Set direction pin
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	f103 02b8 	add.w	r2, r3, #184	@ 0xb8
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 8012d8a:	4619      	mov	r1, r3
 8012d8c:	4610      	mov	r0, r2
 8012d8e:	f7f0 fedd 	bl	8003b4c <_ZN3Pin3setEb>
        stepPin.set(true);  // Set the step pin
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	3378      	adds	r3, #120	@ 0x78
 8012d96:	2101      	movs	r1, #1
 8012d98:	4618      	mov	r0, r3
 8012d9a:	f7f0 fed7 	bl	8003b4c <_ZN3Pin3setEb>
        rawCount += (isForward ? 1 : -1);  // Update rawCount based on direction
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8012da4:	687a      	ldr	r2, [r7, #4]
 8012da6:	f892 2111 	ldrb.w	r2, [r2, #273]	@ 0x111
 8012daa:	2a00      	cmp	r2, #0
 8012dac:	d001      	beq.n	8012db2 <_ZN7Stepgen10makePulsesEv+0x10e>
 8012dae:	2201      	movs	r2, #1
 8012db0:	e001      	b.n	8012db6 <_ZN7Stepgen10makePulsesEv+0x112>
 8012db2:	f04f 32ff 	mov.w	r2, #4294967295
 8012db6:	441a      	add	r2, r3
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
        *ptrFeedback = rawCount;  // Update the feedback with the raw count
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012dc2:	687a      	ldr	r2, [r7, #4]
 8012dc4:	f8d2 20f8 	ldr.w	r2, [r2, #248]	@ 0xf8
 8012dc8:	601a      	str	r2, [r3, #0]
        isStepping = true;  // Indicate that stepping is occurring
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	2201      	movs	r2, #1
 8012dce:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112
    }
}
 8012dd2:	3710      	adds	r7, #16
 8012dd4:	46bd      	mov	sp, r7
 8012dd6:	bd80      	pop	{r7, pc}

08012dd8 <_ZN7Stepgen10stopPulsesEv>:
 * @brief Stops the pulse generation.
 * 
 * This method resets the step pin to low and stops any ongoing stepping.
 */
void Stepgen::stopPulses()
{
 8012dd8:	b580      	push	{r7, lr}
 8012dda:	b082      	sub	sp, #8
 8012ddc:	af00      	add	r7, sp, #0
 8012dde:	6078      	str	r0, [r7, #4]
    stepPin.set(false);  // Reset step pin to low
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	3378      	adds	r3, #120	@ 0x78
 8012de4:	2100      	movs	r1, #0
 8012de6:	4618      	mov	r0, r3
 8012de8:	f7f0 feb0 	bl	8003b4c <_ZN3Pin3setEb>
    isStepping = false;  // Indicate that stepping has stopped
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	2200      	movs	r2, #0
 8012df0:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112
}
 8012df4:	bf00      	nop
 8012df6:	3708      	adds	r7, #8
 8012df8:	46bd      	mov	sp, r7
 8012dfa:	bd80      	pop	{r7, pc}

08012dfc <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA13_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:

  // Gets or sets the member with specified key.
  // https://arduinojson.org/v7/api/jsonobject/subscript/
  template <typename TString,
            detail::enable_if_t<detail::IsString<TString>::value, int> = 0>
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 8012dfc:	b580      	push	{r7, lr}
 8012dfe:	b08c      	sub	sp, #48	@ 0x30
 8012e00:	af02      	add	r7, sp, #8
 8012e02:	60f8      	str	r0, [r7, #12]
 8012e04:	60b9      	str	r1, [r7, #8]
 8012e06:	607a      	str	r2, [r7, #4]
      const TString& key) const {
    return {*this, detail::adaptString(key)};
 8012e08:	68ba      	ldr	r2, [r7, #8]
 8012e0a:	f107 0314 	add.w	r3, r7, #20
 8012e0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012e12:	e883 0003 	stmia.w	r3, {r0, r1}
 8012e16:	f107 031c 	add.w	r3, r7, #28
 8012e1a:	6879      	ldr	r1, [r7, #4]
 8012e1c:	4618      	mov	r0, r3
 8012e1e:	f000 f8c6 	bl	8012fae <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA13_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8012e22:	466a      	mov	r2, sp
 8012e24:	f107 0320 	add.w	r3, r7, #32
 8012e28:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012e2c:	e882 0003 	stmia.w	r2, {r0, r1}
 8012e30:	69fb      	ldr	r3, [r7, #28]
 8012e32:	f107 0214 	add.w	r2, r7, #20
 8012e36:	ca06      	ldmia	r2, {r1, r2}
 8012e38:	68f8      	ldr	r0, [r7, #12]
 8012e3a:	f7f3 fe14 	bl	8006a66 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 8012e3e:	68f8      	ldr	r0, [r7, #12]
 8012e40:	3728      	adds	r7, #40	@ 0x28
 8012e42:	46bd      	mov	sp, r7
 8012e44:	bd80      	pop	{r7, pc}

08012e46 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA14_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 8012e46:	b580      	push	{r7, lr}
 8012e48:	b08c      	sub	sp, #48	@ 0x30
 8012e4a:	af02      	add	r7, sp, #8
 8012e4c:	60f8      	str	r0, [r7, #12]
 8012e4e:	60b9      	str	r1, [r7, #8]
 8012e50:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 8012e52:	68ba      	ldr	r2, [r7, #8]
 8012e54:	f107 0314 	add.w	r3, r7, #20
 8012e58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012e5c:	e883 0003 	stmia.w	r3, {r0, r1}
 8012e60:	f107 031c 	add.w	r3, r7, #28
 8012e64:	6879      	ldr	r1, [r7, #4]
 8012e66:	4618      	mov	r0, r3
 8012e68:	f000 f8b4 	bl	8012fd4 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA14_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8012e6c:	466a      	mov	r2, sp
 8012e6e:	f107 0320 	add.w	r3, r7, #32
 8012e72:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012e76:	e882 0003 	stmia.w	r2, {r0, r1}
 8012e7a:	69fb      	ldr	r3, [r7, #28]
 8012e7c:	f107 0214 	add.w	r2, r7, #20
 8012e80:	ca06      	ldmia	r2, {r1, r2}
 8012e82:	68f8      	ldr	r0, [r7, #12]
 8012e84:	f7f3 fdef 	bl	8006a66 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 8012e88:	68f8      	ldr	r0, [r7, #12]
 8012e8a:	3728      	adds	r7, #40	@ 0x28
 8012e8c:	46bd      	mov	sp, r7
 8012e8e:	bd80      	pop	{r7, pc}

08012e90 <_ZSt11make_uniqueI7StepgenJRmRiRPKcS5_S5_RKmRVlS9_RVhRbEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8012e90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012e94:	b093      	sub	sp, #76	@ 0x4c
 8012e96:	af08      	add	r7, sp, #32
 8012e98:	6278      	str	r0, [r7, #36]	@ 0x24
 8012e9a:	6239      	str	r1, [r7, #32]
 8012e9c:	61fa      	str	r2, [r7, #28]
 8012e9e:	61bb      	str	r3, [r7, #24]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8012ea0:	f44f 708a 	mov.w	r0, #276	@ 0x114
 8012ea4:	f013 f81a 	bl	8025edc <_Znwj>
 8012ea8:	4603      	mov	r3, r0
 8012eaa:	4698      	mov	r8, r3
 8012eac:	6a38      	ldr	r0, [r7, #32]
 8012eae:	f7f8 fdff 	bl	800bab0 <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
 8012eb2:	4603      	mov	r3, r0
 8012eb4:	681b      	ldr	r3, [r3, #0]
 8012eb6:	4699      	mov	r9, r3
 8012eb8:	69f8      	ldr	r0, [r7, #28]
 8012eba:	f7fb fa35 	bl	800e328 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 8012ebe:	4603      	mov	r3, r0
 8012ec0:	681e      	ldr	r6, [r3, #0]
 8012ec2:	69b8      	ldr	r0, [r7, #24]
 8012ec4:	f7fb fa25 	bl	800e312 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8012ec8:	4603      	mov	r3, r0
 8012eca:	681b      	ldr	r3, [r3, #0]
 8012ecc:	617b      	str	r3, [r7, #20]
 8012ece:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8012ed0:	f7fb fa1f 	bl	800e312 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8012ed4:	4603      	mov	r3, r0
 8012ed6:	681c      	ldr	r4, [r3, #0]
 8012ed8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8012eda:	f7fb fa1a 	bl	800e312 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8012ede:	4603      	mov	r3, r0
 8012ee0:	681d      	ldr	r5, [r3, #0]
 8012ee2:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8012ee4:	f7f8 fdef 	bl	800bac6 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 8012ee8:	4603      	mov	r3, r0
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	613b      	str	r3, [r7, #16]
 8012eee:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8012ef0:	f000 f883 	bl	8012ffa <_ZSt7forwardIRVlEOT_RNSt16remove_referenceIS2_E4typeE>
 8012ef4:	60f8      	str	r0, [r7, #12]
 8012ef6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8012ef8:	f000 f87f 	bl	8012ffa <_ZSt7forwardIRVlEOT_RNSt16remove_referenceIS2_E4typeE>
 8012efc:	60b8      	str	r0, [r7, #8]
 8012efe:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8012f00:	f000 f886 	bl	8013010 <_ZSt7forwardIRVhEOT_RNSt16remove_referenceIS2_E4typeE>
 8012f04:	6078      	str	r0, [r7, #4]
 8012f06:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8012f08:	f7fd f9c9 	bl	801029e <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8012f0c:	4603      	mov	r3, r0
 8012f0e:	781b      	ldrb	r3, [r3, #0]
 8012f10:	9306      	str	r3, [sp, #24]
 8012f12:	687a      	ldr	r2, [r7, #4]
 8012f14:	9205      	str	r2, [sp, #20]
 8012f16:	68ba      	ldr	r2, [r7, #8]
 8012f18:	9204      	str	r2, [sp, #16]
 8012f1a:	68fa      	ldr	r2, [r7, #12]
 8012f1c:	9203      	str	r2, [sp, #12]
 8012f1e:	693a      	ldr	r2, [r7, #16]
 8012f20:	9202      	str	r2, [sp, #8]
 8012f22:	9501      	str	r5, [sp, #4]
 8012f24:	9400      	str	r4, [sp, #0]
 8012f26:	697b      	ldr	r3, [r7, #20]
 8012f28:	4632      	mov	r2, r6
 8012f2a:	4649      	mov	r1, r9
 8012f2c:	4640      	mov	r0, r8
 8012f2e:	f7ff fdd3 	bl	8012ad8 <_ZN7StepgenC1EliPKcS1_S1_iRVlS3_RVhb>
 8012f32:	4641      	mov	r1, r8
 8012f34:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012f36:	f000 f886 	bl	8013046 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8012f3a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012f3c:	372c      	adds	r7, #44	@ 0x2c
 8012f3e:	46bd      	mov	sp, r7
 8012f40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08012f44 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8012f44:	b590      	push	{r4, r7, lr}
 8012f46:	b085      	sub	sp, #20
 8012f48:	af00      	add	r7, sp, #0
 8012f4a:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	4618      	mov	r0, r3
 8012f50:	f000 f888 	bl	8013064 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 8012f54:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8012f56:	68fb      	ldr	r3, [r7, #12]
 8012f58:	681b      	ldr	r3, [r3, #0]
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d00c      	beq.n	8012f78 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8012f5e:	6878      	ldr	r0, [r7, #4]
 8012f60:	f000 f88d 	bl	801307e <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE11get_deleterEv>
 8012f64:	4604      	mov	r4, r0
 8012f66:	68f8      	ldr	r0, [r7, #12]
 8012f68:	f000 f896 	bl	8013098 <_ZSt4moveIRP7StepgenEONSt16remove_referenceIT_E4typeEOS4_>
 8012f6c:	4603      	mov	r3, r0
 8012f6e:	681b      	ldr	r3, [r3, #0]
 8012f70:	4619      	mov	r1, r3
 8012f72:	4620      	mov	r0, r4
 8012f74:	f000 f8cf 	bl	8013116 <_ZNKSt14default_deleteI7StepgenEclEPS0_>
	__ptr = pointer();
 8012f78:	68fb      	ldr	r3, [r7, #12]
 8012f7a:	2200      	movs	r2, #0
 8012f7c:	601a      	str	r2, [r3, #0]
      }
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	4618      	mov	r0, r3
 8012f82:	3714      	adds	r7, #20
 8012f84:	46bd      	mov	sp, r7
 8012f86:	bd90      	pop	{r4, r7, pc}

08012f88 <_ZNSt10shared_ptrI6ModuleEC1I7StepgenSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>:
	shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 8012f88:	b590      	push	{r4, r7, lr}
 8012f8a:	b083      	sub	sp, #12
 8012f8c:	af00      	add	r7, sp, #0
 8012f8e:	6078      	str	r0, [r7, #4]
 8012f90:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 8012f92:	687c      	ldr	r4, [r7, #4]
 8012f94:	6838      	ldr	r0, [r7, #0]
 8012f96:	f000 f8cf 	bl	8013138 <_ZSt4moveIRSt10unique_ptrI7StepgenSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 8012f9a:	4603      	mov	r3, r0
 8012f9c:	4619      	mov	r1, r3
 8012f9e:	4620      	mov	r0, r4
 8012fa0:	f000 f8d5 	bl	801314e <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	4618      	mov	r0, r3
 8012fa8:	370c      	adds	r7, #12
 8012faa:	46bd      	mov	sp, r7
 8012fac:	bd90      	pop	{r4, r7, pc}

08012fae <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA13_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 8012fae:	b580      	push	{r7, lr}
 8012fb0:	b082      	sub	sp, #8
 8012fb2:	af00      	add	r7, sp, #0
 8012fb4:	6078      	str	r0, [r7, #4]
 8012fb6:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8012fb8:	6838      	ldr	r0, [r7, #0]
 8012fba:	f000 f900 	bl	80131be <_ZN11ArduinoJson8V730HB226detail7forwardIRA13_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8012fbe:	4602      	mov	r2, r0
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	4611      	mov	r1, r2
 8012fc4:	4618      	mov	r0, r3
 8012fc6:	f000 f905 	bl	80131d4 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA13_KcvE5adaptES5_>
 8012fca:	bf00      	nop
}
 8012fcc:	6878      	ldr	r0, [r7, #4]
 8012fce:	3708      	adds	r7, #8
 8012fd0:	46bd      	mov	sp, r7
 8012fd2:	bd80      	pop	{r7, pc}

08012fd4 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA14_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 8012fd4:	b580      	push	{r7, lr}
 8012fd6:	b082      	sub	sp, #8
 8012fd8:	af00      	add	r7, sp, #0
 8012fda:	6078      	str	r0, [r7, #4]
 8012fdc:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8012fde:	6838      	ldr	r0, [r7, #0]
 8012fe0:	f000 f907 	bl	80131f2 <_ZN11ArduinoJson8V730HB226detail7forwardIRA14_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8012fe4:	4602      	mov	r2, r0
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	4611      	mov	r1, r2
 8012fea:	4618      	mov	r0, r3
 8012fec:	f000 f90c 	bl	8013208 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA14_KcvE5adaptES5_>
 8012ff0:	bf00      	nop
}
 8012ff2:	6878      	ldr	r0, [r7, #4]
 8012ff4:	3708      	adds	r7, #8
 8012ff6:	46bd      	mov	sp, r7
 8012ff8:	bd80      	pop	{r7, pc}

08012ffa <_ZSt7forwardIRVlEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8012ffa:	b480      	push	{r7}
 8012ffc:	b083      	sub	sp, #12
 8012ffe:	af00      	add	r7, sp, #0
 8013000:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	4618      	mov	r0, r3
 8013006:	370c      	adds	r7, #12
 8013008:	46bd      	mov	sp, r7
 801300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801300e:	4770      	bx	lr

08013010 <_ZSt7forwardIRVhEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8013010:	b480      	push	{r7}
 8013012:	b083      	sub	sp, #12
 8013014:	af00      	add	r7, sp, #0
 8013016:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	4618      	mov	r0, r3
 801301c:	370c      	adds	r7, #12
 801301e:	46bd      	mov	sp, r7
 8013020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013024:	4770      	bx	lr

08013026 <_ZNSt15__uniq_ptr_dataI7StepgenSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8013026:	b580      	push	{r7, lr}
 8013028:	b082      	sub	sp, #8
 801302a:	af00      	add	r7, sp, #0
 801302c:	6078      	str	r0, [r7, #4]
 801302e:	6039      	str	r1, [r7, #0]
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	683a      	ldr	r2, [r7, #0]
 8013034:	4611      	mov	r1, r2
 8013036:	4618      	mov	r0, r3
 8013038:	f000 f8f5 	bl	8013226 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EEC1EPS0_>
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	4618      	mov	r0, r3
 8013040:	3708      	adds	r7, #8
 8013042:	46bd      	mov	sp, r7
 8013044:	bd80      	pop	{r7, pc}

08013046 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8013046:	b580      	push	{r7, lr}
 8013048:	b082      	sub	sp, #8
 801304a:	af00      	add	r7, sp, #0
 801304c:	6078      	str	r0, [r7, #4]
 801304e:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	6839      	ldr	r1, [r7, #0]
 8013054:	4618      	mov	r0, r3
 8013056:	f7ff ffe6 	bl	8013026 <_ZNSt15__uniq_ptr_dataI7StepgenSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	4618      	mov	r0, r3
 801305e:	3708      	adds	r7, #8
 8013060:	46bd      	mov	sp, r7
 8013062:	bd80      	pop	{r7, pc}

08013064 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8013064:	b580      	push	{r7, lr}
 8013066:	b082      	sub	sp, #8
 8013068:	af00      	add	r7, sp, #0
 801306a:	6078      	str	r0, [r7, #4]
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	4618      	mov	r0, r3
 8013070:	f000 f8ed 	bl	801324e <_ZSt3getILj0EJP7StepgenSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8013074:	4603      	mov	r3, r0
 8013076:	4618      	mov	r0, r3
 8013078:	3708      	adds	r7, #8
 801307a:	46bd      	mov	sp, r7
 801307c:	bd80      	pop	{r7, pc}

0801307e <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 801307e:	b580      	push	{r7, lr}
 8013080:	b082      	sub	sp, #8
 8013082:	af00      	add	r7, sp, #0
 8013084:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	4618      	mov	r0, r3
 801308a:	f000 f8ed 	bl	8013268 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE10_M_deleterEv>
 801308e:	4603      	mov	r3, r0
 8013090:	4618      	mov	r0, r3
 8013092:	3708      	adds	r7, #8
 8013094:	46bd      	mov	sp, r7
 8013096:	bd80      	pop	{r7, pc}

08013098 <_ZSt4moveIRP7StepgenEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8013098:	b480      	push	{r7}
 801309a:	b083      	sub	sp, #12
 801309c:	af00      	add	r7, sp, #0
 801309e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	4618      	mov	r0, r3
 80130a4:	370c      	adds	r7, #12
 80130a6:	46bd      	mov	sp, r7
 80130a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ac:	4770      	bx	lr
	...

080130b0 <_ZN7StepgenD1Ev>:
 *
 * The Stepgen class is responsible for controlling a stepper motor by generating
 * pulses based on frequency commands received from a controller, as well as managing
 * the motor's direction and enable states.
 */
class Stepgen : public Module
 80130b0:	b580      	push	{r7, lr}
 80130b2:	b082      	sub	sp, #8
 80130b4:	af00      	add	r7, sp, #0
 80130b6:	6078      	str	r0, [r7, #4]
 80130b8:	4a0d      	ldr	r2, [pc, #52]	@ (80130f0 <_ZN7StepgenD1Ev+0x40>)
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	601a      	str	r2, [r3, #0]
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	33b8      	adds	r3, #184	@ 0xb8
 80130c2:	4618      	mov	r0, r3
 80130c4:	f7fb fa4b 	bl	800e55e <_ZN3PinD1Ev>
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	3378      	adds	r3, #120	@ 0x78
 80130cc:	4618      	mov	r0, r3
 80130ce:	f7fb fa46 	bl	800e55e <_ZN3PinD1Ev>
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	3338      	adds	r3, #56	@ 0x38
 80130d6:	4618      	mov	r0, r3
 80130d8:	f7fb fa41 	bl	800e55e <_ZN3PinD1Ev>
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	4618      	mov	r0, r3
 80130e0:	f7fd fd6c 	bl	8010bbc <_ZN6ModuleD1Ev>
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	4618      	mov	r0, r3
 80130e8:	3708      	adds	r7, #8
 80130ea:	46bd      	mov	sp, r7
 80130ec:	bd80      	pop	{r7, pc}
 80130ee:	bf00      	nop
 80130f0:	08028b50 	.word	0x08028b50

080130f4 <_ZN7StepgenD0Ev>:
 80130f4:	b580      	push	{r7, lr}
 80130f6:	b082      	sub	sp, #8
 80130f8:	af00      	add	r7, sp, #0
 80130fa:	6078      	str	r0, [r7, #4]
 80130fc:	6878      	ldr	r0, [r7, #4]
 80130fe:	f7ff ffd7 	bl	80130b0 <_ZN7StepgenD1Ev>
 8013102:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8013106:	6878      	ldr	r0, [r7, #4]
 8013108:	f012 fed7 	bl	8025eba <_ZdlPvj>
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	4618      	mov	r0, r3
 8013110:	3708      	adds	r7, #8
 8013112:	46bd      	mov	sp, r7
 8013114:	bd80      	pop	{r7, pc}

08013116 <_ZNKSt14default_deleteI7StepgenEclEPS0_>:
      operator()(_Tp* __ptr) const
 8013116:	b580      	push	{r7, lr}
 8013118:	b082      	sub	sp, #8
 801311a:	af00      	add	r7, sp, #0
 801311c:	6078      	str	r0, [r7, #4]
 801311e:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8013120:	683b      	ldr	r3, [r7, #0]
 8013122:	2b00      	cmp	r3, #0
 8013124:	d004      	beq.n	8013130 <_ZNKSt14default_deleteI7StepgenEclEPS0_+0x1a>
 8013126:	681a      	ldr	r2, [r3, #0]
 8013128:	3204      	adds	r2, #4
 801312a:	6812      	ldr	r2, [r2, #0]
 801312c:	4618      	mov	r0, r3
 801312e:	4790      	blx	r2
      }
 8013130:	bf00      	nop
 8013132:	3708      	adds	r7, #8
 8013134:	46bd      	mov	sp, r7
 8013136:	bd80      	pop	{r7, pc}

08013138 <_ZSt4moveIRSt10unique_ptrI7StepgenSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8013138:	b480      	push	{r7}
 801313a:	b083      	sub	sp, #12
 801313c:	af00      	add	r7, sp, #0
 801313e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	4618      	mov	r0, r3
 8013144:	370c      	adds	r7, #12
 8013146:	46bd      	mov	sp, r7
 8013148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801314c:	4770      	bx	lr

0801314e <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>:
	__shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 801314e:	b580      	push	{r7, lr}
 8013150:	b084      	sub	sp, #16
 8013152:	af00      	add	r7, sp, #0
 8013154:	6078      	str	r0, [r7, #4]
 8013156:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r.get()), _M_refcount()
 8013158:	6838      	ldr	r0, [r7, #0]
 801315a:	f000 f892 	bl	8013282 <_ZNKSt10unique_ptrI7StepgenSt14default_deleteIS0_EE3getEv>
 801315e:	4602      	mov	r2, r0
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	601a      	str	r2, [r3, #0]
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	3304      	adds	r3, #4
 8013168:	4618      	mov	r0, r3
 801316a:	f7f8 fee7 	bl	800bf3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  auto __raw = __to_address(__r.get());
 801316e:	6838      	ldr	r0, [r7, #0]
 8013170:	f000 f887 	bl	8013282 <_ZNKSt10unique_ptrI7StepgenSt14default_deleteIS0_EE3getEv>
 8013174:	4603      	mov	r3, r0
 8013176:	4618      	mov	r0, r3
 8013178:	f000 f890 	bl	801329c <_ZSt12__to_addressI7StepgenEPT_S2_>
 801317c:	60f8      	str	r0, [r7, #12]
	  _M_refcount = __shared_count<_Lp>(std::move(__r));
 801317e:	6838      	ldr	r0, [r7, #0]
 8013180:	f7ff ffda 	bl	8013138 <_ZSt4moveIRSt10unique_ptrI7StepgenSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 8013184:	4602      	mov	r2, r0
 8013186:	f107 0308 	add.w	r3, r7, #8
 801318a:	4611      	mov	r1, r2
 801318c:	4618      	mov	r0, r3
 801318e:	f000 f890 	bl	80132b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	3304      	adds	r3, #4
 8013196:	f107 0208 	add.w	r2, r7, #8
 801319a:	4611      	mov	r1, r2
 801319c:	4618      	mov	r0, r3
 801319e:	f7fb facb 	bl	800e738 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 80131a2:	f107 0308 	add.w	r3, r7, #8
 80131a6:	4618      	mov	r0, r3
 80131a8:	f7f7 fccb 	bl	800ab42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  _M_enable_shared_from_this_with(__raw);
 80131ac:	68f9      	ldr	r1, [r7, #12]
 80131ae:	6878      	ldr	r0, [r7, #4]
 80131b0:	f000 f8c1 	bl	8013336 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI7StepgenS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	4618      	mov	r0, r3
 80131b8:	3710      	adds	r7, #16
 80131ba:	46bd      	mov	sp, r7
 80131bc:	bd80      	pop	{r7, pc}

080131be <_ZN11ArduinoJson8V730HB226detail7forwardIRA13_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 80131be:	b480      	push	{r7}
 80131c0:	b083      	sub	sp, #12
 80131c2:	af00      	add	r7, sp, #0
 80131c4:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 80131c6:	687b      	ldr	r3, [r7, #4]
}
 80131c8:	4618      	mov	r0, r3
 80131ca:	370c      	adds	r7, #12
 80131cc:	46bd      	mov	sp, r7
 80131ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131d2:	4770      	bx	lr

080131d4 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA13_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 80131d4:	b580      	push	{r7, lr}
 80131d6:	b082      	sub	sp, #8
 80131d8:	af00      	add	r7, sp, #0
 80131da:	6078      	str	r0, [r7, #4]
 80131dc:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 80131de:	2301      	movs	r3, #1
 80131e0:	220c      	movs	r2, #12
 80131e2:	6839      	ldr	r1, [r7, #0]
 80131e4:	6878      	ldr	r0, [r7, #4]
 80131e6:	f7f0 feb9 	bl	8003f5c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 80131ea:	6878      	ldr	r0, [r7, #4]
 80131ec:	3708      	adds	r7, #8
 80131ee:	46bd      	mov	sp, r7
 80131f0:	bd80      	pop	{r7, pc}

080131f2 <_ZN11ArduinoJson8V730HB226detail7forwardIRA14_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 80131f2:	b480      	push	{r7}
 80131f4:	b083      	sub	sp, #12
 80131f6:	af00      	add	r7, sp, #0
 80131f8:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 80131fa:	687b      	ldr	r3, [r7, #4]
}
 80131fc:	4618      	mov	r0, r3
 80131fe:	370c      	adds	r7, #12
 8013200:	46bd      	mov	sp, r7
 8013202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013206:	4770      	bx	lr

08013208 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA14_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 8013208:	b580      	push	{r7, lr}
 801320a:	b082      	sub	sp, #8
 801320c:	af00      	add	r7, sp, #0
 801320e:	6078      	str	r0, [r7, #4]
 8013210:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 8013212:	2301      	movs	r3, #1
 8013214:	220d      	movs	r2, #13
 8013216:	6839      	ldr	r1, [r7, #0]
 8013218:	6878      	ldr	r0, [r7, #4]
 801321a:	f7f0 fe9f 	bl	8003f5c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 801321e:	6878      	ldr	r0, [r7, #4]
 8013220:	3708      	adds	r7, #8
 8013222:	46bd      	mov	sp, r7
 8013224:	bd80      	pop	{r7, pc}

08013226 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8013226:	b590      	push	{r4, r7, lr}
 8013228:	b083      	sub	sp, #12
 801322a:	af00      	add	r7, sp, #0
 801322c:	6078      	str	r0, [r7, #4]
 801322e:	6039      	str	r1, [r7, #0]
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	4618      	mov	r0, r3
 8013234:	f000 f88a 	bl	801334c <_ZNSt5tupleIJP7StepgenSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8013238:	683c      	ldr	r4, [r7, #0]
 801323a:	6878      	ldr	r0, [r7, #4]
 801323c:	f7ff ff12 	bl	8013064 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 8013240:	4603      	mov	r3, r0
 8013242:	601c      	str	r4, [r3, #0]
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	4618      	mov	r0, r3
 8013248:	370c      	adds	r7, #12
 801324a:	46bd      	mov	sp, r7
 801324c:	bd90      	pop	{r4, r7, pc}

0801324e <_ZSt3getILj0EJP7StepgenSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 801324e:	b580      	push	{r7, lr}
 8013250:	b082      	sub	sp, #8
 8013252:	af00      	add	r7, sp, #0
 8013254:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	4618      	mov	r0, r3
 801325a:	f000 f884 	bl	8013366 <_ZSt12__get_helperILj0EP7StepgenJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 801325e:	4603      	mov	r3, r0
 8013260:	4618      	mov	r0, r3
 8013262:	3708      	adds	r7, #8
 8013264:	46bd      	mov	sp, r7
 8013266:	bd80      	pop	{r7, pc}

08013268 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8013268:	b580      	push	{r7, lr}
 801326a:	b082      	sub	sp, #8
 801326c:	af00      	add	r7, sp, #0
 801326e:	6078      	str	r0, [r7, #4]
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	4618      	mov	r0, r3
 8013274:	f000 f883 	bl	801337e <_ZSt3getILj1EJP7StepgenSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8013278:	4603      	mov	r3, r0
 801327a:	4618      	mov	r0, r3
 801327c:	3708      	adds	r7, #8
 801327e:	46bd      	mov	sp, r7
 8013280:	bd80      	pop	{r7, pc}

08013282 <_ZNKSt10unique_ptrI7StepgenSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8013282:	b580      	push	{r7, lr}
 8013284:	b082      	sub	sp, #8
 8013286:	af00      	add	r7, sp, #0
 8013288:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	4618      	mov	r0, r3
 801328e:	f000 f882 	bl	8013396 <_ZNKSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 8013292:	4603      	mov	r3, r0
 8013294:	4618      	mov	r0, r3
 8013296:	3708      	adds	r7, #8
 8013298:	46bd      	mov	sp, r7
 801329a:	bd80      	pop	{r7, pc}

0801329c <_ZSt12__to_addressI7StepgenEPT_S2_>:
    __to_address(_Tp* __ptr) noexcept
 801329c:	b480      	push	{r7}
 801329e:	b083      	sub	sp, #12
 80132a0:	af00      	add	r7, sp, #0
 80132a2:	6078      	str	r0, [r7, #4]
      return __ptr;
 80132a4:	687b      	ldr	r3, [r7, #4]
    }
 80132a6:	4618      	mov	r0, r3
 80132a8:	370c      	adds	r7, #12
 80132aa:	46bd      	mov	sp, r7
 80132ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132b0:	4770      	bx	lr

080132b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>:
	__shared_count(std::unique_ptr<_Tp, _Del>&& __r) : _M_pi(0)
 80132b2:	b580      	push	{r7, lr}
 80132b4:	b086      	sub	sp, #24
 80132b6:	af00      	add	r7, sp, #0
 80132b8:	6078      	str	r0, [r7, #4]
 80132ba:	6039      	str	r1, [r7, #0]
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	2200      	movs	r2, #0
 80132c0:	601a      	str	r2, [r3, #0]
	  if (__r.get() == nullptr)
 80132c2:	6838      	ldr	r0, [r7, #0]
 80132c4:	f7ff ffdd 	bl	8013282 <_ZNKSt10unique_ptrI7StepgenSt14default_deleteIS0_EE3getEv>
 80132c8:	4603      	mov	r3, r0
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	bf0c      	ite	eq
 80132ce:	2301      	moveq	r3, #1
 80132d0:	2300      	movne	r3, #0
 80132d2:	b2db      	uxtb	r3, r3
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d128      	bne.n	801332a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x78>
	  _Alloc __a;
 80132d8:	f107 030c 	add.w	r3, r7, #12
 80132dc:	4618      	mov	r0, r3
 80132de:	f000 f868 	bl	80133b2 <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
	  _Sp_cd_type* __mem = _Alloc_traits::allocate(__a, 1);
 80132e2:	f107 030c 	add.w	r3, r7, #12
 80132e6:	2101      	movs	r1, #1
 80132e8:	4618      	mov	r0, r3
 80132ea:	f000 f87a 	bl	80133e2 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>
 80132ee:	6178      	str	r0, [r7, #20]
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 80132f0:	6838      	ldr	r0, [r7, #0]
 80132f2:	f000 f885 	bl	8013400 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE7releaseEv>
 80132f6:	4603      	mov	r3, r0
 80132f8:	613b      	str	r3, [r7, #16]
				   std::forward<_Del>(__r.get_deleter()));
 80132fa:	6838      	ldr	r0, [r7, #0]
 80132fc:	f7ff febf 	bl	801307e <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE11get_deleterEv>
 8013300:	4603      	mov	r3, r0
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 8013302:	4618      	mov	r0, r3
 8013304:	f000 f889 	bl	801341a <_ZSt7forwardISt14default_deleteI7StepgenEEOT_RNSt16remove_referenceIS3_E4typeE>
 8013308:	4603      	mov	r3, r0
 801330a:	f107 0210 	add.w	r2, r7, #16
 801330e:	f107 000c 	add.w	r0, r7, #12
 8013312:	6979      	ldr	r1, [r7, #20]
 8013314:	f000 f88c 	bl	8013430 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>
	  _M_pi = __mem;
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	697a      	ldr	r2, [r7, #20]
 801331c:	601a      	str	r2, [r3, #0]
	}
 801331e:	f107 030c 	add.w	r3, r7, #12
 8013322:	4618      	mov	r0, r3
 8013324:	f000 f851 	bl	80133ca <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8013328:	e000      	b.n	801332c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x7a>
	    return;
 801332a:	bf00      	nop
	}
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	4618      	mov	r0, r3
 8013330:	3718      	adds	r7, #24
 8013332:	46bd      	mov	sp, r7
 8013334:	bd80      	pop	{r7, pc}

08013336 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI7StepgenS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 8013336:	b480      	push	{r7}
 8013338:	b083      	sub	sp, #12
 801333a:	af00      	add	r7, sp, #0
 801333c:	6078      	str	r0, [r7, #4]
 801333e:	6039      	str	r1, [r7, #0]
	{ }
 8013340:	bf00      	nop
 8013342:	370c      	adds	r7, #12
 8013344:	46bd      	mov	sp, r7
 8013346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801334a:	4770      	bx	lr

0801334c <_ZNSt5tupleIJP7StepgenSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 801334c:	b580      	push	{r7, lr}
 801334e:	b082      	sub	sp, #8
 8013350:	af00      	add	r7, sp, #0
 8013352:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	4618      	mov	r0, r3
 8013358:	f000 f882 	bl	8013460 <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEEC1Ev>
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	4618      	mov	r0, r3
 8013360:	3708      	adds	r7, #8
 8013362:	46bd      	mov	sp, r7
 8013364:	bd80      	pop	{r7, pc}

08013366 <_ZSt12__get_helperILj0EP7StepgenJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8013366:	b580      	push	{r7, lr}
 8013368:	b082      	sub	sp, #8
 801336a:	af00      	add	r7, sp, #0
 801336c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801336e:	6878      	ldr	r0, [r7, #4]
 8013370:	f000 f886 	bl	8013480 <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEE7_M_headERS4_>
 8013374:	4603      	mov	r3, r0
 8013376:	4618      	mov	r0, r3
 8013378:	3708      	adds	r7, #8
 801337a:	46bd      	mov	sp, r7
 801337c:	bd80      	pop	{r7, pc}

0801337e <_ZSt3getILj1EJP7StepgenSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 801337e:	b580      	push	{r7, lr}
 8013380:	b082      	sub	sp, #8
 8013382:	af00      	add	r7, sp, #0
 8013384:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8013386:	6878      	ldr	r0, [r7, #4]
 8013388:	f000 f887 	bl	801349a <_ZSt12__get_helperILj1ESt14default_deleteI7StepgenEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 801338c:	4603      	mov	r3, r0
 801338e:	4618      	mov	r0, r3
 8013390:	3708      	adds	r7, #8
 8013392:	46bd      	mov	sp, r7
 8013394:	bd80      	pop	{r7, pc}

08013396 <_ZNKSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 8013396:	b580      	push	{r7, lr}
 8013398:	b082      	sub	sp, #8
 801339a:	af00      	add	r7, sp, #0
 801339c:	6078      	str	r0, [r7, #4]
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	4618      	mov	r0, r3
 80133a2:	f000 f886 	bl	80134b2 <_ZSt3getILj0EJP7StepgenSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 80133a6:	4603      	mov	r3, r0
 80133a8:	681b      	ldr	r3, [r3, #0]
 80133aa:	4618      	mov	r0, r3
 80133ac:	3708      	adds	r7, #8
 80133ae:	46bd      	mov	sp, r7
 80133b0:	bd80      	pop	{r7, pc}

080133b2 <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80133b2:	b580      	push	{r7, lr}
 80133b4:	b082      	sub	sp, #8
 80133b6:	af00      	add	r7, sp, #0
 80133b8:	6078      	str	r0, [r7, #4]
 80133ba:	6878      	ldr	r0, [r7, #4]
 80133bc:	f000 f886 	bl	80134cc <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	4618      	mov	r0, r3
 80133c4:	3708      	adds	r7, #8
 80133c6:	46bd      	mov	sp, r7
 80133c8:	bd80      	pop	{r7, pc}

080133ca <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80133ca:	b580      	push	{r7, lr}
 80133cc:	b082      	sub	sp, #8
 80133ce:	af00      	add	r7, sp, #0
 80133d0:	6078      	str	r0, [r7, #4]
 80133d2:	6878      	ldr	r0, [r7, #4]
 80133d4:	f000 f885 	bl	80134e2 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	4618      	mov	r0, r3
 80133dc:	3708      	adds	r7, #8
 80133de:	46bd      	mov	sp, r7
 80133e0:	bd80      	pop	{r7, pc}

080133e2 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 80133e2:	b580      	push	{r7, lr}
 80133e4:	b082      	sub	sp, #8
 80133e6:	af00      	add	r7, sp, #0
 80133e8:	6078      	str	r0, [r7, #4]
 80133ea:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80133ec:	2200      	movs	r2, #0
 80133ee:	6839      	ldr	r1, [r7, #0]
 80133f0:	6878      	ldr	r0, [r7, #4]
 80133f2:	f000 f881 	bl	80134f8 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 80133f6:	4603      	mov	r3, r0
 80133f8:	4618      	mov	r0, r3
 80133fa:	3708      	adds	r7, #8
 80133fc:	46bd      	mov	sp, r7
 80133fe:	bd80      	pop	{r7, pc}

08013400 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 8013400:	b580      	push	{r7, lr}
 8013402:	b082      	sub	sp, #8
 8013404:	af00      	add	r7, sp, #0
 8013406:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	4618      	mov	r0, r3
 801340c:	f000 f89e 	bl	801354c <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE7releaseEv>
 8013410:	4603      	mov	r3, r0
 8013412:	4618      	mov	r0, r3
 8013414:	3708      	adds	r7, #8
 8013416:	46bd      	mov	sp, r7
 8013418:	bd80      	pop	{r7, pc}

0801341a <_ZSt7forwardISt14default_deleteI7StepgenEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801341a:	b480      	push	{r7}
 801341c:	b083      	sub	sp, #12
 801341e:	af00      	add	r7, sp, #0
 8013420:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	4618      	mov	r0, r3
 8013426:	370c      	adds	r7, #12
 8013428:	46bd      	mov	sp, r7
 801342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801342e:	4770      	bx	lr

08013430 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8013430:	b590      	push	{r4, r7, lr}
 8013432:	b085      	sub	sp, #20
 8013434:	af00      	add	r7, sp, #0
 8013436:	60f8      	str	r0, [r7, #12]
 8013438:	60b9      	str	r1, [r7, #8]
 801343a:	607a      	str	r2, [r7, #4]
 801343c:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 801343e:	6878      	ldr	r0, [r7, #4]
 8013440:	f000 f899 	bl	8013576 <_ZSt7forwardIP7StepgenEOT_RNSt16remove_referenceIS2_E4typeE>
 8013444:	4604      	mov	r4, r0
 8013446:	6838      	ldr	r0, [r7, #0]
 8013448:	f7ff ffe7 	bl	801341a <_ZSt7forwardISt14default_deleteI7StepgenEEOT_RNSt16remove_referenceIS3_E4typeE>
 801344c:	4603      	mov	r3, r0
 801344e:	4622      	mov	r2, r4
 8013450:	68b9      	ldr	r1, [r7, #8]
 8013452:	68f8      	ldr	r0, [r7, #12]
 8013454:	f000 f89a 	bl	801358c <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>
	}
 8013458:	bf00      	nop
 801345a:	3714      	adds	r7, #20
 801345c:	46bd      	mov	sp, r7
 801345e:	bd90      	pop	{r4, r7, pc}

08013460 <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8013460:	b580      	push	{r7, lr}
 8013462:	b082      	sub	sp, #8
 8013464:	af00      	add	r7, sp, #0
 8013466:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8013468:	6878      	ldr	r0, [r7, #4]
 801346a:	f000 f8ad 	bl	80135c8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7StepgenEEEC1Ev>
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	4618      	mov	r0, r3
 8013472:	f000 f8b5 	bl	80135e0 <_ZNSt10_Head_baseILj0EP7StepgenLb0EEC1Ev>
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	4618      	mov	r0, r3
 801347a:	3708      	adds	r7, #8
 801347c:	46bd      	mov	sp, r7
 801347e:	bd80      	pop	{r7, pc}

08013480 <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8013480:	b580      	push	{r7, lr}
 8013482:	b082      	sub	sp, #8
 8013484:	af00      	add	r7, sp, #0
 8013486:	6078      	str	r0, [r7, #4]
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	4618      	mov	r0, r3
 801348c:	f000 f8b6 	bl	80135fc <_ZNSt10_Head_baseILj0EP7StepgenLb0EE7_M_headERS2_>
 8013490:	4603      	mov	r3, r0
 8013492:	4618      	mov	r0, r3
 8013494:	3708      	adds	r7, #8
 8013496:	46bd      	mov	sp, r7
 8013498:	bd80      	pop	{r7, pc}

0801349a <_ZSt12__get_helperILj1ESt14default_deleteI7StepgenEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801349a:	b580      	push	{r7, lr}
 801349c:	b082      	sub	sp, #8
 801349e:	af00      	add	r7, sp, #0
 80134a0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80134a2:	6878      	ldr	r0, [r7, #4]
 80134a4:	f000 f8b5 	bl	8013612 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7StepgenEEE7_M_headERS3_>
 80134a8:	4603      	mov	r3, r0
 80134aa:	4618      	mov	r0, r3
 80134ac:	3708      	adds	r7, #8
 80134ae:	46bd      	mov	sp, r7
 80134b0:	bd80      	pop	{r7, pc}

080134b2 <_ZSt3getILj0EJP7StepgenSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 80134b2:	b580      	push	{r7, lr}
 80134b4:	b082      	sub	sp, #8
 80134b6:	af00      	add	r7, sp, #0
 80134b8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	4618      	mov	r0, r3
 80134be:	f000 f8b4 	bl	801362a <_ZSt12__get_helperILj0EP7StepgenJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80134c2:	4603      	mov	r3, r0
 80134c4:	4618      	mov	r0, r3
 80134c6:	3708      	adds	r7, #8
 80134c8:	46bd      	mov	sp, r7
 80134ca:	bd80      	pop	{r7, pc}

080134cc <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80134cc:	b480      	push	{r7}
 80134ce:	b083      	sub	sp, #12
 80134d0:	af00      	add	r7, sp, #0
 80134d2:	6078      	str	r0, [r7, #4]
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	4618      	mov	r0, r3
 80134d8:	370c      	adds	r7, #12
 80134da:	46bd      	mov	sp, r7
 80134dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134e0:	4770      	bx	lr

080134e2 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80134e2:	b480      	push	{r7}
 80134e4:	b083      	sub	sp, #12
 80134e6:	af00      	add	r7, sp, #0
 80134e8:	6078      	str	r0, [r7, #4]
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	4618      	mov	r0, r3
 80134ee:	370c      	adds	r7, #12
 80134f0:	46bd      	mov	sp, r7
 80134f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134f6:	4770      	bx	lr

080134f8 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80134f8:	b580      	push	{r7, lr}
 80134fa:	b084      	sub	sp, #16
 80134fc:	af00      	add	r7, sp, #0
 80134fe:	60f8      	str	r0, [r7, #12]
 8013500:	60b9      	str	r1, [r7, #8]
 8013502:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8013504:	68f8      	ldr	r0, [r7, #12]
 8013506:	f000 f89c 	bl	8013642 <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 801350a:	4602      	mov	r2, r0
 801350c:	68bb      	ldr	r3, [r7, #8]
 801350e:	4293      	cmp	r3, r2
 8013510:	bf8c      	ite	hi
 8013512:	2301      	movhi	r3, #1
 8013514:	2300      	movls	r3, #0
 8013516:	b2db      	uxtb	r3, r3
 8013518:	2b00      	cmp	r3, #0
 801351a:	bf14      	ite	ne
 801351c:	2301      	movne	r3, #1
 801351e:	2300      	moveq	r3, #0
 8013520:	b2db      	uxtb	r3, r3
 8013522:	2b00      	cmp	r3, #0
 8013524:	d007      	beq.n	8013536 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8013526:	68bb      	ldr	r3, [r7, #8]
 8013528:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801352c:	d301      	bcc.n	8013532 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 801352e:	f012 fceb 	bl	8025f08 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8013532:	f012 fce6 	bl	8025f02 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8013536:	68bb      	ldr	r3, [r7, #8]
 8013538:	011b      	lsls	r3, r3, #4
 801353a:	4618      	mov	r0, r3
 801353c:	f012 fcce 	bl	8025edc <_Znwj>
 8013540:	4603      	mov	r3, r0
 8013542:	bf00      	nop
      }
 8013544:	4618      	mov	r0, r3
 8013546:	3710      	adds	r7, #16
 8013548:	46bd      	mov	sp, r7
 801354a:	bd80      	pop	{r7, pc}

0801354c <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 801354c:	b580      	push	{r7, lr}
 801354e:	b084      	sub	sp, #16
 8013550:	af00      	add	r7, sp, #0
 8013552:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8013554:	6878      	ldr	r0, [r7, #4]
 8013556:	f7ff fd85 	bl	8013064 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 801355a:	4603      	mov	r3, r0
 801355c:	681b      	ldr	r3, [r3, #0]
 801355e:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8013560:	6878      	ldr	r0, [r7, #4]
 8013562:	f7ff fd7f 	bl	8013064 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 8013566:	4603      	mov	r3, r0
 8013568:	2200      	movs	r2, #0
 801356a:	601a      	str	r2, [r3, #0]
	return __p;
 801356c:	68fb      	ldr	r3, [r7, #12]
      }
 801356e:	4618      	mov	r0, r3
 8013570:	3710      	adds	r7, #16
 8013572:	46bd      	mov	sp, r7
 8013574:	bd80      	pop	{r7, pc}

08013576 <_ZSt7forwardIP7StepgenEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8013576:	b480      	push	{r7}
 8013578:	b083      	sub	sp, #12
 801357a:	af00      	add	r7, sp, #0
 801357c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	4618      	mov	r0, r3
 8013582:	370c      	adds	r7, #12
 8013584:	46bd      	mov	sp, r7
 8013586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801358a:	4770      	bx	lr

0801358c <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 801358c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801358e:	b085      	sub	sp, #20
 8013590:	af00      	add	r7, sp, #0
 8013592:	60f8      	str	r0, [r7, #12]
 8013594:	60b9      	str	r1, [r7, #8]
 8013596:	607a      	str	r2, [r7, #4]
 8013598:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801359a:	68bb      	ldr	r3, [r7, #8]
 801359c:	4619      	mov	r1, r3
 801359e:	2010      	movs	r0, #16
 80135a0:	f7f6 f8ae 	bl	8009700 <_ZnwjPv>
 80135a4:	4605      	mov	r5, r0
 80135a6:	6878      	ldr	r0, [r7, #4]
 80135a8:	f7ff ffe5 	bl	8013576 <_ZSt7forwardIP7StepgenEOT_RNSt16remove_referenceIS2_E4typeE>
 80135ac:	4603      	mov	r3, r0
 80135ae:	681c      	ldr	r4, [r3, #0]
 80135b0:	6838      	ldr	r0, [r7, #0]
 80135b2:	f7ff ff32 	bl	801341a <_ZSt7forwardISt14default_deleteI7StepgenEEOT_RNSt16remove_referenceIS3_E4typeE>
 80135b6:	4632      	mov	r2, r6
 80135b8:	4621      	mov	r1, r4
 80135ba:	4628      	mov	r0, r5
 80135bc:	f000 f84e 	bl	801365c <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>
 80135c0:	bf00      	nop
 80135c2:	3714      	adds	r7, #20
 80135c4:	46bd      	mov	sp, r7
 80135c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080135c8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7StepgenEEEC1Ev>:
      _Tuple_impl()
 80135c8:	b580      	push	{r7, lr}
 80135ca:	b082      	sub	sp, #8
 80135cc:	af00      	add	r7, sp, #0
 80135ce:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80135d0:	6878      	ldr	r0, [r7, #4]
 80135d2:	f000 f865 	bl	80136a0 <_ZNSt10_Head_baseILj1ESt14default_deleteI7StepgenELb1EEC1Ev>
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	4618      	mov	r0, r3
 80135da:	3708      	adds	r7, #8
 80135dc:	46bd      	mov	sp, r7
 80135de:	bd80      	pop	{r7, pc}

080135e0 <_ZNSt10_Head_baseILj0EP7StepgenLb0EEC1Ev>:
      constexpr _Head_base()
 80135e0:	b480      	push	{r7}
 80135e2:	b083      	sub	sp, #12
 80135e4:	af00      	add	r7, sp, #0
 80135e6:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	2200      	movs	r2, #0
 80135ec:	601a      	str	r2, [r3, #0]
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	4618      	mov	r0, r3
 80135f2:	370c      	adds	r7, #12
 80135f4:	46bd      	mov	sp, r7
 80135f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135fa:	4770      	bx	lr

080135fc <_ZNSt10_Head_baseILj0EP7StepgenLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80135fc:	b480      	push	{r7}
 80135fe:	b083      	sub	sp, #12
 8013600:	af00      	add	r7, sp, #0
 8013602:	6078      	str	r0, [r7, #4]
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	4618      	mov	r0, r3
 8013608:	370c      	adds	r7, #12
 801360a:	46bd      	mov	sp, r7
 801360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013610:	4770      	bx	lr

08013612 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7StepgenEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8013612:	b580      	push	{r7, lr}
 8013614:	b082      	sub	sp, #8
 8013616:	af00      	add	r7, sp, #0
 8013618:	6078      	str	r0, [r7, #4]
 801361a:	6878      	ldr	r0, [r7, #4]
 801361c:	f000 f84b 	bl	80136b6 <_ZNSt10_Head_baseILj1ESt14default_deleteI7StepgenELb1EE7_M_headERS3_>
 8013620:	4603      	mov	r3, r0
 8013622:	4618      	mov	r0, r3
 8013624:	3708      	adds	r7, #8
 8013626:	46bd      	mov	sp, r7
 8013628:	bd80      	pop	{r7, pc}

0801362a <_ZSt12__get_helperILj0EP7StepgenJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801362a:	b580      	push	{r7, lr}
 801362c:	b082      	sub	sp, #8
 801362e:	af00      	add	r7, sp, #0
 8013630:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8013632:	6878      	ldr	r0, [r7, #4]
 8013634:	f000 f84a 	bl	80136cc <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEE7_M_headERKS4_>
 8013638:	4603      	mov	r3, r0
 801363a:	4618      	mov	r0, r3
 801363c:	3708      	adds	r7, #8
 801363e:	46bd      	mov	sp, r7
 8013640:	bd80      	pop	{r7, pc}

08013642 <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8013642:	b480      	push	{r7}
 8013644:	b083      	sub	sp, #12
 8013646:	af00      	add	r7, sp, #0
 8013648:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 801364a:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      }
 801364e:	4618      	mov	r0, r3
 8013650:	370c      	adds	r7, #12
 8013652:	46bd      	mov	sp, r7
 8013654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013658:	4770      	bx	lr
	...

0801365c <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
 801365c:	b5b0      	push	{r4, r5, r7, lr}
 801365e:	b086      	sub	sp, #24
 8013660:	af00      	add	r7, sp, #0
 8013662:	60f8      	str	r0, [r7, #12]
 8013664:	60b9      	str	r1, [r7, #8]
 8013666:	713a      	strb	r2, [r7, #4]
      : _M_impl(__p, std::move(__d), _Alloc()) { }
 8013668:	68fb      	ldr	r3, [r7, #12]
 801366a:	4618      	mov	r0, r3
 801366c:	f7f9 fcda 	bl	800d024 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8013670:	4a0a      	ldr	r2, [pc, #40]	@ (801369c <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_+0x40>)
 8013672:	68fb      	ldr	r3, [r7, #12]
 8013674:	601a      	str	r2, [r3, #0]
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	f103 040c 	add.w	r4, r3, #12
 801367c:	1d3b      	adds	r3, r7, #4
 801367e:	4618      	mov	r0, r3
 8013680:	f000 f831 	bl	80136e6 <_ZSt4moveIRSt14default_deleteI7StepgenEEONSt16remove_referenceIT_E4typeEOS5_>
 8013684:	f107 0314 	add.w	r3, r7, #20
 8013688:	462a      	mov	r2, r5
 801368a:	68b9      	ldr	r1, [r7, #8]
 801368c:	4620      	mov	r0, r4
 801368e:	f000 f835 	bl	80136fc <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>
 8013692:	68fb      	ldr	r3, [r7, #12]
 8013694:	4618      	mov	r0, r3
 8013696:	3718      	adds	r7, #24
 8013698:	46bd      	mov	sp, r7
 801369a:	bdb0      	pop	{r4, r5, r7, pc}
 801369c:	08028b34 	.word	0x08028b34

080136a0 <_ZNSt10_Head_baseILj1ESt14default_deleteI7StepgenELb1EEC1Ev>:
      constexpr _Head_base()
 80136a0:	b480      	push	{r7}
 80136a2:	b083      	sub	sp, #12
 80136a4:	af00      	add	r7, sp, #0
 80136a6:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	4618      	mov	r0, r3
 80136ac:	370c      	adds	r7, #12
 80136ae:	46bd      	mov	sp, r7
 80136b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136b4:	4770      	bx	lr

080136b6 <_ZNSt10_Head_baseILj1ESt14default_deleteI7StepgenELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80136b6:	b480      	push	{r7}
 80136b8:	b083      	sub	sp, #12
 80136ba:	af00      	add	r7, sp, #0
 80136bc:	6078      	str	r0, [r7, #4]
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	4618      	mov	r0, r3
 80136c2:	370c      	adds	r7, #12
 80136c4:	46bd      	mov	sp, r7
 80136c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ca:	4770      	bx	lr

080136cc <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80136cc:	b580      	push	{r7, lr}
 80136ce:	b082      	sub	sp, #8
 80136d0:	af00      	add	r7, sp, #0
 80136d2:	6078      	str	r0, [r7, #4]
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	4618      	mov	r0, r3
 80136d8:	f000 f82c 	bl	8013734 <_ZNSt10_Head_baseILj0EP7StepgenLb0EE7_M_headERKS2_>
 80136dc:	4603      	mov	r3, r0
 80136de:	4618      	mov	r0, r3
 80136e0:	3708      	adds	r7, #8
 80136e2:	46bd      	mov	sp, r7
 80136e4:	bd80      	pop	{r7, pc}

080136e6 <_ZSt4moveIRSt14default_deleteI7StepgenEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80136e6:	b480      	push	{r7}
 80136e8:	b083      	sub	sp, #12
 80136ea:	af00      	add	r7, sp, #0
 80136ec:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	4618      	mov	r0, r3
 80136f2:	370c      	adds	r7, #12
 80136f4:	46bd      	mov	sp, r7
 80136f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136fa:	4770      	bx	lr

080136fc <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 80136fc:	b580      	push	{r7, lr}
 80136fe:	b084      	sub	sp, #16
 8013700:	af00      	add	r7, sp, #0
 8013702:	60f8      	str	r0, [r7, #12]
 8013704:	60b9      	str	r1, [r7, #8]
 8013706:	713a      	strb	r2, [r7, #4]
 8013708:	603b      	str	r3, [r7, #0]
	: _Del_base(std::move(__d)), _Alloc_base(__a), _M_ptr(__p)
 801370a:	1d3b      	adds	r3, r7, #4
 801370c:	4618      	mov	r0, r3
 801370e:	f7ff ffea 	bl	80136e6 <_ZSt4moveIRSt14default_deleteI7StepgenEEONSt16remove_referenceIT_E4typeEOS5_>
 8013712:	4603      	mov	r3, r0
 8013714:	4619      	mov	r1, r3
 8013716:	68f8      	ldr	r0, [r7, #12]
 8013718:	f000 f817 	bl	801374a <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI7StepgenELb1EEC1EOS2_>
 801371c:	6839      	ldr	r1, [r7, #0]
 801371e:	68f8      	ldr	r0, [r7, #12]
 8013720:	f7fb fd6a 	bl	800f1f8 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EEC1ERKS0_>
 8013724:	68fb      	ldr	r3, [r7, #12]
 8013726:	68ba      	ldr	r2, [r7, #8]
 8013728:	601a      	str	r2, [r3, #0]
	{ }
 801372a:	68fb      	ldr	r3, [r7, #12]
 801372c:	4618      	mov	r0, r3
 801372e:	3710      	adds	r7, #16
 8013730:	46bd      	mov	sp, r7
 8013732:	bd80      	pop	{r7, pc}

08013734 <_ZNSt10_Head_baseILj0EP7StepgenLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8013734:	b480      	push	{r7}
 8013736:	b083      	sub	sp, #12
 8013738:	af00      	add	r7, sp, #0
 801373a:	6078      	str	r0, [r7, #4]
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	4618      	mov	r0, r3
 8013740:	370c      	adds	r7, #12
 8013742:	46bd      	mov	sp, r7
 8013744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013748:	4770      	bx	lr

0801374a <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI7StepgenELb1EEC1EOS2_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _Tp(std::move(__tp)) { }
 801374a:	b580      	push	{r7, lr}
 801374c:	b082      	sub	sp, #8
 801374e:	af00      	add	r7, sp, #0
 8013750:	6078      	str	r0, [r7, #4]
 8013752:	6039      	str	r1, [r7, #0]
 8013754:	6838      	ldr	r0, [r7, #0]
 8013756:	f7ff ffc6 	bl	80136e6 <_ZSt4moveIRSt14default_deleteI7StepgenEEONSt16remove_referenceIT_E4typeEOS5_>
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	4618      	mov	r0, r3
 801375e:	3708      	adds	r7, #8
 8013760:	46bd      	mov	sp, r7
 8013762:	bd80      	pop	{r7, pc}

08013764 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 8013764:	b580      	push	{r7, lr}
 8013766:	b082      	sub	sp, #8
 8013768:	af00      	add	r7, sp, #0
 801376a:	6078      	str	r0, [r7, #4]
 801376c:	4a05      	ldr	r2, [pc, #20]	@ (8013784 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	601a      	str	r2, [r3, #0]
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	4618      	mov	r0, r3
 8013776:	f7f7 fe17 	bl	800b3a8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	4618      	mov	r0, r3
 801377e:	3708      	adds	r7, #8
 8013780:	46bd      	mov	sp, r7
 8013782:	bd80      	pop	{r7, pc}
 8013784:	08028b34 	.word	0x08028b34

08013788 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 8013788:	b580      	push	{r7, lr}
 801378a:	b082      	sub	sp, #8
 801378c:	af00      	add	r7, sp, #0
 801378e:	6078      	str	r0, [r7, #4]
 8013790:	6878      	ldr	r0, [r7, #4]
 8013792:	f7ff ffe7 	bl	8013764 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8013796:	2110      	movs	r1, #16
 8013798:	6878      	ldr	r0, [r7, #4]
 801379a:	f012 fb8e 	bl	8025eba <_ZdlPvj>
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	4618      	mov	r0, r3
 80137a2:	3708      	adds	r7, #8
 80137a4:	46bd      	mov	sp, r7
 80137a6:	bd80      	pop	{r7, pc}

080137a8 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80137a8:	b580      	push	{r7, lr}
 80137aa:	b082      	sub	sp, #8
 80137ac:	af00      	add	r7, sp, #0
 80137ae:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	330c      	adds	r3, #12
 80137b4:	4618      	mov	r0, r3
 80137b6:	f000 f83f 	bl	8013838 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>
 80137ba:	4602      	mov	r2, r0
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	68db      	ldr	r3, [r3, #12]
 80137c0:	4619      	mov	r1, r3
 80137c2:	4610      	mov	r0, r2
 80137c4:	f7ff fca7 	bl	8013116 <_ZNKSt14default_deleteI7StepgenEclEPS0_>
 80137c8:	bf00      	nop
 80137ca:	3708      	adds	r7, #8
 80137cc:	46bd      	mov	sp, r7
 80137ce:	bd80      	pop	{r7, pc}

080137d0 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80137d0:	b580      	push	{r7, lr}
 80137d2:	b086      	sub	sp, #24
 80137d4:	af00      	add	r7, sp, #0
 80137d6:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	330c      	adds	r3, #12
 80137dc:	4618      	mov	r0, r3
 80137de:	f000 f837 	bl	8013850 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 80137e2:	4602      	mov	r2, r0
 80137e4:	f107 0314 	add.w	r3, r7, #20
 80137e8:	4611      	mov	r1, r2
 80137ea:	4618      	mov	r0, r3
 80137ec:	f000 f83c 	bl	8013868 <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 80137f0:	f107 0114 	add.w	r1, r7, #20
 80137f4:	f107 030c 	add.w	r3, r7, #12
 80137f8:	687a      	ldr	r2, [r7, #4]
 80137fa:	4618      	mov	r0, r3
 80137fc:	f000 f841 	bl	8013882 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>
	this->~_Sp_counted_deleter();
 8013800:	6878      	ldr	r0, [r7, #4]
 8013802:	f7ff ffaf 	bl	8013764 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 8013806:	f107 030c 	add.w	r3, r7, #12
 801380a:	4618      	mov	r0, r3
 801380c:	f000 f84d 	bl	80138aa <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 8013810:	f107 0314 	add.w	r3, r7, #20
 8013814:	4618      	mov	r0, r3
 8013816:	f7ff fdd8 	bl	80133ca <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 801381a:	3718      	adds	r7, #24
 801381c:	46bd      	mov	sp, r7
 801381e:	bd80      	pop	{r7, pc}

08013820 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const type_info& __ti [[__gnu__::__unused__]]) noexcept
 8013820:	b480      	push	{r7}
 8013822:	b083      	sub	sp, #12
 8013824:	af00      	add	r7, sp, #0
 8013826:	6078      	str	r0, [r7, #4]
 8013828:	6039      	str	r1, [r7, #0]
        return nullptr;
 801382a:	2300      	movs	r3, #0
      }
 801382c:	4618      	mov	r0, r3
 801382e:	370c      	adds	r7, #12
 8013830:	46bd      	mov	sp, r7
 8013832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013836:	4770      	bx	lr

08013838 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 8013838:	b580      	push	{r7, lr}
 801383a:	b082      	sub	sp, #8
 801383c:	af00      	add	r7, sp, #0
 801383e:	6078      	str	r0, [r7, #4]
 8013840:	6878      	ldr	r0, [r7, #4]
 8013842:	f000 f847 	bl	80138d4 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI7StepgenELb1EE6_S_getERS3_>
 8013846:	4603      	mov	r3, r0
 8013848:	4618      	mov	r0, r3
 801384a:	3708      	adds	r7, #8
 801384c:	46bd      	mov	sp, r7
 801384e:	bd80      	pop	{r7, pc}

08013850 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 8013850:	b580      	push	{r7, lr}
 8013852:	b082      	sub	sp, #8
 8013854:	af00      	add	r7, sp, #0
 8013856:	6078      	str	r0, [r7, #4]
 8013858:	6878      	ldr	r0, [r7, #4]
 801385a:	f7fb fd9c 	bl	800f396 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EE6_S_getERS1_>
 801385e:	4603      	mov	r3, r0
 8013860:	4618      	mov	r0, r3
 8013862:	3708      	adds	r7, #8
 8013864:	46bd      	mov	sp, r7
 8013866:	bd80      	pop	{r7, pc}

08013868 <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8013868:	b580      	push	{r7, lr}
 801386a:	b082      	sub	sp, #8
 801386c:	af00      	add	r7, sp, #0
 801386e:	6078      	str	r0, [r7, #4]
 8013870:	6039      	str	r1, [r7, #0]
 8013872:	6878      	ldr	r0, [r7, #4]
 8013874:	f7ff fe2a 	bl	80134cc <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	4618      	mov	r0, r3
 801387c:	3708      	adds	r7, #8
 801387e:	46bd      	mov	sp, r7
 8013880:	bd80      	pop	{r7, pc}

08013882 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8013882:	b580      	push	{r7, lr}
 8013884:	b084      	sub	sp, #16
 8013886:	af00      	add	r7, sp, #0
 8013888:	60f8      	str	r0, [r7, #12]
 801388a:	60b9      	str	r1, [r7, #8]
 801388c:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 801388e:	68b8      	ldr	r0, [r7, #8]
 8013890:	f000 f82b 	bl	80138ea <_ZSt11__addressofISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>
 8013894:	4602      	mov	r2, r0
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	601a      	str	r2, [r3, #0]
 801389a:	68fb      	ldr	r3, [r7, #12]
 801389c:	687a      	ldr	r2, [r7, #4]
 801389e:	605a      	str	r2, [r3, #4]
      { }
 80138a0:	68fb      	ldr	r3, [r7, #12]
 80138a2:	4618      	mov	r0, r3
 80138a4:	3710      	adds	r7, #16
 80138a6:	46bd      	mov	sp, r7
 80138a8:	bd80      	pop	{r7, pc}

080138aa <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 80138aa:	b580      	push	{r7, lr}
 80138ac:	b082      	sub	sp, #8
 80138ae:	af00      	add	r7, sp, #0
 80138b0:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	685b      	ldr	r3, [r3, #4]
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d007      	beq.n	80138ca <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	6818      	ldr	r0, [r3, #0]
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	685b      	ldr	r3, [r3, #4]
 80138c2:	2201      	movs	r2, #1
 80138c4:	4619      	mov	r1, r3
 80138c6:	f000 f81b 	bl	8013900 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>
      }
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	4618      	mov	r0, r3
 80138ce:	3708      	adds	r7, #8
 80138d0:	46bd      	mov	sp, r7
 80138d2:	bd80      	pop	{r7, pc}

080138d4 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI7StepgenELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 80138d4:	b480      	push	{r7}
 80138d6:	b083      	sub	sp, #12
 80138d8:	af00      	add	r7, sp, #0
 80138da:	6078      	str	r0, [r7, #4]
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	4618      	mov	r0, r3
 80138e0:	370c      	adds	r7, #12
 80138e2:	46bd      	mov	sp, r7
 80138e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138e8:	4770      	bx	lr

080138ea <_ZSt11__addressofISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80138ea:	b480      	push	{r7}
 80138ec:	b083      	sub	sp, #12
 80138ee:	af00      	add	r7, sp, #0
 80138f0:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	4618      	mov	r0, r3
 80138f6:	370c      	adds	r7, #12
 80138f8:	46bd      	mov	sp, r7
 80138fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138fe:	4770      	bx	lr

08013900 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8013900:	b580      	push	{r7, lr}
 8013902:	b084      	sub	sp, #16
 8013904:	af00      	add	r7, sp, #0
 8013906:	60f8      	str	r0, [r7, #12]
 8013908:	60b9      	str	r1, [r7, #8]
 801390a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 801390c:	687a      	ldr	r2, [r7, #4]
 801390e:	68b9      	ldr	r1, [r7, #8]
 8013910:	68f8      	ldr	r0, [r7, #12]
 8013912:	f000 f804 	bl	801391e <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>
 8013916:	bf00      	nop
 8013918:	3710      	adds	r7, #16
 801391a:	46bd      	mov	sp, r7
 801391c:	bd80      	pop	{r7, pc}

0801391e <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 801391e:	b580      	push	{r7, lr}
 8013920:	b084      	sub	sp, #16
 8013922:	af00      	add	r7, sp, #0
 8013924:	60f8      	str	r0, [r7, #12]
 8013926:	60b9      	str	r1, [r7, #8]
 8013928:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	011b      	lsls	r3, r3, #4
 801392e:	4619      	mov	r1, r3
 8013930:	68b8      	ldr	r0, [r7, #8]
 8013932:	f012 fac2 	bl	8025eba <_ZdlPvj>
      }
 8013936:	3710      	adds	r7, #16
 8013938:	46bd      	mov	sp, r7
 801393a:	bd80      	pop	{r7, pc}

0801393c <_ZSt20__throw_bad_weak_ptrv>:
  { _GLIBCXX_THROW_OR_ABORT(bad_weak_ptr()); }
 801393c:	b580      	push	{r7, lr}
 801393e:	af00      	add	r7, sp, #0
 8013940:	f012 ff34 	bl	80267ac <abort>

08013944 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE23_M_add_ref_lock_nothrowEv>:
    {
 8013944:	b480      	push	{r7}
 8013946:	b083      	sub	sp, #12
 8013948:	af00      	add	r7, sp, #0
 801394a:	6078      	str	r0, [r7, #4]
      if (_M_use_count == 0)
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	685b      	ldr	r3, [r3, #4]
 8013950:	2b00      	cmp	r3, #0
 8013952:	d101      	bne.n	8013958 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE23_M_add_ref_lock_nothrowEv+0x14>
	return false;
 8013954:	2300      	movs	r3, #0
 8013956:	e005      	b.n	8013964 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE23_M_add_ref_lock_nothrowEv+0x20>
      ++_M_use_count;
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	685b      	ldr	r3, [r3, #4]
 801395c:	1c5a      	adds	r2, r3, #1
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	605a      	str	r2, [r3, #4]
      return true;
 8013962:	2301      	movs	r3, #1
    }
 8013964:	4618      	mov	r0, r3
 8013966:	370c      	adds	r7, #12
 8013968:	46bd      	mov	sp, r7
 801396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801396e:	4770      	bx	lr

08013970 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_weak_add_refEv>:
    { ++_M_weak_count; }
 8013970:	b480      	push	{r7}
 8013972:	b083      	sub	sp, #12
 8013974:	af00      	add	r7, sp, #0
 8013976:	6078      	str	r0, [r7, #4]
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	689b      	ldr	r3, [r3, #8]
 801397c:	1c5a      	adds	r2, r3, #1
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	609a      	str	r2, [r3, #8]
 8013982:	bf00      	nop
 8013984:	370c      	adds	r7, #12
 8013986:	46bd      	mov	sp, r7
 8013988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801398c:	4770      	bx	lr

0801398e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_weak_releaseEv>:
    {
 801398e:	b580      	push	{r7, lr}
 8013990:	b082      	sub	sp, #8
 8013992:	af00      	add	r7, sp, #0
 8013994:	6078      	str	r0, [r7, #4]
      if (--_M_weak_count == 0)
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	689b      	ldr	r3, [r3, #8]
 801399a:	1e5a      	subs	r2, r3, #1
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	609a      	str	r2, [r3, #8]
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	689b      	ldr	r3, [r3, #8]
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	bf0c      	ite	eq
 80139a8:	2301      	moveq	r3, #1
 80139aa:	2300      	movne	r3, #0
 80139ac:	b2db      	uxtb	r3, r3
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d005      	beq.n	80139be <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_weak_releaseEv+0x30>
        _M_destroy();
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	681b      	ldr	r3, [r3, #0]
 80139b6:	330c      	adds	r3, #12
 80139b8:	681b      	ldr	r3, [r3, #0]
 80139ba:	6878      	ldr	r0, [r7, #4]
 80139bc:	4798      	blx	r3
    }
 80139be:	bf00      	nop
 80139c0:	3708      	adds	r7, #8
 80139c2:	46bd      	mov	sp, r7
 80139c4:	bd80      	pop	{r7, pc}

080139c6 <_ZNKSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE16_M_get_use_countEv>:
    { return _M_use_count; }
 80139c6:	b480      	push	{r7}
 80139c8:	b083      	sub	sp, #12
 80139ca:	af00      	add	r7, sp, #0
 80139cc:	6078      	str	r0, [r7, #4]
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	685b      	ldr	r3, [r3, #4]
 80139d2:	4618      	mov	r0, r3
 80139d4:	370c      	adds	r7, #12
 80139d6:	46bd      	mov	sp, r7
 80139d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139dc:	4770      	bx	lr

080139de <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE7highestEv>:
  static constexpr T highest() {
 80139de:	b480      	push	{r7}
 80139e0:	af00      	add	r7, sp, #0
    return T(-1);
 80139e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  }
 80139e6:	4618      	mov	r0, r3
 80139e8:	46bd      	mov	sp, r7
 80139ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ee:	4770      	bx	lr

080139f0 <_ZNK11ArduinoJson8V730HB2210JsonString4sizeEv>:
  size_t size() const {
 80139f0:	b580      	push	{r7, lr}
 80139f2:	b082      	sub	sp, #8
 80139f4:	af00      	add	r7, sp, #0
 80139f6:	6078      	str	r0, [r7, #4]
    return str_.size();
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	4618      	mov	r0, r3
 80139fc:	f7f0 fad6 	bl	8003fac <_ZNK11ArduinoJson8V730HB226detail9RamString4sizeEv>
 8013a00:	4603      	mov	r3, r0
  }
 8013a02:	4618      	mov	r0, r3
 8013a04:	3708      	adds	r7, #8
 8013a06:	46bd      	mov	sp, r7
 8013a08:	bd80      	pop	{r7, pc}

08013a0a <_ZNK11ArduinoJson8V730HB2210JsonStringcvbEv>:
  explicit operator bool() const {
 8013a0a:	b580      	push	{r7, lr}
 8013a0c:	b082      	sub	sp, #8
 8013a0e:	af00      	add	r7, sp, #0
 8013a10:	6078      	str	r0, [r7, #4]
    return str_.data() != 0;
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	4618      	mov	r0, r3
 8013a16:	f7f0 fad5 	bl	8003fc4 <_ZNK11ArduinoJson8V730HB226detail9RamString4dataEv>
 8013a1a:	4603      	mov	r3, r0
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	bf14      	ite	ne
 8013a20:	2301      	movne	r3, #1
 8013a22:	2300      	moveq	r3, #0
 8013a24:	b2db      	uxtb	r3, r3
  }
 8013a26:	4618      	mov	r0, r3
 8013a28:	3708      	adds	r7, #8
 8013a2a:	46bd      	mov	sp, r7
 8013a2c:	bd80      	pop	{r7, pc}

08013a2e <_ZNK11ArduinoJson8V730HB226detail14CollectionData4headEv>:
  SlotId head() const {
 8013a2e:	b480      	push	{r7}
 8013a30:	b083      	sub	sp, #12
 8013a32:	af00      	add	r7, sp, #0
 8013a34:	6078      	str	r0, [r7, #4]
    return head_;
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	881b      	ldrh	r3, [r3, #0]
  }
 8013a3a:	4618      	mov	r0, r3
 8013a3c:	370c      	adds	r7, #12
 8013a3e:	46bd      	mov	sp, r7
 8013a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a44:	4770      	bx	lr

08013a46 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence10escapeCharEc>:
  static char escapeChar(char c) {
 8013a46:	b580      	push	{r7, lr}
 8013a48:	b084      	sub	sp, #16
 8013a4a:	af00      	add	r7, sp, #0
 8013a4c:	4603      	mov	r3, r0
 8013a4e:	71fb      	strb	r3, [r7, #7]
    const char* p = escapeTable(true);
 8013a50:	2001      	movs	r0, #1
 8013a52:	f7f1 fa4d 	bl	8004ef0 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb>
 8013a56:	60f8      	str	r0, [r7, #12]
    while (p[0] && p[1] != c) {
 8013a58:	e002      	b.n	8013a60 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence10escapeCharEc+0x1a>
      p += 2;
 8013a5a:	68fb      	ldr	r3, [r7, #12]
 8013a5c:	3302      	adds	r3, #2
 8013a5e:	60fb      	str	r3, [r7, #12]
    while (p[0] && p[1] != c) {
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	781b      	ldrb	r3, [r3, #0]
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d005      	beq.n	8013a74 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence10escapeCharEc+0x2e>
 8013a68:	68fb      	ldr	r3, [r7, #12]
 8013a6a:	3301      	adds	r3, #1
 8013a6c:	781b      	ldrb	r3, [r3, #0]
 8013a6e:	79fa      	ldrb	r2, [r7, #7]
 8013a70:	429a      	cmp	r2, r3
 8013a72:	d1f2      	bne.n	8013a5a <_ZN11ArduinoJson8V730HB226detail14EscapeSequence10escapeCharEc+0x14>
    return p[0];
 8013a74:	68fb      	ldr	r3, [r7, #12]
 8013a76:	781b      	ldrb	r3, [r3, #0]
  }
 8013a78:	4618      	mov	r0, r3
 8013a7a:	3710      	adds	r7, #16
 8013a7c:	46bd      	mov	sp, r7
 8013a7e:	bd80      	pop	{r7, pc}

08013a80 <_ZN11ArduinoJson8V730HB226detail5pow10Ei>:
  }

  return powersOf10;
}

constexpr uint32_t pow10(int exponent) {
 8013a80:	b580      	push	{r7, lr}
 8013a82:	b082      	sub	sp, #8
 8013a84:	af00      	add	r7, sp, #0
 8013a86:	6078      	str	r0, [r7, #4]
  return (exponent == 0) ? 1 : 10 * pow10(exponent - 1);
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d00a      	beq.n	8013aa4 <_ZN11ArduinoJson8V730HB226detail5pow10Ei+0x24>
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	3b01      	subs	r3, #1
 8013a92:	4618      	mov	r0, r3
 8013a94:	f7ff fff4 	bl	8013a80 <_ZN11ArduinoJson8V730HB226detail5pow10Ei>
 8013a98:	4602      	mov	r2, r0
 8013a9a:	4613      	mov	r3, r2
 8013a9c:	009b      	lsls	r3, r3, #2
 8013a9e:	4413      	add	r3, r2
 8013aa0:	005b      	lsls	r3, r3, #1
 8013aa2:	e000      	b.n	8013aa6 <_ZN11ArduinoJson8V730HB226detail5pow10Ei+0x26>
 8013aa4:	2301      	movs	r3, #1
}
 8013aa6:	4618      	mov	r0, r3
 8013aa8:	3708      	adds	r7, #8
 8013aaa:	46bd      	mov	sp, r7
 8013aac:	bd80      	pop	{r7, pc}
	...

08013ab0 <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda>:

inline FloatParts decomposeFloat(JsonFloat value, int8_t decimalPlaces) {
 8013ab0:	b580      	push	{r7, lr}
 8013ab2:	b08c      	sub	sp, #48	@ 0x30
 8013ab4:	af00      	add	r7, sp, #0
 8013ab6:	60f8      	str	r0, [r7, #12]
 8013ab8:	ed87 0b00 	vstr	d0, [r7]
 8013abc:	460b      	mov	r3, r1
 8013abe:	72fb      	strb	r3, [r7, #11]
  uint32_t maxDecimalPart = pow10(decimalPlaces);
 8013ac0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013ac4:	4618      	mov	r0, r3
 8013ac6:	f7ff ffdb 	bl	8013a80 <_ZN11ArduinoJson8V730HB226detail5pow10Ei>
 8013aca:	62f8      	str	r0, [r7, #44]	@ 0x2c

  int16_t exponent = normalize(value);
 8013acc:	463b      	mov	r3, r7
 8013ace:	4618      	mov	r0, r3
 8013ad0:	f000 fbe2 	bl	8014298 <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_>
 8013ad4:	4603      	mov	r3, r0
 8013ad6:	857b      	strh	r3, [r7, #42]	@ 0x2a

  uint32_t integral = uint32_t(value);
 8013ad8:	ed97 7b00 	vldr	d7, [r7]
 8013adc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8013ae0:	ee17 3a90 	vmov	r3, s15
 8013ae4:	627b      	str	r3, [r7, #36]	@ 0x24
  // reduce number of decimal places by the number of integral places
  for (uint32_t tmp = integral; tmp >= 10; tmp /= 10) {
 8013ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ae8:	623b      	str	r3, [r7, #32]
 8013aea:	e011      	b.n	8013b10 <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0x60>
    maxDecimalPart /= 10;
 8013aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013aee:	4a44      	ldr	r2, [pc, #272]	@ (8013c00 <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0x150>)
 8013af0:	fba2 2303 	umull	r2, r3, r2, r3
 8013af4:	08db      	lsrs	r3, r3, #3
 8013af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    decimalPlaces--;
 8013af8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013afc:	b2db      	uxtb	r3, r3
 8013afe:	3b01      	subs	r3, #1
 8013b00:	b2db      	uxtb	r3, r3
 8013b02:	72fb      	strb	r3, [r7, #11]
  for (uint32_t tmp = integral; tmp >= 10; tmp /= 10) {
 8013b04:	6a3b      	ldr	r3, [r7, #32]
 8013b06:	4a3e      	ldr	r2, [pc, #248]	@ (8013c00 <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0x150>)
 8013b08:	fba2 2303 	umull	r2, r3, r2, r3
 8013b0c:	08db      	lsrs	r3, r3, #3
 8013b0e:	623b      	str	r3, [r7, #32]
 8013b10:	6a3b      	ldr	r3, [r7, #32]
 8013b12:	2b09      	cmp	r3, #9
 8013b14:	d8ea      	bhi.n	8013aec <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0x3c>
  }

  JsonFloat remainder =
      (value - JsonFloat(integral)) * JsonFloat(maxDecimalPart);
 8013b16:	ed97 6b00 	vldr	d6, [r7]
 8013b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b1c:	ee07 3a90 	vmov	s15, r3
 8013b20:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8013b24:	ee36 6b47 	vsub.f64	d6, d6, d7
 8013b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b2a:	ee07 3a90 	vmov	s15, r3
 8013b2e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
  JsonFloat remainder =
 8013b32:	ee26 7b07 	vmul.f64	d7, d6, d7
 8013b36:	ed87 7b04 	vstr	d7, [r7, #16]

  uint32_t decimal = uint32_t(remainder);
 8013b3a:	ed97 7b04 	vldr	d7, [r7, #16]
 8013b3e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8013b42:	ee17 3a90 	vmov	r3, s15
 8013b46:	61fb      	str	r3, [r7, #28]
  remainder = remainder - JsonFloat(decimal);
 8013b48:	69fb      	ldr	r3, [r7, #28]
 8013b4a:	ee07 3a90 	vmov	s15, r3
 8013b4e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8013b52:	ed97 6b04 	vldr	d6, [r7, #16]
 8013b56:	ee36 7b47 	vsub.f64	d7, d6, d7
 8013b5a:	ed87 7b04 	vstr	d7, [r7, #16]

  // rounding:
  // increment by 1 if remainder >= 0.5
  decimal += uint32_t(remainder * 2);
 8013b5e:	ed97 7b04 	vldr	d7, [r7, #16]
 8013b62:	ee37 7b07 	vadd.f64	d7, d7, d7
 8013b66:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8013b6a:	ee17 2a90 	vmov	r2, s15
 8013b6e:	69fb      	ldr	r3, [r7, #28]
 8013b70:	4413      	add	r3, r2
 8013b72:	61fb      	str	r3, [r7, #28]
  if (decimal >= maxDecimalPart) {
 8013b74:	69fa      	ldr	r2, [r7, #28]
 8013b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b78:	429a      	cmp	r2, r3
 8013b7a:	d320      	bcc.n	8013bbe <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0x10e>
    decimal = 0;
 8013b7c:	2300      	movs	r3, #0
 8013b7e:	61fb      	str	r3, [r7, #28]
    integral++;
 8013b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b82:	3301      	adds	r3, #1
 8013b84:	627b      	str	r3, [r7, #36]	@ 0x24
    if (exponent && integral >= 10) {
 8013b86:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d017      	beq.n	8013bbe <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0x10e>
 8013b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b90:	2b09      	cmp	r3, #9
 8013b92:	d914      	bls.n	8013bbe <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0x10e>
      exponent++;
 8013b94:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8013b98:	b29b      	uxth	r3, r3
 8013b9a:	3301      	adds	r3, #1
 8013b9c:	b29b      	uxth	r3, r3
 8013b9e:	857b      	strh	r3, [r7, #42]	@ 0x2a
      integral = 1;
 8013ba0:	2301      	movs	r3, #1
 8013ba2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }

  // remove trailing zeros
  while (decimal % 10 == 0 && decimalPlaces > 0) {
 8013ba4:	e00b      	b.n	8013bbe <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0x10e>
    decimal /= 10;
 8013ba6:	69fb      	ldr	r3, [r7, #28]
 8013ba8:	4a15      	ldr	r2, [pc, #84]	@ (8013c00 <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0x150>)
 8013baa:	fba2 2303 	umull	r2, r3, r2, r3
 8013bae:	08db      	lsrs	r3, r3, #3
 8013bb0:	61fb      	str	r3, [r7, #28]
    decimalPlaces--;
 8013bb2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013bb6:	b2db      	uxtb	r3, r3
 8013bb8:	3b01      	subs	r3, #1
 8013bba:	b2db      	uxtb	r3, r3
 8013bbc:	72fb      	strb	r3, [r7, #11]
  while (decimal % 10 == 0 && decimalPlaces > 0) {
 8013bbe:	69f9      	ldr	r1, [r7, #28]
 8013bc0:	4b0f      	ldr	r3, [pc, #60]	@ (8013c00 <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0x150>)
 8013bc2:	fba3 2301 	umull	r2, r3, r3, r1
 8013bc6:	08da      	lsrs	r2, r3, #3
 8013bc8:	4613      	mov	r3, r2
 8013bca:	009b      	lsls	r3, r3, #2
 8013bcc:	4413      	add	r3, r2
 8013bce:	005b      	lsls	r3, r3, #1
 8013bd0:	1aca      	subs	r2, r1, r3
 8013bd2:	2a00      	cmp	r2, #0
 8013bd4:	d103      	bne.n	8013bde <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0x12e>
 8013bd6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	dce3      	bgt.n	8013ba6 <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0xf6>
  }

  return {integral, decimal, exponent, decimalPlaces};
 8013bde:	68fb      	ldr	r3, [r7, #12]
 8013be0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013be2:	601a      	str	r2, [r3, #0]
 8013be4:	68fb      	ldr	r3, [r7, #12]
 8013be6:	69fa      	ldr	r2, [r7, #28]
 8013be8:	605a      	str	r2, [r3, #4]
 8013bea:	68fb      	ldr	r3, [r7, #12]
 8013bec:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8013bee:	811a      	strh	r2, [r3, #8]
 8013bf0:	68fb      	ldr	r3, [r7, #12]
 8013bf2:	7afa      	ldrb	r2, [r7, #11]
 8013bf4:	729a      	strb	r2, [r3, #10]
}
 8013bf6:	68f8      	ldr	r0, [r7, #12]
 8013bf8:	3730      	adds	r7, #48	@ 0x30
 8013bfa:	46bd      	mov	sp, r7
 8013bfc:	bd80      	pop	{r7, pc}
 8013bfe:	bf00      	nop
 8013c00:	cccccccd 	.word	0xcccccccd

08013c04 <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonStringEvE8fromJsonENS0_16JsonVariantConstE>:
  static void toJson(JsonString src, JsonVariant dst) {
    detail::VariantData::setString(getData(dst), detail::adaptString(src),
                                   getResourceManager(dst));
  }

  static JsonString fromJson(JsonVariantConst src) {
 8013c04:	b580      	push	{r7, lr}
 8013c06:	b086      	sub	sp, #24
 8013c08:	af00      	add	r7, sp, #0
 8013c0a:	60f8      	str	r0, [r7, #12]
 8013c0c:	1d3b      	adds	r3, r7, #4
 8013c0e:	e883 0006 	stmia.w	r3, {r1, r2}
    auto data = getData(src);
 8013c12:	1d3b      	adds	r3, r7, #4
 8013c14:	4618      	mov	r0, r3
 8013c16:	f7f2 fae7 	bl	80061e8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8013c1a:	6178      	str	r0, [r7, #20]
    return data ? data->asString() : JsonString();
 8013c1c:	697b      	ldr	r3, [r7, #20]
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d005      	beq.n	8013c2e <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonStringEvE8fromJsonENS0_16JsonVariantConstE+0x2a>
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	6979      	ldr	r1, [r7, #20]
 8013c26:	4618      	mov	r0, r3
 8013c28:	f7f0 fb88 	bl	800433c <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv>
 8013c2c:	e002      	b.n	8013c34 <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonStringEvE8fromJsonENS0_16JsonVariantConstE+0x30>
 8013c2e:	68f8      	ldr	r0, [r7, #12]
 8013c30:	f7f0 fa3e 	bl	80040b0 <_ZN11ArduinoJson8V730HB2210JsonStringC1Ev>
  }
 8013c34:	68f8      	ldr	r0, [r7, #12]
 8013c36:	3718      	adds	r7, #24
 8013c38:	46bd      	mov	sp, r7
 8013c3a:	bd80      	pop	{r7, pc}

08013c3c <_ZN11ArduinoJson8V730HB2215convertFromJsonENS0_16JsonVariantConstERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

#endif

#if ARDUINOJSON_ENABLE_STD_STRING

inline void convertFromJson(JsonVariantConst src, std::string& dst) {
 8013c3c:	b590      	push	{r4, r7, lr}
 8013c3e:	b089      	sub	sp, #36	@ 0x24
 8013c40:	af00      	add	r7, sp, #0
 8013c42:	f107 0308 	add.w	r3, r7, #8
 8013c46:	e883 0003 	stmia.w	r3, {r0, r1}
 8013c4a:	607a      	str	r2, [r7, #4]
  JsonString str = src.as<JsonString>();
 8013c4c:	f107 0314 	add.w	r3, r7, #20
 8013c50:	f107 0208 	add.w	r2, r7, #8
 8013c54:	4611      	mov	r1, r2
 8013c56:	4618      	mov	r0, r3
 8013c58:	f000 fbea 	bl	8014430 <_ZNK11ArduinoJson8V730HB2216JsonVariantConst2asINS0_10JsonStringELi0EEET_v>
  if (str)
 8013c5c:	f107 0314 	add.w	r3, r7, #20
 8013c60:	4618      	mov	r0, r3
 8013c62:	f7ff fed2 	bl	8013a0a <_ZNK11ArduinoJson8V730HB2210JsonStringcvbEv>
 8013c66:	4603      	mov	r3, r0
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d011      	beq.n	8013c90 <_ZN11ArduinoJson8V730HB2215convertFromJsonENS0_16JsonVariantConstERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x54>
    dst.assign(str.c_str(), str.size());
 8013c6c:	f107 0314 	add.w	r3, r7, #20
 8013c70:	4618      	mov	r0, r3
 8013c72:	f7f0 fa47 	bl	8004104 <_ZNK11ArduinoJson8V730HB2210JsonString5c_strEv>
 8013c76:	4604      	mov	r4, r0
 8013c78:	f107 0314 	add.w	r3, r7, #20
 8013c7c:	4618      	mov	r0, r3
 8013c7e:	f7ff feb7 	bl	80139f0 <_ZNK11ArduinoJson8V730HB2210JsonString4sizeEv>
 8013c82:	4603      	mov	r3, r0
 8013c84:	461a      	mov	r2, r3
 8013c86:	4621      	mov	r1, r4
 8013c88:	6878      	ldr	r0, [r7, #4]
 8013c8a:	f012 fbc7 	bl	802641c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKcj>
  else
    serializeJson(src, dst);
}
 8013c8e:	e006      	b.n	8013c9e <_ZN11ArduinoJson8V730HB2215convertFromJsonENS0_16JsonVariantConstERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x62>
    serializeJson(src, dst);
 8013c90:	687a      	ldr	r2, [r7, #4]
 8013c92:	f107 0308 	add.w	r3, r7, #8
 8013c96:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013c9a:	f000 fbd9 	bl	8014450 <_ZN11ArduinoJson8V730HB2213serializeJsonINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELi0EEEjNS0_16JsonVariantConstERT_>
}
 8013c9e:	bf00      	nop
 8013ca0:	3724      	adds	r7, #36	@ 0x24
 8013ca2:	46bd      	mov	sp, r7
 8013ca4:	bd90      	pop	{r4, r7, pc}

08013ca6 <_ZN6Remora15getSerialThreadEv>:
    void setServoFreq(uint32_t freq) { servoFreq = freq; }

    volatile txData_t* getTxData() { return &txData; }
    volatile rxData_t* getRxData() { return &rxData; }
    volatile bool* getReset() { return &reset; };
    pruThread* getSerialThread() { return serialThread.get(); }
 8013ca6:	b580      	push	{r7, lr}
 8013ca8:	b082      	sub	sp, #8
 8013caa:	af00      	add	r7, sp, #0
 8013cac:	6078      	str	r0, [r7, #4]
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	3324      	adds	r3, #36	@ 0x24
 8013cb2:	4618      	mov	r0, r3
 8013cb4:	f7f6 ff57 	bl	800ab66 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EE3getEv>
 8013cb8:	4603      	mov	r3, r0
 8013cba:	4618      	mov	r0, r3
 8013cbc:	3708      	adds	r7, #8
 8013cbe:	46bd      	mov	sp, r7
 8013cc0:	bd80      	pop	{r7, pc}
	...

08013cc4 <_ZN14TMC2208StepperD1Ev>:
        const float Rsense;
        float holdMultiplier = 0.5;
};


class TMC2208Stepper : public TMCStepper {
 8013cc4:	b580      	push	{r7, lr}
 8013cc6:	b082      	sub	sp, #8
 8013cc8:	af00      	add	r7, sp, #0
 8013cca:	6078      	str	r0, [r7, #4]
 8013ccc:	4a08      	ldr	r2, [pc, #32]	@ (8013cf0 <_ZN14TMC2208StepperD1Ev+0x2c>)
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	601a      	str	r2, [r3, #0]
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	334c      	adds	r3, #76	@ 0x4c
 8013cd6:	4618      	mov	r0, r3
 8013cd8:	f012 f9fb 	bl	80260d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	3334      	adds	r3, #52	@ 0x34
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	f012 f9f6 	bl	80260d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	4618      	mov	r0, r3
 8013cea:	3708      	adds	r7, #8
 8013cec:	46bd      	mov	sp, r7
 8013cee:	bd80      	pop	{r7, pc}
 8013cf0:	08028830 	.word	0x08028830

08013cf4 <_ZN14TMC2208StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_f>:
    public:

        TMC2208Stepper(std::string SWRXpin, std::string SWTXpin, float RS) :
 8013cf4:	b580      	push	{r7, lr}
 8013cf6:	b090      	sub	sp, #64	@ 0x40
 8013cf8:	af00      	add	r7, sp, #0
 8013cfa:	60f8      	str	r0, [r7, #12]
 8013cfc:	60b9      	str	r1, [r7, #8]
 8013cfe:	607a      	str	r2, [r7, #4]
 8013d00:	ed87 0a00 	vstr	s0, [r7]
                TMC2208Stepper(SWRXpin, SWTXpin, RS, TMC2208_SLAVE_ADDR)
 8013d04:	f107 0310 	add.w	r3, r7, #16
 8013d08:	68b9      	ldr	r1, [r7, #8]
 8013d0a:	4618      	mov	r0, r3
 8013d0c:	f012 fbf1 	bl	80264f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8013d10:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8013d14:	6879      	ldr	r1, [r7, #4]
 8013d16:	4618      	mov	r0, r3
 8013d18:	f012 fbeb 	bl	80264f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8013d1c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8013d20:	f107 0110 	add.w	r1, r7, #16
 8013d24:	2300      	movs	r3, #0
 8013d26:	ed97 0a00 	vldr	s0, [r7]
 8013d2a:	68f8      	ldr	r0, [r7, #12]
 8013d2c:	f7ee ff98 	bl	8002c60 <_ZN14TMC2208StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_fh>
 8013d30:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8013d34:	4618      	mov	r0, r3
 8013d36:	f012 f9cc 	bl	80260d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8013d3a:	f107 0310 	add.w	r3, r7, #16
 8013d3e:	4618      	mov	r0, r3
 8013d40:	f012 f9c7 	bl	80260d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
                {}
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	4618      	mov	r0, r3
 8013d48:	3740      	adds	r7, #64	@ 0x40
 8013d4a:	46bd      	mov	sp, r7
 8013d4c:	bd80      	pop	{r7, pc}
	...

08013d50 <_ZN3TMCC1EP6Remoraf>:
	Remora* 	instance;
	float       Rsense;

public:

	TMC(Remora* _instance, float _Rsense) : instance(_instance), Rsense(_Rsense) {}
 8013d50:	b580      	push	{r7, lr}
 8013d52:	b084      	sub	sp, #16
 8013d54:	af00      	add	r7, sp, #0
 8013d56:	60f8      	str	r0, [r7, #12]
 8013d58:	60b9      	str	r1, [r7, #8]
 8013d5a:	ed87 0a01 	vstr	s0, [r7, #4]
 8013d5e:	68fb      	ldr	r3, [r7, #12]
 8013d60:	4618      	mov	r0, r3
 8013d62:	f7fc ff0f 	bl	8010b84 <_ZN6ModuleC1Ev>
 8013d66:	68fb      	ldr	r3, [r7, #12]
 8013d68:	3318      	adds	r3, #24
 8013d6a:	4618      	mov	r0, r3
 8013d6c:	f000 fbac 	bl	80144c8 <_ZNSt23enable_shared_from_thisI3TMCEC1Ev>
 8013d70:	4a06      	ldr	r2, [pc, #24]	@ (8013d8c <_ZN3TMCC1EP6Remoraf+0x3c>)
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	601a      	str	r2, [r3, #0]
 8013d76:	68fb      	ldr	r3, [r7, #12]
 8013d78:	68ba      	ldr	r2, [r7, #8]
 8013d7a:	621a      	str	r2, [r3, #32]
 8013d7c:	68fb      	ldr	r3, [r7, #12]
 8013d7e:	687a      	ldr	r2, [r7, #4]
 8013d80:	625a      	str	r2, [r3, #36]	@ 0x24
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	4618      	mov	r0, r3
 8013d86:	3710      	adds	r7, #16
 8013d88:	46bd      	mov	sp, r7
 8013d8a:	bd80      	pop	{r7, pc}
 8013d8c:	08028bb4 	.word	0x08028bb4

08013d90 <_ZNSt12__shared_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 8013d90:	b580      	push	{r7, lr}
 8013d92:	b082      	sub	sp, #8
 8013d94:	af00      	add	r7, sp, #0
 8013d96:	6078      	str	r0, [r7, #4]
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	3304      	adds	r3, #4
 8013d9c:	4618      	mov	r0, r3
 8013d9e:	f7f6 fed0 	bl	800ab42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	4618      	mov	r0, r3
 8013da6:	3708      	adds	r7, #8
 8013da8:	46bd      	mov	sp, r7
 8013daa:	bd80      	pop	{r7, pc}

08013dac <_ZNSt10shared_ptrI3TMCED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 8013dac:	b580      	push	{r7, lr}
 8013dae:	b082      	sub	sp, #8
 8013db0:	af00      	add	r7, sp, #0
 8013db2:	6078      	str	r0, [r7, #4]
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	4618      	mov	r0, r3
 8013db8:	f7ff ffea 	bl	8013d90 <_ZNSt12__shared_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	4618      	mov	r0, r3
 8013dc0:	3708      	adds	r7, #8
 8013dc2:	46bd      	mov	sp, r7
 8013dc4:	bd80      	pop	{r7, pc}

08013dc6 <_ZNSt12__shared_ptrI7TMC2208LN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 8013dc6:	b580      	push	{r7, lr}
 8013dc8:	b082      	sub	sp, #8
 8013dca:	af00      	add	r7, sp, #0
 8013dcc:	6078      	str	r0, [r7, #4]
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	3304      	adds	r3, #4
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	f7f6 feb5 	bl	800ab42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	4618      	mov	r0, r3
 8013ddc:	3708      	adds	r7, #8
 8013dde:	46bd      	mov	sp, r7
 8013de0:	bd80      	pop	{r7, pc}

08013de2 <_ZNSt10shared_ptrI7TMC2208ED1Ev>:
 8013de2:	b580      	push	{r7, lr}
 8013de4:	b082      	sub	sp, #8
 8013de6:	af00      	add	r7, sp, #0
 8013de8:	6078      	str	r0, [r7, #4]
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	4618      	mov	r0, r3
 8013dee:	f7ff ffea 	bl	8013dc6 <_ZNSt12__shared_ptrI7TMC2208LN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	4618      	mov	r0, r3
 8013df6:	3708      	adds	r7, #8
 8013df8:	46bd      	mov	sp, r7
 8013dfa:	bd80      	pop	{r7, pc}

08013dfc <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>:
#include "tmc.h"
#include <cstdint>

#define TOFF_VALUE  4 // [1... 15]

std::shared_ptr<Module> TMC2208::create(const JsonObject& config, Remora* instance) {
 8013dfc:	b590      	push	{r4, r7, lr}
 8013dfe:	b0b9      	sub	sp, #228	@ 0xe4
 8013e00:	af04      	add	r7, sp, #16
 8013e02:	60f8      	str	r0, [r7, #12]
 8013e04:	60b9      	str	r1, [r7, #8]
 8013e06:	607a      	str	r2, [r7, #4]
    printf("Creating TMC2208 module\n");
 8013e08:	484a      	ldr	r0, [pc, #296]	@ (8013f34 <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x138>)
 8013e0a:	f012 ff81 	bl	8026d10 <puts>

    const char* comment = config["Comment"];
 8013e0e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8013e12:	4a49      	ldr	r2, [pc, #292]	@ (8013f38 <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x13c>)
 8013e14:	68b9      	ldr	r1, [r7, #8]
 8013e16:	4618      	mov	r0, r3
 8013e18:	f7fd f91b 	bl	8011052 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8013e1c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8013e20:	4618      	mov	r0, r3
 8013e22:	f7f2 fcb1 	bl	8006788 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8013e26:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    printf("Comment: %s\n", comment);
 8013e2a:	f8d7 10cc 	ldr.w	r1, [r7, #204]	@ 0xcc
 8013e2e:	4843      	ldr	r0, [pc, #268]	@ (8013f3c <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x140>)
 8013e30:	f012 fefe 	bl	8026c30 <iprintf>

    std::string RxPin = config["RX pin"];
 8013e34:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8013e38:	4a41      	ldr	r2, [pc, #260]	@ (8013f40 <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x144>)
 8013e3a:	68b9      	ldr	r1, [r7, #8]
 8013e3c:	4618      	mov	r0, r3
 8013e3e:	f7f2 fc7e 	bl	800673e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8013e42:	f107 031c 	add.w	r3, r7, #28
 8013e46:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8013e4a:	4611      	mov	r1, r2
 8013e4c:	4618      	mov	r0, r3
 8013e4e:	f000 fb63 	bl	8014518 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELi0EEEv>
    float RSense = config["RSense"];
 8013e52:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8013e56:	4a3b      	ldr	r2, [pc, #236]	@ (8013f44 <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x148>)
 8013e58:	68b9      	ldr	r1, [r7, #8]
 8013e5a:	4618      	mov	r0, r3
 8013e5c:	f7f2 fc6f 	bl	800673e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8013e60:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8013e64:	4618      	mov	r0, r3
 8013e66:	f000 fb65 	bl	8014534 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IfLi0EEEv>
 8013e6a:	eef0 7a40 	vmov.f32	s15, s0
 8013e6e:	edc7 7a06 	vstr	s15, [r7, #24]
    uint16_t current = config["Current"];
 8013e72:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8013e76:	4a34      	ldr	r2, [pc, #208]	@ (8013f48 <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x14c>)
 8013e78:	68b9      	ldr	r1, [r7, #8]
 8013e7a:	4618      	mov	r0, r3
 8013e7c:	f7fd f8e9 	bl	8011052 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8013e80:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8013e84:	4618      	mov	r0, r3
 8013e86:	f000 fb63 	bl	8014550 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ItLi0EEEv>
 8013e8a:	4603      	mov	r3, r0
 8013e8c:	82fb      	strh	r3, [r7, #22]
    uint16_t microsteps = config["Microsteps"];
 8013e8e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8013e92:	4a2e      	ldr	r2, [pc, #184]	@ (8013f4c <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x150>)
 8013e94:	68b9      	ldr	r1, [r7, #8]
 8013e96:	4618      	mov	r0, r3
 8013e98:	f7fa f911 	bl	800e0be <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8013e9c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8013ea0:	4618      	mov	r0, r3
 8013ea2:	f000 fb55 	bl	8014550 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ItLi0EEEv>
 8013ea6:	4603      	mov	r3, r0
 8013ea8:	82bb      	strh	r3, [r7, #20]
    bool stealthchop = (strcmp(config["Stealth chop"], "on") == 0);
 8013eaa:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8013eae:	4a28      	ldr	r2, [pc, #160]	@ (8013f50 <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x154>)
 8013eb0:	68b9      	ldr	r1, [r7, #8]
 8013eb2:	4618      	mov	r0, r3
 8013eb4:	f7fe ffa2 	bl	8012dfc <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA13_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8013eb8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8013ebc:	4618      	mov	r0, r3
 8013ebe:	f7f2 fc63 	bl	8006788 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8013ec2:	4603      	mov	r3, r0
 8013ec4:	4923      	ldr	r1, [pc, #140]	@ (8013f54 <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x158>)
 8013ec6:	4618      	mov	r0, r3
 8013ec8:	f7ec fa0a 	bl	80002e0 <strcmp>
 8013ecc:	4603      	mov	r3, r0
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	bf0c      	ite	eq
 8013ed2:	2301      	moveq	r3, #1
 8013ed4:	2300      	movne	r3, #0
 8013ed6:	b2db      	uxtb	r3, r3
 8013ed8:	74fb      	strb	r3, [r7, #19]

    return std::make_shared<TMC2208>(std::move(RxPin), RSense, current, microsteps, stealthchop, instance);
 8013eda:	f107 031c 	add.w	r3, r7, #28
 8013ede:	4618      	mov	r0, r3
 8013ee0:	f7fc f98d 	bl	80101fe <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8013ee4:	4604      	mov	r4, r0
 8013ee6:	f107 00c4 	add.w	r0, r7, #196	@ 0xc4
 8013eea:	f107 0116 	add.w	r1, r7, #22
 8013eee:	f107 0218 	add.w	r2, r7, #24
 8013ef2:	1d3b      	adds	r3, r7, #4
 8013ef4:	9302      	str	r3, [sp, #8]
 8013ef6:	f107 0313 	add.w	r3, r7, #19
 8013efa:	9301      	str	r3, [sp, #4]
 8013efc:	f107 0314 	add.w	r3, r7, #20
 8013f00:	9300      	str	r3, [sp, #0]
 8013f02:	460b      	mov	r3, r1
 8013f04:	4621      	mov	r1, r4
 8013f06:	f000 fb2f 	bl	8014568 <_ZSt11make_sharedI7TMC2208JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtS8_RbRP6RemoraEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESG_E4typeEEDpOT0_>
 8013f0a:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8013f0e:	4619      	mov	r1, r3
 8013f10:	68f8      	ldr	r0, [r7, #12]
 8013f12:	f000 fb5b 	bl	80145cc <_ZNSt10shared_ptrI6ModuleEC1I7TMC2208vEEOS_IT_E>
 8013f16:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8013f1a:	4618      	mov	r0, r3
 8013f1c:	f7ff ff61 	bl	8013de2 <_ZNSt10shared_ptrI7TMC2208ED1Ev>
}
 8013f20:	f107 031c 	add.w	r3, r7, #28
 8013f24:	4618      	mov	r0, r3
 8013f26:	f012 f8d4 	bl	80260d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    return std::make_shared<TMC2208>(std::move(RxPin), RSense, current, microsteps, stealthchop, instance);
 8013f2a:	bf00      	nop
}
 8013f2c:	68f8      	ldr	r0, [r7, #12]
 8013f2e:	37d4      	adds	r7, #212	@ 0xd4
 8013f30:	46bd      	mov	sp, r7
 8013f32:	bd90      	pop	{r4, r7, pc}
 8013f34:	080283f8 	.word	0x080283f8
 8013f38:	08028410 	.word	0x08028410
 8013f3c:	08028418 	.word	0x08028418
 8013f40:	08028428 	.word	0x08028428
 8013f44:	08028430 	.word	0x08028430
 8013f48:	08028438 	.word	0x08028438
 8013f4c:	08028440 	.word	0x08028440
 8013f50:	0802844c 	.word	0x0802844c
 8013f54:	0802845c 	.word	0x0802845c

08013f58 <_ZN3TMCD1Ev>:
class TMC : public Module, public std::enable_shared_from_this<TMC>
 8013f58:	b580      	push	{r7, lr}
 8013f5a:	b082      	sub	sp, #8
 8013f5c:	af00      	add	r7, sp, #0
 8013f5e:	6078      	str	r0, [r7, #4]
 8013f60:	4a08      	ldr	r2, [pc, #32]	@ (8013f84 <_ZN3TMCD1Ev+0x2c>)
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	601a      	str	r2, [r3, #0]
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	3318      	adds	r3, #24
 8013f6a:	4618      	mov	r0, r3
 8013f6c:	f000 fab9 	bl	80144e2 <_ZNSt23enable_shared_from_thisI3TMCED1Ev>
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	4618      	mov	r0, r3
 8013f74:	f7fc fe22 	bl	8010bbc <_ZN6ModuleD1Ev>
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	4618      	mov	r0, r3
 8013f7c:	3708      	adds	r7, #8
 8013f7e:	46bd      	mov	sp, r7
 8013f80:	bd80      	pop	{r7, pc}
 8013f82:	bf00      	nop
 8013f84:	08028bb4 	.word	0x08028bb4

08013f88 <_ZN3TMCD0Ev>:
 8013f88:	b580      	push	{r7, lr}
 8013f8a:	b082      	sub	sp, #8
 8013f8c:	af00      	add	r7, sp, #0
 8013f8e:	6078      	str	r0, [r7, #4]
 8013f90:	6878      	ldr	r0, [r7, #4]
 8013f92:	f7ff ffe1 	bl	8013f58 <_ZN3TMCD1Ev>
 8013f96:	2128      	movs	r1, #40	@ 0x28
 8013f98:	6878      	ldr	r0, [r7, #4]
 8013f9a:	f011 ff8e 	bl	8025eba <_ZdlPvj>
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	4618      	mov	r0, r3
 8013fa2:	3708      	adds	r7, #8
 8013fa4:	46bd      	mov	sp, r7
 8013fa6:	bd80      	pop	{r7, pc}

08013fa8 <_ZN7TMC2208C1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfttbP6Remora>:

TMC2208::TMC2208(std::string _rxtxPin, float _Rsense, uint16_t _mA, uint16_t _microsteps, bool _stealth, Remora* _instance)
 8013fa8:	b590      	push	{r4, r7, lr}
 8013faa:	b085      	sub	sp, #20
 8013fac:	af00      	add	r7, sp, #0
 8013fae:	60f8      	str	r0, [r7, #12]
 8013fb0:	60b9      	str	r1, [r7, #8]
 8013fb2:	ed87 0a01 	vstr	s0, [r7, #4]
 8013fb6:	4611      	mov	r1, r2
 8013fb8:	461a      	mov	r2, r3
 8013fba:	460b      	mov	r3, r1
 8013fbc:	807b      	strh	r3, [r7, #2]
 8013fbe:	4613      	mov	r3, r2
 8013fc0:	803b      	strh	r3, [r7, #0]
    : TMC{_instance, _Rsense},  // Call base class constructor
      rxtxPin(std::move(_rxtxPin)),
      mA(_mA),
      microsteps(_microsteps),
      stealth(_stealth),
      driver(std::make_unique<TMC2208Stepper>(rxtxPin, rxtxPin, Rsense)) {}
 8013fc2:	68fb      	ldr	r3, [r7, #12]
 8013fc4:	ed97 0a01 	vldr	s0, [r7, #4]
 8013fc8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013fca:	4618      	mov	r0, r3
 8013fcc:	f7ff fec0 	bl	8013d50 <_ZN3TMCC1EP6Remoraf>
 8013fd0:	4a17      	ldr	r2, [pc, #92]	@ (8014030 <_ZN7TMC2208C1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfttbP6Remora+0x88>)
 8013fd2:	68fb      	ldr	r3, [r7, #12]
 8013fd4:	601a      	str	r2, [r3, #0]
      rxtxPin(std::move(_rxtxPin)),
 8013fd6:	68fb      	ldr	r3, [r7, #12]
 8013fd8:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 8013fdc:	68b8      	ldr	r0, [r7, #8]
 8013fde:	f7fc f90e 	bl	80101fe <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8013fe2:	4603      	mov	r3, r0
 8013fe4:	4619      	mov	r1, r3
 8013fe6:	4620      	mov	r0, r4
 8013fe8:	f012 f854 	bl	8026094 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
      mA(_mA),
 8013fec:	68fb      	ldr	r3, [r7, #12]
 8013fee:	887a      	ldrh	r2, [r7, #2]
 8013ff0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      microsteps(_microsteps),
 8013ff4:	68fb      	ldr	r3, [r7, #12]
 8013ff6:	883a      	ldrh	r2, [r7, #0]
 8013ff8:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
      stealth(_stealth),
 8013ffc:	68fb      	ldr	r3, [r7, #12]
 8013ffe:	f897 2020 	ldrb.w	r2, [r7, #32]
 8014002:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      driver(std::make_unique<TMC2208Stepper>(rxtxPin, rxtxPin, Rsense)) {}
 8014006:	68fb      	ldr	r3, [r7, #12]
 8014008:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 801400c:	68fb      	ldr	r3, [r7, #12]
 801400e:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8014012:	68fb      	ldr	r3, [r7, #12]
 8014014:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8014018:	68fb      	ldr	r3, [r7, #12]
 801401a:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 801401e:	4623      	mov	r3, r4
 8014020:	f000 fae7 	bl	80145f2 <_ZSt11make_uniqueI14TMC2208StepperJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_RfEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 8014024:	68fb      	ldr	r3, [r7, #12]
 8014026:	4618      	mov	r0, r3
 8014028:	3714      	adds	r7, #20
 801402a:	46bd      	mov	sp, r7
 801402c:	bd90      	pop	{r4, r7, pc}
 801402e:	bf00      	nop
 8014030:	08028b90 	.word	0x08028b90

08014034 <_ZN7TMC22089configureEv>:


void TMC2208::configure()
{
 8014034:	b590      	push	{r4, r7, lr}
 8014036:	b08b      	sub	sp, #44	@ 0x2c
 8014038:	af00      	add	r7, sp, #0
 801403a:	6078      	str	r0, [r7, #4]
    printf("\nStarting the Serial thread\n");
 801403c:	4877      	ldr	r0, [pc, #476]	@ (801421c <_ZN7TMC22089configureEv+0x1e8>)
 801403e:	f012 fe67 	bl	8026d10 <puts>
    instance->getSerialThread()->startThread();
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	6a1b      	ldr	r3, [r3, #32]
 8014046:	4618      	mov	r0, r3
 8014048:	f7ff fe2d 	bl	8013ca6 <_ZN6Remora15getSerialThreadEv>
 801404c:	4603      	mov	r3, r0
 801404e:	4618      	mov	r0, r3
 8014050:	f004 fb2c 	bl	80186ac <_ZN9pruThread11startThreadEv>

    auto self = shared_from_this();
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	f103 0218 	add.w	r2, r3, #24
 801405a:	f107 030c 	add.w	r3, r7, #12
 801405e:	4611      	mov	r1, r2
 8014060:	4618      	mov	r0, r3
 8014062:	f000 fa4b 	bl	80144fc <_ZNSt23enable_shared_from_thisI3TMCE16shared_from_thisEv>
    instance->getSerialThread()->registerModule(self);
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	6a1b      	ldr	r3, [r3, #32]
 801406a:	4618      	mov	r0, r3
 801406c:	f7ff fe1b 	bl	8013ca6 <_ZN6Remora15getSerialThreadEv>
 8014070:	4604      	mov	r4, r0
 8014072:	f107 020c 	add.w	r2, r7, #12
 8014076:	f107 0314 	add.w	r3, r7, #20
 801407a:	4611      	mov	r1, r2
 801407c:	4618      	mov	r0, r3
 801407e:	f000 fb1d 	bl	80146bc <_ZNSt10shared_ptrI6ModuleEC1I3TMCvEERKS_IT_E>
 8014082:	f107 0314 	add.w	r3, r7, #20
 8014086:	4619      	mov	r1, r3
 8014088:	4620      	mov	r0, r4
 801408a:	f004 fa7b 	bl	8018584 <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE>
 801408e:	f107 0314 	add.w	r3, r7, #20
 8014092:	4618      	mov	r0, r3
 8014094:	f7f5 ff3d 	bl	8009f12 <_ZNSt10shared_ptrI6ModuleED1Ev>

    driver->begin();
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	3348      	adds	r3, #72	@ 0x48
 801409c:	4618      	mov	r0, r3
 801409e:	f000 fb1d 	bl	80146dc <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>
 80140a2:	4603      	mov	r3, r0
 80140a4:	4618      	mov	r0, r3
 80140a6:	f7ee fe8d 	bl	8002dc4 <_ZN14TMC2208Stepper5beginEv>

    printf("Testing connection to TMC driver... ");
 80140aa:	485d      	ldr	r0, [pc, #372]	@ (8014220 <_ZN7TMC22089configureEv+0x1ec>)
 80140ac:	f012 fdc0 	bl	8026c30 <iprintf>
    uint16_t result = driver->test_connection();
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	3348      	adds	r3, #72	@ 0x48
 80140b4:	4618      	mov	r0, r3
 80140b6:	f000 fb11 	bl	80146dc <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>
 80140ba:	4603      	mov	r3, r0
 80140bc:	4618      	mov	r0, r3
 80140be:	f7ef fa67 	bl	8003590 <_ZN10TMCStepper15test_connectionEv>
 80140c2:	4603      	mov	r3, r0
 80140c4:	84fb      	strh	r3, [r7, #38]	@ 0x26
    
    if (result) {
 80140c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d018      	beq.n	80140fe <_ZN7TMC22089configureEv+0xca>
        printf("Failed!\nLikely cause: ");
 80140cc:	4855      	ldr	r0, [pc, #340]	@ (8014224 <_ZN7TMC22089configureEv+0x1f0>)
 80140ce:	f012 fdaf 	bl	8026c30 <iprintf>
        switch(result) {
 80140d2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80140d4:	2b01      	cmp	r3, #1
 80140d6:	d002      	beq.n	80140de <_ZN7TMC22089configureEv+0xaa>
 80140d8:	2b02      	cmp	r3, #2
 80140da:	d004      	beq.n	80140e6 <_ZN7TMC22089configureEv+0xb2>
 80140dc:	e007      	b.n	80140ee <_ZN7TMC22089configureEv+0xba>
            case 1: printf("Loose connection\n"); break;
 80140de:	4852      	ldr	r0, [pc, #328]	@ (8014228 <_ZN7TMC22089configureEv+0x1f4>)
 80140e0:	f012 fe16 	bl	8026d10 <puts>
 80140e4:	e007      	b.n	80140f6 <_ZN7TMC22089configureEv+0xc2>
            case 2: printf("No power\n"); break;
 80140e6:	4851      	ldr	r0, [pc, #324]	@ (801422c <_ZN7TMC22089configureEv+0x1f8>)
 80140e8:	f012 fe12 	bl	8026d10 <puts>
 80140ec:	e003      	b.n	80140f6 <_ZN7TMC22089configureEv+0xc2>
            default: printf("Unknown issue\n"); break;
 80140ee:	4850      	ldr	r0, [pc, #320]	@ (8014230 <_ZN7TMC22089configureEv+0x1fc>)
 80140f0:	f012 fe0e 	bl	8026d10 <puts>
 80140f4:	bf00      	nop
        }
        printf("Fix the problem and reset the board.\n");
 80140f6:	484f      	ldr	r0, [pc, #316]	@ (8014234 <_ZN7TMC22089configureEv+0x200>)
 80140f8:	f012 fe0a 	bl	8026d10 <puts>
 80140fc:	e002      	b.n	8014104 <_ZN7TMC22089configureEv+0xd0>
    } else {
        printf("OK\n");
 80140fe:	484e      	ldr	r0, [pc, #312]	@ (8014238 <_ZN7TMC22089configureEv+0x204>)
 8014100:	f012 fe06 	bl	8026d10 <puts>
    }

    // Configure driver settings
    driver->toff(TOFF_VALUE);
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	3348      	adds	r3, #72	@ 0x48
 8014108:	4618      	mov	r0, r3
 801410a:	f000 fae7 	bl	80146dc <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>
 801410e:	4603      	mov	r3, r0
 8014110:	2104      	movs	r1, #4
 8014112:	4618      	mov	r0, r3
 8014114:	f7ee fb09 	bl	800272a <_ZN14TMC2208Stepper4toffEh>
    driver->blank_time(24);
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	3348      	adds	r3, #72	@ 0x48
 801411c:	4618      	mov	r0, r3
 801411e:	f000 fadd 	bl	80146dc <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>
 8014122:	4603      	mov	r3, r0
 8014124:	2118      	movs	r1, #24
 8014126:	4618      	mov	r0, r3
 8014128:	f7ef fafe 	bl	8003728 <_ZN10TMCStepper10blank_timeEh>
    driver->rms_current(mA);
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	3348      	adds	r3, #72	@ 0x48
 8014130:	4618      	mov	r0, r3
 8014132:	f000 fad3 	bl	80146dc <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>
 8014136:	4603      	mov	r3, r0
 8014138:	461a      	mov	r2, r3
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8014140:	4619      	mov	r1, r3
 8014142:	4610      	mov	r0, r2
 8014144:	f7ef f988 	bl	8003458 <_ZN10TMCStepper11rms_currentEt>
    driver->microsteps(microsteps);
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	3348      	adds	r3, #72	@ 0x48
 801414c:	4618      	mov	r0, r3
 801414e:	f000 fac5 	bl	80146dc <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>
 8014152:	4603      	mov	r3, r0
 8014154:	461a      	mov	r2, r3
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 801415c:	4619      	mov	r1, r3
 801415e:	4610      	mov	r0, r2
 8014160:	f7ef fa32 	bl	80035c8 <_ZN10TMCStepper10microstepsEt>
    driver->en_spreadCycle(!stealth);
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	3348      	adds	r3, #72	@ 0x48
 8014168:	4618      	mov	r0, r3
 801416a:	f000 fab7 	bl	80146dc <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>
 801416e:	4602      	mov	r2, r0
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014176:	f083 0301 	eor.w	r3, r3, #1
 801417a:	b2db      	uxtb	r3, r3
 801417c:	4619      	mov	r1, r3
 801417e:	4610      	mov	r0, r2
 8014180:	f7ee fc7a 	bl	8002a78 <_ZN14TMC2208Stepper14en_spreadCycleEb>
    driver->pwm_autoscale(true);
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	3348      	adds	r3, #72	@ 0x48
 8014188:	4618      	mov	r0, r3
 801418a:	f000 faa7 	bl	80146dc <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>
 801418e:	4603      	mov	r3, r0
 8014190:	2101      	movs	r1, #1
 8014192:	4618      	mov	r0, r3
 8014194:	f7ee fd1e 	bl	8002bd4 <_ZN14TMC2208Stepper13pwm_autoscaleEb>
    driver->iholddelay(10);
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	3348      	adds	r3, #72	@ 0x48
 801419c:	4618      	mov	r0, r3
 801419e:	f000 fa9d 	bl	80146dc <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>
 80141a2:	4603      	mov	r3, r0
 80141a4:	210a      	movs	r1, #10
 80141a6:	4618      	mov	r0, r3
 80141a8:	f7ee fcf7 	bl	8002b9a <_ZN10TMCStepper10iholddelayEh>
    driver->TPOWERDOWN(128);  // ~2s until driver lowers to hold current
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	3348      	adds	r3, #72	@ 0x48
 80141b0:	4618      	mov	r0, r3
 80141b2:	f000 fa93 	bl	80146dc <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>
 80141b6:	4603      	mov	r3, r0
 80141b8:	2180      	movs	r1, #128	@ 0x80
 80141ba:	4618      	mov	r0, r3
 80141bc:	f7ef faec 	bl	8003798 <_ZN10TMCStepper10TPOWERDOWNEh>

    printf("\nStopping the Serial thread\n");
 80141c0:	481e      	ldr	r0, [pc, #120]	@ (801423c <_ZN7TMC22089configureEv+0x208>)
 80141c2:	f012 fda5 	bl	8026d10 <puts>
    instance->getSerialThread()->stopThread();
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	6a1b      	ldr	r3, [r3, #32]
 80141ca:	4618      	mov	r0, r3
 80141cc:	f7ff fd6b 	bl	8013ca6 <_ZN6Remora15getSerialThreadEv>
 80141d0:	4603      	mov	r3, r0
 80141d2:	4618      	mov	r0, r3
 80141d4:	f004 fa97 	bl	8018706 <_ZN9pruThread10stopThreadEv>
    instance->getSerialThread()->unregisterModule(self);
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	6a1b      	ldr	r3, [r3, #32]
 80141dc:	4618      	mov	r0, r3
 80141de:	f7ff fd62 	bl	8013ca6 <_ZN6Remora15getSerialThreadEv>
 80141e2:	4604      	mov	r4, r0
 80141e4:	f107 020c 	add.w	r2, r7, #12
 80141e8:	f107 031c 	add.w	r3, r7, #28
 80141ec:	4611      	mov	r1, r2
 80141ee:	4618      	mov	r0, r3
 80141f0:	f000 fa64 	bl	80146bc <_ZNSt10shared_ptrI6ModuleEC1I3TMCvEERKS_IT_E>
 80141f4:	f107 031c 	add.w	r3, r7, #28
 80141f8:	4619      	mov	r1, r3
 80141fa:	4620      	mov	r0, r4
 80141fc:	f004 fa0e 	bl	801861c <_ZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleE>
 8014200:	f107 031c 	add.w	r3, r7, #28
 8014204:	4618      	mov	r0, r3
 8014206:	f7f5 fe84 	bl	8009f12 <_ZNSt10shared_ptrI6ModuleED1Ev>
}
 801420a:	f107 030c 	add.w	r3, r7, #12
 801420e:	4618      	mov	r0, r3
 8014210:	f7ff fdcc 	bl	8013dac <_ZNSt10shared_ptrI3TMCED1Ev>
 8014214:	372c      	adds	r7, #44	@ 0x2c
 8014216:	46bd      	mov	sp, r7
 8014218:	bd90      	pop	{r4, r7, pc}
 801421a:	bf00      	nop
 801421c:	08028460 	.word	0x08028460
 8014220:	0802847c 	.word	0x0802847c
 8014224:	080284a4 	.word	0x080284a4
 8014228:	080284bc 	.word	0x080284bc
 801422c:	080284d0 	.word	0x080284d0
 8014230:	080284dc 	.word	0x080284dc
 8014234:	080284ec 	.word	0x080284ec
 8014238:	08028514 	.word	0x08028514
 801423c:	08028518 	.word	0x08028518

08014240 <_ZN7TMC22086updateEv>:

void TMC2208::update()
{
 8014240:	b580      	push	{r7, lr}
 8014242:	b082      	sub	sp, #8
 8014244:	af00      	add	r7, sp, #0
 8014246:	6078      	str	r0, [r7, #4]
    driver->SWSerial->tickerHandler();
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	3348      	adds	r3, #72	@ 0x48
 801424c:	4618      	mov	r0, r3
 801424e:	f000 fa45 	bl	80146dc <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>
 8014252:	4603      	mov	r3, r0
 8014254:	695b      	ldr	r3, [r3, #20]
 8014256:	4618      	mov	r0, r3
 8014258:	f7ee f8d5 	bl	8002406 <_ZN14SoftwareSerial13tickerHandlerEv>
}
 801425c:	bf00      	nop
 801425e:	3708      	adds	r7, #8
 8014260:	46bd      	mov	sp, r7
 8014262:	bd80      	pop	{r7, pc}

08014264 <_ZNK11ArduinoJson8V730HB2215SerializedValueIPKcE4sizeEv>:

  TChar* data() const {
    return data_;
  }

  size_t size() const {
 8014264:	b480      	push	{r7}
 8014266:	b083      	sub	sp, #12
 8014268:	af00      	add	r7, sp, #0
 801426a:	6078      	str	r0, [r7, #4]
    return size_;
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	685b      	ldr	r3, [r3, #4]
  }
 8014270:	4618      	mov	r0, r3
 8014272:	370c      	adds	r7, #12
 8014274:	46bd      	mov	sp, r7
 8014276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801427a:	4770      	bx	lr

0801427c <_ZNK11ArduinoJson8V730HB2215SerializedValueIPKcE4dataEv>:
  TChar* data() const {
 801427c:	b480      	push	{r7}
 801427e:	b083      	sub	sp, #12
 8014280:	af00      	add	r7, sp, #0
 8014282:	6078      	str	r0, [r7, #4]
    return data_;
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	681b      	ldr	r3, [r3, #0]
  }
 8014288:	4618      	mov	r0, r3
 801428a:	370c      	adds	r7, #12
 801428c:	46bd      	mov	sp, r7
 801428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014292:	4770      	bx	lr
 8014294:	0000      	movs	r0, r0
	...

08014298 <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_>:
inline int16_t normalize(TFloat& value) {
 8014298:	b580      	push	{r7, lr}
 801429a:	ed2d 8b02 	vpush	{d8}
 801429e:	b088      	sub	sp, #32
 80142a0:	af00      	add	r7, sp, #0
 80142a2:	6078      	str	r0, [r7, #4]
  int16_t powersOf10 = 0;
 80142a4:	2300      	movs	r3, #0
 80142a6:	83fb      	strh	r3, [r7, #30]
  int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
 80142a8:	2308      	movs	r3, #8
 80142aa:	777b      	strb	r3, [r7, #29]
  int bit = 1 << index;
 80142ac:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80142b0:	2201      	movs	r2, #1
 80142b2:	fa02 f303 	lsl.w	r3, r2, r3
 80142b6:	61bb      	str	r3, [r7, #24]
  if (value >= ARDUINOJSON_POSITIVE_EXPONENTIATION_THRESHOLD) {
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	ed93 7b00 	vldr	d7, [r3]
 80142be:	ed9f 6b58 	vldr	d6, [pc, #352]	@ 8014420 <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_+0x188>
 80142c2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80142c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142ca:	db44      	blt.n	8014356 <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_+0xbe>
    for (; index >= 0; index--) {
 80142cc:	e03f      	b.n	801434e <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_+0xb6>
      if (value >= traits::positiveBinaryPowersOfTen()[index]) {
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	ed93 8b00 	vldr	d8, [r3]
 80142d4:	f7f2 fcac 	bl	8006c30 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>
 80142d8:	4603      	mov	r3, r0
 80142da:	60bb      	str	r3, [r7, #8]
 80142dc:	f997 201d 	ldrsb.w	r2, [r7, #29]
 80142e0:	f107 0308 	add.w	r3, r7, #8
 80142e4:	4611      	mov	r1, r2
 80142e6:	4618      	mov	r0, r3
 80142e8:	f7f2 fcb2 	bl	8006c50 <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIdEixEi>
 80142ec:	eeb0 7b40 	vmov.f64	d7, d0
 80142f0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80142f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142f8:	bfac      	ite	ge
 80142fa:	2301      	movge	r3, #1
 80142fc:	2300      	movlt	r3, #0
 80142fe:	b2db      	uxtb	r3, r3
 8014300:	2b00      	cmp	r3, #0
 8014302:	d01b      	beq.n	801433c <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_+0xa4>
        value *= traits::negativeBinaryPowersOfTen()[index];
 8014304:	f7f2 fcb8 	bl	8006c78 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>
 8014308:	4603      	mov	r3, r0
 801430a:	60fb      	str	r3, [r7, #12]
 801430c:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8014310:	f107 030c 	add.w	r3, r7, #12
 8014314:	4611      	mov	r1, r2
 8014316:	4618      	mov	r0, r3
 8014318:	f7f2 fc9a 	bl	8006c50 <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIdEixEi>
 801431c:	eeb0 6b40 	vmov.f64	d6, d0
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	ed93 7b00 	vldr	d7, [r3]
 8014326:	ee26 7b07 	vmul.f64	d7, d6, d7
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	ed83 7b00 	vstr	d7, [r3]
        powersOf10 = int16_t(powersOf10 + bit);
 8014330:	69bb      	ldr	r3, [r7, #24]
 8014332:	b29a      	uxth	r2, r3
 8014334:	8bfb      	ldrh	r3, [r7, #30]
 8014336:	4413      	add	r3, r2
 8014338:	b29b      	uxth	r3, r3
 801433a:	83fb      	strh	r3, [r7, #30]
      bit >>= 1;
 801433c:	69bb      	ldr	r3, [r7, #24]
 801433e:	105b      	asrs	r3, r3, #1
 8014340:	61bb      	str	r3, [r7, #24]
    for (; index >= 0; index--) {
 8014342:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8014346:	b2db      	uxtb	r3, r3
 8014348:	3b01      	subs	r3, #1
 801434a:	b2db      	uxtb	r3, r3
 801434c:	777b      	strb	r3, [r7, #29]
 801434e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8014352:	2b00      	cmp	r3, #0
 8014354:	dabb      	bge.n	80142ce <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_+0x36>
  if (value > 0 && value <= ARDUINOJSON_NEGATIVE_EXPONENTIATION_THRESHOLD) {
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	ed93 7b00 	vldr	d7, [r3]
 801435c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8014360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014364:	dd52      	ble.n	801440c <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_+0x174>
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	ed93 7b00 	vldr	d7, [r3]
 801436c:	ed9f 6b2e 	vldr	d6, [pc, #184]	@ 8014428 <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_+0x190>
 8014370:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8014374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014378:	d848      	bhi.n	801440c <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_+0x174>
    for (; index >= 0; index--) {
 801437a:	e043      	b.n	8014404 <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_+0x16c>
      if (value < traits::negativeBinaryPowersOfTen()[index] * 10) {
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	ed93 8b00 	vldr	d8, [r3]
 8014382:	f7f2 fc79 	bl	8006c78 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>
 8014386:	4603      	mov	r3, r0
 8014388:	613b      	str	r3, [r7, #16]
 801438a:	f997 201d 	ldrsb.w	r2, [r7, #29]
 801438e:	f107 0310 	add.w	r3, r7, #16
 8014392:	4611      	mov	r1, r2
 8014394:	4618      	mov	r0, r3
 8014396:	f7f2 fc5b 	bl	8006c50 <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIdEixEi>
 801439a:	eeb0 7b40 	vmov.f64	d7, d0
 801439e:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80143a2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80143a6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80143aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143ae:	bf4c      	ite	mi
 80143b0:	2301      	movmi	r3, #1
 80143b2:	2300      	movpl	r3, #0
 80143b4:	b2db      	uxtb	r3, r3
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d01b      	beq.n	80143f2 <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_+0x15a>
        value *= traits::positiveBinaryPowersOfTen()[index];
 80143ba:	f7f2 fc39 	bl	8006c30 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>
 80143be:	4603      	mov	r3, r0
 80143c0:	617b      	str	r3, [r7, #20]
 80143c2:	f997 201d 	ldrsb.w	r2, [r7, #29]
 80143c6:	f107 0314 	add.w	r3, r7, #20
 80143ca:	4611      	mov	r1, r2
 80143cc:	4618      	mov	r0, r3
 80143ce:	f7f2 fc3f 	bl	8006c50 <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIdEixEi>
 80143d2:	eeb0 6b40 	vmov.f64	d6, d0
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	ed93 7b00 	vldr	d7, [r3]
 80143dc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	ed83 7b00 	vstr	d7, [r3]
        powersOf10 = int16_t(powersOf10 - bit);
 80143e6:	8bfa      	ldrh	r2, [r7, #30]
 80143e8:	69bb      	ldr	r3, [r7, #24]
 80143ea:	b29b      	uxth	r3, r3
 80143ec:	1ad3      	subs	r3, r2, r3
 80143ee:	b29b      	uxth	r3, r3
 80143f0:	83fb      	strh	r3, [r7, #30]
      bit >>= 1;
 80143f2:	69bb      	ldr	r3, [r7, #24]
 80143f4:	105b      	asrs	r3, r3, #1
 80143f6:	61bb      	str	r3, [r7, #24]
    for (; index >= 0; index--) {
 80143f8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80143fc:	b2db      	uxtb	r3, r3
 80143fe:	3b01      	subs	r3, #1
 8014400:	b2db      	uxtb	r3, r3
 8014402:	777b      	strb	r3, [r7, #29]
 8014404:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8014408:	2b00      	cmp	r3, #0
 801440a:	dab7      	bge.n	801437c <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_+0xe4>
  return powersOf10;
 801440c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8014410:	4618      	mov	r0, r3
 8014412:	3720      	adds	r7, #32
 8014414:	46bd      	mov	sp, r7
 8014416:	ecbd 8b02 	vpop	{d8}
 801441a:	bd80      	pop	{r7, pc}
 801441c:	f3af 8000 	nop.w
 8014420:	00000000 	.word	0x00000000
 8014424:	416312d0 	.word	0x416312d0
 8014428:	88e368f1 	.word	0x88e368f1
 801442c:	3ee4f8b5 	.word	0x3ee4f8b5

08014430 <_ZNK11ArduinoJson8V730HB2216JsonVariantConst2asINS0_10JsonStringELi0EEET_v>:
  T as() const {
 8014430:	b580      	push	{r7, lr}
 8014432:	b082      	sub	sp, #8
 8014434:	af00      	add	r7, sp, #0
 8014436:	6078      	str	r0, [r7, #4]
 8014438:	6039      	str	r1, [r7, #0]
    return Converter<T>::fromJson(*this);
 801443a:	6878      	ldr	r0, [r7, #4]
 801443c:	683b      	ldr	r3, [r7, #0]
 801443e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8014442:	f7ff fbdf 	bl	8013c04 <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonStringEvE8fromJsonENS0_16JsonVariantConstE>
 8014446:	bf00      	nop
  }
 8014448:	6878      	ldr	r0, [r7, #4]
 801444a:	3708      	adds	r7, #8
 801444c:	46bd      	mov	sp, r7
 801444e:	bd80      	pop	{r7, pc}

08014450 <_ZN11ArduinoJson8V730HB2213serializeJsonINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELi0EEEjNS0_16JsonVariantConstERT_>:
// Produces a minified JSON document.
// https://arduinojson.org/v7/api/json/serializejson/
template <
    typename TDestination,
    detail::enable_if_t<!detail::is_pointer<TDestination>::value, int> = 0>
size_t serializeJson(JsonVariantConst source, TDestination& destination) {
 8014450:	b580      	push	{r7, lr}
 8014452:	b084      	sub	sp, #16
 8014454:	af00      	add	r7, sp, #0
 8014456:	f107 0308 	add.w	r3, r7, #8
 801445a:	e883 0003 	stmia.w	r3, {r0, r1}
 801445e:	607a      	str	r2, [r7, #4]
  using namespace detail;
  return serialize<JsonSerializer>(source, destination);
 8014460:	687a      	ldr	r2, [r7, #4]
 8014462:	f107 0308 	add.w	r3, r7, #8
 8014466:	e893 0003 	ldmia.w	r3, {r0, r1}
 801446a:	f000 f943 	bl	80146f4 <_ZN11ArduinoJson8V730HB226detail9serializeINS1_14JsonSerializerENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEjNS0_16JsonVariantConstERT0_>
 801446e:	4603      	mov	r3, r0
}
 8014470:	4618      	mov	r0, r3
 8014472:	3710      	adds	r7, #16
 8014474:	46bd      	mov	sp, r7
 8014476:	bd80      	pop	{r7, pc}

08014478 <_ZNSt10__weak_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      : _M_ptr(nullptr), _M_refcount()
      { }

      __weak_ptr(const __weak_ptr&) noexcept = default;

      ~__weak_ptr() = default;
 8014478:	b580      	push	{r7, lr}
 801447a:	b082      	sub	sp, #8
 801447c:	af00      	add	r7, sp, #0
 801447e:	6078      	str	r0, [r7, #4]
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	3304      	adds	r3, #4
 8014484:	4618      	mov	r0, r3
 8014486:	f000 f960 	bl	801474a <_ZNSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	4618      	mov	r0, r3
 801448e:	3708      	adds	r7, #8
 8014490:	46bd      	mov	sp, r7
 8014492:	bd80      	pop	{r7, pc}

08014494 <_ZNSt8weak_ptrI3TMCEC1Ev>:
      constexpr weak_ptr() noexcept = default;
 8014494:	b580      	push	{r7, lr}
 8014496:	b082      	sub	sp, #8
 8014498:	af00      	add	r7, sp, #0
 801449a:	6078      	str	r0, [r7, #4]
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	4618      	mov	r0, r3
 80144a0:	f000 f942 	bl	8014728 <_ZNSt10__weak_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	4618      	mov	r0, r3
 80144a8:	3708      	adds	r7, #8
 80144aa:	46bd      	mov	sp, r7
 80144ac:	bd80      	pop	{r7, pc}

080144ae <_ZNSt8weak_ptrI3TMCED1Ev>:
    class weak_ptr : public __weak_ptr<_Tp>
 80144ae:	b580      	push	{r7, lr}
 80144b0:	b082      	sub	sp, #8
 80144b2:	af00      	add	r7, sp, #0
 80144b4:	6078      	str	r0, [r7, #4]
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	4618      	mov	r0, r3
 80144ba:	f7ff ffdd 	bl	8014478 <_ZNSt10__weak_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	4618      	mov	r0, r3
 80144c2:	3708      	adds	r7, #8
 80144c4:	46bd      	mov	sp, r7
 80144c6:	bd80      	pop	{r7, pc}

080144c8 <_ZNSt23enable_shared_from_thisI3TMCEC1Ev>:
      constexpr enable_shared_from_this() noexcept { }
 80144c8:	b580      	push	{r7, lr}
 80144ca:	b082      	sub	sp, #8
 80144cc:	af00      	add	r7, sp, #0
 80144ce:	6078      	str	r0, [r7, #4]
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	4618      	mov	r0, r3
 80144d4:	f7ff ffde 	bl	8014494 <_ZNSt8weak_ptrI3TMCEC1Ev>
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	4618      	mov	r0, r3
 80144dc:	3708      	adds	r7, #8
 80144de:	46bd      	mov	sp, r7
 80144e0:	bd80      	pop	{r7, pc}

080144e2 <_ZNSt23enable_shared_from_thisI3TMCED1Ev>:
      ~enable_shared_from_this() { }
 80144e2:	b580      	push	{r7, lr}
 80144e4:	b082      	sub	sp, #8
 80144e6:	af00      	add	r7, sp, #0
 80144e8:	6078      	str	r0, [r7, #4]
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	4618      	mov	r0, r3
 80144ee:	f7ff ffde 	bl	80144ae <_ZNSt8weak_ptrI3TMCED1Ev>
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	4618      	mov	r0, r3
 80144f6:	3708      	adds	r7, #8
 80144f8:	46bd      	mov	sp, r7
 80144fa:	bd80      	pop	{r7, pc}

080144fc <_ZNSt23enable_shared_from_thisI3TMCE16shared_from_thisEv>:
      shared_from_this()
 80144fc:	b580      	push	{r7, lr}
 80144fe:	b082      	sub	sp, #8
 8014500:	af00      	add	r7, sp, #0
 8014502:	6078      	str	r0, [r7, #4]
 8014504:	6039      	str	r1, [r7, #0]
      { return shared_ptr<_Tp>(this->_M_weak_this); }
 8014506:	683b      	ldr	r3, [r7, #0]
 8014508:	4619      	mov	r1, r3
 801450a:	6878      	ldr	r0, [r7, #4]
 801450c:	f000 f92f 	bl	801476e <_ZNSt10shared_ptrI3TMCEC1IS0_vEERKSt8weak_ptrIT_E>
 8014510:	6878      	ldr	r0, [r7, #4]
 8014512:	3708      	adds	r7, #8
 8014514:	46bd      	mov	sp, r7
 8014516:	bd80      	pop	{r7, pc}

08014518 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELi0EEEv>:
  operator T() const {
 8014518:	b580      	push	{r7, lr}
 801451a:	b082      	sub	sp, #8
 801451c:	af00      	add	r7, sp, #0
 801451e:	6078      	str	r0, [r7, #4]
 8014520:	6039      	str	r1, [r7, #0]
    return as<T>();
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	6839      	ldr	r1, [r7, #0]
 8014526:	4618      	mov	r0, r3
 8014528:	f000 f931 	bl	801478e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEET_v>
  }
 801452c:	6878      	ldr	r0, [r7, #4]
 801452e:	3708      	adds	r7, #8
 8014530:	46bd      	mov	sp, r7
 8014532:	bd80      	pop	{r7, pc}

08014534 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IfLi0EEEv>:
  operator T() const {
 8014534:	b580      	push	{r7, lr}
 8014536:	b082      	sub	sp, #8
 8014538:	af00      	add	r7, sp, #0
 801453a:	6078      	str	r0, [r7, #4]
    return as<T>();
 801453c:	6878      	ldr	r0, [r7, #4]
 801453e:	f000 f949 	bl	80147d4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIfEET_v>
 8014542:	eef0 7a40 	vmov.f32	s15, s0
  }
 8014546:	eeb0 0a67 	vmov.f32	s0, s15
 801454a:	3708      	adds	r7, #8
 801454c:	46bd      	mov	sp, r7
 801454e:	bd80      	pop	{r7, pc}

08014550 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ItLi0EEEv>:
  operator T() const {
 8014550:	b580      	push	{r7, lr}
 8014552:	b082      	sub	sp, #8
 8014554:	af00      	add	r7, sp, #0
 8014556:	6078      	str	r0, [r7, #4]
    return as<T>();
 8014558:	6878      	ldr	r0, [r7, #4]
 801455a:	f000 f95f 	bl	801481c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asItEET_v>
 801455e:	4603      	mov	r3, r0
  }
 8014560:	4618      	mov	r0, r3
 8014562:	3708      	adds	r7, #8
 8014564:	46bd      	mov	sp, r7
 8014566:	bd80      	pop	{r7, pc}

08014568 <_ZSt11make_sharedI7TMC2208JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtS8_RbRP6RemoraEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESG_E4typeEEDpOT0_>:
    make_shared(_Args&&... __args)
 8014568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801456c:	b08a      	sub	sp, #40	@ 0x28
 801456e:	af04      	add	r7, sp, #16
 8014570:	60f8      	str	r0, [r7, #12]
 8014572:	60b9      	str	r1, [r7, #8]
 8014574:	607a      	str	r2, [r7, #4]
 8014576:	603b      	str	r3, [r7, #0]
			     std::forward<_Args>(__args)...);
 8014578:	f107 0314 	add.w	r3, r7, #20
 801457c:	469a      	mov	sl, r3
 801457e:	68b8      	ldr	r0, [r7, #8]
 8014580:	f000 f96e 	bl	8014860 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8014584:	4680      	mov	r8, r0
 8014586:	6878      	ldr	r0, [r7, #4]
 8014588:	f000 f975 	bl	8014876 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 801458c:	4681      	mov	r9, r0
 801458e:	6838      	ldr	r0, [r7, #0]
 8014590:	f000 f97c 	bl	801488c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8014594:	4604      	mov	r4, r0
 8014596:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8014598:	f000 f978 	bl	801488c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801459c:	4605      	mov	r5, r0
 801459e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80145a0:	f7fb fe7d 	bl	801029e <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 80145a4:	4606      	mov	r6, r0
 80145a6:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80145a8:	f000 f97b 	bl	80148a2 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 80145ac:	4603      	mov	r3, r0
 80145ae:	9303      	str	r3, [sp, #12]
 80145b0:	9602      	str	r6, [sp, #8]
 80145b2:	9501      	str	r5, [sp, #4]
 80145b4:	9400      	str	r4, [sp, #0]
 80145b6:	464b      	mov	r3, r9
 80145b8:	4642      	mov	r2, r8
 80145ba:	4651      	mov	r1, sl
 80145bc:	68f8      	ldr	r0, [r7, #12]
 80145be:	f000 f97b 	bl	80148b8 <_ZNSt10shared_ptrI7TMC2208EC1ISaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtSB_RbRP6RemoraEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
    }
 80145c2:	68f8      	ldr	r0, [r7, #12]
 80145c4:	3718      	adds	r7, #24
 80145c6:	46bd      	mov	sp, r7
 80145c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080145cc <_ZNSt10shared_ptrI6ModuleEC1I7TMC2208vEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 80145cc:	b590      	push	{r4, r7, lr}
 80145ce:	b083      	sub	sp, #12
 80145d0:	af00      	add	r7, sp, #0
 80145d2:	6078      	str	r0, [r7, #4]
 80145d4:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 80145d6:	687c      	ldr	r4, [r7, #4]
 80145d8:	6838      	ldr	r0, [r7, #0]
 80145da:	f000 f99f 	bl	801491c <_ZSt4moveIRSt10shared_ptrI7TMC2208EEONSt16remove_referenceIT_E4typeEOS5_>
 80145de:	4603      	mov	r3, r0
 80145e0:	4619      	mov	r1, r3
 80145e2:	4620      	mov	r0, r4
 80145e4:	f000 f9a5 	bl	8014932 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I7TMC2208vEEOS_IT_LS2_0EE>
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	4618      	mov	r0, r3
 80145ec:	370c      	adds	r7, #12
 80145ee:	46bd      	mov	sp, r7
 80145f0:	bd90      	pop	{r4, r7, pc}

080145f2 <_ZSt11make_uniqueI14TMC2208StepperJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_RfEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 80145f2:	b590      	push	{r4, r7, lr}
 80145f4:	b091      	sub	sp, #68	@ 0x44
 80145f6:	af00      	add	r7, sp, #0
 80145f8:	60f8      	str	r0, [r7, #12]
 80145fa:	60b9      	str	r1, [r7, #8]
 80145fc:	607a      	str	r2, [r7, #4]
 80145fe:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8014600:	2068      	movs	r0, #104	@ 0x68
 8014602:	f011 fc6b 	bl	8025edc <_Znwj>
 8014606:	4603      	mov	r3, r0
 8014608:	461c      	mov	r4, r3
 801460a:	68b8      	ldr	r0, [r7, #8]
 801460c:	f7f9 ff58 	bl	800e4c0 <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8014610:	4602      	mov	r2, r0
 8014612:	f107 0310 	add.w	r3, r7, #16
 8014616:	4611      	mov	r1, r2
 8014618:	4618      	mov	r0, r3
 801461a:	f011 ff6a 	bl	80264f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 801461e:	6878      	ldr	r0, [r7, #4]
 8014620:	f7f9 ff4e 	bl	800e4c0 <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8014624:	4602      	mov	r2, r0
 8014626:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801462a:	4611      	mov	r1, r2
 801462c:	4618      	mov	r0, r3
 801462e:	f011 ff60 	bl	80264f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8014632:	6838      	ldr	r0, [r7, #0]
 8014634:	f000 f91f 	bl	8014876 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8014638:	4603      	mov	r3, r0
 801463a:	edd3 7a00 	vldr	s15, [r3]
 801463e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8014642:	f107 0310 	add.w	r3, r7, #16
 8014646:	eeb0 0a67 	vmov.f32	s0, s15
 801464a:	4619      	mov	r1, r3
 801464c:	4620      	mov	r0, r4
 801464e:	f7ff fb51 	bl	8013cf4 <_ZN14TMC2208StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_f>
 8014652:	4621      	mov	r1, r4
 8014654:	68f8      	ldr	r0, [r7, #12]
 8014656:	f000 f99a 	bl	801498e <_ZNSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 801465a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801465e:	4618      	mov	r0, r3
 8014660:	f011 fd37 	bl	80260d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8014664:	f107 0310 	add.w	r3, r7, #16
 8014668:	4618      	mov	r0, r3
 801466a:	f011 fd32 	bl	80260d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801466e:	bf00      	nop
 8014670:	68f8      	ldr	r0, [r7, #12]
 8014672:	3744      	adds	r7, #68	@ 0x44
 8014674:	46bd      	mov	sp, r7
 8014676:	bd90      	pop	{r4, r7, pc}

08014678 <_ZNSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8014678:	b590      	push	{r4, r7, lr}
 801467a:	b085      	sub	sp, #20
 801467c:	af00      	add	r7, sp, #0
 801467e:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	4618      	mov	r0, r3
 8014684:	f000 f992 	bl	80149ac <_ZNSt15__uniq_ptr_implI14TMC2208StepperSt14default_deleteIS0_EE6_M_ptrEv>
 8014688:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 801468a:	68fb      	ldr	r3, [r7, #12]
 801468c:	681b      	ldr	r3, [r3, #0]
 801468e:	2b00      	cmp	r3, #0
 8014690:	d00c      	beq.n	80146ac <_ZNSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8014692:	6878      	ldr	r0, [r7, #4]
 8014694:	f000 f997 	bl	80149c6 <_ZNSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EE11get_deleterEv>
 8014698:	4604      	mov	r4, r0
 801469a:	68f8      	ldr	r0, [r7, #12]
 801469c:	f000 f9a0 	bl	80149e0 <_ZSt4moveIRP14TMC2208StepperEONSt16remove_referenceIT_E4typeEOS4_>
 80146a0:	4603      	mov	r3, r0
 80146a2:	681b      	ldr	r3, [r3, #0]
 80146a4:	4619      	mov	r1, r3
 80146a6:	4620      	mov	r0, r4
 80146a8:	f000 f9a5 	bl	80149f6 <_ZNKSt14default_deleteI14TMC2208StepperEclEPS0_>
	__ptr = pointer();
 80146ac:	68fb      	ldr	r3, [r7, #12]
 80146ae:	2200      	movs	r2, #0
 80146b0:	601a      	str	r2, [r3, #0]
      }
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	4618      	mov	r0, r3
 80146b6:	3714      	adds	r7, #20
 80146b8:	46bd      	mov	sp, r7
 80146ba:	bd90      	pop	{r4, r7, pc}

080146bc <_ZNSt10shared_ptrI6ModuleEC1I3TMCvEERKS_IT_E>:
	shared_ptr(const shared_ptr<_Yp>& __r) noexcept
 80146bc:	b580      	push	{r7, lr}
 80146be:	b082      	sub	sp, #8
 80146c0:	af00      	add	r7, sp, #0
 80146c2:	6078      	str	r0, [r7, #4]
 80146c4:	6039      	str	r1, [r7, #0]
        : __shared_ptr<_Tp>(__r) { }
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	683a      	ldr	r2, [r7, #0]
 80146ca:	4611      	mov	r1, r2
 80146cc:	4618      	mov	r0, r3
 80146ce:	f000 f9a5 	bl	8014a1c <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I3TMCvEERKS_IT_LS2_0EE>
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	4618      	mov	r0, r3
 80146d6:	3708      	adds	r7, #8
 80146d8:	46bd      	mov	sp, r7
 80146da:	bd80      	pop	{r7, pc}

080146dc <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 80146dc:	b580      	push	{r7, lr}
 80146de:	b082      	sub	sp, #8
 80146e0:	af00      	add	r7, sp, #0
 80146e2:	6078      	str	r0, [r7, #4]
	return get();
 80146e4:	6878      	ldr	r0, [r7, #4]
 80146e6:	f000 f9af 	bl	8014a48 <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EE3getEv>
 80146ea:	4603      	mov	r3, r0
      }
 80146ec:	4618      	mov	r0, r3
 80146ee:	3708      	adds	r7, #8
 80146f0:	46bd      	mov	sp, r7
 80146f2:	bd80      	pop	{r7, pc}

080146f4 <_ZN11ArduinoJson8V730HB226detail9serializeINS1_14JsonSerializerENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEjNS0_16JsonVariantConstERT0_>:
  TSerializer<TWriter> serializer(writer, resources);
  return VariantData::accept(data, resources, serializer);
}

template <template <typename> class TSerializer, typename TDestination>
size_t serialize(ArduinoJson::JsonVariantConst source,
 80146f4:	b580      	push	{r7, lr}
 80146f6:	b086      	sub	sp, #24
 80146f8:	af00      	add	r7, sp, #0
 80146fa:	f107 0308 	add.w	r3, r7, #8
 80146fe:	e883 0003 	stmia.w	r3, {r0, r1}
 8014702:	607a      	str	r2, [r7, #4]
                 TDestination& destination) {
  Writer<TDestination> writer(destination);
 8014704:	f107 0314 	add.w	r3, r7, #20
 8014708:	6879      	ldr	r1, [r7, #4]
 801470a:	4618      	mov	r0, r3
 801470c:	f000 f9a9 	bl	8014a62 <_ZN11ArduinoJson8V730HB226detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEC1ERS8_>
  return doSerialize<TSerializer>(source, writer);
 8014710:	697a      	ldr	r2, [r7, #20]
 8014712:	f107 0308 	add.w	r3, r7, #8
 8014716:	e893 0003 	ldmia.w	r3, {r0, r1}
 801471a:	f000 f9b2 	bl	8014a82 <_ZN11ArduinoJson8V730HB226detail11doSerializeINS1_14JsonSerializerENS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEjNS0_16JsonVariantConstET0_>
 801471e:	4603      	mov	r3, r0
}
 8014720:	4618      	mov	r0, r3
 8014722:	3718      	adds	r7, #24
 8014724:	46bd      	mov	sp, r7
 8014726:	bd80      	pop	{r7, pc}

08014728 <_ZNSt10__weak_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __weak_ptr() noexcept
 8014728:	b580      	push	{r7, lr}
 801472a:	b082      	sub	sp, #8
 801472c:	af00      	add	r7, sp, #0
 801472e:	6078      	str	r0, [r7, #4]
      : _M_ptr(nullptr), _M_refcount()
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	2200      	movs	r2, #0
 8014734:	601a      	str	r2, [r3, #0]
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	3304      	adds	r3, #4
 801473a:	4618      	mov	r0, r3
 801473c:	f000 f9db 	bl	8014af6 <_ZNSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
      { }
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	4618      	mov	r0, r3
 8014744:	3708      	adds	r7, #8
 8014746:	46bd      	mov	sp, r7
 8014748:	bd80      	pop	{r7, pc}

0801474a <_ZNSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__weak_count() noexcept
 801474a:	b580      	push	{r7, lr}
 801474c:	b082      	sub	sp, #8
 801474e:	af00      	add	r7, sp, #0
 8014750:	6078      	str	r0, [r7, #4]
	if (_M_pi != nullptr)
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	681b      	ldr	r3, [r3, #0]
 8014756:	2b00      	cmp	r3, #0
 8014758:	d004      	beq.n	8014764 <_ZNSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1a>
	  _M_pi->_M_weak_release();
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	4618      	mov	r0, r3
 8014760:	f7ff f915 	bl	801398e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_weak_releaseEv>
      }
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	4618      	mov	r0, r3
 8014768:	3708      	adds	r7, #8
 801476a:	46bd      	mov	sp, r7
 801476c:	bd80      	pop	{r7, pc}

0801476e <_ZNSt10shared_ptrI3TMCEC1IS0_vEERKSt8weak_ptrIT_E>:
	explicit shared_ptr(const weak_ptr<_Yp>& __r)
 801476e:	b580      	push	{r7, lr}
 8014770:	b082      	sub	sp, #8
 8014772:	af00      	add	r7, sp, #0
 8014774:	6078      	str	r0, [r7, #4]
 8014776:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(__r) { }
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	683a      	ldr	r2, [r7, #0]
 801477c:	4611      	mov	r1, r2
 801477e:	4618      	mov	r0, r3
 8014780:	f000 f9c7 	bl	8014b12 <_ZNSt12__shared_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EEC1IS0_vEERKSt10__weak_ptrIT_LS2_0EE>
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	4618      	mov	r0, r3
 8014788:	3708      	adds	r7, #8
 801478a:	46bd      	mov	sp, r7
 801478c:	bd80      	pop	{r7, pc}

0801478e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEET_v>:
  return add<JsonVariant>();
}

template <typename TDerived>
template <typename T>
inline T VariantRefBase<TDerived>::as() const {
 801478e:	b590      	push	{r4, r7, lr}
 8014790:	b087      	sub	sp, #28
 8014792:	af00      	add	r7, sp, #0
 8014794:	6078      	str	r0, [r7, #4]
 8014796:	6039      	str	r1, [r7, #0]
 8014798:	683b      	ldr	r3, [r7, #0]
 801479a:	617b      	str	r3, [r7, #20]
 801479c:	697b      	ldr	r3, [r7, #20]
 801479e:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 80147a0:	6938      	ldr	r0, [r7, #16]
 80147a2:	f7f3 f872 	bl	800788a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 80147a6:	4604      	mov	r4, r0
 80147a8:	6938      	ldr	r0, [r7, #16]
 80147aa:	f7f2 fefc 	bl	80075a6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 80147ae:	4602      	mov	r2, r0
 80147b0:	f107 0308 	add.w	r3, r7, #8
 80147b4:	4621      	mov	r1, r4
 80147b6:	4618      	mov	r0, r3
 80147b8:	f7ef ff97 	bl	80046ea <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 80147bc:	bf00      	nop
  using variant_type =  // JsonVariantConst or JsonVariant?
      typename function_traits<decltype(&Converter<T>::fromJson)>::arg1_type;
  return Converter<T>::fromJson(getVariant<variant_type>());
 80147be:	6878      	ldr	r0, [r7, #4]
 80147c0:	f107 0308 	add.w	r3, r7, #8
 80147c4:	e893 0006 	ldmia.w	r3, {r1, r2}
 80147c8:	f000 f9b9 	bl	8014b3e <_ZN11ArduinoJson8V730HB229ConverterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE8fromJsonENS0_16JsonVariantConstE>
}
 80147cc:	6878      	ldr	r0, [r7, #4]
 80147ce:	371c      	adds	r7, #28
 80147d0:	46bd      	mov	sp, r7
 80147d2:	bd90      	pop	{r4, r7, pc}

080147d4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIfEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 80147d4:	b590      	push	{r4, r7, lr}
 80147d6:	b087      	sub	sp, #28
 80147d8:	af00      	add	r7, sp, #0
 80147da:	6078      	str	r0, [r7, #4]
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	617b      	str	r3, [r7, #20]
 80147e0:	697b      	ldr	r3, [r7, #20]
 80147e2:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 80147e4:	6938      	ldr	r0, [r7, #16]
 80147e6:	f7f3 f850 	bl	800788a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 80147ea:	4604      	mov	r4, r0
 80147ec:	6938      	ldr	r0, [r7, #16]
 80147ee:	f7f2 feda 	bl	80075a6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 80147f2:	4602      	mov	r2, r0
 80147f4:	f107 0308 	add.w	r3, r7, #8
 80147f8:	4621      	mov	r1, r4
 80147fa:	4618      	mov	r0, r3
 80147fc:	f7ef ff75 	bl	80046ea <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 8014800:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 8014802:	f107 0308 	add.w	r3, r7, #8
 8014806:	e893 0003 	ldmia.w	r3, {r0, r1}
 801480a:	f000 f9ad 	bl	8014b68 <_ZN11ArduinoJson8V730HB229ConverterIfvE8fromJsonENS0_16JsonVariantConstE>
 801480e:	eef0 7a40 	vmov.f32	s15, s0
}
 8014812:	eeb0 0a67 	vmov.f32	s0, s15
 8014816:	371c      	adds	r7, #28
 8014818:	46bd      	mov	sp, r7
 801481a:	bd90      	pop	{r4, r7, pc}

0801481c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asItEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 801481c:	b590      	push	{r4, r7, lr}
 801481e:	b087      	sub	sp, #28
 8014820:	af00      	add	r7, sp, #0
 8014822:	6078      	str	r0, [r7, #4]
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	617b      	str	r3, [r7, #20]
 8014828:	697b      	ldr	r3, [r7, #20]
 801482a:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 801482c:	6938      	ldr	r0, [r7, #16]
 801482e:	f7f3 f82c 	bl	800788a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 8014832:	4604      	mov	r4, r0
 8014834:	6938      	ldr	r0, [r7, #16]
 8014836:	f7f2 feb6 	bl	80075a6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 801483a:	4602      	mov	r2, r0
 801483c:	f107 0308 	add.w	r3, r7, #8
 8014840:	4621      	mov	r1, r4
 8014842:	4618      	mov	r0, r3
 8014844:	f7ef ff51 	bl	80046ea <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 8014848:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 801484a:	f107 0308 	add.w	r3, r7, #8
 801484e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014852:	f000 f9ad 	bl	8014bb0 <_ZN11ArduinoJson8V730HB229ConverterItvE8fromJsonENS0_16JsonVariantConstE>
 8014856:	4603      	mov	r3, r0
}
 8014858:	4618      	mov	r0, r3
 801485a:	371c      	adds	r7, #28
 801485c:	46bd      	mov	sp, r7
 801485e:	bd90      	pop	{r4, r7, pc}

08014860 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8014860:	b480      	push	{r7}
 8014862:	b083      	sub	sp, #12
 8014864:	af00      	add	r7, sp, #0
 8014866:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	4618      	mov	r0, r3
 801486c:	370c      	adds	r7, #12
 801486e:	46bd      	mov	sp, r7
 8014870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014874:	4770      	bx	lr

08014876 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8014876:	b480      	push	{r7}
 8014878:	b083      	sub	sp, #12
 801487a:	af00      	add	r7, sp, #0
 801487c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	4618      	mov	r0, r3
 8014882:	370c      	adds	r7, #12
 8014884:	46bd      	mov	sp, r7
 8014886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801488a:	4770      	bx	lr

0801488c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801488c:	b480      	push	{r7}
 801488e:	b083      	sub	sp, #12
 8014890:	af00      	add	r7, sp, #0
 8014892:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	4618      	mov	r0, r3
 8014898:	370c      	adds	r7, #12
 801489a:	46bd      	mov	sp, r7
 801489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148a0:	4770      	bx	lr

080148a2 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80148a2:	b480      	push	{r7}
 80148a4:	b083      	sub	sp, #12
 80148a6:	af00      	add	r7, sp, #0
 80148a8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	4618      	mov	r0, r3
 80148ae:	370c      	adds	r7, #12
 80148b0:	46bd      	mov	sp, r7
 80148b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148b6:	4770      	bx	lr

080148b8 <_ZNSt10shared_ptrI7TMC2208EC1ISaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtSB_RbRP6RemoraEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 80148b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80148bc:	b08b      	sub	sp, #44	@ 0x2c
 80148be:	af04      	add	r7, sp, #16
 80148c0:	6178      	str	r0, [r7, #20]
 80148c2:	6139      	str	r1, [r7, #16]
 80148c4:	60fa      	str	r2, [r7, #12]
 80148c6:	60bb      	str	r3, [r7, #8]
	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 80148c8:	697c      	ldr	r4, [r7, #20]
 80148ca:	68f8      	ldr	r0, [r7, #12]
 80148cc:	f7ff ffc8 	bl	8014860 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80148d0:	4680      	mov	r8, r0
 80148d2:	68b8      	ldr	r0, [r7, #8]
 80148d4:	f7ff ffcf 	bl	8014876 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 80148d8:	4681      	mov	r9, r0
 80148da:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80148dc:	f7ff ffd6 	bl	801488c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80148e0:	4605      	mov	r5, r0
 80148e2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80148e4:	f7ff ffd2 	bl	801488c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80148e8:	4606      	mov	r6, r0
 80148ea:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80148ec:	f7fb fcd7 	bl	801029e <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 80148f0:	6078      	str	r0, [r7, #4]
 80148f2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80148f4:	f7ff ffd5 	bl	80148a2 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 80148f8:	4603      	mov	r3, r0
 80148fa:	9303      	str	r3, [sp, #12]
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	9302      	str	r3, [sp, #8]
 8014900:	9601      	str	r6, [sp, #4]
 8014902:	9500      	str	r5, [sp, #0]
 8014904:	464b      	mov	r3, r9
 8014906:	4642      	mov	r2, r8
 8014908:	6939      	ldr	r1, [r7, #16]
 801490a:	4620      	mov	r0, r4
 801490c:	f000 f96e 	bl	8014bec <_ZNSt12__shared_ptrI7TMC2208LN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtSD_RbRP6RemoraEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
	{ }
 8014910:	697b      	ldr	r3, [r7, #20]
 8014912:	4618      	mov	r0, r3
 8014914:	371c      	adds	r7, #28
 8014916:	46bd      	mov	sp, r7
 8014918:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801491c <_ZSt4moveIRSt10shared_ptrI7TMC2208EEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 801491c:	b480      	push	{r7}
 801491e:	b083      	sub	sp, #12
 8014920:	af00      	add	r7, sp, #0
 8014922:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	4618      	mov	r0, r3
 8014928:	370c      	adds	r7, #12
 801492a:	46bd      	mov	sp, r7
 801492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014930:	4770      	bx	lr

08014932 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I7TMC2208vEEOS_IT_LS2_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 8014932:	b580      	push	{r7, lr}
 8014934:	b082      	sub	sp, #8
 8014936:	af00      	add	r7, sp, #0
 8014938:	6078      	str	r0, [r7, #4]
 801493a:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 801493c:	683b      	ldr	r3, [r7, #0]
 801493e:	681a      	ldr	r2, [r3, #0]
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	601a      	str	r2, [r3, #0]
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	3304      	adds	r3, #4
 8014948:	4618      	mov	r0, r3
 801494a:	f7f7 faf7 	bl	800bf3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	1d1a      	adds	r2, r3, #4
 8014952:	683b      	ldr	r3, [r7, #0]
 8014954:	3304      	adds	r3, #4
 8014956:	4619      	mov	r1, r3
 8014958:	4610      	mov	r0, r2
 801495a:	f7f7 feae 	bl	800c6ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = nullptr;
 801495e:	683b      	ldr	r3, [r7, #0]
 8014960:	2200      	movs	r2, #0
 8014962:	601a      	str	r2, [r3, #0]
	}
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	4618      	mov	r0, r3
 8014968:	3708      	adds	r7, #8
 801496a:	46bd      	mov	sp, r7
 801496c:	bd80      	pop	{r7, pc}

0801496e <_ZNSt15__uniq_ptr_dataI14TMC2208StepperSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 801496e:	b580      	push	{r7, lr}
 8014970:	b082      	sub	sp, #8
 8014972:	af00      	add	r7, sp, #0
 8014974:	6078      	str	r0, [r7, #4]
 8014976:	6039      	str	r1, [r7, #0]
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	683a      	ldr	r2, [r7, #0]
 801497c:	4611      	mov	r1, r2
 801497e:	4618      	mov	r0, r3
 8014980:	f000 f974 	bl	8014c6c <_ZNSt15__uniq_ptr_implI14TMC2208StepperSt14default_deleteIS0_EEC1EPS0_>
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	4618      	mov	r0, r3
 8014988:	3708      	adds	r7, #8
 801498a:	46bd      	mov	sp, r7
 801498c:	bd80      	pop	{r7, pc}

0801498e <_ZNSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 801498e:	b580      	push	{r7, lr}
 8014990:	b082      	sub	sp, #8
 8014992:	af00      	add	r7, sp, #0
 8014994:	6078      	str	r0, [r7, #4]
 8014996:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	6839      	ldr	r1, [r7, #0]
 801499c:	4618      	mov	r0, r3
 801499e:	f7ff ffe6 	bl	801496e <_ZNSt15__uniq_ptr_dataI14TMC2208StepperSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	4618      	mov	r0, r3
 80149a6:	3708      	adds	r7, #8
 80149a8:	46bd      	mov	sp, r7
 80149aa:	bd80      	pop	{r7, pc}

080149ac <_ZNSt15__uniq_ptr_implI14TMC2208StepperSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 80149ac:	b580      	push	{r7, lr}
 80149ae:	b082      	sub	sp, #8
 80149b0:	af00      	add	r7, sp, #0
 80149b2:	6078      	str	r0, [r7, #4]
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	4618      	mov	r0, r3
 80149b8:	f000 f96c 	bl	8014c94 <_ZSt3getILj0EJP14TMC2208StepperSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80149bc:	4603      	mov	r3, r0
 80149be:	4618      	mov	r0, r3
 80149c0:	3708      	adds	r7, #8
 80149c2:	46bd      	mov	sp, r7
 80149c4:	bd80      	pop	{r7, pc}

080149c6 <_ZNSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 80149c6:	b580      	push	{r7, lr}
 80149c8:	b082      	sub	sp, #8
 80149ca:	af00      	add	r7, sp, #0
 80149cc:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	4618      	mov	r0, r3
 80149d2:	f000 f96c 	bl	8014cae <_ZNSt15__uniq_ptr_implI14TMC2208StepperSt14default_deleteIS0_EE10_M_deleterEv>
 80149d6:	4603      	mov	r3, r0
 80149d8:	4618      	mov	r0, r3
 80149da:	3708      	adds	r7, #8
 80149dc:	46bd      	mov	sp, r7
 80149de:	bd80      	pop	{r7, pc}

080149e0 <_ZSt4moveIRP14TMC2208StepperEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80149e0:	b480      	push	{r7}
 80149e2:	b083      	sub	sp, #12
 80149e4:	af00      	add	r7, sp, #0
 80149e6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	4618      	mov	r0, r3
 80149ec:	370c      	adds	r7, #12
 80149ee:	46bd      	mov	sp, r7
 80149f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149f4:	4770      	bx	lr

080149f6 <_ZNKSt14default_deleteI14TMC2208StepperEclEPS0_>:
      operator()(_Tp* __ptr) const
 80149f6:	b590      	push	{r4, r7, lr}
 80149f8:	b083      	sub	sp, #12
 80149fa:	af00      	add	r7, sp, #0
 80149fc:	6078      	str	r0, [r7, #4]
 80149fe:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8014a00:	683c      	ldr	r4, [r7, #0]
 8014a02:	2c00      	cmp	r4, #0
 8014a04:	d006      	beq.n	8014a14 <_ZNKSt14default_deleteI14TMC2208StepperEclEPS0_+0x1e>
 8014a06:	4620      	mov	r0, r4
 8014a08:	f7ff f95c 	bl	8013cc4 <_ZN14TMC2208StepperD1Ev>
 8014a0c:	2168      	movs	r1, #104	@ 0x68
 8014a0e:	4620      	mov	r0, r4
 8014a10:	f011 fa53 	bl	8025eba <_ZdlPvj>
      }
 8014a14:	bf00      	nop
 8014a16:	370c      	adds	r7, #12
 8014a18:	46bd      	mov	sp, r7
 8014a1a:	bd90      	pop	{r4, r7, pc}

08014a1c <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I3TMCvEERKS_IT_LS2_0EE>:
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
 8014a1c:	b580      	push	{r7, lr}
 8014a1e:	b082      	sub	sp, #8
 8014a20:	af00      	add	r7, sp, #0
 8014a22:	6078      	str	r0, [r7, #4]
 8014a24:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
 8014a26:	683b      	ldr	r3, [r7, #0]
 8014a28:	681a      	ldr	r2, [r3, #0]
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	601a      	str	r2, [r3, #0]
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	1d1a      	adds	r2, r3, #4
 8014a32:	683b      	ldr	r3, [r7, #0]
 8014a34:	3304      	adds	r3, #4
 8014a36:	4619      	mov	r1, r3
 8014a38:	4610      	mov	r0, r2
 8014a3a:	f7f6 fc82 	bl	800b342 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	{ }
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	4618      	mov	r0, r3
 8014a42:	3708      	adds	r7, #8
 8014a44:	46bd      	mov	sp, r7
 8014a46:	bd80      	pop	{r7, pc}

08014a48 <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8014a48:	b580      	push	{r7, lr}
 8014a4a:	b082      	sub	sp, #8
 8014a4c:	af00      	add	r7, sp, #0
 8014a4e:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	4618      	mov	r0, r3
 8014a54:	f000 f938 	bl	8014cc8 <_ZNKSt15__uniq_ptr_implI14TMC2208StepperSt14default_deleteIS0_EE6_M_ptrEv>
 8014a58:	4603      	mov	r3, r0
 8014a5a:	4618      	mov	r0, r3
 8014a5c:	3708      	adds	r7, #8
 8014a5e:	46bd      	mov	sp, r7
 8014a60:	bd80      	pop	{r7, pc}

08014a62 <_ZN11ArduinoJson8V730HB226detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEC1ERS8_>:
};

template <typename TDestination>
class Writer<TDestination, enable_if_t<is_std_string<TDestination>::value>> {
 public:
  Writer(TDestination& str) : str_(&str) {
 8014a62:	b580      	push	{r7, lr}
 8014a64:	b082      	sub	sp, #8
 8014a66:	af00      	add	r7, sp, #0
 8014a68:	6078      	str	r0, [r7, #4]
 8014a6a:	6039      	str	r1, [r7, #0]
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	683a      	ldr	r2, [r7, #0]
 8014a70:	601a      	str	r2, [r3, #0]
    str.clear();
 8014a72:	6838      	ldr	r0, [r7, #0]
 8014a74:	f011 fbe8 	bl	8026248 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
  }
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	4618      	mov	r0, r3
 8014a7c:	3708      	adds	r7, #8
 8014a7e:	46bd      	mov	sp, r7
 8014a80:	bd80      	pop	{r7, pc}

08014a82 <_ZN11ArduinoJson8V730HB226detail11doSerializeINS1_14JsonSerializerENS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEjNS0_16JsonVariantConstET0_>:
size_t doSerialize(ArduinoJson::JsonVariantConst source, TWriter writer) {
 8014a82:	b580      	push	{r7, lr}
 8014a84:	b08a      	sub	sp, #40	@ 0x28
 8014a86:	af00      	add	r7, sp, #0
 8014a88:	f107 0308 	add.w	r3, r7, #8
 8014a8c:	e883 0003 	stmia.w	r3, {r0, r1}
 8014a90:	607a      	str	r2, [r7, #4]
  auto data = VariantAttorney::getData(source);
 8014a92:	f107 0308 	add.w	r3, r7, #8
 8014a96:	4618      	mov	r0, r3
 8014a98:	f7f1 fba6 	bl	80061e8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8014a9c:	6278      	str	r0, [r7, #36]	@ 0x24
  auto resources = VariantAttorney::getResourceManager(source);
 8014a9e:	f107 0308 	add.w	r3, r7, #8
 8014aa2:	4618      	mov	r0, r3
 8014aa4:	f7f1 fbac 	bl	8006200 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 8014aa8:	6238      	str	r0, [r7, #32]
  TSerializer<TWriter> serializer(writer, resources);
 8014aaa:	f107 0314 	add.w	r3, r7, #20
 8014aae:	6a3a      	ldr	r2, [r7, #32]
 8014ab0:	6879      	ldr	r1, [r7, #4]
 8014ab2:	4618      	mov	r0, r3
 8014ab4:	f000 f916 	bl	8014ce4 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ESA_PKNS1_15ResourceManagerE>
  return VariantData::accept(data, resources, serializer);
 8014ab8:	f107 0314 	add.w	r3, r7, #20
 8014abc:	461a      	mov	r2, r3
 8014abe:	6a39      	ldr	r1, [r7, #32]
 8014ac0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014ac2:	f000 f922 	bl	8014d0a <_ZN11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeEPKS2_PKNS1_15ResourceManagerERSE_>
 8014ac6:	4603      	mov	r3, r0
}
 8014ac8:	4618      	mov	r0, r3
 8014aca:	3728      	adds	r7, #40	@ 0x28
 8014acc:	46bd      	mov	sp, r7
 8014ace:	bd80      	pop	{r7, pc}

08014ad0 <_ZN11ArduinoJson8V730HB2215SerializedValueIPKcEC1ES3_j>:
  explicit SerializedValue(TChar* p, size_t n) : data_(p), size_(n) {}
 8014ad0:	b480      	push	{r7}
 8014ad2:	b085      	sub	sp, #20
 8014ad4:	af00      	add	r7, sp, #0
 8014ad6:	60f8      	str	r0, [r7, #12]
 8014ad8:	60b9      	str	r1, [r7, #8]
 8014ada:	607a      	str	r2, [r7, #4]
 8014adc:	68fb      	ldr	r3, [r7, #12]
 8014ade:	68ba      	ldr	r2, [r7, #8]
 8014ae0:	601a      	str	r2, [r3, #0]
 8014ae2:	68fb      	ldr	r3, [r7, #12]
 8014ae4:	687a      	ldr	r2, [r7, #4]
 8014ae6:	605a      	str	r2, [r3, #4]
 8014ae8:	68fb      	ldr	r3, [r7, #12]
 8014aea:	4618      	mov	r0, r3
 8014aec:	3714      	adds	r7, #20
 8014aee:	46bd      	mov	sp, r7
 8014af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014af4:	4770      	bx	lr

08014af6 <_ZNSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __weak_count() noexcept : _M_pi(nullptr)
 8014af6:	b480      	push	{r7}
 8014af8:	b083      	sub	sp, #12
 8014afa:	af00      	add	r7, sp, #0
 8014afc:	6078      	str	r0, [r7, #4]
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	2200      	movs	r2, #0
 8014b02:	601a      	str	r2, [r3, #0]
      { }
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	4618      	mov	r0, r3
 8014b08:	370c      	adds	r7, #12
 8014b0a:	46bd      	mov	sp, r7
 8014b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b10:	4770      	bx	lr

08014b12 <_ZNSt12__shared_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EEC1IS0_vEERKSt10__weak_ptrIT_LS2_0EE>:
	explicit __shared_ptr(const __weak_ptr<_Yp, _Lp>& __r)
 8014b12:	b580      	push	{r7, lr}
 8014b14:	b082      	sub	sp, #8
 8014b16:	af00      	add	r7, sp, #0
 8014b18:	6078      	str	r0, [r7, #4]
 8014b1a:	6039      	str	r1, [r7, #0]
	: _M_refcount(__r._M_refcount) // may throw
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	1d1a      	adds	r2, r3, #4
 8014b20:	683b      	ldr	r3, [r7, #0]
 8014b22:	3304      	adds	r3, #4
 8014b24:	4619      	mov	r1, r3
 8014b26:	4610      	mov	r0, r2
 8014b28:	f000 f909 	bl	8014d3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKSt12__weak_countILS1_0EE>
	  _M_ptr = __r._M_ptr;
 8014b2c:	683b      	ldr	r3, [r7, #0]
 8014b2e:	681a      	ldr	r2, [r3, #0]
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	601a      	str	r2, [r3, #0]
	}
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	4618      	mov	r0, r3
 8014b38:	3708      	adds	r7, #8
 8014b3a:	46bd      	mov	sp, r7
 8014b3c:	bd80      	pop	{r7, pc}

08014b3e <_ZN11ArduinoJson8V730HB229ConverterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE8fromJsonENS0_16JsonVariantConstE>:
  static detail::decay_t<T> fromJson(JsonVariantConst src) {
 8014b3e:	b580      	push	{r7, lr}
 8014b40:	b084      	sub	sp, #16
 8014b42:	af00      	add	r7, sp, #0
 8014b44:	60f8      	str	r0, [r7, #12]
 8014b46:	1d3b      	adds	r3, r7, #4
 8014b48:	e883 0006 	stmia.w	r3, {r1, r2}
    T result; // Error here? See https://arduinojson.org/v7/non-default-constructible/
 8014b4c:	68f8      	ldr	r0, [r7, #12]
 8014b4e:	f011 fa9a 	bl	8026086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
    convertFromJson(src, result);  // Error here? See https://arduinojson.org/v7/unsupported-as/
 8014b52:	68fa      	ldr	r2, [r7, #12]
 8014b54:	1d3b      	adds	r3, r7, #4
 8014b56:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014b5a:	f7ff f86f 	bl	8013c3c <_ZN11ArduinoJson8V730HB2215convertFromJsonENS0_16JsonVariantConstERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
    return result;
 8014b5e:	bf00      	nop
  }
 8014b60:	68f8      	ldr	r0, [r7, #12]
 8014b62:	3710      	adds	r7, #16
 8014b64:	46bd      	mov	sp, r7
 8014b66:	bd80      	pop	{r7, pc}

08014b68 <_ZN11ArduinoJson8V730HB229ConverterIfvE8fromJsonENS0_16JsonVariantConstE>:
  static T fromJson(JsonVariantConst src) {
 8014b68:	b580      	push	{r7, lr}
 8014b6a:	b084      	sub	sp, #16
 8014b6c:	af00      	add	r7, sp, #0
 8014b6e:	463b      	mov	r3, r7
 8014b70:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 8014b74:	463b      	mov	r3, r7
 8014b76:	4618      	mov	r0, r3
 8014b78:	f7f1 fb36 	bl	80061e8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8014b7c:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 8014b7e:	463b      	mov	r3, r7
 8014b80:	4618      	mov	r0, r3
 8014b82:	f7f1 fb3d 	bl	8006200 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 8014b86:	60b8      	str	r0, [r7, #8]
    return data ? data->template asFloat<T>(resources) : 0;
 8014b88:	68fb      	ldr	r3, [r7, #12]
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	d006      	beq.n	8014b9c <_ZN11ArduinoJson8V730HB229ConverterIfvE8fromJsonENS0_16JsonVariantConstE+0x34>
 8014b8e:	68b9      	ldr	r1, [r7, #8]
 8014b90:	68f8      	ldr	r0, [r7, #12]
 8014b92:	f000 f8f9 	bl	8014d88 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE>
 8014b96:	eef0 7a40 	vmov.f32	s15, s0
 8014b9a:	e001      	b.n	8014ba0 <_ZN11ArduinoJson8V730HB229ConverterIfvE8fromJsonENS0_16JsonVariantConstE+0x38>
 8014b9c:	eddf 7a03 	vldr	s15, [pc, #12]	@ 8014bac <_ZN11ArduinoJson8V730HB229ConverterIfvE8fromJsonENS0_16JsonVariantConstE+0x44>
  }
 8014ba0:	eeb0 0a67 	vmov.f32	s0, s15
 8014ba4:	3710      	adds	r7, #16
 8014ba6:	46bd      	mov	sp, r7
 8014ba8:	bd80      	pop	{r7, pc}
 8014baa:	bf00      	nop
 8014bac:	00000000 	.word	0x00000000

08014bb0 <_ZN11ArduinoJson8V730HB229ConverterItvE8fromJsonENS0_16JsonVariantConstE>:
  static T fromJson(JsonVariantConst src) {
 8014bb0:	b580      	push	{r7, lr}
 8014bb2:	b084      	sub	sp, #16
 8014bb4:	af00      	add	r7, sp, #0
 8014bb6:	463b      	mov	r3, r7
 8014bb8:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 8014bbc:	463b      	mov	r3, r7
 8014bbe:	4618      	mov	r0, r3
 8014bc0:	f7f1 fb12 	bl	80061e8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8014bc4:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 8014bc6:	463b      	mov	r3, r7
 8014bc8:	4618      	mov	r0, r3
 8014bca:	f7f1 fb19 	bl	8006200 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 8014bce:	60b8      	str	r0, [r7, #8]
    return data ? data->template asIntegral<T>(resources) : T();
 8014bd0:	68fb      	ldr	r3, [r7, #12]
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d005      	beq.n	8014be2 <_ZN11ArduinoJson8V730HB229ConverterItvE8fromJsonENS0_16JsonVariantConstE+0x32>
 8014bd6:	68b9      	ldr	r1, [r7, #8]
 8014bd8:	68f8      	ldr	r0, [r7, #12]
 8014bda:	f000 f963 	bl	8014ea4 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE>
 8014bde:	4603      	mov	r3, r0
 8014be0:	e000      	b.n	8014be4 <_ZN11ArduinoJson8V730HB229ConverterItvE8fromJsonENS0_16JsonVariantConstE+0x34>
 8014be2:	2300      	movs	r3, #0
  }
 8014be4:	4618      	mov	r0, r3
 8014be6:	3710      	adds	r7, #16
 8014be8:	46bd      	mov	sp, r7
 8014bea:	bd80      	pop	{r7, pc}

08014bec <_ZNSt12__shared_ptrI7TMC2208LN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtSD_RbRP6RemoraEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 8014bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014bf0:	b08e      	sub	sp, #56	@ 0x38
 8014bf2:	af06      	add	r7, sp, #24
 8014bf4:	61f8      	str	r0, [r7, #28]
 8014bf6:	61b9      	str	r1, [r7, #24]
 8014bf8:	617a      	str	r2, [r7, #20]
 8014bfa:	613b      	str	r3, [r7, #16]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 8014bfc:	69fb      	ldr	r3, [r7, #28]
 8014bfe:	2200      	movs	r2, #0
 8014c00:	601a      	str	r2, [r3, #0]
 8014c02:	69fb      	ldr	r3, [r7, #28]
 8014c04:	1d1c      	adds	r4, r3, #4
 8014c06:	69fd      	ldr	r5, [r7, #28]
 8014c08:	6978      	ldr	r0, [r7, #20]
 8014c0a:	f7ff fe29 	bl	8014860 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8014c0e:	4680      	mov	r8, r0
 8014c10:	6938      	ldr	r0, [r7, #16]
 8014c12:	f7ff fe30 	bl	8014876 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8014c16:	4606      	mov	r6, r0
 8014c18:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8014c1a:	f7ff fe37 	bl	801488c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8014c1e:	60f8      	str	r0, [r7, #12]
 8014c20:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8014c22:	f7ff fe33 	bl	801488c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8014c26:	60b8      	str	r0, [r7, #8]
 8014c28:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8014c2a:	f7fb fb38 	bl	801029e <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8014c2e:	6078      	str	r0, [r7, #4]
 8014c30:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8014c32:	f7ff fe36 	bl	80148a2 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 8014c36:	4603      	mov	r3, r0
 8014c38:	9304      	str	r3, [sp, #16]
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	9303      	str	r3, [sp, #12]
 8014c3e:	68bb      	ldr	r3, [r7, #8]
 8014c40:	9302      	str	r3, [sp, #8]
 8014c42:	68fb      	ldr	r3, [r7, #12]
 8014c44:	9301      	str	r3, [sp, #4]
 8014c46:	9600      	str	r6, [sp, #0]
 8014c48:	4643      	mov	r3, r8
 8014c4a:	69ba      	ldr	r2, [r7, #24]
 8014c4c:	4629      	mov	r1, r5
 8014c4e:	4620      	mov	r0, r4
 8014c50:	f000 f9ba 	bl	8014fc8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7TMC2208SaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtSD_RbRP6RemoraEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>
	{ _M_enable_shared_from_this_with(_M_ptr); }
 8014c54:	69fb      	ldr	r3, [r7, #28]
 8014c56:	681b      	ldr	r3, [r3, #0]
 8014c58:	4619      	mov	r1, r3
 8014c5a:	69f8      	ldr	r0, [r7, #28]
 8014c5c:	f000 fa1a 	bl	8015094 <_ZNSt12__shared_ptrI7TMC2208LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
 8014c60:	69fb      	ldr	r3, [r7, #28]
 8014c62:	4618      	mov	r0, r3
 8014c64:	3720      	adds	r7, #32
 8014c66:	46bd      	mov	sp, r7
 8014c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014c6c <_ZNSt15__uniq_ptr_implI14TMC2208StepperSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8014c6c:	b590      	push	{r4, r7, lr}
 8014c6e:	b083      	sub	sp, #12
 8014c70:	af00      	add	r7, sp, #0
 8014c72:	6078      	str	r0, [r7, #4]
 8014c74:	6039      	str	r1, [r7, #0]
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	4618      	mov	r0, r3
 8014c7a:	f000 fa2c 	bl	80150d6 <_ZNSt5tupleIJP14TMC2208StepperSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8014c7e:	683c      	ldr	r4, [r7, #0]
 8014c80:	6878      	ldr	r0, [r7, #4]
 8014c82:	f7ff fe93 	bl	80149ac <_ZNSt15__uniq_ptr_implI14TMC2208StepperSt14default_deleteIS0_EE6_M_ptrEv>
 8014c86:	4603      	mov	r3, r0
 8014c88:	601c      	str	r4, [r3, #0]
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	4618      	mov	r0, r3
 8014c8e:	370c      	adds	r7, #12
 8014c90:	46bd      	mov	sp, r7
 8014c92:	bd90      	pop	{r4, r7, pc}

08014c94 <_ZSt3getILj0EJP14TMC2208StepperSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8014c94:	b580      	push	{r7, lr}
 8014c96:	b082      	sub	sp, #8
 8014c98:	af00      	add	r7, sp, #0
 8014c9a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	4618      	mov	r0, r3
 8014ca0:	f000 fa26 	bl	80150f0 <_ZSt12__get_helperILj0EP14TMC2208StepperJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8014ca4:	4603      	mov	r3, r0
 8014ca6:	4618      	mov	r0, r3
 8014ca8:	3708      	adds	r7, #8
 8014caa:	46bd      	mov	sp, r7
 8014cac:	bd80      	pop	{r7, pc}

08014cae <_ZNSt15__uniq_ptr_implI14TMC2208StepperSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8014cae:	b580      	push	{r7, lr}
 8014cb0:	b082      	sub	sp, #8
 8014cb2:	af00      	add	r7, sp, #0
 8014cb4:	6078      	str	r0, [r7, #4]
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	4618      	mov	r0, r3
 8014cba:	f000 fa25 	bl	8015108 <_ZSt3getILj1EJP14TMC2208StepperSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8014cbe:	4603      	mov	r3, r0
 8014cc0:	4618      	mov	r0, r3
 8014cc2:	3708      	adds	r7, #8
 8014cc4:	46bd      	mov	sp, r7
 8014cc6:	bd80      	pop	{r7, pc}

08014cc8 <_ZNKSt15__uniq_ptr_implI14TMC2208StepperSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 8014cc8:	b580      	push	{r7, lr}
 8014cca:	b082      	sub	sp, #8
 8014ccc:	af00      	add	r7, sp, #0
 8014cce:	6078      	str	r0, [r7, #4]
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	4618      	mov	r0, r3
 8014cd4:	f000 fa24 	bl	8015120 <_ZSt3getILj0EJP14TMC2208StepperSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8014cd8:	4603      	mov	r3, r0
 8014cda:	681b      	ldr	r3, [r3, #0]
 8014cdc:	4618      	mov	r0, r3
 8014cde:	3708      	adds	r7, #8
 8014ce0:	46bd      	mov	sp, r7
 8014ce2:	bd80      	pop	{r7, pc}

08014ce4 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ESA_PKNS1_15ResourceManagerE>:
  JsonSerializer(TWriter writer, const ResourceManager* resources)
 8014ce4:	b580      	push	{r7, lr}
 8014ce6:	b084      	sub	sp, #16
 8014ce8:	af00      	add	r7, sp, #0
 8014cea:	60f8      	str	r0, [r7, #12]
 8014cec:	60b9      	str	r1, [r7, #8]
 8014cee:	607a      	str	r2, [r7, #4]
      : formatter_(writer), resources_(resources) {}
 8014cf0:	68fb      	ldr	r3, [r7, #12]
 8014cf2:	68b9      	ldr	r1, [r7, #8]
 8014cf4:	4618      	mov	r0, r3
 8014cf6:	f000 fa20 	bl	801513a <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ESA_>
 8014cfa:	68fb      	ldr	r3, [r7, #12]
 8014cfc:	687a      	ldr	r2, [r7, #4]
 8014cfe:	609a      	str	r2, [r3, #8]
 8014d00:	68fb      	ldr	r3, [r7, #12]
 8014d02:	4618      	mov	r0, r3
 8014d04:	3710      	adds	r7, #16
 8014d06:	46bd      	mov	sp, r7
 8014d08:	bd80      	pop	{r7, pc}

08014d0a <_ZN11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeEPKS2_PKNS1_15ResourceManagerERSE_>:
  static typename TVisitor::result_type accept(const VariantData* var,
 8014d0a:	b580      	push	{r7, lr}
 8014d0c:	b084      	sub	sp, #16
 8014d0e:	af00      	add	r7, sp, #0
 8014d10:	60f8      	str	r0, [r7, #12]
 8014d12:	60b9      	str	r1, [r7, #8]
 8014d14:	607a      	str	r2, [r7, #4]
    if (var != 0)
 8014d16:	68fb      	ldr	r3, [r7, #12]
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d006      	beq.n	8014d2a <_ZN11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeEPKS2_PKNS1_15ResourceManagerERSE_+0x20>
      return var->accept(visit, resources);
 8014d1c:	68ba      	ldr	r2, [r7, #8]
 8014d1e:	6879      	ldr	r1, [r7, #4]
 8014d20:	68f8      	ldr	r0, [r7, #12]
 8014d22:	f000 fa1b 	bl	801515c <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE>
 8014d26:	4603      	mov	r3, r0
 8014d28:	e005      	b.n	8014d36 <_ZN11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeEPKS2_PKNS1_15ResourceManagerERSE_+0x2c>
      return visit.visit(nullptr);
 8014d2a:	2100      	movs	r1, #0
 8014d2c:	6878      	ldr	r0, [r7, #4]
 8014d2e:	f000 fb43 	bl	80153b8 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEDn>
 8014d32:	4603      	mov	r3, r0
 8014d34:	bf00      	nop
  }
 8014d36:	4618      	mov	r0, r3
 8014d38:	3710      	adds	r7, #16
 8014d3a:	46bd      	mov	sp, r7
 8014d3c:	bd80      	pop	{r7, pc}

08014d3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKSt12__weak_countILS1_0EE>:
    __shared_count<_Lp>::__shared_count(const __weak_count<_Lp>& __r)
 8014d3e:	b580      	push	{r7, lr}
 8014d40:	b082      	sub	sp, #8
 8014d42:	af00      	add	r7, sp, #0
 8014d44:	6078      	str	r0, [r7, #4]
 8014d46:	6039      	str	r1, [r7, #0]
    : _M_pi(__r._M_pi)
 8014d48:	683b      	ldr	r3, [r7, #0]
 8014d4a:	681a      	ldr	r2, [r3, #0]
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	601a      	str	r2, [r3, #0]
      if (_M_pi == nullptr || !_M_pi->_M_add_ref_lock_nothrow())
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	681b      	ldr	r3, [r3, #0]
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	d00a      	beq.n	8014d6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKSt12__weak_countILS1_0EE+0x30>
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	681b      	ldr	r3, [r3, #0]
 8014d5c:	4618      	mov	r0, r3
 8014d5e:	f7fe fdf1 	bl	8013944 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE23_M_add_ref_lock_nothrowEv>
 8014d62:	4603      	mov	r3, r0
 8014d64:	f083 0301 	eor.w	r3, r3, #1
 8014d68:	b2db      	uxtb	r3, r3
 8014d6a:	2b00      	cmp	r3, #0
 8014d6c:	d001      	beq.n	8014d72 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKSt12__weak_countILS1_0EE+0x34>
 8014d6e:	2301      	movs	r3, #1
 8014d70:	e000      	b.n	8014d74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKSt12__weak_countILS1_0EE+0x36>
 8014d72:	2300      	movs	r3, #0
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	d001      	beq.n	8014d7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKSt12__weak_countILS1_0EE+0x3e>
	__throw_bad_weak_ptr();
 8014d78:	f7fe fde0 	bl	801393c <_ZSt20__throw_bad_weak_ptrv>
    }
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	4618      	mov	r0, r3
 8014d80:	3708      	adds	r7, #8
 8014d82:	46bd      	mov	sp, r7
 8014d84:	bd80      	pop	{r7, pc}
	...

08014d88 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE>:
  T asFloat(const ResourceManager* resources) const {
 8014d88:	b580      	push	{r7, lr}
 8014d8a:	b084      	sub	sp, #16
 8014d8c:	af00      	add	r7, sp, #0
 8014d8e:	6078      	str	r0, [r7, #4]
 8014d90:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 8014d92:	6839      	ldr	r1, [r7, #0]
 8014d94:	6878      	ldr	r0, [r7, #4]
 8014d96:	f7f0 fa3d 	bl	8005214 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 8014d9a:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	791b      	ldrb	r3, [r3, #4]
 8014da0:	3b04      	subs	r3, #4
 8014da2:	2b1a      	cmp	r3, #26
 8014da4:	d874      	bhi.n	8014e90 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x108>
 8014da6:	a201      	add	r2, pc, #4	@ (adr r2, 8014dac <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x24>)
 8014da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014dac:	08014e6b 	.word	0x08014e6b
 8014db0:	08014e6b 	.word	0x08014e6b
 8014db4:	08014e19 	.word	0x08014e19
 8014db8:	08014e91 	.word	0x08014e91
 8014dbc:	08014e91 	.word	0x08014e91
 8014dc0:	08014e91 	.word	0x08014e91
 8014dc4:	08014e27 	.word	0x08014e27
 8014dc8:	08014e91 	.word	0x08014e91
 8014dcc:	08014e35 	.word	0x08014e35
 8014dd0:	08014e91 	.word	0x08014e91
 8014dd4:	08014e7d 	.word	0x08014e7d
 8014dd8:	08014e91 	.word	0x08014e91
 8014ddc:	08014e91 	.word	0x08014e91
 8014de0:	08014e91 	.word	0x08014e91
 8014de4:	08014e91 	.word	0x08014e91
 8014de8:	08014e91 	.word	0x08014e91
 8014dec:	08014e91 	.word	0x08014e91
 8014df0:	08014e91 	.word	0x08014e91
 8014df4:	08014e91 	.word	0x08014e91
 8014df8:	08014e91 	.word	0x08014e91
 8014dfc:	08014e91 	.word	0x08014e91
 8014e00:	08014e91 	.word	0x08014e91
 8014e04:	08014e43 	.word	0x08014e43
 8014e08:	08014e91 	.word	0x08014e91
 8014e0c:	08014e57 	.word	0x08014e57
 8014e10:	08014e91 	.word	0x08014e91
 8014e14:	08014e85 	.word	0x08014e85
        return static_cast<T>(content_.asBoolean);
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	781b      	ldrb	r3, [r3, #0]
 8014e1c:	ee07 3a90 	vmov	s15, r3
 8014e20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014e24:	e036      	b.n	8014e94 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x10c>
        return static_cast<T>(content_.asUint32);
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	681b      	ldr	r3, [r3, #0]
 8014e2a:	ee07 3a90 	vmov	s15, r3
 8014e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014e32:	e02f      	b.n	8014e94 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x10c>
        return static_cast<T>(content_.asInt32);
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	681b      	ldr	r3, [r3, #0]
 8014e38:	ee07 3a90 	vmov	s15, r3
 8014e3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014e40:	e028      	b.n	8014e94 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x10c>
        return static_cast<T>(extension->asUint64);
 8014e42:	68fb      	ldr	r3, [r7, #12]
 8014e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e48:	4610      	mov	r0, r2
 8014e4a:	4619      	mov	r1, r3
 8014e4c:	f7eb fd34 	bl	80008b8 <__aeabi_ul2f>
 8014e50:	ee07 0a90 	vmov	s15, r0
 8014e54:	e01e      	b.n	8014e94 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x10c>
        return static_cast<T>(extension->asInt64);
 8014e56:	68fb      	ldr	r3, [r7, #12]
 8014e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e5c:	4610      	mov	r0, r2
 8014e5e:	4619      	mov	r1, r3
 8014e60:	f7eb fd32 	bl	80008c8 <__aeabi_l2f>
 8014e64:	ee07 0a90 	vmov	s15, r0
 8014e68:	e014      	b.n	8014e94 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x10c>
        return parseNumber<T>(content_.asOwnedString->data);
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	681b      	ldr	r3, [r3, #0]
 8014e6e:	3308      	adds	r3, #8
 8014e70:	4618      	mov	r0, r3
 8014e72:	f000 fab5 	bl	80153e0 <_ZN11ArduinoJson8V730HB226detail11parseNumberIfEET_PKc>
 8014e76:	eef0 7a40 	vmov.f32	s15, s0
 8014e7a:	e00b      	b.n	8014e94 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x10c>
        return static_cast<T>(content_.asFloat);
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	edd3 7a00 	vldr	s15, [r3]
 8014e82:	e007      	b.n	8014e94 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x10c>
        return static_cast<T>(extension->asDouble);
 8014e84:	68fb      	ldr	r3, [r7, #12]
 8014e86:	ed93 7b00 	vldr	d7, [r3]
 8014e8a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8014e8e:	e001      	b.n	8014e94 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x10c>
        return 0;
 8014e90:	eddf 7a03 	vldr	s15, [pc, #12]	@ 8014ea0 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x118>
  }
 8014e94:	eeb0 0a67 	vmov.f32	s0, s15
 8014e98:	3710      	adds	r7, #16
 8014e9a:	46bd      	mov	sp, r7
 8014e9c:	bd80      	pop	{r7, pc}
 8014e9e:	bf00      	nop
 8014ea0:	00000000 	.word	0x00000000

08014ea4 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE>:
  T asIntegral(const ResourceManager* resources) const {
 8014ea4:	b580      	push	{r7, lr}
 8014ea6:	b084      	sub	sp, #16
 8014ea8:	af00      	add	r7, sp, #0
 8014eaa:	6078      	str	r0, [r7, #4]
 8014eac:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 8014eae:	6839      	ldr	r1, [r7, #0]
 8014eb0:	6878      	ldr	r0, [r7, #4]
 8014eb2:	f7f0 f9af 	bl	8005214 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 8014eb6:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	791b      	ldrb	r3, [r3, #4]
 8014ebc:	3b04      	subs	r3, #4
 8014ebe:	2b1a      	cmp	r3, #26
 8014ec0:	d87c      	bhi.n	8014fbc <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x118>
 8014ec2:	a201      	add	r2, pc, #4	@ (adr r2, 8014ec8 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x24>)
 8014ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ec8:	08014f7b 	.word	0x08014f7b
 8014ecc:	08014f89 	.word	0x08014f89
 8014ed0:	08014f35 	.word	0x08014f35
 8014ed4:	08014fbd 	.word	0x08014fbd
 8014ed8:	08014fbd 	.word	0x08014fbd
 8014edc:	08014fbd 	.word	0x08014fbd
 8014ee0:	08014f3b 	.word	0x08014f3b
 8014ee4:	08014fbd 	.word	0x08014fbd
 8014ee8:	08014f49 	.word	0x08014f49
 8014eec:	08014fbd 	.word	0x08014fbd
 8014ef0:	08014f99 	.word	0x08014f99
 8014ef4:	08014fbd 	.word	0x08014fbd
 8014ef8:	08014fbd 	.word	0x08014fbd
 8014efc:	08014fbd 	.word	0x08014fbd
 8014f00:	08014fbd 	.word	0x08014fbd
 8014f04:	08014fbd 	.word	0x08014fbd
 8014f08:	08014fbd 	.word	0x08014fbd
 8014f0c:	08014fbd 	.word	0x08014fbd
 8014f10:	08014fbd 	.word	0x08014fbd
 8014f14:	08014fbd 	.word	0x08014fbd
 8014f18:	08014fbd 	.word	0x08014fbd
 8014f1c:	08014fbd 	.word	0x08014fbd
 8014f20:	08014f57 	.word	0x08014f57
 8014f24:	08014fbd 	.word	0x08014fbd
 8014f28:	08014f69 	.word	0x08014f69
 8014f2c:	08014fbd 	.word	0x08014fbd
 8014f30:	08014fab 	.word	0x08014fab
        return content_.asBoolean;
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	781b      	ldrb	r3, [r3, #0]
 8014f38:	e041      	b.n	8014fbe <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asUint32);
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	681b      	ldr	r3, [r3, #0]
 8014f3e:	4618      	mov	r0, r3
 8014f40:	f000 fa64 	bl	801540c <_ZN11ArduinoJson8V730HB226detail13convertNumberItmEET_T0_>
 8014f44:	4603      	mov	r3, r0
 8014f46:	e03a      	b.n	8014fbe <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asInt32);
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	681b      	ldr	r3, [r3, #0]
 8014f4c:	4618      	mov	r0, r3
 8014f4e:	f000 fa6f 	bl	8015430 <_ZN11ArduinoJson8V730HB226detail13convertNumberItlEET_T0_>
 8014f52:	4603      	mov	r3, r0
 8014f54:	e033      	b.n	8014fbe <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asUint64);
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f5c:	4610      	mov	r0, r2
 8014f5e:	4619      	mov	r1, r3
 8014f60:	f000 fa78 	bl	8015454 <_ZN11ArduinoJson8V730HB226detail13convertNumberItyEET_T0_>
 8014f64:	4603      	mov	r3, r0
 8014f66:	e02a      	b.n	8014fbe <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asInt64);
 8014f68:	68fb      	ldr	r3, [r7, #12]
 8014f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f6e:	4610      	mov	r0, r2
 8014f70:	4619      	mov	r1, r3
 8014f72:	f000 fa82 	bl	801547a <_ZN11ArduinoJson8V730HB226detail13convertNumberItxEET_T0_>
 8014f76:	4603      	mov	r3, r0
 8014f78:	e021      	b.n	8014fbe <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asLinkedString);
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	681b      	ldr	r3, [r3, #0]
 8014f7e:	4618      	mov	r0, r3
 8014f80:	f000 fa8e 	bl	80154a0 <_ZN11ArduinoJson8V730HB226detail11parseNumberItEET_PKc>
 8014f84:	4603      	mov	r3, r0
 8014f86:	e01a      	b.n	8014fbe <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asOwnedString->data);
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	681b      	ldr	r3, [r3, #0]
 8014f8c:	3308      	adds	r3, #8
 8014f8e:	4618      	mov	r0, r3
 8014f90:	f000 fa86 	bl	80154a0 <_ZN11ArduinoJson8V730HB226detail11parseNumberItEET_PKc>
 8014f94:	4603      	mov	r3, r0
 8014f96:	e012      	b.n	8014fbe <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asFloat);
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	edd3 7a00 	vldr	s15, [r3]
 8014f9e:	eeb0 0a67 	vmov.f32	s0, s15
 8014fa2:	f000 fa91 	bl	80154c8 <_ZN11ArduinoJson8V730HB226detail13convertNumberItfEET_T0_>
 8014fa6:	4603      	mov	r3, r0
 8014fa8:	e009      	b.n	8014fbe <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asDouble);
 8014faa:	68fb      	ldr	r3, [r7, #12]
 8014fac:	ed93 7b00 	vldr	d7, [r3]
 8014fb0:	eeb0 0b47 	vmov.f64	d0, d7
 8014fb4:	f000 faa1 	bl	80154fa <_ZN11ArduinoJson8V730HB226detail13convertNumberItdEET_T0_>
 8014fb8:	4603      	mov	r3, r0
 8014fba:	e000      	b.n	8014fbe <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x11a>
        return 0;
 8014fbc:	2300      	movs	r3, #0
  }
 8014fbe:	4618      	mov	r0, r3
 8014fc0:	3710      	adds	r7, #16
 8014fc2:	46bd      	mov	sp, r7
 8014fc4:	bd80      	pop	{r7, pc}
 8014fc6:	bf00      	nop

08014fc8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7TMC2208SaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtSD_RbRP6RemoraEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>:
	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
 8014fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014fcc:	b090      	sub	sp, #64	@ 0x40
 8014fce:	af04      	add	r7, sp, #16
 8014fd0:	6178      	str	r0, [r7, #20]
 8014fd2:	6139      	str	r1, [r7, #16]
 8014fd4:	60fa      	str	r2, [r7, #12]
 8014fd6:	60bb      	str	r3, [r7, #8]
	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 8014fd8:	68fa      	ldr	r2, [r7, #12]
 8014fda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014fde:	4611      	mov	r1, r2
 8014fe0:	4618      	mov	r0, r3
 8014fe2:	f000 faa3 	bl	801552c <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	  auto __guard = std::__allocate_guarded(__a2);
 8014fe6:	f107 031c 	add.w	r3, r7, #28
 8014fea:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8014fee:	4611      	mov	r1, r2
 8014ff0:	4618      	mov	r0, r3
 8014ff2:	f000 fab4 	bl	801555e <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>
	  _Sp_cp_type* __mem = __guard.get();
 8014ff6:	f107 031c 	add.w	r3, r7, #28
 8014ffa:	4618      	mov	r0, r3
 8014ffc:	f000 fad7 	bl	80155ae <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>
 8015000:	62f8      	str	r0, [r7, #44]	@ 0x2c
	  auto __pi = ::new (__mem)
 8015002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015004:	4619      	mov	r1, r3
 8015006:	2058      	movs	r0, #88	@ 0x58
 8015008:	f7f4 fb7a 	bl	8009700 <_ZnwjPv>
 801500c:	4604      	mov	r4, r0
 801500e:	68b8      	ldr	r0, [r7, #8]
 8015010:	f7ff fc26 	bl	8014860 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8015014:	4680      	mov	r8, r0
 8015016:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8015018:	f7ff fc2d 	bl	8014876 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 801501c:	4681      	mov	r9, r0
 801501e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8015020:	f7ff fc34 	bl	801488c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8015024:	4605      	mov	r5, r0
 8015026:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8015028:	f7ff fc30 	bl	801488c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801502c:	4606      	mov	r6, r0
 801502e:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8015030:	f7fb f935 	bl	801029e <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8015034:	6078      	str	r0, [r7, #4]
 8015036:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8015038:	f7ff fc33 	bl	80148a2 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 801503c:	4603      	mov	r3, r0
 801503e:	9303      	str	r3, [sp, #12]
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	9302      	str	r3, [sp, #8]
 8015044:	9601      	str	r6, [sp, #4]
 8015046:	9500      	str	r5, [sp, #0]
 8015048:	464b      	mov	r3, r9
 801504a:	4642      	mov	r2, r8
 801504c:	4651      	mov	r1, sl
 801504e:	4620      	mov	r0, r4
 8015050:	f000 fabc 	bl	80155cc <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtSD_RbRP6RemoraEEES1_DpOT_>
 8015054:	62bc      	str	r4, [r7, #40]	@ 0x28
	  __guard = nullptr;
 8015056:	f107 031c 	add.w	r3, r7, #28
 801505a:	2100      	movs	r1, #0
 801505c:	4618      	mov	r0, r3
 801505e:	f000 faf9 	bl	8015654 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>
	  _M_pi = __pi;
 8015062:	697b      	ldr	r3, [r7, #20]
 8015064:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015066:	601a      	str	r2, [r3, #0]
	  __p = __pi->_M_ptr();
 8015068:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801506a:	f000 fb02 	bl	8015672 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 801506e:	4602      	mov	r2, r0
 8015070:	693b      	ldr	r3, [r7, #16]
 8015072:	601a      	str	r2, [r3, #0]
	}
 8015074:	f107 031c 	add.w	r3, r7, #28
 8015078:	4618      	mov	r0, r3
 801507a:	f000 fa83 	bl	8015584 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 801507e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8015082:	4618      	mov	r0, r3
 8015084:	f000 fa5f 	bl	8015546 <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8015088:	697b      	ldr	r3, [r7, #20]
 801508a:	4618      	mov	r0, r3
 801508c:	3730      	adds	r7, #48	@ 0x30
 801508e:	46bd      	mov	sp, r7
 8015090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08015094 <_ZNSt12__shared_ptrI7TMC2208LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp* __p) noexcept
 8015094:	b580      	push	{r7, lr}
 8015096:	b084      	sub	sp, #16
 8015098:	af00      	add	r7, sp, #0
 801509a:	6078      	str	r0, [r7, #4]
 801509c:	6039      	str	r1, [r7, #0]
	  if (auto __base = __enable_shared_from_this_base(_M_refcount, __p))
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	1d1a      	adds	r2, r3, #4
 80150a2:	683b      	ldr	r3, [r7, #0]
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	d002      	beq.n	80150ae <_ZNSt12__shared_ptrI7TMC2208LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_+0x1a>
 80150a8:	683b      	ldr	r3, [r7, #0]
 80150aa:	3318      	adds	r3, #24
 80150ac:	e000      	b.n	80150b0 <_ZNSt12__shared_ptrI7TMC2208LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_+0x1c>
 80150ae:	2300      	movs	r3, #0
 80150b0:	4619      	mov	r1, r3
 80150b2:	4610      	mov	r0, r2
 80150b4:	f000 faeb 	bl	801568e <_ZSt30__enable_shared_from_this_baseRKSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEPKSt23enable_shared_from_thisI3TMCE>
 80150b8:	60f8      	str	r0, [r7, #12]
 80150ba:	68fb      	ldr	r3, [r7, #12]
 80150bc:	2b00      	cmp	r3, #0
 80150be:	d006      	beq.n	80150ce <_ZNSt12__shared_ptrI7TMC2208LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_+0x3a>
	    __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	3304      	adds	r3, #4
 80150c4:	461a      	mov	r2, r3
 80150c6:	6839      	ldr	r1, [r7, #0]
 80150c8:	68f8      	ldr	r0, [r7, #12]
 80150ca:	f000 faec 	bl	80156a6 <_ZNKSt23enable_shared_from_thisI3TMCE14_M_weak_assignI7TMC2208EEvPT_RKSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE>
	}
 80150ce:	bf00      	nop
 80150d0:	3710      	adds	r7, #16
 80150d2:	46bd      	mov	sp, r7
 80150d4:	bd80      	pop	{r7, pc}

080150d6 <_ZNSt5tupleIJP14TMC2208StepperSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 80150d6:	b580      	push	{r7, lr}
 80150d8:	b082      	sub	sp, #8
 80150da:	af00      	add	r7, sp, #0
 80150dc:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	4618      	mov	r0, r3
 80150e2:	f000 faf0 	bl	80156c6 <_ZNSt11_Tuple_implILj0EJP14TMC2208StepperSt14default_deleteIS0_EEEC1Ev>
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	4618      	mov	r0, r3
 80150ea:	3708      	adds	r7, #8
 80150ec:	46bd      	mov	sp, r7
 80150ee:	bd80      	pop	{r7, pc}

080150f0 <_ZSt12__get_helperILj0EP14TMC2208StepperJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80150f0:	b580      	push	{r7, lr}
 80150f2:	b082      	sub	sp, #8
 80150f4:	af00      	add	r7, sp, #0
 80150f6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80150f8:	6878      	ldr	r0, [r7, #4]
 80150fa:	f000 faf4 	bl	80156e6 <_ZNSt11_Tuple_implILj0EJP14TMC2208StepperSt14default_deleteIS0_EEE7_M_headERS4_>
 80150fe:	4603      	mov	r3, r0
 8015100:	4618      	mov	r0, r3
 8015102:	3708      	adds	r7, #8
 8015104:	46bd      	mov	sp, r7
 8015106:	bd80      	pop	{r7, pc}

08015108 <_ZSt3getILj1EJP14TMC2208StepperSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8015108:	b580      	push	{r7, lr}
 801510a:	b082      	sub	sp, #8
 801510c:	af00      	add	r7, sp, #0
 801510e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8015110:	6878      	ldr	r0, [r7, #4]
 8015112:	f000 faf5 	bl	8015700 <_ZSt12__get_helperILj1ESt14default_deleteI14TMC2208StepperEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8015116:	4603      	mov	r3, r0
 8015118:	4618      	mov	r0, r3
 801511a:	3708      	adds	r7, #8
 801511c:	46bd      	mov	sp, r7
 801511e:	bd80      	pop	{r7, pc}

08015120 <_ZSt3getILj0EJP14TMC2208StepperSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 8015120:	b580      	push	{r7, lr}
 8015122:	b082      	sub	sp, #8
 8015124:	af00      	add	r7, sp, #0
 8015126:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	4618      	mov	r0, r3
 801512c:	f000 faf4 	bl	8015718 <_ZSt12__get_helperILj0EP14TMC2208StepperJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8015130:	4603      	mov	r3, r0
 8015132:	4618      	mov	r0, r3
 8015134:	3708      	adds	r7, #8
 8015136:	46bd      	mov	sp, r7
 8015138:	bd80      	pop	{r7, pc}

0801513a <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ESA_>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TWriter>
class TextFormatter {
 public:
  explicit TextFormatter(TWriter writer) : writer_(writer) {}
 801513a:	b580      	push	{r7, lr}
 801513c:	b082      	sub	sp, #8
 801513e:	af00      	add	r7, sp, #0
 8015140:	6078      	str	r0, [r7, #4]
 8015142:	6039      	str	r1, [r7, #0]
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	463a      	mov	r2, r7
 8015148:	4611      	mov	r1, r2
 801514a:	4618      	mov	r0, r3
 801514c:	f000 faf0 	bl	8015730 <_ZN11ArduinoJson8V730HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ERSA_>
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	4618      	mov	r0, r3
 8015154:	3708      	adds	r7, #8
 8015156:	46bd      	mov	sp, r7
 8015158:	bd80      	pop	{r7, pc}
	...

0801515c <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE>:
  typename TVisitor::result_type accept(
 801515c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8015160:	b08e      	sub	sp, #56	@ 0x38
 8015162:	af00      	add	r7, sp, #0
 8015164:	60f8      	str	r0, [r7, #12]
 8015166:	60b9      	str	r1, [r7, #8]
 8015168:	607a      	str	r2, [r7, #4]
    auto extension = getExtension(resources);
 801516a:	6879      	ldr	r1, [r7, #4]
 801516c:	68f8      	ldr	r0, [r7, #12]
 801516e:	f7f0 f851 	bl	8005214 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 8015172:	6378      	str	r0, [r7, #52]	@ 0x34
    switch (type_) {
 8015174:	68fb      	ldr	r3, [r7, #12]
 8015176:	791b      	ldrb	r3, [r3, #4]
 8015178:	3b03      	subs	r3, #3
 801517a:	2b3d      	cmp	r3, #61	@ 0x3d
 801517c:	f200 8111 	bhi.w	80153a2 <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x246>
 8015180:	a201      	add	r2, pc, #4	@ (adr r2, 8015188 <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x2c>)
 8015182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015186:	bf00      	nop
 8015188:	0801530d 	.word	0x0801530d
 801518c:	080152c5 	.word	0x080152c5
 8015190:	080152e5 	.word	0x080152e5
 8015194:	08015389 	.word	0x08015389
 8015198:	080153a3 	.word	0x080153a3
 801519c:	080153a3 	.word	0x080153a3
 80151a0:	080153a3 	.word	0x080153a3
 80151a4:	08015351 	.word	0x08015351
 80151a8:	080153a3 	.word	0x080153a3
 80151ac:	08015339 	.word	0x08015339
 80151b0:	080153a3 	.word	0x080153a3
 80151b4:	08015281 	.word	0x08015281
 80151b8:	080153a3 	.word	0x080153a3
 80151bc:	080153a3 	.word	0x080153a3
 80151c0:	080153a3 	.word	0x080153a3
 80151c4:	080153a3 	.word	0x080153a3
 80151c8:	080153a3 	.word	0x080153a3
 80151cc:	080153a3 	.word	0x080153a3
 80151d0:	080153a3 	.word	0x080153a3
 80151d4:	080153a3 	.word	0x080153a3
 80151d8:	080153a3 	.word	0x080153a3
 80151dc:	080153a3 	.word	0x080153a3
 80151e0:	080153a3 	.word	0x080153a3
 80151e4:	08015379 	.word	0x08015379
 80151e8:	080153a3 	.word	0x080153a3
 80151ec:	08015369 	.word	0x08015369
 80151f0:	080153a3 	.word	0x080153a3
 80151f4:	08015295 	.word	0x08015295
 80151f8:	080153a3 	.word	0x080153a3
 80151fc:	080152b7 	.word	0x080152b7
 8015200:	080153a3 	.word	0x080153a3
 8015204:	080153a3 	.word	0x080153a3
 8015208:	080153a3 	.word	0x080153a3
 801520c:	080153a3 	.word	0x080153a3
 8015210:	080153a3 	.word	0x080153a3
 8015214:	080153a3 	.word	0x080153a3
 8015218:	080153a3 	.word	0x080153a3
 801521c:	080153a3 	.word	0x080153a3
 8015220:	080153a3 	.word	0x080153a3
 8015224:	080153a3 	.word	0x080153a3
 8015228:	080153a3 	.word	0x080153a3
 801522c:	080153a3 	.word	0x080153a3
 8015230:	080153a3 	.word	0x080153a3
 8015234:	080153a3 	.word	0x080153a3
 8015238:	080153a3 	.word	0x080153a3
 801523c:	080153a3 	.word	0x080153a3
 8015240:	080153a3 	.word	0x080153a3
 8015244:	080153a3 	.word	0x080153a3
 8015248:	080153a3 	.word	0x080153a3
 801524c:	080153a3 	.word	0x080153a3
 8015250:	080153a3 	.word	0x080153a3
 8015254:	080153a3 	.word	0x080153a3
 8015258:	080153a3 	.word	0x080153a3
 801525c:	080153a3 	.word	0x080153a3
 8015260:	080153a3 	.word	0x080153a3
 8015264:	080153a3 	.word	0x080153a3
 8015268:	080153a3 	.word	0x080153a3
 801526c:	080153a3 	.word	0x080153a3
 8015270:	080153a3 	.word	0x080153a3
 8015274:	080153a3 	.word	0x080153a3
 8015278:	080153a3 	.word	0x080153a3
 801527c:	080152a9 	.word	0x080152a9
        return visit.visit(content_.asFloat);
 8015280:	68fb      	ldr	r3, [r7, #12]
 8015282:	edd3 7a00 	vldr	s15, [r3]
 8015286:	eeb0 0a67 	vmov.f32	s0, s15
 801528a:	68b8      	ldr	r0, [r7, #8]
 801528c:	f000 fa63 	bl	8015756 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitIfEENS1_9enable_ifIXsrNS1_17is_floating_pointIT_EE5valueEjE4typeESF_>
 8015290:	4603      	mov	r3, r0
 8015292:	e08c      	b.n	80153ae <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(extension->asDouble);
 8015294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015296:	ed93 7b00 	vldr	d7, [r3]
 801529a:	eeb0 0b47 	vmov.f64	d0, d7
 801529e:	68b8      	ldr	r0, [r7, #8]
 80152a0:	f000 fa6d 	bl	801577e <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitIdEENS1_9enable_ifIXsrNS1_17is_floating_pointIT_EE5valueEjE4typeESF_>
 80152a4:	4603      	mov	r3, r0
 80152a6:	e082      	b.n	80153ae <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(content_.asArray);
 80152a8:	68fb      	ldr	r3, [r7, #12]
 80152aa:	4619      	mov	r1, r3
 80152ac:	68b8      	ldr	r0, [r7, #8]
 80152ae:	f000 fa7a 	bl	80157a6 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_9ArrayDataE>
 80152b2:	4603      	mov	r3, r0
 80152b4:	e07b      	b.n	80153ae <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(content_.asObject);
 80152b6:	68fb      	ldr	r3, [r7, #12]
 80152b8:	4619      	mov	r1, r3
 80152ba:	68b8      	ldr	r0, [r7, #8]
 80152bc:	f000 fab1 	bl	8015822 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_10ObjectDataE>
 80152c0:	4603      	mov	r3, r0
 80152c2:	e074      	b.n	80153ae <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(JsonString(content_.asLinkedString, true));
 80152c4:	68fb      	ldr	r3, [r7, #12]
 80152c6:	6819      	ldr	r1, [r3, #0]
 80152c8:	f107 0314 	add.w	r3, r7, #20
 80152cc:	2201      	movs	r2, #1
 80152ce:	4618      	mov	r0, r3
 80152d0:	f7ee fefd 	bl	80040ce <_ZN11ArduinoJson8V730HB2210JsonStringC1EPKcb>
 80152d4:	f107 0314 	add.w	r3, r7, #20
 80152d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80152da:	68b8      	ldr	r0, [r7, #8]
 80152dc:	f000 faeb 	bl	80158b6 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitENS0_10JsonStringE>
 80152e0:	4603      	mov	r3, r0
 80152e2:	e064      	b.n	80153ae <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(JsonString(content_.asOwnedString->data,
 80152e4:	68fb      	ldr	r3, [r7, #12]
 80152e6:	681b      	ldr	r3, [r3, #0]
 80152e8:	f103 0108 	add.w	r1, r3, #8
                                      content_.asOwnedString->length));
 80152ec:	68fb      	ldr	r3, [r7, #12]
 80152ee:	681b      	ldr	r3, [r3, #0]
        return visit.visit(JsonString(content_.asOwnedString->data,
 80152f0:	88da      	ldrh	r2, [r3, #6]
 80152f2:	f107 0020 	add.w	r0, r7, #32
 80152f6:	2300      	movs	r3, #0
 80152f8:	f7f0 fee4 	bl	80060c4 <_ZN11ArduinoJson8V730HB2210JsonStringC1ItLi0EEEPKcT_b>
 80152fc:	f107 0320 	add.w	r3, r7, #32
 8015300:	cb0e      	ldmia	r3, {r1, r2, r3}
 8015302:	68b8      	ldr	r0, [r7, #8]
 8015304:	f000 fad7 	bl	80158b6 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitENS0_10JsonStringE>
 8015308:	4603      	mov	r3, r0
                                      content_.asOwnedString->length));
 801530a:	e050      	b.n	80153ae <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(RawString(content_.asOwnedString->data,
 801530c:	68fb      	ldr	r3, [r7, #12]
 801530e:	681b      	ldr	r3, [r3, #0]
 8015310:	f103 0108 	add.w	r1, r3, #8
                                     content_.asOwnedString->length));
 8015314:	68fb      	ldr	r3, [r7, #12]
 8015316:	681b      	ldr	r3, [r3, #0]
 8015318:	88db      	ldrh	r3, [r3, #6]
        return visit.visit(RawString(content_.asOwnedString->data,
 801531a:	461a      	mov	r2, r3
 801531c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8015320:	4618      	mov	r0, r3
 8015322:	f7ff fbd5 	bl	8014ad0 <_ZN11ArduinoJson8V730HB2215SerializedValueIPKcEC1ES3_j>
 8015326:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801532a:	e893 0006 	ldmia.w	r3, {r1, r2}
 801532e:	68b8      	ldr	r0, [r7, #8]
 8015330:	f000 fae0 	bl	80158f4 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitENS0_15SerializedValueIPKcEE>
 8015334:	4603      	mov	r3, r0
                                     content_.asOwnedString->length));
 8015336:	e03a      	b.n	80153ae <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(static_cast<JsonInteger>(content_.asInt32));
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	681b      	ldr	r3, [r3, #0]
 801533c:	17da      	asrs	r2, r3, #31
 801533e:	4698      	mov	r8, r3
 8015340:	4691      	mov	r9, r2
 8015342:	4642      	mov	r2, r8
 8015344:	464b      	mov	r3, r9
 8015346:	68b8      	ldr	r0, [r7, #8]
 8015348:	f000 faf3 	bl	8015932 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEx>
 801534c:	4603      	mov	r3, r0
 801534e:	e02e      	b.n	80153ae <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(static_cast<JsonUInt>(content_.asUint32));
 8015350:	68fb      	ldr	r3, [r7, #12]
 8015352:	681b      	ldr	r3, [r3, #0]
 8015354:	2200      	movs	r2, #0
 8015356:	461c      	mov	r4, r3
 8015358:	4615      	mov	r5, r2
 801535a:	4622      	mov	r2, r4
 801535c:	462b      	mov	r3, r5
 801535e:	68b8      	ldr	r0, [r7, #8]
 8015360:	f000 fafb 	bl	801595a <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEy>
 8015364:	4603      	mov	r3, r0
 8015366:	e022      	b.n	80153ae <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(extension->asInt64);
 8015368:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801536a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801536e:	68b8      	ldr	r0, [r7, #8]
 8015370:	f000 fadf 	bl	8015932 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEx>
 8015374:	4603      	mov	r3, r0
 8015376:	e01a      	b.n	80153ae <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(extension->asUint64);
 8015378:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801537a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801537e:	68b8      	ldr	r0, [r7, #8]
 8015380:	f000 faeb 	bl	801595a <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEy>
 8015384:	4603      	mov	r3, r0
 8015386:	e012      	b.n	80153ae <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(content_.asBoolean != 0);
 8015388:	68fb      	ldr	r3, [r7, #12]
 801538a:	781b      	ldrb	r3, [r3, #0]
 801538c:	2b00      	cmp	r3, #0
 801538e:	bf14      	ite	ne
 8015390:	2301      	movne	r3, #1
 8015392:	2300      	moveq	r3, #0
 8015394:	b2db      	uxtb	r3, r3
 8015396:	4619      	mov	r1, r3
 8015398:	68b8      	ldr	r0, [r7, #8]
 801539a:	f000 faf2 	bl	8015982 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEb>
 801539e:	4603      	mov	r3, r0
 80153a0:	e005      	b.n	80153ae <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(nullptr);
 80153a2:	2100      	movs	r1, #0
 80153a4:	68b8      	ldr	r0, [r7, #8]
 80153a6:	f000 f807 	bl	80153b8 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEDn>
 80153aa:	4603      	mov	r3, r0
 80153ac:	bf00      	nop
  }
 80153ae:	4618      	mov	r0, r3
 80153b0:	3738      	adds	r7, #56	@ 0x38
 80153b2:	46bd      	mov	sp, r7
 80153b4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080153b8 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEDn>:
  size_t visit(nullptr_t) {
 80153b8:	b580      	push	{r7, lr}
 80153ba:	b082      	sub	sp, #8
 80153bc:	af00      	add	r7, sp, #0
 80153be:	6078      	str	r0, [r7, #4]
 80153c0:	6039      	str	r1, [r7, #0]
    formatter_.writeRaw("null");
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	4905      	ldr	r1, [pc, #20]	@ (80153dc <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEDn+0x24>)
 80153c6:	4618      	mov	r0, r3
 80153c8:	f000 faef 	bl	80159aa <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
    return bytesWritten();
 80153cc:	6878      	ldr	r0, [r7, #4]
 80153ce:	f000 faff 	bl	80159d0 <_ZNK11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 80153d2:	4603      	mov	r3, r0
  }
 80153d4:	4618      	mov	r0, r3
 80153d6:	3708      	adds	r7, #8
 80153d8:	46bd      	mov	sp, r7
 80153da:	bd80      	pop	{r7, pc}
 80153dc:	08028534 	.word	0x08028534

080153e0 <_ZN11ArduinoJson8V730HB226detail11parseNumberIfEET_PKc>:
inline T parseNumber(const char* s) {
 80153e0:	b580      	push	{r7, lr}
 80153e2:	b086      	sub	sp, #24
 80153e4:	af00      	add	r7, sp, #0
 80153e6:	6078      	str	r0, [r7, #4]
  return parseNumber(s).convertTo<T>();
 80153e8:	f107 0308 	add.w	r3, r7, #8
 80153ec:	6879      	ldr	r1, [r7, #4]
 80153ee:	4618      	mov	r0, r3
 80153f0:	f7f0 f974 	bl	80056dc <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>
 80153f4:	f107 0308 	add.w	r3, r7, #8
 80153f8:	4618      	mov	r0, r3
 80153fa:	f000 faf7 	bl	80159ec <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIfEET_v>
 80153fe:	eef0 7a40 	vmov.f32	s15, s0
}
 8015402:	eeb0 0a67 	vmov.f32	s0, s15
 8015406:	3718      	adds	r7, #24
 8015408:	46bd      	mov	sp, r7
 801540a:	bd80      	pop	{r7, pc}

0801540c <_ZN11ArduinoJson8V730HB226detail13convertNumberItmEET_T0_>:
TOut convertNumber(TIn value) {
 801540c:	b580      	push	{r7, lr}
 801540e:	b082      	sub	sp, #8
 8015410:	af00      	add	r7, sp, #0
 8015412:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8015414:	6878      	ldr	r0, [r7, #4]
 8015416:	f000 fb2f 	bl	8015a78 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 801541a:	4603      	mov	r3, r0
 801541c:	2b00      	cmp	r3, #0
 801541e:	d002      	beq.n	8015426 <_ZN11ArduinoJson8V730HB226detail13convertNumberItmEET_T0_+0x1a>
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	b29b      	uxth	r3, r3
 8015424:	e000      	b.n	8015428 <_ZN11ArduinoJson8V730HB226detail13convertNumberItmEET_T0_+0x1c>
 8015426:	2300      	movs	r3, #0
}
 8015428:	4618      	mov	r0, r3
 801542a:	3708      	adds	r7, #8
 801542c:	46bd      	mov	sp, r7
 801542e:	bd80      	pop	{r7, pc}

08015430 <_ZN11ArduinoJson8V730HB226detail13convertNumberItlEET_T0_>:
TOut convertNumber(TIn value) {
 8015430:	b580      	push	{r7, lr}
 8015432:	b082      	sub	sp, #8
 8015434:	af00      	add	r7, sp, #0
 8015436:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8015438:	6878      	ldr	r0, [r7, #4]
 801543a:	f000 fb2f 	bl	8015a9c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>
 801543e:	4603      	mov	r3, r0
 8015440:	2b00      	cmp	r3, #0
 8015442:	d002      	beq.n	801544a <_ZN11ArduinoJson8V730HB226detail13convertNumberItlEET_T0_+0x1a>
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	b29b      	uxth	r3, r3
 8015448:	e000      	b.n	801544c <_ZN11ArduinoJson8V730HB226detail13convertNumberItlEET_T0_+0x1c>
 801544a:	2300      	movs	r3, #0
}
 801544c:	4618      	mov	r0, r3
 801544e:	3708      	adds	r7, #8
 8015450:	46bd      	mov	sp, r7
 8015452:	bd80      	pop	{r7, pc}

08015454 <_ZN11ArduinoJson8V730HB226detail13convertNumberItyEET_T0_>:
TOut convertNumber(TIn value) {
 8015454:	b580      	push	{r7, lr}
 8015456:	b082      	sub	sp, #8
 8015458:	af00      	add	r7, sp, #0
 801545a:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 801545e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8015462:	f000 fb32 	bl	8015aca <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 8015466:	4603      	mov	r3, r0
 8015468:	2b00      	cmp	r3, #0
 801546a:	d001      	beq.n	8015470 <_ZN11ArduinoJson8V730HB226detail13convertNumberItyEET_T0_+0x1c>
 801546c:	883b      	ldrh	r3, [r7, #0]
 801546e:	e000      	b.n	8015472 <_ZN11ArduinoJson8V730HB226detail13convertNumberItyEET_T0_+0x1e>
 8015470:	2300      	movs	r3, #0
}
 8015472:	4618      	mov	r0, r3
 8015474:	3708      	adds	r7, #8
 8015476:	46bd      	mov	sp, r7
 8015478:	bd80      	pop	{r7, pc}

0801547a <_ZN11ArduinoJson8V730HB226detail13convertNumberItxEET_T0_>:
TOut convertNumber(TIn value) {
 801547a:	b580      	push	{r7, lr}
 801547c:	b082      	sub	sp, #8
 801547e:	af00      	add	r7, sp, #0
 8015480:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8015484:	e9d7 0100 	ldrd	r0, r1, [r7]
 8015488:	f000 fb38 	bl	8015afc <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>
 801548c:	4603      	mov	r3, r0
 801548e:	2b00      	cmp	r3, #0
 8015490:	d001      	beq.n	8015496 <_ZN11ArduinoJson8V730HB226detail13convertNumberItxEET_T0_+0x1c>
 8015492:	883b      	ldrh	r3, [r7, #0]
 8015494:	e000      	b.n	8015498 <_ZN11ArduinoJson8V730HB226detail13convertNumberItxEET_T0_+0x1e>
 8015496:	2300      	movs	r3, #0
}
 8015498:	4618      	mov	r0, r3
 801549a:	3708      	adds	r7, #8
 801549c:	46bd      	mov	sp, r7
 801549e:	bd80      	pop	{r7, pc}

080154a0 <_ZN11ArduinoJson8V730HB226detail11parseNumberItEET_PKc>:
inline T parseNumber(const char* s) {
 80154a0:	b580      	push	{r7, lr}
 80154a2:	b086      	sub	sp, #24
 80154a4:	af00      	add	r7, sp, #0
 80154a6:	6078      	str	r0, [r7, #4]
  return parseNumber(s).convertTo<T>();
 80154a8:	f107 0308 	add.w	r3, r7, #8
 80154ac:	6879      	ldr	r1, [r7, #4]
 80154ae:	4618      	mov	r0, r3
 80154b0:	f7f0 f914 	bl	80056dc <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>
 80154b4:	f107 0308 	add.w	r3, r7, #8
 80154b8:	4618      	mov	r0, r3
 80154ba:	f000 fb3f 	bl	8015b3c <_ZNK11ArduinoJson8V730HB226detail6Number9convertToItEET_v>
 80154be:	4603      	mov	r3, r0
}
 80154c0:	4618      	mov	r0, r3
 80154c2:	3718      	adds	r7, #24
 80154c4:	46bd      	mov	sp, r7
 80154c6:	bd80      	pop	{r7, pc}

080154c8 <_ZN11ArduinoJson8V730HB226detail13convertNumberItfEET_T0_>:
TOut convertNumber(TIn value) {
 80154c8:	b580      	push	{r7, lr}
 80154ca:	b082      	sub	sp, #8
 80154cc:	af00      	add	r7, sp, #0
 80154ce:	ed87 0a01 	vstr	s0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80154d2:	ed97 0a01 	vldr	s0, [r7, #4]
 80154d6:	f000 fb77 	bl	8015bc8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 80154da:	4603      	mov	r3, r0
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d007      	beq.n	80154f0 <_ZN11ArduinoJson8V730HB226detail13convertNumberItfEET_T0_+0x28>
 80154e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80154e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80154e8:	ee17 3a90 	vmov	r3, s15
 80154ec:	b29b      	uxth	r3, r3
 80154ee:	e000      	b.n	80154f2 <_ZN11ArduinoJson8V730HB226detail13convertNumberItfEET_T0_+0x2a>
 80154f0:	2300      	movs	r3, #0
}
 80154f2:	4618      	mov	r0, r3
 80154f4:	3708      	adds	r7, #8
 80154f6:	46bd      	mov	sp, r7
 80154f8:	bd80      	pop	{r7, pc}

080154fa <_ZN11ArduinoJson8V730HB226detail13convertNumberItdEET_T0_>:
TOut convertNumber(TIn value) {
 80154fa:	b580      	push	{r7, lr}
 80154fc:	b082      	sub	sp, #8
 80154fe:	af00      	add	r7, sp, #0
 8015500:	ed87 0b00 	vstr	d0, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8015504:	ed97 0b00 	vldr	d0, [r7]
 8015508:	f000 fb86 	bl	8015c18 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 801550c:	4603      	mov	r3, r0
 801550e:	2b00      	cmp	r3, #0
 8015510:	d007      	beq.n	8015522 <_ZN11ArduinoJson8V730HB226detail13convertNumberItdEET_T0_+0x28>
 8015512:	ed97 7b00 	vldr	d7, [r7]
 8015516:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 801551a:	ee17 3a90 	vmov	r3, s15
 801551e:	b29b      	uxth	r3, r3
 8015520:	e000      	b.n	8015524 <_ZN11ArduinoJson8V730HB226detail13convertNumberItdEET_T0_+0x2a>
 8015522:	2300      	movs	r3, #0
}
 8015524:	4618      	mov	r0, r3
 8015526:	3708      	adds	r7, #8
 8015528:	46bd      	mov	sp, r7
 801552a:	bd80      	pop	{r7, pc}

0801552c <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
 801552c:	b580      	push	{r7, lr}
 801552e:	b082      	sub	sp, #8
 8015530:	af00      	add	r7, sp, #0
 8015532:	6078      	str	r0, [r7, #4]
 8015534:	6039      	str	r1, [r7, #0]
 8015536:	6878      	ldr	r0, [r7, #4]
 8015538:	f000 fb96 	bl	8015c68 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	4618      	mov	r0, r3
 8015540:	3708      	adds	r7, #8
 8015542:	46bd      	mov	sp, r7
 8015544:	bd80      	pop	{r7, pc}

08015546 <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8015546:	b580      	push	{r7, lr}
 8015548:	b082      	sub	sp, #8
 801554a:	af00      	add	r7, sp, #0
 801554c:	6078      	str	r0, [r7, #4]
 801554e:	6878      	ldr	r0, [r7, #4]
 8015550:	f000 fb95 	bl	8015c7e <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	4618      	mov	r0, r3
 8015558:	3708      	adds	r7, #8
 801555a:	46bd      	mov	sp, r7
 801555c:	bd80      	pop	{r7, pc}

0801555e <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>:
    __allocate_guarded(_Alloc& __a)
 801555e:	b580      	push	{r7, lr}
 8015560:	b082      	sub	sp, #8
 8015562:	af00      	add	r7, sp, #0
 8015564:	6078      	str	r0, [r7, #4]
 8015566:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8015568:	2101      	movs	r1, #1
 801556a:	6838      	ldr	r0, [r7, #0]
 801556c:	f000 fb92 	bl	8015c94 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>
 8015570:	4603      	mov	r3, r0
 8015572:	461a      	mov	r2, r3
 8015574:	6839      	ldr	r1, [r7, #0]
 8015576:	6878      	ldr	r0, [r7, #4]
 8015578:	f000 fb9b 	bl	8015cb2 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
    }
 801557c:	6878      	ldr	r0, [r7, #4]
 801557e:	3708      	adds	r7, #8
 8015580:	46bd      	mov	sp, r7
 8015582:	bd80      	pop	{r7, pc}

08015584 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 8015584:	b580      	push	{r7, lr}
 8015586:	b082      	sub	sp, #8
 8015588:	af00      	add	r7, sp, #0
 801558a:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	685b      	ldr	r3, [r3, #4]
 8015590:	2b00      	cmp	r3, #0
 8015592:	d007      	beq.n	80155a4 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	6818      	ldr	r0, [r3, #0]
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	685b      	ldr	r3, [r3, #4]
 801559c:	2201      	movs	r2, #1
 801559e:	4619      	mov	r1, r3
 80155a0:	f000 fb9b 	bl	8015cda <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>
      }
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	4618      	mov	r0, r3
 80155a8:	3708      	adds	r7, #8
 80155aa:	46bd      	mov	sp, r7
 80155ac:	bd80      	pop	{r7, pc}

080155ae <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>:
      value_type* get() { return std::__to_address(_M_ptr); }
 80155ae:	b580      	push	{r7, lr}
 80155b0:	b082      	sub	sp, #8
 80155b2:	af00      	add	r7, sp, #0
 80155b4:	6078      	str	r0, [r7, #4]
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	685b      	ldr	r3, [r3, #4]
 80155ba:	4618      	mov	r0, r3
 80155bc:	f000 fb9c 	bl	8015cf8 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>
 80155c0:	4603      	mov	r3, r0
 80155c2:	4618      	mov	r0, r3
 80155c4:	3708      	adds	r7, #8
 80155c6:	46bd      	mov	sp, r7
 80155c8:	bd80      	pop	{r7, pc}
	...

080155cc <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtSD_RbRP6RemoraEEES1_DpOT_>:
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 80155cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80155d0:	b088      	sub	sp, #32
 80155d2:	af04      	add	r7, sp, #16
 80155d4:	60f8      	str	r0, [r7, #12]
 80155d6:	7239      	strb	r1, [r7, #8]
 80155d8:	607a      	str	r2, [r7, #4]
 80155da:	603b      	str	r3, [r7, #0]
	: _M_impl(__a)
 80155dc:	68fb      	ldr	r3, [r7, #12]
 80155de:	4618      	mov	r0, r3
 80155e0:	f7f7 fd20 	bl	800d024 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 80155e4:	4a1a      	ldr	r2, [pc, #104]	@ (8015650 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtSD_RbRP6RemoraEEES1_DpOT_+0x84>)
 80155e6:	68fb      	ldr	r3, [r7, #12]
 80155e8:	601a      	str	r2, [r3, #0]
 80155ea:	68fb      	ldr	r3, [r7, #12]
 80155ec:	330c      	adds	r3, #12
 80155ee:	4621      	mov	r1, r4
 80155f0:	4618      	mov	r0, r3
 80155f2:	f000 fb8c 	bl	8015d0e <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
 80155f6:	68f8      	ldr	r0, [r7, #12]
 80155f8:	f000 f83b 	bl	8015672 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 80155fc:	4680      	mov	r8, r0
 80155fe:	6878      	ldr	r0, [r7, #4]
 8015600:	f7ff f92e 	bl	8014860 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8015604:	4681      	mov	r9, r0
 8015606:	6838      	ldr	r0, [r7, #0]
 8015608:	f7ff f935 	bl	8014876 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 801560c:	4682      	mov	sl, r0
 801560e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015610:	f7ff f93c 	bl	801488c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8015614:	4604      	mov	r4, r0
 8015616:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8015618:	f7ff f938 	bl	801488c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801561c:	4605      	mov	r5, r0
 801561e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8015620:	f7fa fe3d 	bl	801029e <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8015624:	4606      	mov	r6, r0
 8015626:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8015628:	f7ff f93b 	bl	80148a2 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 801562c:	4603      	mov	r3, r0
 801562e:	f107 0008 	add.w	r0, r7, #8
 8015632:	9303      	str	r3, [sp, #12]
 8015634:	9602      	str	r6, [sp, #8]
 8015636:	9501      	str	r5, [sp, #4]
 8015638:	9400      	str	r4, [sp, #0]
 801563a:	4653      	mov	r3, sl
 801563c:	464a      	mov	r2, r9
 801563e:	4641      	mov	r1, r8
 8015640:	f000 fb74 	bl	8015d2c <_ZNSt16allocator_traitsISaIvEE9constructI7TMC2208JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtSB_RbRP6RemoraEEEvRS0_PT_DpOT0_>
	}
 8015644:	68fb      	ldr	r3, [r7, #12]
 8015646:	4618      	mov	r0, r3
 8015648:	3710      	adds	r7, #16
 801564a:	46bd      	mov	sp, r7
 801564c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015650:	08028b74 	.word	0x08028b74

08015654 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8015654:	b480      	push	{r7}
 8015656:	b083      	sub	sp, #12
 8015658:	af00      	add	r7, sp, #0
 801565a:	6078      	str	r0, [r7, #4]
 801565c:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	2200      	movs	r2, #0
 8015662:	605a      	str	r2, [r3, #4]
	return *this;
 8015664:	687b      	ldr	r3, [r7, #4]
      }
 8015666:	4618      	mov	r0, r3
 8015668:	370c      	adds	r7, #12
 801566a:	46bd      	mov	sp, r7
 801566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015670:	4770      	bx	lr

08015672 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>:
      _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }
 8015672:	b580      	push	{r7, lr}
 8015674:	b082      	sub	sp, #8
 8015676:	af00      	add	r7, sp, #0
 8015678:	6078      	str	r0, [r7, #4]
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	330c      	adds	r3, #12
 801567e:	4618      	mov	r0, r3
 8015680:	f000 fb82 	bl	8015d88 <_ZN9__gnu_cxx16__aligned_bufferI7TMC2208E6_M_ptrEv>
 8015684:	4603      	mov	r3, r0
 8015686:	4618      	mov	r0, r3
 8015688:	3708      	adds	r7, #8
 801568a:	46bd      	mov	sp, r7
 801568c:	bd80      	pop	{r7, pc}

0801568e <_ZSt30__enable_shared_from_this_baseRKSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEPKSt23enable_shared_from_thisI3TMCE>:
      __enable_shared_from_this_base(const __shared_count<>&,
 801568e:	b480      	push	{r7}
 8015690:	b083      	sub	sp, #12
 8015692:	af00      	add	r7, sp, #0
 8015694:	6078      	str	r0, [r7, #4]
 8015696:	6039      	str	r1, [r7, #0]
      { return __p; }
 8015698:	683b      	ldr	r3, [r7, #0]
 801569a:	4618      	mov	r0, r3
 801569c:	370c      	adds	r7, #12
 801569e:	46bd      	mov	sp, r7
 80156a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156a4:	4770      	bx	lr

080156a6 <_ZNKSt23enable_shared_from_thisI3TMCE14_M_weak_assignI7TMC2208EEvPT_RKSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE>:
	_M_weak_assign(_Tp1* __p, const __shared_count<>& __n) const noexcept
 80156a6:	b580      	push	{r7, lr}
 80156a8:	b084      	sub	sp, #16
 80156aa:	af00      	add	r7, sp, #0
 80156ac:	60f8      	str	r0, [r7, #12]
 80156ae:	60b9      	str	r1, [r7, #8]
 80156b0:	607a      	str	r2, [r7, #4]
	{ _M_weak_this._M_assign(__p, __n); }
 80156b2:	68fb      	ldr	r3, [r7, #12]
 80156b4:	687a      	ldr	r2, [r7, #4]
 80156b6:	68b9      	ldr	r1, [r7, #8]
 80156b8:	4618      	mov	r0, r3
 80156ba:	f000 fb71 	bl	8015da0 <_ZNSt10__weak_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EE9_M_assignEPS0_RKSt14__shared_countILS2_0EE>
 80156be:	bf00      	nop
 80156c0:	3710      	adds	r7, #16
 80156c2:	46bd      	mov	sp, r7
 80156c4:	bd80      	pop	{r7, pc}

080156c6 <_ZNSt11_Tuple_implILj0EJP14TMC2208StepperSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 80156c6:	b580      	push	{r7, lr}
 80156c8:	b082      	sub	sp, #8
 80156ca:	af00      	add	r7, sp, #0
 80156cc:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 80156ce:	6878      	ldr	r0, [r7, #4]
 80156d0:	f000 fb84 	bl	8015ddc <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14TMC2208StepperEEEC1Ev>
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	4618      	mov	r0, r3
 80156d8:	f000 fb8c 	bl	8015df4 <_ZNSt10_Head_baseILj0EP14TMC2208StepperLb0EEC1Ev>
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	4618      	mov	r0, r3
 80156e0:	3708      	adds	r7, #8
 80156e2:	46bd      	mov	sp, r7
 80156e4:	bd80      	pop	{r7, pc}

080156e6 <_ZNSt11_Tuple_implILj0EJP14TMC2208StepperSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80156e6:	b580      	push	{r7, lr}
 80156e8:	b082      	sub	sp, #8
 80156ea:	af00      	add	r7, sp, #0
 80156ec:	6078      	str	r0, [r7, #4]
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	4618      	mov	r0, r3
 80156f2:	f000 fb8d 	bl	8015e10 <_ZNSt10_Head_baseILj0EP14TMC2208StepperLb0EE7_M_headERS2_>
 80156f6:	4603      	mov	r3, r0
 80156f8:	4618      	mov	r0, r3
 80156fa:	3708      	adds	r7, #8
 80156fc:	46bd      	mov	sp, r7
 80156fe:	bd80      	pop	{r7, pc}

08015700 <_ZSt12__get_helperILj1ESt14default_deleteI14TMC2208StepperEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8015700:	b580      	push	{r7, lr}
 8015702:	b082      	sub	sp, #8
 8015704:	af00      	add	r7, sp, #0
 8015706:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8015708:	6878      	ldr	r0, [r7, #4]
 801570a:	f000 fb8c 	bl	8015e26 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14TMC2208StepperEEE7_M_headERS3_>
 801570e:	4603      	mov	r3, r0
 8015710:	4618      	mov	r0, r3
 8015712:	3708      	adds	r7, #8
 8015714:	46bd      	mov	sp, r7
 8015716:	bd80      	pop	{r7, pc}

08015718 <_ZSt12__get_helperILj0EP14TMC2208StepperJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8015718:	b580      	push	{r7, lr}
 801571a:	b082      	sub	sp, #8
 801571c:	af00      	add	r7, sp, #0
 801571e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8015720:	6878      	ldr	r0, [r7, #4]
 8015722:	f000 fb8c 	bl	8015e3e <_ZNSt11_Tuple_implILj0EJP14TMC2208StepperSt14default_deleteIS0_EEE7_M_headERKS4_>
 8015726:	4603      	mov	r3, r0
 8015728:	4618      	mov	r0, r3
 801572a:	3708      	adds	r7, #8
 801572c:	46bd      	mov	sp, r7
 801572e:	bd80      	pop	{r7, pc}

08015730 <_ZN11ArduinoJson8V730HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ERSA_>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TWriter>
class CountingDecorator {
 public:
  explicit CountingDecorator(TWriter& writer) : writer_(writer), count_(0) {}
 8015730:	b480      	push	{r7}
 8015732:	b083      	sub	sp, #12
 8015734:	af00      	add	r7, sp, #0
 8015736:	6078      	str	r0, [r7, #4]
 8015738:	6039      	str	r1, [r7, #0]
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	683a      	ldr	r2, [r7, #0]
 801573e:	6812      	ldr	r2, [r2, #0]
 8015740:	601a      	str	r2, [r3, #0]
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	2200      	movs	r2, #0
 8015746:	605a      	str	r2, [r3, #4]
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	4618      	mov	r0, r3
 801574c:	370c      	adds	r7, #12
 801574e:	46bd      	mov	sp, r7
 8015750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015754:	4770      	bx	lr

08015756 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitIfEENS1_9enable_ifIXsrNS1_17is_floating_pointIT_EE5valueEjE4typeESF_>:
  enable_if_t<is_floating_point<T>::value, size_t> visit(T value) {
 8015756:	b580      	push	{r7, lr}
 8015758:	b082      	sub	sp, #8
 801575a:	af00      	add	r7, sp, #0
 801575c:	6078      	str	r0, [r7, #4]
 801575e:	ed87 0a00 	vstr	s0, [r7]
    formatter_.writeFloat(value);
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	ed97 0a00 	vldr	s0, [r7]
 8015768:	4618      	mov	r0, r3
 801576a:	f000 fbac 	bl	8015ec6 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIfEEvT_>
    return bytesWritten();
 801576e:	6878      	ldr	r0, [r7, #4]
 8015770:	f000 f92e 	bl	80159d0 <_ZNK11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8015774:	4603      	mov	r3, r0
  }
 8015776:	4618      	mov	r0, r3
 8015778:	3708      	adds	r7, #8
 801577a:	46bd      	mov	sp, r7
 801577c:	bd80      	pop	{r7, pc}

0801577e <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitIdEENS1_9enable_ifIXsrNS1_17is_floating_pointIT_EE5valueEjE4typeESF_>:
  enable_if_t<is_floating_point<T>::value, size_t> visit(T value) {
 801577e:	b580      	push	{r7, lr}
 8015780:	b084      	sub	sp, #16
 8015782:	af00      	add	r7, sp, #0
 8015784:	60f8      	str	r0, [r7, #12]
 8015786:	ed87 0b00 	vstr	d0, [r7]
    formatter_.writeFloat(value);
 801578a:	68fb      	ldr	r3, [r7, #12]
 801578c:	ed97 0b00 	vldr	d0, [r7]
 8015790:	4618      	mov	r0, r3
 8015792:	f000 fbac 	bl	8015eee <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_>
    return bytesWritten();
 8015796:	68f8      	ldr	r0, [r7, #12]
 8015798:	f000 f91a 	bl	80159d0 <_ZNK11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 801579c:	4603      	mov	r3, r0
  }
 801579e:	4618      	mov	r0, r3
 80157a0:	3710      	adds	r7, #16
 80157a2:	46bd      	mov	sp, r7
 80157a4:	bd80      	pop	{r7, pc}

080157a6 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_9ArrayDataE>:
  size_t visit(const ArrayData& array) {
 80157a6:	b580      	push	{r7, lr}
 80157a8:	b084      	sub	sp, #16
 80157aa:	af00      	add	r7, sp, #0
 80157ac:	6078      	str	r0, [r7, #4]
 80157ae:	6039      	str	r1, [r7, #0]
    write('[');
 80157b0:	215b      	movs	r1, #91	@ 0x5b
 80157b2:	6878      	ldr	r0, [r7, #4]
 80157b4:	f000 fbab 	bl	8015f0e <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    auto slotId = array.head();
 80157b8:	683b      	ldr	r3, [r7, #0]
 80157ba:	4618      	mov	r0, r3
 80157bc:	f7fe f937 	bl	8013a2e <_ZNK11ArduinoJson8V730HB226detail14CollectionData4headEv>
 80157c0:	4603      	mov	r3, r0
 80157c2:	81fb      	strh	r3, [r7, #14]
    while (slotId != NULL_SLOT) {
 80157c4:	e01c      	b.n	8015800 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_9ArrayDataE+0x5a>
      auto slot = resources_->getVariant(slotId);
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	689b      	ldr	r3, [r3, #8]
 80157ca:	89fa      	ldrh	r2, [r7, #14]
 80157cc:	4611      	mov	r1, r2
 80157ce:	4618      	mov	r0, r3
 80157d0:	f7ef faf1 	bl	8004db6 <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 80157d4:	60b8      	str	r0, [r7, #8]
      slot->accept(*this, resources_);
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	689b      	ldr	r3, [r3, #8]
 80157da:	461a      	mov	r2, r3
 80157dc:	6879      	ldr	r1, [r7, #4]
 80157de:	68b8      	ldr	r0, [r7, #8]
 80157e0:	f7ff fcbc 	bl	801515c <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE>
      slotId = slot->next();
 80157e4:	68b8      	ldr	r0, [r7, #8]
 80157e6:	f7ee fd4f 	bl	8004288 <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>
 80157ea:	4603      	mov	r3, r0
 80157ec:	81fb      	strh	r3, [r7, #14]
      if (slotId != NULL_SLOT)
 80157ee:	89fb      	ldrh	r3, [r7, #14]
 80157f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80157f4:	4293      	cmp	r3, r2
 80157f6:	d003      	beq.n	8015800 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_9ArrayDataE+0x5a>
        write(',');
 80157f8:	212c      	movs	r1, #44	@ 0x2c
 80157fa:	6878      	ldr	r0, [r7, #4]
 80157fc:	f000 fb87 	bl	8015f0e <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    while (slotId != NULL_SLOT) {
 8015800:	89fb      	ldrh	r3, [r7, #14]
 8015802:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015806:	4293      	cmp	r3, r2
 8015808:	d1dd      	bne.n	80157c6 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_9ArrayDataE+0x20>
    write(']');
 801580a:	215d      	movs	r1, #93	@ 0x5d
 801580c:	6878      	ldr	r0, [r7, #4]
 801580e:	f000 fb7e 	bl	8015f0e <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    return bytesWritten();
 8015812:	6878      	ldr	r0, [r7, #4]
 8015814:	f000 f8dc 	bl	80159d0 <_ZNK11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8015818:	4603      	mov	r3, r0
  }
 801581a:	4618      	mov	r0, r3
 801581c:	3710      	adds	r7, #16
 801581e:	46bd      	mov	sp, r7
 8015820:	bd80      	pop	{r7, pc}

08015822 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_10ObjectDataE>:
  size_t visit(const ObjectData& object) {
 8015822:	b580      	push	{r7, lr}
 8015824:	b084      	sub	sp, #16
 8015826:	af00      	add	r7, sp, #0
 8015828:	6078      	str	r0, [r7, #4]
 801582a:	6039      	str	r1, [r7, #0]
    write('{');
 801582c:	217b      	movs	r1, #123	@ 0x7b
 801582e:	6878      	ldr	r0, [r7, #4]
 8015830:	f000 fb6d 	bl	8015f0e <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    auto slotId = object.head();
 8015834:	683b      	ldr	r3, [r7, #0]
 8015836:	4618      	mov	r0, r3
 8015838:	f7fe f8f9 	bl	8013a2e <_ZNK11ArduinoJson8V730HB226detail14CollectionData4headEv>
 801583c:	4603      	mov	r3, r0
 801583e:	81fb      	strh	r3, [r7, #14]
    bool isKey = true;
 8015840:	2301      	movs	r3, #1
 8015842:	737b      	strb	r3, [r7, #13]
    while (slotId != NULL_SLOT) {
 8015844:	e026      	b.n	8015894 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_10ObjectDataE+0x72>
      auto slot = resources_->getVariant(slotId);
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	689b      	ldr	r3, [r3, #8]
 801584a:	89fa      	ldrh	r2, [r7, #14]
 801584c:	4611      	mov	r1, r2
 801584e:	4618      	mov	r0, r3
 8015850:	f7ef fab1 	bl	8004db6 <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 8015854:	60b8      	str	r0, [r7, #8]
      slot->accept(*this, resources_);
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	689b      	ldr	r3, [r3, #8]
 801585a:	461a      	mov	r2, r3
 801585c:	6879      	ldr	r1, [r7, #4]
 801585e:	68b8      	ldr	r0, [r7, #8]
 8015860:	f7ff fc7c 	bl	801515c <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE>
      slotId = slot->next();
 8015864:	68b8      	ldr	r0, [r7, #8]
 8015866:	f7ee fd0f 	bl	8004288 <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>
 801586a:	4603      	mov	r3, r0
 801586c:	81fb      	strh	r3, [r7, #14]
      if (slotId != NULL_SLOT)
 801586e:	89fb      	ldrh	r3, [r7, #14]
 8015870:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015874:	4293      	cmp	r3, r2
 8015876:	d009      	beq.n	801588c <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_10ObjectDataE+0x6a>
        write(isKey ? ':' : ',');
 8015878:	7b7b      	ldrb	r3, [r7, #13]
 801587a:	2b00      	cmp	r3, #0
 801587c:	d001      	beq.n	8015882 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_10ObjectDataE+0x60>
 801587e:	233a      	movs	r3, #58	@ 0x3a
 8015880:	e000      	b.n	8015884 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_10ObjectDataE+0x62>
 8015882:	232c      	movs	r3, #44	@ 0x2c
 8015884:	4619      	mov	r1, r3
 8015886:	6878      	ldr	r0, [r7, #4]
 8015888:	f000 fb41 	bl	8015f0e <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
      isKey = !isKey;
 801588c:	7b7b      	ldrb	r3, [r7, #13]
 801588e:	f083 0301 	eor.w	r3, r3, #1
 8015892:	737b      	strb	r3, [r7, #13]
    while (slotId != NULL_SLOT) {
 8015894:	89fb      	ldrh	r3, [r7, #14]
 8015896:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801589a:	4293      	cmp	r3, r2
 801589c:	d1d3      	bne.n	8015846 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_10ObjectDataE+0x24>
    write('}');
 801589e:	217d      	movs	r1, #125	@ 0x7d
 80158a0:	6878      	ldr	r0, [r7, #4]
 80158a2:	f000 fb34 	bl	8015f0e <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    return bytesWritten();
 80158a6:	6878      	ldr	r0, [r7, #4]
 80158a8:	f000 f892 	bl	80159d0 <_ZNK11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 80158ac:	4603      	mov	r3, r0
  }
 80158ae:	4618      	mov	r0, r3
 80158b0:	3710      	adds	r7, #16
 80158b2:	46bd      	mov	sp, r7
 80158b4:	bd80      	pop	{r7, pc}

080158b6 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitENS0_10JsonStringE>:
  size_t visit(JsonString value) {
 80158b6:	b5b0      	push	{r4, r5, r7, lr}
 80158b8:	b084      	sub	sp, #16
 80158ba:	af00      	add	r7, sp, #0
 80158bc:	60f8      	str	r0, [r7, #12]
 80158be:	4638      	mov	r0, r7
 80158c0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    formatter_.writeString(value.c_str(), value.size());
 80158c4:	68fc      	ldr	r4, [r7, #12]
 80158c6:	463b      	mov	r3, r7
 80158c8:	4618      	mov	r0, r3
 80158ca:	f7ee fc1b 	bl	8004104 <_ZNK11ArduinoJson8V730HB2210JsonString5c_strEv>
 80158ce:	4605      	mov	r5, r0
 80158d0:	463b      	mov	r3, r7
 80158d2:	4618      	mov	r0, r3
 80158d4:	f7fe f88c 	bl	80139f0 <_ZNK11ArduinoJson8V730HB2210JsonString4sizeEv>
 80158d8:	4603      	mov	r3, r0
 80158da:	461a      	mov	r2, r3
 80158dc:	4629      	mov	r1, r5
 80158de:	4620      	mov	r0, r4
 80158e0:	f000 fb25 	bl	8015f2e <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKcj>
    return bytesWritten();
 80158e4:	68f8      	ldr	r0, [r7, #12]
 80158e6:	f000 f873 	bl	80159d0 <_ZNK11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 80158ea:	4603      	mov	r3, r0
  }
 80158ec:	4618      	mov	r0, r3
 80158ee:	3710      	adds	r7, #16
 80158f0:	46bd      	mov	sp, r7
 80158f2:	bdb0      	pop	{r4, r5, r7, pc}

080158f4 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitENS0_15SerializedValueIPKcEE>:
  size_t visit(RawString value) {
 80158f4:	b5b0      	push	{r4, r5, r7, lr}
 80158f6:	b084      	sub	sp, #16
 80158f8:	af00      	add	r7, sp, #0
 80158fa:	60f8      	str	r0, [r7, #12]
 80158fc:	1d3b      	adds	r3, r7, #4
 80158fe:	e883 0006 	stmia.w	r3, {r1, r2}
    formatter_.writeRaw(value.data(), value.size());
 8015902:	68fc      	ldr	r4, [r7, #12]
 8015904:	1d3b      	adds	r3, r7, #4
 8015906:	4618      	mov	r0, r3
 8015908:	f7fe fcb8 	bl	801427c <_ZNK11ArduinoJson8V730HB2215SerializedValueIPKcE4dataEv>
 801590c:	4605      	mov	r5, r0
 801590e:	1d3b      	adds	r3, r7, #4
 8015910:	4618      	mov	r0, r3
 8015912:	f7fe fca7 	bl	8014264 <_ZNK11ArduinoJson8V730HB2215SerializedValueIPKcE4sizeEv>
 8015916:	4603      	mov	r3, r0
 8015918:	461a      	mov	r2, r3
 801591a:	4629      	mov	r1, r5
 801591c:	4620      	mov	r0, r4
 801591e:	f000 fb2b 	bl	8015f78 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcj>
    return bytesWritten();
 8015922:	68f8      	ldr	r0, [r7, #12]
 8015924:	f000 f854 	bl	80159d0 <_ZNK11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8015928:	4603      	mov	r3, r0
  }
 801592a:	4618      	mov	r0, r3
 801592c:	3710      	adds	r7, #16
 801592e:	46bd      	mov	sp, r7
 8015930:	bdb0      	pop	{r4, r5, r7, pc}

08015932 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEx>:
  size_t visit(JsonInteger value) {
 8015932:	b580      	push	{r7, lr}
 8015934:	b084      	sub	sp, #16
 8015936:	af00      	add	r7, sp, #0
 8015938:	60f8      	str	r0, [r7, #12]
 801593a:	e9c7 2300 	strd	r2, r3, [r7]
    formatter_.writeInteger(value);
 801593e:	68f9      	ldr	r1, [r7, #12]
 8015940:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015944:	4608      	mov	r0, r1
 8015946:	f000 fb27 	bl	8015f98 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_>
    return bytesWritten();
 801594a:	68f8      	ldr	r0, [r7, #12]
 801594c:	f000 f840 	bl	80159d0 <_ZNK11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8015950:	4603      	mov	r3, r0
  }
 8015952:	4618      	mov	r0, r3
 8015954:	3710      	adds	r7, #16
 8015956:	46bd      	mov	sp, r7
 8015958:	bd80      	pop	{r7, pc}

0801595a <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEy>:
  size_t visit(JsonUInt value) {
 801595a:	b580      	push	{r7, lr}
 801595c:	b084      	sub	sp, #16
 801595e:	af00      	add	r7, sp, #0
 8015960:	60f8      	str	r0, [r7, #12]
 8015962:	e9c7 2300 	strd	r2, r3, [r7]
    formatter_.writeInteger(value);
 8015966:	68f9      	ldr	r1, [r7, #12]
 8015968:	e9d7 2300 	ldrd	r2, r3, [r7]
 801596c:	4608      	mov	r0, r1
 801596e:	f000 fb37 	bl	8015fe0 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>
    return bytesWritten();
 8015972:	68f8      	ldr	r0, [r7, #12]
 8015974:	f000 f82c 	bl	80159d0 <_ZNK11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8015978:	4603      	mov	r3, r0
  }
 801597a:	4618      	mov	r0, r3
 801597c:	3710      	adds	r7, #16
 801597e:	46bd      	mov	sp, r7
 8015980:	bd80      	pop	{r7, pc}

08015982 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEb>:
  size_t visit(bool value) {
 8015982:	b580      	push	{r7, lr}
 8015984:	b082      	sub	sp, #8
 8015986:	af00      	add	r7, sp, #0
 8015988:	6078      	str	r0, [r7, #4]
 801598a:	460b      	mov	r3, r1
 801598c:	70fb      	strb	r3, [r7, #3]
    formatter_.writeBoolean(value);
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	78fa      	ldrb	r2, [r7, #3]
 8015992:	4611      	mov	r1, r2
 8015994:	4618      	mov	r0, r3
 8015996:	f000 fb59 	bl	801604c <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb>
    return bytesWritten();
 801599a:	6878      	ldr	r0, [r7, #4]
 801599c:	f000 f818 	bl	80159d0 <_ZNK11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 80159a0:	4603      	mov	r3, r0
  }
 80159a2:	4618      	mov	r0, r3
 80159a4:	3708      	adds	r7, #8
 80159a6:	46bd      	mov	sp, r7
 80159a8:	bd80      	pop	{r7, pc}

080159aa <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>:

    // and dump it in the right order
    writeRaw(begin, end);
  }

  void writeRaw(const char* s) {
 80159aa:	b590      	push	{r4, r7, lr}
 80159ac:	b083      	sub	sp, #12
 80159ae:	af00      	add	r7, sp, #0
 80159b0:	6078      	str	r0, [r7, #4]
 80159b2:	6039      	str	r1, [r7, #0]
    writer_.write(reinterpret_cast<const uint8_t*>(s), strlen(s));
 80159b4:	687c      	ldr	r4, [r7, #4]
 80159b6:	6838      	ldr	r0, [r7, #0]
 80159b8:	f7ea fcf2 	bl	80003a0 <strlen>
 80159bc:	4603      	mov	r3, r0
 80159be:	461a      	mov	r2, r3
 80159c0:	6839      	ldr	r1, [r7, #0]
 80159c2:	4620      	mov	r0, r4
 80159c4:	f000 fb5c 	bl	8016080 <_ZN11ArduinoJson8V730HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEPKhj>
  }
 80159c8:	bf00      	nop
 80159ca:	370c      	adds	r7, #12
 80159cc:	46bd      	mov	sp, r7
 80159ce:	bd90      	pop	{r4, r7, pc}

080159d0 <_ZNK11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>:
  size_t bytesWritten() const {
 80159d0:	b580      	push	{r7, lr}
 80159d2:	b082      	sub	sp, #8
 80159d4:	af00      	add	r7, sp, #0
 80159d6:	6078      	str	r0, [r7, #4]
    return formatter_.bytesWritten();
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	4618      	mov	r0, r3
 80159dc:	f000 fb66 	bl	80160ac <_ZNK11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 80159e0:	4603      	mov	r3, r0
  }
 80159e2:	4618      	mov	r0, r3
 80159e4:	3708      	adds	r7, #8
 80159e6:	46bd      	mov	sp, r7
 80159e8:	bd80      	pop	{r7, pc}
	...

080159ec <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIfEET_v>:
  T convertTo() const {
 80159ec:	b580      	push	{r7, lr}
 80159ee:	b082      	sub	sp, #8
 80159f0:	af00      	add	r7, sp, #0
 80159f2:	6078      	str	r0, [r7, #4]
    switch (type_) {
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	781b      	ldrb	r3, [r3, #0]
 80159f8:	3b01      	subs	r3, #1
 80159fa:	2b03      	cmp	r3, #3
 80159fc:	d832      	bhi.n	8015a64 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIfEET_v+0x78>
 80159fe:	a201      	add	r2, pc, #4	@ (adr r2, 8015a04 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIfEET_v+0x18>)
 8015a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a04:	08015a15 	.word	0x08015a15
 8015a08:	08015a29 	.word	0x08015a29
 8015a0c:	08015a3d 	.word	0x08015a3d
 8015a10:	08015a51 	.word	0x08015a51
        return convertNumber<T>(value_.asFloat);
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	edd3 7a02 	vldr	s15, [r3, #8]
 8015a1a:	eeb0 0a67 	vmov.f32	s0, s15
 8015a1e:	f000 fb52 	bl	80160c6 <_ZN11ArduinoJson8V730HB226detail13convertNumberIffEET_T0_>
 8015a22:	eef0 7a40 	vmov.f32	s15, s0
 8015a26:	e01f      	b.n	8015a68 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIfEET_v+0x7c>
        return convertNumber<T>(value_.asSignedInteger);
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8015a2e:	4610      	mov	r0, r2
 8015a30:	4619      	mov	r1, r3
 8015a32:	f000 fb5f 	bl	80160f4 <_ZN11ArduinoJson8V730HB226detail13convertNumberIfxEET_T0_>
 8015a36:	eef0 7a40 	vmov.f32	s15, s0
 8015a3a:	e015      	b.n	8015a68 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIfEET_v+0x7c>
        return convertNumber<T>(value_.asUnsignedInteger);
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8015a42:	4610      	mov	r0, r2
 8015a44:	4619      	mov	r1, r3
 8015a46:	f000 fb70 	bl	801612a <_ZN11ArduinoJson8V730HB226detail13convertNumberIfyEET_T0_>
 8015a4a:	eef0 7a40 	vmov.f32	s15, s0
 8015a4e:	e00b      	b.n	8015a68 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIfEET_v+0x7c>
        return convertNumber<T>(value_.asDouble);
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	ed93 7b02 	vldr	d7, [r3, #8]
 8015a56:	eeb0 0b47 	vmov.f64	d0, d7
 8015a5a:	f000 fb81 	bl	8016160 <_ZN11ArduinoJson8V730HB226detail13convertNumberIfdEET_T0_>
 8015a5e:	eef0 7a40 	vmov.f32	s15, s0
 8015a62:	e001      	b.n	8015a68 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIfEET_v+0x7c>
        return T();
 8015a64:	eddf 7a03 	vldr	s15, [pc, #12]	@ 8015a74 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIfEET_v+0x88>
  }
 8015a68:	eeb0 0a67 	vmov.f32	s0, s15
 8015a6c:	3708      	adds	r7, #8
 8015a6e:	46bd      	mov	sp, r7
 8015a70:	bd80      	pop	{r7, pc}
 8015a72:	bf00      	nop
 8015a74:	00000000 	.word	0x00000000

08015a78 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8015a78:	b580      	push	{r7, lr}
 8015a7a:	b082      	sub	sp, #8
 8015a7c:	af00      	add	r7, sp, #0
 8015a7e:	6078      	str	r0, [r7, #4]
  return value <= TIn(numeric_limits<TOut>::highest());
 8015a80:	f7fd ffad 	bl	80139de <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE7highestEv>
 8015a84:	4603      	mov	r3, r0
 8015a86:	461a      	mov	r2, r3
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	4293      	cmp	r3, r2
 8015a8c:	bf94      	ite	ls
 8015a8e:	2301      	movls	r3, #1
 8015a90:	2300      	movhi	r3, #0
 8015a92:	b2db      	uxtb	r3, r3
}
 8015a94:	4618      	mov	r0, r3
 8015a96:	3708      	adds	r7, #8
 8015a98:	46bd      	mov	sp, r7
 8015a9a:	bd80      	pop	{r7, pc}

08015a9c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8015a9c:	b580      	push	{r7, lr}
 8015a9e:	b082      	sub	sp, #8
 8015aa0:	af00      	add	r7, sp, #0
 8015aa2:	6078      	str	r0, [r7, #4]
  if (value < 0)
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	da01      	bge.n	8015aae <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x12>
    return false;
 8015aaa:	2300      	movs	r3, #0
 8015aac:	e009      	b.n	8015ac2 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x26>
  return value <= TIn(numeric_limits<TOut>::highest());
 8015aae:	f7fd ff96 	bl	80139de <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE7highestEv>
 8015ab2:	4603      	mov	r3, r0
 8015ab4:	461a      	mov	r2, r3
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	4293      	cmp	r3, r2
 8015aba:	bfd4      	ite	le
 8015abc:	2301      	movle	r3, #1
 8015abe:	2300      	movgt	r3, #0
 8015ac0:	b2db      	uxtb	r3, r3
}
 8015ac2:	4618      	mov	r0, r3
 8015ac4:	3708      	adds	r7, #8
 8015ac6:	46bd      	mov	sp, r7
 8015ac8:	bd80      	pop	{r7, pc}

08015aca <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8015aca:	b5b0      	push	{r4, r5, r7, lr}
 8015acc:	b082      	sub	sp, #8
 8015ace:	af00      	add	r7, sp, #0
 8015ad0:	e9c7 0100 	strd	r0, r1, [r7]
  return value <= TIn(numeric_limits<TOut>::highest());
 8015ad4:	f7fd ff83 	bl	80139de <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE7highestEv>
 8015ad8:	4603      	mov	r3, r0
 8015ada:	b29b      	uxth	r3, r3
 8015adc:	2200      	movs	r2, #0
 8015ade:	461c      	mov	r4, r3
 8015ae0:	4615      	mov	r5, r2
 8015ae2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015ae6:	4294      	cmp	r4, r2
 8015ae8:	eb75 0303 	sbcs.w	r3, r5, r3
 8015aec:	bf2c      	ite	cs
 8015aee:	2301      	movcs	r3, #1
 8015af0:	2300      	movcc	r3, #0
 8015af2:	b2db      	uxtb	r3, r3
}
 8015af4:	4618      	mov	r0, r3
 8015af6:	3708      	adds	r7, #8
 8015af8:	46bd      	mov	sp, r7
 8015afa:	bdb0      	pop	{r4, r5, r7, pc}

08015afc <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8015afc:	b5b0      	push	{r4, r5, r7, lr}
 8015afe:	b082      	sub	sp, #8
 8015b00:	af00      	add	r7, sp, #0
 8015b02:	e9c7 0100 	strd	r0, r1, [r7]
  if (value < 0)
 8015b06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	da01      	bge.n	8015b12 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x16>
    return false;
 8015b0e:	2300      	movs	r3, #0
 8015b10:	e00f      	b.n	8015b32 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x36>
  return value <= TIn(numeric_limits<TOut>::highest());
 8015b12:	f7fd ff64 	bl	80139de <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE7highestEv>
 8015b16:	4603      	mov	r3, r0
 8015b18:	b29b      	uxth	r3, r3
 8015b1a:	2200      	movs	r2, #0
 8015b1c:	461c      	mov	r4, r3
 8015b1e:	4615      	mov	r5, r2
 8015b20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015b24:	4294      	cmp	r4, r2
 8015b26:	eb75 0303 	sbcs.w	r3, r5, r3
 8015b2a:	bfac      	ite	ge
 8015b2c:	2301      	movge	r3, #1
 8015b2e:	2300      	movlt	r3, #0
 8015b30:	b2db      	uxtb	r3, r3
}
 8015b32:	4618      	mov	r0, r3
 8015b34:	3708      	adds	r7, #8
 8015b36:	46bd      	mov	sp, r7
 8015b38:	bdb0      	pop	{r4, r5, r7, pc}
	...

08015b3c <_ZNK11ArduinoJson8V730HB226detail6Number9convertToItEET_v>:
  T convertTo() const {
 8015b3c:	b580      	push	{r7, lr}
 8015b3e:	b082      	sub	sp, #8
 8015b40:	af00      	add	r7, sp, #0
 8015b42:	6078      	str	r0, [r7, #4]
    switch (type_) {
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	781b      	ldrb	r3, [r3, #0]
 8015b48:	3b01      	subs	r3, #1
 8015b4a:	2b03      	cmp	r3, #3
 8015b4c:	d82e      	bhi.n	8015bac <_ZNK11ArduinoJson8V730HB226detail6Number9convertToItEET_v+0x70>
 8015b4e:	a201      	add	r2, pc, #4	@ (adr r2, 8015b54 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToItEET_v+0x18>)
 8015b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b54:	08015b65 	.word	0x08015b65
 8015b58:	08015b77 	.word	0x08015b77
 8015b5c:	08015b89 	.word	0x08015b89
 8015b60:	08015b9b 	.word	0x08015b9b
        return convertNumber<T>(value_.asFloat);
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	edd3 7a02 	vldr	s15, [r3, #8]
 8015b6a:	eeb0 0a67 	vmov.f32	s0, s15
 8015b6e:	f7ff fcab 	bl	80154c8 <_ZN11ArduinoJson8V730HB226detail13convertNumberItfEET_T0_>
 8015b72:	4603      	mov	r3, r0
 8015b74:	e01b      	b.n	8015bae <_ZNK11ArduinoJson8V730HB226detail6Number9convertToItEET_v+0x72>
        return convertNumber<T>(value_.asSignedInteger);
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8015b7c:	4610      	mov	r0, r2
 8015b7e:	4619      	mov	r1, r3
 8015b80:	f7ff fc7b 	bl	801547a <_ZN11ArduinoJson8V730HB226detail13convertNumberItxEET_T0_>
 8015b84:	4603      	mov	r3, r0
 8015b86:	e012      	b.n	8015bae <_ZNK11ArduinoJson8V730HB226detail6Number9convertToItEET_v+0x72>
        return convertNumber<T>(value_.asUnsignedInteger);
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8015b8e:	4610      	mov	r0, r2
 8015b90:	4619      	mov	r1, r3
 8015b92:	f7ff fc5f 	bl	8015454 <_ZN11ArduinoJson8V730HB226detail13convertNumberItyEET_T0_>
 8015b96:	4603      	mov	r3, r0
 8015b98:	e009      	b.n	8015bae <_ZNK11ArduinoJson8V730HB226detail6Number9convertToItEET_v+0x72>
        return convertNumber<T>(value_.asDouble);
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	ed93 7b02 	vldr	d7, [r3, #8]
 8015ba0:	eeb0 0b47 	vmov.f64	d0, d7
 8015ba4:	f7ff fca9 	bl	80154fa <_ZN11ArduinoJson8V730HB226detail13convertNumberItdEET_T0_>
 8015ba8:	4603      	mov	r3, r0
 8015baa:	e000      	b.n	8015bae <_ZNK11ArduinoJson8V730HB226detail6Number9convertToItEET_v+0x72>
        return T();
 8015bac:	2300      	movs	r3, #0
  }
 8015bae:	4618      	mov	r0, r3
 8015bb0:	3708      	adds	r7, #8
 8015bb2:	46bd      	mov	sp, r7
 8015bb4:	bd80      	pop	{r7, pc}
 8015bb6:	bf00      	nop

08015bb8 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE6lowestEv>:
  static constexpr T lowest() {
 8015bb8:	b480      	push	{r7}
 8015bba:	af00      	add	r7, sp, #0
    return 0;
 8015bbc:	2300      	movs	r3, #0
  }
 8015bbe:	4618      	mov	r0, r3
 8015bc0:	46bd      	mov	sp, r7
 8015bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bc6:	4770      	bx	lr

08015bc8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8015bc8:	b580      	push	{r7, lr}
 8015bca:	b082      	sub	sp, #8
 8015bcc:	af00      	add	r7, sp, #0
 8015bce:	ed87 0a01 	vstr	s0, [r7, #4]
  return value >= numeric_limits<TOut>::lowest() &&
 8015bd2:	f7ff fff1 	bl	8015bb8 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE6lowestEv>
 8015bd6:	4603      	mov	r3, r0
 8015bd8:	ee07 3a90 	vmov	s15, r3
 8015bdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015be0:	ed97 7a01 	vldr	s14, [r7, #4]
 8015be4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015bec:	db0f      	blt.n	8015c0e <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x46>
         value <= numeric_limits<TOut>::highest();
 8015bee:	f7fd fef6 	bl	80139de <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE7highestEv>
 8015bf2:	4603      	mov	r3, r0
 8015bf4:	ee07 3a90 	vmov	s15, r3
 8015bf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  return value >= numeric_limits<TOut>::lowest() &&
 8015bfc:	ed97 7a01 	vldr	s14, [r7, #4]
 8015c00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c08:	d801      	bhi.n	8015c0e <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x46>
 8015c0a:	2301      	movs	r3, #1
 8015c0c:	e000      	b.n	8015c10 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x48>
 8015c0e:	2300      	movs	r3, #0
}
 8015c10:	4618      	mov	r0, r3
 8015c12:	3708      	adds	r7, #8
 8015c14:	46bd      	mov	sp, r7
 8015c16:	bd80      	pop	{r7, pc}

08015c18 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8015c18:	b580      	push	{r7, lr}
 8015c1a:	b082      	sub	sp, #8
 8015c1c:	af00      	add	r7, sp, #0
 8015c1e:	ed87 0b00 	vstr	d0, [r7]
  return value >= numeric_limits<TOut>::lowest() &&
 8015c22:	f7ff ffc9 	bl	8015bb8 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE6lowestEv>
 8015c26:	4603      	mov	r3, r0
 8015c28:	ee07 3a90 	vmov	s15, r3
 8015c2c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015c30:	ed97 6b00 	vldr	d6, [r7]
 8015c34:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c3c:	db0f      	blt.n	8015c5e <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x46>
         value <= numeric_limits<TOut>::highest();
 8015c3e:	f7fd fece 	bl	80139de <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE7highestEv>
 8015c42:	4603      	mov	r3, r0
 8015c44:	ee07 3a90 	vmov	s15, r3
 8015c48:	eeb8 7be7 	vcvt.f64.s32	d7, s15
  return value >= numeric_limits<TOut>::lowest() &&
 8015c4c:	ed97 6b00 	vldr	d6, [r7]
 8015c50:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c58:	d801      	bhi.n	8015c5e <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x46>
 8015c5a:	2301      	movs	r3, #1
 8015c5c:	e000      	b.n	8015c60 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x48>
 8015c5e:	2300      	movs	r3, #0
}
 8015c60:	4618      	mov	r0, r3
 8015c62:	3708      	adds	r7, #8
 8015c64:	46bd      	mov	sp, r7
 8015c66:	bd80      	pop	{r7, pc}

08015c68 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8015c68:	b480      	push	{r7}
 8015c6a:	b083      	sub	sp, #12
 8015c6c:	af00      	add	r7, sp, #0
 8015c6e:	6078      	str	r0, [r7, #4]
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	4618      	mov	r0, r3
 8015c74:	370c      	adds	r7, #12
 8015c76:	46bd      	mov	sp, r7
 8015c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c7c:	4770      	bx	lr

08015c7e <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8015c7e:	b480      	push	{r7}
 8015c80:	b083      	sub	sp, #12
 8015c82:	af00      	add	r7, sp, #0
 8015c84:	6078      	str	r0, [r7, #4]
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	4618      	mov	r0, r3
 8015c8a:	370c      	adds	r7, #12
 8015c8c:	46bd      	mov	sp, r7
 8015c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c92:	4770      	bx	lr

08015c94 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 8015c94:	b580      	push	{r7, lr}
 8015c96:	b082      	sub	sp, #8
 8015c98:	af00      	add	r7, sp, #0
 8015c9a:	6078      	str	r0, [r7, #4]
 8015c9c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8015c9e:	2200      	movs	r2, #0
 8015ca0:	6839      	ldr	r1, [r7, #0]
 8015ca2:	6878      	ldr	r0, [r7, #4]
 8015ca4:	f000 fa76 	bl	8016194 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 8015ca8:	4603      	mov	r3, r0
 8015caa:	4618      	mov	r0, r3
 8015cac:	3708      	adds	r7, #8
 8015cae:	46bd      	mov	sp, r7
 8015cb0:	bd80      	pop	{r7, pc}

08015cb2 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8015cb2:	b580      	push	{r7, lr}
 8015cb4:	b084      	sub	sp, #16
 8015cb6:	af00      	add	r7, sp, #0
 8015cb8:	60f8      	str	r0, [r7, #12]
 8015cba:	60b9      	str	r1, [r7, #8]
 8015cbc:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8015cbe:	68b8      	ldr	r0, [r7, #8]
 8015cc0:	f000 fa96 	bl	80161f0 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>
 8015cc4:	4602      	mov	r2, r0
 8015cc6:	68fb      	ldr	r3, [r7, #12]
 8015cc8:	601a      	str	r2, [r3, #0]
 8015cca:	68fb      	ldr	r3, [r7, #12]
 8015ccc:	687a      	ldr	r2, [r7, #4]
 8015cce:	605a      	str	r2, [r3, #4]
      { }
 8015cd0:	68fb      	ldr	r3, [r7, #12]
 8015cd2:	4618      	mov	r0, r3
 8015cd4:	3710      	adds	r7, #16
 8015cd6:	46bd      	mov	sp, r7
 8015cd8:	bd80      	pop	{r7, pc}

08015cda <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8015cda:	b580      	push	{r7, lr}
 8015cdc:	b084      	sub	sp, #16
 8015cde:	af00      	add	r7, sp, #0
 8015ce0:	60f8      	str	r0, [r7, #12]
 8015ce2:	60b9      	str	r1, [r7, #8]
 8015ce4:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8015ce6:	687a      	ldr	r2, [r7, #4]
 8015ce8:	68b9      	ldr	r1, [r7, #8]
 8015cea:	68f8      	ldr	r0, [r7, #12]
 8015cec:	f000 fa8b 	bl	8016206 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>
 8015cf0:	bf00      	nop
 8015cf2:	3710      	adds	r7, #16
 8015cf4:	46bd      	mov	sp, r7
 8015cf6:	bd80      	pop	{r7, pc}

08015cf8 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>:
    __to_address(_Tp* __ptr) noexcept
 8015cf8:	b480      	push	{r7}
 8015cfa:	b083      	sub	sp, #12
 8015cfc:	af00      	add	r7, sp, #0
 8015cfe:	6078      	str	r0, [r7, #4]
      return __ptr;
 8015d00:	687b      	ldr	r3, [r7, #4]
    }
 8015d02:	4618      	mov	r0, r3
 8015d04:	370c      	adds	r7, #12
 8015d06:	46bd      	mov	sp, r7
 8015d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d0c:	4770      	bx	lr

08015d0e <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>:
	explicit _Impl(_Alloc __a) noexcept : _A_base(__a) { }
 8015d0e:	b580      	push	{r7, lr}
 8015d10:	b082      	sub	sp, #8
 8015d12:	af00      	add	r7, sp, #0
 8015d14:	6078      	str	r0, [r7, #4]
 8015d16:	7039      	strb	r1, [r7, #0]
 8015d18:	463b      	mov	r3, r7
 8015d1a:	4619      	mov	r1, r3
 8015d1c:	6878      	ldr	r0, [r7, #4]
 8015d1e:	f7f7 fb9b 	bl	800d458 <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EEC1ERKS0_>
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	4618      	mov	r0, r3
 8015d26:	3708      	adds	r7, #8
 8015d28:	46bd      	mov	sp, r7
 8015d2a:	bd80      	pop	{r7, pc}

08015d2c <_ZNSt16allocator_traitsISaIvEE9constructI7TMC2208JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtSB_RbRP6RemoraEEEvRS0_PT_DpOT0_>:
	construct(allocator_type&, _Up* __p, _Args&&... __args)
 8015d2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015d30:	b089      	sub	sp, #36	@ 0x24
 8015d32:	af04      	add	r7, sp, #16
 8015d34:	60f8      	str	r0, [r7, #12]
 8015d36:	60b9      	str	r1, [r7, #8]
 8015d38:	607a      	str	r2, [r7, #4]
 8015d3a:	603b      	str	r3, [r7, #0]
	{ std::_Construct(__p, std::forward<_Args>(__args)...); }
 8015d3c:	6878      	ldr	r0, [r7, #4]
 8015d3e:	f7fe fd8f 	bl	8014860 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8015d42:	4606      	mov	r6, r0
 8015d44:	6838      	ldr	r0, [r7, #0]
 8015d46:	f7fe fd96 	bl	8014876 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8015d4a:	4680      	mov	r8, r0
 8015d4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015d4e:	f7fe fd9d 	bl	801488c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8015d52:	4681      	mov	r9, r0
 8015d54:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8015d56:	f7fe fd99 	bl	801488c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8015d5a:	4604      	mov	r4, r0
 8015d5c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8015d5e:	f7fa fa9e 	bl	801029e <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8015d62:	4605      	mov	r5, r0
 8015d64:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8015d66:	f7fe fd9c 	bl	80148a2 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 8015d6a:	4603      	mov	r3, r0
 8015d6c:	9302      	str	r3, [sp, #8]
 8015d6e:	9501      	str	r5, [sp, #4]
 8015d70:	9400      	str	r4, [sp, #0]
 8015d72:	464b      	mov	r3, r9
 8015d74:	4642      	mov	r2, r8
 8015d76:	4631      	mov	r1, r6
 8015d78:	68b8      	ldr	r0, [r7, #8]
 8015d7a:	f000 fa55 	bl	8016228 <_ZSt10_ConstructI7TMC2208JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtS8_RbRP6RemoraEEvPT_DpOT0_>
 8015d7e:	bf00      	nop
 8015d80:	3714      	adds	r7, #20
 8015d82:	46bd      	mov	sp, r7
 8015d84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08015d88 <_ZN9__gnu_cxx16__aligned_bufferI7TMC2208E6_M_ptrEv>:
      _M_ptr() noexcept
 8015d88:	b580      	push	{r7, lr}
 8015d8a:	b082      	sub	sp, #8
 8015d8c:	af00      	add	r7, sp, #0
 8015d8e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8015d90:	6878      	ldr	r0, [r7, #4]
 8015d92:	f000 fa94 	bl	80162be <_ZN9__gnu_cxx16__aligned_bufferI7TMC2208E7_M_addrEv>
 8015d96:	4603      	mov	r3, r0
 8015d98:	4618      	mov	r0, r3
 8015d9a:	3708      	adds	r7, #8
 8015d9c:	46bd      	mov	sp, r7
 8015d9e:	bd80      	pop	{r7, pc}

08015da0 <_ZNSt10__weak_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EE9_M_assignEPS0_RKSt14__shared_countILS2_0EE>:
      }

    private:
      // Used by __enable_shared_from_this.
      void
      _M_assign(_Tp* __ptr, const __shared_count<_Lp>& __refcount) noexcept
 8015da0:	b580      	push	{r7, lr}
 8015da2:	b084      	sub	sp, #16
 8015da4:	af00      	add	r7, sp, #0
 8015da6:	60f8      	str	r0, [r7, #12]
 8015da8:	60b9      	str	r1, [r7, #8]
 8015daa:	607a      	str	r2, [r7, #4]
      {
	if (use_count() == 0)
 8015dac:	68f8      	ldr	r0, [r7, #12]
 8015dae:	f000 fa91 	bl	80162d4 <_ZNKSt10__weak_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EE9use_countEv>
 8015db2:	4603      	mov	r3, r0
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	bf0c      	ite	eq
 8015db8:	2301      	moveq	r3, #1
 8015dba:	2300      	movne	r3, #0
 8015dbc:	b2db      	uxtb	r3, r3
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d008      	beq.n	8015dd4 <_ZNSt10__weak_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EE9_M_assignEPS0_RKSt14__shared_countILS2_0EE+0x34>
	  {
	    _M_ptr = __ptr;
 8015dc2:	68fb      	ldr	r3, [r7, #12]
 8015dc4:	68ba      	ldr	r2, [r7, #8]
 8015dc6:	601a      	str	r2, [r3, #0]
	    _M_refcount = __refcount;
 8015dc8:	68fb      	ldr	r3, [r7, #12]
 8015dca:	3304      	adds	r3, #4
 8015dcc:	6879      	ldr	r1, [r7, #4]
 8015dce:	4618      	mov	r0, r3
 8015dd0:	f000 fa8e 	bl	80162f0 <_ZNSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EEaSERKSt14__shared_countILS1_0EE>
	  }
      }
 8015dd4:	bf00      	nop
 8015dd6:	3710      	adds	r7, #16
 8015dd8:	46bd      	mov	sp, r7
 8015dda:	bd80      	pop	{r7, pc}

08015ddc <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14TMC2208StepperEEEC1Ev>:
      _Tuple_impl()
 8015ddc:	b580      	push	{r7, lr}
 8015dde:	b082      	sub	sp, #8
 8015de0:	af00      	add	r7, sp, #0
 8015de2:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8015de4:	6878      	ldr	r0, [r7, #4]
 8015de6:	f000 faa2 	bl	801632e <_ZNSt10_Head_baseILj1ESt14default_deleteI14TMC2208StepperELb1EEC1Ev>
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	4618      	mov	r0, r3
 8015dee:	3708      	adds	r7, #8
 8015df0:	46bd      	mov	sp, r7
 8015df2:	bd80      	pop	{r7, pc}

08015df4 <_ZNSt10_Head_baseILj0EP14TMC2208StepperLb0EEC1Ev>:
      constexpr _Head_base()
 8015df4:	b480      	push	{r7}
 8015df6:	b083      	sub	sp, #12
 8015df8:	af00      	add	r7, sp, #0
 8015dfa:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	2200      	movs	r2, #0
 8015e00:	601a      	str	r2, [r3, #0]
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	4618      	mov	r0, r3
 8015e06:	370c      	adds	r7, #12
 8015e08:	46bd      	mov	sp, r7
 8015e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e0e:	4770      	bx	lr

08015e10 <_ZNSt10_Head_baseILj0EP14TMC2208StepperLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8015e10:	b480      	push	{r7}
 8015e12:	b083      	sub	sp, #12
 8015e14:	af00      	add	r7, sp, #0
 8015e16:	6078      	str	r0, [r7, #4]
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	4618      	mov	r0, r3
 8015e1c:	370c      	adds	r7, #12
 8015e1e:	46bd      	mov	sp, r7
 8015e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e24:	4770      	bx	lr

08015e26 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14TMC2208StepperEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8015e26:	b580      	push	{r7, lr}
 8015e28:	b082      	sub	sp, #8
 8015e2a:	af00      	add	r7, sp, #0
 8015e2c:	6078      	str	r0, [r7, #4]
 8015e2e:	6878      	ldr	r0, [r7, #4]
 8015e30:	f000 fa88 	bl	8016344 <_ZNSt10_Head_baseILj1ESt14default_deleteI14TMC2208StepperELb1EE7_M_headERS3_>
 8015e34:	4603      	mov	r3, r0
 8015e36:	4618      	mov	r0, r3
 8015e38:	3708      	adds	r7, #8
 8015e3a:	46bd      	mov	sp, r7
 8015e3c:	bd80      	pop	{r7, pc}

08015e3e <_ZNSt11_Tuple_implILj0EJP14TMC2208StepperSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8015e3e:	b580      	push	{r7, lr}
 8015e40:	b082      	sub	sp, #8
 8015e42:	af00      	add	r7, sp, #0
 8015e44:	6078      	str	r0, [r7, #4]
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	4618      	mov	r0, r3
 8015e4a:	f000 fa86 	bl	801635a <_ZNSt10_Head_baseILj0EP14TMC2208StepperLb0EE7_M_headERKS2_>
 8015e4e:	4603      	mov	r3, r0
 8015e50:	4618      	mov	r0, r3
 8015e52:	3708      	adds	r7, #8
 8015e54:	46bd      	mov	sp, r7
 8015e56:	bd80      	pop	{r7, pc}

08015e58 <_ZN11ArduinoJson8V730HB226detail5isnanIdEEbT_>:
// Some libraries #define isnan() and isinf() so we need to check before
// using this name

#ifndef isnan
template <typename T>
bool isnan(T x) {
 8015e58:	b480      	push	{r7}
 8015e5a:	b083      	sub	sp, #12
 8015e5c:	af00      	add	r7, sp, #0
 8015e5e:	ed87 0b00 	vstr	d0, [r7]
  return x != x;
 8015e62:	ed97 6b00 	vldr	d6, [r7]
 8015e66:	ed97 7b00 	vldr	d7, [r7]
 8015e6a:	eeb4 6b47 	vcmp.f64	d6, d7
 8015e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e72:	bf14      	ite	ne
 8015e74:	2301      	movne	r3, #1
 8015e76:	2300      	moveq	r3, #0
 8015e78:	b2db      	uxtb	r3, r3
}
 8015e7a:	4618      	mov	r0, r3
 8015e7c:	370c      	adds	r7, #12
 8015e7e:	46bd      	mov	sp, r7
 8015e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e84:	4770      	bx	lr

08015e86 <_ZN11ArduinoJson8V730HB226detail5isinfIdEEbT_>:
#endif

#ifndef isinf
template <typename T>
bool isinf(T x) {
 8015e86:	b480      	push	{r7}
 8015e88:	b083      	sub	sp, #12
 8015e8a:	af00      	add	r7, sp, #0
 8015e8c:	ed87 0b00 	vstr	d0, [r7]
  return x != 0.0 && x * 2 == x;
 8015e90:	ed97 7b00 	vldr	d7, [r7]
 8015e94:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e9c:	d00c      	beq.n	8015eb8 <_ZN11ArduinoJson8V730HB226detail5isinfIdEEbT_+0x32>
 8015e9e:	ed97 7b00 	vldr	d7, [r7]
 8015ea2:	ee37 7b07 	vadd.f64	d7, d7, d7
 8015ea6:	ed97 6b00 	vldr	d6, [r7]
 8015eaa:	eeb4 6b47 	vcmp.f64	d6, d7
 8015eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015eb2:	d101      	bne.n	8015eb8 <_ZN11ArduinoJson8V730HB226detail5isinfIdEEbT_+0x32>
 8015eb4:	2301      	movs	r3, #1
 8015eb6:	e000      	b.n	8015eba <_ZN11ArduinoJson8V730HB226detail5isinfIdEEbT_+0x34>
 8015eb8:	2300      	movs	r3, #0
}
 8015eba:	4618      	mov	r0, r3
 8015ebc:	370c      	adds	r7, #12
 8015ebe:	46bd      	mov	sp, r7
 8015ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ec4:	4770      	bx	lr

08015ec6 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIfEEvT_>:
  void writeFloat(T value) {
 8015ec6:	b580      	push	{r7, lr}
 8015ec8:	b082      	sub	sp, #8
 8015eca:	af00      	add	r7, sp, #0
 8015ecc:	6078      	str	r0, [r7, #4]
 8015ece:	ed87 0a00 	vstr	s0, [r7]
    writeFloat(JsonFloat(value), sizeof(T) >= 8 ? 9 : 6);
 8015ed2:	edd7 7a00 	vldr	s15, [r7]
 8015ed6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8015eda:	2106      	movs	r1, #6
 8015edc:	eeb0 0b47 	vmov.f64	d0, d7
 8015ee0:	6878      	ldr	r0, [r7, #4]
 8015ee2:	f000 fa45 	bl	8016370 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda>
  }
 8015ee6:	bf00      	nop
 8015ee8:	3708      	adds	r7, #8
 8015eea:	46bd      	mov	sp, r7
 8015eec:	bd80      	pop	{r7, pc}

08015eee <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_>:
  void writeFloat(T value) {
 8015eee:	b580      	push	{r7, lr}
 8015ef0:	b084      	sub	sp, #16
 8015ef2:	af00      	add	r7, sp, #0
 8015ef4:	60f8      	str	r0, [r7, #12]
 8015ef6:	ed87 0b00 	vstr	d0, [r7]
    writeFloat(JsonFloat(value), sizeof(T) >= 8 ? 9 : 6);
 8015efa:	2109      	movs	r1, #9
 8015efc:	ed97 0b00 	vldr	d0, [r7]
 8015f00:	68f8      	ldr	r0, [r7, #12]
 8015f02:	f000 fa35 	bl	8016370 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda>
  }
 8015f06:	bf00      	nop
 8015f08:	3710      	adds	r7, #16
 8015f0a:	46bd      	mov	sp, r7
 8015f0c:	bd80      	pop	{r7, pc}

08015f0e <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>:
  void write(char c) {
 8015f0e:	b580      	push	{r7, lr}
 8015f10:	b082      	sub	sp, #8
 8015f12:	af00      	add	r7, sp, #0
 8015f14:	6078      	str	r0, [r7, #4]
 8015f16:	460b      	mov	r3, r1
 8015f18:	70fb      	strb	r3, [r7, #3]
    formatter_.writeRaw(c);
 8015f1a:	687b      	ldr	r3, [r7, #4]
 8015f1c:	78fa      	ldrb	r2, [r7, #3]
 8015f1e:	4611      	mov	r1, r2
 8015f20:	4618      	mov	r0, r3
 8015f22:	f000 fa83 	bl	801642c <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
  }
 8015f26:	bf00      	nop
 8015f28:	3708      	adds	r7, #8
 8015f2a:	46bd      	mov	sp, r7
 8015f2c:	bd80      	pop	{r7, pc}

08015f2e <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKcj>:
  void writeString(const char* value, size_t n) {
 8015f2e:	b580      	push	{r7, lr}
 8015f30:	b084      	sub	sp, #16
 8015f32:	af00      	add	r7, sp, #0
 8015f34:	60f8      	str	r0, [r7, #12]
 8015f36:	60b9      	str	r1, [r7, #8]
 8015f38:	607a      	str	r2, [r7, #4]
    writeRaw('\"');
 8015f3a:	2122      	movs	r1, #34	@ 0x22
 8015f3c:	68f8      	ldr	r0, [r7, #12]
 8015f3e:	f000 fa75 	bl	801642c <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
    while (n--)
 8015f42:	e007      	b.n	8015f54 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKcj+0x26>
      writeChar(*value++);
 8015f44:	68bb      	ldr	r3, [r7, #8]
 8015f46:	1c5a      	adds	r2, r3, #1
 8015f48:	60ba      	str	r2, [r7, #8]
 8015f4a:	781b      	ldrb	r3, [r3, #0]
 8015f4c:	4619      	mov	r1, r3
 8015f4e:	68f8      	ldr	r0, [r7, #12]
 8015f50:	f000 fa7c 	bl	801644c <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc>
    while (n--)
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	1e5a      	subs	r2, r3, #1
 8015f58:	607a      	str	r2, [r7, #4]
 8015f5a:	2b00      	cmp	r3, #0
 8015f5c:	bf14      	ite	ne
 8015f5e:	2301      	movne	r3, #1
 8015f60:	2300      	moveq	r3, #0
 8015f62:	b2db      	uxtb	r3, r3
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	d1ed      	bne.n	8015f44 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKcj+0x16>
    writeRaw('\"');
 8015f68:	2122      	movs	r1, #34	@ 0x22
 8015f6a:	68f8      	ldr	r0, [r7, #12]
 8015f6c:	f000 fa5e 	bl	801642c <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
  }
 8015f70:	bf00      	nop
 8015f72:	3710      	adds	r7, #16
 8015f74:	46bd      	mov	sp, r7
 8015f76:	bd80      	pop	{r7, pc}

08015f78 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcj>:

  void writeRaw(const char* s, size_t n) {
 8015f78:	b580      	push	{r7, lr}
 8015f7a:	b084      	sub	sp, #16
 8015f7c:	af00      	add	r7, sp, #0
 8015f7e:	60f8      	str	r0, [r7, #12]
 8015f80:	60b9      	str	r1, [r7, #8]
 8015f82:	607a      	str	r2, [r7, #4]
    writer_.write(reinterpret_cast<const uint8_t*>(s), n);
 8015f84:	68fb      	ldr	r3, [r7, #12]
 8015f86:	687a      	ldr	r2, [r7, #4]
 8015f88:	68b9      	ldr	r1, [r7, #8]
 8015f8a:	4618      	mov	r0, r3
 8015f8c:	f000 f878 	bl	8016080 <_ZN11ArduinoJson8V730HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEPKhj>
  }
 8015f90:	bf00      	nop
 8015f92:	3710      	adds	r7, #16
 8015f94:	46bd      	mov	sp, r7
 8015f96:	bd80      	pop	{r7, pc}

08015f98 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_>:
  enable_if_t<is_signed<T>::value> writeInteger(T value) {
 8015f98:	b5b0      	push	{r4, r5, r7, lr}
 8015f9a:	b086      	sub	sp, #24
 8015f9c:	af00      	add	r7, sp, #0
 8015f9e:	60f8      	str	r0, [r7, #12]
 8015fa0:	e9c7 2300 	strd	r2, r3, [r7]
    if (value < 0) {
 8015fa4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015fa8:	2b00      	cmp	r3, #0
 8015faa:	da0c      	bge.n	8015fc6 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_+0x2e>
      writeRaw('-');
 8015fac:	212d      	movs	r1, #45	@ 0x2d
 8015fae:	68f8      	ldr	r0, [r7, #12]
 8015fb0:	f000 fa3c 	bl	801642c <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
      unsigned_value = unsigned_type(unsigned_type(~value) + 1);
 8015fb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015fb8:	2100      	movs	r1, #0
 8015fba:	4254      	negs	r4, r2
 8015fbc:	eb61 0503 	sbc.w	r5, r1, r3
 8015fc0:	e9c7 4504 	strd	r4, r5, [r7, #16]
 8015fc4:	e003      	b.n	8015fce <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_+0x36>
      unsigned_value = unsigned_type(value);
 8015fc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015fca:	e9c7 2304 	strd	r2, r3, [r7, #16]
    writeInteger(unsigned_value);
 8015fce:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8015fd2:	68f8      	ldr	r0, [r7, #12]
 8015fd4:	f000 f804 	bl	8015fe0 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>
  }
 8015fd8:	bf00      	nop
 8015fda:	3718      	adds	r7, #24
 8015fdc:	46bd      	mov	sp, r7
 8015fde:	bdb0      	pop	{r4, r5, r7, pc}

08015fe0 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>:
  enable_if_t<is_unsigned<T>::value> writeInteger(T value) {
 8015fe0:	b580      	push	{r7, lr}
 8015fe2:	b08c      	sub	sp, #48	@ 0x30
 8015fe4:	af00      	add	r7, sp, #0
 8015fe6:	60f8      	str	r0, [r7, #12]
 8015fe8:	e9c7 2300 	strd	r2, r3, [r7]
    char* end = buffer + sizeof(buffer);
 8015fec:	f107 0310 	add.w	r3, r7, #16
 8015ff0:	3316      	adds	r3, #22
 8015ff2:	62bb      	str	r3, [r7, #40]	@ 0x28
    char* begin = end;
 8015ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      *--begin = char(value % 10 + '0');
 8015ff8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8015ffc:	f04f 020a 	mov.w	r2, #10
 8016000:	f04f 0300 	mov.w	r3, #0
 8016004:	f7ea fc9e 	bl	8000944 <__aeabi_uldivmod>
 8016008:	b2d3      	uxtb	r3, r2
 801600a:	3330      	adds	r3, #48	@ 0x30
 801600c:	b2da      	uxtb	r2, r3
 801600e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016010:	3b01      	subs	r3, #1
 8016012:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016016:	701a      	strb	r2, [r3, #0]
      value = T(value / 10);
 8016018:	e9d7 0100 	ldrd	r0, r1, [r7]
 801601c:	f04f 020a 	mov.w	r2, #10
 8016020:	f04f 0300 	mov.w	r3, #0
 8016024:	f7ea fc8e 	bl	8000944 <__aeabi_uldivmod>
 8016028:	4602      	mov	r2, r0
 801602a:	460b      	mov	r3, r1
 801602c:	e9c7 2300 	strd	r2, r3, [r7]
    } while (value);
 8016030:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016034:	4313      	orrs	r3, r2
 8016036:	d1df      	bne.n	8015ff8 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x18>
    writeRaw(begin, end);
 8016038:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801603a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801603c:	68f8      	ldr	r0, [r7, #12]
 801603e:	f000 fa31 	bl	80164a4 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcSD_>
  }
 8016042:	bf00      	nop
 8016044:	3730      	adds	r7, #48	@ 0x30
 8016046:	46bd      	mov	sp, r7
 8016048:	bd80      	pop	{r7, pc}
	...

0801604c <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb>:
  void writeBoolean(bool value) {
 801604c:	b580      	push	{r7, lr}
 801604e:	b082      	sub	sp, #8
 8016050:	af00      	add	r7, sp, #0
 8016052:	6078      	str	r0, [r7, #4]
 8016054:	460b      	mov	r3, r1
 8016056:	70fb      	strb	r3, [r7, #3]
    if (value)
 8016058:	78fb      	ldrb	r3, [r7, #3]
 801605a:	2b00      	cmp	r3, #0
 801605c:	d004      	beq.n	8016068 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb+0x1c>
      writeRaw("true");
 801605e:	4906      	ldr	r1, [pc, #24]	@ (8016078 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb+0x2c>)
 8016060:	6878      	ldr	r0, [r7, #4]
 8016062:	f7ff fca2 	bl	80159aa <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
  }
 8016066:	e003      	b.n	8016070 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb+0x24>
      writeRaw("false");
 8016068:	4904      	ldr	r1, [pc, #16]	@ (801607c <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb+0x30>)
 801606a:	6878      	ldr	r0, [r7, #4]
 801606c:	f7ff fc9d 	bl	80159aa <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
  }
 8016070:	bf00      	nop
 8016072:	3708      	adds	r7, #8
 8016074:	46bd      	mov	sp, r7
 8016076:	bd80      	pop	{r7, pc}
 8016078:	0802853c 	.word	0x0802853c
 801607c:	08028544 	.word	0x08028544

08016080 <_ZN11ArduinoJson8V730HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEPKhj>:

  void write(uint8_t c) {
    count_ += writer_.write(c);
  }

  void write(const uint8_t* s, size_t n) {
 8016080:	b580      	push	{r7, lr}
 8016082:	b084      	sub	sp, #16
 8016084:	af00      	add	r7, sp, #0
 8016086:	60f8      	str	r0, [r7, #12]
 8016088:	60b9      	str	r1, [r7, #8]
 801608a:	607a      	str	r2, [r7, #4]
    count_ += writer_.write(s, n);
 801608c:	68fb      	ldr	r3, [r7, #12]
 801608e:	687a      	ldr	r2, [r7, #4]
 8016090:	68b9      	ldr	r1, [r7, #8]
 8016092:	4618      	mov	r0, r3
 8016094:	f000 fa18 	bl	80164c8 <_ZN11ArduinoJson8V730HB226detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE5writeEPKhj>
 8016098:	4602      	mov	r2, r0
 801609a:	68fb      	ldr	r3, [r7, #12]
 801609c:	685b      	ldr	r3, [r3, #4]
 801609e:	441a      	add	r2, r3
 80160a0:	68fb      	ldr	r3, [r7, #12]
 80160a2:	605a      	str	r2, [r3, #4]
  }
 80160a4:	bf00      	nop
 80160a6:	3710      	adds	r7, #16
 80160a8:	46bd      	mov	sp, r7
 80160aa:	bd80      	pop	{r7, pc}

080160ac <_ZNK11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>:
  size_t bytesWritten() const {
 80160ac:	b580      	push	{r7, lr}
 80160ae:	b082      	sub	sp, #8
 80160b0:	af00      	add	r7, sp, #0
 80160b2:	6078      	str	r0, [r7, #4]
    return writer_.count();
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	4618      	mov	r0, r3
 80160b8:	f000 fa18 	bl	80164ec <_ZNK11ArduinoJson8V730HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5countEv>
 80160bc:	4603      	mov	r3, r0
  }
 80160be:	4618      	mov	r0, r3
 80160c0:	3708      	adds	r7, #8
 80160c2:	46bd      	mov	sp, r7
 80160c4:	bd80      	pop	{r7, pc}

080160c6 <_ZN11ArduinoJson8V730HB226detail13convertNumberIffEET_T0_>:
TOut convertNumber(TIn value) {
 80160c6:	b580      	push	{r7, lr}
 80160c8:	b082      	sub	sp, #8
 80160ca:	af00      	add	r7, sp, #0
 80160cc:	ed87 0a01 	vstr	s0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80160d0:	ed97 0a01 	vldr	s0, [r7, #4]
 80160d4:	f000 fa16 	bl	8016504 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIffEENS1_9enable_ifIXaasrNS1_17is_floating_pointIT0_EE5valuesrNS4_IT_EE5valueEbE4typeES5_>
 80160d8:	4603      	mov	r3, r0
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d001      	beq.n	80160e2 <_ZN11ArduinoJson8V730HB226detail13convertNumberIffEET_T0_+0x1c>
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	e001      	b.n	80160e6 <_ZN11ArduinoJson8V730HB226detail13convertNumberIffEET_T0_+0x20>
 80160e2:	f04f 0300 	mov.w	r3, #0
 80160e6:	ee07 3a90 	vmov	s15, r3
}
 80160ea:	eeb0 0a67 	vmov.f32	s0, s15
 80160ee:	3708      	adds	r7, #8
 80160f0:	46bd      	mov	sp, r7
 80160f2:	bd80      	pop	{r7, pc}

080160f4 <_ZN11ArduinoJson8V730HB226detail13convertNumberIfxEET_T0_>:
TOut convertNumber(TIn value) {
 80160f4:	b580      	push	{r7, lr}
 80160f6:	b082      	sub	sp, #8
 80160f8:	af00      	add	r7, sp, #0
 80160fa:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80160fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016102:	f000 fa0b 	bl	801651c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIfxEENS1_9enable_ifIXaasrNS1_11is_integralIT0_EE5valuesrNS1_17is_floating_pointIT_EE5valueEbE4typeES5_>
 8016106:	4603      	mov	r3, r0
 8016108:	2b00      	cmp	r3, #0
 801610a:	d005      	beq.n	8016118 <_ZN11ArduinoJson8V730HB226detail13convertNumberIfxEET_T0_+0x24>
 801610c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016110:	f7ea fbda 	bl	80008c8 <__aeabi_l2f>
 8016114:	4603      	mov	r3, r0
 8016116:	e001      	b.n	801611c <_ZN11ArduinoJson8V730HB226detail13convertNumberIfxEET_T0_+0x28>
 8016118:	f04f 0300 	mov.w	r3, #0
 801611c:	ee07 3a90 	vmov	s15, r3
}
 8016120:	eeb0 0a67 	vmov.f32	s0, s15
 8016124:	3708      	adds	r7, #8
 8016126:	46bd      	mov	sp, r7
 8016128:	bd80      	pop	{r7, pc}

0801612a <_ZN11ArduinoJson8V730HB226detail13convertNumberIfyEET_T0_>:
TOut convertNumber(TIn value) {
 801612a:	b580      	push	{r7, lr}
 801612c:	b082      	sub	sp, #8
 801612e:	af00      	add	r7, sp, #0
 8016130:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8016134:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016138:	f000 f9fc 	bl	8016534 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIfyEENS1_9enable_ifIXaasrNS1_11is_integralIT0_EE5valuesrNS1_17is_floating_pointIT_EE5valueEbE4typeES5_>
 801613c:	4603      	mov	r3, r0
 801613e:	2b00      	cmp	r3, #0
 8016140:	d005      	beq.n	801614e <_ZN11ArduinoJson8V730HB226detail13convertNumberIfyEET_T0_+0x24>
 8016142:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016146:	f7ea fbb7 	bl	80008b8 <__aeabi_ul2f>
 801614a:	4603      	mov	r3, r0
 801614c:	e001      	b.n	8016152 <_ZN11ArduinoJson8V730HB226detail13convertNumberIfyEET_T0_+0x28>
 801614e:	f04f 0300 	mov.w	r3, #0
 8016152:	ee07 3a90 	vmov	s15, r3
}
 8016156:	eeb0 0a67 	vmov.f32	s0, s15
 801615a:	3708      	adds	r7, #8
 801615c:	46bd      	mov	sp, r7
 801615e:	bd80      	pop	{r7, pc}

08016160 <_ZN11ArduinoJson8V730HB226detail13convertNumberIfdEET_T0_>:
TOut convertNumber(TIn value) {
 8016160:	b580      	push	{r7, lr}
 8016162:	b082      	sub	sp, #8
 8016164:	af00      	add	r7, sp, #0
 8016166:	ed87 0b00 	vstr	d0, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 801616a:	ed97 0b00 	vldr	d0, [r7]
 801616e:	f000 f9ed 	bl	801654c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIfdEENS1_9enable_ifIXaasrNS1_17is_floating_pointIT0_EE5valuesrNS4_IT_EE5valueEbE4typeES5_>
 8016172:	4603      	mov	r3, r0
 8016174:	2b00      	cmp	r3, #0
 8016176:	d004      	beq.n	8016182 <_ZN11ArduinoJson8V730HB226detail13convertNumberIfdEET_T0_+0x22>
 8016178:	ed97 7b00 	vldr	d7, [r7]
 801617c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8016180:	e001      	b.n	8016186 <_ZN11ArduinoJson8V730HB226detail13convertNumberIfdEET_T0_+0x26>
 8016182:	eddf 7a03 	vldr	s15, [pc, #12]	@ 8016190 <_ZN11ArduinoJson8V730HB226detail13convertNumberIfdEET_T0_+0x30>
}
 8016186:	eeb0 0a67 	vmov.f32	s0, s15
 801618a:	3708      	adds	r7, #8
 801618c:	46bd      	mov	sp, r7
 801618e:	bd80      	pop	{r7, pc}
 8016190:	00000000 	.word	0x00000000

08016194 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8016194:	b580      	push	{r7, lr}
 8016196:	b084      	sub	sp, #16
 8016198:	af00      	add	r7, sp, #0
 801619a:	60f8      	str	r0, [r7, #12]
 801619c:	60b9      	str	r1, [r7, #8]
 801619e:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80161a0:	68f8      	ldr	r0, [r7, #12]
 80161a2:	f000 f9df 	bl	8016564 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 80161a6:	4602      	mov	r2, r0
 80161a8:	68bb      	ldr	r3, [r7, #8]
 80161aa:	4293      	cmp	r3, r2
 80161ac:	bf8c      	ite	hi
 80161ae:	2301      	movhi	r3, #1
 80161b0:	2300      	movls	r3, #0
 80161b2:	b2db      	uxtb	r3, r3
 80161b4:	2b00      	cmp	r3, #0
 80161b6:	bf14      	ite	ne
 80161b8:	2301      	movne	r3, #1
 80161ba:	2300      	moveq	r3, #0
 80161bc:	b2db      	uxtb	r3, r3
 80161be:	2b00      	cmp	r3, #0
 80161c0:	d007      	beq.n	80161d2 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 80161c2:	68bb      	ldr	r3, [r7, #8]
 80161c4:	4a09      	ldr	r2, [pc, #36]	@ (80161ec <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x58>)
 80161c6:	4293      	cmp	r3, r2
 80161c8:	d901      	bls.n	80161ce <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 80161ca:	f00f fe9d 	bl	8025f08 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 80161ce:	f00f fe98 	bl	8025f02 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80161d2:	68bb      	ldr	r3, [r7, #8]
 80161d4:	2258      	movs	r2, #88	@ 0x58
 80161d6:	fb02 f303 	mul.w	r3, r2, r3
 80161da:	4618      	mov	r0, r3
 80161dc:	f00f fe7e 	bl	8025edc <_Znwj>
 80161e0:	4603      	mov	r3, r0
 80161e2:	bf00      	nop
      }
 80161e4:	4618      	mov	r0, r3
 80161e6:	3710      	adds	r7, #16
 80161e8:	46bd      	mov	sp, r7
 80161ea:	bd80      	pop	{r7, pc}
 80161ec:	02e8ba2e 	.word	0x02e8ba2e

080161f0 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80161f0:	b480      	push	{r7}
 80161f2:	b083      	sub	sp, #12
 80161f4:	af00      	add	r7, sp, #0
 80161f6:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80161f8:	687b      	ldr	r3, [r7, #4]
 80161fa:	4618      	mov	r0, r3
 80161fc:	370c      	adds	r7, #12
 80161fe:	46bd      	mov	sp, r7
 8016200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016204:	4770      	bx	lr

08016206 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8016206:	b580      	push	{r7, lr}
 8016208:	b084      	sub	sp, #16
 801620a:	af00      	add	r7, sp, #0
 801620c:	60f8      	str	r0, [r7, #12]
 801620e:	60b9      	str	r1, [r7, #8]
 8016210:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	2258      	movs	r2, #88	@ 0x58
 8016216:	fb02 f303 	mul.w	r3, r2, r3
 801621a:	4619      	mov	r1, r3
 801621c:	68b8      	ldr	r0, [r7, #8]
 801621e:	f00f fe4c 	bl	8025eba <_ZdlPvj>
      }
 8016222:	3710      	adds	r7, #16
 8016224:	46bd      	mov	sp, r7
 8016226:	bd80      	pop	{r7, pc}

08016228 <_ZSt10_ConstructI7TMC2208JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtS8_RbRP6RemoraEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8016228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801622c:	ed2d 8b02 	vpush	{d8}
 8016230:	b08c      	sub	sp, #48	@ 0x30
 8016232:	af02      	add	r7, sp, #8
 8016234:	60f8      	str	r0, [r7, #12]
 8016236:	60b9      	str	r1, [r7, #8]
 8016238:	607a      	str	r2, [r7, #4]
 801623a:	603b      	str	r3, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 801623c:	68fb      	ldr	r3, [r7, #12]
 801623e:	4619      	mov	r1, r3
 8016240:	204c      	movs	r0, #76	@ 0x4c
 8016242:	f7f3 fa5d 	bl	8009700 <_ZnwjPv>
 8016246:	4680      	mov	r8, r0
 8016248:	68b8      	ldr	r0, [r7, #8]
 801624a:	f7fe fb09 	bl	8014860 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801624e:	4602      	mov	r2, r0
 8016250:	f107 0310 	add.w	r3, r7, #16
 8016254:	4611      	mov	r1, r2
 8016256:	4618      	mov	r0, r3
 8016258:	f00f ff1c 	bl	8026094 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 801625c:	6878      	ldr	r0, [r7, #4]
 801625e:	f7fe fb0a 	bl	8014876 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8016262:	4603      	mov	r3, r0
 8016264:	ed93 8a00 	vldr	s16, [r3]
 8016268:	6838      	ldr	r0, [r7, #0]
 801626a:	f7fe fb0f 	bl	801488c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801626e:	4603      	mov	r3, r0
 8016270:	881d      	ldrh	r5, [r3, #0]
 8016272:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8016274:	f7fe fb0a 	bl	801488c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8016278:	4603      	mov	r3, r0
 801627a:	881e      	ldrh	r6, [r3, #0]
 801627c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801627e:	f7fa f80e 	bl	801029e <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8016282:	4603      	mov	r3, r0
 8016284:	781c      	ldrb	r4, [r3, #0]
 8016286:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8016288:	f7fe fb0b 	bl	80148a2 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 801628c:	4603      	mov	r3, r0
 801628e:	681b      	ldr	r3, [r3, #0]
 8016290:	f107 0110 	add.w	r1, r7, #16
 8016294:	9301      	str	r3, [sp, #4]
 8016296:	9400      	str	r4, [sp, #0]
 8016298:	4633      	mov	r3, r6
 801629a:	462a      	mov	r2, r5
 801629c:	eeb0 0a48 	vmov.f32	s0, s16
 80162a0:	4640      	mov	r0, r8
 80162a2:	f7fd fe81 	bl	8013fa8 <_ZN7TMC2208C1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfttbP6Remora>
 80162a6:	f107 0310 	add.w	r3, r7, #16
 80162aa:	4618      	mov	r0, r3
 80162ac:	f00f ff11 	bl	80260d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }
 80162b0:	bf00      	nop
 80162b2:	3728      	adds	r7, #40	@ 0x28
 80162b4:	46bd      	mov	sp, r7
 80162b6:	ecbd 8b02 	vpop	{d8}
 80162ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080162be <_ZN9__gnu_cxx16__aligned_bufferI7TMC2208E7_M_addrEv>:
      _M_addr() noexcept
 80162be:	b480      	push	{r7}
 80162c0:	b083      	sub	sp, #12
 80162c2:	af00      	add	r7, sp, #0
 80162c4:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 80162c6:	687b      	ldr	r3, [r7, #4]
      }
 80162c8:	4618      	mov	r0, r3
 80162ca:	370c      	adds	r7, #12
 80162cc:	46bd      	mov	sp, r7
 80162ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162d2:	4770      	bx	lr

080162d4 <_ZNKSt10__weak_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EE9use_countEv>:
      use_count() const noexcept
 80162d4:	b580      	push	{r7, lr}
 80162d6:	b082      	sub	sp, #8
 80162d8:	af00      	add	r7, sp, #0
 80162da:	6078      	str	r0, [r7, #4]
      { return _M_refcount._M_get_use_count(); }
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	3304      	adds	r3, #4
 80162e0:	4618      	mov	r0, r3
 80162e2:	f000 f94d 	bl	8016580 <_ZNKSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EE16_M_get_use_countEv>
 80162e6:	4603      	mov	r3, r0
 80162e8:	4618      	mov	r0, r3
 80162ea:	3708      	adds	r7, #8
 80162ec:	46bd      	mov	sp, r7
 80162ee:	bd80      	pop	{r7, pc}

080162f0 <_ZNSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EEaSERKSt14__shared_countILS1_0EE>:
      operator=(const __shared_count<_Lp>& __r) noexcept
 80162f0:	b580      	push	{r7, lr}
 80162f2:	b084      	sub	sp, #16
 80162f4:	af00      	add	r7, sp, #0
 80162f6:	6078      	str	r0, [r7, #4]
 80162f8:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80162fa:	683b      	ldr	r3, [r7, #0]
 80162fc:	681b      	ldr	r3, [r3, #0]
 80162fe:	60fb      	str	r3, [r7, #12]
	if (__tmp != nullptr)
 8016300:	68fb      	ldr	r3, [r7, #12]
 8016302:	2b00      	cmp	r3, #0
 8016304:	d002      	beq.n	801630c <_ZNSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EEaSERKSt14__shared_countILS1_0EE+0x1c>
	  __tmp->_M_weak_add_ref();
 8016306:	68f8      	ldr	r0, [r7, #12]
 8016308:	f7fd fb32 	bl	8013970 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_weak_add_refEv>
	if (_M_pi != nullptr)
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	681b      	ldr	r3, [r3, #0]
 8016310:	2b00      	cmp	r3, #0
 8016312:	d004      	beq.n	801631e <_ZNSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EEaSERKSt14__shared_countILS1_0EE+0x2e>
	  _M_pi->_M_weak_release();
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	681b      	ldr	r3, [r3, #0]
 8016318:	4618      	mov	r0, r3
 801631a:	f7fd fb38 	bl	801398e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_weak_releaseEv>
	_M_pi = __tmp;
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	68fa      	ldr	r2, [r7, #12]
 8016322:	601a      	str	r2, [r3, #0]
	return *this;
 8016324:	687b      	ldr	r3, [r7, #4]
      }
 8016326:	4618      	mov	r0, r3
 8016328:	3710      	adds	r7, #16
 801632a:	46bd      	mov	sp, r7
 801632c:	bd80      	pop	{r7, pc}

0801632e <_ZNSt10_Head_baseILj1ESt14default_deleteI14TMC2208StepperELb1EEC1Ev>:
      constexpr _Head_base()
 801632e:	b480      	push	{r7}
 8016330:	b083      	sub	sp, #12
 8016332:	af00      	add	r7, sp, #0
 8016334:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	4618      	mov	r0, r3
 801633a:	370c      	adds	r7, #12
 801633c:	46bd      	mov	sp, r7
 801633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016342:	4770      	bx	lr

08016344 <_ZNSt10_Head_baseILj1ESt14default_deleteI14TMC2208StepperELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8016344:	b480      	push	{r7}
 8016346:	b083      	sub	sp, #12
 8016348:	af00      	add	r7, sp, #0
 801634a:	6078      	str	r0, [r7, #4]
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	4618      	mov	r0, r3
 8016350:	370c      	adds	r7, #12
 8016352:	46bd      	mov	sp, r7
 8016354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016358:	4770      	bx	lr

0801635a <_ZNSt10_Head_baseILj0EP14TMC2208StepperLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 801635a:	b480      	push	{r7}
 801635c:	b083      	sub	sp, #12
 801635e:	af00      	add	r7, sp, #0
 8016360:	6078      	str	r0, [r7, #4]
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	4618      	mov	r0, r3
 8016366:	370c      	adds	r7, #12
 8016368:	46bd      	mov	sp, r7
 801636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801636e:	4770      	bx	lr

08016370 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda>:
  void writeFloat(JsonFloat value, int8_t decimalPlaces) {
 8016370:	b580      	push	{r7, lr}
 8016372:	b088      	sub	sp, #32
 8016374:	af00      	add	r7, sp, #0
 8016376:	60f8      	str	r0, [r7, #12]
 8016378:	ed87 0b00 	vstr	d0, [r7]
 801637c:	460b      	mov	r3, r1
 801637e:	72fb      	strb	r3, [r7, #11]
    if (isnan(value))
 8016380:	ed97 0b00 	vldr	d0, [r7]
 8016384:	f7ff fd68 	bl	8015e58 <_ZN11ArduinoJson8V730HB226detail5isnanIdEEbT_>
 8016388:	4603      	mov	r3, r0
 801638a:	2b00      	cmp	r3, #0
 801638c:	d004      	beq.n	8016398 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0x28>
      return writeRaw(ARDUINOJSON_ENABLE_NAN ? "NaN" : "null");
 801638e:	4926      	ldr	r1, [pc, #152]	@ (8016428 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0xb8>)
 8016390:	68f8      	ldr	r0, [r7, #12]
 8016392:	f7ff fb0a 	bl	80159aa <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
 8016396:	e044      	b.n	8016422 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0xb2>
    if (isinf(value))
 8016398:	ed97 0b00 	vldr	d0, [r7]
 801639c:	f7ff fd73 	bl	8015e86 <_ZN11ArduinoJson8V730HB226detail5isinfIdEEbT_>
 80163a0:	4603      	mov	r3, r0
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	d004      	beq.n	80163b0 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0x40>
      return writeRaw("null");
 80163a6:	4920      	ldr	r1, [pc, #128]	@ (8016428 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0xb8>)
 80163a8:	68f8      	ldr	r0, [r7, #12]
 80163aa:	f7ff fafe 	bl	80159aa <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
 80163ae:	e038      	b.n	8016422 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0xb2>
    if (value < 0.0) {
 80163b0:	ed97 7b00 	vldr	d7, [r7]
 80163b4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80163b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163bc:	d509      	bpl.n	80163d2 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0x62>
      writeRaw('-');
 80163be:	212d      	movs	r1, #45	@ 0x2d
 80163c0:	68f8      	ldr	r0, [r7, #12]
 80163c2:	f000 f833 	bl	801642c <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
      value = -value;
 80163c6:	ed97 7b00 	vldr	d7, [r7]
 80163ca:	eeb1 7b47 	vneg.f64	d7, d7
 80163ce:	ed87 7b00 	vstr	d7, [r7]
    auto parts = decomposeFloat(value, decimalPlaces);
 80163d2:	f107 0314 	add.w	r3, r7, #20
 80163d6:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80163da:	4611      	mov	r1, r2
 80163dc:	ed97 0b00 	vldr	d0, [r7]
 80163e0:	4618      	mov	r0, r3
 80163e2:	f7fd fb65 	bl	8013ab0 <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda>
    writeInteger(parts.integral);
 80163e6:	697b      	ldr	r3, [r7, #20]
 80163e8:	4619      	mov	r1, r3
 80163ea:	68f8      	ldr	r0, [r7, #12]
 80163ec:	f000 f8dc 	bl	80165a8 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>
    if (parts.decimalPlaces)
 80163f0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	d006      	beq.n	8016406 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0x96>
      writeDecimals(parts.decimal, parts.decimalPlaces);
 80163f8:	69bb      	ldr	r3, [r7, #24]
 80163fa:	f997 201e 	ldrsb.w	r2, [r7, #30]
 80163fe:	4619      	mov	r1, r3
 8016400:	68f8      	ldr	r0, [r7, #12]
 8016402:	f000 f903 	bl	801660c <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma>
    if (parts.exponent) {
 8016406:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801640a:	2b00      	cmp	r3, #0
 801640c:	d009      	beq.n	8016422 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0xb2>
      writeRaw('e');
 801640e:	2165      	movs	r1, #101	@ 0x65
 8016410:	68f8      	ldr	r0, [r7, #12]
 8016412:	f000 f80b 	bl	801642c <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
      writeInteger(parts.exponent);
 8016416:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801641a:	4619      	mov	r1, r3
 801641c:	68f8      	ldr	r0, [r7, #12]
 801641e:	f000 f939 	bl	8016694 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIsEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_>
  }
 8016422:	3720      	adds	r7, #32
 8016424:	46bd      	mov	sp, r7
 8016426:	bd80      	pop	{r7, pc}
 8016428:	08028534 	.word	0x08028534

0801642c <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>:

  template <size_t N>
  void writeRaw(const char (&s)[N]) {
    writer_.write(reinterpret_cast<const uint8_t*>(s), N - 1);
  }
  void writeRaw(char c) {
 801642c:	b580      	push	{r7, lr}
 801642e:	b082      	sub	sp, #8
 8016430:	af00      	add	r7, sp, #0
 8016432:	6078      	str	r0, [r7, #4]
 8016434:	460b      	mov	r3, r1
 8016436:	70fb      	strb	r3, [r7, #3]
    writer_.write(static_cast<uint8_t>(c));
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	78fa      	ldrb	r2, [r7, #3]
 801643c:	4611      	mov	r1, r2
 801643e:	4618      	mov	r0, r3
 8016440:	f000 f945 	bl	80166ce <_ZN11ArduinoJson8V730HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEh>
  }
 8016444:	bf00      	nop
 8016446:	3708      	adds	r7, #8
 8016448:	46bd      	mov	sp, r7
 801644a:	bd80      	pop	{r7, pc}

0801644c <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc>:
  void writeChar(char c) {
 801644c:	b580      	push	{r7, lr}
 801644e:	b084      	sub	sp, #16
 8016450:	af00      	add	r7, sp, #0
 8016452:	6078      	str	r0, [r7, #4]
 8016454:	460b      	mov	r3, r1
 8016456:	70fb      	strb	r3, [r7, #3]
    char specialChar = EscapeSequence::escapeChar(c);
 8016458:	78fb      	ldrb	r3, [r7, #3]
 801645a:	4618      	mov	r0, r3
 801645c:	f7fd faf3 	bl	8013a46 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence10escapeCharEc>
 8016460:	4603      	mov	r3, r0
 8016462:	73fb      	strb	r3, [r7, #15]
    if (specialChar) {
 8016464:	7bfb      	ldrb	r3, [r7, #15]
 8016466:	2b00      	cmp	r3, #0
 8016468:	d009      	beq.n	801647e <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc+0x32>
      writeRaw('\\');
 801646a:	215c      	movs	r1, #92	@ 0x5c
 801646c:	6878      	ldr	r0, [r7, #4]
 801646e:	f7ff ffdd 	bl	801642c <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
      writeRaw(specialChar);
 8016472:	7bfb      	ldrb	r3, [r7, #15]
 8016474:	4619      	mov	r1, r3
 8016476:	6878      	ldr	r0, [r7, #4]
 8016478:	f7ff ffd8 	bl	801642c <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
  }
 801647c:	e00c      	b.n	8016498 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc+0x4c>
    } else if (c) {
 801647e:	78fb      	ldrb	r3, [r7, #3]
 8016480:	2b00      	cmp	r3, #0
 8016482:	d005      	beq.n	8016490 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc+0x44>
      writeRaw(c);
 8016484:	78fb      	ldrb	r3, [r7, #3]
 8016486:	4619      	mov	r1, r3
 8016488:	6878      	ldr	r0, [r7, #4]
 801648a:	f7ff ffcf 	bl	801642c <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
  }
 801648e:	e003      	b.n	8016498 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc+0x4c>
      writeRaw("\\u0000");
 8016490:	4903      	ldr	r1, [pc, #12]	@ (80164a0 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc+0x54>)
 8016492:	6878      	ldr	r0, [r7, #4]
 8016494:	f7ff fa89 	bl	80159aa <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
  }
 8016498:	bf00      	nop
 801649a:	3710      	adds	r7, #16
 801649c:	46bd      	mov	sp, r7
 801649e:	bd80      	pop	{r7, pc}
 80164a0:	0802854c 	.word	0x0802854c

080164a4 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcSD_>:
  void writeRaw(const char* begin, const char* end) {
 80164a4:	b580      	push	{r7, lr}
 80164a6:	b084      	sub	sp, #16
 80164a8:	af00      	add	r7, sp, #0
 80164aa:	60f8      	str	r0, [r7, #12]
 80164ac:	60b9      	str	r1, [r7, #8]
 80164ae:	607a      	str	r2, [r7, #4]
    writer_.write(reinterpret_cast<const uint8_t*>(begin),
 80164b0:	68f8      	ldr	r0, [r7, #12]
                  static_cast<size_t>(end - begin));
 80164b2:	687a      	ldr	r2, [r7, #4]
 80164b4:	68bb      	ldr	r3, [r7, #8]
 80164b6:	1ad3      	subs	r3, r2, r3
    writer_.write(reinterpret_cast<const uint8_t*>(begin),
 80164b8:	461a      	mov	r2, r3
 80164ba:	68b9      	ldr	r1, [r7, #8]
 80164bc:	f7ff fde0 	bl	8016080 <_ZN11ArduinoJson8V730HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEPKhj>
  }
 80164c0:	bf00      	nop
 80164c2:	3710      	adds	r7, #16
 80164c4:	46bd      	mov	sp, r7
 80164c6:	bd80      	pop	{r7, pc}

080164c8 <_ZN11ArduinoJson8V730HB226detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE5writeEPKhj>:
  size_t write(uint8_t c) {
    str_->push_back(static_cast<char>(c));
    return 1;
  }

  size_t write(const uint8_t* s, size_t n) {
 80164c8:	b580      	push	{r7, lr}
 80164ca:	b084      	sub	sp, #16
 80164cc:	af00      	add	r7, sp, #0
 80164ce:	60f8      	str	r0, [r7, #12]
 80164d0:	60b9      	str	r1, [r7, #8]
 80164d2:	607a      	str	r2, [r7, #4]
    str_->append(reinterpret_cast<const char*>(s), n);
 80164d4:	68fb      	ldr	r3, [r7, #12]
 80164d6:	681b      	ldr	r3, [r3, #0]
 80164d8:	687a      	ldr	r2, [r7, #4]
 80164da:	68b9      	ldr	r1, [r7, #8]
 80164dc:	4618      	mov	r0, r3
 80164de:	f00f ffcb 	bl	8026478 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>
    return n;
 80164e2:	687b      	ldr	r3, [r7, #4]
  }
 80164e4:	4618      	mov	r0, r3
 80164e6:	3710      	adds	r7, #16
 80164e8:	46bd      	mov	sp, r7
 80164ea:	bd80      	pop	{r7, pc}

080164ec <_ZNK11ArduinoJson8V730HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5countEv>:

  size_t count() const {
 80164ec:	b480      	push	{r7}
 80164ee:	b083      	sub	sp, #12
 80164f0:	af00      	add	r7, sp, #0
 80164f2:	6078      	str	r0, [r7, #4]
    return count_;
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	685b      	ldr	r3, [r3, #4]
  }
 80164f8:	4618      	mov	r0, r3
 80164fa:	370c      	adds	r7, #12
 80164fc:	46bd      	mov	sp, r7
 80164fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016502:	4770      	bx	lr

08016504 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIffEENS1_9enable_ifIXaasrNS1_17is_floating_pointIT0_EE5valuesrNS4_IT_EE5valueEbE4typeES5_>:
canConvertNumber(TIn) {
 8016504:	b480      	push	{r7}
 8016506:	b083      	sub	sp, #12
 8016508:	af00      	add	r7, sp, #0
 801650a:	ed87 0a01 	vstr	s0, [r7, #4]
  return true;
 801650e:	2301      	movs	r3, #1
}
 8016510:	4618      	mov	r0, r3
 8016512:	370c      	adds	r7, #12
 8016514:	46bd      	mov	sp, r7
 8016516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801651a:	4770      	bx	lr

0801651c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIfxEENS1_9enable_ifIXaasrNS1_11is_integralIT0_EE5valuesrNS1_17is_floating_pointIT_EE5valueEbE4typeES5_>:
canConvertNumber(TIn) {
 801651c:	b480      	push	{r7}
 801651e:	b083      	sub	sp, #12
 8016520:	af00      	add	r7, sp, #0
 8016522:	e9c7 0100 	strd	r0, r1, [r7]
  return true;
 8016526:	2301      	movs	r3, #1
}
 8016528:	4618      	mov	r0, r3
 801652a:	370c      	adds	r7, #12
 801652c:	46bd      	mov	sp, r7
 801652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016532:	4770      	bx	lr

08016534 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIfyEENS1_9enable_ifIXaasrNS1_11is_integralIT0_EE5valuesrNS1_17is_floating_pointIT_EE5valueEbE4typeES5_>:
canConvertNumber(TIn) {
 8016534:	b480      	push	{r7}
 8016536:	b083      	sub	sp, #12
 8016538:	af00      	add	r7, sp, #0
 801653a:	e9c7 0100 	strd	r0, r1, [r7]
  return true;
 801653e:	2301      	movs	r3, #1
}
 8016540:	4618      	mov	r0, r3
 8016542:	370c      	adds	r7, #12
 8016544:	46bd      	mov	sp, r7
 8016546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801654a:	4770      	bx	lr

0801654c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIfdEENS1_9enable_ifIXaasrNS1_17is_floating_pointIT0_EE5valuesrNS4_IT_EE5valueEbE4typeES5_>:
canConvertNumber(TIn) {
 801654c:	b480      	push	{r7}
 801654e:	b083      	sub	sp, #12
 8016550:	af00      	add	r7, sp, #0
 8016552:	ed87 0b00 	vstr	d0, [r7]
  return true;
 8016556:	2301      	movs	r3, #1
}
 8016558:	4618      	mov	r0, r3
 801655a:	370c      	adds	r7, #12
 801655c:	46bd      	mov	sp, r7
 801655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016562:	4770      	bx	lr

08016564 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8016564:	b480      	push	{r7}
 8016566:	b083      	sub	sp, #12
 8016568:	af00      	add	r7, sp, #0
 801656a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 801656c:	4b03      	ldr	r3, [pc, #12]	@ (801657c <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv+0x18>)
      }
 801656e:	4618      	mov	r0, r3
 8016570:	370c      	adds	r7, #12
 8016572:	46bd      	mov	sp, r7
 8016574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016578:	4770      	bx	lr
 801657a:	bf00      	nop
 801657c:	01745d17 	.word	0x01745d17

08016580 <_ZNKSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EE16_M_get_use_countEv>:
      _M_get_use_count() const noexcept
 8016580:	b580      	push	{r7, lr}
 8016582:	b082      	sub	sp, #8
 8016584:	af00      	add	r7, sp, #0
 8016586:	6078      	str	r0, [r7, #4]
      { return _M_pi != nullptr ? _M_pi->_M_get_use_count() : 0; }
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	681b      	ldr	r3, [r3, #0]
 801658c:	2b00      	cmp	r3, #0
 801658e:	d006      	beq.n	801659e <_ZNKSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EE16_M_get_use_countEv+0x1e>
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	681b      	ldr	r3, [r3, #0]
 8016594:	4618      	mov	r0, r3
 8016596:	f7fd fa16 	bl	80139c6 <_ZNKSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE16_M_get_use_countEv>
 801659a:	4603      	mov	r3, r0
 801659c:	e000      	b.n	80165a0 <_ZNKSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EE16_M_get_use_countEv+0x20>
 801659e:	2300      	movs	r3, #0
 80165a0:	4618      	mov	r0, r3
 80165a2:	3708      	adds	r7, #8
 80165a4:	46bd      	mov	sp, r7
 80165a6:	bd80      	pop	{r7, pc}

080165a8 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>:
  enable_if_t<is_unsigned<T>::value> writeInteger(T value) {
 80165a8:	b580      	push	{r7, lr}
 80165aa:	b08a      	sub	sp, #40	@ 0x28
 80165ac:	af00      	add	r7, sp, #0
 80165ae:	6078      	str	r0, [r7, #4]
 80165b0:	6039      	str	r1, [r7, #0]
    char* end = buffer + sizeof(buffer);
 80165b2:	f107 0308 	add.w	r3, r7, #8
 80165b6:	3316      	adds	r3, #22
 80165b8:	623b      	str	r3, [r7, #32]
    char* begin = end;
 80165ba:	6a3b      	ldr	r3, [r7, #32]
 80165bc:	627b      	str	r3, [r7, #36]	@ 0x24
      *--begin = char(value % 10 + '0');
 80165be:	6839      	ldr	r1, [r7, #0]
 80165c0:	4b11      	ldr	r3, [pc, #68]	@ (8016608 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x60>)
 80165c2:	fba3 2301 	umull	r2, r3, r3, r1
 80165c6:	08da      	lsrs	r2, r3, #3
 80165c8:	4613      	mov	r3, r2
 80165ca:	009b      	lsls	r3, r3, #2
 80165cc:	4413      	add	r3, r2
 80165ce:	005b      	lsls	r3, r3, #1
 80165d0:	1aca      	subs	r2, r1, r3
 80165d2:	b2d3      	uxtb	r3, r2
 80165d4:	3330      	adds	r3, #48	@ 0x30
 80165d6:	b2da      	uxtb	r2, r3
 80165d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165da:	3b01      	subs	r3, #1
 80165dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80165de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165e0:	701a      	strb	r2, [r3, #0]
      value = T(value / 10);
 80165e2:	683b      	ldr	r3, [r7, #0]
 80165e4:	4a08      	ldr	r2, [pc, #32]	@ (8016608 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x60>)
 80165e6:	fba2 2303 	umull	r2, r3, r2, r3
 80165ea:	08db      	lsrs	r3, r3, #3
 80165ec:	603b      	str	r3, [r7, #0]
    } while (value);
 80165ee:	683b      	ldr	r3, [r7, #0]
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d1e4      	bne.n	80165be <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x16>
    writeRaw(begin, end);
 80165f4:	6a3a      	ldr	r2, [r7, #32]
 80165f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80165f8:	6878      	ldr	r0, [r7, #4]
 80165fa:	f7ff ff53 	bl	80164a4 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcSD_>
  }
 80165fe:	bf00      	nop
 8016600:	3728      	adds	r7, #40	@ 0x28
 8016602:	46bd      	mov	sp, r7
 8016604:	bd80      	pop	{r7, pc}
 8016606:	bf00      	nop
 8016608:	cccccccd 	.word	0xcccccccd

0801660c <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma>:
  void writeDecimals(uint32_t value, int8_t width) {
 801660c:	b580      	push	{r7, lr}
 801660e:	b08a      	sub	sp, #40	@ 0x28
 8016610:	af00      	add	r7, sp, #0
 8016612:	60f8      	str	r0, [r7, #12]
 8016614:	60b9      	str	r1, [r7, #8]
 8016616:	4613      	mov	r3, r2
 8016618:	71fb      	strb	r3, [r7, #7]
    char* end = buffer + sizeof(buffer);
 801661a:	f107 0310 	add.w	r3, r7, #16
 801661e:	3310      	adds	r3, #16
 8016620:	623b      	str	r3, [r7, #32]
    char* begin = end;
 8016622:	6a3b      	ldr	r3, [r7, #32]
 8016624:	627b      	str	r3, [r7, #36]	@ 0x24
    while (width--) {
 8016626:	e017      	b.n	8016658 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma+0x4c>
      *--begin = char(value % 10 + '0');
 8016628:	68b9      	ldr	r1, [r7, #8]
 801662a:	4b19      	ldr	r3, [pc, #100]	@ (8016690 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma+0x84>)
 801662c:	fba3 2301 	umull	r2, r3, r3, r1
 8016630:	08da      	lsrs	r2, r3, #3
 8016632:	4613      	mov	r3, r2
 8016634:	009b      	lsls	r3, r3, #2
 8016636:	4413      	add	r3, r2
 8016638:	005b      	lsls	r3, r3, #1
 801663a:	1aca      	subs	r2, r1, r3
 801663c:	b2d3      	uxtb	r3, r2
 801663e:	3330      	adds	r3, #48	@ 0x30
 8016640:	b2da      	uxtb	r2, r3
 8016642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016644:	3b01      	subs	r3, #1
 8016646:	627b      	str	r3, [r7, #36]	@ 0x24
 8016648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801664a:	701a      	strb	r2, [r3, #0]
      value /= 10;
 801664c:	68bb      	ldr	r3, [r7, #8]
 801664e:	4a10      	ldr	r2, [pc, #64]	@ (8016690 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma+0x84>)
 8016650:	fba2 2303 	umull	r2, r3, r2, r3
 8016654:	08db      	lsrs	r3, r3, #3
 8016656:	60bb      	str	r3, [r7, #8]
    while (width--) {
 8016658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801665c:	b2da      	uxtb	r2, r3
 801665e:	3a01      	subs	r2, #1
 8016660:	b2d2      	uxtb	r2, r2
 8016662:	71fa      	strb	r2, [r7, #7]
 8016664:	2b00      	cmp	r3, #0
 8016666:	bf14      	ite	ne
 8016668:	2301      	movne	r3, #1
 801666a:	2300      	moveq	r3, #0
 801666c:	b2db      	uxtb	r3, r3
 801666e:	2b00      	cmp	r3, #0
 8016670:	d1da      	bne.n	8016628 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma+0x1c>
    *--begin = '.';
 8016672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016674:	3b01      	subs	r3, #1
 8016676:	627b      	str	r3, [r7, #36]	@ 0x24
 8016678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801667a:	222e      	movs	r2, #46	@ 0x2e
 801667c:	701a      	strb	r2, [r3, #0]
    writeRaw(begin, end);
 801667e:	6a3a      	ldr	r2, [r7, #32]
 8016680:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016682:	68f8      	ldr	r0, [r7, #12]
 8016684:	f7ff ff0e 	bl	80164a4 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcSD_>
  }
 8016688:	bf00      	nop
 801668a:	3728      	adds	r7, #40	@ 0x28
 801668c:	46bd      	mov	sp, r7
 801668e:	bd80      	pop	{r7, pc}
 8016690:	cccccccd 	.word	0xcccccccd

08016694 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIsEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_>:
  enable_if_t<is_signed<T>::value> writeInteger(T value) {
 8016694:	b580      	push	{r7, lr}
 8016696:	b084      	sub	sp, #16
 8016698:	af00      	add	r7, sp, #0
 801669a:	6078      	str	r0, [r7, #4]
 801669c:	460b      	mov	r3, r1
 801669e:	807b      	strh	r3, [r7, #2]
    if (value < 0) {
 80166a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80166a4:	2b00      	cmp	r3, #0
 80166a6:	da07      	bge.n	80166b8 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIsEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_+0x24>
      writeRaw('-');
 80166a8:	212d      	movs	r1, #45	@ 0x2d
 80166aa:	6878      	ldr	r0, [r7, #4]
 80166ac:	f7ff febe 	bl	801642c <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
      unsigned_value = unsigned_type(unsigned_type(~value) + 1);
 80166b0:	887b      	ldrh	r3, [r7, #2]
 80166b2:	425b      	negs	r3, r3
 80166b4:	81fb      	strh	r3, [r7, #14]
 80166b6:	e001      	b.n	80166bc <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIsEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_+0x28>
      unsigned_value = unsigned_type(value);
 80166b8:	887b      	ldrh	r3, [r7, #2]
 80166ba:	81fb      	strh	r3, [r7, #14]
    writeInteger(unsigned_value);
 80166bc:	89fb      	ldrh	r3, [r7, #14]
 80166be:	4619      	mov	r1, r3
 80166c0:	6878      	ldr	r0, [r7, #4]
 80166c2:	f000 f81b 	bl	80166fc <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>
  }
 80166c6:	bf00      	nop
 80166c8:	3710      	adds	r7, #16
 80166ca:	46bd      	mov	sp, r7
 80166cc:	bd80      	pop	{r7, pc}

080166ce <_ZN11ArduinoJson8V730HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEh>:
  void write(uint8_t c) {
 80166ce:	b580      	push	{r7, lr}
 80166d0:	b082      	sub	sp, #8
 80166d2:	af00      	add	r7, sp, #0
 80166d4:	6078      	str	r0, [r7, #4]
 80166d6:	460b      	mov	r3, r1
 80166d8:	70fb      	strb	r3, [r7, #3]
    count_ += writer_.write(c);
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	78fa      	ldrb	r2, [r7, #3]
 80166de:	4611      	mov	r1, r2
 80166e0:	4618      	mov	r0, r3
 80166e2:	f000 f83f 	bl	8016764 <_ZN11ArduinoJson8V730HB226detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE5writeEh>
 80166e6:	4602      	mov	r2, r0
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	685b      	ldr	r3, [r3, #4]
 80166ec:	441a      	add	r2, r3
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	605a      	str	r2, [r3, #4]
  }
 80166f2:	bf00      	nop
 80166f4:	3708      	adds	r7, #8
 80166f6:	46bd      	mov	sp, r7
 80166f8:	bd80      	pop	{r7, pc}
	...

080166fc <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>:
  enable_if_t<is_unsigned<T>::value> writeInteger(T value) {
 80166fc:	b580      	push	{r7, lr}
 80166fe:	b08a      	sub	sp, #40	@ 0x28
 8016700:	af00      	add	r7, sp, #0
 8016702:	6078      	str	r0, [r7, #4]
 8016704:	460b      	mov	r3, r1
 8016706:	807b      	strh	r3, [r7, #2]
    char* end = buffer + sizeof(buffer);
 8016708:	f107 0308 	add.w	r3, r7, #8
 801670c:	3316      	adds	r3, #22
 801670e:	623b      	str	r3, [r7, #32]
    char* begin = end;
 8016710:	6a3b      	ldr	r3, [r7, #32]
 8016712:	627b      	str	r3, [r7, #36]	@ 0x24
      *--begin = char(value % 10 + '0');
 8016714:	887a      	ldrh	r2, [r7, #2]
 8016716:	4b12      	ldr	r3, [pc, #72]	@ (8016760 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x64>)
 8016718:	fba3 1302 	umull	r1, r3, r3, r2
 801671c:	08d9      	lsrs	r1, r3, #3
 801671e:	460b      	mov	r3, r1
 8016720:	009b      	lsls	r3, r3, #2
 8016722:	440b      	add	r3, r1
 8016724:	005b      	lsls	r3, r3, #1
 8016726:	1ad3      	subs	r3, r2, r3
 8016728:	b29b      	uxth	r3, r3
 801672a:	b2db      	uxtb	r3, r3
 801672c:	3330      	adds	r3, #48	@ 0x30
 801672e:	b2da      	uxtb	r2, r3
 8016730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016732:	3b01      	subs	r3, #1
 8016734:	627b      	str	r3, [r7, #36]	@ 0x24
 8016736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016738:	701a      	strb	r2, [r3, #0]
      value = T(value / 10);
 801673a:	887b      	ldrh	r3, [r7, #2]
 801673c:	4a08      	ldr	r2, [pc, #32]	@ (8016760 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x64>)
 801673e:	fba2 2303 	umull	r2, r3, r2, r3
 8016742:	08db      	lsrs	r3, r3, #3
 8016744:	807b      	strh	r3, [r7, #2]
    } while (value);
 8016746:	887b      	ldrh	r3, [r7, #2]
 8016748:	2b00      	cmp	r3, #0
 801674a:	d1e3      	bne.n	8016714 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x18>
    writeRaw(begin, end);
 801674c:	6a3a      	ldr	r2, [r7, #32]
 801674e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016750:	6878      	ldr	r0, [r7, #4]
 8016752:	f7ff fea7 	bl	80164a4 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcSD_>
  }
 8016756:	bf00      	nop
 8016758:	3728      	adds	r7, #40	@ 0x28
 801675a:	46bd      	mov	sp, r7
 801675c:	bd80      	pop	{r7, pc}
 801675e:	bf00      	nop
 8016760:	cccccccd 	.word	0xcccccccd

08016764 <_ZN11ArduinoJson8V730HB226detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE5writeEh>:
  size_t write(uint8_t c) {
 8016764:	b580      	push	{r7, lr}
 8016766:	b082      	sub	sp, #8
 8016768:	af00      	add	r7, sp, #0
 801676a:	6078      	str	r0, [r7, #4]
 801676c:	460b      	mov	r3, r1
 801676e:	70fb      	strb	r3, [r7, #3]
    str_->push_back(static_cast<char>(c));
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	681b      	ldr	r3, [r3, #0]
 8016774:	78fa      	ldrb	r2, [r7, #3]
 8016776:	4611      	mov	r1, r2
 8016778:	4618      	mov	r0, r3
 801677a:	f00f fd72 	bl	8026262 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
    return 1;
 801677e:	2301      	movs	r3, #1
  }
 8016780:	4618      	mov	r0, r3
 8016782:	3708      	adds	r7, #8
 8016784:	46bd      	mov	sp, r7
 8016786:	bd80      	pop	{r7, pc}

08016788 <_ZN7TMC2208D1Ev>:

public:

	TMC2208(std::string, float, uint16_t, uint16_t, bool, Remora*);
	static std::shared_ptr<Module> create(const JsonObject& config, Remora* instance);
	~TMC2208() = default;
 8016788:	b580      	push	{r7, lr}
 801678a:	b082      	sub	sp, #8
 801678c:	af00      	add	r7, sp, #0
 801678e:	6078      	str	r0, [r7, #4]
 8016790:	4a0a      	ldr	r2, [pc, #40]	@ (80167bc <_ZN7TMC2208D1Ev+0x34>)
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	601a      	str	r2, [r3, #0]
 8016796:	687b      	ldr	r3, [r7, #4]
 8016798:	3348      	adds	r3, #72	@ 0x48
 801679a:	4618      	mov	r0, r3
 801679c:	f7fd ff6c 	bl	8014678 <_ZNSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EED1Ev>
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	3328      	adds	r3, #40	@ 0x28
 80167a4:	4618      	mov	r0, r3
 80167a6:	f00f fc94 	bl	80260d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	4618      	mov	r0, r3
 80167ae:	f7fd fbd3 	bl	8013f58 <_ZN3TMCD1Ev>
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	4618      	mov	r0, r3
 80167b6:	3708      	adds	r7, #8
 80167b8:	46bd      	mov	sp, r7
 80167ba:	bd80      	pop	{r7, pc}
 80167bc:	08028b90 	.word	0x08028b90

080167c0 <_ZN7TMC2208D0Ev>:
 80167c0:	b580      	push	{r7, lr}
 80167c2:	b082      	sub	sp, #8
 80167c4:	af00      	add	r7, sp, #0
 80167c6:	6078      	str	r0, [r7, #4]
 80167c8:	6878      	ldr	r0, [r7, #4]
 80167ca:	f7ff ffdd 	bl	8016788 <_ZN7TMC2208D1Ev>
 80167ce:	214c      	movs	r1, #76	@ 0x4c
 80167d0:	6878      	ldr	r0, [r7, #4]
 80167d2:	f00f fb72 	bl	8025eba <_ZdlPvj>
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	4618      	mov	r0, r3
 80167da:	3708      	adds	r7, #8
 80167dc:	46bd      	mov	sp, r7
 80167de:	bd80      	pop	{r7, pc}

080167e0 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 80167e0:	b580      	push	{r7, lr}
 80167e2:	b082      	sub	sp, #8
 80167e4:	af00      	add	r7, sp, #0
 80167e6:	6078      	str	r0, [r7, #4]
 80167e8:	4a05      	ldr	r2, [pc, #20]	@ (8016800 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	601a      	str	r2, [r3, #0]
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	4618      	mov	r0, r3
 80167f2:	f7f4 fdd9 	bl	800b3a8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	4618      	mov	r0, r3
 80167fa:	3708      	adds	r7, #8
 80167fc:	46bd      	mov	sp, r7
 80167fe:	bd80      	pop	{r7, pc}
 8016800:	08028b74 	.word	0x08028b74

08016804 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 8016804:	b580      	push	{r7, lr}
 8016806:	b082      	sub	sp, #8
 8016808:	af00      	add	r7, sp, #0
 801680a:	6078      	str	r0, [r7, #4]
 801680c:	6878      	ldr	r0, [r7, #4]
 801680e:	f7ff ffe7 	bl	80167e0 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8016812:	2158      	movs	r1, #88	@ 0x58
 8016814:	6878      	ldr	r0, [r7, #4]
 8016816:	f00f fb50 	bl	8025eba <_ZdlPvj>
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	4618      	mov	r0, r3
 801681e:	3708      	adds	r7, #8
 8016820:	46bd      	mov	sp, r7
 8016822:	bd80      	pop	{r7, pc}

08016824 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8016824:	b590      	push	{r4, r7, lr}
 8016826:	b083      	sub	sp, #12
 8016828:	af00      	add	r7, sp, #0
 801682a:	6078      	str	r0, [r7, #4]
	allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	330c      	adds	r3, #12
 8016830:	4618      	mov	r0, r3
 8016832:	f000 f856 	bl	80168e2 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 8016836:	4604      	mov	r4, r0
 8016838:	6878      	ldr	r0, [r7, #4]
 801683a:	f7fe ff1a 	bl	8015672 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 801683e:	4603      	mov	r3, r0
 8016840:	4619      	mov	r1, r3
 8016842:	4620      	mov	r0, r4
 8016844:	f000 f859 	bl	80168fa <_ZNSt16allocator_traitsISaIvEE7destroyI7TMC2208EEvRS0_PT_>
      }
 8016848:	bf00      	nop
 801684a:	370c      	adds	r7, #12
 801684c:	46bd      	mov	sp, r7
 801684e:	bd90      	pop	{r4, r7, pc}

08016850 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8016850:	b580      	push	{r7, lr}
 8016852:	b086      	sub	sp, #24
 8016854:	af00      	add	r7, sp, #0
 8016856:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	330c      	adds	r3, #12
 801685c:	4618      	mov	r0, r3
 801685e:	f000 f840 	bl	80168e2 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 8016862:	4602      	mov	r2, r0
 8016864:	f107 0314 	add.w	r3, r7, #20
 8016868:	4611      	mov	r1, r2
 801686a:	4618      	mov	r0, r3
 801686c:	f7fe fe5e 	bl	801552c <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8016870:	f107 0114 	add.w	r1, r7, #20
 8016874:	f107 030c 	add.w	r3, r7, #12
 8016878:	687a      	ldr	r2, [r7, #4]
 801687a:	4618      	mov	r0, r3
 801687c:	f7ff fa19 	bl	8015cb2 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
	this->~_Sp_counted_ptr_inplace();
 8016880:	6878      	ldr	r0, [r7, #4]
 8016882:	f7ff ffad 	bl	80167e0 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 8016886:	f107 030c 	add.w	r3, r7, #12
 801688a:	4618      	mov	r0, r3
 801688c:	f7fe fe7a 	bl	8015584 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 8016890:	f107 0314 	add.w	r3, r7, #20
 8016894:	4618      	mov	r0, r3
 8016896:	f7fe fe56 	bl	8015546 <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 801689a:	3718      	adds	r7, #24
 801689c:	46bd      	mov	sp, r7
 801689e:	bd80      	pop	{r7, pc}

080168a0 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80168a0:	b580      	push	{r7, lr}
 80168a2:	b084      	sub	sp, #16
 80168a4:	af00      	add	r7, sp, #0
 80168a6:	6078      	str	r0, [r7, #4]
 80168a8:	6039      	str	r1, [r7, #0]
	auto __ptr = const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());
 80168aa:	6878      	ldr	r0, [r7, #4]
 80168ac:	f7fe fee1 	bl	8015672 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 80168b0:	60f8      	str	r0, [r7, #12]
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 80168b2:	f7f2 ff71 	bl	8009798 <_ZNSt19_Sp_make_shared_tag5_S_tiEv>
 80168b6:	4602      	mov	r2, r0
	    ||
 80168b8:	683b      	ldr	r3, [r7, #0]
 80168ba:	4293      	cmp	r3, r2
 80168bc:	d005      	beq.n	80168ca <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 80168be:	6838      	ldr	r0, [r7, #0]
 80168c0:	f00f fb38 	bl	8025f34 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
 80168c4:	4603      	mov	r3, r0
	    ||
 80168c6:	2b00      	cmp	r3, #0
 80168c8:	d001      	beq.n	80168ce <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2e>
 80168ca:	2301      	movs	r3, #1
 80168cc:	e000      	b.n	80168d0 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x30>
 80168ce:	2300      	movs	r3, #0
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	d001      	beq.n	80168d8 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x38>
	  return __ptr;
 80168d4:	68fb      	ldr	r3, [r7, #12]
 80168d6:	e000      	b.n	80168da <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x3a>
	return nullptr;
 80168d8:	2300      	movs	r3, #0
      }
 80168da:	4618      	mov	r0, r3
 80168dc:	3710      	adds	r7, #16
 80168de:	46bd      	mov	sp, r7
 80168e0:	bd80      	pop	{r7, pc}

080168e2 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _A_base::_S_get(*this); }
 80168e2:	b580      	push	{r7, lr}
 80168e4:	b082      	sub	sp, #8
 80168e6:	af00      	add	r7, sp, #0
 80168e8:	6078      	str	r0, [r7, #4]
 80168ea:	6878      	ldr	r0, [r7, #4]
 80168ec:	f7f7 f82f 	bl	800d94e <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EE6_S_getERS1_>
 80168f0:	4603      	mov	r3, r0
 80168f2:	4618      	mov	r0, r3
 80168f4:	3708      	adds	r7, #8
 80168f6:	46bd      	mov	sp, r7
 80168f8:	bd80      	pop	{r7, pc}

080168fa <_ZNSt16allocator_traitsISaIvEE7destroyI7TMC2208EEvRS0_PT_>:
	destroy(allocator_type&, _Up* __p)
 80168fa:	b580      	push	{r7, lr}
 80168fc:	b082      	sub	sp, #8
 80168fe:	af00      	add	r7, sp, #0
 8016900:	6078      	str	r0, [r7, #4]
 8016902:	6039      	str	r1, [r7, #0]
	{ std::_Destroy(__p); }
 8016904:	6838      	ldr	r0, [r7, #0]
 8016906:	f000 f804 	bl	8016912 <_ZSt8_DestroyI7TMC2208EvPT_>
 801690a:	bf00      	nop
 801690c:	3708      	adds	r7, #8
 801690e:	46bd      	mov	sp, r7
 8016910:	bd80      	pop	{r7, pc}

08016912 <_ZSt8_DestroyI7TMC2208EvPT_>:
    _Destroy(_Tp* __pointer)
 8016912:	b580      	push	{r7, lr}
 8016914:	b082      	sub	sp, #8
 8016916:	af00      	add	r7, sp, #0
 8016918:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	681b      	ldr	r3, [r3, #0]
 801691e:	681b      	ldr	r3, [r3, #0]
 8016920:	6878      	ldr	r0, [r7, #4]
 8016922:	4798      	blx	r3
    }
 8016924:	bf00      	nop
 8016926:	3708      	adds	r7, #8
 8016928:	46bd      	mov	sp, r7
 801692a:	bd80      	pop	{r7, pc}

0801692c <_ZN14TMC2209StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_fh>:
};

class TMC2209Stepper : public TMC2208Stepper {
    public:

        TMC2209Stepper(std::string SWRXpin, std::string SWTXpin, float RS, uint8_t addr) :
 801692c:	b590      	push	{r4, r7, lr}
 801692e:	b093      	sub	sp, #76	@ 0x4c
 8016930:	af00      	add	r7, sp, #0
 8016932:	6178      	str	r0, [r7, #20]
 8016934:	6139      	str	r1, [r7, #16]
 8016936:	60fa      	str	r2, [r7, #12]
 8016938:	ed87 0a02 	vstr	s0, [r7, #8]
 801693c:	71fb      	strb	r3, [r7, #7]
                TMC2208Stepper(SWRXpin, SWTXpin, RS, addr) {}
 801693e:	697c      	ldr	r4, [r7, #20]
 8016940:	f107 0318 	add.w	r3, r7, #24
 8016944:	6939      	ldr	r1, [r7, #16]
 8016946:	4618      	mov	r0, r3
 8016948:	f00f fdd3 	bl	80264f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 801694c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8016950:	68f9      	ldr	r1, [r7, #12]
 8016952:	4618      	mov	r0, r3
 8016954:	f00f fdcd 	bl	80264f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8016958:	79fb      	ldrb	r3, [r7, #7]
 801695a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801695e:	f107 0118 	add.w	r1, r7, #24
 8016962:	ed97 0a02 	vldr	s0, [r7, #8]
 8016966:	4620      	mov	r0, r4
 8016968:	f7ec f97a 	bl	8002c60 <_ZN14TMC2208StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_fh>
 801696c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8016970:	4618      	mov	r0, r3
 8016972:	f00f fbae 	bl	80260d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8016976:	f107 0318 	add.w	r3, r7, #24
 801697a:	4618      	mov	r0, r3
 801697c:	f00f fba9 	bl	80260d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8016980:	4a0f      	ldr	r2, [pc, #60]	@ (80169c0 <_ZN14TMC2209StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_fh+0x94>)
 8016982:	697b      	ldr	r3, [r7, #20]
 8016984:	601a      	str	r2, [r3, #0]
 8016986:	697b      	ldr	r3, [r7, #20]
 8016988:	2200      	movs	r2, #0
 801698a:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
 801698e:	2200      	movs	r2, #0
 8016990:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
 8016994:	f893 2067 	ldrb.w	r2, [r3, #103]	@ 0x67
 8016998:	f022 020f 	bic.w	r2, r2, #15
 801699c:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
 80169a0:	697b      	ldr	r3, [r7, #20]
 80169a2:	2200      	movs	r2, #0
 80169a4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
 80169a8:	697b      	ldr	r3, [r7, #20]
 80169aa:	2200      	movs	r2, #0
 80169ac:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
 80169b0:	2200      	movs	r2, #0
 80169b2:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
 80169b6:	697b      	ldr	r3, [r7, #20]
 80169b8:	4618      	mov	r0, r3
 80169ba:	374c      	adds	r7, #76	@ 0x4c
 80169bc:	46bd      	mov	sp, r7
 80169be:	bd90      	pop	{r4, r7, pc}
 80169c0:	08028c18 	.word	0x08028c18

080169c4 <_ZNSt12__shared_ptrI7TMC2209LN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 80169c4:	b580      	push	{r7, lr}
 80169c6:	b082      	sub	sp, #8
 80169c8:	af00      	add	r7, sp, #0
 80169ca:	6078      	str	r0, [r7, #4]
 80169cc:	687b      	ldr	r3, [r7, #4]
 80169ce:	3304      	adds	r3, #4
 80169d0:	4618      	mov	r0, r3
 80169d2:	f7f4 f8b6 	bl	800ab42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	4618      	mov	r0, r3
 80169da:	3708      	adds	r7, #8
 80169dc:	46bd      	mov	sp, r7
 80169de:	bd80      	pop	{r7, pc}

080169e0 <_ZNSt10shared_ptrI7TMC2209ED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 80169e0:	b580      	push	{r7, lr}
 80169e2:	b082      	sub	sp, #8
 80169e4:	af00      	add	r7, sp, #0
 80169e6:	6078      	str	r0, [r7, #4]
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	4618      	mov	r0, r3
 80169ec:	f7ff ffea 	bl	80169c4 <_ZNSt12__shared_ptrI7TMC2209LN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	4618      	mov	r0, r3
 80169f4:	3708      	adds	r7, #8
 80169f6:	46bd      	mov	sp, r7
 80169f8:	bd80      	pop	{r7, pc}
	...

080169fc <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>:
#include "tmc.h"
#include <cstdint>

#define TOFF_VALUE  4 // [1... 15]

std::shared_ptr<Module> TMC2209::create(const JsonObject& config, Remora* instance) {
 80169fc:	b590      	push	{r4, r7, lr}
 80169fe:	b0c9      	sub	sp, #292	@ 0x124
 8016a00:	af06      	add	r7, sp, #24
 8016a02:	60f8      	str	r0, [r7, #12]
 8016a04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8016a08:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8016a0c:	6019      	str	r1, [r3, #0]
 8016a0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8016a12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8016a16:	601a      	str	r2, [r3, #0]
    printf("Creating TMC2209 module\n");
 8016a18:	4868      	ldr	r0, [pc, #416]	@ (8016bbc <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1c0>)
 8016a1a:	f010 f979 	bl	8026d10 <puts>

    const char* comment = config["Comment"];
 8016a1e:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8016a22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8016a26:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8016a2a:	4a65      	ldr	r2, [pc, #404]	@ (8016bc0 <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1c4>)
 8016a2c:	6819      	ldr	r1, [r3, #0]
 8016a2e:	f7fa fb10 	bl	8011052 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8016a32:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8016a36:	4618      	mov	r0, r3
 8016a38:	f7ef fea6 	bl	8006788 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8016a3c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
    printf("Comment: %s\n", comment);
 8016a40:	f8d7 1104 	ldr.w	r1, [r7, #260]	@ 0x104
 8016a44:	485f      	ldr	r0, [pc, #380]	@ (8016bc4 <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1c8>)
 8016a46:	f010 f8f3 	bl	8026c30 <iprintf>

    std::string RxPin = config["RX pin"];
 8016a4a:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8016a4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8016a52:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8016a56:	4a5c      	ldr	r2, [pc, #368]	@ (8016bc8 <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1cc>)
 8016a58:	6819      	ldr	r1, [r3, #0]
 8016a5a:	f7ef fe70 	bl	800673e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8016a5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8016a62:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8016a66:	4611      	mov	r1, r2
 8016a68:	4618      	mov	r0, r3
 8016a6a:	f7fd fd55 	bl	8014518 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELi0EEEv>
    float RSense = config["RSense"];
 8016a6e:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 8016a72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8016a76:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8016a7a:	4a54      	ldr	r2, [pc, #336]	@ (8016bcc <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1d0>)
 8016a7c:	6819      	ldr	r1, [r3, #0]
 8016a7e:	f7ef fe5e 	bl	800673e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8016a82:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8016a86:	4618      	mov	r0, r3
 8016a88:	f7fd fd54 	bl	8014534 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IfLi0EEEv>
 8016a8c:	eef0 7a40 	vmov.f32	s15, s0
 8016a90:	edc7 7a08 	vstr	s15, [r7, #32]
    uint8_t address = config["Address"];
 8016a94:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 8016a98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8016a9c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8016aa0:	4a4b      	ldr	r2, [pc, #300]	@ (8016bd0 <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1d4>)
 8016aa2:	6819      	ldr	r1, [r3, #0]
 8016aa4:	f7fa fad5 	bl	8011052 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8016aa8:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8016aac:	4618      	mov	r0, r3
 8016aae:	f000 fa47 	bl	8016f40 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IhLi0EEEv>
 8016ab2:	4603      	mov	r3, r0
 8016ab4:	77fb      	strb	r3, [r7, #31]
    uint16_t current = config["Current"];
 8016ab6:	f107 009c 	add.w	r0, r7, #156	@ 0x9c
 8016aba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8016abe:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8016ac2:	4a44      	ldr	r2, [pc, #272]	@ (8016bd4 <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1d8>)
 8016ac4:	6819      	ldr	r1, [r3, #0]
 8016ac6:	f7fa fac4 	bl	8011052 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8016aca:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8016ace:	4618      	mov	r0, r3
 8016ad0:	f7fd fd3e 	bl	8014550 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ItLi0EEEv>
 8016ad4:	4603      	mov	r3, r0
 8016ad6:	83bb      	strh	r3, [r7, #28]
    uint16_t microsteps = config["Microsteps"];
 8016ad8:	f107 00b4 	add.w	r0, r7, #180	@ 0xb4
 8016adc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8016ae0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8016ae4:	4a3c      	ldr	r2, [pc, #240]	@ (8016bd8 <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1dc>)
 8016ae6:	6819      	ldr	r1, [r3, #0]
 8016ae8:	f7f7 fae9 	bl	800e0be <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8016aec:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8016af0:	4618      	mov	r0, r3
 8016af2:	f7fd fd2d 	bl	8014550 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ItLi0EEEv>
 8016af6:	4603      	mov	r3, r0
 8016af8:	837b      	strh	r3, [r7, #26]
    uint16_t stall = config["Stall sensitivity"];
 8016afa:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 8016afe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8016b02:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8016b06:	4a35      	ldr	r2, [pc, #212]	@ (8016bdc <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1e0>)
 8016b08:	6819      	ldr	r1, [r3, #0]
 8016b0a:	f000 fa25 	bl	8016f58 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA18_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8016b0e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8016b12:	4618      	mov	r0, r3
 8016b14:	f7fd fd1c 	bl	8014550 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ItLi0EEEv>
 8016b18:	4603      	mov	r3, r0
 8016b1a:	833b      	strh	r3, [r7, #24]
    bool stealthchop = (strcmp(config["Stealth chop"], "on") == 0);
 8016b1c:	f107 00e4 	add.w	r0, r7, #228	@ 0xe4
 8016b20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8016b24:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8016b28:	4a2d      	ldr	r2, [pc, #180]	@ (8016be0 <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1e4>)
 8016b2a:	6819      	ldr	r1, [r3, #0]
 8016b2c:	f7fc f966 	bl	8012dfc <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA13_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8016b30:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8016b34:	4618      	mov	r0, r3
 8016b36:	f7ef fe27 	bl	8006788 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8016b3a:	4603      	mov	r3, r0
 8016b3c:	4929      	ldr	r1, [pc, #164]	@ (8016be4 <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1e8>)
 8016b3e:	4618      	mov	r0, r3
 8016b40:	f7e9 fbce 	bl	80002e0 <strcmp>
 8016b44:	4603      	mov	r3, r0
 8016b46:	2b00      	cmp	r3, #0
 8016b48:	bf0c      	ite	eq
 8016b4a:	2301      	moveq	r3, #1
 8016b4c:	2300      	movne	r3, #0
 8016b4e:	b2db      	uxtb	r3, r3
 8016b50:	75fb      	strb	r3, [r7, #23]

    return std::make_shared<TMC2209>(std::move(RxPin), RSense, address, current, microsteps, stealthchop, stall, instance);
 8016b52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8016b56:	4618      	mov	r0, r3
 8016b58:	f7f9 fb51 	bl	80101fe <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8016b5c:	4604      	mov	r4, r0
 8016b5e:	f107 00fc 	add.w	r0, r7, #252	@ 0xfc
 8016b62:	f107 011f 	add.w	r1, r7, #31
 8016b66:	f107 0220 	add.w	r2, r7, #32
 8016b6a:	1d3b      	adds	r3, r7, #4
 8016b6c:	9304      	str	r3, [sp, #16]
 8016b6e:	f107 0318 	add.w	r3, r7, #24
 8016b72:	9303      	str	r3, [sp, #12]
 8016b74:	f107 0317 	add.w	r3, r7, #23
 8016b78:	9302      	str	r3, [sp, #8]
 8016b7a:	f107 031a 	add.w	r3, r7, #26
 8016b7e:	9301      	str	r3, [sp, #4]
 8016b80:	f107 031c 	add.w	r3, r7, #28
 8016b84:	9300      	str	r3, [sp, #0]
 8016b86:	460b      	mov	r3, r1
 8016b88:	4621      	mov	r1, r4
 8016b8a:	f000 fa0a 	bl	8016fa2 <_ZSt11make_sharedI7TMC2209JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtS9_RbS9_RP6RemoraEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESH_E4typeEEDpOT0_>
 8016b8e:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8016b92:	4619      	mov	r1, r3
 8016b94:	68f8      	ldr	r0, [r7, #12]
 8016b96:	f000 fa42 	bl	801701e <_ZNSt10shared_ptrI6ModuleEC1I7TMC2209vEEOS_IT_E>
 8016b9a:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8016b9e:	4618      	mov	r0, r3
 8016ba0:	f7ff ff1e 	bl	80169e0 <_ZNSt10shared_ptrI7TMC2209ED1Ev>
}
 8016ba4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8016ba8:	4618      	mov	r0, r3
 8016baa:	f00f fa92 	bl	80260d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    return std::make_shared<TMC2209>(std::move(RxPin), RSense, address, current, microsteps, stealthchop, stall, instance);
 8016bae:	bf00      	nop
}
 8016bb0:	68f8      	ldr	r0, [r7, #12]
 8016bb2:	f507 7786 	add.w	r7, r7, #268	@ 0x10c
 8016bb6:	46bd      	mov	sp, r7
 8016bb8:	bd90      	pop	{r4, r7, pc}
 8016bba:	bf00      	nop
 8016bbc:	08028568 	.word	0x08028568
 8016bc0:	08028580 	.word	0x08028580
 8016bc4:	08028588 	.word	0x08028588
 8016bc8:	08028598 	.word	0x08028598
 8016bcc:	080285a0 	.word	0x080285a0
 8016bd0:	080285a8 	.word	0x080285a8
 8016bd4:	080285b0 	.word	0x080285b0
 8016bd8:	080285b8 	.word	0x080285b8
 8016bdc:	080285c4 	.word	0x080285c4
 8016be0:	080285d8 	.word	0x080285d8
 8016be4:	080285e8 	.word	0x080285e8

08016be8 <_ZN7TMC2209C1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfhttbtP6Remora>:

TMC2209::TMC2209(std::string _rxtxPin, float _Rsense, uint8_t _addr, uint16_t _mA, uint16_t _microsteps, bool _stealth, uint16_t _stall, Remora* _instance)
 8016be8:	b5b0      	push	{r4, r5, r7, lr}
 8016bea:	b086      	sub	sp, #24
 8016bec:	af02      	add	r7, sp, #8
 8016bee:	60f8      	str	r0, [r7, #12]
 8016bf0:	60b9      	str	r1, [r7, #8]
 8016bf2:	ed87 0a01 	vstr	s0, [r7, #4]
 8016bf6:	4611      	mov	r1, r2
 8016bf8:	461a      	mov	r2, r3
 8016bfa:	460b      	mov	r3, r1
 8016bfc:	70fb      	strb	r3, [r7, #3]
 8016bfe:	4613      	mov	r3, r2
 8016c00:	803b      	strh	r3, [r7, #0]
      addr(_addr),
      mA(_mA),
      microsteps(_microsteps),
      stealth(_stealth),
      stall(_stall),
      driver(std::make_unique<TMC2209Stepper>(rxtxPin, rxtxPin, Rsense, addr)) {}
 8016c02:	68fb      	ldr	r3, [r7, #12]
 8016c04:	ed97 0a01 	vldr	s0, [r7, #4]
 8016c08:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016c0a:	4618      	mov	r0, r3
 8016c0c:	f7fd f8a0 	bl	8013d50 <_ZN3TMCC1EP6Remoraf>
 8016c10:	4a1d      	ldr	r2, [pc, #116]	@ (8016c88 <_ZN7TMC2209C1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfhttbtP6Remora+0xa0>)
 8016c12:	68fb      	ldr	r3, [r7, #12]
 8016c14:	601a      	str	r2, [r3, #0]
      rxtxPin(std::move(_rxtxPin)),
 8016c16:	68fb      	ldr	r3, [r7, #12]
 8016c18:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 8016c1c:	68b8      	ldr	r0, [r7, #8]
 8016c1e:	f7f9 faee 	bl	80101fe <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8016c22:	4603      	mov	r3, r0
 8016c24:	4619      	mov	r1, r3
 8016c26:	4620      	mov	r0, r4
 8016c28:	f00f fa34 	bl	8026094 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
      addr(_addr),
 8016c2c:	68fb      	ldr	r3, [r7, #12]
 8016c2e:	78fa      	ldrb	r2, [r7, #3]
 8016c30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      mA(_mA),
 8016c34:	68fb      	ldr	r3, [r7, #12]
 8016c36:	883a      	ldrh	r2, [r7, #0]
 8016c38:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
      microsteps(_microsteps),
 8016c3c:	68fb      	ldr	r3, [r7, #12]
 8016c3e:	8c3a      	ldrh	r2, [r7, #32]
 8016c40:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
      stealth(_stealth),
 8016c44:	68fb      	ldr	r3, [r7, #12]
 8016c46:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8016c4a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
      stall(_stall),
 8016c4e:	68fb      	ldr	r3, [r7, #12]
 8016c50:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8016c52:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      driver(std::make_unique<TMC2209Stepper>(rxtxPin, rxtxPin, Rsense, addr)) {}
 8016c56:	68fb      	ldr	r3, [r7, #12]
 8016c58:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8016c5c:	68fb      	ldr	r3, [r7, #12]
 8016c5e:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 8016c62:	68fb      	ldr	r3, [r7, #12]
 8016c64:	f103 0524 	add.w	r5, r3, #36	@ 0x24
 8016c68:	68fb      	ldr	r3, [r7, #12]
 8016c6a:	3340      	adds	r3, #64	@ 0x40
 8016c6c:	68fa      	ldr	r2, [r7, #12]
 8016c6e:	f102 004c 	add.w	r0, r2, #76	@ 0x4c
 8016c72:	9300      	str	r3, [sp, #0]
 8016c74:	462b      	mov	r3, r5
 8016c76:	4622      	mov	r2, r4
 8016c78:	f000 f9e4 	bl	8017044 <_ZSt11make_uniqueI14TMC2209StepperJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_RfRhEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 8016c7c:	68fb      	ldr	r3, [r7, #12]
 8016c7e:	4618      	mov	r0, r3
 8016c80:	3710      	adds	r7, #16
 8016c82:	46bd      	mov	sp, r7
 8016c84:	bdb0      	pop	{r4, r5, r7, pc}
 8016c86:	bf00      	nop
 8016c88:	08028bf4 	.word	0x08028bf4

08016c8c <_ZN7TMC22099configureEv>:


void TMC2209::configure()
{
 8016c8c:	b590      	push	{r4, r7, lr}
 8016c8e:	b08b      	sub	sp, #44	@ 0x2c
 8016c90:	af00      	add	r7, sp, #0
 8016c92:	6078      	str	r0, [r7, #4]
    printf("\nStarting the Serial thread\n");
 8016c94:	4897      	ldr	r0, [pc, #604]	@ (8016ef4 <_ZN7TMC22099configureEv+0x268>)
 8016c96:	f010 f83b 	bl	8026d10 <puts>
    instance->getSerialThread()->startThread();
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	6a1b      	ldr	r3, [r3, #32]
 8016c9e:	4618      	mov	r0, r3
 8016ca0:	f7fd f801 	bl	8013ca6 <_ZN6Remora15getSerialThreadEv>
 8016ca4:	4603      	mov	r3, r0
 8016ca6:	4618      	mov	r0, r3
 8016ca8:	f001 fd00 	bl	80186ac <_ZN9pruThread11startThreadEv>

    auto self = shared_from_this();
 8016cac:	687b      	ldr	r3, [r7, #4]
 8016cae:	f103 0218 	add.w	r2, r3, #24
 8016cb2:	f107 030c 	add.w	r3, r7, #12
 8016cb6:	4611      	mov	r1, r2
 8016cb8:	4618      	mov	r0, r3
 8016cba:	f7fd fc1f 	bl	80144fc <_ZNSt23enable_shared_from_thisI3TMCE16shared_from_thisEv>
    instance->getSerialThread()->registerModule(self);
 8016cbe:	687b      	ldr	r3, [r7, #4]
 8016cc0:	6a1b      	ldr	r3, [r3, #32]
 8016cc2:	4618      	mov	r0, r3
 8016cc4:	f7fc ffef 	bl	8013ca6 <_ZN6Remora15getSerialThreadEv>
 8016cc8:	4604      	mov	r4, r0
 8016cca:	f107 020c 	add.w	r2, r7, #12
 8016cce:	f107 0314 	add.w	r3, r7, #20
 8016cd2:	4611      	mov	r1, r2
 8016cd4:	4618      	mov	r0, r3
 8016cd6:	f7fd fcf1 	bl	80146bc <_ZNSt10shared_ptrI6ModuleEC1I3TMCvEERKS_IT_E>
 8016cda:	f107 0314 	add.w	r3, r7, #20
 8016cde:	4619      	mov	r1, r3
 8016ce0:	4620      	mov	r0, r4
 8016ce2:	f001 fc4f 	bl	8018584 <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE>
 8016ce6:	f107 0314 	add.w	r3, r7, #20
 8016cea:	4618      	mov	r0, r3
 8016cec:	f7f3 f911 	bl	8009f12 <_ZNSt10shared_ptrI6ModuleED1Ev>

    driver->begin();
 8016cf0:	687b      	ldr	r3, [r7, #4]
 8016cf2:	334c      	adds	r3, #76	@ 0x4c
 8016cf4:	4618      	mov	r0, r3
 8016cf6:	f000 fa12 	bl	801711e <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 8016cfa:	4603      	mov	r3, r0
 8016cfc:	4618      	mov	r0, r3
 8016cfe:	f7ec f861 	bl	8002dc4 <_ZN14TMC2208Stepper5beginEv>

    printf("Testing connection to TMC driver... ");
 8016d02:	487d      	ldr	r0, [pc, #500]	@ (8016ef8 <_ZN7TMC22099configureEv+0x26c>)
 8016d04:	f00f ff94 	bl	8026c30 <iprintf>
    uint16_t result = driver->test_connection();
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	334c      	adds	r3, #76	@ 0x4c
 8016d0c:	4618      	mov	r0, r3
 8016d0e:	f000 fa06 	bl	801711e <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 8016d12:	4603      	mov	r3, r0
 8016d14:	4618      	mov	r0, r3
 8016d16:	f7ec fc3b 	bl	8003590 <_ZN10TMCStepper15test_connectionEv>
 8016d1a:	4603      	mov	r3, r0
 8016d1c:	84fb      	strh	r3, [r7, #38]	@ 0x26
    
    if (result) {
 8016d1e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d018      	beq.n	8016d56 <_ZN7TMC22099configureEv+0xca>
        printf("Failed!\nLikely cause: ");
 8016d24:	4875      	ldr	r0, [pc, #468]	@ (8016efc <_ZN7TMC22099configureEv+0x270>)
 8016d26:	f00f ff83 	bl	8026c30 <iprintf>
        switch(result) {
 8016d2a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8016d2c:	2b01      	cmp	r3, #1
 8016d2e:	d002      	beq.n	8016d36 <_ZN7TMC22099configureEv+0xaa>
 8016d30:	2b02      	cmp	r3, #2
 8016d32:	d004      	beq.n	8016d3e <_ZN7TMC22099configureEv+0xb2>
 8016d34:	e007      	b.n	8016d46 <_ZN7TMC22099configureEv+0xba>
            case 1: printf("Loose connection\n"); break;
 8016d36:	4872      	ldr	r0, [pc, #456]	@ (8016f00 <_ZN7TMC22099configureEv+0x274>)
 8016d38:	f00f ffea 	bl	8026d10 <puts>
 8016d3c:	e007      	b.n	8016d4e <_ZN7TMC22099configureEv+0xc2>
            case 2: printf("No power\n"); break;
 8016d3e:	4871      	ldr	r0, [pc, #452]	@ (8016f04 <_ZN7TMC22099configureEv+0x278>)
 8016d40:	f00f ffe6 	bl	8026d10 <puts>
 8016d44:	e003      	b.n	8016d4e <_ZN7TMC22099configureEv+0xc2>
            default: printf("Unknown issue\n"); break;
 8016d46:	4870      	ldr	r0, [pc, #448]	@ (8016f08 <_ZN7TMC22099configureEv+0x27c>)
 8016d48:	f00f ffe2 	bl	8026d10 <puts>
 8016d4c:	bf00      	nop
        }
        printf("Fix the problem and reset the board.\n");
 8016d4e:	486f      	ldr	r0, [pc, #444]	@ (8016f0c <_ZN7TMC22099configureEv+0x280>)
 8016d50:	f00f ffde 	bl	8026d10 <puts>
 8016d54:	e002      	b.n	8016d5c <_ZN7TMC22099configureEv+0xd0>
    } else {
        printf("OK\n");
 8016d56:	486e      	ldr	r0, [pc, #440]	@ (8016f10 <_ZN7TMC22099configureEv+0x284>)
 8016d58:	f00f ffda 	bl	8026d10 <puts>
    }

    // Configure driver settings
    driver->toff(TOFF_VALUE);
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	334c      	adds	r3, #76	@ 0x4c
 8016d60:	4618      	mov	r0, r3
 8016d62:	f000 f9dc 	bl	801711e <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 8016d66:	4603      	mov	r3, r0
 8016d68:	2104      	movs	r1, #4
 8016d6a:	4618      	mov	r0, r3
 8016d6c:	f7eb fcdd 	bl	800272a <_ZN14TMC2208Stepper4toffEh>
    driver->blank_time(24);
 8016d70:	687b      	ldr	r3, [r7, #4]
 8016d72:	334c      	adds	r3, #76	@ 0x4c
 8016d74:	4618      	mov	r0, r3
 8016d76:	f000 f9d2 	bl	801711e <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 8016d7a:	4603      	mov	r3, r0
 8016d7c:	2118      	movs	r1, #24
 8016d7e:	4618      	mov	r0, r3
 8016d80:	f7ec fcd2 	bl	8003728 <_ZN10TMCStepper10blank_timeEh>
    driver->rms_current(mA);
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	334c      	adds	r3, #76	@ 0x4c
 8016d88:	4618      	mov	r0, r3
 8016d8a:	f000 f9c8 	bl	801711e <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 8016d8e:	4603      	mov	r3, r0
 8016d90:	461a      	mov	r2, r3
 8016d92:	687b      	ldr	r3, [r7, #4]
 8016d94:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8016d98:	4619      	mov	r1, r3
 8016d9a:	4610      	mov	r0, r2
 8016d9c:	f7ec fb5c 	bl	8003458 <_ZN10TMCStepper11rms_currentEt>
    driver->microsteps(microsteps);
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	334c      	adds	r3, #76	@ 0x4c
 8016da4:	4618      	mov	r0, r3
 8016da6:	f000 f9ba 	bl	801711e <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 8016daa:	4603      	mov	r3, r0
 8016dac:	461a      	mov	r2, r3
 8016dae:	687b      	ldr	r3, [r7, #4]
 8016db0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8016db4:	4619      	mov	r1, r3
 8016db6:	4610      	mov	r0, r2
 8016db8:	f7ec fc06 	bl	80035c8 <_ZN10TMCStepper10microstepsEt>
    driver->TCOOLTHRS(0xFFFFF);  // 20-bit max threshold for smart energy CoolStep
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	334c      	adds	r3, #76	@ 0x4c
 8016dc0:	4618      	mov	r0, r3
 8016dc2:	f000 f9ac 	bl	801711e <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 8016dc6:	4603      	mov	r3, r0
 8016dc8:	4952      	ldr	r1, [pc, #328]	@ (8016f14 <_ZN7TMC22099configureEv+0x288>)
 8016dca:	4618      	mov	r0, r3
 8016dcc:	f7ec fb14 	bl	80033f8 <_ZN14TMC2209Stepper9TCOOLTHRSEm>
    driver->semin(5);             // CoolStep lower threshold
 8016dd0:	687b      	ldr	r3, [r7, #4]
 8016dd2:	334c      	adds	r3, #76	@ 0x4c
 8016dd4:	4618      	mov	r0, r3
 8016dd6:	f000 f9a2 	bl	801711e <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 8016dda:	4603      	mov	r3, r0
 8016ddc:	2105      	movs	r1, #5
 8016dde:	4618      	mov	r0, r3
 8016de0:	f7eb fddd 	bl	800299e <_ZN14TMC2209Stepper5seminEh>
    driver->semax(2);             // CoolStep upper threshold
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	334c      	adds	r3, #76	@ 0x4c
 8016de8:	4618      	mov	r0, r3
 8016dea:	f000 f998 	bl	801711e <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 8016dee:	4603      	mov	r3, r0
 8016df0:	2102      	movs	r1, #2
 8016df2:	4618      	mov	r0, r3
 8016df4:	f7eb fdf2 	bl	80029dc <_ZN14TMC2209Stepper5semaxEh>
    driver->sedn(0b01);           // CoolStep decrement rate
 8016df8:	687b      	ldr	r3, [r7, #4]
 8016dfa:	334c      	adds	r3, #76	@ 0x4c
 8016dfc:	4618      	mov	r0, r3
 8016dfe:	f000 f98e 	bl	801711e <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 8016e02:	4603      	mov	r3, r0
 8016e04:	2101      	movs	r1, #1
 8016e06:	4618      	mov	r0, r3
 8016e08:	f7eb fe07 	bl	8002a1a <_ZN14TMC2209Stepper4sednEh>
    driver->en_spreadCycle(!stealth);
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	334c      	adds	r3, #76	@ 0x4c
 8016e10:	4618      	mov	r0, r3
 8016e12:	f000 f984 	bl	801711e <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 8016e16:	4603      	mov	r3, r0
 8016e18:	461a      	mov	r2, r3
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8016e20:	f083 0301 	eor.w	r3, r3, #1
 8016e24:	b2db      	uxtb	r3, r3
 8016e26:	4619      	mov	r1, r3
 8016e28:	4610      	mov	r0, r2
 8016e2a:	f7eb fe25 	bl	8002a78 <_ZN14TMC2208Stepper14en_spreadCycleEb>
    driver->pwm_autoscale(true);
 8016e2e:	687b      	ldr	r3, [r7, #4]
 8016e30:	334c      	adds	r3, #76	@ 0x4c
 8016e32:	4618      	mov	r0, r3
 8016e34:	f000 f973 	bl	801711e <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 8016e38:	4603      	mov	r3, r0
 8016e3a:	2101      	movs	r1, #1
 8016e3c:	4618      	mov	r0, r3
 8016e3e:	f7eb fec9 	bl	8002bd4 <_ZN14TMC2208Stepper13pwm_autoscaleEb>

    if (stealth && stall) {
 8016e42:	687b      	ldr	r3, [r7, #4]
 8016e44:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8016e48:	2b00      	cmp	r3, #0
 8016e4a:	d012      	beq.n	8016e72 <_ZN7TMC22099configureEv+0x1e6>
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8016e52:	2b00      	cmp	r3, #0
 8016e54:	d00d      	beq.n	8016e72 <_ZN7TMC22099configureEv+0x1e6>
        // StallGuard sensitivity threshold (higher = more sensitive)
        driver->SGTHRS(stall);
 8016e56:	687b      	ldr	r3, [r7, #4]
 8016e58:	334c      	adds	r3, #76	@ 0x4c
 8016e5a:	4618      	mov	r0, r3
 8016e5c:	f000 f95f 	bl	801711e <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 8016e60:	4602      	mov	r2, r0
 8016e62:	687b      	ldr	r3, [r7, #4]
 8016e64:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8016e68:	b2db      	uxtb	r3, r3
 8016e6a:	4619      	mov	r1, r3
 8016e6c:	4610      	mov	r0, r2
 8016e6e:	f7ec faac 	bl	80033ca <_ZN14TMC2209Stepper6SGTHRSEh>
    }

    driver->iholddelay(10);
 8016e72:	687b      	ldr	r3, [r7, #4]
 8016e74:	334c      	adds	r3, #76	@ 0x4c
 8016e76:	4618      	mov	r0, r3
 8016e78:	f000 f951 	bl	801711e <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 8016e7c:	4603      	mov	r3, r0
 8016e7e:	210a      	movs	r1, #10
 8016e80:	4618      	mov	r0, r3
 8016e82:	f7eb fe8a 	bl	8002b9a <_ZN10TMCStepper10iholddelayEh>
    driver->TPOWERDOWN(128);  // ~2s until driver lowers to hold current
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	334c      	adds	r3, #76	@ 0x4c
 8016e8a:	4618      	mov	r0, r3
 8016e8c:	f000 f947 	bl	801711e <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 8016e90:	4603      	mov	r3, r0
 8016e92:	2180      	movs	r1, #128	@ 0x80
 8016e94:	4618      	mov	r0, r3
 8016e96:	f7ec fc7f 	bl	8003798 <_ZN10TMCStepper10TPOWERDOWNEh>

    printf("\nStopping the Serial thread\n");
 8016e9a:	481f      	ldr	r0, [pc, #124]	@ (8016f18 <_ZN7TMC22099configureEv+0x28c>)
 8016e9c:	f00f ff38 	bl	8026d10 <puts>
    instance->getSerialThread()->stopThread();
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	6a1b      	ldr	r3, [r3, #32]
 8016ea4:	4618      	mov	r0, r3
 8016ea6:	f7fc fefe 	bl	8013ca6 <_ZN6Remora15getSerialThreadEv>
 8016eaa:	4603      	mov	r3, r0
 8016eac:	4618      	mov	r0, r3
 8016eae:	f001 fc2a 	bl	8018706 <_ZN9pruThread10stopThreadEv>
    instance->getSerialThread()->unregisterModule(self);
 8016eb2:	687b      	ldr	r3, [r7, #4]
 8016eb4:	6a1b      	ldr	r3, [r3, #32]
 8016eb6:	4618      	mov	r0, r3
 8016eb8:	f7fc fef5 	bl	8013ca6 <_ZN6Remora15getSerialThreadEv>
 8016ebc:	4604      	mov	r4, r0
 8016ebe:	f107 020c 	add.w	r2, r7, #12
 8016ec2:	f107 031c 	add.w	r3, r7, #28
 8016ec6:	4611      	mov	r1, r2
 8016ec8:	4618      	mov	r0, r3
 8016eca:	f7fd fbf7 	bl	80146bc <_ZNSt10shared_ptrI6ModuleEC1I3TMCvEERKS_IT_E>
 8016ece:	f107 031c 	add.w	r3, r7, #28
 8016ed2:	4619      	mov	r1, r3
 8016ed4:	4620      	mov	r0, r4
 8016ed6:	f001 fba1 	bl	801861c <_ZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleE>
 8016eda:	f107 031c 	add.w	r3, r7, #28
 8016ede:	4618      	mov	r0, r3
 8016ee0:	f7f3 f817 	bl	8009f12 <_ZNSt10shared_ptrI6ModuleED1Ev>
}
 8016ee4:	f107 030c 	add.w	r3, r7, #12
 8016ee8:	4618      	mov	r0, r3
 8016eea:	f7fc ff5f 	bl	8013dac <_ZNSt10shared_ptrI3TMCED1Ev>
 8016eee:	372c      	adds	r7, #44	@ 0x2c
 8016ef0:	46bd      	mov	sp, r7
 8016ef2:	bd90      	pop	{r4, r7, pc}
 8016ef4:	080285ec 	.word	0x080285ec
 8016ef8:	08028608 	.word	0x08028608
 8016efc:	08028630 	.word	0x08028630
 8016f00:	08028648 	.word	0x08028648
 8016f04:	0802865c 	.word	0x0802865c
 8016f08:	08028668 	.word	0x08028668
 8016f0c:	08028678 	.word	0x08028678
 8016f10:	080286a0 	.word	0x080286a0
 8016f14:	000fffff 	.word	0x000fffff
 8016f18:	080286a4 	.word	0x080286a4

08016f1c <_ZN7TMC22096updateEv>:

void TMC2209::update()
{
 8016f1c:	b580      	push	{r7, lr}
 8016f1e:	b082      	sub	sp, #8
 8016f20:	af00      	add	r7, sp, #0
 8016f22:	6078      	str	r0, [r7, #4]
    driver->SWSerial->tickerHandler();
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	334c      	adds	r3, #76	@ 0x4c
 8016f28:	4618      	mov	r0, r3
 8016f2a:	f000 f8f8 	bl	801711e <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 8016f2e:	4603      	mov	r3, r0
 8016f30:	695b      	ldr	r3, [r3, #20]
 8016f32:	4618      	mov	r0, r3
 8016f34:	f7eb fa67 	bl	8002406 <_ZN14SoftwareSerial13tickerHandlerEv>
}
 8016f38:	bf00      	nop
 8016f3a:	3708      	adds	r7, #8
 8016f3c:	46bd      	mov	sp, r7
 8016f3e:	bd80      	pop	{r7, pc}

08016f40 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IhLi0EEEv>:
  operator T() const {
 8016f40:	b580      	push	{r7, lr}
 8016f42:	b082      	sub	sp, #8
 8016f44:	af00      	add	r7, sp, #0
 8016f46:	6078      	str	r0, [r7, #4]
    return as<T>();
 8016f48:	6878      	ldr	r0, [r7, #4]
 8016f4a:	f000 f8f4 	bl	8017136 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIhEET_v>
 8016f4e:	4603      	mov	r3, r0
  }
 8016f50:	4618      	mov	r0, r3
 8016f52:	3708      	adds	r7, #8
 8016f54:	46bd      	mov	sp, r7
 8016f56:	bd80      	pop	{r7, pc}

08016f58 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA18_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:

  // Gets or sets the member with specified key.
  // https://arduinojson.org/v7/api/jsonobject/subscript/
  template <typename TString,
            detail::enable_if_t<detail::IsString<TString>::value, int> = 0>
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 8016f58:	b580      	push	{r7, lr}
 8016f5a:	b08c      	sub	sp, #48	@ 0x30
 8016f5c:	af02      	add	r7, sp, #8
 8016f5e:	60f8      	str	r0, [r7, #12]
 8016f60:	60b9      	str	r1, [r7, #8]
 8016f62:	607a      	str	r2, [r7, #4]
      const TString& key) const {
    return {*this, detail::adaptString(key)};
 8016f64:	68ba      	ldr	r2, [r7, #8]
 8016f66:	f107 0314 	add.w	r3, r7, #20
 8016f6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016f6e:	e883 0003 	stmia.w	r3, {r0, r1}
 8016f72:	f107 031c 	add.w	r3, r7, #28
 8016f76:	6879      	ldr	r1, [r7, #4]
 8016f78:	4618      	mov	r0, r3
 8016f7a:	f000 f8fe 	bl	801717a <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA18_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8016f7e:	466a      	mov	r2, sp
 8016f80:	f107 0320 	add.w	r3, r7, #32
 8016f84:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016f88:	e882 0003 	stmia.w	r2, {r0, r1}
 8016f8c:	69fb      	ldr	r3, [r7, #28]
 8016f8e:	f107 0214 	add.w	r2, r7, #20
 8016f92:	ca06      	ldmia	r2, {r1, r2}
 8016f94:	68f8      	ldr	r0, [r7, #12]
 8016f96:	f7ef fd66 	bl	8006a66 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 8016f9a:	68f8      	ldr	r0, [r7, #12]
 8016f9c:	3728      	adds	r7, #40	@ 0x28
 8016f9e:	46bd      	mov	sp, r7
 8016fa0:	bd80      	pop	{r7, pc}

08016fa2 <_ZSt11make_sharedI7TMC2209JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtS9_RbS9_RP6RemoraEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESH_E4typeEEDpOT0_>:
    make_shared(_Args&&... __args)
 8016fa2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016fa6:	b08e      	sub	sp, #56	@ 0x38
 8016fa8:	af06      	add	r7, sp, #24
 8016faa:	6178      	str	r0, [r7, #20]
 8016fac:	6139      	str	r1, [r7, #16]
 8016fae:	60fa      	str	r2, [r7, #12]
 8016fb0:	60bb      	str	r3, [r7, #8]
			     std::forward<_Args>(__args)...);
 8016fb2:	f107 031c 	add.w	r3, r7, #28
 8016fb6:	469a      	mov	sl, r3
 8016fb8:	6938      	ldr	r0, [r7, #16]
 8016fba:	f7fd fc51 	bl	8014860 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8016fbe:	4680      	mov	r8, r0
 8016fc0:	68f8      	ldr	r0, [r7, #12]
 8016fc2:	f7fd fc58 	bl	8014876 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8016fc6:	4681      	mov	r9, r0
 8016fc8:	68b8      	ldr	r0, [r7, #8]
 8016fca:	f000 f8e9 	bl	80171a0 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8016fce:	4604      	mov	r4, r0
 8016fd0:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8016fd2:	f7fd fc5b 	bl	801488c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8016fd6:	4605      	mov	r5, r0
 8016fd8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8016fda:	f7fd fc57 	bl	801488c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8016fde:	4606      	mov	r6, r0
 8016fe0:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8016fe2:	f7f9 f95c 	bl	801029e <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8016fe6:	6078      	str	r0, [r7, #4]
 8016fe8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8016fea:	f7fd fc4f 	bl	801488c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8016fee:	6038      	str	r0, [r7, #0]
 8016ff0:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8016ff2:	f7fd fc56 	bl	80148a2 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 8016ff6:	4603      	mov	r3, r0
 8016ff8:	9305      	str	r3, [sp, #20]
 8016ffa:	683b      	ldr	r3, [r7, #0]
 8016ffc:	9304      	str	r3, [sp, #16]
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	9303      	str	r3, [sp, #12]
 8017002:	9602      	str	r6, [sp, #8]
 8017004:	9501      	str	r5, [sp, #4]
 8017006:	9400      	str	r4, [sp, #0]
 8017008:	464b      	mov	r3, r9
 801700a:	4642      	mov	r2, r8
 801700c:	4651      	mov	r1, sl
 801700e:	6978      	ldr	r0, [r7, #20]
 8017010:	f000 f8d1 	bl	80171b6 <_ZNSt10shared_ptrI7TMC2209EC1ISaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtSC_RbSC_RP6RemoraEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
    }
 8017014:	6978      	ldr	r0, [r7, #20]
 8017016:	3720      	adds	r7, #32
 8017018:	46bd      	mov	sp, r7
 801701a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801701e <_ZNSt10shared_ptrI6ModuleEC1I7TMC2209vEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 801701e:	b590      	push	{r4, r7, lr}
 8017020:	b083      	sub	sp, #12
 8017022:	af00      	add	r7, sp, #0
 8017024:	6078      	str	r0, [r7, #4]
 8017026:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 8017028:	687c      	ldr	r4, [r7, #4]
 801702a:	6838      	ldr	r0, [r7, #0]
 801702c:	f000 f901 	bl	8017232 <_ZSt4moveIRSt10shared_ptrI7TMC2209EEONSt16remove_referenceIT_E4typeEOS5_>
 8017030:	4603      	mov	r3, r0
 8017032:	4619      	mov	r1, r3
 8017034:	4620      	mov	r0, r4
 8017036:	f000 f907 	bl	8017248 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I7TMC2209vEEOS_IT_LS2_0EE>
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	4618      	mov	r0, r3
 801703e:	370c      	adds	r7, #12
 8017040:	46bd      	mov	sp, r7
 8017042:	bd90      	pop	{r4, r7, pc}

08017044 <_ZSt11make_uniqueI14TMC2209StepperJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_RfRhEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8017044:	b590      	push	{r4, r7, lr}
 8017046:	ed2d 8b02 	vpush	{d8}
 801704a:	b091      	sub	sp, #68	@ 0x44
 801704c:	af00      	add	r7, sp, #0
 801704e:	60f8      	str	r0, [r7, #12]
 8017050:	60b9      	str	r1, [r7, #8]
 8017052:	607a      	str	r2, [r7, #4]
 8017054:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8017056:	206c      	movs	r0, #108	@ 0x6c
 8017058:	f00e ff40 	bl	8025edc <_Znwj>
 801705c:	4603      	mov	r3, r0
 801705e:	461c      	mov	r4, r3
 8017060:	68b8      	ldr	r0, [r7, #8]
 8017062:	f7f7 fa2d 	bl	800e4c0 <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8017066:	4602      	mov	r2, r0
 8017068:	f107 0310 	add.w	r3, r7, #16
 801706c:	4611      	mov	r1, r2
 801706e:	4618      	mov	r0, r3
 8017070:	f00f fa3f 	bl	80264f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8017074:	6878      	ldr	r0, [r7, #4]
 8017076:	f7f7 fa23 	bl	800e4c0 <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 801707a:	4602      	mov	r2, r0
 801707c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8017080:	4611      	mov	r1, r2
 8017082:	4618      	mov	r0, r3
 8017084:	f00f fa35 	bl	80264f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8017088:	6838      	ldr	r0, [r7, #0]
 801708a:	f7fd fbf4 	bl	8014876 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 801708e:	4603      	mov	r3, r0
 8017090:	ed93 8a00 	vldr	s16, [r3]
 8017094:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8017096:	f000 f883 	bl	80171a0 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 801709a:	4603      	mov	r3, r0
 801709c:	781b      	ldrb	r3, [r3, #0]
 801709e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80170a2:	f107 0110 	add.w	r1, r7, #16
 80170a6:	eeb0 0a48 	vmov.f32	s0, s16
 80170aa:	4620      	mov	r0, r4
 80170ac:	f7ff fc3e 	bl	801692c <_ZN14TMC2209StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_fh>
 80170b0:	4621      	mov	r1, r4
 80170b2:	68f8      	ldr	r0, [r7, #12]
 80170b4:	f000 f8f6 	bl	80172a4 <_ZNSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 80170b8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80170bc:	4618      	mov	r0, r3
 80170be:	f00f f808 	bl	80260d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80170c2:	f107 0310 	add.w	r3, r7, #16
 80170c6:	4618      	mov	r0, r3
 80170c8:	f00f f803 	bl	80260d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80170cc:	bf00      	nop
 80170ce:	68f8      	ldr	r0, [r7, #12]
 80170d0:	3744      	adds	r7, #68	@ 0x44
 80170d2:	46bd      	mov	sp, r7
 80170d4:	ecbd 8b02 	vpop	{d8}
 80170d8:	bd90      	pop	{r4, r7, pc}

080170da <_ZNSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 80170da:	b590      	push	{r4, r7, lr}
 80170dc:	b085      	sub	sp, #20
 80170de:	af00      	add	r7, sp, #0
 80170e0:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80170e2:	687b      	ldr	r3, [r7, #4]
 80170e4:	4618      	mov	r0, r3
 80170e6:	f000 f8ec 	bl	80172c2 <_ZNSt15__uniq_ptr_implI14TMC2209StepperSt14default_deleteIS0_EE6_M_ptrEv>
 80170ea:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80170ec:	68fb      	ldr	r3, [r7, #12]
 80170ee:	681b      	ldr	r3, [r3, #0]
 80170f0:	2b00      	cmp	r3, #0
 80170f2:	d00c      	beq.n	801710e <_ZNSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80170f4:	6878      	ldr	r0, [r7, #4]
 80170f6:	f000 f8f1 	bl	80172dc <_ZNSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EE11get_deleterEv>
 80170fa:	4604      	mov	r4, r0
 80170fc:	68f8      	ldr	r0, [r7, #12]
 80170fe:	f000 f8fa 	bl	80172f6 <_ZSt4moveIRP14TMC2209StepperEONSt16remove_referenceIT_E4typeEOS4_>
 8017102:	4603      	mov	r3, r0
 8017104:	681b      	ldr	r3, [r3, #0]
 8017106:	4619      	mov	r1, r3
 8017108:	4620      	mov	r0, r4
 801710a:	f000 f911 	bl	8017330 <_ZNKSt14default_deleteI14TMC2209StepperEclEPS0_>
	__ptr = pointer();
 801710e:	68fb      	ldr	r3, [r7, #12]
 8017110:	2200      	movs	r2, #0
 8017112:	601a      	str	r2, [r3, #0]
      }
 8017114:	687b      	ldr	r3, [r7, #4]
 8017116:	4618      	mov	r0, r3
 8017118:	3714      	adds	r7, #20
 801711a:	46bd      	mov	sp, r7
 801711c:	bd90      	pop	{r4, r7, pc}

0801711e <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 801711e:	b580      	push	{r7, lr}
 8017120:	b082      	sub	sp, #8
 8017122:	af00      	add	r7, sp, #0
 8017124:	6078      	str	r0, [r7, #4]
	return get();
 8017126:	6878      	ldr	r0, [r7, #4]
 8017128:	f000 f915 	bl	8017356 <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EE3getEv>
 801712c:	4603      	mov	r3, r0
      }
 801712e:	4618      	mov	r0, r3
 8017130:	3708      	adds	r7, #8
 8017132:	46bd      	mov	sp, r7
 8017134:	bd80      	pop	{r7, pc}

08017136 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIhEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 8017136:	b590      	push	{r4, r7, lr}
 8017138:	b087      	sub	sp, #28
 801713a:	af00      	add	r7, sp, #0
 801713c:	6078      	str	r0, [r7, #4]
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	617b      	str	r3, [r7, #20]
 8017142:	697b      	ldr	r3, [r7, #20]
 8017144:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 8017146:	6938      	ldr	r0, [r7, #16]
 8017148:	f7f0 fb9f 	bl	800788a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 801714c:	4604      	mov	r4, r0
 801714e:	6938      	ldr	r0, [r7, #16]
 8017150:	f7f0 fa29 	bl	80075a6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 8017154:	4602      	mov	r2, r0
 8017156:	f107 0308 	add.w	r3, r7, #8
 801715a:	4621      	mov	r1, r4
 801715c:	4618      	mov	r0, r3
 801715e:	f7ed fac4 	bl	80046ea <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 8017162:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 8017164:	f107 0308 	add.w	r3, r7, #8
 8017168:	e893 0003 	ldmia.w	r3, {r0, r1}
 801716c:	f000 f900 	bl	8017370 <_ZN11ArduinoJson8V730HB229ConverterIhvE8fromJsonENS0_16JsonVariantConstE>
 8017170:	4603      	mov	r3, r0
}
 8017172:	4618      	mov	r0, r3
 8017174:	371c      	adds	r7, #28
 8017176:	46bd      	mov	sp, r7
 8017178:	bd90      	pop	{r4, r7, pc}

0801717a <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA18_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 801717a:	b580      	push	{r7, lr}
 801717c:	b082      	sub	sp, #8
 801717e:	af00      	add	r7, sp, #0
 8017180:	6078      	str	r0, [r7, #4]
 8017182:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8017184:	6838      	ldr	r0, [r7, #0]
 8017186:	f000 f911 	bl	80173ac <_ZN11ArduinoJson8V730HB226detail7forwardIRA18_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 801718a:	4602      	mov	r2, r0
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	4611      	mov	r1, r2
 8017190:	4618      	mov	r0, r3
 8017192:	f000 f916 	bl	80173c2 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA18_KcvE5adaptES5_>
 8017196:	bf00      	nop
}
 8017198:	6878      	ldr	r0, [r7, #4]
 801719a:	3708      	adds	r7, #8
 801719c:	46bd      	mov	sp, r7
 801719e:	bd80      	pop	{r7, pc}

080171a0 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80171a0:	b480      	push	{r7}
 80171a2:	b083      	sub	sp, #12
 80171a4:	af00      	add	r7, sp, #0
 80171a6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80171a8:	687b      	ldr	r3, [r7, #4]
 80171aa:	4618      	mov	r0, r3
 80171ac:	370c      	adds	r7, #12
 80171ae:	46bd      	mov	sp, r7
 80171b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171b4:	4770      	bx	lr

080171b6 <_ZNSt10shared_ptrI7TMC2209EC1ISaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtSC_RbSC_RP6RemoraEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 80171b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80171ba:	b08f      	sub	sp, #60	@ 0x3c
 80171bc:	af06      	add	r7, sp, #24
 80171be:	61f8      	str	r0, [r7, #28]
 80171c0:	61b9      	str	r1, [r7, #24]
 80171c2:	617a      	str	r2, [r7, #20]
 80171c4:	613b      	str	r3, [r7, #16]
	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 80171c6:	69fc      	ldr	r4, [r7, #28]
 80171c8:	6978      	ldr	r0, [r7, #20]
 80171ca:	f7fd fb49 	bl	8014860 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80171ce:	4680      	mov	r8, r0
 80171d0:	6938      	ldr	r0, [r7, #16]
 80171d2:	f7fd fb50 	bl	8014876 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 80171d6:	4681      	mov	r9, r0
 80171d8:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80171da:	f7ff ffe1 	bl	80171a0 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 80171de:	4605      	mov	r5, r0
 80171e0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80171e2:	f7fd fb53 	bl	801488c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80171e6:	4606      	mov	r6, r0
 80171e8:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80171ea:	f7fd fb4f 	bl	801488c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80171ee:	60f8      	str	r0, [r7, #12]
 80171f0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80171f2:	f7f9 f854 	bl	801029e <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 80171f6:	60b8      	str	r0, [r7, #8]
 80171f8:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80171fa:	f7fd fb47 	bl	801488c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80171fe:	6078      	str	r0, [r7, #4]
 8017200:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8017202:	f7fd fb4e 	bl	80148a2 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 8017206:	4603      	mov	r3, r0
 8017208:	9305      	str	r3, [sp, #20]
 801720a:	687b      	ldr	r3, [r7, #4]
 801720c:	9304      	str	r3, [sp, #16]
 801720e:	68bb      	ldr	r3, [r7, #8]
 8017210:	9303      	str	r3, [sp, #12]
 8017212:	68fb      	ldr	r3, [r7, #12]
 8017214:	9302      	str	r3, [sp, #8]
 8017216:	9601      	str	r6, [sp, #4]
 8017218:	9500      	str	r5, [sp, #0]
 801721a:	464b      	mov	r3, r9
 801721c:	4642      	mov	r2, r8
 801721e:	69b9      	ldr	r1, [r7, #24]
 8017220:	4620      	mov	r0, r4
 8017222:	f000 f8dd 	bl	80173e0 <_ZNSt12__shared_ptrI7TMC2209LN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtSE_RbSE_RP6RemoraEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
	{ }
 8017226:	69fb      	ldr	r3, [r7, #28]
 8017228:	4618      	mov	r0, r3
 801722a:	3724      	adds	r7, #36	@ 0x24
 801722c:	46bd      	mov	sp, r7
 801722e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08017232 <_ZSt4moveIRSt10shared_ptrI7TMC2209EEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8017232:	b480      	push	{r7}
 8017234:	b083      	sub	sp, #12
 8017236:	af00      	add	r7, sp, #0
 8017238:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	4618      	mov	r0, r3
 801723e:	370c      	adds	r7, #12
 8017240:	46bd      	mov	sp, r7
 8017242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017246:	4770      	bx	lr

08017248 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I7TMC2209vEEOS_IT_LS2_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 8017248:	b580      	push	{r7, lr}
 801724a:	b082      	sub	sp, #8
 801724c:	af00      	add	r7, sp, #0
 801724e:	6078      	str	r0, [r7, #4]
 8017250:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 8017252:	683b      	ldr	r3, [r7, #0]
 8017254:	681a      	ldr	r2, [r3, #0]
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	601a      	str	r2, [r3, #0]
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	3304      	adds	r3, #4
 801725e:	4618      	mov	r0, r3
 8017260:	f7f4 fe6c 	bl	800bf3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	1d1a      	adds	r2, r3, #4
 8017268:	683b      	ldr	r3, [r7, #0]
 801726a:	3304      	adds	r3, #4
 801726c:	4619      	mov	r1, r3
 801726e:	4610      	mov	r0, r2
 8017270:	f7f5 fa23 	bl	800c6ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = nullptr;
 8017274:	683b      	ldr	r3, [r7, #0]
 8017276:	2200      	movs	r2, #0
 8017278:	601a      	str	r2, [r3, #0]
	}
 801727a:	687b      	ldr	r3, [r7, #4]
 801727c:	4618      	mov	r0, r3
 801727e:	3708      	adds	r7, #8
 8017280:	46bd      	mov	sp, r7
 8017282:	bd80      	pop	{r7, pc}

08017284 <_ZNSt15__uniq_ptr_dataI14TMC2209StepperSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8017284:	b580      	push	{r7, lr}
 8017286:	b082      	sub	sp, #8
 8017288:	af00      	add	r7, sp, #0
 801728a:	6078      	str	r0, [r7, #4]
 801728c:	6039      	str	r1, [r7, #0]
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	683a      	ldr	r2, [r7, #0]
 8017292:	4611      	mov	r1, r2
 8017294:	4618      	mov	r0, r3
 8017296:	f000 f8ef 	bl	8017478 <_ZNSt15__uniq_ptr_implI14TMC2209StepperSt14default_deleteIS0_EEC1EPS0_>
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	4618      	mov	r0, r3
 801729e:	3708      	adds	r7, #8
 80172a0:	46bd      	mov	sp, r7
 80172a2:	bd80      	pop	{r7, pc}

080172a4 <_ZNSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 80172a4:	b580      	push	{r7, lr}
 80172a6:	b082      	sub	sp, #8
 80172a8:	af00      	add	r7, sp, #0
 80172aa:	6078      	str	r0, [r7, #4]
 80172ac:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	6839      	ldr	r1, [r7, #0]
 80172b2:	4618      	mov	r0, r3
 80172b4:	f7ff ffe6 	bl	8017284 <_ZNSt15__uniq_ptr_dataI14TMC2209StepperSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 80172b8:	687b      	ldr	r3, [r7, #4]
 80172ba:	4618      	mov	r0, r3
 80172bc:	3708      	adds	r7, #8
 80172be:	46bd      	mov	sp, r7
 80172c0:	bd80      	pop	{r7, pc}

080172c2 <_ZNSt15__uniq_ptr_implI14TMC2209StepperSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 80172c2:	b580      	push	{r7, lr}
 80172c4:	b082      	sub	sp, #8
 80172c6:	af00      	add	r7, sp, #0
 80172c8:	6078      	str	r0, [r7, #4]
 80172ca:	687b      	ldr	r3, [r7, #4]
 80172cc:	4618      	mov	r0, r3
 80172ce:	f000 f8e7 	bl	80174a0 <_ZSt3getILj0EJP14TMC2209StepperSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80172d2:	4603      	mov	r3, r0
 80172d4:	4618      	mov	r0, r3
 80172d6:	3708      	adds	r7, #8
 80172d8:	46bd      	mov	sp, r7
 80172da:	bd80      	pop	{r7, pc}

080172dc <_ZNSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 80172dc:	b580      	push	{r7, lr}
 80172de:	b082      	sub	sp, #8
 80172e0:	af00      	add	r7, sp, #0
 80172e2:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	4618      	mov	r0, r3
 80172e8:	f000 f8e7 	bl	80174ba <_ZNSt15__uniq_ptr_implI14TMC2209StepperSt14default_deleteIS0_EE10_M_deleterEv>
 80172ec:	4603      	mov	r3, r0
 80172ee:	4618      	mov	r0, r3
 80172f0:	3708      	adds	r7, #8
 80172f2:	46bd      	mov	sp, r7
 80172f4:	bd80      	pop	{r7, pc}

080172f6 <_ZSt4moveIRP14TMC2209StepperEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80172f6:	b480      	push	{r7}
 80172f8:	b083      	sub	sp, #12
 80172fa:	af00      	add	r7, sp, #0
 80172fc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80172fe:	687b      	ldr	r3, [r7, #4]
 8017300:	4618      	mov	r0, r3
 8017302:	370c      	adds	r7, #12
 8017304:	46bd      	mov	sp, r7
 8017306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801730a:	4770      	bx	lr

0801730c <_ZN14TMC2209StepperD1Ev>:
class TMC2209Stepper : public TMC2208Stepper {
 801730c:	b580      	push	{r7, lr}
 801730e:	b082      	sub	sp, #8
 8017310:	af00      	add	r7, sp, #0
 8017312:	6078      	str	r0, [r7, #4]
 8017314:	4a05      	ldr	r2, [pc, #20]	@ (801732c <_ZN14TMC2209StepperD1Ev+0x20>)
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	601a      	str	r2, [r3, #0]
 801731a:	687b      	ldr	r3, [r7, #4]
 801731c:	4618      	mov	r0, r3
 801731e:	f7fc fcd1 	bl	8013cc4 <_ZN14TMC2208StepperD1Ev>
 8017322:	687b      	ldr	r3, [r7, #4]
 8017324:	4618      	mov	r0, r3
 8017326:	3708      	adds	r7, #8
 8017328:	46bd      	mov	sp, r7
 801732a:	bd80      	pop	{r7, pc}
 801732c:	08028c18 	.word	0x08028c18

08017330 <_ZNKSt14default_deleteI14TMC2209StepperEclEPS0_>:
      operator()(_Tp* __ptr) const
 8017330:	b590      	push	{r4, r7, lr}
 8017332:	b083      	sub	sp, #12
 8017334:	af00      	add	r7, sp, #0
 8017336:	6078      	str	r0, [r7, #4]
 8017338:	6039      	str	r1, [r7, #0]
	delete __ptr;
 801733a:	683c      	ldr	r4, [r7, #0]
 801733c:	2c00      	cmp	r4, #0
 801733e:	d006      	beq.n	801734e <_ZNKSt14default_deleteI14TMC2209StepperEclEPS0_+0x1e>
 8017340:	4620      	mov	r0, r4
 8017342:	f7ff ffe3 	bl	801730c <_ZN14TMC2209StepperD1Ev>
 8017346:	216c      	movs	r1, #108	@ 0x6c
 8017348:	4620      	mov	r0, r4
 801734a:	f00e fdb6 	bl	8025eba <_ZdlPvj>
      }
 801734e:	bf00      	nop
 8017350:	370c      	adds	r7, #12
 8017352:	46bd      	mov	sp, r7
 8017354:	bd90      	pop	{r4, r7, pc}

08017356 <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8017356:	b580      	push	{r7, lr}
 8017358:	b082      	sub	sp, #8
 801735a:	af00      	add	r7, sp, #0
 801735c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 801735e:	687b      	ldr	r3, [r7, #4]
 8017360:	4618      	mov	r0, r3
 8017362:	f000 f8b7 	bl	80174d4 <_ZNKSt15__uniq_ptr_implI14TMC2209StepperSt14default_deleteIS0_EE6_M_ptrEv>
 8017366:	4603      	mov	r3, r0
 8017368:	4618      	mov	r0, r3
 801736a:	3708      	adds	r7, #8
 801736c:	46bd      	mov	sp, r7
 801736e:	bd80      	pop	{r7, pc}

08017370 <_ZN11ArduinoJson8V730HB229ConverterIhvE8fromJsonENS0_16JsonVariantConstE>:
  static T fromJson(JsonVariantConst src) {
 8017370:	b580      	push	{r7, lr}
 8017372:	b084      	sub	sp, #16
 8017374:	af00      	add	r7, sp, #0
 8017376:	463b      	mov	r3, r7
 8017378:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 801737c:	463b      	mov	r3, r7
 801737e:	4618      	mov	r0, r3
 8017380:	f7ee ff32 	bl	80061e8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8017384:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 8017386:	463b      	mov	r3, r7
 8017388:	4618      	mov	r0, r3
 801738a:	f7ee ff39 	bl	8006200 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 801738e:	60b8      	str	r0, [r7, #8]
    return data ? data->template asIntegral<T>(resources) : T();
 8017390:	68fb      	ldr	r3, [r7, #12]
 8017392:	2b00      	cmp	r3, #0
 8017394:	d005      	beq.n	80173a2 <_ZN11ArduinoJson8V730HB229ConverterIhvE8fromJsonENS0_16JsonVariantConstE+0x32>
 8017396:	68b9      	ldr	r1, [r7, #8]
 8017398:	68f8      	ldr	r0, [r7, #12]
 801739a:	f000 f8a9 	bl	80174f0 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE>
 801739e:	4603      	mov	r3, r0
 80173a0:	e000      	b.n	80173a4 <_ZN11ArduinoJson8V730HB229ConverterIhvE8fromJsonENS0_16JsonVariantConstE+0x34>
 80173a2:	2300      	movs	r3, #0
  }
 80173a4:	4618      	mov	r0, r3
 80173a6:	3710      	adds	r7, #16
 80173a8:	46bd      	mov	sp, r7
 80173aa:	bd80      	pop	{r7, pc}

080173ac <_ZN11ArduinoJson8V730HB226detail7forwardIRA18_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 80173ac:	b480      	push	{r7}
 80173ae:	b083      	sub	sp, #12
 80173b0:	af00      	add	r7, sp, #0
 80173b2:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 80173b4:	687b      	ldr	r3, [r7, #4]
}
 80173b6:	4618      	mov	r0, r3
 80173b8:	370c      	adds	r7, #12
 80173ba:	46bd      	mov	sp, r7
 80173bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173c0:	4770      	bx	lr

080173c2 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA18_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 80173c2:	b580      	push	{r7, lr}
 80173c4:	b082      	sub	sp, #8
 80173c6:	af00      	add	r7, sp, #0
 80173c8:	6078      	str	r0, [r7, #4]
 80173ca:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 80173cc:	2301      	movs	r3, #1
 80173ce:	2211      	movs	r2, #17
 80173d0:	6839      	ldr	r1, [r7, #0]
 80173d2:	6878      	ldr	r0, [r7, #4]
 80173d4:	f7ec fdc2 	bl	8003f5c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 80173d8:	6878      	ldr	r0, [r7, #4]
 80173da:	3708      	adds	r7, #8
 80173dc:	46bd      	mov	sp, r7
 80173de:	bd80      	pop	{r7, pc}

080173e0 <_ZNSt12__shared_ptrI7TMC2209LN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtSE_RbSE_RP6RemoraEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 80173e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173e4:	b092      	sub	sp, #72	@ 0x48
 80173e6:	af08      	add	r7, sp, #32
 80173e8:	6278      	str	r0, [r7, #36]	@ 0x24
 80173ea:	6239      	str	r1, [r7, #32]
 80173ec:	61fa      	str	r2, [r7, #28]
 80173ee:	61bb      	str	r3, [r7, #24]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 80173f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173f2:	2200      	movs	r2, #0
 80173f4:	601a      	str	r2, [r3, #0]
 80173f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173f8:	1d1c      	adds	r4, r3, #4
 80173fa:	6a7d      	ldr	r5, [r7, #36]	@ 0x24
 80173fc:	69f8      	ldr	r0, [r7, #28]
 80173fe:	f7fd fa2f 	bl	8014860 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8017402:	4680      	mov	r8, r0
 8017404:	69b8      	ldr	r0, [r7, #24]
 8017406:	f7fd fa36 	bl	8014876 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 801740a:	4606      	mov	r6, r0
 801740c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801740e:	f7ff fec7 	bl	80171a0 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8017412:	6178      	str	r0, [r7, #20]
 8017414:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8017416:	f7fd fa39 	bl	801488c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801741a:	6138      	str	r0, [r7, #16]
 801741c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 801741e:	f7fd fa35 	bl	801488c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8017422:	60f8      	str	r0, [r7, #12]
 8017424:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8017426:	f7f8 ff3a 	bl	801029e <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 801742a:	60b8      	str	r0, [r7, #8]
 801742c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 801742e:	f7fd fa2d 	bl	801488c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8017432:	6078      	str	r0, [r7, #4]
 8017434:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8017436:	f7fd fa34 	bl	80148a2 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 801743a:	4603      	mov	r3, r0
 801743c:	9306      	str	r3, [sp, #24]
 801743e:	687b      	ldr	r3, [r7, #4]
 8017440:	9305      	str	r3, [sp, #20]
 8017442:	68bb      	ldr	r3, [r7, #8]
 8017444:	9304      	str	r3, [sp, #16]
 8017446:	68fb      	ldr	r3, [r7, #12]
 8017448:	9303      	str	r3, [sp, #12]
 801744a:	693b      	ldr	r3, [r7, #16]
 801744c:	9302      	str	r3, [sp, #8]
 801744e:	697b      	ldr	r3, [r7, #20]
 8017450:	9301      	str	r3, [sp, #4]
 8017452:	9600      	str	r6, [sp, #0]
 8017454:	4643      	mov	r3, r8
 8017456:	6a3a      	ldr	r2, [r7, #32]
 8017458:	4629      	mov	r1, r5
 801745a:	4620      	mov	r0, r4
 801745c:	f000 f8da 	bl	8017614 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7TMC2209SaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtSE_RbSE_RP6RemoraEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>
	{ _M_enable_shared_from_this_with(_M_ptr); }
 8017460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017462:	681b      	ldr	r3, [r3, #0]
 8017464:	4619      	mov	r1, r3
 8017466:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017468:	f000 f946 	bl	80176f8 <_ZNSt12__shared_ptrI7TMC2209LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
 801746c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801746e:	4618      	mov	r0, r3
 8017470:	3728      	adds	r7, #40	@ 0x28
 8017472:	46bd      	mov	sp, r7
 8017474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017478 <_ZNSt15__uniq_ptr_implI14TMC2209StepperSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8017478:	b590      	push	{r4, r7, lr}
 801747a:	b083      	sub	sp, #12
 801747c:	af00      	add	r7, sp, #0
 801747e:	6078      	str	r0, [r7, #4]
 8017480:	6039      	str	r1, [r7, #0]
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	4618      	mov	r0, r3
 8017486:	f000 f958 	bl	801773a <_ZNSt5tupleIJP14TMC2209StepperSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 801748a:	683c      	ldr	r4, [r7, #0]
 801748c:	6878      	ldr	r0, [r7, #4]
 801748e:	f7ff ff18 	bl	80172c2 <_ZNSt15__uniq_ptr_implI14TMC2209StepperSt14default_deleteIS0_EE6_M_ptrEv>
 8017492:	4603      	mov	r3, r0
 8017494:	601c      	str	r4, [r3, #0]
 8017496:	687b      	ldr	r3, [r7, #4]
 8017498:	4618      	mov	r0, r3
 801749a:	370c      	adds	r7, #12
 801749c:	46bd      	mov	sp, r7
 801749e:	bd90      	pop	{r4, r7, pc}

080174a0 <_ZSt3getILj0EJP14TMC2209StepperSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80174a0:	b580      	push	{r7, lr}
 80174a2:	b082      	sub	sp, #8
 80174a4:	af00      	add	r7, sp, #0
 80174a6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	4618      	mov	r0, r3
 80174ac:	f000 f952 	bl	8017754 <_ZSt12__get_helperILj0EP14TMC2209StepperJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80174b0:	4603      	mov	r3, r0
 80174b2:	4618      	mov	r0, r3
 80174b4:	3708      	adds	r7, #8
 80174b6:	46bd      	mov	sp, r7
 80174b8:	bd80      	pop	{r7, pc}

080174ba <_ZNSt15__uniq_ptr_implI14TMC2209StepperSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 80174ba:	b580      	push	{r7, lr}
 80174bc:	b082      	sub	sp, #8
 80174be:	af00      	add	r7, sp, #0
 80174c0:	6078      	str	r0, [r7, #4]
 80174c2:	687b      	ldr	r3, [r7, #4]
 80174c4:	4618      	mov	r0, r3
 80174c6:	f000 f951 	bl	801776c <_ZSt3getILj1EJP14TMC2209StepperSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80174ca:	4603      	mov	r3, r0
 80174cc:	4618      	mov	r0, r3
 80174ce:	3708      	adds	r7, #8
 80174d0:	46bd      	mov	sp, r7
 80174d2:	bd80      	pop	{r7, pc}

080174d4 <_ZNKSt15__uniq_ptr_implI14TMC2209StepperSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 80174d4:	b580      	push	{r7, lr}
 80174d6:	b082      	sub	sp, #8
 80174d8:	af00      	add	r7, sp, #0
 80174da:	6078      	str	r0, [r7, #4]
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	4618      	mov	r0, r3
 80174e0:	f000 f950 	bl	8017784 <_ZSt3getILj0EJP14TMC2209StepperSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 80174e4:	4603      	mov	r3, r0
 80174e6:	681b      	ldr	r3, [r3, #0]
 80174e8:	4618      	mov	r0, r3
 80174ea:	3708      	adds	r7, #8
 80174ec:	46bd      	mov	sp, r7
 80174ee:	bd80      	pop	{r7, pc}

080174f0 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE>:
  T asIntegral(const ResourceManager* resources) const {
 80174f0:	b580      	push	{r7, lr}
 80174f2:	b084      	sub	sp, #16
 80174f4:	af00      	add	r7, sp, #0
 80174f6:	6078      	str	r0, [r7, #4]
 80174f8:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 80174fa:	6839      	ldr	r1, [r7, #0]
 80174fc:	6878      	ldr	r0, [r7, #4]
 80174fe:	f7ed fe89 	bl	8005214 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 8017502:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	791b      	ldrb	r3, [r3, #4]
 8017508:	3b04      	subs	r3, #4
 801750a:	2b1a      	cmp	r3, #26
 801750c:	d87c      	bhi.n	8017608 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x118>
 801750e:	a201      	add	r2, pc, #4	@ (adr r2, 8017514 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x24>)
 8017510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017514:	080175c7 	.word	0x080175c7
 8017518:	080175d5 	.word	0x080175d5
 801751c:	08017581 	.word	0x08017581
 8017520:	08017609 	.word	0x08017609
 8017524:	08017609 	.word	0x08017609
 8017528:	08017609 	.word	0x08017609
 801752c:	08017587 	.word	0x08017587
 8017530:	08017609 	.word	0x08017609
 8017534:	08017595 	.word	0x08017595
 8017538:	08017609 	.word	0x08017609
 801753c:	080175e5 	.word	0x080175e5
 8017540:	08017609 	.word	0x08017609
 8017544:	08017609 	.word	0x08017609
 8017548:	08017609 	.word	0x08017609
 801754c:	08017609 	.word	0x08017609
 8017550:	08017609 	.word	0x08017609
 8017554:	08017609 	.word	0x08017609
 8017558:	08017609 	.word	0x08017609
 801755c:	08017609 	.word	0x08017609
 8017560:	08017609 	.word	0x08017609
 8017564:	08017609 	.word	0x08017609
 8017568:	08017609 	.word	0x08017609
 801756c:	080175a3 	.word	0x080175a3
 8017570:	08017609 	.word	0x08017609
 8017574:	080175b5 	.word	0x080175b5
 8017578:	08017609 	.word	0x08017609
 801757c:	080175f7 	.word	0x080175f7
        return content_.asBoolean;
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	781b      	ldrb	r3, [r3, #0]
 8017584:	e041      	b.n	801760a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asUint32);
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	681b      	ldr	r3, [r3, #0]
 801758a:	4618      	mov	r0, r3
 801758c:	f000 f907 	bl	801779e <_ZN11ArduinoJson8V730HB226detail13convertNumberIhmEET_T0_>
 8017590:	4603      	mov	r3, r0
 8017592:	e03a      	b.n	801760a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asInt32);
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	681b      	ldr	r3, [r3, #0]
 8017598:	4618      	mov	r0, r3
 801759a:	f000 f912 	bl	80177c2 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhlEET_T0_>
 801759e:	4603      	mov	r3, r0
 80175a0:	e033      	b.n	801760a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asUint64);
 80175a2:	68fb      	ldr	r3, [r7, #12]
 80175a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175a8:	4610      	mov	r0, r2
 80175aa:	4619      	mov	r1, r3
 80175ac:	f000 f91b 	bl	80177e6 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhyEET_T0_>
 80175b0:	4603      	mov	r3, r0
 80175b2:	e02a      	b.n	801760a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asInt64);
 80175b4:	68fb      	ldr	r3, [r7, #12]
 80175b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175ba:	4610      	mov	r0, r2
 80175bc:	4619      	mov	r1, r3
 80175be:	f000 f925 	bl	801780c <_ZN11ArduinoJson8V730HB226detail13convertNumberIhxEET_T0_>
 80175c2:	4603      	mov	r3, r0
 80175c4:	e021      	b.n	801760a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asLinkedString);
 80175c6:	687b      	ldr	r3, [r7, #4]
 80175c8:	681b      	ldr	r3, [r3, #0]
 80175ca:	4618      	mov	r0, r3
 80175cc:	f000 f931 	bl	8017832 <_ZN11ArduinoJson8V730HB226detail11parseNumberIhEET_PKc>
 80175d0:	4603      	mov	r3, r0
 80175d2:	e01a      	b.n	801760a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asOwnedString->data);
 80175d4:	687b      	ldr	r3, [r7, #4]
 80175d6:	681b      	ldr	r3, [r3, #0]
 80175d8:	3308      	adds	r3, #8
 80175da:	4618      	mov	r0, r3
 80175dc:	f000 f929 	bl	8017832 <_ZN11ArduinoJson8V730HB226detail11parseNumberIhEET_PKc>
 80175e0:	4603      	mov	r3, r0
 80175e2:	e012      	b.n	801760a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asFloat);
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	edd3 7a00 	vldr	s15, [r3]
 80175ea:	eeb0 0a67 	vmov.f32	s0, s15
 80175ee:	f000 f934 	bl	801785a <_ZN11ArduinoJson8V730HB226detail13convertNumberIhfEET_T0_>
 80175f2:	4603      	mov	r3, r0
 80175f4:	e009      	b.n	801760a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asDouble);
 80175f6:	68fb      	ldr	r3, [r7, #12]
 80175f8:	ed93 7b00 	vldr	d7, [r3]
 80175fc:	eeb0 0b47 	vmov.f64	d0, d7
 8017600:	f000 f945 	bl	801788e <_ZN11ArduinoJson8V730HB226detail13convertNumberIhdEET_T0_>
 8017604:	4603      	mov	r3, r0
 8017606:	e000      	b.n	801760a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11a>
        return 0;
 8017608:	2300      	movs	r3, #0
  }
 801760a:	4618      	mov	r0, r3
 801760c:	3710      	adds	r7, #16
 801760e:	46bd      	mov	sp, r7
 8017610:	bd80      	pop	{r7, pc}
 8017612:	bf00      	nop

08017614 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7TMC2209SaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtSE_RbSE_RP6RemoraEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>:
	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
 8017614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017618:	b094      	sub	sp, #80	@ 0x50
 801761a:	af06      	add	r7, sp, #24
 801761c:	61f8      	str	r0, [r7, #28]
 801761e:	61b9      	str	r1, [r7, #24]
 8017620:	617a      	str	r2, [r7, #20]
 8017622:	613b      	str	r3, [r7, #16]
	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 8017624:	697a      	ldr	r2, [r7, #20]
 8017626:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801762a:	4611      	mov	r1, r2
 801762c:	4618      	mov	r0, r3
 801762e:	f000 f948 	bl	80178c2 <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	  auto __guard = std::__allocate_guarded(__a2);
 8017632:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8017636:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 801763a:	4611      	mov	r1, r2
 801763c:	4618      	mov	r0, r3
 801763e:	f000 f959 	bl	80178f4 <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>
	  _Sp_cp_type* __mem = __guard.get();
 8017642:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8017646:	4618      	mov	r0, r3
 8017648:	f000 f97c 	bl	8017944 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>
 801764c:	6378      	str	r0, [r7, #52]	@ 0x34
	  auto __pi = ::new (__mem)
 801764e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017650:	4619      	mov	r1, r3
 8017652:	205c      	movs	r0, #92	@ 0x5c
 8017654:	f7f2 f854 	bl	8009700 <_ZnwjPv>
 8017658:	4604      	mov	r4, r0
 801765a:	6938      	ldr	r0, [r7, #16]
 801765c:	f7fd f900 	bl	8014860 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8017660:	4680      	mov	r8, r0
 8017662:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8017664:	f7fd f907 	bl	8014876 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8017668:	4681      	mov	r9, r0
 801766a:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 801766c:	f7ff fd98 	bl	80171a0 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8017670:	4605      	mov	r5, r0
 8017672:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8017674:	f7fd f90a 	bl	801488c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8017678:	4606      	mov	r6, r0
 801767a:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 801767c:	f7fd f906 	bl	801488c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8017680:	60f8      	str	r0, [r7, #12]
 8017682:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8017684:	f7f8 fe0b 	bl	801029e <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8017688:	60b8      	str	r0, [r7, #8]
 801768a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801768c:	f7fd f8fe 	bl	801488c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8017690:	6078      	str	r0, [r7, #4]
 8017692:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8017694:	f7fd f905 	bl	80148a2 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 8017698:	4603      	mov	r3, r0
 801769a:	9305      	str	r3, [sp, #20]
 801769c:	687b      	ldr	r3, [r7, #4]
 801769e:	9304      	str	r3, [sp, #16]
 80176a0:	68bb      	ldr	r3, [r7, #8]
 80176a2:	9303      	str	r3, [sp, #12]
 80176a4:	68fb      	ldr	r3, [r7, #12]
 80176a6:	9302      	str	r3, [sp, #8]
 80176a8:	9601      	str	r6, [sp, #4]
 80176aa:	9500      	str	r5, [sp, #0]
 80176ac:	464b      	mov	r3, r9
 80176ae:	4642      	mov	r2, r8
 80176b0:	4651      	mov	r1, sl
 80176b2:	4620      	mov	r0, r4
 80176b4:	f000 f954 	bl	8017960 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtSE_RbSE_RP6RemoraEEES1_DpOT_>
 80176b8:	633c      	str	r4, [r7, #48]	@ 0x30
	  __guard = nullptr;
 80176ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80176be:	2100      	movs	r1, #0
 80176c0:	4618      	mov	r0, r3
 80176c2:	f000 f99d 	bl	8017a00 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>
	  _M_pi = __pi;
 80176c6:	69fb      	ldr	r3, [r7, #28]
 80176c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80176ca:	601a      	str	r2, [r3, #0]
	  __p = __pi->_M_ptr();
 80176cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80176ce:	f000 f9a6 	bl	8017a1e <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 80176d2:	4602      	mov	r2, r0
 80176d4:	69bb      	ldr	r3, [r7, #24]
 80176d6:	601a      	str	r2, [r3, #0]
	}
 80176d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80176dc:	4618      	mov	r0, r3
 80176de:	f000 f91c 	bl	801791a <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 80176e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80176e6:	4618      	mov	r0, r3
 80176e8:	f000 f8f8 	bl	80178dc <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 80176ec:	69fb      	ldr	r3, [r7, #28]
 80176ee:	4618      	mov	r0, r3
 80176f0:	3738      	adds	r7, #56	@ 0x38
 80176f2:	46bd      	mov	sp, r7
 80176f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080176f8 <_ZNSt12__shared_ptrI7TMC2209LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp* __p) noexcept
 80176f8:	b580      	push	{r7, lr}
 80176fa:	b084      	sub	sp, #16
 80176fc:	af00      	add	r7, sp, #0
 80176fe:	6078      	str	r0, [r7, #4]
 8017700:	6039      	str	r1, [r7, #0]
	  if (auto __base = __enable_shared_from_this_base(_M_refcount, __p))
 8017702:	687b      	ldr	r3, [r7, #4]
 8017704:	1d1a      	adds	r2, r3, #4
 8017706:	683b      	ldr	r3, [r7, #0]
 8017708:	2b00      	cmp	r3, #0
 801770a:	d002      	beq.n	8017712 <_ZNSt12__shared_ptrI7TMC2209LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_+0x1a>
 801770c:	683b      	ldr	r3, [r7, #0]
 801770e:	3318      	adds	r3, #24
 8017710:	e000      	b.n	8017714 <_ZNSt12__shared_ptrI7TMC2209LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_+0x1c>
 8017712:	2300      	movs	r3, #0
 8017714:	4619      	mov	r1, r3
 8017716:	4610      	mov	r0, r2
 8017718:	f7fd ffb9 	bl	801568e <_ZSt30__enable_shared_from_this_baseRKSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEPKSt23enable_shared_from_thisI3TMCE>
 801771c:	60f8      	str	r0, [r7, #12]
 801771e:	68fb      	ldr	r3, [r7, #12]
 8017720:	2b00      	cmp	r3, #0
 8017722:	d006      	beq.n	8017732 <_ZNSt12__shared_ptrI7TMC2209LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_+0x3a>
	    __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
 8017724:	687b      	ldr	r3, [r7, #4]
 8017726:	3304      	adds	r3, #4
 8017728:	461a      	mov	r2, r3
 801772a:	6839      	ldr	r1, [r7, #0]
 801772c:	68f8      	ldr	r0, [r7, #12]
 801772e:	f000 f984 	bl	8017a3a <_ZNKSt23enable_shared_from_thisI3TMCE14_M_weak_assignI7TMC2209EEvPT_RKSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE>
	}
 8017732:	bf00      	nop
 8017734:	3710      	adds	r7, #16
 8017736:	46bd      	mov	sp, r7
 8017738:	bd80      	pop	{r7, pc}

0801773a <_ZNSt5tupleIJP14TMC2209StepperSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 801773a:	b580      	push	{r7, lr}
 801773c:	b082      	sub	sp, #8
 801773e:	af00      	add	r7, sp, #0
 8017740:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8017742:	687b      	ldr	r3, [r7, #4]
 8017744:	4618      	mov	r0, r3
 8017746:	f000 f988 	bl	8017a5a <_ZNSt11_Tuple_implILj0EJP14TMC2209StepperSt14default_deleteIS0_EEEC1Ev>
 801774a:	687b      	ldr	r3, [r7, #4]
 801774c:	4618      	mov	r0, r3
 801774e:	3708      	adds	r7, #8
 8017750:	46bd      	mov	sp, r7
 8017752:	bd80      	pop	{r7, pc}

08017754 <_ZSt12__get_helperILj0EP14TMC2209StepperJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8017754:	b580      	push	{r7, lr}
 8017756:	b082      	sub	sp, #8
 8017758:	af00      	add	r7, sp, #0
 801775a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801775c:	6878      	ldr	r0, [r7, #4]
 801775e:	f000 f98c 	bl	8017a7a <_ZNSt11_Tuple_implILj0EJP14TMC2209StepperSt14default_deleteIS0_EEE7_M_headERS4_>
 8017762:	4603      	mov	r3, r0
 8017764:	4618      	mov	r0, r3
 8017766:	3708      	adds	r7, #8
 8017768:	46bd      	mov	sp, r7
 801776a:	bd80      	pop	{r7, pc}

0801776c <_ZSt3getILj1EJP14TMC2209StepperSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 801776c:	b580      	push	{r7, lr}
 801776e:	b082      	sub	sp, #8
 8017770:	af00      	add	r7, sp, #0
 8017772:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8017774:	6878      	ldr	r0, [r7, #4]
 8017776:	f000 f98d 	bl	8017a94 <_ZSt12__get_helperILj1ESt14default_deleteI14TMC2209StepperEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 801777a:	4603      	mov	r3, r0
 801777c:	4618      	mov	r0, r3
 801777e:	3708      	adds	r7, #8
 8017780:	46bd      	mov	sp, r7
 8017782:	bd80      	pop	{r7, pc}

08017784 <_ZSt3getILj0EJP14TMC2209StepperSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 8017784:	b580      	push	{r7, lr}
 8017786:	b082      	sub	sp, #8
 8017788:	af00      	add	r7, sp, #0
 801778a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	4618      	mov	r0, r3
 8017790:	f000 f98c 	bl	8017aac <_ZSt12__get_helperILj0EP14TMC2209StepperJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8017794:	4603      	mov	r3, r0
 8017796:	4618      	mov	r0, r3
 8017798:	3708      	adds	r7, #8
 801779a:	46bd      	mov	sp, r7
 801779c:	bd80      	pop	{r7, pc}

0801779e <_ZN11ArduinoJson8V730HB226detail13convertNumberIhmEET_T0_>:
TOut convertNumber(TIn value) {
 801779e:	b580      	push	{r7, lr}
 80177a0:	b082      	sub	sp, #8
 80177a2:	af00      	add	r7, sp, #0
 80177a4:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80177a6:	6878      	ldr	r0, [r7, #4]
 80177a8:	f000 f98c 	bl	8017ac4 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 80177ac:	4603      	mov	r3, r0
 80177ae:	2b00      	cmp	r3, #0
 80177b0:	d002      	beq.n	80177b8 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhmEET_T0_+0x1a>
 80177b2:	687b      	ldr	r3, [r7, #4]
 80177b4:	b2db      	uxtb	r3, r3
 80177b6:	e000      	b.n	80177ba <_ZN11ArduinoJson8V730HB226detail13convertNumberIhmEET_T0_+0x1c>
 80177b8:	2300      	movs	r3, #0
}
 80177ba:	4618      	mov	r0, r3
 80177bc:	3708      	adds	r7, #8
 80177be:	46bd      	mov	sp, r7
 80177c0:	bd80      	pop	{r7, pc}

080177c2 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhlEET_T0_>:
TOut convertNumber(TIn value) {
 80177c2:	b580      	push	{r7, lr}
 80177c4:	b082      	sub	sp, #8
 80177c6:	af00      	add	r7, sp, #0
 80177c8:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80177ca:	6878      	ldr	r0, [r7, #4]
 80177cc:	f000 f98c 	bl	8017ae8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>
 80177d0:	4603      	mov	r3, r0
 80177d2:	2b00      	cmp	r3, #0
 80177d4:	d002      	beq.n	80177dc <_ZN11ArduinoJson8V730HB226detail13convertNumberIhlEET_T0_+0x1a>
 80177d6:	687b      	ldr	r3, [r7, #4]
 80177d8:	b2db      	uxtb	r3, r3
 80177da:	e000      	b.n	80177de <_ZN11ArduinoJson8V730HB226detail13convertNumberIhlEET_T0_+0x1c>
 80177dc:	2300      	movs	r3, #0
}
 80177de:	4618      	mov	r0, r3
 80177e0:	3708      	adds	r7, #8
 80177e2:	46bd      	mov	sp, r7
 80177e4:	bd80      	pop	{r7, pc}

080177e6 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhyEET_T0_>:
TOut convertNumber(TIn value) {
 80177e6:	b580      	push	{r7, lr}
 80177e8:	b082      	sub	sp, #8
 80177ea:	af00      	add	r7, sp, #0
 80177ec:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80177f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80177f4:	f000 f98f 	bl	8017b16 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 80177f8:	4603      	mov	r3, r0
 80177fa:	2b00      	cmp	r3, #0
 80177fc:	d001      	beq.n	8017802 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhyEET_T0_+0x1c>
 80177fe:	783b      	ldrb	r3, [r7, #0]
 8017800:	e000      	b.n	8017804 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhyEET_T0_+0x1e>
 8017802:	2300      	movs	r3, #0
}
 8017804:	4618      	mov	r0, r3
 8017806:	3708      	adds	r7, #8
 8017808:	46bd      	mov	sp, r7
 801780a:	bd80      	pop	{r7, pc}

0801780c <_ZN11ArduinoJson8V730HB226detail13convertNumberIhxEET_T0_>:
TOut convertNumber(TIn value) {
 801780c:	b580      	push	{r7, lr}
 801780e:	b082      	sub	sp, #8
 8017810:	af00      	add	r7, sp, #0
 8017812:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8017816:	e9d7 0100 	ldrd	r0, r1, [r7]
 801781a:	f000 f995 	bl	8017b48 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>
 801781e:	4603      	mov	r3, r0
 8017820:	2b00      	cmp	r3, #0
 8017822:	d001      	beq.n	8017828 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhxEET_T0_+0x1c>
 8017824:	783b      	ldrb	r3, [r7, #0]
 8017826:	e000      	b.n	801782a <_ZN11ArduinoJson8V730HB226detail13convertNumberIhxEET_T0_+0x1e>
 8017828:	2300      	movs	r3, #0
}
 801782a:	4618      	mov	r0, r3
 801782c:	3708      	adds	r7, #8
 801782e:	46bd      	mov	sp, r7
 8017830:	bd80      	pop	{r7, pc}

08017832 <_ZN11ArduinoJson8V730HB226detail11parseNumberIhEET_PKc>:
inline T parseNumber(const char* s) {
 8017832:	b580      	push	{r7, lr}
 8017834:	b086      	sub	sp, #24
 8017836:	af00      	add	r7, sp, #0
 8017838:	6078      	str	r0, [r7, #4]
  return parseNumber(s).convertTo<T>();
 801783a:	f107 0308 	add.w	r3, r7, #8
 801783e:	6879      	ldr	r1, [r7, #4]
 8017840:	4618      	mov	r0, r3
 8017842:	f7ed ff4b 	bl	80056dc <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>
 8017846:	f107 0308 	add.w	r3, r7, #8
 801784a:	4618      	mov	r0, r3
 801784c:	f000 f99c 	bl	8017b88 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIhEET_v>
 8017850:	4603      	mov	r3, r0
}
 8017852:	4618      	mov	r0, r3
 8017854:	3718      	adds	r7, #24
 8017856:	46bd      	mov	sp, r7
 8017858:	bd80      	pop	{r7, pc}

0801785a <_ZN11ArduinoJson8V730HB226detail13convertNumberIhfEET_T0_>:
TOut convertNumber(TIn value) {
 801785a:	b580      	push	{r7, lr}
 801785c:	b082      	sub	sp, #8
 801785e:	af00      	add	r7, sp, #0
 8017860:	ed87 0a01 	vstr	s0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8017864:	ed97 0a01 	vldr	s0, [r7, #4]
 8017868:	f000 f9dc 	bl	8017c24 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 801786c:	4603      	mov	r3, r0
 801786e:	2b00      	cmp	r3, #0
 8017870:	d008      	beq.n	8017884 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhfEET_T0_+0x2a>
 8017872:	edd7 7a01 	vldr	s15, [r7, #4]
 8017876:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801787a:	edc7 7a00 	vstr	s15, [r7]
 801787e:	783b      	ldrb	r3, [r7, #0]
 8017880:	b2db      	uxtb	r3, r3
 8017882:	e000      	b.n	8017886 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhfEET_T0_+0x2c>
 8017884:	2300      	movs	r3, #0
}
 8017886:	4618      	mov	r0, r3
 8017888:	3708      	adds	r7, #8
 801788a:	46bd      	mov	sp, r7
 801788c:	bd80      	pop	{r7, pc}

0801788e <_ZN11ArduinoJson8V730HB226detail13convertNumberIhdEET_T0_>:
TOut convertNumber(TIn value) {
 801788e:	b580      	push	{r7, lr}
 8017890:	b084      	sub	sp, #16
 8017892:	af00      	add	r7, sp, #0
 8017894:	ed87 0b02 	vstr	d0, [r7, #8]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8017898:	ed97 0b02 	vldr	d0, [r7, #8]
 801789c:	f000 f9ea 	bl	8017c74 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 80178a0:	4603      	mov	r3, r0
 80178a2:	2b00      	cmp	r3, #0
 80178a4:	d008      	beq.n	80178b8 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhdEET_T0_+0x2a>
 80178a6:	ed97 7b02 	vldr	d7, [r7, #8]
 80178aa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80178ae:	edc7 7a01 	vstr	s15, [r7, #4]
 80178b2:	793b      	ldrb	r3, [r7, #4]
 80178b4:	b2db      	uxtb	r3, r3
 80178b6:	e000      	b.n	80178ba <_ZN11ArduinoJson8V730HB226detail13convertNumberIhdEET_T0_+0x2c>
 80178b8:	2300      	movs	r3, #0
}
 80178ba:	4618      	mov	r0, r3
 80178bc:	3710      	adds	r7, #16
 80178be:	46bd      	mov	sp, r7
 80178c0:	bd80      	pop	{r7, pc}

080178c2 <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 80178c2:	b580      	push	{r7, lr}
 80178c4:	b082      	sub	sp, #8
 80178c6:	af00      	add	r7, sp, #0
 80178c8:	6078      	str	r0, [r7, #4]
 80178ca:	6039      	str	r1, [r7, #0]
 80178cc:	6878      	ldr	r0, [r7, #4]
 80178ce:	f000 f9f9 	bl	8017cc4 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 80178d2:	687b      	ldr	r3, [r7, #4]
 80178d4:	4618      	mov	r0, r3
 80178d6:	3708      	adds	r7, #8
 80178d8:	46bd      	mov	sp, r7
 80178da:	bd80      	pop	{r7, pc}

080178dc <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80178dc:	b580      	push	{r7, lr}
 80178de:	b082      	sub	sp, #8
 80178e0:	af00      	add	r7, sp, #0
 80178e2:	6078      	str	r0, [r7, #4]
 80178e4:	6878      	ldr	r0, [r7, #4]
 80178e6:	f000 f9f8 	bl	8017cda <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 80178ea:	687b      	ldr	r3, [r7, #4]
 80178ec:	4618      	mov	r0, r3
 80178ee:	3708      	adds	r7, #8
 80178f0:	46bd      	mov	sp, r7
 80178f2:	bd80      	pop	{r7, pc}

080178f4 <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>:
    __allocate_guarded(_Alloc& __a)
 80178f4:	b580      	push	{r7, lr}
 80178f6:	b082      	sub	sp, #8
 80178f8:	af00      	add	r7, sp, #0
 80178fa:	6078      	str	r0, [r7, #4]
 80178fc:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 80178fe:	2101      	movs	r1, #1
 8017900:	6838      	ldr	r0, [r7, #0]
 8017902:	f000 f9f5 	bl	8017cf0 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>
 8017906:	4603      	mov	r3, r0
 8017908:	461a      	mov	r2, r3
 801790a:	6839      	ldr	r1, [r7, #0]
 801790c:	6878      	ldr	r0, [r7, #4]
 801790e:	f000 f9fe 	bl	8017d0e <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
    }
 8017912:	6878      	ldr	r0, [r7, #4]
 8017914:	3708      	adds	r7, #8
 8017916:	46bd      	mov	sp, r7
 8017918:	bd80      	pop	{r7, pc}

0801791a <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 801791a:	b580      	push	{r7, lr}
 801791c:	b082      	sub	sp, #8
 801791e:	af00      	add	r7, sp, #0
 8017920:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8017922:	687b      	ldr	r3, [r7, #4]
 8017924:	685b      	ldr	r3, [r3, #4]
 8017926:	2b00      	cmp	r3, #0
 8017928:	d007      	beq.n	801793a <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 801792a:	687b      	ldr	r3, [r7, #4]
 801792c:	6818      	ldr	r0, [r3, #0]
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	685b      	ldr	r3, [r3, #4]
 8017932:	2201      	movs	r2, #1
 8017934:	4619      	mov	r1, r3
 8017936:	f000 f9fe 	bl	8017d36 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>
      }
 801793a:	687b      	ldr	r3, [r7, #4]
 801793c:	4618      	mov	r0, r3
 801793e:	3708      	adds	r7, #8
 8017940:	46bd      	mov	sp, r7
 8017942:	bd80      	pop	{r7, pc}

08017944 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>:
      value_type* get() { return std::__to_address(_M_ptr); }
 8017944:	b580      	push	{r7, lr}
 8017946:	b082      	sub	sp, #8
 8017948:	af00      	add	r7, sp, #0
 801794a:	6078      	str	r0, [r7, #4]
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	685b      	ldr	r3, [r3, #4]
 8017950:	4618      	mov	r0, r3
 8017952:	f000 f9ff 	bl	8017d54 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>
 8017956:	4603      	mov	r3, r0
 8017958:	4618      	mov	r0, r3
 801795a:	3708      	adds	r7, #8
 801795c:	46bd      	mov	sp, r7
 801795e:	bd80      	pop	{r7, pc}

08017960 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtSE_RbSE_RP6RemoraEEES1_DpOT_>:
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 8017960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017964:	b08c      	sub	sp, #48	@ 0x30
 8017966:	af06      	add	r7, sp, #24
 8017968:	6178      	str	r0, [r7, #20]
 801796a:	7439      	strb	r1, [r7, #16]
 801796c:	60fa      	str	r2, [r7, #12]
 801796e:	60bb      	str	r3, [r7, #8]
	: _M_impl(__a)
 8017970:	697b      	ldr	r3, [r7, #20]
 8017972:	4618      	mov	r0, r3
 8017974:	f7f5 fb56 	bl	800d024 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8017978:	4a20      	ldr	r2, [pc, #128]	@ (80179fc <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtSE_RbSE_RP6RemoraEEES1_DpOT_+0x9c>)
 801797a:	697b      	ldr	r3, [r7, #20]
 801797c:	601a      	str	r2, [r3, #0]
 801797e:	697b      	ldr	r3, [r7, #20]
 8017980:	330c      	adds	r3, #12
 8017982:	4621      	mov	r1, r4
 8017984:	4618      	mov	r0, r3
 8017986:	f000 f9f0 	bl	8017d6a <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
 801798a:	6978      	ldr	r0, [r7, #20]
 801798c:	f000 f847 	bl	8017a1e <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8017990:	4680      	mov	r8, r0
 8017992:	68f8      	ldr	r0, [r7, #12]
 8017994:	f7fc ff64 	bl	8014860 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8017998:	4681      	mov	r9, r0
 801799a:	68b8      	ldr	r0, [r7, #8]
 801799c:	f7fc ff6b 	bl	8014876 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 80179a0:	4682      	mov	sl, r0
 80179a2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80179a4:	f7ff fbfc 	bl	80171a0 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 80179a8:	4604      	mov	r4, r0
 80179aa:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80179ac:	f7fc ff6e 	bl	801488c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80179b0:	4605      	mov	r5, r0
 80179b2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80179b4:	f7fc ff6a 	bl	801488c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80179b8:	4606      	mov	r6, r0
 80179ba:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80179bc:	f7f8 fc6f 	bl	801029e <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 80179c0:	6078      	str	r0, [r7, #4]
 80179c2:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80179c4:	f7fc ff62 	bl	801488c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80179c8:	6038      	str	r0, [r7, #0]
 80179ca:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80179cc:	f7fc ff69 	bl	80148a2 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 80179d0:	4603      	mov	r3, r0
 80179d2:	f107 0010 	add.w	r0, r7, #16
 80179d6:	9305      	str	r3, [sp, #20]
 80179d8:	683b      	ldr	r3, [r7, #0]
 80179da:	9304      	str	r3, [sp, #16]
 80179dc:	687b      	ldr	r3, [r7, #4]
 80179de:	9303      	str	r3, [sp, #12]
 80179e0:	9602      	str	r6, [sp, #8]
 80179e2:	9501      	str	r5, [sp, #4]
 80179e4:	9400      	str	r4, [sp, #0]
 80179e6:	4653      	mov	r3, sl
 80179e8:	464a      	mov	r2, r9
 80179ea:	4641      	mov	r1, r8
 80179ec:	f000 f9cc 	bl	8017d88 <_ZNSt16allocator_traitsISaIvEE9constructI7TMC2209JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtSC_RbSC_RP6RemoraEEEvRS0_PT_DpOT0_>
	}
 80179f0:	697b      	ldr	r3, [r7, #20]
 80179f2:	4618      	mov	r0, r3
 80179f4:	3718      	adds	r7, #24
 80179f6:	46bd      	mov	sp, r7
 80179f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80179fc:	08028bd8 	.word	0x08028bd8

08017a00 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8017a00:	b480      	push	{r7}
 8017a02:	b083      	sub	sp, #12
 8017a04:	af00      	add	r7, sp, #0
 8017a06:	6078      	str	r0, [r7, #4]
 8017a08:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 8017a0a:	687b      	ldr	r3, [r7, #4]
 8017a0c:	2200      	movs	r2, #0
 8017a0e:	605a      	str	r2, [r3, #4]
	return *this;
 8017a10:	687b      	ldr	r3, [r7, #4]
      }
 8017a12:	4618      	mov	r0, r3
 8017a14:	370c      	adds	r7, #12
 8017a16:	46bd      	mov	sp, r7
 8017a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a1c:	4770      	bx	lr

08017a1e <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>:
      _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }
 8017a1e:	b580      	push	{r7, lr}
 8017a20:	b082      	sub	sp, #8
 8017a22:	af00      	add	r7, sp, #0
 8017a24:	6078      	str	r0, [r7, #4]
 8017a26:	687b      	ldr	r3, [r7, #4]
 8017a28:	330c      	adds	r3, #12
 8017a2a:	4618      	mov	r0, r3
 8017a2c:	f000 f9e5 	bl	8017dfa <_ZN9__gnu_cxx16__aligned_bufferI7TMC2209E6_M_ptrEv>
 8017a30:	4603      	mov	r3, r0
 8017a32:	4618      	mov	r0, r3
 8017a34:	3708      	adds	r7, #8
 8017a36:	46bd      	mov	sp, r7
 8017a38:	bd80      	pop	{r7, pc}

08017a3a <_ZNKSt23enable_shared_from_thisI3TMCE14_M_weak_assignI7TMC2209EEvPT_RKSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE>:
	_M_weak_assign(_Tp1* __p, const __shared_count<>& __n) const noexcept
 8017a3a:	b580      	push	{r7, lr}
 8017a3c:	b084      	sub	sp, #16
 8017a3e:	af00      	add	r7, sp, #0
 8017a40:	60f8      	str	r0, [r7, #12]
 8017a42:	60b9      	str	r1, [r7, #8]
 8017a44:	607a      	str	r2, [r7, #4]
	{ _M_weak_this._M_assign(__p, __n); }
 8017a46:	68fb      	ldr	r3, [r7, #12]
 8017a48:	687a      	ldr	r2, [r7, #4]
 8017a4a:	68b9      	ldr	r1, [r7, #8]
 8017a4c:	4618      	mov	r0, r3
 8017a4e:	f7fe f9a7 	bl	8015da0 <_ZNSt10__weak_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EE9_M_assignEPS0_RKSt14__shared_countILS2_0EE>
 8017a52:	bf00      	nop
 8017a54:	3710      	adds	r7, #16
 8017a56:	46bd      	mov	sp, r7
 8017a58:	bd80      	pop	{r7, pc}

08017a5a <_ZNSt11_Tuple_implILj0EJP14TMC2209StepperSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8017a5a:	b580      	push	{r7, lr}
 8017a5c:	b082      	sub	sp, #8
 8017a5e:	af00      	add	r7, sp, #0
 8017a60:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8017a62:	6878      	ldr	r0, [r7, #4]
 8017a64:	f000 f9d5 	bl	8017e12 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14TMC2209StepperEEEC1Ev>
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	4618      	mov	r0, r3
 8017a6c:	f000 f9dd 	bl	8017e2a <_ZNSt10_Head_baseILj0EP14TMC2209StepperLb0EEC1Ev>
 8017a70:	687b      	ldr	r3, [r7, #4]
 8017a72:	4618      	mov	r0, r3
 8017a74:	3708      	adds	r7, #8
 8017a76:	46bd      	mov	sp, r7
 8017a78:	bd80      	pop	{r7, pc}

08017a7a <_ZNSt11_Tuple_implILj0EJP14TMC2209StepperSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8017a7a:	b580      	push	{r7, lr}
 8017a7c:	b082      	sub	sp, #8
 8017a7e:	af00      	add	r7, sp, #0
 8017a80:	6078      	str	r0, [r7, #4]
 8017a82:	687b      	ldr	r3, [r7, #4]
 8017a84:	4618      	mov	r0, r3
 8017a86:	f000 f9de 	bl	8017e46 <_ZNSt10_Head_baseILj0EP14TMC2209StepperLb0EE7_M_headERS2_>
 8017a8a:	4603      	mov	r3, r0
 8017a8c:	4618      	mov	r0, r3
 8017a8e:	3708      	adds	r7, #8
 8017a90:	46bd      	mov	sp, r7
 8017a92:	bd80      	pop	{r7, pc}

08017a94 <_ZSt12__get_helperILj1ESt14default_deleteI14TMC2209StepperEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8017a94:	b580      	push	{r7, lr}
 8017a96:	b082      	sub	sp, #8
 8017a98:	af00      	add	r7, sp, #0
 8017a9a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8017a9c:	6878      	ldr	r0, [r7, #4]
 8017a9e:	f000 f9dd 	bl	8017e5c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14TMC2209StepperEEE7_M_headERS3_>
 8017aa2:	4603      	mov	r3, r0
 8017aa4:	4618      	mov	r0, r3
 8017aa6:	3708      	adds	r7, #8
 8017aa8:	46bd      	mov	sp, r7
 8017aaa:	bd80      	pop	{r7, pc}

08017aac <_ZSt12__get_helperILj0EP14TMC2209StepperJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8017aac:	b580      	push	{r7, lr}
 8017aae:	b082      	sub	sp, #8
 8017ab0:	af00      	add	r7, sp, #0
 8017ab2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8017ab4:	6878      	ldr	r0, [r7, #4]
 8017ab6:	f000 f9dd 	bl	8017e74 <_ZNSt11_Tuple_implILj0EJP14TMC2209StepperSt14default_deleteIS0_EEE7_M_headERKS4_>
 8017aba:	4603      	mov	r3, r0
 8017abc:	4618      	mov	r0, r3
 8017abe:	3708      	adds	r7, #8
 8017ac0:	46bd      	mov	sp, r7
 8017ac2:	bd80      	pop	{r7, pc}

08017ac4 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8017ac4:	b580      	push	{r7, lr}
 8017ac6:	b082      	sub	sp, #8
 8017ac8:	af00      	add	r7, sp, #0
 8017aca:	6078      	str	r0, [r7, #4]
  return value <= TIn(numeric_limits<TOut>::highest());
 8017acc:	f000 f8a2 	bl	8017c14 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE7highestEv>
 8017ad0:	4603      	mov	r3, r0
 8017ad2:	461a      	mov	r2, r3
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	4293      	cmp	r3, r2
 8017ad8:	bf94      	ite	ls
 8017ada:	2301      	movls	r3, #1
 8017adc:	2300      	movhi	r3, #0
 8017ade:	b2db      	uxtb	r3, r3
}
 8017ae0:	4618      	mov	r0, r3
 8017ae2:	3708      	adds	r7, #8
 8017ae4:	46bd      	mov	sp, r7
 8017ae6:	bd80      	pop	{r7, pc}

08017ae8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8017ae8:	b580      	push	{r7, lr}
 8017aea:	b082      	sub	sp, #8
 8017aec:	af00      	add	r7, sp, #0
 8017aee:	6078      	str	r0, [r7, #4]
  if (value < 0)
 8017af0:	687b      	ldr	r3, [r7, #4]
 8017af2:	2b00      	cmp	r3, #0
 8017af4:	da01      	bge.n	8017afa <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x12>
    return false;
 8017af6:	2300      	movs	r3, #0
 8017af8:	e009      	b.n	8017b0e <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x26>
  return value <= TIn(numeric_limits<TOut>::highest());
 8017afa:	f000 f88b 	bl	8017c14 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE7highestEv>
 8017afe:	4603      	mov	r3, r0
 8017b00:	461a      	mov	r2, r3
 8017b02:	687b      	ldr	r3, [r7, #4]
 8017b04:	4293      	cmp	r3, r2
 8017b06:	bfd4      	ite	le
 8017b08:	2301      	movle	r3, #1
 8017b0a:	2300      	movgt	r3, #0
 8017b0c:	b2db      	uxtb	r3, r3
}
 8017b0e:	4618      	mov	r0, r3
 8017b10:	3708      	adds	r7, #8
 8017b12:	46bd      	mov	sp, r7
 8017b14:	bd80      	pop	{r7, pc}

08017b16 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8017b16:	b5b0      	push	{r4, r5, r7, lr}
 8017b18:	b082      	sub	sp, #8
 8017b1a:	af00      	add	r7, sp, #0
 8017b1c:	e9c7 0100 	strd	r0, r1, [r7]
  return value <= TIn(numeric_limits<TOut>::highest());
 8017b20:	f000 f878 	bl	8017c14 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE7highestEv>
 8017b24:	4603      	mov	r3, r0
 8017b26:	b2db      	uxtb	r3, r3
 8017b28:	2200      	movs	r2, #0
 8017b2a:	461c      	mov	r4, r3
 8017b2c:	4615      	mov	r5, r2
 8017b2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017b32:	4294      	cmp	r4, r2
 8017b34:	eb75 0303 	sbcs.w	r3, r5, r3
 8017b38:	bf2c      	ite	cs
 8017b3a:	2301      	movcs	r3, #1
 8017b3c:	2300      	movcc	r3, #0
 8017b3e:	b2db      	uxtb	r3, r3
}
 8017b40:	4618      	mov	r0, r3
 8017b42:	3708      	adds	r7, #8
 8017b44:	46bd      	mov	sp, r7
 8017b46:	bdb0      	pop	{r4, r5, r7, pc}

08017b48 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8017b48:	b5b0      	push	{r4, r5, r7, lr}
 8017b4a:	b082      	sub	sp, #8
 8017b4c:	af00      	add	r7, sp, #0
 8017b4e:	e9c7 0100 	strd	r0, r1, [r7]
  if (value < 0)
 8017b52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017b56:	2b00      	cmp	r3, #0
 8017b58:	da01      	bge.n	8017b5e <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x16>
    return false;
 8017b5a:	2300      	movs	r3, #0
 8017b5c:	e00f      	b.n	8017b7e <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x36>
  return value <= TIn(numeric_limits<TOut>::highest());
 8017b5e:	f000 f859 	bl	8017c14 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE7highestEv>
 8017b62:	4603      	mov	r3, r0
 8017b64:	b2db      	uxtb	r3, r3
 8017b66:	2200      	movs	r2, #0
 8017b68:	461c      	mov	r4, r3
 8017b6a:	4615      	mov	r5, r2
 8017b6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017b70:	4294      	cmp	r4, r2
 8017b72:	eb75 0303 	sbcs.w	r3, r5, r3
 8017b76:	bfac      	ite	ge
 8017b78:	2301      	movge	r3, #1
 8017b7a:	2300      	movlt	r3, #0
 8017b7c:	b2db      	uxtb	r3, r3
}
 8017b7e:	4618      	mov	r0, r3
 8017b80:	3708      	adds	r7, #8
 8017b82:	46bd      	mov	sp, r7
 8017b84:	bdb0      	pop	{r4, r5, r7, pc}
	...

08017b88 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIhEET_v>:
  T convertTo() const {
 8017b88:	b580      	push	{r7, lr}
 8017b8a:	b082      	sub	sp, #8
 8017b8c:	af00      	add	r7, sp, #0
 8017b8e:	6078      	str	r0, [r7, #4]
    switch (type_) {
 8017b90:	687b      	ldr	r3, [r7, #4]
 8017b92:	781b      	ldrb	r3, [r3, #0]
 8017b94:	3b01      	subs	r3, #1
 8017b96:	2b03      	cmp	r3, #3
 8017b98:	d82e      	bhi.n	8017bf8 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIhEET_v+0x70>
 8017b9a:	a201      	add	r2, pc, #4	@ (adr r2, 8017ba0 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIhEET_v+0x18>)
 8017b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017ba0:	08017bb1 	.word	0x08017bb1
 8017ba4:	08017bc3 	.word	0x08017bc3
 8017ba8:	08017bd5 	.word	0x08017bd5
 8017bac:	08017be7 	.word	0x08017be7
        return convertNumber<T>(value_.asFloat);
 8017bb0:	687b      	ldr	r3, [r7, #4]
 8017bb2:	edd3 7a02 	vldr	s15, [r3, #8]
 8017bb6:	eeb0 0a67 	vmov.f32	s0, s15
 8017bba:	f7ff fe4e 	bl	801785a <_ZN11ArduinoJson8V730HB226detail13convertNumberIhfEET_T0_>
 8017bbe:	4603      	mov	r3, r0
 8017bc0:	e01b      	b.n	8017bfa <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIhEET_v+0x72>
        return convertNumber<T>(value_.asSignedInteger);
 8017bc2:	687b      	ldr	r3, [r7, #4]
 8017bc4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8017bc8:	4610      	mov	r0, r2
 8017bca:	4619      	mov	r1, r3
 8017bcc:	f7ff fe1e 	bl	801780c <_ZN11ArduinoJson8V730HB226detail13convertNumberIhxEET_T0_>
 8017bd0:	4603      	mov	r3, r0
 8017bd2:	e012      	b.n	8017bfa <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIhEET_v+0x72>
        return convertNumber<T>(value_.asUnsignedInteger);
 8017bd4:	687b      	ldr	r3, [r7, #4]
 8017bd6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8017bda:	4610      	mov	r0, r2
 8017bdc:	4619      	mov	r1, r3
 8017bde:	f7ff fe02 	bl	80177e6 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhyEET_T0_>
 8017be2:	4603      	mov	r3, r0
 8017be4:	e009      	b.n	8017bfa <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIhEET_v+0x72>
        return convertNumber<T>(value_.asDouble);
 8017be6:	687b      	ldr	r3, [r7, #4]
 8017be8:	ed93 7b02 	vldr	d7, [r3, #8]
 8017bec:	eeb0 0b47 	vmov.f64	d0, d7
 8017bf0:	f7ff fe4d 	bl	801788e <_ZN11ArduinoJson8V730HB226detail13convertNumberIhdEET_T0_>
 8017bf4:	4603      	mov	r3, r0
 8017bf6:	e000      	b.n	8017bfa <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIhEET_v+0x72>
        return T();
 8017bf8:	2300      	movs	r3, #0
  }
 8017bfa:	4618      	mov	r0, r3
 8017bfc:	3708      	adds	r7, #8
 8017bfe:	46bd      	mov	sp, r7
 8017c00:	bd80      	pop	{r7, pc}
 8017c02:	bf00      	nop

08017c04 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE6lowestEv>:
  static constexpr T lowest() {
 8017c04:	b480      	push	{r7}
 8017c06:	af00      	add	r7, sp, #0
    return 0;
 8017c08:	2300      	movs	r3, #0
  }
 8017c0a:	4618      	mov	r0, r3
 8017c0c:	46bd      	mov	sp, r7
 8017c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c12:	4770      	bx	lr

08017c14 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE7highestEv>:
  static constexpr T highest() {
 8017c14:	b480      	push	{r7}
 8017c16:	af00      	add	r7, sp, #0
    return T(-1);
 8017c18:	23ff      	movs	r3, #255	@ 0xff
  }
 8017c1a:	4618      	mov	r0, r3
 8017c1c:	46bd      	mov	sp, r7
 8017c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c22:	4770      	bx	lr

08017c24 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8017c24:	b580      	push	{r7, lr}
 8017c26:	b082      	sub	sp, #8
 8017c28:	af00      	add	r7, sp, #0
 8017c2a:	ed87 0a01 	vstr	s0, [r7, #4]
  return value >= numeric_limits<TOut>::lowest() &&
 8017c2e:	f7ff ffe9 	bl	8017c04 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE6lowestEv>
 8017c32:	4603      	mov	r3, r0
 8017c34:	ee07 3a90 	vmov	s15, r3
 8017c38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017c3c:	ed97 7a01 	vldr	s14, [r7, #4]
 8017c40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c48:	db0f      	blt.n	8017c6a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x46>
         value <= numeric_limits<TOut>::highest();
 8017c4a:	f7ff ffe3 	bl	8017c14 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE7highestEv>
 8017c4e:	4603      	mov	r3, r0
 8017c50:	ee07 3a90 	vmov	s15, r3
 8017c54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  return value >= numeric_limits<TOut>::lowest() &&
 8017c58:	ed97 7a01 	vldr	s14, [r7, #4]
 8017c5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c64:	d801      	bhi.n	8017c6a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x46>
 8017c66:	2301      	movs	r3, #1
 8017c68:	e000      	b.n	8017c6c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x48>
 8017c6a:	2300      	movs	r3, #0
}
 8017c6c:	4618      	mov	r0, r3
 8017c6e:	3708      	adds	r7, #8
 8017c70:	46bd      	mov	sp, r7
 8017c72:	bd80      	pop	{r7, pc}

08017c74 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8017c74:	b580      	push	{r7, lr}
 8017c76:	b082      	sub	sp, #8
 8017c78:	af00      	add	r7, sp, #0
 8017c7a:	ed87 0b00 	vstr	d0, [r7]
  return value >= numeric_limits<TOut>::lowest() &&
 8017c7e:	f7ff ffc1 	bl	8017c04 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE6lowestEv>
 8017c82:	4603      	mov	r3, r0
 8017c84:	ee07 3a90 	vmov	s15, r3
 8017c88:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017c8c:	ed97 6b00 	vldr	d6, [r7]
 8017c90:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8017c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c98:	db0f      	blt.n	8017cba <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x46>
         value <= numeric_limits<TOut>::highest();
 8017c9a:	f7ff ffbb 	bl	8017c14 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE7highestEv>
 8017c9e:	4603      	mov	r3, r0
 8017ca0:	ee07 3a90 	vmov	s15, r3
 8017ca4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
  return value >= numeric_limits<TOut>::lowest() &&
 8017ca8:	ed97 6b00 	vldr	d6, [r7]
 8017cac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8017cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cb4:	d801      	bhi.n	8017cba <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x46>
 8017cb6:	2301      	movs	r3, #1
 8017cb8:	e000      	b.n	8017cbc <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x48>
 8017cba:	2300      	movs	r3, #0
}
 8017cbc:	4618      	mov	r0, r3
 8017cbe:	3708      	adds	r7, #8
 8017cc0:	46bd      	mov	sp, r7
 8017cc2:	bd80      	pop	{r7, pc}

08017cc4 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8017cc4:	b480      	push	{r7}
 8017cc6:	b083      	sub	sp, #12
 8017cc8:	af00      	add	r7, sp, #0
 8017cca:	6078      	str	r0, [r7, #4]
 8017ccc:	687b      	ldr	r3, [r7, #4]
 8017cce:	4618      	mov	r0, r3
 8017cd0:	370c      	adds	r7, #12
 8017cd2:	46bd      	mov	sp, r7
 8017cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cd8:	4770      	bx	lr

08017cda <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8017cda:	b480      	push	{r7}
 8017cdc:	b083      	sub	sp, #12
 8017cde:	af00      	add	r7, sp, #0
 8017ce0:	6078      	str	r0, [r7, #4]
 8017ce2:	687b      	ldr	r3, [r7, #4]
 8017ce4:	4618      	mov	r0, r3
 8017ce6:	370c      	adds	r7, #12
 8017ce8:	46bd      	mov	sp, r7
 8017cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cee:	4770      	bx	lr

08017cf0 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 8017cf0:	b580      	push	{r7, lr}
 8017cf2:	b082      	sub	sp, #8
 8017cf4:	af00      	add	r7, sp, #0
 8017cf6:	6078      	str	r0, [r7, #4]
 8017cf8:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8017cfa:	2200      	movs	r2, #0
 8017cfc:	6839      	ldr	r1, [r7, #0]
 8017cfe:	6878      	ldr	r0, [r7, #4]
 8017d00:	f000 f8c6 	bl	8017e90 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 8017d04:	4603      	mov	r3, r0
 8017d06:	4618      	mov	r0, r3
 8017d08:	3708      	adds	r7, #8
 8017d0a:	46bd      	mov	sp, r7
 8017d0c:	bd80      	pop	{r7, pc}

08017d0e <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8017d0e:	b580      	push	{r7, lr}
 8017d10:	b084      	sub	sp, #16
 8017d12:	af00      	add	r7, sp, #0
 8017d14:	60f8      	str	r0, [r7, #12]
 8017d16:	60b9      	str	r1, [r7, #8]
 8017d18:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8017d1a:	68b8      	ldr	r0, [r7, #8]
 8017d1c:	f000 f8e6 	bl	8017eec <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>
 8017d20:	4602      	mov	r2, r0
 8017d22:	68fb      	ldr	r3, [r7, #12]
 8017d24:	601a      	str	r2, [r3, #0]
 8017d26:	68fb      	ldr	r3, [r7, #12]
 8017d28:	687a      	ldr	r2, [r7, #4]
 8017d2a:	605a      	str	r2, [r3, #4]
      { }
 8017d2c:	68fb      	ldr	r3, [r7, #12]
 8017d2e:	4618      	mov	r0, r3
 8017d30:	3710      	adds	r7, #16
 8017d32:	46bd      	mov	sp, r7
 8017d34:	bd80      	pop	{r7, pc}

08017d36 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8017d36:	b580      	push	{r7, lr}
 8017d38:	b084      	sub	sp, #16
 8017d3a:	af00      	add	r7, sp, #0
 8017d3c:	60f8      	str	r0, [r7, #12]
 8017d3e:	60b9      	str	r1, [r7, #8]
 8017d40:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8017d42:	687a      	ldr	r2, [r7, #4]
 8017d44:	68b9      	ldr	r1, [r7, #8]
 8017d46:	68f8      	ldr	r0, [r7, #12]
 8017d48:	f000 f8db 	bl	8017f02 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>
 8017d4c:	bf00      	nop
 8017d4e:	3710      	adds	r7, #16
 8017d50:	46bd      	mov	sp, r7
 8017d52:	bd80      	pop	{r7, pc}

08017d54 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>:
    __to_address(_Tp* __ptr) noexcept
 8017d54:	b480      	push	{r7}
 8017d56:	b083      	sub	sp, #12
 8017d58:	af00      	add	r7, sp, #0
 8017d5a:	6078      	str	r0, [r7, #4]
      return __ptr;
 8017d5c:	687b      	ldr	r3, [r7, #4]
    }
 8017d5e:	4618      	mov	r0, r3
 8017d60:	370c      	adds	r7, #12
 8017d62:	46bd      	mov	sp, r7
 8017d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d68:	4770      	bx	lr

08017d6a <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>:
	explicit _Impl(_Alloc __a) noexcept : _A_base(__a) { }
 8017d6a:	b580      	push	{r7, lr}
 8017d6c:	b082      	sub	sp, #8
 8017d6e:	af00      	add	r7, sp, #0
 8017d70:	6078      	str	r0, [r7, #4]
 8017d72:	7039      	strb	r1, [r7, #0]
 8017d74:	463b      	mov	r3, r7
 8017d76:	4619      	mov	r1, r3
 8017d78:	6878      	ldr	r0, [r7, #4]
 8017d7a:	f7f5 fb6d 	bl	800d458 <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EEC1ERKS0_>
 8017d7e:	687b      	ldr	r3, [r7, #4]
 8017d80:	4618      	mov	r0, r3
 8017d82:	3708      	adds	r7, #8
 8017d84:	46bd      	mov	sp, r7
 8017d86:	bd80      	pop	{r7, pc}

08017d88 <_ZNSt16allocator_traitsISaIvEE9constructI7TMC2209JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtSC_RbSC_RP6RemoraEEEvRS0_PT_DpOT0_>:
	construct(allocator_type&, _Up* __p, _Args&&... __args)
 8017d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017d8c:	b08c      	sub	sp, #48	@ 0x30
 8017d8e:	af06      	add	r7, sp, #24
 8017d90:	6178      	str	r0, [r7, #20]
 8017d92:	6139      	str	r1, [r7, #16]
 8017d94:	60fa      	str	r2, [r7, #12]
 8017d96:	60bb      	str	r3, [r7, #8]
	{ std::_Construct(__p, std::forward<_Args>(__args)...); }
 8017d98:	68f8      	ldr	r0, [r7, #12]
 8017d9a:	f7fc fd61 	bl	8014860 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8017d9e:	4680      	mov	r8, r0
 8017da0:	68b8      	ldr	r0, [r7, #8]
 8017da2:	f7fc fd68 	bl	8014876 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8017da6:	4681      	mov	r9, r0
 8017da8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8017daa:	f7ff f9f9 	bl	80171a0 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8017dae:	4682      	mov	sl, r0
 8017db0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8017db2:	f7fc fd6b 	bl	801488c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8017db6:	4604      	mov	r4, r0
 8017db8:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8017dba:	f7fc fd67 	bl	801488c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8017dbe:	4605      	mov	r5, r0
 8017dc0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8017dc2:	f7f8 fa6c 	bl	801029e <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8017dc6:	4606      	mov	r6, r0
 8017dc8:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8017dca:	f7fc fd5f 	bl	801488c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8017dce:	6078      	str	r0, [r7, #4]
 8017dd0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8017dd2:	f7fc fd66 	bl	80148a2 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 8017dd6:	4603      	mov	r3, r0
 8017dd8:	9304      	str	r3, [sp, #16]
 8017dda:	687b      	ldr	r3, [r7, #4]
 8017ddc:	9303      	str	r3, [sp, #12]
 8017dde:	9602      	str	r6, [sp, #8]
 8017de0:	9501      	str	r5, [sp, #4]
 8017de2:	9400      	str	r4, [sp, #0]
 8017de4:	4653      	mov	r3, sl
 8017de6:	464a      	mov	r2, r9
 8017de8:	4641      	mov	r1, r8
 8017dea:	6938      	ldr	r0, [r7, #16]
 8017dec:	f000 f89a 	bl	8017f24 <_ZSt10_ConstructI7TMC2209JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtS9_RbS9_RP6RemoraEEvPT_DpOT0_>
 8017df0:	bf00      	nop
 8017df2:	3718      	adds	r7, #24
 8017df4:	46bd      	mov	sp, r7
 8017df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08017dfa <_ZN9__gnu_cxx16__aligned_bufferI7TMC2209E6_M_ptrEv>:
      _M_ptr() noexcept
 8017dfa:	b580      	push	{r7, lr}
 8017dfc:	b082      	sub	sp, #8
 8017dfe:	af00      	add	r7, sp, #0
 8017e00:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8017e02:	6878      	ldr	r0, [r7, #4]
 8017e04:	f000 f8e7 	bl	8017fd6 <_ZN9__gnu_cxx16__aligned_bufferI7TMC2209E7_M_addrEv>
 8017e08:	4603      	mov	r3, r0
 8017e0a:	4618      	mov	r0, r3
 8017e0c:	3708      	adds	r7, #8
 8017e0e:	46bd      	mov	sp, r7
 8017e10:	bd80      	pop	{r7, pc}

08017e12 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14TMC2209StepperEEEC1Ev>:
      _Tuple_impl()
 8017e12:	b580      	push	{r7, lr}
 8017e14:	b082      	sub	sp, #8
 8017e16:	af00      	add	r7, sp, #0
 8017e18:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8017e1a:	6878      	ldr	r0, [r7, #4]
 8017e1c:	f000 f8e6 	bl	8017fec <_ZNSt10_Head_baseILj1ESt14default_deleteI14TMC2209StepperELb1EEC1Ev>
 8017e20:	687b      	ldr	r3, [r7, #4]
 8017e22:	4618      	mov	r0, r3
 8017e24:	3708      	adds	r7, #8
 8017e26:	46bd      	mov	sp, r7
 8017e28:	bd80      	pop	{r7, pc}

08017e2a <_ZNSt10_Head_baseILj0EP14TMC2209StepperLb0EEC1Ev>:
      constexpr _Head_base()
 8017e2a:	b480      	push	{r7}
 8017e2c:	b083      	sub	sp, #12
 8017e2e:	af00      	add	r7, sp, #0
 8017e30:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8017e32:	687b      	ldr	r3, [r7, #4]
 8017e34:	2200      	movs	r2, #0
 8017e36:	601a      	str	r2, [r3, #0]
 8017e38:	687b      	ldr	r3, [r7, #4]
 8017e3a:	4618      	mov	r0, r3
 8017e3c:	370c      	adds	r7, #12
 8017e3e:	46bd      	mov	sp, r7
 8017e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e44:	4770      	bx	lr

08017e46 <_ZNSt10_Head_baseILj0EP14TMC2209StepperLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8017e46:	b480      	push	{r7}
 8017e48:	b083      	sub	sp, #12
 8017e4a:	af00      	add	r7, sp, #0
 8017e4c:	6078      	str	r0, [r7, #4]
 8017e4e:	687b      	ldr	r3, [r7, #4]
 8017e50:	4618      	mov	r0, r3
 8017e52:	370c      	adds	r7, #12
 8017e54:	46bd      	mov	sp, r7
 8017e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e5a:	4770      	bx	lr

08017e5c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14TMC2209StepperEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8017e5c:	b580      	push	{r7, lr}
 8017e5e:	b082      	sub	sp, #8
 8017e60:	af00      	add	r7, sp, #0
 8017e62:	6078      	str	r0, [r7, #4]
 8017e64:	6878      	ldr	r0, [r7, #4]
 8017e66:	f000 f8cc 	bl	8018002 <_ZNSt10_Head_baseILj1ESt14default_deleteI14TMC2209StepperELb1EE7_M_headERS3_>
 8017e6a:	4603      	mov	r3, r0
 8017e6c:	4618      	mov	r0, r3
 8017e6e:	3708      	adds	r7, #8
 8017e70:	46bd      	mov	sp, r7
 8017e72:	bd80      	pop	{r7, pc}

08017e74 <_ZNSt11_Tuple_implILj0EJP14TMC2209StepperSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8017e74:	b580      	push	{r7, lr}
 8017e76:	b082      	sub	sp, #8
 8017e78:	af00      	add	r7, sp, #0
 8017e7a:	6078      	str	r0, [r7, #4]
 8017e7c:	687b      	ldr	r3, [r7, #4]
 8017e7e:	4618      	mov	r0, r3
 8017e80:	f000 f8ca 	bl	8018018 <_ZNSt10_Head_baseILj0EP14TMC2209StepperLb0EE7_M_headERKS2_>
 8017e84:	4603      	mov	r3, r0
 8017e86:	4618      	mov	r0, r3
 8017e88:	3708      	adds	r7, #8
 8017e8a:	46bd      	mov	sp, r7
 8017e8c:	bd80      	pop	{r7, pc}
	...

08017e90 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8017e90:	b580      	push	{r7, lr}
 8017e92:	b084      	sub	sp, #16
 8017e94:	af00      	add	r7, sp, #0
 8017e96:	60f8      	str	r0, [r7, #12]
 8017e98:	60b9      	str	r1, [r7, #8]
 8017e9a:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8017e9c:	68f8      	ldr	r0, [r7, #12]
 8017e9e:	f000 f8c7 	bl	8018030 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 8017ea2:	4602      	mov	r2, r0
 8017ea4:	68bb      	ldr	r3, [r7, #8]
 8017ea6:	4293      	cmp	r3, r2
 8017ea8:	bf8c      	ite	hi
 8017eaa:	2301      	movhi	r3, #1
 8017eac:	2300      	movls	r3, #0
 8017eae:	b2db      	uxtb	r3, r3
 8017eb0:	2b00      	cmp	r3, #0
 8017eb2:	bf14      	ite	ne
 8017eb4:	2301      	movne	r3, #1
 8017eb6:	2300      	moveq	r3, #0
 8017eb8:	b2db      	uxtb	r3, r3
 8017eba:	2b00      	cmp	r3, #0
 8017ebc:	d007      	beq.n	8017ece <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8017ebe:	68bb      	ldr	r3, [r7, #8]
 8017ec0:	4a09      	ldr	r2, [pc, #36]	@ (8017ee8 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x58>)
 8017ec2:	4293      	cmp	r3, r2
 8017ec4:	d901      	bls.n	8017eca <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8017ec6:	f00e f81f 	bl	8025f08 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8017eca:	f00e f81a 	bl	8025f02 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8017ece:	68bb      	ldr	r3, [r7, #8]
 8017ed0:	225c      	movs	r2, #92	@ 0x5c
 8017ed2:	fb02 f303 	mul.w	r3, r2, r3
 8017ed6:	4618      	mov	r0, r3
 8017ed8:	f00e f800 	bl	8025edc <_Znwj>
 8017edc:	4603      	mov	r3, r0
 8017ede:	bf00      	nop
      }
 8017ee0:	4618      	mov	r0, r3
 8017ee2:	3710      	adds	r7, #16
 8017ee4:	46bd      	mov	sp, r7
 8017ee6:	bd80      	pop	{r7, pc}
 8017ee8:	02c8590b 	.word	0x02c8590b

08017eec <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8017eec:	b480      	push	{r7}
 8017eee:	b083      	sub	sp, #12
 8017ef0:	af00      	add	r7, sp, #0
 8017ef2:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8017ef4:	687b      	ldr	r3, [r7, #4]
 8017ef6:	4618      	mov	r0, r3
 8017ef8:	370c      	adds	r7, #12
 8017efa:	46bd      	mov	sp, r7
 8017efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f00:	4770      	bx	lr

08017f02 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8017f02:	b580      	push	{r7, lr}
 8017f04:	b084      	sub	sp, #16
 8017f06:	af00      	add	r7, sp, #0
 8017f08:	60f8      	str	r0, [r7, #12]
 8017f0a:	60b9      	str	r1, [r7, #8]
 8017f0c:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8017f0e:	687b      	ldr	r3, [r7, #4]
 8017f10:	225c      	movs	r2, #92	@ 0x5c
 8017f12:	fb02 f303 	mul.w	r3, r2, r3
 8017f16:	4619      	mov	r1, r3
 8017f18:	68b8      	ldr	r0, [r7, #8]
 8017f1a:	f00d ffce 	bl	8025eba <_ZdlPvj>
      }
 8017f1e:	3710      	adds	r7, #16
 8017f20:	46bd      	mov	sp, r7
 8017f22:	bd80      	pop	{r7, pc}

08017f24 <_ZSt10_ConstructI7TMC2209JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtS9_RbS9_RP6RemoraEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8017f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017f28:	ed2d 8b02 	vpush	{d8}
 8017f2c:	b08e      	sub	sp, #56	@ 0x38
 8017f2e:	af04      	add	r7, sp, #16
 8017f30:	60f8      	str	r0, [r7, #12]
 8017f32:	60b9      	str	r1, [r7, #8]
 8017f34:	607a      	str	r2, [r7, #4]
 8017f36:	603b      	str	r3, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8017f38:	68fb      	ldr	r3, [r7, #12]
 8017f3a:	4619      	mov	r1, r3
 8017f3c:	2050      	movs	r0, #80	@ 0x50
 8017f3e:	f7f1 fbdf 	bl	8009700 <_ZnwjPv>
 8017f42:	4682      	mov	sl, r0
 8017f44:	68b8      	ldr	r0, [r7, #8]
 8017f46:	f7fc fc8b 	bl	8014860 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8017f4a:	4602      	mov	r2, r0
 8017f4c:	f107 0310 	add.w	r3, r7, #16
 8017f50:	4611      	mov	r1, r2
 8017f52:	4618      	mov	r0, r3
 8017f54:	f00e f89e 	bl	8026094 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8017f58:	6878      	ldr	r0, [r7, #4]
 8017f5a:	f7fc fc8c 	bl	8014876 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8017f5e:	4603      	mov	r3, r0
 8017f60:	ed93 8a00 	vldr	s16, [r3]
 8017f64:	6838      	ldr	r0, [r7, #0]
 8017f66:	f7ff f91b 	bl	80171a0 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8017f6a:	4603      	mov	r3, r0
 8017f6c:	f893 8000 	ldrb.w	r8, [r3]
 8017f70:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8017f72:	f7fc fc8b 	bl	801488c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8017f76:	4603      	mov	r3, r0
 8017f78:	f8b3 9000 	ldrh.w	r9, [r3]
 8017f7c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8017f7e:	f7fc fc85 	bl	801488c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8017f82:	4603      	mov	r3, r0
 8017f84:	881c      	ldrh	r4, [r3, #0]
 8017f86:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8017f88:	f7f8 f989 	bl	801029e <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8017f8c:	4603      	mov	r3, r0
 8017f8e:	781d      	ldrb	r5, [r3, #0]
 8017f90:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8017f92:	f7fc fc7b 	bl	801488c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8017f96:	4603      	mov	r3, r0
 8017f98:	881e      	ldrh	r6, [r3, #0]
 8017f9a:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8017f9c:	f7fc fc81 	bl	80148a2 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 8017fa0:	4603      	mov	r3, r0
 8017fa2:	681b      	ldr	r3, [r3, #0]
 8017fa4:	f107 0110 	add.w	r1, r7, #16
 8017fa8:	9303      	str	r3, [sp, #12]
 8017faa:	9602      	str	r6, [sp, #8]
 8017fac:	9501      	str	r5, [sp, #4]
 8017fae:	9400      	str	r4, [sp, #0]
 8017fb0:	464b      	mov	r3, r9
 8017fb2:	4642      	mov	r2, r8
 8017fb4:	eeb0 0a48 	vmov.f32	s0, s16
 8017fb8:	4650      	mov	r0, sl
 8017fba:	f7fe fe15 	bl	8016be8 <_ZN7TMC2209C1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfhttbtP6Remora>
 8017fbe:	f107 0310 	add.w	r3, r7, #16
 8017fc2:	4618      	mov	r0, r3
 8017fc4:	f00e f885 	bl	80260d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }
 8017fc8:	bf00      	nop
 8017fca:	3728      	adds	r7, #40	@ 0x28
 8017fcc:	46bd      	mov	sp, r7
 8017fce:	ecbd 8b02 	vpop	{d8}
 8017fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08017fd6 <_ZN9__gnu_cxx16__aligned_bufferI7TMC2209E7_M_addrEv>:
      _M_addr() noexcept
 8017fd6:	b480      	push	{r7}
 8017fd8:	b083      	sub	sp, #12
 8017fda:	af00      	add	r7, sp, #0
 8017fdc:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 8017fde:	687b      	ldr	r3, [r7, #4]
      }
 8017fe0:	4618      	mov	r0, r3
 8017fe2:	370c      	adds	r7, #12
 8017fe4:	46bd      	mov	sp, r7
 8017fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fea:	4770      	bx	lr

08017fec <_ZNSt10_Head_baseILj1ESt14default_deleteI14TMC2209StepperELb1EEC1Ev>:
      constexpr _Head_base()
 8017fec:	b480      	push	{r7}
 8017fee:	b083      	sub	sp, #12
 8017ff0:	af00      	add	r7, sp, #0
 8017ff2:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	4618      	mov	r0, r3
 8017ff8:	370c      	adds	r7, #12
 8017ffa:	46bd      	mov	sp, r7
 8017ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018000:	4770      	bx	lr

08018002 <_ZNSt10_Head_baseILj1ESt14default_deleteI14TMC2209StepperELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8018002:	b480      	push	{r7}
 8018004:	b083      	sub	sp, #12
 8018006:	af00      	add	r7, sp, #0
 8018008:	6078      	str	r0, [r7, #4]
 801800a:	687b      	ldr	r3, [r7, #4]
 801800c:	4618      	mov	r0, r3
 801800e:	370c      	adds	r7, #12
 8018010:	46bd      	mov	sp, r7
 8018012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018016:	4770      	bx	lr

08018018 <_ZNSt10_Head_baseILj0EP14TMC2209StepperLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8018018:	b480      	push	{r7}
 801801a:	b083      	sub	sp, #12
 801801c:	af00      	add	r7, sp, #0
 801801e:	6078      	str	r0, [r7, #4]
 8018020:	687b      	ldr	r3, [r7, #4]
 8018022:	4618      	mov	r0, r3
 8018024:	370c      	adds	r7, #12
 8018026:	46bd      	mov	sp, r7
 8018028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801802c:	4770      	bx	lr
	...

08018030 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8018030:	b480      	push	{r7}
 8018032:	b083      	sub	sp, #12
 8018034:	af00      	add	r7, sp, #0
 8018036:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8018038:	4b03      	ldr	r3, [pc, #12]	@ (8018048 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv+0x18>)
      }
 801803a:	4618      	mov	r0, r3
 801803c:	370c      	adds	r7, #12
 801803e:	46bd      	mov	sp, r7
 8018040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018044:	4770      	bx	lr
 8018046:	bf00      	nop
 8018048:	01642c85 	.word	0x01642c85

0801804c <_ZN7TMC2209D1Ev>:

public:

	TMC2209(std::string, float, uint8_t, uint16_t, uint16_t, bool, uint16_t, Remora*);
	static std::shared_ptr<Module> create(const JsonObject& config, Remora* instance);
	~TMC2209() = default;
 801804c:	b580      	push	{r7, lr}
 801804e:	b082      	sub	sp, #8
 8018050:	af00      	add	r7, sp, #0
 8018052:	6078      	str	r0, [r7, #4]
 8018054:	4a0a      	ldr	r2, [pc, #40]	@ (8018080 <_ZN7TMC2209D1Ev+0x34>)
 8018056:	687b      	ldr	r3, [r7, #4]
 8018058:	601a      	str	r2, [r3, #0]
 801805a:	687b      	ldr	r3, [r7, #4]
 801805c:	334c      	adds	r3, #76	@ 0x4c
 801805e:	4618      	mov	r0, r3
 8018060:	f7ff f83b 	bl	80170da <_ZNSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EED1Ev>
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	3328      	adds	r3, #40	@ 0x28
 8018068:	4618      	mov	r0, r3
 801806a:	f00e f832 	bl	80260d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801806e:	687b      	ldr	r3, [r7, #4]
 8018070:	4618      	mov	r0, r3
 8018072:	f7fb ff71 	bl	8013f58 <_ZN3TMCD1Ev>
 8018076:	687b      	ldr	r3, [r7, #4]
 8018078:	4618      	mov	r0, r3
 801807a:	3708      	adds	r7, #8
 801807c:	46bd      	mov	sp, r7
 801807e:	bd80      	pop	{r7, pc}
 8018080:	08028bf4 	.word	0x08028bf4

08018084 <_ZN7TMC2209D0Ev>:
 8018084:	b580      	push	{r7, lr}
 8018086:	b082      	sub	sp, #8
 8018088:	af00      	add	r7, sp, #0
 801808a:	6078      	str	r0, [r7, #4]
 801808c:	6878      	ldr	r0, [r7, #4]
 801808e:	f7ff ffdd 	bl	801804c <_ZN7TMC2209D1Ev>
 8018092:	2150      	movs	r1, #80	@ 0x50
 8018094:	6878      	ldr	r0, [r7, #4]
 8018096:	f00d ff10 	bl	8025eba <_ZdlPvj>
 801809a:	687b      	ldr	r3, [r7, #4]
 801809c:	4618      	mov	r0, r3
 801809e:	3708      	adds	r7, #8
 80180a0:	46bd      	mov	sp, r7
 80180a2:	bd80      	pop	{r7, pc}

080180a4 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 80180a4:	b580      	push	{r7, lr}
 80180a6:	b082      	sub	sp, #8
 80180a8:	af00      	add	r7, sp, #0
 80180aa:	6078      	str	r0, [r7, #4]
 80180ac:	4a05      	ldr	r2, [pc, #20]	@ (80180c4 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 80180ae:	687b      	ldr	r3, [r7, #4]
 80180b0:	601a      	str	r2, [r3, #0]
 80180b2:	687b      	ldr	r3, [r7, #4]
 80180b4:	4618      	mov	r0, r3
 80180b6:	f7f3 f977 	bl	800b3a8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80180ba:	687b      	ldr	r3, [r7, #4]
 80180bc:	4618      	mov	r0, r3
 80180be:	3708      	adds	r7, #8
 80180c0:	46bd      	mov	sp, r7
 80180c2:	bd80      	pop	{r7, pc}
 80180c4:	08028bd8 	.word	0x08028bd8

080180c8 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 80180c8:	b580      	push	{r7, lr}
 80180ca:	b082      	sub	sp, #8
 80180cc:	af00      	add	r7, sp, #0
 80180ce:	6078      	str	r0, [r7, #4]
 80180d0:	6878      	ldr	r0, [r7, #4]
 80180d2:	f7ff ffe7 	bl	80180a4 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80180d6:	215c      	movs	r1, #92	@ 0x5c
 80180d8:	6878      	ldr	r0, [r7, #4]
 80180da:	f00d feee 	bl	8025eba <_ZdlPvj>
 80180de:	687b      	ldr	r3, [r7, #4]
 80180e0:	4618      	mov	r0, r3
 80180e2:	3708      	adds	r7, #8
 80180e4:	46bd      	mov	sp, r7
 80180e6:	bd80      	pop	{r7, pc}

080180e8 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80180e8:	b590      	push	{r4, r7, lr}
 80180ea:	b083      	sub	sp, #12
 80180ec:	af00      	add	r7, sp, #0
 80180ee:	6078      	str	r0, [r7, #4]
	allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	330c      	adds	r3, #12
 80180f4:	4618      	mov	r0, r3
 80180f6:	f000 f856 	bl	80181a6 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 80180fa:	4604      	mov	r4, r0
 80180fc:	6878      	ldr	r0, [r7, #4]
 80180fe:	f7ff fc8e 	bl	8017a1e <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8018102:	4603      	mov	r3, r0
 8018104:	4619      	mov	r1, r3
 8018106:	4620      	mov	r0, r4
 8018108:	f000 f859 	bl	80181be <_ZNSt16allocator_traitsISaIvEE7destroyI7TMC2209EEvRS0_PT_>
      }
 801810c:	bf00      	nop
 801810e:	370c      	adds	r7, #12
 8018110:	46bd      	mov	sp, r7
 8018112:	bd90      	pop	{r4, r7, pc}

08018114 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8018114:	b580      	push	{r7, lr}
 8018116:	b086      	sub	sp, #24
 8018118:	af00      	add	r7, sp, #0
 801811a:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 801811c:	687b      	ldr	r3, [r7, #4]
 801811e:	330c      	adds	r3, #12
 8018120:	4618      	mov	r0, r3
 8018122:	f000 f840 	bl	80181a6 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 8018126:	4602      	mov	r2, r0
 8018128:	f107 0314 	add.w	r3, r7, #20
 801812c:	4611      	mov	r1, r2
 801812e:	4618      	mov	r0, r3
 8018130:	f7ff fbc7 	bl	80178c2 <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8018134:	f107 0114 	add.w	r1, r7, #20
 8018138:	f107 030c 	add.w	r3, r7, #12
 801813c:	687a      	ldr	r2, [r7, #4]
 801813e:	4618      	mov	r0, r3
 8018140:	f7ff fde5 	bl	8017d0e <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
	this->~_Sp_counted_ptr_inplace();
 8018144:	6878      	ldr	r0, [r7, #4]
 8018146:	f7ff ffad 	bl	80180a4 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 801814a:	f107 030c 	add.w	r3, r7, #12
 801814e:	4618      	mov	r0, r3
 8018150:	f7ff fbe3 	bl	801791a <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 8018154:	f107 0314 	add.w	r3, r7, #20
 8018158:	4618      	mov	r0, r3
 801815a:	f7ff fbbf 	bl	80178dc <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 801815e:	3718      	adds	r7, #24
 8018160:	46bd      	mov	sp, r7
 8018162:	bd80      	pop	{r7, pc}

08018164 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 8018164:	b580      	push	{r7, lr}
 8018166:	b084      	sub	sp, #16
 8018168:	af00      	add	r7, sp, #0
 801816a:	6078      	str	r0, [r7, #4]
 801816c:	6039      	str	r1, [r7, #0]
	auto __ptr = const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());
 801816e:	6878      	ldr	r0, [r7, #4]
 8018170:	f7ff fc55 	bl	8017a1e <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8018174:	60f8      	str	r0, [r7, #12]
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 8018176:	f7f1 fb0f 	bl	8009798 <_ZNSt19_Sp_make_shared_tag5_S_tiEv>
 801817a:	4602      	mov	r2, r0
	    ||
 801817c:	683b      	ldr	r3, [r7, #0]
 801817e:	4293      	cmp	r3, r2
 8018180:	d005      	beq.n	801818e <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 8018182:	6838      	ldr	r0, [r7, #0]
 8018184:	f00d fed6 	bl	8025f34 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
 8018188:	4603      	mov	r3, r0
	    ||
 801818a:	2b00      	cmp	r3, #0
 801818c:	d001      	beq.n	8018192 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2e>
 801818e:	2301      	movs	r3, #1
 8018190:	e000      	b.n	8018194 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x30>
 8018192:	2300      	movs	r3, #0
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 8018194:	2b00      	cmp	r3, #0
 8018196:	d001      	beq.n	801819c <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x38>
	  return __ptr;
 8018198:	68fb      	ldr	r3, [r7, #12]
 801819a:	e000      	b.n	801819e <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x3a>
	return nullptr;
 801819c:	2300      	movs	r3, #0
      }
 801819e:	4618      	mov	r0, r3
 80181a0:	3710      	adds	r7, #16
 80181a2:	46bd      	mov	sp, r7
 80181a4:	bd80      	pop	{r7, pc}

080181a6 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _A_base::_S_get(*this); }
 80181a6:	b580      	push	{r7, lr}
 80181a8:	b082      	sub	sp, #8
 80181aa:	af00      	add	r7, sp, #0
 80181ac:	6078      	str	r0, [r7, #4]
 80181ae:	6878      	ldr	r0, [r7, #4]
 80181b0:	f7f5 fbcd 	bl	800d94e <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EE6_S_getERS1_>
 80181b4:	4603      	mov	r3, r0
 80181b6:	4618      	mov	r0, r3
 80181b8:	3708      	adds	r7, #8
 80181ba:	46bd      	mov	sp, r7
 80181bc:	bd80      	pop	{r7, pc}

080181be <_ZNSt16allocator_traitsISaIvEE7destroyI7TMC2209EEvRS0_PT_>:
	destroy(allocator_type&, _Up* __p)
 80181be:	b580      	push	{r7, lr}
 80181c0:	b082      	sub	sp, #8
 80181c2:	af00      	add	r7, sp, #0
 80181c4:	6078      	str	r0, [r7, #4]
 80181c6:	6039      	str	r1, [r7, #0]
	{ std::_Destroy(__p); }
 80181c8:	6838      	ldr	r0, [r7, #0]
 80181ca:	f000 f804 	bl	80181d6 <_ZSt8_DestroyI7TMC2209EvPT_>
 80181ce:	bf00      	nop
 80181d0:	3708      	adds	r7, #8
 80181d2:	46bd      	mov	sp, r7
 80181d4:	bd80      	pop	{r7, pc}

080181d6 <_ZSt8_DestroyI7TMC2209EvPT_>:
    _Destroy(_Tp* __pointer)
 80181d6:	b580      	push	{r7, lr}
 80181d8:	b082      	sub	sp, #8
 80181da:	af00      	add	r7, sp, #0
 80181dc:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	681b      	ldr	r3, [r3, #0]
 80181e2:	681b      	ldr	r3, [r3, #0]
 80181e4:	6878      	ldr	r0, [r7, #4]
 80181e6:	4798      	blx	r3
    }
 80181e8:	bf00      	nop
 80181ea:	3708      	adds	r7, #8
 80181ec:	46bd      	mov	sp, r7
 80181ee:	bd80      	pop	{r7, pc}

080181f0 <__NVIC_SetPriority>:
{
 80181f0:	b480      	push	{r7}
 80181f2:	b083      	sub	sp, #12
 80181f4:	af00      	add	r7, sp, #0
 80181f6:	4603      	mov	r3, r0
 80181f8:	6039      	str	r1, [r7, #0]
 80181fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80181fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018200:	2b00      	cmp	r3, #0
 8018202:	db0a      	blt.n	801821a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8018204:	683b      	ldr	r3, [r7, #0]
 8018206:	b2da      	uxtb	r2, r3
 8018208:	490c      	ldr	r1, [pc, #48]	@ (801823c <__NVIC_SetPriority+0x4c>)
 801820a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801820e:	0112      	lsls	r2, r2, #4
 8018210:	b2d2      	uxtb	r2, r2
 8018212:	440b      	add	r3, r1
 8018214:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8018218:	e00a      	b.n	8018230 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801821a:	683b      	ldr	r3, [r7, #0]
 801821c:	b2da      	uxtb	r2, r3
 801821e:	4908      	ldr	r1, [pc, #32]	@ (8018240 <__NVIC_SetPriority+0x50>)
 8018220:	88fb      	ldrh	r3, [r7, #6]
 8018222:	f003 030f 	and.w	r3, r3, #15
 8018226:	3b04      	subs	r3, #4
 8018228:	0112      	lsls	r2, r2, #4
 801822a:	b2d2      	uxtb	r2, r2
 801822c:	440b      	add	r3, r1
 801822e:	761a      	strb	r2, [r3, #24]
}
 8018230:	bf00      	nop
 8018232:	370c      	adds	r7, #12
 8018234:	46bd      	mov	sp, r7
 8018236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801823a:	4770      	bx	lr
 801823c:	e000e100 	.word	0xe000e100
 8018240:	e000ed00 	.word	0xe000ed00

08018244 <_ZStanSt12memory_orderSt23__memory_order_modifier>:
    return memory_order(int(__m) | int(__mod));
  }

  constexpr memory_order
  operator&(memory_order __m, __memory_order_modifier __mod)
  {
 8018244:	b480      	push	{r7}
 8018246:	b083      	sub	sp, #12
 8018248:	af00      	add	r7, sp, #0
 801824a:	4603      	mov	r3, r0
 801824c:	6039      	str	r1, [r7, #0]
 801824e:	71fb      	strb	r3, [r7, #7]
    return memory_order(int(__m) & int(__mod));
 8018250:	683b      	ldr	r3, [r7, #0]
 8018252:	b25a      	sxtb	r2, r3
 8018254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018258:	4013      	ands	r3, r2
 801825a:	b25b      	sxtb	r3, r3
 801825c:	b2db      	uxtb	r3, r3
  }
 801825e:	4618      	mov	r0, r3
 8018260:	370c      	adds	r7, #12
 8018262:	46bd      	mov	sp, r7
 8018264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018268:	4770      	bx	lr

0801826a <_ZNSt6atomicIbEC1Eb>:
    ~atomic() noexcept = default;
    atomic(const atomic&) = delete;
    atomic& operator=(const atomic&) = delete;
    atomic& operator=(const atomic&) volatile = delete;

    constexpr atomic(bool __i) noexcept : _M_base(__i) { }
 801826a:	b580      	push	{r7, lr}
 801826c:	b082      	sub	sp, #8
 801826e:	af00      	add	r7, sp, #0
 8018270:	6078      	str	r0, [r7, #4]
 8018272:	460b      	mov	r3, r1
 8018274:	70fb      	strb	r3, [r7, #3]
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	78fa      	ldrb	r2, [r7, #3]
 801827a:	4611      	mov	r1, r2
 801827c:	4618      	mov	r0, r3
 801827e:	f000 fa7c 	bl	801877a <_ZNSt13__atomic_baseIbEC1Eb>
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	4618      	mov	r0, r3
 8018286:	3708      	adds	r7, #8
 8018288:	46bd      	mov	sp, r7
 801828a:	bd80      	pop	{r7, pc}

0801828c <_ZNSt6atomicIbE5storeEbSt12memory_order>:
#if __cplusplus >= 201703L
    static constexpr bool is_always_lock_free = ATOMIC_BOOL_LOCK_FREE == 2;
#endif

    void
    store(bool __i, memory_order __m = memory_order_seq_cst) noexcept
 801828c:	b580      	push	{r7, lr}
 801828e:	b084      	sub	sp, #16
 8018290:	af00      	add	r7, sp, #0
 8018292:	6078      	str	r0, [r7, #4]
 8018294:	460b      	mov	r3, r1
 8018296:	70fb      	strb	r3, [r7, #3]
 8018298:	4613      	mov	r3, r2
 801829a:	70bb      	strb	r3, [r7, #2]
    { _M_base.store(__i, __m); }
 801829c:	687b      	ldr	r3, [r7, #4]
 801829e:	60fb      	str	r3, [r7, #12]
 80182a0:	78fb      	ldrb	r3, [r7, #3]
 80182a2:	72fb      	strb	r3, [r7, #11]
 80182a4:	78bb      	ldrb	r3, [r7, #2]
 80182a6:	72bb      	strb	r3, [r7, #10]

      _GLIBCXX_ALWAYS_INLINE void
      store(__int_type __i, memory_order __m = memory_order_seq_cst) noexcept
      {
	memory_order __b __attribute__ ((__unused__))
	  = __m & __memory_order_mask;
 80182a8:	7abb      	ldrb	r3, [r7, #10]
 80182aa:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80182ae:	4618      	mov	r0, r3
 80182b0:	f7ff ffc8 	bl	8018244 <_ZStanSt12memory_orderSt23__memory_order_modifier>
 80182b4:	4603      	mov	r3, r0
 80182b6:	727b      	strb	r3, [r7, #9]
	__glibcxx_assert(__b != memory_order_acquire);
 80182b8:	f7eb fd88 	bl	8003dcc <_ZSt23__is_constant_evaluatedv>
 80182bc:	4603      	mov	r3, r0
 80182be:	2b00      	cmp	r3, #0
 80182c0:	d004      	beq.n	80182cc <_ZNSt6atomicIbE5storeEbSt12memory_order+0x40>
 80182c2:	7a7b      	ldrb	r3, [r7, #9]
 80182c4:	2b02      	cmp	r3, #2
 80182c6:	d101      	bne.n	80182cc <_ZNSt6atomicIbE5storeEbSt12memory_order+0x40>
 80182c8:	2301      	movs	r3, #1
 80182ca:	e000      	b.n	80182ce <_ZNSt6atomicIbE5storeEbSt12memory_order+0x42>
 80182cc:	2300      	movs	r3, #0
 80182ce:	2b00      	cmp	r3, #0
	__glibcxx_assert(__b != memory_order_acq_rel);
 80182d0:	f7eb fd7c 	bl	8003dcc <_ZSt23__is_constant_evaluatedv>
 80182d4:	4603      	mov	r3, r0
 80182d6:	2b00      	cmp	r3, #0
 80182d8:	d004      	beq.n	80182e4 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x58>
 80182da:	7a7b      	ldrb	r3, [r7, #9]
 80182dc:	2b04      	cmp	r3, #4
 80182de:	d101      	bne.n	80182e4 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x58>
 80182e0:	2301      	movs	r3, #1
 80182e2:	e000      	b.n	80182e6 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x5a>
 80182e4:	2300      	movs	r3, #0
 80182e6:	2b00      	cmp	r3, #0
	__glibcxx_assert(__b != memory_order_consume);
 80182e8:	f7eb fd70 	bl	8003dcc <_ZSt23__is_constant_evaluatedv>
 80182ec:	4603      	mov	r3, r0
 80182ee:	2b00      	cmp	r3, #0
 80182f0:	d004      	beq.n	80182fc <_ZNSt6atomicIbE5storeEbSt12memory_order+0x70>
 80182f2:	7a7b      	ldrb	r3, [r7, #9]
 80182f4:	2b01      	cmp	r3, #1
 80182f6:	d101      	bne.n	80182fc <_ZNSt6atomicIbE5storeEbSt12memory_order+0x70>
 80182f8:	2301      	movs	r3, #1
 80182fa:	e000      	b.n	80182fe <_ZNSt6atomicIbE5storeEbSt12memory_order+0x72>
 80182fc:	2300      	movs	r3, #0
 80182fe:	2b00      	cmp	r3, #0

	__atomic_store_n(&_M_i, __i, int(__m));
 8018300:	68fb      	ldr	r3, [r7, #12]
 8018302:	7afa      	ldrb	r2, [r7, #11]
 8018304:	f3bf 8f5b 	dmb	ish
 8018308:	701a      	strb	r2, [r3, #0]
 801830a:	f3bf 8f5b 	dmb	ish
      }
 801830e:	bf00      	nop
 8018310:	bf00      	nop
 8018312:	3710      	adds	r7, #16
 8018314:	46bd      	mov	sp, r7
 8018316:	bd80      	pop	{r7, pc}

08018318 <_ZNKSt6atomicIbE4loadESt12memory_order>:
    void
    store(bool __i, memory_order __m = memory_order_seq_cst) volatile noexcept
    { _M_base.store(__i, __m); }

    bool
    load(memory_order __m = memory_order_seq_cst) const noexcept
 8018318:	b580      	push	{r7, lr}
 801831a:	b084      	sub	sp, #16
 801831c:	af00      	add	r7, sp, #0
 801831e:	6078      	str	r0, [r7, #4]
 8018320:	460b      	mov	r3, r1
 8018322:	70fb      	strb	r3, [r7, #3]
    { return _M_base.load(__m); }
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	60fb      	str	r3, [r7, #12]
 8018328:	78fb      	ldrb	r3, [r7, #3]
 801832a:	72fb      	strb	r3, [r7, #11]

      _GLIBCXX_ALWAYS_INLINE __int_type
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	memory_order __b __attribute__ ((__unused__))
	  = __m & __memory_order_mask;
 801832c:	7afb      	ldrb	r3, [r7, #11]
 801832e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8018332:	4618      	mov	r0, r3
 8018334:	f7ff ff86 	bl	8018244 <_ZStanSt12memory_orderSt23__memory_order_modifier>
 8018338:	4603      	mov	r3, r0
 801833a:	72bb      	strb	r3, [r7, #10]
	__glibcxx_assert(__b != memory_order_release);
 801833c:	f7eb fd46 	bl	8003dcc <_ZSt23__is_constant_evaluatedv>
 8018340:	4603      	mov	r3, r0
 8018342:	2b00      	cmp	r3, #0
 8018344:	d004      	beq.n	8018350 <_ZNKSt6atomicIbE4loadESt12memory_order+0x38>
 8018346:	7abb      	ldrb	r3, [r7, #10]
 8018348:	2b03      	cmp	r3, #3
 801834a:	d101      	bne.n	8018350 <_ZNKSt6atomicIbE4loadESt12memory_order+0x38>
 801834c:	2301      	movs	r3, #1
 801834e:	e000      	b.n	8018352 <_ZNKSt6atomicIbE4loadESt12memory_order+0x3a>
 8018350:	2300      	movs	r3, #0
 8018352:	2b00      	cmp	r3, #0
	__glibcxx_assert(__b != memory_order_acq_rel);
 8018354:	f7eb fd3a 	bl	8003dcc <_ZSt23__is_constant_evaluatedv>
 8018358:	4603      	mov	r3, r0
 801835a:	2b00      	cmp	r3, #0
 801835c:	d004      	beq.n	8018368 <_ZNKSt6atomicIbE4loadESt12memory_order+0x50>
 801835e:	7abb      	ldrb	r3, [r7, #10]
 8018360:	2b04      	cmp	r3, #4
 8018362:	d101      	bne.n	8018368 <_ZNKSt6atomicIbE4loadESt12memory_order+0x50>
 8018364:	2301      	movs	r3, #1
 8018366:	e000      	b.n	801836a <_ZNKSt6atomicIbE4loadESt12memory_order+0x52>
 8018368:	2300      	movs	r3, #0
 801836a:	2b00      	cmp	r3, #0

	return __atomic_load_n(&_M_i, int(__m));
 801836c:	68fb      	ldr	r3, [r7, #12]
 801836e:	f3bf 8f5b 	dmb	ish
 8018372:	781b      	ldrb	r3, [r3, #0]
 8018374:	f3bf 8f5b 	dmb	ish
 8018378:	b2db      	uxtb	r3, r3
 801837a:	2b00      	cmp	r3, #0
 801837c:	bf14      	ite	ne
 801837e:	2301      	movne	r3, #1
 8018380:	2300      	moveq	r3, #0
 8018382:	b2db      	uxtb	r3, r3
 8018384:	4618      	mov	r0, r3
 8018386:	3710      	adds	r7, #16
 8018388:	46bd      	mov	sp, r7
 801838a:	bd80      	pop	{r7, pc}

0801838c <_ZN9pruThread16setThreadRunningEb>:
    atomic<bool> threadPaused{false};

    vector<shared_ptr<Module>> modules;
    vector<shared_ptr<Module>> modulesPost;

    void setThreadRunning(bool val) { threadRunning.store(val, std::memory_order_release); }
 801838c:	b580      	push	{r7, lr}
 801838e:	b082      	sub	sp, #8
 8018390:	af00      	add	r7, sp, #0
 8018392:	6078      	str	r0, [r7, #4]
 8018394:	460b      	mov	r3, r1
 8018396:	70fb      	strb	r3, [r7, #3]
 8018398:	687b      	ldr	r3, [r7, #4]
 801839a:	3329      	adds	r3, #41	@ 0x29
 801839c:	78f9      	ldrb	r1, [r7, #3]
 801839e:	2203      	movs	r2, #3
 80183a0:	4618      	mov	r0, r3
 80183a2:	f7ff ff73 	bl	801828c <_ZNSt6atomicIbE5storeEbSt12memory_order>
 80183a6:	bf00      	nop
 80183a8:	3708      	adds	r7, #8
 80183aa:	46bd      	mov	sp, r7
 80183ac:	bd80      	pop	{r7, pc}

080183ae <_ZN9pruThread15setThreadPausedEb>:
    void setThreadPaused(bool val) { threadPaused.store(val, std::memory_order_release); }
 80183ae:	b580      	push	{r7, lr}
 80183b0:	b082      	sub	sp, #8
 80183b2:	af00      	add	r7, sp, #0
 80183b4:	6078      	str	r0, [r7, #4]
 80183b6:	460b      	mov	r3, r1
 80183b8:	70fb      	strb	r3, [r7, #3]
 80183ba:	687b      	ldr	r3, [r7, #4]
 80183bc:	332a      	adds	r3, #42	@ 0x2a
 80183be:	78f9      	ldrb	r1, [r7, #3]
 80183c0:	2203      	movs	r2, #3
 80183c2:	4618      	mov	r0, r3
 80183c4:	f7ff ff62 	bl	801828c <_ZNSt6atomicIbE5storeEbSt12memory_order>
 80183c8:	bf00      	nop
 80183ca:	3708      	adds	r7, #8
 80183cc:	46bd      	mov	sp, r7
 80183ce:	bd80      	pop	{r7, pc}

080183d0 <_ZNK9pruThread9isRunningEv>:

	bool registerModule(shared_ptr<Module> module);
	bool registerModulePost(shared_ptr<Module> module);
	bool unregisterModule(shared_ptr<Module> module);

    [[nodiscard]] bool isRunning() const { return threadRunning.load(std::memory_order_acquire);  }
 80183d0:	b580      	push	{r7, lr}
 80183d2:	b082      	sub	sp, #8
 80183d4:	af00      	add	r7, sp, #0
 80183d6:	6078      	str	r0, [r7, #4]
 80183d8:	687b      	ldr	r3, [r7, #4]
 80183da:	3329      	adds	r3, #41	@ 0x29
 80183dc:	2102      	movs	r1, #2
 80183de:	4618      	mov	r0, r3
 80183e0:	f7ff ff9a 	bl	8018318 <_ZNKSt6atomicIbE4loadESt12memory_order>
 80183e4:	4603      	mov	r3, r0
 80183e6:	4618      	mov	r0, r3
 80183e8:	3708      	adds	r7, #8
 80183ea:	46bd      	mov	sp, r7
 80183ec:	bd80      	pop	{r7, pc}

080183ee <_ZNK9pruThread8isPausedEv>:
    [[nodiscard]] bool isPaused() const { return threadPaused.load(std::memory_order_acquire); }
 80183ee:	b580      	push	{r7, lr}
 80183f0:	b082      	sub	sp, #8
 80183f2:	af00      	add	r7, sp, #0
 80183f4:	6078      	str	r0, [r7, #4]
 80183f6:	687b      	ldr	r3, [r7, #4]
 80183f8:	332a      	adds	r3, #42	@ 0x2a
 80183fa:	2102      	movs	r1, #2
 80183fc:	4618      	mov	r0, r3
 80183fe:	f7ff ff8b 	bl	8018318 <_ZNKSt6atomicIbE4loadESt12memory_order>
 8018402:	4603      	mov	r3, r0
 8018404:	4618      	mov	r0, r3
 8018406:	3708      	adds	r7, #8
 8018408:	46bd      	mov	sp, r7
 801840a:	bd80      	pop	{r7, pc}

0801840c <_ZN9pruThreadC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP11TIM_TypeDef9IRQn_Typemh>:

#include "pruThread.h"
#include "../modules/module.h"


pruThread::pruThread(const string& _name, TIM_TypeDef *_timer, IRQn_Type _irq, uint32_t _freq, uint8_t _prio)
 801840c:	b580      	push	{r7, lr}
 801840e:	b084      	sub	sp, #16
 8018410:	af00      	add	r7, sp, #0
 8018412:	60f8      	str	r0, [r7, #12]
 8018414:	60b9      	str	r1, [r7, #8]
 8018416:	607a      	str	r2, [r7, #4]
 8018418:	807b      	strh	r3, [r7, #2]
    : threadName(_name),
 801841a:	68fb      	ldr	r3, [r7, #12]
 801841c:	68b9      	ldr	r1, [r7, #8]
 801841e:	4618      	mov	r0, r3
 8018420:	f00e f867 	bl	80264f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      timer(_timer),
 8018424:	68fb      	ldr	r3, [r7, #12]
 8018426:	687a      	ldr	r2, [r7, #4]
 8018428:	619a      	str	r2, [r3, #24]
      irq(_irq),
 801842a:	68fb      	ldr	r3, [r7, #12]
 801842c:	887a      	ldrh	r2, [r7, #2]
 801842e:	839a      	strh	r2, [r3, #28]
      frequency(_freq),
 8018430:	68fb      	ldr	r3, [r7, #12]
 8018432:	69ba      	ldr	r2, [r7, #24]
 8018434:	621a      	str	r2, [r3, #32]
	  hasModulesPost(false)
 8018436:	68fb      	ldr	r3, [r7, #12]
 8018438:	2200      	movs	r2, #0
 801843a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 801843e:	68fb      	ldr	r3, [r7, #12]
 8018440:	3329      	adds	r3, #41	@ 0x29
 8018442:	2100      	movs	r1, #0
 8018444:	4618      	mov	r0, r3
 8018446:	f7ff ff10 	bl	801826a <_ZNSt6atomicIbEC1Eb>
 801844a:	68fb      	ldr	r3, [r7, #12]
 801844c:	332a      	adds	r3, #42	@ 0x2a
 801844e:	2100      	movs	r1, #0
 8018450:	4618      	mov	r0, r3
 8018452:	f7ff ff0a 	bl	801826a <_ZNSt6atomicIbEC1Eb>
 8018456:	68fb      	ldr	r3, [r7, #12]
 8018458:	332c      	adds	r3, #44	@ 0x2c
 801845a:	4618      	mov	r0, r3
 801845c:	f7f1 fcfe 	bl	8009e5c <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EEC1Ev>
 8018460:	68fb      	ldr	r3, [r7, #12]
 8018462:	3338      	adds	r3, #56	@ 0x38
 8018464:	4618      	mov	r0, r3
 8018466:	f7f1 fcf9 	bl	8009e5c <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EEC1Ev>
{
	printf("Creating %s thread at %lu hz\n", threadName.c_str(), (unsigned long)frequency);
 801846a:	68fb      	ldr	r3, [r7, #12]
 801846c:	4618      	mov	r0, r3
 801846e:	f00e f813 	bl	8026498 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8018472:	4601      	mov	r1, r0
 8018474:	68fb      	ldr	r3, [r7, #12]
 8018476:	6a1b      	ldr	r3, [r3, #32]
 8018478:	461a      	mov	r2, r3
 801847a:	4808      	ldr	r0, [pc, #32]	@ (801849c <_ZN9pruThreadC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP11TIM_TypeDef9IRQn_Typemh+0x90>)
 801847c:	f00e fbd8 	bl	8026c30 <iprintf>
    NVIC_SetPriority(irq, _prio);
 8018480:	68fb      	ldr	r3, [r7, #12]
 8018482:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8018486:	7f3a      	ldrb	r2, [r7, #28]
 8018488:	4611      	mov	r1, r2
 801848a:	4618      	mov	r0, r3
 801848c:	f7ff feb0 	bl	80181f0 <__NVIC_SetPriority>
}
 8018490:	68fb      	ldr	r3, [r7, #12]
 8018492:	4618      	mov	r0, r3
 8018494:	3710      	adds	r7, #16
 8018496:	46bd      	mov	sp, r7
 8018498:	bd80      	pop	{r7, pc}
 801849a:	bf00      	nop
 801849c:	080286e0 	.word	0x080286e0

080184a0 <_ZN9pruThread14executeModulesEv>:


bool pruThread::executeModules() {
 80184a0:	b580      	push	{r7, lr}
 80184a2:	b08a      	sub	sp, #40	@ 0x28
 80184a4:	af00      	add	r7, sp, #0
 80184a6:	6078      	str	r0, [r7, #4]
    for (const auto& module : modules) {
 80184a8:	687b      	ldr	r3, [r7, #4]
 80184aa:	332c      	adds	r3, #44	@ 0x2c
 80184ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80184ae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80184b0:	f7f2 fe8f 	bl	800b1d2 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>
 80184b4:	4603      	mov	r3, r0
 80184b6:	617b      	str	r3, [r7, #20]
 80184b8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80184ba:	f7f2 fe9a 	bl	800b1f2 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 80184be:	4603      	mov	r3, r0
 80184c0:	613b      	str	r3, [r7, #16]
 80184c2:	e018      	b.n	80184f6 <_ZN9pruThread14executeModulesEv+0x56>
 80184c4:	f107 0314 	add.w	r3, r7, #20
 80184c8:	4618      	mov	r0, r3
 80184ca:	f7f2 fecc 	bl	800b266 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>
 80184ce:	61b8      	str	r0, [r7, #24]
        if (module) {
 80184d0:	69bb      	ldr	r3, [r7, #24]
 80184d2:	4618      	mov	r0, r3
 80184d4:	f7f2 fed3 	bl	800b27e <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 80184d8:	4603      	mov	r3, r0
 80184da:	2b00      	cmp	r3, #0
 80184dc:	d006      	beq.n	80184ec <_ZN9pruThread14executeModulesEv+0x4c>
            module->runModule();
 80184de:	69b8      	ldr	r0, [r7, #24]
 80184e0:	f7f2 fede 	bl	800b2a0 <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80184e4:	4603      	mov	r3, r0
 80184e6:	4618      	mov	r0, r3
 80184e8:	f7f8 fb88 	bl	8010bfc <_ZN6Module9runModuleEv>
    for (const auto& module : modules) {
 80184ec:	f107 0314 	add.w	r3, r7, #20
 80184f0:	4618      	mov	r0, r3
 80184f2:	f7f2 fea7 	bl	800b244 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
 80184f6:	f107 0210 	add.w	r2, r7, #16
 80184fa:	f107 0314 	add.w	r3, r7, #20
 80184fe:	4611      	mov	r1, r2
 8018500:	4618      	mov	r0, r3
 8018502:	f7f2 fe87 	bl	800b214 <_ZN9__gnu_cxxneIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 8018506:	4603      	mov	r3, r0
 8018508:	2b00      	cmp	r3, #0
 801850a:	d1db      	bne.n	80184c4 <_ZN9pruThread14executeModulesEv+0x24>
        }
    }

    if (hasModulesPost) {
 801850c:	687b      	ldr	r3, [r7, #4]
 801850e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8018512:	2b00      	cmp	r3, #0
 8018514:	d031      	beq.n	801857a <_ZN9pruThread14executeModulesEv+0xda>
		for (const auto& module : modulesPost) {
 8018516:	687b      	ldr	r3, [r7, #4]
 8018518:	3338      	adds	r3, #56	@ 0x38
 801851a:	623b      	str	r3, [r7, #32]
 801851c:	6a38      	ldr	r0, [r7, #32]
 801851e:	f7f2 fe58 	bl	800b1d2 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>
 8018522:	4603      	mov	r3, r0
 8018524:	60fb      	str	r3, [r7, #12]
 8018526:	6a38      	ldr	r0, [r7, #32]
 8018528:	f7f2 fe63 	bl	800b1f2 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 801852c:	4603      	mov	r3, r0
 801852e:	60bb      	str	r3, [r7, #8]
 8018530:	e018      	b.n	8018564 <_ZN9pruThread14executeModulesEv+0xc4>
 8018532:	f107 030c 	add.w	r3, r7, #12
 8018536:	4618      	mov	r0, r3
 8018538:	f7f2 fe95 	bl	800b266 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>
 801853c:	61f8      	str	r0, [r7, #28]
			if (module) {
 801853e:	69fb      	ldr	r3, [r7, #28]
 8018540:	4618      	mov	r0, r3
 8018542:	f7f2 fe9c 	bl	800b27e <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 8018546:	4603      	mov	r3, r0
 8018548:	2b00      	cmp	r3, #0
 801854a:	d006      	beq.n	801855a <_ZN9pruThread14executeModulesEv+0xba>
				module->runModule();
 801854c:	69f8      	ldr	r0, [r7, #28]
 801854e:	f7f2 fea7 	bl	800b2a0 <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8018552:	4603      	mov	r3, r0
 8018554:	4618      	mov	r0, r3
 8018556:	f7f8 fb51 	bl	8010bfc <_ZN6Module9runModuleEv>
		for (const auto& module : modulesPost) {
 801855a:	f107 030c 	add.w	r3, r7, #12
 801855e:	4618      	mov	r0, r3
 8018560:	f7f2 fe70 	bl	800b244 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
 8018564:	f107 0208 	add.w	r2, r7, #8
 8018568:	f107 030c 	add.w	r3, r7, #12
 801856c:	4611      	mov	r1, r2
 801856e:	4618      	mov	r0, r3
 8018570:	f7f2 fe50 	bl	800b214 <_ZN9__gnu_cxxneIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 8018574:	4603      	mov	r3, r0
 8018576:	2b00      	cmp	r3, #0
 8018578:	d1db      	bne.n	8018532 <_ZN9pruThread14executeModulesEv+0x92>
			}
		}
    }

    return true;
 801857a:	2301      	movs	r3, #1
}
 801857c:	4618      	mov	r0, r3
 801857e:	3728      	adds	r7, #40	@ 0x28
 8018580:	46bd      	mov	sp, r7
 8018582:	bd80      	pop	{r7, pc}

08018584 <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE>:

bool pruThread::registerModule(shared_ptr<Module> module) {
 8018584:	b580      	push	{r7, lr}
 8018586:	b082      	sub	sp, #8
 8018588:	af00      	add	r7, sp, #0
 801858a:	6078      	str	r0, [r7, #4]
 801858c:	6039      	str	r1, [r7, #0]
    if (!module) {
 801858e:	683b      	ldr	r3, [r7, #0]
 8018590:	4618      	mov	r0, r3
 8018592:	f7f2 fe74 	bl	800b27e <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 8018596:	4603      	mov	r3, r0
 8018598:	f083 0301 	eor.w	r3, r3, #1
 801859c:	b2db      	uxtb	r3, r3
 801859e:	2b00      	cmp	r3, #0
 80185a0:	d001      	beq.n	80185a6 <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE+0x22>
        return false;
 80185a2:	2300      	movs	r3, #0
 80185a4:	e006      	b.n	80185b4 <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE+0x30>
    }
    modules.push_back(module);
 80185a6:	687b      	ldr	r3, [r7, #4]
 80185a8:	332c      	adds	r3, #44	@ 0x2c
 80185aa:	6839      	ldr	r1, [r7, #0]
 80185ac:	4618      	mov	r0, r3
 80185ae:	f000 f8f4 	bl	801879a <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backERKS2_>
    return true;
 80185b2:	2301      	movs	r3, #1
}
 80185b4:	4618      	mov	r0, r3
 80185b6:	3708      	adds	r7, #8
 80185b8:	46bd      	mov	sp, r7
 80185ba:	bd80      	pop	{r7, pc}

080185bc <_ZN9pruThread18registerModulePostESt10shared_ptrI6ModuleE>:

bool pruThread::registerModulePost(shared_ptr<Module> module) {
 80185bc:	b580      	push	{r7, lr}
 80185be:	b082      	sub	sp, #8
 80185c0:	af00      	add	r7, sp, #0
 80185c2:	6078      	str	r0, [r7, #4]
 80185c4:	6039      	str	r1, [r7, #0]
    if (!module) {
 80185c6:	683b      	ldr	r3, [r7, #0]
 80185c8:	4618      	mov	r0, r3
 80185ca:	f7f2 fe58 	bl	800b27e <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 80185ce:	4603      	mov	r3, r0
 80185d0:	f083 0301 	eor.w	r3, r3, #1
 80185d4:	b2db      	uxtb	r3, r3
 80185d6:	2b00      	cmp	r3, #0
 80185d8:	d001      	beq.n	80185de <_ZN9pruThread18registerModulePostESt10shared_ptrI6ModuleE+0x22>
        return false;
 80185da:	2300      	movs	r3, #0
 80185dc:	e00a      	b.n	80185f4 <_ZN9pruThread18registerModulePostESt10shared_ptrI6ModuleE+0x38>
    }
    hasModulesPost = true;
 80185de:	687b      	ldr	r3, [r7, #4]
 80185e0:	2201      	movs	r2, #1
 80185e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    modulesPost.push_back(module);
 80185e6:	687b      	ldr	r3, [r7, #4]
 80185e8:	3338      	adds	r3, #56	@ 0x38
 80185ea:	6839      	ldr	r1, [r7, #0]
 80185ec:	4618      	mov	r0, r3
 80185ee:	f000 f8d4 	bl	801879a <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backERKS2_>
    return true;
 80185f2:	2301      	movs	r3, #1
}
 80185f4:	4618      	mov	r0, r3
 80185f6:	3708      	adds	r7, #8
 80185f8:	46bd      	mov	sp, r7
 80185fa:	bd80      	pop	{r7, pc}

080185fc <_ZZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEENKUlRKS2_E_clES4_>:
        return false;
    }

    // Use a lambda to compare the raw pointers inside the shared_ptrs
    auto iter = std::remove_if(modules.begin(), modules.end(),
        [&module](const std::shared_ptr<Module>& mod) {
 80185fc:	b580      	push	{r7, lr}
 80185fe:	b082      	sub	sp, #8
 8018600:	af00      	add	r7, sp, #0
 8018602:	6078      	str	r0, [r7, #4]
 8018604:	6039      	str	r1, [r7, #0]
 8018606:	687b      	ldr	r3, [r7, #4]
 8018608:	681b      	ldr	r3, [r3, #0]
            return mod == module; // Compare shared_ptrs directly
 801860a:	4619      	mov	r1, r3
 801860c:	6838      	ldr	r0, [r7, #0]
 801860e:	f000 f8ea 	bl	80187e6 <_ZSteqI6ModuleS0_EbRKSt10shared_ptrIT_ERKS1_IT0_E>
 8018612:	4603      	mov	r3, r0
        });
 8018614:	4618      	mov	r0, r3
 8018616:	3708      	adds	r7, #8
 8018618:	46bd      	mov	sp, r7
 801861a:	bd80      	pop	{r7, pc}

0801861c <_ZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleE>:
bool pruThread::unregisterModule(std::shared_ptr<Module> module) {
 801861c:	b590      	push	{r4, r7, lr}
 801861e:	b087      	sub	sp, #28
 8018620:	af00      	add	r7, sp, #0
 8018622:	6078      	str	r0, [r7, #4]
 8018624:	6039      	str	r1, [r7, #0]
    if (!module) {
 8018626:	683b      	ldr	r3, [r7, #0]
 8018628:	4618      	mov	r0, r3
 801862a:	f7f2 fe28 	bl	800b27e <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 801862e:	4603      	mov	r3, r0
 8018630:	f083 0301 	eor.w	r3, r3, #1
 8018634:	b2db      	uxtb	r3, r3
 8018636:	2b00      	cmp	r3, #0
 8018638:	d001      	beq.n	801863e <_ZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleE+0x22>
        return false;
 801863a:	2300      	movs	r3, #0
 801863c:	e032      	b.n	80186a4 <_ZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleE+0x88>
    auto iter = std::remove_if(modules.begin(), modules.end(),
 801863e:	687b      	ldr	r3, [r7, #4]
 8018640:	332c      	adds	r3, #44	@ 0x2c
 8018642:	4618      	mov	r0, r3
 8018644:	f7f2 fdc5 	bl	800b1d2 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>
 8018648:	4604      	mov	r4, r0
 801864a:	687b      	ldr	r3, [r7, #4]
 801864c:	332c      	adds	r3, #44	@ 0x2c
 801864e:	4618      	mov	r0, r3
 8018650:	f7f2 fdcf 	bl	800b1f2 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 8018654:	4601      	mov	r1, r0
 8018656:	683b      	ldr	r3, [r7, #0]
 8018658:	461a      	mov	r2, r3
 801865a:	4620      	mov	r0, r4
 801865c:	f000 f8db 	bl	8018816 <_ZSt9remove_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEEZN9pruThread16unregisterModuleES4_EUlRKS4_E_ET_SE_SE_T0_>
 8018660:	4603      	mov	r3, r0
 8018662:	60bb      	str	r3, [r7, #8]

    modules.erase(iter, modules.end());
 8018664:	687b      	ldr	r3, [r7, #4]
 8018666:	f103 042c 	add.w	r4, r3, #44	@ 0x2c
 801866a:	f107 0208 	add.w	r2, r7, #8
 801866e:	f107 030c 	add.w	r3, r7, #12
 8018672:	4611      	mov	r1, r2
 8018674:	4618      	mov	r0, r3
 8018676:	f000 f8e2 	bl	801883e <_ZN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1IPS3_vEERKNS0_IT_S8_EE>
 801867a:	687b      	ldr	r3, [r7, #4]
 801867c:	332c      	adds	r3, #44	@ 0x2c
 801867e:	4618      	mov	r0, r3
 8018680:	f7f2 fdb7 	bl	800b1f2 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 8018684:	4603      	mov	r3, r0
 8018686:	617b      	str	r3, [r7, #20]
 8018688:	f107 0214 	add.w	r2, r7, #20
 801868c:	f107 0310 	add.w	r3, r7, #16
 8018690:	4611      	mov	r1, r2
 8018692:	4618      	mov	r0, r3
 8018694:	f000 f8d3 	bl	801883e <_ZN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1IPS3_vEERKNS0_IT_S8_EE>
 8018698:	693a      	ldr	r2, [r7, #16]
 801869a:	68f9      	ldr	r1, [r7, #12]
 801869c:	4620      	mov	r0, r4
 801869e:	f000 f8df 	bl	8018860 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS2_S4_EES9_>
    return true;
 80186a2:	2301      	movs	r3, #1
}
 80186a4:	4618      	mov	r0, r3
 80186a6:	371c      	adds	r7, #28
 80186a8:	46bd      	mov	sp, r7
 80186aa:	bd90      	pop	{r4, r7, pc}

080186ac <_ZN9pruThread11startThreadEv>:

// For baremetal, this is just initialization
bool pruThread::startThread() {
 80186ac:	b590      	push	{r4, r7, lr}
 80186ae:	b085      	sub	sp, #20
 80186b0:	af02      	add	r7, sp, #8
 80186b2:	6078      	str	r0, [r7, #4]
    if (isRunning()) {
 80186b4:	6878      	ldr	r0, [r7, #4]
 80186b6:	f7ff fe8b 	bl	80183d0 <_ZNK9pruThread9isRunningEv>
 80186ba:	4603      	mov	r3, r0
 80186bc:	2b00      	cmp	r3, #0
 80186be:	d001      	beq.n	80186c4 <_ZN9pruThread11startThreadEv+0x18>
        return true;
 80186c0:	2301      	movs	r3, #1
 80186c2:	e01c      	b.n	80186fe <_ZN9pruThread11startThreadEv+0x52>
    }

    setThreadRunning(true);
 80186c4:	2101      	movs	r1, #1
 80186c6:	6878      	ldr	r0, [r7, #4]
 80186c8:	f7ff fe60 	bl	801838c <_ZN9pruThread16setThreadRunningEb>
    setThreadPaused(false);
 80186cc:	2100      	movs	r1, #0
 80186ce:	6878      	ldr	r0, [r7, #4]
 80186d0:	f7ff fe6d 	bl	80183ae <_ZN9pruThread15setThreadPausedEb>

    timerPtr = new pruTimer(timer, irq, frequency, this);
 80186d4:	2014      	movs	r0, #20
 80186d6:	f00d fc01 	bl	8025edc <_Znwj>
 80186da:	4603      	mov	r3, r0
 80186dc:	461c      	mov	r4, r3
 80186de:	687b      	ldr	r3, [r7, #4]
 80186e0:	6999      	ldr	r1, [r3, #24]
 80186e2:	687b      	ldr	r3, [r7, #4]
 80186e4:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 80186e8:	687b      	ldr	r3, [r7, #4]
 80186ea:	6a18      	ldr	r0, [r3, #32]
 80186ec:	687b      	ldr	r3, [r7, #4]
 80186ee:	9300      	str	r3, [sp, #0]
 80186f0:	4603      	mov	r3, r0
 80186f2:	4620      	mov	r0, r4
 80186f4:	f000 fd1a 	bl	801912c <_ZN8pruTimerC1EP11TIM_TypeDef9IRQn_TypemP9pruThread>
 80186f8:	687b      	ldr	r3, [r7, #4]
 80186fa:	625c      	str	r4, [r3, #36]	@ 0x24
    return true;
 80186fc:	2301      	movs	r3, #1
}
 80186fe:	4618      	mov	r0, r3
 8018700:	370c      	adds	r7, #12
 8018702:	46bd      	mov	sp, r7
 8018704:	bd90      	pop	{r4, r7, pc}

08018706 <_ZN9pruThread10stopThreadEv>:

void pruThread::stopThread() {
 8018706:	b580      	push	{r7, lr}
 8018708:	b082      	sub	sp, #8
 801870a:	af00      	add	r7, sp, #0
 801870c:	6078      	str	r0, [r7, #4]
    setThreadRunning(false);
 801870e:	2100      	movs	r1, #0
 8018710:	6878      	ldr	r0, [r7, #4]
 8018712:	f7ff fe3b 	bl	801838c <_ZN9pruThread16setThreadRunningEb>
    setThreadPaused(false);
 8018716:	2100      	movs	r1, #0
 8018718:	6878      	ldr	r0, [r7, #4]
 801871a:	f7ff fe48 	bl	80183ae <_ZN9pruThread15setThreadPausedEb>
}
 801871e:	bf00      	nop
 8018720:	3708      	adds	r7, #8
 8018722:	46bd      	mov	sp, r7
 8018724:	bd80      	pop	{r7, pc}

08018726 <_ZN9pruThread6updateEv>:

// This is the main function that should be called periodically
bool pruThread::update() {
 8018726:	b580      	push	{r7, lr}
 8018728:	b082      	sub	sp, #8
 801872a:	af00      	add	r7, sp, #0
 801872c:	6078      	str	r0, [r7, #4]
    if (!isRunning() || isPaused()) {
 801872e:	6878      	ldr	r0, [r7, #4]
 8018730:	f7ff fe4e 	bl	80183d0 <_ZNK9pruThread9isRunningEv>
 8018734:	4603      	mov	r3, r0
 8018736:	f083 0301 	eor.w	r3, r3, #1
 801873a:	b2db      	uxtb	r3, r3
 801873c:	2b00      	cmp	r3, #0
 801873e:	d105      	bne.n	801874c <_ZN9pruThread6updateEv+0x26>
 8018740:	6878      	ldr	r0, [r7, #4]
 8018742:	f7ff fe54 	bl	80183ee <_ZNK9pruThread8isPausedEv>
 8018746:	4603      	mov	r3, r0
 8018748:	2b00      	cmp	r3, #0
 801874a:	d001      	beq.n	8018750 <_ZN9pruThread6updateEv+0x2a>
 801874c:	2301      	movs	r3, #1
 801874e:	e000      	b.n	8018752 <_ZN9pruThread6updateEv+0x2c>
 8018750:	2300      	movs	r3, #0
 8018752:	2b00      	cmp	r3, #0
 8018754:	d001      	beq.n	801875a <_ZN9pruThread6updateEv+0x34>
        return true;
 8018756:	2301      	movs	r3, #1
 8018758:	e00b      	b.n	8018772 <_ZN9pruThread6updateEv+0x4c>
    }

    // Execute all modules
    if (!executeModules()) {
 801875a:	6878      	ldr	r0, [r7, #4]
 801875c:	f7ff fea0 	bl	80184a0 <_ZN9pruThread14executeModulesEv>
 8018760:	4603      	mov	r3, r0
 8018762:	f083 0301 	eor.w	r3, r3, #1
 8018766:	b2db      	uxtb	r3, r3
 8018768:	2b00      	cmp	r3, #0
 801876a:	d001      	beq.n	8018770 <_ZN9pruThread6updateEv+0x4a>
        return false;
 801876c:	2300      	movs	r3, #0
 801876e:	e000      	b.n	8018772 <_ZN9pruThread6updateEv+0x4c>
    }

    return true;
 8018770:	2301      	movs	r3, #1
}
 8018772:	4618      	mov	r0, r3
 8018774:	3708      	adds	r7, #8
 8018776:	46bd      	mov	sp, r7
 8018778:	bd80      	pop	{r7, pc}

0801877a <_ZNSt13__atomic_baseIbEC1Eb>:
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 801877a:	b480      	push	{r7}
 801877c:	b083      	sub	sp, #12
 801877e:	af00      	add	r7, sp, #0
 8018780:	6078      	str	r0, [r7, #4]
 8018782:	460b      	mov	r3, r1
 8018784:	70fb      	strb	r3, [r7, #3]
 8018786:	687b      	ldr	r3, [r7, #4]
 8018788:	78fa      	ldrb	r2, [r7, #3]
 801878a:	701a      	strb	r2, [r3, #0]
 801878c:	687b      	ldr	r3, [r7, #4]
 801878e:	4618      	mov	r0, r3
 8018790:	370c      	adds	r7, #12
 8018792:	46bd      	mov	sp, r7
 8018794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018798:	4770      	bx	lr

0801879a <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backERKS2_>:
      push_back(const value_type& __x)
 801879a:	b580      	push	{r7, lr}
 801879c:	b082      	sub	sp, #8
 801879e:	af00      	add	r7, sp, #0
 80187a0:	6078      	str	r0, [r7, #4]
 80187a2:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80187a4:	687b      	ldr	r3, [r7, #4]
 80187a6:	685a      	ldr	r2, [r3, #4]
 80187a8:	687b      	ldr	r3, [r7, #4]
 80187aa:	689b      	ldr	r3, [r3, #8]
 80187ac:	429a      	cmp	r2, r3
 80187ae:	d00d      	beq.n	80187cc <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backERKS2_+0x32>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80187b0:	6878      	ldr	r0, [r7, #4]
 80187b2:	687b      	ldr	r3, [r7, #4]
 80187b4:	685b      	ldr	r3, [r3, #4]
 80187b6:	683a      	ldr	r2, [r7, #0]
 80187b8:	4619      	mov	r1, r3
 80187ba:	f000 f88a 	bl	80188d2 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 80187be:	687b      	ldr	r3, [r7, #4]
 80187c0:	685b      	ldr	r3, [r3, #4]
 80187c2:	f103 0208 	add.w	r2, r3, #8
 80187c6:	687b      	ldr	r3, [r7, #4]
 80187c8:	605a      	str	r2, [r3, #4]
      }
 80187ca:	e008      	b.n	80187de <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backERKS2_+0x44>
	  _M_realloc_insert(end(), __x);
 80187cc:	6878      	ldr	r0, [r7, #4]
 80187ce:	f7f2 fd10 	bl	800b1f2 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 80187d2:	4603      	mov	r3, r0
 80187d4:	683a      	ldr	r2, [r7, #0]
 80187d6:	4619      	mov	r1, r3
 80187d8:	6878      	ldr	r0, [r7, #4]
 80187da:	f000 f88d 	bl	80188f8 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
      }
 80187de:	bf00      	nop
 80187e0:	3708      	adds	r7, #8
 80187e2:	46bd      	mov	sp, r7
 80187e4:	bd80      	pop	{r7, pc}

080187e6 <_ZSteqI6ModuleS0_EbRKSt10shared_ptrIT_ERKS1_IT0_E>:
    operator==(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept
 80187e6:	b590      	push	{r4, r7, lr}
 80187e8:	b083      	sub	sp, #12
 80187ea:	af00      	add	r7, sp, #0
 80187ec:	6078      	str	r0, [r7, #4]
 80187ee:	6039      	str	r1, [r7, #0]
    { return __a.get() == __b.get(); }
 80187f0:	687b      	ldr	r3, [r7, #4]
 80187f2:	4618      	mov	r0, r3
 80187f4:	f7f3 fd03 	bl	800c1fe <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 80187f8:	4604      	mov	r4, r0
 80187fa:	683b      	ldr	r3, [r7, #0]
 80187fc:	4618      	mov	r0, r3
 80187fe:	f7f3 fcfe 	bl	800c1fe <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8018802:	4603      	mov	r3, r0
 8018804:	429c      	cmp	r4, r3
 8018806:	bf0c      	ite	eq
 8018808:	2301      	moveq	r3, #1
 801880a:	2300      	movne	r3, #0
 801880c:	b2db      	uxtb	r3, r3
 801880e:	4618      	mov	r0, r3
 8018810:	370c      	adds	r7, #12
 8018812:	46bd      	mov	sp, r7
 8018814:	bd90      	pop	{r4, r7, pc}

08018816 <_ZSt9remove_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEEZN9pruThread16unregisterModuleES4_EUlRKS4_E_ET_SE_SE_T0_>:
   *  are still present, but their value is unspecified.
  */
  template<typename _ForwardIterator, typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    remove_if(_ForwardIterator __first, _ForwardIterator __last,
 8018816:	b580      	push	{r7, lr}
 8018818:	b084      	sub	sp, #16
 801881a:	af00      	add	r7, sp, #0
 801881c:	60f8      	str	r0, [r7, #12]
 801881e:	60b9      	str	r1, [r7, #8]
 8018820:	607a      	str	r2, [r7, #4]
				  _ForwardIterator>)
      __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
	    typename iterator_traits<_ForwardIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return std::__remove_if(__first, __last,
 8018822:	6878      	ldr	r0, [r7, #4]
 8018824:	f000 f8e4 	bl	80189f0 <_ZN9__gnu_cxx5__ops11__pred_iterIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EENS0_10_Iter_predIT_EESA_>
 8018828:	4603      	mov	r3, r0
 801882a:	461a      	mov	r2, r3
 801882c:	68b9      	ldr	r1, [r7, #8]
 801882e:	68f8      	ldr	r0, [r7, #12]
 8018830:	f000 f8f2 	bl	8018a18 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_>
 8018834:	4603      	mov	r3, r0
			      __gnu_cxx::__ops::__pred_iter(__pred));
    }
 8018836:	4618      	mov	r0, r3
 8018838:	3710      	adds	r7, #16
 801883a:	46bd      	mov	sp, r7
 801883c:	bd80      	pop	{r7, pc}

0801883e <_ZN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1IPS3_vEERKNS0_IT_S8_EE>:
	__normal_iterator(const __normal_iterator<_Iter, _Container>& __i)
 801883e:	b580      	push	{r7, lr}
 8018840:	b082      	sub	sp, #8
 8018842:	af00      	add	r7, sp, #0
 8018844:	6078      	str	r0, [r7, #4]
 8018846:	6039      	str	r1, [r7, #0]
        : _M_current(__i.base()) { }
 8018848:	6838      	ldr	r0, [r7, #0]
 801884a:	f7f3 f9ef 	bl	800bc2c <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 801884e:	4603      	mov	r3, r0
 8018850:	681a      	ldr	r2, [r3, #0]
 8018852:	687b      	ldr	r3, [r7, #4]
 8018854:	601a      	str	r2, [r3, #0]
 8018856:	687b      	ldr	r3, [r7, #4]
 8018858:	4618      	mov	r0, r3
 801885a:	3708      	adds	r7, #8
 801885c:	46bd      	mov	sp, r7
 801885e:	bd80      	pop	{r7, pc}

08018860 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS2_S4_EES9_>:
      erase(const_iterator __first, const_iterator __last)
 8018860:	b590      	push	{r4, r7, lr}
 8018862:	b087      	sub	sp, #28
 8018864:	af00      	add	r7, sp, #0
 8018866:	60f8      	str	r0, [r7, #12]
 8018868:	60b9      	str	r1, [r7, #8]
 801886a:	607a      	str	r2, [r7, #4]
	const auto __beg = begin();
 801886c:	68f8      	ldr	r0, [r7, #12]
 801886e:	f7f2 fcb0 	bl	800b1d2 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>
 8018872:	4603      	mov	r3, r0
 8018874:	617b      	str	r3, [r7, #20]
	const auto __cbeg = cbegin();
 8018876:	68f8      	ldr	r0, [r7, #12]
 8018878:	f000 f929 	bl	8018ace <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE6cbeginEv>
 801887c:	4603      	mov	r3, r0
 801887e:	613b      	str	r3, [r7, #16]
	return _M_erase(__beg + (__first - __cbeg), __beg + (__last - __cbeg));
 8018880:	f107 0210 	add.w	r2, r7, #16
 8018884:	f107 0308 	add.w	r3, r7, #8
 8018888:	4611      	mov	r1, r2
 801888a:	4618      	mov	r0, r3
 801888c:	f000 f92f 	bl	8018aee <_ZN9__gnu_cxxmiIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 8018890:	4602      	mov	r2, r0
 8018892:	f107 0314 	add.w	r3, r7, #20
 8018896:	4611      	mov	r1, r2
 8018898:	4618      	mov	r0, r3
 801889a:	f000 f93d 	bl	8018b18 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEplEi>
 801889e:	4604      	mov	r4, r0
 80188a0:	f107 0210 	add.w	r2, r7, #16
 80188a4:	1d3b      	adds	r3, r7, #4
 80188a6:	4611      	mov	r1, r2
 80188a8:	4618      	mov	r0, r3
 80188aa:	f000 f920 	bl	8018aee <_ZN9__gnu_cxxmiIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 80188ae:	4602      	mov	r2, r0
 80188b0:	f107 0314 	add.w	r3, r7, #20
 80188b4:	4611      	mov	r1, r2
 80188b6:	4618      	mov	r0, r3
 80188b8:	f000 f92e 	bl	8018b18 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEplEi>
 80188bc:	4603      	mov	r3, r0
 80188be:	461a      	mov	r2, r3
 80188c0:	4621      	mov	r1, r4
 80188c2:	68f8      	ldr	r0, [r7, #12]
 80188c4:	f000 f940 	bl	8018b48 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS2_S4_EES8_>
 80188c8:	4603      	mov	r3, r0
      }
 80188ca:	4618      	mov	r0, r3
 80188cc:	371c      	adds	r7, #28
 80188ce:	46bd      	mov	sp, r7
 80188d0:	bd90      	pop	{r4, r7, pc}

080188d2 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80188d2:	b580      	push	{r7, lr}
 80188d4:	b084      	sub	sp, #16
 80188d6:	af00      	add	r7, sp, #0
 80188d8:	60f8      	str	r0, [r7, #12]
 80188da:	60b9      	str	r1, [r7, #8]
 80188dc:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80188de:	6878      	ldr	r0, [r7, #4]
 80188e0:	f000 f979 	bl	8018bd6 <_ZSt7forwardIRKSt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS5_E4typeE>
 80188e4:	4603      	mov	r3, r0
 80188e6:	461a      	mov	r2, r3
 80188e8:	68b9      	ldr	r1, [r7, #8]
 80188ea:	68f8      	ldr	r0, [r7, #12]
 80188ec:	f000 f97e 	bl	8018bec <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE9constructIS2_JRKS2_EEEvPT_DpOT0_>
	}
 80188f0:	bf00      	nop
 80188f2:	3710      	adds	r7, #16
 80188f4:	46bd      	mov	sp, r7
 80188f6:	bd80      	pop	{r7, pc}

080188f8 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80188f8:	b5b0      	push	{r4, r5, r7, lr}
 80188fa:	b08c      	sub	sp, #48	@ 0x30
 80188fc:	af00      	add	r7, sp, #0
 80188fe:	60f8      	str	r0, [r7, #12]
 8018900:	60b9      	str	r1, [r7, #8]
 8018902:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8018904:	4a39      	ldr	r2, [pc, #228]	@ (80189ec <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xf4>)
 8018906:	2101      	movs	r1, #1
 8018908:	68f8      	ldr	r0, [r7, #12]
 801890a:	f7f3 ffa8 	bl	800c85e <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc>
 801890e:	62f8      	str	r0, [r7, #44]	@ 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8018910:	68fb      	ldr	r3, [r7, #12]
 8018912:	681b      	ldr	r3, [r3, #0]
 8018914:	62bb      	str	r3, [r7, #40]	@ 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8018916:	68fb      	ldr	r3, [r7, #12]
 8018918:	685b      	ldr	r3, [r3, #4]
 801891a:	627b      	str	r3, [r7, #36]	@ 0x24
      const size_type __elems_before = __position - begin();
 801891c:	68f8      	ldr	r0, [r7, #12]
 801891e:	f7f2 fc58 	bl	800b1d2 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>
 8018922:	4603      	mov	r3, r0
 8018924:	617b      	str	r3, [r7, #20]
 8018926:	f107 0214 	add.w	r2, r7, #20
 801892a:	f107 0308 	add.w	r3, r7, #8
 801892e:	4611      	mov	r1, r2
 8018930:	4618      	mov	r0, r3
 8018932:	f7f3 ffdb 	bl	800c8ec <_ZN9__gnu_cxxmiIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 8018936:	4603      	mov	r3, r0
 8018938:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 801893a:	68fb      	ldr	r3, [r7, #12]
 801893c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801893e:	4618      	mov	r0, r3
 8018940:	f7f3 ffe9 	bl	800c916 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE11_M_allocateEj>
 8018944:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8018946:	69fb      	ldr	r3, [r7, #28]
 8018948:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 801894a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 801894c:	6a3b      	ldr	r3, [r7, #32]
 801894e:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 8018950:	69fa      	ldr	r2, [r7, #28]
 8018952:	18d5      	adds	r5, r2, r3
 8018954:	6878      	ldr	r0, [r7, #4]
 8018956:	f000 f93e 	bl	8018bd6 <_ZSt7forwardIRKSt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS5_E4typeE>
 801895a:	4603      	mov	r3, r0
 801895c:	461a      	mov	r2, r3
 801895e:	4629      	mov	r1, r5
 8018960:	4620      	mov	r0, r4
 8018962:	f7ff ffb6 	bl	80188d2 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>
	  __new_finish = pointer();
 8018966:	2300      	movs	r3, #0
 8018968:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 801896a:	f107 0308 	add.w	r3, r7, #8
 801896e:	4618      	mov	r0, r3
 8018970:	f7f3 f95c 	bl	800bc2c <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 8018974:	4603      	mov	r3, r0
 8018976:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8018978:	68fb      	ldr	r3, [r7, #12]
 801897a:	4618      	mov	r0, r3
 801897c:	f7f2 fec8 	bl	800b710 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 8018980:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8018982:	69fa      	ldr	r2, [r7, #28]
 8018984:	4621      	mov	r1, r4
 8018986:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018988:	f7f3 ffd9 	bl	800c93e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
 801898c:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 801898e:	69bb      	ldr	r3, [r7, #24]
 8018990:	3308      	adds	r3, #8
 8018992:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8018994:	f107 0308 	add.w	r3, r7, #8
 8018998:	4618      	mov	r0, r3
 801899a:	f7f3 f947 	bl	800bc2c <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 801899e:	4603      	mov	r3, r0
 80189a0:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80189a2:	68fb      	ldr	r3, [r7, #12]
 80189a4:	4618      	mov	r0, r3
 80189a6:	f7f2 feb3 	bl	800b710 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 80189aa:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80189ac:	69ba      	ldr	r2, [r7, #24]
 80189ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80189b0:	4620      	mov	r0, r4
 80189b2:	f7f3 ffc4 	bl	800c93e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
 80189b6:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 80189b8:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 80189ba:	68fb      	ldr	r3, [r7, #12]
 80189bc:	689a      	ldr	r2, [r3, #8]
 80189be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80189c0:	1ad3      	subs	r3, r2, r3
 80189c2:	10db      	asrs	r3, r3, #3
      _M_deallocate(__old_start,
 80189c4:	461a      	mov	r2, r3
 80189c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80189c8:	f7f2 fe8f 	bl	800b6ea <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE13_M_deallocateEPS2_j>
      this->_M_impl._M_start = __new_start;
 80189cc:	68fb      	ldr	r3, [r7, #12]
 80189ce:	69fa      	ldr	r2, [r7, #28]
 80189d0:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80189d2:	68fb      	ldr	r3, [r7, #12]
 80189d4:	69ba      	ldr	r2, [r7, #24]
 80189d6:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80189d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80189da:	00db      	lsls	r3, r3, #3
 80189dc:	69fa      	ldr	r2, [r7, #28]
 80189de:	441a      	add	r2, r3
 80189e0:	68fb      	ldr	r3, [r7, #12]
 80189e2:	609a      	str	r2, [r3, #8]
    }
 80189e4:	bf00      	nop
 80189e6:	3730      	adds	r7, #48	@ 0x30
 80189e8:	46bd      	mov	sp, r7
 80189ea:	bdb0      	pop	{r4, r5, r7, pc}
 80189ec:	08028700 	.word	0x08028700

080189f0 <_ZN9__gnu_cxx5__ops11__pred_iterIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EENS0_10_Iter_predIT_EESA_>:
    };

  template<typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline _Iter_pred<_Predicate>
    __pred_iter(_Predicate __pred)
 80189f0:	b580      	push	{r7, lr}
 80189f2:	b084      	sub	sp, #16
 80189f4:	af00      	add	r7, sp, #0
 80189f6:	6078      	str	r0, [r7, #4]
    { return _Iter_pred<_Predicate>(_GLIBCXX_MOVE(__pred)); }
 80189f8:	1d3b      	adds	r3, r7, #4
 80189fa:	4618      	mov	r0, r3
 80189fc:	f000 f90e 	bl	8018c1c <_ZSt4moveIRZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS3_E_EONSt16remove_referenceIT_E4typeEOS9_>
 8018a00:	4602      	mov	r2, r0
 8018a02:	f107 030c 	add.w	r3, r7, #12
 8018a06:	6811      	ldr	r1, [r2, #0]
 8018a08:	4618      	mov	r0, r3
 8018a0a:	f000 f912 	bl	8018c32 <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EC1ES8_>
 8018a0e:	68fb      	ldr	r3, [r7, #12]
 8018a10:	4618      	mov	r0, r3
 8018a12:	3710      	adds	r7, #16
 8018a14:	46bd      	mov	sp, r7
 8018a16:	bd80      	pop	{r7, pc}

08018a18 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_>:
    }

  template<typename _ForwardIterator, typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    _ForwardIterator
    __remove_if(_ForwardIterator __first, _ForwardIterator __last,
 8018a18:	b590      	push	{r4, r7, lr}
 8018a1a:	b087      	sub	sp, #28
 8018a1c:	af00      	add	r7, sp, #0
 8018a1e:	60f8      	str	r0, [r7, #12]
 8018a20:	60b9      	str	r1, [r7, #8]
 8018a22:	607a      	str	r2, [r7, #4]
		_Predicate __pred)
    {
      __first = std::__find_if(__first, __last, __pred);
 8018a24:	687a      	ldr	r2, [r7, #4]
 8018a26:	68b9      	ldr	r1, [r7, #8]
 8018a28:	68f8      	ldr	r0, [r7, #12]
 8018a2a:	f000 f914 	bl	8018c56 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_>
 8018a2e:	4603      	mov	r3, r0
 8018a30:	60fb      	str	r3, [r7, #12]
      if (__first == __last)
 8018a32:	f107 0208 	add.w	r2, r7, #8
 8018a36:	f107 030c 	add.w	r3, r7, #12
 8018a3a:	4611      	mov	r1, r2
 8018a3c:	4618      	mov	r0, r3
 8018a3e:	f000 f920 	bl	8018c82 <_ZN9__gnu_cxxeqIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 8018a42:	4603      	mov	r3, r0
 8018a44:	2b00      	cmp	r3, #0
 8018a46:	d001      	beq.n	8018a4c <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_+0x34>
	return __first;
 8018a48:	68fb      	ldr	r3, [r7, #12]
 8018a4a:	e03c      	b.n	8018ac6 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_+0xae>
      _ForwardIterator __result = __first;
 8018a4c:	68fb      	ldr	r3, [r7, #12]
 8018a4e:	617b      	str	r3, [r7, #20]
      ++__first;
 8018a50:	f107 030c 	add.w	r3, r7, #12
 8018a54:	4618      	mov	r0, r3
 8018a56:	f7f2 fbf5 	bl	800b244 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
      for (; __first != __last; ++__first)
 8018a5a:	e028      	b.n	8018aae <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_+0x96>
	if (!__pred(__first))
 8018a5c:	1d3b      	adds	r3, r7, #4
 8018a5e:	68f9      	ldr	r1, [r7, #12]
 8018a60:	4618      	mov	r0, r3
 8018a62:	f000 f926 	bl	8018cb2 <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EclINS_17__normal_iteratorIPS5_St6vectorIS5_SaIS5_EEEEEEbT_>
 8018a66:	4603      	mov	r3, r0
 8018a68:	f083 0301 	eor.w	r3, r3, #1
 8018a6c:	b2db      	uxtb	r3, r3
 8018a6e:	2b00      	cmp	r3, #0
 8018a70:	d018      	beq.n	8018aa4 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_+0x8c>
	  {
	    *__result = _GLIBCXX_MOVE(*__first);
 8018a72:	f107 030c 	add.w	r3, r7, #12
 8018a76:	4618      	mov	r0, r3
 8018a78:	f7f2 fbf5 	bl	800b266 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>
 8018a7c:	4603      	mov	r3, r0
 8018a7e:	4618      	mov	r0, r3
 8018a80:	f7f2 fc76 	bl	800b370 <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>
 8018a84:	4604      	mov	r4, r0
 8018a86:	f107 0314 	add.w	r3, r7, #20
 8018a8a:	4618      	mov	r0, r3
 8018a8c:	f7f2 fbeb 	bl	800b266 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>
 8018a90:	4603      	mov	r3, r0
 8018a92:	4621      	mov	r1, r4
 8018a94:	4618      	mov	r0, r3
 8018a96:	f000 f920 	bl	8018cda <_ZNSt10shared_ptrI6ModuleEaSEOS1_>
	    ++__result;
 8018a9a:	f107 0314 	add.w	r3, r7, #20
 8018a9e:	4618      	mov	r0, r3
 8018aa0:	f7f2 fbd0 	bl	800b244 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
      for (; __first != __last; ++__first)
 8018aa4:	f107 030c 	add.w	r3, r7, #12
 8018aa8:	4618      	mov	r0, r3
 8018aaa:	f7f2 fbcb 	bl	800b244 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
 8018aae:	f107 0208 	add.w	r2, r7, #8
 8018ab2:	f107 030c 	add.w	r3, r7, #12
 8018ab6:	4611      	mov	r1, r2
 8018ab8:	4618      	mov	r0, r3
 8018aba:	f7f2 fbab 	bl	800b214 <_ZN9__gnu_cxxneIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 8018abe:	4603      	mov	r3, r0
 8018ac0:	2b00      	cmp	r3, #0
 8018ac2:	d1cb      	bne.n	8018a5c <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_+0x44>
	  }
      return __result;
 8018ac4:	697b      	ldr	r3, [r7, #20]
    }
 8018ac6:	4618      	mov	r0, r3
 8018ac8:	371c      	adds	r7, #28
 8018aca:	46bd      	mov	sp, r7
 8018acc:	bd90      	pop	{r4, r7, pc}

08018ace <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE6cbeginEv>:
      cbegin() const noexcept
 8018ace:	b580      	push	{r7, lr}
 8018ad0:	b084      	sub	sp, #16
 8018ad2:	af00      	add	r7, sp, #0
 8018ad4:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8018ad6:	687a      	ldr	r2, [r7, #4]
 8018ad8:	f107 030c 	add.w	r3, r7, #12
 8018adc:	4611      	mov	r1, r2
 8018ade:	4618      	mov	r0, r3
 8018ae0:	f000 f90e 	bl	8018d00 <_ZN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1ERKS5_>
 8018ae4:	68fb      	ldr	r3, [r7, #12]
 8018ae6:	4618      	mov	r0, r3
 8018ae8:	3710      	adds	r7, #16
 8018aea:	46bd      	mov	sp, r7
 8018aec:	bd80      	pop	{r7, pc}

08018aee <_ZN9__gnu_cxxmiIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8018aee:	b590      	push	{r4, r7, lr}
 8018af0:	b083      	sub	sp, #12
 8018af2:	af00      	add	r7, sp, #0
 8018af4:	6078      	str	r0, [r7, #4]
 8018af6:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8018af8:	6878      	ldr	r0, [r7, #4]
 8018afa:	f000 f911 	bl	8018d20 <_ZNK9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 8018afe:	4603      	mov	r3, r0
 8018b00:	681c      	ldr	r4, [r3, #0]
 8018b02:	6838      	ldr	r0, [r7, #0]
 8018b04:	f000 f90c 	bl	8018d20 <_ZNK9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 8018b08:	4603      	mov	r3, r0
 8018b0a:	681b      	ldr	r3, [r3, #0]
 8018b0c:	1ae3      	subs	r3, r4, r3
 8018b0e:	10db      	asrs	r3, r3, #3
 8018b10:	4618      	mov	r0, r3
 8018b12:	370c      	adds	r7, #12
 8018b14:	46bd      	mov	sp, r7
 8018b16:	bd90      	pop	{r4, r7, pc}

08018b18 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 8018b18:	b580      	push	{r7, lr}
 8018b1a:	b084      	sub	sp, #16
 8018b1c:	af00      	add	r7, sp, #0
 8018b1e:	6078      	str	r0, [r7, #4]
 8018b20:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 8018b22:	687b      	ldr	r3, [r7, #4]
 8018b24:	681a      	ldr	r2, [r3, #0]
 8018b26:	683b      	ldr	r3, [r7, #0]
 8018b28:	00db      	lsls	r3, r3, #3
 8018b2a:	4413      	add	r3, r2
 8018b2c:	60fb      	str	r3, [r7, #12]
 8018b2e:	f107 020c 	add.w	r2, r7, #12
 8018b32:	f107 0308 	add.w	r3, r7, #8
 8018b36:	4611      	mov	r1, r2
 8018b38:	4618      	mov	r0, r3
 8018b3a:	f7f3 f867 	bl	800bc0c <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 8018b3e:	68bb      	ldr	r3, [r7, #8]
 8018b40:	4618      	mov	r0, r3
 8018b42:	3710      	adds	r7, #16
 8018b44:	46bd      	mov	sp, r7
 8018b46:	bd80      	pop	{r7, pc}

08018b48 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS2_S4_EES8_>:
    vector<_Tp, _Alloc>::
 8018b48:	b590      	push	{r4, r7, lr}
 8018b4a:	b087      	sub	sp, #28
 8018b4c:	af00      	add	r7, sp, #0
 8018b4e:	60f8      	str	r0, [r7, #12]
 8018b50:	60b9      	str	r1, [r7, #8]
 8018b52:	607a      	str	r2, [r7, #4]
      if (__first != __last)
 8018b54:	1d3a      	adds	r2, r7, #4
 8018b56:	f107 0308 	add.w	r3, r7, #8
 8018b5a:	4611      	mov	r1, r2
 8018b5c:	4618      	mov	r0, r3
 8018b5e:	f7f2 fb59 	bl	800b214 <_ZN9__gnu_cxxneIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 8018b62:	4603      	mov	r3, r0
 8018b64:	2b00      	cmp	r3, #0
 8018b66:	d031      	beq.n	8018bcc <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS2_S4_EES8_+0x84>
	  if (__last != end())
 8018b68:	68f8      	ldr	r0, [r7, #12]
 8018b6a:	f7f2 fb42 	bl	800b1f2 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 8018b6e:	4603      	mov	r3, r0
 8018b70:	613b      	str	r3, [r7, #16]
 8018b72:	f107 0210 	add.w	r2, r7, #16
 8018b76:	1d3b      	adds	r3, r7, #4
 8018b78:	4611      	mov	r1, r2
 8018b7a:	4618      	mov	r0, r3
 8018b7c:	f7f2 fb4a 	bl	800b214 <_ZN9__gnu_cxxneIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 8018b80:	4603      	mov	r3, r0
 8018b82:	2b00      	cmp	r3, #0
 8018b84:	d008      	beq.n	8018b98 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS2_S4_EES8_+0x50>
	    _GLIBCXX_MOVE3(__last, end(), __first);
 8018b86:	68f8      	ldr	r0, [r7, #12]
 8018b88:	f7f2 fb33 	bl	800b1f2 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 8018b8c:	4603      	mov	r3, r0
 8018b8e:	68ba      	ldr	r2, [r7, #8]
 8018b90:	4619      	mov	r1, r3
 8018b92:	6878      	ldr	r0, [r7, #4]
 8018b94:	f000 f8cf 	bl	8018d36 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEES9_ET0_T_SB_SA_>
	  _M_erase_at_end(__first.base() + (end() - __last));
 8018b98:	f107 0308 	add.w	r3, r7, #8
 8018b9c:	4618      	mov	r0, r3
 8018b9e:	f7f3 f845 	bl	800bc2c <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 8018ba2:	4603      	mov	r3, r0
 8018ba4:	681c      	ldr	r4, [r3, #0]
 8018ba6:	68f8      	ldr	r0, [r7, #12]
 8018ba8:	f7f2 fb23 	bl	800b1f2 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 8018bac:	4603      	mov	r3, r0
 8018bae:	617b      	str	r3, [r7, #20]
 8018bb0:	1d3a      	adds	r2, r7, #4
 8018bb2:	f107 0314 	add.w	r3, r7, #20
 8018bb6:	4611      	mov	r1, r2
 8018bb8:	4618      	mov	r0, r3
 8018bba:	f7f3 fe97 	bl	800c8ec <_ZN9__gnu_cxxmiIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 8018bbe:	4603      	mov	r3, r0
 8018bc0:	00db      	lsls	r3, r3, #3
 8018bc2:	4423      	add	r3, r4
 8018bc4:	4619      	mov	r1, r3
 8018bc6:	68f8      	ldr	r0, [r7, #12]
 8018bc8:	f000 f8cd 	bl	8018d66 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE15_M_erase_at_endEPS2_>
      return __first;
 8018bcc:	68bb      	ldr	r3, [r7, #8]
    }
 8018bce:	4618      	mov	r0, r3
 8018bd0:	371c      	adds	r7, #28
 8018bd2:	46bd      	mov	sp, r7
 8018bd4:	bd90      	pop	{r4, r7, pc}

08018bd6 <_ZSt7forwardIRKSt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8018bd6:	b480      	push	{r7}
 8018bd8:	b083      	sub	sp, #12
 8018bda:	af00      	add	r7, sp, #0
 8018bdc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8018bde:	687b      	ldr	r3, [r7, #4]
 8018be0:	4618      	mov	r0, r3
 8018be2:	370c      	adds	r7, #12
 8018be4:	46bd      	mov	sp, r7
 8018be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bea:	4770      	bx	lr

08018bec <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8018bec:	b590      	push	{r4, r7, lr}
 8018bee:	b085      	sub	sp, #20
 8018bf0:	af00      	add	r7, sp, #0
 8018bf2:	60f8      	str	r0, [r7, #12]
 8018bf4:	60b9      	str	r1, [r7, #8]
 8018bf6:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8018bf8:	68bb      	ldr	r3, [r7, #8]
 8018bfa:	4619      	mov	r1, r3
 8018bfc:	2008      	movs	r0, #8
 8018bfe:	f7f0 fd7f 	bl	8009700 <_ZnwjPv>
 8018c02:	4604      	mov	r4, r0
 8018c04:	6878      	ldr	r0, [r7, #4]
 8018c06:	f7ff ffe6 	bl	8018bd6 <_ZSt7forwardIRKSt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS5_E4typeE>
 8018c0a:	4603      	mov	r3, r0
 8018c0c:	4619      	mov	r1, r3
 8018c0e:	4620      	mov	r0, r4
 8018c10:	f7f1 fc86 	bl	800a520 <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>
 8018c14:	bf00      	nop
 8018c16:	3714      	adds	r7, #20
 8018c18:	46bd      	mov	sp, r7
 8018c1a:	bd90      	pop	{r4, r7, pc}

08018c1c <_ZSt4moveIRZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS3_E_EONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8018c1c:	b480      	push	{r7}
 8018c1e:	b083      	sub	sp, #12
 8018c20:	af00      	add	r7, sp, #0
 8018c22:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8018c24:	687b      	ldr	r3, [r7, #4]
 8018c26:	4618      	mov	r0, r3
 8018c28:	370c      	adds	r7, #12
 8018c2a:	46bd      	mov	sp, r7
 8018c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c30:	4770      	bx	lr

08018c32 <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EC1ES8_>:
      _Iter_pred(_Predicate __pred)
 8018c32:	b580      	push	{r7, lr}
 8018c34:	b082      	sub	sp, #8
 8018c36:	af00      	add	r7, sp, #0
 8018c38:	6078      	str	r0, [r7, #4]
 8018c3a:	6039      	str	r1, [r7, #0]
	: _M_pred(_GLIBCXX_MOVE(__pred))
 8018c3c:	463b      	mov	r3, r7
 8018c3e:	4618      	mov	r0, r3
 8018c40:	f7ff ffec 	bl	8018c1c <_ZSt4moveIRZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS3_E_EONSt16remove_referenceIT_E4typeEOS9_>
 8018c44:	4602      	mov	r2, r0
 8018c46:	687b      	ldr	r3, [r7, #4]
 8018c48:	6812      	ldr	r2, [r2, #0]
 8018c4a:	601a      	str	r2, [r3, #0]
      { }
 8018c4c:	687b      	ldr	r3, [r7, #4]
 8018c4e:	4618      	mov	r0, r3
 8018c50:	3708      	adds	r7, #8
 8018c52:	46bd      	mov	sp, r7
 8018c54:	bd80      	pop	{r7, pc}

08018c56 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_>:
    __find_if(_Iterator __first, _Iterator __last, _Predicate __pred)
 8018c56:	b590      	push	{r4, r7, lr}
 8018c58:	b085      	sub	sp, #20
 8018c5a:	af00      	add	r7, sp, #0
 8018c5c:	60f8      	str	r0, [r7, #12]
 8018c5e:	60b9      	str	r1, [r7, #8]
 8018c60:	607a      	str	r2, [r7, #4]
		       std::__iterator_category(__first));
 8018c62:	f107 030c 	add.w	r3, r7, #12
 8018c66:	4618      	mov	r0, r3
 8018c68:	f000 f89e 	bl	8018da8 <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEEENSt15iterator_traitsIT_E17iterator_categoryERKSB_>
      return __find_if(__first, __last, __pred,
 8018c6c:	4623      	mov	r3, r4
 8018c6e:	687a      	ldr	r2, [r7, #4]
 8018c70:	68b9      	ldr	r1, [r7, #8]
 8018c72:	68f8      	ldr	r0, [r7, #12]
 8018c74:	f000 f8a2 	bl	8018dbc <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag>
 8018c78:	4603      	mov	r3, r0
    }
 8018c7a:	4618      	mov	r0, r3
 8018c7c:	3714      	adds	r7, #20
 8018c7e:	46bd      	mov	sp, r7
 8018c80:	bd90      	pop	{r4, r7, pc}

08018c82 <_ZN9__gnu_cxxeqIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8018c82:	b590      	push	{r4, r7, lr}
 8018c84:	b083      	sub	sp, #12
 8018c86:	af00      	add	r7, sp, #0
 8018c88:	6078      	str	r0, [r7, #4]
 8018c8a:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8018c8c:	6878      	ldr	r0, [r7, #4]
 8018c8e:	f7f2 ffcd 	bl	800bc2c <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 8018c92:	4603      	mov	r3, r0
 8018c94:	681c      	ldr	r4, [r3, #0]
 8018c96:	6838      	ldr	r0, [r7, #0]
 8018c98:	f7f2 ffc8 	bl	800bc2c <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 8018c9c:	4603      	mov	r3, r0
 8018c9e:	681b      	ldr	r3, [r3, #0]
 8018ca0:	429c      	cmp	r4, r3
 8018ca2:	bf0c      	ite	eq
 8018ca4:	2301      	moveq	r3, #1
 8018ca6:	2300      	movne	r3, #0
 8018ca8:	b2db      	uxtb	r3, r3
 8018caa:	4618      	mov	r0, r3
 8018cac:	370c      	adds	r7, #12
 8018cae:	46bd      	mov	sp, r7
 8018cb0:	bd90      	pop	{r4, r7, pc}

08018cb2 <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EclINS_17__normal_iteratorIPS5_St6vectorIS5_SaIS5_EEEEEEbT_>:
	operator()(_Iterator __it)
 8018cb2:	b590      	push	{r4, r7, lr}
 8018cb4:	b083      	sub	sp, #12
 8018cb6:	af00      	add	r7, sp, #0
 8018cb8:	6078      	str	r0, [r7, #4]
 8018cba:	6039      	str	r1, [r7, #0]
	{ return bool(_M_pred(*__it)); }
 8018cbc:	687c      	ldr	r4, [r7, #4]
 8018cbe:	463b      	mov	r3, r7
 8018cc0:	4618      	mov	r0, r3
 8018cc2:	f7f2 fad0 	bl	800b266 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>
 8018cc6:	4603      	mov	r3, r0
 8018cc8:	4619      	mov	r1, r3
 8018cca:	4620      	mov	r0, r4
 8018ccc:	f7ff fc96 	bl	80185fc <_ZZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEENKUlRKS2_E_clES4_>
 8018cd0:	4603      	mov	r3, r0
 8018cd2:	4618      	mov	r0, r3
 8018cd4:	370c      	adds	r7, #12
 8018cd6:	46bd      	mov	sp, r7
 8018cd8:	bd90      	pop	{r4, r7, pc}

08018cda <_ZNSt10shared_ptrI6ModuleEaSEOS1_>:
      operator=(shared_ptr&& __r) noexcept
 8018cda:	b590      	push	{r4, r7, lr}
 8018cdc:	b083      	sub	sp, #12
 8018cde:	af00      	add	r7, sp, #0
 8018ce0:	6078      	str	r0, [r7, #4]
 8018ce2:	6039      	str	r1, [r7, #0]
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
 8018ce4:	687c      	ldr	r4, [r7, #4]
 8018ce6:	6838      	ldr	r0, [r7, #0]
 8018ce8:	f7f2 fb42 	bl	800b370 <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>
 8018cec:	4603      	mov	r3, r0
 8018cee:	4619      	mov	r1, r3
 8018cf0:	4620      	mov	r0, r4
 8018cf2:	f000 f8fc 	bl	8018eee <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>
	return *this;
 8018cf6:	687b      	ldr	r3, [r7, #4]
      }
 8018cf8:	4618      	mov	r0, r3
 8018cfa:	370c      	adds	r7, #12
 8018cfc:	46bd      	mov	sp, r7
 8018cfe:	bd90      	pop	{r4, r7, pc}

08018d00 <_ZN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1ERKS5_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8018d00:	b480      	push	{r7}
 8018d02:	b083      	sub	sp, #12
 8018d04:	af00      	add	r7, sp, #0
 8018d06:	6078      	str	r0, [r7, #4]
 8018d08:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8018d0a:	683b      	ldr	r3, [r7, #0]
 8018d0c:	681a      	ldr	r2, [r3, #0]
 8018d0e:	687b      	ldr	r3, [r7, #4]
 8018d10:	601a      	str	r2, [r3, #0]
 8018d12:	687b      	ldr	r3, [r7, #4]
 8018d14:	4618      	mov	r0, r3
 8018d16:	370c      	adds	r7, #12
 8018d18:	46bd      	mov	sp, r7
 8018d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d1e:	4770      	bx	lr

08018d20 <_ZNK9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8018d20:	b480      	push	{r7}
 8018d22:	b083      	sub	sp, #12
 8018d24:	af00      	add	r7, sp, #0
 8018d26:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8018d28:	687b      	ldr	r3, [r7, #4]
 8018d2a:	4618      	mov	r0, r3
 8018d2c:	370c      	adds	r7, #12
 8018d2e:	46bd      	mov	sp, r7
 8018d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d34:	4770      	bx	lr

08018d36 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEES9_ET0_T_SB_SA_>:
    move(_II __first, _II __last, _OI __result)
 8018d36:	b590      	push	{r4, r7, lr}
 8018d38:	b085      	sub	sp, #20
 8018d3a:	af00      	add	r7, sp, #0
 8018d3c:	60f8      	str	r0, [r7, #12]
 8018d3e:	60b9      	str	r1, [r7, #8]
 8018d40:	607a      	str	r2, [r7, #4]
      return std::__copy_move_a<true>(std::__miter_base(__first),
 8018d42:	68f8      	ldr	r0, [r7, #12]
 8018d44:	f000 f8f2 	bl	8018f2c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEEET_SA_>
 8018d48:	4604      	mov	r4, r0
 8018d4a:	68b8      	ldr	r0, [r7, #8]
 8018d4c:	f000 f8ee 	bl	8018f2c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEEET_SA_>
 8018d50:	4603      	mov	r3, r0
 8018d52:	687a      	ldr	r2, [r7, #4]
 8018d54:	4619      	mov	r1, r3
 8018d56:	4620      	mov	r0, r4
 8018d58:	f000 f8f3 	bl	8018f42 <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEES9_ET1_T0_SB_SA_>
 8018d5c:	4603      	mov	r3, r0
    }
 8018d5e:	4618      	mov	r0, r3
 8018d60:	3714      	adds	r7, #20
 8018d62:	46bd      	mov	sp, r7
 8018d64:	bd90      	pop	{r4, r7, pc}

08018d66 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE15_M_erase_at_endEPS2_>:

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      _GLIBCXX20_CONSTEXPR
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8018d66:	b590      	push	{r4, r7, lr}
 8018d68:	b085      	sub	sp, #20
 8018d6a:	af00      	add	r7, sp, #0
 8018d6c:	6078      	str	r0, [r7, #4]
 8018d6e:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8018d70:	687b      	ldr	r3, [r7, #4]
 8018d72:	685a      	ldr	r2, [r3, #4]
 8018d74:	683b      	ldr	r3, [r7, #0]
 8018d76:	1ad3      	subs	r3, r2, r3
 8018d78:	10db      	asrs	r3, r3, #3
 8018d7a:	60fb      	str	r3, [r7, #12]
 8018d7c:	68fb      	ldr	r3, [r7, #12]
 8018d7e:	2b00      	cmp	r3, #0
 8018d80:	d00e      	beq.n	8018da0 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE15_M_erase_at_endEPS2_+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8018d82:	687b      	ldr	r3, [r7, #4]
 8018d84:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8018d86:	687b      	ldr	r3, [r7, #4]
 8018d88:	4618      	mov	r0, r3
 8018d8a:	f7f2 fcc1 	bl	800b710 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 8018d8e:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8018d90:	461a      	mov	r2, r3
 8018d92:	4621      	mov	r1, r4
 8018d94:	6838      	ldr	r0, [r7, #0]
 8018d96:	f7f2 fcc6 	bl	800b726 <_ZSt8_DestroyIPSt10shared_ptrI6ModuleES2_EvT_S4_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8018d9a:	687b      	ldr	r3, [r7, #4]
 8018d9c:	683a      	ldr	r2, [r7, #0]
 8018d9e:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 8018da0:	bf00      	nop
 8018da2:	3714      	adds	r7, #20
 8018da4:	46bd      	mov	sp, r7
 8018da6:	bd90      	pop	{r4, r7, pc}

08018da8 <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEEENSt15iterator_traitsIT_E17iterator_categoryERKSB_>:
    __iterator_category(const _Iter&)
 8018da8:	b480      	push	{r7}
 8018daa:	b083      	sub	sp, #12
 8018dac:	af00      	add	r7, sp, #0
 8018dae:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8018db0:	4618      	mov	r0, r3
 8018db2:	370c      	adds	r7, #12
 8018db4:	46bd      	mov	sp, r7
 8018db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dba:	4770      	bx	lr

08018dbc <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag>:
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8018dbc:	b580      	push	{r7, lr}
 8018dbe:	b086      	sub	sp, #24
 8018dc0:	af00      	add	r7, sp, #0
 8018dc2:	60f8      	str	r0, [r7, #12]
 8018dc4:	60b9      	str	r1, [r7, #8]
 8018dc6:	607a      	str	r2, [r7, #4]
 8018dc8:	703b      	strb	r3, [r7, #0]
	__trip_count = (__last - __first) >> 2;
 8018dca:	f107 020c 	add.w	r2, r7, #12
 8018dce:	f107 0308 	add.w	r3, r7, #8
 8018dd2:	4611      	mov	r1, r2
 8018dd4:	4618      	mov	r0, r3
 8018dd6:	f7f3 fd89 	bl	800c8ec <_ZN9__gnu_cxxmiIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 8018dda:	4603      	mov	r3, r0
 8018ddc:	109b      	asrs	r3, r3, #2
 8018dde:	617b      	str	r3, [r7, #20]
      for (; __trip_count > 0; --__trip_count)
 8018de0:	e03e      	b.n	8018e60 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0xa4>
	  if (__pred(__first))
 8018de2:	1d3b      	adds	r3, r7, #4
 8018de4:	68f9      	ldr	r1, [r7, #12]
 8018de6:	4618      	mov	r0, r3
 8018de8:	f7ff ff63 	bl	8018cb2 <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EclINS_17__normal_iteratorIPS5_St6vectorIS5_SaIS5_EEEEEEbT_>
 8018dec:	4603      	mov	r3, r0
 8018dee:	2b00      	cmp	r3, #0
 8018df0:	d001      	beq.n	8018df6 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x3a>
	    return __first;
 8018df2:	68fb      	ldr	r3, [r7, #12]
 8018df4:	e077      	b.n	8018ee6 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 8018df6:	f107 030c 	add.w	r3, r7, #12
 8018dfa:	4618      	mov	r0, r3
 8018dfc:	f7f2 fa22 	bl	800b244 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
	  if (__pred(__first))
 8018e00:	1d3b      	adds	r3, r7, #4
 8018e02:	68f9      	ldr	r1, [r7, #12]
 8018e04:	4618      	mov	r0, r3
 8018e06:	f7ff ff54 	bl	8018cb2 <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EclINS_17__normal_iteratorIPS5_St6vectorIS5_SaIS5_EEEEEEbT_>
 8018e0a:	4603      	mov	r3, r0
 8018e0c:	2b00      	cmp	r3, #0
 8018e0e:	d001      	beq.n	8018e14 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x58>
	    return __first;
 8018e10:	68fb      	ldr	r3, [r7, #12]
 8018e12:	e068      	b.n	8018ee6 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 8018e14:	f107 030c 	add.w	r3, r7, #12
 8018e18:	4618      	mov	r0, r3
 8018e1a:	f7f2 fa13 	bl	800b244 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
	  if (__pred(__first))
 8018e1e:	1d3b      	adds	r3, r7, #4
 8018e20:	68f9      	ldr	r1, [r7, #12]
 8018e22:	4618      	mov	r0, r3
 8018e24:	f7ff ff45 	bl	8018cb2 <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EclINS_17__normal_iteratorIPS5_St6vectorIS5_SaIS5_EEEEEEbT_>
 8018e28:	4603      	mov	r3, r0
 8018e2a:	2b00      	cmp	r3, #0
 8018e2c:	d001      	beq.n	8018e32 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x76>
	    return __first;
 8018e2e:	68fb      	ldr	r3, [r7, #12]
 8018e30:	e059      	b.n	8018ee6 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 8018e32:	f107 030c 	add.w	r3, r7, #12
 8018e36:	4618      	mov	r0, r3
 8018e38:	f7f2 fa04 	bl	800b244 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
	  if (__pred(__first))
 8018e3c:	1d3b      	adds	r3, r7, #4
 8018e3e:	68f9      	ldr	r1, [r7, #12]
 8018e40:	4618      	mov	r0, r3
 8018e42:	f7ff ff36 	bl	8018cb2 <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EclINS_17__normal_iteratorIPS5_St6vectorIS5_SaIS5_EEEEEEbT_>
 8018e46:	4603      	mov	r3, r0
 8018e48:	2b00      	cmp	r3, #0
 8018e4a:	d001      	beq.n	8018e50 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x94>
	    return __first;
 8018e4c:	68fb      	ldr	r3, [r7, #12]
 8018e4e:	e04a      	b.n	8018ee6 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 8018e50:	f107 030c 	add.w	r3, r7, #12
 8018e54:	4618      	mov	r0, r3
 8018e56:	f7f2 f9f5 	bl	800b244 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
      for (; __trip_count > 0; --__trip_count)
 8018e5a:	697b      	ldr	r3, [r7, #20]
 8018e5c:	3b01      	subs	r3, #1
 8018e5e:	617b      	str	r3, [r7, #20]
 8018e60:	697b      	ldr	r3, [r7, #20]
 8018e62:	2b00      	cmp	r3, #0
 8018e64:	dcbd      	bgt.n	8018de2 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x26>
      switch (__last - __first)
 8018e66:	f107 020c 	add.w	r2, r7, #12
 8018e6a:	f107 0308 	add.w	r3, r7, #8
 8018e6e:	4611      	mov	r1, r2
 8018e70:	4618      	mov	r0, r3
 8018e72:	f7f3 fd3b 	bl	800c8ec <_ZN9__gnu_cxxmiIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 8018e76:	4603      	mov	r3, r0
 8018e78:	2b03      	cmp	r3, #3
 8018e7a:	d006      	beq.n	8018e8a <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0xce>
 8018e7c:	2b03      	cmp	r3, #3
 8018e7e:	dc31      	bgt.n	8018ee4 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x128>
 8018e80:	2b01      	cmp	r3, #1
 8018e82:	d020      	beq.n	8018ec6 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x10a>
 8018e84:	2b02      	cmp	r3, #2
 8018e86:	d00f      	beq.n	8018ea8 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0xec>
 8018e88:	e02c      	b.n	8018ee4 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x128>
	  if (__pred(__first))
 8018e8a:	1d3b      	adds	r3, r7, #4
 8018e8c:	68f9      	ldr	r1, [r7, #12]
 8018e8e:	4618      	mov	r0, r3
 8018e90:	f7ff ff0f 	bl	8018cb2 <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EclINS_17__normal_iteratorIPS5_St6vectorIS5_SaIS5_EEEEEEbT_>
 8018e94:	4603      	mov	r3, r0
 8018e96:	2b00      	cmp	r3, #0
 8018e98:	d001      	beq.n	8018e9e <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0xe2>
	    return __first;
 8018e9a:	68fb      	ldr	r3, [r7, #12]
 8018e9c:	e023      	b.n	8018ee6 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 8018e9e:	f107 030c 	add.w	r3, r7, #12
 8018ea2:	4618      	mov	r0, r3
 8018ea4:	f7f2 f9ce 	bl	800b244 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
	  if (__pred(__first))
 8018ea8:	1d3b      	adds	r3, r7, #4
 8018eaa:	68f9      	ldr	r1, [r7, #12]
 8018eac:	4618      	mov	r0, r3
 8018eae:	f7ff ff00 	bl	8018cb2 <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EclINS_17__normal_iteratorIPS5_St6vectorIS5_SaIS5_EEEEEEbT_>
 8018eb2:	4603      	mov	r3, r0
 8018eb4:	2b00      	cmp	r3, #0
 8018eb6:	d001      	beq.n	8018ebc <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x100>
	    return __first;
 8018eb8:	68fb      	ldr	r3, [r7, #12]
 8018eba:	e014      	b.n	8018ee6 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 8018ebc:	f107 030c 	add.w	r3, r7, #12
 8018ec0:	4618      	mov	r0, r3
 8018ec2:	f7f2 f9bf 	bl	800b244 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
	  if (__pred(__first))
 8018ec6:	1d3b      	adds	r3, r7, #4
 8018ec8:	68f9      	ldr	r1, [r7, #12]
 8018eca:	4618      	mov	r0, r3
 8018ecc:	f7ff fef1 	bl	8018cb2 <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EclINS_17__normal_iteratorIPS5_St6vectorIS5_SaIS5_EEEEEEbT_>
 8018ed0:	4603      	mov	r3, r0
 8018ed2:	2b00      	cmp	r3, #0
 8018ed4:	d001      	beq.n	8018eda <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x11e>
	    return __first;
 8018ed6:	68fb      	ldr	r3, [r7, #12]
 8018ed8:	e005      	b.n	8018ee6 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 8018eda:	f107 030c 	add.w	r3, r7, #12
 8018ede:	4618      	mov	r0, r3
 8018ee0:	f7f2 f9b0 	bl	800b244 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
	  return __last;
 8018ee4:	68bb      	ldr	r3, [r7, #8]
    }
 8018ee6:	4618      	mov	r0, r3
 8018ee8:	3718      	adds	r7, #24
 8018eea:	46bd      	mov	sp, r7
 8018eec:	bd80      	pop	{r7, pc}

08018eee <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>:
      operator=(__shared_ptr&& __r) noexcept
 8018eee:	b580      	push	{r7, lr}
 8018ef0:	b084      	sub	sp, #16
 8018ef2:	af00      	add	r7, sp, #0
 8018ef4:	6078      	str	r0, [r7, #4]
 8018ef6:	6039      	str	r1, [r7, #0]
	__shared_ptr(std::move(__r)).swap(*this);
 8018ef8:	6838      	ldr	r0, [r7, #0]
 8018efa:	f000 f843 	bl	8018f84 <_ZSt4moveIRSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>
 8018efe:	4602      	mov	r2, r0
 8018f00:	f107 0308 	add.w	r3, r7, #8
 8018f04:	4611      	mov	r1, r2
 8018f06:	4618      	mov	r0, r3
 8018f08:	f7f4 f9a7 	bl	800d25a <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>
 8018f0c:	f107 0308 	add.w	r3, r7, #8
 8018f10:	6879      	ldr	r1, [r7, #4]
 8018f12:	4618      	mov	r0, r3
 8018f14:	f000 f841 	bl	8018f9a <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>
 8018f18:	f107 0308 	add.w	r3, r7, #8
 8018f1c:	4618      	mov	r0, r3
 8018f1e:	f7f0 ffea 	bl	8009ef6 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EED1Ev>
	return *this;
 8018f22:	687b      	ldr	r3, [r7, #4]
      }
 8018f24:	4618      	mov	r0, r3
 8018f26:	3710      	adds	r7, #16
 8018f28:	46bd      	mov	sp, r7
 8018f2a:	bd80      	pop	{r7, pc}

08018f2c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEEET_SA_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8018f2c:	b480      	push	{r7}
 8018f2e:	b083      	sub	sp, #12
 8018f30:	af00      	add	r7, sp, #0
 8018f32:	6078      	str	r0, [r7, #4]
    { return __it; }
 8018f34:	687b      	ldr	r3, [r7, #4]
 8018f36:	4618      	mov	r0, r3
 8018f38:	370c      	adds	r7, #12
 8018f3a:	46bd      	mov	sp, r7
 8018f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f40:	4770      	bx	lr

08018f42 <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEES9_ET1_T0_SB_SA_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8018f42:	b5b0      	push	{r4, r5, r7, lr}
 8018f44:	b084      	sub	sp, #16
 8018f46:	af00      	add	r7, sp, #0
 8018f48:	60f8      	str	r0, [r7, #12]
 8018f4a:	60b9      	str	r1, [r7, #8]
 8018f4c:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8018f4e:	68f8      	ldr	r0, [r7, #12]
 8018f50:	f000 f83a 	bl	8018fc8 <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleESt6vectorIS2_SaIS2_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>
 8018f54:	4604      	mov	r4, r0
 8018f56:	68b8      	ldr	r0, [r7, #8]
 8018f58:	f000 f836 	bl	8018fc8 <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleESt6vectorIS2_SaIS2_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>
 8018f5c:	4605      	mov	r5, r0
 8018f5e:	6878      	ldr	r0, [r7, #4]
 8018f60:	f000 f832 	bl	8018fc8 <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleESt6vectorIS2_SaIS2_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>
 8018f64:	4603      	mov	r3, r0
 8018f66:	461a      	mov	r2, r3
 8018f68:	4629      	mov	r1, r5
 8018f6a:	4620      	mov	r0, r4
 8018f6c:	f000 f83a 	bl	8018fe4 <_ZSt14__copy_move_a1ILb1EPSt10shared_ptrI6ModuleES3_ET1_T0_S5_S4_>
 8018f70:	4603      	mov	r3, r0
 8018f72:	4619      	mov	r1, r3
 8018f74:	6878      	ldr	r0, [r7, #4]
 8018f76:	f000 f845 	bl	8019004 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEES5_ET_SA_T0_>
 8018f7a:	4603      	mov	r3, r0
    }
 8018f7c:	4618      	mov	r0, r3
 8018f7e:	3710      	adds	r7, #16
 8018f80:	46bd      	mov	sp, r7
 8018f82:	bdb0      	pop	{r4, r5, r7, pc}

08018f84 <_ZSt4moveIRSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8018f84:	b480      	push	{r7}
 8018f86:	b083      	sub	sp, #12
 8018f88:	af00      	add	r7, sp, #0
 8018f8a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8018f8c:	687b      	ldr	r3, [r7, #4]
 8018f8e:	4618      	mov	r0, r3
 8018f90:	370c      	adds	r7, #12
 8018f92:	46bd      	mov	sp, r7
 8018f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f98:	4770      	bx	lr

08018f9a <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>:
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
 8018f9a:	b580      	push	{r7, lr}
 8018f9c:	b082      	sub	sp, #8
 8018f9e:	af00      	add	r7, sp, #0
 8018fa0:	6078      	str	r0, [r7, #4]
 8018fa2:	6039      	str	r1, [r7, #0]
	std::swap(_M_ptr, __other._M_ptr);
 8018fa4:	687b      	ldr	r3, [r7, #4]
 8018fa6:	683a      	ldr	r2, [r7, #0]
 8018fa8:	4611      	mov	r1, r2
 8018faa:	4618      	mov	r0, r3
 8018fac:	f000 f841 	bl	8019032 <_ZSt4swapIP6ModuleENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>
	_M_refcount._M_swap(__other._M_refcount);
 8018fb0:	687b      	ldr	r3, [r7, #4]
 8018fb2:	1d1a      	adds	r2, r3, #4
 8018fb4:	683b      	ldr	r3, [r7, #0]
 8018fb6:	3304      	adds	r3, #4
 8018fb8:	4619      	mov	r1, r3
 8018fba:	4610      	mov	r0, r2
 8018fbc:	f7f3 fb7d 	bl	800c6ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
      }
 8018fc0:	bf00      	nop
 8018fc2:	3708      	adds	r7, #8
 8018fc4:	46bd      	mov	sp, r7
 8018fc6:	bd80      	pop	{r7, pc}

08018fc8 <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleESt6vectorIS2_SaIS2_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8018fc8:	b580      	push	{r7, lr}
 8018fca:	b082      	sub	sp, #8
 8018fcc:	af00      	add	r7, sp, #0
 8018fce:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }
 8018fd0:	1d3b      	adds	r3, r7, #4
 8018fd2:	4618      	mov	r0, r3
 8018fd4:	f7f2 fe2a 	bl	800bc2c <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 8018fd8:	4603      	mov	r3, r0
 8018fda:	681b      	ldr	r3, [r3, #0]
 8018fdc:	4618      	mov	r0, r3
 8018fde:	3708      	adds	r7, #8
 8018fe0:	46bd      	mov	sp, r7
 8018fe2:	bd80      	pop	{r7, pc}

08018fe4 <_ZSt14__copy_move_a1ILb1EPSt10shared_ptrI6ModuleES3_ET1_T0_S5_S4_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8018fe4:	b580      	push	{r7, lr}
 8018fe6:	b084      	sub	sp, #16
 8018fe8:	af00      	add	r7, sp, #0
 8018fea:	60f8      	str	r0, [r7, #12]
 8018fec:	60b9      	str	r1, [r7, #8]
 8018fee:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8018ff0:	687a      	ldr	r2, [r7, #4]
 8018ff2:	68b9      	ldr	r1, [r7, #8]
 8018ff4:	68f8      	ldr	r0, [r7, #12]
 8018ff6:	f000 f83b 	bl	8019070 <_ZSt14__copy_move_a2ILb1EPSt10shared_ptrI6ModuleES3_ET1_T0_S5_S4_>
 8018ffa:	4603      	mov	r3, r0
 8018ffc:	4618      	mov	r0, r3
 8018ffe:	3710      	adds	r7, #16
 8019000:	46bd      	mov	sp, r7
 8019002:	bd80      	pop	{r7, pc}

08019004 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEES5_ET_SA_T0_>:
    __niter_wrap(_From __from, _To __res)
 8019004:	b580      	push	{r7, lr}
 8019006:	b082      	sub	sp, #8
 8019008:	af00      	add	r7, sp, #0
 801900a:	6078      	str	r0, [r7, #4]
 801900c:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 801900e:	6878      	ldr	r0, [r7, #4]
 8019010:	f7ff ffda 	bl	8018fc8 <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleESt6vectorIS2_SaIS2_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>
 8019014:	4602      	mov	r2, r0
 8019016:	683b      	ldr	r3, [r7, #0]
 8019018:	1a9b      	subs	r3, r3, r2
 801901a:	10db      	asrs	r3, r3, #3
 801901c:	461a      	mov	r2, r3
 801901e:	1d3b      	adds	r3, r7, #4
 8019020:	4611      	mov	r1, r2
 8019022:	4618      	mov	r0, r3
 8019024:	f7ff fd78 	bl	8018b18 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEplEi>
 8019028:	4603      	mov	r3, r0
 801902a:	4618      	mov	r0, r3
 801902c:	3708      	adds	r7, #8
 801902e:	46bd      	mov	sp, r7
 8019030:	bd80      	pop	{r7, pc}

08019032 <_ZSt4swapIP6ModuleENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>:
    swap(_Tp& __a, _Tp& __b)
 8019032:	b580      	push	{r7, lr}
 8019034:	b084      	sub	sp, #16
 8019036:	af00      	add	r7, sp, #0
 8019038:	6078      	str	r0, [r7, #4]
 801903a:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 801903c:	6878      	ldr	r0, [r7, #4]
 801903e:	f000 f827 	bl	8019090 <_ZSt4moveIRP6ModuleEONSt16remove_referenceIT_E4typeEOS4_>
 8019042:	4603      	mov	r3, r0
 8019044:	681b      	ldr	r3, [r3, #0]
 8019046:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8019048:	6838      	ldr	r0, [r7, #0]
 801904a:	f000 f821 	bl	8019090 <_ZSt4moveIRP6ModuleEONSt16remove_referenceIT_E4typeEOS4_>
 801904e:	4603      	mov	r3, r0
 8019050:	681a      	ldr	r2, [r3, #0]
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8019056:	f107 030c 	add.w	r3, r7, #12
 801905a:	4618      	mov	r0, r3
 801905c:	f000 f818 	bl	8019090 <_ZSt4moveIRP6ModuleEONSt16remove_referenceIT_E4typeEOS4_>
 8019060:	4603      	mov	r3, r0
 8019062:	681a      	ldr	r2, [r3, #0]
 8019064:	683b      	ldr	r3, [r7, #0]
 8019066:	601a      	str	r2, [r3, #0]
    }
 8019068:	bf00      	nop
 801906a:	3710      	adds	r7, #16
 801906c:	46bd      	mov	sp, r7
 801906e:	bd80      	pop	{r7, pc}

08019070 <_ZSt14__copy_move_a2ILb1EPSt10shared_ptrI6ModuleES3_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8019070:	b580      	push	{r7, lr}
 8019072:	b084      	sub	sp, #16
 8019074:	af00      	add	r7, sp, #0
 8019076:	60f8      	str	r0, [r7, #12]
 8019078:	60b9      	str	r1, [r7, #8]
 801907a:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 801907c:	687a      	ldr	r2, [r7, #4]
 801907e:	68b9      	ldr	r1, [r7, #8]
 8019080:	68f8      	ldr	r0, [r7, #12]
 8019082:	f000 f810 	bl	80190a6 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPSt10shared_ptrI6ModuleES6_EET0_T_S8_S7_>
 8019086:	4603      	mov	r3, r0
    }
 8019088:	4618      	mov	r0, r3
 801908a:	3710      	adds	r7, #16
 801908c:	46bd      	mov	sp, r7
 801908e:	bd80      	pop	{r7, pc}

08019090 <_ZSt4moveIRP6ModuleEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8019090:	b480      	push	{r7}
 8019092:	b083      	sub	sp, #12
 8019094:	af00      	add	r7, sp, #0
 8019096:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8019098:	687b      	ldr	r3, [r7, #4]
 801909a:	4618      	mov	r0, r3
 801909c:	370c      	adds	r7, #12
 801909e:	46bd      	mov	sp, r7
 80190a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190a4:	4770      	bx	lr

080190a6 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPSt10shared_ptrI6ModuleES6_EET0_T_S8_S7_>:
	__copy_m(_II __first, _II __last, _OI __result)
 80190a6:	b580      	push	{r7, lr}
 80190a8:	b086      	sub	sp, #24
 80190aa:	af00      	add	r7, sp, #0
 80190ac:	60f8      	str	r0, [r7, #12]
 80190ae:	60b9      	str	r1, [r7, #8]
 80190b0:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 80190b2:	68ba      	ldr	r2, [r7, #8]
 80190b4:	68fb      	ldr	r3, [r7, #12]
 80190b6:	1ad3      	subs	r3, r2, r3
 80190b8:	10db      	asrs	r3, r3, #3
 80190ba:	617b      	str	r3, [r7, #20]
 80190bc:	e010      	b.n	80190e0 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPSt10shared_ptrI6ModuleES6_EET0_T_S8_S7_+0x3a>
	      *__result = std::move(*__first);
 80190be:	68f8      	ldr	r0, [r7, #12]
 80190c0:	f7f2 f956 	bl	800b370 <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>
 80190c4:	4603      	mov	r3, r0
 80190c6:	4619      	mov	r1, r3
 80190c8:	6878      	ldr	r0, [r7, #4]
 80190ca:	f7ff fe06 	bl	8018cda <_ZNSt10shared_ptrI6ModuleEaSEOS1_>
	      ++__first;
 80190ce:	68fb      	ldr	r3, [r7, #12]
 80190d0:	3308      	adds	r3, #8
 80190d2:	60fb      	str	r3, [r7, #12]
	      ++__result;
 80190d4:	687b      	ldr	r3, [r7, #4]
 80190d6:	3308      	adds	r3, #8
 80190d8:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 80190da:	697b      	ldr	r3, [r7, #20]
 80190dc:	3b01      	subs	r3, #1
 80190de:	617b      	str	r3, [r7, #20]
 80190e0:	697b      	ldr	r3, [r7, #20]
 80190e2:	2b00      	cmp	r3, #0
 80190e4:	dceb      	bgt.n	80190be <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPSt10shared_ptrI6ModuleES6_EET0_T_S8_S7_+0x18>
	  return __result;
 80190e6:	687b      	ldr	r3, [r7, #4]
	}
 80190e8:	4618      	mov	r0, r3
 80190ea:	3718      	adds	r7, #24
 80190ec:	46bd      	mov	sp, r7
 80190ee:	bd80      	pop	{r7, pc}

080190f0 <__NVIC_EnableIRQ>:
{
 80190f0:	b480      	push	{r7}
 80190f2:	b083      	sub	sp, #12
 80190f4:	af00      	add	r7, sp, #0
 80190f6:	4603      	mov	r3, r0
 80190f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80190fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80190fe:	2b00      	cmp	r3, #0
 8019100:	db0b      	blt.n	801911a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8019102:	88fb      	ldrh	r3, [r7, #6]
 8019104:	f003 021f 	and.w	r2, r3, #31
 8019108:	4907      	ldr	r1, [pc, #28]	@ (8019128 <__NVIC_EnableIRQ+0x38>)
 801910a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801910e:	095b      	lsrs	r3, r3, #5
 8019110:	2001      	movs	r0, #1
 8019112:	fa00 f202 	lsl.w	r2, r0, r2
 8019116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801911a:	bf00      	nop
 801911c:	370c      	adds	r7, #12
 801911e:	46bd      	mov	sp, r7
 8019120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019124:	4770      	bx	lr
 8019126:	bf00      	nop
 8019128:	e000e100 	.word	0xe000e100

0801912c <_ZN8pruTimerC1EP11TIM_TypeDef9IRQn_TypemP9pruThread>:
#include "pruThread.h"



// Timer constructor
pruTimer::pruTimer(TIM_TypeDef* _timer, IRQn_Type _irq, uint32_t _frequency, pruThread* _ownerPtr):
 801912c:	b590      	push	{r4, r7, lr}
 801912e:	b085      	sub	sp, #20
 8019130:	af00      	add	r7, sp, #0
 8019132:	60f8      	str	r0, [r7, #12]
 8019134:	60b9      	str	r1, [r7, #8]
 8019136:	603b      	str	r3, [r7, #0]
 8019138:	4613      	mov	r3, r2
 801913a:	80fb      	strh	r3, [r7, #6]
	timer(_timer),
 801913c:	68fb      	ldr	r3, [r7, #12]
 801913e:	68ba      	ldr	r2, [r7, #8]
 8019140:	605a      	str	r2, [r3, #4]
	irq(_irq),
 8019142:	68fb      	ldr	r3, [r7, #12]
 8019144:	88fa      	ldrh	r2, [r7, #6]
 8019146:	811a      	strh	r2, [r3, #8]
	frequency(_frequency),
 8019148:	68fb      	ldr	r3, [r7, #12]
 801914a:	683a      	ldr	r2, [r7, #0]
 801914c:	60da      	str	r2, [r3, #12]
	timerOwnerPtr(_ownerPtr)
 801914e:	68fb      	ldr	r3, [r7, #12]
 8019150:	6a3a      	ldr	r2, [r7, #32]
 8019152:	611a      	str	r2, [r3, #16]
{
	interruptPtr = new TimerInterrupt(irq, this);	// Instantiate a new Timer Interrupt object and pass "this" pointer
 8019154:	2008      	movs	r0, #8
 8019156:	f00c fec1 	bl	8025edc <_Znwj>
 801915a:	4603      	mov	r3, r0
 801915c:	461c      	mov	r4, r3
 801915e:	68fb      	ldr	r3, [r7, #12]
 8019160:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8019164:	68fa      	ldr	r2, [r7, #12]
 8019166:	4619      	mov	r1, r3
 8019168:	4620      	mov	r0, r4
 801916a:	f000 f8af 	bl	80192cc <_ZN14TimerInterruptC1EiP8pruTimer>
 801916e:	68fb      	ldr	r3, [r7, #12]
 8019170:	601c      	str	r4, [r3, #0]

	startTimer();
 8019172:	68f8      	ldr	r0, [r7, #12]
 8019174:	f000 f812 	bl	801919c <_ZN8pruTimer10startTimerEv>
}
 8019178:	68fb      	ldr	r3, [r7, #12]
 801917a:	4618      	mov	r0, r3
 801917c:	3714      	adds	r7, #20
 801917e:	46bd      	mov	sp, r7
 8019180:	bd90      	pop	{r4, r7, pc}

08019182 <_ZN8pruTimer9timerTickEv>:


void pruTimer::timerTick(void)
{
 8019182:	b580      	push	{r7, lr}
 8019184:	b082      	sub	sp, #8
 8019186:	af00      	add	r7, sp, #0
 8019188:	6078      	str	r0, [r7, #4]
	//Do something here
	timerOwnerPtr->update();
 801918a:	687b      	ldr	r3, [r7, #4]
 801918c:	691b      	ldr	r3, [r3, #16]
 801918e:	4618      	mov	r0, r3
 8019190:	f7ff fac9 	bl	8018726 <_ZN9pruThread6updateEv>
}
 8019194:	bf00      	nop
 8019196:	3708      	adds	r7, #8
 8019198:	46bd      	mov	sp, r7
 801919a:	bd80      	pop	{r7, pc}

0801919c <_ZN8pruTimer10startTimerEv>:



void pruTimer::startTimer(void)
{
 801919c:	b580      	push	{r7, lr}
 801919e:	b086      	sub	sp, #24
 80191a0:	af00      	add	r7, sp, #0
 80191a2:	6078      	str	r0, [r7, #4]
    uint32_t TIM_CLK;

    if (timer == TIM2)
 80191a4:	687b      	ldr	r3, [r7, #4]
 80191a6:	685b      	ldr	r3, [r3, #4]
 80191a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80191ac:	d116      	bne.n	80191dc <_ZN8pruTimer10startTimerEv+0x40>
    {
        printf("	power on Timer 2\n\r");
 80191ae:	483f      	ldr	r0, [pc, #252]	@ (80192ac <_ZN8pruTimer10startTimerEv+0x110>)
 80191b0:	f00d fd3e 	bl	8026c30 <iprintf>
        __HAL_RCC_TIM2_CLK_ENABLE();
 80191b4:	4b3e      	ldr	r3, [pc, #248]	@ (80192b0 <_ZN8pruTimer10startTimerEv+0x114>)
 80191b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80191ba:	4a3d      	ldr	r2, [pc, #244]	@ (80192b0 <_ZN8pruTimer10startTimerEv+0x114>)
 80191bc:	f043 0301 	orr.w	r3, r3, #1
 80191c0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80191c4:	4b3a      	ldr	r3, [pc, #232]	@ (80192b0 <_ZN8pruTimer10startTimerEv+0x114>)
 80191c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80191ca:	f003 0301 	and.w	r3, r3, #1
 80191ce:	613b      	str	r3, [r7, #16]
 80191d0:	693b      	ldr	r3, [r7, #16]
        TIM_CLK = APB1CLK;
 80191d2:	4b38      	ldr	r3, [pc, #224]	@ (80192b4 <_ZN8pruTimer10startTimerEv+0x118>)
 80191d4:	681b      	ldr	r3, [r3, #0]
 80191d6:	085b      	lsrs	r3, r3, #1
 80191d8:	617b      	str	r3, [r7, #20]
 80191da:	e036      	b.n	801924a <_ZN8pruTimer10startTimerEv+0xae>
    }
    else if (timer == TIM3)
 80191dc:	687b      	ldr	r3, [r7, #4]
 80191de:	685b      	ldr	r3, [r3, #4]
 80191e0:	4a35      	ldr	r2, [pc, #212]	@ (80192b8 <_ZN8pruTimer10startTimerEv+0x11c>)
 80191e2:	4293      	cmp	r3, r2
 80191e4:	d116      	bne.n	8019214 <_ZN8pruTimer10startTimerEv+0x78>
    {
        printf("	power on Timer 3\n\r");
 80191e6:	4835      	ldr	r0, [pc, #212]	@ (80192bc <_ZN8pruTimer10startTimerEv+0x120>)
 80191e8:	f00d fd22 	bl	8026c30 <iprintf>
        __HAL_RCC_TIM3_CLK_ENABLE();
 80191ec:	4b30      	ldr	r3, [pc, #192]	@ (80192b0 <_ZN8pruTimer10startTimerEv+0x114>)
 80191ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80191f2:	4a2f      	ldr	r2, [pc, #188]	@ (80192b0 <_ZN8pruTimer10startTimerEv+0x114>)
 80191f4:	f043 0302 	orr.w	r3, r3, #2
 80191f8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80191fc:	4b2c      	ldr	r3, [pc, #176]	@ (80192b0 <_ZN8pruTimer10startTimerEv+0x114>)
 80191fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8019202:	f003 0302 	and.w	r3, r3, #2
 8019206:	60fb      	str	r3, [r7, #12]
 8019208:	68fb      	ldr	r3, [r7, #12]
        TIM_CLK = APB1CLK;
 801920a:	4b2a      	ldr	r3, [pc, #168]	@ (80192b4 <_ZN8pruTimer10startTimerEv+0x118>)
 801920c:	681b      	ldr	r3, [r3, #0]
 801920e:	085b      	lsrs	r3, r3, #1
 8019210:	617b      	str	r3, [r7, #20]
 8019212:	e01a      	b.n	801924a <_ZN8pruTimer10startTimerEv+0xae>
    }
    else if (timer == TIM4)
 8019214:	687b      	ldr	r3, [r7, #4]
 8019216:	685b      	ldr	r3, [r3, #4]
 8019218:	4a29      	ldr	r2, [pc, #164]	@ (80192c0 <_ZN8pruTimer10startTimerEv+0x124>)
 801921a:	4293      	cmp	r3, r2
 801921c:	d115      	bne.n	801924a <_ZN8pruTimer10startTimerEv+0xae>
    {
        printf("	power on Timer 4\n\r");
 801921e:	4829      	ldr	r0, [pc, #164]	@ (80192c4 <_ZN8pruTimer10startTimerEv+0x128>)
 8019220:	f00d fd06 	bl	8026c30 <iprintf>
        __HAL_RCC_TIM4_CLK_ENABLE();
 8019224:	4b22      	ldr	r3, [pc, #136]	@ (80192b0 <_ZN8pruTimer10startTimerEv+0x114>)
 8019226:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801922a:	4a21      	ldr	r2, [pc, #132]	@ (80192b0 <_ZN8pruTimer10startTimerEv+0x114>)
 801922c:	f043 0304 	orr.w	r3, r3, #4
 8019230:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8019234:	4b1e      	ldr	r3, [pc, #120]	@ (80192b0 <_ZN8pruTimer10startTimerEv+0x114>)
 8019236:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801923a:	f003 0304 	and.w	r3, r3, #4
 801923e:	60bb      	str	r3, [r7, #8]
 8019240:	68bb      	ldr	r3, [r7, #8]
        TIM_CLK = APB1CLK;
 8019242:	4b1c      	ldr	r3, [pc, #112]	@ (80192b4 <_ZN8pruTimer10startTimerEv+0x118>)
 8019244:	681b      	ldr	r3, [r3, #0]
 8019246:	085b      	lsrs	r3, r3, #1
 8019248:	617b      	str	r3, [r7, #20]
    }

    //timer update frequency = TIM_CLK/(TIM_PSC+1)/(TIM_ARR + 1)

    timer->CR2 &= 0;                                            // UG used as trigg output
 801924a:	687b      	ldr	r3, [r7, #4]
 801924c:	685b      	ldr	r3, [r3, #4]
 801924e:	685b      	ldr	r3, [r3, #4]
 8019250:	687b      	ldr	r3, [r7, #4]
 8019252:	685b      	ldr	r3, [r3, #4]
 8019254:	2200      	movs	r2, #0
 8019256:	605a      	str	r2, [r3, #4]
    timer->PSC = TIM_PSC-1;                                     // prescaler
 8019258:	687b      	ldr	r3, [r7, #4]
 801925a:	685b      	ldr	r3, [r3, #4]
 801925c:	2200      	movs	r2, #0
 801925e:	629a      	str	r2, [r3, #40]	@ 0x28
    timer->ARR = ((TIM_CLK / TIM_PSC / this->frequency) - 1);   // period
 8019260:	687b      	ldr	r3, [r7, #4]
 8019262:	68db      	ldr	r3, [r3, #12]
 8019264:	697a      	ldr	r2, [r7, #20]
 8019266:	fbb2 f2f3 	udiv	r2, r2, r3
 801926a:	687b      	ldr	r3, [r7, #4]
 801926c:	685b      	ldr	r3, [r3, #4]
 801926e:	3a01      	subs	r2, #1
 8019270:	62da      	str	r2, [r3, #44]	@ 0x2c
    timer->EGR = TIM_EGR_UG;                                    // reinit the counter
 8019272:	687b      	ldr	r3, [r7, #4]
 8019274:	685b      	ldr	r3, [r3, #4]
 8019276:	2201      	movs	r2, #1
 8019278:	615a      	str	r2, [r3, #20]
    timer->DIER = TIM_DIER_UIE;                                 // enable update interrupts
 801927a:	687b      	ldr	r3, [r7, #4]
 801927c:	685b      	ldr	r3, [r3, #4]
 801927e:	2201      	movs	r2, #1
 8019280:	60da      	str	r2, [r3, #12]

    timer->CR1 |= TIM_CR1_CEN;                                  // enable timer
 8019282:	687b      	ldr	r3, [r7, #4]
 8019284:	685b      	ldr	r3, [r3, #4]
 8019286:	681a      	ldr	r2, [r3, #0]
 8019288:	687b      	ldr	r3, [r7, #4]
 801928a:	685b      	ldr	r3, [r3, #4]
 801928c:	f042 0201 	orr.w	r2, r2, #1
 8019290:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(irq);
 8019292:	687b      	ldr	r3, [r7, #4]
 8019294:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8019298:	4618      	mov	r0, r3
 801929a:	f7ff ff29 	bl	80190f0 <__NVIC_EnableIRQ>

    printf("	timer started\n");
 801929e:	480a      	ldr	r0, [pc, #40]	@ (80192c8 <_ZN8pruTimer10startTimerEv+0x12c>)
 80192a0:	f00d fd36 	bl	8026d10 <puts>
}
 80192a4:	bf00      	nop
 80192a6:	3718      	adds	r7, #24
 80192a8:	46bd      	mov	sp, r7
 80192aa:	bd80      	pop	{r7, pc}
 80192ac:	0802871c 	.word	0x0802871c
 80192b0:	58024400 	.word	0x58024400
 80192b4:	2400001c 	.word	0x2400001c
 80192b8:	40000400 	.word	0x40000400
 80192bc:	08028730 	.word	0x08028730
 80192c0:	40000800 	.word	0x40000800
 80192c4:	08028744 	.word	0x08028744
 80192c8:	08028758 	.word	0x08028758

080192cc <_ZN14TimerInterruptC1EiP8pruTimer>:
#include "../interrupt/interrupt.h"
#include "timerInterrupt.h"
#include "timer.h"


TimerInterrupt::TimerInterrupt(int interruptNumber, pruTimer* owner)
 80192cc:	b580      	push	{r7, lr}
 80192ce:	b084      	sub	sp, #16
 80192d0:	af00      	add	r7, sp, #0
 80192d2:	60f8      	str	r0, [r7, #12]
 80192d4:	60b9      	str	r1, [r7, #8]
 80192d6:	607a      	str	r2, [r7, #4]
 80192d8:	68fb      	ldr	r3, [r7, #12]
 80192da:	4618      	mov	r0, r3
 80192dc:	f7ea fcfc 	bl	8003cd8 <_ZN9InterruptC1Ev>
 80192e0:	4a07      	ldr	r2, [pc, #28]	@ (8019300 <_ZN14TimerInterruptC1EiP8pruTimer+0x34>)
 80192e2:	68fb      	ldr	r3, [r7, #12]
 80192e4:	601a      	str	r2, [r3, #0]
{
	// Allows interrupt to access owner's data
	InterruptOwnerPtr = owner;
 80192e6:	68fb      	ldr	r3, [r7, #12]
 80192e8:	687a      	ldr	r2, [r7, #4]
 80192ea:	605a      	str	r2, [r3, #4]

	// When a device interrupt object is instantiated, the Register function must be called to let the
	// Interrupt base class know that there is an appropriate ISR function for the given interrupt.
	Interrupt::Register(interruptNumber, this);
 80192ec:	68fb      	ldr	r3, [r7, #12]
 80192ee:	4619      	mov	r1, r3
 80192f0:	68b8      	ldr	r0, [r7, #8]
 80192f2:	f7ea fd01 	bl	8003cf8 <_ZN9Interrupt8RegisterEiPS_>
}
 80192f6:	68fb      	ldr	r3, [r7, #12]
 80192f8:	4618      	mov	r0, r3
 80192fa:	3710      	adds	r7, #16
 80192fc:	46bd      	mov	sp, r7
 80192fe:	bd80      	pop	{r7, pc}
 8019300:	08028c54 	.word	0x08028c54

08019304 <_ZN14TimerInterrupt11ISR_HandlerEv>:


void TimerInterrupt::ISR_Handler(void)
{
 8019304:	b580      	push	{r7, lr}
 8019306:	b082      	sub	sp, #8
 8019308:	af00      	add	r7, sp, #0
 801930a:	6078      	str	r0, [r7, #4]
	this->InterruptOwnerPtr->timerTick();
 801930c:	687b      	ldr	r3, [r7, #4]
 801930e:	685b      	ldr	r3, [r3, #4]
 8019310:	4618      	mov	r0, r3
 8019312:	f7ff ff36 	bl	8019182 <_ZN8pruTimer9timerTickEv>
}
 8019316:	bf00      	nop
 8019318:	3708      	adds	r7, #8
 801931a:	46bd      	mov	sp, r7
 801931c:	bd80      	pop	{r7, pc}
	...

08019320 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8019320:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8019358 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8019324:	f7f4 fd4e 	bl	800ddc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8019328:	480c      	ldr	r0, [pc, #48]	@ (801935c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 801932a:	490d      	ldr	r1, [pc, #52]	@ (8019360 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 801932c:	4a0d      	ldr	r2, [pc, #52]	@ (8019364 <LoopFillZerobss+0x1a>)
  movs r3, #0
 801932e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8019330:	e002      	b.n	8019338 <LoopCopyDataInit>

08019332 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8019332:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8019334:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8019336:	3304      	adds	r3, #4

08019338 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8019338:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801933a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 801933c:	d3f9      	bcc.n	8019332 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801933e:	4a0a      	ldr	r2, [pc, #40]	@ (8019368 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8019340:	4c0a      	ldr	r4, [pc, #40]	@ (801936c <LoopFillZerobss+0x22>)
  movs r3, #0
 8019342:	2300      	movs	r3, #0
  b LoopFillZerobss
 8019344:	e001      	b.n	801934a <LoopFillZerobss>

08019346 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8019346:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8019348:	3204      	adds	r2, #4

0801934a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801934a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 801934c:	d3fb      	bcc.n	8019346 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 801934e:	f00d fe91 	bl	8027074 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8019352:	f7ef ff27 	bl	80091a4 <main>
  bx  lr
 8019356:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8019358:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 801935c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8019360:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 8019364:	08029024 	.word	0x08029024
  ldr r2, =_sbss
 8019368:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 801936c:	24000c0c 	.word	0x24000c0c

08019370 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8019370:	e7fe      	b.n	8019370 <ADC3_IRQHandler>
	...

08019374 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8019374:	b580      	push	{r7, lr}
 8019376:	b082      	sub	sp, #8
 8019378:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801937a:	2003      	movs	r0, #3
 801937c:	f000 f9a2 	bl	80196c4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8019380:	f003 fdc8 	bl	801cf14 <HAL_RCC_GetSysClockFreq>
 8019384:	4602      	mov	r2, r0
 8019386:	4b15      	ldr	r3, [pc, #84]	@ (80193dc <HAL_Init+0x68>)
 8019388:	699b      	ldr	r3, [r3, #24]
 801938a:	0a1b      	lsrs	r3, r3, #8
 801938c:	f003 030f 	and.w	r3, r3, #15
 8019390:	4913      	ldr	r1, [pc, #76]	@ (80193e0 <HAL_Init+0x6c>)
 8019392:	5ccb      	ldrb	r3, [r1, r3]
 8019394:	f003 031f 	and.w	r3, r3, #31
 8019398:	fa22 f303 	lsr.w	r3, r2, r3
 801939c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801939e:	4b0f      	ldr	r3, [pc, #60]	@ (80193dc <HAL_Init+0x68>)
 80193a0:	699b      	ldr	r3, [r3, #24]
 80193a2:	f003 030f 	and.w	r3, r3, #15
 80193a6:	4a0e      	ldr	r2, [pc, #56]	@ (80193e0 <HAL_Init+0x6c>)
 80193a8:	5cd3      	ldrb	r3, [r2, r3]
 80193aa:	f003 031f 	and.w	r3, r3, #31
 80193ae:	687a      	ldr	r2, [r7, #4]
 80193b0:	fa22 f303 	lsr.w	r3, r2, r3
 80193b4:	4a0b      	ldr	r2, [pc, #44]	@ (80193e4 <HAL_Init+0x70>)
 80193b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80193b8:	4a0b      	ldr	r2, [pc, #44]	@ (80193e8 <HAL_Init+0x74>)
 80193ba:	687b      	ldr	r3, [r7, #4]
 80193bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80193be:	200f      	movs	r0, #15
 80193c0:	f000 f814 	bl	80193ec <HAL_InitTick>
 80193c4:	4603      	mov	r3, r0
 80193c6:	2b00      	cmp	r3, #0
 80193c8:	d001      	beq.n	80193ce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80193ca:	2301      	movs	r3, #1
 80193cc:	e002      	b.n	80193d4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80193ce:	f7f4 fadf 	bl	800d990 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80193d2:	2300      	movs	r3, #0
}
 80193d4:	4618      	mov	r0, r3
 80193d6:	3708      	adds	r7, #8
 80193d8:	46bd      	mov	sp, r7
 80193da:	bd80      	pop	{r7, pc}
 80193dc:	58024400 	.word	0x58024400
 80193e0:	080289d0 	.word	0x080289d0
 80193e4:	24000020 	.word	0x24000020
 80193e8:	2400001c 	.word	0x2400001c

080193ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80193ec:	b580      	push	{r7, lr}
 80193ee:	b082      	sub	sp, #8
 80193f0:	af00      	add	r7, sp, #0
 80193f2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80193f4:	4b15      	ldr	r3, [pc, #84]	@ (801944c <HAL_InitTick+0x60>)
 80193f6:	781b      	ldrb	r3, [r3, #0]
 80193f8:	2b00      	cmp	r3, #0
 80193fa:	d101      	bne.n	8019400 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80193fc:	2301      	movs	r3, #1
 80193fe:	e021      	b.n	8019444 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8019400:	4b13      	ldr	r3, [pc, #76]	@ (8019450 <HAL_InitTick+0x64>)
 8019402:	681a      	ldr	r2, [r3, #0]
 8019404:	4b11      	ldr	r3, [pc, #68]	@ (801944c <HAL_InitTick+0x60>)
 8019406:	781b      	ldrb	r3, [r3, #0]
 8019408:	4619      	mov	r1, r3
 801940a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801940e:	fbb3 f3f1 	udiv	r3, r3, r1
 8019412:	fbb2 f3f3 	udiv	r3, r2, r3
 8019416:	4618      	mov	r0, r3
 8019418:	f000 f98b 	bl	8019732 <HAL_SYSTICK_Config>
 801941c:	4603      	mov	r3, r0
 801941e:	2b00      	cmp	r3, #0
 8019420:	d001      	beq.n	8019426 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8019422:	2301      	movs	r3, #1
 8019424:	e00e      	b.n	8019444 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8019426:	687b      	ldr	r3, [r7, #4]
 8019428:	2b0f      	cmp	r3, #15
 801942a:	d80a      	bhi.n	8019442 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801942c:	2200      	movs	r2, #0
 801942e:	6879      	ldr	r1, [r7, #4]
 8019430:	f04f 30ff 	mov.w	r0, #4294967295
 8019434:	f000 f951 	bl	80196da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8019438:	4a06      	ldr	r2, [pc, #24]	@ (8019454 <HAL_InitTick+0x68>)
 801943a:	687b      	ldr	r3, [r7, #4]
 801943c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 801943e:	2300      	movs	r3, #0
 8019440:	e000      	b.n	8019444 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8019442:	2301      	movs	r3, #1
}
 8019444:	4618      	mov	r0, r3
 8019446:	3708      	adds	r7, #8
 8019448:	46bd      	mov	sp, r7
 801944a:	bd80      	pop	{r7, pc}
 801944c:	24000028 	.word	0x24000028
 8019450:	2400001c 	.word	0x2400001c
 8019454:	24000024 	.word	0x24000024

08019458 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8019458:	b480      	push	{r7}
 801945a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 801945c:	4b06      	ldr	r3, [pc, #24]	@ (8019478 <HAL_IncTick+0x20>)
 801945e:	781b      	ldrb	r3, [r3, #0]
 8019460:	461a      	mov	r2, r3
 8019462:	4b06      	ldr	r3, [pc, #24]	@ (801947c <HAL_IncTick+0x24>)
 8019464:	681b      	ldr	r3, [r3, #0]
 8019466:	4413      	add	r3, r2
 8019468:	4a04      	ldr	r2, [pc, #16]	@ (801947c <HAL_IncTick+0x24>)
 801946a:	6013      	str	r3, [r2, #0]
}
 801946c:	bf00      	nop
 801946e:	46bd      	mov	sp, r7
 8019470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019474:	4770      	bx	lr
 8019476:	bf00      	nop
 8019478:	24000028 	.word	0x24000028
 801947c:	24000414 	.word	0x24000414

08019480 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8019480:	b480      	push	{r7}
 8019482:	af00      	add	r7, sp, #0
  return uwTick;
 8019484:	4b03      	ldr	r3, [pc, #12]	@ (8019494 <HAL_GetTick+0x14>)
 8019486:	681b      	ldr	r3, [r3, #0]
}
 8019488:	4618      	mov	r0, r3
 801948a:	46bd      	mov	sp, r7
 801948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019490:	4770      	bx	lr
 8019492:	bf00      	nop
 8019494:	24000414 	.word	0x24000414

08019498 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8019498:	b580      	push	{r7, lr}
 801949a:	b084      	sub	sp, #16
 801949c:	af00      	add	r7, sp, #0
 801949e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80194a0:	f7ff ffee 	bl	8019480 <HAL_GetTick>
 80194a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80194a6:	687b      	ldr	r3, [r7, #4]
 80194a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80194aa:	68fb      	ldr	r3, [r7, #12]
 80194ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80194b0:	d005      	beq.n	80194be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80194b2:	4b0a      	ldr	r3, [pc, #40]	@ (80194dc <HAL_Delay+0x44>)
 80194b4:	781b      	ldrb	r3, [r3, #0]
 80194b6:	461a      	mov	r2, r3
 80194b8:	68fb      	ldr	r3, [r7, #12]
 80194ba:	4413      	add	r3, r2
 80194bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80194be:	bf00      	nop
 80194c0:	f7ff ffde 	bl	8019480 <HAL_GetTick>
 80194c4:	4602      	mov	r2, r0
 80194c6:	68bb      	ldr	r3, [r7, #8]
 80194c8:	1ad3      	subs	r3, r2, r3
 80194ca:	68fa      	ldr	r2, [r7, #12]
 80194cc:	429a      	cmp	r2, r3
 80194ce:	d8f7      	bhi.n	80194c0 <HAL_Delay+0x28>
  {
  }
}
 80194d0:	bf00      	nop
 80194d2:	bf00      	nop
 80194d4:	3710      	adds	r7, #16
 80194d6:	46bd      	mov	sp, r7
 80194d8:	bd80      	pop	{r7, pc}
 80194da:	bf00      	nop
 80194dc:	24000028 	.word	0x24000028

080194e0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80194e0:	b480      	push	{r7}
 80194e2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80194e4:	4b03      	ldr	r3, [pc, #12]	@ (80194f4 <HAL_GetREVID+0x14>)
 80194e6:	681b      	ldr	r3, [r3, #0]
 80194e8:	0c1b      	lsrs	r3, r3, #16
}
 80194ea:	4618      	mov	r0, r3
 80194ec:	46bd      	mov	sp, r7
 80194ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194f2:	4770      	bx	lr
 80194f4:	5c001000 	.word	0x5c001000

080194f8 <__NVIC_SetPriorityGrouping>:
{
 80194f8:	b480      	push	{r7}
 80194fa:	b085      	sub	sp, #20
 80194fc:	af00      	add	r7, sp, #0
 80194fe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8019500:	687b      	ldr	r3, [r7, #4]
 8019502:	f003 0307 	and.w	r3, r3, #7
 8019506:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8019508:	4b0b      	ldr	r3, [pc, #44]	@ (8019538 <__NVIC_SetPriorityGrouping+0x40>)
 801950a:	68db      	ldr	r3, [r3, #12]
 801950c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801950e:	68ba      	ldr	r2, [r7, #8]
 8019510:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8019514:	4013      	ands	r3, r2
 8019516:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8019518:	68fb      	ldr	r3, [r7, #12]
 801951a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801951c:	68bb      	ldr	r3, [r7, #8]
 801951e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8019520:	4b06      	ldr	r3, [pc, #24]	@ (801953c <__NVIC_SetPriorityGrouping+0x44>)
 8019522:	4313      	orrs	r3, r2
 8019524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8019526:	4a04      	ldr	r2, [pc, #16]	@ (8019538 <__NVIC_SetPriorityGrouping+0x40>)
 8019528:	68bb      	ldr	r3, [r7, #8]
 801952a:	60d3      	str	r3, [r2, #12]
}
 801952c:	bf00      	nop
 801952e:	3714      	adds	r7, #20
 8019530:	46bd      	mov	sp, r7
 8019532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019536:	4770      	bx	lr
 8019538:	e000ed00 	.word	0xe000ed00
 801953c:	05fa0000 	.word	0x05fa0000

08019540 <__NVIC_GetPriorityGrouping>:
{
 8019540:	b480      	push	{r7}
 8019542:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8019544:	4b04      	ldr	r3, [pc, #16]	@ (8019558 <__NVIC_GetPriorityGrouping+0x18>)
 8019546:	68db      	ldr	r3, [r3, #12]
 8019548:	0a1b      	lsrs	r3, r3, #8
 801954a:	f003 0307 	and.w	r3, r3, #7
}
 801954e:	4618      	mov	r0, r3
 8019550:	46bd      	mov	sp, r7
 8019552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019556:	4770      	bx	lr
 8019558:	e000ed00 	.word	0xe000ed00

0801955c <__NVIC_EnableIRQ>:
{
 801955c:	b480      	push	{r7}
 801955e:	b083      	sub	sp, #12
 8019560:	af00      	add	r7, sp, #0
 8019562:	4603      	mov	r3, r0
 8019564:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8019566:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801956a:	2b00      	cmp	r3, #0
 801956c:	db0b      	blt.n	8019586 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801956e:	88fb      	ldrh	r3, [r7, #6]
 8019570:	f003 021f 	and.w	r2, r3, #31
 8019574:	4907      	ldr	r1, [pc, #28]	@ (8019594 <__NVIC_EnableIRQ+0x38>)
 8019576:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801957a:	095b      	lsrs	r3, r3, #5
 801957c:	2001      	movs	r0, #1
 801957e:	fa00 f202 	lsl.w	r2, r0, r2
 8019582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8019586:	bf00      	nop
 8019588:	370c      	adds	r7, #12
 801958a:	46bd      	mov	sp, r7
 801958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019590:	4770      	bx	lr
 8019592:	bf00      	nop
 8019594:	e000e100 	.word	0xe000e100

08019598 <__NVIC_SetPriority>:
{
 8019598:	b480      	push	{r7}
 801959a:	b083      	sub	sp, #12
 801959c:	af00      	add	r7, sp, #0
 801959e:	4603      	mov	r3, r0
 80195a0:	6039      	str	r1, [r7, #0]
 80195a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80195a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80195a8:	2b00      	cmp	r3, #0
 80195aa:	db0a      	blt.n	80195c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80195ac:	683b      	ldr	r3, [r7, #0]
 80195ae:	b2da      	uxtb	r2, r3
 80195b0:	490c      	ldr	r1, [pc, #48]	@ (80195e4 <__NVIC_SetPriority+0x4c>)
 80195b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80195b6:	0112      	lsls	r2, r2, #4
 80195b8:	b2d2      	uxtb	r2, r2
 80195ba:	440b      	add	r3, r1
 80195bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80195c0:	e00a      	b.n	80195d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80195c2:	683b      	ldr	r3, [r7, #0]
 80195c4:	b2da      	uxtb	r2, r3
 80195c6:	4908      	ldr	r1, [pc, #32]	@ (80195e8 <__NVIC_SetPriority+0x50>)
 80195c8:	88fb      	ldrh	r3, [r7, #6]
 80195ca:	f003 030f 	and.w	r3, r3, #15
 80195ce:	3b04      	subs	r3, #4
 80195d0:	0112      	lsls	r2, r2, #4
 80195d2:	b2d2      	uxtb	r2, r2
 80195d4:	440b      	add	r3, r1
 80195d6:	761a      	strb	r2, [r3, #24]
}
 80195d8:	bf00      	nop
 80195da:	370c      	adds	r7, #12
 80195dc:	46bd      	mov	sp, r7
 80195de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195e2:	4770      	bx	lr
 80195e4:	e000e100 	.word	0xe000e100
 80195e8:	e000ed00 	.word	0xe000ed00

080195ec <NVIC_EncodePriority>:
{
 80195ec:	b480      	push	{r7}
 80195ee:	b089      	sub	sp, #36	@ 0x24
 80195f0:	af00      	add	r7, sp, #0
 80195f2:	60f8      	str	r0, [r7, #12]
 80195f4:	60b9      	str	r1, [r7, #8]
 80195f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80195f8:	68fb      	ldr	r3, [r7, #12]
 80195fa:	f003 0307 	and.w	r3, r3, #7
 80195fe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8019600:	69fb      	ldr	r3, [r7, #28]
 8019602:	f1c3 0307 	rsb	r3, r3, #7
 8019606:	2b04      	cmp	r3, #4
 8019608:	bf28      	it	cs
 801960a:	2304      	movcs	r3, #4
 801960c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801960e:	69fb      	ldr	r3, [r7, #28]
 8019610:	3304      	adds	r3, #4
 8019612:	2b06      	cmp	r3, #6
 8019614:	d902      	bls.n	801961c <NVIC_EncodePriority+0x30>
 8019616:	69fb      	ldr	r3, [r7, #28]
 8019618:	3b03      	subs	r3, #3
 801961a:	e000      	b.n	801961e <NVIC_EncodePriority+0x32>
 801961c:	2300      	movs	r3, #0
 801961e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8019620:	f04f 32ff 	mov.w	r2, #4294967295
 8019624:	69bb      	ldr	r3, [r7, #24]
 8019626:	fa02 f303 	lsl.w	r3, r2, r3
 801962a:	43da      	mvns	r2, r3
 801962c:	68bb      	ldr	r3, [r7, #8]
 801962e:	401a      	ands	r2, r3
 8019630:	697b      	ldr	r3, [r7, #20]
 8019632:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8019634:	f04f 31ff 	mov.w	r1, #4294967295
 8019638:	697b      	ldr	r3, [r7, #20]
 801963a:	fa01 f303 	lsl.w	r3, r1, r3
 801963e:	43d9      	mvns	r1, r3
 8019640:	687b      	ldr	r3, [r7, #4]
 8019642:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8019644:	4313      	orrs	r3, r2
}
 8019646:	4618      	mov	r0, r3
 8019648:	3724      	adds	r7, #36	@ 0x24
 801964a:	46bd      	mov	sp, r7
 801964c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019650:	4770      	bx	lr
	...

08019654 <__NVIC_SystemReset>:
{
 8019654:	b480      	push	{r7}
 8019656:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8019658:	f3bf 8f4f 	dsb	sy
}
 801965c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 801965e:	4b06      	ldr	r3, [pc, #24]	@ (8019678 <__NVIC_SystemReset+0x24>)
 8019660:	68db      	ldr	r3, [r3, #12]
 8019662:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8019666:	4904      	ldr	r1, [pc, #16]	@ (8019678 <__NVIC_SystemReset+0x24>)
 8019668:	4b04      	ldr	r3, [pc, #16]	@ (801967c <__NVIC_SystemReset+0x28>)
 801966a:	4313      	orrs	r3, r2
 801966c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801966e:	f3bf 8f4f 	dsb	sy
}
 8019672:	bf00      	nop
    __NOP();
 8019674:	bf00      	nop
 8019676:	e7fd      	b.n	8019674 <__NVIC_SystemReset+0x20>
 8019678:	e000ed00 	.word	0xe000ed00
 801967c:	05fa0004 	.word	0x05fa0004

08019680 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8019680:	b580      	push	{r7, lr}
 8019682:	b082      	sub	sp, #8
 8019684:	af00      	add	r7, sp, #0
 8019686:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8019688:	687b      	ldr	r3, [r7, #4]
 801968a:	3b01      	subs	r3, #1
 801968c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8019690:	d301      	bcc.n	8019696 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8019692:	2301      	movs	r3, #1
 8019694:	e00f      	b.n	80196b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8019696:	4a0a      	ldr	r2, [pc, #40]	@ (80196c0 <SysTick_Config+0x40>)
 8019698:	687b      	ldr	r3, [r7, #4]
 801969a:	3b01      	subs	r3, #1
 801969c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801969e:	210f      	movs	r1, #15
 80196a0:	f04f 30ff 	mov.w	r0, #4294967295
 80196a4:	f7ff ff78 	bl	8019598 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80196a8:	4b05      	ldr	r3, [pc, #20]	@ (80196c0 <SysTick_Config+0x40>)
 80196aa:	2200      	movs	r2, #0
 80196ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80196ae:	4b04      	ldr	r3, [pc, #16]	@ (80196c0 <SysTick_Config+0x40>)
 80196b0:	2207      	movs	r2, #7
 80196b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80196b4:	2300      	movs	r3, #0
}
 80196b6:	4618      	mov	r0, r3
 80196b8:	3708      	adds	r7, #8
 80196ba:	46bd      	mov	sp, r7
 80196bc:	bd80      	pop	{r7, pc}
 80196be:	bf00      	nop
 80196c0:	e000e010 	.word	0xe000e010

080196c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80196c4:	b580      	push	{r7, lr}
 80196c6:	b082      	sub	sp, #8
 80196c8:	af00      	add	r7, sp, #0
 80196ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80196cc:	6878      	ldr	r0, [r7, #4]
 80196ce:	f7ff ff13 	bl	80194f8 <__NVIC_SetPriorityGrouping>
}
 80196d2:	bf00      	nop
 80196d4:	3708      	adds	r7, #8
 80196d6:	46bd      	mov	sp, r7
 80196d8:	bd80      	pop	{r7, pc}

080196da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80196da:	b580      	push	{r7, lr}
 80196dc:	b086      	sub	sp, #24
 80196de:	af00      	add	r7, sp, #0
 80196e0:	4603      	mov	r3, r0
 80196e2:	60b9      	str	r1, [r7, #8]
 80196e4:	607a      	str	r2, [r7, #4]
 80196e6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80196e8:	f7ff ff2a 	bl	8019540 <__NVIC_GetPriorityGrouping>
 80196ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80196ee:	687a      	ldr	r2, [r7, #4]
 80196f0:	68b9      	ldr	r1, [r7, #8]
 80196f2:	6978      	ldr	r0, [r7, #20]
 80196f4:	f7ff ff7a 	bl	80195ec <NVIC_EncodePriority>
 80196f8:	4602      	mov	r2, r0
 80196fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80196fe:	4611      	mov	r1, r2
 8019700:	4618      	mov	r0, r3
 8019702:	f7ff ff49 	bl	8019598 <__NVIC_SetPriority>
}
 8019706:	bf00      	nop
 8019708:	3718      	adds	r7, #24
 801970a:	46bd      	mov	sp, r7
 801970c:	bd80      	pop	{r7, pc}

0801970e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801970e:	b580      	push	{r7, lr}
 8019710:	b082      	sub	sp, #8
 8019712:	af00      	add	r7, sp, #0
 8019714:	4603      	mov	r3, r0
 8019716:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8019718:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801971c:	4618      	mov	r0, r3
 801971e:	f7ff ff1d 	bl	801955c <__NVIC_EnableIRQ>
}
 8019722:	bf00      	nop
 8019724:	3708      	adds	r7, #8
 8019726:	46bd      	mov	sp, r7
 8019728:	bd80      	pop	{r7, pc}

0801972a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 801972a:	b580      	push	{r7, lr}
 801972c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 801972e:	f7ff ff91 	bl	8019654 <__NVIC_SystemReset>

08019732 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8019732:	b580      	push	{r7, lr}
 8019734:	b082      	sub	sp, #8
 8019736:	af00      	add	r7, sp, #0
 8019738:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801973a:	6878      	ldr	r0, [r7, #4]
 801973c:	f7ff ffa0 	bl	8019680 <SysTick_Config>
 8019740:	4603      	mov	r3, r0
}
 8019742:	4618      	mov	r0, r3
 8019744:	3708      	adds	r7, #8
 8019746:	46bd      	mov	sp, r7
 8019748:	bd80      	pop	{r7, pc}
	...

0801974c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 801974c:	b480      	push	{r7}
 801974e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8019750:	f3bf 8f5f 	dmb	sy
}
 8019754:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8019756:	4b07      	ldr	r3, [pc, #28]	@ (8019774 <HAL_MPU_Disable+0x28>)
 8019758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801975a:	4a06      	ldr	r2, [pc, #24]	@ (8019774 <HAL_MPU_Disable+0x28>)
 801975c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8019760:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8019762:	4b05      	ldr	r3, [pc, #20]	@ (8019778 <HAL_MPU_Disable+0x2c>)
 8019764:	2200      	movs	r2, #0
 8019766:	605a      	str	r2, [r3, #4]
}
 8019768:	bf00      	nop
 801976a:	46bd      	mov	sp, r7
 801976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019770:	4770      	bx	lr
 8019772:	bf00      	nop
 8019774:	e000ed00 	.word	0xe000ed00
 8019778:	e000ed90 	.word	0xe000ed90

0801977c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 801977c:	b480      	push	{r7}
 801977e:	b083      	sub	sp, #12
 8019780:	af00      	add	r7, sp, #0
 8019782:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8019784:	4a0b      	ldr	r2, [pc, #44]	@ (80197b4 <HAL_MPU_Enable+0x38>)
 8019786:	687b      	ldr	r3, [r7, #4]
 8019788:	f043 0301 	orr.w	r3, r3, #1
 801978c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 801978e:	4b0a      	ldr	r3, [pc, #40]	@ (80197b8 <HAL_MPU_Enable+0x3c>)
 8019790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019792:	4a09      	ldr	r2, [pc, #36]	@ (80197b8 <HAL_MPU_Enable+0x3c>)
 8019794:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8019798:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 801979a:	f3bf 8f4f 	dsb	sy
}
 801979e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80197a0:	f3bf 8f6f 	isb	sy
}
 80197a4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80197a6:	bf00      	nop
 80197a8:	370c      	adds	r7, #12
 80197aa:	46bd      	mov	sp, r7
 80197ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197b0:	4770      	bx	lr
 80197b2:	bf00      	nop
 80197b4:	e000ed90 	.word	0xe000ed90
 80197b8:	e000ed00 	.word	0xe000ed00

080197bc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80197bc:	b480      	push	{r7}
 80197be:	b083      	sub	sp, #12
 80197c0:	af00      	add	r7, sp, #0
 80197c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80197c4:	687b      	ldr	r3, [r7, #4]
 80197c6:	785a      	ldrb	r2, [r3, #1]
 80197c8:	4b1b      	ldr	r3, [pc, #108]	@ (8019838 <HAL_MPU_ConfigRegion+0x7c>)
 80197ca:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80197cc:	4b1a      	ldr	r3, [pc, #104]	@ (8019838 <HAL_MPU_ConfigRegion+0x7c>)
 80197ce:	691b      	ldr	r3, [r3, #16]
 80197d0:	4a19      	ldr	r2, [pc, #100]	@ (8019838 <HAL_MPU_ConfigRegion+0x7c>)
 80197d2:	f023 0301 	bic.w	r3, r3, #1
 80197d6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80197d8:	4a17      	ldr	r2, [pc, #92]	@ (8019838 <HAL_MPU_ConfigRegion+0x7c>)
 80197da:	687b      	ldr	r3, [r7, #4]
 80197dc:	685b      	ldr	r3, [r3, #4]
 80197de:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80197e0:	687b      	ldr	r3, [r7, #4]
 80197e2:	7b1b      	ldrb	r3, [r3, #12]
 80197e4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80197e6:	687b      	ldr	r3, [r7, #4]
 80197e8:	7adb      	ldrb	r3, [r3, #11]
 80197ea:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80197ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80197ee:	687b      	ldr	r3, [r7, #4]
 80197f0:	7a9b      	ldrb	r3, [r3, #10]
 80197f2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80197f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80197f6:	687b      	ldr	r3, [r7, #4]
 80197f8:	7b5b      	ldrb	r3, [r3, #13]
 80197fa:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80197fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80197fe:	687b      	ldr	r3, [r7, #4]
 8019800:	7b9b      	ldrb	r3, [r3, #14]
 8019802:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8019804:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8019806:	687b      	ldr	r3, [r7, #4]
 8019808:	7bdb      	ldrb	r3, [r3, #15]
 801980a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 801980c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 801980e:	687b      	ldr	r3, [r7, #4]
 8019810:	7a5b      	ldrb	r3, [r3, #9]
 8019812:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8019814:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8019816:	687b      	ldr	r3, [r7, #4]
 8019818:	7a1b      	ldrb	r3, [r3, #8]
 801981a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 801981c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 801981e:	687a      	ldr	r2, [r7, #4]
 8019820:	7812      	ldrb	r2, [r2, #0]
 8019822:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8019824:	4a04      	ldr	r2, [pc, #16]	@ (8019838 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8019826:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8019828:	6113      	str	r3, [r2, #16]
}
 801982a:	bf00      	nop
 801982c:	370c      	adds	r7, #12
 801982e:	46bd      	mov	sp, r7
 8019830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019834:	4770      	bx	lr
 8019836:	bf00      	nop
 8019838:	e000ed90 	.word	0xe000ed90

0801983c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801983c:	b580      	push	{r7, lr}
 801983e:	b086      	sub	sp, #24
 8019840:	af00      	add	r7, sp, #0
 8019842:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8019844:	f7ff fe1c 	bl	8019480 <HAL_GetTick>
 8019848:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 801984a:	687b      	ldr	r3, [r7, #4]
 801984c:	2b00      	cmp	r3, #0
 801984e:	d101      	bne.n	8019854 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8019850:	2301      	movs	r3, #1
 8019852:	e316      	b.n	8019e82 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8019854:	687b      	ldr	r3, [r7, #4]
 8019856:	681b      	ldr	r3, [r3, #0]
 8019858:	4a66      	ldr	r2, [pc, #408]	@ (80199f4 <HAL_DMA_Init+0x1b8>)
 801985a:	4293      	cmp	r3, r2
 801985c:	d04a      	beq.n	80198f4 <HAL_DMA_Init+0xb8>
 801985e:	687b      	ldr	r3, [r7, #4]
 8019860:	681b      	ldr	r3, [r3, #0]
 8019862:	4a65      	ldr	r2, [pc, #404]	@ (80199f8 <HAL_DMA_Init+0x1bc>)
 8019864:	4293      	cmp	r3, r2
 8019866:	d045      	beq.n	80198f4 <HAL_DMA_Init+0xb8>
 8019868:	687b      	ldr	r3, [r7, #4]
 801986a:	681b      	ldr	r3, [r3, #0]
 801986c:	4a63      	ldr	r2, [pc, #396]	@ (80199fc <HAL_DMA_Init+0x1c0>)
 801986e:	4293      	cmp	r3, r2
 8019870:	d040      	beq.n	80198f4 <HAL_DMA_Init+0xb8>
 8019872:	687b      	ldr	r3, [r7, #4]
 8019874:	681b      	ldr	r3, [r3, #0]
 8019876:	4a62      	ldr	r2, [pc, #392]	@ (8019a00 <HAL_DMA_Init+0x1c4>)
 8019878:	4293      	cmp	r3, r2
 801987a:	d03b      	beq.n	80198f4 <HAL_DMA_Init+0xb8>
 801987c:	687b      	ldr	r3, [r7, #4]
 801987e:	681b      	ldr	r3, [r3, #0]
 8019880:	4a60      	ldr	r2, [pc, #384]	@ (8019a04 <HAL_DMA_Init+0x1c8>)
 8019882:	4293      	cmp	r3, r2
 8019884:	d036      	beq.n	80198f4 <HAL_DMA_Init+0xb8>
 8019886:	687b      	ldr	r3, [r7, #4]
 8019888:	681b      	ldr	r3, [r3, #0]
 801988a:	4a5f      	ldr	r2, [pc, #380]	@ (8019a08 <HAL_DMA_Init+0x1cc>)
 801988c:	4293      	cmp	r3, r2
 801988e:	d031      	beq.n	80198f4 <HAL_DMA_Init+0xb8>
 8019890:	687b      	ldr	r3, [r7, #4]
 8019892:	681b      	ldr	r3, [r3, #0]
 8019894:	4a5d      	ldr	r2, [pc, #372]	@ (8019a0c <HAL_DMA_Init+0x1d0>)
 8019896:	4293      	cmp	r3, r2
 8019898:	d02c      	beq.n	80198f4 <HAL_DMA_Init+0xb8>
 801989a:	687b      	ldr	r3, [r7, #4]
 801989c:	681b      	ldr	r3, [r3, #0]
 801989e:	4a5c      	ldr	r2, [pc, #368]	@ (8019a10 <HAL_DMA_Init+0x1d4>)
 80198a0:	4293      	cmp	r3, r2
 80198a2:	d027      	beq.n	80198f4 <HAL_DMA_Init+0xb8>
 80198a4:	687b      	ldr	r3, [r7, #4]
 80198a6:	681b      	ldr	r3, [r3, #0]
 80198a8:	4a5a      	ldr	r2, [pc, #360]	@ (8019a14 <HAL_DMA_Init+0x1d8>)
 80198aa:	4293      	cmp	r3, r2
 80198ac:	d022      	beq.n	80198f4 <HAL_DMA_Init+0xb8>
 80198ae:	687b      	ldr	r3, [r7, #4]
 80198b0:	681b      	ldr	r3, [r3, #0]
 80198b2:	4a59      	ldr	r2, [pc, #356]	@ (8019a18 <HAL_DMA_Init+0x1dc>)
 80198b4:	4293      	cmp	r3, r2
 80198b6:	d01d      	beq.n	80198f4 <HAL_DMA_Init+0xb8>
 80198b8:	687b      	ldr	r3, [r7, #4]
 80198ba:	681b      	ldr	r3, [r3, #0]
 80198bc:	4a57      	ldr	r2, [pc, #348]	@ (8019a1c <HAL_DMA_Init+0x1e0>)
 80198be:	4293      	cmp	r3, r2
 80198c0:	d018      	beq.n	80198f4 <HAL_DMA_Init+0xb8>
 80198c2:	687b      	ldr	r3, [r7, #4]
 80198c4:	681b      	ldr	r3, [r3, #0]
 80198c6:	4a56      	ldr	r2, [pc, #344]	@ (8019a20 <HAL_DMA_Init+0x1e4>)
 80198c8:	4293      	cmp	r3, r2
 80198ca:	d013      	beq.n	80198f4 <HAL_DMA_Init+0xb8>
 80198cc:	687b      	ldr	r3, [r7, #4]
 80198ce:	681b      	ldr	r3, [r3, #0]
 80198d0:	4a54      	ldr	r2, [pc, #336]	@ (8019a24 <HAL_DMA_Init+0x1e8>)
 80198d2:	4293      	cmp	r3, r2
 80198d4:	d00e      	beq.n	80198f4 <HAL_DMA_Init+0xb8>
 80198d6:	687b      	ldr	r3, [r7, #4]
 80198d8:	681b      	ldr	r3, [r3, #0]
 80198da:	4a53      	ldr	r2, [pc, #332]	@ (8019a28 <HAL_DMA_Init+0x1ec>)
 80198dc:	4293      	cmp	r3, r2
 80198de:	d009      	beq.n	80198f4 <HAL_DMA_Init+0xb8>
 80198e0:	687b      	ldr	r3, [r7, #4]
 80198e2:	681b      	ldr	r3, [r3, #0]
 80198e4:	4a51      	ldr	r2, [pc, #324]	@ (8019a2c <HAL_DMA_Init+0x1f0>)
 80198e6:	4293      	cmp	r3, r2
 80198e8:	d004      	beq.n	80198f4 <HAL_DMA_Init+0xb8>
 80198ea:	687b      	ldr	r3, [r7, #4]
 80198ec:	681b      	ldr	r3, [r3, #0]
 80198ee:	4a50      	ldr	r2, [pc, #320]	@ (8019a30 <HAL_DMA_Init+0x1f4>)
 80198f0:	4293      	cmp	r3, r2
 80198f2:	d101      	bne.n	80198f8 <HAL_DMA_Init+0xbc>
 80198f4:	2301      	movs	r3, #1
 80198f6:	e000      	b.n	80198fa <HAL_DMA_Init+0xbe>
 80198f8:	2300      	movs	r3, #0
 80198fa:	2b00      	cmp	r3, #0
 80198fc:	f000 813b 	beq.w	8019b76 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8019900:	687b      	ldr	r3, [r7, #4]
 8019902:	2202      	movs	r2, #2
 8019904:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8019908:	687b      	ldr	r3, [r7, #4]
 801990a:	2200      	movs	r2, #0
 801990c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8019910:	687b      	ldr	r3, [r7, #4]
 8019912:	681b      	ldr	r3, [r3, #0]
 8019914:	4a37      	ldr	r2, [pc, #220]	@ (80199f4 <HAL_DMA_Init+0x1b8>)
 8019916:	4293      	cmp	r3, r2
 8019918:	d04a      	beq.n	80199b0 <HAL_DMA_Init+0x174>
 801991a:	687b      	ldr	r3, [r7, #4]
 801991c:	681b      	ldr	r3, [r3, #0]
 801991e:	4a36      	ldr	r2, [pc, #216]	@ (80199f8 <HAL_DMA_Init+0x1bc>)
 8019920:	4293      	cmp	r3, r2
 8019922:	d045      	beq.n	80199b0 <HAL_DMA_Init+0x174>
 8019924:	687b      	ldr	r3, [r7, #4]
 8019926:	681b      	ldr	r3, [r3, #0]
 8019928:	4a34      	ldr	r2, [pc, #208]	@ (80199fc <HAL_DMA_Init+0x1c0>)
 801992a:	4293      	cmp	r3, r2
 801992c:	d040      	beq.n	80199b0 <HAL_DMA_Init+0x174>
 801992e:	687b      	ldr	r3, [r7, #4]
 8019930:	681b      	ldr	r3, [r3, #0]
 8019932:	4a33      	ldr	r2, [pc, #204]	@ (8019a00 <HAL_DMA_Init+0x1c4>)
 8019934:	4293      	cmp	r3, r2
 8019936:	d03b      	beq.n	80199b0 <HAL_DMA_Init+0x174>
 8019938:	687b      	ldr	r3, [r7, #4]
 801993a:	681b      	ldr	r3, [r3, #0]
 801993c:	4a31      	ldr	r2, [pc, #196]	@ (8019a04 <HAL_DMA_Init+0x1c8>)
 801993e:	4293      	cmp	r3, r2
 8019940:	d036      	beq.n	80199b0 <HAL_DMA_Init+0x174>
 8019942:	687b      	ldr	r3, [r7, #4]
 8019944:	681b      	ldr	r3, [r3, #0]
 8019946:	4a30      	ldr	r2, [pc, #192]	@ (8019a08 <HAL_DMA_Init+0x1cc>)
 8019948:	4293      	cmp	r3, r2
 801994a:	d031      	beq.n	80199b0 <HAL_DMA_Init+0x174>
 801994c:	687b      	ldr	r3, [r7, #4]
 801994e:	681b      	ldr	r3, [r3, #0]
 8019950:	4a2e      	ldr	r2, [pc, #184]	@ (8019a0c <HAL_DMA_Init+0x1d0>)
 8019952:	4293      	cmp	r3, r2
 8019954:	d02c      	beq.n	80199b0 <HAL_DMA_Init+0x174>
 8019956:	687b      	ldr	r3, [r7, #4]
 8019958:	681b      	ldr	r3, [r3, #0]
 801995a:	4a2d      	ldr	r2, [pc, #180]	@ (8019a10 <HAL_DMA_Init+0x1d4>)
 801995c:	4293      	cmp	r3, r2
 801995e:	d027      	beq.n	80199b0 <HAL_DMA_Init+0x174>
 8019960:	687b      	ldr	r3, [r7, #4]
 8019962:	681b      	ldr	r3, [r3, #0]
 8019964:	4a2b      	ldr	r2, [pc, #172]	@ (8019a14 <HAL_DMA_Init+0x1d8>)
 8019966:	4293      	cmp	r3, r2
 8019968:	d022      	beq.n	80199b0 <HAL_DMA_Init+0x174>
 801996a:	687b      	ldr	r3, [r7, #4]
 801996c:	681b      	ldr	r3, [r3, #0]
 801996e:	4a2a      	ldr	r2, [pc, #168]	@ (8019a18 <HAL_DMA_Init+0x1dc>)
 8019970:	4293      	cmp	r3, r2
 8019972:	d01d      	beq.n	80199b0 <HAL_DMA_Init+0x174>
 8019974:	687b      	ldr	r3, [r7, #4]
 8019976:	681b      	ldr	r3, [r3, #0]
 8019978:	4a28      	ldr	r2, [pc, #160]	@ (8019a1c <HAL_DMA_Init+0x1e0>)
 801997a:	4293      	cmp	r3, r2
 801997c:	d018      	beq.n	80199b0 <HAL_DMA_Init+0x174>
 801997e:	687b      	ldr	r3, [r7, #4]
 8019980:	681b      	ldr	r3, [r3, #0]
 8019982:	4a27      	ldr	r2, [pc, #156]	@ (8019a20 <HAL_DMA_Init+0x1e4>)
 8019984:	4293      	cmp	r3, r2
 8019986:	d013      	beq.n	80199b0 <HAL_DMA_Init+0x174>
 8019988:	687b      	ldr	r3, [r7, #4]
 801998a:	681b      	ldr	r3, [r3, #0]
 801998c:	4a25      	ldr	r2, [pc, #148]	@ (8019a24 <HAL_DMA_Init+0x1e8>)
 801998e:	4293      	cmp	r3, r2
 8019990:	d00e      	beq.n	80199b0 <HAL_DMA_Init+0x174>
 8019992:	687b      	ldr	r3, [r7, #4]
 8019994:	681b      	ldr	r3, [r3, #0]
 8019996:	4a24      	ldr	r2, [pc, #144]	@ (8019a28 <HAL_DMA_Init+0x1ec>)
 8019998:	4293      	cmp	r3, r2
 801999a:	d009      	beq.n	80199b0 <HAL_DMA_Init+0x174>
 801999c:	687b      	ldr	r3, [r7, #4]
 801999e:	681b      	ldr	r3, [r3, #0]
 80199a0:	4a22      	ldr	r2, [pc, #136]	@ (8019a2c <HAL_DMA_Init+0x1f0>)
 80199a2:	4293      	cmp	r3, r2
 80199a4:	d004      	beq.n	80199b0 <HAL_DMA_Init+0x174>
 80199a6:	687b      	ldr	r3, [r7, #4]
 80199a8:	681b      	ldr	r3, [r3, #0]
 80199aa:	4a21      	ldr	r2, [pc, #132]	@ (8019a30 <HAL_DMA_Init+0x1f4>)
 80199ac:	4293      	cmp	r3, r2
 80199ae:	d108      	bne.n	80199c2 <HAL_DMA_Init+0x186>
 80199b0:	687b      	ldr	r3, [r7, #4]
 80199b2:	681b      	ldr	r3, [r3, #0]
 80199b4:	681a      	ldr	r2, [r3, #0]
 80199b6:	687b      	ldr	r3, [r7, #4]
 80199b8:	681b      	ldr	r3, [r3, #0]
 80199ba:	f022 0201 	bic.w	r2, r2, #1
 80199be:	601a      	str	r2, [r3, #0]
 80199c0:	e007      	b.n	80199d2 <HAL_DMA_Init+0x196>
 80199c2:	687b      	ldr	r3, [r7, #4]
 80199c4:	681b      	ldr	r3, [r3, #0]
 80199c6:	681a      	ldr	r2, [r3, #0]
 80199c8:	687b      	ldr	r3, [r7, #4]
 80199ca:	681b      	ldr	r3, [r3, #0]
 80199cc:	f022 0201 	bic.w	r2, r2, #1
 80199d0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80199d2:	e02f      	b.n	8019a34 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80199d4:	f7ff fd54 	bl	8019480 <HAL_GetTick>
 80199d8:	4602      	mov	r2, r0
 80199da:	693b      	ldr	r3, [r7, #16]
 80199dc:	1ad3      	subs	r3, r2, r3
 80199de:	2b05      	cmp	r3, #5
 80199e0:	d928      	bls.n	8019a34 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80199e2:	687b      	ldr	r3, [r7, #4]
 80199e4:	2220      	movs	r2, #32
 80199e6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80199e8:	687b      	ldr	r3, [r7, #4]
 80199ea:	2203      	movs	r2, #3
 80199ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80199f0:	2301      	movs	r3, #1
 80199f2:	e246      	b.n	8019e82 <HAL_DMA_Init+0x646>
 80199f4:	40020010 	.word	0x40020010
 80199f8:	40020028 	.word	0x40020028
 80199fc:	40020040 	.word	0x40020040
 8019a00:	40020058 	.word	0x40020058
 8019a04:	40020070 	.word	0x40020070
 8019a08:	40020088 	.word	0x40020088
 8019a0c:	400200a0 	.word	0x400200a0
 8019a10:	400200b8 	.word	0x400200b8
 8019a14:	40020410 	.word	0x40020410
 8019a18:	40020428 	.word	0x40020428
 8019a1c:	40020440 	.word	0x40020440
 8019a20:	40020458 	.word	0x40020458
 8019a24:	40020470 	.word	0x40020470
 8019a28:	40020488 	.word	0x40020488
 8019a2c:	400204a0 	.word	0x400204a0
 8019a30:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8019a34:	687b      	ldr	r3, [r7, #4]
 8019a36:	681b      	ldr	r3, [r3, #0]
 8019a38:	681b      	ldr	r3, [r3, #0]
 8019a3a:	f003 0301 	and.w	r3, r3, #1
 8019a3e:	2b00      	cmp	r3, #0
 8019a40:	d1c8      	bne.n	80199d4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8019a42:	687b      	ldr	r3, [r7, #4]
 8019a44:	681b      	ldr	r3, [r3, #0]
 8019a46:	681b      	ldr	r3, [r3, #0]
 8019a48:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8019a4a:	697a      	ldr	r2, [r7, #20]
 8019a4c:	4b83      	ldr	r3, [pc, #524]	@ (8019c5c <HAL_DMA_Init+0x420>)
 8019a4e:	4013      	ands	r3, r2
 8019a50:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8019a52:	687b      	ldr	r3, [r7, #4]
 8019a54:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8019a56:	687b      	ldr	r3, [r7, #4]
 8019a58:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8019a5a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8019a5c:	687b      	ldr	r3, [r7, #4]
 8019a5e:	691b      	ldr	r3, [r3, #16]
 8019a60:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8019a62:	687b      	ldr	r3, [r7, #4]
 8019a64:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8019a66:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8019a68:	687b      	ldr	r3, [r7, #4]
 8019a6a:	699b      	ldr	r3, [r3, #24]
 8019a6c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8019a6e:	687b      	ldr	r3, [r7, #4]
 8019a70:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8019a72:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8019a74:	687b      	ldr	r3, [r7, #4]
 8019a76:	6a1b      	ldr	r3, [r3, #32]
 8019a78:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8019a7a:	697a      	ldr	r2, [r7, #20]
 8019a7c:	4313      	orrs	r3, r2
 8019a7e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8019a80:	687b      	ldr	r3, [r7, #4]
 8019a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019a84:	2b04      	cmp	r3, #4
 8019a86:	d107      	bne.n	8019a98 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8019a88:	687b      	ldr	r3, [r7, #4]
 8019a8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019a8c:	687b      	ldr	r3, [r7, #4]
 8019a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019a90:	4313      	orrs	r3, r2
 8019a92:	697a      	ldr	r2, [r7, #20]
 8019a94:	4313      	orrs	r3, r2
 8019a96:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8019a98:	4b71      	ldr	r3, [pc, #452]	@ (8019c60 <HAL_DMA_Init+0x424>)
 8019a9a:	681a      	ldr	r2, [r3, #0]
 8019a9c:	4b71      	ldr	r3, [pc, #452]	@ (8019c64 <HAL_DMA_Init+0x428>)
 8019a9e:	4013      	ands	r3, r2
 8019aa0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8019aa4:	d328      	bcc.n	8019af8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8019aa6:	687b      	ldr	r3, [r7, #4]
 8019aa8:	685b      	ldr	r3, [r3, #4]
 8019aaa:	2b28      	cmp	r3, #40	@ 0x28
 8019aac:	d903      	bls.n	8019ab6 <HAL_DMA_Init+0x27a>
 8019aae:	687b      	ldr	r3, [r7, #4]
 8019ab0:	685b      	ldr	r3, [r3, #4]
 8019ab2:	2b2e      	cmp	r3, #46	@ 0x2e
 8019ab4:	d917      	bls.n	8019ae6 <HAL_DMA_Init+0x2aa>
 8019ab6:	687b      	ldr	r3, [r7, #4]
 8019ab8:	685b      	ldr	r3, [r3, #4]
 8019aba:	2b3e      	cmp	r3, #62	@ 0x3e
 8019abc:	d903      	bls.n	8019ac6 <HAL_DMA_Init+0x28a>
 8019abe:	687b      	ldr	r3, [r7, #4]
 8019ac0:	685b      	ldr	r3, [r3, #4]
 8019ac2:	2b42      	cmp	r3, #66	@ 0x42
 8019ac4:	d90f      	bls.n	8019ae6 <HAL_DMA_Init+0x2aa>
 8019ac6:	687b      	ldr	r3, [r7, #4]
 8019ac8:	685b      	ldr	r3, [r3, #4]
 8019aca:	2b46      	cmp	r3, #70	@ 0x46
 8019acc:	d903      	bls.n	8019ad6 <HAL_DMA_Init+0x29a>
 8019ace:	687b      	ldr	r3, [r7, #4]
 8019ad0:	685b      	ldr	r3, [r3, #4]
 8019ad2:	2b48      	cmp	r3, #72	@ 0x48
 8019ad4:	d907      	bls.n	8019ae6 <HAL_DMA_Init+0x2aa>
 8019ad6:	687b      	ldr	r3, [r7, #4]
 8019ad8:	685b      	ldr	r3, [r3, #4]
 8019ada:	2b4e      	cmp	r3, #78	@ 0x4e
 8019adc:	d905      	bls.n	8019aea <HAL_DMA_Init+0x2ae>
 8019ade:	687b      	ldr	r3, [r7, #4]
 8019ae0:	685b      	ldr	r3, [r3, #4]
 8019ae2:	2b52      	cmp	r3, #82	@ 0x52
 8019ae4:	d801      	bhi.n	8019aea <HAL_DMA_Init+0x2ae>
 8019ae6:	2301      	movs	r3, #1
 8019ae8:	e000      	b.n	8019aec <HAL_DMA_Init+0x2b0>
 8019aea:	2300      	movs	r3, #0
 8019aec:	2b00      	cmp	r3, #0
 8019aee:	d003      	beq.n	8019af8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8019af0:	697b      	ldr	r3, [r7, #20]
 8019af2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8019af6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8019af8:	687b      	ldr	r3, [r7, #4]
 8019afa:	681b      	ldr	r3, [r3, #0]
 8019afc:	697a      	ldr	r2, [r7, #20]
 8019afe:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8019b00:	687b      	ldr	r3, [r7, #4]
 8019b02:	681b      	ldr	r3, [r3, #0]
 8019b04:	695b      	ldr	r3, [r3, #20]
 8019b06:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8019b08:	697b      	ldr	r3, [r7, #20]
 8019b0a:	f023 0307 	bic.w	r3, r3, #7
 8019b0e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8019b10:	687b      	ldr	r3, [r7, #4]
 8019b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019b14:	697a      	ldr	r2, [r7, #20]
 8019b16:	4313      	orrs	r3, r2
 8019b18:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8019b1a:	687b      	ldr	r3, [r7, #4]
 8019b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019b1e:	2b04      	cmp	r3, #4
 8019b20:	d117      	bne.n	8019b52 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8019b22:	687b      	ldr	r3, [r7, #4]
 8019b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019b26:	697a      	ldr	r2, [r7, #20]
 8019b28:	4313      	orrs	r3, r2
 8019b2a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8019b2c:	687b      	ldr	r3, [r7, #4]
 8019b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019b30:	2b00      	cmp	r3, #0
 8019b32:	d00e      	beq.n	8019b52 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8019b34:	6878      	ldr	r0, [r7, #4]
 8019b36:	f001 fc23 	bl	801b380 <DMA_CheckFifoParam>
 8019b3a:	4603      	mov	r3, r0
 8019b3c:	2b00      	cmp	r3, #0
 8019b3e:	d008      	beq.n	8019b52 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8019b40:	687b      	ldr	r3, [r7, #4]
 8019b42:	2240      	movs	r2, #64	@ 0x40
 8019b44:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8019b46:	687b      	ldr	r3, [r7, #4]
 8019b48:	2201      	movs	r2, #1
 8019b4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8019b4e:	2301      	movs	r3, #1
 8019b50:	e197      	b.n	8019e82 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8019b52:	687b      	ldr	r3, [r7, #4]
 8019b54:	681b      	ldr	r3, [r3, #0]
 8019b56:	697a      	ldr	r2, [r7, #20]
 8019b58:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8019b5a:	6878      	ldr	r0, [r7, #4]
 8019b5c:	f001 fb5e 	bl	801b21c <DMA_CalcBaseAndBitshift>
 8019b60:	4603      	mov	r3, r0
 8019b62:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8019b64:	687b      	ldr	r3, [r7, #4]
 8019b66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8019b68:	f003 031f 	and.w	r3, r3, #31
 8019b6c:	223f      	movs	r2, #63	@ 0x3f
 8019b6e:	409a      	lsls	r2, r3
 8019b70:	68bb      	ldr	r3, [r7, #8]
 8019b72:	609a      	str	r2, [r3, #8]
 8019b74:	e0cd      	b.n	8019d12 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8019b76:	687b      	ldr	r3, [r7, #4]
 8019b78:	681b      	ldr	r3, [r3, #0]
 8019b7a:	4a3b      	ldr	r2, [pc, #236]	@ (8019c68 <HAL_DMA_Init+0x42c>)
 8019b7c:	4293      	cmp	r3, r2
 8019b7e:	d022      	beq.n	8019bc6 <HAL_DMA_Init+0x38a>
 8019b80:	687b      	ldr	r3, [r7, #4]
 8019b82:	681b      	ldr	r3, [r3, #0]
 8019b84:	4a39      	ldr	r2, [pc, #228]	@ (8019c6c <HAL_DMA_Init+0x430>)
 8019b86:	4293      	cmp	r3, r2
 8019b88:	d01d      	beq.n	8019bc6 <HAL_DMA_Init+0x38a>
 8019b8a:	687b      	ldr	r3, [r7, #4]
 8019b8c:	681b      	ldr	r3, [r3, #0]
 8019b8e:	4a38      	ldr	r2, [pc, #224]	@ (8019c70 <HAL_DMA_Init+0x434>)
 8019b90:	4293      	cmp	r3, r2
 8019b92:	d018      	beq.n	8019bc6 <HAL_DMA_Init+0x38a>
 8019b94:	687b      	ldr	r3, [r7, #4]
 8019b96:	681b      	ldr	r3, [r3, #0]
 8019b98:	4a36      	ldr	r2, [pc, #216]	@ (8019c74 <HAL_DMA_Init+0x438>)
 8019b9a:	4293      	cmp	r3, r2
 8019b9c:	d013      	beq.n	8019bc6 <HAL_DMA_Init+0x38a>
 8019b9e:	687b      	ldr	r3, [r7, #4]
 8019ba0:	681b      	ldr	r3, [r3, #0]
 8019ba2:	4a35      	ldr	r2, [pc, #212]	@ (8019c78 <HAL_DMA_Init+0x43c>)
 8019ba4:	4293      	cmp	r3, r2
 8019ba6:	d00e      	beq.n	8019bc6 <HAL_DMA_Init+0x38a>
 8019ba8:	687b      	ldr	r3, [r7, #4]
 8019baa:	681b      	ldr	r3, [r3, #0]
 8019bac:	4a33      	ldr	r2, [pc, #204]	@ (8019c7c <HAL_DMA_Init+0x440>)
 8019bae:	4293      	cmp	r3, r2
 8019bb0:	d009      	beq.n	8019bc6 <HAL_DMA_Init+0x38a>
 8019bb2:	687b      	ldr	r3, [r7, #4]
 8019bb4:	681b      	ldr	r3, [r3, #0]
 8019bb6:	4a32      	ldr	r2, [pc, #200]	@ (8019c80 <HAL_DMA_Init+0x444>)
 8019bb8:	4293      	cmp	r3, r2
 8019bba:	d004      	beq.n	8019bc6 <HAL_DMA_Init+0x38a>
 8019bbc:	687b      	ldr	r3, [r7, #4]
 8019bbe:	681b      	ldr	r3, [r3, #0]
 8019bc0:	4a30      	ldr	r2, [pc, #192]	@ (8019c84 <HAL_DMA_Init+0x448>)
 8019bc2:	4293      	cmp	r3, r2
 8019bc4:	d101      	bne.n	8019bca <HAL_DMA_Init+0x38e>
 8019bc6:	2301      	movs	r3, #1
 8019bc8:	e000      	b.n	8019bcc <HAL_DMA_Init+0x390>
 8019bca:	2300      	movs	r3, #0
 8019bcc:	2b00      	cmp	r3, #0
 8019bce:	f000 8097 	beq.w	8019d00 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8019bd2:	687b      	ldr	r3, [r7, #4]
 8019bd4:	681b      	ldr	r3, [r3, #0]
 8019bd6:	4a24      	ldr	r2, [pc, #144]	@ (8019c68 <HAL_DMA_Init+0x42c>)
 8019bd8:	4293      	cmp	r3, r2
 8019bda:	d021      	beq.n	8019c20 <HAL_DMA_Init+0x3e4>
 8019bdc:	687b      	ldr	r3, [r7, #4]
 8019bde:	681b      	ldr	r3, [r3, #0]
 8019be0:	4a22      	ldr	r2, [pc, #136]	@ (8019c6c <HAL_DMA_Init+0x430>)
 8019be2:	4293      	cmp	r3, r2
 8019be4:	d01c      	beq.n	8019c20 <HAL_DMA_Init+0x3e4>
 8019be6:	687b      	ldr	r3, [r7, #4]
 8019be8:	681b      	ldr	r3, [r3, #0]
 8019bea:	4a21      	ldr	r2, [pc, #132]	@ (8019c70 <HAL_DMA_Init+0x434>)
 8019bec:	4293      	cmp	r3, r2
 8019bee:	d017      	beq.n	8019c20 <HAL_DMA_Init+0x3e4>
 8019bf0:	687b      	ldr	r3, [r7, #4]
 8019bf2:	681b      	ldr	r3, [r3, #0]
 8019bf4:	4a1f      	ldr	r2, [pc, #124]	@ (8019c74 <HAL_DMA_Init+0x438>)
 8019bf6:	4293      	cmp	r3, r2
 8019bf8:	d012      	beq.n	8019c20 <HAL_DMA_Init+0x3e4>
 8019bfa:	687b      	ldr	r3, [r7, #4]
 8019bfc:	681b      	ldr	r3, [r3, #0]
 8019bfe:	4a1e      	ldr	r2, [pc, #120]	@ (8019c78 <HAL_DMA_Init+0x43c>)
 8019c00:	4293      	cmp	r3, r2
 8019c02:	d00d      	beq.n	8019c20 <HAL_DMA_Init+0x3e4>
 8019c04:	687b      	ldr	r3, [r7, #4]
 8019c06:	681b      	ldr	r3, [r3, #0]
 8019c08:	4a1c      	ldr	r2, [pc, #112]	@ (8019c7c <HAL_DMA_Init+0x440>)
 8019c0a:	4293      	cmp	r3, r2
 8019c0c:	d008      	beq.n	8019c20 <HAL_DMA_Init+0x3e4>
 8019c0e:	687b      	ldr	r3, [r7, #4]
 8019c10:	681b      	ldr	r3, [r3, #0]
 8019c12:	4a1b      	ldr	r2, [pc, #108]	@ (8019c80 <HAL_DMA_Init+0x444>)
 8019c14:	4293      	cmp	r3, r2
 8019c16:	d003      	beq.n	8019c20 <HAL_DMA_Init+0x3e4>
 8019c18:	687b      	ldr	r3, [r7, #4]
 8019c1a:	681b      	ldr	r3, [r3, #0]
 8019c1c:	4a19      	ldr	r2, [pc, #100]	@ (8019c84 <HAL_DMA_Init+0x448>)
 8019c1e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8019c20:	687b      	ldr	r3, [r7, #4]
 8019c22:	2202      	movs	r2, #2
 8019c24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8019c28:	687b      	ldr	r3, [r7, #4]
 8019c2a:	2200      	movs	r2, #0
 8019c2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8019c30:	687b      	ldr	r3, [r7, #4]
 8019c32:	681b      	ldr	r3, [r3, #0]
 8019c34:	681b      	ldr	r3, [r3, #0]
 8019c36:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8019c38:	697a      	ldr	r2, [r7, #20]
 8019c3a:	4b13      	ldr	r3, [pc, #76]	@ (8019c88 <HAL_DMA_Init+0x44c>)
 8019c3c:	4013      	ands	r3, r2
 8019c3e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8019c40:	687b      	ldr	r3, [r7, #4]
 8019c42:	689b      	ldr	r3, [r3, #8]
 8019c44:	2b40      	cmp	r3, #64	@ 0x40
 8019c46:	d021      	beq.n	8019c8c <HAL_DMA_Init+0x450>
 8019c48:	687b      	ldr	r3, [r7, #4]
 8019c4a:	689b      	ldr	r3, [r3, #8]
 8019c4c:	2b80      	cmp	r3, #128	@ 0x80
 8019c4e:	d102      	bne.n	8019c56 <HAL_DMA_Init+0x41a>
 8019c50:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8019c54:	e01b      	b.n	8019c8e <HAL_DMA_Init+0x452>
 8019c56:	2300      	movs	r3, #0
 8019c58:	e019      	b.n	8019c8e <HAL_DMA_Init+0x452>
 8019c5a:	bf00      	nop
 8019c5c:	fe10803f 	.word	0xfe10803f
 8019c60:	5c001000 	.word	0x5c001000
 8019c64:	ffff0000 	.word	0xffff0000
 8019c68:	58025408 	.word	0x58025408
 8019c6c:	5802541c 	.word	0x5802541c
 8019c70:	58025430 	.word	0x58025430
 8019c74:	58025444 	.word	0x58025444
 8019c78:	58025458 	.word	0x58025458
 8019c7c:	5802546c 	.word	0x5802546c
 8019c80:	58025480 	.word	0x58025480
 8019c84:	58025494 	.word	0x58025494
 8019c88:	fffe000f 	.word	0xfffe000f
 8019c8c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8019c8e:	687a      	ldr	r2, [r7, #4]
 8019c90:	68d2      	ldr	r2, [r2, #12]
 8019c92:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8019c94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8019c96:	687b      	ldr	r3, [r7, #4]
 8019c98:	691b      	ldr	r3, [r3, #16]
 8019c9a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8019c9c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8019c9e:	687b      	ldr	r3, [r7, #4]
 8019ca0:	695b      	ldr	r3, [r3, #20]
 8019ca2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8019ca4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8019ca6:	687b      	ldr	r3, [r7, #4]
 8019ca8:	699b      	ldr	r3, [r3, #24]
 8019caa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8019cac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8019cae:	687b      	ldr	r3, [r7, #4]
 8019cb0:	69db      	ldr	r3, [r3, #28]
 8019cb2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8019cb4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8019cb6:	687b      	ldr	r3, [r7, #4]
 8019cb8:	6a1b      	ldr	r3, [r3, #32]
 8019cba:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8019cbc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8019cbe:	697a      	ldr	r2, [r7, #20]
 8019cc0:	4313      	orrs	r3, r2
 8019cc2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8019cc4:	687b      	ldr	r3, [r7, #4]
 8019cc6:	681b      	ldr	r3, [r3, #0]
 8019cc8:	697a      	ldr	r2, [r7, #20]
 8019cca:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8019ccc:	687b      	ldr	r3, [r7, #4]
 8019cce:	681b      	ldr	r3, [r3, #0]
 8019cd0:	461a      	mov	r2, r3
 8019cd2:	4b6e      	ldr	r3, [pc, #440]	@ (8019e8c <HAL_DMA_Init+0x650>)
 8019cd4:	4413      	add	r3, r2
 8019cd6:	4a6e      	ldr	r2, [pc, #440]	@ (8019e90 <HAL_DMA_Init+0x654>)
 8019cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8019cdc:	091b      	lsrs	r3, r3, #4
 8019cde:	009a      	lsls	r2, r3, #2
 8019ce0:	687b      	ldr	r3, [r7, #4]
 8019ce2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8019ce4:	6878      	ldr	r0, [r7, #4]
 8019ce6:	f001 fa99 	bl	801b21c <DMA_CalcBaseAndBitshift>
 8019cea:	4603      	mov	r3, r0
 8019cec:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8019cee:	687b      	ldr	r3, [r7, #4]
 8019cf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8019cf2:	f003 031f 	and.w	r3, r3, #31
 8019cf6:	2201      	movs	r2, #1
 8019cf8:	409a      	lsls	r2, r3
 8019cfa:	68fb      	ldr	r3, [r7, #12]
 8019cfc:	605a      	str	r2, [r3, #4]
 8019cfe:	e008      	b.n	8019d12 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8019d00:	687b      	ldr	r3, [r7, #4]
 8019d02:	2240      	movs	r2, #64	@ 0x40
 8019d04:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8019d06:	687b      	ldr	r3, [r7, #4]
 8019d08:	2203      	movs	r2, #3
 8019d0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8019d0e:	2301      	movs	r3, #1
 8019d10:	e0b7      	b.n	8019e82 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8019d12:	687b      	ldr	r3, [r7, #4]
 8019d14:	681b      	ldr	r3, [r3, #0]
 8019d16:	4a5f      	ldr	r2, [pc, #380]	@ (8019e94 <HAL_DMA_Init+0x658>)
 8019d18:	4293      	cmp	r3, r2
 8019d1a:	d072      	beq.n	8019e02 <HAL_DMA_Init+0x5c6>
 8019d1c:	687b      	ldr	r3, [r7, #4]
 8019d1e:	681b      	ldr	r3, [r3, #0]
 8019d20:	4a5d      	ldr	r2, [pc, #372]	@ (8019e98 <HAL_DMA_Init+0x65c>)
 8019d22:	4293      	cmp	r3, r2
 8019d24:	d06d      	beq.n	8019e02 <HAL_DMA_Init+0x5c6>
 8019d26:	687b      	ldr	r3, [r7, #4]
 8019d28:	681b      	ldr	r3, [r3, #0]
 8019d2a:	4a5c      	ldr	r2, [pc, #368]	@ (8019e9c <HAL_DMA_Init+0x660>)
 8019d2c:	4293      	cmp	r3, r2
 8019d2e:	d068      	beq.n	8019e02 <HAL_DMA_Init+0x5c6>
 8019d30:	687b      	ldr	r3, [r7, #4]
 8019d32:	681b      	ldr	r3, [r3, #0]
 8019d34:	4a5a      	ldr	r2, [pc, #360]	@ (8019ea0 <HAL_DMA_Init+0x664>)
 8019d36:	4293      	cmp	r3, r2
 8019d38:	d063      	beq.n	8019e02 <HAL_DMA_Init+0x5c6>
 8019d3a:	687b      	ldr	r3, [r7, #4]
 8019d3c:	681b      	ldr	r3, [r3, #0]
 8019d3e:	4a59      	ldr	r2, [pc, #356]	@ (8019ea4 <HAL_DMA_Init+0x668>)
 8019d40:	4293      	cmp	r3, r2
 8019d42:	d05e      	beq.n	8019e02 <HAL_DMA_Init+0x5c6>
 8019d44:	687b      	ldr	r3, [r7, #4]
 8019d46:	681b      	ldr	r3, [r3, #0]
 8019d48:	4a57      	ldr	r2, [pc, #348]	@ (8019ea8 <HAL_DMA_Init+0x66c>)
 8019d4a:	4293      	cmp	r3, r2
 8019d4c:	d059      	beq.n	8019e02 <HAL_DMA_Init+0x5c6>
 8019d4e:	687b      	ldr	r3, [r7, #4]
 8019d50:	681b      	ldr	r3, [r3, #0]
 8019d52:	4a56      	ldr	r2, [pc, #344]	@ (8019eac <HAL_DMA_Init+0x670>)
 8019d54:	4293      	cmp	r3, r2
 8019d56:	d054      	beq.n	8019e02 <HAL_DMA_Init+0x5c6>
 8019d58:	687b      	ldr	r3, [r7, #4]
 8019d5a:	681b      	ldr	r3, [r3, #0]
 8019d5c:	4a54      	ldr	r2, [pc, #336]	@ (8019eb0 <HAL_DMA_Init+0x674>)
 8019d5e:	4293      	cmp	r3, r2
 8019d60:	d04f      	beq.n	8019e02 <HAL_DMA_Init+0x5c6>
 8019d62:	687b      	ldr	r3, [r7, #4]
 8019d64:	681b      	ldr	r3, [r3, #0]
 8019d66:	4a53      	ldr	r2, [pc, #332]	@ (8019eb4 <HAL_DMA_Init+0x678>)
 8019d68:	4293      	cmp	r3, r2
 8019d6a:	d04a      	beq.n	8019e02 <HAL_DMA_Init+0x5c6>
 8019d6c:	687b      	ldr	r3, [r7, #4]
 8019d6e:	681b      	ldr	r3, [r3, #0]
 8019d70:	4a51      	ldr	r2, [pc, #324]	@ (8019eb8 <HAL_DMA_Init+0x67c>)
 8019d72:	4293      	cmp	r3, r2
 8019d74:	d045      	beq.n	8019e02 <HAL_DMA_Init+0x5c6>
 8019d76:	687b      	ldr	r3, [r7, #4]
 8019d78:	681b      	ldr	r3, [r3, #0]
 8019d7a:	4a50      	ldr	r2, [pc, #320]	@ (8019ebc <HAL_DMA_Init+0x680>)
 8019d7c:	4293      	cmp	r3, r2
 8019d7e:	d040      	beq.n	8019e02 <HAL_DMA_Init+0x5c6>
 8019d80:	687b      	ldr	r3, [r7, #4]
 8019d82:	681b      	ldr	r3, [r3, #0]
 8019d84:	4a4e      	ldr	r2, [pc, #312]	@ (8019ec0 <HAL_DMA_Init+0x684>)
 8019d86:	4293      	cmp	r3, r2
 8019d88:	d03b      	beq.n	8019e02 <HAL_DMA_Init+0x5c6>
 8019d8a:	687b      	ldr	r3, [r7, #4]
 8019d8c:	681b      	ldr	r3, [r3, #0]
 8019d8e:	4a4d      	ldr	r2, [pc, #308]	@ (8019ec4 <HAL_DMA_Init+0x688>)
 8019d90:	4293      	cmp	r3, r2
 8019d92:	d036      	beq.n	8019e02 <HAL_DMA_Init+0x5c6>
 8019d94:	687b      	ldr	r3, [r7, #4]
 8019d96:	681b      	ldr	r3, [r3, #0]
 8019d98:	4a4b      	ldr	r2, [pc, #300]	@ (8019ec8 <HAL_DMA_Init+0x68c>)
 8019d9a:	4293      	cmp	r3, r2
 8019d9c:	d031      	beq.n	8019e02 <HAL_DMA_Init+0x5c6>
 8019d9e:	687b      	ldr	r3, [r7, #4]
 8019da0:	681b      	ldr	r3, [r3, #0]
 8019da2:	4a4a      	ldr	r2, [pc, #296]	@ (8019ecc <HAL_DMA_Init+0x690>)
 8019da4:	4293      	cmp	r3, r2
 8019da6:	d02c      	beq.n	8019e02 <HAL_DMA_Init+0x5c6>
 8019da8:	687b      	ldr	r3, [r7, #4]
 8019daa:	681b      	ldr	r3, [r3, #0]
 8019dac:	4a48      	ldr	r2, [pc, #288]	@ (8019ed0 <HAL_DMA_Init+0x694>)
 8019dae:	4293      	cmp	r3, r2
 8019db0:	d027      	beq.n	8019e02 <HAL_DMA_Init+0x5c6>
 8019db2:	687b      	ldr	r3, [r7, #4]
 8019db4:	681b      	ldr	r3, [r3, #0]
 8019db6:	4a47      	ldr	r2, [pc, #284]	@ (8019ed4 <HAL_DMA_Init+0x698>)
 8019db8:	4293      	cmp	r3, r2
 8019dba:	d022      	beq.n	8019e02 <HAL_DMA_Init+0x5c6>
 8019dbc:	687b      	ldr	r3, [r7, #4]
 8019dbe:	681b      	ldr	r3, [r3, #0]
 8019dc0:	4a45      	ldr	r2, [pc, #276]	@ (8019ed8 <HAL_DMA_Init+0x69c>)
 8019dc2:	4293      	cmp	r3, r2
 8019dc4:	d01d      	beq.n	8019e02 <HAL_DMA_Init+0x5c6>
 8019dc6:	687b      	ldr	r3, [r7, #4]
 8019dc8:	681b      	ldr	r3, [r3, #0]
 8019dca:	4a44      	ldr	r2, [pc, #272]	@ (8019edc <HAL_DMA_Init+0x6a0>)
 8019dcc:	4293      	cmp	r3, r2
 8019dce:	d018      	beq.n	8019e02 <HAL_DMA_Init+0x5c6>
 8019dd0:	687b      	ldr	r3, [r7, #4]
 8019dd2:	681b      	ldr	r3, [r3, #0]
 8019dd4:	4a42      	ldr	r2, [pc, #264]	@ (8019ee0 <HAL_DMA_Init+0x6a4>)
 8019dd6:	4293      	cmp	r3, r2
 8019dd8:	d013      	beq.n	8019e02 <HAL_DMA_Init+0x5c6>
 8019dda:	687b      	ldr	r3, [r7, #4]
 8019ddc:	681b      	ldr	r3, [r3, #0]
 8019dde:	4a41      	ldr	r2, [pc, #260]	@ (8019ee4 <HAL_DMA_Init+0x6a8>)
 8019de0:	4293      	cmp	r3, r2
 8019de2:	d00e      	beq.n	8019e02 <HAL_DMA_Init+0x5c6>
 8019de4:	687b      	ldr	r3, [r7, #4]
 8019de6:	681b      	ldr	r3, [r3, #0]
 8019de8:	4a3f      	ldr	r2, [pc, #252]	@ (8019ee8 <HAL_DMA_Init+0x6ac>)
 8019dea:	4293      	cmp	r3, r2
 8019dec:	d009      	beq.n	8019e02 <HAL_DMA_Init+0x5c6>
 8019dee:	687b      	ldr	r3, [r7, #4]
 8019df0:	681b      	ldr	r3, [r3, #0]
 8019df2:	4a3e      	ldr	r2, [pc, #248]	@ (8019eec <HAL_DMA_Init+0x6b0>)
 8019df4:	4293      	cmp	r3, r2
 8019df6:	d004      	beq.n	8019e02 <HAL_DMA_Init+0x5c6>
 8019df8:	687b      	ldr	r3, [r7, #4]
 8019dfa:	681b      	ldr	r3, [r3, #0]
 8019dfc:	4a3c      	ldr	r2, [pc, #240]	@ (8019ef0 <HAL_DMA_Init+0x6b4>)
 8019dfe:	4293      	cmp	r3, r2
 8019e00:	d101      	bne.n	8019e06 <HAL_DMA_Init+0x5ca>
 8019e02:	2301      	movs	r3, #1
 8019e04:	e000      	b.n	8019e08 <HAL_DMA_Init+0x5cc>
 8019e06:	2300      	movs	r3, #0
 8019e08:	2b00      	cmp	r3, #0
 8019e0a:	d032      	beq.n	8019e72 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8019e0c:	6878      	ldr	r0, [r7, #4]
 8019e0e:	f001 fb33 	bl	801b478 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8019e12:	687b      	ldr	r3, [r7, #4]
 8019e14:	689b      	ldr	r3, [r3, #8]
 8019e16:	2b80      	cmp	r3, #128	@ 0x80
 8019e18:	d102      	bne.n	8019e20 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8019e1a:	687b      	ldr	r3, [r7, #4]
 8019e1c:	2200      	movs	r2, #0
 8019e1e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8019e20:	687b      	ldr	r3, [r7, #4]
 8019e22:	685a      	ldr	r2, [r3, #4]
 8019e24:	687b      	ldr	r3, [r7, #4]
 8019e26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8019e28:	b2d2      	uxtb	r2, r2
 8019e2a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8019e2c:	687b      	ldr	r3, [r7, #4]
 8019e2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8019e30:	687a      	ldr	r2, [r7, #4]
 8019e32:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8019e34:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8019e36:	687b      	ldr	r3, [r7, #4]
 8019e38:	685b      	ldr	r3, [r3, #4]
 8019e3a:	2b00      	cmp	r3, #0
 8019e3c:	d010      	beq.n	8019e60 <HAL_DMA_Init+0x624>
 8019e3e:	687b      	ldr	r3, [r7, #4]
 8019e40:	685b      	ldr	r3, [r3, #4]
 8019e42:	2b08      	cmp	r3, #8
 8019e44:	d80c      	bhi.n	8019e60 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8019e46:	6878      	ldr	r0, [r7, #4]
 8019e48:	f001 fbb0 	bl	801b5ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8019e4c:	687b      	ldr	r3, [r7, #4]
 8019e4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019e50:	2200      	movs	r2, #0
 8019e52:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8019e54:	687b      	ldr	r3, [r7, #4]
 8019e56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019e58:	687a      	ldr	r2, [r7, #4]
 8019e5a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8019e5c:	605a      	str	r2, [r3, #4]
 8019e5e:	e008      	b.n	8019e72 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8019e60:	687b      	ldr	r3, [r7, #4]
 8019e62:	2200      	movs	r2, #0
 8019e64:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8019e66:	687b      	ldr	r3, [r7, #4]
 8019e68:	2200      	movs	r2, #0
 8019e6a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8019e6c:	687b      	ldr	r3, [r7, #4]
 8019e6e:	2200      	movs	r2, #0
 8019e70:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8019e72:	687b      	ldr	r3, [r7, #4]
 8019e74:	2200      	movs	r2, #0
 8019e76:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8019e78:	687b      	ldr	r3, [r7, #4]
 8019e7a:	2201      	movs	r2, #1
 8019e7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8019e80:	2300      	movs	r3, #0
}
 8019e82:	4618      	mov	r0, r3
 8019e84:	3718      	adds	r7, #24
 8019e86:	46bd      	mov	sp, r7
 8019e88:	bd80      	pop	{r7, pc}
 8019e8a:	bf00      	nop
 8019e8c:	a7fdabf8 	.word	0xa7fdabf8
 8019e90:	cccccccd 	.word	0xcccccccd
 8019e94:	40020010 	.word	0x40020010
 8019e98:	40020028 	.word	0x40020028
 8019e9c:	40020040 	.word	0x40020040
 8019ea0:	40020058 	.word	0x40020058
 8019ea4:	40020070 	.word	0x40020070
 8019ea8:	40020088 	.word	0x40020088
 8019eac:	400200a0 	.word	0x400200a0
 8019eb0:	400200b8 	.word	0x400200b8
 8019eb4:	40020410 	.word	0x40020410
 8019eb8:	40020428 	.word	0x40020428
 8019ebc:	40020440 	.word	0x40020440
 8019ec0:	40020458 	.word	0x40020458
 8019ec4:	40020470 	.word	0x40020470
 8019ec8:	40020488 	.word	0x40020488
 8019ecc:	400204a0 	.word	0x400204a0
 8019ed0:	400204b8 	.word	0x400204b8
 8019ed4:	58025408 	.word	0x58025408
 8019ed8:	5802541c 	.word	0x5802541c
 8019edc:	58025430 	.word	0x58025430
 8019ee0:	58025444 	.word	0x58025444
 8019ee4:	58025458 	.word	0x58025458
 8019ee8:	5802546c 	.word	0x5802546c
 8019eec:	58025480 	.word	0x58025480
 8019ef0:	58025494 	.word	0x58025494

08019ef4 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8019ef4:	b580      	push	{r7, lr}
 8019ef6:	b086      	sub	sp, #24
 8019ef8:	af00      	add	r7, sp, #0
 8019efa:	60f8      	str	r0, [r7, #12]
 8019efc:	60b9      	str	r1, [r7, #8]
 8019efe:	607a      	str	r2, [r7, #4]
 8019f00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8019f02:	2300      	movs	r3, #0
 8019f04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8019f06:	68fb      	ldr	r3, [r7, #12]
 8019f08:	2b00      	cmp	r3, #0
 8019f0a:	d101      	bne.n	8019f10 <HAL_DMA_Start+0x1c>
  {
    return HAL_ERROR;
 8019f0c:	2301      	movs	r3, #1
 8019f0e:	e0ec      	b.n	801a0ea <HAL_DMA_Start+0x1f6>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8019f10:	68fb      	ldr	r3, [r7, #12]
 8019f12:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8019f16:	2b01      	cmp	r3, #1
 8019f18:	d101      	bne.n	8019f1e <HAL_DMA_Start+0x2a>
 8019f1a:	2302      	movs	r3, #2
 8019f1c:	e0e5      	b.n	801a0ea <HAL_DMA_Start+0x1f6>
 8019f1e:	68fb      	ldr	r3, [r7, #12]
 8019f20:	2201      	movs	r2, #1
 8019f22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8019f26:	68fb      	ldr	r3, [r7, #12]
 8019f28:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8019f2c:	b2db      	uxtb	r3, r3
 8019f2e:	2b01      	cmp	r3, #1
 8019f30:	f040 80d0 	bne.w	801a0d4 <HAL_DMA_Start+0x1e0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8019f34:	68fb      	ldr	r3, [r7, #12]
 8019f36:	2202      	movs	r2, #2
 8019f38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8019f3c:	68fb      	ldr	r3, [r7, #12]
 8019f3e:	2200      	movs	r2, #0
 8019f40:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8019f42:	68fb      	ldr	r3, [r7, #12]
 8019f44:	681b      	ldr	r3, [r3, #0]
 8019f46:	4a6b      	ldr	r2, [pc, #428]	@ (801a0f4 <HAL_DMA_Start+0x200>)
 8019f48:	4293      	cmp	r3, r2
 8019f4a:	d04a      	beq.n	8019fe2 <HAL_DMA_Start+0xee>
 8019f4c:	68fb      	ldr	r3, [r7, #12]
 8019f4e:	681b      	ldr	r3, [r3, #0]
 8019f50:	4a69      	ldr	r2, [pc, #420]	@ (801a0f8 <HAL_DMA_Start+0x204>)
 8019f52:	4293      	cmp	r3, r2
 8019f54:	d045      	beq.n	8019fe2 <HAL_DMA_Start+0xee>
 8019f56:	68fb      	ldr	r3, [r7, #12]
 8019f58:	681b      	ldr	r3, [r3, #0]
 8019f5a:	4a68      	ldr	r2, [pc, #416]	@ (801a0fc <HAL_DMA_Start+0x208>)
 8019f5c:	4293      	cmp	r3, r2
 8019f5e:	d040      	beq.n	8019fe2 <HAL_DMA_Start+0xee>
 8019f60:	68fb      	ldr	r3, [r7, #12]
 8019f62:	681b      	ldr	r3, [r3, #0]
 8019f64:	4a66      	ldr	r2, [pc, #408]	@ (801a100 <HAL_DMA_Start+0x20c>)
 8019f66:	4293      	cmp	r3, r2
 8019f68:	d03b      	beq.n	8019fe2 <HAL_DMA_Start+0xee>
 8019f6a:	68fb      	ldr	r3, [r7, #12]
 8019f6c:	681b      	ldr	r3, [r3, #0]
 8019f6e:	4a65      	ldr	r2, [pc, #404]	@ (801a104 <HAL_DMA_Start+0x210>)
 8019f70:	4293      	cmp	r3, r2
 8019f72:	d036      	beq.n	8019fe2 <HAL_DMA_Start+0xee>
 8019f74:	68fb      	ldr	r3, [r7, #12]
 8019f76:	681b      	ldr	r3, [r3, #0]
 8019f78:	4a63      	ldr	r2, [pc, #396]	@ (801a108 <HAL_DMA_Start+0x214>)
 8019f7a:	4293      	cmp	r3, r2
 8019f7c:	d031      	beq.n	8019fe2 <HAL_DMA_Start+0xee>
 8019f7e:	68fb      	ldr	r3, [r7, #12]
 8019f80:	681b      	ldr	r3, [r3, #0]
 8019f82:	4a62      	ldr	r2, [pc, #392]	@ (801a10c <HAL_DMA_Start+0x218>)
 8019f84:	4293      	cmp	r3, r2
 8019f86:	d02c      	beq.n	8019fe2 <HAL_DMA_Start+0xee>
 8019f88:	68fb      	ldr	r3, [r7, #12]
 8019f8a:	681b      	ldr	r3, [r3, #0]
 8019f8c:	4a60      	ldr	r2, [pc, #384]	@ (801a110 <HAL_DMA_Start+0x21c>)
 8019f8e:	4293      	cmp	r3, r2
 8019f90:	d027      	beq.n	8019fe2 <HAL_DMA_Start+0xee>
 8019f92:	68fb      	ldr	r3, [r7, #12]
 8019f94:	681b      	ldr	r3, [r3, #0]
 8019f96:	4a5f      	ldr	r2, [pc, #380]	@ (801a114 <HAL_DMA_Start+0x220>)
 8019f98:	4293      	cmp	r3, r2
 8019f9a:	d022      	beq.n	8019fe2 <HAL_DMA_Start+0xee>
 8019f9c:	68fb      	ldr	r3, [r7, #12]
 8019f9e:	681b      	ldr	r3, [r3, #0]
 8019fa0:	4a5d      	ldr	r2, [pc, #372]	@ (801a118 <HAL_DMA_Start+0x224>)
 8019fa2:	4293      	cmp	r3, r2
 8019fa4:	d01d      	beq.n	8019fe2 <HAL_DMA_Start+0xee>
 8019fa6:	68fb      	ldr	r3, [r7, #12]
 8019fa8:	681b      	ldr	r3, [r3, #0]
 8019faa:	4a5c      	ldr	r2, [pc, #368]	@ (801a11c <HAL_DMA_Start+0x228>)
 8019fac:	4293      	cmp	r3, r2
 8019fae:	d018      	beq.n	8019fe2 <HAL_DMA_Start+0xee>
 8019fb0:	68fb      	ldr	r3, [r7, #12]
 8019fb2:	681b      	ldr	r3, [r3, #0]
 8019fb4:	4a5a      	ldr	r2, [pc, #360]	@ (801a120 <HAL_DMA_Start+0x22c>)
 8019fb6:	4293      	cmp	r3, r2
 8019fb8:	d013      	beq.n	8019fe2 <HAL_DMA_Start+0xee>
 8019fba:	68fb      	ldr	r3, [r7, #12]
 8019fbc:	681b      	ldr	r3, [r3, #0]
 8019fbe:	4a59      	ldr	r2, [pc, #356]	@ (801a124 <HAL_DMA_Start+0x230>)
 8019fc0:	4293      	cmp	r3, r2
 8019fc2:	d00e      	beq.n	8019fe2 <HAL_DMA_Start+0xee>
 8019fc4:	68fb      	ldr	r3, [r7, #12]
 8019fc6:	681b      	ldr	r3, [r3, #0]
 8019fc8:	4a57      	ldr	r2, [pc, #348]	@ (801a128 <HAL_DMA_Start+0x234>)
 8019fca:	4293      	cmp	r3, r2
 8019fcc:	d009      	beq.n	8019fe2 <HAL_DMA_Start+0xee>
 8019fce:	68fb      	ldr	r3, [r7, #12]
 8019fd0:	681b      	ldr	r3, [r3, #0]
 8019fd2:	4a56      	ldr	r2, [pc, #344]	@ (801a12c <HAL_DMA_Start+0x238>)
 8019fd4:	4293      	cmp	r3, r2
 8019fd6:	d004      	beq.n	8019fe2 <HAL_DMA_Start+0xee>
 8019fd8:	68fb      	ldr	r3, [r7, #12]
 8019fda:	681b      	ldr	r3, [r3, #0]
 8019fdc:	4a54      	ldr	r2, [pc, #336]	@ (801a130 <HAL_DMA_Start+0x23c>)
 8019fde:	4293      	cmp	r3, r2
 8019fe0:	d108      	bne.n	8019ff4 <HAL_DMA_Start+0x100>
 8019fe2:	68fb      	ldr	r3, [r7, #12]
 8019fe4:	681b      	ldr	r3, [r3, #0]
 8019fe6:	681a      	ldr	r2, [r3, #0]
 8019fe8:	68fb      	ldr	r3, [r7, #12]
 8019fea:	681b      	ldr	r3, [r3, #0]
 8019fec:	f022 0201 	bic.w	r2, r2, #1
 8019ff0:	601a      	str	r2, [r3, #0]
 8019ff2:	e007      	b.n	801a004 <HAL_DMA_Start+0x110>
 8019ff4:	68fb      	ldr	r3, [r7, #12]
 8019ff6:	681b      	ldr	r3, [r3, #0]
 8019ff8:	681a      	ldr	r2, [r3, #0]
 8019ffa:	68fb      	ldr	r3, [r7, #12]
 8019ffc:	681b      	ldr	r3, [r3, #0]
 8019ffe:	f022 0201 	bic.w	r2, r2, #1
 801a002:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801a004:	683b      	ldr	r3, [r7, #0]
 801a006:	687a      	ldr	r2, [r7, #4]
 801a008:	68b9      	ldr	r1, [r7, #8]
 801a00a:	68f8      	ldr	r0, [r7, #12]
 801a00c:	f000 ff5a 	bl	801aec4 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801a010:	68fb      	ldr	r3, [r7, #12]
 801a012:	681b      	ldr	r3, [r3, #0]
 801a014:	4a37      	ldr	r2, [pc, #220]	@ (801a0f4 <HAL_DMA_Start+0x200>)
 801a016:	4293      	cmp	r3, r2
 801a018:	d04a      	beq.n	801a0b0 <HAL_DMA_Start+0x1bc>
 801a01a:	68fb      	ldr	r3, [r7, #12]
 801a01c:	681b      	ldr	r3, [r3, #0]
 801a01e:	4a36      	ldr	r2, [pc, #216]	@ (801a0f8 <HAL_DMA_Start+0x204>)
 801a020:	4293      	cmp	r3, r2
 801a022:	d045      	beq.n	801a0b0 <HAL_DMA_Start+0x1bc>
 801a024:	68fb      	ldr	r3, [r7, #12]
 801a026:	681b      	ldr	r3, [r3, #0]
 801a028:	4a34      	ldr	r2, [pc, #208]	@ (801a0fc <HAL_DMA_Start+0x208>)
 801a02a:	4293      	cmp	r3, r2
 801a02c:	d040      	beq.n	801a0b0 <HAL_DMA_Start+0x1bc>
 801a02e:	68fb      	ldr	r3, [r7, #12]
 801a030:	681b      	ldr	r3, [r3, #0]
 801a032:	4a33      	ldr	r2, [pc, #204]	@ (801a100 <HAL_DMA_Start+0x20c>)
 801a034:	4293      	cmp	r3, r2
 801a036:	d03b      	beq.n	801a0b0 <HAL_DMA_Start+0x1bc>
 801a038:	68fb      	ldr	r3, [r7, #12]
 801a03a:	681b      	ldr	r3, [r3, #0]
 801a03c:	4a31      	ldr	r2, [pc, #196]	@ (801a104 <HAL_DMA_Start+0x210>)
 801a03e:	4293      	cmp	r3, r2
 801a040:	d036      	beq.n	801a0b0 <HAL_DMA_Start+0x1bc>
 801a042:	68fb      	ldr	r3, [r7, #12]
 801a044:	681b      	ldr	r3, [r3, #0]
 801a046:	4a30      	ldr	r2, [pc, #192]	@ (801a108 <HAL_DMA_Start+0x214>)
 801a048:	4293      	cmp	r3, r2
 801a04a:	d031      	beq.n	801a0b0 <HAL_DMA_Start+0x1bc>
 801a04c:	68fb      	ldr	r3, [r7, #12]
 801a04e:	681b      	ldr	r3, [r3, #0]
 801a050:	4a2e      	ldr	r2, [pc, #184]	@ (801a10c <HAL_DMA_Start+0x218>)
 801a052:	4293      	cmp	r3, r2
 801a054:	d02c      	beq.n	801a0b0 <HAL_DMA_Start+0x1bc>
 801a056:	68fb      	ldr	r3, [r7, #12]
 801a058:	681b      	ldr	r3, [r3, #0]
 801a05a:	4a2d      	ldr	r2, [pc, #180]	@ (801a110 <HAL_DMA_Start+0x21c>)
 801a05c:	4293      	cmp	r3, r2
 801a05e:	d027      	beq.n	801a0b0 <HAL_DMA_Start+0x1bc>
 801a060:	68fb      	ldr	r3, [r7, #12]
 801a062:	681b      	ldr	r3, [r3, #0]
 801a064:	4a2b      	ldr	r2, [pc, #172]	@ (801a114 <HAL_DMA_Start+0x220>)
 801a066:	4293      	cmp	r3, r2
 801a068:	d022      	beq.n	801a0b0 <HAL_DMA_Start+0x1bc>
 801a06a:	68fb      	ldr	r3, [r7, #12]
 801a06c:	681b      	ldr	r3, [r3, #0]
 801a06e:	4a2a      	ldr	r2, [pc, #168]	@ (801a118 <HAL_DMA_Start+0x224>)
 801a070:	4293      	cmp	r3, r2
 801a072:	d01d      	beq.n	801a0b0 <HAL_DMA_Start+0x1bc>
 801a074:	68fb      	ldr	r3, [r7, #12]
 801a076:	681b      	ldr	r3, [r3, #0]
 801a078:	4a28      	ldr	r2, [pc, #160]	@ (801a11c <HAL_DMA_Start+0x228>)
 801a07a:	4293      	cmp	r3, r2
 801a07c:	d018      	beq.n	801a0b0 <HAL_DMA_Start+0x1bc>
 801a07e:	68fb      	ldr	r3, [r7, #12]
 801a080:	681b      	ldr	r3, [r3, #0]
 801a082:	4a27      	ldr	r2, [pc, #156]	@ (801a120 <HAL_DMA_Start+0x22c>)
 801a084:	4293      	cmp	r3, r2
 801a086:	d013      	beq.n	801a0b0 <HAL_DMA_Start+0x1bc>
 801a088:	68fb      	ldr	r3, [r7, #12]
 801a08a:	681b      	ldr	r3, [r3, #0]
 801a08c:	4a25      	ldr	r2, [pc, #148]	@ (801a124 <HAL_DMA_Start+0x230>)
 801a08e:	4293      	cmp	r3, r2
 801a090:	d00e      	beq.n	801a0b0 <HAL_DMA_Start+0x1bc>
 801a092:	68fb      	ldr	r3, [r7, #12]
 801a094:	681b      	ldr	r3, [r3, #0]
 801a096:	4a24      	ldr	r2, [pc, #144]	@ (801a128 <HAL_DMA_Start+0x234>)
 801a098:	4293      	cmp	r3, r2
 801a09a:	d009      	beq.n	801a0b0 <HAL_DMA_Start+0x1bc>
 801a09c:	68fb      	ldr	r3, [r7, #12]
 801a09e:	681b      	ldr	r3, [r3, #0]
 801a0a0:	4a22      	ldr	r2, [pc, #136]	@ (801a12c <HAL_DMA_Start+0x238>)
 801a0a2:	4293      	cmp	r3, r2
 801a0a4:	d004      	beq.n	801a0b0 <HAL_DMA_Start+0x1bc>
 801a0a6:	68fb      	ldr	r3, [r7, #12]
 801a0a8:	681b      	ldr	r3, [r3, #0]
 801a0aa:	4a21      	ldr	r2, [pc, #132]	@ (801a130 <HAL_DMA_Start+0x23c>)
 801a0ac:	4293      	cmp	r3, r2
 801a0ae:	d108      	bne.n	801a0c2 <HAL_DMA_Start+0x1ce>
 801a0b0:	68fb      	ldr	r3, [r7, #12]
 801a0b2:	681b      	ldr	r3, [r3, #0]
 801a0b4:	681a      	ldr	r2, [r3, #0]
 801a0b6:	68fb      	ldr	r3, [r7, #12]
 801a0b8:	681b      	ldr	r3, [r3, #0]
 801a0ba:	f042 0201 	orr.w	r2, r2, #1
 801a0be:	601a      	str	r2, [r3, #0]
 801a0c0:	e012      	b.n	801a0e8 <HAL_DMA_Start+0x1f4>
 801a0c2:	68fb      	ldr	r3, [r7, #12]
 801a0c4:	681b      	ldr	r3, [r3, #0]
 801a0c6:	681a      	ldr	r2, [r3, #0]
 801a0c8:	68fb      	ldr	r3, [r7, #12]
 801a0ca:	681b      	ldr	r3, [r3, #0]
 801a0cc:	f042 0201 	orr.w	r2, r2, #1
 801a0d0:	601a      	str	r2, [r3, #0]
 801a0d2:	e009      	b.n	801a0e8 <HAL_DMA_Start+0x1f4>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 801a0d4:	68fb      	ldr	r3, [r7, #12]
 801a0d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801a0da:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 801a0dc:	68fb      	ldr	r3, [r7, #12]
 801a0de:	2200      	movs	r2, #0
 801a0e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 801a0e4:	2301      	movs	r3, #1
 801a0e6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 801a0e8:	7dfb      	ldrb	r3, [r7, #23]
}
 801a0ea:	4618      	mov	r0, r3
 801a0ec:	3718      	adds	r7, #24
 801a0ee:	46bd      	mov	sp, r7
 801a0f0:	bd80      	pop	{r7, pc}
 801a0f2:	bf00      	nop
 801a0f4:	40020010 	.word	0x40020010
 801a0f8:	40020028 	.word	0x40020028
 801a0fc:	40020040 	.word	0x40020040
 801a100:	40020058 	.word	0x40020058
 801a104:	40020070 	.word	0x40020070
 801a108:	40020088 	.word	0x40020088
 801a10c:	400200a0 	.word	0x400200a0
 801a110:	400200b8 	.word	0x400200b8
 801a114:	40020410 	.word	0x40020410
 801a118:	40020428 	.word	0x40020428
 801a11c:	40020440 	.word	0x40020440
 801a120:	40020458 	.word	0x40020458
 801a124:	40020470 	.word	0x40020470
 801a128:	40020488 	.word	0x40020488
 801a12c:	400204a0 	.word	0x400204a0
 801a130:	400204b8 	.word	0x400204b8

0801a134 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801a134:	b580      	push	{r7, lr}
 801a136:	b086      	sub	sp, #24
 801a138:	af00      	add	r7, sp, #0
 801a13a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 801a13c:	f7ff f9a0 	bl	8019480 <HAL_GetTick>
 801a140:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 801a142:	687b      	ldr	r3, [r7, #4]
 801a144:	2b00      	cmp	r3, #0
 801a146:	d101      	bne.n	801a14c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 801a148:	2301      	movs	r3, #1
 801a14a:	e2dc      	b.n	801a706 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801a14c:	687b      	ldr	r3, [r7, #4]
 801a14e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801a152:	b2db      	uxtb	r3, r3
 801a154:	2b02      	cmp	r3, #2
 801a156:	d008      	beq.n	801a16a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801a158:	687b      	ldr	r3, [r7, #4]
 801a15a:	2280      	movs	r2, #128	@ 0x80
 801a15c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801a15e:	687b      	ldr	r3, [r7, #4]
 801a160:	2200      	movs	r2, #0
 801a162:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 801a166:	2301      	movs	r3, #1
 801a168:	e2cd      	b.n	801a706 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801a16a:	687b      	ldr	r3, [r7, #4]
 801a16c:	681b      	ldr	r3, [r3, #0]
 801a16e:	4a76      	ldr	r2, [pc, #472]	@ (801a348 <HAL_DMA_Abort+0x214>)
 801a170:	4293      	cmp	r3, r2
 801a172:	d04a      	beq.n	801a20a <HAL_DMA_Abort+0xd6>
 801a174:	687b      	ldr	r3, [r7, #4]
 801a176:	681b      	ldr	r3, [r3, #0]
 801a178:	4a74      	ldr	r2, [pc, #464]	@ (801a34c <HAL_DMA_Abort+0x218>)
 801a17a:	4293      	cmp	r3, r2
 801a17c:	d045      	beq.n	801a20a <HAL_DMA_Abort+0xd6>
 801a17e:	687b      	ldr	r3, [r7, #4]
 801a180:	681b      	ldr	r3, [r3, #0]
 801a182:	4a73      	ldr	r2, [pc, #460]	@ (801a350 <HAL_DMA_Abort+0x21c>)
 801a184:	4293      	cmp	r3, r2
 801a186:	d040      	beq.n	801a20a <HAL_DMA_Abort+0xd6>
 801a188:	687b      	ldr	r3, [r7, #4]
 801a18a:	681b      	ldr	r3, [r3, #0]
 801a18c:	4a71      	ldr	r2, [pc, #452]	@ (801a354 <HAL_DMA_Abort+0x220>)
 801a18e:	4293      	cmp	r3, r2
 801a190:	d03b      	beq.n	801a20a <HAL_DMA_Abort+0xd6>
 801a192:	687b      	ldr	r3, [r7, #4]
 801a194:	681b      	ldr	r3, [r3, #0]
 801a196:	4a70      	ldr	r2, [pc, #448]	@ (801a358 <HAL_DMA_Abort+0x224>)
 801a198:	4293      	cmp	r3, r2
 801a19a:	d036      	beq.n	801a20a <HAL_DMA_Abort+0xd6>
 801a19c:	687b      	ldr	r3, [r7, #4]
 801a19e:	681b      	ldr	r3, [r3, #0]
 801a1a0:	4a6e      	ldr	r2, [pc, #440]	@ (801a35c <HAL_DMA_Abort+0x228>)
 801a1a2:	4293      	cmp	r3, r2
 801a1a4:	d031      	beq.n	801a20a <HAL_DMA_Abort+0xd6>
 801a1a6:	687b      	ldr	r3, [r7, #4]
 801a1a8:	681b      	ldr	r3, [r3, #0]
 801a1aa:	4a6d      	ldr	r2, [pc, #436]	@ (801a360 <HAL_DMA_Abort+0x22c>)
 801a1ac:	4293      	cmp	r3, r2
 801a1ae:	d02c      	beq.n	801a20a <HAL_DMA_Abort+0xd6>
 801a1b0:	687b      	ldr	r3, [r7, #4]
 801a1b2:	681b      	ldr	r3, [r3, #0]
 801a1b4:	4a6b      	ldr	r2, [pc, #428]	@ (801a364 <HAL_DMA_Abort+0x230>)
 801a1b6:	4293      	cmp	r3, r2
 801a1b8:	d027      	beq.n	801a20a <HAL_DMA_Abort+0xd6>
 801a1ba:	687b      	ldr	r3, [r7, #4]
 801a1bc:	681b      	ldr	r3, [r3, #0]
 801a1be:	4a6a      	ldr	r2, [pc, #424]	@ (801a368 <HAL_DMA_Abort+0x234>)
 801a1c0:	4293      	cmp	r3, r2
 801a1c2:	d022      	beq.n	801a20a <HAL_DMA_Abort+0xd6>
 801a1c4:	687b      	ldr	r3, [r7, #4]
 801a1c6:	681b      	ldr	r3, [r3, #0]
 801a1c8:	4a68      	ldr	r2, [pc, #416]	@ (801a36c <HAL_DMA_Abort+0x238>)
 801a1ca:	4293      	cmp	r3, r2
 801a1cc:	d01d      	beq.n	801a20a <HAL_DMA_Abort+0xd6>
 801a1ce:	687b      	ldr	r3, [r7, #4]
 801a1d0:	681b      	ldr	r3, [r3, #0]
 801a1d2:	4a67      	ldr	r2, [pc, #412]	@ (801a370 <HAL_DMA_Abort+0x23c>)
 801a1d4:	4293      	cmp	r3, r2
 801a1d6:	d018      	beq.n	801a20a <HAL_DMA_Abort+0xd6>
 801a1d8:	687b      	ldr	r3, [r7, #4]
 801a1da:	681b      	ldr	r3, [r3, #0]
 801a1dc:	4a65      	ldr	r2, [pc, #404]	@ (801a374 <HAL_DMA_Abort+0x240>)
 801a1de:	4293      	cmp	r3, r2
 801a1e0:	d013      	beq.n	801a20a <HAL_DMA_Abort+0xd6>
 801a1e2:	687b      	ldr	r3, [r7, #4]
 801a1e4:	681b      	ldr	r3, [r3, #0]
 801a1e6:	4a64      	ldr	r2, [pc, #400]	@ (801a378 <HAL_DMA_Abort+0x244>)
 801a1e8:	4293      	cmp	r3, r2
 801a1ea:	d00e      	beq.n	801a20a <HAL_DMA_Abort+0xd6>
 801a1ec:	687b      	ldr	r3, [r7, #4]
 801a1ee:	681b      	ldr	r3, [r3, #0]
 801a1f0:	4a62      	ldr	r2, [pc, #392]	@ (801a37c <HAL_DMA_Abort+0x248>)
 801a1f2:	4293      	cmp	r3, r2
 801a1f4:	d009      	beq.n	801a20a <HAL_DMA_Abort+0xd6>
 801a1f6:	687b      	ldr	r3, [r7, #4]
 801a1f8:	681b      	ldr	r3, [r3, #0]
 801a1fa:	4a61      	ldr	r2, [pc, #388]	@ (801a380 <HAL_DMA_Abort+0x24c>)
 801a1fc:	4293      	cmp	r3, r2
 801a1fe:	d004      	beq.n	801a20a <HAL_DMA_Abort+0xd6>
 801a200:	687b      	ldr	r3, [r7, #4]
 801a202:	681b      	ldr	r3, [r3, #0]
 801a204:	4a5f      	ldr	r2, [pc, #380]	@ (801a384 <HAL_DMA_Abort+0x250>)
 801a206:	4293      	cmp	r3, r2
 801a208:	d101      	bne.n	801a20e <HAL_DMA_Abort+0xda>
 801a20a:	2301      	movs	r3, #1
 801a20c:	e000      	b.n	801a210 <HAL_DMA_Abort+0xdc>
 801a20e:	2300      	movs	r3, #0
 801a210:	2b00      	cmp	r3, #0
 801a212:	d013      	beq.n	801a23c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 801a214:	687b      	ldr	r3, [r7, #4]
 801a216:	681b      	ldr	r3, [r3, #0]
 801a218:	681a      	ldr	r2, [r3, #0]
 801a21a:	687b      	ldr	r3, [r7, #4]
 801a21c:	681b      	ldr	r3, [r3, #0]
 801a21e:	f022 021e 	bic.w	r2, r2, #30
 801a222:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 801a224:	687b      	ldr	r3, [r7, #4]
 801a226:	681b      	ldr	r3, [r3, #0]
 801a228:	695a      	ldr	r2, [r3, #20]
 801a22a:	687b      	ldr	r3, [r7, #4]
 801a22c:	681b      	ldr	r3, [r3, #0]
 801a22e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801a232:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 801a234:	687b      	ldr	r3, [r7, #4]
 801a236:	681b      	ldr	r3, [r3, #0]
 801a238:	617b      	str	r3, [r7, #20]
 801a23a:	e00a      	b.n	801a252 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 801a23c:	687b      	ldr	r3, [r7, #4]
 801a23e:	681b      	ldr	r3, [r3, #0]
 801a240:	681a      	ldr	r2, [r3, #0]
 801a242:	687b      	ldr	r3, [r7, #4]
 801a244:	681b      	ldr	r3, [r3, #0]
 801a246:	f022 020e 	bic.w	r2, r2, #14
 801a24a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 801a24c:	687b      	ldr	r3, [r7, #4]
 801a24e:	681b      	ldr	r3, [r3, #0]
 801a250:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801a252:	687b      	ldr	r3, [r7, #4]
 801a254:	681b      	ldr	r3, [r3, #0]
 801a256:	4a3c      	ldr	r2, [pc, #240]	@ (801a348 <HAL_DMA_Abort+0x214>)
 801a258:	4293      	cmp	r3, r2
 801a25a:	d072      	beq.n	801a342 <HAL_DMA_Abort+0x20e>
 801a25c:	687b      	ldr	r3, [r7, #4]
 801a25e:	681b      	ldr	r3, [r3, #0]
 801a260:	4a3a      	ldr	r2, [pc, #232]	@ (801a34c <HAL_DMA_Abort+0x218>)
 801a262:	4293      	cmp	r3, r2
 801a264:	d06d      	beq.n	801a342 <HAL_DMA_Abort+0x20e>
 801a266:	687b      	ldr	r3, [r7, #4]
 801a268:	681b      	ldr	r3, [r3, #0]
 801a26a:	4a39      	ldr	r2, [pc, #228]	@ (801a350 <HAL_DMA_Abort+0x21c>)
 801a26c:	4293      	cmp	r3, r2
 801a26e:	d068      	beq.n	801a342 <HAL_DMA_Abort+0x20e>
 801a270:	687b      	ldr	r3, [r7, #4]
 801a272:	681b      	ldr	r3, [r3, #0]
 801a274:	4a37      	ldr	r2, [pc, #220]	@ (801a354 <HAL_DMA_Abort+0x220>)
 801a276:	4293      	cmp	r3, r2
 801a278:	d063      	beq.n	801a342 <HAL_DMA_Abort+0x20e>
 801a27a:	687b      	ldr	r3, [r7, #4]
 801a27c:	681b      	ldr	r3, [r3, #0]
 801a27e:	4a36      	ldr	r2, [pc, #216]	@ (801a358 <HAL_DMA_Abort+0x224>)
 801a280:	4293      	cmp	r3, r2
 801a282:	d05e      	beq.n	801a342 <HAL_DMA_Abort+0x20e>
 801a284:	687b      	ldr	r3, [r7, #4]
 801a286:	681b      	ldr	r3, [r3, #0]
 801a288:	4a34      	ldr	r2, [pc, #208]	@ (801a35c <HAL_DMA_Abort+0x228>)
 801a28a:	4293      	cmp	r3, r2
 801a28c:	d059      	beq.n	801a342 <HAL_DMA_Abort+0x20e>
 801a28e:	687b      	ldr	r3, [r7, #4]
 801a290:	681b      	ldr	r3, [r3, #0]
 801a292:	4a33      	ldr	r2, [pc, #204]	@ (801a360 <HAL_DMA_Abort+0x22c>)
 801a294:	4293      	cmp	r3, r2
 801a296:	d054      	beq.n	801a342 <HAL_DMA_Abort+0x20e>
 801a298:	687b      	ldr	r3, [r7, #4]
 801a29a:	681b      	ldr	r3, [r3, #0]
 801a29c:	4a31      	ldr	r2, [pc, #196]	@ (801a364 <HAL_DMA_Abort+0x230>)
 801a29e:	4293      	cmp	r3, r2
 801a2a0:	d04f      	beq.n	801a342 <HAL_DMA_Abort+0x20e>
 801a2a2:	687b      	ldr	r3, [r7, #4]
 801a2a4:	681b      	ldr	r3, [r3, #0]
 801a2a6:	4a30      	ldr	r2, [pc, #192]	@ (801a368 <HAL_DMA_Abort+0x234>)
 801a2a8:	4293      	cmp	r3, r2
 801a2aa:	d04a      	beq.n	801a342 <HAL_DMA_Abort+0x20e>
 801a2ac:	687b      	ldr	r3, [r7, #4]
 801a2ae:	681b      	ldr	r3, [r3, #0]
 801a2b0:	4a2e      	ldr	r2, [pc, #184]	@ (801a36c <HAL_DMA_Abort+0x238>)
 801a2b2:	4293      	cmp	r3, r2
 801a2b4:	d045      	beq.n	801a342 <HAL_DMA_Abort+0x20e>
 801a2b6:	687b      	ldr	r3, [r7, #4]
 801a2b8:	681b      	ldr	r3, [r3, #0]
 801a2ba:	4a2d      	ldr	r2, [pc, #180]	@ (801a370 <HAL_DMA_Abort+0x23c>)
 801a2bc:	4293      	cmp	r3, r2
 801a2be:	d040      	beq.n	801a342 <HAL_DMA_Abort+0x20e>
 801a2c0:	687b      	ldr	r3, [r7, #4]
 801a2c2:	681b      	ldr	r3, [r3, #0]
 801a2c4:	4a2b      	ldr	r2, [pc, #172]	@ (801a374 <HAL_DMA_Abort+0x240>)
 801a2c6:	4293      	cmp	r3, r2
 801a2c8:	d03b      	beq.n	801a342 <HAL_DMA_Abort+0x20e>
 801a2ca:	687b      	ldr	r3, [r7, #4]
 801a2cc:	681b      	ldr	r3, [r3, #0]
 801a2ce:	4a2a      	ldr	r2, [pc, #168]	@ (801a378 <HAL_DMA_Abort+0x244>)
 801a2d0:	4293      	cmp	r3, r2
 801a2d2:	d036      	beq.n	801a342 <HAL_DMA_Abort+0x20e>
 801a2d4:	687b      	ldr	r3, [r7, #4]
 801a2d6:	681b      	ldr	r3, [r3, #0]
 801a2d8:	4a28      	ldr	r2, [pc, #160]	@ (801a37c <HAL_DMA_Abort+0x248>)
 801a2da:	4293      	cmp	r3, r2
 801a2dc:	d031      	beq.n	801a342 <HAL_DMA_Abort+0x20e>
 801a2de:	687b      	ldr	r3, [r7, #4]
 801a2e0:	681b      	ldr	r3, [r3, #0]
 801a2e2:	4a27      	ldr	r2, [pc, #156]	@ (801a380 <HAL_DMA_Abort+0x24c>)
 801a2e4:	4293      	cmp	r3, r2
 801a2e6:	d02c      	beq.n	801a342 <HAL_DMA_Abort+0x20e>
 801a2e8:	687b      	ldr	r3, [r7, #4]
 801a2ea:	681b      	ldr	r3, [r3, #0]
 801a2ec:	4a25      	ldr	r2, [pc, #148]	@ (801a384 <HAL_DMA_Abort+0x250>)
 801a2ee:	4293      	cmp	r3, r2
 801a2f0:	d027      	beq.n	801a342 <HAL_DMA_Abort+0x20e>
 801a2f2:	687b      	ldr	r3, [r7, #4]
 801a2f4:	681b      	ldr	r3, [r3, #0]
 801a2f6:	4a24      	ldr	r2, [pc, #144]	@ (801a388 <HAL_DMA_Abort+0x254>)
 801a2f8:	4293      	cmp	r3, r2
 801a2fa:	d022      	beq.n	801a342 <HAL_DMA_Abort+0x20e>
 801a2fc:	687b      	ldr	r3, [r7, #4]
 801a2fe:	681b      	ldr	r3, [r3, #0]
 801a300:	4a22      	ldr	r2, [pc, #136]	@ (801a38c <HAL_DMA_Abort+0x258>)
 801a302:	4293      	cmp	r3, r2
 801a304:	d01d      	beq.n	801a342 <HAL_DMA_Abort+0x20e>
 801a306:	687b      	ldr	r3, [r7, #4]
 801a308:	681b      	ldr	r3, [r3, #0]
 801a30a:	4a21      	ldr	r2, [pc, #132]	@ (801a390 <HAL_DMA_Abort+0x25c>)
 801a30c:	4293      	cmp	r3, r2
 801a30e:	d018      	beq.n	801a342 <HAL_DMA_Abort+0x20e>
 801a310:	687b      	ldr	r3, [r7, #4]
 801a312:	681b      	ldr	r3, [r3, #0]
 801a314:	4a1f      	ldr	r2, [pc, #124]	@ (801a394 <HAL_DMA_Abort+0x260>)
 801a316:	4293      	cmp	r3, r2
 801a318:	d013      	beq.n	801a342 <HAL_DMA_Abort+0x20e>
 801a31a:	687b      	ldr	r3, [r7, #4]
 801a31c:	681b      	ldr	r3, [r3, #0]
 801a31e:	4a1e      	ldr	r2, [pc, #120]	@ (801a398 <HAL_DMA_Abort+0x264>)
 801a320:	4293      	cmp	r3, r2
 801a322:	d00e      	beq.n	801a342 <HAL_DMA_Abort+0x20e>
 801a324:	687b      	ldr	r3, [r7, #4]
 801a326:	681b      	ldr	r3, [r3, #0]
 801a328:	4a1c      	ldr	r2, [pc, #112]	@ (801a39c <HAL_DMA_Abort+0x268>)
 801a32a:	4293      	cmp	r3, r2
 801a32c:	d009      	beq.n	801a342 <HAL_DMA_Abort+0x20e>
 801a32e:	687b      	ldr	r3, [r7, #4]
 801a330:	681b      	ldr	r3, [r3, #0]
 801a332:	4a1b      	ldr	r2, [pc, #108]	@ (801a3a0 <HAL_DMA_Abort+0x26c>)
 801a334:	4293      	cmp	r3, r2
 801a336:	d004      	beq.n	801a342 <HAL_DMA_Abort+0x20e>
 801a338:	687b      	ldr	r3, [r7, #4]
 801a33a:	681b      	ldr	r3, [r3, #0]
 801a33c:	4a19      	ldr	r2, [pc, #100]	@ (801a3a4 <HAL_DMA_Abort+0x270>)
 801a33e:	4293      	cmp	r3, r2
 801a340:	d132      	bne.n	801a3a8 <HAL_DMA_Abort+0x274>
 801a342:	2301      	movs	r3, #1
 801a344:	e031      	b.n	801a3aa <HAL_DMA_Abort+0x276>
 801a346:	bf00      	nop
 801a348:	40020010 	.word	0x40020010
 801a34c:	40020028 	.word	0x40020028
 801a350:	40020040 	.word	0x40020040
 801a354:	40020058 	.word	0x40020058
 801a358:	40020070 	.word	0x40020070
 801a35c:	40020088 	.word	0x40020088
 801a360:	400200a0 	.word	0x400200a0
 801a364:	400200b8 	.word	0x400200b8
 801a368:	40020410 	.word	0x40020410
 801a36c:	40020428 	.word	0x40020428
 801a370:	40020440 	.word	0x40020440
 801a374:	40020458 	.word	0x40020458
 801a378:	40020470 	.word	0x40020470
 801a37c:	40020488 	.word	0x40020488
 801a380:	400204a0 	.word	0x400204a0
 801a384:	400204b8 	.word	0x400204b8
 801a388:	58025408 	.word	0x58025408
 801a38c:	5802541c 	.word	0x5802541c
 801a390:	58025430 	.word	0x58025430
 801a394:	58025444 	.word	0x58025444
 801a398:	58025458 	.word	0x58025458
 801a39c:	5802546c 	.word	0x5802546c
 801a3a0:	58025480 	.word	0x58025480
 801a3a4:	58025494 	.word	0x58025494
 801a3a8:	2300      	movs	r3, #0
 801a3aa:	2b00      	cmp	r3, #0
 801a3ac:	d007      	beq.n	801a3be <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801a3ae:	687b      	ldr	r3, [r7, #4]
 801a3b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801a3b2:	681a      	ldr	r2, [r3, #0]
 801a3b4:	687b      	ldr	r3, [r7, #4]
 801a3b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801a3b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801a3bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801a3be:	687b      	ldr	r3, [r7, #4]
 801a3c0:	681b      	ldr	r3, [r3, #0]
 801a3c2:	4a6d      	ldr	r2, [pc, #436]	@ (801a578 <HAL_DMA_Abort+0x444>)
 801a3c4:	4293      	cmp	r3, r2
 801a3c6:	d04a      	beq.n	801a45e <HAL_DMA_Abort+0x32a>
 801a3c8:	687b      	ldr	r3, [r7, #4]
 801a3ca:	681b      	ldr	r3, [r3, #0]
 801a3cc:	4a6b      	ldr	r2, [pc, #428]	@ (801a57c <HAL_DMA_Abort+0x448>)
 801a3ce:	4293      	cmp	r3, r2
 801a3d0:	d045      	beq.n	801a45e <HAL_DMA_Abort+0x32a>
 801a3d2:	687b      	ldr	r3, [r7, #4]
 801a3d4:	681b      	ldr	r3, [r3, #0]
 801a3d6:	4a6a      	ldr	r2, [pc, #424]	@ (801a580 <HAL_DMA_Abort+0x44c>)
 801a3d8:	4293      	cmp	r3, r2
 801a3da:	d040      	beq.n	801a45e <HAL_DMA_Abort+0x32a>
 801a3dc:	687b      	ldr	r3, [r7, #4]
 801a3de:	681b      	ldr	r3, [r3, #0]
 801a3e0:	4a68      	ldr	r2, [pc, #416]	@ (801a584 <HAL_DMA_Abort+0x450>)
 801a3e2:	4293      	cmp	r3, r2
 801a3e4:	d03b      	beq.n	801a45e <HAL_DMA_Abort+0x32a>
 801a3e6:	687b      	ldr	r3, [r7, #4]
 801a3e8:	681b      	ldr	r3, [r3, #0]
 801a3ea:	4a67      	ldr	r2, [pc, #412]	@ (801a588 <HAL_DMA_Abort+0x454>)
 801a3ec:	4293      	cmp	r3, r2
 801a3ee:	d036      	beq.n	801a45e <HAL_DMA_Abort+0x32a>
 801a3f0:	687b      	ldr	r3, [r7, #4]
 801a3f2:	681b      	ldr	r3, [r3, #0]
 801a3f4:	4a65      	ldr	r2, [pc, #404]	@ (801a58c <HAL_DMA_Abort+0x458>)
 801a3f6:	4293      	cmp	r3, r2
 801a3f8:	d031      	beq.n	801a45e <HAL_DMA_Abort+0x32a>
 801a3fa:	687b      	ldr	r3, [r7, #4]
 801a3fc:	681b      	ldr	r3, [r3, #0]
 801a3fe:	4a64      	ldr	r2, [pc, #400]	@ (801a590 <HAL_DMA_Abort+0x45c>)
 801a400:	4293      	cmp	r3, r2
 801a402:	d02c      	beq.n	801a45e <HAL_DMA_Abort+0x32a>
 801a404:	687b      	ldr	r3, [r7, #4]
 801a406:	681b      	ldr	r3, [r3, #0]
 801a408:	4a62      	ldr	r2, [pc, #392]	@ (801a594 <HAL_DMA_Abort+0x460>)
 801a40a:	4293      	cmp	r3, r2
 801a40c:	d027      	beq.n	801a45e <HAL_DMA_Abort+0x32a>
 801a40e:	687b      	ldr	r3, [r7, #4]
 801a410:	681b      	ldr	r3, [r3, #0]
 801a412:	4a61      	ldr	r2, [pc, #388]	@ (801a598 <HAL_DMA_Abort+0x464>)
 801a414:	4293      	cmp	r3, r2
 801a416:	d022      	beq.n	801a45e <HAL_DMA_Abort+0x32a>
 801a418:	687b      	ldr	r3, [r7, #4]
 801a41a:	681b      	ldr	r3, [r3, #0]
 801a41c:	4a5f      	ldr	r2, [pc, #380]	@ (801a59c <HAL_DMA_Abort+0x468>)
 801a41e:	4293      	cmp	r3, r2
 801a420:	d01d      	beq.n	801a45e <HAL_DMA_Abort+0x32a>
 801a422:	687b      	ldr	r3, [r7, #4]
 801a424:	681b      	ldr	r3, [r3, #0]
 801a426:	4a5e      	ldr	r2, [pc, #376]	@ (801a5a0 <HAL_DMA_Abort+0x46c>)
 801a428:	4293      	cmp	r3, r2
 801a42a:	d018      	beq.n	801a45e <HAL_DMA_Abort+0x32a>
 801a42c:	687b      	ldr	r3, [r7, #4]
 801a42e:	681b      	ldr	r3, [r3, #0]
 801a430:	4a5c      	ldr	r2, [pc, #368]	@ (801a5a4 <HAL_DMA_Abort+0x470>)
 801a432:	4293      	cmp	r3, r2
 801a434:	d013      	beq.n	801a45e <HAL_DMA_Abort+0x32a>
 801a436:	687b      	ldr	r3, [r7, #4]
 801a438:	681b      	ldr	r3, [r3, #0]
 801a43a:	4a5b      	ldr	r2, [pc, #364]	@ (801a5a8 <HAL_DMA_Abort+0x474>)
 801a43c:	4293      	cmp	r3, r2
 801a43e:	d00e      	beq.n	801a45e <HAL_DMA_Abort+0x32a>
 801a440:	687b      	ldr	r3, [r7, #4]
 801a442:	681b      	ldr	r3, [r3, #0]
 801a444:	4a59      	ldr	r2, [pc, #356]	@ (801a5ac <HAL_DMA_Abort+0x478>)
 801a446:	4293      	cmp	r3, r2
 801a448:	d009      	beq.n	801a45e <HAL_DMA_Abort+0x32a>
 801a44a:	687b      	ldr	r3, [r7, #4]
 801a44c:	681b      	ldr	r3, [r3, #0]
 801a44e:	4a58      	ldr	r2, [pc, #352]	@ (801a5b0 <HAL_DMA_Abort+0x47c>)
 801a450:	4293      	cmp	r3, r2
 801a452:	d004      	beq.n	801a45e <HAL_DMA_Abort+0x32a>
 801a454:	687b      	ldr	r3, [r7, #4]
 801a456:	681b      	ldr	r3, [r3, #0]
 801a458:	4a56      	ldr	r2, [pc, #344]	@ (801a5b4 <HAL_DMA_Abort+0x480>)
 801a45a:	4293      	cmp	r3, r2
 801a45c:	d108      	bne.n	801a470 <HAL_DMA_Abort+0x33c>
 801a45e:	687b      	ldr	r3, [r7, #4]
 801a460:	681b      	ldr	r3, [r3, #0]
 801a462:	681a      	ldr	r2, [r3, #0]
 801a464:	687b      	ldr	r3, [r7, #4]
 801a466:	681b      	ldr	r3, [r3, #0]
 801a468:	f022 0201 	bic.w	r2, r2, #1
 801a46c:	601a      	str	r2, [r3, #0]
 801a46e:	e007      	b.n	801a480 <HAL_DMA_Abort+0x34c>
 801a470:	687b      	ldr	r3, [r7, #4]
 801a472:	681b      	ldr	r3, [r3, #0]
 801a474:	681a      	ldr	r2, [r3, #0]
 801a476:	687b      	ldr	r3, [r7, #4]
 801a478:	681b      	ldr	r3, [r3, #0]
 801a47a:	f022 0201 	bic.w	r2, r2, #1
 801a47e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 801a480:	e013      	b.n	801a4aa <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801a482:	f7fe fffd 	bl	8019480 <HAL_GetTick>
 801a486:	4602      	mov	r2, r0
 801a488:	693b      	ldr	r3, [r7, #16]
 801a48a:	1ad3      	subs	r3, r2, r3
 801a48c:	2b05      	cmp	r3, #5
 801a48e:	d90c      	bls.n	801a4aa <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801a490:	687b      	ldr	r3, [r7, #4]
 801a492:	2220      	movs	r2, #32
 801a494:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 801a496:	687b      	ldr	r3, [r7, #4]
 801a498:	2203      	movs	r2, #3
 801a49a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801a49e:	687b      	ldr	r3, [r7, #4]
 801a4a0:	2200      	movs	r2, #0
 801a4a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 801a4a6:	2301      	movs	r3, #1
 801a4a8:	e12d      	b.n	801a706 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 801a4aa:	697b      	ldr	r3, [r7, #20]
 801a4ac:	681b      	ldr	r3, [r3, #0]
 801a4ae:	f003 0301 	and.w	r3, r3, #1
 801a4b2:	2b00      	cmp	r3, #0
 801a4b4:	d1e5      	bne.n	801a482 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801a4b6:	687b      	ldr	r3, [r7, #4]
 801a4b8:	681b      	ldr	r3, [r3, #0]
 801a4ba:	4a2f      	ldr	r2, [pc, #188]	@ (801a578 <HAL_DMA_Abort+0x444>)
 801a4bc:	4293      	cmp	r3, r2
 801a4be:	d04a      	beq.n	801a556 <HAL_DMA_Abort+0x422>
 801a4c0:	687b      	ldr	r3, [r7, #4]
 801a4c2:	681b      	ldr	r3, [r3, #0]
 801a4c4:	4a2d      	ldr	r2, [pc, #180]	@ (801a57c <HAL_DMA_Abort+0x448>)
 801a4c6:	4293      	cmp	r3, r2
 801a4c8:	d045      	beq.n	801a556 <HAL_DMA_Abort+0x422>
 801a4ca:	687b      	ldr	r3, [r7, #4]
 801a4cc:	681b      	ldr	r3, [r3, #0]
 801a4ce:	4a2c      	ldr	r2, [pc, #176]	@ (801a580 <HAL_DMA_Abort+0x44c>)
 801a4d0:	4293      	cmp	r3, r2
 801a4d2:	d040      	beq.n	801a556 <HAL_DMA_Abort+0x422>
 801a4d4:	687b      	ldr	r3, [r7, #4]
 801a4d6:	681b      	ldr	r3, [r3, #0]
 801a4d8:	4a2a      	ldr	r2, [pc, #168]	@ (801a584 <HAL_DMA_Abort+0x450>)
 801a4da:	4293      	cmp	r3, r2
 801a4dc:	d03b      	beq.n	801a556 <HAL_DMA_Abort+0x422>
 801a4de:	687b      	ldr	r3, [r7, #4]
 801a4e0:	681b      	ldr	r3, [r3, #0]
 801a4e2:	4a29      	ldr	r2, [pc, #164]	@ (801a588 <HAL_DMA_Abort+0x454>)
 801a4e4:	4293      	cmp	r3, r2
 801a4e6:	d036      	beq.n	801a556 <HAL_DMA_Abort+0x422>
 801a4e8:	687b      	ldr	r3, [r7, #4]
 801a4ea:	681b      	ldr	r3, [r3, #0]
 801a4ec:	4a27      	ldr	r2, [pc, #156]	@ (801a58c <HAL_DMA_Abort+0x458>)
 801a4ee:	4293      	cmp	r3, r2
 801a4f0:	d031      	beq.n	801a556 <HAL_DMA_Abort+0x422>
 801a4f2:	687b      	ldr	r3, [r7, #4]
 801a4f4:	681b      	ldr	r3, [r3, #0]
 801a4f6:	4a26      	ldr	r2, [pc, #152]	@ (801a590 <HAL_DMA_Abort+0x45c>)
 801a4f8:	4293      	cmp	r3, r2
 801a4fa:	d02c      	beq.n	801a556 <HAL_DMA_Abort+0x422>
 801a4fc:	687b      	ldr	r3, [r7, #4]
 801a4fe:	681b      	ldr	r3, [r3, #0]
 801a500:	4a24      	ldr	r2, [pc, #144]	@ (801a594 <HAL_DMA_Abort+0x460>)
 801a502:	4293      	cmp	r3, r2
 801a504:	d027      	beq.n	801a556 <HAL_DMA_Abort+0x422>
 801a506:	687b      	ldr	r3, [r7, #4]
 801a508:	681b      	ldr	r3, [r3, #0]
 801a50a:	4a23      	ldr	r2, [pc, #140]	@ (801a598 <HAL_DMA_Abort+0x464>)
 801a50c:	4293      	cmp	r3, r2
 801a50e:	d022      	beq.n	801a556 <HAL_DMA_Abort+0x422>
 801a510:	687b      	ldr	r3, [r7, #4]
 801a512:	681b      	ldr	r3, [r3, #0]
 801a514:	4a21      	ldr	r2, [pc, #132]	@ (801a59c <HAL_DMA_Abort+0x468>)
 801a516:	4293      	cmp	r3, r2
 801a518:	d01d      	beq.n	801a556 <HAL_DMA_Abort+0x422>
 801a51a:	687b      	ldr	r3, [r7, #4]
 801a51c:	681b      	ldr	r3, [r3, #0]
 801a51e:	4a20      	ldr	r2, [pc, #128]	@ (801a5a0 <HAL_DMA_Abort+0x46c>)
 801a520:	4293      	cmp	r3, r2
 801a522:	d018      	beq.n	801a556 <HAL_DMA_Abort+0x422>
 801a524:	687b      	ldr	r3, [r7, #4]
 801a526:	681b      	ldr	r3, [r3, #0]
 801a528:	4a1e      	ldr	r2, [pc, #120]	@ (801a5a4 <HAL_DMA_Abort+0x470>)
 801a52a:	4293      	cmp	r3, r2
 801a52c:	d013      	beq.n	801a556 <HAL_DMA_Abort+0x422>
 801a52e:	687b      	ldr	r3, [r7, #4]
 801a530:	681b      	ldr	r3, [r3, #0]
 801a532:	4a1d      	ldr	r2, [pc, #116]	@ (801a5a8 <HAL_DMA_Abort+0x474>)
 801a534:	4293      	cmp	r3, r2
 801a536:	d00e      	beq.n	801a556 <HAL_DMA_Abort+0x422>
 801a538:	687b      	ldr	r3, [r7, #4]
 801a53a:	681b      	ldr	r3, [r3, #0]
 801a53c:	4a1b      	ldr	r2, [pc, #108]	@ (801a5ac <HAL_DMA_Abort+0x478>)
 801a53e:	4293      	cmp	r3, r2
 801a540:	d009      	beq.n	801a556 <HAL_DMA_Abort+0x422>
 801a542:	687b      	ldr	r3, [r7, #4]
 801a544:	681b      	ldr	r3, [r3, #0]
 801a546:	4a1a      	ldr	r2, [pc, #104]	@ (801a5b0 <HAL_DMA_Abort+0x47c>)
 801a548:	4293      	cmp	r3, r2
 801a54a:	d004      	beq.n	801a556 <HAL_DMA_Abort+0x422>
 801a54c:	687b      	ldr	r3, [r7, #4]
 801a54e:	681b      	ldr	r3, [r3, #0]
 801a550:	4a18      	ldr	r2, [pc, #96]	@ (801a5b4 <HAL_DMA_Abort+0x480>)
 801a552:	4293      	cmp	r3, r2
 801a554:	d101      	bne.n	801a55a <HAL_DMA_Abort+0x426>
 801a556:	2301      	movs	r3, #1
 801a558:	e000      	b.n	801a55c <HAL_DMA_Abort+0x428>
 801a55a:	2300      	movs	r3, #0
 801a55c:	2b00      	cmp	r3, #0
 801a55e:	d02b      	beq.n	801a5b8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801a560:	687b      	ldr	r3, [r7, #4]
 801a562:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a564:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801a566:	687b      	ldr	r3, [r7, #4]
 801a568:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a56a:	f003 031f 	and.w	r3, r3, #31
 801a56e:	223f      	movs	r2, #63	@ 0x3f
 801a570:	409a      	lsls	r2, r3
 801a572:	68bb      	ldr	r3, [r7, #8]
 801a574:	609a      	str	r2, [r3, #8]
 801a576:	e02a      	b.n	801a5ce <HAL_DMA_Abort+0x49a>
 801a578:	40020010 	.word	0x40020010
 801a57c:	40020028 	.word	0x40020028
 801a580:	40020040 	.word	0x40020040
 801a584:	40020058 	.word	0x40020058
 801a588:	40020070 	.word	0x40020070
 801a58c:	40020088 	.word	0x40020088
 801a590:	400200a0 	.word	0x400200a0
 801a594:	400200b8 	.word	0x400200b8
 801a598:	40020410 	.word	0x40020410
 801a59c:	40020428 	.word	0x40020428
 801a5a0:	40020440 	.word	0x40020440
 801a5a4:	40020458 	.word	0x40020458
 801a5a8:	40020470 	.word	0x40020470
 801a5ac:	40020488 	.word	0x40020488
 801a5b0:	400204a0 	.word	0x400204a0
 801a5b4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 801a5b8:	687b      	ldr	r3, [r7, #4]
 801a5ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a5bc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 801a5be:	687b      	ldr	r3, [r7, #4]
 801a5c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a5c2:	f003 031f 	and.w	r3, r3, #31
 801a5c6:	2201      	movs	r2, #1
 801a5c8:	409a      	lsls	r2, r3
 801a5ca:	68fb      	ldr	r3, [r7, #12]
 801a5cc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801a5ce:	687b      	ldr	r3, [r7, #4]
 801a5d0:	681b      	ldr	r3, [r3, #0]
 801a5d2:	4a4f      	ldr	r2, [pc, #316]	@ (801a710 <HAL_DMA_Abort+0x5dc>)
 801a5d4:	4293      	cmp	r3, r2
 801a5d6:	d072      	beq.n	801a6be <HAL_DMA_Abort+0x58a>
 801a5d8:	687b      	ldr	r3, [r7, #4]
 801a5da:	681b      	ldr	r3, [r3, #0]
 801a5dc:	4a4d      	ldr	r2, [pc, #308]	@ (801a714 <HAL_DMA_Abort+0x5e0>)
 801a5de:	4293      	cmp	r3, r2
 801a5e0:	d06d      	beq.n	801a6be <HAL_DMA_Abort+0x58a>
 801a5e2:	687b      	ldr	r3, [r7, #4]
 801a5e4:	681b      	ldr	r3, [r3, #0]
 801a5e6:	4a4c      	ldr	r2, [pc, #304]	@ (801a718 <HAL_DMA_Abort+0x5e4>)
 801a5e8:	4293      	cmp	r3, r2
 801a5ea:	d068      	beq.n	801a6be <HAL_DMA_Abort+0x58a>
 801a5ec:	687b      	ldr	r3, [r7, #4]
 801a5ee:	681b      	ldr	r3, [r3, #0]
 801a5f0:	4a4a      	ldr	r2, [pc, #296]	@ (801a71c <HAL_DMA_Abort+0x5e8>)
 801a5f2:	4293      	cmp	r3, r2
 801a5f4:	d063      	beq.n	801a6be <HAL_DMA_Abort+0x58a>
 801a5f6:	687b      	ldr	r3, [r7, #4]
 801a5f8:	681b      	ldr	r3, [r3, #0]
 801a5fa:	4a49      	ldr	r2, [pc, #292]	@ (801a720 <HAL_DMA_Abort+0x5ec>)
 801a5fc:	4293      	cmp	r3, r2
 801a5fe:	d05e      	beq.n	801a6be <HAL_DMA_Abort+0x58a>
 801a600:	687b      	ldr	r3, [r7, #4]
 801a602:	681b      	ldr	r3, [r3, #0]
 801a604:	4a47      	ldr	r2, [pc, #284]	@ (801a724 <HAL_DMA_Abort+0x5f0>)
 801a606:	4293      	cmp	r3, r2
 801a608:	d059      	beq.n	801a6be <HAL_DMA_Abort+0x58a>
 801a60a:	687b      	ldr	r3, [r7, #4]
 801a60c:	681b      	ldr	r3, [r3, #0]
 801a60e:	4a46      	ldr	r2, [pc, #280]	@ (801a728 <HAL_DMA_Abort+0x5f4>)
 801a610:	4293      	cmp	r3, r2
 801a612:	d054      	beq.n	801a6be <HAL_DMA_Abort+0x58a>
 801a614:	687b      	ldr	r3, [r7, #4]
 801a616:	681b      	ldr	r3, [r3, #0]
 801a618:	4a44      	ldr	r2, [pc, #272]	@ (801a72c <HAL_DMA_Abort+0x5f8>)
 801a61a:	4293      	cmp	r3, r2
 801a61c:	d04f      	beq.n	801a6be <HAL_DMA_Abort+0x58a>
 801a61e:	687b      	ldr	r3, [r7, #4]
 801a620:	681b      	ldr	r3, [r3, #0]
 801a622:	4a43      	ldr	r2, [pc, #268]	@ (801a730 <HAL_DMA_Abort+0x5fc>)
 801a624:	4293      	cmp	r3, r2
 801a626:	d04a      	beq.n	801a6be <HAL_DMA_Abort+0x58a>
 801a628:	687b      	ldr	r3, [r7, #4]
 801a62a:	681b      	ldr	r3, [r3, #0]
 801a62c:	4a41      	ldr	r2, [pc, #260]	@ (801a734 <HAL_DMA_Abort+0x600>)
 801a62e:	4293      	cmp	r3, r2
 801a630:	d045      	beq.n	801a6be <HAL_DMA_Abort+0x58a>
 801a632:	687b      	ldr	r3, [r7, #4]
 801a634:	681b      	ldr	r3, [r3, #0]
 801a636:	4a40      	ldr	r2, [pc, #256]	@ (801a738 <HAL_DMA_Abort+0x604>)
 801a638:	4293      	cmp	r3, r2
 801a63a:	d040      	beq.n	801a6be <HAL_DMA_Abort+0x58a>
 801a63c:	687b      	ldr	r3, [r7, #4]
 801a63e:	681b      	ldr	r3, [r3, #0]
 801a640:	4a3e      	ldr	r2, [pc, #248]	@ (801a73c <HAL_DMA_Abort+0x608>)
 801a642:	4293      	cmp	r3, r2
 801a644:	d03b      	beq.n	801a6be <HAL_DMA_Abort+0x58a>
 801a646:	687b      	ldr	r3, [r7, #4]
 801a648:	681b      	ldr	r3, [r3, #0]
 801a64a:	4a3d      	ldr	r2, [pc, #244]	@ (801a740 <HAL_DMA_Abort+0x60c>)
 801a64c:	4293      	cmp	r3, r2
 801a64e:	d036      	beq.n	801a6be <HAL_DMA_Abort+0x58a>
 801a650:	687b      	ldr	r3, [r7, #4]
 801a652:	681b      	ldr	r3, [r3, #0]
 801a654:	4a3b      	ldr	r2, [pc, #236]	@ (801a744 <HAL_DMA_Abort+0x610>)
 801a656:	4293      	cmp	r3, r2
 801a658:	d031      	beq.n	801a6be <HAL_DMA_Abort+0x58a>
 801a65a:	687b      	ldr	r3, [r7, #4]
 801a65c:	681b      	ldr	r3, [r3, #0]
 801a65e:	4a3a      	ldr	r2, [pc, #232]	@ (801a748 <HAL_DMA_Abort+0x614>)
 801a660:	4293      	cmp	r3, r2
 801a662:	d02c      	beq.n	801a6be <HAL_DMA_Abort+0x58a>
 801a664:	687b      	ldr	r3, [r7, #4]
 801a666:	681b      	ldr	r3, [r3, #0]
 801a668:	4a38      	ldr	r2, [pc, #224]	@ (801a74c <HAL_DMA_Abort+0x618>)
 801a66a:	4293      	cmp	r3, r2
 801a66c:	d027      	beq.n	801a6be <HAL_DMA_Abort+0x58a>
 801a66e:	687b      	ldr	r3, [r7, #4]
 801a670:	681b      	ldr	r3, [r3, #0]
 801a672:	4a37      	ldr	r2, [pc, #220]	@ (801a750 <HAL_DMA_Abort+0x61c>)
 801a674:	4293      	cmp	r3, r2
 801a676:	d022      	beq.n	801a6be <HAL_DMA_Abort+0x58a>
 801a678:	687b      	ldr	r3, [r7, #4]
 801a67a:	681b      	ldr	r3, [r3, #0]
 801a67c:	4a35      	ldr	r2, [pc, #212]	@ (801a754 <HAL_DMA_Abort+0x620>)
 801a67e:	4293      	cmp	r3, r2
 801a680:	d01d      	beq.n	801a6be <HAL_DMA_Abort+0x58a>
 801a682:	687b      	ldr	r3, [r7, #4]
 801a684:	681b      	ldr	r3, [r3, #0]
 801a686:	4a34      	ldr	r2, [pc, #208]	@ (801a758 <HAL_DMA_Abort+0x624>)
 801a688:	4293      	cmp	r3, r2
 801a68a:	d018      	beq.n	801a6be <HAL_DMA_Abort+0x58a>
 801a68c:	687b      	ldr	r3, [r7, #4]
 801a68e:	681b      	ldr	r3, [r3, #0]
 801a690:	4a32      	ldr	r2, [pc, #200]	@ (801a75c <HAL_DMA_Abort+0x628>)
 801a692:	4293      	cmp	r3, r2
 801a694:	d013      	beq.n	801a6be <HAL_DMA_Abort+0x58a>
 801a696:	687b      	ldr	r3, [r7, #4]
 801a698:	681b      	ldr	r3, [r3, #0]
 801a69a:	4a31      	ldr	r2, [pc, #196]	@ (801a760 <HAL_DMA_Abort+0x62c>)
 801a69c:	4293      	cmp	r3, r2
 801a69e:	d00e      	beq.n	801a6be <HAL_DMA_Abort+0x58a>
 801a6a0:	687b      	ldr	r3, [r7, #4]
 801a6a2:	681b      	ldr	r3, [r3, #0]
 801a6a4:	4a2f      	ldr	r2, [pc, #188]	@ (801a764 <HAL_DMA_Abort+0x630>)
 801a6a6:	4293      	cmp	r3, r2
 801a6a8:	d009      	beq.n	801a6be <HAL_DMA_Abort+0x58a>
 801a6aa:	687b      	ldr	r3, [r7, #4]
 801a6ac:	681b      	ldr	r3, [r3, #0]
 801a6ae:	4a2e      	ldr	r2, [pc, #184]	@ (801a768 <HAL_DMA_Abort+0x634>)
 801a6b0:	4293      	cmp	r3, r2
 801a6b2:	d004      	beq.n	801a6be <HAL_DMA_Abort+0x58a>
 801a6b4:	687b      	ldr	r3, [r7, #4]
 801a6b6:	681b      	ldr	r3, [r3, #0]
 801a6b8:	4a2c      	ldr	r2, [pc, #176]	@ (801a76c <HAL_DMA_Abort+0x638>)
 801a6ba:	4293      	cmp	r3, r2
 801a6bc:	d101      	bne.n	801a6c2 <HAL_DMA_Abort+0x58e>
 801a6be:	2301      	movs	r3, #1
 801a6c0:	e000      	b.n	801a6c4 <HAL_DMA_Abort+0x590>
 801a6c2:	2300      	movs	r3, #0
 801a6c4:	2b00      	cmp	r3, #0
 801a6c6:	d015      	beq.n	801a6f4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801a6c8:	687b      	ldr	r3, [r7, #4]
 801a6ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801a6cc:	687a      	ldr	r2, [r7, #4]
 801a6ce:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801a6d0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 801a6d2:	687b      	ldr	r3, [r7, #4]
 801a6d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a6d6:	2b00      	cmp	r3, #0
 801a6d8:	d00c      	beq.n	801a6f4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 801a6da:	687b      	ldr	r3, [r7, #4]
 801a6dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a6de:	681a      	ldr	r2, [r3, #0]
 801a6e0:	687b      	ldr	r3, [r7, #4]
 801a6e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a6e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801a6e8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801a6ea:	687b      	ldr	r3, [r7, #4]
 801a6ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a6ee:	687a      	ldr	r2, [r7, #4]
 801a6f0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801a6f2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801a6f4:	687b      	ldr	r3, [r7, #4]
 801a6f6:	2201      	movs	r2, #1
 801a6f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801a6fc:	687b      	ldr	r3, [r7, #4]
 801a6fe:	2200      	movs	r2, #0
 801a700:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 801a704:	2300      	movs	r3, #0
}
 801a706:	4618      	mov	r0, r3
 801a708:	3718      	adds	r7, #24
 801a70a:	46bd      	mov	sp, r7
 801a70c:	bd80      	pop	{r7, pc}
 801a70e:	bf00      	nop
 801a710:	40020010 	.word	0x40020010
 801a714:	40020028 	.word	0x40020028
 801a718:	40020040 	.word	0x40020040
 801a71c:	40020058 	.word	0x40020058
 801a720:	40020070 	.word	0x40020070
 801a724:	40020088 	.word	0x40020088
 801a728:	400200a0 	.word	0x400200a0
 801a72c:	400200b8 	.word	0x400200b8
 801a730:	40020410 	.word	0x40020410
 801a734:	40020428 	.word	0x40020428
 801a738:	40020440 	.word	0x40020440
 801a73c:	40020458 	.word	0x40020458
 801a740:	40020470 	.word	0x40020470
 801a744:	40020488 	.word	0x40020488
 801a748:	400204a0 	.word	0x400204a0
 801a74c:	400204b8 	.word	0x400204b8
 801a750:	58025408 	.word	0x58025408
 801a754:	5802541c 	.word	0x5802541c
 801a758:	58025430 	.word	0x58025430
 801a75c:	58025444 	.word	0x58025444
 801a760:	58025458 	.word	0x58025458
 801a764:	5802546c 	.word	0x5802546c
 801a768:	58025480 	.word	0x58025480
 801a76c:	58025494 	.word	0x58025494

0801a770 <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode).
  * @param  Timeout:       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 801a770:	b580      	push	{r7, lr}
 801a772:	b08a      	sub	sp, #40	@ 0x28
 801a774:	af00      	add	r7, sp, #0
 801a776:	60f8      	str	r0, [r7, #12]
 801a778:	460b      	mov	r3, r1
 801a77a:	607a      	str	r2, [r7, #4]
 801a77c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 801a77e:	2300      	movs	r3, #0
 801a780:	76fb      	strb	r3, [r7, #27]
  uint32_t cpltlevel_mask;
  uint32_t tickstart = HAL_GetTick();
 801a782:	f7fe fe7d 	bl	8019480 <HAL_GetTick>
 801a786:	6178      	str	r0, [r7, #20]
  __IO uint32_t *isr_reg;
  /* IT clear flag register */
  __IO uint32_t *ifcr_reg;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 801a788:	68fb      	ldr	r3, [r7, #12]
 801a78a:	2b00      	cmp	r3, #0
 801a78c:	d101      	bne.n	801a792 <HAL_DMA_PollForTransfer+0x22>
  {
    return HAL_ERROR;
 801a78e:	2301      	movs	r3, #1
 801a790:	e374      	b.n	801ae7c <HAL_DMA_PollForTransfer+0x70c>
  }

  if(HAL_DMA_STATE_BUSY != hdma->State)
 801a792:	68fb      	ldr	r3, [r7, #12]
 801a794:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801a798:	b2db      	uxtb	r3, r3
 801a79a:	2b02      	cmp	r3, #2
 801a79c:	d008      	beq.n	801a7b0 <HAL_DMA_PollForTransfer+0x40>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801a79e:	68fb      	ldr	r3, [r7, #12]
 801a7a0:	2280      	movs	r2, #128	@ 0x80
 801a7a2:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 801a7a4:	68fb      	ldr	r3, [r7, #12]
 801a7a6:	2200      	movs	r2, #0
 801a7a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 801a7ac:	2301      	movs	r3, #1
 801a7ae:	e365      	b.n	801ae7c <HAL_DMA_PollForTransfer+0x70c>
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801a7b0:	68fb      	ldr	r3, [r7, #12]
 801a7b2:	681b      	ldr	r3, [r3, #0]
 801a7b4:	4a7b      	ldr	r2, [pc, #492]	@ (801a9a4 <HAL_DMA_PollForTransfer+0x234>)
 801a7b6:	4293      	cmp	r3, r2
 801a7b8:	d04a      	beq.n	801a850 <HAL_DMA_PollForTransfer+0xe0>
 801a7ba:	68fb      	ldr	r3, [r7, #12]
 801a7bc:	681b      	ldr	r3, [r3, #0]
 801a7be:	4a7a      	ldr	r2, [pc, #488]	@ (801a9a8 <HAL_DMA_PollForTransfer+0x238>)
 801a7c0:	4293      	cmp	r3, r2
 801a7c2:	d045      	beq.n	801a850 <HAL_DMA_PollForTransfer+0xe0>
 801a7c4:	68fb      	ldr	r3, [r7, #12]
 801a7c6:	681b      	ldr	r3, [r3, #0]
 801a7c8:	4a78      	ldr	r2, [pc, #480]	@ (801a9ac <HAL_DMA_PollForTransfer+0x23c>)
 801a7ca:	4293      	cmp	r3, r2
 801a7cc:	d040      	beq.n	801a850 <HAL_DMA_PollForTransfer+0xe0>
 801a7ce:	68fb      	ldr	r3, [r7, #12]
 801a7d0:	681b      	ldr	r3, [r3, #0]
 801a7d2:	4a77      	ldr	r2, [pc, #476]	@ (801a9b0 <HAL_DMA_PollForTransfer+0x240>)
 801a7d4:	4293      	cmp	r3, r2
 801a7d6:	d03b      	beq.n	801a850 <HAL_DMA_PollForTransfer+0xe0>
 801a7d8:	68fb      	ldr	r3, [r7, #12]
 801a7da:	681b      	ldr	r3, [r3, #0]
 801a7dc:	4a75      	ldr	r2, [pc, #468]	@ (801a9b4 <HAL_DMA_PollForTransfer+0x244>)
 801a7de:	4293      	cmp	r3, r2
 801a7e0:	d036      	beq.n	801a850 <HAL_DMA_PollForTransfer+0xe0>
 801a7e2:	68fb      	ldr	r3, [r7, #12]
 801a7e4:	681b      	ldr	r3, [r3, #0]
 801a7e6:	4a74      	ldr	r2, [pc, #464]	@ (801a9b8 <HAL_DMA_PollForTransfer+0x248>)
 801a7e8:	4293      	cmp	r3, r2
 801a7ea:	d031      	beq.n	801a850 <HAL_DMA_PollForTransfer+0xe0>
 801a7ec:	68fb      	ldr	r3, [r7, #12]
 801a7ee:	681b      	ldr	r3, [r3, #0]
 801a7f0:	4a72      	ldr	r2, [pc, #456]	@ (801a9bc <HAL_DMA_PollForTransfer+0x24c>)
 801a7f2:	4293      	cmp	r3, r2
 801a7f4:	d02c      	beq.n	801a850 <HAL_DMA_PollForTransfer+0xe0>
 801a7f6:	68fb      	ldr	r3, [r7, #12]
 801a7f8:	681b      	ldr	r3, [r3, #0]
 801a7fa:	4a71      	ldr	r2, [pc, #452]	@ (801a9c0 <HAL_DMA_PollForTransfer+0x250>)
 801a7fc:	4293      	cmp	r3, r2
 801a7fe:	d027      	beq.n	801a850 <HAL_DMA_PollForTransfer+0xe0>
 801a800:	68fb      	ldr	r3, [r7, #12]
 801a802:	681b      	ldr	r3, [r3, #0]
 801a804:	4a6f      	ldr	r2, [pc, #444]	@ (801a9c4 <HAL_DMA_PollForTransfer+0x254>)
 801a806:	4293      	cmp	r3, r2
 801a808:	d022      	beq.n	801a850 <HAL_DMA_PollForTransfer+0xe0>
 801a80a:	68fb      	ldr	r3, [r7, #12]
 801a80c:	681b      	ldr	r3, [r3, #0]
 801a80e:	4a6e      	ldr	r2, [pc, #440]	@ (801a9c8 <HAL_DMA_PollForTransfer+0x258>)
 801a810:	4293      	cmp	r3, r2
 801a812:	d01d      	beq.n	801a850 <HAL_DMA_PollForTransfer+0xe0>
 801a814:	68fb      	ldr	r3, [r7, #12]
 801a816:	681b      	ldr	r3, [r3, #0]
 801a818:	4a6c      	ldr	r2, [pc, #432]	@ (801a9cc <HAL_DMA_PollForTransfer+0x25c>)
 801a81a:	4293      	cmp	r3, r2
 801a81c:	d018      	beq.n	801a850 <HAL_DMA_PollForTransfer+0xe0>
 801a81e:	68fb      	ldr	r3, [r7, #12]
 801a820:	681b      	ldr	r3, [r3, #0]
 801a822:	4a6b      	ldr	r2, [pc, #428]	@ (801a9d0 <HAL_DMA_PollForTransfer+0x260>)
 801a824:	4293      	cmp	r3, r2
 801a826:	d013      	beq.n	801a850 <HAL_DMA_PollForTransfer+0xe0>
 801a828:	68fb      	ldr	r3, [r7, #12]
 801a82a:	681b      	ldr	r3, [r3, #0]
 801a82c:	4a69      	ldr	r2, [pc, #420]	@ (801a9d4 <HAL_DMA_PollForTransfer+0x264>)
 801a82e:	4293      	cmp	r3, r2
 801a830:	d00e      	beq.n	801a850 <HAL_DMA_PollForTransfer+0xe0>
 801a832:	68fb      	ldr	r3, [r7, #12]
 801a834:	681b      	ldr	r3, [r3, #0]
 801a836:	4a68      	ldr	r2, [pc, #416]	@ (801a9d8 <HAL_DMA_PollForTransfer+0x268>)
 801a838:	4293      	cmp	r3, r2
 801a83a:	d009      	beq.n	801a850 <HAL_DMA_PollForTransfer+0xe0>
 801a83c:	68fb      	ldr	r3, [r7, #12]
 801a83e:	681b      	ldr	r3, [r3, #0]
 801a840:	4a66      	ldr	r2, [pc, #408]	@ (801a9dc <HAL_DMA_PollForTransfer+0x26c>)
 801a842:	4293      	cmp	r3, r2
 801a844:	d004      	beq.n	801a850 <HAL_DMA_PollForTransfer+0xe0>
 801a846:	68fb      	ldr	r3, [r7, #12]
 801a848:	681b      	ldr	r3, [r3, #0]
 801a84a:	4a65      	ldr	r2, [pc, #404]	@ (801a9e0 <HAL_DMA_PollForTransfer+0x270>)
 801a84c:	4293      	cmp	r3, r2
 801a84e:	d101      	bne.n	801a854 <HAL_DMA_PollForTransfer+0xe4>
 801a850:	2301      	movs	r3, #1
 801a852:	e000      	b.n	801a856 <HAL_DMA_PollForTransfer+0xe6>
 801a854:	2300      	movs	r3, #0
 801a856:	2b00      	cmp	r3, #0
 801a858:	d028      	beq.n	801a8ac <HAL_DMA_PollForTransfer+0x13c>
  {
    /* Polling mode not supported in circular mode and double buffering mode */
    if ((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) != 0U)
 801a85a:	68fb      	ldr	r3, [r7, #12]
 801a85c:	681b      	ldr	r3, [r3, #0]
 801a85e:	681b      	ldr	r3, [r3, #0]
 801a860:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a864:	2b00      	cmp	r3, #0
 801a866:	d005      	beq.n	801a874 <HAL_DMA_PollForTransfer+0x104>
    {
      hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 801a868:	68fb      	ldr	r3, [r7, #12]
 801a86a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801a86e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 801a870:	2301      	movs	r3, #1
 801a872:	e303      	b.n	801ae7c <HAL_DMA_PollForTransfer+0x70c>
    }

    /* Get the level transfer complete flag */
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 801a874:	7afb      	ldrb	r3, [r7, #11]
 801a876:	2b00      	cmp	r3, #0
 801a878:	d108      	bne.n	801a88c <HAL_DMA_PollForTransfer+0x11c>
    {
      /* Transfer Complete flag */
      cpltlevel_mask = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 801a87a:	68fb      	ldr	r3, [r7, #12]
 801a87c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a87e:	f003 031f 	and.w	r3, r3, #31
 801a882:	2220      	movs	r2, #32
 801a884:	fa02 f303 	lsl.w	r3, r2, r3
 801a888:	627b      	str	r3, [r7, #36]	@ 0x24
 801a88a:	e007      	b.n	801a89c <HAL_DMA_PollForTransfer+0x12c>
    }
    else
    {
      /* Half Transfer Complete flag */
      cpltlevel_mask = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 801a88c:	68fb      	ldr	r3, [r7, #12]
 801a88e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a890:	f003 031f 	and.w	r3, r3, #31
 801a894:	2210      	movs	r2, #16
 801a896:	fa02 f303 	lsl.w	r3, r2, r3
 801a89a:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    isr_reg  = &(((DMA_Base_Registers *)hdma->StreamBaseAddress)->ISR);
 801a89c:	68fb      	ldr	r3, [r7, #12]
 801a89e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a8a0:	623b      	str	r3, [r7, #32]
    ifcr_reg = &(((DMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
 801a8a2:	68fb      	ldr	r3, [r7, #12]
 801a8a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a8a6:	3308      	adds	r3, #8
 801a8a8:	61fb      	str	r3, [r7, #28]
 801a8aa:	e1d5      	b.n	801ac58 <HAL_DMA_PollForTransfer+0x4e8>
  }
  else /* BDMA channel */
  {
    /* Polling mode not supported in circular mode */
    if ((((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR & BDMA_CCR_CIRC) != 0U)
 801a8ac:	68fb      	ldr	r3, [r7, #12]
 801a8ae:	681b      	ldr	r3, [r3, #0]
 801a8b0:	681b      	ldr	r3, [r3, #0]
 801a8b2:	f003 0320 	and.w	r3, r3, #32
 801a8b6:	2b00      	cmp	r3, #0
 801a8b8:	d005      	beq.n	801a8c6 <HAL_DMA_PollForTransfer+0x156>
    {
      hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 801a8ba:	68fb      	ldr	r3, [r7, #12]
 801a8bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801a8c0:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 801a8c2:	2301      	movs	r3, #1
 801a8c4:	e2da      	b.n	801ae7c <HAL_DMA_PollForTransfer+0x70c>
    }

    /* Get the level transfer complete flag */
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 801a8c6:	7afb      	ldrb	r3, [r7, #11]
 801a8c8:	2b00      	cmp	r3, #0
 801a8ca:	d108      	bne.n	801a8de <HAL_DMA_PollForTransfer+0x16e>
    {
      /* Transfer Complete flag */
      cpltlevel_mask = BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU);
 801a8cc:	68fb      	ldr	r3, [r7, #12]
 801a8ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a8d0:	f003 031f 	and.w	r3, r3, #31
 801a8d4:	2202      	movs	r2, #2
 801a8d6:	fa02 f303 	lsl.w	r3, r2, r3
 801a8da:	627b      	str	r3, [r7, #36]	@ 0x24
 801a8dc:	e007      	b.n	801a8ee <HAL_DMA_PollForTransfer+0x17e>
    }
    else
    {
      /* Half Transfer Complete flag */
      cpltlevel_mask = BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU);
 801a8de:	68fb      	ldr	r3, [r7, #12]
 801a8e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a8e2:	f003 031f 	and.w	r3, r3, #31
 801a8e6:	2204      	movs	r2, #4
 801a8e8:	fa02 f303 	lsl.w	r3, r2, r3
 801a8ec:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    isr_reg  = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->ISR);
 801a8ee:	68fb      	ldr	r3, [r7, #12]
 801a8f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a8f2:	623b      	str	r3, [r7, #32]
    ifcr_reg = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
 801a8f4:	68fb      	ldr	r3, [r7, #12]
 801a8f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a8f8:	3304      	adds	r3, #4
 801a8fa:	61fb      	str	r3, [r7, #28]
  }

  while(((*isr_reg) & cpltlevel_mask) == 0U)
 801a8fc:	e1ac      	b.n	801ac58 <HAL_DMA_PollForTransfer+0x4e8>
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801a8fe:	68fb      	ldr	r3, [r7, #12]
 801a900:	681b      	ldr	r3, [r3, #0]
 801a902:	4a28      	ldr	r2, [pc, #160]	@ (801a9a4 <HAL_DMA_PollForTransfer+0x234>)
 801a904:	4293      	cmp	r3, r2
 801a906:	d04a      	beq.n	801a99e <HAL_DMA_PollForTransfer+0x22e>
 801a908:	68fb      	ldr	r3, [r7, #12]
 801a90a:	681b      	ldr	r3, [r3, #0]
 801a90c:	4a26      	ldr	r2, [pc, #152]	@ (801a9a8 <HAL_DMA_PollForTransfer+0x238>)
 801a90e:	4293      	cmp	r3, r2
 801a910:	d045      	beq.n	801a99e <HAL_DMA_PollForTransfer+0x22e>
 801a912:	68fb      	ldr	r3, [r7, #12]
 801a914:	681b      	ldr	r3, [r3, #0]
 801a916:	4a25      	ldr	r2, [pc, #148]	@ (801a9ac <HAL_DMA_PollForTransfer+0x23c>)
 801a918:	4293      	cmp	r3, r2
 801a91a:	d040      	beq.n	801a99e <HAL_DMA_PollForTransfer+0x22e>
 801a91c:	68fb      	ldr	r3, [r7, #12]
 801a91e:	681b      	ldr	r3, [r3, #0]
 801a920:	4a23      	ldr	r2, [pc, #140]	@ (801a9b0 <HAL_DMA_PollForTransfer+0x240>)
 801a922:	4293      	cmp	r3, r2
 801a924:	d03b      	beq.n	801a99e <HAL_DMA_PollForTransfer+0x22e>
 801a926:	68fb      	ldr	r3, [r7, #12]
 801a928:	681b      	ldr	r3, [r3, #0]
 801a92a:	4a22      	ldr	r2, [pc, #136]	@ (801a9b4 <HAL_DMA_PollForTransfer+0x244>)
 801a92c:	4293      	cmp	r3, r2
 801a92e:	d036      	beq.n	801a99e <HAL_DMA_PollForTransfer+0x22e>
 801a930:	68fb      	ldr	r3, [r7, #12]
 801a932:	681b      	ldr	r3, [r3, #0]
 801a934:	4a20      	ldr	r2, [pc, #128]	@ (801a9b8 <HAL_DMA_PollForTransfer+0x248>)
 801a936:	4293      	cmp	r3, r2
 801a938:	d031      	beq.n	801a99e <HAL_DMA_PollForTransfer+0x22e>
 801a93a:	68fb      	ldr	r3, [r7, #12]
 801a93c:	681b      	ldr	r3, [r3, #0]
 801a93e:	4a1f      	ldr	r2, [pc, #124]	@ (801a9bc <HAL_DMA_PollForTransfer+0x24c>)
 801a940:	4293      	cmp	r3, r2
 801a942:	d02c      	beq.n	801a99e <HAL_DMA_PollForTransfer+0x22e>
 801a944:	68fb      	ldr	r3, [r7, #12]
 801a946:	681b      	ldr	r3, [r3, #0]
 801a948:	4a1d      	ldr	r2, [pc, #116]	@ (801a9c0 <HAL_DMA_PollForTransfer+0x250>)
 801a94a:	4293      	cmp	r3, r2
 801a94c:	d027      	beq.n	801a99e <HAL_DMA_PollForTransfer+0x22e>
 801a94e:	68fb      	ldr	r3, [r7, #12]
 801a950:	681b      	ldr	r3, [r3, #0]
 801a952:	4a1c      	ldr	r2, [pc, #112]	@ (801a9c4 <HAL_DMA_PollForTransfer+0x254>)
 801a954:	4293      	cmp	r3, r2
 801a956:	d022      	beq.n	801a99e <HAL_DMA_PollForTransfer+0x22e>
 801a958:	68fb      	ldr	r3, [r7, #12]
 801a95a:	681b      	ldr	r3, [r3, #0]
 801a95c:	4a1a      	ldr	r2, [pc, #104]	@ (801a9c8 <HAL_DMA_PollForTransfer+0x258>)
 801a95e:	4293      	cmp	r3, r2
 801a960:	d01d      	beq.n	801a99e <HAL_DMA_PollForTransfer+0x22e>
 801a962:	68fb      	ldr	r3, [r7, #12]
 801a964:	681b      	ldr	r3, [r3, #0]
 801a966:	4a19      	ldr	r2, [pc, #100]	@ (801a9cc <HAL_DMA_PollForTransfer+0x25c>)
 801a968:	4293      	cmp	r3, r2
 801a96a:	d018      	beq.n	801a99e <HAL_DMA_PollForTransfer+0x22e>
 801a96c:	68fb      	ldr	r3, [r7, #12]
 801a96e:	681b      	ldr	r3, [r3, #0]
 801a970:	4a17      	ldr	r2, [pc, #92]	@ (801a9d0 <HAL_DMA_PollForTransfer+0x260>)
 801a972:	4293      	cmp	r3, r2
 801a974:	d013      	beq.n	801a99e <HAL_DMA_PollForTransfer+0x22e>
 801a976:	68fb      	ldr	r3, [r7, #12]
 801a978:	681b      	ldr	r3, [r3, #0]
 801a97a:	4a16      	ldr	r2, [pc, #88]	@ (801a9d4 <HAL_DMA_PollForTransfer+0x264>)
 801a97c:	4293      	cmp	r3, r2
 801a97e:	d00e      	beq.n	801a99e <HAL_DMA_PollForTransfer+0x22e>
 801a980:	68fb      	ldr	r3, [r7, #12]
 801a982:	681b      	ldr	r3, [r3, #0]
 801a984:	4a14      	ldr	r2, [pc, #80]	@ (801a9d8 <HAL_DMA_PollForTransfer+0x268>)
 801a986:	4293      	cmp	r3, r2
 801a988:	d009      	beq.n	801a99e <HAL_DMA_PollForTransfer+0x22e>
 801a98a:	68fb      	ldr	r3, [r7, #12]
 801a98c:	681b      	ldr	r3, [r3, #0]
 801a98e:	4a13      	ldr	r2, [pc, #76]	@ (801a9dc <HAL_DMA_PollForTransfer+0x26c>)
 801a990:	4293      	cmp	r3, r2
 801a992:	d004      	beq.n	801a99e <HAL_DMA_PollForTransfer+0x22e>
 801a994:	68fb      	ldr	r3, [r7, #12]
 801a996:	681b      	ldr	r3, [r3, #0]
 801a998:	4a11      	ldr	r2, [pc, #68]	@ (801a9e0 <HAL_DMA_PollForTransfer+0x270>)
 801a99a:	4293      	cmp	r3, r2
 801a99c:	d122      	bne.n	801a9e4 <HAL_DMA_PollForTransfer+0x274>
 801a99e:	2301      	movs	r3, #1
 801a9a0:	e021      	b.n	801a9e6 <HAL_DMA_PollForTransfer+0x276>
 801a9a2:	bf00      	nop
 801a9a4:	40020010 	.word	0x40020010
 801a9a8:	40020028 	.word	0x40020028
 801a9ac:	40020040 	.word	0x40020040
 801a9b0:	40020058 	.word	0x40020058
 801a9b4:	40020070 	.word	0x40020070
 801a9b8:	40020088 	.word	0x40020088
 801a9bc:	400200a0 	.word	0x400200a0
 801a9c0:	400200b8 	.word	0x400200b8
 801a9c4:	40020410 	.word	0x40020410
 801a9c8:	40020428 	.word	0x40020428
 801a9cc:	40020440 	.word	0x40020440
 801a9d0:	40020458 	.word	0x40020458
 801a9d4:	40020470 	.word	0x40020470
 801a9d8:	40020488 	.word	0x40020488
 801a9dc:	400204a0 	.word	0x400204a0
 801a9e0:	400204b8 	.word	0x400204b8
 801a9e4:	2300      	movs	r3, #0
 801a9e6:	2b00      	cmp	r3, #0
 801a9e8:	d057      	beq.n	801aa9a <HAL_DMA_PollForTransfer+0x32a>
    {
      if(((*isr_reg) & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801a9ea:	6a3b      	ldr	r3, [r7, #32]
 801a9ec:	681a      	ldr	r2, [r3, #0]
 801a9ee:	68fb      	ldr	r3, [r7, #12]
 801a9f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a9f2:	f003 031f 	and.w	r3, r3, #31
 801a9f6:	fa22 f303 	lsr.w	r3, r2, r3
 801a9fa:	f003 0301 	and.w	r3, r3, #1
 801a9fe:	2b00      	cmp	r3, #0
 801aa00:	d00d      	beq.n	801aa1e <HAL_DMA_PollForTransfer+0x2ae>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 801aa02:	68fb      	ldr	r3, [r7, #12]
 801aa04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801aa06:	f043 0202 	orr.w	r2, r3, #2
 801aa0a:	68fb      	ldr	r3, [r7, #12]
 801aa0c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear the FIFO error flag */
        (*ifcr_reg) = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801aa0e:	68fb      	ldr	r3, [r7, #12]
 801aa10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801aa12:	f003 031f 	and.w	r3, r3, #31
 801aa16:	2201      	movs	r2, #1
 801aa18:	409a      	lsls	r2, r3
 801aa1a:	69fb      	ldr	r3, [r7, #28]
 801aa1c:	601a      	str	r2, [r3, #0]
      }

      if(((*isr_reg) & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801aa1e:	6a3b      	ldr	r3, [r7, #32]
 801aa20:	681a      	ldr	r2, [r3, #0]
 801aa22:	68fb      	ldr	r3, [r7, #12]
 801aa24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801aa26:	f003 031f 	and.w	r3, r3, #31
 801aa2a:	2104      	movs	r1, #4
 801aa2c:	fa01 f303 	lsl.w	r3, r1, r3
 801aa30:	4013      	ands	r3, r2
 801aa32:	2b00      	cmp	r3, #0
 801aa34:	d00d      	beq.n	801aa52 <HAL_DMA_PollForTransfer+0x2e2>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 801aa36:	68fb      	ldr	r3, [r7, #12]
 801aa38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801aa3a:	f043 0204 	orr.w	r2, r3, #4
 801aa3e:	68fb      	ldr	r3, [r7, #12]
 801aa40:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear the Direct Mode error flag */
        (*ifcr_reg) = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801aa42:	68fb      	ldr	r3, [r7, #12]
 801aa44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801aa46:	f003 031f 	and.w	r3, r3, #31
 801aa4a:	2204      	movs	r2, #4
 801aa4c:	409a      	lsls	r2, r3
 801aa4e:	69fb      	ldr	r3, [r7, #28]
 801aa50:	601a      	str	r2, [r3, #0]
      }

      if(((*isr_reg) & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801aa52:	6a3b      	ldr	r3, [r7, #32]
 801aa54:	681a      	ldr	r2, [r3, #0]
 801aa56:	68fb      	ldr	r3, [r7, #12]
 801aa58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801aa5a:	f003 031f 	and.w	r3, r3, #31
 801aa5e:	2108      	movs	r1, #8
 801aa60:	fa01 f303 	lsl.w	r3, r1, r3
 801aa64:	4013      	ands	r3, r2
 801aa66:	2b00      	cmp	r3, #0
 801aa68:	d038      	beq.n	801aadc <HAL_DMA_PollForTransfer+0x36c>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 801aa6a:	68fb      	ldr	r3, [r7, #12]
 801aa6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801aa6e:	f043 0201 	orr.w	r2, r3, #1
 801aa72:	68fb      	ldr	r3, [r7, #12]
 801aa74:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear the transfer error flag */
        (*ifcr_reg) = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801aa76:	68fb      	ldr	r3, [r7, #12]
 801aa78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801aa7a:	f003 031f 	and.w	r3, r3, #31
 801aa7e:	2208      	movs	r2, #8
 801aa80:	409a      	lsls	r2, r3
 801aa82:	69fb      	ldr	r3, [r7, #28]
 801aa84:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801aa86:	68fb      	ldr	r3, [r7, #12]
 801aa88:	2201      	movs	r2, #1
 801aa8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801aa8e:	68fb      	ldr	r3, [r7, #12]
 801aa90:	2200      	movs	r2, #0
 801aa92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 801aa96:	2301      	movs	r3, #1
 801aa98:	e1f0      	b.n	801ae7c <HAL_DMA_PollForTransfer+0x70c>
      }
    }
    else /* BDMA channel */
    {
      if(((*isr_reg) & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801aa9a:	6a3b      	ldr	r3, [r7, #32]
 801aa9c:	681a      	ldr	r2, [r3, #0]
 801aa9e:	68fb      	ldr	r3, [r7, #12]
 801aaa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801aaa2:	f003 031f 	and.w	r3, r3, #31
 801aaa6:	2108      	movs	r1, #8
 801aaa8:	fa01 f303 	lsl.w	r3, r1, r3
 801aaac:	4013      	ands	r3, r2
 801aaae:	2b00      	cmp	r3, #0
 801aab0:	d014      	beq.n	801aadc <HAL_DMA_PollForTransfer+0x36c>
      {
        /* When a DMA transfer error occurs */
        /* A hardware clear of its EN bits is performed */
        /* Clear all flags */
        (*isr_reg) = ((BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU));
 801aab2:	68fb      	ldr	r3, [r7, #12]
 801aab4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801aab6:	f003 031f 	and.w	r3, r3, #31
 801aaba:	2201      	movs	r2, #1
 801aabc:	409a      	lsls	r2, r3
 801aabe:	6a3b      	ldr	r3, [r7, #32]
 801aac0:	601a      	str	r2, [r3, #0]

        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TE;
 801aac2:	68fb      	ldr	r3, [r7, #12]
 801aac4:	2201      	movs	r2, #1
 801aac6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801aac8:	68fb      	ldr	r3, [r7, #12]
 801aaca:	2201      	movs	r2, #1
 801aacc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801aad0:	68fb      	ldr	r3, [r7, #12]
 801aad2:	2200      	movs	r2, #0
 801aad4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 801aad8:	2301      	movs	r3, #1
 801aada:	e1cf      	b.n	801ae7c <HAL_DMA_PollForTransfer+0x70c>
      }
    }

    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
 801aadc:	687b      	ldr	r3, [r7, #4]
 801aade:	f1b3 3fff 	cmp.w	r3, #4294967295
 801aae2:	d012      	beq.n	801ab0a <HAL_DMA_PollForTransfer+0x39a>
    {
      if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 801aae4:	f7fe fccc 	bl	8019480 <HAL_GetTick>
 801aae8:	4602      	mov	r2, r0
 801aaea:	697b      	ldr	r3, [r7, #20]
 801aaec:	1ad3      	subs	r3, r2, r3
 801aaee:	687a      	ldr	r2, [r7, #4]
 801aaf0:	429a      	cmp	r2, r3
 801aaf2:	d302      	bcc.n	801aafa <HAL_DMA_PollForTransfer+0x38a>
 801aaf4:	687b      	ldr	r3, [r7, #4]
 801aaf6:	2b00      	cmp	r3, #0
 801aaf8:	d107      	bne.n	801ab0a <HAL_DMA_PollForTransfer+0x39a>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801aafa:	68fb      	ldr	r3, [r7, #12]
 801aafc:	2220      	movs	r2, #32
 801aafe:	655a      	str	r2, [r3, #84]	@ 0x54

        /* if timeout then abort the current transfer */
        /* No need to check return value: as in this case we will return HAL_ERROR with HAL_DMA_ERROR_TIMEOUT error code  */
        (void) HAL_DMA_Abort(hdma);
 801ab00:	68f8      	ldr	r0, [r7, #12]
 801ab02:	f7ff fb17 	bl	801a134 <HAL_DMA_Abort>
              - Clear the transfer error flags
              - Unlock
              - Set the State
          */

        return HAL_ERROR;
 801ab06:	2301      	movs	r3, #1
 801ab08:	e1b8      	b.n	801ae7c <HAL_DMA_PollForTransfer+0x70c>
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801ab0a:	68fb      	ldr	r3, [r7, #12]
 801ab0c:	681b      	ldr	r3, [r3, #0]
 801ab0e:	4a81      	ldr	r2, [pc, #516]	@ (801ad14 <HAL_DMA_PollForTransfer+0x5a4>)
 801ab10:	4293      	cmp	r3, r2
 801ab12:	d072      	beq.n	801abfa <HAL_DMA_PollForTransfer+0x48a>
 801ab14:	68fb      	ldr	r3, [r7, #12]
 801ab16:	681b      	ldr	r3, [r3, #0]
 801ab18:	4a7f      	ldr	r2, [pc, #508]	@ (801ad18 <HAL_DMA_PollForTransfer+0x5a8>)
 801ab1a:	4293      	cmp	r3, r2
 801ab1c:	d06d      	beq.n	801abfa <HAL_DMA_PollForTransfer+0x48a>
 801ab1e:	68fb      	ldr	r3, [r7, #12]
 801ab20:	681b      	ldr	r3, [r3, #0]
 801ab22:	4a7e      	ldr	r2, [pc, #504]	@ (801ad1c <HAL_DMA_PollForTransfer+0x5ac>)
 801ab24:	4293      	cmp	r3, r2
 801ab26:	d068      	beq.n	801abfa <HAL_DMA_PollForTransfer+0x48a>
 801ab28:	68fb      	ldr	r3, [r7, #12]
 801ab2a:	681b      	ldr	r3, [r3, #0]
 801ab2c:	4a7c      	ldr	r2, [pc, #496]	@ (801ad20 <HAL_DMA_PollForTransfer+0x5b0>)
 801ab2e:	4293      	cmp	r3, r2
 801ab30:	d063      	beq.n	801abfa <HAL_DMA_PollForTransfer+0x48a>
 801ab32:	68fb      	ldr	r3, [r7, #12]
 801ab34:	681b      	ldr	r3, [r3, #0]
 801ab36:	4a7b      	ldr	r2, [pc, #492]	@ (801ad24 <HAL_DMA_PollForTransfer+0x5b4>)
 801ab38:	4293      	cmp	r3, r2
 801ab3a:	d05e      	beq.n	801abfa <HAL_DMA_PollForTransfer+0x48a>
 801ab3c:	68fb      	ldr	r3, [r7, #12]
 801ab3e:	681b      	ldr	r3, [r3, #0]
 801ab40:	4a79      	ldr	r2, [pc, #484]	@ (801ad28 <HAL_DMA_PollForTransfer+0x5b8>)
 801ab42:	4293      	cmp	r3, r2
 801ab44:	d059      	beq.n	801abfa <HAL_DMA_PollForTransfer+0x48a>
 801ab46:	68fb      	ldr	r3, [r7, #12]
 801ab48:	681b      	ldr	r3, [r3, #0]
 801ab4a:	4a78      	ldr	r2, [pc, #480]	@ (801ad2c <HAL_DMA_PollForTransfer+0x5bc>)
 801ab4c:	4293      	cmp	r3, r2
 801ab4e:	d054      	beq.n	801abfa <HAL_DMA_PollForTransfer+0x48a>
 801ab50:	68fb      	ldr	r3, [r7, #12]
 801ab52:	681b      	ldr	r3, [r3, #0]
 801ab54:	4a76      	ldr	r2, [pc, #472]	@ (801ad30 <HAL_DMA_PollForTransfer+0x5c0>)
 801ab56:	4293      	cmp	r3, r2
 801ab58:	d04f      	beq.n	801abfa <HAL_DMA_PollForTransfer+0x48a>
 801ab5a:	68fb      	ldr	r3, [r7, #12]
 801ab5c:	681b      	ldr	r3, [r3, #0]
 801ab5e:	4a75      	ldr	r2, [pc, #468]	@ (801ad34 <HAL_DMA_PollForTransfer+0x5c4>)
 801ab60:	4293      	cmp	r3, r2
 801ab62:	d04a      	beq.n	801abfa <HAL_DMA_PollForTransfer+0x48a>
 801ab64:	68fb      	ldr	r3, [r7, #12]
 801ab66:	681b      	ldr	r3, [r3, #0]
 801ab68:	4a73      	ldr	r2, [pc, #460]	@ (801ad38 <HAL_DMA_PollForTransfer+0x5c8>)
 801ab6a:	4293      	cmp	r3, r2
 801ab6c:	d045      	beq.n	801abfa <HAL_DMA_PollForTransfer+0x48a>
 801ab6e:	68fb      	ldr	r3, [r7, #12]
 801ab70:	681b      	ldr	r3, [r3, #0]
 801ab72:	4a72      	ldr	r2, [pc, #456]	@ (801ad3c <HAL_DMA_PollForTransfer+0x5cc>)
 801ab74:	4293      	cmp	r3, r2
 801ab76:	d040      	beq.n	801abfa <HAL_DMA_PollForTransfer+0x48a>
 801ab78:	68fb      	ldr	r3, [r7, #12]
 801ab7a:	681b      	ldr	r3, [r3, #0]
 801ab7c:	4a70      	ldr	r2, [pc, #448]	@ (801ad40 <HAL_DMA_PollForTransfer+0x5d0>)
 801ab7e:	4293      	cmp	r3, r2
 801ab80:	d03b      	beq.n	801abfa <HAL_DMA_PollForTransfer+0x48a>
 801ab82:	68fb      	ldr	r3, [r7, #12]
 801ab84:	681b      	ldr	r3, [r3, #0]
 801ab86:	4a6f      	ldr	r2, [pc, #444]	@ (801ad44 <HAL_DMA_PollForTransfer+0x5d4>)
 801ab88:	4293      	cmp	r3, r2
 801ab8a:	d036      	beq.n	801abfa <HAL_DMA_PollForTransfer+0x48a>
 801ab8c:	68fb      	ldr	r3, [r7, #12]
 801ab8e:	681b      	ldr	r3, [r3, #0]
 801ab90:	4a6d      	ldr	r2, [pc, #436]	@ (801ad48 <HAL_DMA_PollForTransfer+0x5d8>)
 801ab92:	4293      	cmp	r3, r2
 801ab94:	d031      	beq.n	801abfa <HAL_DMA_PollForTransfer+0x48a>
 801ab96:	68fb      	ldr	r3, [r7, #12]
 801ab98:	681b      	ldr	r3, [r3, #0]
 801ab9a:	4a6c      	ldr	r2, [pc, #432]	@ (801ad4c <HAL_DMA_PollForTransfer+0x5dc>)
 801ab9c:	4293      	cmp	r3, r2
 801ab9e:	d02c      	beq.n	801abfa <HAL_DMA_PollForTransfer+0x48a>
 801aba0:	68fb      	ldr	r3, [r7, #12]
 801aba2:	681b      	ldr	r3, [r3, #0]
 801aba4:	4a6a      	ldr	r2, [pc, #424]	@ (801ad50 <HAL_DMA_PollForTransfer+0x5e0>)
 801aba6:	4293      	cmp	r3, r2
 801aba8:	d027      	beq.n	801abfa <HAL_DMA_PollForTransfer+0x48a>
 801abaa:	68fb      	ldr	r3, [r7, #12]
 801abac:	681b      	ldr	r3, [r3, #0]
 801abae:	4a69      	ldr	r2, [pc, #420]	@ (801ad54 <HAL_DMA_PollForTransfer+0x5e4>)
 801abb0:	4293      	cmp	r3, r2
 801abb2:	d022      	beq.n	801abfa <HAL_DMA_PollForTransfer+0x48a>
 801abb4:	68fb      	ldr	r3, [r7, #12]
 801abb6:	681b      	ldr	r3, [r3, #0]
 801abb8:	4a67      	ldr	r2, [pc, #412]	@ (801ad58 <HAL_DMA_PollForTransfer+0x5e8>)
 801abba:	4293      	cmp	r3, r2
 801abbc:	d01d      	beq.n	801abfa <HAL_DMA_PollForTransfer+0x48a>
 801abbe:	68fb      	ldr	r3, [r7, #12]
 801abc0:	681b      	ldr	r3, [r3, #0]
 801abc2:	4a66      	ldr	r2, [pc, #408]	@ (801ad5c <HAL_DMA_PollForTransfer+0x5ec>)
 801abc4:	4293      	cmp	r3, r2
 801abc6:	d018      	beq.n	801abfa <HAL_DMA_PollForTransfer+0x48a>
 801abc8:	68fb      	ldr	r3, [r7, #12]
 801abca:	681b      	ldr	r3, [r3, #0]
 801abcc:	4a64      	ldr	r2, [pc, #400]	@ (801ad60 <HAL_DMA_PollForTransfer+0x5f0>)
 801abce:	4293      	cmp	r3, r2
 801abd0:	d013      	beq.n	801abfa <HAL_DMA_PollForTransfer+0x48a>
 801abd2:	68fb      	ldr	r3, [r7, #12]
 801abd4:	681b      	ldr	r3, [r3, #0]
 801abd6:	4a63      	ldr	r2, [pc, #396]	@ (801ad64 <HAL_DMA_PollForTransfer+0x5f4>)
 801abd8:	4293      	cmp	r3, r2
 801abda:	d00e      	beq.n	801abfa <HAL_DMA_PollForTransfer+0x48a>
 801abdc:	68fb      	ldr	r3, [r7, #12]
 801abde:	681b      	ldr	r3, [r3, #0]
 801abe0:	4a61      	ldr	r2, [pc, #388]	@ (801ad68 <HAL_DMA_PollForTransfer+0x5f8>)
 801abe2:	4293      	cmp	r3, r2
 801abe4:	d009      	beq.n	801abfa <HAL_DMA_PollForTransfer+0x48a>
 801abe6:	68fb      	ldr	r3, [r7, #12]
 801abe8:	681b      	ldr	r3, [r3, #0]
 801abea:	4a60      	ldr	r2, [pc, #384]	@ (801ad6c <HAL_DMA_PollForTransfer+0x5fc>)
 801abec:	4293      	cmp	r3, r2
 801abee:	d004      	beq.n	801abfa <HAL_DMA_PollForTransfer+0x48a>
 801abf0:	68fb      	ldr	r3, [r7, #12]
 801abf2:	681b      	ldr	r3, [r3, #0]
 801abf4:	4a5e      	ldr	r2, [pc, #376]	@ (801ad70 <HAL_DMA_PollForTransfer+0x600>)
 801abf6:	4293      	cmp	r3, r2
 801abf8:	d101      	bne.n	801abfe <HAL_DMA_PollForTransfer+0x48e>
 801abfa:	2301      	movs	r3, #1
 801abfc:	e000      	b.n	801ac00 <HAL_DMA_PollForTransfer+0x490>
 801abfe:	2300      	movs	r3, #0
 801ac00:	2b00      	cmp	r3, #0
 801ac02:	d029      	beq.n	801ac58 <HAL_DMA_PollForTransfer+0x4e8>
    {
      /* Check for DMAMUX Request generator (if used) overrun status */
      if(hdma->DMAmuxRequestGen != 0U)
 801ac04:	68fb      	ldr	r3, [r7, #12]
 801ac06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ac08:	2b00      	cmp	r3, #0
 801ac0a:	d012      	beq.n	801ac32 <HAL_DMA_PollForTransfer+0x4c2>
      {
        /* if using DMAMUX request generator Check for DMAMUX request generator overrun */
        if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 801ac0c:	68fb      	ldr	r3, [r7, #12]
 801ac0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ac10:	681a      	ldr	r2, [r3, #0]
 801ac12:	68fb      	ldr	r3, [r7, #12]
 801ac14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ac16:	4013      	ands	r3, r2
 801ac18:	2b00      	cmp	r3, #0
 801ac1a:	d00a      	beq.n	801ac32 <HAL_DMA_PollForTransfer+0x4c2>
        {
          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801ac1c:	68fb      	ldr	r3, [r7, #12]
 801ac1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ac20:	68fa      	ldr	r2, [r7, #12]
 801ac22:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801ac24:	605a      	str	r2, [r3, #4]

          /* Update error code */
          hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 801ac26:	68fb      	ldr	r3, [r7, #12]
 801ac28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801ac2a:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 801ac2e:	68fb      	ldr	r3, [r7, #12]
 801ac30:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }

      /* Check for DMAMUX Synchronization overrun */
      if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 801ac32:	68fb      	ldr	r3, [r7, #12]
 801ac34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ac36:	681a      	ldr	r2, [r3, #0]
 801ac38:	68fb      	ldr	r3, [r7, #12]
 801ac3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801ac3c:	4013      	ands	r3, r2
 801ac3e:	2b00      	cmp	r3, #0
 801ac40:	d00a      	beq.n	801ac58 <HAL_DMA_PollForTransfer+0x4e8>
      {
        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801ac42:	68fb      	ldr	r3, [r7, #12]
 801ac44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ac46:	68fa      	ldr	r2, [r7, #12]
 801ac48:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801ac4a:	605a      	str	r2, [r3, #4]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 801ac4c:	68fb      	ldr	r3, [r7, #12]
 801ac4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801ac50:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 801ac54:	68fb      	ldr	r3, [r7, #12]
 801ac56:	655a      	str	r2, [r3, #84]	@ 0x54
  while(((*isr_reg) & cpltlevel_mask) == 0U)
 801ac58:	6a3b      	ldr	r3, [r7, #32]
 801ac5a:	681a      	ldr	r2, [r3, #0]
 801ac5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac5e:	4013      	ands	r3, r2
 801ac60:	2b00      	cmp	r3, #0
 801ac62:	f43f ae4c 	beq.w	801a8fe <HAL_DMA_PollForTransfer+0x18e>
    }
  }


  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 801ac66:	7afb      	ldrb	r3, [r7, #11]
 801ac68:	2b00      	cmp	r3, #0
 801ac6a:	f040 80a0 	bne.w	801adae <HAL_DMA_PollForTransfer+0x63e>
  {
    /* Clear the half transfer and transfer complete flags */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801ac6e:	68fb      	ldr	r3, [r7, #12]
 801ac70:	681b      	ldr	r3, [r3, #0]
 801ac72:	4a28      	ldr	r2, [pc, #160]	@ (801ad14 <HAL_DMA_PollForTransfer+0x5a4>)
 801ac74:	4293      	cmp	r3, r2
 801ac76:	d04a      	beq.n	801ad0e <HAL_DMA_PollForTransfer+0x59e>
 801ac78:	68fb      	ldr	r3, [r7, #12]
 801ac7a:	681b      	ldr	r3, [r3, #0]
 801ac7c:	4a26      	ldr	r2, [pc, #152]	@ (801ad18 <HAL_DMA_PollForTransfer+0x5a8>)
 801ac7e:	4293      	cmp	r3, r2
 801ac80:	d045      	beq.n	801ad0e <HAL_DMA_PollForTransfer+0x59e>
 801ac82:	68fb      	ldr	r3, [r7, #12]
 801ac84:	681b      	ldr	r3, [r3, #0]
 801ac86:	4a25      	ldr	r2, [pc, #148]	@ (801ad1c <HAL_DMA_PollForTransfer+0x5ac>)
 801ac88:	4293      	cmp	r3, r2
 801ac8a:	d040      	beq.n	801ad0e <HAL_DMA_PollForTransfer+0x59e>
 801ac8c:	68fb      	ldr	r3, [r7, #12]
 801ac8e:	681b      	ldr	r3, [r3, #0]
 801ac90:	4a23      	ldr	r2, [pc, #140]	@ (801ad20 <HAL_DMA_PollForTransfer+0x5b0>)
 801ac92:	4293      	cmp	r3, r2
 801ac94:	d03b      	beq.n	801ad0e <HAL_DMA_PollForTransfer+0x59e>
 801ac96:	68fb      	ldr	r3, [r7, #12]
 801ac98:	681b      	ldr	r3, [r3, #0]
 801ac9a:	4a22      	ldr	r2, [pc, #136]	@ (801ad24 <HAL_DMA_PollForTransfer+0x5b4>)
 801ac9c:	4293      	cmp	r3, r2
 801ac9e:	d036      	beq.n	801ad0e <HAL_DMA_PollForTransfer+0x59e>
 801aca0:	68fb      	ldr	r3, [r7, #12]
 801aca2:	681b      	ldr	r3, [r3, #0]
 801aca4:	4a20      	ldr	r2, [pc, #128]	@ (801ad28 <HAL_DMA_PollForTransfer+0x5b8>)
 801aca6:	4293      	cmp	r3, r2
 801aca8:	d031      	beq.n	801ad0e <HAL_DMA_PollForTransfer+0x59e>
 801acaa:	68fb      	ldr	r3, [r7, #12]
 801acac:	681b      	ldr	r3, [r3, #0]
 801acae:	4a1f      	ldr	r2, [pc, #124]	@ (801ad2c <HAL_DMA_PollForTransfer+0x5bc>)
 801acb0:	4293      	cmp	r3, r2
 801acb2:	d02c      	beq.n	801ad0e <HAL_DMA_PollForTransfer+0x59e>
 801acb4:	68fb      	ldr	r3, [r7, #12]
 801acb6:	681b      	ldr	r3, [r3, #0]
 801acb8:	4a1d      	ldr	r2, [pc, #116]	@ (801ad30 <HAL_DMA_PollForTransfer+0x5c0>)
 801acba:	4293      	cmp	r3, r2
 801acbc:	d027      	beq.n	801ad0e <HAL_DMA_PollForTransfer+0x59e>
 801acbe:	68fb      	ldr	r3, [r7, #12]
 801acc0:	681b      	ldr	r3, [r3, #0]
 801acc2:	4a1c      	ldr	r2, [pc, #112]	@ (801ad34 <HAL_DMA_PollForTransfer+0x5c4>)
 801acc4:	4293      	cmp	r3, r2
 801acc6:	d022      	beq.n	801ad0e <HAL_DMA_PollForTransfer+0x59e>
 801acc8:	68fb      	ldr	r3, [r7, #12]
 801acca:	681b      	ldr	r3, [r3, #0]
 801accc:	4a1a      	ldr	r2, [pc, #104]	@ (801ad38 <HAL_DMA_PollForTransfer+0x5c8>)
 801acce:	4293      	cmp	r3, r2
 801acd0:	d01d      	beq.n	801ad0e <HAL_DMA_PollForTransfer+0x59e>
 801acd2:	68fb      	ldr	r3, [r7, #12]
 801acd4:	681b      	ldr	r3, [r3, #0]
 801acd6:	4a19      	ldr	r2, [pc, #100]	@ (801ad3c <HAL_DMA_PollForTransfer+0x5cc>)
 801acd8:	4293      	cmp	r3, r2
 801acda:	d018      	beq.n	801ad0e <HAL_DMA_PollForTransfer+0x59e>
 801acdc:	68fb      	ldr	r3, [r7, #12]
 801acde:	681b      	ldr	r3, [r3, #0]
 801ace0:	4a17      	ldr	r2, [pc, #92]	@ (801ad40 <HAL_DMA_PollForTransfer+0x5d0>)
 801ace2:	4293      	cmp	r3, r2
 801ace4:	d013      	beq.n	801ad0e <HAL_DMA_PollForTransfer+0x59e>
 801ace6:	68fb      	ldr	r3, [r7, #12]
 801ace8:	681b      	ldr	r3, [r3, #0]
 801acea:	4a16      	ldr	r2, [pc, #88]	@ (801ad44 <HAL_DMA_PollForTransfer+0x5d4>)
 801acec:	4293      	cmp	r3, r2
 801acee:	d00e      	beq.n	801ad0e <HAL_DMA_PollForTransfer+0x59e>
 801acf0:	68fb      	ldr	r3, [r7, #12]
 801acf2:	681b      	ldr	r3, [r3, #0]
 801acf4:	4a14      	ldr	r2, [pc, #80]	@ (801ad48 <HAL_DMA_PollForTransfer+0x5d8>)
 801acf6:	4293      	cmp	r3, r2
 801acf8:	d009      	beq.n	801ad0e <HAL_DMA_PollForTransfer+0x59e>
 801acfa:	68fb      	ldr	r3, [r7, #12]
 801acfc:	681b      	ldr	r3, [r3, #0]
 801acfe:	4a13      	ldr	r2, [pc, #76]	@ (801ad4c <HAL_DMA_PollForTransfer+0x5dc>)
 801ad00:	4293      	cmp	r3, r2
 801ad02:	d004      	beq.n	801ad0e <HAL_DMA_PollForTransfer+0x59e>
 801ad04:	68fb      	ldr	r3, [r7, #12]
 801ad06:	681b      	ldr	r3, [r3, #0]
 801ad08:	4a11      	ldr	r2, [pc, #68]	@ (801ad50 <HAL_DMA_PollForTransfer+0x5e0>)
 801ad0a:	4293      	cmp	r3, r2
 801ad0c:	d132      	bne.n	801ad74 <HAL_DMA_PollForTransfer+0x604>
 801ad0e:	2301      	movs	r3, #1
 801ad10:	e031      	b.n	801ad76 <HAL_DMA_PollForTransfer+0x606>
 801ad12:	bf00      	nop
 801ad14:	40020010 	.word	0x40020010
 801ad18:	40020028 	.word	0x40020028
 801ad1c:	40020040 	.word	0x40020040
 801ad20:	40020058 	.word	0x40020058
 801ad24:	40020070 	.word	0x40020070
 801ad28:	40020088 	.word	0x40020088
 801ad2c:	400200a0 	.word	0x400200a0
 801ad30:	400200b8 	.word	0x400200b8
 801ad34:	40020410 	.word	0x40020410
 801ad38:	40020428 	.word	0x40020428
 801ad3c:	40020440 	.word	0x40020440
 801ad40:	40020458 	.word	0x40020458
 801ad44:	40020470 	.word	0x40020470
 801ad48:	40020488 	.word	0x40020488
 801ad4c:	400204a0 	.word	0x400204a0
 801ad50:	400204b8 	.word	0x400204b8
 801ad54:	58025408 	.word	0x58025408
 801ad58:	5802541c 	.word	0x5802541c
 801ad5c:	58025430 	.word	0x58025430
 801ad60:	58025444 	.word	0x58025444
 801ad64:	58025458 	.word	0x58025458
 801ad68:	5802546c 	.word	0x5802546c
 801ad6c:	58025480 	.word	0x58025480
 801ad70:	58025494 	.word	0x58025494
 801ad74:	2300      	movs	r3, #0
 801ad76:	2b00      	cmp	r3, #0
 801ad78:	d008      	beq.n	801ad8c <HAL_DMA_PollForTransfer+0x61c>
    {
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << (hdma->StreamIndex & 0x1FU);
 801ad7a:	68fb      	ldr	r3, [r7, #12]
 801ad7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801ad7e:	f003 031f 	and.w	r3, r3, #31
 801ad82:	2230      	movs	r2, #48	@ 0x30
 801ad84:	409a      	lsls	r2, r3
 801ad86:	69fb      	ldr	r3, [r7, #28]
 801ad88:	601a      	str	r2, [r3, #0]
 801ad8a:	e007      	b.n	801ad9c <HAL_DMA_PollForTransfer+0x62c>
    }
    else /* BDMA channel */
    {
      (*ifcr_reg) = (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU));
 801ad8c:	68fb      	ldr	r3, [r7, #12]
 801ad8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801ad90:	f003 031f 	and.w	r3, r3, #31
 801ad94:	2202      	movs	r2, #2
 801ad96:	409a      	lsls	r2, r3
 801ad98:	69fb      	ldr	r3, [r7, #28]
 801ad9a:	601a      	str	r2, [r3, #0]
    }

    hdma->State = HAL_DMA_STATE_READY;
 801ad9c:	68fb      	ldr	r3, [r7, #12]
 801ad9e:	2201      	movs	r2, #1
 801ada0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801ada4:	68fb      	ldr	r3, [r7, #12]
 801ada6:	2200      	movs	r2, #0
 801ada8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 801adac:	e065      	b.n	801ae7a <HAL_DMA_PollForTransfer+0x70a>
  }
  else /*CompleteLevel = HAL_DMA_HALF_TRANSFER*/
  {
    /* Clear the half transfer and transfer complete flags */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801adae:	68fb      	ldr	r3, [r7, #12]
 801adb0:	681b      	ldr	r3, [r3, #0]
 801adb2:	4a34      	ldr	r2, [pc, #208]	@ (801ae84 <HAL_DMA_PollForTransfer+0x714>)
 801adb4:	4293      	cmp	r3, r2
 801adb6:	d04a      	beq.n	801ae4e <HAL_DMA_PollForTransfer+0x6de>
 801adb8:	68fb      	ldr	r3, [r7, #12]
 801adba:	681b      	ldr	r3, [r3, #0]
 801adbc:	4a32      	ldr	r2, [pc, #200]	@ (801ae88 <HAL_DMA_PollForTransfer+0x718>)
 801adbe:	4293      	cmp	r3, r2
 801adc0:	d045      	beq.n	801ae4e <HAL_DMA_PollForTransfer+0x6de>
 801adc2:	68fb      	ldr	r3, [r7, #12]
 801adc4:	681b      	ldr	r3, [r3, #0]
 801adc6:	4a31      	ldr	r2, [pc, #196]	@ (801ae8c <HAL_DMA_PollForTransfer+0x71c>)
 801adc8:	4293      	cmp	r3, r2
 801adca:	d040      	beq.n	801ae4e <HAL_DMA_PollForTransfer+0x6de>
 801adcc:	68fb      	ldr	r3, [r7, #12]
 801adce:	681b      	ldr	r3, [r3, #0]
 801add0:	4a2f      	ldr	r2, [pc, #188]	@ (801ae90 <HAL_DMA_PollForTransfer+0x720>)
 801add2:	4293      	cmp	r3, r2
 801add4:	d03b      	beq.n	801ae4e <HAL_DMA_PollForTransfer+0x6de>
 801add6:	68fb      	ldr	r3, [r7, #12]
 801add8:	681b      	ldr	r3, [r3, #0]
 801adda:	4a2e      	ldr	r2, [pc, #184]	@ (801ae94 <HAL_DMA_PollForTransfer+0x724>)
 801addc:	4293      	cmp	r3, r2
 801adde:	d036      	beq.n	801ae4e <HAL_DMA_PollForTransfer+0x6de>
 801ade0:	68fb      	ldr	r3, [r7, #12]
 801ade2:	681b      	ldr	r3, [r3, #0]
 801ade4:	4a2c      	ldr	r2, [pc, #176]	@ (801ae98 <HAL_DMA_PollForTransfer+0x728>)
 801ade6:	4293      	cmp	r3, r2
 801ade8:	d031      	beq.n	801ae4e <HAL_DMA_PollForTransfer+0x6de>
 801adea:	68fb      	ldr	r3, [r7, #12]
 801adec:	681b      	ldr	r3, [r3, #0]
 801adee:	4a2b      	ldr	r2, [pc, #172]	@ (801ae9c <HAL_DMA_PollForTransfer+0x72c>)
 801adf0:	4293      	cmp	r3, r2
 801adf2:	d02c      	beq.n	801ae4e <HAL_DMA_PollForTransfer+0x6de>
 801adf4:	68fb      	ldr	r3, [r7, #12]
 801adf6:	681b      	ldr	r3, [r3, #0]
 801adf8:	4a29      	ldr	r2, [pc, #164]	@ (801aea0 <HAL_DMA_PollForTransfer+0x730>)
 801adfa:	4293      	cmp	r3, r2
 801adfc:	d027      	beq.n	801ae4e <HAL_DMA_PollForTransfer+0x6de>
 801adfe:	68fb      	ldr	r3, [r7, #12]
 801ae00:	681b      	ldr	r3, [r3, #0]
 801ae02:	4a28      	ldr	r2, [pc, #160]	@ (801aea4 <HAL_DMA_PollForTransfer+0x734>)
 801ae04:	4293      	cmp	r3, r2
 801ae06:	d022      	beq.n	801ae4e <HAL_DMA_PollForTransfer+0x6de>
 801ae08:	68fb      	ldr	r3, [r7, #12]
 801ae0a:	681b      	ldr	r3, [r3, #0]
 801ae0c:	4a26      	ldr	r2, [pc, #152]	@ (801aea8 <HAL_DMA_PollForTransfer+0x738>)
 801ae0e:	4293      	cmp	r3, r2
 801ae10:	d01d      	beq.n	801ae4e <HAL_DMA_PollForTransfer+0x6de>
 801ae12:	68fb      	ldr	r3, [r7, #12]
 801ae14:	681b      	ldr	r3, [r3, #0]
 801ae16:	4a25      	ldr	r2, [pc, #148]	@ (801aeac <HAL_DMA_PollForTransfer+0x73c>)
 801ae18:	4293      	cmp	r3, r2
 801ae1a:	d018      	beq.n	801ae4e <HAL_DMA_PollForTransfer+0x6de>
 801ae1c:	68fb      	ldr	r3, [r7, #12]
 801ae1e:	681b      	ldr	r3, [r3, #0]
 801ae20:	4a23      	ldr	r2, [pc, #140]	@ (801aeb0 <HAL_DMA_PollForTransfer+0x740>)
 801ae22:	4293      	cmp	r3, r2
 801ae24:	d013      	beq.n	801ae4e <HAL_DMA_PollForTransfer+0x6de>
 801ae26:	68fb      	ldr	r3, [r7, #12]
 801ae28:	681b      	ldr	r3, [r3, #0]
 801ae2a:	4a22      	ldr	r2, [pc, #136]	@ (801aeb4 <HAL_DMA_PollForTransfer+0x744>)
 801ae2c:	4293      	cmp	r3, r2
 801ae2e:	d00e      	beq.n	801ae4e <HAL_DMA_PollForTransfer+0x6de>
 801ae30:	68fb      	ldr	r3, [r7, #12]
 801ae32:	681b      	ldr	r3, [r3, #0]
 801ae34:	4a20      	ldr	r2, [pc, #128]	@ (801aeb8 <HAL_DMA_PollForTransfer+0x748>)
 801ae36:	4293      	cmp	r3, r2
 801ae38:	d009      	beq.n	801ae4e <HAL_DMA_PollForTransfer+0x6de>
 801ae3a:	68fb      	ldr	r3, [r7, #12]
 801ae3c:	681b      	ldr	r3, [r3, #0]
 801ae3e:	4a1f      	ldr	r2, [pc, #124]	@ (801aebc <HAL_DMA_PollForTransfer+0x74c>)
 801ae40:	4293      	cmp	r3, r2
 801ae42:	d004      	beq.n	801ae4e <HAL_DMA_PollForTransfer+0x6de>
 801ae44:	68fb      	ldr	r3, [r7, #12]
 801ae46:	681b      	ldr	r3, [r3, #0]
 801ae48:	4a1d      	ldr	r2, [pc, #116]	@ (801aec0 <HAL_DMA_PollForTransfer+0x750>)
 801ae4a:	4293      	cmp	r3, r2
 801ae4c:	d101      	bne.n	801ae52 <HAL_DMA_PollForTransfer+0x6e2>
 801ae4e:	2301      	movs	r3, #1
 801ae50:	e000      	b.n	801ae54 <HAL_DMA_PollForTransfer+0x6e4>
 801ae52:	2300      	movs	r3, #0
 801ae54:	2b00      	cmp	r3, #0
 801ae56:	d008      	beq.n	801ae6a <HAL_DMA_PollForTransfer+0x6fa>
    {
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4) << (hdma->StreamIndex & 0x1FU);
 801ae58:	68fb      	ldr	r3, [r7, #12]
 801ae5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801ae5c:	f003 031f 	and.w	r3, r3, #31
 801ae60:	2210      	movs	r2, #16
 801ae62:	409a      	lsls	r2, r3
 801ae64:	69fb      	ldr	r3, [r7, #28]
 801ae66:	601a      	str	r2, [r3, #0]
 801ae68:	e007      	b.n	801ae7a <HAL_DMA_PollForTransfer+0x70a>
    }
    else /* BDMA channel */
    {
      (*ifcr_reg) = (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU));
 801ae6a:	68fb      	ldr	r3, [r7, #12]
 801ae6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801ae6e:	f003 031f 	and.w	r3, r3, #31
 801ae72:	2204      	movs	r2, #4
 801ae74:	409a      	lsls	r2, r3
 801ae76:	69fb      	ldr	r3, [r7, #28]
 801ae78:	601a      	str	r2, [r3, #0]
    }
  }

  return status;
 801ae7a:	7efb      	ldrb	r3, [r7, #27]
}
 801ae7c:	4618      	mov	r0, r3
 801ae7e:	3728      	adds	r7, #40	@ 0x28
 801ae80:	46bd      	mov	sp, r7
 801ae82:	bd80      	pop	{r7, pc}
 801ae84:	40020010 	.word	0x40020010
 801ae88:	40020028 	.word	0x40020028
 801ae8c:	40020040 	.word	0x40020040
 801ae90:	40020058 	.word	0x40020058
 801ae94:	40020070 	.word	0x40020070
 801ae98:	40020088 	.word	0x40020088
 801ae9c:	400200a0 	.word	0x400200a0
 801aea0:	400200b8 	.word	0x400200b8
 801aea4:	40020410 	.word	0x40020410
 801aea8:	40020428 	.word	0x40020428
 801aeac:	40020440 	.word	0x40020440
 801aeb0:	40020458 	.word	0x40020458
 801aeb4:	40020470 	.word	0x40020470
 801aeb8:	40020488 	.word	0x40020488
 801aebc:	400204a0 	.word	0x400204a0
 801aec0:	400204b8 	.word	0x400204b8

0801aec4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801aec4:	b480      	push	{r7}
 801aec6:	b087      	sub	sp, #28
 801aec8:	af00      	add	r7, sp, #0
 801aeca:	60f8      	str	r0, [r7, #12]
 801aecc:	60b9      	str	r1, [r7, #8]
 801aece:	607a      	str	r2, [r7, #4]
 801aed0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801aed2:	68fb      	ldr	r3, [r7, #12]
 801aed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801aed6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 801aed8:	68fb      	ldr	r3, [r7, #12]
 801aeda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801aedc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801aede:	68fb      	ldr	r3, [r7, #12]
 801aee0:	681b      	ldr	r3, [r3, #0]
 801aee2:	4a7f      	ldr	r2, [pc, #508]	@ (801b0e0 <DMA_SetConfig+0x21c>)
 801aee4:	4293      	cmp	r3, r2
 801aee6:	d072      	beq.n	801afce <DMA_SetConfig+0x10a>
 801aee8:	68fb      	ldr	r3, [r7, #12]
 801aeea:	681b      	ldr	r3, [r3, #0]
 801aeec:	4a7d      	ldr	r2, [pc, #500]	@ (801b0e4 <DMA_SetConfig+0x220>)
 801aeee:	4293      	cmp	r3, r2
 801aef0:	d06d      	beq.n	801afce <DMA_SetConfig+0x10a>
 801aef2:	68fb      	ldr	r3, [r7, #12]
 801aef4:	681b      	ldr	r3, [r3, #0]
 801aef6:	4a7c      	ldr	r2, [pc, #496]	@ (801b0e8 <DMA_SetConfig+0x224>)
 801aef8:	4293      	cmp	r3, r2
 801aefa:	d068      	beq.n	801afce <DMA_SetConfig+0x10a>
 801aefc:	68fb      	ldr	r3, [r7, #12]
 801aefe:	681b      	ldr	r3, [r3, #0]
 801af00:	4a7a      	ldr	r2, [pc, #488]	@ (801b0ec <DMA_SetConfig+0x228>)
 801af02:	4293      	cmp	r3, r2
 801af04:	d063      	beq.n	801afce <DMA_SetConfig+0x10a>
 801af06:	68fb      	ldr	r3, [r7, #12]
 801af08:	681b      	ldr	r3, [r3, #0]
 801af0a:	4a79      	ldr	r2, [pc, #484]	@ (801b0f0 <DMA_SetConfig+0x22c>)
 801af0c:	4293      	cmp	r3, r2
 801af0e:	d05e      	beq.n	801afce <DMA_SetConfig+0x10a>
 801af10:	68fb      	ldr	r3, [r7, #12]
 801af12:	681b      	ldr	r3, [r3, #0]
 801af14:	4a77      	ldr	r2, [pc, #476]	@ (801b0f4 <DMA_SetConfig+0x230>)
 801af16:	4293      	cmp	r3, r2
 801af18:	d059      	beq.n	801afce <DMA_SetConfig+0x10a>
 801af1a:	68fb      	ldr	r3, [r7, #12]
 801af1c:	681b      	ldr	r3, [r3, #0]
 801af1e:	4a76      	ldr	r2, [pc, #472]	@ (801b0f8 <DMA_SetConfig+0x234>)
 801af20:	4293      	cmp	r3, r2
 801af22:	d054      	beq.n	801afce <DMA_SetConfig+0x10a>
 801af24:	68fb      	ldr	r3, [r7, #12]
 801af26:	681b      	ldr	r3, [r3, #0]
 801af28:	4a74      	ldr	r2, [pc, #464]	@ (801b0fc <DMA_SetConfig+0x238>)
 801af2a:	4293      	cmp	r3, r2
 801af2c:	d04f      	beq.n	801afce <DMA_SetConfig+0x10a>
 801af2e:	68fb      	ldr	r3, [r7, #12]
 801af30:	681b      	ldr	r3, [r3, #0]
 801af32:	4a73      	ldr	r2, [pc, #460]	@ (801b100 <DMA_SetConfig+0x23c>)
 801af34:	4293      	cmp	r3, r2
 801af36:	d04a      	beq.n	801afce <DMA_SetConfig+0x10a>
 801af38:	68fb      	ldr	r3, [r7, #12]
 801af3a:	681b      	ldr	r3, [r3, #0]
 801af3c:	4a71      	ldr	r2, [pc, #452]	@ (801b104 <DMA_SetConfig+0x240>)
 801af3e:	4293      	cmp	r3, r2
 801af40:	d045      	beq.n	801afce <DMA_SetConfig+0x10a>
 801af42:	68fb      	ldr	r3, [r7, #12]
 801af44:	681b      	ldr	r3, [r3, #0]
 801af46:	4a70      	ldr	r2, [pc, #448]	@ (801b108 <DMA_SetConfig+0x244>)
 801af48:	4293      	cmp	r3, r2
 801af4a:	d040      	beq.n	801afce <DMA_SetConfig+0x10a>
 801af4c:	68fb      	ldr	r3, [r7, #12]
 801af4e:	681b      	ldr	r3, [r3, #0]
 801af50:	4a6e      	ldr	r2, [pc, #440]	@ (801b10c <DMA_SetConfig+0x248>)
 801af52:	4293      	cmp	r3, r2
 801af54:	d03b      	beq.n	801afce <DMA_SetConfig+0x10a>
 801af56:	68fb      	ldr	r3, [r7, #12]
 801af58:	681b      	ldr	r3, [r3, #0]
 801af5a:	4a6d      	ldr	r2, [pc, #436]	@ (801b110 <DMA_SetConfig+0x24c>)
 801af5c:	4293      	cmp	r3, r2
 801af5e:	d036      	beq.n	801afce <DMA_SetConfig+0x10a>
 801af60:	68fb      	ldr	r3, [r7, #12]
 801af62:	681b      	ldr	r3, [r3, #0]
 801af64:	4a6b      	ldr	r2, [pc, #428]	@ (801b114 <DMA_SetConfig+0x250>)
 801af66:	4293      	cmp	r3, r2
 801af68:	d031      	beq.n	801afce <DMA_SetConfig+0x10a>
 801af6a:	68fb      	ldr	r3, [r7, #12]
 801af6c:	681b      	ldr	r3, [r3, #0]
 801af6e:	4a6a      	ldr	r2, [pc, #424]	@ (801b118 <DMA_SetConfig+0x254>)
 801af70:	4293      	cmp	r3, r2
 801af72:	d02c      	beq.n	801afce <DMA_SetConfig+0x10a>
 801af74:	68fb      	ldr	r3, [r7, #12]
 801af76:	681b      	ldr	r3, [r3, #0]
 801af78:	4a68      	ldr	r2, [pc, #416]	@ (801b11c <DMA_SetConfig+0x258>)
 801af7a:	4293      	cmp	r3, r2
 801af7c:	d027      	beq.n	801afce <DMA_SetConfig+0x10a>
 801af7e:	68fb      	ldr	r3, [r7, #12]
 801af80:	681b      	ldr	r3, [r3, #0]
 801af82:	4a67      	ldr	r2, [pc, #412]	@ (801b120 <DMA_SetConfig+0x25c>)
 801af84:	4293      	cmp	r3, r2
 801af86:	d022      	beq.n	801afce <DMA_SetConfig+0x10a>
 801af88:	68fb      	ldr	r3, [r7, #12]
 801af8a:	681b      	ldr	r3, [r3, #0]
 801af8c:	4a65      	ldr	r2, [pc, #404]	@ (801b124 <DMA_SetConfig+0x260>)
 801af8e:	4293      	cmp	r3, r2
 801af90:	d01d      	beq.n	801afce <DMA_SetConfig+0x10a>
 801af92:	68fb      	ldr	r3, [r7, #12]
 801af94:	681b      	ldr	r3, [r3, #0]
 801af96:	4a64      	ldr	r2, [pc, #400]	@ (801b128 <DMA_SetConfig+0x264>)
 801af98:	4293      	cmp	r3, r2
 801af9a:	d018      	beq.n	801afce <DMA_SetConfig+0x10a>
 801af9c:	68fb      	ldr	r3, [r7, #12]
 801af9e:	681b      	ldr	r3, [r3, #0]
 801afa0:	4a62      	ldr	r2, [pc, #392]	@ (801b12c <DMA_SetConfig+0x268>)
 801afa2:	4293      	cmp	r3, r2
 801afa4:	d013      	beq.n	801afce <DMA_SetConfig+0x10a>
 801afa6:	68fb      	ldr	r3, [r7, #12]
 801afa8:	681b      	ldr	r3, [r3, #0]
 801afaa:	4a61      	ldr	r2, [pc, #388]	@ (801b130 <DMA_SetConfig+0x26c>)
 801afac:	4293      	cmp	r3, r2
 801afae:	d00e      	beq.n	801afce <DMA_SetConfig+0x10a>
 801afb0:	68fb      	ldr	r3, [r7, #12]
 801afb2:	681b      	ldr	r3, [r3, #0]
 801afb4:	4a5f      	ldr	r2, [pc, #380]	@ (801b134 <DMA_SetConfig+0x270>)
 801afb6:	4293      	cmp	r3, r2
 801afb8:	d009      	beq.n	801afce <DMA_SetConfig+0x10a>
 801afba:	68fb      	ldr	r3, [r7, #12]
 801afbc:	681b      	ldr	r3, [r3, #0]
 801afbe:	4a5e      	ldr	r2, [pc, #376]	@ (801b138 <DMA_SetConfig+0x274>)
 801afc0:	4293      	cmp	r3, r2
 801afc2:	d004      	beq.n	801afce <DMA_SetConfig+0x10a>
 801afc4:	68fb      	ldr	r3, [r7, #12]
 801afc6:	681b      	ldr	r3, [r3, #0]
 801afc8:	4a5c      	ldr	r2, [pc, #368]	@ (801b13c <DMA_SetConfig+0x278>)
 801afca:	4293      	cmp	r3, r2
 801afcc:	d101      	bne.n	801afd2 <DMA_SetConfig+0x10e>
 801afce:	2301      	movs	r3, #1
 801afd0:	e000      	b.n	801afd4 <DMA_SetConfig+0x110>
 801afd2:	2300      	movs	r3, #0
 801afd4:	2b00      	cmp	r3, #0
 801afd6:	d00d      	beq.n	801aff4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801afd8:	68fb      	ldr	r3, [r7, #12]
 801afda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801afdc:	68fa      	ldr	r2, [r7, #12]
 801afde:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801afe0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 801afe2:	68fb      	ldr	r3, [r7, #12]
 801afe4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801afe6:	2b00      	cmp	r3, #0
 801afe8:	d004      	beq.n	801aff4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801afea:	68fb      	ldr	r3, [r7, #12]
 801afec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801afee:	68fa      	ldr	r2, [r7, #12]
 801aff0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801aff2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801aff4:	68fb      	ldr	r3, [r7, #12]
 801aff6:	681b      	ldr	r3, [r3, #0]
 801aff8:	4a39      	ldr	r2, [pc, #228]	@ (801b0e0 <DMA_SetConfig+0x21c>)
 801affa:	4293      	cmp	r3, r2
 801affc:	d04a      	beq.n	801b094 <DMA_SetConfig+0x1d0>
 801affe:	68fb      	ldr	r3, [r7, #12]
 801b000:	681b      	ldr	r3, [r3, #0]
 801b002:	4a38      	ldr	r2, [pc, #224]	@ (801b0e4 <DMA_SetConfig+0x220>)
 801b004:	4293      	cmp	r3, r2
 801b006:	d045      	beq.n	801b094 <DMA_SetConfig+0x1d0>
 801b008:	68fb      	ldr	r3, [r7, #12]
 801b00a:	681b      	ldr	r3, [r3, #0]
 801b00c:	4a36      	ldr	r2, [pc, #216]	@ (801b0e8 <DMA_SetConfig+0x224>)
 801b00e:	4293      	cmp	r3, r2
 801b010:	d040      	beq.n	801b094 <DMA_SetConfig+0x1d0>
 801b012:	68fb      	ldr	r3, [r7, #12]
 801b014:	681b      	ldr	r3, [r3, #0]
 801b016:	4a35      	ldr	r2, [pc, #212]	@ (801b0ec <DMA_SetConfig+0x228>)
 801b018:	4293      	cmp	r3, r2
 801b01a:	d03b      	beq.n	801b094 <DMA_SetConfig+0x1d0>
 801b01c:	68fb      	ldr	r3, [r7, #12]
 801b01e:	681b      	ldr	r3, [r3, #0]
 801b020:	4a33      	ldr	r2, [pc, #204]	@ (801b0f0 <DMA_SetConfig+0x22c>)
 801b022:	4293      	cmp	r3, r2
 801b024:	d036      	beq.n	801b094 <DMA_SetConfig+0x1d0>
 801b026:	68fb      	ldr	r3, [r7, #12]
 801b028:	681b      	ldr	r3, [r3, #0]
 801b02a:	4a32      	ldr	r2, [pc, #200]	@ (801b0f4 <DMA_SetConfig+0x230>)
 801b02c:	4293      	cmp	r3, r2
 801b02e:	d031      	beq.n	801b094 <DMA_SetConfig+0x1d0>
 801b030:	68fb      	ldr	r3, [r7, #12]
 801b032:	681b      	ldr	r3, [r3, #0]
 801b034:	4a30      	ldr	r2, [pc, #192]	@ (801b0f8 <DMA_SetConfig+0x234>)
 801b036:	4293      	cmp	r3, r2
 801b038:	d02c      	beq.n	801b094 <DMA_SetConfig+0x1d0>
 801b03a:	68fb      	ldr	r3, [r7, #12]
 801b03c:	681b      	ldr	r3, [r3, #0]
 801b03e:	4a2f      	ldr	r2, [pc, #188]	@ (801b0fc <DMA_SetConfig+0x238>)
 801b040:	4293      	cmp	r3, r2
 801b042:	d027      	beq.n	801b094 <DMA_SetConfig+0x1d0>
 801b044:	68fb      	ldr	r3, [r7, #12]
 801b046:	681b      	ldr	r3, [r3, #0]
 801b048:	4a2d      	ldr	r2, [pc, #180]	@ (801b100 <DMA_SetConfig+0x23c>)
 801b04a:	4293      	cmp	r3, r2
 801b04c:	d022      	beq.n	801b094 <DMA_SetConfig+0x1d0>
 801b04e:	68fb      	ldr	r3, [r7, #12]
 801b050:	681b      	ldr	r3, [r3, #0]
 801b052:	4a2c      	ldr	r2, [pc, #176]	@ (801b104 <DMA_SetConfig+0x240>)
 801b054:	4293      	cmp	r3, r2
 801b056:	d01d      	beq.n	801b094 <DMA_SetConfig+0x1d0>
 801b058:	68fb      	ldr	r3, [r7, #12]
 801b05a:	681b      	ldr	r3, [r3, #0]
 801b05c:	4a2a      	ldr	r2, [pc, #168]	@ (801b108 <DMA_SetConfig+0x244>)
 801b05e:	4293      	cmp	r3, r2
 801b060:	d018      	beq.n	801b094 <DMA_SetConfig+0x1d0>
 801b062:	68fb      	ldr	r3, [r7, #12]
 801b064:	681b      	ldr	r3, [r3, #0]
 801b066:	4a29      	ldr	r2, [pc, #164]	@ (801b10c <DMA_SetConfig+0x248>)
 801b068:	4293      	cmp	r3, r2
 801b06a:	d013      	beq.n	801b094 <DMA_SetConfig+0x1d0>
 801b06c:	68fb      	ldr	r3, [r7, #12]
 801b06e:	681b      	ldr	r3, [r3, #0]
 801b070:	4a27      	ldr	r2, [pc, #156]	@ (801b110 <DMA_SetConfig+0x24c>)
 801b072:	4293      	cmp	r3, r2
 801b074:	d00e      	beq.n	801b094 <DMA_SetConfig+0x1d0>
 801b076:	68fb      	ldr	r3, [r7, #12]
 801b078:	681b      	ldr	r3, [r3, #0]
 801b07a:	4a26      	ldr	r2, [pc, #152]	@ (801b114 <DMA_SetConfig+0x250>)
 801b07c:	4293      	cmp	r3, r2
 801b07e:	d009      	beq.n	801b094 <DMA_SetConfig+0x1d0>
 801b080:	68fb      	ldr	r3, [r7, #12]
 801b082:	681b      	ldr	r3, [r3, #0]
 801b084:	4a24      	ldr	r2, [pc, #144]	@ (801b118 <DMA_SetConfig+0x254>)
 801b086:	4293      	cmp	r3, r2
 801b088:	d004      	beq.n	801b094 <DMA_SetConfig+0x1d0>
 801b08a:	68fb      	ldr	r3, [r7, #12]
 801b08c:	681b      	ldr	r3, [r3, #0]
 801b08e:	4a23      	ldr	r2, [pc, #140]	@ (801b11c <DMA_SetConfig+0x258>)
 801b090:	4293      	cmp	r3, r2
 801b092:	d101      	bne.n	801b098 <DMA_SetConfig+0x1d4>
 801b094:	2301      	movs	r3, #1
 801b096:	e000      	b.n	801b09a <DMA_SetConfig+0x1d6>
 801b098:	2300      	movs	r3, #0
 801b09a:	2b00      	cmp	r3, #0
 801b09c:	d059      	beq.n	801b152 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801b09e:	68fb      	ldr	r3, [r7, #12]
 801b0a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b0a2:	f003 031f 	and.w	r3, r3, #31
 801b0a6:	223f      	movs	r2, #63	@ 0x3f
 801b0a8:	409a      	lsls	r2, r3
 801b0aa:	697b      	ldr	r3, [r7, #20]
 801b0ac:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 801b0ae:	68fb      	ldr	r3, [r7, #12]
 801b0b0:	681b      	ldr	r3, [r3, #0]
 801b0b2:	681a      	ldr	r2, [r3, #0]
 801b0b4:	68fb      	ldr	r3, [r7, #12]
 801b0b6:	681b      	ldr	r3, [r3, #0]
 801b0b8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 801b0bc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 801b0be:	68fb      	ldr	r3, [r7, #12]
 801b0c0:	681b      	ldr	r3, [r3, #0]
 801b0c2:	683a      	ldr	r2, [r7, #0]
 801b0c4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801b0c6:	68fb      	ldr	r3, [r7, #12]
 801b0c8:	689b      	ldr	r3, [r3, #8]
 801b0ca:	2b40      	cmp	r3, #64	@ 0x40
 801b0cc:	d138      	bne.n	801b140 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 801b0ce:	68fb      	ldr	r3, [r7, #12]
 801b0d0:	681b      	ldr	r3, [r3, #0]
 801b0d2:	687a      	ldr	r2, [r7, #4]
 801b0d4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 801b0d6:	68fb      	ldr	r3, [r7, #12]
 801b0d8:	681b      	ldr	r3, [r3, #0]
 801b0da:	68ba      	ldr	r2, [r7, #8]
 801b0dc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 801b0de:	e086      	b.n	801b1ee <DMA_SetConfig+0x32a>
 801b0e0:	40020010 	.word	0x40020010
 801b0e4:	40020028 	.word	0x40020028
 801b0e8:	40020040 	.word	0x40020040
 801b0ec:	40020058 	.word	0x40020058
 801b0f0:	40020070 	.word	0x40020070
 801b0f4:	40020088 	.word	0x40020088
 801b0f8:	400200a0 	.word	0x400200a0
 801b0fc:	400200b8 	.word	0x400200b8
 801b100:	40020410 	.word	0x40020410
 801b104:	40020428 	.word	0x40020428
 801b108:	40020440 	.word	0x40020440
 801b10c:	40020458 	.word	0x40020458
 801b110:	40020470 	.word	0x40020470
 801b114:	40020488 	.word	0x40020488
 801b118:	400204a0 	.word	0x400204a0
 801b11c:	400204b8 	.word	0x400204b8
 801b120:	58025408 	.word	0x58025408
 801b124:	5802541c 	.word	0x5802541c
 801b128:	58025430 	.word	0x58025430
 801b12c:	58025444 	.word	0x58025444
 801b130:	58025458 	.word	0x58025458
 801b134:	5802546c 	.word	0x5802546c
 801b138:	58025480 	.word	0x58025480
 801b13c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 801b140:	68fb      	ldr	r3, [r7, #12]
 801b142:	681b      	ldr	r3, [r3, #0]
 801b144:	68ba      	ldr	r2, [r7, #8]
 801b146:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 801b148:	68fb      	ldr	r3, [r7, #12]
 801b14a:	681b      	ldr	r3, [r3, #0]
 801b14c:	687a      	ldr	r2, [r7, #4]
 801b14e:	60da      	str	r2, [r3, #12]
}
 801b150:	e04d      	b.n	801b1ee <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 801b152:	68fb      	ldr	r3, [r7, #12]
 801b154:	681b      	ldr	r3, [r3, #0]
 801b156:	4a29      	ldr	r2, [pc, #164]	@ (801b1fc <DMA_SetConfig+0x338>)
 801b158:	4293      	cmp	r3, r2
 801b15a:	d022      	beq.n	801b1a2 <DMA_SetConfig+0x2de>
 801b15c:	68fb      	ldr	r3, [r7, #12]
 801b15e:	681b      	ldr	r3, [r3, #0]
 801b160:	4a27      	ldr	r2, [pc, #156]	@ (801b200 <DMA_SetConfig+0x33c>)
 801b162:	4293      	cmp	r3, r2
 801b164:	d01d      	beq.n	801b1a2 <DMA_SetConfig+0x2de>
 801b166:	68fb      	ldr	r3, [r7, #12]
 801b168:	681b      	ldr	r3, [r3, #0]
 801b16a:	4a26      	ldr	r2, [pc, #152]	@ (801b204 <DMA_SetConfig+0x340>)
 801b16c:	4293      	cmp	r3, r2
 801b16e:	d018      	beq.n	801b1a2 <DMA_SetConfig+0x2de>
 801b170:	68fb      	ldr	r3, [r7, #12]
 801b172:	681b      	ldr	r3, [r3, #0]
 801b174:	4a24      	ldr	r2, [pc, #144]	@ (801b208 <DMA_SetConfig+0x344>)
 801b176:	4293      	cmp	r3, r2
 801b178:	d013      	beq.n	801b1a2 <DMA_SetConfig+0x2de>
 801b17a:	68fb      	ldr	r3, [r7, #12]
 801b17c:	681b      	ldr	r3, [r3, #0]
 801b17e:	4a23      	ldr	r2, [pc, #140]	@ (801b20c <DMA_SetConfig+0x348>)
 801b180:	4293      	cmp	r3, r2
 801b182:	d00e      	beq.n	801b1a2 <DMA_SetConfig+0x2de>
 801b184:	68fb      	ldr	r3, [r7, #12]
 801b186:	681b      	ldr	r3, [r3, #0]
 801b188:	4a21      	ldr	r2, [pc, #132]	@ (801b210 <DMA_SetConfig+0x34c>)
 801b18a:	4293      	cmp	r3, r2
 801b18c:	d009      	beq.n	801b1a2 <DMA_SetConfig+0x2de>
 801b18e:	68fb      	ldr	r3, [r7, #12]
 801b190:	681b      	ldr	r3, [r3, #0]
 801b192:	4a20      	ldr	r2, [pc, #128]	@ (801b214 <DMA_SetConfig+0x350>)
 801b194:	4293      	cmp	r3, r2
 801b196:	d004      	beq.n	801b1a2 <DMA_SetConfig+0x2de>
 801b198:	68fb      	ldr	r3, [r7, #12]
 801b19a:	681b      	ldr	r3, [r3, #0]
 801b19c:	4a1e      	ldr	r2, [pc, #120]	@ (801b218 <DMA_SetConfig+0x354>)
 801b19e:	4293      	cmp	r3, r2
 801b1a0:	d101      	bne.n	801b1a6 <DMA_SetConfig+0x2e2>
 801b1a2:	2301      	movs	r3, #1
 801b1a4:	e000      	b.n	801b1a8 <DMA_SetConfig+0x2e4>
 801b1a6:	2300      	movs	r3, #0
 801b1a8:	2b00      	cmp	r3, #0
 801b1aa:	d020      	beq.n	801b1ee <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 801b1ac:	68fb      	ldr	r3, [r7, #12]
 801b1ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b1b0:	f003 031f 	and.w	r3, r3, #31
 801b1b4:	2201      	movs	r2, #1
 801b1b6:	409a      	lsls	r2, r3
 801b1b8:	693b      	ldr	r3, [r7, #16]
 801b1ba:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 801b1bc:	68fb      	ldr	r3, [r7, #12]
 801b1be:	681b      	ldr	r3, [r3, #0]
 801b1c0:	683a      	ldr	r2, [r7, #0]
 801b1c2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801b1c4:	68fb      	ldr	r3, [r7, #12]
 801b1c6:	689b      	ldr	r3, [r3, #8]
 801b1c8:	2b40      	cmp	r3, #64	@ 0x40
 801b1ca:	d108      	bne.n	801b1de <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 801b1cc:	68fb      	ldr	r3, [r7, #12]
 801b1ce:	681b      	ldr	r3, [r3, #0]
 801b1d0:	687a      	ldr	r2, [r7, #4]
 801b1d2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 801b1d4:	68fb      	ldr	r3, [r7, #12]
 801b1d6:	681b      	ldr	r3, [r3, #0]
 801b1d8:	68ba      	ldr	r2, [r7, #8]
 801b1da:	60da      	str	r2, [r3, #12]
}
 801b1dc:	e007      	b.n	801b1ee <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 801b1de:	68fb      	ldr	r3, [r7, #12]
 801b1e0:	681b      	ldr	r3, [r3, #0]
 801b1e2:	68ba      	ldr	r2, [r7, #8]
 801b1e4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 801b1e6:	68fb      	ldr	r3, [r7, #12]
 801b1e8:	681b      	ldr	r3, [r3, #0]
 801b1ea:	687a      	ldr	r2, [r7, #4]
 801b1ec:	60da      	str	r2, [r3, #12]
}
 801b1ee:	bf00      	nop
 801b1f0:	371c      	adds	r7, #28
 801b1f2:	46bd      	mov	sp, r7
 801b1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1f8:	4770      	bx	lr
 801b1fa:	bf00      	nop
 801b1fc:	58025408 	.word	0x58025408
 801b200:	5802541c 	.word	0x5802541c
 801b204:	58025430 	.word	0x58025430
 801b208:	58025444 	.word	0x58025444
 801b20c:	58025458 	.word	0x58025458
 801b210:	5802546c 	.word	0x5802546c
 801b214:	58025480 	.word	0x58025480
 801b218:	58025494 	.word	0x58025494

0801b21c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 801b21c:	b480      	push	{r7}
 801b21e:	b085      	sub	sp, #20
 801b220:	af00      	add	r7, sp, #0
 801b222:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801b224:	687b      	ldr	r3, [r7, #4]
 801b226:	681b      	ldr	r3, [r3, #0]
 801b228:	4a42      	ldr	r2, [pc, #264]	@ (801b334 <DMA_CalcBaseAndBitshift+0x118>)
 801b22a:	4293      	cmp	r3, r2
 801b22c:	d04a      	beq.n	801b2c4 <DMA_CalcBaseAndBitshift+0xa8>
 801b22e:	687b      	ldr	r3, [r7, #4]
 801b230:	681b      	ldr	r3, [r3, #0]
 801b232:	4a41      	ldr	r2, [pc, #260]	@ (801b338 <DMA_CalcBaseAndBitshift+0x11c>)
 801b234:	4293      	cmp	r3, r2
 801b236:	d045      	beq.n	801b2c4 <DMA_CalcBaseAndBitshift+0xa8>
 801b238:	687b      	ldr	r3, [r7, #4]
 801b23a:	681b      	ldr	r3, [r3, #0]
 801b23c:	4a3f      	ldr	r2, [pc, #252]	@ (801b33c <DMA_CalcBaseAndBitshift+0x120>)
 801b23e:	4293      	cmp	r3, r2
 801b240:	d040      	beq.n	801b2c4 <DMA_CalcBaseAndBitshift+0xa8>
 801b242:	687b      	ldr	r3, [r7, #4]
 801b244:	681b      	ldr	r3, [r3, #0]
 801b246:	4a3e      	ldr	r2, [pc, #248]	@ (801b340 <DMA_CalcBaseAndBitshift+0x124>)
 801b248:	4293      	cmp	r3, r2
 801b24a:	d03b      	beq.n	801b2c4 <DMA_CalcBaseAndBitshift+0xa8>
 801b24c:	687b      	ldr	r3, [r7, #4]
 801b24e:	681b      	ldr	r3, [r3, #0]
 801b250:	4a3c      	ldr	r2, [pc, #240]	@ (801b344 <DMA_CalcBaseAndBitshift+0x128>)
 801b252:	4293      	cmp	r3, r2
 801b254:	d036      	beq.n	801b2c4 <DMA_CalcBaseAndBitshift+0xa8>
 801b256:	687b      	ldr	r3, [r7, #4]
 801b258:	681b      	ldr	r3, [r3, #0]
 801b25a:	4a3b      	ldr	r2, [pc, #236]	@ (801b348 <DMA_CalcBaseAndBitshift+0x12c>)
 801b25c:	4293      	cmp	r3, r2
 801b25e:	d031      	beq.n	801b2c4 <DMA_CalcBaseAndBitshift+0xa8>
 801b260:	687b      	ldr	r3, [r7, #4]
 801b262:	681b      	ldr	r3, [r3, #0]
 801b264:	4a39      	ldr	r2, [pc, #228]	@ (801b34c <DMA_CalcBaseAndBitshift+0x130>)
 801b266:	4293      	cmp	r3, r2
 801b268:	d02c      	beq.n	801b2c4 <DMA_CalcBaseAndBitshift+0xa8>
 801b26a:	687b      	ldr	r3, [r7, #4]
 801b26c:	681b      	ldr	r3, [r3, #0]
 801b26e:	4a38      	ldr	r2, [pc, #224]	@ (801b350 <DMA_CalcBaseAndBitshift+0x134>)
 801b270:	4293      	cmp	r3, r2
 801b272:	d027      	beq.n	801b2c4 <DMA_CalcBaseAndBitshift+0xa8>
 801b274:	687b      	ldr	r3, [r7, #4]
 801b276:	681b      	ldr	r3, [r3, #0]
 801b278:	4a36      	ldr	r2, [pc, #216]	@ (801b354 <DMA_CalcBaseAndBitshift+0x138>)
 801b27a:	4293      	cmp	r3, r2
 801b27c:	d022      	beq.n	801b2c4 <DMA_CalcBaseAndBitshift+0xa8>
 801b27e:	687b      	ldr	r3, [r7, #4]
 801b280:	681b      	ldr	r3, [r3, #0]
 801b282:	4a35      	ldr	r2, [pc, #212]	@ (801b358 <DMA_CalcBaseAndBitshift+0x13c>)
 801b284:	4293      	cmp	r3, r2
 801b286:	d01d      	beq.n	801b2c4 <DMA_CalcBaseAndBitshift+0xa8>
 801b288:	687b      	ldr	r3, [r7, #4]
 801b28a:	681b      	ldr	r3, [r3, #0]
 801b28c:	4a33      	ldr	r2, [pc, #204]	@ (801b35c <DMA_CalcBaseAndBitshift+0x140>)
 801b28e:	4293      	cmp	r3, r2
 801b290:	d018      	beq.n	801b2c4 <DMA_CalcBaseAndBitshift+0xa8>
 801b292:	687b      	ldr	r3, [r7, #4]
 801b294:	681b      	ldr	r3, [r3, #0]
 801b296:	4a32      	ldr	r2, [pc, #200]	@ (801b360 <DMA_CalcBaseAndBitshift+0x144>)
 801b298:	4293      	cmp	r3, r2
 801b29a:	d013      	beq.n	801b2c4 <DMA_CalcBaseAndBitshift+0xa8>
 801b29c:	687b      	ldr	r3, [r7, #4]
 801b29e:	681b      	ldr	r3, [r3, #0]
 801b2a0:	4a30      	ldr	r2, [pc, #192]	@ (801b364 <DMA_CalcBaseAndBitshift+0x148>)
 801b2a2:	4293      	cmp	r3, r2
 801b2a4:	d00e      	beq.n	801b2c4 <DMA_CalcBaseAndBitshift+0xa8>
 801b2a6:	687b      	ldr	r3, [r7, #4]
 801b2a8:	681b      	ldr	r3, [r3, #0]
 801b2aa:	4a2f      	ldr	r2, [pc, #188]	@ (801b368 <DMA_CalcBaseAndBitshift+0x14c>)
 801b2ac:	4293      	cmp	r3, r2
 801b2ae:	d009      	beq.n	801b2c4 <DMA_CalcBaseAndBitshift+0xa8>
 801b2b0:	687b      	ldr	r3, [r7, #4]
 801b2b2:	681b      	ldr	r3, [r3, #0]
 801b2b4:	4a2d      	ldr	r2, [pc, #180]	@ (801b36c <DMA_CalcBaseAndBitshift+0x150>)
 801b2b6:	4293      	cmp	r3, r2
 801b2b8:	d004      	beq.n	801b2c4 <DMA_CalcBaseAndBitshift+0xa8>
 801b2ba:	687b      	ldr	r3, [r7, #4]
 801b2bc:	681b      	ldr	r3, [r3, #0]
 801b2be:	4a2c      	ldr	r2, [pc, #176]	@ (801b370 <DMA_CalcBaseAndBitshift+0x154>)
 801b2c0:	4293      	cmp	r3, r2
 801b2c2:	d101      	bne.n	801b2c8 <DMA_CalcBaseAndBitshift+0xac>
 801b2c4:	2301      	movs	r3, #1
 801b2c6:	e000      	b.n	801b2ca <DMA_CalcBaseAndBitshift+0xae>
 801b2c8:	2300      	movs	r3, #0
 801b2ca:	2b00      	cmp	r3, #0
 801b2cc:	d024      	beq.n	801b318 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 801b2ce:	687b      	ldr	r3, [r7, #4]
 801b2d0:	681b      	ldr	r3, [r3, #0]
 801b2d2:	b2db      	uxtb	r3, r3
 801b2d4:	3b10      	subs	r3, #16
 801b2d6:	4a27      	ldr	r2, [pc, #156]	@ (801b374 <DMA_CalcBaseAndBitshift+0x158>)
 801b2d8:	fba2 2303 	umull	r2, r3, r2, r3
 801b2dc:	091b      	lsrs	r3, r3, #4
 801b2de:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 801b2e0:	68fb      	ldr	r3, [r7, #12]
 801b2e2:	f003 0307 	and.w	r3, r3, #7
 801b2e6:	4a24      	ldr	r2, [pc, #144]	@ (801b378 <DMA_CalcBaseAndBitshift+0x15c>)
 801b2e8:	5cd3      	ldrb	r3, [r2, r3]
 801b2ea:	461a      	mov	r2, r3
 801b2ec:	687b      	ldr	r3, [r7, #4]
 801b2ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 801b2f0:	68fb      	ldr	r3, [r7, #12]
 801b2f2:	2b03      	cmp	r3, #3
 801b2f4:	d908      	bls.n	801b308 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 801b2f6:	687b      	ldr	r3, [r7, #4]
 801b2f8:	681b      	ldr	r3, [r3, #0]
 801b2fa:	461a      	mov	r2, r3
 801b2fc:	4b1f      	ldr	r3, [pc, #124]	@ (801b37c <DMA_CalcBaseAndBitshift+0x160>)
 801b2fe:	4013      	ands	r3, r2
 801b300:	1d1a      	adds	r2, r3, #4
 801b302:	687b      	ldr	r3, [r7, #4]
 801b304:	659a      	str	r2, [r3, #88]	@ 0x58
 801b306:	e00d      	b.n	801b324 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 801b308:	687b      	ldr	r3, [r7, #4]
 801b30a:	681b      	ldr	r3, [r3, #0]
 801b30c:	461a      	mov	r2, r3
 801b30e:	4b1b      	ldr	r3, [pc, #108]	@ (801b37c <DMA_CalcBaseAndBitshift+0x160>)
 801b310:	4013      	ands	r3, r2
 801b312:	687a      	ldr	r2, [r7, #4]
 801b314:	6593      	str	r3, [r2, #88]	@ 0x58
 801b316:	e005      	b.n	801b324 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 801b318:	687b      	ldr	r3, [r7, #4]
 801b31a:	681b      	ldr	r3, [r3, #0]
 801b31c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801b320:	687b      	ldr	r3, [r7, #4]
 801b322:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 801b324:	687b      	ldr	r3, [r7, #4]
 801b326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 801b328:	4618      	mov	r0, r3
 801b32a:	3714      	adds	r7, #20
 801b32c:	46bd      	mov	sp, r7
 801b32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b332:	4770      	bx	lr
 801b334:	40020010 	.word	0x40020010
 801b338:	40020028 	.word	0x40020028
 801b33c:	40020040 	.word	0x40020040
 801b340:	40020058 	.word	0x40020058
 801b344:	40020070 	.word	0x40020070
 801b348:	40020088 	.word	0x40020088
 801b34c:	400200a0 	.word	0x400200a0
 801b350:	400200b8 	.word	0x400200b8
 801b354:	40020410 	.word	0x40020410
 801b358:	40020428 	.word	0x40020428
 801b35c:	40020440 	.word	0x40020440
 801b360:	40020458 	.word	0x40020458
 801b364:	40020470 	.word	0x40020470
 801b368:	40020488 	.word	0x40020488
 801b36c:	400204a0 	.word	0x400204a0
 801b370:	400204b8 	.word	0x400204b8
 801b374:	aaaaaaab 	.word	0xaaaaaaab
 801b378:	08028c58 	.word	0x08028c58
 801b37c:	fffffc00 	.word	0xfffffc00

0801b380 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 801b380:	b480      	push	{r7}
 801b382:	b085      	sub	sp, #20
 801b384:	af00      	add	r7, sp, #0
 801b386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801b388:	2300      	movs	r3, #0
 801b38a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801b38c:	687b      	ldr	r3, [r7, #4]
 801b38e:	699b      	ldr	r3, [r3, #24]
 801b390:	2b00      	cmp	r3, #0
 801b392:	d120      	bne.n	801b3d6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 801b394:	687b      	ldr	r3, [r7, #4]
 801b396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b398:	2b03      	cmp	r3, #3
 801b39a:	d858      	bhi.n	801b44e <DMA_CheckFifoParam+0xce>
 801b39c:	a201      	add	r2, pc, #4	@ (adr r2, 801b3a4 <DMA_CheckFifoParam+0x24>)
 801b39e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b3a2:	bf00      	nop
 801b3a4:	0801b3b5 	.word	0x0801b3b5
 801b3a8:	0801b3c7 	.word	0x0801b3c7
 801b3ac:	0801b3b5 	.word	0x0801b3b5
 801b3b0:	0801b44f 	.word	0x0801b44f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801b3b4:	687b      	ldr	r3, [r7, #4]
 801b3b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b3b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801b3bc:	2b00      	cmp	r3, #0
 801b3be:	d048      	beq.n	801b452 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 801b3c0:	2301      	movs	r3, #1
 801b3c2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801b3c4:	e045      	b.n	801b452 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801b3c6:	687b      	ldr	r3, [r7, #4]
 801b3c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b3ca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 801b3ce:	d142      	bne.n	801b456 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 801b3d0:	2301      	movs	r3, #1
 801b3d2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801b3d4:	e03f      	b.n	801b456 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801b3d6:	687b      	ldr	r3, [r7, #4]
 801b3d8:	699b      	ldr	r3, [r3, #24]
 801b3da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801b3de:	d123      	bne.n	801b428 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 801b3e0:	687b      	ldr	r3, [r7, #4]
 801b3e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b3e4:	2b03      	cmp	r3, #3
 801b3e6:	d838      	bhi.n	801b45a <DMA_CheckFifoParam+0xda>
 801b3e8:	a201      	add	r2, pc, #4	@ (adr r2, 801b3f0 <DMA_CheckFifoParam+0x70>)
 801b3ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b3ee:	bf00      	nop
 801b3f0:	0801b401 	.word	0x0801b401
 801b3f4:	0801b407 	.word	0x0801b407
 801b3f8:	0801b401 	.word	0x0801b401
 801b3fc:	0801b419 	.word	0x0801b419
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 801b400:	2301      	movs	r3, #1
 801b402:	73fb      	strb	r3, [r7, #15]
        break;
 801b404:	e030      	b.n	801b468 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801b406:	687b      	ldr	r3, [r7, #4]
 801b408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b40a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801b40e:	2b00      	cmp	r3, #0
 801b410:	d025      	beq.n	801b45e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 801b412:	2301      	movs	r3, #1
 801b414:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801b416:	e022      	b.n	801b45e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801b418:	687b      	ldr	r3, [r7, #4]
 801b41a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b41c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 801b420:	d11f      	bne.n	801b462 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 801b422:	2301      	movs	r3, #1
 801b424:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801b426:	e01c      	b.n	801b462 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 801b428:	687b      	ldr	r3, [r7, #4]
 801b42a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b42c:	2b02      	cmp	r3, #2
 801b42e:	d902      	bls.n	801b436 <DMA_CheckFifoParam+0xb6>
 801b430:	2b03      	cmp	r3, #3
 801b432:	d003      	beq.n	801b43c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 801b434:	e018      	b.n	801b468 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 801b436:	2301      	movs	r3, #1
 801b438:	73fb      	strb	r3, [r7, #15]
        break;
 801b43a:	e015      	b.n	801b468 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801b43c:	687b      	ldr	r3, [r7, #4]
 801b43e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b440:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801b444:	2b00      	cmp	r3, #0
 801b446:	d00e      	beq.n	801b466 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 801b448:	2301      	movs	r3, #1
 801b44a:	73fb      	strb	r3, [r7, #15]
    break;
 801b44c:	e00b      	b.n	801b466 <DMA_CheckFifoParam+0xe6>
        break;
 801b44e:	bf00      	nop
 801b450:	e00a      	b.n	801b468 <DMA_CheckFifoParam+0xe8>
        break;
 801b452:	bf00      	nop
 801b454:	e008      	b.n	801b468 <DMA_CheckFifoParam+0xe8>
        break;
 801b456:	bf00      	nop
 801b458:	e006      	b.n	801b468 <DMA_CheckFifoParam+0xe8>
        break;
 801b45a:	bf00      	nop
 801b45c:	e004      	b.n	801b468 <DMA_CheckFifoParam+0xe8>
        break;
 801b45e:	bf00      	nop
 801b460:	e002      	b.n	801b468 <DMA_CheckFifoParam+0xe8>
        break;
 801b462:	bf00      	nop
 801b464:	e000      	b.n	801b468 <DMA_CheckFifoParam+0xe8>
    break;
 801b466:	bf00      	nop
    }
  }

  return status;
 801b468:	7bfb      	ldrb	r3, [r7, #15]
}
 801b46a:	4618      	mov	r0, r3
 801b46c:	3714      	adds	r7, #20
 801b46e:	46bd      	mov	sp, r7
 801b470:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b474:	4770      	bx	lr
 801b476:	bf00      	nop

0801b478 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801b478:	b480      	push	{r7}
 801b47a:	b085      	sub	sp, #20
 801b47c:	af00      	add	r7, sp, #0
 801b47e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 801b480:	687b      	ldr	r3, [r7, #4]
 801b482:	681b      	ldr	r3, [r3, #0]
 801b484:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801b486:	687b      	ldr	r3, [r7, #4]
 801b488:	681b      	ldr	r3, [r3, #0]
 801b48a:	4a38      	ldr	r2, [pc, #224]	@ (801b56c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 801b48c:	4293      	cmp	r3, r2
 801b48e:	d022      	beq.n	801b4d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801b490:	687b      	ldr	r3, [r7, #4]
 801b492:	681b      	ldr	r3, [r3, #0]
 801b494:	4a36      	ldr	r2, [pc, #216]	@ (801b570 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 801b496:	4293      	cmp	r3, r2
 801b498:	d01d      	beq.n	801b4d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801b49a:	687b      	ldr	r3, [r7, #4]
 801b49c:	681b      	ldr	r3, [r3, #0]
 801b49e:	4a35      	ldr	r2, [pc, #212]	@ (801b574 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 801b4a0:	4293      	cmp	r3, r2
 801b4a2:	d018      	beq.n	801b4d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801b4a4:	687b      	ldr	r3, [r7, #4]
 801b4a6:	681b      	ldr	r3, [r3, #0]
 801b4a8:	4a33      	ldr	r2, [pc, #204]	@ (801b578 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 801b4aa:	4293      	cmp	r3, r2
 801b4ac:	d013      	beq.n	801b4d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801b4ae:	687b      	ldr	r3, [r7, #4]
 801b4b0:	681b      	ldr	r3, [r3, #0]
 801b4b2:	4a32      	ldr	r2, [pc, #200]	@ (801b57c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 801b4b4:	4293      	cmp	r3, r2
 801b4b6:	d00e      	beq.n	801b4d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801b4b8:	687b      	ldr	r3, [r7, #4]
 801b4ba:	681b      	ldr	r3, [r3, #0]
 801b4bc:	4a30      	ldr	r2, [pc, #192]	@ (801b580 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 801b4be:	4293      	cmp	r3, r2
 801b4c0:	d009      	beq.n	801b4d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801b4c2:	687b      	ldr	r3, [r7, #4]
 801b4c4:	681b      	ldr	r3, [r3, #0]
 801b4c6:	4a2f      	ldr	r2, [pc, #188]	@ (801b584 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 801b4c8:	4293      	cmp	r3, r2
 801b4ca:	d004      	beq.n	801b4d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801b4cc:	687b      	ldr	r3, [r7, #4]
 801b4ce:	681b      	ldr	r3, [r3, #0]
 801b4d0:	4a2d      	ldr	r2, [pc, #180]	@ (801b588 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 801b4d2:	4293      	cmp	r3, r2
 801b4d4:	d101      	bne.n	801b4da <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 801b4d6:	2301      	movs	r3, #1
 801b4d8:	e000      	b.n	801b4dc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 801b4da:	2300      	movs	r3, #0
 801b4dc:	2b00      	cmp	r3, #0
 801b4de:	d01a      	beq.n	801b516 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 801b4e0:	687b      	ldr	r3, [r7, #4]
 801b4e2:	681b      	ldr	r3, [r3, #0]
 801b4e4:	b2db      	uxtb	r3, r3
 801b4e6:	3b08      	subs	r3, #8
 801b4e8:	4a28      	ldr	r2, [pc, #160]	@ (801b58c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 801b4ea:	fba2 2303 	umull	r2, r3, r2, r3
 801b4ee:	091b      	lsrs	r3, r3, #4
 801b4f0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 801b4f2:	68fa      	ldr	r2, [r7, #12]
 801b4f4:	4b26      	ldr	r3, [pc, #152]	@ (801b590 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 801b4f6:	4413      	add	r3, r2
 801b4f8:	009b      	lsls	r3, r3, #2
 801b4fa:	461a      	mov	r2, r3
 801b4fc:	687b      	ldr	r3, [r7, #4]
 801b4fe:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 801b500:	687b      	ldr	r3, [r7, #4]
 801b502:	4a24      	ldr	r2, [pc, #144]	@ (801b594 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 801b504:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 801b506:	68fb      	ldr	r3, [r7, #12]
 801b508:	f003 031f 	and.w	r3, r3, #31
 801b50c:	2201      	movs	r2, #1
 801b50e:	409a      	lsls	r2, r3
 801b510:	687b      	ldr	r3, [r7, #4]
 801b512:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 801b514:	e024      	b.n	801b560 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 801b516:	687b      	ldr	r3, [r7, #4]
 801b518:	681b      	ldr	r3, [r3, #0]
 801b51a:	b2db      	uxtb	r3, r3
 801b51c:	3b10      	subs	r3, #16
 801b51e:	4a1e      	ldr	r2, [pc, #120]	@ (801b598 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 801b520:	fba2 2303 	umull	r2, r3, r2, r3
 801b524:	091b      	lsrs	r3, r3, #4
 801b526:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 801b528:	68bb      	ldr	r3, [r7, #8]
 801b52a:	4a1c      	ldr	r2, [pc, #112]	@ (801b59c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 801b52c:	4293      	cmp	r3, r2
 801b52e:	d806      	bhi.n	801b53e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 801b530:	68bb      	ldr	r3, [r7, #8]
 801b532:	4a1b      	ldr	r2, [pc, #108]	@ (801b5a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 801b534:	4293      	cmp	r3, r2
 801b536:	d902      	bls.n	801b53e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 801b538:	68fb      	ldr	r3, [r7, #12]
 801b53a:	3308      	adds	r3, #8
 801b53c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 801b53e:	68fa      	ldr	r2, [r7, #12]
 801b540:	4b18      	ldr	r3, [pc, #96]	@ (801b5a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 801b542:	4413      	add	r3, r2
 801b544:	009b      	lsls	r3, r3, #2
 801b546:	461a      	mov	r2, r3
 801b548:	687b      	ldr	r3, [r7, #4]
 801b54a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 801b54c:	687b      	ldr	r3, [r7, #4]
 801b54e:	4a16      	ldr	r2, [pc, #88]	@ (801b5a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 801b550:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 801b552:	68fb      	ldr	r3, [r7, #12]
 801b554:	f003 031f 	and.w	r3, r3, #31
 801b558:	2201      	movs	r2, #1
 801b55a:	409a      	lsls	r2, r3
 801b55c:	687b      	ldr	r3, [r7, #4]
 801b55e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801b560:	bf00      	nop
 801b562:	3714      	adds	r7, #20
 801b564:	46bd      	mov	sp, r7
 801b566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b56a:	4770      	bx	lr
 801b56c:	58025408 	.word	0x58025408
 801b570:	5802541c 	.word	0x5802541c
 801b574:	58025430 	.word	0x58025430
 801b578:	58025444 	.word	0x58025444
 801b57c:	58025458 	.word	0x58025458
 801b580:	5802546c 	.word	0x5802546c
 801b584:	58025480 	.word	0x58025480
 801b588:	58025494 	.word	0x58025494
 801b58c:	cccccccd 	.word	0xcccccccd
 801b590:	16009600 	.word	0x16009600
 801b594:	58025880 	.word	0x58025880
 801b598:	aaaaaaab 	.word	0xaaaaaaab
 801b59c:	400204b8 	.word	0x400204b8
 801b5a0:	4002040f 	.word	0x4002040f
 801b5a4:	10008200 	.word	0x10008200
 801b5a8:	40020880 	.word	0x40020880

0801b5ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801b5ac:	b480      	push	{r7}
 801b5ae:	b085      	sub	sp, #20
 801b5b0:	af00      	add	r7, sp, #0
 801b5b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 801b5b4:	687b      	ldr	r3, [r7, #4]
 801b5b6:	685b      	ldr	r3, [r3, #4]
 801b5b8:	b2db      	uxtb	r3, r3
 801b5ba:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 801b5bc:	68fb      	ldr	r3, [r7, #12]
 801b5be:	2b00      	cmp	r3, #0
 801b5c0:	d04a      	beq.n	801b658 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 801b5c2:	68fb      	ldr	r3, [r7, #12]
 801b5c4:	2b08      	cmp	r3, #8
 801b5c6:	d847      	bhi.n	801b658 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801b5c8:	687b      	ldr	r3, [r7, #4]
 801b5ca:	681b      	ldr	r3, [r3, #0]
 801b5cc:	4a25      	ldr	r2, [pc, #148]	@ (801b664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 801b5ce:	4293      	cmp	r3, r2
 801b5d0:	d022      	beq.n	801b618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801b5d2:	687b      	ldr	r3, [r7, #4]
 801b5d4:	681b      	ldr	r3, [r3, #0]
 801b5d6:	4a24      	ldr	r2, [pc, #144]	@ (801b668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 801b5d8:	4293      	cmp	r3, r2
 801b5da:	d01d      	beq.n	801b618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801b5dc:	687b      	ldr	r3, [r7, #4]
 801b5de:	681b      	ldr	r3, [r3, #0]
 801b5e0:	4a22      	ldr	r2, [pc, #136]	@ (801b66c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 801b5e2:	4293      	cmp	r3, r2
 801b5e4:	d018      	beq.n	801b618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801b5e6:	687b      	ldr	r3, [r7, #4]
 801b5e8:	681b      	ldr	r3, [r3, #0]
 801b5ea:	4a21      	ldr	r2, [pc, #132]	@ (801b670 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 801b5ec:	4293      	cmp	r3, r2
 801b5ee:	d013      	beq.n	801b618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801b5f0:	687b      	ldr	r3, [r7, #4]
 801b5f2:	681b      	ldr	r3, [r3, #0]
 801b5f4:	4a1f      	ldr	r2, [pc, #124]	@ (801b674 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 801b5f6:	4293      	cmp	r3, r2
 801b5f8:	d00e      	beq.n	801b618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801b5fa:	687b      	ldr	r3, [r7, #4]
 801b5fc:	681b      	ldr	r3, [r3, #0]
 801b5fe:	4a1e      	ldr	r2, [pc, #120]	@ (801b678 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 801b600:	4293      	cmp	r3, r2
 801b602:	d009      	beq.n	801b618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801b604:	687b      	ldr	r3, [r7, #4]
 801b606:	681b      	ldr	r3, [r3, #0]
 801b608:	4a1c      	ldr	r2, [pc, #112]	@ (801b67c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 801b60a:	4293      	cmp	r3, r2
 801b60c:	d004      	beq.n	801b618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801b60e:	687b      	ldr	r3, [r7, #4]
 801b610:	681b      	ldr	r3, [r3, #0]
 801b612:	4a1b      	ldr	r2, [pc, #108]	@ (801b680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 801b614:	4293      	cmp	r3, r2
 801b616:	d101      	bne.n	801b61c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 801b618:	2301      	movs	r3, #1
 801b61a:	e000      	b.n	801b61e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 801b61c:	2300      	movs	r3, #0
 801b61e:	2b00      	cmp	r3, #0
 801b620:	d00a      	beq.n	801b638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 801b622:	68fa      	ldr	r2, [r7, #12]
 801b624:	4b17      	ldr	r3, [pc, #92]	@ (801b684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 801b626:	4413      	add	r3, r2
 801b628:	009b      	lsls	r3, r3, #2
 801b62a:	461a      	mov	r2, r3
 801b62c:	687b      	ldr	r3, [r7, #4]
 801b62e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 801b630:	687b      	ldr	r3, [r7, #4]
 801b632:	4a15      	ldr	r2, [pc, #84]	@ (801b688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 801b634:	671a      	str	r2, [r3, #112]	@ 0x70
 801b636:	e009      	b.n	801b64c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 801b638:	68fa      	ldr	r2, [r7, #12]
 801b63a:	4b14      	ldr	r3, [pc, #80]	@ (801b68c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 801b63c:	4413      	add	r3, r2
 801b63e:	009b      	lsls	r3, r3, #2
 801b640:	461a      	mov	r2, r3
 801b642:	687b      	ldr	r3, [r7, #4]
 801b644:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 801b646:	687b      	ldr	r3, [r7, #4]
 801b648:	4a11      	ldr	r2, [pc, #68]	@ (801b690 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 801b64a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 801b64c:	68fb      	ldr	r3, [r7, #12]
 801b64e:	3b01      	subs	r3, #1
 801b650:	2201      	movs	r2, #1
 801b652:	409a      	lsls	r2, r3
 801b654:	687b      	ldr	r3, [r7, #4]
 801b656:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 801b658:	bf00      	nop
 801b65a:	3714      	adds	r7, #20
 801b65c:	46bd      	mov	sp, r7
 801b65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b662:	4770      	bx	lr
 801b664:	58025408 	.word	0x58025408
 801b668:	5802541c 	.word	0x5802541c
 801b66c:	58025430 	.word	0x58025430
 801b670:	58025444 	.word	0x58025444
 801b674:	58025458 	.word	0x58025458
 801b678:	5802546c 	.word	0x5802546c
 801b67c:	58025480 	.word	0x58025480
 801b680:	58025494 	.word	0x58025494
 801b684:	1600963f 	.word	0x1600963f
 801b688:	58025940 	.word	0x58025940
 801b68c:	1000823f 	.word	0x1000823f
 801b690:	40020940 	.word	0x40020940

0801b694 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 801b694:	b580      	push	{r7, lr}
 801b696:	b086      	sub	sp, #24
 801b698:	af00      	add	r7, sp, #0
 801b69a:	60f8      	str	r0, [r7, #12]
 801b69c:	60b9      	str	r1, [r7, #8]
 801b69e:	607a      	str	r2, [r7, #4]
 801b6a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801b6a2:	2300      	movs	r3, #0
 801b6a4:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 801b6a6:	68fb      	ldr	r3, [r7, #12]
 801b6a8:	689b      	ldr	r3, [r3, #8]
 801b6aa:	2b80      	cmp	r3, #128	@ 0x80
 801b6ac:	d105      	bne.n	801b6ba <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 801b6ae:	68fb      	ldr	r3, [r7, #12]
 801b6b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801b6b4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 801b6b6:	2301      	movs	r3, #1
 801b6b8:	e315      	b.n	801bce6 <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 801b6ba:	68fb      	ldr	r3, [r7, #12]
 801b6bc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801b6c0:	2b01      	cmp	r3, #1
 801b6c2:	d101      	bne.n	801b6c8 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 801b6c4:	2302      	movs	r3, #2
 801b6c6:	e30e      	b.n	801bce6 <HAL_DMAEx_MultiBufferStart_IT+0x652>
 801b6c8:	68fb      	ldr	r3, [r7, #12]
 801b6ca:	2201      	movs	r2, #1
 801b6cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 801b6d0:	68fb      	ldr	r3, [r7, #12]
 801b6d2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801b6d6:	b2db      	uxtb	r3, r3
 801b6d8:	2b01      	cmp	r3, #1
 801b6da:	f040 82fd 	bne.w	801bcd8 <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801b6de:	68fb      	ldr	r3, [r7, #12]
 801b6e0:	2202      	movs	r2, #2
 801b6e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801b6e6:	68fb      	ldr	r3, [r7, #12]
 801b6e8:	2200      	movs	r2, #0
 801b6ea:	655a      	str	r2, [r3, #84]	@ 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801b6ec:	68fb      	ldr	r3, [r7, #12]
 801b6ee:	681b      	ldr	r3, [r3, #0]
 801b6f0:	4a82      	ldr	r2, [pc, #520]	@ (801b8fc <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 801b6f2:	4293      	cmp	r3, r2
 801b6f4:	d04a      	beq.n	801b78c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801b6f6:	68fb      	ldr	r3, [r7, #12]
 801b6f8:	681b      	ldr	r3, [r3, #0]
 801b6fa:	4a81      	ldr	r2, [pc, #516]	@ (801b900 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 801b6fc:	4293      	cmp	r3, r2
 801b6fe:	d045      	beq.n	801b78c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801b700:	68fb      	ldr	r3, [r7, #12]
 801b702:	681b      	ldr	r3, [r3, #0]
 801b704:	4a7f      	ldr	r2, [pc, #508]	@ (801b904 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 801b706:	4293      	cmp	r3, r2
 801b708:	d040      	beq.n	801b78c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801b70a:	68fb      	ldr	r3, [r7, #12]
 801b70c:	681b      	ldr	r3, [r3, #0]
 801b70e:	4a7e      	ldr	r2, [pc, #504]	@ (801b908 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 801b710:	4293      	cmp	r3, r2
 801b712:	d03b      	beq.n	801b78c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801b714:	68fb      	ldr	r3, [r7, #12]
 801b716:	681b      	ldr	r3, [r3, #0]
 801b718:	4a7c      	ldr	r2, [pc, #496]	@ (801b90c <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 801b71a:	4293      	cmp	r3, r2
 801b71c:	d036      	beq.n	801b78c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801b71e:	68fb      	ldr	r3, [r7, #12]
 801b720:	681b      	ldr	r3, [r3, #0]
 801b722:	4a7b      	ldr	r2, [pc, #492]	@ (801b910 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 801b724:	4293      	cmp	r3, r2
 801b726:	d031      	beq.n	801b78c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801b728:	68fb      	ldr	r3, [r7, #12]
 801b72a:	681b      	ldr	r3, [r3, #0]
 801b72c:	4a79      	ldr	r2, [pc, #484]	@ (801b914 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 801b72e:	4293      	cmp	r3, r2
 801b730:	d02c      	beq.n	801b78c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801b732:	68fb      	ldr	r3, [r7, #12]
 801b734:	681b      	ldr	r3, [r3, #0]
 801b736:	4a78      	ldr	r2, [pc, #480]	@ (801b918 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 801b738:	4293      	cmp	r3, r2
 801b73a:	d027      	beq.n	801b78c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801b73c:	68fb      	ldr	r3, [r7, #12]
 801b73e:	681b      	ldr	r3, [r3, #0]
 801b740:	4a76      	ldr	r2, [pc, #472]	@ (801b91c <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 801b742:	4293      	cmp	r3, r2
 801b744:	d022      	beq.n	801b78c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801b746:	68fb      	ldr	r3, [r7, #12]
 801b748:	681b      	ldr	r3, [r3, #0]
 801b74a:	4a75      	ldr	r2, [pc, #468]	@ (801b920 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 801b74c:	4293      	cmp	r3, r2
 801b74e:	d01d      	beq.n	801b78c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801b750:	68fb      	ldr	r3, [r7, #12]
 801b752:	681b      	ldr	r3, [r3, #0]
 801b754:	4a73      	ldr	r2, [pc, #460]	@ (801b924 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 801b756:	4293      	cmp	r3, r2
 801b758:	d018      	beq.n	801b78c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801b75a:	68fb      	ldr	r3, [r7, #12]
 801b75c:	681b      	ldr	r3, [r3, #0]
 801b75e:	4a72      	ldr	r2, [pc, #456]	@ (801b928 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 801b760:	4293      	cmp	r3, r2
 801b762:	d013      	beq.n	801b78c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801b764:	68fb      	ldr	r3, [r7, #12]
 801b766:	681b      	ldr	r3, [r3, #0]
 801b768:	4a70      	ldr	r2, [pc, #448]	@ (801b92c <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 801b76a:	4293      	cmp	r3, r2
 801b76c:	d00e      	beq.n	801b78c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801b76e:	68fb      	ldr	r3, [r7, #12]
 801b770:	681b      	ldr	r3, [r3, #0]
 801b772:	4a6f      	ldr	r2, [pc, #444]	@ (801b930 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 801b774:	4293      	cmp	r3, r2
 801b776:	d009      	beq.n	801b78c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801b778:	68fb      	ldr	r3, [r7, #12]
 801b77a:	681b      	ldr	r3, [r3, #0]
 801b77c:	4a6d      	ldr	r2, [pc, #436]	@ (801b934 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 801b77e:	4293      	cmp	r3, r2
 801b780:	d004      	beq.n	801b78c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801b782:	68fb      	ldr	r3, [r7, #12]
 801b784:	681b      	ldr	r3, [r3, #0]
 801b786:	4a6c      	ldr	r2, [pc, #432]	@ (801b938 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 801b788:	4293      	cmp	r3, r2
 801b78a:	d101      	bne.n	801b790 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 801b78c:	2301      	movs	r3, #1
 801b78e:	e000      	b.n	801b792 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 801b790:	2300      	movs	r3, #0
 801b792:	2b00      	cmp	r3, #0
 801b794:	d018      	beq.n	801b7c8 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 801b796:	68fb      	ldr	r3, [r7, #12]
 801b798:	681b      	ldr	r3, [r3, #0]
 801b79a:	681a      	ldr	r2, [r3, #0]
 801b79c:	68fb      	ldr	r3, [r7, #12]
 801b79e:	681b      	ldr	r3, [r3, #0]
 801b7a0:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 801b7a4:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 801b7a6:	68fb      	ldr	r3, [r7, #12]
 801b7a8:	681b      	ldr	r3, [r3, #0]
 801b7aa:	683a      	ldr	r2, [r7, #0]
 801b7ac:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 801b7ae:	68fb      	ldr	r3, [r7, #12]
 801b7b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b7b2:	3308      	adds	r3, #8
 801b7b4:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801b7b6:	68fb      	ldr	r3, [r7, #12]
 801b7b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b7ba:	f003 031f 	and.w	r3, r3, #31
 801b7be:	223f      	movs	r2, #63	@ 0x3f
 801b7c0:	409a      	lsls	r2, r3
 801b7c2:	693b      	ldr	r3, [r7, #16]
 801b7c4:	601a      	str	r2, [r3, #0]
 801b7c6:	e018      	b.n	801b7fa <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 801b7c8:	68fb      	ldr	r3, [r7, #12]
 801b7ca:	681b      	ldr	r3, [r3, #0]
 801b7cc:	6819      	ldr	r1, [r3, #0]
 801b7ce:	68fb      	ldr	r3, [r7, #12]
 801b7d0:	681a      	ldr	r2, [r3, #0]
 801b7d2:	f248 0320 	movw	r3, #32800	@ 0x8020
 801b7d6:	430b      	orrs	r3, r1
 801b7d8:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 801b7da:	68fb      	ldr	r3, [r7, #12]
 801b7dc:	681b      	ldr	r3, [r3, #0]
 801b7de:	683a      	ldr	r2, [r7, #0]
 801b7e0:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 801b7e2:	68fb      	ldr	r3, [r7, #12]
 801b7e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b7e6:	3304      	adds	r3, #4
 801b7e8:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 801b7ea:	68fb      	ldr	r3, [r7, #12]
 801b7ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b7ee:	f003 031f 	and.w	r3, r3, #31
 801b7f2:	2201      	movs	r2, #1
 801b7f4:	409a      	lsls	r2, r3
 801b7f6:	693b      	ldr	r3, [r7, #16]
 801b7f8:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801b7fa:	6a3b      	ldr	r3, [r7, #32]
 801b7fc:	687a      	ldr	r2, [r7, #4]
 801b7fe:	68b9      	ldr	r1, [r7, #8]
 801b800:	68f8      	ldr	r0, [r7, #12]
 801b802:	f000 faa5 	bl	801bd50 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801b806:	68fb      	ldr	r3, [r7, #12]
 801b808:	681b      	ldr	r3, [r3, #0]
 801b80a:	4a3c      	ldr	r2, [pc, #240]	@ (801b8fc <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 801b80c:	4293      	cmp	r3, r2
 801b80e:	d072      	beq.n	801b8f6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801b810:	68fb      	ldr	r3, [r7, #12]
 801b812:	681b      	ldr	r3, [r3, #0]
 801b814:	4a3a      	ldr	r2, [pc, #232]	@ (801b900 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 801b816:	4293      	cmp	r3, r2
 801b818:	d06d      	beq.n	801b8f6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801b81a:	68fb      	ldr	r3, [r7, #12]
 801b81c:	681b      	ldr	r3, [r3, #0]
 801b81e:	4a39      	ldr	r2, [pc, #228]	@ (801b904 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 801b820:	4293      	cmp	r3, r2
 801b822:	d068      	beq.n	801b8f6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801b824:	68fb      	ldr	r3, [r7, #12]
 801b826:	681b      	ldr	r3, [r3, #0]
 801b828:	4a37      	ldr	r2, [pc, #220]	@ (801b908 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 801b82a:	4293      	cmp	r3, r2
 801b82c:	d063      	beq.n	801b8f6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801b82e:	68fb      	ldr	r3, [r7, #12]
 801b830:	681b      	ldr	r3, [r3, #0]
 801b832:	4a36      	ldr	r2, [pc, #216]	@ (801b90c <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 801b834:	4293      	cmp	r3, r2
 801b836:	d05e      	beq.n	801b8f6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801b838:	68fb      	ldr	r3, [r7, #12]
 801b83a:	681b      	ldr	r3, [r3, #0]
 801b83c:	4a34      	ldr	r2, [pc, #208]	@ (801b910 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 801b83e:	4293      	cmp	r3, r2
 801b840:	d059      	beq.n	801b8f6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801b842:	68fb      	ldr	r3, [r7, #12]
 801b844:	681b      	ldr	r3, [r3, #0]
 801b846:	4a33      	ldr	r2, [pc, #204]	@ (801b914 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 801b848:	4293      	cmp	r3, r2
 801b84a:	d054      	beq.n	801b8f6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801b84c:	68fb      	ldr	r3, [r7, #12]
 801b84e:	681b      	ldr	r3, [r3, #0]
 801b850:	4a31      	ldr	r2, [pc, #196]	@ (801b918 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 801b852:	4293      	cmp	r3, r2
 801b854:	d04f      	beq.n	801b8f6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801b856:	68fb      	ldr	r3, [r7, #12]
 801b858:	681b      	ldr	r3, [r3, #0]
 801b85a:	4a30      	ldr	r2, [pc, #192]	@ (801b91c <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 801b85c:	4293      	cmp	r3, r2
 801b85e:	d04a      	beq.n	801b8f6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801b860:	68fb      	ldr	r3, [r7, #12]
 801b862:	681b      	ldr	r3, [r3, #0]
 801b864:	4a2e      	ldr	r2, [pc, #184]	@ (801b920 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 801b866:	4293      	cmp	r3, r2
 801b868:	d045      	beq.n	801b8f6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801b86a:	68fb      	ldr	r3, [r7, #12]
 801b86c:	681b      	ldr	r3, [r3, #0]
 801b86e:	4a2d      	ldr	r2, [pc, #180]	@ (801b924 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 801b870:	4293      	cmp	r3, r2
 801b872:	d040      	beq.n	801b8f6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801b874:	68fb      	ldr	r3, [r7, #12]
 801b876:	681b      	ldr	r3, [r3, #0]
 801b878:	4a2b      	ldr	r2, [pc, #172]	@ (801b928 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 801b87a:	4293      	cmp	r3, r2
 801b87c:	d03b      	beq.n	801b8f6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801b87e:	68fb      	ldr	r3, [r7, #12]
 801b880:	681b      	ldr	r3, [r3, #0]
 801b882:	4a2a      	ldr	r2, [pc, #168]	@ (801b92c <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 801b884:	4293      	cmp	r3, r2
 801b886:	d036      	beq.n	801b8f6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801b888:	68fb      	ldr	r3, [r7, #12]
 801b88a:	681b      	ldr	r3, [r3, #0]
 801b88c:	4a28      	ldr	r2, [pc, #160]	@ (801b930 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 801b88e:	4293      	cmp	r3, r2
 801b890:	d031      	beq.n	801b8f6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801b892:	68fb      	ldr	r3, [r7, #12]
 801b894:	681b      	ldr	r3, [r3, #0]
 801b896:	4a27      	ldr	r2, [pc, #156]	@ (801b934 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 801b898:	4293      	cmp	r3, r2
 801b89a:	d02c      	beq.n	801b8f6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801b89c:	68fb      	ldr	r3, [r7, #12]
 801b89e:	681b      	ldr	r3, [r3, #0]
 801b8a0:	4a25      	ldr	r2, [pc, #148]	@ (801b938 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 801b8a2:	4293      	cmp	r3, r2
 801b8a4:	d027      	beq.n	801b8f6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801b8a6:	68fb      	ldr	r3, [r7, #12]
 801b8a8:	681b      	ldr	r3, [r3, #0]
 801b8aa:	4a24      	ldr	r2, [pc, #144]	@ (801b93c <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 801b8ac:	4293      	cmp	r3, r2
 801b8ae:	d022      	beq.n	801b8f6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801b8b0:	68fb      	ldr	r3, [r7, #12]
 801b8b2:	681b      	ldr	r3, [r3, #0]
 801b8b4:	4a22      	ldr	r2, [pc, #136]	@ (801b940 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 801b8b6:	4293      	cmp	r3, r2
 801b8b8:	d01d      	beq.n	801b8f6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801b8ba:	68fb      	ldr	r3, [r7, #12]
 801b8bc:	681b      	ldr	r3, [r3, #0]
 801b8be:	4a21      	ldr	r2, [pc, #132]	@ (801b944 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 801b8c0:	4293      	cmp	r3, r2
 801b8c2:	d018      	beq.n	801b8f6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801b8c4:	68fb      	ldr	r3, [r7, #12]
 801b8c6:	681b      	ldr	r3, [r3, #0]
 801b8c8:	4a1f      	ldr	r2, [pc, #124]	@ (801b948 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 801b8ca:	4293      	cmp	r3, r2
 801b8cc:	d013      	beq.n	801b8f6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801b8ce:	68fb      	ldr	r3, [r7, #12]
 801b8d0:	681b      	ldr	r3, [r3, #0]
 801b8d2:	4a1e      	ldr	r2, [pc, #120]	@ (801b94c <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 801b8d4:	4293      	cmp	r3, r2
 801b8d6:	d00e      	beq.n	801b8f6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801b8d8:	68fb      	ldr	r3, [r7, #12]
 801b8da:	681b      	ldr	r3, [r3, #0]
 801b8dc:	4a1c      	ldr	r2, [pc, #112]	@ (801b950 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 801b8de:	4293      	cmp	r3, r2
 801b8e0:	d009      	beq.n	801b8f6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801b8e2:	68fb      	ldr	r3, [r7, #12]
 801b8e4:	681b      	ldr	r3, [r3, #0]
 801b8e6:	4a1b      	ldr	r2, [pc, #108]	@ (801b954 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 801b8e8:	4293      	cmp	r3, r2
 801b8ea:	d004      	beq.n	801b8f6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801b8ec:	68fb      	ldr	r3, [r7, #12]
 801b8ee:	681b      	ldr	r3, [r3, #0]
 801b8f0:	4a19      	ldr	r2, [pc, #100]	@ (801b958 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 801b8f2:	4293      	cmp	r3, r2
 801b8f4:	d132      	bne.n	801b95c <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 801b8f6:	2301      	movs	r3, #1
 801b8f8:	e031      	b.n	801b95e <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 801b8fa:	bf00      	nop
 801b8fc:	40020010 	.word	0x40020010
 801b900:	40020028 	.word	0x40020028
 801b904:	40020040 	.word	0x40020040
 801b908:	40020058 	.word	0x40020058
 801b90c:	40020070 	.word	0x40020070
 801b910:	40020088 	.word	0x40020088
 801b914:	400200a0 	.word	0x400200a0
 801b918:	400200b8 	.word	0x400200b8
 801b91c:	40020410 	.word	0x40020410
 801b920:	40020428 	.word	0x40020428
 801b924:	40020440 	.word	0x40020440
 801b928:	40020458 	.word	0x40020458
 801b92c:	40020470 	.word	0x40020470
 801b930:	40020488 	.word	0x40020488
 801b934:	400204a0 	.word	0x400204a0
 801b938:	400204b8 	.word	0x400204b8
 801b93c:	58025408 	.word	0x58025408
 801b940:	5802541c 	.word	0x5802541c
 801b944:	58025430 	.word	0x58025430
 801b948:	58025444 	.word	0x58025444
 801b94c:	58025458 	.word	0x58025458
 801b950:	5802546c 	.word	0x5802546c
 801b954:	58025480 	.word	0x58025480
 801b958:	58025494 	.word	0x58025494
 801b95c:	2300      	movs	r3, #0
 801b95e:	2b00      	cmp	r3, #0
 801b960:	d00d      	beq.n	801b97e <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801b962:	68fb      	ldr	r3, [r7, #12]
 801b964:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801b966:	68fa      	ldr	r2, [r7, #12]
 801b968:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801b96a:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 801b96c:	68fb      	ldr	r3, [r7, #12]
 801b96e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b970:	2b00      	cmp	r3, #0
 801b972:	d004      	beq.n	801b97e <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801b974:	68fb      	ldr	r3, [r7, #12]
 801b976:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b978:	68fa      	ldr	r2, [r7, #12]
 801b97a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801b97c:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801b97e:	68fb      	ldr	r3, [r7, #12]
 801b980:	681b      	ldr	r3, [r3, #0]
 801b982:	4a3b      	ldr	r2, [pc, #236]	@ (801ba70 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 801b984:	4293      	cmp	r3, r2
 801b986:	d04a      	beq.n	801ba1e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801b988:	68fb      	ldr	r3, [r7, #12]
 801b98a:	681b      	ldr	r3, [r3, #0]
 801b98c:	4a39      	ldr	r2, [pc, #228]	@ (801ba74 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 801b98e:	4293      	cmp	r3, r2
 801b990:	d045      	beq.n	801ba1e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801b992:	68fb      	ldr	r3, [r7, #12]
 801b994:	681b      	ldr	r3, [r3, #0]
 801b996:	4a38      	ldr	r2, [pc, #224]	@ (801ba78 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 801b998:	4293      	cmp	r3, r2
 801b99a:	d040      	beq.n	801ba1e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801b99c:	68fb      	ldr	r3, [r7, #12]
 801b99e:	681b      	ldr	r3, [r3, #0]
 801b9a0:	4a36      	ldr	r2, [pc, #216]	@ (801ba7c <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 801b9a2:	4293      	cmp	r3, r2
 801b9a4:	d03b      	beq.n	801ba1e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801b9a6:	68fb      	ldr	r3, [r7, #12]
 801b9a8:	681b      	ldr	r3, [r3, #0]
 801b9aa:	4a35      	ldr	r2, [pc, #212]	@ (801ba80 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 801b9ac:	4293      	cmp	r3, r2
 801b9ae:	d036      	beq.n	801ba1e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801b9b0:	68fb      	ldr	r3, [r7, #12]
 801b9b2:	681b      	ldr	r3, [r3, #0]
 801b9b4:	4a33      	ldr	r2, [pc, #204]	@ (801ba84 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 801b9b6:	4293      	cmp	r3, r2
 801b9b8:	d031      	beq.n	801ba1e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801b9ba:	68fb      	ldr	r3, [r7, #12]
 801b9bc:	681b      	ldr	r3, [r3, #0]
 801b9be:	4a32      	ldr	r2, [pc, #200]	@ (801ba88 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 801b9c0:	4293      	cmp	r3, r2
 801b9c2:	d02c      	beq.n	801ba1e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801b9c4:	68fb      	ldr	r3, [r7, #12]
 801b9c6:	681b      	ldr	r3, [r3, #0]
 801b9c8:	4a30      	ldr	r2, [pc, #192]	@ (801ba8c <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 801b9ca:	4293      	cmp	r3, r2
 801b9cc:	d027      	beq.n	801ba1e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801b9ce:	68fb      	ldr	r3, [r7, #12]
 801b9d0:	681b      	ldr	r3, [r3, #0]
 801b9d2:	4a2f      	ldr	r2, [pc, #188]	@ (801ba90 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 801b9d4:	4293      	cmp	r3, r2
 801b9d6:	d022      	beq.n	801ba1e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801b9d8:	68fb      	ldr	r3, [r7, #12]
 801b9da:	681b      	ldr	r3, [r3, #0]
 801b9dc:	4a2d      	ldr	r2, [pc, #180]	@ (801ba94 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 801b9de:	4293      	cmp	r3, r2
 801b9e0:	d01d      	beq.n	801ba1e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801b9e2:	68fb      	ldr	r3, [r7, #12]
 801b9e4:	681b      	ldr	r3, [r3, #0]
 801b9e6:	4a2c      	ldr	r2, [pc, #176]	@ (801ba98 <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 801b9e8:	4293      	cmp	r3, r2
 801b9ea:	d018      	beq.n	801ba1e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801b9ec:	68fb      	ldr	r3, [r7, #12]
 801b9ee:	681b      	ldr	r3, [r3, #0]
 801b9f0:	4a2a      	ldr	r2, [pc, #168]	@ (801ba9c <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 801b9f2:	4293      	cmp	r3, r2
 801b9f4:	d013      	beq.n	801ba1e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801b9f6:	68fb      	ldr	r3, [r7, #12]
 801b9f8:	681b      	ldr	r3, [r3, #0]
 801b9fa:	4a29      	ldr	r2, [pc, #164]	@ (801baa0 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 801b9fc:	4293      	cmp	r3, r2
 801b9fe:	d00e      	beq.n	801ba1e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801ba00:	68fb      	ldr	r3, [r7, #12]
 801ba02:	681b      	ldr	r3, [r3, #0]
 801ba04:	4a27      	ldr	r2, [pc, #156]	@ (801baa4 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 801ba06:	4293      	cmp	r3, r2
 801ba08:	d009      	beq.n	801ba1e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801ba0a:	68fb      	ldr	r3, [r7, #12]
 801ba0c:	681b      	ldr	r3, [r3, #0]
 801ba0e:	4a26      	ldr	r2, [pc, #152]	@ (801baa8 <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 801ba10:	4293      	cmp	r3, r2
 801ba12:	d004      	beq.n	801ba1e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801ba14:	68fb      	ldr	r3, [r7, #12]
 801ba16:	681b      	ldr	r3, [r3, #0]
 801ba18:	4a24      	ldr	r2, [pc, #144]	@ (801baac <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 801ba1a:	4293      	cmp	r3, r2
 801ba1c:	d101      	bne.n	801ba22 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 801ba1e:	2301      	movs	r3, #1
 801ba20:	e000      	b.n	801ba24 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 801ba22:	2300      	movs	r3, #0
 801ba24:	2b00      	cmp	r3, #0
 801ba26:	d043      	beq.n	801bab0 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 801ba28:	68fb      	ldr	r3, [r7, #12]
 801ba2a:	681b      	ldr	r3, [r3, #0]
 801ba2c:	681b      	ldr	r3, [r3, #0]
 801ba2e:	f023 021e 	bic.w	r2, r3, #30
 801ba32:	68fb      	ldr	r3, [r7, #12]
 801ba34:	681b      	ldr	r3, [r3, #0]
 801ba36:	f042 0216 	orr.w	r2, r2, #22
 801ba3a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 801ba3c:	68fb      	ldr	r3, [r7, #12]
 801ba3e:	681b      	ldr	r3, [r3, #0]
 801ba40:	695a      	ldr	r2, [r3, #20]
 801ba42:	68fb      	ldr	r3, [r7, #12]
 801ba44:	681b      	ldr	r3, [r3, #0]
 801ba46:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 801ba4a:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801ba4c:	68fb      	ldr	r3, [r7, #12]
 801ba4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ba50:	2b00      	cmp	r3, #0
 801ba52:	d103      	bne.n	801ba5c <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 801ba54:	68fb      	ldr	r3, [r7, #12]
 801ba56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801ba58:	2b00      	cmp	r3, #0
 801ba5a:	d043      	beq.n	801bae4 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 801ba5c:	68fb      	ldr	r3, [r7, #12]
 801ba5e:	681b      	ldr	r3, [r3, #0]
 801ba60:	681a      	ldr	r2, [r3, #0]
 801ba62:	68fb      	ldr	r3, [r7, #12]
 801ba64:	681b      	ldr	r3, [r3, #0]
 801ba66:	f042 0208 	orr.w	r2, r2, #8
 801ba6a:	601a      	str	r2, [r3, #0]
 801ba6c:	e03a      	b.n	801bae4 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 801ba6e:	bf00      	nop
 801ba70:	40020010 	.word	0x40020010
 801ba74:	40020028 	.word	0x40020028
 801ba78:	40020040 	.word	0x40020040
 801ba7c:	40020058 	.word	0x40020058
 801ba80:	40020070 	.word	0x40020070
 801ba84:	40020088 	.word	0x40020088
 801ba88:	400200a0 	.word	0x400200a0
 801ba8c:	400200b8 	.word	0x400200b8
 801ba90:	40020410 	.word	0x40020410
 801ba94:	40020428 	.word	0x40020428
 801ba98:	40020440 	.word	0x40020440
 801ba9c:	40020458 	.word	0x40020458
 801baa0:	40020470 	.word	0x40020470
 801baa4:	40020488 	.word	0x40020488
 801baa8:	400204a0 	.word	0x400204a0
 801baac:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 801bab0:	68fb      	ldr	r3, [r7, #12]
 801bab2:	681b      	ldr	r3, [r3, #0]
 801bab4:	681b      	ldr	r3, [r3, #0]
 801bab6:	f023 020e 	bic.w	r2, r3, #14
 801baba:	68fb      	ldr	r3, [r7, #12]
 801babc:	681b      	ldr	r3, [r3, #0]
 801babe:	f042 020a 	orr.w	r2, r2, #10
 801bac2:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801bac4:	68fb      	ldr	r3, [r7, #12]
 801bac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801bac8:	2b00      	cmp	r3, #0
 801baca:	d103      	bne.n	801bad4 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 801bacc:	68fb      	ldr	r3, [r7, #12]
 801bace:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801bad0:	2b00      	cmp	r3, #0
 801bad2:	d007      	beq.n	801bae4 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 801bad4:	68fb      	ldr	r3, [r7, #12]
 801bad6:	681b      	ldr	r3, [r3, #0]
 801bad8:	681a      	ldr	r2, [r3, #0]
 801bada:	68fb      	ldr	r3, [r7, #12]
 801badc:	681b      	ldr	r3, [r3, #0]
 801bade:	f042 0204 	orr.w	r2, r2, #4
 801bae2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801bae4:	68fb      	ldr	r3, [r7, #12]
 801bae6:	681b      	ldr	r3, [r3, #0]
 801bae8:	4a81      	ldr	r2, [pc, #516]	@ (801bcf0 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 801baea:	4293      	cmp	r3, r2
 801baec:	d072      	beq.n	801bbd4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801baee:	68fb      	ldr	r3, [r7, #12]
 801baf0:	681b      	ldr	r3, [r3, #0]
 801baf2:	4a80      	ldr	r2, [pc, #512]	@ (801bcf4 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 801baf4:	4293      	cmp	r3, r2
 801baf6:	d06d      	beq.n	801bbd4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801baf8:	68fb      	ldr	r3, [r7, #12]
 801bafa:	681b      	ldr	r3, [r3, #0]
 801bafc:	4a7e      	ldr	r2, [pc, #504]	@ (801bcf8 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 801bafe:	4293      	cmp	r3, r2
 801bb00:	d068      	beq.n	801bbd4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801bb02:	68fb      	ldr	r3, [r7, #12]
 801bb04:	681b      	ldr	r3, [r3, #0]
 801bb06:	4a7d      	ldr	r2, [pc, #500]	@ (801bcfc <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 801bb08:	4293      	cmp	r3, r2
 801bb0a:	d063      	beq.n	801bbd4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801bb0c:	68fb      	ldr	r3, [r7, #12]
 801bb0e:	681b      	ldr	r3, [r3, #0]
 801bb10:	4a7b      	ldr	r2, [pc, #492]	@ (801bd00 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 801bb12:	4293      	cmp	r3, r2
 801bb14:	d05e      	beq.n	801bbd4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801bb16:	68fb      	ldr	r3, [r7, #12]
 801bb18:	681b      	ldr	r3, [r3, #0]
 801bb1a:	4a7a      	ldr	r2, [pc, #488]	@ (801bd04 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 801bb1c:	4293      	cmp	r3, r2
 801bb1e:	d059      	beq.n	801bbd4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801bb20:	68fb      	ldr	r3, [r7, #12]
 801bb22:	681b      	ldr	r3, [r3, #0]
 801bb24:	4a78      	ldr	r2, [pc, #480]	@ (801bd08 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 801bb26:	4293      	cmp	r3, r2
 801bb28:	d054      	beq.n	801bbd4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801bb2a:	68fb      	ldr	r3, [r7, #12]
 801bb2c:	681b      	ldr	r3, [r3, #0]
 801bb2e:	4a77      	ldr	r2, [pc, #476]	@ (801bd0c <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 801bb30:	4293      	cmp	r3, r2
 801bb32:	d04f      	beq.n	801bbd4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801bb34:	68fb      	ldr	r3, [r7, #12]
 801bb36:	681b      	ldr	r3, [r3, #0]
 801bb38:	4a75      	ldr	r2, [pc, #468]	@ (801bd10 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 801bb3a:	4293      	cmp	r3, r2
 801bb3c:	d04a      	beq.n	801bbd4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801bb3e:	68fb      	ldr	r3, [r7, #12]
 801bb40:	681b      	ldr	r3, [r3, #0]
 801bb42:	4a74      	ldr	r2, [pc, #464]	@ (801bd14 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 801bb44:	4293      	cmp	r3, r2
 801bb46:	d045      	beq.n	801bbd4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801bb48:	68fb      	ldr	r3, [r7, #12]
 801bb4a:	681b      	ldr	r3, [r3, #0]
 801bb4c:	4a72      	ldr	r2, [pc, #456]	@ (801bd18 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 801bb4e:	4293      	cmp	r3, r2
 801bb50:	d040      	beq.n	801bbd4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801bb52:	68fb      	ldr	r3, [r7, #12]
 801bb54:	681b      	ldr	r3, [r3, #0]
 801bb56:	4a71      	ldr	r2, [pc, #452]	@ (801bd1c <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 801bb58:	4293      	cmp	r3, r2
 801bb5a:	d03b      	beq.n	801bbd4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801bb5c:	68fb      	ldr	r3, [r7, #12]
 801bb5e:	681b      	ldr	r3, [r3, #0]
 801bb60:	4a6f      	ldr	r2, [pc, #444]	@ (801bd20 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 801bb62:	4293      	cmp	r3, r2
 801bb64:	d036      	beq.n	801bbd4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801bb66:	68fb      	ldr	r3, [r7, #12]
 801bb68:	681b      	ldr	r3, [r3, #0]
 801bb6a:	4a6e      	ldr	r2, [pc, #440]	@ (801bd24 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 801bb6c:	4293      	cmp	r3, r2
 801bb6e:	d031      	beq.n	801bbd4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801bb70:	68fb      	ldr	r3, [r7, #12]
 801bb72:	681b      	ldr	r3, [r3, #0]
 801bb74:	4a6c      	ldr	r2, [pc, #432]	@ (801bd28 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 801bb76:	4293      	cmp	r3, r2
 801bb78:	d02c      	beq.n	801bbd4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801bb7a:	68fb      	ldr	r3, [r7, #12]
 801bb7c:	681b      	ldr	r3, [r3, #0]
 801bb7e:	4a6b      	ldr	r2, [pc, #428]	@ (801bd2c <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 801bb80:	4293      	cmp	r3, r2
 801bb82:	d027      	beq.n	801bbd4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801bb84:	68fb      	ldr	r3, [r7, #12]
 801bb86:	681b      	ldr	r3, [r3, #0]
 801bb88:	4a69      	ldr	r2, [pc, #420]	@ (801bd30 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 801bb8a:	4293      	cmp	r3, r2
 801bb8c:	d022      	beq.n	801bbd4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801bb8e:	68fb      	ldr	r3, [r7, #12]
 801bb90:	681b      	ldr	r3, [r3, #0]
 801bb92:	4a68      	ldr	r2, [pc, #416]	@ (801bd34 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 801bb94:	4293      	cmp	r3, r2
 801bb96:	d01d      	beq.n	801bbd4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801bb98:	68fb      	ldr	r3, [r7, #12]
 801bb9a:	681b      	ldr	r3, [r3, #0]
 801bb9c:	4a66      	ldr	r2, [pc, #408]	@ (801bd38 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 801bb9e:	4293      	cmp	r3, r2
 801bba0:	d018      	beq.n	801bbd4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801bba2:	68fb      	ldr	r3, [r7, #12]
 801bba4:	681b      	ldr	r3, [r3, #0]
 801bba6:	4a65      	ldr	r2, [pc, #404]	@ (801bd3c <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 801bba8:	4293      	cmp	r3, r2
 801bbaa:	d013      	beq.n	801bbd4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801bbac:	68fb      	ldr	r3, [r7, #12]
 801bbae:	681b      	ldr	r3, [r3, #0]
 801bbb0:	4a63      	ldr	r2, [pc, #396]	@ (801bd40 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 801bbb2:	4293      	cmp	r3, r2
 801bbb4:	d00e      	beq.n	801bbd4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801bbb6:	68fb      	ldr	r3, [r7, #12]
 801bbb8:	681b      	ldr	r3, [r3, #0]
 801bbba:	4a62      	ldr	r2, [pc, #392]	@ (801bd44 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 801bbbc:	4293      	cmp	r3, r2
 801bbbe:	d009      	beq.n	801bbd4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801bbc0:	68fb      	ldr	r3, [r7, #12]
 801bbc2:	681b      	ldr	r3, [r3, #0]
 801bbc4:	4a60      	ldr	r2, [pc, #384]	@ (801bd48 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 801bbc6:	4293      	cmp	r3, r2
 801bbc8:	d004      	beq.n	801bbd4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801bbca:	68fb      	ldr	r3, [r7, #12]
 801bbcc:	681b      	ldr	r3, [r3, #0]
 801bbce:	4a5f      	ldr	r2, [pc, #380]	@ (801bd4c <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 801bbd0:	4293      	cmp	r3, r2
 801bbd2:	d101      	bne.n	801bbd8 <HAL_DMAEx_MultiBufferStart_IT+0x544>
 801bbd4:	2301      	movs	r3, #1
 801bbd6:	e000      	b.n	801bbda <HAL_DMAEx_MultiBufferStart_IT+0x546>
 801bbd8:	2300      	movs	r3, #0
 801bbda:	2b00      	cmp	r3, #0
 801bbdc:	d01a      	beq.n	801bc14 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 801bbde:	68fb      	ldr	r3, [r7, #12]
 801bbe0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801bbe2:	681b      	ldr	r3, [r3, #0]
 801bbe4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801bbe8:	2b00      	cmp	r3, #0
 801bbea:	d007      	beq.n	801bbfc <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 801bbec:	68fb      	ldr	r3, [r7, #12]
 801bbee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801bbf0:	681a      	ldr	r2, [r3, #0]
 801bbf2:	68fb      	ldr	r3, [r7, #12]
 801bbf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801bbf6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801bbfa:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 801bbfc:	68fb      	ldr	r3, [r7, #12]
 801bbfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801bc00:	2b00      	cmp	r3, #0
 801bc02:	d007      	beq.n	801bc14 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 801bc04:	68fb      	ldr	r3, [r7, #12]
 801bc06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801bc08:	681a      	ldr	r2, [r3, #0]
 801bc0a:	68fb      	ldr	r3, [r7, #12]
 801bc0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801bc0e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801bc12:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 801bc14:	68fb      	ldr	r3, [r7, #12]
 801bc16:	681b      	ldr	r3, [r3, #0]
 801bc18:	4a35      	ldr	r2, [pc, #212]	@ (801bcf0 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 801bc1a:	4293      	cmp	r3, r2
 801bc1c:	d04a      	beq.n	801bcb4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801bc1e:	68fb      	ldr	r3, [r7, #12]
 801bc20:	681b      	ldr	r3, [r3, #0]
 801bc22:	4a34      	ldr	r2, [pc, #208]	@ (801bcf4 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 801bc24:	4293      	cmp	r3, r2
 801bc26:	d045      	beq.n	801bcb4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801bc28:	68fb      	ldr	r3, [r7, #12]
 801bc2a:	681b      	ldr	r3, [r3, #0]
 801bc2c:	4a32      	ldr	r2, [pc, #200]	@ (801bcf8 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 801bc2e:	4293      	cmp	r3, r2
 801bc30:	d040      	beq.n	801bcb4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801bc32:	68fb      	ldr	r3, [r7, #12]
 801bc34:	681b      	ldr	r3, [r3, #0]
 801bc36:	4a31      	ldr	r2, [pc, #196]	@ (801bcfc <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 801bc38:	4293      	cmp	r3, r2
 801bc3a:	d03b      	beq.n	801bcb4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801bc3c:	68fb      	ldr	r3, [r7, #12]
 801bc3e:	681b      	ldr	r3, [r3, #0]
 801bc40:	4a2f      	ldr	r2, [pc, #188]	@ (801bd00 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 801bc42:	4293      	cmp	r3, r2
 801bc44:	d036      	beq.n	801bcb4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801bc46:	68fb      	ldr	r3, [r7, #12]
 801bc48:	681b      	ldr	r3, [r3, #0]
 801bc4a:	4a2e      	ldr	r2, [pc, #184]	@ (801bd04 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 801bc4c:	4293      	cmp	r3, r2
 801bc4e:	d031      	beq.n	801bcb4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801bc50:	68fb      	ldr	r3, [r7, #12]
 801bc52:	681b      	ldr	r3, [r3, #0]
 801bc54:	4a2c      	ldr	r2, [pc, #176]	@ (801bd08 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 801bc56:	4293      	cmp	r3, r2
 801bc58:	d02c      	beq.n	801bcb4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801bc5a:	68fb      	ldr	r3, [r7, #12]
 801bc5c:	681b      	ldr	r3, [r3, #0]
 801bc5e:	4a2b      	ldr	r2, [pc, #172]	@ (801bd0c <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 801bc60:	4293      	cmp	r3, r2
 801bc62:	d027      	beq.n	801bcb4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801bc64:	68fb      	ldr	r3, [r7, #12]
 801bc66:	681b      	ldr	r3, [r3, #0]
 801bc68:	4a29      	ldr	r2, [pc, #164]	@ (801bd10 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 801bc6a:	4293      	cmp	r3, r2
 801bc6c:	d022      	beq.n	801bcb4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801bc6e:	68fb      	ldr	r3, [r7, #12]
 801bc70:	681b      	ldr	r3, [r3, #0]
 801bc72:	4a28      	ldr	r2, [pc, #160]	@ (801bd14 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 801bc74:	4293      	cmp	r3, r2
 801bc76:	d01d      	beq.n	801bcb4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801bc78:	68fb      	ldr	r3, [r7, #12]
 801bc7a:	681b      	ldr	r3, [r3, #0]
 801bc7c:	4a26      	ldr	r2, [pc, #152]	@ (801bd18 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 801bc7e:	4293      	cmp	r3, r2
 801bc80:	d018      	beq.n	801bcb4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801bc82:	68fb      	ldr	r3, [r7, #12]
 801bc84:	681b      	ldr	r3, [r3, #0]
 801bc86:	4a25      	ldr	r2, [pc, #148]	@ (801bd1c <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 801bc88:	4293      	cmp	r3, r2
 801bc8a:	d013      	beq.n	801bcb4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801bc8c:	68fb      	ldr	r3, [r7, #12]
 801bc8e:	681b      	ldr	r3, [r3, #0]
 801bc90:	4a23      	ldr	r2, [pc, #140]	@ (801bd20 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 801bc92:	4293      	cmp	r3, r2
 801bc94:	d00e      	beq.n	801bcb4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801bc96:	68fb      	ldr	r3, [r7, #12]
 801bc98:	681b      	ldr	r3, [r3, #0]
 801bc9a:	4a22      	ldr	r2, [pc, #136]	@ (801bd24 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 801bc9c:	4293      	cmp	r3, r2
 801bc9e:	d009      	beq.n	801bcb4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801bca0:	68fb      	ldr	r3, [r7, #12]
 801bca2:	681b      	ldr	r3, [r3, #0]
 801bca4:	4a20      	ldr	r2, [pc, #128]	@ (801bd28 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 801bca6:	4293      	cmp	r3, r2
 801bca8:	d004      	beq.n	801bcb4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801bcaa:	68fb      	ldr	r3, [r7, #12]
 801bcac:	681b      	ldr	r3, [r3, #0]
 801bcae:	4a1f      	ldr	r2, [pc, #124]	@ (801bd2c <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 801bcb0:	4293      	cmp	r3, r2
 801bcb2:	d108      	bne.n	801bcc6 <HAL_DMAEx_MultiBufferStart_IT+0x632>
 801bcb4:	68fb      	ldr	r3, [r7, #12]
 801bcb6:	681b      	ldr	r3, [r3, #0]
 801bcb8:	681a      	ldr	r2, [r3, #0]
 801bcba:	68fb      	ldr	r3, [r7, #12]
 801bcbc:	681b      	ldr	r3, [r3, #0]
 801bcbe:	f042 0201 	orr.w	r2, r2, #1
 801bcc2:	601a      	str	r2, [r3, #0]
 801bcc4:	e00e      	b.n	801bce4 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 801bcc6:	68fb      	ldr	r3, [r7, #12]
 801bcc8:	681b      	ldr	r3, [r3, #0]
 801bcca:	681a      	ldr	r2, [r3, #0]
 801bccc:	68fb      	ldr	r3, [r7, #12]
 801bcce:	681b      	ldr	r3, [r3, #0]
 801bcd0:	f042 0201 	orr.w	r2, r2, #1
 801bcd4:	601a      	str	r2, [r3, #0]
 801bcd6:	e005      	b.n	801bce4 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 801bcd8:	68fb      	ldr	r3, [r7, #12]
 801bcda:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801bcde:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    status = HAL_ERROR;
 801bce0:	2301      	movs	r3, #1
 801bce2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 801bce4:	7dfb      	ldrb	r3, [r7, #23]
}
 801bce6:	4618      	mov	r0, r3
 801bce8:	3718      	adds	r7, #24
 801bcea:	46bd      	mov	sp, r7
 801bcec:	bd80      	pop	{r7, pc}
 801bcee:	bf00      	nop
 801bcf0:	40020010 	.word	0x40020010
 801bcf4:	40020028 	.word	0x40020028
 801bcf8:	40020040 	.word	0x40020040
 801bcfc:	40020058 	.word	0x40020058
 801bd00:	40020070 	.word	0x40020070
 801bd04:	40020088 	.word	0x40020088
 801bd08:	400200a0 	.word	0x400200a0
 801bd0c:	400200b8 	.word	0x400200b8
 801bd10:	40020410 	.word	0x40020410
 801bd14:	40020428 	.word	0x40020428
 801bd18:	40020440 	.word	0x40020440
 801bd1c:	40020458 	.word	0x40020458
 801bd20:	40020470 	.word	0x40020470
 801bd24:	40020488 	.word	0x40020488
 801bd28:	400204a0 	.word	0x400204a0
 801bd2c:	400204b8 	.word	0x400204b8
 801bd30:	58025408 	.word	0x58025408
 801bd34:	5802541c 	.word	0x5802541c
 801bd38:	58025430 	.word	0x58025430
 801bd3c:	58025444 	.word	0x58025444
 801bd40:	58025458 	.word	0x58025458
 801bd44:	5802546c 	.word	0x5802546c
 801bd48:	58025480 	.word	0x58025480
 801bd4c:	58025494 	.word	0x58025494

0801bd50 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801bd50:	b480      	push	{r7}
 801bd52:	b085      	sub	sp, #20
 801bd54:	af00      	add	r7, sp, #0
 801bd56:	60f8      	str	r0, [r7, #12]
 801bd58:	60b9      	str	r1, [r7, #8]
 801bd5a:	607a      	str	r2, [r7, #4]
 801bd5c:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801bd5e:	68fb      	ldr	r3, [r7, #12]
 801bd60:	681b      	ldr	r3, [r3, #0]
 801bd62:	4a46      	ldr	r2, [pc, #280]	@ (801be7c <DMA_MultiBufferSetConfig+0x12c>)
 801bd64:	4293      	cmp	r3, r2
 801bd66:	d04a      	beq.n	801bdfe <DMA_MultiBufferSetConfig+0xae>
 801bd68:	68fb      	ldr	r3, [r7, #12]
 801bd6a:	681b      	ldr	r3, [r3, #0]
 801bd6c:	4a44      	ldr	r2, [pc, #272]	@ (801be80 <DMA_MultiBufferSetConfig+0x130>)
 801bd6e:	4293      	cmp	r3, r2
 801bd70:	d045      	beq.n	801bdfe <DMA_MultiBufferSetConfig+0xae>
 801bd72:	68fb      	ldr	r3, [r7, #12]
 801bd74:	681b      	ldr	r3, [r3, #0]
 801bd76:	4a43      	ldr	r2, [pc, #268]	@ (801be84 <DMA_MultiBufferSetConfig+0x134>)
 801bd78:	4293      	cmp	r3, r2
 801bd7a:	d040      	beq.n	801bdfe <DMA_MultiBufferSetConfig+0xae>
 801bd7c:	68fb      	ldr	r3, [r7, #12]
 801bd7e:	681b      	ldr	r3, [r3, #0]
 801bd80:	4a41      	ldr	r2, [pc, #260]	@ (801be88 <DMA_MultiBufferSetConfig+0x138>)
 801bd82:	4293      	cmp	r3, r2
 801bd84:	d03b      	beq.n	801bdfe <DMA_MultiBufferSetConfig+0xae>
 801bd86:	68fb      	ldr	r3, [r7, #12]
 801bd88:	681b      	ldr	r3, [r3, #0]
 801bd8a:	4a40      	ldr	r2, [pc, #256]	@ (801be8c <DMA_MultiBufferSetConfig+0x13c>)
 801bd8c:	4293      	cmp	r3, r2
 801bd8e:	d036      	beq.n	801bdfe <DMA_MultiBufferSetConfig+0xae>
 801bd90:	68fb      	ldr	r3, [r7, #12]
 801bd92:	681b      	ldr	r3, [r3, #0]
 801bd94:	4a3e      	ldr	r2, [pc, #248]	@ (801be90 <DMA_MultiBufferSetConfig+0x140>)
 801bd96:	4293      	cmp	r3, r2
 801bd98:	d031      	beq.n	801bdfe <DMA_MultiBufferSetConfig+0xae>
 801bd9a:	68fb      	ldr	r3, [r7, #12]
 801bd9c:	681b      	ldr	r3, [r3, #0]
 801bd9e:	4a3d      	ldr	r2, [pc, #244]	@ (801be94 <DMA_MultiBufferSetConfig+0x144>)
 801bda0:	4293      	cmp	r3, r2
 801bda2:	d02c      	beq.n	801bdfe <DMA_MultiBufferSetConfig+0xae>
 801bda4:	68fb      	ldr	r3, [r7, #12]
 801bda6:	681b      	ldr	r3, [r3, #0]
 801bda8:	4a3b      	ldr	r2, [pc, #236]	@ (801be98 <DMA_MultiBufferSetConfig+0x148>)
 801bdaa:	4293      	cmp	r3, r2
 801bdac:	d027      	beq.n	801bdfe <DMA_MultiBufferSetConfig+0xae>
 801bdae:	68fb      	ldr	r3, [r7, #12]
 801bdb0:	681b      	ldr	r3, [r3, #0]
 801bdb2:	4a3a      	ldr	r2, [pc, #232]	@ (801be9c <DMA_MultiBufferSetConfig+0x14c>)
 801bdb4:	4293      	cmp	r3, r2
 801bdb6:	d022      	beq.n	801bdfe <DMA_MultiBufferSetConfig+0xae>
 801bdb8:	68fb      	ldr	r3, [r7, #12]
 801bdba:	681b      	ldr	r3, [r3, #0]
 801bdbc:	4a38      	ldr	r2, [pc, #224]	@ (801bea0 <DMA_MultiBufferSetConfig+0x150>)
 801bdbe:	4293      	cmp	r3, r2
 801bdc0:	d01d      	beq.n	801bdfe <DMA_MultiBufferSetConfig+0xae>
 801bdc2:	68fb      	ldr	r3, [r7, #12]
 801bdc4:	681b      	ldr	r3, [r3, #0]
 801bdc6:	4a37      	ldr	r2, [pc, #220]	@ (801bea4 <DMA_MultiBufferSetConfig+0x154>)
 801bdc8:	4293      	cmp	r3, r2
 801bdca:	d018      	beq.n	801bdfe <DMA_MultiBufferSetConfig+0xae>
 801bdcc:	68fb      	ldr	r3, [r7, #12]
 801bdce:	681b      	ldr	r3, [r3, #0]
 801bdd0:	4a35      	ldr	r2, [pc, #212]	@ (801bea8 <DMA_MultiBufferSetConfig+0x158>)
 801bdd2:	4293      	cmp	r3, r2
 801bdd4:	d013      	beq.n	801bdfe <DMA_MultiBufferSetConfig+0xae>
 801bdd6:	68fb      	ldr	r3, [r7, #12]
 801bdd8:	681b      	ldr	r3, [r3, #0]
 801bdda:	4a34      	ldr	r2, [pc, #208]	@ (801beac <DMA_MultiBufferSetConfig+0x15c>)
 801bddc:	4293      	cmp	r3, r2
 801bdde:	d00e      	beq.n	801bdfe <DMA_MultiBufferSetConfig+0xae>
 801bde0:	68fb      	ldr	r3, [r7, #12]
 801bde2:	681b      	ldr	r3, [r3, #0]
 801bde4:	4a32      	ldr	r2, [pc, #200]	@ (801beb0 <DMA_MultiBufferSetConfig+0x160>)
 801bde6:	4293      	cmp	r3, r2
 801bde8:	d009      	beq.n	801bdfe <DMA_MultiBufferSetConfig+0xae>
 801bdea:	68fb      	ldr	r3, [r7, #12]
 801bdec:	681b      	ldr	r3, [r3, #0]
 801bdee:	4a31      	ldr	r2, [pc, #196]	@ (801beb4 <DMA_MultiBufferSetConfig+0x164>)
 801bdf0:	4293      	cmp	r3, r2
 801bdf2:	d004      	beq.n	801bdfe <DMA_MultiBufferSetConfig+0xae>
 801bdf4:	68fb      	ldr	r3, [r7, #12]
 801bdf6:	681b      	ldr	r3, [r3, #0]
 801bdf8:	4a2f      	ldr	r2, [pc, #188]	@ (801beb8 <DMA_MultiBufferSetConfig+0x168>)
 801bdfa:	4293      	cmp	r3, r2
 801bdfc:	d101      	bne.n	801be02 <DMA_MultiBufferSetConfig+0xb2>
 801bdfe:	2301      	movs	r3, #1
 801be00:	e000      	b.n	801be04 <DMA_MultiBufferSetConfig+0xb4>
 801be02:	2300      	movs	r3, #0
 801be04:	2b00      	cmp	r3, #0
 801be06:	d019      	beq.n	801be3c <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 801be08:	68fb      	ldr	r3, [r7, #12]
 801be0a:	681b      	ldr	r3, [r3, #0]
 801be0c:	683a      	ldr	r2, [r7, #0]
 801be0e:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801be10:	68fb      	ldr	r3, [r7, #12]
 801be12:	689b      	ldr	r3, [r3, #8]
 801be14:	2b40      	cmp	r3, #64	@ 0x40
 801be16:	d108      	bne.n	801be2a <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 801be18:	68fb      	ldr	r3, [r7, #12]
 801be1a:	681b      	ldr	r3, [r3, #0]
 801be1c:	687a      	ldr	r2, [r7, #4]
 801be1e:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 801be20:	68fb      	ldr	r3, [r7, #12]
 801be22:	681b      	ldr	r3, [r3, #0]
 801be24:	68ba      	ldr	r2, [r7, #8]
 801be26:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 801be28:	e021      	b.n	801be6e <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 801be2a:	68fb      	ldr	r3, [r7, #12]
 801be2c:	681b      	ldr	r3, [r3, #0]
 801be2e:	68ba      	ldr	r2, [r7, #8]
 801be30:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 801be32:	68fb      	ldr	r3, [r7, #12]
 801be34:	681b      	ldr	r3, [r3, #0]
 801be36:	687a      	ldr	r2, [r7, #4]
 801be38:	60da      	str	r2, [r3, #12]
}
 801be3a:	e018      	b.n	801be6e <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 801be3c:	68fb      	ldr	r3, [r7, #12]
 801be3e:	681b      	ldr	r3, [r3, #0]
 801be40:	683a      	ldr	r2, [r7, #0]
 801be42:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801be44:	68fb      	ldr	r3, [r7, #12]
 801be46:	689b      	ldr	r3, [r3, #8]
 801be48:	2b40      	cmp	r3, #64	@ 0x40
 801be4a:	d108      	bne.n	801be5e <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 801be4c:	68fb      	ldr	r3, [r7, #12]
 801be4e:	681b      	ldr	r3, [r3, #0]
 801be50:	687a      	ldr	r2, [r7, #4]
 801be52:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 801be54:	68fb      	ldr	r3, [r7, #12]
 801be56:	681b      	ldr	r3, [r3, #0]
 801be58:	68ba      	ldr	r2, [r7, #8]
 801be5a:	60da      	str	r2, [r3, #12]
}
 801be5c:	e007      	b.n	801be6e <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 801be5e:	68fb      	ldr	r3, [r7, #12]
 801be60:	681b      	ldr	r3, [r3, #0]
 801be62:	68ba      	ldr	r2, [r7, #8]
 801be64:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 801be66:	68fb      	ldr	r3, [r7, #12]
 801be68:	681b      	ldr	r3, [r3, #0]
 801be6a:	687a      	ldr	r2, [r7, #4]
 801be6c:	60da      	str	r2, [r3, #12]
}
 801be6e:	bf00      	nop
 801be70:	3714      	adds	r7, #20
 801be72:	46bd      	mov	sp, r7
 801be74:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be78:	4770      	bx	lr
 801be7a:	bf00      	nop
 801be7c:	40020010 	.word	0x40020010
 801be80:	40020028 	.word	0x40020028
 801be84:	40020040 	.word	0x40020040
 801be88:	40020058 	.word	0x40020058
 801be8c:	40020070 	.word	0x40020070
 801be90:	40020088 	.word	0x40020088
 801be94:	400200a0 	.word	0x400200a0
 801be98:	400200b8 	.word	0x400200b8
 801be9c:	40020410 	.word	0x40020410
 801bea0:	40020428 	.word	0x40020428
 801bea4:	40020440 	.word	0x40020440
 801bea8:	40020458 	.word	0x40020458
 801beac:	40020470 	.word	0x40020470
 801beb0:	40020488 	.word	0x40020488
 801beb4:	400204a0 	.word	0x400204a0
 801beb8:	400204b8 	.word	0x400204b8

0801bebc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801bebc:	b480      	push	{r7}
 801bebe:	b089      	sub	sp, #36	@ 0x24
 801bec0:	af00      	add	r7, sp, #0
 801bec2:	6078      	str	r0, [r7, #4]
 801bec4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801bec6:	2300      	movs	r3, #0
 801bec8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 801beca:	4b89      	ldr	r3, [pc, #548]	@ (801c0f0 <HAL_GPIO_Init+0x234>)
 801becc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801bece:	e194      	b.n	801c1fa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801bed0:	683b      	ldr	r3, [r7, #0]
 801bed2:	681a      	ldr	r2, [r3, #0]
 801bed4:	2101      	movs	r1, #1
 801bed6:	69fb      	ldr	r3, [r7, #28]
 801bed8:	fa01 f303 	lsl.w	r3, r1, r3
 801bedc:	4013      	ands	r3, r2
 801bede:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 801bee0:	693b      	ldr	r3, [r7, #16]
 801bee2:	2b00      	cmp	r3, #0
 801bee4:	f000 8186 	beq.w	801c1f4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801bee8:	683b      	ldr	r3, [r7, #0]
 801beea:	685b      	ldr	r3, [r3, #4]
 801beec:	f003 0303 	and.w	r3, r3, #3
 801bef0:	2b01      	cmp	r3, #1
 801bef2:	d005      	beq.n	801bf00 <HAL_GPIO_Init+0x44>
 801bef4:	683b      	ldr	r3, [r7, #0]
 801bef6:	685b      	ldr	r3, [r3, #4]
 801bef8:	f003 0303 	and.w	r3, r3, #3
 801befc:	2b02      	cmp	r3, #2
 801befe:	d130      	bne.n	801bf62 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801bf00:	687b      	ldr	r3, [r7, #4]
 801bf02:	689b      	ldr	r3, [r3, #8]
 801bf04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801bf06:	69fb      	ldr	r3, [r7, #28]
 801bf08:	005b      	lsls	r3, r3, #1
 801bf0a:	2203      	movs	r2, #3
 801bf0c:	fa02 f303 	lsl.w	r3, r2, r3
 801bf10:	43db      	mvns	r3, r3
 801bf12:	69ba      	ldr	r2, [r7, #24]
 801bf14:	4013      	ands	r3, r2
 801bf16:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801bf18:	683b      	ldr	r3, [r7, #0]
 801bf1a:	68da      	ldr	r2, [r3, #12]
 801bf1c:	69fb      	ldr	r3, [r7, #28]
 801bf1e:	005b      	lsls	r3, r3, #1
 801bf20:	fa02 f303 	lsl.w	r3, r2, r3
 801bf24:	69ba      	ldr	r2, [r7, #24]
 801bf26:	4313      	orrs	r3, r2
 801bf28:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801bf2a:	687b      	ldr	r3, [r7, #4]
 801bf2c:	69ba      	ldr	r2, [r7, #24]
 801bf2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801bf30:	687b      	ldr	r3, [r7, #4]
 801bf32:	685b      	ldr	r3, [r3, #4]
 801bf34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801bf36:	2201      	movs	r2, #1
 801bf38:	69fb      	ldr	r3, [r7, #28]
 801bf3a:	fa02 f303 	lsl.w	r3, r2, r3
 801bf3e:	43db      	mvns	r3, r3
 801bf40:	69ba      	ldr	r2, [r7, #24]
 801bf42:	4013      	ands	r3, r2
 801bf44:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801bf46:	683b      	ldr	r3, [r7, #0]
 801bf48:	685b      	ldr	r3, [r3, #4]
 801bf4a:	091b      	lsrs	r3, r3, #4
 801bf4c:	f003 0201 	and.w	r2, r3, #1
 801bf50:	69fb      	ldr	r3, [r7, #28]
 801bf52:	fa02 f303 	lsl.w	r3, r2, r3
 801bf56:	69ba      	ldr	r2, [r7, #24]
 801bf58:	4313      	orrs	r3, r2
 801bf5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801bf5c:	687b      	ldr	r3, [r7, #4]
 801bf5e:	69ba      	ldr	r2, [r7, #24]
 801bf60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801bf62:	683b      	ldr	r3, [r7, #0]
 801bf64:	685b      	ldr	r3, [r3, #4]
 801bf66:	f003 0303 	and.w	r3, r3, #3
 801bf6a:	2b03      	cmp	r3, #3
 801bf6c:	d017      	beq.n	801bf9e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 801bf6e:	687b      	ldr	r3, [r7, #4]
 801bf70:	68db      	ldr	r3, [r3, #12]
 801bf72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801bf74:	69fb      	ldr	r3, [r7, #28]
 801bf76:	005b      	lsls	r3, r3, #1
 801bf78:	2203      	movs	r2, #3
 801bf7a:	fa02 f303 	lsl.w	r3, r2, r3
 801bf7e:	43db      	mvns	r3, r3
 801bf80:	69ba      	ldr	r2, [r7, #24]
 801bf82:	4013      	ands	r3, r2
 801bf84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801bf86:	683b      	ldr	r3, [r7, #0]
 801bf88:	689a      	ldr	r2, [r3, #8]
 801bf8a:	69fb      	ldr	r3, [r7, #28]
 801bf8c:	005b      	lsls	r3, r3, #1
 801bf8e:	fa02 f303 	lsl.w	r3, r2, r3
 801bf92:	69ba      	ldr	r2, [r7, #24]
 801bf94:	4313      	orrs	r3, r2
 801bf96:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 801bf98:	687b      	ldr	r3, [r7, #4]
 801bf9a:	69ba      	ldr	r2, [r7, #24]
 801bf9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801bf9e:	683b      	ldr	r3, [r7, #0]
 801bfa0:	685b      	ldr	r3, [r3, #4]
 801bfa2:	f003 0303 	and.w	r3, r3, #3
 801bfa6:	2b02      	cmp	r3, #2
 801bfa8:	d123      	bne.n	801bff2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801bfaa:	69fb      	ldr	r3, [r7, #28]
 801bfac:	08da      	lsrs	r2, r3, #3
 801bfae:	687b      	ldr	r3, [r7, #4]
 801bfb0:	3208      	adds	r2, #8
 801bfb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bfb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 801bfb8:	69fb      	ldr	r3, [r7, #28]
 801bfba:	f003 0307 	and.w	r3, r3, #7
 801bfbe:	009b      	lsls	r3, r3, #2
 801bfc0:	220f      	movs	r2, #15
 801bfc2:	fa02 f303 	lsl.w	r3, r2, r3
 801bfc6:	43db      	mvns	r3, r3
 801bfc8:	69ba      	ldr	r2, [r7, #24]
 801bfca:	4013      	ands	r3, r2
 801bfcc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801bfce:	683b      	ldr	r3, [r7, #0]
 801bfd0:	691a      	ldr	r2, [r3, #16]
 801bfd2:	69fb      	ldr	r3, [r7, #28]
 801bfd4:	f003 0307 	and.w	r3, r3, #7
 801bfd8:	009b      	lsls	r3, r3, #2
 801bfda:	fa02 f303 	lsl.w	r3, r2, r3
 801bfde:	69ba      	ldr	r2, [r7, #24]
 801bfe0:	4313      	orrs	r3, r2
 801bfe2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801bfe4:	69fb      	ldr	r3, [r7, #28]
 801bfe6:	08da      	lsrs	r2, r3, #3
 801bfe8:	687b      	ldr	r3, [r7, #4]
 801bfea:	3208      	adds	r2, #8
 801bfec:	69b9      	ldr	r1, [r7, #24]
 801bfee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801bff2:	687b      	ldr	r3, [r7, #4]
 801bff4:	681b      	ldr	r3, [r3, #0]
 801bff6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801bff8:	69fb      	ldr	r3, [r7, #28]
 801bffa:	005b      	lsls	r3, r3, #1
 801bffc:	2203      	movs	r2, #3
 801bffe:	fa02 f303 	lsl.w	r3, r2, r3
 801c002:	43db      	mvns	r3, r3
 801c004:	69ba      	ldr	r2, [r7, #24]
 801c006:	4013      	ands	r3, r2
 801c008:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801c00a:	683b      	ldr	r3, [r7, #0]
 801c00c:	685b      	ldr	r3, [r3, #4]
 801c00e:	f003 0203 	and.w	r2, r3, #3
 801c012:	69fb      	ldr	r3, [r7, #28]
 801c014:	005b      	lsls	r3, r3, #1
 801c016:	fa02 f303 	lsl.w	r3, r2, r3
 801c01a:	69ba      	ldr	r2, [r7, #24]
 801c01c:	4313      	orrs	r3, r2
 801c01e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801c020:	687b      	ldr	r3, [r7, #4]
 801c022:	69ba      	ldr	r2, [r7, #24]
 801c024:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801c026:	683b      	ldr	r3, [r7, #0]
 801c028:	685b      	ldr	r3, [r3, #4]
 801c02a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 801c02e:	2b00      	cmp	r3, #0
 801c030:	f000 80e0 	beq.w	801c1f4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801c034:	4b2f      	ldr	r3, [pc, #188]	@ (801c0f4 <HAL_GPIO_Init+0x238>)
 801c036:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801c03a:	4a2e      	ldr	r2, [pc, #184]	@ (801c0f4 <HAL_GPIO_Init+0x238>)
 801c03c:	f043 0302 	orr.w	r3, r3, #2
 801c040:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 801c044:	4b2b      	ldr	r3, [pc, #172]	@ (801c0f4 <HAL_GPIO_Init+0x238>)
 801c046:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801c04a:	f003 0302 	and.w	r3, r3, #2
 801c04e:	60fb      	str	r3, [r7, #12]
 801c050:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801c052:	4a29      	ldr	r2, [pc, #164]	@ (801c0f8 <HAL_GPIO_Init+0x23c>)
 801c054:	69fb      	ldr	r3, [r7, #28]
 801c056:	089b      	lsrs	r3, r3, #2
 801c058:	3302      	adds	r3, #2
 801c05a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c05e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 801c060:	69fb      	ldr	r3, [r7, #28]
 801c062:	f003 0303 	and.w	r3, r3, #3
 801c066:	009b      	lsls	r3, r3, #2
 801c068:	220f      	movs	r2, #15
 801c06a:	fa02 f303 	lsl.w	r3, r2, r3
 801c06e:	43db      	mvns	r3, r3
 801c070:	69ba      	ldr	r2, [r7, #24]
 801c072:	4013      	ands	r3, r2
 801c074:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801c076:	687b      	ldr	r3, [r7, #4]
 801c078:	4a20      	ldr	r2, [pc, #128]	@ (801c0fc <HAL_GPIO_Init+0x240>)
 801c07a:	4293      	cmp	r3, r2
 801c07c:	d052      	beq.n	801c124 <HAL_GPIO_Init+0x268>
 801c07e:	687b      	ldr	r3, [r7, #4]
 801c080:	4a1f      	ldr	r2, [pc, #124]	@ (801c100 <HAL_GPIO_Init+0x244>)
 801c082:	4293      	cmp	r3, r2
 801c084:	d031      	beq.n	801c0ea <HAL_GPIO_Init+0x22e>
 801c086:	687b      	ldr	r3, [r7, #4]
 801c088:	4a1e      	ldr	r2, [pc, #120]	@ (801c104 <HAL_GPIO_Init+0x248>)
 801c08a:	4293      	cmp	r3, r2
 801c08c:	d02b      	beq.n	801c0e6 <HAL_GPIO_Init+0x22a>
 801c08e:	687b      	ldr	r3, [r7, #4]
 801c090:	4a1d      	ldr	r2, [pc, #116]	@ (801c108 <HAL_GPIO_Init+0x24c>)
 801c092:	4293      	cmp	r3, r2
 801c094:	d025      	beq.n	801c0e2 <HAL_GPIO_Init+0x226>
 801c096:	687b      	ldr	r3, [r7, #4]
 801c098:	4a1c      	ldr	r2, [pc, #112]	@ (801c10c <HAL_GPIO_Init+0x250>)
 801c09a:	4293      	cmp	r3, r2
 801c09c:	d01f      	beq.n	801c0de <HAL_GPIO_Init+0x222>
 801c09e:	687b      	ldr	r3, [r7, #4]
 801c0a0:	4a1b      	ldr	r2, [pc, #108]	@ (801c110 <HAL_GPIO_Init+0x254>)
 801c0a2:	4293      	cmp	r3, r2
 801c0a4:	d019      	beq.n	801c0da <HAL_GPIO_Init+0x21e>
 801c0a6:	687b      	ldr	r3, [r7, #4]
 801c0a8:	4a1a      	ldr	r2, [pc, #104]	@ (801c114 <HAL_GPIO_Init+0x258>)
 801c0aa:	4293      	cmp	r3, r2
 801c0ac:	d013      	beq.n	801c0d6 <HAL_GPIO_Init+0x21a>
 801c0ae:	687b      	ldr	r3, [r7, #4]
 801c0b0:	4a19      	ldr	r2, [pc, #100]	@ (801c118 <HAL_GPIO_Init+0x25c>)
 801c0b2:	4293      	cmp	r3, r2
 801c0b4:	d00d      	beq.n	801c0d2 <HAL_GPIO_Init+0x216>
 801c0b6:	687b      	ldr	r3, [r7, #4]
 801c0b8:	4a18      	ldr	r2, [pc, #96]	@ (801c11c <HAL_GPIO_Init+0x260>)
 801c0ba:	4293      	cmp	r3, r2
 801c0bc:	d007      	beq.n	801c0ce <HAL_GPIO_Init+0x212>
 801c0be:	687b      	ldr	r3, [r7, #4]
 801c0c0:	4a17      	ldr	r2, [pc, #92]	@ (801c120 <HAL_GPIO_Init+0x264>)
 801c0c2:	4293      	cmp	r3, r2
 801c0c4:	d101      	bne.n	801c0ca <HAL_GPIO_Init+0x20e>
 801c0c6:	2309      	movs	r3, #9
 801c0c8:	e02d      	b.n	801c126 <HAL_GPIO_Init+0x26a>
 801c0ca:	230a      	movs	r3, #10
 801c0cc:	e02b      	b.n	801c126 <HAL_GPIO_Init+0x26a>
 801c0ce:	2308      	movs	r3, #8
 801c0d0:	e029      	b.n	801c126 <HAL_GPIO_Init+0x26a>
 801c0d2:	2307      	movs	r3, #7
 801c0d4:	e027      	b.n	801c126 <HAL_GPIO_Init+0x26a>
 801c0d6:	2306      	movs	r3, #6
 801c0d8:	e025      	b.n	801c126 <HAL_GPIO_Init+0x26a>
 801c0da:	2305      	movs	r3, #5
 801c0dc:	e023      	b.n	801c126 <HAL_GPIO_Init+0x26a>
 801c0de:	2304      	movs	r3, #4
 801c0e0:	e021      	b.n	801c126 <HAL_GPIO_Init+0x26a>
 801c0e2:	2303      	movs	r3, #3
 801c0e4:	e01f      	b.n	801c126 <HAL_GPIO_Init+0x26a>
 801c0e6:	2302      	movs	r3, #2
 801c0e8:	e01d      	b.n	801c126 <HAL_GPIO_Init+0x26a>
 801c0ea:	2301      	movs	r3, #1
 801c0ec:	e01b      	b.n	801c126 <HAL_GPIO_Init+0x26a>
 801c0ee:	bf00      	nop
 801c0f0:	58000080 	.word	0x58000080
 801c0f4:	58024400 	.word	0x58024400
 801c0f8:	58000400 	.word	0x58000400
 801c0fc:	58020000 	.word	0x58020000
 801c100:	58020400 	.word	0x58020400
 801c104:	58020800 	.word	0x58020800
 801c108:	58020c00 	.word	0x58020c00
 801c10c:	58021000 	.word	0x58021000
 801c110:	58021400 	.word	0x58021400
 801c114:	58021800 	.word	0x58021800
 801c118:	58021c00 	.word	0x58021c00
 801c11c:	58022000 	.word	0x58022000
 801c120:	58022400 	.word	0x58022400
 801c124:	2300      	movs	r3, #0
 801c126:	69fa      	ldr	r2, [r7, #28]
 801c128:	f002 0203 	and.w	r2, r2, #3
 801c12c:	0092      	lsls	r2, r2, #2
 801c12e:	4093      	lsls	r3, r2
 801c130:	69ba      	ldr	r2, [r7, #24]
 801c132:	4313      	orrs	r3, r2
 801c134:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801c136:	4938      	ldr	r1, [pc, #224]	@ (801c218 <HAL_GPIO_Init+0x35c>)
 801c138:	69fb      	ldr	r3, [r7, #28]
 801c13a:	089b      	lsrs	r3, r3, #2
 801c13c:	3302      	adds	r3, #2
 801c13e:	69ba      	ldr	r2, [r7, #24]
 801c140:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801c144:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801c148:	681b      	ldr	r3, [r3, #0]
 801c14a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801c14c:	693b      	ldr	r3, [r7, #16]
 801c14e:	43db      	mvns	r3, r3
 801c150:	69ba      	ldr	r2, [r7, #24]
 801c152:	4013      	ands	r3, r2
 801c154:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801c156:	683b      	ldr	r3, [r7, #0]
 801c158:	685b      	ldr	r3, [r3, #4]
 801c15a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801c15e:	2b00      	cmp	r3, #0
 801c160:	d003      	beq.n	801c16a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 801c162:	69ba      	ldr	r2, [r7, #24]
 801c164:	693b      	ldr	r3, [r7, #16]
 801c166:	4313      	orrs	r3, r2
 801c168:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 801c16a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801c16e:	69bb      	ldr	r3, [r7, #24]
 801c170:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 801c172:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801c176:	685b      	ldr	r3, [r3, #4]
 801c178:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801c17a:	693b      	ldr	r3, [r7, #16]
 801c17c:	43db      	mvns	r3, r3
 801c17e:	69ba      	ldr	r2, [r7, #24]
 801c180:	4013      	ands	r3, r2
 801c182:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801c184:	683b      	ldr	r3, [r7, #0]
 801c186:	685b      	ldr	r3, [r3, #4]
 801c188:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801c18c:	2b00      	cmp	r3, #0
 801c18e:	d003      	beq.n	801c198 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 801c190:	69ba      	ldr	r2, [r7, #24]
 801c192:	693b      	ldr	r3, [r7, #16]
 801c194:	4313      	orrs	r3, r2
 801c196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 801c198:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801c19c:	69bb      	ldr	r3, [r7, #24]
 801c19e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 801c1a0:	697b      	ldr	r3, [r7, #20]
 801c1a2:	685b      	ldr	r3, [r3, #4]
 801c1a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801c1a6:	693b      	ldr	r3, [r7, #16]
 801c1a8:	43db      	mvns	r3, r3
 801c1aa:	69ba      	ldr	r2, [r7, #24]
 801c1ac:	4013      	ands	r3, r2
 801c1ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801c1b0:	683b      	ldr	r3, [r7, #0]
 801c1b2:	685b      	ldr	r3, [r3, #4]
 801c1b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801c1b8:	2b00      	cmp	r3, #0
 801c1ba:	d003      	beq.n	801c1c4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 801c1bc:	69ba      	ldr	r2, [r7, #24]
 801c1be:	693b      	ldr	r3, [r7, #16]
 801c1c0:	4313      	orrs	r3, r2
 801c1c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 801c1c4:	697b      	ldr	r3, [r7, #20]
 801c1c6:	69ba      	ldr	r2, [r7, #24]
 801c1c8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 801c1ca:	697b      	ldr	r3, [r7, #20]
 801c1cc:	681b      	ldr	r3, [r3, #0]
 801c1ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801c1d0:	693b      	ldr	r3, [r7, #16]
 801c1d2:	43db      	mvns	r3, r3
 801c1d4:	69ba      	ldr	r2, [r7, #24]
 801c1d6:	4013      	ands	r3, r2
 801c1d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801c1da:	683b      	ldr	r3, [r7, #0]
 801c1dc:	685b      	ldr	r3, [r3, #4]
 801c1de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801c1e2:	2b00      	cmp	r3, #0
 801c1e4:	d003      	beq.n	801c1ee <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 801c1e6:	69ba      	ldr	r2, [r7, #24]
 801c1e8:	693b      	ldr	r3, [r7, #16]
 801c1ea:	4313      	orrs	r3, r2
 801c1ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 801c1ee:	697b      	ldr	r3, [r7, #20]
 801c1f0:	69ba      	ldr	r2, [r7, #24]
 801c1f2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 801c1f4:	69fb      	ldr	r3, [r7, #28]
 801c1f6:	3301      	adds	r3, #1
 801c1f8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801c1fa:	683b      	ldr	r3, [r7, #0]
 801c1fc:	681a      	ldr	r2, [r3, #0]
 801c1fe:	69fb      	ldr	r3, [r7, #28]
 801c200:	fa22 f303 	lsr.w	r3, r2, r3
 801c204:	2b00      	cmp	r3, #0
 801c206:	f47f ae63 	bne.w	801bed0 <HAL_GPIO_Init+0x14>
  }
}
 801c20a:	bf00      	nop
 801c20c:	bf00      	nop
 801c20e:	3724      	adds	r7, #36	@ 0x24
 801c210:	46bd      	mov	sp, r7
 801c212:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c216:	4770      	bx	lr
 801c218:	58000400 	.word	0x58000400

0801c21c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 801c21c:	b480      	push	{r7}
 801c21e:	b085      	sub	sp, #20
 801c220:	af00      	add	r7, sp, #0
 801c222:	6078      	str	r0, [r7, #4]
 801c224:	460b      	mov	r3, r1
 801c226:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 801c228:	687b      	ldr	r3, [r7, #4]
 801c22a:	691a      	ldr	r2, [r3, #16]
 801c22c:	887b      	ldrh	r3, [r7, #2]
 801c22e:	4013      	ands	r3, r2
 801c230:	2b00      	cmp	r3, #0
 801c232:	d002      	beq.n	801c23a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 801c234:	2301      	movs	r3, #1
 801c236:	73fb      	strb	r3, [r7, #15]
 801c238:	e001      	b.n	801c23e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801c23a:	2300      	movs	r3, #0
 801c23c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801c23e:	7bfb      	ldrb	r3, [r7, #15]
}
 801c240:	4618      	mov	r0, r3
 801c242:	3714      	adds	r7, #20
 801c244:	46bd      	mov	sp, r7
 801c246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c24a:	4770      	bx	lr

0801c24c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801c24c:	b480      	push	{r7}
 801c24e:	b083      	sub	sp, #12
 801c250:	af00      	add	r7, sp, #0
 801c252:	6078      	str	r0, [r7, #4]
 801c254:	460b      	mov	r3, r1
 801c256:	807b      	strh	r3, [r7, #2]
 801c258:	4613      	mov	r3, r2
 801c25a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801c25c:	787b      	ldrb	r3, [r7, #1]
 801c25e:	2b00      	cmp	r3, #0
 801c260:	d003      	beq.n	801c26a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801c262:	887a      	ldrh	r2, [r7, #2]
 801c264:	687b      	ldr	r3, [r7, #4]
 801c266:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 801c268:	e003      	b.n	801c272 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 801c26a:	887b      	ldrh	r3, [r7, #2]
 801c26c:	041a      	lsls	r2, r3, #16
 801c26e:	687b      	ldr	r3, [r7, #4]
 801c270:	619a      	str	r2, [r3, #24]
}
 801c272:	bf00      	nop
 801c274:	370c      	adds	r7, #12
 801c276:	46bd      	mov	sp, r7
 801c278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c27c:	4770      	bx	lr
	...

0801c280 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 801c280:	b580      	push	{r7, lr}
 801c282:	b084      	sub	sp, #16
 801c284:	af00      	add	r7, sp, #0
 801c286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 801c288:	4b19      	ldr	r3, [pc, #100]	@ (801c2f0 <HAL_PWREx_ConfigSupply+0x70>)
 801c28a:	68db      	ldr	r3, [r3, #12]
 801c28c:	f003 0304 	and.w	r3, r3, #4
 801c290:	2b04      	cmp	r3, #4
 801c292:	d00a      	beq.n	801c2aa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 801c294:	4b16      	ldr	r3, [pc, #88]	@ (801c2f0 <HAL_PWREx_ConfigSupply+0x70>)
 801c296:	68db      	ldr	r3, [r3, #12]
 801c298:	f003 0307 	and.w	r3, r3, #7
 801c29c:	687a      	ldr	r2, [r7, #4]
 801c29e:	429a      	cmp	r2, r3
 801c2a0:	d001      	beq.n	801c2a6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 801c2a2:	2301      	movs	r3, #1
 801c2a4:	e01f      	b.n	801c2e6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 801c2a6:	2300      	movs	r3, #0
 801c2a8:	e01d      	b.n	801c2e6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 801c2aa:	4b11      	ldr	r3, [pc, #68]	@ (801c2f0 <HAL_PWREx_ConfigSupply+0x70>)
 801c2ac:	68db      	ldr	r3, [r3, #12]
 801c2ae:	f023 0207 	bic.w	r2, r3, #7
 801c2b2:	490f      	ldr	r1, [pc, #60]	@ (801c2f0 <HAL_PWREx_ConfigSupply+0x70>)
 801c2b4:	687b      	ldr	r3, [r7, #4]
 801c2b6:	4313      	orrs	r3, r2
 801c2b8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 801c2ba:	f7fd f8e1 	bl	8019480 <HAL_GetTick>
 801c2be:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801c2c0:	e009      	b.n	801c2d6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801c2c2:	f7fd f8dd 	bl	8019480 <HAL_GetTick>
 801c2c6:	4602      	mov	r2, r0
 801c2c8:	68fb      	ldr	r3, [r7, #12]
 801c2ca:	1ad3      	subs	r3, r2, r3
 801c2cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801c2d0:	d901      	bls.n	801c2d6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 801c2d2:	2301      	movs	r3, #1
 801c2d4:	e007      	b.n	801c2e6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801c2d6:	4b06      	ldr	r3, [pc, #24]	@ (801c2f0 <HAL_PWREx_ConfigSupply+0x70>)
 801c2d8:	685b      	ldr	r3, [r3, #4]
 801c2da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801c2de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801c2e2:	d1ee      	bne.n	801c2c2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 801c2e4:	2300      	movs	r3, #0
}
 801c2e6:	4618      	mov	r0, r3
 801c2e8:	3710      	adds	r7, #16
 801c2ea:	46bd      	mov	sp, r7
 801c2ec:	bd80      	pop	{r7, pc}
 801c2ee:	bf00      	nop
 801c2f0:	58024800 	.word	0x58024800

0801c2f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801c2f4:	b580      	push	{r7, lr}
 801c2f6:	b08c      	sub	sp, #48	@ 0x30
 801c2f8:	af00      	add	r7, sp, #0
 801c2fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801c2fc:	687b      	ldr	r3, [r7, #4]
 801c2fe:	2b00      	cmp	r3, #0
 801c300:	d102      	bne.n	801c308 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801c302:	2301      	movs	r3, #1
 801c304:	f000 bc48 	b.w	801cb98 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801c308:	687b      	ldr	r3, [r7, #4]
 801c30a:	681b      	ldr	r3, [r3, #0]
 801c30c:	f003 0301 	and.w	r3, r3, #1
 801c310:	2b00      	cmp	r3, #0
 801c312:	f000 8088 	beq.w	801c426 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801c316:	4b99      	ldr	r3, [pc, #612]	@ (801c57c <HAL_RCC_OscConfig+0x288>)
 801c318:	691b      	ldr	r3, [r3, #16]
 801c31a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801c31e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801c320:	4b96      	ldr	r3, [pc, #600]	@ (801c57c <HAL_RCC_OscConfig+0x288>)
 801c322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c324:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 801c326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c328:	2b10      	cmp	r3, #16
 801c32a:	d007      	beq.n	801c33c <HAL_RCC_OscConfig+0x48>
 801c32c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c32e:	2b18      	cmp	r3, #24
 801c330:	d111      	bne.n	801c356 <HAL_RCC_OscConfig+0x62>
 801c332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c334:	f003 0303 	and.w	r3, r3, #3
 801c338:	2b02      	cmp	r3, #2
 801c33a:	d10c      	bne.n	801c356 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801c33c:	4b8f      	ldr	r3, [pc, #572]	@ (801c57c <HAL_RCC_OscConfig+0x288>)
 801c33e:	681b      	ldr	r3, [r3, #0]
 801c340:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801c344:	2b00      	cmp	r3, #0
 801c346:	d06d      	beq.n	801c424 <HAL_RCC_OscConfig+0x130>
 801c348:	687b      	ldr	r3, [r7, #4]
 801c34a:	685b      	ldr	r3, [r3, #4]
 801c34c:	2b00      	cmp	r3, #0
 801c34e:	d169      	bne.n	801c424 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 801c350:	2301      	movs	r3, #1
 801c352:	f000 bc21 	b.w	801cb98 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801c356:	687b      	ldr	r3, [r7, #4]
 801c358:	685b      	ldr	r3, [r3, #4]
 801c35a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c35e:	d106      	bne.n	801c36e <HAL_RCC_OscConfig+0x7a>
 801c360:	4b86      	ldr	r3, [pc, #536]	@ (801c57c <HAL_RCC_OscConfig+0x288>)
 801c362:	681b      	ldr	r3, [r3, #0]
 801c364:	4a85      	ldr	r2, [pc, #532]	@ (801c57c <HAL_RCC_OscConfig+0x288>)
 801c366:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801c36a:	6013      	str	r3, [r2, #0]
 801c36c:	e02e      	b.n	801c3cc <HAL_RCC_OscConfig+0xd8>
 801c36e:	687b      	ldr	r3, [r7, #4]
 801c370:	685b      	ldr	r3, [r3, #4]
 801c372:	2b00      	cmp	r3, #0
 801c374:	d10c      	bne.n	801c390 <HAL_RCC_OscConfig+0x9c>
 801c376:	4b81      	ldr	r3, [pc, #516]	@ (801c57c <HAL_RCC_OscConfig+0x288>)
 801c378:	681b      	ldr	r3, [r3, #0]
 801c37a:	4a80      	ldr	r2, [pc, #512]	@ (801c57c <HAL_RCC_OscConfig+0x288>)
 801c37c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801c380:	6013      	str	r3, [r2, #0]
 801c382:	4b7e      	ldr	r3, [pc, #504]	@ (801c57c <HAL_RCC_OscConfig+0x288>)
 801c384:	681b      	ldr	r3, [r3, #0]
 801c386:	4a7d      	ldr	r2, [pc, #500]	@ (801c57c <HAL_RCC_OscConfig+0x288>)
 801c388:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801c38c:	6013      	str	r3, [r2, #0]
 801c38e:	e01d      	b.n	801c3cc <HAL_RCC_OscConfig+0xd8>
 801c390:	687b      	ldr	r3, [r7, #4]
 801c392:	685b      	ldr	r3, [r3, #4]
 801c394:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801c398:	d10c      	bne.n	801c3b4 <HAL_RCC_OscConfig+0xc0>
 801c39a:	4b78      	ldr	r3, [pc, #480]	@ (801c57c <HAL_RCC_OscConfig+0x288>)
 801c39c:	681b      	ldr	r3, [r3, #0]
 801c39e:	4a77      	ldr	r2, [pc, #476]	@ (801c57c <HAL_RCC_OscConfig+0x288>)
 801c3a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801c3a4:	6013      	str	r3, [r2, #0]
 801c3a6:	4b75      	ldr	r3, [pc, #468]	@ (801c57c <HAL_RCC_OscConfig+0x288>)
 801c3a8:	681b      	ldr	r3, [r3, #0]
 801c3aa:	4a74      	ldr	r2, [pc, #464]	@ (801c57c <HAL_RCC_OscConfig+0x288>)
 801c3ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801c3b0:	6013      	str	r3, [r2, #0]
 801c3b2:	e00b      	b.n	801c3cc <HAL_RCC_OscConfig+0xd8>
 801c3b4:	4b71      	ldr	r3, [pc, #452]	@ (801c57c <HAL_RCC_OscConfig+0x288>)
 801c3b6:	681b      	ldr	r3, [r3, #0]
 801c3b8:	4a70      	ldr	r2, [pc, #448]	@ (801c57c <HAL_RCC_OscConfig+0x288>)
 801c3ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801c3be:	6013      	str	r3, [r2, #0]
 801c3c0:	4b6e      	ldr	r3, [pc, #440]	@ (801c57c <HAL_RCC_OscConfig+0x288>)
 801c3c2:	681b      	ldr	r3, [r3, #0]
 801c3c4:	4a6d      	ldr	r2, [pc, #436]	@ (801c57c <HAL_RCC_OscConfig+0x288>)
 801c3c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801c3ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801c3cc:	687b      	ldr	r3, [r7, #4]
 801c3ce:	685b      	ldr	r3, [r3, #4]
 801c3d0:	2b00      	cmp	r3, #0
 801c3d2:	d013      	beq.n	801c3fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c3d4:	f7fd f854 	bl	8019480 <HAL_GetTick>
 801c3d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801c3da:	e008      	b.n	801c3ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801c3dc:	f7fd f850 	bl	8019480 <HAL_GetTick>
 801c3e0:	4602      	mov	r2, r0
 801c3e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c3e4:	1ad3      	subs	r3, r2, r3
 801c3e6:	2b64      	cmp	r3, #100	@ 0x64
 801c3e8:	d901      	bls.n	801c3ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801c3ea:	2303      	movs	r3, #3
 801c3ec:	e3d4      	b.n	801cb98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801c3ee:	4b63      	ldr	r3, [pc, #396]	@ (801c57c <HAL_RCC_OscConfig+0x288>)
 801c3f0:	681b      	ldr	r3, [r3, #0]
 801c3f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801c3f6:	2b00      	cmp	r3, #0
 801c3f8:	d0f0      	beq.n	801c3dc <HAL_RCC_OscConfig+0xe8>
 801c3fa:	e014      	b.n	801c426 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c3fc:	f7fd f840 	bl	8019480 <HAL_GetTick>
 801c400:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801c402:	e008      	b.n	801c416 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801c404:	f7fd f83c 	bl	8019480 <HAL_GetTick>
 801c408:	4602      	mov	r2, r0
 801c40a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c40c:	1ad3      	subs	r3, r2, r3
 801c40e:	2b64      	cmp	r3, #100	@ 0x64
 801c410:	d901      	bls.n	801c416 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 801c412:	2303      	movs	r3, #3
 801c414:	e3c0      	b.n	801cb98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801c416:	4b59      	ldr	r3, [pc, #356]	@ (801c57c <HAL_RCC_OscConfig+0x288>)
 801c418:	681b      	ldr	r3, [r3, #0]
 801c41a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801c41e:	2b00      	cmp	r3, #0
 801c420:	d1f0      	bne.n	801c404 <HAL_RCC_OscConfig+0x110>
 801c422:	e000      	b.n	801c426 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801c424:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801c426:	687b      	ldr	r3, [r7, #4]
 801c428:	681b      	ldr	r3, [r3, #0]
 801c42a:	f003 0302 	and.w	r3, r3, #2
 801c42e:	2b00      	cmp	r3, #0
 801c430:	f000 80ca 	beq.w	801c5c8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801c434:	4b51      	ldr	r3, [pc, #324]	@ (801c57c <HAL_RCC_OscConfig+0x288>)
 801c436:	691b      	ldr	r3, [r3, #16]
 801c438:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801c43c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801c43e:	4b4f      	ldr	r3, [pc, #316]	@ (801c57c <HAL_RCC_OscConfig+0x288>)
 801c440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c442:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 801c444:	6a3b      	ldr	r3, [r7, #32]
 801c446:	2b00      	cmp	r3, #0
 801c448:	d007      	beq.n	801c45a <HAL_RCC_OscConfig+0x166>
 801c44a:	6a3b      	ldr	r3, [r7, #32]
 801c44c:	2b18      	cmp	r3, #24
 801c44e:	d156      	bne.n	801c4fe <HAL_RCC_OscConfig+0x20a>
 801c450:	69fb      	ldr	r3, [r7, #28]
 801c452:	f003 0303 	and.w	r3, r3, #3
 801c456:	2b00      	cmp	r3, #0
 801c458:	d151      	bne.n	801c4fe <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801c45a:	4b48      	ldr	r3, [pc, #288]	@ (801c57c <HAL_RCC_OscConfig+0x288>)
 801c45c:	681b      	ldr	r3, [r3, #0]
 801c45e:	f003 0304 	and.w	r3, r3, #4
 801c462:	2b00      	cmp	r3, #0
 801c464:	d005      	beq.n	801c472 <HAL_RCC_OscConfig+0x17e>
 801c466:	687b      	ldr	r3, [r7, #4]
 801c468:	68db      	ldr	r3, [r3, #12]
 801c46a:	2b00      	cmp	r3, #0
 801c46c:	d101      	bne.n	801c472 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 801c46e:	2301      	movs	r3, #1
 801c470:	e392      	b.n	801cb98 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801c472:	4b42      	ldr	r3, [pc, #264]	@ (801c57c <HAL_RCC_OscConfig+0x288>)
 801c474:	681b      	ldr	r3, [r3, #0]
 801c476:	f023 0219 	bic.w	r2, r3, #25
 801c47a:	687b      	ldr	r3, [r7, #4]
 801c47c:	68db      	ldr	r3, [r3, #12]
 801c47e:	493f      	ldr	r1, [pc, #252]	@ (801c57c <HAL_RCC_OscConfig+0x288>)
 801c480:	4313      	orrs	r3, r2
 801c482:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c484:	f7fc fffc 	bl	8019480 <HAL_GetTick>
 801c488:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801c48a:	e008      	b.n	801c49e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801c48c:	f7fc fff8 	bl	8019480 <HAL_GetTick>
 801c490:	4602      	mov	r2, r0
 801c492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c494:	1ad3      	subs	r3, r2, r3
 801c496:	2b02      	cmp	r3, #2
 801c498:	d901      	bls.n	801c49e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 801c49a:	2303      	movs	r3, #3
 801c49c:	e37c      	b.n	801cb98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801c49e:	4b37      	ldr	r3, [pc, #220]	@ (801c57c <HAL_RCC_OscConfig+0x288>)
 801c4a0:	681b      	ldr	r3, [r3, #0]
 801c4a2:	f003 0304 	and.w	r3, r3, #4
 801c4a6:	2b00      	cmp	r3, #0
 801c4a8:	d0f0      	beq.n	801c48c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c4aa:	f7fd f819 	bl	80194e0 <HAL_GetREVID>
 801c4ae:	4603      	mov	r3, r0
 801c4b0:	f241 0203 	movw	r2, #4099	@ 0x1003
 801c4b4:	4293      	cmp	r3, r2
 801c4b6:	d817      	bhi.n	801c4e8 <HAL_RCC_OscConfig+0x1f4>
 801c4b8:	687b      	ldr	r3, [r7, #4]
 801c4ba:	691b      	ldr	r3, [r3, #16]
 801c4bc:	2b40      	cmp	r3, #64	@ 0x40
 801c4be:	d108      	bne.n	801c4d2 <HAL_RCC_OscConfig+0x1de>
 801c4c0:	4b2e      	ldr	r3, [pc, #184]	@ (801c57c <HAL_RCC_OscConfig+0x288>)
 801c4c2:	685b      	ldr	r3, [r3, #4]
 801c4c4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801c4c8:	4a2c      	ldr	r2, [pc, #176]	@ (801c57c <HAL_RCC_OscConfig+0x288>)
 801c4ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801c4ce:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801c4d0:	e07a      	b.n	801c5c8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c4d2:	4b2a      	ldr	r3, [pc, #168]	@ (801c57c <HAL_RCC_OscConfig+0x288>)
 801c4d4:	685b      	ldr	r3, [r3, #4]
 801c4d6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801c4da:	687b      	ldr	r3, [r7, #4]
 801c4dc:	691b      	ldr	r3, [r3, #16]
 801c4de:	031b      	lsls	r3, r3, #12
 801c4e0:	4926      	ldr	r1, [pc, #152]	@ (801c57c <HAL_RCC_OscConfig+0x288>)
 801c4e2:	4313      	orrs	r3, r2
 801c4e4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801c4e6:	e06f      	b.n	801c5c8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c4e8:	4b24      	ldr	r3, [pc, #144]	@ (801c57c <HAL_RCC_OscConfig+0x288>)
 801c4ea:	685b      	ldr	r3, [r3, #4]
 801c4ec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801c4f0:	687b      	ldr	r3, [r7, #4]
 801c4f2:	691b      	ldr	r3, [r3, #16]
 801c4f4:	061b      	lsls	r3, r3, #24
 801c4f6:	4921      	ldr	r1, [pc, #132]	@ (801c57c <HAL_RCC_OscConfig+0x288>)
 801c4f8:	4313      	orrs	r3, r2
 801c4fa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801c4fc:	e064      	b.n	801c5c8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801c4fe:	687b      	ldr	r3, [r7, #4]
 801c500:	68db      	ldr	r3, [r3, #12]
 801c502:	2b00      	cmp	r3, #0
 801c504:	d047      	beq.n	801c596 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801c506:	4b1d      	ldr	r3, [pc, #116]	@ (801c57c <HAL_RCC_OscConfig+0x288>)
 801c508:	681b      	ldr	r3, [r3, #0]
 801c50a:	f023 0219 	bic.w	r2, r3, #25
 801c50e:	687b      	ldr	r3, [r7, #4]
 801c510:	68db      	ldr	r3, [r3, #12]
 801c512:	491a      	ldr	r1, [pc, #104]	@ (801c57c <HAL_RCC_OscConfig+0x288>)
 801c514:	4313      	orrs	r3, r2
 801c516:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c518:	f7fc ffb2 	bl	8019480 <HAL_GetTick>
 801c51c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801c51e:	e008      	b.n	801c532 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801c520:	f7fc ffae 	bl	8019480 <HAL_GetTick>
 801c524:	4602      	mov	r2, r0
 801c526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c528:	1ad3      	subs	r3, r2, r3
 801c52a:	2b02      	cmp	r3, #2
 801c52c:	d901      	bls.n	801c532 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 801c52e:	2303      	movs	r3, #3
 801c530:	e332      	b.n	801cb98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801c532:	4b12      	ldr	r3, [pc, #72]	@ (801c57c <HAL_RCC_OscConfig+0x288>)
 801c534:	681b      	ldr	r3, [r3, #0]
 801c536:	f003 0304 	and.w	r3, r3, #4
 801c53a:	2b00      	cmp	r3, #0
 801c53c:	d0f0      	beq.n	801c520 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c53e:	f7fc ffcf 	bl	80194e0 <HAL_GetREVID>
 801c542:	4603      	mov	r3, r0
 801c544:	f241 0203 	movw	r2, #4099	@ 0x1003
 801c548:	4293      	cmp	r3, r2
 801c54a:	d819      	bhi.n	801c580 <HAL_RCC_OscConfig+0x28c>
 801c54c:	687b      	ldr	r3, [r7, #4]
 801c54e:	691b      	ldr	r3, [r3, #16]
 801c550:	2b40      	cmp	r3, #64	@ 0x40
 801c552:	d108      	bne.n	801c566 <HAL_RCC_OscConfig+0x272>
 801c554:	4b09      	ldr	r3, [pc, #36]	@ (801c57c <HAL_RCC_OscConfig+0x288>)
 801c556:	685b      	ldr	r3, [r3, #4]
 801c558:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801c55c:	4a07      	ldr	r2, [pc, #28]	@ (801c57c <HAL_RCC_OscConfig+0x288>)
 801c55e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801c562:	6053      	str	r3, [r2, #4]
 801c564:	e030      	b.n	801c5c8 <HAL_RCC_OscConfig+0x2d4>
 801c566:	4b05      	ldr	r3, [pc, #20]	@ (801c57c <HAL_RCC_OscConfig+0x288>)
 801c568:	685b      	ldr	r3, [r3, #4]
 801c56a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801c56e:	687b      	ldr	r3, [r7, #4]
 801c570:	691b      	ldr	r3, [r3, #16]
 801c572:	031b      	lsls	r3, r3, #12
 801c574:	4901      	ldr	r1, [pc, #4]	@ (801c57c <HAL_RCC_OscConfig+0x288>)
 801c576:	4313      	orrs	r3, r2
 801c578:	604b      	str	r3, [r1, #4]
 801c57a:	e025      	b.n	801c5c8 <HAL_RCC_OscConfig+0x2d4>
 801c57c:	58024400 	.word	0x58024400
 801c580:	4b9a      	ldr	r3, [pc, #616]	@ (801c7ec <HAL_RCC_OscConfig+0x4f8>)
 801c582:	685b      	ldr	r3, [r3, #4]
 801c584:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801c588:	687b      	ldr	r3, [r7, #4]
 801c58a:	691b      	ldr	r3, [r3, #16]
 801c58c:	061b      	lsls	r3, r3, #24
 801c58e:	4997      	ldr	r1, [pc, #604]	@ (801c7ec <HAL_RCC_OscConfig+0x4f8>)
 801c590:	4313      	orrs	r3, r2
 801c592:	604b      	str	r3, [r1, #4]
 801c594:	e018      	b.n	801c5c8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801c596:	4b95      	ldr	r3, [pc, #596]	@ (801c7ec <HAL_RCC_OscConfig+0x4f8>)
 801c598:	681b      	ldr	r3, [r3, #0]
 801c59a:	4a94      	ldr	r2, [pc, #592]	@ (801c7ec <HAL_RCC_OscConfig+0x4f8>)
 801c59c:	f023 0301 	bic.w	r3, r3, #1
 801c5a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c5a2:	f7fc ff6d 	bl	8019480 <HAL_GetTick>
 801c5a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801c5a8:	e008      	b.n	801c5bc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801c5aa:	f7fc ff69 	bl	8019480 <HAL_GetTick>
 801c5ae:	4602      	mov	r2, r0
 801c5b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c5b2:	1ad3      	subs	r3, r2, r3
 801c5b4:	2b02      	cmp	r3, #2
 801c5b6:	d901      	bls.n	801c5bc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 801c5b8:	2303      	movs	r3, #3
 801c5ba:	e2ed      	b.n	801cb98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801c5bc:	4b8b      	ldr	r3, [pc, #556]	@ (801c7ec <HAL_RCC_OscConfig+0x4f8>)
 801c5be:	681b      	ldr	r3, [r3, #0]
 801c5c0:	f003 0304 	and.w	r3, r3, #4
 801c5c4:	2b00      	cmp	r3, #0
 801c5c6:	d1f0      	bne.n	801c5aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 801c5c8:	687b      	ldr	r3, [r7, #4]
 801c5ca:	681b      	ldr	r3, [r3, #0]
 801c5cc:	f003 0310 	and.w	r3, r3, #16
 801c5d0:	2b00      	cmp	r3, #0
 801c5d2:	f000 80a9 	beq.w	801c728 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801c5d6:	4b85      	ldr	r3, [pc, #532]	@ (801c7ec <HAL_RCC_OscConfig+0x4f8>)
 801c5d8:	691b      	ldr	r3, [r3, #16]
 801c5da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801c5de:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801c5e0:	4b82      	ldr	r3, [pc, #520]	@ (801c7ec <HAL_RCC_OscConfig+0x4f8>)
 801c5e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c5e4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801c5e6:	69bb      	ldr	r3, [r7, #24]
 801c5e8:	2b08      	cmp	r3, #8
 801c5ea:	d007      	beq.n	801c5fc <HAL_RCC_OscConfig+0x308>
 801c5ec:	69bb      	ldr	r3, [r7, #24]
 801c5ee:	2b18      	cmp	r3, #24
 801c5f0:	d13a      	bne.n	801c668 <HAL_RCC_OscConfig+0x374>
 801c5f2:	697b      	ldr	r3, [r7, #20]
 801c5f4:	f003 0303 	and.w	r3, r3, #3
 801c5f8:	2b01      	cmp	r3, #1
 801c5fa:	d135      	bne.n	801c668 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801c5fc:	4b7b      	ldr	r3, [pc, #492]	@ (801c7ec <HAL_RCC_OscConfig+0x4f8>)
 801c5fe:	681b      	ldr	r3, [r3, #0]
 801c600:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c604:	2b00      	cmp	r3, #0
 801c606:	d005      	beq.n	801c614 <HAL_RCC_OscConfig+0x320>
 801c608:	687b      	ldr	r3, [r7, #4]
 801c60a:	69db      	ldr	r3, [r3, #28]
 801c60c:	2b80      	cmp	r3, #128	@ 0x80
 801c60e:	d001      	beq.n	801c614 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 801c610:	2301      	movs	r3, #1
 801c612:	e2c1      	b.n	801cb98 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801c614:	f7fc ff64 	bl	80194e0 <HAL_GetREVID>
 801c618:	4603      	mov	r3, r0
 801c61a:	f241 0203 	movw	r2, #4099	@ 0x1003
 801c61e:	4293      	cmp	r3, r2
 801c620:	d817      	bhi.n	801c652 <HAL_RCC_OscConfig+0x35e>
 801c622:	687b      	ldr	r3, [r7, #4]
 801c624:	6a1b      	ldr	r3, [r3, #32]
 801c626:	2b20      	cmp	r3, #32
 801c628:	d108      	bne.n	801c63c <HAL_RCC_OscConfig+0x348>
 801c62a:	4b70      	ldr	r3, [pc, #448]	@ (801c7ec <HAL_RCC_OscConfig+0x4f8>)
 801c62c:	685b      	ldr	r3, [r3, #4]
 801c62e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801c632:	4a6e      	ldr	r2, [pc, #440]	@ (801c7ec <HAL_RCC_OscConfig+0x4f8>)
 801c634:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801c638:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801c63a:	e075      	b.n	801c728 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801c63c:	4b6b      	ldr	r3, [pc, #428]	@ (801c7ec <HAL_RCC_OscConfig+0x4f8>)
 801c63e:	685b      	ldr	r3, [r3, #4]
 801c640:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 801c644:	687b      	ldr	r3, [r7, #4]
 801c646:	6a1b      	ldr	r3, [r3, #32]
 801c648:	069b      	lsls	r3, r3, #26
 801c64a:	4968      	ldr	r1, [pc, #416]	@ (801c7ec <HAL_RCC_OscConfig+0x4f8>)
 801c64c:	4313      	orrs	r3, r2
 801c64e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801c650:	e06a      	b.n	801c728 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801c652:	4b66      	ldr	r3, [pc, #408]	@ (801c7ec <HAL_RCC_OscConfig+0x4f8>)
 801c654:	68db      	ldr	r3, [r3, #12]
 801c656:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801c65a:	687b      	ldr	r3, [r7, #4]
 801c65c:	6a1b      	ldr	r3, [r3, #32]
 801c65e:	061b      	lsls	r3, r3, #24
 801c660:	4962      	ldr	r1, [pc, #392]	@ (801c7ec <HAL_RCC_OscConfig+0x4f8>)
 801c662:	4313      	orrs	r3, r2
 801c664:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801c666:	e05f      	b.n	801c728 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 801c668:	687b      	ldr	r3, [r7, #4]
 801c66a:	69db      	ldr	r3, [r3, #28]
 801c66c:	2b00      	cmp	r3, #0
 801c66e:	d042      	beq.n	801c6f6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 801c670:	4b5e      	ldr	r3, [pc, #376]	@ (801c7ec <HAL_RCC_OscConfig+0x4f8>)
 801c672:	681b      	ldr	r3, [r3, #0]
 801c674:	4a5d      	ldr	r2, [pc, #372]	@ (801c7ec <HAL_RCC_OscConfig+0x4f8>)
 801c676:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c67a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c67c:	f7fc ff00 	bl	8019480 <HAL_GetTick>
 801c680:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801c682:	e008      	b.n	801c696 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801c684:	f7fc fefc 	bl	8019480 <HAL_GetTick>
 801c688:	4602      	mov	r2, r0
 801c68a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c68c:	1ad3      	subs	r3, r2, r3
 801c68e:	2b02      	cmp	r3, #2
 801c690:	d901      	bls.n	801c696 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 801c692:	2303      	movs	r3, #3
 801c694:	e280      	b.n	801cb98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801c696:	4b55      	ldr	r3, [pc, #340]	@ (801c7ec <HAL_RCC_OscConfig+0x4f8>)
 801c698:	681b      	ldr	r3, [r3, #0]
 801c69a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c69e:	2b00      	cmp	r3, #0
 801c6a0:	d0f0      	beq.n	801c684 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801c6a2:	f7fc ff1d 	bl	80194e0 <HAL_GetREVID>
 801c6a6:	4603      	mov	r3, r0
 801c6a8:	f241 0203 	movw	r2, #4099	@ 0x1003
 801c6ac:	4293      	cmp	r3, r2
 801c6ae:	d817      	bhi.n	801c6e0 <HAL_RCC_OscConfig+0x3ec>
 801c6b0:	687b      	ldr	r3, [r7, #4]
 801c6b2:	6a1b      	ldr	r3, [r3, #32]
 801c6b4:	2b20      	cmp	r3, #32
 801c6b6:	d108      	bne.n	801c6ca <HAL_RCC_OscConfig+0x3d6>
 801c6b8:	4b4c      	ldr	r3, [pc, #304]	@ (801c7ec <HAL_RCC_OscConfig+0x4f8>)
 801c6ba:	685b      	ldr	r3, [r3, #4]
 801c6bc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801c6c0:	4a4a      	ldr	r2, [pc, #296]	@ (801c7ec <HAL_RCC_OscConfig+0x4f8>)
 801c6c2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801c6c6:	6053      	str	r3, [r2, #4]
 801c6c8:	e02e      	b.n	801c728 <HAL_RCC_OscConfig+0x434>
 801c6ca:	4b48      	ldr	r3, [pc, #288]	@ (801c7ec <HAL_RCC_OscConfig+0x4f8>)
 801c6cc:	685b      	ldr	r3, [r3, #4]
 801c6ce:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 801c6d2:	687b      	ldr	r3, [r7, #4]
 801c6d4:	6a1b      	ldr	r3, [r3, #32]
 801c6d6:	069b      	lsls	r3, r3, #26
 801c6d8:	4944      	ldr	r1, [pc, #272]	@ (801c7ec <HAL_RCC_OscConfig+0x4f8>)
 801c6da:	4313      	orrs	r3, r2
 801c6dc:	604b      	str	r3, [r1, #4]
 801c6de:	e023      	b.n	801c728 <HAL_RCC_OscConfig+0x434>
 801c6e0:	4b42      	ldr	r3, [pc, #264]	@ (801c7ec <HAL_RCC_OscConfig+0x4f8>)
 801c6e2:	68db      	ldr	r3, [r3, #12]
 801c6e4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801c6e8:	687b      	ldr	r3, [r7, #4]
 801c6ea:	6a1b      	ldr	r3, [r3, #32]
 801c6ec:	061b      	lsls	r3, r3, #24
 801c6ee:	493f      	ldr	r1, [pc, #252]	@ (801c7ec <HAL_RCC_OscConfig+0x4f8>)
 801c6f0:	4313      	orrs	r3, r2
 801c6f2:	60cb      	str	r3, [r1, #12]
 801c6f4:	e018      	b.n	801c728 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 801c6f6:	4b3d      	ldr	r3, [pc, #244]	@ (801c7ec <HAL_RCC_OscConfig+0x4f8>)
 801c6f8:	681b      	ldr	r3, [r3, #0]
 801c6fa:	4a3c      	ldr	r2, [pc, #240]	@ (801c7ec <HAL_RCC_OscConfig+0x4f8>)
 801c6fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801c700:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c702:	f7fc febd 	bl	8019480 <HAL_GetTick>
 801c706:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801c708:	e008      	b.n	801c71c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801c70a:	f7fc feb9 	bl	8019480 <HAL_GetTick>
 801c70e:	4602      	mov	r2, r0
 801c710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c712:	1ad3      	subs	r3, r2, r3
 801c714:	2b02      	cmp	r3, #2
 801c716:	d901      	bls.n	801c71c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 801c718:	2303      	movs	r3, #3
 801c71a:	e23d      	b.n	801cb98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801c71c:	4b33      	ldr	r3, [pc, #204]	@ (801c7ec <HAL_RCC_OscConfig+0x4f8>)
 801c71e:	681b      	ldr	r3, [r3, #0]
 801c720:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c724:	2b00      	cmp	r3, #0
 801c726:	d1f0      	bne.n	801c70a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801c728:	687b      	ldr	r3, [r7, #4]
 801c72a:	681b      	ldr	r3, [r3, #0]
 801c72c:	f003 0308 	and.w	r3, r3, #8
 801c730:	2b00      	cmp	r3, #0
 801c732:	d036      	beq.n	801c7a2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801c734:	687b      	ldr	r3, [r7, #4]
 801c736:	695b      	ldr	r3, [r3, #20]
 801c738:	2b00      	cmp	r3, #0
 801c73a:	d019      	beq.n	801c770 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801c73c:	4b2b      	ldr	r3, [pc, #172]	@ (801c7ec <HAL_RCC_OscConfig+0x4f8>)
 801c73e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c740:	4a2a      	ldr	r2, [pc, #168]	@ (801c7ec <HAL_RCC_OscConfig+0x4f8>)
 801c742:	f043 0301 	orr.w	r3, r3, #1
 801c746:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c748:	f7fc fe9a 	bl	8019480 <HAL_GetTick>
 801c74c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801c74e:	e008      	b.n	801c762 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801c750:	f7fc fe96 	bl	8019480 <HAL_GetTick>
 801c754:	4602      	mov	r2, r0
 801c756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c758:	1ad3      	subs	r3, r2, r3
 801c75a:	2b02      	cmp	r3, #2
 801c75c:	d901      	bls.n	801c762 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 801c75e:	2303      	movs	r3, #3
 801c760:	e21a      	b.n	801cb98 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801c762:	4b22      	ldr	r3, [pc, #136]	@ (801c7ec <HAL_RCC_OscConfig+0x4f8>)
 801c764:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c766:	f003 0302 	and.w	r3, r3, #2
 801c76a:	2b00      	cmp	r3, #0
 801c76c:	d0f0      	beq.n	801c750 <HAL_RCC_OscConfig+0x45c>
 801c76e:	e018      	b.n	801c7a2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801c770:	4b1e      	ldr	r3, [pc, #120]	@ (801c7ec <HAL_RCC_OscConfig+0x4f8>)
 801c772:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c774:	4a1d      	ldr	r2, [pc, #116]	@ (801c7ec <HAL_RCC_OscConfig+0x4f8>)
 801c776:	f023 0301 	bic.w	r3, r3, #1
 801c77a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c77c:	f7fc fe80 	bl	8019480 <HAL_GetTick>
 801c780:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801c782:	e008      	b.n	801c796 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801c784:	f7fc fe7c 	bl	8019480 <HAL_GetTick>
 801c788:	4602      	mov	r2, r0
 801c78a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c78c:	1ad3      	subs	r3, r2, r3
 801c78e:	2b02      	cmp	r3, #2
 801c790:	d901      	bls.n	801c796 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 801c792:	2303      	movs	r3, #3
 801c794:	e200      	b.n	801cb98 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801c796:	4b15      	ldr	r3, [pc, #84]	@ (801c7ec <HAL_RCC_OscConfig+0x4f8>)
 801c798:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c79a:	f003 0302 	and.w	r3, r3, #2
 801c79e:	2b00      	cmp	r3, #0
 801c7a0:	d1f0      	bne.n	801c784 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801c7a2:	687b      	ldr	r3, [r7, #4]
 801c7a4:	681b      	ldr	r3, [r3, #0]
 801c7a6:	f003 0320 	and.w	r3, r3, #32
 801c7aa:	2b00      	cmp	r3, #0
 801c7ac:	d039      	beq.n	801c822 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 801c7ae:	687b      	ldr	r3, [r7, #4]
 801c7b0:	699b      	ldr	r3, [r3, #24]
 801c7b2:	2b00      	cmp	r3, #0
 801c7b4:	d01c      	beq.n	801c7f0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801c7b6:	4b0d      	ldr	r3, [pc, #52]	@ (801c7ec <HAL_RCC_OscConfig+0x4f8>)
 801c7b8:	681b      	ldr	r3, [r3, #0]
 801c7ba:	4a0c      	ldr	r2, [pc, #48]	@ (801c7ec <HAL_RCC_OscConfig+0x4f8>)
 801c7bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 801c7c0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801c7c2:	f7fc fe5d 	bl	8019480 <HAL_GetTick>
 801c7c6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801c7c8:	e008      	b.n	801c7dc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801c7ca:	f7fc fe59 	bl	8019480 <HAL_GetTick>
 801c7ce:	4602      	mov	r2, r0
 801c7d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c7d2:	1ad3      	subs	r3, r2, r3
 801c7d4:	2b02      	cmp	r3, #2
 801c7d6:	d901      	bls.n	801c7dc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 801c7d8:	2303      	movs	r3, #3
 801c7da:	e1dd      	b.n	801cb98 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801c7dc:	4b03      	ldr	r3, [pc, #12]	@ (801c7ec <HAL_RCC_OscConfig+0x4f8>)
 801c7de:	681b      	ldr	r3, [r3, #0]
 801c7e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801c7e4:	2b00      	cmp	r3, #0
 801c7e6:	d0f0      	beq.n	801c7ca <HAL_RCC_OscConfig+0x4d6>
 801c7e8:	e01b      	b.n	801c822 <HAL_RCC_OscConfig+0x52e>
 801c7ea:	bf00      	nop
 801c7ec:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801c7f0:	4b9b      	ldr	r3, [pc, #620]	@ (801ca60 <HAL_RCC_OscConfig+0x76c>)
 801c7f2:	681b      	ldr	r3, [r3, #0]
 801c7f4:	4a9a      	ldr	r2, [pc, #616]	@ (801ca60 <HAL_RCC_OscConfig+0x76c>)
 801c7f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801c7fa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801c7fc:	f7fc fe40 	bl	8019480 <HAL_GetTick>
 801c800:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801c802:	e008      	b.n	801c816 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801c804:	f7fc fe3c 	bl	8019480 <HAL_GetTick>
 801c808:	4602      	mov	r2, r0
 801c80a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c80c:	1ad3      	subs	r3, r2, r3
 801c80e:	2b02      	cmp	r3, #2
 801c810:	d901      	bls.n	801c816 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 801c812:	2303      	movs	r3, #3
 801c814:	e1c0      	b.n	801cb98 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801c816:	4b92      	ldr	r3, [pc, #584]	@ (801ca60 <HAL_RCC_OscConfig+0x76c>)
 801c818:	681b      	ldr	r3, [r3, #0]
 801c81a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801c81e:	2b00      	cmp	r3, #0
 801c820:	d1f0      	bne.n	801c804 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801c822:	687b      	ldr	r3, [r7, #4]
 801c824:	681b      	ldr	r3, [r3, #0]
 801c826:	f003 0304 	and.w	r3, r3, #4
 801c82a:	2b00      	cmp	r3, #0
 801c82c:	f000 8081 	beq.w	801c932 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 801c830:	4b8c      	ldr	r3, [pc, #560]	@ (801ca64 <HAL_RCC_OscConfig+0x770>)
 801c832:	681b      	ldr	r3, [r3, #0]
 801c834:	4a8b      	ldr	r2, [pc, #556]	@ (801ca64 <HAL_RCC_OscConfig+0x770>)
 801c836:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801c83a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801c83c:	f7fc fe20 	bl	8019480 <HAL_GetTick>
 801c840:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801c842:	e008      	b.n	801c856 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801c844:	f7fc fe1c 	bl	8019480 <HAL_GetTick>
 801c848:	4602      	mov	r2, r0
 801c84a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c84c:	1ad3      	subs	r3, r2, r3
 801c84e:	2b64      	cmp	r3, #100	@ 0x64
 801c850:	d901      	bls.n	801c856 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 801c852:	2303      	movs	r3, #3
 801c854:	e1a0      	b.n	801cb98 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801c856:	4b83      	ldr	r3, [pc, #524]	@ (801ca64 <HAL_RCC_OscConfig+0x770>)
 801c858:	681b      	ldr	r3, [r3, #0]
 801c85a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c85e:	2b00      	cmp	r3, #0
 801c860:	d0f0      	beq.n	801c844 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801c862:	687b      	ldr	r3, [r7, #4]
 801c864:	689b      	ldr	r3, [r3, #8]
 801c866:	2b01      	cmp	r3, #1
 801c868:	d106      	bne.n	801c878 <HAL_RCC_OscConfig+0x584>
 801c86a:	4b7d      	ldr	r3, [pc, #500]	@ (801ca60 <HAL_RCC_OscConfig+0x76c>)
 801c86c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c86e:	4a7c      	ldr	r2, [pc, #496]	@ (801ca60 <HAL_RCC_OscConfig+0x76c>)
 801c870:	f043 0301 	orr.w	r3, r3, #1
 801c874:	6713      	str	r3, [r2, #112]	@ 0x70
 801c876:	e02d      	b.n	801c8d4 <HAL_RCC_OscConfig+0x5e0>
 801c878:	687b      	ldr	r3, [r7, #4]
 801c87a:	689b      	ldr	r3, [r3, #8]
 801c87c:	2b00      	cmp	r3, #0
 801c87e:	d10c      	bne.n	801c89a <HAL_RCC_OscConfig+0x5a6>
 801c880:	4b77      	ldr	r3, [pc, #476]	@ (801ca60 <HAL_RCC_OscConfig+0x76c>)
 801c882:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c884:	4a76      	ldr	r2, [pc, #472]	@ (801ca60 <HAL_RCC_OscConfig+0x76c>)
 801c886:	f023 0301 	bic.w	r3, r3, #1
 801c88a:	6713      	str	r3, [r2, #112]	@ 0x70
 801c88c:	4b74      	ldr	r3, [pc, #464]	@ (801ca60 <HAL_RCC_OscConfig+0x76c>)
 801c88e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c890:	4a73      	ldr	r2, [pc, #460]	@ (801ca60 <HAL_RCC_OscConfig+0x76c>)
 801c892:	f023 0304 	bic.w	r3, r3, #4
 801c896:	6713      	str	r3, [r2, #112]	@ 0x70
 801c898:	e01c      	b.n	801c8d4 <HAL_RCC_OscConfig+0x5e0>
 801c89a:	687b      	ldr	r3, [r7, #4]
 801c89c:	689b      	ldr	r3, [r3, #8]
 801c89e:	2b05      	cmp	r3, #5
 801c8a0:	d10c      	bne.n	801c8bc <HAL_RCC_OscConfig+0x5c8>
 801c8a2:	4b6f      	ldr	r3, [pc, #444]	@ (801ca60 <HAL_RCC_OscConfig+0x76c>)
 801c8a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c8a6:	4a6e      	ldr	r2, [pc, #440]	@ (801ca60 <HAL_RCC_OscConfig+0x76c>)
 801c8a8:	f043 0304 	orr.w	r3, r3, #4
 801c8ac:	6713      	str	r3, [r2, #112]	@ 0x70
 801c8ae:	4b6c      	ldr	r3, [pc, #432]	@ (801ca60 <HAL_RCC_OscConfig+0x76c>)
 801c8b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c8b2:	4a6b      	ldr	r2, [pc, #428]	@ (801ca60 <HAL_RCC_OscConfig+0x76c>)
 801c8b4:	f043 0301 	orr.w	r3, r3, #1
 801c8b8:	6713      	str	r3, [r2, #112]	@ 0x70
 801c8ba:	e00b      	b.n	801c8d4 <HAL_RCC_OscConfig+0x5e0>
 801c8bc:	4b68      	ldr	r3, [pc, #416]	@ (801ca60 <HAL_RCC_OscConfig+0x76c>)
 801c8be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c8c0:	4a67      	ldr	r2, [pc, #412]	@ (801ca60 <HAL_RCC_OscConfig+0x76c>)
 801c8c2:	f023 0301 	bic.w	r3, r3, #1
 801c8c6:	6713      	str	r3, [r2, #112]	@ 0x70
 801c8c8:	4b65      	ldr	r3, [pc, #404]	@ (801ca60 <HAL_RCC_OscConfig+0x76c>)
 801c8ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c8cc:	4a64      	ldr	r2, [pc, #400]	@ (801ca60 <HAL_RCC_OscConfig+0x76c>)
 801c8ce:	f023 0304 	bic.w	r3, r3, #4
 801c8d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801c8d4:	687b      	ldr	r3, [r7, #4]
 801c8d6:	689b      	ldr	r3, [r3, #8]
 801c8d8:	2b00      	cmp	r3, #0
 801c8da:	d015      	beq.n	801c908 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c8dc:	f7fc fdd0 	bl	8019480 <HAL_GetTick>
 801c8e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801c8e2:	e00a      	b.n	801c8fa <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c8e4:	f7fc fdcc 	bl	8019480 <HAL_GetTick>
 801c8e8:	4602      	mov	r2, r0
 801c8ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c8ec:	1ad3      	subs	r3, r2, r3
 801c8ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 801c8f2:	4293      	cmp	r3, r2
 801c8f4:	d901      	bls.n	801c8fa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 801c8f6:	2303      	movs	r3, #3
 801c8f8:	e14e      	b.n	801cb98 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801c8fa:	4b59      	ldr	r3, [pc, #356]	@ (801ca60 <HAL_RCC_OscConfig+0x76c>)
 801c8fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c8fe:	f003 0302 	and.w	r3, r3, #2
 801c902:	2b00      	cmp	r3, #0
 801c904:	d0ee      	beq.n	801c8e4 <HAL_RCC_OscConfig+0x5f0>
 801c906:	e014      	b.n	801c932 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c908:	f7fc fdba 	bl	8019480 <HAL_GetTick>
 801c90c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801c90e:	e00a      	b.n	801c926 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c910:	f7fc fdb6 	bl	8019480 <HAL_GetTick>
 801c914:	4602      	mov	r2, r0
 801c916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c918:	1ad3      	subs	r3, r2, r3
 801c91a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801c91e:	4293      	cmp	r3, r2
 801c920:	d901      	bls.n	801c926 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 801c922:	2303      	movs	r3, #3
 801c924:	e138      	b.n	801cb98 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801c926:	4b4e      	ldr	r3, [pc, #312]	@ (801ca60 <HAL_RCC_OscConfig+0x76c>)
 801c928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c92a:	f003 0302 	and.w	r3, r3, #2
 801c92e:	2b00      	cmp	r3, #0
 801c930:	d1ee      	bne.n	801c910 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801c932:	687b      	ldr	r3, [r7, #4]
 801c934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c936:	2b00      	cmp	r3, #0
 801c938:	f000 812d 	beq.w	801cb96 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 801c93c:	4b48      	ldr	r3, [pc, #288]	@ (801ca60 <HAL_RCC_OscConfig+0x76c>)
 801c93e:	691b      	ldr	r3, [r3, #16]
 801c940:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801c944:	2b18      	cmp	r3, #24
 801c946:	f000 80bd 	beq.w	801cac4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801c94a:	687b      	ldr	r3, [r7, #4]
 801c94c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c94e:	2b02      	cmp	r3, #2
 801c950:	f040 809e 	bne.w	801ca90 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801c954:	4b42      	ldr	r3, [pc, #264]	@ (801ca60 <HAL_RCC_OscConfig+0x76c>)
 801c956:	681b      	ldr	r3, [r3, #0]
 801c958:	4a41      	ldr	r2, [pc, #260]	@ (801ca60 <HAL_RCC_OscConfig+0x76c>)
 801c95a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801c95e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c960:	f7fc fd8e 	bl	8019480 <HAL_GetTick>
 801c964:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801c966:	e008      	b.n	801c97a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c968:	f7fc fd8a 	bl	8019480 <HAL_GetTick>
 801c96c:	4602      	mov	r2, r0
 801c96e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c970:	1ad3      	subs	r3, r2, r3
 801c972:	2b02      	cmp	r3, #2
 801c974:	d901      	bls.n	801c97a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 801c976:	2303      	movs	r3, #3
 801c978:	e10e      	b.n	801cb98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801c97a:	4b39      	ldr	r3, [pc, #228]	@ (801ca60 <HAL_RCC_OscConfig+0x76c>)
 801c97c:	681b      	ldr	r3, [r3, #0]
 801c97e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801c982:	2b00      	cmp	r3, #0
 801c984:	d1f0      	bne.n	801c968 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801c986:	4b36      	ldr	r3, [pc, #216]	@ (801ca60 <HAL_RCC_OscConfig+0x76c>)
 801c988:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801c98a:	4b37      	ldr	r3, [pc, #220]	@ (801ca68 <HAL_RCC_OscConfig+0x774>)
 801c98c:	4013      	ands	r3, r2
 801c98e:	687a      	ldr	r2, [r7, #4]
 801c990:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 801c992:	687a      	ldr	r2, [r7, #4]
 801c994:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801c996:	0112      	lsls	r2, r2, #4
 801c998:	430a      	orrs	r2, r1
 801c99a:	4931      	ldr	r1, [pc, #196]	@ (801ca60 <HAL_RCC_OscConfig+0x76c>)
 801c99c:	4313      	orrs	r3, r2
 801c99e:	628b      	str	r3, [r1, #40]	@ 0x28
 801c9a0:	687b      	ldr	r3, [r7, #4]
 801c9a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c9a4:	3b01      	subs	r3, #1
 801c9a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801c9aa:	687b      	ldr	r3, [r7, #4]
 801c9ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c9ae:	3b01      	subs	r3, #1
 801c9b0:	025b      	lsls	r3, r3, #9
 801c9b2:	b29b      	uxth	r3, r3
 801c9b4:	431a      	orrs	r2, r3
 801c9b6:	687b      	ldr	r3, [r7, #4]
 801c9b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c9ba:	3b01      	subs	r3, #1
 801c9bc:	041b      	lsls	r3, r3, #16
 801c9be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801c9c2:	431a      	orrs	r2, r3
 801c9c4:	687b      	ldr	r3, [r7, #4]
 801c9c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c9c8:	3b01      	subs	r3, #1
 801c9ca:	061b      	lsls	r3, r3, #24
 801c9cc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801c9d0:	4923      	ldr	r1, [pc, #140]	@ (801ca60 <HAL_RCC_OscConfig+0x76c>)
 801c9d2:	4313      	orrs	r3, r2
 801c9d4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 801c9d6:	4b22      	ldr	r3, [pc, #136]	@ (801ca60 <HAL_RCC_OscConfig+0x76c>)
 801c9d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c9da:	4a21      	ldr	r2, [pc, #132]	@ (801ca60 <HAL_RCC_OscConfig+0x76c>)
 801c9dc:	f023 0301 	bic.w	r3, r3, #1
 801c9e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801c9e2:	4b1f      	ldr	r3, [pc, #124]	@ (801ca60 <HAL_RCC_OscConfig+0x76c>)
 801c9e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801c9e6:	4b21      	ldr	r3, [pc, #132]	@ (801ca6c <HAL_RCC_OscConfig+0x778>)
 801c9e8:	4013      	ands	r3, r2
 801c9ea:	687a      	ldr	r2, [r7, #4]
 801c9ec:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801c9ee:	00d2      	lsls	r2, r2, #3
 801c9f0:	491b      	ldr	r1, [pc, #108]	@ (801ca60 <HAL_RCC_OscConfig+0x76c>)
 801c9f2:	4313      	orrs	r3, r2
 801c9f4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 801c9f6:	4b1a      	ldr	r3, [pc, #104]	@ (801ca60 <HAL_RCC_OscConfig+0x76c>)
 801c9f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c9fa:	f023 020c 	bic.w	r2, r3, #12
 801c9fe:	687b      	ldr	r3, [r7, #4]
 801ca00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ca02:	4917      	ldr	r1, [pc, #92]	@ (801ca60 <HAL_RCC_OscConfig+0x76c>)
 801ca04:	4313      	orrs	r3, r2
 801ca06:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 801ca08:	4b15      	ldr	r3, [pc, #84]	@ (801ca60 <HAL_RCC_OscConfig+0x76c>)
 801ca0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ca0c:	f023 0202 	bic.w	r2, r3, #2
 801ca10:	687b      	ldr	r3, [r7, #4]
 801ca12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ca14:	4912      	ldr	r1, [pc, #72]	@ (801ca60 <HAL_RCC_OscConfig+0x76c>)
 801ca16:	4313      	orrs	r3, r2
 801ca18:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801ca1a:	4b11      	ldr	r3, [pc, #68]	@ (801ca60 <HAL_RCC_OscConfig+0x76c>)
 801ca1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ca1e:	4a10      	ldr	r2, [pc, #64]	@ (801ca60 <HAL_RCC_OscConfig+0x76c>)
 801ca20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801ca24:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801ca26:	4b0e      	ldr	r3, [pc, #56]	@ (801ca60 <HAL_RCC_OscConfig+0x76c>)
 801ca28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ca2a:	4a0d      	ldr	r2, [pc, #52]	@ (801ca60 <HAL_RCC_OscConfig+0x76c>)
 801ca2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801ca30:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 801ca32:	4b0b      	ldr	r3, [pc, #44]	@ (801ca60 <HAL_RCC_OscConfig+0x76c>)
 801ca34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ca36:	4a0a      	ldr	r2, [pc, #40]	@ (801ca60 <HAL_RCC_OscConfig+0x76c>)
 801ca38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801ca3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 801ca3e:	4b08      	ldr	r3, [pc, #32]	@ (801ca60 <HAL_RCC_OscConfig+0x76c>)
 801ca40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ca42:	4a07      	ldr	r2, [pc, #28]	@ (801ca60 <HAL_RCC_OscConfig+0x76c>)
 801ca44:	f043 0301 	orr.w	r3, r3, #1
 801ca48:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801ca4a:	4b05      	ldr	r3, [pc, #20]	@ (801ca60 <HAL_RCC_OscConfig+0x76c>)
 801ca4c:	681b      	ldr	r3, [r3, #0]
 801ca4e:	4a04      	ldr	r2, [pc, #16]	@ (801ca60 <HAL_RCC_OscConfig+0x76c>)
 801ca50:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801ca54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ca56:	f7fc fd13 	bl	8019480 <HAL_GetTick>
 801ca5a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801ca5c:	e011      	b.n	801ca82 <HAL_RCC_OscConfig+0x78e>
 801ca5e:	bf00      	nop
 801ca60:	58024400 	.word	0x58024400
 801ca64:	58024800 	.word	0x58024800
 801ca68:	fffffc0c 	.word	0xfffffc0c
 801ca6c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801ca70:	f7fc fd06 	bl	8019480 <HAL_GetTick>
 801ca74:	4602      	mov	r2, r0
 801ca76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ca78:	1ad3      	subs	r3, r2, r3
 801ca7a:	2b02      	cmp	r3, #2
 801ca7c:	d901      	bls.n	801ca82 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 801ca7e:	2303      	movs	r3, #3
 801ca80:	e08a      	b.n	801cb98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801ca82:	4b47      	ldr	r3, [pc, #284]	@ (801cba0 <HAL_RCC_OscConfig+0x8ac>)
 801ca84:	681b      	ldr	r3, [r3, #0]
 801ca86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801ca8a:	2b00      	cmp	r3, #0
 801ca8c:	d0f0      	beq.n	801ca70 <HAL_RCC_OscConfig+0x77c>
 801ca8e:	e082      	b.n	801cb96 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801ca90:	4b43      	ldr	r3, [pc, #268]	@ (801cba0 <HAL_RCC_OscConfig+0x8ac>)
 801ca92:	681b      	ldr	r3, [r3, #0]
 801ca94:	4a42      	ldr	r2, [pc, #264]	@ (801cba0 <HAL_RCC_OscConfig+0x8ac>)
 801ca96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801ca9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ca9c:	f7fc fcf0 	bl	8019480 <HAL_GetTick>
 801caa0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801caa2:	e008      	b.n	801cab6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801caa4:	f7fc fcec 	bl	8019480 <HAL_GetTick>
 801caa8:	4602      	mov	r2, r0
 801caaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801caac:	1ad3      	subs	r3, r2, r3
 801caae:	2b02      	cmp	r3, #2
 801cab0:	d901      	bls.n	801cab6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 801cab2:	2303      	movs	r3, #3
 801cab4:	e070      	b.n	801cb98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801cab6:	4b3a      	ldr	r3, [pc, #232]	@ (801cba0 <HAL_RCC_OscConfig+0x8ac>)
 801cab8:	681b      	ldr	r3, [r3, #0]
 801caba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801cabe:	2b00      	cmp	r3, #0
 801cac0:	d1f0      	bne.n	801caa4 <HAL_RCC_OscConfig+0x7b0>
 801cac2:	e068      	b.n	801cb96 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 801cac4:	4b36      	ldr	r3, [pc, #216]	@ (801cba0 <HAL_RCC_OscConfig+0x8ac>)
 801cac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cac8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801caca:	4b35      	ldr	r3, [pc, #212]	@ (801cba0 <HAL_RCC_OscConfig+0x8ac>)
 801cacc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801cace:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801cad0:	687b      	ldr	r3, [r7, #4]
 801cad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cad4:	2b01      	cmp	r3, #1
 801cad6:	d031      	beq.n	801cb3c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801cad8:	693b      	ldr	r3, [r7, #16]
 801cada:	f003 0203 	and.w	r2, r3, #3
 801cade:	687b      	ldr	r3, [r7, #4]
 801cae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801cae2:	429a      	cmp	r2, r3
 801cae4:	d12a      	bne.n	801cb3c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801cae6:	693b      	ldr	r3, [r7, #16]
 801cae8:	091b      	lsrs	r3, r3, #4
 801caea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 801caee:	687b      	ldr	r3, [r7, #4]
 801caf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801caf2:	429a      	cmp	r2, r3
 801caf4:	d122      	bne.n	801cb3c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801caf6:	68fb      	ldr	r3, [r7, #12]
 801caf8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801cafc:	687b      	ldr	r3, [r7, #4]
 801cafe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801cb00:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801cb02:	429a      	cmp	r2, r3
 801cb04:	d11a      	bne.n	801cb3c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801cb06:	68fb      	ldr	r3, [r7, #12]
 801cb08:	0a5b      	lsrs	r3, r3, #9
 801cb0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801cb0e:	687b      	ldr	r3, [r7, #4]
 801cb10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801cb12:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801cb14:	429a      	cmp	r2, r3
 801cb16:	d111      	bne.n	801cb3c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801cb18:	68fb      	ldr	r3, [r7, #12]
 801cb1a:	0c1b      	lsrs	r3, r3, #16
 801cb1c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801cb20:	687b      	ldr	r3, [r7, #4]
 801cb22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801cb24:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801cb26:	429a      	cmp	r2, r3
 801cb28:	d108      	bne.n	801cb3c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 801cb2a:	68fb      	ldr	r3, [r7, #12]
 801cb2c:	0e1b      	lsrs	r3, r3, #24
 801cb2e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801cb32:	687b      	ldr	r3, [r7, #4]
 801cb34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801cb36:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801cb38:	429a      	cmp	r2, r3
 801cb3a:	d001      	beq.n	801cb40 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 801cb3c:	2301      	movs	r3, #1
 801cb3e:	e02b      	b.n	801cb98 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 801cb40:	4b17      	ldr	r3, [pc, #92]	@ (801cba0 <HAL_RCC_OscConfig+0x8ac>)
 801cb42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801cb44:	08db      	lsrs	r3, r3, #3
 801cb46:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801cb4a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 801cb4c:	687b      	ldr	r3, [r7, #4]
 801cb4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801cb50:	693a      	ldr	r2, [r7, #16]
 801cb52:	429a      	cmp	r2, r3
 801cb54:	d01f      	beq.n	801cb96 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 801cb56:	4b12      	ldr	r3, [pc, #72]	@ (801cba0 <HAL_RCC_OscConfig+0x8ac>)
 801cb58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cb5a:	4a11      	ldr	r2, [pc, #68]	@ (801cba0 <HAL_RCC_OscConfig+0x8ac>)
 801cb5c:	f023 0301 	bic.w	r3, r3, #1
 801cb60:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801cb62:	f7fc fc8d 	bl	8019480 <HAL_GetTick>
 801cb66:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 801cb68:	bf00      	nop
 801cb6a:	f7fc fc89 	bl	8019480 <HAL_GetTick>
 801cb6e:	4602      	mov	r2, r0
 801cb70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cb72:	4293      	cmp	r3, r2
 801cb74:	d0f9      	beq.n	801cb6a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801cb76:	4b0a      	ldr	r3, [pc, #40]	@ (801cba0 <HAL_RCC_OscConfig+0x8ac>)
 801cb78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801cb7a:	4b0a      	ldr	r3, [pc, #40]	@ (801cba4 <HAL_RCC_OscConfig+0x8b0>)
 801cb7c:	4013      	ands	r3, r2
 801cb7e:	687a      	ldr	r2, [r7, #4]
 801cb80:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801cb82:	00d2      	lsls	r2, r2, #3
 801cb84:	4906      	ldr	r1, [pc, #24]	@ (801cba0 <HAL_RCC_OscConfig+0x8ac>)
 801cb86:	4313      	orrs	r3, r2
 801cb88:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 801cb8a:	4b05      	ldr	r3, [pc, #20]	@ (801cba0 <HAL_RCC_OscConfig+0x8ac>)
 801cb8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cb8e:	4a04      	ldr	r2, [pc, #16]	@ (801cba0 <HAL_RCC_OscConfig+0x8ac>)
 801cb90:	f043 0301 	orr.w	r3, r3, #1
 801cb94:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 801cb96:	2300      	movs	r3, #0
}
 801cb98:	4618      	mov	r0, r3
 801cb9a:	3730      	adds	r7, #48	@ 0x30
 801cb9c:	46bd      	mov	sp, r7
 801cb9e:	bd80      	pop	{r7, pc}
 801cba0:	58024400 	.word	0x58024400
 801cba4:	ffff0007 	.word	0xffff0007

0801cba8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801cba8:	b580      	push	{r7, lr}
 801cbaa:	b086      	sub	sp, #24
 801cbac:	af00      	add	r7, sp, #0
 801cbae:	6078      	str	r0, [r7, #4]
 801cbb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801cbb2:	687b      	ldr	r3, [r7, #4]
 801cbb4:	2b00      	cmp	r3, #0
 801cbb6:	d101      	bne.n	801cbbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801cbb8:	2301      	movs	r3, #1
 801cbba:	e19c      	b.n	801cef6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801cbbc:	4b8a      	ldr	r3, [pc, #552]	@ (801cde8 <HAL_RCC_ClockConfig+0x240>)
 801cbbe:	681b      	ldr	r3, [r3, #0]
 801cbc0:	f003 030f 	and.w	r3, r3, #15
 801cbc4:	683a      	ldr	r2, [r7, #0]
 801cbc6:	429a      	cmp	r2, r3
 801cbc8:	d910      	bls.n	801cbec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801cbca:	4b87      	ldr	r3, [pc, #540]	@ (801cde8 <HAL_RCC_ClockConfig+0x240>)
 801cbcc:	681b      	ldr	r3, [r3, #0]
 801cbce:	f023 020f 	bic.w	r2, r3, #15
 801cbd2:	4985      	ldr	r1, [pc, #532]	@ (801cde8 <HAL_RCC_ClockConfig+0x240>)
 801cbd4:	683b      	ldr	r3, [r7, #0]
 801cbd6:	4313      	orrs	r3, r2
 801cbd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801cbda:	4b83      	ldr	r3, [pc, #524]	@ (801cde8 <HAL_RCC_ClockConfig+0x240>)
 801cbdc:	681b      	ldr	r3, [r3, #0]
 801cbde:	f003 030f 	and.w	r3, r3, #15
 801cbe2:	683a      	ldr	r2, [r7, #0]
 801cbe4:	429a      	cmp	r2, r3
 801cbe6:	d001      	beq.n	801cbec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 801cbe8:	2301      	movs	r3, #1
 801cbea:	e184      	b.n	801cef6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801cbec:	687b      	ldr	r3, [r7, #4]
 801cbee:	681b      	ldr	r3, [r3, #0]
 801cbf0:	f003 0304 	and.w	r3, r3, #4
 801cbf4:	2b00      	cmp	r3, #0
 801cbf6:	d010      	beq.n	801cc1a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801cbf8:	687b      	ldr	r3, [r7, #4]
 801cbfa:	691a      	ldr	r2, [r3, #16]
 801cbfc:	4b7b      	ldr	r3, [pc, #492]	@ (801cdec <HAL_RCC_ClockConfig+0x244>)
 801cbfe:	699b      	ldr	r3, [r3, #24]
 801cc00:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801cc04:	429a      	cmp	r2, r3
 801cc06:	d908      	bls.n	801cc1a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801cc08:	4b78      	ldr	r3, [pc, #480]	@ (801cdec <HAL_RCC_ClockConfig+0x244>)
 801cc0a:	699b      	ldr	r3, [r3, #24]
 801cc0c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801cc10:	687b      	ldr	r3, [r7, #4]
 801cc12:	691b      	ldr	r3, [r3, #16]
 801cc14:	4975      	ldr	r1, [pc, #468]	@ (801cdec <HAL_RCC_ClockConfig+0x244>)
 801cc16:	4313      	orrs	r3, r2
 801cc18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801cc1a:	687b      	ldr	r3, [r7, #4]
 801cc1c:	681b      	ldr	r3, [r3, #0]
 801cc1e:	f003 0308 	and.w	r3, r3, #8
 801cc22:	2b00      	cmp	r3, #0
 801cc24:	d010      	beq.n	801cc48 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801cc26:	687b      	ldr	r3, [r7, #4]
 801cc28:	695a      	ldr	r2, [r3, #20]
 801cc2a:	4b70      	ldr	r3, [pc, #448]	@ (801cdec <HAL_RCC_ClockConfig+0x244>)
 801cc2c:	69db      	ldr	r3, [r3, #28]
 801cc2e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801cc32:	429a      	cmp	r2, r3
 801cc34:	d908      	bls.n	801cc48 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801cc36:	4b6d      	ldr	r3, [pc, #436]	@ (801cdec <HAL_RCC_ClockConfig+0x244>)
 801cc38:	69db      	ldr	r3, [r3, #28]
 801cc3a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801cc3e:	687b      	ldr	r3, [r7, #4]
 801cc40:	695b      	ldr	r3, [r3, #20]
 801cc42:	496a      	ldr	r1, [pc, #424]	@ (801cdec <HAL_RCC_ClockConfig+0x244>)
 801cc44:	4313      	orrs	r3, r2
 801cc46:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801cc48:	687b      	ldr	r3, [r7, #4]
 801cc4a:	681b      	ldr	r3, [r3, #0]
 801cc4c:	f003 0310 	and.w	r3, r3, #16
 801cc50:	2b00      	cmp	r3, #0
 801cc52:	d010      	beq.n	801cc76 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801cc54:	687b      	ldr	r3, [r7, #4]
 801cc56:	699a      	ldr	r2, [r3, #24]
 801cc58:	4b64      	ldr	r3, [pc, #400]	@ (801cdec <HAL_RCC_ClockConfig+0x244>)
 801cc5a:	69db      	ldr	r3, [r3, #28]
 801cc5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801cc60:	429a      	cmp	r2, r3
 801cc62:	d908      	bls.n	801cc76 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801cc64:	4b61      	ldr	r3, [pc, #388]	@ (801cdec <HAL_RCC_ClockConfig+0x244>)
 801cc66:	69db      	ldr	r3, [r3, #28]
 801cc68:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801cc6c:	687b      	ldr	r3, [r7, #4]
 801cc6e:	699b      	ldr	r3, [r3, #24]
 801cc70:	495e      	ldr	r1, [pc, #376]	@ (801cdec <HAL_RCC_ClockConfig+0x244>)
 801cc72:	4313      	orrs	r3, r2
 801cc74:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801cc76:	687b      	ldr	r3, [r7, #4]
 801cc78:	681b      	ldr	r3, [r3, #0]
 801cc7a:	f003 0320 	and.w	r3, r3, #32
 801cc7e:	2b00      	cmp	r3, #0
 801cc80:	d010      	beq.n	801cca4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801cc82:	687b      	ldr	r3, [r7, #4]
 801cc84:	69da      	ldr	r2, [r3, #28]
 801cc86:	4b59      	ldr	r3, [pc, #356]	@ (801cdec <HAL_RCC_ClockConfig+0x244>)
 801cc88:	6a1b      	ldr	r3, [r3, #32]
 801cc8a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801cc8e:	429a      	cmp	r2, r3
 801cc90:	d908      	bls.n	801cca4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801cc92:	4b56      	ldr	r3, [pc, #344]	@ (801cdec <HAL_RCC_ClockConfig+0x244>)
 801cc94:	6a1b      	ldr	r3, [r3, #32]
 801cc96:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801cc9a:	687b      	ldr	r3, [r7, #4]
 801cc9c:	69db      	ldr	r3, [r3, #28]
 801cc9e:	4953      	ldr	r1, [pc, #332]	@ (801cdec <HAL_RCC_ClockConfig+0x244>)
 801cca0:	4313      	orrs	r3, r2
 801cca2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801cca4:	687b      	ldr	r3, [r7, #4]
 801cca6:	681b      	ldr	r3, [r3, #0]
 801cca8:	f003 0302 	and.w	r3, r3, #2
 801ccac:	2b00      	cmp	r3, #0
 801ccae:	d010      	beq.n	801ccd2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801ccb0:	687b      	ldr	r3, [r7, #4]
 801ccb2:	68da      	ldr	r2, [r3, #12]
 801ccb4:	4b4d      	ldr	r3, [pc, #308]	@ (801cdec <HAL_RCC_ClockConfig+0x244>)
 801ccb6:	699b      	ldr	r3, [r3, #24]
 801ccb8:	f003 030f 	and.w	r3, r3, #15
 801ccbc:	429a      	cmp	r2, r3
 801ccbe:	d908      	bls.n	801ccd2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801ccc0:	4b4a      	ldr	r3, [pc, #296]	@ (801cdec <HAL_RCC_ClockConfig+0x244>)
 801ccc2:	699b      	ldr	r3, [r3, #24]
 801ccc4:	f023 020f 	bic.w	r2, r3, #15
 801ccc8:	687b      	ldr	r3, [r7, #4]
 801ccca:	68db      	ldr	r3, [r3, #12]
 801cccc:	4947      	ldr	r1, [pc, #284]	@ (801cdec <HAL_RCC_ClockConfig+0x244>)
 801ccce:	4313      	orrs	r3, r2
 801ccd0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801ccd2:	687b      	ldr	r3, [r7, #4]
 801ccd4:	681b      	ldr	r3, [r3, #0]
 801ccd6:	f003 0301 	and.w	r3, r3, #1
 801ccda:	2b00      	cmp	r3, #0
 801ccdc:	d055      	beq.n	801cd8a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 801ccde:	4b43      	ldr	r3, [pc, #268]	@ (801cdec <HAL_RCC_ClockConfig+0x244>)
 801cce0:	699b      	ldr	r3, [r3, #24]
 801cce2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 801cce6:	687b      	ldr	r3, [r7, #4]
 801cce8:	689b      	ldr	r3, [r3, #8]
 801ccea:	4940      	ldr	r1, [pc, #256]	@ (801cdec <HAL_RCC_ClockConfig+0x244>)
 801ccec:	4313      	orrs	r3, r2
 801ccee:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801ccf0:	687b      	ldr	r3, [r7, #4]
 801ccf2:	685b      	ldr	r3, [r3, #4]
 801ccf4:	2b02      	cmp	r3, #2
 801ccf6:	d107      	bne.n	801cd08 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801ccf8:	4b3c      	ldr	r3, [pc, #240]	@ (801cdec <HAL_RCC_ClockConfig+0x244>)
 801ccfa:	681b      	ldr	r3, [r3, #0]
 801ccfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801cd00:	2b00      	cmp	r3, #0
 801cd02:	d121      	bne.n	801cd48 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801cd04:	2301      	movs	r3, #1
 801cd06:	e0f6      	b.n	801cef6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801cd08:	687b      	ldr	r3, [r7, #4]
 801cd0a:	685b      	ldr	r3, [r3, #4]
 801cd0c:	2b03      	cmp	r3, #3
 801cd0e:	d107      	bne.n	801cd20 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801cd10:	4b36      	ldr	r3, [pc, #216]	@ (801cdec <HAL_RCC_ClockConfig+0x244>)
 801cd12:	681b      	ldr	r3, [r3, #0]
 801cd14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801cd18:	2b00      	cmp	r3, #0
 801cd1a:	d115      	bne.n	801cd48 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801cd1c:	2301      	movs	r3, #1
 801cd1e:	e0ea      	b.n	801cef6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 801cd20:	687b      	ldr	r3, [r7, #4]
 801cd22:	685b      	ldr	r3, [r3, #4]
 801cd24:	2b01      	cmp	r3, #1
 801cd26:	d107      	bne.n	801cd38 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801cd28:	4b30      	ldr	r3, [pc, #192]	@ (801cdec <HAL_RCC_ClockConfig+0x244>)
 801cd2a:	681b      	ldr	r3, [r3, #0]
 801cd2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801cd30:	2b00      	cmp	r3, #0
 801cd32:	d109      	bne.n	801cd48 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801cd34:	2301      	movs	r3, #1
 801cd36:	e0de      	b.n	801cef6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801cd38:	4b2c      	ldr	r3, [pc, #176]	@ (801cdec <HAL_RCC_ClockConfig+0x244>)
 801cd3a:	681b      	ldr	r3, [r3, #0]
 801cd3c:	f003 0304 	and.w	r3, r3, #4
 801cd40:	2b00      	cmp	r3, #0
 801cd42:	d101      	bne.n	801cd48 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801cd44:	2301      	movs	r3, #1
 801cd46:	e0d6      	b.n	801cef6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801cd48:	4b28      	ldr	r3, [pc, #160]	@ (801cdec <HAL_RCC_ClockConfig+0x244>)
 801cd4a:	691b      	ldr	r3, [r3, #16]
 801cd4c:	f023 0207 	bic.w	r2, r3, #7
 801cd50:	687b      	ldr	r3, [r7, #4]
 801cd52:	685b      	ldr	r3, [r3, #4]
 801cd54:	4925      	ldr	r1, [pc, #148]	@ (801cdec <HAL_RCC_ClockConfig+0x244>)
 801cd56:	4313      	orrs	r3, r2
 801cd58:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801cd5a:	f7fc fb91 	bl	8019480 <HAL_GetTick>
 801cd5e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801cd60:	e00a      	b.n	801cd78 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801cd62:	f7fc fb8d 	bl	8019480 <HAL_GetTick>
 801cd66:	4602      	mov	r2, r0
 801cd68:	697b      	ldr	r3, [r7, #20]
 801cd6a:	1ad3      	subs	r3, r2, r3
 801cd6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 801cd70:	4293      	cmp	r3, r2
 801cd72:	d901      	bls.n	801cd78 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 801cd74:	2303      	movs	r3, #3
 801cd76:	e0be      	b.n	801cef6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801cd78:	4b1c      	ldr	r3, [pc, #112]	@ (801cdec <HAL_RCC_ClockConfig+0x244>)
 801cd7a:	691b      	ldr	r3, [r3, #16]
 801cd7c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 801cd80:	687b      	ldr	r3, [r7, #4]
 801cd82:	685b      	ldr	r3, [r3, #4]
 801cd84:	00db      	lsls	r3, r3, #3
 801cd86:	429a      	cmp	r2, r3
 801cd88:	d1eb      	bne.n	801cd62 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801cd8a:	687b      	ldr	r3, [r7, #4]
 801cd8c:	681b      	ldr	r3, [r3, #0]
 801cd8e:	f003 0302 	and.w	r3, r3, #2
 801cd92:	2b00      	cmp	r3, #0
 801cd94:	d010      	beq.n	801cdb8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801cd96:	687b      	ldr	r3, [r7, #4]
 801cd98:	68da      	ldr	r2, [r3, #12]
 801cd9a:	4b14      	ldr	r3, [pc, #80]	@ (801cdec <HAL_RCC_ClockConfig+0x244>)
 801cd9c:	699b      	ldr	r3, [r3, #24]
 801cd9e:	f003 030f 	and.w	r3, r3, #15
 801cda2:	429a      	cmp	r2, r3
 801cda4:	d208      	bcs.n	801cdb8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801cda6:	4b11      	ldr	r3, [pc, #68]	@ (801cdec <HAL_RCC_ClockConfig+0x244>)
 801cda8:	699b      	ldr	r3, [r3, #24]
 801cdaa:	f023 020f 	bic.w	r2, r3, #15
 801cdae:	687b      	ldr	r3, [r7, #4]
 801cdb0:	68db      	ldr	r3, [r3, #12]
 801cdb2:	490e      	ldr	r1, [pc, #56]	@ (801cdec <HAL_RCC_ClockConfig+0x244>)
 801cdb4:	4313      	orrs	r3, r2
 801cdb6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801cdb8:	4b0b      	ldr	r3, [pc, #44]	@ (801cde8 <HAL_RCC_ClockConfig+0x240>)
 801cdba:	681b      	ldr	r3, [r3, #0]
 801cdbc:	f003 030f 	and.w	r3, r3, #15
 801cdc0:	683a      	ldr	r2, [r7, #0]
 801cdc2:	429a      	cmp	r2, r3
 801cdc4:	d214      	bcs.n	801cdf0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801cdc6:	4b08      	ldr	r3, [pc, #32]	@ (801cde8 <HAL_RCC_ClockConfig+0x240>)
 801cdc8:	681b      	ldr	r3, [r3, #0]
 801cdca:	f023 020f 	bic.w	r2, r3, #15
 801cdce:	4906      	ldr	r1, [pc, #24]	@ (801cde8 <HAL_RCC_ClockConfig+0x240>)
 801cdd0:	683b      	ldr	r3, [r7, #0]
 801cdd2:	4313      	orrs	r3, r2
 801cdd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801cdd6:	4b04      	ldr	r3, [pc, #16]	@ (801cde8 <HAL_RCC_ClockConfig+0x240>)
 801cdd8:	681b      	ldr	r3, [r3, #0]
 801cdda:	f003 030f 	and.w	r3, r3, #15
 801cdde:	683a      	ldr	r2, [r7, #0]
 801cde0:	429a      	cmp	r2, r3
 801cde2:	d005      	beq.n	801cdf0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 801cde4:	2301      	movs	r3, #1
 801cde6:	e086      	b.n	801cef6 <HAL_RCC_ClockConfig+0x34e>
 801cde8:	52002000 	.word	0x52002000
 801cdec:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801cdf0:	687b      	ldr	r3, [r7, #4]
 801cdf2:	681b      	ldr	r3, [r3, #0]
 801cdf4:	f003 0304 	and.w	r3, r3, #4
 801cdf8:	2b00      	cmp	r3, #0
 801cdfa:	d010      	beq.n	801ce1e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801cdfc:	687b      	ldr	r3, [r7, #4]
 801cdfe:	691a      	ldr	r2, [r3, #16]
 801ce00:	4b3f      	ldr	r3, [pc, #252]	@ (801cf00 <HAL_RCC_ClockConfig+0x358>)
 801ce02:	699b      	ldr	r3, [r3, #24]
 801ce04:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801ce08:	429a      	cmp	r2, r3
 801ce0a:	d208      	bcs.n	801ce1e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801ce0c:	4b3c      	ldr	r3, [pc, #240]	@ (801cf00 <HAL_RCC_ClockConfig+0x358>)
 801ce0e:	699b      	ldr	r3, [r3, #24]
 801ce10:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801ce14:	687b      	ldr	r3, [r7, #4]
 801ce16:	691b      	ldr	r3, [r3, #16]
 801ce18:	4939      	ldr	r1, [pc, #228]	@ (801cf00 <HAL_RCC_ClockConfig+0x358>)
 801ce1a:	4313      	orrs	r3, r2
 801ce1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801ce1e:	687b      	ldr	r3, [r7, #4]
 801ce20:	681b      	ldr	r3, [r3, #0]
 801ce22:	f003 0308 	and.w	r3, r3, #8
 801ce26:	2b00      	cmp	r3, #0
 801ce28:	d010      	beq.n	801ce4c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801ce2a:	687b      	ldr	r3, [r7, #4]
 801ce2c:	695a      	ldr	r2, [r3, #20]
 801ce2e:	4b34      	ldr	r3, [pc, #208]	@ (801cf00 <HAL_RCC_ClockConfig+0x358>)
 801ce30:	69db      	ldr	r3, [r3, #28]
 801ce32:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801ce36:	429a      	cmp	r2, r3
 801ce38:	d208      	bcs.n	801ce4c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801ce3a:	4b31      	ldr	r3, [pc, #196]	@ (801cf00 <HAL_RCC_ClockConfig+0x358>)
 801ce3c:	69db      	ldr	r3, [r3, #28]
 801ce3e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801ce42:	687b      	ldr	r3, [r7, #4]
 801ce44:	695b      	ldr	r3, [r3, #20]
 801ce46:	492e      	ldr	r1, [pc, #184]	@ (801cf00 <HAL_RCC_ClockConfig+0x358>)
 801ce48:	4313      	orrs	r3, r2
 801ce4a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801ce4c:	687b      	ldr	r3, [r7, #4]
 801ce4e:	681b      	ldr	r3, [r3, #0]
 801ce50:	f003 0310 	and.w	r3, r3, #16
 801ce54:	2b00      	cmp	r3, #0
 801ce56:	d010      	beq.n	801ce7a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801ce58:	687b      	ldr	r3, [r7, #4]
 801ce5a:	699a      	ldr	r2, [r3, #24]
 801ce5c:	4b28      	ldr	r3, [pc, #160]	@ (801cf00 <HAL_RCC_ClockConfig+0x358>)
 801ce5e:	69db      	ldr	r3, [r3, #28]
 801ce60:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801ce64:	429a      	cmp	r2, r3
 801ce66:	d208      	bcs.n	801ce7a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801ce68:	4b25      	ldr	r3, [pc, #148]	@ (801cf00 <HAL_RCC_ClockConfig+0x358>)
 801ce6a:	69db      	ldr	r3, [r3, #28]
 801ce6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801ce70:	687b      	ldr	r3, [r7, #4]
 801ce72:	699b      	ldr	r3, [r3, #24]
 801ce74:	4922      	ldr	r1, [pc, #136]	@ (801cf00 <HAL_RCC_ClockConfig+0x358>)
 801ce76:	4313      	orrs	r3, r2
 801ce78:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801ce7a:	687b      	ldr	r3, [r7, #4]
 801ce7c:	681b      	ldr	r3, [r3, #0]
 801ce7e:	f003 0320 	and.w	r3, r3, #32
 801ce82:	2b00      	cmp	r3, #0
 801ce84:	d010      	beq.n	801cea8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801ce86:	687b      	ldr	r3, [r7, #4]
 801ce88:	69da      	ldr	r2, [r3, #28]
 801ce8a:	4b1d      	ldr	r3, [pc, #116]	@ (801cf00 <HAL_RCC_ClockConfig+0x358>)
 801ce8c:	6a1b      	ldr	r3, [r3, #32]
 801ce8e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801ce92:	429a      	cmp	r2, r3
 801ce94:	d208      	bcs.n	801cea8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801ce96:	4b1a      	ldr	r3, [pc, #104]	@ (801cf00 <HAL_RCC_ClockConfig+0x358>)
 801ce98:	6a1b      	ldr	r3, [r3, #32]
 801ce9a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801ce9e:	687b      	ldr	r3, [r7, #4]
 801cea0:	69db      	ldr	r3, [r3, #28]
 801cea2:	4917      	ldr	r1, [pc, #92]	@ (801cf00 <HAL_RCC_ClockConfig+0x358>)
 801cea4:	4313      	orrs	r3, r2
 801cea6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801cea8:	f000 f834 	bl	801cf14 <HAL_RCC_GetSysClockFreq>
 801ceac:	4602      	mov	r2, r0
 801ceae:	4b14      	ldr	r3, [pc, #80]	@ (801cf00 <HAL_RCC_ClockConfig+0x358>)
 801ceb0:	699b      	ldr	r3, [r3, #24]
 801ceb2:	0a1b      	lsrs	r3, r3, #8
 801ceb4:	f003 030f 	and.w	r3, r3, #15
 801ceb8:	4912      	ldr	r1, [pc, #72]	@ (801cf04 <HAL_RCC_ClockConfig+0x35c>)
 801ceba:	5ccb      	ldrb	r3, [r1, r3]
 801cebc:	f003 031f 	and.w	r3, r3, #31
 801cec0:	fa22 f303 	lsr.w	r3, r2, r3
 801cec4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801cec6:	4b0e      	ldr	r3, [pc, #56]	@ (801cf00 <HAL_RCC_ClockConfig+0x358>)
 801cec8:	699b      	ldr	r3, [r3, #24]
 801ceca:	f003 030f 	and.w	r3, r3, #15
 801cece:	4a0d      	ldr	r2, [pc, #52]	@ (801cf04 <HAL_RCC_ClockConfig+0x35c>)
 801ced0:	5cd3      	ldrb	r3, [r2, r3]
 801ced2:	f003 031f 	and.w	r3, r3, #31
 801ced6:	693a      	ldr	r2, [r7, #16]
 801ced8:	fa22 f303 	lsr.w	r3, r2, r3
 801cedc:	4a0a      	ldr	r2, [pc, #40]	@ (801cf08 <HAL_RCC_ClockConfig+0x360>)
 801cede:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801cee0:	4a0a      	ldr	r2, [pc, #40]	@ (801cf0c <HAL_RCC_ClockConfig+0x364>)
 801cee2:	693b      	ldr	r3, [r7, #16]
 801cee4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 801cee6:	4b0a      	ldr	r3, [pc, #40]	@ (801cf10 <HAL_RCC_ClockConfig+0x368>)
 801cee8:	681b      	ldr	r3, [r3, #0]
 801ceea:	4618      	mov	r0, r3
 801ceec:	f7fc fa7e 	bl	80193ec <HAL_InitTick>
 801cef0:	4603      	mov	r3, r0
 801cef2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 801cef4:	7bfb      	ldrb	r3, [r7, #15]
}
 801cef6:	4618      	mov	r0, r3
 801cef8:	3718      	adds	r7, #24
 801cefa:	46bd      	mov	sp, r7
 801cefc:	bd80      	pop	{r7, pc}
 801cefe:	bf00      	nop
 801cf00:	58024400 	.word	0x58024400
 801cf04:	080289d0 	.word	0x080289d0
 801cf08:	24000020 	.word	0x24000020
 801cf0c:	2400001c 	.word	0x2400001c
 801cf10:	24000024 	.word	0x24000024

0801cf14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801cf14:	b480      	push	{r7}
 801cf16:	b089      	sub	sp, #36	@ 0x24
 801cf18:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 801cf1a:	4bb3      	ldr	r3, [pc, #716]	@ (801d1e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801cf1c:	691b      	ldr	r3, [r3, #16]
 801cf1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801cf22:	2b18      	cmp	r3, #24
 801cf24:	f200 8155 	bhi.w	801d1d2 <HAL_RCC_GetSysClockFreq+0x2be>
 801cf28:	a201      	add	r2, pc, #4	@ (adr r2, 801cf30 <HAL_RCC_GetSysClockFreq+0x1c>)
 801cf2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cf2e:	bf00      	nop
 801cf30:	0801cf95 	.word	0x0801cf95
 801cf34:	0801d1d3 	.word	0x0801d1d3
 801cf38:	0801d1d3 	.word	0x0801d1d3
 801cf3c:	0801d1d3 	.word	0x0801d1d3
 801cf40:	0801d1d3 	.word	0x0801d1d3
 801cf44:	0801d1d3 	.word	0x0801d1d3
 801cf48:	0801d1d3 	.word	0x0801d1d3
 801cf4c:	0801d1d3 	.word	0x0801d1d3
 801cf50:	0801cfbb 	.word	0x0801cfbb
 801cf54:	0801d1d3 	.word	0x0801d1d3
 801cf58:	0801d1d3 	.word	0x0801d1d3
 801cf5c:	0801d1d3 	.word	0x0801d1d3
 801cf60:	0801d1d3 	.word	0x0801d1d3
 801cf64:	0801d1d3 	.word	0x0801d1d3
 801cf68:	0801d1d3 	.word	0x0801d1d3
 801cf6c:	0801d1d3 	.word	0x0801d1d3
 801cf70:	0801cfc1 	.word	0x0801cfc1
 801cf74:	0801d1d3 	.word	0x0801d1d3
 801cf78:	0801d1d3 	.word	0x0801d1d3
 801cf7c:	0801d1d3 	.word	0x0801d1d3
 801cf80:	0801d1d3 	.word	0x0801d1d3
 801cf84:	0801d1d3 	.word	0x0801d1d3
 801cf88:	0801d1d3 	.word	0x0801d1d3
 801cf8c:	0801d1d3 	.word	0x0801d1d3
 801cf90:	0801cfc7 	.word	0x0801cfc7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801cf94:	4b94      	ldr	r3, [pc, #592]	@ (801d1e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801cf96:	681b      	ldr	r3, [r3, #0]
 801cf98:	f003 0320 	and.w	r3, r3, #32
 801cf9c:	2b00      	cmp	r3, #0
 801cf9e:	d009      	beq.n	801cfb4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801cfa0:	4b91      	ldr	r3, [pc, #580]	@ (801d1e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801cfa2:	681b      	ldr	r3, [r3, #0]
 801cfa4:	08db      	lsrs	r3, r3, #3
 801cfa6:	f003 0303 	and.w	r3, r3, #3
 801cfaa:	4a90      	ldr	r2, [pc, #576]	@ (801d1ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 801cfac:	fa22 f303 	lsr.w	r3, r2, r3
 801cfb0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 801cfb2:	e111      	b.n	801d1d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 801cfb4:	4b8d      	ldr	r3, [pc, #564]	@ (801d1ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 801cfb6:	61bb      	str	r3, [r7, #24]
      break;
 801cfb8:	e10e      	b.n	801d1d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 801cfba:	4b8d      	ldr	r3, [pc, #564]	@ (801d1f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801cfbc:	61bb      	str	r3, [r7, #24]
      break;
 801cfbe:	e10b      	b.n	801d1d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 801cfc0:	4b8c      	ldr	r3, [pc, #560]	@ (801d1f4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 801cfc2:	61bb      	str	r3, [r7, #24]
      break;
 801cfc4:	e108      	b.n	801d1d8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801cfc6:	4b88      	ldr	r3, [pc, #544]	@ (801d1e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801cfc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cfca:	f003 0303 	and.w	r3, r3, #3
 801cfce:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 801cfd0:	4b85      	ldr	r3, [pc, #532]	@ (801d1e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801cfd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cfd4:	091b      	lsrs	r3, r3, #4
 801cfd6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801cfda:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 801cfdc:	4b82      	ldr	r3, [pc, #520]	@ (801d1e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801cfde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cfe0:	f003 0301 	and.w	r3, r3, #1
 801cfe4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801cfe6:	4b80      	ldr	r3, [pc, #512]	@ (801d1e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801cfe8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801cfea:	08db      	lsrs	r3, r3, #3
 801cfec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801cff0:	68fa      	ldr	r2, [r7, #12]
 801cff2:	fb02 f303 	mul.w	r3, r2, r3
 801cff6:	ee07 3a90 	vmov	s15, r3
 801cffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801cffe:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 801d002:	693b      	ldr	r3, [r7, #16]
 801d004:	2b00      	cmp	r3, #0
 801d006:	f000 80e1 	beq.w	801d1cc <HAL_RCC_GetSysClockFreq+0x2b8>
 801d00a:	697b      	ldr	r3, [r7, #20]
 801d00c:	2b02      	cmp	r3, #2
 801d00e:	f000 8083 	beq.w	801d118 <HAL_RCC_GetSysClockFreq+0x204>
 801d012:	697b      	ldr	r3, [r7, #20]
 801d014:	2b02      	cmp	r3, #2
 801d016:	f200 80a1 	bhi.w	801d15c <HAL_RCC_GetSysClockFreq+0x248>
 801d01a:	697b      	ldr	r3, [r7, #20]
 801d01c:	2b00      	cmp	r3, #0
 801d01e:	d003      	beq.n	801d028 <HAL_RCC_GetSysClockFreq+0x114>
 801d020:	697b      	ldr	r3, [r7, #20]
 801d022:	2b01      	cmp	r3, #1
 801d024:	d056      	beq.n	801d0d4 <HAL_RCC_GetSysClockFreq+0x1c0>
 801d026:	e099      	b.n	801d15c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801d028:	4b6f      	ldr	r3, [pc, #444]	@ (801d1e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d02a:	681b      	ldr	r3, [r3, #0]
 801d02c:	f003 0320 	and.w	r3, r3, #32
 801d030:	2b00      	cmp	r3, #0
 801d032:	d02d      	beq.n	801d090 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d034:	4b6c      	ldr	r3, [pc, #432]	@ (801d1e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d036:	681b      	ldr	r3, [r3, #0]
 801d038:	08db      	lsrs	r3, r3, #3
 801d03a:	f003 0303 	and.w	r3, r3, #3
 801d03e:	4a6b      	ldr	r2, [pc, #428]	@ (801d1ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 801d040:	fa22 f303 	lsr.w	r3, r2, r3
 801d044:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801d046:	687b      	ldr	r3, [r7, #4]
 801d048:	ee07 3a90 	vmov	s15, r3
 801d04c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d050:	693b      	ldr	r3, [r7, #16]
 801d052:	ee07 3a90 	vmov	s15, r3
 801d056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d05a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d05e:	4b62      	ldr	r3, [pc, #392]	@ (801d1e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d066:	ee07 3a90 	vmov	s15, r3
 801d06a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d06e:	ed97 6a02 	vldr	s12, [r7, #8]
 801d072:	eddf 5a61 	vldr	s11, [pc, #388]	@ 801d1f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 801d076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d07a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d07e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d086:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d08a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 801d08e:	e087      	b.n	801d1a0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801d090:	693b      	ldr	r3, [r7, #16]
 801d092:	ee07 3a90 	vmov	s15, r3
 801d096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d09a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 801d1fc <HAL_RCC_GetSysClockFreq+0x2e8>
 801d09e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d0a2:	4b51      	ldr	r3, [pc, #324]	@ (801d1e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d0a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d0a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d0aa:	ee07 3a90 	vmov	s15, r3
 801d0ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d0b2:	ed97 6a02 	vldr	s12, [r7, #8]
 801d0b6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 801d1f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 801d0ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d0be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d0c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d0c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d0ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d0ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801d0d2:	e065      	b.n	801d1a0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801d0d4:	693b      	ldr	r3, [r7, #16]
 801d0d6:	ee07 3a90 	vmov	s15, r3
 801d0da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d0de:	eddf 6a48 	vldr	s13, [pc, #288]	@ 801d200 <HAL_RCC_GetSysClockFreq+0x2ec>
 801d0e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d0e6:	4b40      	ldr	r3, [pc, #256]	@ (801d1e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d0e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d0ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d0ee:	ee07 3a90 	vmov	s15, r3
 801d0f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d0f6:	ed97 6a02 	vldr	s12, [r7, #8]
 801d0fa:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801d1f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 801d0fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d106:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d10a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d10e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d112:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801d116:	e043      	b.n	801d1a0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801d118:	693b      	ldr	r3, [r7, #16]
 801d11a:	ee07 3a90 	vmov	s15, r3
 801d11e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d122:	eddf 6a38 	vldr	s13, [pc, #224]	@ 801d204 <HAL_RCC_GetSysClockFreq+0x2f0>
 801d126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d12a:	4b2f      	ldr	r3, [pc, #188]	@ (801d1e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d12c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d12e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d132:	ee07 3a90 	vmov	s15, r3
 801d136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d13a:	ed97 6a02 	vldr	s12, [r7, #8]
 801d13e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 801d1f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 801d142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d14a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d14e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d152:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d156:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801d15a:	e021      	b.n	801d1a0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801d15c:	693b      	ldr	r3, [r7, #16]
 801d15e:	ee07 3a90 	vmov	s15, r3
 801d162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d166:	eddf 6a26 	vldr	s13, [pc, #152]	@ 801d200 <HAL_RCC_GetSysClockFreq+0x2ec>
 801d16a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d16e:	4b1e      	ldr	r3, [pc, #120]	@ (801d1e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d176:	ee07 3a90 	vmov	s15, r3
 801d17a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d17e:	ed97 6a02 	vldr	s12, [r7, #8]
 801d182:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 801d1f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 801d186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d18a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d18e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d196:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d19a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801d19e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 801d1a0:	4b11      	ldr	r3, [pc, #68]	@ (801d1e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d1a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d1a4:	0a5b      	lsrs	r3, r3, #9
 801d1a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d1aa:	3301      	adds	r3, #1
 801d1ac:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 801d1ae:	683b      	ldr	r3, [r7, #0]
 801d1b0:	ee07 3a90 	vmov	s15, r3
 801d1b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801d1b8:	edd7 6a07 	vldr	s13, [r7, #28]
 801d1bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d1c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d1c4:	ee17 3a90 	vmov	r3, s15
 801d1c8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 801d1ca:	e005      	b.n	801d1d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 801d1cc:	2300      	movs	r3, #0
 801d1ce:	61bb      	str	r3, [r7, #24]
      break;
 801d1d0:	e002      	b.n	801d1d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 801d1d2:	4b07      	ldr	r3, [pc, #28]	@ (801d1f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801d1d4:	61bb      	str	r3, [r7, #24]
      break;
 801d1d6:	bf00      	nop
  }

  return sysclockfreq;
 801d1d8:	69bb      	ldr	r3, [r7, #24]
}
 801d1da:	4618      	mov	r0, r3
 801d1dc:	3724      	adds	r7, #36	@ 0x24
 801d1de:	46bd      	mov	sp, r7
 801d1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d1e4:	4770      	bx	lr
 801d1e6:	bf00      	nop
 801d1e8:	58024400 	.word	0x58024400
 801d1ec:	03d09000 	.word	0x03d09000
 801d1f0:	003d0900 	.word	0x003d0900
 801d1f4:	017d7840 	.word	0x017d7840
 801d1f8:	46000000 	.word	0x46000000
 801d1fc:	4c742400 	.word	0x4c742400
 801d200:	4a742400 	.word	0x4a742400
 801d204:	4bbebc20 	.word	0x4bbebc20

0801d208 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801d208:	b580      	push	{r7, lr}
 801d20a:	b082      	sub	sp, #8
 801d20c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801d20e:	f7ff fe81 	bl	801cf14 <HAL_RCC_GetSysClockFreq>
 801d212:	4602      	mov	r2, r0
 801d214:	4b10      	ldr	r3, [pc, #64]	@ (801d258 <HAL_RCC_GetHCLKFreq+0x50>)
 801d216:	699b      	ldr	r3, [r3, #24]
 801d218:	0a1b      	lsrs	r3, r3, #8
 801d21a:	f003 030f 	and.w	r3, r3, #15
 801d21e:	490f      	ldr	r1, [pc, #60]	@ (801d25c <HAL_RCC_GetHCLKFreq+0x54>)
 801d220:	5ccb      	ldrb	r3, [r1, r3]
 801d222:	f003 031f 	and.w	r3, r3, #31
 801d226:	fa22 f303 	lsr.w	r3, r2, r3
 801d22a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801d22c:	4b0a      	ldr	r3, [pc, #40]	@ (801d258 <HAL_RCC_GetHCLKFreq+0x50>)
 801d22e:	699b      	ldr	r3, [r3, #24]
 801d230:	f003 030f 	and.w	r3, r3, #15
 801d234:	4a09      	ldr	r2, [pc, #36]	@ (801d25c <HAL_RCC_GetHCLKFreq+0x54>)
 801d236:	5cd3      	ldrb	r3, [r2, r3]
 801d238:	f003 031f 	and.w	r3, r3, #31
 801d23c:	687a      	ldr	r2, [r7, #4]
 801d23e:	fa22 f303 	lsr.w	r3, r2, r3
 801d242:	4a07      	ldr	r2, [pc, #28]	@ (801d260 <HAL_RCC_GetHCLKFreq+0x58>)
 801d244:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801d246:	4a07      	ldr	r2, [pc, #28]	@ (801d264 <HAL_RCC_GetHCLKFreq+0x5c>)
 801d248:	687b      	ldr	r3, [r7, #4]
 801d24a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 801d24c:	4b04      	ldr	r3, [pc, #16]	@ (801d260 <HAL_RCC_GetHCLKFreq+0x58>)
 801d24e:	681b      	ldr	r3, [r3, #0]
}
 801d250:	4618      	mov	r0, r3
 801d252:	3708      	adds	r7, #8
 801d254:	46bd      	mov	sp, r7
 801d256:	bd80      	pop	{r7, pc}
 801d258:	58024400 	.word	0x58024400
 801d25c:	080289d0 	.word	0x080289d0
 801d260:	24000020 	.word	0x24000020
 801d264:	2400001c 	.word	0x2400001c

0801d268 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801d268:	b580      	push	{r7, lr}
 801d26a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 801d26c:	f7ff ffcc 	bl	801d208 <HAL_RCC_GetHCLKFreq>
 801d270:	4602      	mov	r2, r0
 801d272:	4b06      	ldr	r3, [pc, #24]	@ (801d28c <HAL_RCC_GetPCLK1Freq+0x24>)
 801d274:	69db      	ldr	r3, [r3, #28]
 801d276:	091b      	lsrs	r3, r3, #4
 801d278:	f003 0307 	and.w	r3, r3, #7
 801d27c:	4904      	ldr	r1, [pc, #16]	@ (801d290 <HAL_RCC_GetPCLK1Freq+0x28>)
 801d27e:	5ccb      	ldrb	r3, [r1, r3]
 801d280:	f003 031f 	and.w	r3, r3, #31
 801d284:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 801d288:	4618      	mov	r0, r3
 801d28a:	bd80      	pop	{r7, pc}
 801d28c:	58024400 	.word	0x58024400
 801d290:	080289d0 	.word	0x080289d0

0801d294 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801d294:	b580      	push	{r7, lr}
 801d296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 801d298:	f7ff ffb6 	bl	801d208 <HAL_RCC_GetHCLKFreq>
 801d29c:	4602      	mov	r2, r0
 801d29e:	4b06      	ldr	r3, [pc, #24]	@ (801d2b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 801d2a0:	69db      	ldr	r3, [r3, #28]
 801d2a2:	0a1b      	lsrs	r3, r3, #8
 801d2a4:	f003 0307 	and.w	r3, r3, #7
 801d2a8:	4904      	ldr	r1, [pc, #16]	@ (801d2bc <HAL_RCC_GetPCLK2Freq+0x28>)
 801d2aa:	5ccb      	ldrb	r3, [r1, r3]
 801d2ac:	f003 031f 	and.w	r3, r3, #31
 801d2b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 801d2b4:	4618      	mov	r0, r3
 801d2b6:	bd80      	pop	{r7, pc}
 801d2b8:	58024400 	.word	0x58024400
 801d2bc:	080289d0 	.word	0x080289d0

0801d2c0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801d2c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801d2c4:	b0ca      	sub	sp, #296	@ 0x128
 801d2c6:	af00      	add	r7, sp, #0
 801d2c8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801d2cc:	2300      	movs	r3, #0
 801d2ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801d2d2:	2300      	movs	r3, #0
 801d2d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801d2d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d2e0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 801d2e4:	2500      	movs	r5, #0
 801d2e6:	ea54 0305 	orrs.w	r3, r4, r5
 801d2ea:	d049      	beq.n	801d380 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 801d2ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d2f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d2f2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801d2f6:	d02f      	beq.n	801d358 <HAL_RCCEx_PeriphCLKConfig+0x98>
 801d2f8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801d2fc:	d828      	bhi.n	801d350 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801d2fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801d302:	d01a      	beq.n	801d33a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 801d304:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801d308:	d822      	bhi.n	801d350 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801d30a:	2b00      	cmp	r3, #0
 801d30c:	d003      	beq.n	801d316 <HAL_RCCEx_PeriphCLKConfig+0x56>
 801d30e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801d312:	d007      	beq.n	801d324 <HAL_RCCEx_PeriphCLKConfig+0x64>
 801d314:	e01c      	b.n	801d350 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d316:	4bb8      	ldr	r3, [pc, #736]	@ (801d5f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d31a:	4ab7      	ldr	r2, [pc, #732]	@ (801d5f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d31c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d320:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801d322:	e01a      	b.n	801d35a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801d324:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d328:	3308      	adds	r3, #8
 801d32a:	2102      	movs	r1, #2
 801d32c:	4618      	mov	r0, r3
 801d32e:	f002 fb61 	bl	801f9f4 <RCCEx_PLL2_Config>
 801d332:	4603      	mov	r3, r0
 801d334:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801d338:	e00f      	b.n	801d35a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801d33a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d33e:	3328      	adds	r3, #40	@ 0x28
 801d340:	2102      	movs	r1, #2
 801d342:	4618      	mov	r0, r3
 801d344:	f002 fc08 	bl	801fb58 <RCCEx_PLL3_Config>
 801d348:	4603      	mov	r3, r0
 801d34a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801d34e:	e004      	b.n	801d35a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d350:	2301      	movs	r3, #1
 801d352:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d356:	e000      	b.n	801d35a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 801d358:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d35a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d35e:	2b00      	cmp	r3, #0
 801d360:	d10a      	bne.n	801d378 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801d362:	4ba5      	ldr	r3, [pc, #660]	@ (801d5f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d364:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d366:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801d36a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d36e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d370:	4aa1      	ldr	r2, [pc, #644]	@ (801d5f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d372:	430b      	orrs	r3, r1
 801d374:	6513      	str	r3, [r2, #80]	@ 0x50
 801d376:	e003      	b.n	801d380 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d378:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d37c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801d380:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d384:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d388:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 801d38c:	f04f 0900 	mov.w	r9, #0
 801d390:	ea58 0309 	orrs.w	r3, r8, r9
 801d394:	d047      	beq.n	801d426 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 801d396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d39a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d39c:	2b04      	cmp	r3, #4
 801d39e:	d82a      	bhi.n	801d3f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 801d3a0:	a201      	add	r2, pc, #4	@ (adr r2, 801d3a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 801d3a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d3a6:	bf00      	nop
 801d3a8:	0801d3bd 	.word	0x0801d3bd
 801d3ac:	0801d3cb 	.word	0x0801d3cb
 801d3b0:	0801d3e1 	.word	0x0801d3e1
 801d3b4:	0801d3ff 	.word	0x0801d3ff
 801d3b8:	0801d3ff 	.word	0x0801d3ff
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d3bc:	4b8e      	ldr	r3, [pc, #568]	@ (801d5f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d3be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d3c0:	4a8d      	ldr	r2, [pc, #564]	@ (801d5f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d3c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d3c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801d3c8:	e01a      	b.n	801d400 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d3ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d3ce:	3308      	adds	r3, #8
 801d3d0:	2100      	movs	r1, #0
 801d3d2:	4618      	mov	r0, r3
 801d3d4:	f002 fb0e 	bl	801f9f4 <RCCEx_PLL2_Config>
 801d3d8:	4603      	mov	r3, r0
 801d3da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801d3de:	e00f      	b.n	801d400 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801d3e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d3e4:	3328      	adds	r3, #40	@ 0x28
 801d3e6:	2100      	movs	r1, #0
 801d3e8:	4618      	mov	r0, r3
 801d3ea:	f002 fbb5 	bl	801fb58 <RCCEx_PLL3_Config>
 801d3ee:	4603      	mov	r3, r0
 801d3f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801d3f4:	e004      	b.n	801d400 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d3f6:	2301      	movs	r3, #1
 801d3f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d3fc:	e000      	b.n	801d400 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 801d3fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d400:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d404:	2b00      	cmp	r3, #0
 801d406:	d10a      	bne.n	801d41e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801d408:	4b7b      	ldr	r3, [pc, #492]	@ (801d5f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d40a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d40c:	f023 0107 	bic.w	r1, r3, #7
 801d410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d416:	4a78      	ldr	r2, [pc, #480]	@ (801d5f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d418:	430b      	orrs	r3, r1
 801d41a:	6513      	str	r3, [r2, #80]	@ 0x50
 801d41c:	e003      	b.n	801d426 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d41e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d422:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 801d426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d42e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 801d432:	f04f 0b00 	mov.w	fp, #0
 801d436:	ea5a 030b 	orrs.w	r3, sl, fp
 801d43a:	d04c      	beq.n	801d4d6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 801d43c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d440:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d442:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801d446:	d030      	beq.n	801d4aa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 801d448:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801d44c:	d829      	bhi.n	801d4a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801d44e:	2bc0      	cmp	r3, #192	@ 0xc0
 801d450:	d02d      	beq.n	801d4ae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 801d452:	2bc0      	cmp	r3, #192	@ 0xc0
 801d454:	d825      	bhi.n	801d4a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801d456:	2b80      	cmp	r3, #128	@ 0x80
 801d458:	d018      	beq.n	801d48c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 801d45a:	2b80      	cmp	r3, #128	@ 0x80
 801d45c:	d821      	bhi.n	801d4a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801d45e:	2b00      	cmp	r3, #0
 801d460:	d002      	beq.n	801d468 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 801d462:	2b40      	cmp	r3, #64	@ 0x40
 801d464:	d007      	beq.n	801d476 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 801d466:	e01c      	b.n	801d4a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d468:	4b63      	ldr	r3, [pc, #396]	@ (801d5f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d46a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d46c:	4a62      	ldr	r2, [pc, #392]	@ (801d5f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d46e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d472:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801d474:	e01c      	b.n	801d4b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d47a:	3308      	adds	r3, #8
 801d47c:	2100      	movs	r1, #0
 801d47e:	4618      	mov	r0, r3
 801d480:	f002 fab8 	bl	801f9f4 <RCCEx_PLL2_Config>
 801d484:	4603      	mov	r3, r0
 801d486:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801d48a:	e011      	b.n	801d4b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801d48c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d490:	3328      	adds	r3, #40	@ 0x28
 801d492:	2100      	movs	r1, #0
 801d494:	4618      	mov	r0, r3
 801d496:	f002 fb5f 	bl	801fb58 <RCCEx_PLL3_Config>
 801d49a:	4603      	mov	r3, r0
 801d49c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801d4a0:	e006      	b.n	801d4b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d4a2:	2301      	movs	r3, #1
 801d4a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d4a8:	e002      	b.n	801d4b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801d4aa:	bf00      	nop
 801d4ac:	e000      	b.n	801d4b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801d4ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d4b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d4b4:	2b00      	cmp	r3, #0
 801d4b6:	d10a      	bne.n	801d4ce <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 801d4b8:	4b4f      	ldr	r3, [pc, #316]	@ (801d5f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d4ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d4bc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 801d4c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d4c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d4c6:	4a4c      	ldr	r2, [pc, #304]	@ (801d5f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d4c8:	430b      	orrs	r3, r1
 801d4ca:	6513      	str	r3, [r2, #80]	@ 0x50
 801d4cc:	e003      	b.n	801d4d6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d4ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d4d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801d4d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d4de:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 801d4e2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 801d4e6:	2300      	movs	r3, #0
 801d4e8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 801d4ec:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 801d4f0:	460b      	mov	r3, r1
 801d4f2:	4313      	orrs	r3, r2
 801d4f4:	d053      	beq.n	801d59e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 801d4f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d4fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801d4fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801d502:	d035      	beq.n	801d570 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 801d504:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801d508:	d82e      	bhi.n	801d568 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801d50a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801d50e:	d031      	beq.n	801d574 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 801d510:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801d514:	d828      	bhi.n	801d568 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801d516:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801d51a:	d01a      	beq.n	801d552 <HAL_RCCEx_PeriphCLKConfig+0x292>
 801d51c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801d520:	d822      	bhi.n	801d568 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801d522:	2b00      	cmp	r3, #0
 801d524:	d003      	beq.n	801d52e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 801d526:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801d52a:	d007      	beq.n	801d53c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 801d52c:	e01c      	b.n	801d568 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d52e:	4b32      	ldr	r3, [pc, #200]	@ (801d5f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d532:	4a31      	ldr	r2, [pc, #196]	@ (801d5f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d534:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d538:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801d53a:	e01c      	b.n	801d576 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d53c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d540:	3308      	adds	r3, #8
 801d542:	2100      	movs	r1, #0
 801d544:	4618      	mov	r0, r3
 801d546:	f002 fa55 	bl	801f9f4 <RCCEx_PLL2_Config>
 801d54a:	4603      	mov	r3, r0
 801d54c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801d550:	e011      	b.n	801d576 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801d552:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d556:	3328      	adds	r3, #40	@ 0x28
 801d558:	2100      	movs	r1, #0
 801d55a:	4618      	mov	r0, r3
 801d55c:	f002 fafc 	bl	801fb58 <RCCEx_PLL3_Config>
 801d560:	4603      	mov	r3, r0
 801d562:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801d566:	e006      	b.n	801d576 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801d568:	2301      	movs	r3, #1
 801d56a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d56e:	e002      	b.n	801d576 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801d570:	bf00      	nop
 801d572:	e000      	b.n	801d576 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801d574:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d576:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d57a:	2b00      	cmp	r3, #0
 801d57c:	d10b      	bne.n	801d596 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 801d57e:	4b1e      	ldr	r3, [pc, #120]	@ (801d5f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d582:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 801d586:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d58a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801d58e:	4a1a      	ldr	r2, [pc, #104]	@ (801d5f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d590:	430b      	orrs	r3, r1
 801d592:	6593      	str	r3, [r2, #88]	@ 0x58
 801d594:	e003      	b.n	801d59e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d596:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d59a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801d59e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d5a6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 801d5aa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 801d5ae:	2300      	movs	r3, #0
 801d5b0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 801d5b4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 801d5b8:	460b      	mov	r3, r1
 801d5ba:	4313      	orrs	r3, r2
 801d5bc:	d056      	beq.n	801d66c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 801d5be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d5c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801d5c6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801d5ca:	d038      	beq.n	801d63e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 801d5cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801d5d0:	d831      	bhi.n	801d636 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801d5d2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801d5d6:	d034      	beq.n	801d642 <HAL_RCCEx_PeriphCLKConfig+0x382>
 801d5d8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801d5dc:	d82b      	bhi.n	801d636 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801d5de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801d5e2:	d01d      	beq.n	801d620 <HAL_RCCEx_PeriphCLKConfig+0x360>
 801d5e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801d5e8:	d825      	bhi.n	801d636 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801d5ea:	2b00      	cmp	r3, #0
 801d5ec:	d006      	beq.n	801d5fc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 801d5ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801d5f2:	d00a      	beq.n	801d60a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 801d5f4:	e01f      	b.n	801d636 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801d5f6:	bf00      	nop
 801d5f8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d5fc:	4ba2      	ldr	r3, [pc, #648]	@ (801d888 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d5fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d600:	4aa1      	ldr	r2, [pc, #644]	@ (801d888 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d602:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d606:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801d608:	e01c      	b.n	801d644 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d60a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d60e:	3308      	adds	r3, #8
 801d610:	2100      	movs	r1, #0
 801d612:	4618      	mov	r0, r3
 801d614:	f002 f9ee 	bl	801f9f4 <RCCEx_PLL2_Config>
 801d618:	4603      	mov	r3, r0
 801d61a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801d61e:	e011      	b.n	801d644 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801d620:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d624:	3328      	adds	r3, #40	@ 0x28
 801d626:	2100      	movs	r1, #0
 801d628:	4618      	mov	r0, r3
 801d62a:	f002 fa95 	bl	801fb58 <RCCEx_PLL3_Config>
 801d62e:	4603      	mov	r3, r0
 801d630:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801d634:	e006      	b.n	801d644 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801d636:	2301      	movs	r3, #1
 801d638:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d63c:	e002      	b.n	801d644 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801d63e:	bf00      	nop
 801d640:	e000      	b.n	801d644 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801d642:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d644:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d648:	2b00      	cmp	r3, #0
 801d64a:	d10b      	bne.n	801d664 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 801d64c:	4b8e      	ldr	r3, [pc, #568]	@ (801d888 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d64e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d650:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 801d654:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d658:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801d65c:	4a8a      	ldr	r2, [pc, #552]	@ (801d888 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d65e:	430b      	orrs	r3, r1
 801d660:	6593      	str	r3, [r2, #88]	@ 0x58
 801d662:	e003      	b.n	801d66c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d664:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d668:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 801d66c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d670:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d674:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 801d678:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 801d67c:	2300      	movs	r3, #0
 801d67e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 801d682:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 801d686:	460b      	mov	r3, r1
 801d688:	4313      	orrs	r3, r2
 801d68a:	d03a      	beq.n	801d702 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 801d68c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d692:	2b30      	cmp	r3, #48	@ 0x30
 801d694:	d01f      	beq.n	801d6d6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 801d696:	2b30      	cmp	r3, #48	@ 0x30
 801d698:	d819      	bhi.n	801d6ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801d69a:	2b20      	cmp	r3, #32
 801d69c:	d00c      	beq.n	801d6b8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 801d69e:	2b20      	cmp	r3, #32
 801d6a0:	d815      	bhi.n	801d6ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801d6a2:	2b00      	cmp	r3, #0
 801d6a4:	d019      	beq.n	801d6da <HAL_RCCEx_PeriphCLKConfig+0x41a>
 801d6a6:	2b10      	cmp	r3, #16
 801d6a8:	d111      	bne.n	801d6ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d6aa:	4b77      	ldr	r3, [pc, #476]	@ (801d888 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d6ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d6ae:	4a76      	ldr	r2, [pc, #472]	@ (801d888 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d6b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d6b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801d6b6:	e011      	b.n	801d6dc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801d6b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d6bc:	3308      	adds	r3, #8
 801d6be:	2102      	movs	r1, #2
 801d6c0:	4618      	mov	r0, r3
 801d6c2:	f002 f997 	bl	801f9f4 <RCCEx_PLL2_Config>
 801d6c6:	4603      	mov	r3, r0
 801d6c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801d6cc:	e006      	b.n	801d6dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801d6ce:	2301      	movs	r3, #1
 801d6d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d6d4:	e002      	b.n	801d6dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801d6d6:	bf00      	nop
 801d6d8:	e000      	b.n	801d6dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801d6da:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d6dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d6e0:	2b00      	cmp	r3, #0
 801d6e2:	d10a      	bne.n	801d6fa <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801d6e4:	4b68      	ldr	r3, [pc, #416]	@ (801d888 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d6e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d6e8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 801d6ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d6f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d6f2:	4a65      	ldr	r2, [pc, #404]	@ (801d888 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d6f4:	430b      	orrs	r3, r1
 801d6f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801d6f8:	e003      	b.n	801d702 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d6fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d6fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801d702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d706:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d70a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 801d70e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 801d712:	2300      	movs	r3, #0
 801d714:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 801d718:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 801d71c:	460b      	mov	r3, r1
 801d71e:	4313      	orrs	r3, r2
 801d720:	d051      	beq.n	801d7c6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 801d722:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d726:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801d728:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801d72c:	d035      	beq.n	801d79a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 801d72e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801d732:	d82e      	bhi.n	801d792 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801d734:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801d738:	d031      	beq.n	801d79e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 801d73a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801d73e:	d828      	bhi.n	801d792 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801d740:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801d744:	d01a      	beq.n	801d77c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 801d746:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801d74a:	d822      	bhi.n	801d792 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801d74c:	2b00      	cmp	r3, #0
 801d74e:	d003      	beq.n	801d758 <HAL_RCCEx_PeriphCLKConfig+0x498>
 801d750:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801d754:	d007      	beq.n	801d766 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 801d756:	e01c      	b.n	801d792 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d758:	4b4b      	ldr	r3, [pc, #300]	@ (801d888 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d75a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d75c:	4a4a      	ldr	r2, [pc, #296]	@ (801d888 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d75e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d762:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801d764:	e01c      	b.n	801d7a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d76a:	3308      	adds	r3, #8
 801d76c:	2100      	movs	r1, #0
 801d76e:	4618      	mov	r0, r3
 801d770:	f002 f940 	bl	801f9f4 <RCCEx_PLL2_Config>
 801d774:	4603      	mov	r3, r0
 801d776:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801d77a:	e011      	b.n	801d7a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801d77c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d780:	3328      	adds	r3, #40	@ 0x28
 801d782:	2100      	movs	r1, #0
 801d784:	4618      	mov	r0, r3
 801d786:	f002 f9e7 	bl	801fb58 <RCCEx_PLL3_Config>
 801d78a:	4603      	mov	r3, r0
 801d78c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801d790:	e006      	b.n	801d7a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d792:	2301      	movs	r3, #1
 801d794:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d798:	e002      	b.n	801d7a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801d79a:	bf00      	nop
 801d79c:	e000      	b.n	801d7a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801d79e:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d7a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d7a4:	2b00      	cmp	r3, #0
 801d7a6:	d10a      	bne.n	801d7be <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 801d7a8:	4b37      	ldr	r3, [pc, #220]	@ (801d888 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d7aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d7ac:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 801d7b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d7b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801d7b6:	4a34      	ldr	r2, [pc, #208]	@ (801d888 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d7b8:	430b      	orrs	r3, r1
 801d7ba:	6513      	str	r3, [r2, #80]	@ 0x50
 801d7bc:	e003      	b.n	801d7c6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d7be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d7c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801d7c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d7ce:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 801d7d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801d7d6:	2300      	movs	r3, #0
 801d7d8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 801d7dc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 801d7e0:	460b      	mov	r3, r1
 801d7e2:	4313      	orrs	r3, r2
 801d7e4:	d056      	beq.n	801d894 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 801d7e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d7ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801d7ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801d7f0:	d033      	beq.n	801d85a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 801d7f2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801d7f6:	d82c      	bhi.n	801d852 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801d7f8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801d7fc:	d02f      	beq.n	801d85e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 801d7fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801d802:	d826      	bhi.n	801d852 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801d804:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801d808:	d02b      	beq.n	801d862 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 801d80a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801d80e:	d820      	bhi.n	801d852 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801d810:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801d814:	d012      	beq.n	801d83c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 801d816:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801d81a:	d81a      	bhi.n	801d852 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801d81c:	2b00      	cmp	r3, #0
 801d81e:	d022      	beq.n	801d866 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 801d820:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801d824:	d115      	bne.n	801d852 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801d826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d82a:	3308      	adds	r3, #8
 801d82c:	2101      	movs	r1, #1
 801d82e:	4618      	mov	r0, r3
 801d830:	f002 f8e0 	bl	801f9f4 <RCCEx_PLL2_Config>
 801d834:	4603      	mov	r3, r0
 801d836:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801d83a:	e015      	b.n	801d868 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801d83c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d840:	3328      	adds	r3, #40	@ 0x28
 801d842:	2101      	movs	r1, #1
 801d844:	4618      	mov	r0, r3
 801d846:	f002 f987 	bl	801fb58 <RCCEx_PLL3_Config>
 801d84a:	4603      	mov	r3, r0
 801d84c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801d850:	e00a      	b.n	801d868 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d852:	2301      	movs	r3, #1
 801d854:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d858:	e006      	b.n	801d868 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801d85a:	bf00      	nop
 801d85c:	e004      	b.n	801d868 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801d85e:	bf00      	nop
 801d860:	e002      	b.n	801d868 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801d862:	bf00      	nop
 801d864:	e000      	b.n	801d868 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801d866:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d868:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d86c:	2b00      	cmp	r3, #0
 801d86e:	d10d      	bne.n	801d88c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 801d870:	4b05      	ldr	r3, [pc, #20]	@ (801d888 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d872:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d874:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 801d878:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d87c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801d87e:	4a02      	ldr	r2, [pc, #8]	@ (801d888 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d880:	430b      	orrs	r3, r1
 801d882:	6513      	str	r3, [r2, #80]	@ 0x50
 801d884:	e006      	b.n	801d894 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 801d886:	bf00      	nop
 801d888:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d88c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d890:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 801d894:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d898:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d89c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 801d8a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 801d8a4:	2300      	movs	r3, #0
 801d8a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 801d8aa:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 801d8ae:	460b      	mov	r3, r1
 801d8b0:	4313      	orrs	r3, r2
 801d8b2:	d055      	beq.n	801d960 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 801d8b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d8b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801d8bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801d8c0:	d033      	beq.n	801d92a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 801d8c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801d8c6:	d82c      	bhi.n	801d922 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801d8c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801d8cc:	d02f      	beq.n	801d92e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 801d8ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801d8d2:	d826      	bhi.n	801d922 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801d8d4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801d8d8:	d02b      	beq.n	801d932 <HAL_RCCEx_PeriphCLKConfig+0x672>
 801d8da:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801d8de:	d820      	bhi.n	801d922 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801d8e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801d8e4:	d012      	beq.n	801d90c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 801d8e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801d8ea:	d81a      	bhi.n	801d922 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801d8ec:	2b00      	cmp	r3, #0
 801d8ee:	d022      	beq.n	801d936 <HAL_RCCEx_PeriphCLKConfig+0x676>
 801d8f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801d8f4:	d115      	bne.n	801d922 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801d8f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d8fa:	3308      	adds	r3, #8
 801d8fc:	2101      	movs	r1, #1
 801d8fe:	4618      	mov	r0, r3
 801d900:	f002 f878 	bl	801f9f4 <RCCEx_PLL2_Config>
 801d904:	4603      	mov	r3, r0
 801d906:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801d90a:	e015      	b.n	801d938 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801d90c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d910:	3328      	adds	r3, #40	@ 0x28
 801d912:	2101      	movs	r1, #1
 801d914:	4618      	mov	r0, r3
 801d916:	f002 f91f 	bl	801fb58 <RCCEx_PLL3_Config>
 801d91a:	4603      	mov	r3, r0
 801d91c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801d920:	e00a      	b.n	801d938 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 801d922:	2301      	movs	r3, #1
 801d924:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d928:	e006      	b.n	801d938 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801d92a:	bf00      	nop
 801d92c:	e004      	b.n	801d938 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801d92e:	bf00      	nop
 801d930:	e002      	b.n	801d938 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801d932:	bf00      	nop
 801d934:	e000      	b.n	801d938 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801d936:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d938:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d93c:	2b00      	cmp	r3, #0
 801d93e:	d10b      	bne.n	801d958 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801d940:	4ba3      	ldr	r3, [pc, #652]	@ (801dbd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d944:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801d948:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d94c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801d950:	4a9f      	ldr	r2, [pc, #636]	@ (801dbd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d952:	430b      	orrs	r3, r1
 801d954:	6593      	str	r3, [r2, #88]	@ 0x58
 801d956:	e003      	b.n	801d960 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d958:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d95c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801d960:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d964:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d968:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 801d96c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801d970:	2300      	movs	r3, #0
 801d972:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 801d976:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 801d97a:	460b      	mov	r3, r1
 801d97c:	4313      	orrs	r3, r2
 801d97e:	d037      	beq.n	801d9f0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 801d980:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d984:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d986:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801d98a:	d00e      	beq.n	801d9aa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 801d98c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801d990:	d816      	bhi.n	801d9c0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 801d992:	2b00      	cmp	r3, #0
 801d994:	d018      	beq.n	801d9c8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 801d996:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801d99a:	d111      	bne.n	801d9c0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d99c:	4b8c      	ldr	r3, [pc, #560]	@ (801dbd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d99e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d9a0:	4a8b      	ldr	r2, [pc, #556]	@ (801dbd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d9a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d9a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801d9a8:	e00f      	b.n	801d9ca <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801d9aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d9ae:	3308      	adds	r3, #8
 801d9b0:	2101      	movs	r1, #1
 801d9b2:	4618      	mov	r0, r3
 801d9b4:	f002 f81e 	bl	801f9f4 <RCCEx_PLL2_Config>
 801d9b8:	4603      	mov	r3, r0
 801d9ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801d9be:	e004      	b.n	801d9ca <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d9c0:	2301      	movs	r3, #1
 801d9c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d9c6:	e000      	b.n	801d9ca <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 801d9c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d9ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d9ce:	2b00      	cmp	r3, #0
 801d9d0:	d10a      	bne.n	801d9e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801d9d2:	4b7f      	ldr	r3, [pc, #508]	@ (801dbd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d9d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d9d6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801d9da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d9de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d9e0:	4a7b      	ldr	r2, [pc, #492]	@ (801dbd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d9e2:	430b      	orrs	r3, r1
 801d9e4:	6513      	str	r3, [r2, #80]	@ 0x50
 801d9e6:	e003      	b.n	801d9f0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d9e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d9ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 801d9f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d9f8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 801d9fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801da00:	2300      	movs	r3, #0
 801da02:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 801da06:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 801da0a:	460b      	mov	r3, r1
 801da0c:	4313      	orrs	r3, r2
 801da0e:	d039      	beq.n	801da84 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 801da10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801da14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801da16:	2b03      	cmp	r3, #3
 801da18:	d81c      	bhi.n	801da54 <HAL_RCCEx_PeriphCLKConfig+0x794>
 801da1a:	a201      	add	r2, pc, #4	@ (adr r2, 801da20 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 801da1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801da20:	0801da5d 	.word	0x0801da5d
 801da24:	0801da31 	.word	0x0801da31
 801da28:	0801da3f 	.word	0x0801da3f
 801da2c:	0801da5d 	.word	0x0801da5d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801da30:	4b67      	ldr	r3, [pc, #412]	@ (801dbd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801da32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801da34:	4a66      	ldr	r2, [pc, #408]	@ (801dbd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801da36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801da3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 801da3c:	e00f      	b.n	801da5e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801da3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801da42:	3308      	adds	r3, #8
 801da44:	2102      	movs	r1, #2
 801da46:	4618      	mov	r0, r3
 801da48:	f001 ffd4 	bl	801f9f4 <RCCEx_PLL2_Config>
 801da4c:	4603      	mov	r3, r0
 801da4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 801da52:	e004      	b.n	801da5e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801da54:	2301      	movs	r3, #1
 801da56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801da5a:	e000      	b.n	801da5e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 801da5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801da5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801da62:	2b00      	cmp	r3, #0
 801da64:	d10a      	bne.n	801da7c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 801da66:	4b5a      	ldr	r3, [pc, #360]	@ (801dbd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801da68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801da6a:	f023 0103 	bic.w	r1, r3, #3
 801da6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801da72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801da74:	4a56      	ldr	r2, [pc, #344]	@ (801dbd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801da76:	430b      	orrs	r3, r1
 801da78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801da7a:	e003      	b.n	801da84 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801da7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801da80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801da84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801da88:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da8c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 801da90:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801da94:	2300      	movs	r3, #0
 801da96:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 801da9a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 801da9e:	460b      	mov	r3, r1
 801daa0:	4313      	orrs	r3, r2
 801daa2:	f000 809f 	beq.w	801dbe4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801daa6:	4b4b      	ldr	r3, [pc, #300]	@ (801dbd4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801daa8:	681b      	ldr	r3, [r3, #0]
 801daaa:	4a4a      	ldr	r2, [pc, #296]	@ (801dbd4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801daac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801dab0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801dab2:	f7fb fce5 	bl	8019480 <HAL_GetTick>
 801dab6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801daba:	e00b      	b.n	801dad4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801dabc:	f7fb fce0 	bl	8019480 <HAL_GetTick>
 801dac0:	4602      	mov	r2, r0
 801dac2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801dac6:	1ad3      	subs	r3, r2, r3
 801dac8:	2b64      	cmp	r3, #100	@ 0x64
 801daca:	d903      	bls.n	801dad4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 801dacc:	2303      	movs	r3, #3
 801dace:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801dad2:	e005      	b.n	801dae0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801dad4:	4b3f      	ldr	r3, [pc, #252]	@ (801dbd4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801dad6:	681b      	ldr	r3, [r3, #0]
 801dad8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801dadc:	2b00      	cmp	r3, #0
 801dade:	d0ed      	beq.n	801dabc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 801dae0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dae4:	2b00      	cmp	r3, #0
 801dae6:	d179      	bne.n	801dbdc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 801dae8:	4b39      	ldr	r3, [pc, #228]	@ (801dbd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801daea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801daec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801daf0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801daf4:	4053      	eors	r3, r2
 801daf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801dafa:	2b00      	cmp	r3, #0
 801dafc:	d015      	beq.n	801db2a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801dafe:	4b34      	ldr	r3, [pc, #208]	@ (801dbd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801db00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801db02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801db06:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801db0a:	4b31      	ldr	r3, [pc, #196]	@ (801dbd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801db0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801db0e:	4a30      	ldr	r2, [pc, #192]	@ (801dbd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801db10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801db14:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 801db16:	4b2e      	ldr	r3, [pc, #184]	@ (801dbd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801db18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801db1a:	4a2d      	ldr	r2, [pc, #180]	@ (801dbd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801db1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801db20:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 801db22:	4a2b      	ldr	r2, [pc, #172]	@ (801dbd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801db24:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801db28:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801db2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db2e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801db32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801db36:	d118      	bne.n	801db6a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801db38:	f7fb fca2 	bl	8019480 <HAL_GetTick>
 801db3c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801db40:	e00d      	b.n	801db5e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801db42:	f7fb fc9d 	bl	8019480 <HAL_GetTick>
 801db46:	4602      	mov	r2, r0
 801db48:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801db4c:	1ad2      	subs	r2, r2, r3
 801db4e:	f241 3388 	movw	r3, #5000	@ 0x1388
 801db52:	429a      	cmp	r2, r3
 801db54:	d903      	bls.n	801db5e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 801db56:	2303      	movs	r3, #3
 801db58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 801db5c:	e005      	b.n	801db6a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801db5e:	4b1c      	ldr	r3, [pc, #112]	@ (801dbd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801db60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801db62:	f003 0302 	and.w	r3, r3, #2
 801db66:	2b00      	cmp	r3, #0
 801db68:	d0eb      	beq.n	801db42 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 801db6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801db6e:	2b00      	cmp	r3, #0
 801db70:	d129      	bne.n	801dbc6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801db72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db76:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801db7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801db7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801db82:	d10e      	bne.n	801dba2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 801db84:	4b12      	ldr	r3, [pc, #72]	@ (801dbd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801db86:	691b      	ldr	r3, [r3, #16]
 801db88:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 801db8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db90:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801db94:	091a      	lsrs	r2, r3, #4
 801db96:	4b10      	ldr	r3, [pc, #64]	@ (801dbd8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 801db98:	4013      	ands	r3, r2
 801db9a:	4a0d      	ldr	r2, [pc, #52]	@ (801dbd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801db9c:	430b      	orrs	r3, r1
 801db9e:	6113      	str	r3, [r2, #16]
 801dba0:	e005      	b.n	801dbae <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 801dba2:	4b0b      	ldr	r3, [pc, #44]	@ (801dbd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dba4:	691b      	ldr	r3, [r3, #16]
 801dba6:	4a0a      	ldr	r2, [pc, #40]	@ (801dbd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dba8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801dbac:	6113      	str	r3, [r2, #16]
 801dbae:	4b08      	ldr	r3, [pc, #32]	@ (801dbd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dbb0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 801dbb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dbb6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801dbba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801dbbe:	4a04      	ldr	r2, [pc, #16]	@ (801dbd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dbc0:	430b      	orrs	r3, r1
 801dbc2:	6713      	str	r3, [r2, #112]	@ 0x70
 801dbc4:	e00e      	b.n	801dbe4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801dbc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dbca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801dbce:	e009      	b.n	801dbe4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 801dbd0:	58024400 	.word	0x58024400
 801dbd4:	58024800 	.word	0x58024800
 801dbd8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801dbdc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dbe0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 801dbe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dbe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dbec:	f002 0301 	and.w	r3, r2, #1
 801dbf0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801dbf4:	2300      	movs	r3, #0
 801dbf6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801dbfa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 801dbfe:	460b      	mov	r3, r1
 801dc00:	4313      	orrs	r3, r2
 801dc02:	f000 8089 	beq.w	801dd18 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 801dc06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dc0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801dc0c:	2b28      	cmp	r3, #40	@ 0x28
 801dc0e:	d86b      	bhi.n	801dce8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 801dc10:	a201      	add	r2, pc, #4	@ (adr r2, 801dc18 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 801dc12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dc16:	bf00      	nop
 801dc18:	0801dcf1 	.word	0x0801dcf1
 801dc1c:	0801dce9 	.word	0x0801dce9
 801dc20:	0801dce9 	.word	0x0801dce9
 801dc24:	0801dce9 	.word	0x0801dce9
 801dc28:	0801dce9 	.word	0x0801dce9
 801dc2c:	0801dce9 	.word	0x0801dce9
 801dc30:	0801dce9 	.word	0x0801dce9
 801dc34:	0801dce9 	.word	0x0801dce9
 801dc38:	0801dcbd 	.word	0x0801dcbd
 801dc3c:	0801dce9 	.word	0x0801dce9
 801dc40:	0801dce9 	.word	0x0801dce9
 801dc44:	0801dce9 	.word	0x0801dce9
 801dc48:	0801dce9 	.word	0x0801dce9
 801dc4c:	0801dce9 	.word	0x0801dce9
 801dc50:	0801dce9 	.word	0x0801dce9
 801dc54:	0801dce9 	.word	0x0801dce9
 801dc58:	0801dcd3 	.word	0x0801dcd3
 801dc5c:	0801dce9 	.word	0x0801dce9
 801dc60:	0801dce9 	.word	0x0801dce9
 801dc64:	0801dce9 	.word	0x0801dce9
 801dc68:	0801dce9 	.word	0x0801dce9
 801dc6c:	0801dce9 	.word	0x0801dce9
 801dc70:	0801dce9 	.word	0x0801dce9
 801dc74:	0801dce9 	.word	0x0801dce9
 801dc78:	0801dcf1 	.word	0x0801dcf1
 801dc7c:	0801dce9 	.word	0x0801dce9
 801dc80:	0801dce9 	.word	0x0801dce9
 801dc84:	0801dce9 	.word	0x0801dce9
 801dc88:	0801dce9 	.word	0x0801dce9
 801dc8c:	0801dce9 	.word	0x0801dce9
 801dc90:	0801dce9 	.word	0x0801dce9
 801dc94:	0801dce9 	.word	0x0801dce9
 801dc98:	0801dcf1 	.word	0x0801dcf1
 801dc9c:	0801dce9 	.word	0x0801dce9
 801dca0:	0801dce9 	.word	0x0801dce9
 801dca4:	0801dce9 	.word	0x0801dce9
 801dca8:	0801dce9 	.word	0x0801dce9
 801dcac:	0801dce9 	.word	0x0801dce9
 801dcb0:	0801dce9 	.word	0x0801dce9
 801dcb4:	0801dce9 	.word	0x0801dce9
 801dcb8:	0801dcf1 	.word	0x0801dcf1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801dcbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dcc0:	3308      	adds	r3, #8
 801dcc2:	2101      	movs	r1, #1
 801dcc4:	4618      	mov	r0, r3
 801dcc6:	f001 fe95 	bl	801f9f4 <RCCEx_PLL2_Config>
 801dcca:	4603      	mov	r3, r0
 801dccc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801dcd0:	e00f      	b.n	801dcf2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801dcd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dcd6:	3328      	adds	r3, #40	@ 0x28
 801dcd8:	2101      	movs	r1, #1
 801dcda:	4618      	mov	r0, r3
 801dcdc:	f001 ff3c 	bl	801fb58 <RCCEx_PLL3_Config>
 801dce0:	4603      	mov	r3, r0
 801dce2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801dce6:	e004      	b.n	801dcf2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801dce8:	2301      	movs	r3, #1
 801dcea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801dcee:	e000      	b.n	801dcf2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 801dcf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 801dcf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dcf6:	2b00      	cmp	r3, #0
 801dcf8:	d10a      	bne.n	801dd10 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 801dcfa:	4bbf      	ldr	r3, [pc, #764]	@ (801dff8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801dcfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801dcfe:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 801dd02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dd06:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801dd08:	4abb      	ldr	r2, [pc, #748]	@ (801dff8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801dd0a:	430b      	orrs	r3, r1
 801dd0c:	6553      	str	r3, [r2, #84]	@ 0x54
 801dd0e:	e003      	b.n	801dd18 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801dd10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dd14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 801dd18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dd1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd20:	f002 0302 	and.w	r3, r2, #2
 801dd24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801dd28:	2300      	movs	r3, #0
 801dd2a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801dd2e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 801dd32:	460b      	mov	r3, r1
 801dd34:	4313      	orrs	r3, r2
 801dd36:	d041      	beq.n	801ddbc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 801dd38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dd3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801dd3e:	2b05      	cmp	r3, #5
 801dd40:	d824      	bhi.n	801dd8c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 801dd42:	a201      	add	r2, pc, #4	@ (adr r2, 801dd48 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 801dd44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dd48:	0801dd95 	.word	0x0801dd95
 801dd4c:	0801dd61 	.word	0x0801dd61
 801dd50:	0801dd77 	.word	0x0801dd77
 801dd54:	0801dd95 	.word	0x0801dd95
 801dd58:	0801dd95 	.word	0x0801dd95
 801dd5c:	0801dd95 	.word	0x0801dd95
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801dd60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dd64:	3308      	adds	r3, #8
 801dd66:	2101      	movs	r1, #1
 801dd68:	4618      	mov	r0, r3
 801dd6a:	f001 fe43 	bl	801f9f4 <RCCEx_PLL2_Config>
 801dd6e:	4603      	mov	r3, r0
 801dd70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801dd74:	e00f      	b.n	801dd96 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801dd76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dd7a:	3328      	adds	r3, #40	@ 0x28
 801dd7c:	2101      	movs	r1, #1
 801dd7e:	4618      	mov	r0, r3
 801dd80:	f001 feea 	bl	801fb58 <RCCEx_PLL3_Config>
 801dd84:	4603      	mov	r3, r0
 801dd86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801dd8a:	e004      	b.n	801dd96 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801dd8c:	2301      	movs	r3, #1
 801dd8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801dd92:	e000      	b.n	801dd96 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 801dd94:	bf00      	nop
    }

    if (ret == HAL_OK)
 801dd96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dd9a:	2b00      	cmp	r3, #0
 801dd9c:	d10a      	bne.n	801ddb4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 801dd9e:	4b96      	ldr	r3, [pc, #600]	@ (801dff8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801dda0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801dda2:	f023 0107 	bic.w	r1, r3, #7
 801dda6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ddaa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801ddac:	4a92      	ldr	r2, [pc, #584]	@ (801dff8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801ddae:	430b      	orrs	r3, r1
 801ddb0:	6553      	str	r3, [r2, #84]	@ 0x54
 801ddb2:	e003      	b.n	801ddbc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ddb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ddb8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801ddbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ddc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ddc4:	f002 0304 	and.w	r3, r2, #4
 801ddc8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801ddcc:	2300      	movs	r3, #0
 801ddce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801ddd2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 801ddd6:	460b      	mov	r3, r1
 801ddd8:	4313      	orrs	r3, r2
 801ddda:	d044      	beq.n	801de66 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 801dddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dde0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801dde4:	2b05      	cmp	r3, #5
 801dde6:	d825      	bhi.n	801de34 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 801dde8:	a201      	add	r2, pc, #4	@ (adr r2, 801ddf0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 801ddea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ddee:	bf00      	nop
 801ddf0:	0801de3d 	.word	0x0801de3d
 801ddf4:	0801de09 	.word	0x0801de09
 801ddf8:	0801de1f 	.word	0x0801de1f
 801ddfc:	0801de3d 	.word	0x0801de3d
 801de00:	0801de3d 	.word	0x0801de3d
 801de04:	0801de3d 	.word	0x0801de3d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801de08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801de0c:	3308      	adds	r3, #8
 801de0e:	2101      	movs	r1, #1
 801de10:	4618      	mov	r0, r3
 801de12:	f001 fdef 	bl	801f9f4 <RCCEx_PLL2_Config>
 801de16:	4603      	mov	r3, r0
 801de18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801de1c:	e00f      	b.n	801de3e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801de1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801de22:	3328      	adds	r3, #40	@ 0x28
 801de24:	2101      	movs	r1, #1
 801de26:	4618      	mov	r0, r3
 801de28:	f001 fe96 	bl	801fb58 <RCCEx_PLL3_Config>
 801de2c:	4603      	mov	r3, r0
 801de2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801de32:	e004      	b.n	801de3e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801de34:	2301      	movs	r3, #1
 801de36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801de3a:	e000      	b.n	801de3e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 801de3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801de3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801de42:	2b00      	cmp	r3, #0
 801de44:	d10b      	bne.n	801de5e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801de46:	4b6c      	ldr	r3, [pc, #432]	@ (801dff8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801de48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801de4a:	f023 0107 	bic.w	r1, r3, #7
 801de4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801de52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801de56:	4a68      	ldr	r2, [pc, #416]	@ (801dff8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801de58:	430b      	orrs	r3, r1
 801de5a:	6593      	str	r3, [r2, #88]	@ 0x58
 801de5c:	e003      	b.n	801de66 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801de5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801de62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801de66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801de6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801de6e:	f002 0320 	and.w	r3, r2, #32
 801de72:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801de76:	2300      	movs	r3, #0
 801de78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801de7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 801de80:	460b      	mov	r3, r1
 801de82:	4313      	orrs	r3, r2
 801de84:	d055      	beq.n	801df32 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 801de86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801de8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801de8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801de92:	d033      	beq.n	801defc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 801de94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801de98:	d82c      	bhi.n	801def4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801de9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801de9e:	d02f      	beq.n	801df00 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 801dea0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801dea4:	d826      	bhi.n	801def4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801dea6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801deaa:	d02b      	beq.n	801df04 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 801deac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801deb0:	d820      	bhi.n	801def4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801deb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801deb6:	d012      	beq.n	801dede <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 801deb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801debc:	d81a      	bhi.n	801def4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801debe:	2b00      	cmp	r3, #0
 801dec0:	d022      	beq.n	801df08 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 801dec2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801dec6:	d115      	bne.n	801def4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801dec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801decc:	3308      	adds	r3, #8
 801dece:	2100      	movs	r1, #0
 801ded0:	4618      	mov	r0, r3
 801ded2:	f001 fd8f 	bl	801f9f4 <RCCEx_PLL2_Config>
 801ded6:	4603      	mov	r3, r0
 801ded8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801dedc:	e015      	b.n	801df0a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801dede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dee2:	3328      	adds	r3, #40	@ 0x28
 801dee4:	2102      	movs	r1, #2
 801dee6:	4618      	mov	r0, r3
 801dee8:	f001 fe36 	bl	801fb58 <RCCEx_PLL3_Config>
 801deec:	4603      	mov	r3, r0
 801deee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801def2:	e00a      	b.n	801df0a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801def4:	2301      	movs	r3, #1
 801def6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801defa:	e006      	b.n	801df0a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801defc:	bf00      	nop
 801defe:	e004      	b.n	801df0a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801df00:	bf00      	nop
 801df02:	e002      	b.n	801df0a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801df04:	bf00      	nop
 801df06:	e000      	b.n	801df0a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801df08:	bf00      	nop
    }

    if (ret == HAL_OK)
 801df0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801df0e:	2b00      	cmp	r3, #0
 801df10:	d10b      	bne.n	801df2a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801df12:	4b39      	ldr	r3, [pc, #228]	@ (801dff8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801df14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801df16:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801df1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801df22:	4a35      	ldr	r2, [pc, #212]	@ (801dff8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801df24:	430b      	orrs	r3, r1
 801df26:	6553      	str	r3, [r2, #84]	@ 0x54
 801df28:	e003      	b.n	801df32 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801df2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801df2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 801df32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df36:	e9d3 2300 	ldrd	r2, r3, [r3]
 801df3a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 801df3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801df42:	2300      	movs	r3, #0
 801df44:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801df48:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 801df4c:	460b      	mov	r3, r1
 801df4e:	4313      	orrs	r3, r2
 801df50:	d058      	beq.n	801e004 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 801df52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df56:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801df5a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801df5e:	d033      	beq.n	801dfc8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 801df60:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801df64:	d82c      	bhi.n	801dfc0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801df66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801df6a:	d02f      	beq.n	801dfcc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 801df6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801df70:	d826      	bhi.n	801dfc0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801df72:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801df76:	d02b      	beq.n	801dfd0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 801df78:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801df7c:	d820      	bhi.n	801dfc0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801df7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801df82:	d012      	beq.n	801dfaa <HAL_RCCEx_PeriphCLKConfig+0xcea>
 801df84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801df88:	d81a      	bhi.n	801dfc0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801df8a:	2b00      	cmp	r3, #0
 801df8c:	d022      	beq.n	801dfd4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 801df8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801df92:	d115      	bne.n	801dfc0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801df94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df98:	3308      	adds	r3, #8
 801df9a:	2100      	movs	r1, #0
 801df9c:	4618      	mov	r0, r3
 801df9e:	f001 fd29 	bl	801f9f4 <RCCEx_PLL2_Config>
 801dfa2:	4603      	mov	r3, r0
 801dfa4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801dfa8:	e015      	b.n	801dfd6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801dfaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dfae:	3328      	adds	r3, #40	@ 0x28
 801dfb0:	2102      	movs	r1, #2
 801dfb2:	4618      	mov	r0, r3
 801dfb4:	f001 fdd0 	bl	801fb58 <RCCEx_PLL3_Config>
 801dfb8:	4603      	mov	r3, r0
 801dfba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801dfbe:	e00a      	b.n	801dfd6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801dfc0:	2301      	movs	r3, #1
 801dfc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801dfc6:	e006      	b.n	801dfd6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801dfc8:	bf00      	nop
 801dfca:	e004      	b.n	801dfd6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801dfcc:	bf00      	nop
 801dfce:	e002      	b.n	801dfd6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801dfd0:	bf00      	nop
 801dfd2:	e000      	b.n	801dfd6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801dfd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 801dfd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dfda:	2b00      	cmp	r3, #0
 801dfdc:	d10e      	bne.n	801dffc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801dfde:	4b06      	ldr	r3, [pc, #24]	@ (801dff8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801dfe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801dfe2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 801dfe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dfea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801dfee:	4a02      	ldr	r2, [pc, #8]	@ (801dff8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801dff0:	430b      	orrs	r3, r1
 801dff2:	6593      	str	r3, [r2, #88]	@ 0x58
 801dff4:	e006      	b.n	801e004 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 801dff6:	bf00      	nop
 801dff8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801dffc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e000:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 801e004:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e008:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e00c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 801e010:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801e014:	2300      	movs	r3, #0
 801e016:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801e01a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 801e01e:	460b      	mov	r3, r1
 801e020:	4313      	orrs	r3, r2
 801e022:	d055      	beq.n	801e0d0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 801e024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e028:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801e02c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 801e030:	d033      	beq.n	801e09a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 801e032:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 801e036:	d82c      	bhi.n	801e092 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801e038:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801e03c:	d02f      	beq.n	801e09e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 801e03e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801e042:	d826      	bhi.n	801e092 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801e044:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801e048:	d02b      	beq.n	801e0a2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 801e04a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801e04e:	d820      	bhi.n	801e092 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801e050:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801e054:	d012      	beq.n	801e07c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 801e056:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801e05a:	d81a      	bhi.n	801e092 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801e05c:	2b00      	cmp	r3, #0
 801e05e:	d022      	beq.n	801e0a6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 801e060:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801e064:	d115      	bne.n	801e092 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801e066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e06a:	3308      	adds	r3, #8
 801e06c:	2100      	movs	r1, #0
 801e06e:	4618      	mov	r0, r3
 801e070:	f001 fcc0 	bl	801f9f4 <RCCEx_PLL2_Config>
 801e074:	4603      	mov	r3, r0
 801e076:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801e07a:	e015      	b.n	801e0a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801e07c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e080:	3328      	adds	r3, #40	@ 0x28
 801e082:	2102      	movs	r1, #2
 801e084:	4618      	mov	r0, r3
 801e086:	f001 fd67 	bl	801fb58 <RCCEx_PLL3_Config>
 801e08a:	4603      	mov	r3, r0
 801e08c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801e090:	e00a      	b.n	801e0a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e092:	2301      	movs	r3, #1
 801e094:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e098:	e006      	b.n	801e0a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801e09a:	bf00      	nop
 801e09c:	e004      	b.n	801e0a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801e09e:	bf00      	nop
 801e0a0:	e002      	b.n	801e0a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801e0a2:	bf00      	nop
 801e0a4:	e000      	b.n	801e0a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801e0a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e0a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e0ac:	2b00      	cmp	r3, #0
 801e0ae:	d10b      	bne.n	801e0c8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 801e0b0:	4ba1      	ldr	r3, [pc, #644]	@ (801e338 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e0b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e0b4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 801e0b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e0bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801e0c0:	4a9d      	ldr	r2, [pc, #628]	@ (801e338 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e0c2:	430b      	orrs	r3, r1
 801e0c4:	6593      	str	r3, [r2, #88]	@ 0x58
 801e0c6:	e003      	b.n	801e0d0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e0c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e0cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 801e0d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e0d8:	f002 0308 	and.w	r3, r2, #8
 801e0dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801e0e0:	2300      	movs	r3, #0
 801e0e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801e0e6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 801e0ea:	460b      	mov	r3, r1
 801e0ec:	4313      	orrs	r3, r2
 801e0ee:	d01e      	beq.n	801e12e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 801e0f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e0f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801e0f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801e0fc:	d10c      	bne.n	801e118 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801e0fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e102:	3328      	adds	r3, #40	@ 0x28
 801e104:	2102      	movs	r1, #2
 801e106:	4618      	mov	r0, r3
 801e108:	f001 fd26 	bl	801fb58 <RCCEx_PLL3_Config>
 801e10c:	4603      	mov	r3, r0
 801e10e:	2b00      	cmp	r3, #0
 801e110:	d002      	beq.n	801e118 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 801e112:	2301      	movs	r3, #1
 801e114:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 801e118:	4b87      	ldr	r3, [pc, #540]	@ (801e338 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e11a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e11c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801e120:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e124:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801e128:	4a83      	ldr	r2, [pc, #524]	@ (801e338 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e12a:	430b      	orrs	r3, r1
 801e12c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801e12e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e132:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e136:	f002 0310 	and.w	r3, r2, #16
 801e13a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801e13e:	2300      	movs	r3, #0
 801e140:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801e144:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 801e148:	460b      	mov	r3, r1
 801e14a:	4313      	orrs	r3, r2
 801e14c:	d01e      	beq.n	801e18c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 801e14e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e152:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801e156:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e15a:	d10c      	bne.n	801e176 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801e15c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e160:	3328      	adds	r3, #40	@ 0x28
 801e162:	2102      	movs	r1, #2
 801e164:	4618      	mov	r0, r3
 801e166:	f001 fcf7 	bl	801fb58 <RCCEx_PLL3_Config>
 801e16a:	4603      	mov	r3, r0
 801e16c:	2b00      	cmp	r3, #0
 801e16e:	d002      	beq.n	801e176 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 801e170:	2301      	movs	r3, #1
 801e172:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801e176:	4b70      	ldr	r3, [pc, #448]	@ (801e338 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e17a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801e17e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e182:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801e186:	4a6c      	ldr	r2, [pc, #432]	@ (801e338 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e188:	430b      	orrs	r3, r1
 801e18a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801e18c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e190:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e194:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 801e198:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801e19c:	2300      	movs	r3, #0
 801e19e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801e1a2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 801e1a6:	460b      	mov	r3, r1
 801e1a8:	4313      	orrs	r3, r2
 801e1aa:	d03e      	beq.n	801e22a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 801e1ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e1b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801e1b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801e1b8:	d022      	beq.n	801e200 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 801e1ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801e1be:	d81b      	bhi.n	801e1f8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 801e1c0:	2b00      	cmp	r3, #0
 801e1c2:	d003      	beq.n	801e1cc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 801e1c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801e1c8:	d00b      	beq.n	801e1e2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 801e1ca:	e015      	b.n	801e1f8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801e1cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e1d0:	3308      	adds	r3, #8
 801e1d2:	2100      	movs	r1, #0
 801e1d4:	4618      	mov	r0, r3
 801e1d6:	f001 fc0d 	bl	801f9f4 <RCCEx_PLL2_Config>
 801e1da:	4603      	mov	r3, r0
 801e1dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 801e1e0:	e00f      	b.n	801e202 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801e1e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e1e6:	3328      	adds	r3, #40	@ 0x28
 801e1e8:	2102      	movs	r1, #2
 801e1ea:	4618      	mov	r0, r3
 801e1ec:	f001 fcb4 	bl	801fb58 <RCCEx_PLL3_Config>
 801e1f0:	4603      	mov	r3, r0
 801e1f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 801e1f6:	e004      	b.n	801e202 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e1f8:	2301      	movs	r3, #1
 801e1fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e1fe:	e000      	b.n	801e202 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 801e200:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e202:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e206:	2b00      	cmp	r3, #0
 801e208:	d10b      	bne.n	801e222 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801e20a:	4b4b      	ldr	r3, [pc, #300]	@ (801e338 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e20c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e20e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 801e212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e216:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801e21a:	4a47      	ldr	r2, [pc, #284]	@ (801e338 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e21c:	430b      	orrs	r3, r1
 801e21e:	6593      	str	r3, [r2, #88]	@ 0x58
 801e220:	e003      	b.n	801e22a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e222:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e226:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801e22a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e232:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 801e236:	67bb      	str	r3, [r7, #120]	@ 0x78
 801e238:	2300      	movs	r3, #0
 801e23a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801e23c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 801e240:	460b      	mov	r3, r1
 801e242:	4313      	orrs	r3, r2
 801e244:	d03b      	beq.n	801e2be <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 801e246:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e24a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801e24e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801e252:	d01f      	beq.n	801e294 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 801e254:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801e258:	d818      	bhi.n	801e28c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 801e25a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801e25e:	d003      	beq.n	801e268 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 801e260:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801e264:	d007      	beq.n	801e276 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 801e266:	e011      	b.n	801e28c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e268:	4b33      	ldr	r3, [pc, #204]	@ (801e338 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e26a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e26c:	4a32      	ldr	r2, [pc, #200]	@ (801e338 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e26e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e272:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 801e274:	e00f      	b.n	801e296 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801e276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e27a:	3328      	adds	r3, #40	@ 0x28
 801e27c:	2101      	movs	r1, #1
 801e27e:	4618      	mov	r0, r3
 801e280:	f001 fc6a 	bl	801fb58 <RCCEx_PLL3_Config>
 801e284:	4603      	mov	r3, r0
 801e286:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 801e28a:	e004      	b.n	801e296 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e28c:	2301      	movs	r3, #1
 801e28e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e292:	e000      	b.n	801e296 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 801e294:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e296:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e29a:	2b00      	cmp	r3, #0
 801e29c:	d10b      	bne.n	801e2b6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801e29e:	4b26      	ldr	r3, [pc, #152]	@ (801e338 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e2a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e2a2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801e2a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e2aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801e2ae:	4a22      	ldr	r2, [pc, #136]	@ (801e338 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e2b0:	430b      	orrs	r3, r1
 801e2b2:	6553      	str	r3, [r2, #84]	@ 0x54
 801e2b4:	e003      	b.n	801e2be <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e2b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e2ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801e2be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e2c6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 801e2ca:	673b      	str	r3, [r7, #112]	@ 0x70
 801e2cc:	2300      	movs	r3, #0
 801e2ce:	677b      	str	r3, [r7, #116]	@ 0x74
 801e2d0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 801e2d4:	460b      	mov	r3, r1
 801e2d6:	4313      	orrs	r3, r2
 801e2d8:	d034      	beq.n	801e344 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 801e2da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e2de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e2e0:	2b00      	cmp	r3, #0
 801e2e2:	d003      	beq.n	801e2ec <HAL_RCCEx_PeriphCLKConfig+0x102c>
 801e2e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801e2e8:	d007      	beq.n	801e2fa <HAL_RCCEx_PeriphCLKConfig+0x103a>
 801e2ea:	e011      	b.n	801e310 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e2ec:	4b12      	ldr	r3, [pc, #72]	@ (801e338 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e2ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e2f0:	4a11      	ldr	r2, [pc, #68]	@ (801e338 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e2f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e2f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801e2f8:	e00e      	b.n	801e318 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801e2fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e2fe:	3308      	adds	r3, #8
 801e300:	2102      	movs	r1, #2
 801e302:	4618      	mov	r0, r3
 801e304:	f001 fb76 	bl	801f9f4 <RCCEx_PLL2_Config>
 801e308:	4603      	mov	r3, r0
 801e30a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801e30e:	e003      	b.n	801e318 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 801e310:	2301      	movs	r3, #1
 801e312:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e316:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e318:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e31c:	2b00      	cmp	r3, #0
 801e31e:	d10d      	bne.n	801e33c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 801e320:	4b05      	ldr	r3, [pc, #20]	@ (801e338 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e322:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e324:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801e328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e32c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e32e:	4a02      	ldr	r2, [pc, #8]	@ (801e338 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e330:	430b      	orrs	r3, r1
 801e332:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801e334:	e006      	b.n	801e344 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 801e336:	bf00      	nop
 801e338:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e33c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e340:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801e344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e348:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e34c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 801e350:	66bb      	str	r3, [r7, #104]	@ 0x68
 801e352:	2300      	movs	r3, #0
 801e354:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801e356:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 801e35a:	460b      	mov	r3, r1
 801e35c:	4313      	orrs	r3, r2
 801e35e:	d00c      	beq.n	801e37a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801e360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e364:	3328      	adds	r3, #40	@ 0x28
 801e366:	2102      	movs	r1, #2
 801e368:	4618      	mov	r0, r3
 801e36a:	f001 fbf5 	bl	801fb58 <RCCEx_PLL3_Config>
 801e36e:	4603      	mov	r3, r0
 801e370:	2b00      	cmp	r3, #0
 801e372:	d002      	beq.n	801e37a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 801e374:	2301      	movs	r3, #1
 801e376:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801e37a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e382:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 801e386:	663b      	str	r3, [r7, #96]	@ 0x60
 801e388:	2300      	movs	r3, #0
 801e38a:	667b      	str	r3, [r7, #100]	@ 0x64
 801e38c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 801e390:	460b      	mov	r3, r1
 801e392:	4313      	orrs	r3, r2
 801e394:	d038      	beq.n	801e408 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 801e396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e39a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801e39e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801e3a2:	d018      	beq.n	801e3d6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 801e3a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801e3a8:	d811      	bhi.n	801e3ce <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801e3aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801e3ae:	d014      	beq.n	801e3da <HAL_RCCEx_PeriphCLKConfig+0x111a>
 801e3b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801e3b4:	d80b      	bhi.n	801e3ce <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801e3b6:	2b00      	cmp	r3, #0
 801e3b8:	d011      	beq.n	801e3de <HAL_RCCEx_PeriphCLKConfig+0x111e>
 801e3ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e3be:	d106      	bne.n	801e3ce <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e3c0:	4bc3      	ldr	r3, [pc, #780]	@ (801e6d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e3c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e3c4:	4ac2      	ldr	r2, [pc, #776]	@ (801e6d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e3c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e3ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 801e3cc:	e008      	b.n	801e3e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e3ce:	2301      	movs	r3, #1
 801e3d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e3d4:	e004      	b.n	801e3e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801e3d6:	bf00      	nop
 801e3d8:	e002      	b.n	801e3e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801e3da:	bf00      	nop
 801e3dc:	e000      	b.n	801e3e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801e3de:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e3e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e3e4:	2b00      	cmp	r3, #0
 801e3e6:	d10b      	bne.n	801e400 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801e3e8:	4bb9      	ldr	r3, [pc, #740]	@ (801e6d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e3ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e3ec:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801e3f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e3f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801e3f8:	4ab5      	ldr	r2, [pc, #724]	@ (801e6d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e3fa:	430b      	orrs	r3, r1
 801e3fc:	6553      	str	r3, [r2, #84]	@ 0x54
 801e3fe:	e003      	b.n	801e408 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e400:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e404:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801e408:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e410:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 801e414:	65bb      	str	r3, [r7, #88]	@ 0x58
 801e416:	2300      	movs	r3, #0
 801e418:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801e41a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 801e41e:	460b      	mov	r3, r1
 801e420:	4313      	orrs	r3, r2
 801e422:	d009      	beq.n	801e438 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801e424:	4baa      	ldr	r3, [pc, #680]	@ (801e6d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e426:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e428:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801e42c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e430:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e432:	4aa7      	ldr	r2, [pc, #668]	@ (801e6d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e434:	430b      	orrs	r3, r1
 801e436:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 801e438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e440:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 801e444:	653b      	str	r3, [r7, #80]	@ 0x50
 801e446:	2300      	movs	r3, #0
 801e448:	657b      	str	r3, [r7, #84]	@ 0x54
 801e44a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 801e44e:	460b      	mov	r3, r1
 801e450:	4313      	orrs	r3, r2
 801e452:	d00a      	beq.n	801e46a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 801e454:	4b9e      	ldr	r3, [pc, #632]	@ (801e6d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e456:	691b      	ldr	r3, [r3, #16]
 801e458:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 801e45c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e460:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801e464:	4a9a      	ldr	r2, [pc, #616]	@ (801e6d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e466:	430b      	orrs	r3, r1
 801e468:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801e46a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e472:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 801e476:	64bb      	str	r3, [r7, #72]	@ 0x48
 801e478:	2300      	movs	r3, #0
 801e47a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801e47c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 801e480:	460b      	mov	r3, r1
 801e482:	4313      	orrs	r3, r2
 801e484:	d009      	beq.n	801e49a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801e486:	4b92      	ldr	r3, [pc, #584]	@ (801e6d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e488:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e48a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 801e48e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e492:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e494:	4a8e      	ldr	r2, [pc, #568]	@ (801e6d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e496:	430b      	orrs	r3, r1
 801e498:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801e49a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4a2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 801e4a6:	643b      	str	r3, [r7, #64]	@ 0x40
 801e4a8:	2300      	movs	r3, #0
 801e4aa:	647b      	str	r3, [r7, #68]	@ 0x44
 801e4ac:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 801e4b0:	460b      	mov	r3, r1
 801e4b2:	4313      	orrs	r3, r2
 801e4b4:	d00e      	beq.n	801e4d4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801e4b6:	4b86      	ldr	r3, [pc, #536]	@ (801e6d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e4b8:	691b      	ldr	r3, [r3, #16]
 801e4ba:	4a85      	ldr	r2, [pc, #532]	@ (801e6d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e4bc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 801e4c0:	6113      	str	r3, [r2, #16]
 801e4c2:	4b83      	ldr	r3, [pc, #524]	@ (801e6d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e4c4:	6919      	ldr	r1, [r3, #16]
 801e4c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e4ca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 801e4ce:	4a80      	ldr	r2, [pc, #512]	@ (801e6d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e4d0:	430b      	orrs	r3, r1
 801e4d2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 801e4d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4dc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 801e4e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 801e4e2:	2300      	movs	r3, #0
 801e4e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e4e6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 801e4ea:	460b      	mov	r3, r1
 801e4ec:	4313      	orrs	r3, r2
 801e4ee:	d009      	beq.n	801e504 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 801e4f0:	4b77      	ldr	r3, [pc, #476]	@ (801e6d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e4f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e4f4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801e4f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e4fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e4fe:	4a74      	ldr	r2, [pc, #464]	@ (801e6d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e500:	430b      	orrs	r3, r1
 801e502:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801e504:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e508:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e50c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 801e510:	633b      	str	r3, [r7, #48]	@ 0x30
 801e512:	2300      	movs	r3, #0
 801e514:	637b      	str	r3, [r7, #52]	@ 0x34
 801e516:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 801e51a:	460b      	mov	r3, r1
 801e51c:	4313      	orrs	r3, r2
 801e51e:	d00a      	beq.n	801e536 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801e520:	4b6b      	ldr	r3, [pc, #428]	@ (801e6d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e522:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e524:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 801e528:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e52c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801e530:	4a67      	ldr	r2, [pc, #412]	@ (801e6d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e532:	430b      	orrs	r3, r1
 801e534:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 801e536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e53e:	2100      	movs	r1, #0
 801e540:	62b9      	str	r1, [r7, #40]	@ 0x28
 801e542:	f003 0301 	and.w	r3, r3, #1
 801e546:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801e548:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 801e54c:	460b      	mov	r3, r1
 801e54e:	4313      	orrs	r3, r2
 801e550:	d011      	beq.n	801e576 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801e552:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e556:	3308      	adds	r3, #8
 801e558:	2100      	movs	r1, #0
 801e55a:	4618      	mov	r0, r3
 801e55c:	f001 fa4a 	bl	801f9f4 <RCCEx_PLL2_Config>
 801e560:	4603      	mov	r3, r0
 801e562:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801e566:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e56a:	2b00      	cmp	r3, #0
 801e56c:	d003      	beq.n	801e576 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e56e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e572:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 801e576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e57e:	2100      	movs	r1, #0
 801e580:	6239      	str	r1, [r7, #32]
 801e582:	f003 0302 	and.w	r3, r3, #2
 801e586:	627b      	str	r3, [r7, #36]	@ 0x24
 801e588:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801e58c:	460b      	mov	r3, r1
 801e58e:	4313      	orrs	r3, r2
 801e590:	d011      	beq.n	801e5b6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801e592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e596:	3308      	adds	r3, #8
 801e598:	2101      	movs	r1, #1
 801e59a:	4618      	mov	r0, r3
 801e59c:	f001 fa2a 	bl	801f9f4 <RCCEx_PLL2_Config>
 801e5a0:	4603      	mov	r3, r0
 801e5a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801e5a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e5aa:	2b00      	cmp	r3, #0
 801e5ac:	d003      	beq.n	801e5b6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e5ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e5b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 801e5b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e5ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5be:	2100      	movs	r1, #0
 801e5c0:	61b9      	str	r1, [r7, #24]
 801e5c2:	f003 0304 	and.w	r3, r3, #4
 801e5c6:	61fb      	str	r3, [r7, #28]
 801e5c8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801e5cc:	460b      	mov	r3, r1
 801e5ce:	4313      	orrs	r3, r2
 801e5d0:	d011      	beq.n	801e5f6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801e5d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e5d6:	3308      	adds	r3, #8
 801e5d8:	2102      	movs	r1, #2
 801e5da:	4618      	mov	r0, r3
 801e5dc:	f001 fa0a 	bl	801f9f4 <RCCEx_PLL2_Config>
 801e5e0:	4603      	mov	r3, r0
 801e5e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801e5e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e5ea:	2b00      	cmp	r3, #0
 801e5ec:	d003      	beq.n	801e5f6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e5ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e5f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 801e5f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5fe:	2100      	movs	r1, #0
 801e600:	6139      	str	r1, [r7, #16]
 801e602:	f003 0308 	and.w	r3, r3, #8
 801e606:	617b      	str	r3, [r7, #20]
 801e608:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801e60c:	460b      	mov	r3, r1
 801e60e:	4313      	orrs	r3, r2
 801e610:	d011      	beq.n	801e636 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801e612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e616:	3328      	adds	r3, #40	@ 0x28
 801e618:	2100      	movs	r1, #0
 801e61a:	4618      	mov	r0, r3
 801e61c:	f001 fa9c 	bl	801fb58 <RCCEx_PLL3_Config>
 801e620:	4603      	mov	r3, r0
 801e622:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 801e626:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e62a:	2b00      	cmp	r3, #0
 801e62c:	d003      	beq.n	801e636 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e62e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e632:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 801e636:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e63e:	2100      	movs	r1, #0
 801e640:	60b9      	str	r1, [r7, #8]
 801e642:	f003 0310 	and.w	r3, r3, #16
 801e646:	60fb      	str	r3, [r7, #12]
 801e648:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801e64c:	460b      	mov	r3, r1
 801e64e:	4313      	orrs	r3, r2
 801e650:	d011      	beq.n	801e676 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801e652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e656:	3328      	adds	r3, #40	@ 0x28
 801e658:	2101      	movs	r1, #1
 801e65a:	4618      	mov	r0, r3
 801e65c:	f001 fa7c 	bl	801fb58 <RCCEx_PLL3_Config>
 801e660:	4603      	mov	r3, r0
 801e662:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801e666:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e66a:	2b00      	cmp	r3, #0
 801e66c:	d003      	beq.n	801e676 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e66e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e672:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 801e676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e67e:	2100      	movs	r1, #0
 801e680:	6039      	str	r1, [r7, #0]
 801e682:	f003 0320 	and.w	r3, r3, #32
 801e686:	607b      	str	r3, [r7, #4]
 801e688:	e9d7 1200 	ldrd	r1, r2, [r7]
 801e68c:	460b      	mov	r3, r1
 801e68e:	4313      	orrs	r3, r2
 801e690:	d011      	beq.n	801e6b6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801e692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e696:	3328      	adds	r3, #40	@ 0x28
 801e698:	2102      	movs	r1, #2
 801e69a:	4618      	mov	r0, r3
 801e69c:	f001 fa5c 	bl	801fb58 <RCCEx_PLL3_Config>
 801e6a0:	4603      	mov	r3, r0
 801e6a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801e6a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e6aa:	2b00      	cmp	r3, #0
 801e6ac:	d003      	beq.n	801e6b6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e6ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e6b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 801e6b6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801e6ba:	2b00      	cmp	r3, #0
 801e6bc:	d101      	bne.n	801e6c2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 801e6be:	2300      	movs	r3, #0
 801e6c0:	e000      	b.n	801e6c4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 801e6c2:	2301      	movs	r3, #1
}
 801e6c4:	4618      	mov	r0, r3
 801e6c6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 801e6ca:	46bd      	mov	sp, r7
 801e6cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801e6d0:	58024400 	.word	0x58024400

0801e6d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 801e6d4:	b580      	push	{r7, lr}
 801e6d6:	b090      	sub	sp, #64	@ 0x40
 801e6d8:	af00      	add	r7, sp, #0
 801e6da:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 801e6de:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e6e2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 801e6e6:	430b      	orrs	r3, r1
 801e6e8:	f040 8094 	bne.w	801e814 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 801e6ec:	4b9e      	ldr	r3, [pc, #632]	@ (801e968 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801e6ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e6f0:	f003 0307 	and.w	r3, r3, #7
 801e6f4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 801e6f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e6f8:	2b04      	cmp	r3, #4
 801e6fa:	f200 8087 	bhi.w	801e80c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 801e6fe:	a201      	add	r2, pc, #4	@ (adr r2, 801e704 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 801e700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e704:	0801e719 	.word	0x0801e719
 801e708:	0801e741 	.word	0x0801e741
 801e70c:	0801e769 	.word	0x0801e769
 801e710:	0801e805 	.word	0x0801e805
 801e714:	0801e791 	.word	0x0801e791
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801e718:	4b93      	ldr	r3, [pc, #588]	@ (801e968 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801e71a:	681b      	ldr	r3, [r3, #0]
 801e71c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801e720:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801e724:	d108      	bne.n	801e738 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801e726:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801e72a:	4618      	mov	r0, r3
 801e72c:	f001 f810 	bl	801f750 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801e730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e732:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e734:	f000 bd45 	b.w	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e738:	2300      	movs	r3, #0
 801e73a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e73c:	f000 bd41 	b.w	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801e740:	4b89      	ldr	r3, [pc, #548]	@ (801e968 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801e742:	681b      	ldr	r3, [r3, #0]
 801e744:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801e748:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801e74c:	d108      	bne.n	801e760 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801e74e:	f107 0318 	add.w	r3, r7, #24
 801e752:	4618      	mov	r0, r3
 801e754:	f000 fd54 	bl	801f200 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801e758:	69bb      	ldr	r3, [r7, #24]
 801e75a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e75c:	f000 bd31 	b.w	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e760:	2300      	movs	r3, #0
 801e762:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e764:	f000 bd2d 	b.w	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801e768:	4b7f      	ldr	r3, [pc, #508]	@ (801e968 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801e76a:	681b      	ldr	r3, [r3, #0]
 801e76c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801e770:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e774:	d108      	bne.n	801e788 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801e776:	f107 030c 	add.w	r3, r7, #12
 801e77a:	4618      	mov	r0, r3
 801e77c:	f000 fe94 	bl	801f4a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801e780:	68fb      	ldr	r3, [r7, #12]
 801e782:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e784:	f000 bd1d 	b.w	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e788:	2300      	movs	r3, #0
 801e78a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e78c:	f000 bd19 	b.w	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801e790:	4b75      	ldr	r3, [pc, #468]	@ (801e968 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801e792:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e794:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801e798:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801e79a:	4b73      	ldr	r3, [pc, #460]	@ (801e968 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801e79c:	681b      	ldr	r3, [r3, #0]
 801e79e:	f003 0304 	and.w	r3, r3, #4
 801e7a2:	2b04      	cmp	r3, #4
 801e7a4:	d10c      	bne.n	801e7c0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 801e7a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e7a8:	2b00      	cmp	r3, #0
 801e7aa:	d109      	bne.n	801e7c0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801e7ac:	4b6e      	ldr	r3, [pc, #440]	@ (801e968 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801e7ae:	681b      	ldr	r3, [r3, #0]
 801e7b0:	08db      	lsrs	r3, r3, #3
 801e7b2:	f003 0303 	and.w	r3, r3, #3
 801e7b6:	4a6d      	ldr	r2, [pc, #436]	@ (801e96c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801e7b8:	fa22 f303 	lsr.w	r3, r2, r3
 801e7bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e7be:	e01f      	b.n	801e800 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801e7c0:	4b69      	ldr	r3, [pc, #420]	@ (801e968 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801e7c2:	681b      	ldr	r3, [r3, #0]
 801e7c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801e7c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e7cc:	d106      	bne.n	801e7dc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 801e7ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e7d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801e7d4:	d102      	bne.n	801e7dc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801e7d6:	4b66      	ldr	r3, [pc, #408]	@ (801e970 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 801e7d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e7da:	e011      	b.n	801e800 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801e7dc:	4b62      	ldr	r3, [pc, #392]	@ (801e968 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801e7de:	681b      	ldr	r3, [r3, #0]
 801e7e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801e7e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801e7e8:	d106      	bne.n	801e7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 801e7ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e7ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e7f0:	d102      	bne.n	801e7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801e7f2:	4b60      	ldr	r3, [pc, #384]	@ (801e974 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 801e7f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e7f6:	e003      	b.n	801e800 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801e7f8:	2300      	movs	r3, #0
 801e7fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801e7fc:	f000 bce1 	b.w	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801e800:	f000 bcdf 	b.w	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801e804:	4b5c      	ldr	r3, [pc, #368]	@ (801e978 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 801e806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e808:	f000 bcdb 	b.w	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 801e80c:	2300      	movs	r3, #0
 801e80e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e810:	f000 bcd7 	b.w	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 801e814:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e818:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 801e81c:	430b      	orrs	r3, r1
 801e81e:	f040 80ad 	bne.w	801e97c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 801e822:	4b51      	ldr	r3, [pc, #324]	@ (801e968 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801e824:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e826:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 801e82a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 801e82c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e82e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e832:	d056      	beq.n	801e8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 801e834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e836:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e83a:	f200 8090 	bhi.w	801e95e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 801e83e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e840:	2bc0      	cmp	r3, #192	@ 0xc0
 801e842:	f000 8088 	beq.w	801e956 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 801e846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e848:	2bc0      	cmp	r3, #192	@ 0xc0
 801e84a:	f200 8088 	bhi.w	801e95e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 801e84e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e850:	2b80      	cmp	r3, #128	@ 0x80
 801e852:	d032      	beq.n	801e8ba <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 801e854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e856:	2b80      	cmp	r3, #128	@ 0x80
 801e858:	f200 8081 	bhi.w	801e95e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 801e85c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e85e:	2b00      	cmp	r3, #0
 801e860:	d003      	beq.n	801e86a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 801e862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e864:	2b40      	cmp	r3, #64	@ 0x40
 801e866:	d014      	beq.n	801e892 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 801e868:	e079      	b.n	801e95e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801e86a:	4b3f      	ldr	r3, [pc, #252]	@ (801e968 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801e86c:	681b      	ldr	r3, [r3, #0]
 801e86e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801e872:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801e876:	d108      	bne.n	801e88a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801e878:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801e87c:	4618      	mov	r0, r3
 801e87e:	f000 ff67 	bl	801f750 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801e882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e884:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e886:	f000 bc9c 	b.w	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e88a:	2300      	movs	r3, #0
 801e88c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e88e:	f000 bc98 	b.w	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801e892:	4b35      	ldr	r3, [pc, #212]	@ (801e968 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801e894:	681b      	ldr	r3, [r3, #0]
 801e896:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801e89a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801e89e:	d108      	bne.n	801e8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801e8a0:	f107 0318 	add.w	r3, r7, #24
 801e8a4:	4618      	mov	r0, r3
 801e8a6:	f000 fcab 	bl	801f200 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801e8aa:	69bb      	ldr	r3, [r7, #24]
 801e8ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e8ae:	f000 bc88 	b.w	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e8b2:	2300      	movs	r3, #0
 801e8b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e8b6:	f000 bc84 	b.w	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801e8ba:	4b2b      	ldr	r3, [pc, #172]	@ (801e968 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801e8bc:	681b      	ldr	r3, [r3, #0]
 801e8be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801e8c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e8c6:	d108      	bne.n	801e8da <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801e8c8:	f107 030c 	add.w	r3, r7, #12
 801e8cc:	4618      	mov	r0, r3
 801e8ce:	f000 fdeb 	bl	801f4a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801e8d2:	68fb      	ldr	r3, [r7, #12]
 801e8d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e8d6:	f000 bc74 	b.w	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e8da:	2300      	movs	r3, #0
 801e8dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e8de:	f000 bc70 	b.w	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801e8e2:	4b21      	ldr	r3, [pc, #132]	@ (801e968 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801e8e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e8e6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801e8ea:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801e8ec:	4b1e      	ldr	r3, [pc, #120]	@ (801e968 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801e8ee:	681b      	ldr	r3, [r3, #0]
 801e8f0:	f003 0304 	and.w	r3, r3, #4
 801e8f4:	2b04      	cmp	r3, #4
 801e8f6:	d10c      	bne.n	801e912 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 801e8f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e8fa:	2b00      	cmp	r3, #0
 801e8fc:	d109      	bne.n	801e912 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801e8fe:	4b1a      	ldr	r3, [pc, #104]	@ (801e968 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801e900:	681b      	ldr	r3, [r3, #0]
 801e902:	08db      	lsrs	r3, r3, #3
 801e904:	f003 0303 	and.w	r3, r3, #3
 801e908:	4a18      	ldr	r2, [pc, #96]	@ (801e96c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801e90a:	fa22 f303 	lsr.w	r3, r2, r3
 801e90e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e910:	e01f      	b.n	801e952 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801e912:	4b15      	ldr	r3, [pc, #84]	@ (801e968 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801e914:	681b      	ldr	r3, [r3, #0]
 801e916:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801e91a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e91e:	d106      	bne.n	801e92e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 801e920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e922:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801e926:	d102      	bne.n	801e92e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801e928:	4b11      	ldr	r3, [pc, #68]	@ (801e970 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 801e92a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e92c:	e011      	b.n	801e952 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801e92e:	4b0e      	ldr	r3, [pc, #56]	@ (801e968 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801e930:	681b      	ldr	r3, [r3, #0]
 801e932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801e936:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801e93a:	d106      	bne.n	801e94a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 801e93c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e93e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e942:	d102      	bne.n	801e94a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801e944:	4b0b      	ldr	r3, [pc, #44]	@ (801e974 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 801e946:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e948:	e003      	b.n	801e952 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801e94a:	2300      	movs	r3, #0
 801e94c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801e94e:	f000 bc38 	b.w	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801e952:	f000 bc36 	b.w	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801e956:	4b08      	ldr	r3, [pc, #32]	@ (801e978 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 801e958:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e95a:	f000 bc32 	b.w	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 801e95e:	2300      	movs	r3, #0
 801e960:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e962:	f000 bc2e 	b.w	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801e966:	bf00      	nop
 801e968:	58024400 	.word	0x58024400
 801e96c:	03d09000 	.word	0x03d09000
 801e970:	003d0900 	.word	0x003d0900
 801e974:	017d7840 	.word	0x017d7840
 801e978:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 801e97c:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e980:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 801e984:	430b      	orrs	r3, r1
 801e986:	f040 809c 	bne.w	801eac2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 801e98a:	4b9e      	ldr	r3, [pc, #632]	@ (801ec04 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801e98c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e98e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 801e992:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 801e994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e996:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801e99a:	d054      	beq.n	801ea46 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 801e99c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e99e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801e9a2:	f200 808b 	bhi.w	801eabc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 801e9a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e9a8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801e9ac:	f000 8083 	beq.w	801eab6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 801e9b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e9b2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801e9b6:	f200 8081 	bhi.w	801eabc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 801e9ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e9bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801e9c0:	d02f      	beq.n	801ea22 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 801e9c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e9c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801e9c8:	d878      	bhi.n	801eabc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 801e9ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e9cc:	2b00      	cmp	r3, #0
 801e9ce:	d004      	beq.n	801e9da <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 801e9d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e9d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801e9d6:	d012      	beq.n	801e9fe <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 801e9d8:	e070      	b.n	801eabc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801e9da:	4b8a      	ldr	r3, [pc, #552]	@ (801ec04 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801e9dc:	681b      	ldr	r3, [r3, #0]
 801e9de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801e9e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801e9e6:	d107      	bne.n	801e9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801e9e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801e9ec:	4618      	mov	r0, r3
 801e9ee:	f000 feaf 	bl	801f750 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801e9f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e9f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e9f6:	e3e4      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e9f8:	2300      	movs	r3, #0
 801e9fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e9fc:	e3e1      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801e9fe:	4b81      	ldr	r3, [pc, #516]	@ (801ec04 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801ea00:	681b      	ldr	r3, [r3, #0]
 801ea02:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801ea06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801ea0a:	d107      	bne.n	801ea1c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801ea0c:	f107 0318 	add.w	r3, r7, #24
 801ea10:	4618      	mov	r0, r3
 801ea12:	f000 fbf5 	bl	801f200 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801ea16:	69bb      	ldr	r3, [r7, #24]
 801ea18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801ea1a:	e3d2      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801ea1c:	2300      	movs	r3, #0
 801ea1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ea20:	e3cf      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801ea22:	4b78      	ldr	r3, [pc, #480]	@ (801ec04 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801ea24:	681b      	ldr	r3, [r3, #0]
 801ea26:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801ea2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801ea2e:	d107      	bne.n	801ea40 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801ea30:	f107 030c 	add.w	r3, r7, #12
 801ea34:	4618      	mov	r0, r3
 801ea36:	f000 fd37 	bl	801f4a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801ea3a:	68fb      	ldr	r3, [r7, #12]
 801ea3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801ea3e:	e3c0      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801ea40:	2300      	movs	r3, #0
 801ea42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ea44:	e3bd      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801ea46:	4b6f      	ldr	r3, [pc, #444]	@ (801ec04 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801ea48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801ea4a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801ea4e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801ea50:	4b6c      	ldr	r3, [pc, #432]	@ (801ec04 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801ea52:	681b      	ldr	r3, [r3, #0]
 801ea54:	f003 0304 	and.w	r3, r3, #4
 801ea58:	2b04      	cmp	r3, #4
 801ea5a:	d10c      	bne.n	801ea76 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 801ea5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ea5e:	2b00      	cmp	r3, #0
 801ea60:	d109      	bne.n	801ea76 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801ea62:	4b68      	ldr	r3, [pc, #416]	@ (801ec04 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801ea64:	681b      	ldr	r3, [r3, #0]
 801ea66:	08db      	lsrs	r3, r3, #3
 801ea68:	f003 0303 	and.w	r3, r3, #3
 801ea6c:	4a66      	ldr	r2, [pc, #408]	@ (801ec08 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 801ea6e:	fa22 f303 	lsr.w	r3, r2, r3
 801ea72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ea74:	e01e      	b.n	801eab4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801ea76:	4b63      	ldr	r3, [pc, #396]	@ (801ec04 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801ea78:	681b      	ldr	r3, [r3, #0]
 801ea7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801ea7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801ea82:	d106      	bne.n	801ea92 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 801ea84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ea86:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801ea8a:	d102      	bne.n	801ea92 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801ea8c:	4b5f      	ldr	r3, [pc, #380]	@ (801ec0c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 801ea8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ea90:	e010      	b.n	801eab4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801ea92:	4b5c      	ldr	r3, [pc, #368]	@ (801ec04 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801ea94:	681b      	ldr	r3, [r3, #0]
 801ea96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801ea9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801ea9e:	d106      	bne.n	801eaae <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 801eaa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801eaa2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801eaa6:	d102      	bne.n	801eaae <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801eaa8:	4b59      	ldr	r3, [pc, #356]	@ (801ec10 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 801eaaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801eaac:	e002      	b.n	801eab4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801eaae:	2300      	movs	r3, #0
 801eab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801eab2:	e386      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801eab4:	e385      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801eab6:	4b57      	ldr	r3, [pc, #348]	@ (801ec14 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 801eab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801eaba:	e382      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 801eabc:	2300      	movs	r3, #0
 801eabe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801eac0:	e37f      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 801eac2:	e9d7 2300 	ldrd	r2, r3, [r7]
 801eac6:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 801eaca:	430b      	orrs	r3, r1
 801eacc:	f040 80a7 	bne.w	801ec1e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 801ead0:	4b4c      	ldr	r3, [pc, #304]	@ (801ec04 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801ead2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801ead4:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 801ead8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 801eada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801eadc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801eae0:	d055      	beq.n	801eb8e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 801eae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801eae4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801eae8:	f200 8096 	bhi.w	801ec18 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 801eaec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801eaee:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801eaf2:	f000 8084 	beq.w	801ebfe <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 801eaf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801eaf8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801eafc:	f200 808c 	bhi.w	801ec18 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 801eb00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801eb02:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801eb06:	d030      	beq.n	801eb6a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 801eb08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801eb0a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801eb0e:	f200 8083 	bhi.w	801ec18 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 801eb12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801eb14:	2b00      	cmp	r3, #0
 801eb16:	d004      	beq.n	801eb22 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 801eb18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801eb1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801eb1e:	d012      	beq.n	801eb46 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 801eb20:	e07a      	b.n	801ec18 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801eb22:	4b38      	ldr	r3, [pc, #224]	@ (801ec04 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801eb24:	681b      	ldr	r3, [r3, #0]
 801eb26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801eb2a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801eb2e:	d107      	bne.n	801eb40 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801eb30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801eb34:	4618      	mov	r0, r3
 801eb36:	f000 fe0b 	bl	801f750 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801eb3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801eb3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801eb3e:	e340      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801eb40:	2300      	movs	r3, #0
 801eb42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801eb44:	e33d      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801eb46:	4b2f      	ldr	r3, [pc, #188]	@ (801ec04 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801eb48:	681b      	ldr	r3, [r3, #0]
 801eb4a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801eb4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801eb52:	d107      	bne.n	801eb64 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801eb54:	f107 0318 	add.w	r3, r7, #24
 801eb58:	4618      	mov	r0, r3
 801eb5a:	f000 fb51 	bl	801f200 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801eb5e:	69bb      	ldr	r3, [r7, #24]
 801eb60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801eb62:	e32e      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801eb64:	2300      	movs	r3, #0
 801eb66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801eb68:	e32b      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801eb6a:	4b26      	ldr	r3, [pc, #152]	@ (801ec04 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801eb6c:	681b      	ldr	r3, [r3, #0]
 801eb6e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801eb72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801eb76:	d107      	bne.n	801eb88 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801eb78:	f107 030c 	add.w	r3, r7, #12
 801eb7c:	4618      	mov	r0, r3
 801eb7e:	f000 fc93 	bl	801f4a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801eb82:	68fb      	ldr	r3, [r7, #12]
 801eb84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801eb86:	e31c      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801eb88:	2300      	movs	r3, #0
 801eb8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801eb8c:	e319      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801eb8e:	4b1d      	ldr	r3, [pc, #116]	@ (801ec04 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801eb90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801eb92:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801eb96:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801eb98:	4b1a      	ldr	r3, [pc, #104]	@ (801ec04 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801eb9a:	681b      	ldr	r3, [r3, #0]
 801eb9c:	f003 0304 	and.w	r3, r3, #4
 801eba0:	2b04      	cmp	r3, #4
 801eba2:	d10c      	bne.n	801ebbe <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 801eba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801eba6:	2b00      	cmp	r3, #0
 801eba8:	d109      	bne.n	801ebbe <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801ebaa:	4b16      	ldr	r3, [pc, #88]	@ (801ec04 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801ebac:	681b      	ldr	r3, [r3, #0]
 801ebae:	08db      	lsrs	r3, r3, #3
 801ebb0:	f003 0303 	and.w	r3, r3, #3
 801ebb4:	4a14      	ldr	r2, [pc, #80]	@ (801ec08 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 801ebb6:	fa22 f303 	lsr.w	r3, r2, r3
 801ebba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ebbc:	e01e      	b.n	801ebfc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801ebbe:	4b11      	ldr	r3, [pc, #68]	@ (801ec04 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801ebc0:	681b      	ldr	r3, [r3, #0]
 801ebc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801ebc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801ebca:	d106      	bne.n	801ebda <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 801ebcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ebce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801ebd2:	d102      	bne.n	801ebda <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801ebd4:	4b0d      	ldr	r3, [pc, #52]	@ (801ec0c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 801ebd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ebd8:	e010      	b.n	801ebfc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801ebda:	4b0a      	ldr	r3, [pc, #40]	@ (801ec04 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801ebdc:	681b      	ldr	r3, [r3, #0]
 801ebde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801ebe2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801ebe6:	d106      	bne.n	801ebf6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 801ebe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ebea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801ebee:	d102      	bne.n	801ebf6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801ebf0:	4b07      	ldr	r3, [pc, #28]	@ (801ec10 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 801ebf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ebf4:	e002      	b.n	801ebfc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801ebf6:	2300      	movs	r3, #0
 801ebf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801ebfa:	e2e2      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801ebfc:	e2e1      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801ebfe:	4b05      	ldr	r3, [pc, #20]	@ (801ec14 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 801ec00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ec02:	e2de      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801ec04:	58024400 	.word	0x58024400
 801ec08:	03d09000 	.word	0x03d09000
 801ec0c:	003d0900 	.word	0x003d0900
 801ec10:	017d7840 	.word	0x017d7840
 801ec14:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 801ec18:	2300      	movs	r3, #0
 801ec1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ec1c:	e2d1      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 801ec1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ec22:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 801ec26:	430b      	orrs	r3, r1
 801ec28:	f040 809c 	bne.w	801ed64 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 801ec2c:	4b93      	ldr	r3, [pc, #588]	@ (801ee7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801ec2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801ec30:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 801ec34:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801ec36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ec38:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801ec3c:	d054      	beq.n	801ece8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 801ec3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ec40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801ec44:	f200 808b 	bhi.w	801ed5e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 801ec48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ec4a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801ec4e:	f000 8083 	beq.w	801ed58 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 801ec52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ec54:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801ec58:	f200 8081 	bhi.w	801ed5e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 801ec5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ec5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801ec62:	d02f      	beq.n	801ecc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 801ec64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ec66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801ec6a:	d878      	bhi.n	801ed5e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 801ec6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ec6e:	2b00      	cmp	r3, #0
 801ec70:	d004      	beq.n	801ec7c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 801ec72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ec74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801ec78:	d012      	beq.n	801eca0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 801ec7a:	e070      	b.n	801ed5e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801ec7c:	4b7f      	ldr	r3, [pc, #508]	@ (801ee7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801ec7e:	681b      	ldr	r3, [r3, #0]
 801ec80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801ec84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801ec88:	d107      	bne.n	801ec9a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801ec8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801ec8e:	4618      	mov	r0, r3
 801ec90:	f000 fd5e 	bl	801f750 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801ec94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ec96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801ec98:	e293      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801ec9a:	2300      	movs	r3, #0
 801ec9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ec9e:	e290      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801eca0:	4b76      	ldr	r3, [pc, #472]	@ (801ee7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801eca2:	681b      	ldr	r3, [r3, #0]
 801eca4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801eca8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801ecac:	d107      	bne.n	801ecbe <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801ecae:	f107 0318 	add.w	r3, r7, #24
 801ecb2:	4618      	mov	r0, r3
 801ecb4:	f000 faa4 	bl	801f200 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801ecb8:	69bb      	ldr	r3, [r7, #24]
 801ecba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801ecbc:	e281      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801ecbe:	2300      	movs	r3, #0
 801ecc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ecc2:	e27e      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801ecc4:	4b6d      	ldr	r3, [pc, #436]	@ (801ee7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801ecc6:	681b      	ldr	r3, [r3, #0]
 801ecc8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801eccc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801ecd0:	d107      	bne.n	801ece2 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801ecd2:	f107 030c 	add.w	r3, r7, #12
 801ecd6:	4618      	mov	r0, r3
 801ecd8:	f000 fbe6 	bl	801f4a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801ecdc:	68fb      	ldr	r3, [r7, #12]
 801ecde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801ece0:	e26f      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801ece2:	2300      	movs	r3, #0
 801ece4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ece6:	e26c      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801ece8:	4b64      	ldr	r3, [pc, #400]	@ (801ee7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801ecea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801ecec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801ecf0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801ecf2:	4b62      	ldr	r3, [pc, #392]	@ (801ee7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801ecf4:	681b      	ldr	r3, [r3, #0]
 801ecf6:	f003 0304 	and.w	r3, r3, #4
 801ecfa:	2b04      	cmp	r3, #4
 801ecfc:	d10c      	bne.n	801ed18 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 801ecfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ed00:	2b00      	cmp	r3, #0
 801ed02:	d109      	bne.n	801ed18 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801ed04:	4b5d      	ldr	r3, [pc, #372]	@ (801ee7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801ed06:	681b      	ldr	r3, [r3, #0]
 801ed08:	08db      	lsrs	r3, r3, #3
 801ed0a:	f003 0303 	and.w	r3, r3, #3
 801ed0e:	4a5c      	ldr	r2, [pc, #368]	@ (801ee80 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 801ed10:	fa22 f303 	lsr.w	r3, r2, r3
 801ed14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ed16:	e01e      	b.n	801ed56 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801ed18:	4b58      	ldr	r3, [pc, #352]	@ (801ee7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801ed1a:	681b      	ldr	r3, [r3, #0]
 801ed1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801ed20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801ed24:	d106      	bne.n	801ed34 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 801ed26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ed28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801ed2c:	d102      	bne.n	801ed34 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801ed2e:	4b55      	ldr	r3, [pc, #340]	@ (801ee84 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 801ed30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ed32:	e010      	b.n	801ed56 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801ed34:	4b51      	ldr	r3, [pc, #324]	@ (801ee7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801ed36:	681b      	ldr	r3, [r3, #0]
 801ed38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801ed3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801ed40:	d106      	bne.n	801ed50 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 801ed42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ed44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801ed48:	d102      	bne.n	801ed50 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801ed4a:	4b4f      	ldr	r3, [pc, #316]	@ (801ee88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 801ed4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ed4e:	e002      	b.n	801ed56 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801ed50:	2300      	movs	r3, #0
 801ed52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801ed54:	e235      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801ed56:	e234      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801ed58:	4b4c      	ldr	r3, [pc, #304]	@ (801ee8c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 801ed5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ed5c:	e231      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 801ed5e:	2300      	movs	r3, #0
 801ed60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ed62:	e22e      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 801ed64:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ed68:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 801ed6c:	430b      	orrs	r3, r1
 801ed6e:	f040 808f 	bne.w	801ee90 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 801ed72:	4b42      	ldr	r3, [pc, #264]	@ (801ee7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801ed74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801ed76:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 801ed7a:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 801ed7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ed7e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801ed82:	d06b      	beq.n	801ee5c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 801ed84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ed86:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801ed8a:	d874      	bhi.n	801ee76 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 801ed8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ed8e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801ed92:	d056      	beq.n	801ee42 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 801ed94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ed96:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801ed9a:	d86c      	bhi.n	801ee76 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 801ed9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ed9e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801eda2:	d03b      	beq.n	801ee1c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 801eda4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801eda6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801edaa:	d864      	bhi.n	801ee76 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 801edac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801edae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801edb2:	d021      	beq.n	801edf8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 801edb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801edb6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801edba:	d85c      	bhi.n	801ee76 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 801edbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801edbe:	2b00      	cmp	r3, #0
 801edc0:	d004      	beq.n	801edcc <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 801edc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801edc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801edc8:	d004      	beq.n	801edd4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 801edca:	e054      	b.n	801ee76 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 801edcc:	f7fe fa4c 	bl	801d268 <HAL_RCC_GetPCLK1Freq>
 801edd0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801edd2:	e1f6      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801edd4:	4b29      	ldr	r3, [pc, #164]	@ (801ee7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801edd6:	681b      	ldr	r3, [r3, #0]
 801edd8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801eddc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801ede0:	d107      	bne.n	801edf2 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801ede2:	f107 0318 	add.w	r3, r7, #24
 801ede6:	4618      	mov	r0, r3
 801ede8:	f000 fa0a 	bl	801f200 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801edec:	69fb      	ldr	r3, [r7, #28]
 801edee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801edf0:	e1e7      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801edf2:	2300      	movs	r3, #0
 801edf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801edf6:	e1e4      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801edf8:	4b20      	ldr	r3, [pc, #128]	@ (801ee7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801edfa:	681b      	ldr	r3, [r3, #0]
 801edfc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801ee00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801ee04:	d107      	bne.n	801ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801ee06:	f107 030c 	add.w	r3, r7, #12
 801ee0a:	4618      	mov	r0, r3
 801ee0c:	f000 fb4c 	bl	801f4a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801ee10:	693b      	ldr	r3, [r7, #16]
 801ee12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801ee14:	e1d5      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801ee16:	2300      	movs	r3, #0
 801ee18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ee1a:	e1d2      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801ee1c:	4b17      	ldr	r3, [pc, #92]	@ (801ee7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801ee1e:	681b      	ldr	r3, [r3, #0]
 801ee20:	f003 0304 	and.w	r3, r3, #4
 801ee24:	2b04      	cmp	r3, #4
 801ee26:	d109      	bne.n	801ee3c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801ee28:	4b14      	ldr	r3, [pc, #80]	@ (801ee7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801ee2a:	681b      	ldr	r3, [r3, #0]
 801ee2c:	08db      	lsrs	r3, r3, #3
 801ee2e:	f003 0303 	and.w	r3, r3, #3
 801ee32:	4a13      	ldr	r2, [pc, #76]	@ (801ee80 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 801ee34:	fa22 f303 	lsr.w	r3, r2, r3
 801ee38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801ee3a:	e1c2      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801ee3c:	2300      	movs	r3, #0
 801ee3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ee40:	e1bf      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 801ee42:	4b0e      	ldr	r3, [pc, #56]	@ (801ee7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801ee44:	681b      	ldr	r3, [r3, #0]
 801ee46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801ee4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801ee4e:	d102      	bne.n	801ee56 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 801ee50:	4b0c      	ldr	r3, [pc, #48]	@ (801ee84 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 801ee52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801ee54:	e1b5      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801ee56:	2300      	movs	r3, #0
 801ee58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ee5a:	e1b2      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801ee5c:	4b07      	ldr	r3, [pc, #28]	@ (801ee7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801ee5e:	681b      	ldr	r3, [r3, #0]
 801ee60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801ee64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801ee68:	d102      	bne.n	801ee70 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 801ee6a:	4b07      	ldr	r3, [pc, #28]	@ (801ee88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 801ee6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801ee6e:	e1a8      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801ee70:	2300      	movs	r3, #0
 801ee72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ee74:	e1a5      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 801ee76:	2300      	movs	r3, #0
 801ee78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ee7a:	e1a2      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801ee7c:	58024400 	.word	0x58024400
 801ee80:	03d09000 	.word	0x03d09000
 801ee84:	003d0900 	.word	0x003d0900
 801ee88:	017d7840 	.word	0x017d7840
 801ee8c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 801ee90:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ee94:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 801ee98:	430b      	orrs	r3, r1
 801ee9a:	d173      	bne.n	801ef84 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 801ee9c:	4b9c      	ldr	r3, [pc, #624]	@ (801f110 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801ee9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801eea0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 801eea4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801eea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801eea8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801eeac:	d02f      	beq.n	801ef0e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 801eeae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801eeb0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801eeb4:	d863      	bhi.n	801ef7e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 801eeb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801eeb8:	2b00      	cmp	r3, #0
 801eeba:	d004      	beq.n	801eec6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 801eebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801eebe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801eec2:	d012      	beq.n	801eeea <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 801eec4:	e05b      	b.n	801ef7e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801eec6:	4b92      	ldr	r3, [pc, #584]	@ (801f110 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801eec8:	681b      	ldr	r3, [r3, #0]
 801eeca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801eece:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801eed2:	d107      	bne.n	801eee4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801eed4:	f107 0318 	add.w	r3, r7, #24
 801eed8:	4618      	mov	r0, r3
 801eeda:	f000 f991 	bl	801f200 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801eede:	69bb      	ldr	r3, [r7, #24]
 801eee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801eee2:	e16e      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801eee4:	2300      	movs	r3, #0
 801eee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801eee8:	e16b      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801eeea:	4b89      	ldr	r3, [pc, #548]	@ (801f110 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801eeec:	681b      	ldr	r3, [r3, #0]
 801eeee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801eef2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801eef6:	d107      	bne.n	801ef08 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801eef8:	f107 030c 	add.w	r3, r7, #12
 801eefc:	4618      	mov	r0, r3
 801eefe:	f000 fad3 	bl	801f4a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 801ef02:	697b      	ldr	r3, [r7, #20]
 801ef04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801ef06:	e15c      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801ef08:	2300      	movs	r3, #0
 801ef0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ef0c:	e159      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801ef0e:	4b80      	ldr	r3, [pc, #512]	@ (801f110 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801ef10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801ef12:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801ef16:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801ef18:	4b7d      	ldr	r3, [pc, #500]	@ (801f110 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801ef1a:	681b      	ldr	r3, [r3, #0]
 801ef1c:	f003 0304 	and.w	r3, r3, #4
 801ef20:	2b04      	cmp	r3, #4
 801ef22:	d10c      	bne.n	801ef3e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 801ef24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ef26:	2b00      	cmp	r3, #0
 801ef28:	d109      	bne.n	801ef3e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801ef2a:	4b79      	ldr	r3, [pc, #484]	@ (801f110 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801ef2c:	681b      	ldr	r3, [r3, #0]
 801ef2e:	08db      	lsrs	r3, r3, #3
 801ef30:	f003 0303 	and.w	r3, r3, #3
 801ef34:	4a77      	ldr	r2, [pc, #476]	@ (801f114 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 801ef36:	fa22 f303 	lsr.w	r3, r2, r3
 801ef3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ef3c:	e01e      	b.n	801ef7c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801ef3e:	4b74      	ldr	r3, [pc, #464]	@ (801f110 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801ef40:	681b      	ldr	r3, [r3, #0]
 801ef42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801ef46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801ef4a:	d106      	bne.n	801ef5a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 801ef4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ef4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801ef52:	d102      	bne.n	801ef5a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801ef54:	4b70      	ldr	r3, [pc, #448]	@ (801f118 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 801ef56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ef58:	e010      	b.n	801ef7c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801ef5a:	4b6d      	ldr	r3, [pc, #436]	@ (801f110 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801ef5c:	681b      	ldr	r3, [r3, #0]
 801ef5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801ef62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801ef66:	d106      	bne.n	801ef76 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 801ef68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ef6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801ef6e:	d102      	bne.n	801ef76 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801ef70:	4b6a      	ldr	r3, [pc, #424]	@ (801f11c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 801ef72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ef74:	e002      	b.n	801ef7c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801ef76:	2300      	movs	r3, #0
 801ef78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801ef7a:	e122      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801ef7c:	e121      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 801ef7e:	2300      	movs	r3, #0
 801ef80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ef82:	e11e      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 801ef84:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ef88:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 801ef8c:	430b      	orrs	r3, r1
 801ef8e:	d133      	bne.n	801eff8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 801ef90:	4b5f      	ldr	r3, [pc, #380]	@ (801f110 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801ef92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801ef94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801ef98:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801ef9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ef9c:	2b00      	cmp	r3, #0
 801ef9e:	d004      	beq.n	801efaa <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 801efa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801efa2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801efa6:	d012      	beq.n	801efce <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 801efa8:	e023      	b.n	801eff2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801efaa:	4b59      	ldr	r3, [pc, #356]	@ (801f110 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801efac:	681b      	ldr	r3, [r3, #0]
 801efae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801efb2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801efb6:	d107      	bne.n	801efc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801efb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801efbc:	4618      	mov	r0, r3
 801efbe:	f000 fbc7 	bl	801f750 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801efc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801efc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801efc6:	e0fc      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801efc8:	2300      	movs	r3, #0
 801efca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801efcc:	e0f9      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801efce:	4b50      	ldr	r3, [pc, #320]	@ (801f110 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801efd0:	681b      	ldr	r3, [r3, #0]
 801efd2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801efd6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801efda:	d107      	bne.n	801efec <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801efdc:	f107 0318 	add.w	r3, r7, #24
 801efe0:	4618      	mov	r0, r3
 801efe2:	f000 f90d 	bl	801f200 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 801efe6:	6a3b      	ldr	r3, [r7, #32]
 801efe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801efea:	e0ea      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801efec:	2300      	movs	r3, #0
 801efee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801eff0:	e0e7      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 801eff2:	2300      	movs	r3, #0
 801eff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801eff6:	e0e4      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 801eff8:	e9d7 2300 	ldrd	r2, r3, [r7]
 801effc:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 801f000:	430b      	orrs	r3, r1
 801f002:	f040 808d 	bne.w	801f120 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 801f006:	4b42      	ldr	r3, [pc, #264]	@ (801f110 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801f008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801f00a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 801f00e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801f010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f012:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801f016:	d06b      	beq.n	801f0f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 801f018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f01a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801f01e:	d874      	bhi.n	801f10a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 801f020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f022:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801f026:	d056      	beq.n	801f0d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 801f028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f02a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801f02e:	d86c      	bhi.n	801f10a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 801f030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f032:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801f036:	d03b      	beq.n	801f0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 801f038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f03a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801f03e:	d864      	bhi.n	801f10a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 801f040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f042:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801f046:	d021      	beq.n	801f08c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 801f048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f04a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801f04e:	d85c      	bhi.n	801f10a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 801f050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f052:	2b00      	cmp	r3, #0
 801f054:	d004      	beq.n	801f060 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 801f056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f058:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801f05c:	d004      	beq.n	801f068 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 801f05e:	e054      	b.n	801f10a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 801f060:	f000 f8b8 	bl	801f1d4 <HAL_RCCEx_GetD3PCLK1Freq>
 801f064:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801f066:	e0ac      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801f068:	4b29      	ldr	r3, [pc, #164]	@ (801f110 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801f06a:	681b      	ldr	r3, [r3, #0]
 801f06c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801f070:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801f074:	d107      	bne.n	801f086 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801f076:	f107 0318 	add.w	r3, r7, #24
 801f07a:	4618      	mov	r0, r3
 801f07c:	f000 f8c0 	bl	801f200 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801f080:	69fb      	ldr	r3, [r7, #28]
 801f082:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801f084:	e09d      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801f086:	2300      	movs	r3, #0
 801f088:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801f08a:	e09a      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801f08c:	4b20      	ldr	r3, [pc, #128]	@ (801f110 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801f08e:	681b      	ldr	r3, [r3, #0]
 801f090:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801f094:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801f098:	d107      	bne.n	801f0aa <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801f09a:	f107 030c 	add.w	r3, r7, #12
 801f09e:	4618      	mov	r0, r3
 801f0a0:	f000 fa02 	bl	801f4a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801f0a4:	693b      	ldr	r3, [r7, #16]
 801f0a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801f0a8:	e08b      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801f0aa:	2300      	movs	r3, #0
 801f0ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801f0ae:	e088      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801f0b0:	4b17      	ldr	r3, [pc, #92]	@ (801f110 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801f0b2:	681b      	ldr	r3, [r3, #0]
 801f0b4:	f003 0304 	and.w	r3, r3, #4
 801f0b8:	2b04      	cmp	r3, #4
 801f0ba:	d109      	bne.n	801f0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801f0bc:	4b14      	ldr	r3, [pc, #80]	@ (801f110 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801f0be:	681b      	ldr	r3, [r3, #0]
 801f0c0:	08db      	lsrs	r3, r3, #3
 801f0c2:	f003 0303 	and.w	r3, r3, #3
 801f0c6:	4a13      	ldr	r2, [pc, #76]	@ (801f114 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 801f0c8:	fa22 f303 	lsr.w	r3, r2, r3
 801f0cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801f0ce:	e078      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801f0d0:	2300      	movs	r3, #0
 801f0d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801f0d4:	e075      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 801f0d6:	4b0e      	ldr	r3, [pc, #56]	@ (801f110 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801f0d8:	681b      	ldr	r3, [r3, #0]
 801f0da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801f0de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801f0e2:	d102      	bne.n	801f0ea <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 801f0e4:	4b0c      	ldr	r3, [pc, #48]	@ (801f118 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 801f0e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801f0e8:	e06b      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801f0ea:	2300      	movs	r3, #0
 801f0ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801f0ee:	e068      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801f0f0:	4b07      	ldr	r3, [pc, #28]	@ (801f110 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801f0f2:	681b      	ldr	r3, [r3, #0]
 801f0f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801f0f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801f0fc:	d102      	bne.n	801f104 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 801f0fe:	4b07      	ldr	r3, [pc, #28]	@ (801f11c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 801f100:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801f102:	e05e      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801f104:	2300      	movs	r3, #0
 801f106:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801f108:	e05b      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 801f10a:	2300      	movs	r3, #0
 801f10c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801f10e:	e058      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801f110:	58024400 	.word	0x58024400
 801f114:	03d09000 	.word	0x03d09000
 801f118:	003d0900 	.word	0x003d0900
 801f11c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 801f120:	e9d7 2300 	ldrd	r2, r3, [r7]
 801f124:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 801f128:	430b      	orrs	r3, r1
 801f12a:	d148      	bne.n	801f1be <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 801f12c:	4b27      	ldr	r3, [pc, #156]	@ (801f1cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 801f12e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801f130:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801f134:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801f136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f138:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801f13c:	d02a      	beq.n	801f194 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 801f13e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f140:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801f144:	d838      	bhi.n	801f1b8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 801f146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f148:	2b00      	cmp	r3, #0
 801f14a:	d004      	beq.n	801f156 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 801f14c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f14e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801f152:	d00d      	beq.n	801f170 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 801f154:	e030      	b.n	801f1b8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801f156:	4b1d      	ldr	r3, [pc, #116]	@ (801f1cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 801f158:	681b      	ldr	r3, [r3, #0]
 801f15a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801f15e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801f162:	d102      	bne.n	801f16a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 801f164:	4b1a      	ldr	r3, [pc, #104]	@ (801f1d0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 801f166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801f168:	e02b      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801f16a:	2300      	movs	r3, #0
 801f16c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801f16e:	e028      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801f170:	4b16      	ldr	r3, [pc, #88]	@ (801f1cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 801f172:	681b      	ldr	r3, [r3, #0]
 801f174:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801f178:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801f17c:	d107      	bne.n	801f18e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801f17e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801f182:	4618      	mov	r0, r3
 801f184:	f000 fae4 	bl	801f750 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801f188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f18a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801f18c:	e019      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801f18e:	2300      	movs	r3, #0
 801f190:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801f192:	e016      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801f194:	4b0d      	ldr	r3, [pc, #52]	@ (801f1cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 801f196:	681b      	ldr	r3, [r3, #0]
 801f198:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801f19c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801f1a0:	d107      	bne.n	801f1b2 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801f1a2:	f107 0318 	add.w	r3, r7, #24
 801f1a6:	4618      	mov	r0, r3
 801f1a8:	f000 f82a 	bl	801f200 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801f1ac:	69fb      	ldr	r3, [r7, #28]
 801f1ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801f1b0:	e007      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801f1b2:	2300      	movs	r3, #0
 801f1b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801f1b6:	e004      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 801f1b8:	2300      	movs	r3, #0
 801f1ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801f1bc:	e001      	b.n	801f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 801f1be:	2300      	movs	r3, #0
 801f1c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 801f1c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 801f1c4:	4618      	mov	r0, r3
 801f1c6:	3740      	adds	r7, #64	@ 0x40
 801f1c8:	46bd      	mov	sp, r7
 801f1ca:	bd80      	pop	{r7, pc}
 801f1cc:	58024400 	.word	0x58024400
 801f1d0:	017d7840 	.word	0x017d7840

0801f1d4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 801f1d4:	b580      	push	{r7, lr}
 801f1d6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 801f1d8:	f7fe f816 	bl	801d208 <HAL_RCC_GetHCLKFreq>
 801f1dc:	4602      	mov	r2, r0
 801f1de:	4b06      	ldr	r3, [pc, #24]	@ (801f1f8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 801f1e0:	6a1b      	ldr	r3, [r3, #32]
 801f1e2:	091b      	lsrs	r3, r3, #4
 801f1e4:	f003 0307 	and.w	r3, r3, #7
 801f1e8:	4904      	ldr	r1, [pc, #16]	@ (801f1fc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801f1ea:	5ccb      	ldrb	r3, [r1, r3]
 801f1ec:	f003 031f 	and.w	r3, r3, #31
 801f1f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 801f1f4:	4618      	mov	r0, r3
 801f1f6:	bd80      	pop	{r7, pc}
 801f1f8:	58024400 	.word	0x58024400
 801f1fc:	080289d0 	.word	0x080289d0

0801f200 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 801f200:	b480      	push	{r7}
 801f202:	b089      	sub	sp, #36	@ 0x24
 801f204:	af00      	add	r7, sp, #0
 801f206:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801f208:	4ba1      	ldr	r3, [pc, #644]	@ (801f490 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f20a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f20c:	f003 0303 	and.w	r3, r3, #3
 801f210:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 801f212:	4b9f      	ldr	r3, [pc, #636]	@ (801f490 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f216:	0b1b      	lsrs	r3, r3, #12
 801f218:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801f21c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 801f21e:	4b9c      	ldr	r3, [pc, #624]	@ (801f490 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f222:	091b      	lsrs	r3, r3, #4
 801f224:	f003 0301 	and.w	r3, r3, #1
 801f228:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 801f22a:	4b99      	ldr	r3, [pc, #612]	@ (801f490 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f22c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f22e:	08db      	lsrs	r3, r3, #3
 801f230:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f234:	693a      	ldr	r2, [r7, #16]
 801f236:	fb02 f303 	mul.w	r3, r2, r3
 801f23a:	ee07 3a90 	vmov	s15, r3
 801f23e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f242:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 801f246:	697b      	ldr	r3, [r7, #20]
 801f248:	2b00      	cmp	r3, #0
 801f24a:	f000 8111 	beq.w	801f470 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 801f24e:	69bb      	ldr	r3, [r7, #24]
 801f250:	2b02      	cmp	r3, #2
 801f252:	f000 8083 	beq.w	801f35c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 801f256:	69bb      	ldr	r3, [r7, #24]
 801f258:	2b02      	cmp	r3, #2
 801f25a:	f200 80a1 	bhi.w	801f3a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 801f25e:	69bb      	ldr	r3, [r7, #24]
 801f260:	2b00      	cmp	r3, #0
 801f262:	d003      	beq.n	801f26c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 801f264:	69bb      	ldr	r3, [r7, #24]
 801f266:	2b01      	cmp	r3, #1
 801f268:	d056      	beq.n	801f318 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 801f26a:	e099      	b.n	801f3a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801f26c:	4b88      	ldr	r3, [pc, #544]	@ (801f490 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f26e:	681b      	ldr	r3, [r3, #0]
 801f270:	f003 0320 	and.w	r3, r3, #32
 801f274:	2b00      	cmp	r3, #0
 801f276:	d02d      	beq.n	801f2d4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801f278:	4b85      	ldr	r3, [pc, #532]	@ (801f490 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f27a:	681b      	ldr	r3, [r3, #0]
 801f27c:	08db      	lsrs	r3, r3, #3
 801f27e:	f003 0303 	and.w	r3, r3, #3
 801f282:	4a84      	ldr	r2, [pc, #528]	@ (801f494 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 801f284:	fa22 f303 	lsr.w	r3, r2, r3
 801f288:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801f28a:	68bb      	ldr	r3, [r7, #8]
 801f28c:	ee07 3a90 	vmov	s15, r3
 801f290:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f294:	697b      	ldr	r3, [r7, #20]
 801f296:	ee07 3a90 	vmov	s15, r3
 801f29a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f29e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f2a2:	4b7b      	ldr	r3, [pc, #492]	@ (801f490 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f2a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f2a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f2aa:	ee07 3a90 	vmov	s15, r3
 801f2ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f2b2:	ed97 6a03 	vldr	s12, [r7, #12]
 801f2b6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801f498 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801f2ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f2be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f2c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f2c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f2ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f2ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801f2d2:	e087      	b.n	801f3e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801f2d4:	697b      	ldr	r3, [r7, #20]
 801f2d6:	ee07 3a90 	vmov	s15, r3
 801f2da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f2de:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801f49c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 801f2e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f2e6:	4b6a      	ldr	r3, [pc, #424]	@ (801f490 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f2e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f2ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f2ee:	ee07 3a90 	vmov	s15, r3
 801f2f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f2f6:	ed97 6a03 	vldr	s12, [r7, #12]
 801f2fa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801f498 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801f2fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f306:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f30a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f30e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f312:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f316:	e065      	b.n	801f3e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801f318:	697b      	ldr	r3, [r7, #20]
 801f31a:	ee07 3a90 	vmov	s15, r3
 801f31e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f322:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801f4a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801f326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f32a:	4b59      	ldr	r3, [pc, #356]	@ (801f490 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f32c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f32e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f332:	ee07 3a90 	vmov	s15, r3
 801f336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f33a:	ed97 6a03 	vldr	s12, [r7, #12]
 801f33e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801f498 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801f342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f34a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f34e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f352:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f356:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f35a:	e043      	b.n	801f3e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801f35c:	697b      	ldr	r3, [r7, #20]
 801f35e:	ee07 3a90 	vmov	s15, r3
 801f362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f366:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801f4a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 801f36a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f36e:	4b48      	ldr	r3, [pc, #288]	@ (801f490 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f376:	ee07 3a90 	vmov	s15, r3
 801f37a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f37e:	ed97 6a03 	vldr	s12, [r7, #12]
 801f382:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801f498 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801f386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f38a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f38e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f396:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f39a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f39e:	e021      	b.n	801f3e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801f3a0:	697b      	ldr	r3, [r7, #20]
 801f3a2:	ee07 3a90 	vmov	s15, r3
 801f3a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f3aa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801f4a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801f3ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f3b2:	4b37      	ldr	r3, [pc, #220]	@ (801f490 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f3b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f3b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f3ba:	ee07 3a90 	vmov	s15, r3
 801f3be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f3c2:	ed97 6a03 	vldr	s12, [r7, #12]
 801f3c6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801f498 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801f3ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f3ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f3d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f3d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f3da:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f3de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f3e2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 801f3e4:	4b2a      	ldr	r3, [pc, #168]	@ (801f490 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f3e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f3e8:	0a5b      	lsrs	r3, r3, #9
 801f3ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f3ee:	ee07 3a90 	vmov	s15, r3
 801f3f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f3f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f3fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 801f3fe:	edd7 6a07 	vldr	s13, [r7, #28]
 801f402:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f406:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f40a:	ee17 2a90 	vmov	r2, s15
 801f40e:	687b      	ldr	r3, [r7, #4]
 801f410:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 801f412:	4b1f      	ldr	r3, [pc, #124]	@ (801f490 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f416:	0c1b      	lsrs	r3, r3, #16
 801f418:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f41c:	ee07 3a90 	vmov	s15, r3
 801f420:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f424:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f428:	ee37 7a87 	vadd.f32	s14, s15, s14
 801f42c:	edd7 6a07 	vldr	s13, [r7, #28]
 801f430:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f434:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f438:	ee17 2a90 	vmov	r2, s15
 801f43c:	687b      	ldr	r3, [r7, #4]
 801f43e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 801f440:	4b13      	ldr	r3, [pc, #76]	@ (801f490 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f444:	0e1b      	lsrs	r3, r3, #24
 801f446:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f44a:	ee07 3a90 	vmov	s15, r3
 801f44e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f452:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f456:	ee37 7a87 	vadd.f32	s14, s15, s14
 801f45a:	edd7 6a07 	vldr	s13, [r7, #28]
 801f45e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f462:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f466:	ee17 2a90 	vmov	r2, s15
 801f46a:	687b      	ldr	r3, [r7, #4]
 801f46c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801f46e:	e008      	b.n	801f482 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 801f470:	687b      	ldr	r3, [r7, #4]
 801f472:	2200      	movs	r2, #0
 801f474:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 801f476:	687b      	ldr	r3, [r7, #4]
 801f478:	2200      	movs	r2, #0
 801f47a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 801f47c:	687b      	ldr	r3, [r7, #4]
 801f47e:	2200      	movs	r2, #0
 801f480:	609a      	str	r2, [r3, #8]
}
 801f482:	bf00      	nop
 801f484:	3724      	adds	r7, #36	@ 0x24
 801f486:	46bd      	mov	sp, r7
 801f488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f48c:	4770      	bx	lr
 801f48e:	bf00      	nop
 801f490:	58024400 	.word	0x58024400
 801f494:	03d09000 	.word	0x03d09000
 801f498:	46000000 	.word	0x46000000
 801f49c:	4c742400 	.word	0x4c742400
 801f4a0:	4a742400 	.word	0x4a742400
 801f4a4:	4bbebc20 	.word	0x4bbebc20

0801f4a8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 801f4a8:	b480      	push	{r7}
 801f4aa:	b089      	sub	sp, #36	@ 0x24
 801f4ac:	af00      	add	r7, sp, #0
 801f4ae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801f4b0:	4ba1      	ldr	r3, [pc, #644]	@ (801f738 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f4b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f4b4:	f003 0303 	and.w	r3, r3, #3
 801f4b8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 801f4ba:	4b9f      	ldr	r3, [pc, #636]	@ (801f738 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f4bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f4be:	0d1b      	lsrs	r3, r3, #20
 801f4c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801f4c4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 801f4c6:	4b9c      	ldr	r3, [pc, #624]	@ (801f738 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f4c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f4ca:	0a1b      	lsrs	r3, r3, #8
 801f4cc:	f003 0301 	and.w	r3, r3, #1
 801f4d0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 801f4d2:	4b99      	ldr	r3, [pc, #612]	@ (801f738 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f4d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801f4d6:	08db      	lsrs	r3, r3, #3
 801f4d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f4dc:	693a      	ldr	r2, [r7, #16]
 801f4de:	fb02 f303 	mul.w	r3, r2, r3
 801f4e2:	ee07 3a90 	vmov	s15, r3
 801f4e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f4ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801f4ee:	697b      	ldr	r3, [r7, #20]
 801f4f0:	2b00      	cmp	r3, #0
 801f4f2:	f000 8111 	beq.w	801f718 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 801f4f6:	69bb      	ldr	r3, [r7, #24]
 801f4f8:	2b02      	cmp	r3, #2
 801f4fa:	f000 8083 	beq.w	801f604 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 801f4fe:	69bb      	ldr	r3, [r7, #24]
 801f500:	2b02      	cmp	r3, #2
 801f502:	f200 80a1 	bhi.w	801f648 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 801f506:	69bb      	ldr	r3, [r7, #24]
 801f508:	2b00      	cmp	r3, #0
 801f50a:	d003      	beq.n	801f514 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 801f50c:	69bb      	ldr	r3, [r7, #24]
 801f50e:	2b01      	cmp	r3, #1
 801f510:	d056      	beq.n	801f5c0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 801f512:	e099      	b.n	801f648 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801f514:	4b88      	ldr	r3, [pc, #544]	@ (801f738 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f516:	681b      	ldr	r3, [r3, #0]
 801f518:	f003 0320 	and.w	r3, r3, #32
 801f51c:	2b00      	cmp	r3, #0
 801f51e:	d02d      	beq.n	801f57c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801f520:	4b85      	ldr	r3, [pc, #532]	@ (801f738 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f522:	681b      	ldr	r3, [r3, #0]
 801f524:	08db      	lsrs	r3, r3, #3
 801f526:	f003 0303 	and.w	r3, r3, #3
 801f52a:	4a84      	ldr	r2, [pc, #528]	@ (801f73c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 801f52c:	fa22 f303 	lsr.w	r3, r2, r3
 801f530:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801f532:	68bb      	ldr	r3, [r7, #8]
 801f534:	ee07 3a90 	vmov	s15, r3
 801f538:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f53c:	697b      	ldr	r3, [r7, #20]
 801f53e:	ee07 3a90 	vmov	s15, r3
 801f542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f546:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f54a:	4b7b      	ldr	r3, [pc, #492]	@ (801f738 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f54c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f54e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f552:	ee07 3a90 	vmov	s15, r3
 801f556:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f55a:	ed97 6a03 	vldr	s12, [r7, #12]
 801f55e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801f740 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801f562:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f566:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f56a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f56e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f572:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f576:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801f57a:	e087      	b.n	801f68c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801f57c:	697b      	ldr	r3, [r7, #20]
 801f57e:	ee07 3a90 	vmov	s15, r3
 801f582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f586:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801f744 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 801f58a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f58e:	4b6a      	ldr	r3, [pc, #424]	@ (801f738 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f596:	ee07 3a90 	vmov	s15, r3
 801f59a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f59e:	ed97 6a03 	vldr	s12, [r7, #12]
 801f5a2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801f740 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801f5a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f5aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f5ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f5b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f5b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f5ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f5be:	e065      	b.n	801f68c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801f5c0:	697b      	ldr	r3, [r7, #20]
 801f5c2:	ee07 3a90 	vmov	s15, r3
 801f5c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f5ca:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801f748 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801f5ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f5d2:	4b59      	ldr	r3, [pc, #356]	@ (801f738 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f5d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f5d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f5da:	ee07 3a90 	vmov	s15, r3
 801f5de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f5e2:	ed97 6a03 	vldr	s12, [r7, #12]
 801f5e6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801f740 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801f5ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f5ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f5f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f5f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f5fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f5fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f602:	e043      	b.n	801f68c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801f604:	697b      	ldr	r3, [r7, #20]
 801f606:	ee07 3a90 	vmov	s15, r3
 801f60a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f60e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801f74c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 801f612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f616:	4b48      	ldr	r3, [pc, #288]	@ (801f738 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f61a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f61e:	ee07 3a90 	vmov	s15, r3
 801f622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f626:	ed97 6a03 	vldr	s12, [r7, #12]
 801f62a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801f740 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801f62e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f636:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f63a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f63e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f642:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f646:	e021      	b.n	801f68c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801f648:	697b      	ldr	r3, [r7, #20]
 801f64a:	ee07 3a90 	vmov	s15, r3
 801f64e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f652:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801f748 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801f656:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f65a:	4b37      	ldr	r3, [pc, #220]	@ (801f738 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f65c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f65e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f662:	ee07 3a90 	vmov	s15, r3
 801f666:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f66a:	ed97 6a03 	vldr	s12, [r7, #12]
 801f66e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801f740 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801f672:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f676:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f67a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f67e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f682:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f686:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f68a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 801f68c:	4b2a      	ldr	r3, [pc, #168]	@ (801f738 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f68e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f690:	0a5b      	lsrs	r3, r3, #9
 801f692:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f696:	ee07 3a90 	vmov	s15, r3
 801f69a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f69e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f6a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 801f6a6:	edd7 6a07 	vldr	s13, [r7, #28]
 801f6aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f6ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f6b2:	ee17 2a90 	vmov	r2, s15
 801f6b6:	687b      	ldr	r3, [r7, #4]
 801f6b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 801f6ba:	4b1f      	ldr	r3, [pc, #124]	@ (801f738 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f6bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f6be:	0c1b      	lsrs	r3, r3, #16
 801f6c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f6c4:	ee07 3a90 	vmov	s15, r3
 801f6c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f6cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f6d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 801f6d4:	edd7 6a07 	vldr	s13, [r7, #28]
 801f6d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f6dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f6e0:	ee17 2a90 	vmov	r2, s15
 801f6e4:	687b      	ldr	r3, [r7, #4]
 801f6e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 801f6e8:	4b13      	ldr	r3, [pc, #76]	@ (801f738 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f6ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f6ec:	0e1b      	lsrs	r3, r3, #24
 801f6ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f6f2:	ee07 3a90 	vmov	s15, r3
 801f6f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f6fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f6fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 801f702:	edd7 6a07 	vldr	s13, [r7, #28]
 801f706:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f70a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f70e:	ee17 2a90 	vmov	r2, s15
 801f712:	687b      	ldr	r3, [r7, #4]
 801f714:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 801f716:	e008      	b.n	801f72a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 801f718:	687b      	ldr	r3, [r7, #4]
 801f71a:	2200      	movs	r2, #0
 801f71c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801f71e:	687b      	ldr	r3, [r7, #4]
 801f720:	2200      	movs	r2, #0
 801f722:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 801f724:	687b      	ldr	r3, [r7, #4]
 801f726:	2200      	movs	r2, #0
 801f728:	609a      	str	r2, [r3, #8]
}
 801f72a:	bf00      	nop
 801f72c:	3724      	adds	r7, #36	@ 0x24
 801f72e:	46bd      	mov	sp, r7
 801f730:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f734:	4770      	bx	lr
 801f736:	bf00      	nop
 801f738:	58024400 	.word	0x58024400
 801f73c:	03d09000 	.word	0x03d09000
 801f740:	46000000 	.word	0x46000000
 801f744:	4c742400 	.word	0x4c742400
 801f748:	4a742400 	.word	0x4a742400
 801f74c:	4bbebc20 	.word	0x4bbebc20

0801f750 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 801f750:	b480      	push	{r7}
 801f752:	b089      	sub	sp, #36	@ 0x24
 801f754:	af00      	add	r7, sp, #0
 801f756:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801f758:	4ba0      	ldr	r3, [pc, #640]	@ (801f9dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801f75a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f75c:	f003 0303 	and.w	r3, r3, #3
 801f760:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 801f762:	4b9e      	ldr	r3, [pc, #632]	@ (801f9dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801f764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f766:	091b      	lsrs	r3, r3, #4
 801f768:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801f76c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 801f76e:	4b9b      	ldr	r3, [pc, #620]	@ (801f9dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801f770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f772:	f003 0301 	and.w	r3, r3, #1
 801f776:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801f778:	4b98      	ldr	r3, [pc, #608]	@ (801f9dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801f77a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f77c:	08db      	lsrs	r3, r3, #3
 801f77e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f782:	693a      	ldr	r2, [r7, #16]
 801f784:	fb02 f303 	mul.w	r3, r2, r3
 801f788:	ee07 3a90 	vmov	s15, r3
 801f78c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f790:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 801f794:	697b      	ldr	r3, [r7, #20]
 801f796:	2b00      	cmp	r3, #0
 801f798:	f000 8111 	beq.w	801f9be <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 801f79c:	69bb      	ldr	r3, [r7, #24]
 801f79e:	2b02      	cmp	r3, #2
 801f7a0:	f000 8083 	beq.w	801f8aa <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 801f7a4:	69bb      	ldr	r3, [r7, #24]
 801f7a6:	2b02      	cmp	r3, #2
 801f7a8:	f200 80a1 	bhi.w	801f8ee <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 801f7ac:	69bb      	ldr	r3, [r7, #24]
 801f7ae:	2b00      	cmp	r3, #0
 801f7b0:	d003      	beq.n	801f7ba <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 801f7b2:	69bb      	ldr	r3, [r7, #24]
 801f7b4:	2b01      	cmp	r3, #1
 801f7b6:	d056      	beq.n	801f866 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 801f7b8:	e099      	b.n	801f8ee <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801f7ba:	4b88      	ldr	r3, [pc, #544]	@ (801f9dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801f7bc:	681b      	ldr	r3, [r3, #0]
 801f7be:	f003 0320 	and.w	r3, r3, #32
 801f7c2:	2b00      	cmp	r3, #0
 801f7c4:	d02d      	beq.n	801f822 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801f7c6:	4b85      	ldr	r3, [pc, #532]	@ (801f9dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801f7c8:	681b      	ldr	r3, [r3, #0]
 801f7ca:	08db      	lsrs	r3, r3, #3
 801f7cc:	f003 0303 	and.w	r3, r3, #3
 801f7d0:	4a83      	ldr	r2, [pc, #524]	@ (801f9e0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 801f7d2:	fa22 f303 	lsr.w	r3, r2, r3
 801f7d6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801f7d8:	68bb      	ldr	r3, [r7, #8]
 801f7da:	ee07 3a90 	vmov	s15, r3
 801f7de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f7e2:	697b      	ldr	r3, [r7, #20]
 801f7e4:	ee07 3a90 	vmov	s15, r3
 801f7e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f7ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f7f0:	4b7a      	ldr	r3, [pc, #488]	@ (801f9dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801f7f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f7f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f7f8:	ee07 3a90 	vmov	s15, r3
 801f7fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f800:	ed97 6a03 	vldr	s12, [r7, #12]
 801f804:	eddf 5a77 	vldr	s11, [pc, #476]	@ 801f9e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801f808:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f80c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f810:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f814:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f818:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f81c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801f820:	e087      	b.n	801f932 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801f822:	697b      	ldr	r3, [r7, #20]
 801f824:	ee07 3a90 	vmov	s15, r3
 801f828:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f82c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 801f9e8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 801f830:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f834:	4b69      	ldr	r3, [pc, #420]	@ (801f9dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801f836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f83c:	ee07 3a90 	vmov	s15, r3
 801f840:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f844:	ed97 6a03 	vldr	s12, [r7, #12]
 801f848:	eddf 5a66 	vldr	s11, [pc, #408]	@ 801f9e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801f84c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f850:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f854:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f858:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f85c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f860:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f864:	e065      	b.n	801f932 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801f866:	697b      	ldr	r3, [r7, #20]
 801f868:	ee07 3a90 	vmov	s15, r3
 801f86c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f870:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 801f9ec <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 801f874:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f878:	4b58      	ldr	r3, [pc, #352]	@ (801f9dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801f87a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f87c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f880:	ee07 3a90 	vmov	s15, r3
 801f884:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f888:	ed97 6a03 	vldr	s12, [r7, #12]
 801f88c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 801f9e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801f890:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f894:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f898:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f89c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f8a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f8a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f8a8:	e043      	b.n	801f932 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801f8aa:	697b      	ldr	r3, [r7, #20]
 801f8ac:	ee07 3a90 	vmov	s15, r3
 801f8b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f8b4:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 801f9f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 801f8b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f8bc:	4b47      	ldr	r3, [pc, #284]	@ (801f9dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801f8be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f8c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f8c4:	ee07 3a90 	vmov	s15, r3
 801f8c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f8cc:	ed97 6a03 	vldr	s12, [r7, #12]
 801f8d0:	eddf 5a44 	vldr	s11, [pc, #272]	@ 801f9e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801f8d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f8d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f8dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f8e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f8e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f8e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f8ec:	e021      	b.n	801f932 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801f8ee:	697b      	ldr	r3, [r7, #20]
 801f8f0:	ee07 3a90 	vmov	s15, r3
 801f8f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f8f8:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 801f9e8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 801f8fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f900:	4b36      	ldr	r3, [pc, #216]	@ (801f9dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801f902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f904:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f908:	ee07 3a90 	vmov	s15, r3
 801f90c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f910:	ed97 6a03 	vldr	s12, [r7, #12]
 801f914:	eddf 5a33 	vldr	s11, [pc, #204]	@ 801f9e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801f918:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f91c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f920:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f924:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f928:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f92c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f930:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 801f932:	4b2a      	ldr	r3, [pc, #168]	@ (801f9dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801f934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f936:	0a5b      	lsrs	r3, r3, #9
 801f938:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f93c:	ee07 3a90 	vmov	s15, r3
 801f940:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f944:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f948:	ee37 7a87 	vadd.f32	s14, s15, s14
 801f94c:	edd7 6a07 	vldr	s13, [r7, #28]
 801f950:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f954:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f958:	ee17 2a90 	vmov	r2, s15
 801f95c:	687b      	ldr	r3, [r7, #4]
 801f95e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 801f960:	4b1e      	ldr	r3, [pc, #120]	@ (801f9dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801f962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f964:	0c1b      	lsrs	r3, r3, #16
 801f966:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f96a:	ee07 3a90 	vmov	s15, r3
 801f96e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f972:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f976:	ee37 7a87 	vadd.f32	s14, s15, s14
 801f97a:	edd7 6a07 	vldr	s13, [r7, #28]
 801f97e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f982:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f986:	ee17 2a90 	vmov	r2, s15
 801f98a:	687b      	ldr	r3, [r7, #4]
 801f98c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 801f98e:	4b13      	ldr	r3, [pc, #76]	@ (801f9dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801f990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f992:	0e1b      	lsrs	r3, r3, #24
 801f994:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f998:	ee07 3a90 	vmov	s15, r3
 801f99c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f9a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f9a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 801f9a8:	edd7 6a07 	vldr	s13, [r7, #28]
 801f9ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f9b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f9b4:	ee17 2a90 	vmov	r2, s15
 801f9b8:	687b      	ldr	r3, [r7, #4]
 801f9ba:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 801f9bc:	e008      	b.n	801f9d0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 801f9be:	687b      	ldr	r3, [r7, #4]
 801f9c0:	2200      	movs	r2, #0
 801f9c2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 801f9c4:	687b      	ldr	r3, [r7, #4]
 801f9c6:	2200      	movs	r2, #0
 801f9c8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 801f9ca:	687b      	ldr	r3, [r7, #4]
 801f9cc:	2200      	movs	r2, #0
 801f9ce:	609a      	str	r2, [r3, #8]
}
 801f9d0:	bf00      	nop
 801f9d2:	3724      	adds	r7, #36	@ 0x24
 801f9d4:	46bd      	mov	sp, r7
 801f9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f9da:	4770      	bx	lr
 801f9dc:	58024400 	.word	0x58024400
 801f9e0:	03d09000 	.word	0x03d09000
 801f9e4:	46000000 	.word	0x46000000
 801f9e8:	4c742400 	.word	0x4c742400
 801f9ec:	4a742400 	.word	0x4a742400
 801f9f0:	4bbebc20 	.word	0x4bbebc20

0801f9f4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 801f9f4:	b580      	push	{r7, lr}
 801f9f6:	b084      	sub	sp, #16
 801f9f8:	af00      	add	r7, sp, #0
 801f9fa:	6078      	str	r0, [r7, #4]
 801f9fc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801f9fe:	2300      	movs	r3, #0
 801fa00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801fa02:	4b53      	ldr	r3, [pc, #332]	@ (801fb50 <RCCEx_PLL2_Config+0x15c>)
 801fa04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fa06:	f003 0303 	and.w	r3, r3, #3
 801fa0a:	2b03      	cmp	r3, #3
 801fa0c:	d101      	bne.n	801fa12 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801fa0e:	2301      	movs	r3, #1
 801fa10:	e099      	b.n	801fb46 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801fa12:	4b4f      	ldr	r3, [pc, #316]	@ (801fb50 <RCCEx_PLL2_Config+0x15c>)
 801fa14:	681b      	ldr	r3, [r3, #0]
 801fa16:	4a4e      	ldr	r2, [pc, #312]	@ (801fb50 <RCCEx_PLL2_Config+0x15c>)
 801fa18:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801fa1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801fa1e:	f7f9 fd2f 	bl	8019480 <HAL_GetTick>
 801fa22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801fa24:	e008      	b.n	801fa38 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801fa26:	f7f9 fd2b 	bl	8019480 <HAL_GetTick>
 801fa2a:	4602      	mov	r2, r0
 801fa2c:	68bb      	ldr	r3, [r7, #8]
 801fa2e:	1ad3      	subs	r3, r2, r3
 801fa30:	2b02      	cmp	r3, #2
 801fa32:	d901      	bls.n	801fa38 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 801fa34:	2303      	movs	r3, #3
 801fa36:	e086      	b.n	801fb46 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801fa38:	4b45      	ldr	r3, [pc, #276]	@ (801fb50 <RCCEx_PLL2_Config+0x15c>)
 801fa3a:	681b      	ldr	r3, [r3, #0]
 801fa3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801fa40:	2b00      	cmp	r3, #0
 801fa42:	d1f0      	bne.n	801fa26 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 801fa44:	4b42      	ldr	r3, [pc, #264]	@ (801fb50 <RCCEx_PLL2_Config+0x15c>)
 801fa46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fa48:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801fa4c:	687b      	ldr	r3, [r7, #4]
 801fa4e:	681b      	ldr	r3, [r3, #0]
 801fa50:	031b      	lsls	r3, r3, #12
 801fa52:	493f      	ldr	r1, [pc, #252]	@ (801fb50 <RCCEx_PLL2_Config+0x15c>)
 801fa54:	4313      	orrs	r3, r2
 801fa56:	628b      	str	r3, [r1, #40]	@ 0x28
 801fa58:	687b      	ldr	r3, [r7, #4]
 801fa5a:	685b      	ldr	r3, [r3, #4]
 801fa5c:	3b01      	subs	r3, #1
 801fa5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801fa62:	687b      	ldr	r3, [r7, #4]
 801fa64:	689b      	ldr	r3, [r3, #8]
 801fa66:	3b01      	subs	r3, #1
 801fa68:	025b      	lsls	r3, r3, #9
 801fa6a:	b29b      	uxth	r3, r3
 801fa6c:	431a      	orrs	r2, r3
 801fa6e:	687b      	ldr	r3, [r7, #4]
 801fa70:	68db      	ldr	r3, [r3, #12]
 801fa72:	3b01      	subs	r3, #1
 801fa74:	041b      	lsls	r3, r3, #16
 801fa76:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801fa7a:	431a      	orrs	r2, r3
 801fa7c:	687b      	ldr	r3, [r7, #4]
 801fa7e:	691b      	ldr	r3, [r3, #16]
 801fa80:	3b01      	subs	r3, #1
 801fa82:	061b      	lsls	r3, r3, #24
 801fa84:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801fa88:	4931      	ldr	r1, [pc, #196]	@ (801fb50 <RCCEx_PLL2_Config+0x15c>)
 801fa8a:	4313      	orrs	r3, r2
 801fa8c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801fa8e:	4b30      	ldr	r3, [pc, #192]	@ (801fb50 <RCCEx_PLL2_Config+0x15c>)
 801fa90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fa92:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 801fa96:	687b      	ldr	r3, [r7, #4]
 801fa98:	695b      	ldr	r3, [r3, #20]
 801fa9a:	492d      	ldr	r1, [pc, #180]	@ (801fb50 <RCCEx_PLL2_Config+0x15c>)
 801fa9c:	4313      	orrs	r3, r2
 801fa9e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 801faa0:	4b2b      	ldr	r3, [pc, #172]	@ (801fb50 <RCCEx_PLL2_Config+0x15c>)
 801faa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801faa4:	f023 0220 	bic.w	r2, r3, #32
 801faa8:	687b      	ldr	r3, [r7, #4]
 801faaa:	699b      	ldr	r3, [r3, #24]
 801faac:	4928      	ldr	r1, [pc, #160]	@ (801fb50 <RCCEx_PLL2_Config+0x15c>)
 801faae:	4313      	orrs	r3, r2
 801fab0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801fab2:	4b27      	ldr	r3, [pc, #156]	@ (801fb50 <RCCEx_PLL2_Config+0x15c>)
 801fab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fab6:	4a26      	ldr	r2, [pc, #152]	@ (801fb50 <RCCEx_PLL2_Config+0x15c>)
 801fab8:	f023 0310 	bic.w	r3, r3, #16
 801fabc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801fabe:	4b24      	ldr	r3, [pc, #144]	@ (801fb50 <RCCEx_PLL2_Config+0x15c>)
 801fac0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801fac2:	4b24      	ldr	r3, [pc, #144]	@ (801fb54 <RCCEx_PLL2_Config+0x160>)
 801fac4:	4013      	ands	r3, r2
 801fac6:	687a      	ldr	r2, [r7, #4]
 801fac8:	69d2      	ldr	r2, [r2, #28]
 801faca:	00d2      	lsls	r2, r2, #3
 801facc:	4920      	ldr	r1, [pc, #128]	@ (801fb50 <RCCEx_PLL2_Config+0x15c>)
 801face:	4313      	orrs	r3, r2
 801fad0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801fad2:	4b1f      	ldr	r3, [pc, #124]	@ (801fb50 <RCCEx_PLL2_Config+0x15c>)
 801fad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fad6:	4a1e      	ldr	r2, [pc, #120]	@ (801fb50 <RCCEx_PLL2_Config+0x15c>)
 801fad8:	f043 0310 	orr.w	r3, r3, #16
 801fadc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801fade:	683b      	ldr	r3, [r7, #0]
 801fae0:	2b00      	cmp	r3, #0
 801fae2:	d106      	bne.n	801faf2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 801fae4:	4b1a      	ldr	r3, [pc, #104]	@ (801fb50 <RCCEx_PLL2_Config+0x15c>)
 801fae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fae8:	4a19      	ldr	r2, [pc, #100]	@ (801fb50 <RCCEx_PLL2_Config+0x15c>)
 801faea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801faee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801faf0:	e00f      	b.n	801fb12 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801faf2:	683b      	ldr	r3, [r7, #0]
 801faf4:	2b01      	cmp	r3, #1
 801faf6:	d106      	bne.n	801fb06 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 801faf8:	4b15      	ldr	r3, [pc, #84]	@ (801fb50 <RCCEx_PLL2_Config+0x15c>)
 801fafa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fafc:	4a14      	ldr	r2, [pc, #80]	@ (801fb50 <RCCEx_PLL2_Config+0x15c>)
 801fafe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801fb02:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801fb04:	e005      	b.n	801fb12 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801fb06:	4b12      	ldr	r3, [pc, #72]	@ (801fb50 <RCCEx_PLL2_Config+0x15c>)
 801fb08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fb0a:	4a11      	ldr	r2, [pc, #68]	@ (801fb50 <RCCEx_PLL2_Config+0x15c>)
 801fb0c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801fb10:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801fb12:	4b0f      	ldr	r3, [pc, #60]	@ (801fb50 <RCCEx_PLL2_Config+0x15c>)
 801fb14:	681b      	ldr	r3, [r3, #0]
 801fb16:	4a0e      	ldr	r2, [pc, #56]	@ (801fb50 <RCCEx_PLL2_Config+0x15c>)
 801fb18:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801fb1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801fb1e:	f7f9 fcaf 	bl	8019480 <HAL_GetTick>
 801fb22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801fb24:	e008      	b.n	801fb38 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801fb26:	f7f9 fcab 	bl	8019480 <HAL_GetTick>
 801fb2a:	4602      	mov	r2, r0
 801fb2c:	68bb      	ldr	r3, [r7, #8]
 801fb2e:	1ad3      	subs	r3, r2, r3
 801fb30:	2b02      	cmp	r3, #2
 801fb32:	d901      	bls.n	801fb38 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 801fb34:	2303      	movs	r3, #3
 801fb36:	e006      	b.n	801fb46 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801fb38:	4b05      	ldr	r3, [pc, #20]	@ (801fb50 <RCCEx_PLL2_Config+0x15c>)
 801fb3a:	681b      	ldr	r3, [r3, #0]
 801fb3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801fb40:	2b00      	cmp	r3, #0
 801fb42:	d0f0      	beq.n	801fb26 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 801fb44:	7bfb      	ldrb	r3, [r7, #15]
}
 801fb46:	4618      	mov	r0, r3
 801fb48:	3710      	adds	r7, #16
 801fb4a:	46bd      	mov	sp, r7
 801fb4c:	bd80      	pop	{r7, pc}
 801fb4e:	bf00      	nop
 801fb50:	58024400 	.word	0x58024400
 801fb54:	ffff0007 	.word	0xffff0007

0801fb58 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 801fb58:	b580      	push	{r7, lr}
 801fb5a:	b084      	sub	sp, #16
 801fb5c:	af00      	add	r7, sp, #0
 801fb5e:	6078      	str	r0, [r7, #4]
 801fb60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801fb62:	2300      	movs	r3, #0
 801fb64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801fb66:	4b53      	ldr	r3, [pc, #332]	@ (801fcb4 <RCCEx_PLL3_Config+0x15c>)
 801fb68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fb6a:	f003 0303 	and.w	r3, r3, #3
 801fb6e:	2b03      	cmp	r3, #3
 801fb70:	d101      	bne.n	801fb76 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801fb72:	2301      	movs	r3, #1
 801fb74:	e099      	b.n	801fcaa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801fb76:	4b4f      	ldr	r3, [pc, #316]	@ (801fcb4 <RCCEx_PLL3_Config+0x15c>)
 801fb78:	681b      	ldr	r3, [r3, #0]
 801fb7a:	4a4e      	ldr	r2, [pc, #312]	@ (801fcb4 <RCCEx_PLL3_Config+0x15c>)
 801fb7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801fb80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801fb82:	f7f9 fc7d 	bl	8019480 <HAL_GetTick>
 801fb86:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801fb88:	e008      	b.n	801fb9c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801fb8a:	f7f9 fc79 	bl	8019480 <HAL_GetTick>
 801fb8e:	4602      	mov	r2, r0
 801fb90:	68bb      	ldr	r3, [r7, #8]
 801fb92:	1ad3      	subs	r3, r2, r3
 801fb94:	2b02      	cmp	r3, #2
 801fb96:	d901      	bls.n	801fb9c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 801fb98:	2303      	movs	r3, #3
 801fb9a:	e086      	b.n	801fcaa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801fb9c:	4b45      	ldr	r3, [pc, #276]	@ (801fcb4 <RCCEx_PLL3_Config+0x15c>)
 801fb9e:	681b      	ldr	r3, [r3, #0]
 801fba0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801fba4:	2b00      	cmp	r3, #0
 801fba6:	d1f0      	bne.n	801fb8a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 801fba8:	4b42      	ldr	r3, [pc, #264]	@ (801fcb4 <RCCEx_PLL3_Config+0x15c>)
 801fbaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fbac:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 801fbb0:	687b      	ldr	r3, [r7, #4]
 801fbb2:	681b      	ldr	r3, [r3, #0]
 801fbb4:	051b      	lsls	r3, r3, #20
 801fbb6:	493f      	ldr	r1, [pc, #252]	@ (801fcb4 <RCCEx_PLL3_Config+0x15c>)
 801fbb8:	4313      	orrs	r3, r2
 801fbba:	628b      	str	r3, [r1, #40]	@ 0x28
 801fbbc:	687b      	ldr	r3, [r7, #4]
 801fbbe:	685b      	ldr	r3, [r3, #4]
 801fbc0:	3b01      	subs	r3, #1
 801fbc2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801fbc6:	687b      	ldr	r3, [r7, #4]
 801fbc8:	689b      	ldr	r3, [r3, #8]
 801fbca:	3b01      	subs	r3, #1
 801fbcc:	025b      	lsls	r3, r3, #9
 801fbce:	b29b      	uxth	r3, r3
 801fbd0:	431a      	orrs	r2, r3
 801fbd2:	687b      	ldr	r3, [r7, #4]
 801fbd4:	68db      	ldr	r3, [r3, #12]
 801fbd6:	3b01      	subs	r3, #1
 801fbd8:	041b      	lsls	r3, r3, #16
 801fbda:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801fbde:	431a      	orrs	r2, r3
 801fbe0:	687b      	ldr	r3, [r7, #4]
 801fbe2:	691b      	ldr	r3, [r3, #16]
 801fbe4:	3b01      	subs	r3, #1
 801fbe6:	061b      	lsls	r3, r3, #24
 801fbe8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801fbec:	4931      	ldr	r1, [pc, #196]	@ (801fcb4 <RCCEx_PLL3_Config+0x15c>)
 801fbee:	4313      	orrs	r3, r2
 801fbf0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801fbf2:	4b30      	ldr	r3, [pc, #192]	@ (801fcb4 <RCCEx_PLL3_Config+0x15c>)
 801fbf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fbf6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801fbfa:	687b      	ldr	r3, [r7, #4]
 801fbfc:	695b      	ldr	r3, [r3, #20]
 801fbfe:	492d      	ldr	r1, [pc, #180]	@ (801fcb4 <RCCEx_PLL3_Config+0x15c>)
 801fc00:	4313      	orrs	r3, r2
 801fc02:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 801fc04:	4b2b      	ldr	r3, [pc, #172]	@ (801fcb4 <RCCEx_PLL3_Config+0x15c>)
 801fc06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fc08:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 801fc0c:	687b      	ldr	r3, [r7, #4]
 801fc0e:	699b      	ldr	r3, [r3, #24]
 801fc10:	4928      	ldr	r1, [pc, #160]	@ (801fcb4 <RCCEx_PLL3_Config+0x15c>)
 801fc12:	4313      	orrs	r3, r2
 801fc14:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801fc16:	4b27      	ldr	r3, [pc, #156]	@ (801fcb4 <RCCEx_PLL3_Config+0x15c>)
 801fc18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fc1a:	4a26      	ldr	r2, [pc, #152]	@ (801fcb4 <RCCEx_PLL3_Config+0x15c>)
 801fc1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801fc20:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801fc22:	4b24      	ldr	r3, [pc, #144]	@ (801fcb4 <RCCEx_PLL3_Config+0x15c>)
 801fc24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801fc26:	4b24      	ldr	r3, [pc, #144]	@ (801fcb8 <RCCEx_PLL3_Config+0x160>)
 801fc28:	4013      	ands	r3, r2
 801fc2a:	687a      	ldr	r2, [r7, #4]
 801fc2c:	69d2      	ldr	r2, [r2, #28]
 801fc2e:	00d2      	lsls	r2, r2, #3
 801fc30:	4920      	ldr	r1, [pc, #128]	@ (801fcb4 <RCCEx_PLL3_Config+0x15c>)
 801fc32:	4313      	orrs	r3, r2
 801fc34:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801fc36:	4b1f      	ldr	r3, [pc, #124]	@ (801fcb4 <RCCEx_PLL3_Config+0x15c>)
 801fc38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fc3a:	4a1e      	ldr	r2, [pc, #120]	@ (801fcb4 <RCCEx_PLL3_Config+0x15c>)
 801fc3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801fc40:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801fc42:	683b      	ldr	r3, [r7, #0]
 801fc44:	2b00      	cmp	r3, #0
 801fc46:	d106      	bne.n	801fc56 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 801fc48:	4b1a      	ldr	r3, [pc, #104]	@ (801fcb4 <RCCEx_PLL3_Config+0x15c>)
 801fc4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fc4c:	4a19      	ldr	r2, [pc, #100]	@ (801fcb4 <RCCEx_PLL3_Config+0x15c>)
 801fc4e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 801fc52:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801fc54:	e00f      	b.n	801fc76 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801fc56:	683b      	ldr	r3, [r7, #0]
 801fc58:	2b01      	cmp	r3, #1
 801fc5a:	d106      	bne.n	801fc6a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 801fc5c:	4b15      	ldr	r3, [pc, #84]	@ (801fcb4 <RCCEx_PLL3_Config+0x15c>)
 801fc5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fc60:	4a14      	ldr	r2, [pc, #80]	@ (801fcb4 <RCCEx_PLL3_Config+0x15c>)
 801fc62:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801fc66:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801fc68:	e005      	b.n	801fc76 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801fc6a:	4b12      	ldr	r3, [pc, #72]	@ (801fcb4 <RCCEx_PLL3_Config+0x15c>)
 801fc6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fc6e:	4a11      	ldr	r2, [pc, #68]	@ (801fcb4 <RCCEx_PLL3_Config+0x15c>)
 801fc70:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801fc74:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801fc76:	4b0f      	ldr	r3, [pc, #60]	@ (801fcb4 <RCCEx_PLL3_Config+0x15c>)
 801fc78:	681b      	ldr	r3, [r3, #0]
 801fc7a:	4a0e      	ldr	r2, [pc, #56]	@ (801fcb4 <RCCEx_PLL3_Config+0x15c>)
 801fc7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801fc80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801fc82:	f7f9 fbfd 	bl	8019480 <HAL_GetTick>
 801fc86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801fc88:	e008      	b.n	801fc9c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801fc8a:	f7f9 fbf9 	bl	8019480 <HAL_GetTick>
 801fc8e:	4602      	mov	r2, r0
 801fc90:	68bb      	ldr	r3, [r7, #8]
 801fc92:	1ad3      	subs	r3, r2, r3
 801fc94:	2b02      	cmp	r3, #2
 801fc96:	d901      	bls.n	801fc9c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 801fc98:	2303      	movs	r3, #3
 801fc9a:	e006      	b.n	801fcaa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801fc9c:	4b05      	ldr	r3, [pc, #20]	@ (801fcb4 <RCCEx_PLL3_Config+0x15c>)
 801fc9e:	681b      	ldr	r3, [r3, #0]
 801fca0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801fca4:	2b00      	cmp	r3, #0
 801fca6:	d0f0      	beq.n	801fc8a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 801fca8:	7bfb      	ldrb	r3, [r7, #15]
}
 801fcaa:	4618      	mov	r0, r3
 801fcac:	3710      	adds	r7, #16
 801fcae:	46bd      	mov	sp, r7
 801fcb0:	bd80      	pop	{r7, pc}
 801fcb2:	bf00      	nop
 801fcb4:	58024400 	.word	0x58024400
 801fcb8:	ffff0007 	.word	0xffff0007

0801fcbc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 801fcbc:	b580      	push	{r7, lr}
 801fcbe:	b08a      	sub	sp, #40	@ 0x28
 801fcc0:	af00      	add	r7, sp, #0
 801fcc2:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 801fcc4:	687b      	ldr	r3, [r7, #4]
 801fcc6:	2b00      	cmp	r3, #0
 801fcc8:	d101      	bne.n	801fcce <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 801fcca:	2301      	movs	r3, #1
 801fccc:	e075      	b.n	801fdba <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 801fcce:	687b      	ldr	r3, [r7, #4]
 801fcd0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801fcd4:	b2db      	uxtb	r3, r3
 801fcd6:	2b00      	cmp	r3, #0
 801fcd8:	d105      	bne.n	801fce6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 801fcda:	687b      	ldr	r3, [r7, #4]
 801fcdc:	2200      	movs	r2, #0
 801fcde:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 801fce0:	6878      	ldr	r0, [r7, #4]
 801fce2:	f7ed fe6f 	bl	800d9c4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 801fce6:	687b      	ldr	r3, [r7, #4]
 801fce8:	2204      	movs	r2, #4
 801fcea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 801fcee:	6878      	ldr	r0, [r7, #4]
 801fcf0:	f000 f868 	bl	801fdc4 <HAL_SD_InitCard>
 801fcf4:	4603      	mov	r3, r0
 801fcf6:	2b00      	cmp	r3, #0
 801fcf8:	d001      	beq.n	801fcfe <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 801fcfa:	2301      	movs	r3, #1
 801fcfc:	e05d      	b.n	801fdba <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 801fcfe:	f107 0308 	add.w	r3, r7, #8
 801fd02:	4619      	mov	r1, r3
 801fd04:	6878      	ldr	r0, [r7, #4]
 801fd06:	f000 fdaf 	bl	8020868 <HAL_SD_GetCardStatus>
 801fd0a:	4603      	mov	r3, r0
 801fd0c:	2b00      	cmp	r3, #0
 801fd0e:	d001      	beq.n	801fd14 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 801fd10:	2301      	movs	r3, #1
 801fd12:	e052      	b.n	801fdba <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 801fd14:	7e3b      	ldrb	r3, [r7, #24]
 801fd16:	b2db      	uxtb	r3, r3
 801fd18:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 801fd1a:	7e7b      	ldrb	r3, [r7, #25]
 801fd1c:	b2db      	uxtb	r3, r3
 801fd1e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 801fd20:	687b      	ldr	r3, [r7, #4]
 801fd22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801fd24:	2b01      	cmp	r3, #1
 801fd26:	d10a      	bne.n	801fd3e <HAL_SD_Init+0x82>
 801fd28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fd2a:	2b00      	cmp	r3, #0
 801fd2c:	d102      	bne.n	801fd34 <HAL_SD_Init+0x78>
 801fd2e:	6a3b      	ldr	r3, [r7, #32]
 801fd30:	2b00      	cmp	r3, #0
 801fd32:	d004      	beq.n	801fd3e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 801fd34:	687b      	ldr	r3, [r7, #4]
 801fd36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801fd3a:	659a      	str	r2, [r3, #88]	@ 0x58
 801fd3c:	e00b      	b.n	801fd56 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 801fd3e:	687b      	ldr	r3, [r7, #4]
 801fd40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801fd42:	2b01      	cmp	r3, #1
 801fd44:	d104      	bne.n	801fd50 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 801fd46:	687b      	ldr	r3, [r7, #4]
 801fd48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801fd4c:	659a      	str	r2, [r3, #88]	@ 0x58
 801fd4e:	e002      	b.n	801fd56 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 801fd50:	687b      	ldr	r3, [r7, #4]
 801fd52:	2200      	movs	r2, #0
 801fd54:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 801fd56:	687b      	ldr	r3, [r7, #4]
 801fd58:	68db      	ldr	r3, [r3, #12]
 801fd5a:	4619      	mov	r1, r3
 801fd5c:	6878      	ldr	r0, [r7, #4]
 801fd5e:	f000 fe6d 	bl	8020a3c <HAL_SD_ConfigWideBusOperation>
 801fd62:	4603      	mov	r3, r0
 801fd64:	2b00      	cmp	r3, #0
 801fd66:	d001      	beq.n	801fd6c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 801fd68:	2301      	movs	r3, #1
 801fd6a:	e026      	b.n	801fdba <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 801fd6c:	f7f9 fb88 	bl	8019480 <HAL_GetTick>
 801fd70:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 801fd72:	e011      	b.n	801fd98 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 801fd74:	f7f9 fb84 	bl	8019480 <HAL_GetTick>
 801fd78:	4602      	mov	r2, r0
 801fd7a:	69fb      	ldr	r3, [r7, #28]
 801fd7c:	1ad3      	subs	r3, r2, r3
 801fd7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801fd82:	d109      	bne.n	801fd98 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 801fd84:	687b      	ldr	r3, [r7, #4]
 801fd86:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801fd8a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 801fd8c:	687b      	ldr	r3, [r7, #4]
 801fd8e:	2201      	movs	r2, #1
 801fd90:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 801fd94:	2303      	movs	r3, #3
 801fd96:	e010      	b.n	801fdba <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 801fd98:	6878      	ldr	r0, [r7, #4]
 801fd9a:	f000 ff61 	bl	8020c60 <HAL_SD_GetCardState>
 801fd9e:	4603      	mov	r3, r0
 801fda0:	2b04      	cmp	r3, #4
 801fda2:	d1e7      	bne.n	801fd74 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 801fda4:	687b      	ldr	r3, [r7, #4]
 801fda6:	2200      	movs	r2, #0
 801fda8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 801fdaa:	687b      	ldr	r3, [r7, #4]
 801fdac:	2200      	movs	r2, #0
 801fdae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 801fdb0:	687b      	ldr	r3, [r7, #4]
 801fdb2:	2201      	movs	r2, #1
 801fdb4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 801fdb8:	2300      	movs	r3, #0
}
 801fdba:	4618      	mov	r0, r3
 801fdbc:	3728      	adds	r7, #40	@ 0x28
 801fdbe:	46bd      	mov	sp, r7
 801fdc0:	bd80      	pop	{r7, pc}
	...

0801fdc4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 801fdc4:	b590      	push	{r4, r7, lr}
 801fdc6:	b08d      	sub	sp, #52	@ 0x34
 801fdc8:	af02      	add	r7, sp, #8
 801fdca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 801fdcc:	2300      	movs	r3, #0
 801fdce:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 801fdd0:	2300      	movs	r3, #0
 801fdd2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 801fdd4:	2300      	movs	r3, #0
 801fdd6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 801fdd8:	2300      	movs	r3, #0
 801fdda:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 801fddc:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 801fde0:	f04f 0100 	mov.w	r1, #0
 801fde4:	f7fe fc76 	bl	801e6d4 <HAL_RCCEx_GetPeriphCLKFreq>
 801fde8:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 801fdea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fdec:	2b00      	cmp	r3, #0
 801fdee:	d109      	bne.n	801fe04 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 801fdf0:	687b      	ldr	r3, [r7, #4]
 801fdf2:	2201      	movs	r2, #1
 801fdf4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 801fdf8:	687b      	ldr	r3, [r7, #4]
 801fdfa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 801fdfe:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 801fe00:	2301      	movs	r3, #1
 801fe02:	e070      	b.n	801fee6 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 801fe04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fe06:	0a1b      	lsrs	r3, r3, #8
 801fe08:	4a39      	ldr	r2, [pc, #228]	@ (801fef0 <HAL_SD_InitCard+0x12c>)
 801fe0a:	fba2 2303 	umull	r2, r3, r2, r3
 801fe0e:	091b      	lsrs	r3, r3, #4
 801fe10:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 801fe12:	687b      	ldr	r3, [r7, #4]
 801fe14:	681c      	ldr	r4, [r3, #0]
 801fe16:	466a      	mov	r2, sp
 801fe18:	f107 0318 	add.w	r3, r7, #24
 801fe1c:	e893 0003 	ldmia.w	r3, {r0, r1}
 801fe20:	e882 0003 	stmia.w	r2, {r0, r1}
 801fe24:	f107 030c 	add.w	r3, r7, #12
 801fe28:	cb0e      	ldmia	r3, {r1, r2, r3}
 801fe2a:	4620      	mov	r0, r4
 801fe2c:	f002 fe5e 	bl	8022aec <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 801fe30:	687b      	ldr	r3, [r7, #4]
 801fe32:	681b      	ldr	r3, [r3, #0]
 801fe34:	4618      	mov	r0, r3
 801fe36:	f002 fea1 	bl	8022b7c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 801fe3a:	69fb      	ldr	r3, [r7, #28]
 801fe3c:	2b00      	cmp	r3, #0
 801fe3e:	d005      	beq.n	801fe4c <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 801fe40:	69fb      	ldr	r3, [r7, #28]
 801fe42:	005b      	lsls	r3, r3, #1
 801fe44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801fe46:	fbb2 f3f3 	udiv	r3, r2, r3
 801fe4a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 801fe4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fe4e:	2b00      	cmp	r3, #0
 801fe50:	d007      	beq.n	801fe62 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 801fe52:	4a28      	ldr	r2, [pc, #160]	@ (801fef4 <HAL_SD_InitCard+0x130>)
 801fe54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fe56:	fbb2 f3f3 	udiv	r3, r2, r3
 801fe5a:	3301      	adds	r3, #1
 801fe5c:	4618      	mov	r0, r3
 801fe5e:	f7f9 fb1b 	bl	8019498 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 801fe62:	6878      	ldr	r0, [r7, #4]
 801fe64:	f000 ffea 	bl	8020e3c <SD_PowerON>
 801fe68:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 801fe6a:	6a3b      	ldr	r3, [r7, #32]
 801fe6c:	2b00      	cmp	r3, #0
 801fe6e:	d00b      	beq.n	801fe88 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 801fe70:	687b      	ldr	r3, [r7, #4]
 801fe72:	2201      	movs	r2, #1
 801fe74:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 801fe78:	687b      	ldr	r3, [r7, #4]
 801fe7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801fe7c:	6a3b      	ldr	r3, [r7, #32]
 801fe7e:	431a      	orrs	r2, r3
 801fe80:	687b      	ldr	r3, [r7, #4]
 801fe82:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 801fe84:	2301      	movs	r3, #1
 801fe86:	e02e      	b.n	801fee6 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 801fe88:	6878      	ldr	r0, [r7, #4]
 801fe8a:	f000 ff09 	bl	8020ca0 <SD_InitCard>
 801fe8e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 801fe90:	6a3b      	ldr	r3, [r7, #32]
 801fe92:	2b00      	cmp	r3, #0
 801fe94:	d00b      	beq.n	801feae <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 801fe96:	687b      	ldr	r3, [r7, #4]
 801fe98:	2201      	movs	r2, #1
 801fe9a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 801fe9e:	687b      	ldr	r3, [r7, #4]
 801fea0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801fea2:	6a3b      	ldr	r3, [r7, #32]
 801fea4:	431a      	orrs	r2, r3
 801fea6:	687b      	ldr	r3, [r7, #4]
 801fea8:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 801feaa:	2301      	movs	r3, #1
 801feac:	e01b      	b.n	801fee6 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 801feae:	687b      	ldr	r3, [r7, #4]
 801feb0:	681b      	ldr	r3, [r3, #0]
 801feb2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801feb6:	4618      	mov	r0, r3
 801feb8:	f002 fef6 	bl	8022ca8 <SDMMC_CmdBlockLength>
 801febc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 801febe:	6a3b      	ldr	r3, [r7, #32]
 801fec0:	2b00      	cmp	r3, #0
 801fec2:	d00f      	beq.n	801fee4 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801fec4:	687b      	ldr	r3, [r7, #4]
 801fec6:	681b      	ldr	r3, [r3, #0]
 801fec8:	4a0b      	ldr	r2, [pc, #44]	@ (801fef8 <HAL_SD_InitCard+0x134>)
 801feca:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 801fecc:	687b      	ldr	r3, [r7, #4]
 801fece:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801fed0:	6a3b      	ldr	r3, [r7, #32]
 801fed2:	431a      	orrs	r2, r3
 801fed4:	687b      	ldr	r3, [r7, #4]
 801fed6:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 801fed8:	687b      	ldr	r3, [r7, #4]
 801feda:	2201      	movs	r2, #1
 801fedc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 801fee0:	2301      	movs	r3, #1
 801fee2:	e000      	b.n	801fee6 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 801fee4:	2300      	movs	r3, #0
}
 801fee6:	4618      	mov	r0, r3
 801fee8:	372c      	adds	r7, #44	@ 0x2c
 801feea:	46bd      	mov	sp, r7
 801feec:	bd90      	pop	{r4, r7, pc}
 801feee:	bf00      	nop
 801fef0:	014f8b59 	.word	0x014f8b59
 801fef4:	00012110 	.word	0x00012110
 801fef8:	1fe00fff 	.word	0x1fe00fff

0801fefc <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 801fefc:	b580      	push	{r7, lr}
 801fefe:	b08c      	sub	sp, #48	@ 0x30
 801ff00:	af00      	add	r7, sp, #0
 801ff02:	60f8      	str	r0, [r7, #12]
 801ff04:	60b9      	str	r1, [r7, #8]
 801ff06:	607a      	str	r2, [r7, #4]
 801ff08:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 801ff0a:	687b      	ldr	r3, [r7, #4]
 801ff0c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 801ff0e:	68bb      	ldr	r3, [r7, #8]
 801ff10:	2b00      	cmp	r3, #0
 801ff12:	d107      	bne.n	801ff24 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 801ff14:	68fb      	ldr	r3, [r7, #12]
 801ff16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ff18:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 801ff1c:	68fb      	ldr	r3, [r7, #12]
 801ff1e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 801ff20:	2301      	movs	r3, #1
 801ff22:	e08d      	b.n	8020040 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 801ff24:	68fb      	ldr	r3, [r7, #12]
 801ff26:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801ff2a:	b2db      	uxtb	r3, r3
 801ff2c:	2b01      	cmp	r3, #1
 801ff2e:	f040 8086 	bne.w	802003e <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 801ff32:	68fb      	ldr	r3, [r7, #12]
 801ff34:	2200      	movs	r2, #0
 801ff36:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 801ff38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ff3a:	683b      	ldr	r3, [r7, #0]
 801ff3c:	441a      	add	r2, r3
 801ff3e:	68fb      	ldr	r3, [r7, #12]
 801ff40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801ff42:	429a      	cmp	r2, r3
 801ff44:	d907      	bls.n	801ff56 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 801ff46:	68fb      	ldr	r3, [r7, #12]
 801ff48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ff4a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 801ff4e:	68fb      	ldr	r3, [r7, #12]
 801ff50:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 801ff52:	2301      	movs	r3, #1
 801ff54:	e074      	b.n	8020040 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 801ff56:	68fb      	ldr	r3, [r7, #12]
 801ff58:	2203      	movs	r2, #3
 801ff5a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 801ff5e:	68fb      	ldr	r3, [r7, #12]
 801ff60:	681b      	ldr	r3, [r3, #0]
 801ff62:	2200      	movs	r2, #0
 801ff64:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 801ff66:	68fb      	ldr	r3, [r7, #12]
 801ff68:	68ba      	ldr	r2, [r7, #8]
 801ff6a:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 801ff6c:	683b      	ldr	r3, [r7, #0]
 801ff6e:	025a      	lsls	r2, r3, #9
 801ff70:	68fb      	ldr	r3, [r7, #12]
 801ff72:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 801ff74:	68fb      	ldr	r3, [r7, #12]
 801ff76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ff78:	2b01      	cmp	r3, #1
 801ff7a:	d002      	beq.n	801ff82 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 801ff7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ff7e:	025b      	lsls	r3, r3, #9
 801ff80:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801ff82:	f04f 33ff 	mov.w	r3, #4294967295
 801ff86:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 801ff88:	683b      	ldr	r3, [r7, #0]
 801ff8a:	025b      	lsls	r3, r3, #9
 801ff8c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 801ff8e:	2390      	movs	r3, #144	@ 0x90
 801ff90:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 801ff92:	2302      	movs	r3, #2
 801ff94:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801ff96:	2300      	movs	r3, #0
 801ff98:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 801ff9a:	2300      	movs	r3, #0
 801ff9c:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 801ff9e:	68fb      	ldr	r3, [r7, #12]
 801ffa0:	681b      	ldr	r3, [r3, #0]
 801ffa2:	f107 0210 	add.w	r2, r7, #16
 801ffa6:	4611      	mov	r1, r2
 801ffa8:	4618      	mov	r0, r3
 801ffaa:	f002 fe51 	bl	8022c50 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 801ffae:	68fb      	ldr	r3, [r7, #12]
 801ffb0:	681b      	ldr	r3, [r3, #0]
 801ffb2:	68da      	ldr	r2, [r3, #12]
 801ffb4:	68fb      	ldr	r3, [r7, #12]
 801ffb6:	681b      	ldr	r3, [r3, #0]
 801ffb8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801ffbc:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 801ffbe:	68fb      	ldr	r3, [r7, #12]
 801ffc0:	681b      	ldr	r3, [r3, #0]
 801ffc2:	68ba      	ldr	r2, [r7, #8]
 801ffc4:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 801ffc6:	68fb      	ldr	r3, [r7, #12]
 801ffc8:	681b      	ldr	r3, [r3, #0]
 801ffca:	2201      	movs	r2, #1
 801ffcc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 801ffce:	683b      	ldr	r3, [r7, #0]
 801ffd0:	2b01      	cmp	r3, #1
 801ffd2:	d90a      	bls.n	801ffea <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 801ffd4:	68fb      	ldr	r3, [r7, #12]
 801ffd6:	2282      	movs	r2, #130	@ 0x82
 801ffd8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 801ffda:	68fb      	ldr	r3, [r7, #12]
 801ffdc:	681b      	ldr	r3, [r3, #0]
 801ffde:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801ffe0:	4618      	mov	r0, r3
 801ffe2:	f002 fea7 	bl	8022d34 <SDMMC_CmdReadMultiBlock>
 801ffe6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801ffe8:	e009      	b.n	801fffe <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 801ffea:	68fb      	ldr	r3, [r7, #12]
 801ffec:	2281      	movs	r2, #129	@ 0x81
 801ffee:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 801fff0:	68fb      	ldr	r3, [r7, #12]
 801fff2:	681b      	ldr	r3, [r3, #0]
 801fff4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801fff6:	4618      	mov	r0, r3
 801fff8:	f002 fe79 	bl	8022cee <SDMMC_CmdReadSingleBlock>
 801fffc:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 801fffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020000:	2b00      	cmp	r3, #0
 8020002:	d012      	beq.n	802002a <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8020004:	68fb      	ldr	r3, [r7, #12]
 8020006:	681b      	ldr	r3, [r3, #0]
 8020008:	4a0f      	ldr	r2, [pc, #60]	@ (8020048 <HAL_SD_ReadBlocks_DMA+0x14c>)
 802000a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 802000c:	68fb      	ldr	r3, [r7, #12]
 802000e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8020010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020012:	431a      	orrs	r2, r3
 8020014:	68fb      	ldr	r3, [r7, #12]
 8020016:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8020018:	68fb      	ldr	r3, [r7, #12]
 802001a:	2201      	movs	r2, #1
 802001c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8020020:	68fb      	ldr	r3, [r7, #12]
 8020022:	2200      	movs	r2, #0
 8020024:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8020026:	2301      	movs	r3, #1
 8020028:	e00a      	b.n	8020040 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 802002a:	68fb      	ldr	r3, [r7, #12]
 802002c:	681b      	ldr	r3, [r3, #0]
 802002e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8020030:	68fb      	ldr	r3, [r7, #12]
 8020032:	681b      	ldr	r3, [r3, #0]
 8020034:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8020038:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 802003a:	2300      	movs	r3, #0
 802003c:	e000      	b.n	8020040 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 802003e:	2302      	movs	r3, #2
  }
}
 8020040:	4618      	mov	r0, r3
 8020042:	3730      	adds	r7, #48	@ 0x30
 8020044:	46bd      	mov	sp, r7
 8020046:	bd80      	pop	{r7, pc}
 8020048:	1fe00fff 	.word	0x1fe00fff

0802004c <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 802004c:	b580      	push	{r7, lr}
 802004e:	b08c      	sub	sp, #48	@ 0x30
 8020050:	af00      	add	r7, sp, #0
 8020052:	60f8      	str	r0, [r7, #12]
 8020054:	60b9      	str	r1, [r7, #8]
 8020056:	607a      	str	r2, [r7, #4]
 8020058:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 802005a:	687b      	ldr	r3, [r7, #4]
 802005c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 802005e:	68bb      	ldr	r3, [r7, #8]
 8020060:	2b00      	cmp	r3, #0
 8020062:	d107      	bne.n	8020074 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8020064:	68fb      	ldr	r3, [r7, #12]
 8020066:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8020068:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 802006c:	68fb      	ldr	r3, [r7, #12]
 802006e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8020070:	2301      	movs	r3, #1
 8020072:	e08d      	b.n	8020190 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8020074:	68fb      	ldr	r3, [r7, #12]
 8020076:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 802007a:	b2db      	uxtb	r3, r3
 802007c:	2b01      	cmp	r3, #1
 802007e:	f040 8086 	bne.w	802018e <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8020082:	68fb      	ldr	r3, [r7, #12]
 8020084:	2200      	movs	r2, #0
 8020086:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8020088:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 802008a:	683b      	ldr	r3, [r7, #0]
 802008c:	441a      	add	r2, r3
 802008e:	68fb      	ldr	r3, [r7, #12]
 8020090:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8020092:	429a      	cmp	r2, r3
 8020094:	d907      	bls.n	80200a6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8020096:	68fb      	ldr	r3, [r7, #12]
 8020098:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802009a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 802009e:	68fb      	ldr	r3, [r7, #12]
 80200a0:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80200a2:	2301      	movs	r3, #1
 80200a4:	e074      	b.n	8020190 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80200a6:	68fb      	ldr	r3, [r7, #12]
 80200a8:	2203      	movs	r2, #3
 80200aa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80200ae:	68fb      	ldr	r3, [r7, #12]
 80200b0:	681b      	ldr	r3, [r3, #0]
 80200b2:	2200      	movs	r2, #0
 80200b4:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 80200b6:	68fb      	ldr	r3, [r7, #12]
 80200b8:	68ba      	ldr	r2, [r7, #8]
 80200ba:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 80200bc:	683b      	ldr	r3, [r7, #0]
 80200be:	025a      	lsls	r2, r3, #9
 80200c0:	68fb      	ldr	r3, [r7, #12]
 80200c2:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80200c4:	68fb      	ldr	r3, [r7, #12]
 80200c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80200c8:	2b01      	cmp	r3, #1
 80200ca:	d002      	beq.n	80200d2 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 80200cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80200ce:	025b      	lsls	r3, r3, #9
 80200d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80200d2:	f04f 33ff 	mov.w	r3, #4294967295
 80200d6:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80200d8:	683b      	ldr	r3, [r7, #0]
 80200da:	025b      	lsls	r3, r3, #9
 80200dc:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80200de:	2390      	movs	r3, #144	@ 0x90
 80200e0:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80200e2:	2300      	movs	r3, #0
 80200e4:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80200e6:	2300      	movs	r3, #0
 80200e8:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80200ea:	2300      	movs	r3, #0
 80200ec:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80200ee:	68fb      	ldr	r3, [r7, #12]
 80200f0:	681b      	ldr	r3, [r3, #0]
 80200f2:	f107 0210 	add.w	r2, r7, #16
 80200f6:	4611      	mov	r1, r2
 80200f8:	4618      	mov	r0, r3
 80200fa:	f002 fda9 	bl	8022c50 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80200fe:	68fb      	ldr	r3, [r7, #12]
 8020100:	681b      	ldr	r3, [r3, #0]
 8020102:	68da      	ldr	r2, [r3, #12]
 8020104:	68fb      	ldr	r3, [r7, #12]
 8020106:	681b      	ldr	r3, [r3, #0]
 8020108:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 802010c:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 802010e:	68fb      	ldr	r3, [r7, #12]
 8020110:	681b      	ldr	r3, [r3, #0]
 8020112:	68ba      	ldr	r2, [r7, #8]
 8020114:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8020116:	68fb      	ldr	r3, [r7, #12]
 8020118:	681b      	ldr	r3, [r3, #0]
 802011a:	2201      	movs	r2, #1
 802011c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 802011e:	683b      	ldr	r3, [r7, #0]
 8020120:	2b01      	cmp	r3, #1
 8020122:	d90a      	bls.n	802013a <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8020124:	68fb      	ldr	r3, [r7, #12]
 8020126:	22a0      	movs	r2, #160	@ 0xa0
 8020128:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 802012a:	68fb      	ldr	r3, [r7, #12]
 802012c:	681b      	ldr	r3, [r3, #0]
 802012e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8020130:	4618      	mov	r0, r3
 8020132:	f002 fe45 	bl	8022dc0 <SDMMC_CmdWriteMultiBlock>
 8020136:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8020138:	e009      	b.n	802014e <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 802013a:	68fb      	ldr	r3, [r7, #12]
 802013c:	2290      	movs	r2, #144	@ 0x90
 802013e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8020140:	68fb      	ldr	r3, [r7, #12]
 8020142:	681b      	ldr	r3, [r3, #0]
 8020144:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8020146:	4618      	mov	r0, r3
 8020148:	f002 fe17 	bl	8022d7a <SDMMC_CmdWriteSingleBlock>
 802014c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 802014e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020150:	2b00      	cmp	r3, #0
 8020152:	d012      	beq.n	802017a <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8020154:	68fb      	ldr	r3, [r7, #12]
 8020156:	681b      	ldr	r3, [r3, #0]
 8020158:	4a0f      	ldr	r2, [pc, #60]	@ (8020198 <HAL_SD_WriteBlocks_DMA+0x14c>)
 802015a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 802015c:	68fb      	ldr	r3, [r7, #12]
 802015e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8020160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020162:	431a      	orrs	r2, r3
 8020164:	68fb      	ldr	r3, [r7, #12]
 8020166:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8020168:	68fb      	ldr	r3, [r7, #12]
 802016a:	2201      	movs	r2, #1
 802016c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8020170:	68fb      	ldr	r3, [r7, #12]
 8020172:	2200      	movs	r2, #0
 8020174:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8020176:	2301      	movs	r3, #1
 8020178:	e00a      	b.n	8020190 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 802017a:	68fb      	ldr	r3, [r7, #12]
 802017c:	681b      	ldr	r3, [r3, #0]
 802017e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8020180:	68fb      	ldr	r3, [r7, #12]
 8020182:	681b      	ldr	r3, [r3, #0]
 8020184:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 8020188:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 802018a:	2300      	movs	r3, #0
 802018c:	e000      	b.n	8020190 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 802018e:	2302      	movs	r3, #2
  }
}
 8020190:	4618      	mov	r0, r3
 8020192:	3730      	adds	r7, #48	@ 0x30
 8020194:	46bd      	mov	sp, r7
 8020196:	bd80      	pop	{r7, pc}
 8020198:	1fe00fff 	.word	0x1fe00fff

0802019c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 802019c:	b580      	push	{r7, lr}
 802019e:	b084      	sub	sp, #16
 80201a0:	af00      	add	r7, sp, #0
 80201a2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80201a4:	687b      	ldr	r3, [r7, #4]
 80201a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80201a8:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80201aa:	687b      	ldr	r3, [r7, #4]
 80201ac:	681b      	ldr	r3, [r3, #0]
 80201ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80201b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80201b4:	2b00      	cmp	r3, #0
 80201b6:	d008      	beq.n	80201ca <HAL_SD_IRQHandler+0x2e>
 80201b8:	68fb      	ldr	r3, [r7, #12]
 80201ba:	f003 0308 	and.w	r3, r3, #8
 80201be:	2b00      	cmp	r3, #0
 80201c0:	d003      	beq.n	80201ca <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80201c2:	6878      	ldr	r0, [r7, #4]
 80201c4:	f001 f926 	bl	8021414 <SD_Read_IT>
 80201c8:	e19a      	b.n	8020500 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80201ca:	687b      	ldr	r3, [r7, #4]
 80201cc:	681b      	ldr	r3, [r3, #0]
 80201ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80201d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80201d4:	2b00      	cmp	r3, #0
 80201d6:	f000 80ac 	beq.w	8020332 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80201da:	687b      	ldr	r3, [r7, #4]
 80201dc:	681b      	ldr	r3, [r3, #0]
 80201de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80201e2:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 80201e4:	687b      	ldr	r3, [r7, #4]
 80201e6:	681b      	ldr	r3, [r3, #0]
 80201e8:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80201ea:	687b      	ldr	r3, [r7, #4]
 80201ec:	681a      	ldr	r2, [r3, #0]
 80201ee:	4b59      	ldr	r3, [pc, #356]	@ (8020354 <HAL_SD_IRQHandler+0x1b8>)
 80201f0:	400b      	ands	r3, r1
 80201f2:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80201f4:	687b      	ldr	r3, [r7, #4]
 80201f6:	681b      	ldr	r3, [r3, #0]
 80201f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80201fa:	687b      	ldr	r3, [r7, #4]
 80201fc:	681b      	ldr	r3, [r3, #0]
 80201fe:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8020202:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8020204:	687b      	ldr	r3, [r7, #4]
 8020206:	681b      	ldr	r3, [r3, #0]
 8020208:	68da      	ldr	r2, [r3, #12]
 802020a:	687b      	ldr	r3, [r7, #4]
 802020c:	681b      	ldr	r3, [r3, #0]
 802020e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8020212:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8020214:	68fb      	ldr	r3, [r7, #12]
 8020216:	f003 0308 	and.w	r3, r3, #8
 802021a:	2b00      	cmp	r3, #0
 802021c:	d038      	beq.n	8020290 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 802021e:	68fb      	ldr	r3, [r7, #12]
 8020220:	f003 0302 	and.w	r3, r3, #2
 8020224:	2b00      	cmp	r3, #0
 8020226:	d104      	bne.n	8020232 <HAL_SD_IRQHandler+0x96>
 8020228:	68fb      	ldr	r3, [r7, #12]
 802022a:	f003 0320 	and.w	r3, r3, #32
 802022e:	2b00      	cmp	r3, #0
 8020230:	d011      	beq.n	8020256 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8020232:	687b      	ldr	r3, [r7, #4]
 8020234:	681b      	ldr	r3, [r3, #0]
 8020236:	4618      	mov	r0, r3
 8020238:	f002 fde6 	bl	8022e08 <SDMMC_CmdStopTransfer>
 802023c:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 802023e:	68bb      	ldr	r3, [r7, #8]
 8020240:	2b00      	cmp	r3, #0
 8020242:	d008      	beq.n	8020256 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8020244:	687b      	ldr	r3, [r7, #4]
 8020246:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8020248:	68bb      	ldr	r3, [r7, #8]
 802024a:	431a      	orrs	r2, r3
 802024c:	687b      	ldr	r3, [r7, #4]
 802024e:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8020250:	6878      	ldr	r0, [r7, #4]
 8020252:	f000 f95b 	bl	802050c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8020256:	687b      	ldr	r3, [r7, #4]
 8020258:	681b      	ldr	r3, [r3, #0]
 802025a:	4a3f      	ldr	r2, [pc, #252]	@ (8020358 <HAL_SD_IRQHandler+0x1bc>)
 802025c:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 802025e:	687b      	ldr	r3, [r7, #4]
 8020260:	2201      	movs	r2, #1
 8020262:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8020266:	687b      	ldr	r3, [r7, #4]
 8020268:	2200      	movs	r2, #0
 802026a:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 802026c:	68fb      	ldr	r3, [r7, #12]
 802026e:	f003 0301 	and.w	r3, r3, #1
 8020272:	2b00      	cmp	r3, #0
 8020274:	d104      	bne.n	8020280 <HAL_SD_IRQHandler+0xe4>
 8020276:	68fb      	ldr	r3, [r7, #12]
 8020278:	f003 0302 	and.w	r3, r3, #2
 802027c:	2b00      	cmp	r3, #0
 802027e:	d003      	beq.n	8020288 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8020280:	6878      	ldr	r0, [r7, #4]
 8020282:	f003 fa73 	bl	802376c <HAL_SD_RxCpltCallback>
 8020286:	e13b      	b.n	8020500 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8020288:	6878      	ldr	r0, [r7, #4]
 802028a:	f003 fa65 	bl	8023758 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 802028e:	e137      	b.n	8020500 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8020290:	68fb      	ldr	r3, [r7, #12]
 8020292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8020296:	2b00      	cmp	r3, #0
 8020298:	f000 8132 	beq.w	8020500 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 802029c:	687b      	ldr	r3, [r7, #4]
 802029e:	681b      	ldr	r3, [r3, #0]
 80202a0:	2200      	movs	r2, #0
 80202a2:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 80202a4:	687b      	ldr	r3, [r7, #4]
 80202a6:	681b      	ldr	r3, [r3, #0]
 80202a8:	2200      	movs	r2, #0
 80202aa:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80202ac:	687b      	ldr	r3, [r7, #4]
 80202ae:	681b      	ldr	r3, [r3, #0]
 80202b0:	2200      	movs	r2, #0
 80202b2:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80202b4:	68fb      	ldr	r3, [r7, #12]
 80202b6:	f003 0302 	and.w	r3, r3, #2
 80202ba:	2b00      	cmp	r3, #0
 80202bc:	d104      	bne.n	80202c8 <HAL_SD_IRQHandler+0x12c>
 80202be:	68fb      	ldr	r3, [r7, #12]
 80202c0:	f003 0320 	and.w	r3, r3, #32
 80202c4:	2b00      	cmp	r3, #0
 80202c6:	d011      	beq.n	80202ec <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80202c8:	687b      	ldr	r3, [r7, #4]
 80202ca:	681b      	ldr	r3, [r3, #0]
 80202cc:	4618      	mov	r0, r3
 80202ce:	f002 fd9b 	bl	8022e08 <SDMMC_CmdStopTransfer>
 80202d2:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80202d4:	68bb      	ldr	r3, [r7, #8]
 80202d6:	2b00      	cmp	r3, #0
 80202d8:	d008      	beq.n	80202ec <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 80202da:	687b      	ldr	r3, [r7, #4]
 80202dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80202de:	68bb      	ldr	r3, [r7, #8]
 80202e0:	431a      	orrs	r2, r3
 80202e2:	687b      	ldr	r3, [r7, #4]
 80202e4:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 80202e6:	6878      	ldr	r0, [r7, #4]
 80202e8:	f000 f910 	bl	802050c <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 80202ec:	687b      	ldr	r3, [r7, #4]
 80202ee:	2201      	movs	r2, #1
 80202f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80202f4:	687b      	ldr	r3, [r7, #4]
 80202f6:	2200      	movs	r2, #0
 80202f8:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80202fa:	68fb      	ldr	r3, [r7, #12]
 80202fc:	f003 0310 	and.w	r3, r3, #16
 8020300:	2b00      	cmp	r3, #0
 8020302:	d104      	bne.n	802030e <HAL_SD_IRQHandler+0x172>
 8020304:	68fb      	ldr	r3, [r7, #12]
 8020306:	f003 0320 	and.w	r3, r3, #32
 802030a:	2b00      	cmp	r3, #0
 802030c:	d002      	beq.n	8020314 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 802030e:	6878      	ldr	r0, [r7, #4]
 8020310:	f003 fa22 	bl	8023758 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8020314:	68fb      	ldr	r3, [r7, #12]
 8020316:	f003 0301 	and.w	r3, r3, #1
 802031a:	2b00      	cmp	r3, #0
 802031c:	d105      	bne.n	802032a <HAL_SD_IRQHandler+0x18e>
 802031e:	68fb      	ldr	r3, [r7, #12]
 8020320:	f003 0302 	and.w	r3, r3, #2
 8020324:	2b00      	cmp	r3, #0
 8020326:	f000 80eb 	beq.w	8020500 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 802032a:	6878      	ldr	r0, [r7, #4]
 802032c:	f003 fa1e 	bl	802376c <HAL_SD_RxCpltCallback>
}
 8020330:	e0e6      	b.n	8020500 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8020332:	687b      	ldr	r3, [r7, #4]
 8020334:	681b      	ldr	r3, [r3, #0]
 8020336:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8020338:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 802033c:	2b00      	cmp	r3, #0
 802033e:	d00d      	beq.n	802035c <HAL_SD_IRQHandler+0x1c0>
 8020340:	68fb      	ldr	r3, [r7, #12]
 8020342:	f003 0308 	and.w	r3, r3, #8
 8020346:	2b00      	cmp	r3, #0
 8020348:	d008      	beq.n	802035c <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 802034a:	6878      	ldr	r0, [r7, #4]
 802034c:	f001 f8a8 	bl	80214a0 <SD_Write_IT>
 8020350:	e0d6      	b.n	8020500 <HAL_SD_IRQHandler+0x364>
 8020352:	bf00      	nop
 8020354:	ffff3ec5 	.word	0xffff3ec5
 8020358:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 802035c:	687b      	ldr	r3, [r7, #4]
 802035e:	681b      	ldr	r3, [r3, #0]
 8020360:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8020362:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8020366:	2b00      	cmp	r3, #0
 8020368:	f000 809d 	beq.w	80204a6 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 802036c:	687b      	ldr	r3, [r7, #4]
 802036e:	681b      	ldr	r3, [r3, #0]
 8020370:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8020372:	f003 0302 	and.w	r3, r3, #2
 8020376:	2b00      	cmp	r3, #0
 8020378:	d005      	beq.n	8020386 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 802037a:	687b      	ldr	r3, [r7, #4]
 802037c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802037e:	f043 0202 	orr.w	r2, r3, #2
 8020382:	687b      	ldr	r3, [r7, #4]
 8020384:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8020386:	687b      	ldr	r3, [r7, #4]
 8020388:	681b      	ldr	r3, [r3, #0]
 802038a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802038c:	f003 0308 	and.w	r3, r3, #8
 8020390:	2b00      	cmp	r3, #0
 8020392:	d005      	beq.n	80203a0 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8020394:	687b      	ldr	r3, [r7, #4]
 8020396:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8020398:	f043 0208 	orr.w	r2, r3, #8
 802039c:	687b      	ldr	r3, [r7, #4]
 802039e:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80203a0:	687b      	ldr	r3, [r7, #4]
 80203a2:	681b      	ldr	r3, [r3, #0]
 80203a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80203a6:	f003 0320 	and.w	r3, r3, #32
 80203aa:	2b00      	cmp	r3, #0
 80203ac:	d005      	beq.n	80203ba <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80203ae:	687b      	ldr	r3, [r7, #4]
 80203b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80203b2:	f043 0220 	orr.w	r2, r3, #32
 80203b6:	687b      	ldr	r3, [r7, #4]
 80203b8:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 80203ba:	687b      	ldr	r3, [r7, #4]
 80203bc:	681b      	ldr	r3, [r3, #0]
 80203be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80203c0:	f003 0310 	and.w	r3, r3, #16
 80203c4:	2b00      	cmp	r3, #0
 80203c6:	d005      	beq.n	80203d4 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80203c8:	687b      	ldr	r3, [r7, #4]
 80203ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80203cc:	f043 0210 	orr.w	r2, r3, #16
 80203d0:	687b      	ldr	r3, [r7, #4]
 80203d2:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80203d4:	687b      	ldr	r3, [r7, #4]
 80203d6:	681b      	ldr	r3, [r3, #0]
 80203d8:	4a4b      	ldr	r2, [pc, #300]	@ (8020508 <HAL_SD_IRQHandler+0x36c>)
 80203da:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 80203dc:	687b      	ldr	r3, [r7, #4]
 80203de:	681b      	ldr	r3, [r3, #0]
 80203e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80203e2:	687b      	ldr	r3, [r7, #4]
 80203e4:	681b      	ldr	r3, [r3, #0]
 80203e6:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 80203ea:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80203ec:	687b      	ldr	r3, [r7, #4]
 80203ee:	681b      	ldr	r3, [r3, #0]
 80203f0:	68da      	ldr	r2, [r3, #12]
 80203f2:	687b      	ldr	r3, [r7, #4]
 80203f4:	681b      	ldr	r3, [r3, #0]
 80203f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80203fa:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 80203fc:	687b      	ldr	r3, [r7, #4]
 80203fe:	681b      	ldr	r3, [r3, #0]
 8020400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8020402:	687b      	ldr	r3, [r7, #4]
 8020404:	681b      	ldr	r3, [r3, #0]
 8020406:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 802040a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 802040c:	687b      	ldr	r3, [r7, #4]
 802040e:	681b      	ldr	r3, [r3, #0]
 8020410:	68da      	ldr	r2, [r3, #12]
 8020412:	687b      	ldr	r3, [r7, #4]
 8020414:	681b      	ldr	r3, [r3, #0]
 8020416:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 802041a:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 802041c:	687b      	ldr	r3, [r7, #4]
 802041e:	681b      	ldr	r3, [r3, #0]
 8020420:	4618      	mov	r0, r3
 8020422:	f002 fcf1 	bl	8022e08 <SDMMC_CmdStopTransfer>
 8020426:	4602      	mov	r2, r0
 8020428:	687b      	ldr	r3, [r7, #4]
 802042a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802042c:	431a      	orrs	r2, r3
 802042e:	687b      	ldr	r3, [r7, #4]
 8020430:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8020432:	687b      	ldr	r3, [r7, #4]
 8020434:	681b      	ldr	r3, [r3, #0]
 8020436:	68da      	ldr	r2, [r3, #12]
 8020438:	687b      	ldr	r3, [r7, #4]
 802043a:	681b      	ldr	r3, [r3, #0]
 802043c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8020440:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8020442:	687b      	ldr	r3, [r7, #4]
 8020444:	681b      	ldr	r3, [r3, #0]
 8020446:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 802044a:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 802044c:	68fb      	ldr	r3, [r7, #12]
 802044e:	f003 0308 	and.w	r3, r3, #8
 8020452:	2b00      	cmp	r3, #0
 8020454:	d00a      	beq.n	802046c <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8020456:	687b      	ldr	r3, [r7, #4]
 8020458:	2201      	movs	r2, #1
 802045a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 802045e:	687b      	ldr	r3, [r7, #4]
 8020460:	2200      	movs	r2, #0
 8020462:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 8020464:	6878      	ldr	r0, [r7, #4]
 8020466:	f000 f851 	bl	802050c <HAL_SD_ErrorCallback>
}
 802046a:	e049      	b.n	8020500 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 802046c:	68fb      	ldr	r3, [r7, #12]
 802046e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8020472:	2b00      	cmp	r3, #0
 8020474:	d044      	beq.n	8020500 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8020476:	687b      	ldr	r3, [r7, #4]
 8020478:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802047a:	2b00      	cmp	r3, #0
 802047c:	d040      	beq.n	8020500 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 802047e:	687b      	ldr	r3, [r7, #4]
 8020480:	681b      	ldr	r3, [r3, #0]
 8020482:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8020484:	687b      	ldr	r3, [r7, #4]
 8020486:	681b      	ldr	r3, [r3, #0]
 8020488:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 802048c:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 802048e:	687b      	ldr	r3, [r7, #4]
 8020490:	681b      	ldr	r3, [r3, #0]
 8020492:	2200      	movs	r2, #0
 8020494:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 8020496:	687b      	ldr	r3, [r7, #4]
 8020498:	2201      	movs	r2, #1
 802049a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 802049e:	6878      	ldr	r0, [r7, #4]
 80204a0:	f000 f834 	bl	802050c <HAL_SD_ErrorCallback>
}
 80204a4:	e02c      	b.n	8020500 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 80204a6:	687b      	ldr	r3, [r7, #4]
 80204a8:	681b      	ldr	r3, [r3, #0]
 80204aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80204ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80204b0:	2b00      	cmp	r3, #0
 80204b2:	d025      	beq.n	8020500 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 80204b4:	687b      	ldr	r3, [r7, #4]
 80204b6:	681b      	ldr	r3, [r3, #0]
 80204b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80204bc:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 80204be:	687b      	ldr	r3, [r7, #4]
 80204c0:	681b      	ldr	r3, [r3, #0]
 80204c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80204c4:	f003 0304 	and.w	r3, r3, #4
 80204c8:	2b00      	cmp	r3, #0
 80204ca:	d10c      	bne.n	80204e6 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80204cc:	68fb      	ldr	r3, [r7, #12]
 80204ce:	f003 0320 	and.w	r3, r3, #32
 80204d2:	2b00      	cmp	r3, #0
 80204d4:	d003      	beq.n	80204de <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 80204d6:	6878      	ldr	r0, [r7, #4]
 80204d8:	f001 f84a 	bl	8021570 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 80204dc:	e010      	b.n	8020500 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 80204de:	6878      	ldr	r0, [r7, #4]
 80204e0:	f001 f832 	bl	8021548 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 80204e4:	e00c      	b.n	8020500 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80204e6:	68fb      	ldr	r3, [r7, #12]
 80204e8:	f003 0320 	and.w	r3, r3, #32
 80204ec:	2b00      	cmp	r3, #0
 80204ee:	d003      	beq.n	80204f8 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 80204f0:	6878      	ldr	r0, [r7, #4]
 80204f2:	f001 f833 	bl	802155c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 80204f6:	e003      	b.n	8020500 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 80204f8:	6878      	ldr	r0, [r7, #4]
 80204fa:	f001 f81b 	bl	8021534 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 80204fe:	e7ff      	b.n	8020500 <HAL_SD_IRQHandler+0x364>
 8020500:	bf00      	nop
 8020502:	3710      	adds	r7, #16
 8020504:	46bd      	mov	sp, r7
 8020506:	bd80      	pop	{r7, pc}
 8020508:	18000f3a 	.word	0x18000f3a

0802050c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 802050c:	b480      	push	{r7}
 802050e:	b083      	sub	sp, #12
 8020510:	af00      	add	r7, sp, #0
 8020512:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8020514:	bf00      	nop
 8020516:	370c      	adds	r7, #12
 8020518:	46bd      	mov	sp, r7
 802051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802051e:	4770      	bx	lr

08020520 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8020520:	b480      	push	{r7}
 8020522:	b083      	sub	sp, #12
 8020524:	af00      	add	r7, sp, #0
 8020526:	6078      	str	r0, [r7, #4]
 8020528:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 802052a:	687b      	ldr	r3, [r7, #4]
 802052c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 802052e:	0f9b      	lsrs	r3, r3, #30
 8020530:	b2da      	uxtb	r2, r3
 8020532:	683b      	ldr	r3, [r7, #0]
 8020534:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8020536:	687b      	ldr	r3, [r7, #4]
 8020538:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 802053a:	0e9b      	lsrs	r3, r3, #26
 802053c:	b2db      	uxtb	r3, r3
 802053e:	f003 030f 	and.w	r3, r3, #15
 8020542:	b2da      	uxtb	r2, r3
 8020544:	683b      	ldr	r3, [r7, #0]
 8020546:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8020548:	687b      	ldr	r3, [r7, #4]
 802054a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 802054c:	0e1b      	lsrs	r3, r3, #24
 802054e:	b2db      	uxtb	r3, r3
 8020550:	f003 0303 	and.w	r3, r3, #3
 8020554:	b2da      	uxtb	r2, r3
 8020556:	683b      	ldr	r3, [r7, #0]
 8020558:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 802055a:	687b      	ldr	r3, [r7, #4]
 802055c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 802055e:	0c1b      	lsrs	r3, r3, #16
 8020560:	b2da      	uxtb	r2, r3
 8020562:	683b      	ldr	r3, [r7, #0]
 8020564:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8020566:	687b      	ldr	r3, [r7, #4]
 8020568:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 802056a:	0a1b      	lsrs	r3, r3, #8
 802056c:	b2da      	uxtb	r2, r3
 802056e:	683b      	ldr	r3, [r7, #0]
 8020570:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8020572:	687b      	ldr	r3, [r7, #4]
 8020574:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8020576:	b2da      	uxtb	r2, r3
 8020578:	683b      	ldr	r3, [r7, #0]
 802057a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 802057c:	687b      	ldr	r3, [r7, #4]
 802057e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8020580:	0d1b      	lsrs	r3, r3, #20
 8020582:	b29a      	uxth	r2, r3
 8020584:	683b      	ldr	r3, [r7, #0]
 8020586:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8020588:	687b      	ldr	r3, [r7, #4]
 802058a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 802058c:	0c1b      	lsrs	r3, r3, #16
 802058e:	b2db      	uxtb	r3, r3
 8020590:	f003 030f 	and.w	r3, r3, #15
 8020594:	b2da      	uxtb	r2, r3
 8020596:	683b      	ldr	r3, [r7, #0]
 8020598:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 802059a:	687b      	ldr	r3, [r7, #4]
 802059c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 802059e:	0bdb      	lsrs	r3, r3, #15
 80205a0:	b2db      	uxtb	r3, r3
 80205a2:	f003 0301 	and.w	r3, r3, #1
 80205a6:	b2da      	uxtb	r2, r3
 80205a8:	683b      	ldr	r3, [r7, #0]
 80205aa:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80205ac:	687b      	ldr	r3, [r7, #4]
 80205ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80205b0:	0b9b      	lsrs	r3, r3, #14
 80205b2:	b2db      	uxtb	r3, r3
 80205b4:	f003 0301 	and.w	r3, r3, #1
 80205b8:	b2da      	uxtb	r2, r3
 80205ba:	683b      	ldr	r3, [r7, #0]
 80205bc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80205be:	687b      	ldr	r3, [r7, #4]
 80205c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80205c2:	0b5b      	lsrs	r3, r3, #13
 80205c4:	b2db      	uxtb	r3, r3
 80205c6:	f003 0301 	and.w	r3, r3, #1
 80205ca:	b2da      	uxtb	r2, r3
 80205cc:	683b      	ldr	r3, [r7, #0]
 80205ce:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80205d0:	687b      	ldr	r3, [r7, #4]
 80205d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80205d4:	0b1b      	lsrs	r3, r3, #12
 80205d6:	b2db      	uxtb	r3, r3
 80205d8:	f003 0301 	and.w	r3, r3, #1
 80205dc:	b2da      	uxtb	r2, r3
 80205de:	683b      	ldr	r3, [r7, #0]
 80205e0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80205e2:	683b      	ldr	r3, [r7, #0]
 80205e4:	2200      	movs	r2, #0
 80205e6:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 80205e8:	687b      	ldr	r3, [r7, #4]
 80205ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80205ec:	2b00      	cmp	r3, #0
 80205ee:	d163      	bne.n	80206b8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80205f0:	687b      	ldr	r3, [r7, #4]
 80205f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80205f4:	009a      	lsls	r2, r3, #2
 80205f6:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80205fa:	4013      	ands	r3, r2
 80205fc:	687a      	ldr	r2, [r7, #4]
 80205fe:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8020600:	0f92      	lsrs	r2, r2, #30
 8020602:	431a      	orrs	r2, r3
 8020604:	683b      	ldr	r3, [r7, #0]
 8020606:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8020608:	687b      	ldr	r3, [r7, #4]
 802060a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 802060c:	0edb      	lsrs	r3, r3, #27
 802060e:	b2db      	uxtb	r3, r3
 8020610:	f003 0307 	and.w	r3, r3, #7
 8020614:	b2da      	uxtb	r2, r3
 8020616:	683b      	ldr	r3, [r7, #0]
 8020618:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 802061a:	687b      	ldr	r3, [r7, #4]
 802061c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 802061e:	0e1b      	lsrs	r3, r3, #24
 8020620:	b2db      	uxtb	r3, r3
 8020622:	f003 0307 	and.w	r3, r3, #7
 8020626:	b2da      	uxtb	r2, r3
 8020628:	683b      	ldr	r3, [r7, #0]
 802062a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 802062c:	687b      	ldr	r3, [r7, #4]
 802062e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8020630:	0d5b      	lsrs	r3, r3, #21
 8020632:	b2db      	uxtb	r3, r3
 8020634:	f003 0307 	and.w	r3, r3, #7
 8020638:	b2da      	uxtb	r2, r3
 802063a:	683b      	ldr	r3, [r7, #0]
 802063c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 802063e:	687b      	ldr	r3, [r7, #4]
 8020640:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8020642:	0c9b      	lsrs	r3, r3, #18
 8020644:	b2db      	uxtb	r3, r3
 8020646:	f003 0307 	and.w	r3, r3, #7
 802064a:	b2da      	uxtb	r2, r3
 802064c:	683b      	ldr	r3, [r7, #0]
 802064e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8020650:	687b      	ldr	r3, [r7, #4]
 8020652:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8020654:	0bdb      	lsrs	r3, r3, #15
 8020656:	b2db      	uxtb	r3, r3
 8020658:	f003 0307 	and.w	r3, r3, #7
 802065c:	b2da      	uxtb	r2, r3
 802065e:	683b      	ldr	r3, [r7, #0]
 8020660:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8020662:	683b      	ldr	r3, [r7, #0]
 8020664:	691b      	ldr	r3, [r3, #16]
 8020666:	1c5a      	adds	r2, r3, #1
 8020668:	687b      	ldr	r3, [r7, #4]
 802066a:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 802066c:	683b      	ldr	r3, [r7, #0]
 802066e:	7e1b      	ldrb	r3, [r3, #24]
 8020670:	b2db      	uxtb	r3, r3
 8020672:	f003 0307 	and.w	r3, r3, #7
 8020676:	3302      	adds	r3, #2
 8020678:	2201      	movs	r2, #1
 802067a:	fa02 f303 	lsl.w	r3, r2, r3
 802067e:	687a      	ldr	r2, [r7, #4]
 8020680:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8020682:	fb03 f202 	mul.w	r2, r3, r2
 8020686:	687b      	ldr	r3, [r7, #4]
 8020688:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 802068a:	683b      	ldr	r3, [r7, #0]
 802068c:	7a1b      	ldrb	r3, [r3, #8]
 802068e:	b2db      	uxtb	r3, r3
 8020690:	f003 030f 	and.w	r3, r3, #15
 8020694:	2201      	movs	r2, #1
 8020696:	409a      	lsls	r2, r3
 8020698:	687b      	ldr	r3, [r7, #4]
 802069a:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 802069c:	687b      	ldr	r3, [r7, #4]
 802069e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80206a0:	687a      	ldr	r2, [r7, #4]
 80206a2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80206a4:	0a52      	lsrs	r2, r2, #9
 80206a6:	fb03 f202 	mul.w	r2, r3, r2
 80206aa:	687b      	ldr	r3, [r7, #4]
 80206ac:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 80206ae:	687b      	ldr	r3, [r7, #4]
 80206b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80206b4:	655a      	str	r2, [r3, #84]	@ 0x54
 80206b6:	e031      	b.n	802071c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80206b8:	687b      	ldr	r3, [r7, #4]
 80206ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80206bc:	2b01      	cmp	r3, #1
 80206be:	d11d      	bne.n	80206fc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80206c0:	687b      	ldr	r3, [r7, #4]
 80206c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80206c4:	041b      	lsls	r3, r3, #16
 80206c6:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80206ca:	687b      	ldr	r3, [r7, #4]
 80206cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80206ce:	0c1b      	lsrs	r3, r3, #16
 80206d0:	431a      	orrs	r2, r3
 80206d2:	683b      	ldr	r3, [r7, #0]
 80206d4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80206d6:	683b      	ldr	r3, [r7, #0]
 80206d8:	691b      	ldr	r3, [r3, #16]
 80206da:	3301      	adds	r3, #1
 80206dc:	029a      	lsls	r2, r3, #10
 80206de:	687b      	ldr	r3, [r7, #4]
 80206e0:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80206e2:	687b      	ldr	r3, [r7, #4]
 80206e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80206e6:	687b      	ldr	r3, [r7, #4]
 80206e8:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 80206ea:	687b      	ldr	r3, [r7, #4]
 80206ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80206f0:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80206f2:	687b      	ldr	r3, [r7, #4]
 80206f4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80206f6:	687b      	ldr	r3, [r7, #4]
 80206f8:	655a      	str	r2, [r3, #84]	@ 0x54
 80206fa:	e00f      	b.n	802071c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80206fc:	687b      	ldr	r3, [r7, #4]
 80206fe:	681b      	ldr	r3, [r3, #0]
 8020700:	4a58      	ldr	r2, [pc, #352]	@ (8020864 <HAL_SD_GetCardCSD+0x344>)
 8020702:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8020704:	687b      	ldr	r3, [r7, #4]
 8020706:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8020708:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 802070c:	687b      	ldr	r3, [r7, #4]
 802070e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8020710:	687b      	ldr	r3, [r7, #4]
 8020712:	2201      	movs	r2, #1
 8020714:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8020718:	2301      	movs	r3, #1
 802071a:	e09d      	b.n	8020858 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 802071c:	687b      	ldr	r3, [r7, #4]
 802071e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8020720:	0b9b      	lsrs	r3, r3, #14
 8020722:	b2db      	uxtb	r3, r3
 8020724:	f003 0301 	and.w	r3, r3, #1
 8020728:	b2da      	uxtb	r2, r3
 802072a:	683b      	ldr	r3, [r7, #0]
 802072c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 802072e:	687b      	ldr	r3, [r7, #4]
 8020730:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8020732:	09db      	lsrs	r3, r3, #7
 8020734:	b2db      	uxtb	r3, r3
 8020736:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 802073a:	b2da      	uxtb	r2, r3
 802073c:	683b      	ldr	r3, [r7, #0]
 802073e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8020740:	687b      	ldr	r3, [r7, #4]
 8020742:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8020744:	b2db      	uxtb	r3, r3
 8020746:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 802074a:	b2da      	uxtb	r2, r3
 802074c:	683b      	ldr	r3, [r7, #0]
 802074e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8020750:	687b      	ldr	r3, [r7, #4]
 8020752:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8020754:	0fdb      	lsrs	r3, r3, #31
 8020756:	b2da      	uxtb	r2, r3
 8020758:	683b      	ldr	r3, [r7, #0]
 802075a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 802075c:	687b      	ldr	r3, [r7, #4]
 802075e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8020760:	0f5b      	lsrs	r3, r3, #29
 8020762:	b2db      	uxtb	r3, r3
 8020764:	f003 0303 	and.w	r3, r3, #3
 8020768:	b2da      	uxtb	r2, r3
 802076a:	683b      	ldr	r3, [r7, #0]
 802076c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 802076e:	687b      	ldr	r3, [r7, #4]
 8020770:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8020772:	0e9b      	lsrs	r3, r3, #26
 8020774:	b2db      	uxtb	r3, r3
 8020776:	f003 0307 	and.w	r3, r3, #7
 802077a:	b2da      	uxtb	r2, r3
 802077c:	683b      	ldr	r3, [r7, #0]
 802077e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8020780:	687b      	ldr	r3, [r7, #4]
 8020782:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8020784:	0d9b      	lsrs	r3, r3, #22
 8020786:	b2db      	uxtb	r3, r3
 8020788:	f003 030f 	and.w	r3, r3, #15
 802078c:	b2da      	uxtb	r2, r3
 802078e:	683b      	ldr	r3, [r7, #0]
 8020790:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8020792:	687b      	ldr	r3, [r7, #4]
 8020794:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8020796:	0d5b      	lsrs	r3, r3, #21
 8020798:	b2db      	uxtb	r3, r3
 802079a:	f003 0301 	and.w	r3, r3, #1
 802079e:	b2da      	uxtb	r2, r3
 80207a0:	683b      	ldr	r3, [r7, #0]
 80207a2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80207a6:	683b      	ldr	r3, [r7, #0]
 80207a8:	2200      	movs	r2, #0
 80207aa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80207ae:	687b      	ldr	r3, [r7, #4]
 80207b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80207b2:	0c1b      	lsrs	r3, r3, #16
 80207b4:	b2db      	uxtb	r3, r3
 80207b6:	f003 0301 	and.w	r3, r3, #1
 80207ba:	b2da      	uxtb	r2, r3
 80207bc:	683b      	ldr	r3, [r7, #0]
 80207be:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80207c2:	687b      	ldr	r3, [r7, #4]
 80207c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80207c6:	0bdb      	lsrs	r3, r3, #15
 80207c8:	b2db      	uxtb	r3, r3
 80207ca:	f003 0301 	and.w	r3, r3, #1
 80207ce:	b2da      	uxtb	r2, r3
 80207d0:	683b      	ldr	r3, [r7, #0]
 80207d2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80207d6:	687b      	ldr	r3, [r7, #4]
 80207d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80207da:	0b9b      	lsrs	r3, r3, #14
 80207dc:	b2db      	uxtb	r3, r3
 80207de:	f003 0301 	and.w	r3, r3, #1
 80207e2:	b2da      	uxtb	r2, r3
 80207e4:	683b      	ldr	r3, [r7, #0]
 80207e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80207ea:	687b      	ldr	r3, [r7, #4]
 80207ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80207ee:	0b5b      	lsrs	r3, r3, #13
 80207f0:	b2db      	uxtb	r3, r3
 80207f2:	f003 0301 	and.w	r3, r3, #1
 80207f6:	b2da      	uxtb	r2, r3
 80207f8:	683b      	ldr	r3, [r7, #0]
 80207fa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80207fe:	687b      	ldr	r3, [r7, #4]
 8020800:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8020802:	0b1b      	lsrs	r3, r3, #12
 8020804:	b2db      	uxtb	r3, r3
 8020806:	f003 0301 	and.w	r3, r3, #1
 802080a:	b2da      	uxtb	r2, r3
 802080c:	683b      	ldr	r3, [r7, #0]
 802080e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8020812:	687b      	ldr	r3, [r7, #4]
 8020814:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8020816:	0a9b      	lsrs	r3, r3, #10
 8020818:	b2db      	uxtb	r3, r3
 802081a:	f003 0303 	and.w	r3, r3, #3
 802081e:	b2da      	uxtb	r2, r3
 8020820:	683b      	ldr	r3, [r7, #0]
 8020822:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8020826:	687b      	ldr	r3, [r7, #4]
 8020828:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802082a:	0a1b      	lsrs	r3, r3, #8
 802082c:	b2db      	uxtb	r3, r3
 802082e:	f003 0303 	and.w	r3, r3, #3
 8020832:	b2da      	uxtb	r2, r3
 8020834:	683b      	ldr	r3, [r7, #0]
 8020836:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 802083a:	687b      	ldr	r3, [r7, #4]
 802083c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802083e:	085b      	lsrs	r3, r3, #1
 8020840:	b2db      	uxtb	r3, r3
 8020842:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8020846:	b2da      	uxtb	r2, r3
 8020848:	683b      	ldr	r3, [r7, #0]
 802084a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 802084e:	683b      	ldr	r3, [r7, #0]
 8020850:	2201      	movs	r2, #1
 8020852:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8020856:	2300      	movs	r3, #0
}
 8020858:	4618      	mov	r0, r3
 802085a:	370c      	adds	r7, #12
 802085c:	46bd      	mov	sp, r7
 802085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020862:	4770      	bx	lr
 8020864:	1fe00fff 	.word	0x1fe00fff

08020868 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8020868:	b580      	push	{r7, lr}
 802086a:	b094      	sub	sp, #80	@ 0x50
 802086c:	af00      	add	r7, sp, #0
 802086e:	6078      	str	r0, [r7, #4]
 8020870:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8020872:	2300      	movs	r3, #0
 8020874:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8020878:	687b      	ldr	r3, [r7, #4]
 802087a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 802087e:	b2db      	uxtb	r3, r3
 8020880:	2b03      	cmp	r3, #3
 8020882:	d101      	bne.n	8020888 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8020884:	2301      	movs	r3, #1
 8020886:	e0a7      	b.n	80209d8 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8020888:	f107 0308 	add.w	r3, r7, #8
 802088c:	4619      	mov	r1, r3
 802088e:	6878      	ldr	r0, [r7, #4]
 8020890:	f000 fb62 	bl	8020f58 <SD_SendSDStatus>
 8020894:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8020896:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8020898:	2b00      	cmp	r3, #0
 802089a:	d011      	beq.n	80208c0 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 802089c:	687b      	ldr	r3, [r7, #4]
 802089e:	681b      	ldr	r3, [r3, #0]
 80208a0:	4a4f      	ldr	r2, [pc, #316]	@ (80209e0 <HAL_SD_GetCardStatus+0x178>)
 80208a2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80208a4:	687b      	ldr	r3, [r7, #4]
 80208a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80208a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80208aa:	431a      	orrs	r2, r3
 80208ac:	687b      	ldr	r3, [r7, #4]
 80208ae:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80208b0:	687b      	ldr	r3, [r7, #4]
 80208b2:	2201      	movs	r2, #1
 80208b4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 80208b8:	2301      	movs	r3, #1
 80208ba:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80208be:	e070      	b.n	80209a2 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80208c0:	68bb      	ldr	r3, [r7, #8]
 80208c2:	099b      	lsrs	r3, r3, #6
 80208c4:	b2db      	uxtb	r3, r3
 80208c6:	f003 0303 	and.w	r3, r3, #3
 80208ca:	b2da      	uxtb	r2, r3
 80208cc:	683b      	ldr	r3, [r7, #0]
 80208ce:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80208d0:	68bb      	ldr	r3, [r7, #8]
 80208d2:	095b      	lsrs	r3, r3, #5
 80208d4:	b2db      	uxtb	r3, r3
 80208d6:	f003 0301 	and.w	r3, r3, #1
 80208da:	b2da      	uxtb	r2, r3
 80208dc:	683b      	ldr	r3, [r7, #0]
 80208de:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80208e0:	68bb      	ldr	r3, [r7, #8]
 80208e2:	0a1b      	lsrs	r3, r3, #8
 80208e4:	b29b      	uxth	r3, r3
 80208e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80208ea:	b29a      	uxth	r2, r3
 80208ec:	68bb      	ldr	r3, [r7, #8]
 80208ee:	0e1b      	lsrs	r3, r3, #24
 80208f0:	b29b      	uxth	r3, r3
 80208f2:	4313      	orrs	r3, r2
 80208f4:	b29a      	uxth	r2, r3
 80208f6:	683b      	ldr	r3, [r7, #0]
 80208f8:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80208fa:	68fb      	ldr	r3, [r7, #12]
 80208fc:	061a      	lsls	r2, r3, #24
 80208fe:	68fb      	ldr	r3, [r7, #12]
 8020900:	021b      	lsls	r3, r3, #8
 8020902:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8020906:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8020908:	68fb      	ldr	r3, [r7, #12]
 802090a:	0a1b      	lsrs	r3, r3, #8
 802090c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8020910:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8020912:	68fb      	ldr	r3, [r7, #12]
 8020914:	0e1b      	lsrs	r3, r3, #24
 8020916:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8020918:	683b      	ldr	r3, [r7, #0]
 802091a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 802091c:	693b      	ldr	r3, [r7, #16]
 802091e:	b2da      	uxtb	r2, r3
 8020920:	683b      	ldr	r3, [r7, #0]
 8020922:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8020924:	693b      	ldr	r3, [r7, #16]
 8020926:	0a1b      	lsrs	r3, r3, #8
 8020928:	b2da      	uxtb	r2, r3
 802092a:	683b      	ldr	r3, [r7, #0]
 802092c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 802092e:	693b      	ldr	r3, [r7, #16]
 8020930:	0d1b      	lsrs	r3, r3, #20
 8020932:	b2db      	uxtb	r3, r3
 8020934:	f003 030f 	and.w	r3, r3, #15
 8020938:	b2da      	uxtb	r2, r3
 802093a:	683b      	ldr	r3, [r7, #0]
 802093c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 802093e:	693b      	ldr	r3, [r7, #16]
 8020940:	0c1b      	lsrs	r3, r3, #16
 8020942:	b29b      	uxth	r3, r3
 8020944:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8020948:	b29a      	uxth	r2, r3
 802094a:	697b      	ldr	r3, [r7, #20]
 802094c:	b29b      	uxth	r3, r3
 802094e:	b2db      	uxtb	r3, r3
 8020950:	b29b      	uxth	r3, r3
 8020952:	4313      	orrs	r3, r2
 8020954:	b29a      	uxth	r2, r3
 8020956:	683b      	ldr	r3, [r7, #0]
 8020958:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 802095a:	697b      	ldr	r3, [r7, #20]
 802095c:	0a9b      	lsrs	r3, r3, #10
 802095e:	b2db      	uxtb	r3, r3
 8020960:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8020964:	b2da      	uxtb	r2, r3
 8020966:	683b      	ldr	r3, [r7, #0]
 8020968:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 802096a:	697b      	ldr	r3, [r7, #20]
 802096c:	0a1b      	lsrs	r3, r3, #8
 802096e:	b2db      	uxtb	r3, r3
 8020970:	f003 0303 	and.w	r3, r3, #3
 8020974:	b2da      	uxtb	r2, r3
 8020976:	683b      	ldr	r3, [r7, #0]
 8020978:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 802097a:	697b      	ldr	r3, [r7, #20]
 802097c:	091b      	lsrs	r3, r3, #4
 802097e:	b2db      	uxtb	r3, r3
 8020980:	f003 030f 	and.w	r3, r3, #15
 8020984:	b2da      	uxtb	r2, r3
 8020986:	683b      	ldr	r3, [r7, #0]
 8020988:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 802098a:	697b      	ldr	r3, [r7, #20]
 802098c:	b2db      	uxtb	r3, r3
 802098e:	f003 030f 	and.w	r3, r3, #15
 8020992:	b2da      	uxtb	r2, r3
 8020994:	683b      	ldr	r3, [r7, #0]
 8020996:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8020998:	69bb      	ldr	r3, [r7, #24]
 802099a:	0e1b      	lsrs	r3, r3, #24
 802099c:	b2da      	uxtb	r2, r3
 802099e:	683b      	ldr	r3, [r7, #0]
 80209a0:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80209a2:	687b      	ldr	r3, [r7, #4]
 80209a4:	681b      	ldr	r3, [r3, #0]
 80209a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80209aa:	4618      	mov	r0, r3
 80209ac:	f002 f97c 	bl	8022ca8 <SDMMC_CmdBlockLength>
 80209b0:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80209b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80209b4:	2b00      	cmp	r3, #0
 80209b6:	d00d      	beq.n	80209d4 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80209b8:	687b      	ldr	r3, [r7, #4]
 80209ba:	681b      	ldr	r3, [r3, #0]
 80209bc:	4a08      	ldr	r2, [pc, #32]	@ (80209e0 <HAL_SD_GetCardStatus+0x178>)
 80209be:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 80209c0:	687b      	ldr	r3, [r7, #4]
 80209c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80209c4:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80209c6:	687b      	ldr	r3, [r7, #4]
 80209c8:	2201      	movs	r2, #1
 80209ca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 80209ce:	2301      	movs	r3, #1
 80209d0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 80209d4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 80209d8:	4618      	mov	r0, r3
 80209da:	3750      	adds	r7, #80	@ 0x50
 80209dc:	46bd      	mov	sp, r7
 80209de:	bd80      	pop	{r7, pc}
 80209e0:	1fe00fff 	.word	0x1fe00fff

080209e4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80209e4:	b480      	push	{r7}
 80209e6:	b083      	sub	sp, #12
 80209e8:	af00      	add	r7, sp, #0
 80209ea:	6078      	str	r0, [r7, #4]
 80209ec:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80209ee:	687b      	ldr	r3, [r7, #4]
 80209f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80209f2:	683b      	ldr	r3, [r7, #0]
 80209f4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80209f6:	687b      	ldr	r3, [r7, #4]
 80209f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80209fa:	683b      	ldr	r3, [r7, #0]
 80209fc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80209fe:	687b      	ldr	r3, [r7, #4]
 8020a00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8020a02:	683b      	ldr	r3, [r7, #0]
 8020a04:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8020a06:	687b      	ldr	r3, [r7, #4]
 8020a08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8020a0a:	683b      	ldr	r3, [r7, #0]
 8020a0c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8020a0e:	687b      	ldr	r3, [r7, #4]
 8020a10:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8020a12:	683b      	ldr	r3, [r7, #0]
 8020a14:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8020a16:	687b      	ldr	r3, [r7, #4]
 8020a18:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8020a1a:	683b      	ldr	r3, [r7, #0]
 8020a1c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8020a1e:	687b      	ldr	r3, [r7, #4]
 8020a20:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8020a22:	683b      	ldr	r3, [r7, #0]
 8020a24:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8020a26:	687b      	ldr	r3, [r7, #4]
 8020a28:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8020a2a:	683b      	ldr	r3, [r7, #0]
 8020a2c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8020a2e:	2300      	movs	r3, #0
}
 8020a30:	4618      	mov	r0, r3
 8020a32:	370c      	adds	r7, #12
 8020a34:	46bd      	mov	sp, r7
 8020a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a3a:	4770      	bx	lr

08020a3c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8020a3c:	b590      	push	{r4, r7, lr}
 8020a3e:	b08d      	sub	sp, #52	@ 0x34
 8020a40:	af02      	add	r7, sp, #8
 8020a42:	6078      	str	r0, [r7, #4]
 8020a44:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8020a46:	2300      	movs	r3, #0
 8020a48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8020a4c:	687b      	ldr	r3, [r7, #4]
 8020a4e:	2203      	movs	r2, #3
 8020a50:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8020a54:	687b      	ldr	r3, [r7, #4]
 8020a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8020a58:	2b03      	cmp	r3, #3
 8020a5a:	d02e      	beq.n	8020aba <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8020a5c:	683b      	ldr	r3, [r7, #0]
 8020a5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8020a62:	d106      	bne.n	8020a72 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8020a64:	687b      	ldr	r3, [r7, #4]
 8020a66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8020a68:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8020a6c:	687b      	ldr	r3, [r7, #4]
 8020a6e:	635a      	str	r2, [r3, #52]	@ 0x34
 8020a70:	e029      	b.n	8020ac6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8020a72:	683b      	ldr	r3, [r7, #0]
 8020a74:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8020a78:	d10a      	bne.n	8020a90 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8020a7a:	6878      	ldr	r0, [r7, #4]
 8020a7c:	f000 fb64 	bl	8021148 <SD_WideBus_Enable>
 8020a80:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8020a82:	687b      	ldr	r3, [r7, #4]
 8020a84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8020a86:	6a3b      	ldr	r3, [r7, #32]
 8020a88:	431a      	orrs	r2, r3
 8020a8a:	687b      	ldr	r3, [r7, #4]
 8020a8c:	635a      	str	r2, [r3, #52]	@ 0x34
 8020a8e:	e01a      	b.n	8020ac6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8020a90:	683b      	ldr	r3, [r7, #0]
 8020a92:	2b00      	cmp	r3, #0
 8020a94:	d10a      	bne.n	8020aac <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8020a96:	6878      	ldr	r0, [r7, #4]
 8020a98:	f000 fba1 	bl	80211de <SD_WideBus_Disable>
 8020a9c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8020a9e:	687b      	ldr	r3, [r7, #4]
 8020aa0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8020aa2:	6a3b      	ldr	r3, [r7, #32]
 8020aa4:	431a      	orrs	r2, r3
 8020aa6:	687b      	ldr	r3, [r7, #4]
 8020aa8:	635a      	str	r2, [r3, #52]	@ 0x34
 8020aaa:	e00c      	b.n	8020ac6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8020aac:	687b      	ldr	r3, [r7, #4]
 8020aae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8020ab0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8020ab4:	687b      	ldr	r3, [r7, #4]
 8020ab6:	635a      	str	r2, [r3, #52]	@ 0x34
 8020ab8:	e005      	b.n	8020ac6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8020aba:	687b      	ldr	r3, [r7, #4]
 8020abc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8020abe:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8020ac2:	687b      	ldr	r3, [r7, #4]
 8020ac4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8020ac6:	687b      	ldr	r3, [r7, #4]
 8020ac8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8020aca:	2b00      	cmp	r3, #0
 8020acc:	d007      	beq.n	8020ade <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8020ace:	687b      	ldr	r3, [r7, #4]
 8020ad0:	681b      	ldr	r3, [r3, #0]
 8020ad2:	4a5f      	ldr	r2, [pc, #380]	@ (8020c50 <HAL_SD_ConfigWideBusOperation+0x214>)
 8020ad4:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8020ad6:	2301      	movs	r3, #1
 8020ad8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8020adc:	e096      	b.n	8020c0c <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8020ade:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8020ae2:	f04f 0100 	mov.w	r1, #0
 8020ae6:	f7fd fdf5 	bl	801e6d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8020aea:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8020aec:	69fb      	ldr	r3, [r7, #28]
 8020aee:	2b00      	cmp	r3, #0
 8020af0:	f000 8083 	beq.w	8020bfa <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8020af4:	687b      	ldr	r3, [r7, #4]
 8020af6:	685b      	ldr	r3, [r3, #4]
 8020af8:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8020afa:	687b      	ldr	r3, [r7, #4]
 8020afc:	689b      	ldr	r3, [r3, #8]
 8020afe:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8020b00:	683b      	ldr	r3, [r7, #0]
 8020b02:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8020b04:	687b      	ldr	r3, [r7, #4]
 8020b06:	691b      	ldr	r3, [r3, #16]
 8020b08:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8020b0a:	687b      	ldr	r3, [r7, #4]
 8020b0c:	695a      	ldr	r2, [r3, #20]
 8020b0e:	69fb      	ldr	r3, [r7, #28]
 8020b10:	4950      	ldr	r1, [pc, #320]	@ (8020c54 <HAL_SD_ConfigWideBusOperation+0x218>)
 8020b12:	fba1 1303 	umull	r1, r3, r1, r3
 8020b16:	0e1b      	lsrs	r3, r3, #24
 8020b18:	429a      	cmp	r2, r3
 8020b1a:	d303      	bcc.n	8020b24 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8020b1c:	687b      	ldr	r3, [r7, #4]
 8020b1e:	695b      	ldr	r3, [r3, #20]
 8020b20:	61bb      	str	r3, [r7, #24]
 8020b22:	e05a      	b.n	8020bda <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8020b24:	687b      	ldr	r3, [r7, #4]
 8020b26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8020b28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8020b2c:	d103      	bne.n	8020b36 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8020b2e:	687b      	ldr	r3, [r7, #4]
 8020b30:	695b      	ldr	r3, [r3, #20]
 8020b32:	61bb      	str	r3, [r7, #24]
 8020b34:	e051      	b.n	8020bda <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8020b36:	687b      	ldr	r3, [r7, #4]
 8020b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8020b3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8020b3e:	d126      	bne.n	8020b8e <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8020b40:	687b      	ldr	r3, [r7, #4]
 8020b42:	695b      	ldr	r3, [r3, #20]
 8020b44:	2b00      	cmp	r3, #0
 8020b46:	d10e      	bne.n	8020b66 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8020b48:	69fb      	ldr	r3, [r7, #28]
 8020b4a:	4a43      	ldr	r2, [pc, #268]	@ (8020c58 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8020b4c:	4293      	cmp	r3, r2
 8020b4e:	d906      	bls.n	8020b5e <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8020b50:	69fb      	ldr	r3, [r7, #28]
 8020b52:	4a40      	ldr	r2, [pc, #256]	@ (8020c54 <HAL_SD_ConfigWideBusOperation+0x218>)
 8020b54:	fba2 2303 	umull	r2, r3, r2, r3
 8020b58:	0e5b      	lsrs	r3, r3, #25
 8020b5a:	61bb      	str	r3, [r7, #24]
 8020b5c:	e03d      	b.n	8020bda <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8020b5e:	687b      	ldr	r3, [r7, #4]
 8020b60:	695b      	ldr	r3, [r3, #20]
 8020b62:	61bb      	str	r3, [r7, #24]
 8020b64:	e039      	b.n	8020bda <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8020b66:	687b      	ldr	r3, [r7, #4]
 8020b68:	695b      	ldr	r3, [r3, #20]
 8020b6a:	005b      	lsls	r3, r3, #1
 8020b6c:	69fa      	ldr	r2, [r7, #28]
 8020b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8020b72:	4a39      	ldr	r2, [pc, #228]	@ (8020c58 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8020b74:	4293      	cmp	r3, r2
 8020b76:	d906      	bls.n	8020b86 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8020b78:	69fb      	ldr	r3, [r7, #28]
 8020b7a:	4a36      	ldr	r2, [pc, #216]	@ (8020c54 <HAL_SD_ConfigWideBusOperation+0x218>)
 8020b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8020b80:	0e5b      	lsrs	r3, r3, #25
 8020b82:	61bb      	str	r3, [r7, #24]
 8020b84:	e029      	b.n	8020bda <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8020b86:	687b      	ldr	r3, [r7, #4]
 8020b88:	695b      	ldr	r3, [r3, #20]
 8020b8a:	61bb      	str	r3, [r7, #24]
 8020b8c:	e025      	b.n	8020bda <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8020b8e:	687b      	ldr	r3, [r7, #4]
 8020b90:	695b      	ldr	r3, [r3, #20]
 8020b92:	2b00      	cmp	r3, #0
 8020b94:	d10e      	bne.n	8020bb4 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8020b96:	69fb      	ldr	r3, [r7, #28]
 8020b98:	4a30      	ldr	r2, [pc, #192]	@ (8020c5c <HAL_SD_ConfigWideBusOperation+0x220>)
 8020b9a:	4293      	cmp	r3, r2
 8020b9c:	d906      	bls.n	8020bac <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8020b9e:	69fb      	ldr	r3, [r7, #28]
 8020ba0:	4a2c      	ldr	r2, [pc, #176]	@ (8020c54 <HAL_SD_ConfigWideBusOperation+0x218>)
 8020ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8020ba6:	0e1b      	lsrs	r3, r3, #24
 8020ba8:	61bb      	str	r3, [r7, #24]
 8020baa:	e016      	b.n	8020bda <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8020bac:	687b      	ldr	r3, [r7, #4]
 8020bae:	695b      	ldr	r3, [r3, #20]
 8020bb0:	61bb      	str	r3, [r7, #24]
 8020bb2:	e012      	b.n	8020bda <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8020bb4:	687b      	ldr	r3, [r7, #4]
 8020bb6:	695b      	ldr	r3, [r3, #20]
 8020bb8:	005b      	lsls	r3, r3, #1
 8020bba:	69fa      	ldr	r2, [r7, #28]
 8020bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8020bc0:	4a26      	ldr	r2, [pc, #152]	@ (8020c5c <HAL_SD_ConfigWideBusOperation+0x220>)
 8020bc2:	4293      	cmp	r3, r2
 8020bc4:	d906      	bls.n	8020bd4 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8020bc6:	69fb      	ldr	r3, [r7, #28]
 8020bc8:	4a22      	ldr	r2, [pc, #136]	@ (8020c54 <HAL_SD_ConfigWideBusOperation+0x218>)
 8020bca:	fba2 2303 	umull	r2, r3, r2, r3
 8020bce:	0e1b      	lsrs	r3, r3, #24
 8020bd0:	61bb      	str	r3, [r7, #24]
 8020bd2:	e002      	b.n	8020bda <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8020bd4:	687b      	ldr	r3, [r7, #4]
 8020bd6:	695b      	ldr	r3, [r3, #20]
 8020bd8:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8020bda:	687b      	ldr	r3, [r7, #4]
 8020bdc:	681c      	ldr	r4, [r3, #0]
 8020bde:	466a      	mov	r2, sp
 8020be0:	f107 0314 	add.w	r3, r7, #20
 8020be4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8020be8:	e882 0003 	stmia.w	r2, {r0, r1}
 8020bec:	f107 0308 	add.w	r3, r7, #8
 8020bf0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8020bf2:	4620      	mov	r0, r4
 8020bf4:	f001 ff7a 	bl	8022aec <SDMMC_Init>
 8020bf8:	e008      	b.n	8020c0c <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8020bfa:	687b      	ldr	r3, [r7, #4]
 8020bfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8020bfe:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8020c02:	687b      	ldr	r3, [r7, #4]
 8020c04:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 8020c06:	2301      	movs	r3, #1
 8020c08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8020c0c:	687b      	ldr	r3, [r7, #4]
 8020c0e:	681b      	ldr	r3, [r3, #0]
 8020c10:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8020c14:	4618      	mov	r0, r3
 8020c16:	f002 f847 	bl	8022ca8 <SDMMC_CmdBlockLength>
 8020c1a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8020c1c:	6a3b      	ldr	r3, [r7, #32]
 8020c1e:	2b00      	cmp	r3, #0
 8020c20:	d00c      	beq.n	8020c3c <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8020c22:	687b      	ldr	r3, [r7, #4]
 8020c24:	681b      	ldr	r3, [r3, #0]
 8020c26:	4a0a      	ldr	r2, [pc, #40]	@ (8020c50 <HAL_SD_ConfigWideBusOperation+0x214>)
 8020c28:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8020c2a:	687b      	ldr	r3, [r7, #4]
 8020c2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8020c2e:	6a3b      	ldr	r3, [r7, #32]
 8020c30:	431a      	orrs	r2, r3
 8020c32:	687b      	ldr	r3, [r7, #4]
 8020c34:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8020c36:	2301      	movs	r3, #1
 8020c38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8020c3c:	687b      	ldr	r3, [r7, #4]
 8020c3e:	2201      	movs	r2, #1
 8020c40:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8020c44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8020c48:	4618      	mov	r0, r3
 8020c4a:	372c      	adds	r7, #44	@ 0x2c
 8020c4c:	46bd      	mov	sp, r7
 8020c4e:	bd90      	pop	{r4, r7, pc}
 8020c50:	1fe00fff 	.word	0x1fe00fff
 8020c54:	55e63b89 	.word	0x55e63b89
 8020c58:	02faf080 	.word	0x02faf080
 8020c5c:	017d7840 	.word	0x017d7840

08020c60 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8020c60:	b580      	push	{r7, lr}
 8020c62:	b086      	sub	sp, #24
 8020c64:	af00      	add	r7, sp, #0
 8020c66:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8020c68:	2300      	movs	r3, #0
 8020c6a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8020c6c:	f107 030c 	add.w	r3, r7, #12
 8020c70:	4619      	mov	r1, r3
 8020c72:	6878      	ldr	r0, [r7, #4]
 8020c74:	f000 fa40 	bl	80210f8 <SD_SendStatus>
 8020c78:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8020c7a:	697b      	ldr	r3, [r7, #20]
 8020c7c:	2b00      	cmp	r3, #0
 8020c7e:	d005      	beq.n	8020c8c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8020c80:	687b      	ldr	r3, [r7, #4]
 8020c82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8020c84:	697b      	ldr	r3, [r7, #20]
 8020c86:	431a      	orrs	r2, r3
 8020c88:	687b      	ldr	r3, [r7, #4]
 8020c8a:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8020c8c:	68fb      	ldr	r3, [r7, #12]
 8020c8e:	0a5b      	lsrs	r3, r3, #9
 8020c90:	f003 030f 	and.w	r3, r3, #15
 8020c94:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8020c96:	693b      	ldr	r3, [r7, #16]
}
 8020c98:	4618      	mov	r0, r3
 8020c9a:	3718      	adds	r7, #24
 8020c9c:	46bd      	mov	sp, r7
 8020c9e:	bd80      	pop	{r7, pc}

08020ca0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8020ca0:	b580      	push	{r7, lr}
 8020ca2:	b090      	sub	sp, #64	@ 0x40
 8020ca4:	af00      	add	r7, sp, #0
 8020ca6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8020ca8:	2300      	movs	r3, #0
 8020caa:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8020cac:	f7f8 fbe8 	bl	8019480 <HAL_GetTick>
 8020cb0:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8020cb2:	687b      	ldr	r3, [r7, #4]
 8020cb4:	681b      	ldr	r3, [r3, #0]
 8020cb6:	4618      	mov	r0, r3
 8020cb8:	f001 ff71 	bl	8022b9e <SDMMC_GetPowerState>
 8020cbc:	4603      	mov	r3, r0
 8020cbe:	2b00      	cmp	r3, #0
 8020cc0:	d102      	bne.n	8020cc8 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8020cc2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8020cc6:	e0b5      	b.n	8020e34 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8020cc8:	687b      	ldr	r3, [r7, #4]
 8020cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8020ccc:	2b03      	cmp	r3, #3
 8020cce:	d02e      	beq.n	8020d2e <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8020cd0:	687b      	ldr	r3, [r7, #4]
 8020cd2:	681b      	ldr	r3, [r3, #0]
 8020cd4:	4618      	mov	r0, r3
 8020cd6:	f002 f9bc 	bl	8023052 <SDMMC_CmdSendCID>
 8020cda:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8020cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020cde:	2b00      	cmp	r3, #0
 8020ce0:	d001      	beq.n	8020ce6 <SD_InitCard+0x46>
    {
      return errorstate;
 8020ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020ce4:	e0a6      	b.n	8020e34 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8020ce6:	687b      	ldr	r3, [r7, #4]
 8020ce8:	681b      	ldr	r3, [r3, #0]
 8020cea:	2100      	movs	r1, #0
 8020cec:	4618      	mov	r0, r3
 8020cee:	f001 ff9c 	bl	8022c2a <SDMMC_GetResponse>
 8020cf2:	4602      	mov	r2, r0
 8020cf4:	687b      	ldr	r3, [r7, #4]
 8020cf6:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8020cf8:	687b      	ldr	r3, [r7, #4]
 8020cfa:	681b      	ldr	r3, [r3, #0]
 8020cfc:	2104      	movs	r1, #4
 8020cfe:	4618      	mov	r0, r3
 8020d00:	f001 ff93 	bl	8022c2a <SDMMC_GetResponse>
 8020d04:	4602      	mov	r2, r0
 8020d06:	687b      	ldr	r3, [r7, #4]
 8020d08:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8020d0a:	687b      	ldr	r3, [r7, #4]
 8020d0c:	681b      	ldr	r3, [r3, #0]
 8020d0e:	2108      	movs	r1, #8
 8020d10:	4618      	mov	r0, r3
 8020d12:	f001 ff8a 	bl	8022c2a <SDMMC_GetResponse>
 8020d16:	4602      	mov	r2, r0
 8020d18:	687b      	ldr	r3, [r7, #4]
 8020d1a:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8020d1c:	687b      	ldr	r3, [r7, #4]
 8020d1e:	681b      	ldr	r3, [r3, #0]
 8020d20:	210c      	movs	r1, #12
 8020d22:	4618      	mov	r0, r3
 8020d24:	f001 ff81 	bl	8022c2a <SDMMC_GetResponse>
 8020d28:	4602      	mov	r2, r0
 8020d2a:	687b      	ldr	r3, [r7, #4]
 8020d2c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8020d2e:	687b      	ldr	r3, [r7, #4]
 8020d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8020d32:	2b03      	cmp	r3, #3
 8020d34:	d01d      	beq.n	8020d72 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8020d36:	e019      	b.n	8020d6c <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8020d38:	687b      	ldr	r3, [r7, #4]
 8020d3a:	681b      	ldr	r3, [r3, #0]
 8020d3c:	f107 020a 	add.w	r2, r7, #10
 8020d40:	4611      	mov	r1, r2
 8020d42:	4618      	mov	r0, r3
 8020d44:	f002 f9c4 	bl	80230d0 <SDMMC_CmdSetRelAdd>
 8020d48:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8020d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020d4c:	2b00      	cmp	r3, #0
 8020d4e:	d001      	beq.n	8020d54 <SD_InitCard+0xb4>
      {
        return errorstate;
 8020d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020d52:	e06f      	b.n	8020e34 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8020d54:	f7f8 fb94 	bl	8019480 <HAL_GetTick>
 8020d58:	4602      	mov	r2, r0
 8020d5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8020d5c:	1ad3      	subs	r3, r2, r3
 8020d5e:	f241 3287 	movw	r2, #4999	@ 0x1387
 8020d62:	4293      	cmp	r3, r2
 8020d64:	d902      	bls.n	8020d6c <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8020d66:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8020d6a:	e063      	b.n	8020e34 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8020d6c:	897b      	ldrh	r3, [r7, #10]
 8020d6e:	2b00      	cmp	r3, #0
 8020d70:	d0e2      	beq.n	8020d38 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8020d72:	687b      	ldr	r3, [r7, #4]
 8020d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8020d76:	2b03      	cmp	r3, #3
 8020d78:	d036      	beq.n	8020de8 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8020d7a:	897b      	ldrh	r3, [r7, #10]
 8020d7c:	461a      	mov	r2, r3
 8020d7e:	687b      	ldr	r3, [r7, #4]
 8020d80:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8020d82:	687b      	ldr	r3, [r7, #4]
 8020d84:	681a      	ldr	r2, [r3, #0]
 8020d86:	687b      	ldr	r3, [r7, #4]
 8020d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8020d8a:	041b      	lsls	r3, r3, #16
 8020d8c:	4619      	mov	r1, r3
 8020d8e:	4610      	mov	r0, r2
 8020d90:	f002 f97e 	bl	8023090 <SDMMC_CmdSendCSD>
 8020d94:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8020d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020d98:	2b00      	cmp	r3, #0
 8020d9a:	d001      	beq.n	8020da0 <SD_InitCard+0x100>
    {
      return errorstate;
 8020d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020d9e:	e049      	b.n	8020e34 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8020da0:	687b      	ldr	r3, [r7, #4]
 8020da2:	681b      	ldr	r3, [r3, #0]
 8020da4:	2100      	movs	r1, #0
 8020da6:	4618      	mov	r0, r3
 8020da8:	f001 ff3f 	bl	8022c2a <SDMMC_GetResponse>
 8020dac:	4602      	mov	r2, r0
 8020dae:	687b      	ldr	r3, [r7, #4]
 8020db0:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8020db2:	687b      	ldr	r3, [r7, #4]
 8020db4:	681b      	ldr	r3, [r3, #0]
 8020db6:	2104      	movs	r1, #4
 8020db8:	4618      	mov	r0, r3
 8020dba:	f001 ff36 	bl	8022c2a <SDMMC_GetResponse>
 8020dbe:	4602      	mov	r2, r0
 8020dc0:	687b      	ldr	r3, [r7, #4]
 8020dc2:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8020dc4:	687b      	ldr	r3, [r7, #4]
 8020dc6:	681b      	ldr	r3, [r3, #0]
 8020dc8:	2108      	movs	r1, #8
 8020dca:	4618      	mov	r0, r3
 8020dcc:	f001 ff2d 	bl	8022c2a <SDMMC_GetResponse>
 8020dd0:	4602      	mov	r2, r0
 8020dd2:	687b      	ldr	r3, [r7, #4]
 8020dd4:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8020dd6:	687b      	ldr	r3, [r7, #4]
 8020dd8:	681b      	ldr	r3, [r3, #0]
 8020dda:	210c      	movs	r1, #12
 8020ddc:	4618      	mov	r0, r3
 8020dde:	f001 ff24 	bl	8022c2a <SDMMC_GetResponse>
 8020de2:	4602      	mov	r2, r0
 8020de4:	687b      	ldr	r3, [r7, #4]
 8020de6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8020de8:	687b      	ldr	r3, [r7, #4]
 8020dea:	681b      	ldr	r3, [r3, #0]
 8020dec:	2104      	movs	r1, #4
 8020dee:	4618      	mov	r0, r3
 8020df0:	f001 ff1b 	bl	8022c2a <SDMMC_GetResponse>
 8020df4:	4603      	mov	r3, r0
 8020df6:	0d1a      	lsrs	r2, r3, #20
 8020df8:	687b      	ldr	r3, [r7, #4]
 8020dfa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8020dfc:	f107 030c 	add.w	r3, r7, #12
 8020e00:	4619      	mov	r1, r3
 8020e02:	6878      	ldr	r0, [r7, #4]
 8020e04:	f7ff fb8c 	bl	8020520 <HAL_SD_GetCardCSD>
 8020e08:	4603      	mov	r3, r0
 8020e0a:	2b00      	cmp	r3, #0
 8020e0c:	d002      	beq.n	8020e14 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8020e0e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8020e12:	e00f      	b.n	8020e34 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8020e14:	687b      	ldr	r3, [r7, #4]
 8020e16:	681a      	ldr	r2, [r3, #0]
 8020e18:	687b      	ldr	r3, [r7, #4]
 8020e1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8020e1c:	041b      	lsls	r3, r3, #16
 8020e1e:	4619      	mov	r1, r3
 8020e20:	4610      	mov	r0, r2
 8020e22:	f002 f82d 	bl	8022e80 <SDMMC_CmdSelDesel>
 8020e26:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8020e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020e2a:	2b00      	cmp	r3, #0
 8020e2c:	d001      	beq.n	8020e32 <SD_InitCard+0x192>
  {
    return errorstate;
 8020e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020e30:	e000      	b.n	8020e34 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8020e32:	2300      	movs	r3, #0
}
 8020e34:	4618      	mov	r0, r3
 8020e36:	3740      	adds	r7, #64	@ 0x40
 8020e38:	46bd      	mov	sp, r7
 8020e3a:	bd80      	pop	{r7, pc}

08020e3c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8020e3c:	b580      	push	{r7, lr}
 8020e3e:	b086      	sub	sp, #24
 8020e40:	af00      	add	r7, sp, #0
 8020e42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8020e44:	2300      	movs	r3, #0
 8020e46:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8020e48:	2300      	movs	r3, #0
 8020e4a:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8020e4c:	2300      	movs	r3, #0
 8020e4e:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8020e50:	687b      	ldr	r3, [r7, #4]
 8020e52:	681b      	ldr	r3, [r3, #0]
 8020e54:	4618      	mov	r0, r3
 8020e56:	f002 f836 	bl	8022ec6 <SDMMC_CmdGoIdleState>
 8020e5a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8020e5c:	68fb      	ldr	r3, [r7, #12]
 8020e5e:	2b00      	cmp	r3, #0
 8020e60:	d001      	beq.n	8020e66 <SD_PowerON+0x2a>
  {
    return errorstate;
 8020e62:	68fb      	ldr	r3, [r7, #12]
 8020e64:	e072      	b.n	8020f4c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8020e66:	687b      	ldr	r3, [r7, #4]
 8020e68:	681b      	ldr	r3, [r3, #0]
 8020e6a:	4618      	mov	r0, r3
 8020e6c:	f002 f849 	bl	8022f02 <SDMMC_CmdOperCond>
 8020e70:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8020e72:	68fb      	ldr	r3, [r7, #12]
 8020e74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8020e78:	d10d      	bne.n	8020e96 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8020e7a:	687b      	ldr	r3, [r7, #4]
 8020e7c:	2200      	movs	r2, #0
 8020e7e:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8020e80:	687b      	ldr	r3, [r7, #4]
 8020e82:	681b      	ldr	r3, [r3, #0]
 8020e84:	4618      	mov	r0, r3
 8020e86:	f002 f81e 	bl	8022ec6 <SDMMC_CmdGoIdleState>
 8020e8a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8020e8c:	68fb      	ldr	r3, [r7, #12]
 8020e8e:	2b00      	cmp	r3, #0
 8020e90:	d004      	beq.n	8020e9c <SD_PowerON+0x60>
    {
      return errorstate;
 8020e92:	68fb      	ldr	r3, [r7, #12]
 8020e94:	e05a      	b.n	8020f4c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8020e96:	687b      	ldr	r3, [r7, #4]
 8020e98:	2201      	movs	r2, #1
 8020e9a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8020e9c:	687b      	ldr	r3, [r7, #4]
 8020e9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8020ea0:	2b01      	cmp	r3, #1
 8020ea2:	d137      	bne.n	8020f14 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8020ea4:	687b      	ldr	r3, [r7, #4]
 8020ea6:	681b      	ldr	r3, [r3, #0]
 8020ea8:	2100      	movs	r1, #0
 8020eaa:	4618      	mov	r0, r3
 8020eac:	f002 f849 	bl	8022f42 <SDMMC_CmdAppCommand>
 8020eb0:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8020eb2:	68fb      	ldr	r3, [r7, #12]
 8020eb4:	2b00      	cmp	r3, #0
 8020eb6:	d02d      	beq.n	8020f14 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8020eb8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8020ebc:	e046      	b.n	8020f4c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8020ebe:	687b      	ldr	r3, [r7, #4]
 8020ec0:	681b      	ldr	r3, [r3, #0]
 8020ec2:	2100      	movs	r1, #0
 8020ec4:	4618      	mov	r0, r3
 8020ec6:	f002 f83c 	bl	8022f42 <SDMMC_CmdAppCommand>
 8020eca:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8020ecc:	68fb      	ldr	r3, [r7, #12]
 8020ece:	2b00      	cmp	r3, #0
 8020ed0:	d001      	beq.n	8020ed6 <SD_PowerON+0x9a>
    {
      return errorstate;
 8020ed2:	68fb      	ldr	r3, [r7, #12]
 8020ed4:	e03a      	b.n	8020f4c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8020ed6:	687b      	ldr	r3, [r7, #4]
 8020ed8:	681b      	ldr	r3, [r3, #0]
 8020eda:	491e      	ldr	r1, [pc, #120]	@ (8020f54 <SD_PowerON+0x118>)
 8020edc:	4618      	mov	r0, r3
 8020ede:	f002 f853 	bl	8022f88 <SDMMC_CmdAppOperCommand>
 8020ee2:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8020ee4:	68fb      	ldr	r3, [r7, #12]
 8020ee6:	2b00      	cmp	r3, #0
 8020ee8:	d002      	beq.n	8020ef0 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8020eea:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8020eee:	e02d      	b.n	8020f4c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8020ef0:	687b      	ldr	r3, [r7, #4]
 8020ef2:	681b      	ldr	r3, [r3, #0]
 8020ef4:	2100      	movs	r1, #0
 8020ef6:	4618      	mov	r0, r3
 8020ef8:	f001 fe97 	bl	8022c2a <SDMMC_GetResponse>
 8020efc:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8020efe:	697b      	ldr	r3, [r7, #20]
 8020f00:	0fdb      	lsrs	r3, r3, #31
 8020f02:	2b01      	cmp	r3, #1
 8020f04:	d101      	bne.n	8020f0a <SD_PowerON+0xce>
 8020f06:	2301      	movs	r3, #1
 8020f08:	e000      	b.n	8020f0c <SD_PowerON+0xd0>
 8020f0a:	2300      	movs	r3, #0
 8020f0c:	613b      	str	r3, [r7, #16]

    count++;
 8020f0e:	68bb      	ldr	r3, [r7, #8]
 8020f10:	3301      	adds	r3, #1
 8020f12:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8020f14:	68bb      	ldr	r3, [r7, #8]
 8020f16:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8020f1a:	4293      	cmp	r3, r2
 8020f1c:	d802      	bhi.n	8020f24 <SD_PowerON+0xe8>
 8020f1e:	693b      	ldr	r3, [r7, #16]
 8020f20:	2b00      	cmp	r3, #0
 8020f22:	d0cc      	beq.n	8020ebe <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8020f24:	68bb      	ldr	r3, [r7, #8]
 8020f26:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8020f2a:	4293      	cmp	r3, r2
 8020f2c:	d902      	bls.n	8020f34 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8020f2e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8020f32:	e00b      	b.n	8020f4c <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8020f34:	687b      	ldr	r3, [r7, #4]
 8020f36:	2200      	movs	r2, #0
 8020f38:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8020f3a:	697b      	ldr	r3, [r7, #20]
 8020f3c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8020f40:	2b00      	cmp	r3, #0
 8020f42:	d002      	beq.n	8020f4a <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8020f44:	687b      	ldr	r3, [r7, #4]
 8020f46:	2201      	movs	r2, #1
 8020f48:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8020f4a:	2300      	movs	r3, #0
}
 8020f4c:	4618      	mov	r0, r3
 8020f4e:	3718      	adds	r7, #24
 8020f50:	46bd      	mov	sp, r7
 8020f52:	bd80      	pop	{r7, pc}
 8020f54:	c1100000 	.word	0xc1100000

08020f58 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8020f58:	b580      	push	{r7, lr}
 8020f5a:	b08c      	sub	sp, #48	@ 0x30
 8020f5c:	af00      	add	r7, sp, #0
 8020f5e:	6078      	str	r0, [r7, #4]
 8020f60:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8020f62:	f7f8 fa8d 	bl	8019480 <HAL_GetTick>
 8020f66:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8020f68:	683b      	ldr	r3, [r7, #0]
 8020f6a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8020f6c:	687b      	ldr	r3, [r7, #4]
 8020f6e:	681b      	ldr	r3, [r3, #0]
 8020f70:	2100      	movs	r1, #0
 8020f72:	4618      	mov	r0, r3
 8020f74:	f001 fe59 	bl	8022c2a <SDMMC_GetResponse>
 8020f78:	4603      	mov	r3, r0
 8020f7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8020f7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8020f82:	d102      	bne.n	8020f8a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8020f84:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8020f88:	e0b0      	b.n	80210ec <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8020f8a:	687b      	ldr	r3, [r7, #4]
 8020f8c:	681b      	ldr	r3, [r3, #0]
 8020f8e:	2140      	movs	r1, #64	@ 0x40
 8020f90:	4618      	mov	r0, r3
 8020f92:	f001 fe89 	bl	8022ca8 <SDMMC_CmdBlockLength>
 8020f96:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8020f98:	6a3b      	ldr	r3, [r7, #32]
 8020f9a:	2b00      	cmp	r3, #0
 8020f9c:	d005      	beq.n	8020faa <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8020f9e:	687b      	ldr	r3, [r7, #4]
 8020fa0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8020fa2:	687b      	ldr	r3, [r7, #4]
 8020fa4:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8020fa6:	6a3b      	ldr	r3, [r7, #32]
 8020fa8:	e0a0      	b.n	80210ec <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8020faa:	687b      	ldr	r3, [r7, #4]
 8020fac:	681a      	ldr	r2, [r3, #0]
 8020fae:	687b      	ldr	r3, [r7, #4]
 8020fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8020fb2:	041b      	lsls	r3, r3, #16
 8020fb4:	4619      	mov	r1, r3
 8020fb6:	4610      	mov	r0, r2
 8020fb8:	f001 ffc3 	bl	8022f42 <SDMMC_CmdAppCommand>
 8020fbc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8020fbe:	6a3b      	ldr	r3, [r7, #32]
 8020fc0:	2b00      	cmp	r3, #0
 8020fc2:	d005      	beq.n	8020fd0 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8020fc4:	687b      	ldr	r3, [r7, #4]
 8020fc6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8020fc8:	687b      	ldr	r3, [r7, #4]
 8020fca:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8020fcc:	6a3b      	ldr	r3, [r7, #32]
 8020fce:	e08d      	b.n	80210ec <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8020fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8020fd4:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8020fd6:	2340      	movs	r3, #64	@ 0x40
 8020fd8:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8020fda:	2360      	movs	r3, #96	@ 0x60
 8020fdc:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8020fde:	2302      	movs	r3, #2
 8020fe0:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8020fe2:	2300      	movs	r3, #0
 8020fe4:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8020fe6:	2301      	movs	r3, #1
 8020fe8:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8020fea:	687b      	ldr	r3, [r7, #4]
 8020fec:	681b      	ldr	r3, [r3, #0]
 8020fee:	f107 0208 	add.w	r2, r7, #8
 8020ff2:	4611      	mov	r1, r2
 8020ff4:	4618      	mov	r0, r3
 8020ff6:	f001 fe2b 	bl	8022c50 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8020ffa:	687b      	ldr	r3, [r7, #4]
 8020ffc:	681b      	ldr	r3, [r3, #0]
 8020ffe:	4618      	mov	r0, r3
 8021000:	f002 f8ab 	bl	802315a <SDMMC_CmdStatusRegister>
 8021004:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8021006:	6a3b      	ldr	r3, [r7, #32]
 8021008:	2b00      	cmp	r3, #0
 802100a:	d02b      	beq.n	8021064 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 802100c:	687b      	ldr	r3, [r7, #4]
 802100e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8021010:	687b      	ldr	r3, [r7, #4]
 8021012:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8021014:	6a3b      	ldr	r3, [r7, #32]
 8021016:	e069      	b.n	80210ec <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8021018:	687b      	ldr	r3, [r7, #4]
 802101a:	681b      	ldr	r3, [r3, #0]
 802101c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802101e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8021022:	2b00      	cmp	r3, #0
 8021024:	d013      	beq.n	802104e <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8021026:	2300      	movs	r3, #0
 8021028:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802102a:	e00d      	b.n	8021048 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 802102c:	687b      	ldr	r3, [r7, #4]
 802102e:	681b      	ldr	r3, [r3, #0]
 8021030:	4618      	mov	r0, r3
 8021032:	f001 fd85 	bl	8022b40 <SDMMC_ReadFIFO>
 8021036:	4602      	mov	r2, r0
 8021038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802103a:	601a      	str	r2, [r3, #0]
        pData++;
 802103c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802103e:	3304      	adds	r3, #4
 8021040:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8021042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021044:	3301      	adds	r3, #1
 8021046:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8021048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802104a:	2b07      	cmp	r3, #7
 802104c:	d9ee      	bls.n	802102c <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 802104e:	f7f8 fa17 	bl	8019480 <HAL_GetTick>
 8021052:	4602      	mov	r2, r0
 8021054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021056:	1ad3      	subs	r3, r2, r3
 8021058:	f1b3 3fff 	cmp.w	r3, #4294967295
 802105c:	d102      	bne.n	8021064 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 802105e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8021062:	e043      	b.n	80210ec <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8021064:	687b      	ldr	r3, [r7, #4]
 8021066:	681b      	ldr	r3, [r3, #0]
 8021068:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802106a:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 802106e:	2b00      	cmp	r3, #0
 8021070:	d0d2      	beq.n	8021018 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8021072:	687b      	ldr	r3, [r7, #4]
 8021074:	681b      	ldr	r3, [r3, #0]
 8021076:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8021078:	f003 0308 	and.w	r3, r3, #8
 802107c:	2b00      	cmp	r3, #0
 802107e:	d001      	beq.n	8021084 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8021080:	2308      	movs	r3, #8
 8021082:	e033      	b.n	80210ec <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8021084:	687b      	ldr	r3, [r7, #4]
 8021086:	681b      	ldr	r3, [r3, #0]
 8021088:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802108a:	f003 0302 	and.w	r3, r3, #2
 802108e:	2b00      	cmp	r3, #0
 8021090:	d001      	beq.n	8021096 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8021092:	2302      	movs	r3, #2
 8021094:	e02a      	b.n	80210ec <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8021096:	687b      	ldr	r3, [r7, #4]
 8021098:	681b      	ldr	r3, [r3, #0]
 802109a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802109c:	f003 0320 	and.w	r3, r3, #32
 80210a0:	2b00      	cmp	r3, #0
 80210a2:	d017      	beq.n	80210d4 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80210a4:	2320      	movs	r3, #32
 80210a6:	e021      	b.n	80210ec <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80210a8:	687b      	ldr	r3, [r7, #4]
 80210aa:	681b      	ldr	r3, [r3, #0]
 80210ac:	4618      	mov	r0, r3
 80210ae:	f001 fd47 	bl	8022b40 <SDMMC_ReadFIFO>
 80210b2:	4602      	mov	r2, r0
 80210b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80210b6:	601a      	str	r2, [r3, #0]
    pData++;
 80210b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80210ba:	3304      	adds	r3, #4
 80210bc:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80210be:	f7f8 f9df 	bl	8019480 <HAL_GetTick>
 80210c2:	4602      	mov	r2, r0
 80210c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80210c6:	1ad3      	subs	r3, r2, r3
 80210c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80210cc:	d102      	bne.n	80210d4 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80210ce:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80210d2:	e00b      	b.n	80210ec <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80210d4:	687b      	ldr	r3, [r7, #4]
 80210d6:	681b      	ldr	r3, [r3, #0]
 80210d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80210da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80210de:	2b00      	cmp	r3, #0
 80210e0:	d1e2      	bne.n	80210a8 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80210e2:	687b      	ldr	r3, [r7, #4]
 80210e4:	681b      	ldr	r3, [r3, #0]
 80210e6:	4a03      	ldr	r2, [pc, #12]	@ (80210f4 <SD_SendSDStatus+0x19c>)
 80210e8:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 80210ea:	2300      	movs	r3, #0
}
 80210ec:	4618      	mov	r0, r3
 80210ee:	3730      	adds	r7, #48	@ 0x30
 80210f0:	46bd      	mov	sp, r7
 80210f2:	bd80      	pop	{r7, pc}
 80210f4:	18000f3a 	.word	0x18000f3a

080210f8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80210f8:	b580      	push	{r7, lr}
 80210fa:	b084      	sub	sp, #16
 80210fc:	af00      	add	r7, sp, #0
 80210fe:	6078      	str	r0, [r7, #4]
 8021100:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8021102:	683b      	ldr	r3, [r7, #0]
 8021104:	2b00      	cmp	r3, #0
 8021106:	d102      	bne.n	802110e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8021108:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 802110c:	e018      	b.n	8021140 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 802110e:	687b      	ldr	r3, [r7, #4]
 8021110:	681a      	ldr	r2, [r3, #0]
 8021112:	687b      	ldr	r3, [r7, #4]
 8021114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8021116:	041b      	lsls	r3, r3, #16
 8021118:	4619      	mov	r1, r3
 802111a:	4610      	mov	r0, r2
 802111c:	f001 fffa 	bl	8023114 <SDMMC_CmdSendStatus>
 8021120:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8021122:	68fb      	ldr	r3, [r7, #12]
 8021124:	2b00      	cmp	r3, #0
 8021126:	d001      	beq.n	802112c <SD_SendStatus+0x34>
  {
    return errorstate;
 8021128:	68fb      	ldr	r3, [r7, #12]
 802112a:	e009      	b.n	8021140 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 802112c:	687b      	ldr	r3, [r7, #4]
 802112e:	681b      	ldr	r3, [r3, #0]
 8021130:	2100      	movs	r1, #0
 8021132:	4618      	mov	r0, r3
 8021134:	f001 fd79 	bl	8022c2a <SDMMC_GetResponse>
 8021138:	4602      	mov	r2, r0
 802113a:	683b      	ldr	r3, [r7, #0]
 802113c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 802113e:	2300      	movs	r3, #0
}
 8021140:	4618      	mov	r0, r3
 8021142:	3710      	adds	r7, #16
 8021144:	46bd      	mov	sp, r7
 8021146:	bd80      	pop	{r7, pc}

08021148 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8021148:	b580      	push	{r7, lr}
 802114a:	b086      	sub	sp, #24
 802114c:	af00      	add	r7, sp, #0
 802114e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8021150:	2300      	movs	r3, #0
 8021152:	60fb      	str	r3, [r7, #12]
 8021154:	2300      	movs	r3, #0
 8021156:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8021158:	687b      	ldr	r3, [r7, #4]
 802115a:	681b      	ldr	r3, [r3, #0]
 802115c:	2100      	movs	r1, #0
 802115e:	4618      	mov	r0, r3
 8021160:	f001 fd63 	bl	8022c2a <SDMMC_GetResponse>
 8021164:	4603      	mov	r3, r0
 8021166:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 802116a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 802116e:	d102      	bne.n	8021176 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8021170:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8021174:	e02f      	b.n	80211d6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8021176:	f107 030c 	add.w	r3, r7, #12
 802117a:	4619      	mov	r1, r3
 802117c:	6878      	ldr	r0, [r7, #4]
 802117e:	f000 f879 	bl	8021274 <SD_FindSCR>
 8021182:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8021184:	697b      	ldr	r3, [r7, #20]
 8021186:	2b00      	cmp	r3, #0
 8021188:	d001      	beq.n	802118e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 802118a:	697b      	ldr	r3, [r7, #20]
 802118c:	e023      	b.n	80211d6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 802118e:	693b      	ldr	r3, [r7, #16]
 8021190:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8021194:	2b00      	cmp	r3, #0
 8021196:	d01c      	beq.n	80211d2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8021198:	687b      	ldr	r3, [r7, #4]
 802119a:	681a      	ldr	r2, [r3, #0]
 802119c:	687b      	ldr	r3, [r7, #4]
 802119e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80211a0:	041b      	lsls	r3, r3, #16
 80211a2:	4619      	mov	r1, r3
 80211a4:	4610      	mov	r0, r2
 80211a6:	f001 fecc 	bl	8022f42 <SDMMC_CmdAppCommand>
 80211aa:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80211ac:	697b      	ldr	r3, [r7, #20]
 80211ae:	2b00      	cmp	r3, #0
 80211b0:	d001      	beq.n	80211b6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80211b2:	697b      	ldr	r3, [r7, #20]
 80211b4:	e00f      	b.n	80211d6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80211b6:	687b      	ldr	r3, [r7, #4]
 80211b8:	681b      	ldr	r3, [r3, #0]
 80211ba:	2102      	movs	r1, #2
 80211bc:	4618      	mov	r0, r3
 80211be:	f001 ff03 	bl	8022fc8 <SDMMC_CmdBusWidth>
 80211c2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80211c4:	697b      	ldr	r3, [r7, #20]
 80211c6:	2b00      	cmp	r3, #0
 80211c8:	d001      	beq.n	80211ce <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80211ca:	697b      	ldr	r3, [r7, #20]
 80211cc:	e003      	b.n	80211d6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80211ce:	2300      	movs	r3, #0
 80211d0:	e001      	b.n	80211d6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80211d2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80211d6:	4618      	mov	r0, r3
 80211d8:	3718      	adds	r7, #24
 80211da:	46bd      	mov	sp, r7
 80211dc:	bd80      	pop	{r7, pc}

080211de <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80211de:	b580      	push	{r7, lr}
 80211e0:	b086      	sub	sp, #24
 80211e2:	af00      	add	r7, sp, #0
 80211e4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80211e6:	2300      	movs	r3, #0
 80211e8:	60fb      	str	r3, [r7, #12]
 80211ea:	2300      	movs	r3, #0
 80211ec:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80211ee:	687b      	ldr	r3, [r7, #4]
 80211f0:	681b      	ldr	r3, [r3, #0]
 80211f2:	2100      	movs	r1, #0
 80211f4:	4618      	mov	r0, r3
 80211f6:	f001 fd18 	bl	8022c2a <SDMMC_GetResponse>
 80211fa:	4603      	mov	r3, r0
 80211fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8021200:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8021204:	d102      	bne.n	802120c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8021206:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 802120a:	e02f      	b.n	802126c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 802120c:	f107 030c 	add.w	r3, r7, #12
 8021210:	4619      	mov	r1, r3
 8021212:	6878      	ldr	r0, [r7, #4]
 8021214:	f000 f82e 	bl	8021274 <SD_FindSCR>
 8021218:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 802121a:	697b      	ldr	r3, [r7, #20]
 802121c:	2b00      	cmp	r3, #0
 802121e:	d001      	beq.n	8021224 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8021220:	697b      	ldr	r3, [r7, #20]
 8021222:	e023      	b.n	802126c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8021224:	693b      	ldr	r3, [r7, #16]
 8021226:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 802122a:	2b00      	cmp	r3, #0
 802122c:	d01c      	beq.n	8021268 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 802122e:	687b      	ldr	r3, [r7, #4]
 8021230:	681a      	ldr	r2, [r3, #0]
 8021232:	687b      	ldr	r3, [r7, #4]
 8021234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8021236:	041b      	lsls	r3, r3, #16
 8021238:	4619      	mov	r1, r3
 802123a:	4610      	mov	r0, r2
 802123c:	f001 fe81 	bl	8022f42 <SDMMC_CmdAppCommand>
 8021240:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8021242:	697b      	ldr	r3, [r7, #20]
 8021244:	2b00      	cmp	r3, #0
 8021246:	d001      	beq.n	802124c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8021248:	697b      	ldr	r3, [r7, #20]
 802124a:	e00f      	b.n	802126c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 802124c:	687b      	ldr	r3, [r7, #4]
 802124e:	681b      	ldr	r3, [r3, #0]
 8021250:	2100      	movs	r1, #0
 8021252:	4618      	mov	r0, r3
 8021254:	f001 feb8 	bl	8022fc8 <SDMMC_CmdBusWidth>
 8021258:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 802125a:	697b      	ldr	r3, [r7, #20]
 802125c:	2b00      	cmp	r3, #0
 802125e:	d001      	beq.n	8021264 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8021260:	697b      	ldr	r3, [r7, #20]
 8021262:	e003      	b.n	802126c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8021264:	2300      	movs	r3, #0
 8021266:	e001      	b.n	802126c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8021268:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 802126c:	4618      	mov	r0, r3
 802126e:	3718      	adds	r7, #24
 8021270:	46bd      	mov	sp, r7
 8021272:	bd80      	pop	{r7, pc}

08021274 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8021274:	b580      	push	{r7, lr}
 8021276:	b08e      	sub	sp, #56	@ 0x38
 8021278:	af00      	add	r7, sp, #0
 802127a:	6078      	str	r0, [r7, #4]
 802127c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 802127e:	f7f8 f8ff 	bl	8019480 <HAL_GetTick>
 8021282:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8021284:	2300      	movs	r3, #0
 8021286:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8021288:	2300      	movs	r3, #0
 802128a:	60bb      	str	r3, [r7, #8]
 802128c:	2300      	movs	r3, #0
 802128e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8021290:	683b      	ldr	r3, [r7, #0]
 8021292:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8021294:	687b      	ldr	r3, [r7, #4]
 8021296:	681b      	ldr	r3, [r3, #0]
 8021298:	2108      	movs	r1, #8
 802129a:	4618      	mov	r0, r3
 802129c:	f001 fd04 	bl	8022ca8 <SDMMC_CmdBlockLength>
 80212a0:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80212a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80212a4:	2b00      	cmp	r3, #0
 80212a6:	d001      	beq.n	80212ac <SD_FindSCR+0x38>
  {
    return errorstate;
 80212a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80212aa:	e0ad      	b.n	8021408 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80212ac:	687b      	ldr	r3, [r7, #4]
 80212ae:	681a      	ldr	r2, [r3, #0]
 80212b0:	687b      	ldr	r3, [r7, #4]
 80212b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80212b4:	041b      	lsls	r3, r3, #16
 80212b6:	4619      	mov	r1, r3
 80212b8:	4610      	mov	r0, r2
 80212ba:	f001 fe42 	bl	8022f42 <SDMMC_CmdAppCommand>
 80212be:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80212c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80212c2:	2b00      	cmp	r3, #0
 80212c4:	d001      	beq.n	80212ca <SD_FindSCR+0x56>
  {
    return errorstate;
 80212c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80212c8:	e09e      	b.n	8021408 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80212ca:	f04f 33ff 	mov.w	r3, #4294967295
 80212ce:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80212d0:	2308      	movs	r3, #8
 80212d2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80212d4:	2330      	movs	r3, #48	@ 0x30
 80212d6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80212d8:	2302      	movs	r3, #2
 80212da:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80212dc:	2300      	movs	r3, #0
 80212de:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80212e0:	2301      	movs	r3, #1
 80212e2:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80212e4:	687b      	ldr	r3, [r7, #4]
 80212e6:	681b      	ldr	r3, [r3, #0]
 80212e8:	f107 0210 	add.w	r2, r7, #16
 80212ec:	4611      	mov	r1, r2
 80212ee:	4618      	mov	r0, r3
 80212f0:	f001 fcae 	bl	8022c50 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80212f4:	687b      	ldr	r3, [r7, #4]
 80212f6:	681b      	ldr	r3, [r3, #0]
 80212f8:	4618      	mov	r0, r3
 80212fa:	f001 fe88 	bl	802300e <SDMMC_CmdSendSCR>
 80212fe:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8021300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021302:	2b00      	cmp	r3, #0
 8021304:	d027      	beq.n	8021356 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8021306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021308:	e07e      	b.n	8021408 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 802130a:	687b      	ldr	r3, [r7, #4]
 802130c:	681b      	ldr	r3, [r3, #0]
 802130e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8021310:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8021314:	2b00      	cmp	r3, #0
 8021316:	d113      	bne.n	8021340 <SD_FindSCR+0xcc>
 8021318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802131a:	2b00      	cmp	r3, #0
 802131c:	d110      	bne.n	8021340 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 802131e:	687b      	ldr	r3, [r7, #4]
 8021320:	681b      	ldr	r3, [r3, #0]
 8021322:	4618      	mov	r0, r3
 8021324:	f001 fc0c 	bl	8022b40 <SDMMC_ReadFIFO>
 8021328:	4603      	mov	r3, r0
 802132a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 802132c:	687b      	ldr	r3, [r7, #4]
 802132e:	681b      	ldr	r3, [r3, #0]
 8021330:	4618      	mov	r0, r3
 8021332:	f001 fc05 	bl	8022b40 <SDMMC_ReadFIFO>
 8021336:	4603      	mov	r3, r0
 8021338:	60fb      	str	r3, [r7, #12]
      index++;
 802133a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802133c:	3301      	adds	r3, #1
 802133e:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8021340:	f7f8 f89e 	bl	8019480 <HAL_GetTick>
 8021344:	4602      	mov	r2, r0
 8021346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021348:	1ad3      	subs	r3, r2, r3
 802134a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802134e:	d102      	bne.n	8021356 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8021350:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8021354:	e058      	b.n	8021408 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8021356:	687b      	ldr	r3, [r7, #4]
 8021358:	681b      	ldr	r3, [r3, #0]
 802135a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 802135c:	f240 532a 	movw	r3, #1322	@ 0x52a
 8021360:	4013      	ands	r3, r2
 8021362:	2b00      	cmp	r3, #0
 8021364:	d0d1      	beq.n	802130a <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8021366:	687b      	ldr	r3, [r7, #4]
 8021368:	681b      	ldr	r3, [r3, #0]
 802136a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802136c:	f003 0308 	and.w	r3, r3, #8
 8021370:	2b00      	cmp	r3, #0
 8021372:	d005      	beq.n	8021380 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8021374:	687b      	ldr	r3, [r7, #4]
 8021376:	681b      	ldr	r3, [r3, #0]
 8021378:	2208      	movs	r2, #8
 802137a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 802137c:	2308      	movs	r3, #8
 802137e:	e043      	b.n	8021408 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8021380:	687b      	ldr	r3, [r7, #4]
 8021382:	681b      	ldr	r3, [r3, #0]
 8021384:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8021386:	f003 0302 	and.w	r3, r3, #2
 802138a:	2b00      	cmp	r3, #0
 802138c:	d005      	beq.n	802139a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 802138e:	687b      	ldr	r3, [r7, #4]
 8021390:	681b      	ldr	r3, [r3, #0]
 8021392:	2202      	movs	r2, #2
 8021394:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8021396:	2302      	movs	r3, #2
 8021398:	e036      	b.n	8021408 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 802139a:	687b      	ldr	r3, [r7, #4]
 802139c:	681b      	ldr	r3, [r3, #0]
 802139e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80213a0:	f003 0320 	and.w	r3, r3, #32
 80213a4:	2b00      	cmp	r3, #0
 80213a6:	d005      	beq.n	80213b4 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80213a8:	687b      	ldr	r3, [r7, #4]
 80213aa:	681b      	ldr	r3, [r3, #0]
 80213ac:	2220      	movs	r2, #32
 80213ae:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80213b0:	2320      	movs	r3, #32
 80213b2:	e029      	b.n	8021408 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80213b4:	687b      	ldr	r3, [r7, #4]
 80213b6:	681b      	ldr	r3, [r3, #0]
 80213b8:	4a15      	ldr	r2, [pc, #84]	@ (8021410 <SD_FindSCR+0x19c>)
 80213ba:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80213bc:	68fb      	ldr	r3, [r7, #12]
 80213be:	061a      	lsls	r2, r3, #24
 80213c0:	68fb      	ldr	r3, [r7, #12]
 80213c2:	021b      	lsls	r3, r3, #8
 80213c4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80213c8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80213ca:	68fb      	ldr	r3, [r7, #12]
 80213cc:	0a1b      	lsrs	r3, r3, #8
 80213ce:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80213d2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80213d4:	68fb      	ldr	r3, [r7, #12]
 80213d6:	0e1b      	lsrs	r3, r3, #24
 80213d8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80213da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80213dc:	601a      	str	r2, [r3, #0]
    scr++;
 80213de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80213e0:	3304      	adds	r3, #4
 80213e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80213e4:	68bb      	ldr	r3, [r7, #8]
 80213e6:	061a      	lsls	r2, r3, #24
 80213e8:	68bb      	ldr	r3, [r7, #8]
 80213ea:	021b      	lsls	r3, r3, #8
 80213ec:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80213f0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80213f2:	68bb      	ldr	r3, [r7, #8]
 80213f4:	0a1b      	lsrs	r3, r3, #8
 80213f6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80213fa:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80213fc:	68bb      	ldr	r3, [r7, #8]
 80213fe:	0e1b      	lsrs	r3, r3, #24
 8021400:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8021402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021404:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8021406:	2300      	movs	r3, #0
}
 8021408:	4618      	mov	r0, r3
 802140a:	3738      	adds	r7, #56	@ 0x38
 802140c:	46bd      	mov	sp, r7
 802140e:	bd80      	pop	{r7, pc}
 8021410:	18000f3a 	.word	0x18000f3a

08021414 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8021414:	b580      	push	{r7, lr}
 8021416:	b086      	sub	sp, #24
 8021418:	af00      	add	r7, sp, #0
 802141a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 802141c:	687b      	ldr	r3, [r7, #4]
 802141e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021420:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8021422:	687b      	ldr	r3, [r7, #4]
 8021424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021426:	2b1f      	cmp	r3, #31
 8021428:	d936      	bls.n	8021498 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 802142a:	2300      	movs	r3, #0
 802142c:	617b      	str	r3, [r7, #20]
 802142e:	e027      	b.n	8021480 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8021430:	687b      	ldr	r3, [r7, #4]
 8021432:	681b      	ldr	r3, [r3, #0]
 8021434:	4618      	mov	r0, r3
 8021436:	f001 fb83 	bl	8022b40 <SDMMC_ReadFIFO>
 802143a:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 802143c:	68fb      	ldr	r3, [r7, #12]
 802143e:	b2da      	uxtb	r2, r3
 8021440:	693b      	ldr	r3, [r7, #16]
 8021442:	701a      	strb	r2, [r3, #0]
      tmp++;
 8021444:	693b      	ldr	r3, [r7, #16]
 8021446:	3301      	adds	r3, #1
 8021448:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 802144a:	68fb      	ldr	r3, [r7, #12]
 802144c:	0a1b      	lsrs	r3, r3, #8
 802144e:	b2da      	uxtb	r2, r3
 8021450:	693b      	ldr	r3, [r7, #16]
 8021452:	701a      	strb	r2, [r3, #0]
      tmp++;
 8021454:	693b      	ldr	r3, [r7, #16]
 8021456:	3301      	adds	r3, #1
 8021458:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 802145a:	68fb      	ldr	r3, [r7, #12]
 802145c:	0c1b      	lsrs	r3, r3, #16
 802145e:	b2da      	uxtb	r2, r3
 8021460:	693b      	ldr	r3, [r7, #16]
 8021462:	701a      	strb	r2, [r3, #0]
      tmp++;
 8021464:	693b      	ldr	r3, [r7, #16]
 8021466:	3301      	adds	r3, #1
 8021468:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 802146a:	68fb      	ldr	r3, [r7, #12]
 802146c:	0e1b      	lsrs	r3, r3, #24
 802146e:	b2da      	uxtb	r2, r3
 8021470:	693b      	ldr	r3, [r7, #16]
 8021472:	701a      	strb	r2, [r3, #0]
      tmp++;
 8021474:	693b      	ldr	r3, [r7, #16]
 8021476:	3301      	adds	r3, #1
 8021478:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 802147a:	697b      	ldr	r3, [r7, #20]
 802147c:	3301      	adds	r3, #1
 802147e:	617b      	str	r3, [r7, #20]
 8021480:	697b      	ldr	r3, [r7, #20]
 8021482:	2b07      	cmp	r3, #7
 8021484:	d9d4      	bls.n	8021430 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8021486:	687b      	ldr	r3, [r7, #4]
 8021488:	693a      	ldr	r2, [r7, #16]
 802148a:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 802148c:	687b      	ldr	r3, [r7, #4]
 802148e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021490:	f1a3 0220 	sub.w	r2, r3, #32
 8021494:	687b      	ldr	r3, [r7, #4]
 8021496:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 8021498:	bf00      	nop
 802149a:	3718      	adds	r7, #24
 802149c:	46bd      	mov	sp, r7
 802149e:	bd80      	pop	{r7, pc}

080214a0 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80214a0:	b580      	push	{r7, lr}
 80214a2:	b086      	sub	sp, #24
 80214a4:	af00      	add	r7, sp, #0
 80214a6:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 80214a8:	687b      	ldr	r3, [r7, #4]
 80214aa:	69db      	ldr	r3, [r3, #28]
 80214ac:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 80214ae:	687b      	ldr	r3, [r7, #4]
 80214b0:	6a1b      	ldr	r3, [r3, #32]
 80214b2:	2b1f      	cmp	r3, #31
 80214b4:	d93a      	bls.n	802152c <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 80214b6:	2300      	movs	r3, #0
 80214b8:	617b      	str	r3, [r7, #20]
 80214ba:	e02b      	b.n	8021514 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 80214bc:	693b      	ldr	r3, [r7, #16]
 80214be:	781b      	ldrb	r3, [r3, #0]
 80214c0:	60fb      	str	r3, [r7, #12]
      tmp++;
 80214c2:	693b      	ldr	r3, [r7, #16]
 80214c4:	3301      	adds	r3, #1
 80214c6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80214c8:	693b      	ldr	r3, [r7, #16]
 80214ca:	781b      	ldrb	r3, [r3, #0]
 80214cc:	021a      	lsls	r2, r3, #8
 80214ce:	68fb      	ldr	r3, [r7, #12]
 80214d0:	4313      	orrs	r3, r2
 80214d2:	60fb      	str	r3, [r7, #12]
      tmp++;
 80214d4:	693b      	ldr	r3, [r7, #16]
 80214d6:	3301      	adds	r3, #1
 80214d8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80214da:	693b      	ldr	r3, [r7, #16]
 80214dc:	781b      	ldrb	r3, [r3, #0]
 80214de:	041a      	lsls	r2, r3, #16
 80214e0:	68fb      	ldr	r3, [r7, #12]
 80214e2:	4313      	orrs	r3, r2
 80214e4:	60fb      	str	r3, [r7, #12]
      tmp++;
 80214e6:	693b      	ldr	r3, [r7, #16]
 80214e8:	3301      	adds	r3, #1
 80214ea:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80214ec:	693b      	ldr	r3, [r7, #16]
 80214ee:	781b      	ldrb	r3, [r3, #0]
 80214f0:	061a      	lsls	r2, r3, #24
 80214f2:	68fb      	ldr	r3, [r7, #12]
 80214f4:	4313      	orrs	r3, r2
 80214f6:	60fb      	str	r3, [r7, #12]
      tmp++;
 80214f8:	693b      	ldr	r3, [r7, #16]
 80214fa:	3301      	adds	r3, #1
 80214fc:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80214fe:	687b      	ldr	r3, [r7, #4]
 8021500:	681b      	ldr	r3, [r3, #0]
 8021502:	f107 020c 	add.w	r2, r7, #12
 8021506:	4611      	mov	r1, r2
 8021508:	4618      	mov	r0, r3
 802150a:	f001 fb26 	bl	8022b5a <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 802150e:	697b      	ldr	r3, [r7, #20]
 8021510:	3301      	adds	r3, #1
 8021512:	617b      	str	r3, [r7, #20]
 8021514:	697b      	ldr	r3, [r7, #20]
 8021516:	2b07      	cmp	r3, #7
 8021518:	d9d0      	bls.n	80214bc <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 802151a:	687b      	ldr	r3, [r7, #4]
 802151c:	693a      	ldr	r2, [r7, #16]
 802151e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8021520:	687b      	ldr	r3, [r7, #4]
 8021522:	6a1b      	ldr	r3, [r3, #32]
 8021524:	f1a3 0220 	sub.w	r2, r3, #32
 8021528:	687b      	ldr	r3, [r7, #4]
 802152a:	621a      	str	r2, [r3, #32]
  }
}
 802152c:	bf00      	nop
 802152e:	3718      	adds	r7, #24
 8021530:	46bd      	mov	sp, r7
 8021532:	bd80      	pop	{r7, pc}

08021534 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8021534:	b480      	push	{r7}
 8021536:	b083      	sub	sp, #12
 8021538:	af00      	add	r7, sp, #0
 802153a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 802153c:	bf00      	nop
 802153e:	370c      	adds	r7, #12
 8021540:	46bd      	mov	sp, r7
 8021542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021546:	4770      	bx	lr

08021548 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8021548:	b480      	push	{r7}
 802154a:	b083      	sub	sp, #12
 802154c:	af00      	add	r7, sp, #0
 802154e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8021550:	bf00      	nop
 8021552:	370c      	adds	r7, #12
 8021554:	46bd      	mov	sp, r7
 8021556:	f85d 7b04 	ldr.w	r7, [sp], #4
 802155a:	4770      	bx	lr

0802155c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 802155c:	b480      	push	{r7}
 802155e:	b083      	sub	sp, #12
 8021560:	af00      	add	r7, sp, #0
 8021562:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8021564:	bf00      	nop
 8021566:	370c      	adds	r7, #12
 8021568:	46bd      	mov	sp, r7
 802156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802156e:	4770      	bx	lr

08021570 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8021570:	b480      	push	{r7}
 8021572:	b083      	sub	sp, #12
 8021574:	af00      	add	r7, sp, #0
 8021576:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8021578:	bf00      	nop
 802157a:	370c      	adds	r7, #12
 802157c:	46bd      	mov	sp, r7
 802157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021582:	4770      	bx	lr

08021584 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8021584:	b580      	push	{r7, lr}
 8021586:	b084      	sub	sp, #16
 8021588:	af00      	add	r7, sp, #0
 802158a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 802158c:	687b      	ldr	r3, [r7, #4]
 802158e:	2b00      	cmp	r3, #0
 8021590:	d101      	bne.n	8021596 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8021592:	2301      	movs	r3, #1
 8021594:	e10f      	b.n	80217b6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8021596:	687b      	ldr	r3, [r7, #4]
 8021598:	2200      	movs	r2, #0
 802159a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 802159c:	687b      	ldr	r3, [r7, #4]
 802159e:	681b      	ldr	r3, [r3, #0]
 80215a0:	4a87      	ldr	r2, [pc, #540]	@ (80217c0 <HAL_SPI_Init+0x23c>)
 80215a2:	4293      	cmp	r3, r2
 80215a4:	d00f      	beq.n	80215c6 <HAL_SPI_Init+0x42>
 80215a6:	687b      	ldr	r3, [r7, #4]
 80215a8:	681b      	ldr	r3, [r3, #0]
 80215aa:	4a86      	ldr	r2, [pc, #536]	@ (80217c4 <HAL_SPI_Init+0x240>)
 80215ac:	4293      	cmp	r3, r2
 80215ae:	d00a      	beq.n	80215c6 <HAL_SPI_Init+0x42>
 80215b0:	687b      	ldr	r3, [r7, #4]
 80215b2:	681b      	ldr	r3, [r3, #0]
 80215b4:	4a84      	ldr	r2, [pc, #528]	@ (80217c8 <HAL_SPI_Init+0x244>)
 80215b6:	4293      	cmp	r3, r2
 80215b8:	d005      	beq.n	80215c6 <HAL_SPI_Init+0x42>
 80215ba:	687b      	ldr	r3, [r7, #4]
 80215bc:	68db      	ldr	r3, [r3, #12]
 80215be:	2b0f      	cmp	r3, #15
 80215c0:	d901      	bls.n	80215c6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80215c2:	2301      	movs	r3, #1
 80215c4:	e0f7      	b.n	80217b6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80215c6:	6878      	ldr	r0, [r7, #4]
 80215c8:	f000 f90a 	bl	80217e0 <SPI_GetPacketSize>
 80215cc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80215ce:	687b      	ldr	r3, [r7, #4]
 80215d0:	681b      	ldr	r3, [r3, #0]
 80215d2:	4a7b      	ldr	r2, [pc, #492]	@ (80217c0 <HAL_SPI_Init+0x23c>)
 80215d4:	4293      	cmp	r3, r2
 80215d6:	d00c      	beq.n	80215f2 <HAL_SPI_Init+0x6e>
 80215d8:	687b      	ldr	r3, [r7, #4]
 80215da:	681b      	ldr	r3, [r3, #0]
 80215dc:	4a79      	ldr	r2, [pc, #484]	@ (80217c4 <HAL_SPI_Init+0x240>)
 80215de:	4293      	cmp	r3, r2
 80215e0:	d007      	beq.n	80215f2 <HAL_SPI_Init+0x6e>
 80215e2:	687b      	ldr	r3, [r7, #4]
 80215e4:	681b      	ldr	r3, [r3, #0]
 80215e6:	4a78      	ldr	r2, [pc, #480]	@ (80217c8 <HAL_SPI_Init+0x244>)
 80215e8:	4293      	cmp	r3, r2
 80215ea:	d002      	beq.n	80215f2 <HAL_SPI_Init+0x6e>
 80215ec:	68fb      	ldr	r3, [r7, #12]
 80215ee:	2b08      	cmp	r3, #8
 80215f0:	d811      	bhi.n	8021616 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80215f2:	687b      	ldr	r3, [r7, #4]
 80215f4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80215f6:	4a72      	ldr	r2, [pc, #456]	@ (80217c0 <HAL_SPI_Init+0x23c>)
 80215f8:	4293      	cmp	r3, r2
 80215fa:	d009      	beq.n	8021610 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80215fc:	687b      	ldr	r3, [r7, #4]
 80215fe:	681b      	ldr	r3, [r3, #0]
 8021600:	4a70      	ldr	r2, [pc, #448]	@ (80217c4 <HAL_SPI_Init+0x240>)
 8021602:	4293      	cmp	r3, r2
 8021604:	d004      	beq.n	8021610 <HAL_SPI_Init+0x8c>
 8021606:	687b      	ldr	r3, [r7, #4]
 8021608:	681b      	ldr	r3, [r3, #0]
 802160a:	4a6f      	ldr	r2, [pc, #444]	@ (80217c8 <HAL_SPI_Init+0x244>)
 802160c:	4293      	cmp	r3, r2
 802160e:	d104      	bne.n	802161a <HAL_SPI_Init+0x96>
 8021610:	68fb      	ldr	r3, [r7, #12]
 8021612:	2b10      	cmp	r3, #16
 8021614:	d901      	bls.n	802161a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8021616:	2301      	movs	r3, #1
 8021618:	e0cd      	b.n	80217b6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 802161a:	687b      	ldr	r3, [r7, #4]
 802161c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8021620:	b2db      	uxtb	r3, r3
 8021622:	2b00      	cmp	r3, #0
 8021624:	d106      	bne.n	8021634 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8021626:	687b      	ldr	r3, [r7, #4]
 8021628:	2200      	movs	r2, #0
 802162a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 802162e:	6878      	ldr	r0, [r7, #4]
 8021630:	f000 f8cc 	bl	80217cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8021634:	687b      	ldr	r3, [r7, #4]
 8021636:	2202      	movs	r2, #2
 8021638:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 802163c:	687b      	ldr	r3, [r7, #4]
 802163e:	681b      	ldr	r3, [r3, #0]
 8021640:	681a      	ldr	r2, [r3, #0]
 8021642:	687b      	ldr	r3, [r7, #4]
 8021644:	681b      	ldr	r3, [r3, #0]
 8021646:	f022 0201 	bic.w	r2, r2, #1
 802164a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 802164c:	687b      	ldr	r3, [r7, #4]
 802164e:	681b      	ldr	r3, [r3, #0]
 8021650:	689b      	ldr	r3, [r3, #8]
 8021652:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8021656:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8021658:	687b      	ldr	r3, [r7, #4]
 802165a:	699b      	ldr	r3, [r3, #24]
 802165c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8021660:	d119      	bne.n	8021696 <HAL_SPI_Init+0x112>
 8021662:	687b      	ldr	r3, [r7, #4]
 8021664:	685b      	ldr	r3, [r3, #4]
 8021666:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 802166a:	d103      	bne.n	8021674 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 802166c:	687b      	ldr	r3, [r7, #4]
 802166e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8021670:	2b00      	cmp	r3, #0
 8021672:	d008      	beq.n	8021686 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8021674:	687b      	ldr	r3, [r7, #4]
 8021676:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8021678:	2b00      	cmp	r3, #0
 802167a:	d10c      	bne.n	8021696 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 802167c:	687b      	ldr	r3, [r7, #4]
 802167e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8021680:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8021684:	d107      	bne.n	8021696 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8021686:	687b      	ldr	r3, [r7, #4]
 8021688:	681b      	ldr	r3, [r3, #0]
 802168a:	681a      	ldr	r2, [r3, #0]
 802168c:	687b      	ldr	r3, [r7, #4]
 802168e:	681b      	ldr	r3, [r3, #0]
 8021690:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8021694:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8021696:	687b      	ldr	r3, [r7, #4]
 8021698:	685b      	ldr	r3, [r3, #4]
 802169a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 802169e:	2b00      	cmp	r3, #0
 80216a0:	d00f      	beq.n	80216c2 <HAL_SPI_Init+0x13e>
 80216a2:	687b      	ldr	r3, [r7, #4]
 80216a4:	68db      	ldr	r3, [r3, #12]
 80216a6:	2b06      	cmp	r3, #6
 80216a8:	d90b      	bls.n	80216c2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80216aa:	687b      	ldr	r3, [r7, #4]
 80216ac:	681b      	ldr	r3, [r3, #0]
 80216ae:	681b      	ldr	r3, [r3, #0]
 80216b0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80216b4:	687b      	ldr	r3, [r7, #4]
 80216b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80216b8:	687b      	ldr	r3, [r7, #4]
 80216ba:	681b      	ldr	r3, [r3, #0]
 80216bc:	430a      	orrs	r2, r1
 80216be:	601a      	str	r2, [r3, #0]
 80216c0:	e007      	b.n	80216d2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80216c2:	687b      	ldr	r3, [r7, #4]
 80216c4:	681b      	ldr	r3, [r3, #0]
 80216c6:	681a      	ldr	r2, [r3, #0]
 80216c8:	687b      	ldr	r3, [r7, #4]
 80216ca:	681b      	ldr	r3, [r3, #0]
 80216cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80216d0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80216d2:	687b      	ldr	r3, [r7, #4]
 80216d4:	69da      	ldr	r2, [r3, #28]
 80216d6:	687b      	ldr	r3, [r7, #4]
 80216d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80216da:	431a      	orrs	r2, r3
 80216dc:	68bb      	ldr	r3, [r7, #8]
 80216de:	431a      	orrs	r2, r3
 80216e0:	687b      	ldr	r3, [r7, #4]
 80216e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80216e4:	ea42 0103 	orr.w	r1, r2, r3
 80216e8:	687b      	ldr	r3, [r7, #4]
 80216ea:	68da      	ldr	r2, [r3, #12]
 80216ec:	687b      	ldr	r3, [r7, #4]
 80216ee:	681b      	ldr	r3, [r3, #0]
 80216f0:	430a      	orrs	r2, r1
 80216f2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80216f4:	687b      	ldr	r3, [r7, #4]
 80216f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80216f8:	687b      	ldr	r3, [r7, #4]
 80216fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80216fc:	431a      	orrs	r2, r3
 80216fe:	687b      	ldr	r3, [r7, #4]
 8021700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021702:	431a      	orrs	r2, r3
 8021704:	687b      	ldr	r3, [r7, #4]
 8021706:	699b      	ldr	r3, [r3, #24]
 8021708:	431a      	orrs	r2, r3
 802170a:	687b      	ldr	r3, [r7, #4]
 802170c:	691b      	ldr	r3, [r3, #16]
 802170e:	431a      	orrs	r2, r3
 8021710:	687b      	ldr	r3, [r7, #4]
 8021712:	695b      	ldr	r3, [r3, #20]
 8021714:	431a      	orrs	r2, r3
 8021716:	687b      	ldr	r3, [r7, #4]
 8021718:	6a1b      	ldr	r3, [r3, #32]
 802171a:	431a      	orrs	r2, r3
 802171c:	687b      	ldr	r3, [r7, #4]
 802171e:	685b      	ldr	r3, [r3, #4]
 8021720:	431a      	orrs	r2, r3
 8021722:	687b      	ldr	r3, [r7, #4]
 8021724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8021726:	431a      	orrs	r2, r3
 8021728:	687b      	ldr	r3, [r7, #4]
 802172a:	689b      	ldr	r3, [r3, #8]
 802172c:	431a      	orrs	r2, r3
 802172e:	687b      	ldr	r3, [r7, #4]
 8021730:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8021732:	ea42 0103 	orr.w	r1, r2, r3
 8021736:	687b      	ldr	r3, [r7, #4]
 8021738:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 802173a:	687b      	ldr	r3, [r7, #4]
 802173c:	681b      	ldr	r3, [r3, #0]
 802173e:	430a      	orrs	r2, r1
 8021740:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8021742:	687b      	ldr	r3, [r7, #4]
 8021744:	685b      	ldr	r3, [r3, #4]
 8021746:	2b00      	cmp	r3, #0
 8021748:	d113      	bne.n	8021772 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 802174a:	687b      	ldr	r3, [r7, #4]
 802174c:	681b      	ldr	r3, [r3, #0]
 802174e:	689b      	ldr	r3, [r3, #8]
 8021750:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8021754:	687b      	ldr	r3, [r7, #4]
 8021756:	681b      	ldr	r3, [r3, #0]
 8021758:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 802175c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 802175e:	687b      	ldr	r3, [r7, #4]
 8021760:	681b      	ldr	r3, [r3, #0]
 8021762:	689b      	ldr	r3, [r3, #8]
 8021764:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8021768:	687b      	ldr	r3, [r7, #4]
 802176a:	681b      	ldr	r3, [r3, #0]
 802176c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8021770:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8021772:	687b      	ldr	r3, [r7, #4]
 8021774:	681b      	ldr	r3, [r3, #0]
 8021776:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8021778:	687b      	ldr	r3, [r7, #4]
 802177a:	681b      	ldr	r3, [r3, #0]
 802177c:	f022 0201 	bic.w	r2, r2, #1
 8021780:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8021782:	687b      	ldr	r3, [r7, #4]
 8021784:	685b      	ldr	r3, [r3, #4]
 8021786:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 802178a:	2b00      	cmp	r3, #0
 802178c:	d00a      	beq.n	80217a4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 802178e:	687b      	ldr	r3, [r7, #4]
 8021790:	681b      	ldr	r3, [r3, #0]
 8021792:	68db      	ldr	r3, [r3, #12]
 8021794:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8021798:	687b      	ldr	r3, [r7, #4]
 802179a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 802179c:	687b      	ldr	r3, [r7, #4]
 802179e:	681b      	ldr	r3, [r3, #0]
 80217a0:	430a      	orrs	r2, r1
 80217a2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80217a4:	687b      	ldr	r3, [r7, #4]
 80217a6:	2200      	movs	r2, #0
 80217a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80217ac:	687b      	ldr	r3, [r7, #4]
 80217ae:	2201      	movs	r2, #1
 80217b0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80217b4:	2300      	movs	r3, #0
}
 80217b6:	4618      	mov	r0, r3
 80217b8:	3710      	adds	r7, #16
 80217ba:	46bd      	mov	sp, r7
 80217bc:	bd80      	pop	{r7, pc}
 80217be:	bf00      	nop
 80217c0:	40013000 	.word	0x40013000
 80217c4:	40003800 	.word	0x40003800
 80217c8:	40003c00 	.word	0x40003c00

080217cc <HAL_SPI_MspInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80217cc:	b480      	push	{r7}
 80217ce:	b083      	sub	sp, #12
 80217d0:	af00      	add	r7, sp, #0
 80217d2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80217d4:	bf00      	nop
 80217d6:	370c      	adds	r7, #12
 80217d8:	46bd      	mov	sp, r7
 80217da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217de:	4770      	bx	lr

080217e0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80217e0:	b480      	push	{r7}
 80217e2:	b085      	sub	sp, #20
 80217e4:	af00      	add	r7, sp, #0
 80217e6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80217e8:	687b      	ldr	r3, [r7, #4]
 80217ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80217ec:	095b      	lsrs	r3, r3, #5
 80217ee:	3301      	adds	r3, #1
 80217f0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80217f2:	687b      	ldr	r3, [r7, #4]
 80217f4:	68db      	ldr	r3, [r3, #12]
 80217f6:	3301      	adds	r3, #1
 80217f8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80217fa:	68bb      	ldr	r3, [r7, #8]
 80217fc:	3307      	adds	r3, #7
 80217fe:	08db      	lsrs	r3, r3, #3
 8021800:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8021802:	68bb      	ldr	r3, [r7, #8]
 8021804:	68fa      	ldr	r2, [r7, #12]
 8021806:	fb02 f303 	mul.w	r3, r2, r3
}
 802180a:	4618      	mov	r0, r3
 802180c:	3714      	adds	r7, #20
 802180e:	46bd      	mov	sp, r7
 8021810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021814:	4770      	bx	lr

08021816 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8021816:	b580      	push	{r7, lr}
 8021818:	b082      	sub	sp, #8
 802181a:	af00      	add	r7, sp, #0
 802181c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 802181e:	687b      	ldr	r3, [r7, #4]
 8021820:	2b00      	cmp	r3, #0
 8021822:	d101      	bne.n	8021828 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8021824:	2301      	movs	r3, #1
 8021826:	e042      	b.n	80218ae <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8021828:	687b      	ldr	r3, [r7, #4]
 802182a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 802182e:	2b00      	cmp	r3, #0
 8021830:	d106      	bne.n	8021840 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8021832:	687b      	ldr	r3, [r7, #4]
 8021834:	2200      	movs	r2, #0
 8021836:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 802183a:	6878      	ldr	r0, [r7, #4]
 802183c:	f7ec f958 	bl	800daf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8021840:	687b      	ldr	r3, [r7, #4]
 8021842:	2224      	movs	r2, #36	@ 0x24
 8021844:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8021848:	687b      	ldr	r3, [r7, #4]
 802184a:	681b      	ldr	r3, [r3, #0]
 802184c:	681a      	ldr	r2, [r3, #0]
 802184e:	687b      	ldr	r3, [r7, #4]
 8021850:	681b      	ldr	r3, [r3, #0]
 8021852:	f022 0201 	bic.w	r2, r2, #1
 8021856:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8021858:	687b      	ldr	r3, [r7, #4]
 802185a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802185c:	2b00      	cmp	r3, #0
 802185e:	d002      	beq.n	8021866 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8021860:	6878      	ldr	r0, [r7, #4]
 8021862:	f000 fe1f 	bl	80224a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8021866:	6878      	ldr	r0, [r7, #4]
 8021868:	f000 f8b4 	bl	80219d4 <UART_SetConfig>
 802186c:	4603      	mov	r3, r0
 802186e:	2b01      	cmp	r3, #1
 8021870:	d101      	bne.n	8021876 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8021872:	2301      	movs	r3, #1
 8021874:	e01b      	b.n	80218ae <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8021876:	687b      	ldr	r3, [r7, #4]
 8021878:	681b      	ldr	r3, [r3, #0]
 802187a:	685a      	ldr	r2, [r3, #4]
 802187c:	687b      	ldr	r3, [r7, #4]
 802187e:	681b      	ldr	r3, [r3, #0]
 8021880:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8021884:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8021886:	687b      	ldr	r3, [r7, #4]
 8021888:	681b      	ldr	r3, [r3, #0]
 802188a:	689a      	ldr	r2, [r3, #8]
 802188c:	687b      	ldr	r3, [r7, #4]
 802188e:	681b      	ldr	r3, [r3, #0]
 8021890:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8021894:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8021896:	687b      	ldr	r3, [r7, #4]
 8021898:	681b      	ldr	r3, [r3, #0]
 802189a:	681a      	ldr	r2, [r3, #0]
 802189c:	687b      	ldr	r3, [r7, #4]
 802189e:	681b      	ldr	r3, [r3, #0]
 80218a0:	f042 0201 	orr.w	r2, r2, #1
 80218a4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80218a6:	6878      	ldr	r0, [r7, #4]
 80218a8:	f000 fe9e 	bl	80225e8 <UART_CheckIdleState>
 80218ac:	4603      	mov	r3, r0
}
 80218ae:	4618      	mov	r0, r3
 80218b0:	3708      	adds	r7, #8
 80218b2:	46bd      	mov	sp, r7
 80218b4:	bd80      	pop	{r7, pc}

080218b6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80218b6:	b580      	push	{r7, lr}
 80218b8:	b08a      	sub	sp, #40	@ 0x28
 80218ba:	af02      	add	r7, sp, #8
 80218bc:	60f8      	str	r0, [r7, #12]
 80218be:	60b9      	str	r1, [r7, #8]
 80218c0:	603b      	str	r3, [r7, #0]
 80218c2:	4613      	mov	r3, r2
 80218c4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80218c6:	68fb      	ldr	r3, [r7, #12]
 80218c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80218cc:	2b20      	cmp	r3, #32
 80218ce:	d17b      	bne.n	80219c8 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80218d0:	68bb      	ldr	r3, [r7, #8]
 80218d2:	2b00      	cmp	r3, #0
 80218d4:	d002      	beq.n	80218dc <HAL_UART_Transmit+0x26>
 80218d6:	88fb      	ldrh	r3, [r7, #6]
 80218d8:	2b00      	cmp	r3, #0
 80218da:	d101      	bne.n	80218e0 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80218dc:	2301      	movs	r3, #1
 80218de:	e074      	b.n	80219ca <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80218e0:	68fb      	ldr	r3, [r7, #12]
 80218e2:	2200      	movs	r2, #0
 80218e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80218e8:	68fb      	ldr	r3, [r7, #12]
 80218ea:	2221      	movs	r2, #33	@ 0x21
 80218ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80218f0:	f7f7 fdc6 	bl	8019480 <HAL_GetTick>
 80218f4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80218f6:	68fb      	ldr	r3, [r7, #12]
 80218f8:	88fa      	ldrh	r2, [r7, #6]
 80218fa:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80218fe:	68fb      	ldr	r3, [r7, #12]
 8021900:	88fa      	ldrh	r2, [r7, #6]
 8021902:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8021906:	68fb      	ldr	r3, [r7, #12]
 8021908:	689b      	ldr	r3, [r3, #8]
 802190a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 802190e:	d108      	bne.n	8021922 <HAL_UART_Transmit+0x6c>
 8021910:	68fb      	ldr	r3, [r7, #12]
 8021912:	691b      	ldr	r3, [r3, #16]
 8021914:	2b00      	cmp	r3, #0
 8021916:	d104      	bne.n	8021922 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8021918:	2300      	movs	r3, #0
 802191a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 802191c:	68bb      	ldr	r3, [r7, #8]
 802191e:	61bb      	str	r3, [r7, #24]
 8021920:	e003      	b.n	802192a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8021922:	68bb      	ldr	r3, [r7, #8]
 8021924:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8021926:	2300      	movs	r3, #0
 8021928:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 802192a:	e030      	b.n	802198e <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 802192c:	683b      	ldr	r3, [r7, #0]
 802192e:	9300      	str	r3, [sp, #0]
 8021930:	697b      	ldr	r3, [r7, #20]
 8021932:	2200      	movs	r2, #0
 8021934:	2180      	movs	r1, #128	@ 0x80
 8021936:	68f8      	ldr	r0, [r7, #12]
 8021938:	f000 ff00 	bl	802273c <UART_WaitOnFlagUntilTimeout>
 802193c:	4603      	mov	r3, r0
 802193e:	2b00      	cmp	r3, #0
 8021940:	d005      	beq.n	802194e <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8021942:	68fb      	ldr	r3, [r7, #12]
 8021944:	2220      	movs	r2, #32
 8021946:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 802194a:	2303      	movs	r3, #3
 802194c:	e03d      	b.n	80219ca <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 802194e:	69fb      	ldr	r3, [r7, #28]
 8021950:	2b00      	cmp	r3, #0
 8021952:	d10b      	bne.n	802196c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8021954:	69bb      	ldr	r3, [r7, #24]
 8021956:	881b      	ldrh	r3, [r3, #0]
 8021958:	461a      	mov	r2, r3
 802195a:	68fb      	ldr	r3, [r7, #12]
 802195c:	681b      	ldr	r3, [r3, #0]
 802195e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8021962:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8021964:	69bb      	ldr	r3, [r7, #24]
 8021966:	3302      	adds	r3, #2
 8021968:	61bb      	str	r3, [r7, #24]
 802196a:	e007      	b.n	802197c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 802196c:	69fb      	ldr	r3, [r7, #28]
 802196e:	781a      	ldrb	r2, [r3, #0]
 8021970:	68fb      	ldr	r3, [r7, #12]
 8021972:	681b      	ldr	r3, [r3, #0]
 8021974:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8021976:	69fb      	ldr	r3, [r7, #28]
 8021978:	3301      	adds	r3, #1
 802197a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 802197c:	68fb      	ldr	r3, [r7, #12]
 802197e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8021982:	b29b      	uxth	r3, r3
 8021984:	3b01      	subs	r3, #1
 8021986:	b29a      	uxth	r2, r3
 8021988:	68fb      	ldr	r3, [r7, #12]
 802198a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 802198e:	68fb      	ldr	r3, [r7, #12]
 8021990:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8021994:	b29b      	uxth	r3, r3
 8021996:	2b00      	cmp	r3, #0
 8021998:	d1c8      	bne.n	802192c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 802199a:	683b      	ldr	r3, [r7, #0]
 802199c:	9300      	str	r3, [sp, #0]
 802199e:	697b      	ldr	r3, [r7, #20]
 80219a0:	2200      	movs	r2, #0
 80219a2:	2140      	movs	r1, #64	@ 0x40
 80219a4:	68f8      	ldr	r0, [r7, #12]
 80219a6:	f000 fec9 	bl	802273c <UART_WaitOnFlagUntilTimeout>
 80219aa:	4603      	mov	r3, r0
 80219ac:	2b00      	cmp	r3, #0
 80219ae:	d005      	beq.n	80219bc <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80219b0:	68fb      	ldr	r3, [r7, #12]
 80219b2:	2220      	movs	r2, #32
 80219b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80219b8:	2303      	movs	r3, #3
 80219ba:	e006      	b.n	80219ca <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80219bc:	68fb      	ldr	r3, [r7, #12]
 80219be:	2220      	movs	r2, #32
 80219c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80219c4:	2300      	movs	r3, #0
 80219c6:	e000      	b.n	80219ca <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80219c8:	2302      	movs	r3, #2
  }
}
 80219ca:	4618      	mov	r0, r3
 80219cc:	3720      	adds	r7, #32
 80219ce:	46bd      	mov	sp, r7
 80219d0:	bd80      	pop	{r7, pc}
	...

080219d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80219d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80219d8:	b092      	sub	sp, #72	@ 0x48
 80219da:	af00      	add	r7, sp, #0
 80219dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80219de:	2300      	movs	r3, #0
 80219e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80219e4:	697b      	ldr	r3, [r7, #20]
 80219e6:	689a      	ldr	r2, [r3, #8]
 80219e8:	697b      	ldr	r3, [r7, #20]
 80219ea:	691b      	ldr	r3, [r3, #16]
 80219ec:	431a      	orrs	r2, r3
 80219ee:	697b      	ldr	r3, [r7, #20]
 80219f0:	695b      	ldr	r3, [r3, #20]
 80219f2:	431a      	orrs	r2, r3
 80219f4:	697b      	ldr	r3, [r7, #20]
 80219f6:	69db      	ldr	r3, [r3, #28]
 80219f8:	4313      	orrs	r3, r2
 80219fa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80219fc:	697b      	ldr	r3, [r7, #20]
 80219fe:	681b      	ldr	r3, [r3, #0]
 8021a00:	681a      	ldr	r2, [r3, #0]
 8021a02:	4bbe      	ldr	r3, [pc, #760]	@ (8021cfc <UART_SetConfig+0x328>)
 8021a04:	4013      	ands	r3, r2
 8021a06:	697a      	ldr	r2, [r7, #20]
 8021a08:	6812      	ldr	r2, [r2, #0]
 8021a0a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8021a0c:	430b      	orrs	r3, r1
 8021a0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8021a10:	697b      	ldr	r3, [r7, #20]
 8021a12:	681b      	ldr	r3, [r3, #0]
 8021a14:	685b      	ldr	r3, [r3, #4]
 8021a16:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8021a1a:	697b      	ldr	r3, [r7, #20]
 8021a1c:	68da      	ldr	r2, [r3, #12]
 8021a1e:	697b      	ldr	r3, [r7, #20]
 8021a20:	681b      	ldr	r3, [r3, #0]
 8021a22:	430a      	orrs	r2, r1
 8021a24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8021a26:	697b      	ldr	r3, [r7, #20]
 8021a28:	699b      	ldr	r3, [r3, #24]
 8021a2a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8021a2c:	697b      	ldr	r3, [r7, #20]
 8021a2e:	681b      	ldr	r3, [r3, #0]
 8021a30:	4ab3      	ldr	r2, [pc, #716]	@ (8021d00 <UART_SetConfig+0x32c>)
 8021a32:	4293      	cmp	r3, r2
 8021a34:	d004      	beq.n	8021a40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8021a36:	697b      	ldr	r3, [r7, #20]
 8021a38:	6a1b      	ldr	r3, [r3, #32]
 8021a3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8021a3c:	4313      	orrs	r3, r2
 8021a3e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8021a40:	697b      	ldr	r3, [r7, #20]
 8021a42:	681b      	ldr	r3, [r3, #0]
 8021a44:	689a      	ldr	r2, [r3, #8]
 8021a46:	4baf      	ldr	r3, [pc, #700]	@ (8021d04 <UART_SetConfig+0x330>)
 8021a48:	4013      	ands	r3, r2
 8021a4a:	697a      	ldr	r2, [r7, #20]
 8021a4c:	6812      	ldr	r2, [r2, #0]
 8021a4e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8021a50:	430b      	orrs	r3, r1
 8021a52:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8021a54:	697b      	ldr	r3, [r7, #20]
 8021a56:	681b      	ldr	r3, [r3, #0]
 8021a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021a5a:	f023 010f 	bic.w	r1, r3, #15
 8021a5e:	697b      	ldr	r3, [r7, #20]
 8021a60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8021a62:	697b      	ldr	r3, [r7, #20]
 8021a64:	681b      	ldr	r3, [r3, #0]
 8021a66:	430a      	orrs	r2, r1
 8021a68:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8021a6a:	697b      	ldr	r3, [r7, #20]
 8021a6c:	681b      	ldr	r3, [r3, #0]
 8021a6e:	4aa6      	ldr	r2, [pc, #664]	@ (8021d08 <UART_SetConfig+0x334>)
 8021a70:	4293      	cmp	r3, r2
 8021a72:	d177      	bne.n	8021b64 <UART_SetConfig+0x190>
 8021a74:	4ba5      	ldr	r3, [pc, #660]	@ (8021d0c <UART_SetConfig+0x338>)
 8021a76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8021a78:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8021a7c:	2b28      	cmp	r3, #40	@ 0x28
 8021a7e:	d86d      	bhi.n	8021b5c <UART_SetConfig+0x188>
 8021a80:	a201      	add	r2, pc, #4	@ (adr r2, 8021a88 <UART_SetConfig+0xb4>)
 8021a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021a86:	bf00      	nop
 8021a88:	08021b2d 	.word	0x08021b2d
 8021a8c:	08021b5d 	.word	0x08021b5d
 8021a90:	08021b5d 	.word	0x08021b5d
 8021a94:	08021b5d 	.word	0x08021b5d
 8021a98:	08021b5d 	.word	0x08021b5d
 8021a9c:	08021b5d 	.word	0x08021b5d
 8021aa0:	08021b5d 	.word	0x08021b5d
 8021aa4:	08021b5d 	.word	0x08021b5d
 8021aa8:	08021b35 	.word	0x08021b35
 8021aac:	08021b5d 	.word	0x08021b5d
 8021ab0:	08021b5d 	.word	0x08021b5d
 8021ab4:	08021b5d 	.word	0x08021b5d
 8021ab8:	08021b5d 	.word	0x08021b5d
 8021abc:	08021b5d 	.word	0x08021b5d
 8021ac0:	08021b5d 	.word	0x08021b5d
 8021ac4:	08021b5d 	.word	0x08021b5d
 8021ac8:	08021b3d 	.word	0x08021b3d
 8021acc:	08021b5d 	.word	0x08021b5d
 8021ad0:	08021b5d 	.word	0x08021b5d
 8021ad4:	08021b5d 	.word	0x08021b5d
 8021ad8:	08021b5d 	.word	0x08021b5d
 8021adc:	08021b5d 	.word	0x08021b5d
 8021ae0:	08021b5d 	.word	0x08021b5d
 8021ae4:	08021b5d 	.word	0x08021b5d
 8021ae8:	08021b45 	.word	0x08021b45
 8021aec:	08021b5d 	.word	0x08021b5d
 8021af0:	08021b5d 	.word	0x08021b5d
 8021af4:	08021b5d 	.word	0x08021b5d
 8021af8:	08021b5d 	.word	0x08021b5d
 8021afc:	08021b5d 	.word	0x08021b5d
 8021b00:	08021b5d 	.word	0x08021b5d
 8021b04:	08021b5d 	.word	0x08021b5d
 8021b08:	08021b4d 	.word	0x08021b4d
 8021b0c:	08021b5d 	.word	0x08021b5d
 8021b10:	08021b5d 	.word	0x08021b5d
 8021b14:	08021b5d 	.word	0x08021b5d
 8021b18:	08021b5d 	.word	0x08021b5d
 8021b1c:	08021b5d 	.word	0x08021b5d
 8021b20:	08021b5d 	.word	0x08021b5d
 8021b24:	08021b5d 	.word	0x08021b5d
 8021b28:	08021b55 	.word	0x08021b55
 8021b2c:	2301      	movs	r3, #1
 8021b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021b32:	e222      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021b34:	2304      	movs	r3, #4
 8021b36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021b3a:	e21e      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021b3c:	2308      	movs	r3, #8
 8021b3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021b42:	e21a      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021b44:	2310      	movs	r3, #16
 8021b46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021b4a:	e216      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021b4c:	2320      	movs	r3, #32
 8021b4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021b52:	e212      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021b54:	2340      	movs	r3, #64	@ 0x40
 8021b56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021b5a:	e20e      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021b5c:	2380      	movs	r3, #128	@ 0x80
 8021b5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021b62:	e20a      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021b64:	697b      	ldr	r3, [r7, #20]
 8021b66:	681b      	ldr	r3, [r3, #0]
 8021b68:	4a69      	ldr	r2, [pc, #420]	@ (8021d10 <UART_SetConfig+0x33c>)
 8021b6a:	4293      	cmp	r3, r2
 8021b6c:	d130      	bne.n	8021bd0 <UART_SetConfig+0x1fc>
 8021b6e:	4b67      	ldr	r3, [pc, #412]	@ (8021d0c <UART_SetConfig+0x338>)
 8021b70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8021b72:	f003 0307 	and.w	r3, r3, #7
 8021b76:	2b05      	cmp	r3, #5
 8021b78:	d826      	bhi.n	8021bc8 <UART_SetConfig+0x1f4>
 8021b7a:	a201      	add	r2, pc, #4	@ (adr r2, 8021b80 <UART_SetConfig+0x1ac>)
 8021b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021b80:	08021b99 	.word	0x08021b99
 8021b84:	08021ba1 	.word	0x08021ba1
 8021b88:	08021ba9 	.word	0x08021ba9
 8021b8c:	08021bb1 	.word	0x08021bb1
 8021b90:	08021bb9 	.word	0x08021bb9
 8021b94:	08021bc1 	.word	0x08021bc1
 8021b98:	2300      	movs	r3, #0
 8021b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021b9e:	e1ec      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021ba0:	2304      	movs	r3, #4
 8021ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021ba6:	e1e8      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021ba8:	2308      	movs	r3, #8
 8021baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021bae:	e1e4      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021bb0:	2310      	movs	r3, #16
 8021bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021bb6:	e1e0      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021bb8:	2320      	movs	r3, #32
 8021bba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021bbe:	e1dc      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021bc0:	2340      	movs	r3, #64	@ 0x40
 8021bc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021bc6:	e1d8      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021bc8:	2380      	movs	r3, #128	@ 0x80
 8021bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021bce:	e1d4      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021bd0:	697b      	ldr	r3, [r7, #20]
 8021bd2:	681b      	ldr	r3, [r3, #0]
 8021bd4:	4a4f      	ldr	r2, [pc, #316]	@ (8021d14 <UART_SetConfig+0x340>)
 8021bd6:	4293      	cmp	r3, r2
 8021bd8:	d130      	bne.n	8021c3c <UART_SetConfig+0x268>
 8021bda:	4b4c      	ldr	r3, [pc, #304]	@ (8021d0c <UART_SetConfig+0x338>)
 8021bdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8021bde:	f003 0307 	and.w	r3, r3, #7
 8021be2:	2b05      	cmp	r3, #5
 8021be4:	d826      	bhi.n	8021c34 <UART_SetConfig+0x260>
 8021be6:	a201      	add	r2, pc, #4	@ (adr r2, 8021bec <UART_SetConfig+0x218>)
 8021be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021bec:	08021c05 	.word	0x08021c05
 8021bf0:	08021c0d 	.word	0x08021c0d
 8021bf4:	08021c15 	.word	0x08021c15
 8021bf8:	08021c1d 	.word	0x08021c1d
 8021bfc:	08021c25 	.word	0x08021c25
 8021c00:	08021c2d 	.word	0x08021c2d
 8021c04:	2300      	movs	r3, #0
 8021c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021c0a:	e1b6      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021c0c:	2304      	movs	r3, #4
 8021c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021c12:	e1b2      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021c14:	2308      	movs	r3, #8
 8021c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021c1a:	e1ae      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021c1c:	2310      	movs	r3, #16
 8021c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021c22:	e1aa      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021c24:	2320      	movs	r3, #32
 8021c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021c2a:	e1a6      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021c2c:	2340      	movs	r3, #64	@ 0x40
 8021c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021c32:	e1a2      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021c34:	2380      	movs	r3, #128	@ 0x80
 8021c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021c3a:	e19e      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021c3c:	697b      	ldr	r3, [r7, #20]
 8021c3e:	681b      	ldr	r3, [r3, #0]
 8021c40:	4a35      	ldr	r2, [pc, #212]	@ (8021d18 <UART_SetConfig+0x344>)
 8021c42:	4293      	cmp	r3, r2
 8021c44:	d130      	bne.n	8021ca8 <UART_SetConfig+0x2d4>
 8021c46:	4b31      	ldr	r3, [pc, #196]	@ (8021d0c <UART_SetConfig+0x338>)
 8021c48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8021c4a:	f003 0307 	and.w	r3, r3, #7
 8021c4e:	2b05      	cmp	r3, #5
 8021c50:	d826      	bhi.n	8021ca0 <UART_SetConfig+0x2cc>
 8021c52:	a201      	add	r2, pc, #4	@ (adr r2, 8021c58 <UART_SetConfig+0x284>)
 8021c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021c58:	08021c71 	.word	0x08021c71
 8021c5c:	08021c79 	.word	0x08021c79
 8021c60:	08021c81 	.word	0x08021c81
 8021c64:	08021c89 	.word	0x08021c89
 8021c68:	08021c91 	.word	0x08021c91
 8021c6c:	08021c99 	.word	0x08021c99
 8021c70:	2300      	movs	r3, #0
 8021c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021c76:	e180      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021c78:	2304      	movs	r3, #4
 8021c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021c7e:	e17c      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021c80:	2308      	movs	r3, #8
 8021c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021c86:	e178      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021c88:	2310      	movs	r3, #16
 8021c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021c8e:	e174      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021c90:	2320      	movs	r3, #32
 8021c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021c96:	e170      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021c98:	2340      	movs	r3, #64	@ 0x40
 8021c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021c9e:	e16c      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021ca0:	2380      	movs	r3, #128	@ 0x80
 8021ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021ca6:	e168      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021ca8:	697b      	ldr	r3, [r7, #20]
 8021caa:	681b      	ldr	r3, [r3, #0]
 8021cac:	4a1b      	ldr	r2, [pc, #108]	@ (8021d1c <UART_SetConfig+0x348>)
 8021cae:	4293      	cmp	r3, r2
 8021cb0:	d142      	bne.n	8021d38 <UART_SetConfig+0x364>
 8021cb2:	4b16      	ldr	r3, [pc, #88]	@ (8021d0c <UART_SetConfig+0x338>)
 8021cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8021cb6:	f003 0307 	and.w	r3, r3, #7
 8021cba:	2b05      	cmp	r3, #5
 8021cbc:	d838      	bhi.n	8021d30 <UART_SetConfig+0x35c>
 8021cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8021cc4 <UART_SetConfig+0x2f0>)
 8021cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021cc4:	08021cdd 	.word	0x08021cdd
 8021cc8:	08021ce5 	.word	0x08021ce5
 8021ccc:	08021ced 	.word	0x08021ced
 8021cd0:	08021cf5 	.word	0x08021cf5
 8021cd4:	08021d21 	.word	0x08021d21
 8021cd8:	08021d29 	.word	0x08021d29
 8021cdc:	2300      	movs	r3, #0
 8021cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021ce2:	e14a      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021ce4:	2304      	movs	r3, #4
 8021ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021cea:	e146      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021cec:	2308      	movs	r3, #8
 8021cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021cf2:	e142      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021cf4:	2310      	movs	r3, #16
 8021cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021cfa:	e13e      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021cfc:	cfff69f3 	.word	0xcfff69f3
 8021d00:	58000c00 	.word	0x58000c00
 8021d04:	11fff4ff 	.word	0x11fff4ff
 8021d08:	40011000 	.word	0x40011000
 8021d0c:	58024400 	.word	0x58024400
 8021d10:	40004400 	.word	0x40004400
 8021d14:	40004800 	.word	0x40004800
 8021d18:	40004c00 	.word	0x40004c00
 8021d1c:	40005000 	.word	0x40005000
 8021d20:	2320      	movs	r3, #32
 8021d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021d26:	e128      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021d28:	2340      	movs	r3, #64	@ 0x40
 8021d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021d2e:	e124      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021d30:	2380      	movs	r3, #128	@ 0x80
 8021d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021d36:	e120      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021d38:	697b      	ldr	r3, [r7, #20]
 8021d3a:	681b      	ldr	r3, [r3, #0]
 8021d3c:	4acb      	ldr	r2, [pc, #812]	@ (802206c <UART_SetConfig+0x698>)
 8021d3e:	4293      	cmp	r3, r2
 8021d40:	d176      	bne.n	8021e30 <UART_SetConfig+0x45c>
 8021d42:	4bcb      	ldr	r3, [pc, #812]	@ (8022070 <UART_SetConfig+0x69c>)
 8021d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8021d46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8021d4a:	2b28      	cmp	r3, #40	@ 0x28
 8021d4c:	d86c      	bhi.n	8021e28 <UART_SetConfig+0x454>
 8021d4e:	a201      	add	r2, pc, #4	@ (adr r2, 8021d54 <UART_SetConfig+0x380>)
 8021d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021d54:	08021df9 	.word	0x08021df9
 8021d58:	08021e29 	.word	0x08021e29
 8021d5c:	08021e29 	.word	0x08021e29
 8021d60:	08021e29 	.word	0x08021e29
 8021d64:	08021e29 	.word	0x08021e29
 8021d68:	08021e29 	.word	0x08021e29
 8021d6c:	08021e29 	.word	0x08021e29
 8021d70:	08021e29 	.word	0x08021e29
 8021d74:	08021e01 	.word	0x08021e01
 8021d78:	08021e29 	.word	0x08021e29
 8021d7c:	08021e29 	.word	0x08021e29
 8021d80:	08021e29 	.word	0x08021e29
 8021d84:	08021e29 	.word	0x08021e29
 8021d88:	08021e29 	.word	0x08021e29
 8021d8c:	08021e29 	.word	0x08021e29
 8021d90:	08021e29 	.word	0x08021e29
 8021d94:	08021e09 	.word	0x08021e09
 8021d98:	08021e29 	.word	0x08021e29
 8021d9c:	08021e29 	.word	0x08021e29
 8021da0:	08021e29 	.word	0x08021e29
 8021da4:	08021e29 	.word	0x08021e29
 8021da8:	08021e29 	.word	0x08021e29
 8021dac:	08021e29 	.word	0x08021e29
 8021db0:	08021e29 	.word	0x08021e29
 8021db4:	08021e11 	.word	0x08021e11
 8021db8:	08021e29 	.word	0x08021e29
 8021dbc:	08021e29 	.word	0x08021e29
 8021dc0:	08021e29 	.word	0x08021e29
 8021dc4:	08021e29 	.word	0x08021e29
 8021dc8:	08021e29 	.word	0x08021e29
 8021dcc:	08021e29 	.word	0x08021e29
 8021dd0:	08021e29 	.word	0x08021e29
 8021dd4:	08021e19 	.word	0x08021e19
 8021dd8:	08021e29 	.word	0x08021e29
 8021ddc:	08021e29 	.word	0x08021e29
 8021de0:	08021e29 	.word	0x08021e29
 8021de4:	08021e29 	.word	0x08021e29
 8021de8:	08021e29 	.word	0x08021e29
 8021dec:	08021e29 	.word	0x08021e29
 8021df0:	08021e29 	.word	0x08021e29
 8021df4:	08021e21 	.word	0x08021e21
 8021df8:	2301      	movs	r3, #1
 8021dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021dfe:	e0bc      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021e00:	2304      	movs	r3, #4
 8021e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021e06:	e0b8      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021e08:	2308      	movs	r3, #8
 8021e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021e0e:	e0b4      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021e10:	2310      	movs	r3, #16
 8021e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021e16:	e0b0      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021e18:	2320      	movs	r3, #32
 8021e1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021e1e:	e0ac      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021e20:	2340      	movs	r3, #64	@ 0x40
 8021e22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021e26:	e0a8      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021e28:	2380      	movs	r3, #128	@ 0x80
 8021e2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021e2e:	e0a4      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021e30:	697b      	ldr	r3, [r7, #20]
 8021e32:	681b      	ldr	r3, [r3, #0]
 8021e34:	4a8f      	ldr	r2, [pc, #572]	@ (8022074 <UART_SetConfig+0x6a0>)
 8021e36:	4293      	cmp	r3, r2
 8021e38:	d130      	bne.n	8021e9c <UART_SetConfig+0x4c8>
 8021e3a:	4b8d      	ldr	r3, [pc, #564]	@ (8022070 <UART_SetConfig+0x69c>)
 8021e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8021e3e:	f003 0307 	and.w	r3, r3, #7
 8021e42:	2b05      	cmp	r3, #5
 8021e44:	d826      	bhi.n	8021e94 <UART_SetConfig+0x4c0>
 8021e46:	a201      	add	r2, pc, #4	@ (adr r2, 8021e4c <UART_SetConfig+0x478>)
 8021e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021e4c:	08021e65 	.word	0x08021e65
 8021e50:	08021e6d 	.word	0x08021e6d
 8021e54:	08021e75 	.word	0x08021e75
 8021e58:	08021e7d 	.word	0x08021e7d
 8021e5c:	08021e85 	.word	0x08021e85
 8021e60:	08021e8d 	.word	0x08021e8d
 8021e64:	2300      	movs	r3, #0
 8021e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021e6a:	e086      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021e6c:	2304      	movs	r3, #4
 8021e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021e72:	e082      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021e74:	2308      	movs	r3, #8
 8021e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021e7a:	e07e      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021e7c:	2310      	movs	r3, #16
 8021e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021e82:	e07a      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021e84:	2320      	movs	r3, #32
 8021e86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021e8a:	e076      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021e8c:	2340      	movs	r3, #64	@ 0x40
 8021e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021e92:	e072      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021e94:	2380      	movs	r3, #128	@ 0x80
 8021e96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021e9a:	e06e      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021e9c:	697b      	ldr	r3, [r7, #20]
 8021e9e:	681b      	ldr	r3, [r3, #0]
 8021ea0:	4a75      	ldr	r2, [pc, #468]	@ (8022078 <UART_SetConfig+0x6a4>)
 8021ea2:	4293      	cmp	r3, r2
 8021ea4:	d130      	bne.n	8021f08 <UART_SetConfig+0x534>
 8021ea6:	4b72      	ldr	r3, [pc, #456]	@ (8022070 <UART_SetConfig+0x69c>)
 8021ea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8021eaa:	f003 0307 	and.w	r3, r3, #7
 8021eae:	2b05      	cmp	r3, #5
 8021eb0:	d826      	bhi.n	8021f00 <UART_SetConfig+0x52c>
 8021eb2:	a201      	add	r2, pc, #4	@ (adr r2, 8021eb8 <UART_SetConfig+0x4e4>)
 8021eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021eb8:	08021ed1 	.word	0x08021ed1
 8021ebc:	08021ed9 	.word	0x08021ed9
 8021ec0:	08021ee1 	.word	0x08021ee1
 8021ec4:	08021ee9 	.word	0x08021ee9
 8021ec8:	08021ef1 	.word	0x08021ef1
 8021ecc:	08021ef9 	.word	0x08021ef9
 8021ed0:	2300      	movs	r3, #0
 8021ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021ed6:	e050      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021ed8:	2304      	movs	r3, #4
 8021eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021ede:	e04c      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021ee0:	2308      	movs	r3, #8
 8021ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021ee6:	e048      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021ee8:	2310      	movs	r3, #16
 8021eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021eee:	e044      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021ef0:	2320      	movs	r3, #32
 8021ef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021ef6:	e040      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021ef8:	2340      	movs	r3, #64	@ 0x40
 8021efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021efe:	e03c      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021f00:	2380      	movs	r3, #128	@ 0x80
 8021f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021f06:	e038      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021f08:	697b      	ldr	r3, [r7, #20]
 8021f0a:	681b      	ldr	r3, [r3, #0]
 8021f0c:	4a5b      	ldr	r2, [pc, #364]	@ (802207c <UART_SetConfig+0x6a8>)
 8021f0e:	4293      	cmp	r3, r2
 8021f10:	d130      	bne.n	8021f74 <UART_SetConfig+0x5a0>
 8021f12:	4b57      	ldr	r3, [pc, #348]	@ (8022070 <UART_SetConfig+0x69c>)
 8021f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021f16:	f003 0307 	and.w	r3, r3, #7
 8021f1a:	2b05      	cmp	r3, #5
 8021f1c:	d826      	bhi.n	8021f6c <UART_SetConfig+0x598>
 8021f1e:	a201      	add	r2, pc, #4	@ (adr r2, 8021f24 <UART_SetConfig+0x550>)
 8021f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021f24:	08021f3d 	.word	0x08021f3d
 8021f28:	08021f45 	.word	0x08021f45
 8021f2c:	08021f4d 	.word	0x08021f4d
 8021f30:	08021f55 	.word	0x08021f55
 8021f34:	08021f5d 	.word	0x08021f5d
 8021f38:	08021f65 	.word	0x08021f65
 8021f3c:	2302      	movs	r3, #2
 8021f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021f42:	e01a      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021f44:	2304      	movs	r3, #4
 8021f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021f4a:	e016      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021f4c:	2308      	movs	r3, #8
 8021f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021f52:	e012      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021f54:	2310      	movs	r3, #16
 8021f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021f5a:	e00e      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021f5c:	2320      	movs	r3, #32
 8021f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021f62:	e00a      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021f64:	2340      	movs	r3, #64	@ 0x40
 8021f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021f6a:	e006      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021f6c:	2380      	movs	r3, #128	@ 0x80
 8021f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021f72:	e002      	b.n	8021f7a <UART_SetConfig+0x5a6>
 8021f74:	2380      	movs	r3, #128	@ 0x80
 8021f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8021f7a:	697b      	ldr	r3, [r7, #20]
 8021f7c:	681b      	ldr	r3, [r3, #0]
 8021f7e:	4a3f      	ldr	r2, [pc, #252]	@ (802207c <UART_SetConfig+0x6a8>)
 8021f80:	4293      	cmp	r3, r2
 8021f82:	f040 80f8 	bne.w	8022176 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8021f86:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8021f8a:	2b20      	cmp	r3, #32
 8021f8c:	dc46      	bgt.n	802201c <UART_SetConfig+0x648>
 8021f8e:	2b02      	cmp	r3, #2
 8021f90:	f2c0 8082 	blt.w	8022098 <UART_SetConfig+0x6c4>
 8021f94:	3b02      	subs	r3, #2
 8021f96:	2b1e      	cmp	r3, #30
 8021f98:	d87e      	bhi.n	8022098 <UART_SetConfig+0x6c4>
 8021f9a:	a201      	add	r2, pc, #4	@ (adr r2, 8021fa0 <UART_SetConfig+0x5cc>)
 8021f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021fa0:	08022023 	.word	0x08022023
 8021fa4:	08022099 	.word	0x08022099
 8021fa8:	0802202b 	.word	0x0802202b
 8021fac:	08022099 	.word	0x08022099
 8021fb0:	08022099 	.word	0x08022099
 8021fb4:	08022099 	.word	0x08022099
 8021fb8:	0802203b 	.word	0x0802203b
 8021fbc:	08022099 	.word	0x08022099
 8021fc0:	08022099 	.word	0x08022099
 8021fc4:	08022099 	.word	0x08022099
 8021fc8:	08022099 	.word	0x08022099
 8021fcc:	08022099 	.word	0x08022099
 8021fd0:	08022099 	.word	0x08022099
 8021fd4:	08022099 	.word	0x08022099
 8021fd8:	0802204b 	.word	0x0802204b
 8021fdc:	08022099 	.word	0x08022099
 8021fe0:	08022099 	.word	0x08022099
 8021fe4:	08022099 	.word	0x08022099
 8021fe8:	08022099 	.word	0x08022099
 8021fec:	08022099 	.word	0x08022099
 8021ff0:	08022099 	.word	0x08022099
 8021ff4:	08022099 	.word	0x08022099
 8021ff8:	08022099 	.word	0x08022099
 8021ffc:	08022099 	.word	0x08022099
 8022000:	08022099 	.word	0x08022099
 8022004:	08022099 	.word	0x08022099
 8022008:	08022099 	.word	0x08022099
 802200c:	08022099 	.word	0x08022099
 8022010:	08022099 	.word	0x08022099
 8022014:	08022099 	.word	0x08022099
 8022018:	0802208b 	.word	0x0802208b
 802201c:	2b40      	cmp	r3, #64	@ 0x40
 802201e:	d037      	beq.n	8022090 <UART_SetConfig+0x6bc>
 8022020:	e03a      	b.n	8022098 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8022022:	f7fd f8d7 	bl	801f1d4 <HAL_RCCEx_GetD3PCLK1Freq>
 8022026:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8022028:	e03c      	b.n	80220a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 802202a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 802202e:	4618      	mov	r0, r3
 8022030:	f7fd f8e6 	bl	801f200 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8022034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8022036:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8022038:	e034      	b.n	80220a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 802203a:	f107 0318 	add.w	r3, r7, #24
 802203e:	4618      	mov	r0, r3
 8022040:	f7fd fa32 	bl	801f4a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8022044:	69fb      	ldr	r3, [r7, #28]
 8022046:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8022048:	e02c      	b.n	80220a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 802204a:	4b09      	ldr	r3, [pc, #36]	@ (8022070 <UART_SetConfig+0x69c>)
 802204c:	681b      	ldr	r3, [r3, #0]
 802204e:	f003 0320 	and.w	r3, r3, #32
 8022052:	2b00      	cmp	r3, #0
 8022054:	d016      	beq.n	8022084 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8022056:	4b06      	ldr	r3, [pc, #24]	@ (8022070 <UART_SetConfig+0x69c>)
 8022058:	681b      	ldr	r3, [r3, #0]
 802205a:	08db      	lsrs	r3, r3, #3
 802205c:	f003 0303 	and.w	r3, r3, #3
 8022060:	4a07      	ldr	r2, [pc, #28]	@ (8022080 <UART_SetConfig+0x6ac>)
 8022062:	fa22 f303 	lsr.w	r3, r2, r3
 8022066:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8022068:	e01c      	b.n	80220a4 <UART_SetConfig+0x6d0>
 802206a:	bf00      	nop
 802206c:	40011400 	.word	0x40011400
 8022070:	58024400 	.word	0x58024400
 8022074:	40007800 	.word	0x40007800
 8022078:	40007c00 	.word	0x40007c00
 802207c:	58000c00 	.word	0x58000c00
 8022080:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8022084:	4b9d      	ldr	r3, [pc, #628]	@ (80222fc <UART_SetConfig+0x928>)
 8022086:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8022088:	e00c      	b.n	80220a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 802208a:	4b9d      	ldr	r3, [pc, #628]	@ (8022300 <UART_SetConfig+0x92c>)
 802208c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802208e:	e009      	b.n	80220a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8022090:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8022094:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8022096:	e005      	b.n	80220a4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8022098:	2300      	movs	r3, #0
 802209a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 802209c:	2301      	movs	r3, #1
 802209e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80220a2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80220a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80220a6:	2b00      	cmp	r3, #0
 80220a8:	f000 81de 	beq.w	8022468 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80220ac:	697b      	ldr	r3, [r7, #20]
 80220ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80220b0:	4a94      	ldr	r2, [pc, #592]	@ (8022304 <UART_SetConfig+0x930>)
 80220b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80220b6:	461a      	mov	r2, r3
 80220b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80220ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80220be:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80220c0:	697b      	ldr	r3, [r7, #20]
 80220c2:	685a      	ldr	r2, [r3, #4]
 80220c4:	4613      	mov	r3, r2
 80220c6:	005b      	lsls	r3, r3, #1
 80220c8:	4413      	add	r3, r2
 80220ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80220cc:	429a      	cmp	r2, r3
 80220ce:	d305      	bcc.n	80220dc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80220d0:	697b      	ldr	r3, [r7, #20]
 80220d2:	685b      	ldr	r3, [r3, #4]
 80220d4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80220d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80220d8:	429a      	cmp	r2, r3
 80220da:	d903      	bls.n	80220e4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80220dc:	2301      	movs	r3, #1
 80220de:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80220e2:	e1c1      	b.n	8022468 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80220e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80220e6:	2200      	movs	r2, #0
 80220e8:	60bb      	str	r3, [r7, #8]
 80220ea:	60fa      	str	r2, [r7, #12]
 80220ec:	697b      	ldr	r3, [r7, #20]
 80220ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80220f0:	4a84      	ldr	r2, [pc, #528]	@ (8022304 <UART_SetConfig+0x930>)
 80220f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80220f6:	b29b      	uxth	r3, r3
 80220f8:	2200      	movs	r2, #0
 80220fa:	603b      	str	r3, [r7, #0]
 80220fc:	607a      	str	r2, [r7, #4]
 80220fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8022102:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8022106:	f7de fc1d 	bl	8000944 <__aeabi_uldivmod>
 802210a:	4602      	mov	r2, r0
 802210c:	460b      	mov	r3, r1
 802210e:	4610      	mov	r0, r2
 8022110:	4619      	mov	r1, r3
 8022112:	f04f 0200 	mov.w	r2, #0
 8022116:	f04f 0300 	mov.w	r3, #0
 802211a:	020b      	lsls	r3, r1, #8
 802211c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8022120:	0202      	lsls	r2, r0, #8
 8022122:	6979      	ldr	r1, [r7, #20]
 8022124:	6849      	ldr	r1, [r1, #4]
 8022126:	0849      	lsrs	r1, r1, #1
 8022128:	2000      	movs	r0, #0
 802212a:	460c      	mov	r4, r1
 802212c:	4605      	mov	r5, r0
 802212e:	eb12 0804 	adds.w	r8, r2, r4
 8022132:	eb43 0905 	adc.w	r9, r3, r5
 8022136:	697b      	ldr	r3, [r7, #20]
 8022138:	685b      	ldr	r3, [r3, #4]
 802213a:	2200      	movs	r2, #0
 802213c:	469a      	mov	sl, r3
 802213e:	4693      	mov	fp, r2
 8022140:	4652      	mov	r2, sl
 8022142:	465b      	mov	r3, fp
 8022144:	4640      	mov	r0, r8
 8022146:	4649      	mov	r1, r9
 8022148:	f7de fbfc 	bl	8000944 <__aeabi_uldivmod>
 802214c:	4602      	mov	r2, r0
 802214e:	460b      	mov	r3, r1
 8022150:	4613      	mov	r3, r2
 8022152:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8022154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8022156:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 802215a:	d308      	bcc.n	802216e <UART_SetConfig+0x79a>
 802215c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802215e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8022162:	d204      	bcs.n	802216e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8022164:	697b      	ldr	r3, [r7, #20]
 8022166:	681b      	ldr	r3, [r3, #0]
 8022168:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 802216a:	60da      	str	r2, [r3, #12]
 802216c:	e17c      	b.n	8022468 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 802216e:	2301      	movs	r3, #1
 8022170:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8022174:	e178      	b.n	8022468 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8022176:	697b      	ldr	r3, [r7, #20]
 8022178:	69db      	ldr	r3, [r3, #28]
 802217a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 802217e:	f040 80c5 	bne.w	802230c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8022182:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8022186:	2b20      	cmp	r3, #32
 8022188:	dc48      	bgt.n	802221c <UART_SetConfig+0x848>
 802218a:	2b00      	cmp	r3, #0
 802218c:	db7b      	blt.n	8022286 <UART_SetConfig+0x8b2>
 802218e:	2b20      	cmp	r3, #32
 8022190:	d879      	bhi.n	8022286 <UART_SetConfig+0x8b2>
 8022192:	a201      	add	r2, pc, #4	@ (adr r2, 8022198 <UART_SetConfig+0x7c4>)
 8022194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022198:	08022223 	.word	0x08022223
 802219c:	0802222b 	.word	0x0802222b
 80221a0:	08022287 	.word	0x08022287
 80221a4:	08022287 	.word	0x08022287
 80221a8:	08022233 	.word	0x08022233
 80221ac:	08022287 	.word	0x08022287
 80221b0:	08022287 	.word	0x08022287
 80221b4:	08022287 	.word	0x08022287
 80221b8:	08022243 	.word	0x08022243
 80221bc:	08022287 	.word	0x08022287
 80221c0:	08022287 	.word	0x08022287
 80221c4:	08022287 	.word	0x08022287
 80221c8:	08022287 	.word	0x08022287
 80221cc:	08022287 	.word	0x08022287
 80221d0:	08022287 	.word	0x08022287
 80221d4:	08022287 	.word	0x08022287
 80221d8:	08022253 	.word	0x08022253
 80221dc:	08022287 	.word	0x08022287
 80221e0:	08022287 	.word	0x08022287
 80221e4:	08022287 	.word	0x08022287
 80221e8:	08022287 	.word	0x08022287
 80221ec:	08022287 	.word	0x08022287
 80221f0:	08022287 	.word	0x08022287
 80221f4:	08022287 	.word	0x08022287
 80221f8:	08022287 	.word	0x08022287
 80221fc:	08022287 	.word	0x08022287
 8022200:	08022287 	.word	0x08022287
 8022204:	08022287 	.word	0x08022287
 8022208:	08022287 	.word	0x08022287
 802220c:	08022287 	.word	0x08022287
 8022210:	08022287 	.word	0x08022287
 8022214:	08022287 	.word	0x08022287
 8022218:	08022279 	.word	0x08022279
 802221c:	2b40      	cmp	r3, #64	@ 0x40
 802221e:	d02e      	beq.n	802227e <UART_SetConfig+0x8aa>
 8022220:	e031      	b.n	8022286 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8022222:	f7fb f821 	bl	801d268 <HAL_RCC_GetPCLK1Freq>
 8022226:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8022228:	e033      	b.n	8022292 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 802222a:	f7fb f833 	bl	801d294 <HAL_RCC_GetPCLK2Freq>
 802222e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8022230:	e02f      	b.n	8022292 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8022232:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8022236:	4618      	mov	r0, r3
 8022238:	f7fc ffe2 	bl	801f200 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 802223c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802223e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8022240:	e027      	b.n	8022292 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8022242:	f107 0318 	add.w	r3, r7, #24
 8022246:	4618      	mov	r0, r3
 8022248:	f7fd f92e 	bl	801f4a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 802224c:	69fb      	ldr	r3, [r7, #28]
 802224e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8022250:	e01f      	b.n	8022292 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8022252:	4b2d      	ldr	r3, [pc, #180]	@ (8022308 <UART_SetConfig+0x934>)
 8022254:	681b      	ldr	r3, [r3, #0]
 8022256:	f003 0320 	and.w	r3, r3, #32
 802225a:	2b00      	cmp	r3, #0
 802225c:	d009      	beq.n	8022272 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 802225e:	4b2a      	ldr	r3, [pc, #168]	@ (8022308 <UART_SetConfig+0x934>)
 8022260:	681b      	ldr	r3, [r3, #0]
 8022262:	08db      	lsrs	r3, r3, #3
 8022264:	f003 0303 	and.w	r3, r3, #3
 8022268:	4a24      	ldr	r2, [pc, #144]	@ (80222fc <UART_SetConfig+0x928>)
 802226a:	fa22 f303 	lsr.w	r3, r2, r3
 802226e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8022270:	e00f      	b.n	8022292 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8022272:	4b22      	ldr	r3, [pc, #136]	@ (80222fc <UART_SetConfig+0x928>)
 8022274:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8022276:	e00c      	b.n	8022292 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8022278:	4b21      	ldr	r3, [pc, #132]	@ (8022300 <UART_SetConfig+0x92c>)
 802227a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802227c:	e009      	b.n	8022292 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 802227e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8022282:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8022284:	e005      	b.n	8022292 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8022286:	2300      	movs	r3, #0
 8022288:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 802228a:	2301      	movs	r3, #1
 802228c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8022290:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8022292:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8022294:	2b00      	cmp	r3, #0
 8022296:	f000 80e7 	beq.w	8022468 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 802229a:	697b      	ldr	r3, [r7, #20]
 802229c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802229e:	4a19      	ldr	r2, [pc, #100]	@ (8022304 <UART_SetConfig+0x930>)
 80222a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80222a4:	461a      	mov	r2, r3
 80222a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80222a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80222ac:	005a      	lsls	r2, r3, #1
 80222ae:	697b      	ldr	r3, [r7, #20]
 80222b0:	685b      	ldr	r3, [r3, #4]
 80222b2:	085b      	lsrs	r3, r3, #1
 80222b4:	441a      	add	r2, r3
 80222b6:	697b      	ldr	r3, [r7, #20]
 80222b8:	685b      	ldr	r3, [r3, #4]
 80222ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80222be:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80222c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80222c2:	2b0f      	cmp	r3, #15
 80222c4:	d916      	bls.n	80222f4 <UART_SetConfig+0x920>
 80222c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80222c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80222cc:	d212      	bcs.n	80222f4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80222ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80222d0:	b29b      	uxth	r3, r3
 80222d2:	f023 030f 	bic.w	r3, r3, #15
 80222d6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80222d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80222da:	085b      	lsrs	r3, r3, #1
 80222dc:	b29b      	uxth	r3, r3
 80222de:	f003 0307 	and.w	r3, r3, #7
 80222e2:	b29a      	uxth	r2, r3
 80222e4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80222e6:	4313      	orrs	r3, r2
 80222e8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80222ea:	697b      	ldr	r3, [r7, #20]
 80222ec:	681b      	ldr	r3, [r3, #0]
 80222ee:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80222f0:	60da      	str	r2, [r3, #12]
 80222f2:	e0b9      	b.n	8022468 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80222f4:	2301      	movs	r3, #1
 80222f6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80222fa:	e0b5      	b.n	8022468 <UART_SetConfig+0xa94>
 80222fc:	03d09000 	.word	0x03d09000
 8022300:	003d0900 	.word	0x003d0900
 8022304:	08028c60 	.word	0x08028c60
 8022308:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 802230c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8022310:	2b20      	cmp	r3, #32
 8022312:	dc49      	bgt.n	80223a8 <UART_SetConfig+0x9d4>
 8022314:	2b00      	cmp	r3, #0
 8022316:	db7c      	blt.n	8022412 <UART_SetConfig+0xa3e>
 8022318:	2b20      	cmp	r3, #32
 802231a:	d87a      	bhi.n	8022412 <UART_SetConfig+0xa3e>
 802231c:	a201      	add	r2, pc, #4	@ (adr r2, 8022324 <UART_SetConfig+0x950>)
 802231e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022322:	bf00      	nop
 8022324:	080223af 	.word	0x080223af
 8022328:	080223b7 	.word	0x080223b7
 802232c:	08022413 	.word	0x08022413
 8022330:	08022413 	.word	0x08022413
 8022334:	080223bf 	.word	0x080223bf
 8022338:	08022413 	.word	0x08022413
 802233c:	08022413 	.word	0x08022413
 8022340:	08022413 	.word	0x08022413
 8022344:	080223cf 	.word	0x080223cf
 8022348:	08022413 	.word	0x08022413
 802234c:	08022413 	.word	0x08022413
 8022350:	08022413 	.word	0x08022413
 8022354:	08022413 	.word	0x08022413
 8022358:	08022413 	.word	0x08022413
 802235c:	08022413 	.word	0x08022413
 8022360:	08022413 	.word	0x08022413
 8022364:	080223df 	.word	0x080223df
 8022368:	08022413 	.word	0x08022413
 802236c:	08022413 	.word	0x08022413
 8022370:	08022413 	.word	0x08022413
 8022374:	08022413 	.word	0x08022413
 8022378:	08022413 	.word	0x08022413
 802237c:	08022413 	.word	0x08022413
 8022380:	08022413 	.word	0x08022413
 8022384:	08022413 	.word	0x08022413
 8022388:	08022413 	.word	0x08022413
 802238c:	08022413 	.word	0x08022413
 8022390:	08022413 	.word	0x08022413
 8022394:	08022413 	.word	0x08022413
 8022398:	08022413 	.word	0x08022413
 802239c:	08022413 	.word	0x08022413
 80223a0:	08022413 	.word	0x08022413
 80223a4:	08022405 	.word	0x08022405
 80223a8:	2b40      	cmp	r3, #64	@ 0x40
 80223aa:	d02e      	beq.n	802240a <UART_SetConfig+0xa36>
 80223ac:	e031      	b.n	8022412 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80223ae:	f7fa ff5b 	bl	801d268 <HAL_RCC_GetPCLK1Freq>
 80223b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80223b4:	e033      	b.n	802241e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80223b6:	f7fa ff6d 	bl	801d294 <HAL_RCC_GetPCLK2Freq>
 80223ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80223bc:	e02f      	b.n	802241e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80223be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80223c2:	4618      	mov	r0, r3
 80223c4:	f7fc ff1c 	bl	801f200 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80223c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80223ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80223cc:	e027      	b.n	802241e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80223ce:	f107 0318 	add.w	r3, r7, #24
 80223d2:	4618      	mov	r0, r3
 80223d4:	f7fd f868 	bl	801f4a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80223d8:	69fb      	ldr	r3, [r7, #28]
 80223da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80223dc:	e01f      	b.n	802241e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80223de:	4b2d      	ldr	r3, [pc, #180]	@ (8022494 <UART_SetConfig+0xac0>)
 80223e0:	681b      	ldr	r3, [r3, #0]
 80223e2:	f003 0320 	and.w	r3, r3, #32
 80223e6:	2b00      	cmp	r3, #0
 80223e8:	d009      	beq.n	80223fe <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80223ea:	4b2a      	ldr	r3, [pc, #168]	@ (8022494 <UART_SetConfig+0xac0>)
 80223ec:	681b      	ldr	r3, [r3, #0]
 80223ee:	08db      	lsrs	r3, r3, #3
 80223f0:	f003 0303 	and.w	r3, r3, #3
 80223f4:	4a28      	ldr	r2, [pc, #160]	@ (8022498 <UART_SetConfig+0xac4>)
 80223f6:	fa22 f303 	lsr.w	r3, r2, r3
 80223fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80223fc:	e00f      	b.n	802241e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80223fe:	4b26      	ldr	r3, [pc, #152]	@ (8022498 <UART_SetConfig+0xac4>)
 8022400:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8022402:	e00c      	b.n	802241e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8022404:	4b25      	ldr	r3, [pc, #148]	@ (802249c <UART_SetConfig+0xac8>)
 8022406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8022408:	e009      	b.n	802241e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 802240a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 802240e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8022410:	e005      	b.n	802241e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8022412:	2300      	movs	r3, #0
 8022414:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8022416:	2301      	movs	r3, #1
 8022418:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 802241c:	bf00      	nop
    }

    if (pclk != 0U)
 802241e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8022420:	2b00      	cmp	r3, #0
 8022422:	d021      	beq.n	8022468 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8022424:	697b      	ldr	r3, [r7, #20]
 8022426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8022428:	4a1d      	ldr	r2, [pc, #116]	@ (80224a0 <UART_SetConfig+0xacc>)
 802242a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802242e:	461a      	mov	r2, r3
 8022430:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8022432:	fbb3 f2f2 	udiv	r2, r3, r2
 8022436:	697b      	ldr	r3, [r7, #20]
 8022438:	685b      	ldr	r3, [r3, #4]
 802243a:	085b      	lsrs	r3, r3, #1
 802243c:	441a      	add	r2, r3
 802243e:	697b      	ldr	r3, [r7, #20]
 8022440:	685b      	ldr	r3, [r3, #4]
 8022442:	fbb2 f3f3 	udiv	r3, r2, r3
 8022446:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8022448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802244a:	2b0f      	cmp	r3, #15
 802244c:	d909      	bls.n	8022462 <UART_SetConfig+0xa8e>
 802244e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8022450:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8022454:	d205      	bcs.n	8022462 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8022456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8022458:	b29a      	uxth	r2, r3
 802245a:	697b      	ldr	r3, [r7, #20]
 802245c:	681b      	ldr	r3, [r3, #0]
 802245e:	60da      	str	r2, [r3, #12]
 8022460:	e002      	b.n	8022468 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8022462:	2301      	movs	r3, #1
 8022464:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8022468:	697b      	ldr	r3, [r7, #20]
 802246a:	2201      	movs	r2, #1
 802246c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8022470:	697b      	ldr	r3, [r7, #20]
 8022472:	2201      	movs	r2, #1
 8022474:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8022478:	697b      	ldr	r3, [r7, #20]
 802247a:	2200      	movs	r2, #0
 802247c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 802247e:	697b      	ldr	r3, [r7, #20]
 8022480:	2200      	movs	r2, #0
 8022482:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8022484:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8022488:	4618      	mov	r0, r3
 802248a:	3748      	adds	r7, #72	@ 0x48
 802248c:	46bd      	mov	sp, r7
 802248e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8022492:	bf00      	nop
 8022494:	58024400 	.word	0x58024400
 8022498:	03d09000 	.word	0x03d09000
 802249c:	003d0900 	.word	0x003d0900
 80224a0:	08028c60 	.word	0x08028c60

080224a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80224a4:	b480      	push	{r7}
 80224a6:	b083      	sub	sp, #12
 80224a8:	af00      	add	r7, sp, #0
 80224aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80224ac:	687b      	ldr	r3, [r7, #4]
 80224ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80224b0:	f003 0308 	and.w	r3, r3, #8
 80224b4:	2b00      	cmp	r3, #0
 80224b6:	d00a      	beq.n	80224ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80224b8:	687b      	ldr	r3, [r7, #4]
 80224ba:	681b      	ldr	r3, [r3, #0]
 80224bc:	685b      	ldr	r3, [r3, #4]
 80224be:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80224c2:	687b      	ldr	r3, [r7, #4]
 80224c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80224c6:	687b      	ldr	r3, [r7, #4]
 80224c8:	681b      	ldr	r3, [r3, #0]
 80224ca:	430a      	orrs	r2, r1
 80224cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80224ce:	687b      	ldr	r3, [r7, #4]
 80224d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80224d2:	f003 0301 	and.w	r3, r3, #1
 80224d6:	2b00      	cmp	r3, #0
 80224d8:	d00a      	beq.n	80224f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80224da:	687b      	ldr	r3, [r7, #4]
 80224dc:	681b      	ldr	r3, [r3, #0]
 80224de:	685b      	ldr	r3, [r3, #4]
 80224e0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80224e4:	687b      	ldr	r3, [r7, #4]
 80224e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80224e8:	687b      	ldr	r3, [r7, #4]
 80224ea:	681b      	ldr	r3, [r3, #0]
 80224ec:	430a      	orrs	r2, r1
 80224ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80224f0:	687b      	ldr	r3, [r7, #4]
 80224f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80224f4:	f003 0302 	and.w	r3, r3, #2
 80224f8:	2b00      	cmp	r3, #0
 80224fa:	d00a      	beq.n	8022512 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80224fc:	687b      	ldr	r3, [r7, #4]
 80224fe:	681b      	ldr	r3, [r3, #0]
 8022500:	685b      	ldr	r3, [r3, #4]
 8022502:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8022506:	687b      	ldr	r3, [r7, #4]
 8022508:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 802250a:	687b      	ldr	r3, [r7, #4]
 802250c:	681b      	ldr	r3, [r3, #0]
 802250e:	430a      	orrs	r2, r1
 8022510:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8022512:	687b      	ldr	r3, [r7, #4]
 8022514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022516:	f003 0304 	and.w	r3, r3, #4
 802251a:	2b00      	cmp	r3, #0
 802251c:	d00a      	beq.n	8022534 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 802251e:	687b      	ldr	r3, [r7, #4]
 8022520:	681b      	ldr	r3, [r3, #0]
 8022522:	685b      	ldr	r3, [r3, #4]
 8022524:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8022528:	687b      	ldr	r3, [r7, #4]
 802252a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 802252c:	687b      	ldr	r3, [r7, #4]
 802252e:	681b      	ldr	r3, [r3, #0]
 8022530:	430a      	orrs	r2, r1
 8022532:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8022534:	687b      	ldr	r3, [r7, #4]
 8022536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022538:	f003 0310 	and.w	r3, r3, #16
 802253c:	2b00      	cmp	r3, #0
 802253e:	d00a      	beq.n	8022556 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8022540:	687b      	ldr	r3, [r7, #4]
 8022542:	681b      	ldr	r3, [r3, #0]
 8022544:	689b      	ldr	r3, [r3, #8]
 8022546:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 802254a:	687b      	ldr	r3, [r7, #4]
 802254c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 802254e:	687b      	ldr	r3, [r7, #4]
 8022550:	681b      	ldr	r3, [r3, #0]
 8022552:	430a      	orrs	r2, r1
 8022554:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8022556:	687b      	ldr	r3, [r7, #4]
 8022558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802255a:	f003 0320 	and.w	r3, r3, #32
 802255e:	2b00      	cmp	r3, #0
 8022560:	d00a      	beq.n	8022578 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8022562:	687b      	ldr	r3, [r7, #4]
 8022564:	681b      	ldr	r3, [r3, #0]
 8022566:	689b      	ldr	r3, [r3, #8]
 8022568:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 802256c:	687b      	ldr	r3, [r7, #4]
 802256e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8022570:	687b      	ldr	r3, [r7, #4]
 8022572:	681b      	ldr	r3, [r3, #0]
 8022574:	430a      	orrs	r2, r1
 8022576:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8022578:	687b      	ldr	r3, [r7, #4]
 802257a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802257c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8022580:	2b00      	cmp	r3, #0
 8022582:	d01a      	beq.n	80225ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8022584:	687b      	ldr	r3, [r7, #4]
 8022586:	681b      	ldr	r3, [r3, #0]
 8022588:	685b      	ldr	r3, [r3, #4]
 802258a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 802258e:	687b      	ldr	r3, [r7, #4]
 8022590:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8022592:	687b      	ldr	r3, [r7, #4]
 8022594:	681b      	ldr	r3, [r3, #0]
 8022596:	430a      	orrs	r2, r1
 8022598:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 802259a:	687b      	ldr	r3, [r7, #4]
 802259c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802259e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80225a2:	d10a      	bne.n	80225ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80225a4:	687b      	ldr	r3, [r7, #4]
 80225a6:	681b      	ldr	r3, [r3, #0]
 80225a8:	685b      	ldr	r3, [r3, #4]
 80225aa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80225ae:	687b      	ldr	r3, [r7, #4]
 80225b0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80225b2:	687b      	ldr	r3, [r7, #4]
 80225b4:	681b      	ldr	r3, [r3, #0]
 80225b6:	430a      	orrs	r2, r1
 80225b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80225ba:	687b      	ldr	r3, [r7, #4]
 80225bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80225be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80225c2:	2b00      	cmp	r3, #0
 80225c4:	d00a      	beq.n	80225dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80225c6:	687b      	ldr	r3, [r7, #4]
 80225c8:	681b      	ldr	r3, [r3, #0]
 80225ca:	685b      	ldr	r3, [r3, #4]
 80225cc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80225d0:	687b      	ldr	r3, [r7, #4]
 80225d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80225d4:	687b      	ldr	r3, [r7, #4]
 80225d6:	681b      	ldr	r3, [r3, #0]
 80225d8:	430a      	orrs	r2, r1
 80225da:	605a      	str	r2, [r3, #4]
  }
}
 80225dc:	bf00      	nop
 80225de:	370c      	adds	r7, #12
 80225e0:	46bd      	mov	sp, r7
 80225e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80225e6:	4770      	bx	lr

080225e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80225e8:	b580      	push	{r7, lr}
 80225ea:	b098      	sub	sp, #96	@ 0x60
 80225ec:	af02      	add	r7, sp, #8
 80225ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80225f0:	687b      	ldr	r3, [r7, #4]
 80225f2:	2200      	movs	r2, #0
 80225f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80225f8:	f7f6 ff42 	bl	8019480 <HAL_GetTick>
 80225fc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80225fe:	687b      	ldr	r3, [r7, #4]
 8022600:	681b      	ldr	r3, [r3, #0]
 8022602:	681b      	ldr	r3, [r3, #0]
 8022604:	f003 0308 	and.w	r3, r3, #8
 8022608:	2b08      	cmp	r3, #8
 802260a:	d12f      	bne.n	802266c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 802260c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8022610:	9300      	str	r3, [sp, #0]
 8022612:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8022614:	2200      	movs	r2, #0
 8022616:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 802261a:	6878      	ldr	r0, [r7, #4]
 802261c:	f000 f88e 	bl	802273c <UART_WaitOnFlagUntilTimeout>
 8022620:	4603      	mov	r3, r0
 8022622:	2b00      	cmp	r3, #0
 8022624:	d022      	beq.n	802266c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8022626:	687b      	ldr	r3, [r7, #4]
 8022628:	681b      	ldr	r3, [r3, #0]
 802262a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802262c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802262e:	e853 3f00 	ldrex	r3, [r3]
 8022632:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8022634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8022636:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 802263a:	653b      	str	r3, [r7, #80]	@ 0x50
 802263c:	687b      	ldr	r3, [r7, #4]
 802263e:	681b      	ldr	r3, [r3, #0]
 8022640:	461a      	mov	r2, r3
 8022642:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8022644:	647b      	str	r3, [r7, #68]	@ 0x44
 8022646:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022648:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 802264a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 802264c:	e841 2300 	strex	r3, r2, [r1]
 8022650:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8022652:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8022654:	2b00      	cmp	r3, #0
 8022656:	d1e6      	bne.n	8022626 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8022658:	687b      	ldr	r3, [r7, #4]
 802265a:	2220      	movs	r2, #32
 802265c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8022660:	687b      	ldr	r3, [r7, #4]
 8022662:	2200      	movs	r2, #0
 8022664:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8022668:	2303      	movs	r3, #3
 802266a:	e063      	b.n	8022734 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 802266c:	687b      	ldr	r3, [r7, #4]
 802266e:	681b      	ldr	r3, [r3, #0]
 8022670:	681b      	ldr	r3, [r3, #0]
 8022672:	f003 0304 	and.w	r3, r3, #4
 8022676:	2b04      	cmp	r3, #4
 8022678:	d149      	bne.n	802270e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 802267a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 802267e:	9300      	str	r3, [sp, #0]
 8022680:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8022682:	2200      	movs	r2, #0
 8022684:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8022688:	6878      	ldr	r0, [r7, #4]
 802268a:	f000 f857 	bl	802273c <UART_WaitOnFlagUntilTimeout>
 802268e:	4603      	mov	r3, r0
 8022690:	2b00      	cmp	r3, #0
 8022692:	d03c      	beq.n	802270e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8022694:	687b      	ldr	r3, [r7, #4]
 8022696:	681b      	ldr	r3, [r3, #0]
 8022698:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802269a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802269c:	e853 3f00 	ldrex	r3, [r3]
 80226a0:	623b      	str	r3, [r7, #32]
   return(result);
 80226a2:	6a3b      	ldr	r3, [r7, #32]
 80226a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80226a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80226aa:	687b      	ldr	r3, [r7, #4]
 80226ac:	681b      	ldr	r3, [r3, #0]
 80226ae:	461a      	mov	r2, r3
 80226b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80226b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80226b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80226b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80226b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80226ba:	e841 2300 	strex	r3, r2, [r1]
 80226be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80226c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80226c2:	2b00      	cmp	r3, #0
 80226c4:	d1e6      	bne.n	8022694 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80226c6:	687b      	ldr	r3, [r7, #4]
 80226c8:	681b      	ldr	r3, [r3, #0]
 80226ca:	3308      	adds	r3, #8
 80226cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80226ce:	693b      	ldr	r3, [r7, #16]
 80226d0:	e853 3f00 	ldrex	r3, [r3]
 80226d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80226d6:	68fb      	ldr	r3, [r7, #12]
 80226d8:	f023 0301 	bic.w	r3, r3, #1
 80226dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80226de:	687b      	ldr	r3, [r7, #4]
 80226e0:	681b      	ldr	r3, [r3, #0]
 80226e2:	3308      	adds	r3, #8
 80226e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80226e6:	61fa      	str	r2, [r7, #28]
 80226e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80226ea:	69b9      	ldr	r1, [r7, #24]
 80226ec:	69fa      	ldr	r2, [r7, #28]
 80226ee:	e841 2300 	strex	r3, r2, [r1]
 80226f2:	617b      	str	r3, [r7, #20]
   return(result);
 80226f4:	697b      	ldr	r3, [r7, #20]
 80226f6:	2b00      	cmp	r3, #0
 80226f8:	d1e5      	bne.n	80226c6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80226fa:	687b      	ldr	r3, [r7, #4]
 80226fc:	2220      	movs	r2, #32
 80226fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8022702:	687b      	ldr	r3, [r7, #4]
 8022704:	2200      	movs	r2, #0
 8022706:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 802270a:	2303      	movs	r3, #3
 802270c:	e012      	b.n	8022734 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 802270e:	687b      	ldr	r3, [r7, #4]
 8022710:	2220      	movs	r2, #32
 8022712:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8022716:	687b      	ldr	r3, [r7, #4]
 8022718:	2220      	movs	r2, #32
 802271a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802271e:	687b      	ldr	r3, [r7, #4]
 8022720:	2200      	movs	r2, #0
 8022722:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8022724:	687b      	ldr	r3, [r7, #4]
 8022726:	2200      	movs	r2, #0
 8022728:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 802272a:	687b      	ldr	r3, [r7, #4]
 802272c:	2200      	movs	r2, #0
 802272e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8022732:	2300      	movs	r3, #0
}
 8022734:	4618      	mov	r0, r3
 8022736:	3758      	adds	r7, #88	@ 0x58
 8022738:	46bd      	mov	sp, r7
 802273a:	bd80      	pop	{r7, pc}

0802273c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 802273c:	b580      	push	{r7, lr}
 802273e:	b084      	sub	sp, #16
 8022740:	af00      	add	r7, sp, #0
 8022742:	60f8      	str	r0, [r7, #12]
 8022744:	60b9      	str	r1, [r7, #8]
 8022746:	603b      	str	r3, [r7, #0]
 8022748:	4613      	mov	r3, r2
 802274a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802274c:	e04f      	b.n	80227ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802274e:	69bb      	ldr	r3, [r7, #24]
 8022750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022754:	d04b      	beq.n	80227ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8022756:	f7f6 fe93 	bl	8019480 <HAL_GetTick>
 802275a:	4602      	mov	r2, r0
 802275c:	683b      	ldr	r3, [r7, #0]
 802275e:	1ad3      	subs	r3, r2, r3
 8022760:	69ba      	ldr	r2, [r7, #24]
 8022762:	429a      	cmp	r2, r3
 8022764:	d302      	bcc.n	802276c <UART_WaitOnFlagUntilTimeout+0x30>
 8022766:	69bb      	ldr	r3, [r7, #24]
 8022768:	2b00      	cmp	r3, #0
 802276a:	d101      	bne.n	8022770 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 802276c:	2303      	movs	r3, #3
 802276e:	e04e      	b.n	802280e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8022770:	68fb      	ldr	r3, [r7, #12]
 8022772:	681b      	ldr	r3, [r3, #0]
 8022774:	681b      	ldr	r3, [r3, #0]
 8022776:	f003 0304 	and.w	r3, r3, #4
 802277a:	2b00      	cmp	r3, #0
 802277c:	d037      	beq.n	80227ee <UART_WaitOnFlagUntilTimeout+0xb2>
 802277e:	68bb      	ldr	r3, [r7, #8]
 8022780:	2b80      	cmp	r3, #128	@ 0x80
 8022782:	d034      	beq.n	80227ee <UART_WaitOnFlagUntilTimeout+0xb2>
 8022784:	68bb      	ldr	r3, [r7, #8]
 8022786:	2b40      	cmp	r3, #64	@ 0x40
 8022788:	d031      	beq.n	80227ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 802278a:	68fb      	ldr	r3, [r7, #12]
 802278c:	681b      	ldr	r3, [r3, #0]
 802278e:	69db      	ldr	r3, [r3, #28]
 8022790:	f003 0308 	and.w	r3, r3, #8
 8022794:	2b08      	cmp	r3, #8
 8022796:	d110      	bne.n	80227ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8022798:	68fb      	ldr	r3, [r7, #12]
 802279a:	681b      	ldr	r3, [r3, #0]
 802279c:	2208      	movs	r2, #8
 802279e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80227a0:	68f8      	ldr	r0, [r7, #12]
 80227a2:	f000 f839 	bl	8022818 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80227a6:	68fb      	ldr	r3, [r7, #12]
 80227a8:	2208      	movs	r2, #8
 80227aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80227ae:	68fb      	ldr	r3, [r7, #12]
 80227b0:	2200      	movs	r2, #0
 80227b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80227b6:	2301      	movs	r3, #1
 80227b8:	e029      	b.n	802280e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80227ba:	68fb      	ldr	r3, [r7, #12]
 80227bc:	681b      	ldr	r3, [r3, #0]
 80227be:	69db      	ldr	r3, [r3, #28]
 80227c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80227c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80227c8:	d111      	bne.n	80227ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80227ca:	68fb      	ldr	r3, [r7, #12]
 80227cc:	681b      	ldr	r3, [r3, #0]
 80227ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80227d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80227d4:	68f8      	ldr	r0, [r7, #12]
 80227d6:	f000 f81f 	bl	8022818 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80227da:	68fb      	ldr	r3, [r7, #12]
 80227dc:	2220      	movs	r2, #32
 80227de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80227e2:	68fb      	ldr	r3, [r7, #12]
 80227e4:	2200      	movs	r2, #0
 80227e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80227ea:	2303      	movs	r3, #3
 80227ec:	e00f      	b.n	802280e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80227ee:	68fb      	ldr	r3, [r7, #12]
 80227f0:	681b      	ldr	r3, [r3, #0]
 80227f2:	69da      	ldr	r2, [r3, #28]
 80227f4:	68bb      	ldr	r3, [r7, #8]
 80227f6:	4013      	ands	r3, r2
 80227f8:	68ba      	ldr	r2, [r7, #8]
 80227fa:	429a      	cmp	r2, r3
 80227fc:	bf0c      	ite	eq
 80227fe:	2301      	moveq	r3, #1
 8022800:	2300      	movne	r3, #0
 8022802:	b2db      	uxtb	r3, r3
 8022804:	461a      	mov	r2, r3
 8022806:	79fb      	ldrb	r3, [r7, #7]
 8022808:	429a      	cmp	r2, r3
 802280a:	d0a0      	beq.n	802274e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 802280c:	2300      	movs	r3, #0
}
 802280e:	4618      	mov	r0, r3
 8022810:	3710      	adds	r7, #16
 8022812:	46bd      	mov	sp, r7
 8022814:	bd80      	pop	{r7, pc}
	...

08022818 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8022818:	b480      	push	{r7}
 802281a:	b095      	sub	sp, #84	@ 0x54
 802281c:	af00      	add	r7, sp, #0
 802281e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8022820:	687b      	ldr	r3, [r7, #4]
 8022822:	681b      	ldr	r3, [r3, #0]
 8022824:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022826:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8022828:	e853 3f00 	ldrex	r3, [r3]
 802282c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 802282e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8022830:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8022834:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8022836:	687b      	ldr	r3, [r7, #4]
 8022838:	681b      	ldr	r3, [r3, #0]
 802283a:	461a      	mov	r2, r3
 802283c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802283e:	643b      	str	r3, [r7, #64]	@ 0x40
 8022840:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022842:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8022844:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8022846:	e841 2300 	strex	r3, r2, [r1]
 802284a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 802284c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802284e:	2b00      	cmp	r3, #0
 8022850:	d1e6      	bne.n	8022820 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8022852:	687b      	ldr	r3, [r7, #4]
 8022854:	681b      	ldr	r3, [r3, #0]
 8022856:	3308      	adds	r3, #8
 8022858:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802285a:	6a3b      	ldr	r3, [r7, #32]
 802285c:	e853 3f00 	ldrex	r3, [r3]
 8022860:	61fb      	str	r3, [r7, #28]
   return(result);
 8022862:	69fa      	ldr	r2, [r7, #28]
 8022864:	4b1e      	ldr	r3, [pc, #120]	@ (80228e0 <UART_EndRxTransfer+0xc8>)
 8022866:	4013      	ands	r3, r2
 8022868:	64bb      	str	r3, [r7, #72]	@ 0x48
 802286a:	687b      	ldr	r3, [r7, #4]
 802286c:	681b      	ldr	r3, [r3, #0]
 802286e:	3308      	adds	r3, #8
 8022870:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8022872:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8022874:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022876:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8022878:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802287a:	e841 2300 	strex	r3, r2, [r1]
 802287e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8022880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022882:	2b00      	cmp	r3, #0
 8022884:	d1e5      	bne.n	8022852 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8022886:	687b      	ldr	r3, [r7, #4]
 8022888:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 802288a:	2b01      	cmp	r3, #1
 802288c:	d118      	bne.n	80228c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802288e:	687b      	ldr	r3, [r7, #4]
 8022890:	681b      	ldr	r3, [r3, #0]
 8022892:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022894:	68fb      	ldr	r3, [r7, #12]
 8022896:	e853 3f00 	ldrex	r3, [r3]
 802289a:	60bb      	str	r3, [r7, #8]
   return(result);
 802289c:	68bb      	ldr	r3, [r7, #8]
 802289e:	f023 0310 	bic.w	r3, r3, #16
 80228a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80228a4:	687b      	ldr	r3, [r7, #4]
 80228a6:	681b      	ldr	r3, [r3, #0]
 80228a8:	461a      	mov	r2, r3
 80228aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80228ac:	61bb      	str	r3, [r7, #24]
 80228ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80228b0:	6979      	ldr	r1, [r7, #20]
 80228b2:	69ba      	ldr	r2, [r7, #24]
 80228b4:	e841 2300 	strex	r3, r2, [r1]
 80228b8:	613b      	str	r3, [r7, #16]
   return(result);
 80228ba:	693b      	ldr	r3, [r7, #16]
 80228bc:	2b00      	cmp	r3, #0
 80228be:	d1e6      	bne.n	802288e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80228c0:	687b      	ldr	r3, [r7, #4]
 80228c2:	2220      	movs	r2, #32
 80228c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80228c8:	687b      	ldr	r3, [r7, #4]
 80228ca:	2200      	movs	r2, #0
 80228cc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80228ce:	687b      	ldr	r3, [r7, #4]
 80228d0:	2200      	movs	r2, #0
 80228d2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80228d4:	bf00      	nop
 80228d6:	3754      	adds	r7, #84	@ 0x54
 80228d8:	46bd      	mov	sp, r7
 80228da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80228de:	4770      	bx	lr
 80228e0:	effffffe 	.word	0xeffffffe

080228e4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80228e4:	b480      	push	{r7}
 80228e6:	b085      	sub	sp, #20
 80228e8:	af00      	add	r7, sp, #0
 80228ea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80228ec:	687b      	ldr	r3, [r7, #4]
 80228ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80228f2:	2b01      	cmp	r3, #1
 80228f4:	d101      	bne.n	80228fa <HAL_UARTEx_DisableFifoMode+0x16>
 80228f6:	2302      	movs	r3, #2
 80228f8:	e027      	b.n	802294a <HAL_UARTEx_DisableFifoMode+0x66>
 80228fa:	687b      	ldr	r3, [r7, #4]
 80228fc:	2201      	movs	r2, #1
 80228fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8022902:	687b      	ldr	r3, [r7, #4]
 8022904:	2224      	movs	r2, #36	@ 0x24
 8022906:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 802290a:	687b      	ldr	r3, [r7, #4]
 802290c:	681b      	ldr	r3, [r3, #0]
 802290e:	681b      	ldr	r3, [r3, #0]
 8022910:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8022912:	687b      	ldr	r3, [r7, #4]
 8022914:	681b      	ldr	r3, [r3, #0]
 8022916:	681a      	ldr	r2, [r3, #0]
 8022918:	687b      	ldr	r3, [r7, #4]
 802291a:	681b      	ldr	r3, [r3, #0]
 802291c:	f022 0201 	bic.w	r2, r2, #1
 8022920:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8022922:	68fb      	ldr	r3, [r7, #12]
 8022924:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8022928:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 802292a:	687b      	ldr	r3, [r7, #4]
 802292c:	2200      	movs	r2, #0
 802292e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8022930:	687b      	ldr	r3, [r7, #4]
 8022932:	681b      	ldr	r3, [r3, #0]
 8022934:	68fa      	ldr	r2, [r7, #12]
 8022936:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8022938:	687b      	ldr	r3, [r7, #4]
 802293a:	2220      	movs	r2, #32
 802293c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8022940:	687b      	ldr	r3, [r7, #4]
 8022942:	2200      	movs	r2, #0
 8022944:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8022948:	2300      	movs	r3, #0
}
 802294a:	4618      	mov	r0, r3
 802294c:	3714      	adds	r7, #20
 802294e:	46bd      	mov	sp, r7
 8022950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022954:	4770      	bx	lr

08022956 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8022956:	b580      	push	{r7, lr}
 8022958:	b084      	sub	sp, #16
 802295a:	af00      	add	r7, sp, #0
 802295c:	6078      	str	r0, [r7, #4]
 802295e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8022960:	687b      	ldr	r3, [r7, #4]
 8022962:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8022966:	2b01      	cmp	r3, #1
 8022968:	d101      	bne.n	802296e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 802296a:	2302      	movs	r3, #2
 802296c:	e02d      	b.n	80229ca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 802296e:	687b      	ldr	r3, [r7, #4]
 8022970:	2201      	movs	r2, #1
 8022972:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8022976:	687b      	ldr	r3, [r7, #4]
 8022978:	2224      	movs	r2, #36	@ 0x24
 802297a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 802297e:	687b      	ldr	r3, [r7, #4]
 8022980:	681b      	ldr	r3, [r3, #0]
 8022982:	681b      	ldr	r3, [r3, #0]
 8022984:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8022986:	687b      	ldr	r3, [r7, #4]
 8022988:	681b      	ldr	r3, [r3, #0]
 802298a:	681a      	ldr	r2, [r3, #0]
 802298c:	687b      	ldr	r3, [r7, #4]
 802298e:	681b      	ldr	r3, [r3, #0]
 8022990:	f022 0201 	bic.w	r2, r2, #1
 8022994:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8022996:	687b      	ldr	r3, [r7, #4]
 8022998:	681b      	ldr	r3, [r3, #0]
 802299a:	689b      	ldr	r3, [r3, #8]
 802299c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80229a0:	687b      	ldr	r3, [r7, #4]
 80229a2:	681b      	ldr	r3, [r3, #0]
 80229a4:	683a      	ldr	r2, [r7, #0]
 80229a6:	430a      	orrs	r2, r1
 80229a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80229aa:	6878      	ldr	r0, [r7, #4]
 80229ac:	f000 f850 	bl	8022a50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80229b0:	687b      	ldr	r3, [r7, #4]
 80229b2:	681b      	ldr	r3, [r3, #0]
 80229b4:	68fa      	ldr	r2, [r7, #12]
 80229b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80229b8:	687b      	ldr	r3, [r7, #4]
 80229ba:	2220      	movs	r2, #32
 80229bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80229c0:	687b      	ldr	r3, [r7, #4]
 80229c2:	2200      	movs	r2, #0
 80229c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80229c8:	2300      	movs	r3, #0
}
 80229ca:	4618      	mov	r0, r3
 80229cc:	3710      	adds	r7, #16
 80229ce:	46bd      	mov	sp, r7
 80229d0:	bd80      	pop	{r7, pc}

080229d2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80229d2:	b580      	push	{r7, lr}
 80229d4:	b084      	sub	sp, #16
 80229d6:	af00      	add	r7, sp, #0
 80229d8:	6078      	str	r0, [r7, #4]
 80229da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80229dc:	687b      	ldr	r3, [r7, #4]
 80229de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80229e2:	2b01      	cmp	r3, #1
 80229e4:	d101      	bne.n	80229ea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80229e6:	2302      	movs	r3, #2
 80229e8:	e02d      	b.n	8022a46 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80229ea:	687b      	ldr	r3, [r7, #4]
 80229ec:	2201      	movs	r2, #1
 80229ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80229f2:	687b      	ldr	r3, [r7, #4]
 80229f4:	2224      	movs	r2, #36	@ 0x24
 80229f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80229fa:	687b      	ldr	r3, [r7, #4]
 80229fc:	681b      	ldr	r3, [r3, #0]
 80229fe:	681b      	ldr	r3, [r3, #0]
 8022a00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8022a02:	687b      	ldr	r3, [r7, #4]
 8022a04:	681b      	ldr	r3, [r3, #0]
 8022a06:	681a      	ldr	r2, [r3, #0]
 8022a08:	687b      	ldr	r3, [r7, #4]
 8022a0a:	681b      	ldr	r3, [r3, #0]
 8022a0c:	f022 0201 	bic.w	r2, r2, #1
 8022a10:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8022a12:	687b      	ldr	r3, [r7, #4]
 8022a14:	681b      	ldr	r3, [r3, #0]
 8022a16:	689b      	ldr	r3, [r3, #8]
 8022a18:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8022a1c:	687b      	ldr	r3, [r7, #4]
 8022a1e:	681b      	ldr	r3, [r3, #0]
 8022a20:	683a      	ldr	r2, [r7, #0]
 8022a22:	430a      	orrs	r2, r1
 8022a24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8022a26:	6878      	ldr	r0, [r7, #4]
 8022a28:	f000 f812 	bl	8022a50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8022a2c:	687b      	ldr	r3, [r7, #4]
 8022a2e:	681b      	ldr	r3, [r3, #0]
 8022a30:	68fa      	ldr	r2, [r7, #12]
 8022a32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8022a34:	687b      	ldr	r3, [r7, #4]
 8022a36:	2220      	movs	r2, #32
 8022a38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8022a3c:	687b      	ldr	r3, [r7, #4]
 8022a3e:	2200      	movs	r2, #0
 8022a40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8022a44:	2300      	movs	r3, #0
}
 8022a46:	4618      	mov	r0, r3
 8022a48:	3710      	adds	r7, #16
 8022a4a:	46bd      	mov	sp, r7
 8022a4c:	bd80      	pop	{r7, pc}
	...

08022a50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8022a50:	b480      	push	{r7}
 8022a52:	b085      	sub	sp, #20
 8022a54:	af00      	add	r7, sp, #0
 8022a56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8022a58:	687b      	ldr	r3, [r7, #4]
 8022a5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8022a5c:	2b00      	cmp	r3, #0
 8022a5e:	d108      	bne.n	8022a72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8022a60:	687b      	ldr	r3, [r7, #4]
 8022a62:	2201      	movs	r2, #1
 8022a64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8022a68:	687b      	ldr	r3, [r7, #4]
 8022a6a:	2201      	movs	r2, #1
 8022a6c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8022a70:	e031      	b.n	8022ad6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8022a72:	2310      	movs	r3, #16
 8022a74:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8022a76:	2310      	movs	r3, #16
 8022a78:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8022a7a:	687b      	ldr	r3, [r7, #4]
 8022a7c:	681b      	ldr	r3, [r3, #0]
 8022a7e:	689b      	ldr	r3, [r3, #8]
 8022a80:	0e5b      	lsrs	r3, r3, #25
 8022a82:	b2db      	uxtb	r3, r3
 8022a84:	f003 0307 	and.w	r3, r3, #7
 8022a88:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8022a8a:	687b      	ldr	r3, [r7, #4]
 8022a8c:	681b      	ldr	r3, [r3, #0]
 8022a8e:	689b      	ldr	r3, [r3, #8]
 8022a90:	0f5b      	lsrs	r3, r3, #29
 8022a92:	b2db      	uxtb	r3, r3
 8022a94:	f003 0307 	and.w	r3, r3, #7
 8022a98:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8022a9a:	7bbb      	ldrb	r3, [r7, #14]
 8022a9c:	7b3a      	ldrb	r2, [r7, #12]
 8022a9e:	4911      	ldr	r1, [pc, #68]	@ (8022ae4 <UARTEx_SetNbDataToProcess+0x94>)
 8022aa0:	5c8a      	ldrb	r2, [r1, r2]
 8022aa2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8022aa6:	7b3a      	ldrb	r2, [r7, #12]
 8022aa8:	490f      	ldr	r1, [pc, #60]	@ (8022ae8 <UARTEx_SetNbDataToProcess+0x98>)
 8022aaa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8022aac:	fb93 f3f2 	sdiv	r3, r3, r2
 8022ab0:	b29a      	uxth	r2, r3
 8022ab2:	687b      	ldr	r3, [r7, #4]
 8022ab4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8022ab8:	7bfb      	ldrb	r3, [r7, #15]
 8022aba:	7b7a      	ldrb	r2, [r7, #13]
 8022abc:	4909      	ldr	r1, [pc, #36]	@ (8022ae4 <UARTEx_SetNbDataToProcess+0x94>)
 8022abe:	5c8a      	ldrb	r2, [r1, r2]
 8022ac0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8022ac4:	7b7a      	ldrb	r2, [r7, #13]
 8022ac6:	4908      	ldr	r1, [pc, #32]	@ (8022ae8 <UARTEx_SetNbDataToProcess+0x98>)
 8022ac8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8022aca:	fb93 f3f2 	sdiv	r3, r3, r2
 8022ace:	b29a      	uxth	r2, r3
 8022ad0:	687b      	ldr	r3, [r7, #4]
 8022ad2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8022ad6:	bf00      	nop
 8022ad8:	3714      	adds	r7, #20
 8022ada:	46bd      	mov	sp, r7
 8022adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022ae0:	4770      	bx	lr
 8022ae2:	bf00      	nop
 8022ae4:	08028c78 	.word	0x08028c78
 8022ae8:	08028c80 	.word	0x08028c80

08022aec <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8022aec:	b084      	sub	sp, #16
 8022aee:	b480      	push	{r7}
 8022af0:	b085      	sub	sp, #20
 8022af2:	af00      	add	r7, sp, #0
 8022af4:	6078      	str	r0, [r7, #4]
 8022af6:	f107 001c 	add.w	r0, r7, #28
 8022afa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8022afe:	2300      	movs	r3, #0
 8022b00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8022b02:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8022b04:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8022b06:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8022b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 8022b0a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8022b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 8022b0e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8022b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 8022b12:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8022b14:	68fa      	ldr	r2, [r7, #12]
 8022b16:	4313      	orrs	r3, r2
 8022b18:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8022b1a:	687b      	ldr	r3, [r7, #4]
 8022b1c:	685a      	ldr	r2, [r3, #4]
 8022b1e:	4b07      	ldr	r3, [pc, #28]	@ (8022b3c <SDMMC_Init+0x50>)
 8022b20:	4013      	ands	r3, r2
 8022b22:	68fa      	ldr	r2, [r7, #12]
 8022b24:	431a      	orrs	r2, r3
 8022b26:	687b      	ldr	r3, [r7, #4]
 8022b28:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8022b2a:	2300      	movs	r3, #0
}
 8022b2c:	4618      	mov	r0, r3
 8022b2e:	3714      	adds	r7, #20
 8022b30:	46bd      	mov	sp, r7
 8022b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b36:	b004      	add	sp, #16
 8022b38:	4770      	bx	lr
 8022b3a:	bf00      	nop
 8022b3c:	ffc02c00 	.word	0xffc02c00

08022b40 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8022b40:	b480      	push	{r7}
 8022b42:	b083      	sub	sp, #12
 8022b44:	af00      	add	r7, sp, #0
 8022b46:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8022b48:	687b      	ldr	r3, [r7, #4]
 8022b4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8022b4e:	4618      	mov	r0, r3
 8022b50:	370c      	adds	r7, #12
 8022b52:	46bd      	mov	sp, r7
 8022b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b58:	4770      	bx	lr

08022b5a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8022b5a:	b480      	push	{r7}
 8022b5c:	b083      	sub	sp, #12
 8022b5e:	af00      	add	r7, sp, #0
 8022b60:	6078      	str	r0, [r7, #4]
 8022b62:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8022b64:	683b      	ldr	r3, [r7, #0]
 8022b66:	681a      	ldr	r2, [r3, #0]
 8022b68:	687b      	ldr	r3, [r7, #4]
 8022b6a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8022b6e:	2300      	movs	r3, #0
}
 8022b70:	4618      	mov	r0, r3
 8022b72:	370c      	adds	r7, #12
 8022b74:	46bd      	mov	sp, r7
 8022b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b7a:	4770      	bx	lr

08022b7c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8022b7c:	b480      	push	{r7}
 8022b7e:	b083      	sub	sp, #12
 8022b80:	af00      	add	r7, sp, #0
 8022b82:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8022b84:	687b      	ldr	r3, [r7, #4]
 8022b86:	681b      	ldr	r3, [r3, #0]
 8022b88:	f043 0203 	orr.w	r2, r3, #3
 8022b8c:	687b      	ldr	r3, [r7, #4]
 8022b8e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8022b90:	2300      	movs	r3, #0
}
 8022b92:	4618      	mov	r0, r3
 8022b94:	370c      	adds	r7, #12
 8022b96:	46bd      	mov	sp, r7
 8022b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b9c:	4770      	bx	lr

08022b9e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8022b9e:	b480      	push	{r7}
 8022ba0:	b083      	sub	sp, #12
 8022ba2:	af00      	add	r7, sp, #0
 8022ba4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8022ba6:	687b      	ldr	r3, [r7, #4]
 8022ba8:	681b      	ldr	r3, [r3, #0]
 8022baa:	f003 0303 	and.w	r3, r3, #3
}
 8022bae:	4618      	mov	r0, r3
 8022bb0:	370c      	adds	r7, #12
 8022bb2:	46bd      	mov	sp, r7
 8022bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022bb8:	4770      	bx	lr
	...

08022bbc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8022bbc:	b480      	push	{r7}
 8022bbe:	b085      	sub	sp, #20
 8022bc0:	af00      	add	r7, sp, #0
 8022bc2:	6078      	str	r0, [r7, #4]
 8022bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8022bc6:	2300      	movs	r3, #0
 8022bc8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8022bca:	683b      	ldr	r3, [r7, #0]
 8022bcc:	681a      	ldr	r2, [r3, #0]
 8022bce:	687b      	ldr	r3, [r7, #4]
 8022bd0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8022bd2:	683b      	ldr	r3, [r7, #0]
 8022bd4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8022bd6:	683b      	ldr	r3, [r7, #0]
 8022bd8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8022bda:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8022bdc:	683b      	ldr	r3, [r7, #0]
 8022bde:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8022be0:	431a      	orrs	r2, r3
                       Command->CPSM);
 8022be2:	683b      	ldr	r3, [r7, #0]
 8022be4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8022be6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8022be8:	68fa      	ldr	r2, [r7, #12]
 8022bea:	4313      	orrs	r3, r2
 8022bec:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8022bee:	687b      	ldr	r3, [r7, #4]
 8022bf0:	68da      	ldr	r2, [r3, #12]
 8022bf2:	4b06      	ldr	r3, [pc, #24]	@ (8022c0c <SDMMC_SendCommand+0x50>)
 8022bf4:	4013      	ands	r3, r2
 8022bf6:	68fa      	ldr	r2, [r7, #12]
 8022bf8:	431a      	orrs	r2, r3
 8022bfa:	687b      	ldr	r3, [r7, #4]
 8022bfc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8022bfe:	2300      	movs	r3, #0
}
 8022c00:	4618      	mov	r0, r3
 8022c02:	3714      	adds	r7, #20
 8022c04:	46bd      	mov	sp, r7
 8022c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c0a:	4770      	bx	lr
 8022c0c:	fffee0c0 	.word	0xfffee0c0

08022c10 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8022c10:	b480      	push	{r7}
 8022c12:	b083      	sub	sp, #12
 8022c14:	af00      	add	r7, sp, #0
 8022c16:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8022c18:	687b      	ldr	r3, [r7, #4]
 8022c1a:	691b      	ldr	r3, [r3, #16]
 8022c1c:	b2db      	uxtb	r3, r3
}
 8022c1e:	4618      	mov	r0, r3
 8022c20:	370c      	adds	r7, #12
 8022c22:	46bd      	mov	sp, r7
 8022c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c28:	4770      	bx	lr

08022c2a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8022c2a:	b480      	push	{r7}
 8022c2c:	b085      	sub	sp, #20
 8022c2e:	af00      	add	r7, sp, #0
 8022c30:	6078      	str	r0, [r7, #4]
 8022c32:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8022c34:	687b      	ldr	r3, [r7, #4]
 8022c36:	3314      	adds	r3, #20
 8022c38:	461a      	mov	r2, r3
 8022c3a:	683b      	ldr	r3, [r7, #0]
 8022c3c:	4413      	add	r3, r2
 8022c3e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8022c40:	68fb      	ldr	r3, [r7, #12]
 8022c42:	681b      	ldr	r3, [r3, #0]
}
 8022c44:	4618      	mov	r0, r3
 8022c46:	3714      	adds	r7, #20
 8022c48:	46bd      	mov	sp, r7
 8022c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c4e:	4770      	bx	lr

08022c50 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8022c50:	b480      	push	{r7}
 8022c52:	b085      	sub	sp, #20
 8022c54:	af00      	add	r7, sp, #0
 8022c56:	6078      	str	r0, [r7, #4]
 8022c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8022c5a:	2300      	movs	r3, #0
 8022c5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8022c5e:	683b      	ldr	r3, [r7, #0]
 8022c60:	681a      	ldr	r2, [r3, #0]
 8022c62:	687b      	ldr	r3, [r7, #4]
 8022c64:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8022c66:	683b      	ldr	r3, [r7, #0]
 8022c68:	685a      	ldr	r2, [r3, #4]
 8022c6a:	687b      	ldr	r3, [r7, #4]
 8022c6c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8022c6e:	683b      	ldr	r3, [r7, #0]
 8022c70:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8022c72:	683b      	ldr	r3, [r7, #0]
 8022c74:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8022c76:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8022c78:	683b      	ldr	r3, [r7, #0]
 8022c7a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8022c7c:	431a      	orrs	r2, r3
                       Data->DPSM);
 8022c7e:	683b      	ldr	r3, [r7, #0]
 8022c80:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8022c82:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8022c84:	68fa      	ldr	r2, [r7, #12]
 8022c86:	4313      	orrs	r3, r2
 8022c88:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8022c8a:	687b      	ldr	r3, [r7, #4]
 8022c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022c8e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8022c92:	68fb      	ldr	r3, [r7, #12]
 8022c94:	431a      	orrs	r2, r3
 8022c96:	687b      	ldr	r3, [r7, #4]
 8022c98:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8022c9a:	2300      	movs	r3, #0

}
 8022c9c:	4618      	mov	r0, r3
 8022c9e:	3714      	adds	r7, #20
 8022ca0:	46bd      	mov	sp, r7
 8022ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022ca6:	4770      	bx	lr

08022ca8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8022ca8:	b580      	push	{r7, lr}
 8022caa:	b088      	sub	sp, #32
 8022cac:	af00      	add	r7, sp, #0
 8022cae:	6078      	str	r0, [r7, #4]
 8022cb0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8022cb2:	683b      	ldr	r3, [r7, #0]
 8022cb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8022cb6:	2310      	movs	r3, #16
 8022cb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8022cba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8022cbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8022cc0:	2300      	movs	r3, #0
 8022cc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8022cc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8022cc8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8022cca:	f107 0308 	add.w	r3, r7, #8
 8022cce:	4619      	mov	r1, r3
 8022cd0:	6878      	ldr	r0, [r7, #4]
 8022cd2:	f7ff ff73 	bl	8022bbc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8022cd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8022cda:	2110      	movs	r1, #16
 8022cdc:	6878      	ldr	r0, [r7, #4]
 8022cde:	f000 fa5f 	bl	80231a0 <SDMMC_GetCmdResp1>
 8022ce2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8022ce4:	69fb      	ldr	r3, [r7, #28]
}
 8022ce6:	4618      	mov	r0, r3
 8022ce8:	3720      	adds	r7, #32
 8022cea:	46bd      	mov	sp, r7
 8022cec:	bd80      	pop	{r7, pc}

08022cee <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8022cee:	b580      	push	{r7, lr}
 8022cf0:	b088      	sub	sp, #32
 8022cf2:	af00      	add	r7, sp, #0
 8022cf4:	6078      	str	r0, [r7, #4]
 8022cf6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8022cf8:	683b      	ldr	r3, [r7, #0]
 8022cfa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8022cfc:	2311      	movs	r3, #17
 8022cfe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8022d00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8022d04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8022d06:	2300      	movs	r3, #0
 8022d08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8022d0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8022d0e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8022d10:	f107 0308 	add.w	r3, r7, #8
 8022d14:	4619      	mov	r1, r3
 8022d16:	6878      	ldr	r0, [r7, #4]
 8022d18:	f7ff ff50 	bl	8022bbc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8022d1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8022d20:	2111      	movs	r1, #17
 8022d22:	6878      	ldr	r0, [r7, #4]
 8022d24:	f000 fa3c 	bl	80231a0 <SDMMC_GetCmdResp1>
 8022d28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8022d2a:	69fb      	ldr	r3, [r7, #28]
}
 8022d2c:	4618      	mov	r0, r3
 8022d2e:	3720      	adds	r7, #32
 8022d30:	46bd      	mov	sp, r7
 8022d32:	bd80      	pop	{r7, pc}

08022d34 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8022d34:	b580      	push	{r7, lr}
 8022d36:	b088      	sub	sp, #32
 8022d38:	af00      	add	r7, sp, #0
 8022d3a:	6078      	str	r0, [r7, #4]
 8022d3c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8022d3e:	683b      	ldr	r3, [r7, #0]
 8022d40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8022d42:	2312      	movs	r3, #18
 8022d44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8022d46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8022d4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8022d4c:	2300      	movs	r3, #0
 8022d4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8022d50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8022d54:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8022d56:	f107 0308 	add.w	r3, r7, #8
 8022d5a:	4619      	mov	r1, r3
 8022d5c:	6878      	ldr	r0, [r7, #4]
 8022d5e:	f7ff ff2d 	bl	8022bbc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8022d62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8022d66:	2112      	movs	r1, #18
 8022d68:	6878      	ldr	r0, [r7, #4]
 8022d6a:	f000 fa19 	bl	80231a0 <SDMMC_GetCmdResp1>
 8022d6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8022d70:	69fb      	ldr	r3, [r7, #28]
}
 8022d72:	4618      	mov	r0, r3
 8022d74:	3720      	adds	r7, #32
 8022d76:	46bd      	mov	sp, r7
 8022d78:	bd80      	pop	{r7, pc}

08022d7a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8022d7a:	b580      	push	{r7, lr}
 8022d7c:	b088      	sub	sp, #32
 8022d7e:	af00      	add	r7, sp, #0
 8022d80:	6078      	str	r0, [r7, #4]
 8022d82:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8022d84:	683b      	ldr	r3, [r7, #0]
 8022d86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8022d88:	2318      	movs	r3, #24
 8022d8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8022d8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8022d90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8022d92:	2300      	movs	r3, #0
 8022d94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8022d96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8022d9a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8022d9c:	f107 0308 	add.w	r3, r7, #8
 8022da0:	4619      	mov	r1, r3
 8022da2:	6878      	ldr	r0, [r7, #4]
 8022da4:	f7ff ff0a 	bl	8022bbc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8022da8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8022dac:	2118      	movs	r1, #24
 8022dae:	6878      	ldr	r0, [r7, #4]
 8022db0:	f000 f9f6 	bl	80231a0 <SDMMC_GetCmdResp1>
 8022db4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8022db6:	69fb      	ldr	r3, [r7, #28]
}
 8022db8:	4618      	mov	r0, r3
 8022dba:	3720      	adds	r7, #32
 8022dbc:	46bd      	mov	sp, r7
 8022dbe:	bd80      	pop	{r7, pc}

08022dc0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8022dc0:	b580      	push	{r7, lr}
 8022dc2:	b088      	sub	sp, #32
 8022dc4:	af00      	add	r7, sp, #0
 8022dc6:	6078      	str	r0, [r7, #4]
 8022dc8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8022dca:	683b      	ldr	r3, [r7, #0]
 8022dcc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8022dce:	2319      	movs	r3, #25
 8022dd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8022dd2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8022dd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8022dd8:	2300      	movs	r3, #0
 8022dda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8022ddc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8022de0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8022de2:	f107 0308 	add.w	r3, r7, #8
 8022de6:	4619      	mov	r1, r3
 8022de8:	6878      	ldr	r0, [r7, #4]
 8022dea:	f7ff fee7 	bl	8022bbc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8022dee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8022df2:	2119      	movs	r1, #25
 8022df4:	6878      	ldr	r0, [r7, #4]
 8022df6:	f000 f9d3 	bl	80231a0 <SDMMC_GetCmdResp1>
 8022dfa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8022dfc:	69fb      	ldr	r3, [r7, #28]
}
 8022dfe:	4618      	mov	r0, r3
 8022e00:	3720      	adds	r7, #32
 8022e02:	46bd      	mov	sp, r7
 8022e04:	bd80      	pop	{r7, pc}
	...

08022e08 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8022e08:	b580      	push	{r7, lr}
 8022e0a:	b088      	sub	sp, #32
 8022e0c:	af00      	add	r7, sp, #0
 8022e0e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8022e10:	2300      	movs	r3, #0
 8022e12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8022e14:	230c      	movs	r3, #12
 8022e16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8022e18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8022e1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8022e1e:	2300      	movs	r3, #0
 8022e20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8022e22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8022e26:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8022e28:	687b      	ldr	r3, [r7, #4]
 8022e2a:	68db      	ldr	r3, [r3, #12]
 8022e2c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8022e30:	687b      	ldr	r3, [r7, #4]
 8022e32:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8022e34:	687b      	ldr	r3, [r7, #4]
 8022e36:	68db      	ldr	r3, [r3, #12]
 8022e38:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8022e3c:	687b      	ldr	r3, [r7, #4]
 8022e3e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8022e40:	f107 0308 	add.w	r3, r7, #8
 8022e44:	4619      	mov	r1, r3
 8022e46:	6878      	ldr	r0, [r7, #4]
 8022e48:	f7ff feb8 	bl	8022bbc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8022e4c:	4a0b      	ldr	r2, [pc, #44]	@ (8022e7c <SDMMC_CmdStopTransfer+0x74>)
 8022e4e:	210c      	movs	r1, #12
 8022e50:	6878      	ldr	r0, [r7, #4]
 8022e52:	f000 f9a5 	bl	80231a0 <SDMMC_GetCmdResp1>
 8022e56:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8022e58:	687b      	ldr	r3, [r7, #4]
 8022e5a:	68db      	ldr	r3, [r3, #12]
 8022e5c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8022e60:	687b      	ldr	r3, [r7, #4]
 8022e62:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8022e64:	69fb      	ldr	r3, [r7, #28]
 8022e66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8022e6a:	d101      	bne.n	8022e70 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8022e6c:	2300      	movs	r3, #0
 8022e6e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8022e70:	69fb      	ldr	r3, [r7, #28]
}
 8022e72:	4618      	mov	r0, r3
 8022e74:	3720      	adds	r7, #32
 8022e76:	46bd      	mov	sp, r7
 8022e78:	bd80      	pop	{r7, pc}
 8022e7a:	bf00      	nop
 8022e7c:	05f5e100 	.word	0x05f5e100

08022e80 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8022e80:	b580      	push	{r7, lr}
 8022e82:	b088      	sub	sp, #32
 8022e84:	af00      	add	r7, sp, #0
 8022e86:	6078      	str	r0, [r7, #4]
 8022e88:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8022e8a:	683b      	ldr	r3, [r7, #0]
 8022e8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8022e8e:	2307      	movs	r3, #7
 8022e90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8022e92:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8022e96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8022e98:	2300      	movs	r3, #0
 8022e9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8022e9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8022ea0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8022ea2:	f107 0308 	add.w	r3, r7, #8
 8022ea6:	4619      	mov	r1, r3
 8022ea8:	6878      	ldr	r0, [r7, #4]
 8022eaa:	f7ff fe87 	bl	8022bbc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8022eae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8022eb2:	2107      	movs	r1, #7
 8022eb4:	6878      	ldr	r0, [r7, #4]
 8022eb6:	f000 f973 	bl	80231a0 <SDMMC_GetCmdResp1>
 8022eba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8022ebc:	69fb      	ldr	r3, [r7, #28]
}
 8022ebe:	4618      	mov	r0, r3
 8022ec0:	3720      	adds	r7, #32
 8022ec2:	46bd      	mov	sp, r7
 8022ec4:	bd80      	pop	{r7, pc}

08022ec6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8022ec6:	b580      	push	{r7, lr}
 8022ec8:	b088      	sub	sp, #32
 8022eca:	af00      	add	r7, sp, #0
 8022ecc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8022ece:	2300      	movs	r3, #0
 8022ed0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8022ed2:	2300      	movs	r3, #0
 8022ed4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8022ed6:	2300      	movs	r3, #0
 8022ed8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8022eda:	2300      	movs	r3, #0
 8022edc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8022ede:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8022ee2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8022ee4:	f107 0308 	add.w	r3, r7, #8
 8022ee8:	4619      	mov	r1, r3
 8022eea:	6878      	ldr	r0, [r7, #4]
 8022eec:	f7ff fe66 	bl	8022bbc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8022ef0:	6878      	ldr	r0, [r7, #4]
 8022ef2:	f000 fb97 	bl	8023624 <SDMMC_GetCmdError>
 8022ef6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8022ef8:	69fb      	ldr	r3, [r7, #28]
}
 8022efa:	4618      	mov	r0, r3
 8022efc:	3720      	adds	r7, #32
 8022efe:	46bd      	mov	sp, r7
 8022f00:	bd80      	pop	{r7, pc}

08022f02 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8022f02:	b580      	push	{r7, lr}
 8022f04:	b088      	sub	sp, #32
 8022f06:	af00      	add	r7, sp, #0
 8022f08:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8022f0a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8022f0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8022f10:	2308      	movs	r3, #8
 8022f12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8022f14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8022f18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8022f1a:	2300      	movs	r3, #0
 8022f1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8022f1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8022f22:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8022f24:	f107 0308 	add.w	r3, r7, #8
 8022f28:	4619      	mov	r1, r3
 8022f2a:	6878      	ldr	r0, [r7, #4]
 8022f2c:	f7ff fe46 	bl	8022bbc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8022f30:	6878      	ldr	r0, [r7, #4]
 8022f32:	f000 fb29 	bl	8023588 <SDMMC_GetCmdResp7>
 8022f36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8022f38:	69fb      	ldr	r3, [r7, #28]
}
 8022f3a:	4618      	mov	r0, r3
 8022f3c:	3720      	adds	r7, #32
 8022f3e:	46bd      	mov	sp, r7
 8022f40:	bd80      	pop	{r7, pc}

08022f42 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8022f42:	b580      	push	{r7, lr}
 8022f44:	b088      	sub	sp, #32
 8022f46:	af00      	add	r7, sp, #0
 8022f48:	6078      	str	r0, [r7, #4]
 8022f4a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8022f4c:	683b      	ldr	r3, [r7, #0]
 8022f4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8022f50:	2337      	movs	r3, #55	@ 0x37
 8022f52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8022f54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8022f58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8022f5a:	2300      	movs	r3, #0
 8022f5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8022f5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8022f62:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8022f64:	f107 0308 	add.w	r3, r7, #8
 8022f68:	4619      	mov	r1, r3
 8022f6a:	6878      	ldr	r0, [r7, #4]
 8022f6c:	f7ff fe26 	bl	8022bbc <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8022f70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8022f74:	2137      	movs	r1, #55	@ 0x37
 8022f76:	6878      	ldr	r0, [r7, #4]
 8022f78:	f000 f912 	bl	80231a0 <SDMMC_GetCmdResp1>
 8022f7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8022f7e:	69fb      	ldr	r3, [r7, #28]
}
 8022f80:	4618      	mov	r0, r3
 8022f82:	3720      	adds	r7, #32
 8022f84:	46bd      	mov	sp, r7
 8022f86:	bd80      	pop	{r7, pc}

08022f88 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8022f88:	b580      	push	{r7, lr}
 8022f8a:	b088      	sub	sp, #32
 8022f8c:	af00      	add	r7, sp, #0
 8022f8e:	6078      	str	r0, [r7, #4]
 8022f90:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8022f92:	683b      	ldr	r3, [r7, #0]
 8022f94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8022f96:	2329      	movs	r3, #41	@ 0x29
 8022f98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8022f9a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8022f9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8022fa0:	2300      	movs	r3, #0
 8022fa2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8022fa4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8022fa8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8022faa:	f107 0308 	add.w	r3, r7, #8
 8022fae:	4619      	mov	r1, r3
 8022fb0:	6878      	ldr	r0, [r7, #4]
 8022fb2:	f7ff fe03 	bl	8022bbc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8022fb6:	6878      	ldr	r0, [r7, #4]
 8022fb8:	f000 fa2e 	bl	8023418 <SDMMC_GetCmdResp3>
 8022fbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8022fbe:	69fb      	ldr	r3, [r7, #28]
}
 8022fc0:	4618      	mov	r0, r3
 8022fc2:	3720      	adds	r7, #32
 8022fc4:	46bd      	mov	sp, r7
 8022fc6:	bd80      	pop	{r7, pc}

08022fc8 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8022fc8:	b580      	push	{r7, lr}
 8022fca:	b088      	sub	sp, #32
 8022fcc:	af00      	add	r7, sp, #0
 8022fce:	6078      	str	r0, [r7, #4]
 8022fd0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8022fd2:	683b      	ldr	r3, [r7, #0]
 8022fd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8022fd6:	2306      	movs	r3, #6
 8022fd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8022fda:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8022fde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8022fe0:	2300      	movs	r3, #0
 8022fe2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8022fe4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8022fe8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8022fea:	f107 0308 	add.w	r3, r7, #8
 8022fee:	4619      	mov	r1, r3
 8022ff0:	6878      	ldr	r0, [r7, #4]
 8022ff2:	f7ff fde3 	bl	8022bbc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8022ff6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8022ffa:	2106      	movs	r1, #6
 8022ffc:	6878      	ldr	r0, [r7, #4]
 8022ffe:	f000 f8cf 	bl	80231a0 <SDMMC_GetCmdResp1>
 8023002:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8023004:	69fb      	ldr	r3, [r7, #28]
}
 8023006:	4618      	mov	r0, r3
 8023008:	3720      	adds	r7, #32
 802300a:	46bd      	mov	sp, r7
 802300c:	bd80      	pop	{r7, pc}

0802300e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 802300e:	b580      	push	{r7, lr}
 8023010:	b088      	sub	sp, #32
 8023012:	af00      	add	r7, sp, #0
 8023014:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8023016:	2300      	movs	r3, #0
 8023018:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 802301a:	2333      	movs	r3, #51	@ 0x33
 802301c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 802301e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8023022:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8023024:	2300      	movs	r3, #0
 8023026:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8023028:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 802302c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 802302e:	f107 0308 	add.w	r3, r7, #8
 8023032:	4619      	mov	r1, r3
 8023034:	6878      	ldr	r0, [r7, #4]
 8023036:	f7ff fdc1 	bl	8022bbc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 802303a:	f241 3288 	movw	r2, #5000	@ 0x1388
 802303e:	2133      	movs	r1, #51	@ 0x33
 8023040:	6878      	ldr	r0, [r7, #4]
 8023042:	f000 f8ad 	bl	80231a0 <SDMMC_GetCmdResp1>
 8023046:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8023048:	69fb      	ldr	r3, [r7, #28]
}
 802304a:	4618      	mov	r0, r3
 802304c:	3720      	adds	r7, #32
 802304e:	46bd      	mov	sp, r7
 8023050:	bd80      	pop	{r7, pc}

08023052 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8023052:	b580      	push	{r7, lr}
 8023054:	b088      	sub	sp, #32
 8023056:	af00      	add	r7, sp, #0
 8023058:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 802305a:	2300      	movs	r3, #0
 802305c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 802305e:	2302      	movs	r3, #2
 8023060:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8023062:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8023066:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8023068:	2300      	movs	r3, #0
 802306a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 802306c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8023070:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8023072:	f107 0308 	add.w	r3, r7, #8
 8023076:	4619      	mov	r1, r3
 8023078:	6878      	ldr	r0, [r7, #4]
 802307a:	f7ff fd9f 	bl	8022bbc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 802307e:	6878      	ldr	r0, [r7, #4]
 8023080:	f000 f980 	bl	8023384 <SDMMC_GetCmdResp2>
 8023084:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8023086:	69fb      	ldr	r3, [r7, #28]
}
 8023088:	4618      	mov	r0, r3
 802308a:	3720      	adds	r7, #32
 802308c:	46bd      	mov	sp, r7
 802308e:	bd80      	pop	{r7, pc}

08023090 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8023090:	b580      	push	{r7, lr}
 8023092:	b088      	sub	sp, #32
 8023094:	af00      	add	r7, sp, #0
 8023096:	6078      	str	r0, [r7, #4]
 8023098:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 802309a:	683b      	ldr	r3, [r7, #0]
 802309c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 802309e:	2309      	movs	r3, #9
 80230a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80230a2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80230a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80230a8:	2300      	movs	r3, #0
 80230aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80230ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80230b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80230b2:	f107 0308 	add.w	r3, r7, #8
 80230b6:	4619      	mov	r1, r3
 80230b8:	6878      	ldr	r0, [r7, #4]
 80230ba:	f7ff fd7f 	bl	8022bbc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80230be:	6878      	ldr	r0, [r7, #4]
 80230c0:	f000 f960 	bl	8023384 <SDMMC_GetCmdResp2>
 80230c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80230c6:	69fb      	ldr	r3, [r7, #28]
}
 80230c8:	4618      	mov	r0, r3
 80230ca:	3720      	adds	r7, #32
 80230cc:	46bd      	mov	sp, r7
 80230ce:	bd80      	pop	{r7, pc}

080230d0 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80230d0:	b580      	push	{r7, lr}
 80230d2:	b088      	sub	sp, #32
 80230d4:	af00      	add	r7, sp, #0
 80230d6:	6078      	str	r0, [r7, #4]
 80230d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80230da:	2300      	movs	r3, #0
 80230dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80230de:	2303      	movs	r3, #3
 80230e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80230e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80230e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80230e8:	2300      	movs	r3, #0
 80230ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80230ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80230f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80230f2:	f107 0308 	add.w	r3, r7, #8
 80230f6:	4619      	mov	r1, r3
 80230f8:	6878      	ldr	r0, [r7, #4]
 80230fa:	f7ff fd5f 	bl	8022bbc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80230fe:	683a      	ldr	r2, [r7, #0]
 8023100:	2103      	movs	r1, #3
 8023102:	6878      	ldr	r0, [r7, #4]
 8023104:	f000 f9c8 	bl	8023498 <SDMMC_GetCmdResp6>
 8023108:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802310a:	69fb      	ldr	r3, [r7, #28]
}
 802310c:	4618      	mov	r0, r3
 802310e:	3720      	adds	r7, #32
 8023110:	46bd      	mov	sp, r7
 8023112:	bd80      	pop	{r7, pc}

08023114 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8023114:	b580      	push	{r7, lr}
 8023116:	b088      	sub	sp, #32
 8023118:	af00      	add	r7, sp, #0
 802311a:	6078      	str	r0, [r7, #4]
 802311c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 802311e:	683b      	ldr	r3, [r7, #0]
 8023120:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8023122:	230d      	movs	r3, #13
 8023124:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8023126:	f44f 7380 	mov.w	r3, #256	@ 0x100
 802312a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 802312c:	2300      	movs	r3, #0
 802312e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8023130:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8023134:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8023136:	f107 0308 	add.w	r3, r7, #8
 802313a:	4619      	mov	r1, r3
 802313c:	6878      	ldr	r0, [r7, #4]
 802313e:	f7ff fd3d 	bl	8022bbc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8023142:	f241 3288 	movw	r2, #5000	@ 0x1388
 8023146:	210d      	movs	r1, #13
 8023148:	6878      	ldr	r0, [r7, #4]
 802314a:	f000 f829 	bl	80231a0 <SDMMC_GetCmdResp1>
 802314e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8023150:	69fb      	ldr	r3, [r7, #28]
}
 8023152:	4618      	mov	r0, r3
 8023154:	3720      	adds	r7, #32
 8023156:	46bd      	mov	sp, r7
 8023158:	bd80      	pop	{r7, pc}

0802315a <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 802315a:	b580      	push	{r7, lr}
 802315c:	b088      	sub	sp, #32
 802315e:	af00      	add	r7, sp, #0
 8023160:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8023162:	2300      	movs	r3, #0
 8023164:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8023166:	230d      	movs	r3, #13
 8023168:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 802316a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 802316e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8023170:	2300      	movs	r3, #0
 8023172:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8023174:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8023178:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 802317a:	f107 0308 	add.w	r3, r7, #8
 802317e:	4619      	mov	r1, r3
 8023180:	6878      	ldr	r0, [r7, #4]
 8023182:	f7ff fd1b 	bl	8022bbc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8023186:	f241 3288 	movw	r2, #5000	@ 0x1388
 802318a:	210d      	movs	r1, #13
 802318c:	6878      	ldr	r0, [r7, #4]
 802318e:	f000 f807 	bl	80231a0 <SDMMC_GetCmdResp1>
 8023192:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8023194:	69fb      	ldr	r3, [r7, #28]
}
 8023196:	4618      	mov	r0, r3
 8023198:	3720      	adds	r7, #32
 802319a:	46bd      	mov	sp, r7
 802319c:	bd80      	pop	{r7, pc}
	...

080231a0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80231a0:	b580      	push	{r7, lr}
 80231a2:	b088      	sub	sp, #32
 80231a4:	af00      	add	r7, sp, #0
 80231a6:	60f8      	str	r0, [r7, #12]
 80231a8:	460b      	mov	r3, r1
 80231aa:	607a      	str	r2, [r7, #4]
 80231ac:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80231ae:	4b70      	ldr	r3, [pc, #448]	@ (8023370 <SDMMC_GetCmdResp1+0x1d0>)
 80231b0:	681b      	ldr	r3, [r3, #0]
 80231b2:	4a70      	ldr	r2, [pc, #448]	@ (8023374 <SDMMC_GetCmdResp1+0x1d4>)
 80231b4:	fba2 2303 	umull	r2, r3, r2, r3
 80231b8:	0a5a      	lsrs	r2, r3, #9
 80231ba:	687b      	ldr	r3, [r7, #4]
 80231bc:	fb02 f303 	mul.w	r3, r2, r3
 80231c0:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80231c2:	69fb      	ldr	r3, [r7, #28]
 80231c4:	1e5a      	subs	r2, r3, #1
 80231c6:	61fa      	str	r2, [r7, #28]
 80231c8:	2b00      	cmp	r3, #0
 80231ca:	d102      	bne.n	80231d2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80231cc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80231d0:	e0c9      	b.n	8023366 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80231d2:	68fb      	ldr	r3, [r7, #12]
 80231d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80231d6:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80231d8:	69ba      	ldr	r2, [r7, #24]
 80231da:	4b67      	ldr	r3, [pc, #412]	@ (8023378 <SDMMC_GetCmdResp1+0x1d8>)
 80231dc:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80231de:	2b00      	cmp	r3, #0
 80231e0:	d0ef      	beq.n	80231c2 <SDMMC_GetCmdResp1+0x22>
 80231e2:	69bb      	ldr	r3, [r7, #24]
 80231e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80231e8:	2b00      	cmp	r3, #0
 80231ea:	d1ea      	bne.n	80231c2 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80231ec:	68fb      	ldr	r3, [r7, #12]
 80231ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80231f0:	f003 0304 	and.w	r3, r3, #4
 80231f4:	2b00      	cmp	r3, #0
 80231f6:	d004      	beq.n	8023202 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80231f8:	68fb      	ldr	r3, [r7, #12]
 80231fa:	2204      	movs	r2, #4
 80231fc:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80231fe:	2304      	movs	r3, #4
 8023200:	e0b1      	b.n	8023366 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8023202:	68fb      	ldr	r3, [r7, #12]
 8023204:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8023206:	f003 0301 	and.w	r3, r3, #1
 802320a:	2b00      	cmp	r3, #0
 802320c:	d004      	beq.n	8023218 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 802320e:	68fb      	ldr	r3, [r7, #12]
 8023210:	2201      	movs	r2, #1
 8023212:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8023214:	2301      	movs	r3, #1
 8023216:	e0a6      	b.n	8023366 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8023218:	68fb      	ldr	r3, [r7, #12]
 802321a:	4a58      	ldr	r2, [pc, #352]	@ (802337c <SDMMC_GetCmdResp1+0x1dc>)
 802321c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 802321e:	68f8      	ldr	r0, [r7, #12]
 8023220:	f7ff fcf6 	bl	8022c10 <SDMMC_GetCommandResponse>
 8023224:	4603      	mov	r3, r0
 8023226:	461a      	mov	r2, r3
 8023228:	7afb      	ldrb	r3, [r7, #11]
 802322a:	4293      	cmp	r3, r2
 802322c:	d001      	beq.n	8023232 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 802322e:	2301      	movs	r3, #1
 8023230:	e099      	b.n	8023366 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8023232:	2100      	movs	r1, #0
 8023234:	68f8      	ldr	r0, [r7, #12]
 8023236:	f7ff fcf8 	bl	8022c2a <SDMMC_GetResponse>
 802323a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 802323c:	697a      	ldr	r2, [r7, #20]
 802323e:	4b50      	ldr	r3, [pc, #320]	@ (8023380 <SDMMC_GetCmdResp1+0x1e0>)
 8023240:	4013      	ands	r3, r2
 8023242:	2b00      	cmp	r3, #0
 8023244:	d101      	bne.n	802324a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8023246:	2300      	movs	r3, #0
 8023248:	e08d      	b.n	8023366 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 802324a:	697b      	ldr	r3, [r7, #20]
 802324c:	2b00      	cmp	r3, #0
 802324e:	da02      	bge.n	8023256 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8023250:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8023254:	e087      	b.n	8023366 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8023256:	697b      	ldr	r3, [r7, #20]
 8023258:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 802325c:	2b00      	cmp	r3, #0
 802325e:	d001      	beq.n	8023264 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8023260:	2340      	movs	r3, #64	@ 0x40
 8023262:	e080      	b.n	8023366 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8023264:	697b      	ldr	r3, [r7, #20]
 8023266:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 802326a:	2b00      	cmp	r3, #0
 802326c:	d001      	beq.n	8023272 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 802326e:	2380      	movs	r3, #128	@ 0x80
 8023270:	e079      	b.n	8023366 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8023272:	697b      	ldr	r3, [r7, #20]
 8023274:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8023278:	2b00      	cmp	r3, #0
 802327a:	d002      	beq.n	8023282 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 802327c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8023280:	e071      	b.n	8023366 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8023282:	697b      	ldr	r3, [r7, #20]
 8023284:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8023288:	2b00      	cmp	r3, #0
 802328a:	d002      	beq.n	8023292 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 802328c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8023290:	e069      	b.n	8023366 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8023292:	697b      	ldr	r3, [r7, #20]
 8023294:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8023298:	2b00      	cmp	r3, #0
 802329a:	d002      	beq.n	80232a2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 802329c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80232a0:	e061      	b.n	8023366 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80232a2:	697b      	ldr	r3, [r7, #20]
 80232a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80232a8:	2b00      	cmp	r3, #0
 80232aa:	d002      	beq.n	80232b2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80232ac:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80232b0:	e059      	b.n	8023366 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80232b2:	697b      	ldr	r3, [r7, #20]
 80232b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80232b8:	2b00      	cmp	r3, #0
 80232ba:	d002      	beq.n	80232c2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80232bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80232c0:	e051      	b.n	8023366 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80232c2:	697b      	ldr	r3, [r7, #20]
 80232c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80232c8:	2b00      	cmp	r3, #0
 80232ca:	d002      	beq.n	80232d2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80232cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80232d0:	e049      	b.n	8023366 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80232d2:	697b      	ldr	r3, [r7, #20]
 80232d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80232d8:	2b00      	cmp	r3, #0
 80232da:	d002      	beq.n	80232e2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80232dc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80232e0:	e041      	b.n	8023366 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80232e2:	697b      	ldr	r3, [r7, #20]
 80232e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80232e8:	2b00      	cmp	r3, #0
 80232ea:	d002      	beq.n	80232f2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80232ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80232f0:	e039      	b.n	8023366 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80232f2:	697b      	ldr	r3, [r7, #20]
 80232f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80232f8:	2b00      	cmp	r3, #0
 80232fa:	d002      	beq.n	8023302 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80232fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8023300:	e031      	b.n	8023366 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8023302:	697b      	ldr	r3, [r7, #20]
 8023304:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8023308:	2b00      	cmp	r3, #0
 802330a:	d002      	beq.n	8023312 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 802330c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8023310:	e029      	b.n	8023366 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8023312:	697b      	ldr	r3, [r7, #20]
 8023314:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8023318:	2b00      	cmp	r3, #0
 802331a:	d002      	beq.n	8023322 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 802331c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8023320:	e021      	b.n	8023366 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8023322:	697b      	ldr	r3, [r7, #20]
 8023324:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8023328:	2b00      	cmp	r3, #0
 802332a:	d002      	beq.n	8023332 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 802332c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8023330:	e019      	b.n	8023366 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8023332:	697b      	ldr	r3, [r7, #20]
 8023334:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8023338:	2b00      	cmp	r3, #0
 802333a:	d002      	beq.n	8023342 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 802333c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8023340:	e011      	b.n	8023366 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8023342:	697b      	ldr	r3, [r7, #20]
 8023344:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8023348:	2b00      	cmp	r3, #0
 802334a:	d002      	beq.n	8023352 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 802334c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8023350:	e009      	b.n	8023366 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8023352:	697b      	ldr	r3, [r7, #20]
 8023354:	f003 0308 	and.w	r3, r3, #8
 8023358:	2b00      	cmp	r3, #0
 802335a:	d002      	beq.n	8023362 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 802335c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8023360:	e001      	b.n	8023366 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8023362:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8023366:	4618      	mov	r0, r3
 8023368:	3720      	adds	r7, #32
 802336a:	46bd      	mov	sp, r7
 802336c:	bd80      	pop	{r7, pc}
 802336e:	bf00      	nop
 8023370:	2400001c 	.word	0x2400001c
 8023374:	10624dd3 	.word	0x10624dd3
 8023378:	00200045 	.word	0x00200045
 802337c:	002000c5 	.word	0x002000c5
 8023380:	fdffe008 	.word	0xfdffe008

08023384 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8023384:	b480      	push	{r7}
 8023386:	b085      	sub	sp, #20
 8023388:	af00      	add	r7, sp, #0
 802338a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 802338c:	4b1f      	ldr	r3, [pc, #124]	@ (802340c <SDMMC_GetCmdResp2+0x88>)
 802338e:	681b      	ldr	r3, [r3, #0]
 8023390:	4a1f      	ldr	r2, [pc, #124]	@ (8023410 <SDMMC_GetCmdResp2+0x8c>)
 8023392:	fba2 2303 	umull	r2, r3, r2, r3
 8023396:	0a5b      	lsrs	r3, r3, #9
 8023398:	f241 3288 	movw	r2, #5000	@ 0x1388
 802339c:	fb02 f303 	mul.w	r3, r2, r3
 80233a0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80233a2:	68fb      	ldr	r3, [r7, #12]
 80233a4:	1e5a      	subs	r2, r3, #1
 80233a6:	60fa      	str	r2, [r7, #12]
 80233a8:	2b00      	cmp	r3, #0
 80233aa:	d102      	bne.n	80233b2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80233ac:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80233b0:	e026      	b.n	8023400 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80233b2:	687b      	ldr	r3, [r7, #4]
 80233b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80233b6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80233b8:	68bb      	ldr	r3, [r7, #8]
 80233ba:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80233be:	2b00      	cmp	r3, #0
 80233c0:	d0ef      	beq.n	80233a2 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80233c2:	68bb      	ldr	r3, [r7, #8]
 80233c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80233c8:	2b00      	cmp	r3, #0
 80233ca:	d1ea      	bne.n	80233a2 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80233cc:	687b      	ldr	r3, [r7, #4]
 80233ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80233d0:	f003 0304 	and.w	r3, r3, #4
 80233d4:	2b00      	cmp	r3, #0
 80233d6:	d004      	beq.n	80233e2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80233d8:	687b      	ldr	r3, [r7, #4]
 80233da:	2204      	movs	r2, #4
 80233dc:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80233de:	2304      	movs	r3, #4
 80233e0:	e00e      	b.n	8023400 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80233e2:	687b      	ldr	r3, [r7, #4]
 80233e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80233e6:	f003 0301 	and.w	r3, r3, #1
 80233ea:	2b00      	cmp	r3, #0
 80233ec:	d004      	beq.n	80233f8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80233ee:	687b      	ldr	r3, [r7, #4]
 80233f0:	2201      	movs	r2, #1
 80233f2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80233f4:	2301      	movs	r3, #1
 80233f6:	e003      	b.n	8023400 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80233f8:	687b      	ldr	r3, [r7, #4]
 80233fa:	4a06      	ldr	r2, [pc, #24]	@ (8023414 <SDMMC_GetCmdResp2+0x90>)
 80233fc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80233fe:	2300      	movs	r3, #0
}
 8023400:	4618      	mov	r0, r3
 8023402:	3714      	adds	r7, #20
 8023404:	46bd      	mov	sp, r7
 8023406:	f85d 7b04 	ldr.w	r7, [sp], #4
 802340a:	4770      	bx	lr
 802340c:	2400001c 	.word	0x2400001c
 8023410:	10624dd3 	.word	0x10624dd3
 8023414:	002000c5 	.word	0x002000c5

08023418 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8023418:	b480      	push	{r7}
 802341a:	b085      	sub	sp, #20
 802341c:	af00      	add	r7, sp, #0
 802341e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8023420:	4b1a      	ldr	r3, [pc, #104]	@ (802348c <SDMMC_GetCmdResp3+0x74>)
 8023422:	681b      	ldr	r3, [r3, #0]
 8023424:	4a1a      	ldr	r2, [pc, #104]	@ (8023490 <SDMMC_GetCmdResp3+0x78>)
 8023426:	fba2 2303 	umull	r2, r3, r2, r3
 802342a:	0a5b      	lsrs	r3, r3, #9
 802342c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8023430:	fb02 f303 	mul.w	r3, r2, r3
 8023434:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8023436:	68fb      	ldr	r3, [r7, #12]
 8023438:	1e5a      	subs	r2, r3, #1
 802343a:	60fa      	str	r2, [r7, #12]
 802343c:	2b00      	cmp	r3, #0
 802343e:	d102      	bne.n	8023446 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8023440:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8023444:	e01b      	b.n	802347e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8023446:	687b      	ldr	r3, [r7, #4]
 8023448:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802344a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 802344c:	68bb      	ldr	r3, [r7, #8]
 802344e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8023452:	2b00      	cmp	r3, #0
 8023454:	d0ef      	beq.n	8023436 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8023456:	68bb      	ldr	r3, [r7, #8]
 8023458:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 802345c:	2b00      	cmp	r3, #0
 802345e:	d1ea      	bne.n	8023436 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8023460:	687b      	ldr	r3, [r7, #4]
 8023462:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8023464:	f003 0304 	and.w	r3, r3, #4
 8023468:	2b00      	cmp	r3, #0
 802346a:	d004      	beq.n	8023476 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 802346c:	687b      	ldr	r3, [r7, #4]
 802346e:	2204      	movs	r2, #4
 8023470:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8023472:	2304      	movs	r3, #4
 8023474:	e003      	b.n	802347e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8023476:	687b      	ldr	r3, [r7, #4]
 8023478:	4a06      	ldr	r2, [pc, #24]	@ (8023494 <SDMMC_GetCmdResp3+0x7c>)
 802347a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 802347c:	2300      	movs	r3, #0
}
 802347e:	4618      	mov	r0, r3
 8023480:	3714      	adds	r7, #20
 8023482:	46bd      	mov	sp, r7
 8023484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023488:	4770      	bx	lr
 802348a:	bf00      	nop
 802348c:	2400001c 	.word	0x2400001c
 8023490:	10624dd3 	.word	0x10624dd3
 8023494:	002000c5 	.word	0x002000c5

08023498 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8023498:	b580      	push	{r7, lr}
 802349a:	b088      	sub	sp, #32
 802349c:	af00      	add	r7, sp, #0
 802349e:	60f8      	str	r0, [r7, #12]
 80234a0:	460b      	mov	r3, r1
 80234a2:	607a      	str	r2, [r7, #4]
 80234a4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80234a6:	4b35      	ldr	r3, [pc, #212]	@ (802357c <SDMMC_GetCmdResp6+0xe4>)
 80234a8:	681b      	ldr	r3, [r3, #0]
 80234aa:	4a35      	ldr	r2, [pc, #212]	@ (8023580 <SDMMC_GetCmdResp6+0xe8>)
 80234ac:	fba2 2303 	umull	r2, r3, r2, r3
 80234b0:	0a5b      	lsrs	r3, r3, #9
 80234b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80234b6:	fb02 f303 	mul.w	r3, r2, r3
 80234ba:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80234bc:	69fb      	ldr	r3, [r7, #28]
 80234be:	1e5a      	subs	r2, r3, #1
 80234c0:	61fa      	str	r2, [r7, #28]
 80234c2:	2b00      	cmp	r3, #0
 80234c4:	d102      	bne.n	80234cc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80234c6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80234ca:	e052      	b.n	8023572 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80234cc:	68fb      	ldr	r3, [r7, #12]
 80234ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80234d0:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80234d2:	69bb      	ldr	r3, [r7, #24]
 80234d4:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80234d8:	2b00      	cmp	r3, #0
 80234da:	d0ef      	beq.n	80234bc <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80234dc:	69bb      	ldr	r3, [r7, #24]
 80234de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80234e2:	2b00      	cmp	r3, #0
 80234e4:	d1ea      	bne.n	80234bc <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80234e6:	68fb      	ldr	r3, [r7, #12]
 80234e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80234ea:	f003 0304 	and.w	r3, r3, #4
 80234ee:	2b00      	cmp	r3, #0
 80234f0:	d004      	beq.n	80234fc <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80234f2:	68fb      	ldr	r3, [r7, #12]
 80234f4:	2204      	movs	r2, #4
 80234f6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80234f8:	2304      	movs	r3, #4
 80234fa:	e03a      	b.n	8023572 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80234fc:	68fb      	ldr	r3, [r7, #12]
 80234fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8023500:	f003 0301 	and.w	r3, r3, #1
 8023504:	2b00      	cmp	r3, #0
 8023506:	d004      	beq.n	8023512 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8023508:	68fb      	ldr	r3, [r7, #12]
 802350a:	2201      	movs	r2, #1
 802350c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 802350e:	2301      	movs	r3, #1
 8023510:	e02f      	b.n	8023572 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8023512:	68f8      	ldr	r0, [r7, #12]
 8023514:	f7ff fb7c 	bl	8022c10 <SDMMC_GetCommandResponse>
 8023518:	4603      	mov	r3, r0
 802351a:	461a      	mov	r2, r3
 802351c:	7afb      	ldrb	r3, [r7, #11]
 802351e:	4293      	cmp	r3, r2
 8023520:	d001      	beq.n	8023526 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8023522:	2301      	movs	r3, #1
 8023524:	e025      	b.n	8023572 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8023526:	68fb      	ldr	r3, [r7, #12]
 8023528:	4a16      	ldr	r2, [pc, #88]	@ (8023584 <SDMMC_GetCmdResp6+0xec>)
 802352a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 802352c:	2100      	movs	r1, #0
 802352e:	68f8      	ldr	r0, [r7, #12]
 8023530:	f7ff fb7b 	bl	8022c2a <SDMMC_GetResponse>
 8023534:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8023536:	697b      	ldr	r3, [r7, #20]
 8023538:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 802353c:	2b00      	cmp	r3, #0
 802353e:	d106      	bne.n	802354e <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8023540:	697b      	ldr	r3, [r7, #20]
 8023542:	0c1b      	lsrs	r3, r3, #16
 8023544:	b29a      	uxth	r2, r3
 8023546:	687b      	ldr	r3, [r7, #4]
 8023548:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 802354a:	2300      	movs	r3, #0
 802354c:	e011      	b.n	8023572 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 802354e:	697b      	ldr	r3, [r7, #20]
 8023550:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8023554:	2b00      	cmp	r3, #0
 8023556:	d002      	beq.n	802355e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8023558:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 802355c:	e009      	b.n	8023572 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 802355e:	697b      	ldr	r3, [r7, #20]
 8023560:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8023564:	2b00      	cmp	r3, #0
 8023566:	d002      	beq.n	802356e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8023568:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 802356c:	e001      	b.n	8023572 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 802356e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8023572:	4618      	mov	r0, r3
 8023574:	3720      	adds	r7, #32
 8023576:	46bd      	mov	sp, r7
 8023578:	bd80      	pop	{r7, pc}
 802357a:	bf00      	nop
 802357c:	2400001c 	.word	0x2400001c
 8023580:	10624dd3 	.word	0x10624dd3
 8023584:	002000c5 	.word	0x002000c5

08023588 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8023588:	b480      	push	{r7}
 802358a:	b085      	sub	sp, #20
 802358c:	af00      	add	r7, sp, #0
 802358e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8023590:	4b22      	ldr	r3, [pc, #136]	@ (802361c <SDMMC_GetCmdResp7+0x94>)
 8023592:	681b      	ldr	r3, [r3, #0]
 8023594:	4a22      	ldr	r2, [pc, #136]	@ (8023620 <SDMMC_GetCmdResp7+0x98>)
 8023596:	fba2 2303 	umull	r2, r3, r2, r3
 802359a:	0a5b      	lsrs	r3, r3, #9
 802359c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80235a0:	fb02 f303 	mul.w	r3, r2, r3
 80235a4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80235a6:	68fb      	ldr	r3, [r7, #12]
 80235a8:	1e5a      	subs	r2, r3, #1
 80235aa:	60fa      	str	r2, [r7, #12]
 80235ac:	2b00      	cmp	r3, #0
 80235ae:	d102      	bne.n	80235b6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80235b0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80235b4:	e02c      	b.n	8023610 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80235b6:	687b      	ldr	r3, [r7, #4]
 80235b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80235ba:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80235bc:	68bb      	ldr	r3, [r7, #8]
 80235be:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80235c2:	2b00      	cmp	r3, #0
 80235c4:	d0ef      	beq.n	80235a6 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80235c6:	68bb      	ldr	r3, [r7, #8]
 80235c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80235cc:	2b00      	cmp	r3, #0
 80235ce:	d1ea      	bne.n	80235a6 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80235d0:	687b      	ldr	r3, [r7, #4]
 80235d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80235d4:	f003 0304 	and.w	r3, r3, #4
 80235d8:	2b00      	cmp	r3, #0
 80235da:	d004      	beq.n	80235e6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80235dc:	687b      	ldr	r3, [r7, #4]
 80235de:	2204      	movs	r2, #4
 80235e0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80235e2:	2304      	movs	r3, #4
 80235e4:	e014      	b.n	8023610 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80235e6:	687b      	ldr	r3, [r7, #4]
 80235e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80235ea:	f003 0301 	and.w	r3, r3, #1
 80235ee:	2b00      	cmp	r3, #0
 80235f0:	d004      	beq.n	80235fc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80235f2:	687b      	ldr	r3, [r7, #4]
 80235f4:	2201      	movs	r2, #1
 80235f6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80235f8:	2301      	movs	r3, #1
 80235fa:	e009      	b.n	8023610 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80235fc:	687b      	ldr	r3, [r7, #4]
 80235fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8023600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8023604:	2b00      	cmp	r3, #0
 8023606:	d002      	beq.n	802360e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8023608:	687b      	ldr	r3, [r7, #4]
 802360a:	2240      	movs	r2, #64	@ 0x40
 802360c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 802360e:	2300      	movs	r3, #0

}
 8023610:	4618      	mov	r0, r3
 8023612:	3714      	adds	r7, #20
 8023614:	46bd      	mov	sp, r7
 8023616:	f85d 7b04 	ldr.w	r7, [sp], #4
 802361a:	4770      	bx	lr
 802361c:	2400001c 	.word	0x2400001c
 8023620:	10624dd3 	.word	0x10624dd3

08023624 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8023624:	b480      	push	{r7}
 8023626:	b085      	sub	sp, #20
 8023628:	af00      	add	r7, sp, #0
 802362a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 802362c:	4b11      	ldr	r3, [pc, #68]	@ (8023674 <SDMMC_GetCmdError+0x50>)
 802362e:	681b      	ldr	r3, [r3, #0]
 8023630:	4a11      	ldr	r2, [pc, #68]	@ (8023678 <SDMMC_GetCmdError+0x54>)
 8023632:	fba2 2303 	umull	r2, r3, r2, r3
 8023636:	0a5b      	lsrs	r3, r3, #9
 8023638:	f241 3288 	movw	r2, #5000	@ 0x1388
 802363c:	fb02 f303 	mul.w	r3, r2, r3
 8023640:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8023642:	68fb      	ldr	r3, [r7, #12]
 8023644:	1e5a      	subs	r2, r3, #1
 8023646:	60fa      	str	r2, [r7, #12]
 8023648:	2b00      	cmp	r3, #0
 802364a:	d102      	bne.n	8023652 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 802364c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8023650:	e009      	b.n	8023666 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8023652:	687b      	ldr	r3, [r7, #4]
 8023654:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8023656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 802365a:	2b00      	cmp	r3, #0
 802365c:	d0f1      	beq.n	8023642 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 802365e:	687b      	ldr	r3, [r7, #4]
 8023660:	4a06      	ldr	r2, [pc, #24]	@ (802367c <SDMMC_GetCmdError+0x58>)
 8023662:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 8023664:	2300      	movs	r3, #0
}
 8023666:	4618      	mov	r0, r3
 8023668:	3714      	adds	r7, #20
 802366a:	46bd      	mov	sp, r7
 802366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023670:	4770      	bx	lr
 8023672:	bf00      	nop
 8023674:	2400001c 	.word	0x2400001c
 8023678:	10624dd3 	.word	0x10624dd3
 802367c:	002000c5 	.word	0x002000c5

08023680 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8023680:	b580      	push	{r7, lr}
 8023682:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8023684:	4904      	ldr	r1, [pc, #16]	@ (8023698 <MX_FATFS_Init+0x18>)
 8023686:	4805      	ldr	r0, [pc, #20]	@ (802369c <MX_FATFS_Init+0x1c>)
 8023688:	f002 fc08 	bl	8025e9c <FATFS_LinkDriver>
 802368c:	4603      	mov	r3, r0
 802368e:	461a      	mov	r2, r3
 8023690:	4b03      	ldr	r3, [pc, #12]	@ (80236a0 <MX_FATFS_Init+0x20>)
 8023692:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8023694:	bf00      	nop
 8023696:	bd80      	pop	{r7, pc}
 8023698:	2400041c 	.word	0x2400041c
 802369c:	08028c88 	.word	0x08028c88
 80236a0:	24000418 	.word	0x24000418

080236a4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80236a4:	b480      	push	{r7}
 80236a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80236a8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80236aa:	4618      	mov	r0, r3
 80236ac:	46bd      	mov	sp, r7
 80236ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80236b2:	4770      	bx	lr

080236b4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80236b4:	b580      	push	{r7, lr}
 80236b6:	b086      	sub	sp, #24
 80236b8:	af00      	add	r7, sp, #0
 80236ba:	60f8      	str	r0, [r7, #12]
 80236bc:	60b9      	str	r1, [r7, #8]
 80236be:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80236c0:	2300      	movs	r3, #0
 80236c2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80236c4:	687b      	ldr	r3, [r7, #4]
 80236c6:	68ba      	ldr	r2, [r7, #8]
 80236c8:	68f9      	ldr	r1, [r7, #12]
 80236ca:	4806      	ldr	r0, [pc, #24]	@ (80236e4 <BSP_SD_ReadBlocks_DMA+0x30>)
 80236cc:	f7fc fc16 	bl	801fefc <HAL_SD_ReadBlocks_DMA>
 80236d0:	4603      	mov	r3, r0
 80236d2:	2b00      	cmp	r3, #0
 80236d4:	d001      	beq.n	80236da <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80236d6:	2301      	movs	r3, #1
 80236d8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80236da:	7dfb      	ldrb	r3, [r7, #23]
}
 80236dc:	4618      	mov	r0, r3
 80236de:	3718      	adds	r7, #24
 80236e0:	46bd      	mov	sp, r7
 80236e2:	bd80      	pop	{r7, pc}
 80236e4:	240002f8 	.word	0x240002f8

080236e8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80236e8:	b580      	push	{r7, lr}
 80236ea:	b086      	sub	sp, #24
 80236ec:	af00      	add	r7, sp, #0
 80236ee:	60f8      	str	r0, [r7, #12]
 80236f0:	60b9      	str	r1, [r7, #8]
 80236f2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80236f4:	2300      	movs	r3, #0
 80236f6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80236f8:	687b      	ldr	r3, [r7, #4]
 80236fa:	68ba      	ldr	r2, [r7, #8]
 80236fc:	68f9      	ldr	r1, [r7, #12]
 80236fe:	4806      	ldr	r0, [pc, #24]	@ (8023718 <BSP_SD_WriteBlocks_DMA+0x30>)
 8023700:	f7fc fca4 	bl	802004c <HAL_SD_WriteBlocks_DMA>
 8023704:	4603      	mov	r3, r0
 8023706:	2b00      	cmp	r3, #0
 8023708:	d001      	beq.n	802370e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 802370a:	2301      	movs	r3, #1
 802370c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 802370e:	7dfb      	ldrb	r3, [r7, #23]
}
 8023710:	4618      	mov	r0, r3
 8023712:	3718      	adds	r7, #24
 8023714:	46bd      	mov	sp, r7
 8023716:	bd80      	pop	{r7, pc}
 8023718:	240002f8 	.word	0x240002f8

0802371c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 802371c:	b580      	push	{r7, lr}
 802371e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8023720:	4805      	ldr	r0, [pc, #20]	@ (8023738 <BSP_SD_GetCardState+0x1c>)
 8023722:	f7fd fa9d 	bl	8020c60 <HAL_SD_GetCardState>
 8023726:	4603      	mov	r3, r0
 8023728:	2b04      	cmp	r3, #4
 802372a:	bf14      	ite	ne
 802372c:	2301      	movne	r3, #1
 802372e:	2300      	moveq	r3, #0
 8023730:	b2db      	uxtb	r3, r3
}
 8023732:	4618      	mov	r0, r3
 8023734:	bd80      	pop	{r7, pc}
 8023736:	bf00      	nop
 8023738:	240002f8 	.word	0x240002f8

0802373c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 802373c:	b580      	push	{r7, lr}
 802373e:	b082      	sub	sp, #8
 8023740:	af00      	add	r7, sp, #0
 8023742:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8023744:	6879      	ldr	r1, [r7, #4]
 8023746:	4803      	ldr	r0, [pc, #12]	@ (8023754 <BSP_SD_GetCardInfo+0x18>)
 8023748:	f7fd f94c 	bl	80209e4 <HAL_SD_GetCardInfo>
}
 802374c:	bf00      	nop
 802374e:	3708      	adds	r7, #8
 8023750:	46bd      	mov	sp, r7
 8023752:	bd80      	pop	{r7, pc}
 8023754:	240002f8 	.word	0x240002f8

08023758 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8023758:	b580      	push	{r7, lr}
 802375a:	b082      	sub	sp, #8
 802375c:	af00      	add	r7, sp, #0
 802375e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8023760:	f000 fa14 	bl	8023b8c <BSP_SD_WriteCpltCallback>
}
 8023764:	bf00      	nop
 8023766:	3708      	adds	r7, #8
 8023768:	46bd      	mov	sp, r7
 802376a:	bd80      	pop	{r7, pc}

0802376c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 802376c:	b580      	push	{r7, lr}
 802376e:	b082      	sub	sp, #8
 8023770:	af00      	add	r7, sp, #0
 8023772:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8023774:	f000 fa16 	bl	8023ba4 <BSP_SD_ReadCpltCallback>
}
 8023778:	bf00      	nop
 802377a:	3708      	adds	r7, #8
 802377c:	46bd      	mov	sp, r7
 802377e:	bd80      	pop	{r7, pc}

08023780 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8023780:	b580      	push	{r7, lr}
 8023782:	b084      	sub	sp, #16
 8023784:	af00      	add	r7, sp, #0
 8023786:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8023788:	f7f5 fe7a 	bl	8019480 <HAL_GetTick>
 802378c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 802378e:	e006      	b.n	802379e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8023790:	f7ff ffc4 	bl	802371c <BSP_SD_GetCardState>
 8023794:	4603      	mov	r3, r0
 8023796:	2b00      	cmp	r3, #0
 8023798:	d101      	bne.n	802379e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 802379a:	2300      	movs	r3, #0
 802379c:	e009      	b.n	80237b2 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 802379e:	f7f5 fe6f 	bl	8019480 <HAL_GetTick>
 80237a2:	4602      	mov	r2, r0
 80237a4:	68fb      	ldr	r3, [r7, #12]
 80237a6:	1ad3      	subs	r3, r2, r3
 80237a8:	687a      	ldr	r2, [r7, #4]
 80237aa:	429a      	cmp	r2, r3
 80237ac:	d8f0      	bhi.n	8023790 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80237ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80237b2:	4618      	mov	r0, r3
 80237b4:	3710      	adds	r7, #16
 80237b6:	46bd      	mov	sp, r7
 80237b8:	bd80      	pop	{r7, pc}
	...

080237bc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80237bc:	b580      	push	{r7, lr}
 80237be:	b082      	sub	sp, #8
 80237c0:	af00      	add	r7, sp, #0
 80237c2:	4603      	mov	r3, r0
 80237c4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80237c6:	4b0b      	ldr	r3, [pc, #44]	@ (80237f4 <SD_CheckStatus+0x38>)
 80237c8:	2201      	movs	r2, #1
 80237ca:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80237cc:	f7ff ffa6 	bl	802371c <BSP_SD_GetCardState>
 80237d0:	4603      	mov	r3, r0
 80237d2:	2b00      	cmp	r3, #0
 80237d4:	d107      	bne.n	80237e6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80237d6:	4b07      	ldr	r3, [pc, #28]	@ (80237f4 <SD_CheckStatus+0x38>)
 80237d8:	781b      	ldrb	r3, [r3, #0]
 80237da:	b2db      	uxtb	r3, r3
 80237dc:	f023 0301 	bic.w	r3, r3, #1
 80237e0:	b2da      	uxtb	r2, r3
 80237e2:	4b04      	ldr	r3, [pc, #16]	@ (80237f4 <SD_CheckStatus+0x38>)
 80237e4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80237e6:	4b03      	ldr	r3, [pc, #12]	@ (80237f4 <SD_CheckStatus+0x38>)
 80237e8:	781b      	ldrb	r3, [r3, #0]
 80237ea:	b2db      	uxtb	r3, r3
}
 80237ec:	4618      	mov	r0, r3
 80237ee:	3708      	adds	r7, #8
 80237f0:	46bd      	mov	sp, r7
 80237f2:	bd80      	pop	{r7, pc}
 80237f4:	24000029 	.word	0x24000029

080237f8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80237f8:	b580      	push	{r7, lr}
 80237fa:	b082      	sub	sp, #8
 80237fc:	af00      	add	r7, sp, #0
 80237fe:	4603      	mov	r3, r0
 8023800:	71fb      	strb	r3, [r7, #7]
  {
    Stat = SD_CheckStatus(lun);
  }

#else
  Stat = SD_CheckStatus(lun);
 8023802:	79fb      	ldrb	r3, [r7, #7]
 8023804:	4618      	mov	r0, r3
 8023806:	f7ff ffd9 	bl	80237bc <SD_CheckStatus>
 802380a:	4603      	mov	r3, r0
 802380c:	461a      	mov	r2, r3
 802380e:	4b04      	ldr	r3, [pc, #16]	@ (8023820 <SD_initialize+0x28>)
 8023810:	701a      	strb	r2, [r3, #0]
#endif

  return Stat;
 8023812:	4b03      	ldr	r3, [pc, #12]	@ (8023820 <SD_initialize+0x28>)
 8023814:	781b      	ldrb	r3, [r3, #0]
 8023816:	b2db      	uxtb	r3, r3
}
 8023818:	4618      	mov	r0, r3
 802381a:	3708      	adds	r7, #8
 802381c:	46bd      	mov	sp, r7
 802381e:	bd80      	pop	{r7, pc}
 8023820:	24000029 	.word	0x24000029

08023824 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8023824:	b580      	push	{r7, lr}
 8023826:	b082      	sub	sp, #8
 8023828:	af00      	add	r7, sp, #0
 802382a:	4603      	mov	r3, r0
 802382c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 802382e:	79fb      	ldrb	r3, [r7, #7]
 8023830:	4618      	mov	r0, r3
 8023832:	f7ff ffc3 	bl	80237bc <SD_CheckStatus>
 8023836:	4603      	mov	r3, r0
}
 8023838:	4618      	mov	r0, r3
 802383a:	3708      	adds	r7, #8
 802383c:	46bd      	mov	sp, r7
 802383e:	bd80      	pop	{r7, pc}

08023840 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8023840:	b580      	push	{r7, lr}
 8023842:	b088      	sub	sp, #32
 8023844:	af00      	add	r7, sp, #0
 8023846:	60b9      	str	r1, [r7, #8]
 8023848:	607a      	str	r2, [r7, #4]
 802384a:	603b      	str	r3, [r7, #0]
 802384c:	4603      	mov	r3, r0
 802384e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8023850:	2301      	movs	r3, #1
 8023852:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8023854:	f247 5030 	movw	r0, #30000	@ 0x7530
 8023858:	f7ff ff92 	bl	8023780 <SD_CheckStatusWithTimeout>
 802385c:	4603      	mov	r3, r0
 802385e:	2b00      	cmp	r3, #0
 8023860:	da01      	bge.n	8023866 <SD_read+0x26>
  {
    return res;
 8023862:	7ffb      	ldrb	r3, [r7, #31]
 8023864:	e08b      	b.n	802397e <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8023866:	68bb      	ldr	r3, [r7, #8]
 8023868:	f003 0303 	and.w	r3, r3, #3
 802386c:	2b00      	cmp	r3, #0
 802386e:	d13b      	bne.n	80238e8 <SD_read+0xa8>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8023870:	683a      	ldr	r2, [r7, #0]
 8023872:	6879      	ldr	r1, [r7, #4]
 8023874:	68b8      	ldr	r0, [r7, #8]
 8023876:	f7ff ff1d 	bl	80236b4 <BSP_SD_ReadBlocks_DMA>
 802387a:	4603      	mov	r3, r0
 802387c:	2b00      	cmp	r3, #0
 802387e:	d17d      	bne.n	802397c <SD_read+0x13c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8023880:	4b41      	ldr	r3, [pc, #260]	@ (8023988 <SD_read+0x148>)
 8023882:	2200      	movs	r2, #0
 8023884:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8023886:	f7f5 fdfb 	bl	8019480 <HAL_GetTick>
 802388a:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 802388c:	bf00      	nop
 802388e:	4b3e      	ldr	r3, [pc, #248]	@ (8023988 <SD_read+0x148>)
 8023890:	681b      	ldr	r3, [r3, #0]
 8023892:	2b00      	cmp	r3, #0
 8023894:	d108      	bne.n	80238a8 <SD_read+0x68>
 8023896:	f7f5 fdf3 	bl	8019480 <HAL_GetTick>
 802389a:	4602      	mov	r2, r0
 802389c:	697b      	ldr	r3, [r7, #20]
 802389e:	1ad3      	subs	r3, r2, r3
 80238a0:	f247 522f 	movw	r2, #29999	@ 0x752f
 80238a4:	4293      	cmp	r3, r2
 80238a6:	d9f2      	bls.n	802388e <SD_read+0x4e>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80238a8:	4b37      	ldr	r3, [pc, #220]	@ (8023988 <SD_read+0x148>)
 80238aa:	681b      	ldr	r3, [r3, #0]
 80238ac:	2b00      	cmp	r3, #0
 80238ae:	d102      	bne.n	80238b6 <SD_read+0x76>
      {
        res = RES_ERROR;
 80238b0:	2301      	movs	r3, #1
 80238b2:	77fb      	strb	r3, [r7, #31]
 80238b4:	e062      	b.n	802397c <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 80238b6:	4b34      	ldr	r3, [pc, #208]	@ (8023988 <SD_read+0x148>)
 80238b8:	2200      	movs	r2, #0
 80238ba:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80238bc:	f7f5 fde0 	bl	8019480 <HAL_GetTick>
 80238c0:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80238c2:	e007      	b.n	80238d4 <SD_read+0x94>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80238c4:	f7ff ff2a 	bl	802371c <BSP_SD_GetCardState>
 80238c8:	4603      	mov	r3, r0
 80238ca:	2b00      	cmp	r3, #0
 80238cc:	d102      	bne.n	80238d4 <SD_read+0x94>
          {
            res = RES_OK;
 80238ce:	2300      	movs	r3, #0
 80238d0:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80238d2:	e053      	b.n	802397c <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80238d4:	f7f5 fdd4 	bl	8019480 <HAL_GetTick>
 80238d8:	4602      	mov	r2, r0
 80238da:	697b      	ldr	r3, [r7, #20]
 80238dc:	1ad3      	subs	r3, r2, r3
 80238de:	f247 522f 	movw	r2, #29999	@ 0x752f
 80238e2:	4293      	cmp	r3, r2
 80238e4:	d9ee      	bls.n	80238c4 <SD_read+0x84>
 80238e6:	e049      	b.n	802397c <SD_read+0x13c>
    else
    {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 80238e8:	2300      	movs	r3, #0
 80238ea:	61bb      	str	r3, [r7, #24]
 80238ec:	e037      	b.n	802395e <SD_read+0x11e>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 80238ee:	687b      	ldr	r3, [r7, #4]
 80238f0:	1c5a      	adds	r2, r3, #1
 80238f2:	607a      	str	r2, [r7, #4]
 80238f4:	2201      	movs	r2, #1
 80238f6:	4619      	mov	r1, r3
 80238f8:	4824      	ldr	r0, [pc, #144]	@ (802398c <SD_read+0x14c>)
 80238fa:	f7ff fedb 	bl	80236b4 <BSP_SD_ReadBlocks_DMA>
 80238fe:	4603      	mov	r3, r0
 8023900:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 8023902:	7fbb      	ldrb	r3, [r7, #30]
 8023904:	2b00      	cmp	r3, #0
 8023906:	d12f      	bne.n	8023968 <SD_read+0x128>
          /* wait until the read is successful or a timeout occurs */

          timeout = HAL_GetTick();
 8023908:	f7f5 fdba 	bl	8019480 <HAL_GetTick>
 802390c:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 802390e:	bf00      	nop
 8023910:	4b1d      	ldr	r3, [pc, #116]	@ (8023988 <SD_read+0x148>)
 8023912:	681b      	ldr	r3, [r3, #0]
 8023914:	2b00      	cmp	r3, #0
 8023916:	d108      	bne.n	802392a <SD_read+0xea>
 8023918:	f7f5 fdb2 	bl	8019480 <HAL_GetTick>
 802391c:	4602      	mov	r2, r0
 802391e:	697b      	ldr	r3, [r7, #20]
 8023920:	1ad3      	subs	r3, r2, r3
 8023922:	f247 522f 	movw	r2, #29999	@ 0x752f
 8023926:	4293      	cmp	r3, r2
 8023928:	d9f2      	bls.n	8023910 <SD_read+0xd0>
          {
          }
          if (ReadStatus == 0)
 802392a:	4b17      	ldr	r3, [pc, #92]	@ (8023988 <SD_read+0x148>)
 802392c:	681b      	ldr	r3, [r3, #0]
 802392e:	2b00      	cmp	r3, #0
 8023930:	d102      	bne.n	8023938 <SD_read+0xf8>
          {
            res = RES_ERROR;
 8023932:	2301      	movs	r3, #1
 8023934:	77fb      	strb	r3, [r7, #31]
            break;
 8023936:	e018      	b.n	802396a <SD_read+0x12a>
          }
          ReadStatus = 0;
 8023938:	4b13      	ldr	r3, [pc, #76]	@ (8023988 <SD_read+0x148>)
 802393a:	2200      	movs	r2, #0
 802393c:	601a      	str	r2, [r3, #0]
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 802393e:	68bb      	ldr	r3, [r7, #8]
 8023940:	4a12      	ldr	r2, [pc, #72]	@ (802398c <SD_read+0x14c>)
 8023942:	4618      	mov	r0, r3
 8023944:	4611      	mov	r1, r2
 8023946:	f44f 7300 	mov.w	r3, #512	@ 0x200
 802394a:	461a      	mov	r2, r3
 802394c:	f003 fbb9 	bl	80270c2 <memcpy>
          buff += BLOCKSIZE;
 8023950:	68bb      	ldr	r3, [r7, #8]
 8023952:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8023956:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 8023958:	69bb      	ldr	r3, [r7, #24]
 802395a:	3301      	adds	r3, #1
 802395c:	61bb      	str	r3, [r7, #24]
 802395e:	69bb      	ldr	r3, [r7, #24]
 8023960:	683a      	ldr	r2, [r7, #0]
 8023962:	429a      	cmp	r2, r3
 8023964:	d8c3      	bhi.n	80238ee <SD_read+0xae>
 8023966:	e000      	b.n	802396a <SD_read+0x12a>
        }
        else
        {
          break;
 8023968:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 802396a:	69bb      	ldr	r3, [r7, #24]
 802396c:	683a      	ldr	r2, [r7, #0]
 802396e:	429a      	cmp	r2, r3
 8023970:	d104      	bne.n	802397c <SD_read+0x13c>
 8023972:	7fbb      	ldrb	r3, [r7, #30]
 8023974:	2b00      	cmp	r3, #0
 8023976:	d101      	bne.n	802397c <SD_read+0x13c>
        res = RES_OK;
 8023978:	2300      	movs	r3, #0
 802397a:	77fb      	strb	r3, [r7, #31]
    }
#endif

  return res;
 802397c:	7ffb      	ldrb	r3, [r7, #31]
}
 802397e:	4618      	mov	r0, r3
 8023980:	3720      	adds	r7, #32
 8023982:	46bd      	mov	sp, r7
 8023984:	bd80      	pop	{r7, pc}
 8023986:	bf00      	nop
 8023988:	24000a84 	.word	0x24000a84
 802398c:	24000880 	.word	0x24000880

08023990 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8023990:	b580      	push	{r7, lr}
 8023992:	b088      	sub	sp, #32
 8023994:	af00      	add	r7, sp, #0
 8023996:	60b9      	str	r1, [r7, #8]
 8023998:	607a      	str	r2, [r7, #4]
 802399a:	603b      	str	r3, [r7, #0]
 802399c:	4603      	mov	r3, r0
 802399e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80239a0:	2301      	movs	r3, #1
 80239a2:	77fb      	strb	r3, [r7, #31]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80239a4:	4b4b      	ldr	r3, [pc, #300]	@ (8023ad4 <SD_write+0x144>)
 80239a6:	2200      	movs	r2, #0
 80239a8:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80239aa:	f247 5030 	movw	r0, #30000	@ 0x7530
 80239ae:	f7ff fee7 	bl	8023780 <SD_CheckStatusWithTimeout>
 80239b2:	4603      	mov	r3, r0
 80239b4:	2b00      	cmp	r3, #0
 80239b6:	da01      	bge.n	80239bc <SD_write+0x2c>
  {
    return res;
 80239b8:	7ffb      	ldrb	r3, [r7, #31]
 80239ba:	e087      	b.n	8023acc <SD_write+0x13c>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 80239bc:	68bb      	ldr	r3, [r7, #8]
 80239be:	f003 0303 	and.w	r3, r3, #3
 80239c2:	2b00      	cmp	r3, #0
 80239c4:	d138      	bne.n	8023a38 <SD_write+0xa8>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80239c6:	683a      	ldr	r2, [r7, #0]
 80239c8:	6879      	ldr	r1, [r7, #4]
 80239ca:	68b8      	ldr	r0, [r7, #8]
 80239cc:	f7ff fe8c 	bl	80236e8 <BSP_SD_WriteBlocks_DMA>
 80239d0:	4603      	mov	r3, r0
 80239d2:	2b00      	cmp	r3, #0
 80239d4:	d179      	bne.n	8023aca <SD_write+0x13a>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80239d6:	f7f5 fd53 	bl	8019480 <HAL_GetTick>
 80239da:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80239dc:	bf00      	nop
 80239de:	4b3d      	ldr	r3, [pc, #244]	@ (8023ad4 <SD_write+0x144>)
 80239e0:	681b      	ldr	r3, [r3, #0]
 80239e2:	2b00      	cmp	r3, #0
 80239e4:	d108      	bne.n	80239f8 <SD_write+0x68>
 80239e6:	f7f5 fd4b 	bl	8019480 <HAL_GetTick>
 80239ea:	4602      	mov	r2, r0
 80239ec:	697b      	ldr	r3, [r7, #20]
 80239ee:	1ad3      	subs	r3, r2, r3
 80239f0:	f247 522f 	movw	r2, #29999	@ 0x752f
 80239f4:	4293      	cmp	r3, r2
 80239f6:	d9f2      	bls.n	80239de <SD_write+0x4e>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80239f8:	4b36      	ldr	r3, [pc, #216]	@ (8023ad4 <SD_write+0x144>)
 80239fa:	681b      	ldr	r3, [r3, #0]
 80239fc:	2b00      	cmp	r3, #0
 80239fe:	d102      	bne.n	8023a06 <SD_write+0x76>
      {
        res = RES_ERROR;
 8023a00:	2301      	movs	r3, #1
 8023a02:	77fb      	strb	r3, [r7, #31]
 8023a04:	e061      	b.n	8023aca <SD_write+0x13a>
      }
      else
      {
        WriteStatus = 0;
 8023a06:	4b33      	ldr	r3, [pc, #204]	@ (8023ad4 <SD_write+0x144>)
 8023a08:	2200      	movs	r2, #0
 8023a0a:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8023a0c:	f7f5 fd38 	bl	8019480 <HAL_GetTick>
 8023a10:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8023a12:	e007      	b.n	8023a24 <SD_write+0x94>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8023a14:	f7ff fe82 	bl	802371c <BSP_SD_GetCardState>
 8023a18:	4603      	mov	r3, r0
 8023a1a:	2b00      	cmp	r3, #0
 8023a1c:	d102      	bne.n	8023a24 <SD_write+0x94>
          {
            res = RES_OK;
 8023a1e:	2300      	movs	r3, #0
 8023a20:	77fb      	strb	r3, [r7, #31]
            break;
 8023a22:	e052      	b.n	8023aca <SD_write+0x13a>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8023a24:	f7f5 fd2c 	bl	8019480 <HAL_GetTick>
 8023a28:	4602      	mov	r2, r0
 8023a2a:	697b      	ldr	r3, [r7, #20]
 8023a2c:	1ad3      	subs	r3, r2, r3
 8023a2e:	f247 522f 	movw	r2, #29999	@ 0x752f
 8023a32:	4293      	cmp	r3, r2
 8023a34:	d9ee      	bls.n	8023a14 <SD_write+0x84>
 8023a36:	e048      	b.n	8023aca <SD_write+0x13a>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 8023a38:	2300      	movs	r3, #0
 8023a3a:	61bb      	str	r3, [r7, #24]
 8023a3c:	e034      	b.n	8023aa8 <SD_write+0x118>
      {
        WriteStatus = 0;
 8023a3e:	4b25      	ldr	r3, [pc, #148]	@ (8023ad4 <SD_write+0x144>)
 8023a40:	2200      	movs	r2, #0
 8023a42:	601a      	str	r2, [r3, #0]

        memcpy((void *)scratch, (void *)buff, BLOCKSIZE);
 8023a44:	4a24      	ldr	r2, [pc, #144]	@ (8023ad8 <SD_write+0x148>)
 8023a46:	68bb      	ldr	r3, [r7, #8]
 8023a48:	4610      	mov	r0, r2
 8023a4a:	4619      	mov	r1, r3
 8023a4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8023a50:	461a      	mov	r2, r3
 8023a52:	f003 fb36 	bl	80270c2 <memcpy>
        buff += BLOCKSIZE;
 8023a56:	68bb      	ldr	r3, [r7, #8]
 8023a58:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8023a5c:	60bb      	str	r3, [r7, #8]

        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8023a5e:	687b      	ldr	r3, [r7, #4]
 8023a60:	1c5a      	adds	r2, r3, #1
 8023a62:	607a      	str	r2, [r7, #4]
 8023a64:	2201      	movs	r2, #1
 8023a66:	4619      	mov	r1, r3
 8023a68:	481b      	ldr	r0, [pc, #108]	@ (8023ad8 <SD_write+0x148>)
 8023a6a:	f7ff fe3d 	bl	80236e8 <BSP_SD_WriteBlocks_DMA>
 8023a6e:	4603      	mov	r3, r0
 8023a70:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 8023a72:	7fbb      	ldrb	r3, [r7, #30]
 8023a74:	2b00      	cmp	r3, #0
 8023a76:	d11c      	bne.n	8023ab2 <SD_write+0x122>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 8023a78:	f7f5 fd02 	bl	8019480 <HAL_GetTick>
 8023a7c:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8023a7e:	bf00      	nop
 8023a80:	4b14      	ldr	r3, [pc, #80]	@ (8023ad4 <SD_write+0x144>)
 8023a82:	681b      	ldr	r3, [r3, #0]
 8023a84:	2b00      	cmp	r3, #0
 8023a86:	d108      	bne.n	8023a9a <SD_write+0x10a>
 8023a88:	f7f5 fcfa 	bl	8019480 <HAL_GetTick>
 8023a8c:	4602      	mov	r2, r0
 8023a8e:	697b      	ldr	r3, [r7, #20]
 8023a90:	1ad3      	subs	r3, r2, r3
 8023a92:	f247 522f 	movw	r2, #29999	@ 0x752f
 8023a96:	4293      	cmp	r3, r2
 8023a98:	d9f2      	bls.n	8023a80 <SD_write+0xf0>
          {
          }
          if (WriteStatus == 0)
 8023a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8023ad4 <SD_write+0x144>)
 8023a9c:	681b      	ldr	r3, [r3, #0]
 8023a9e:	2b00      	cmp	r3, #0
 8023aa0:	d009      	beq.n	8023ab6 <SD_write+0x126>
      for (i = 0; i < count; i++)
 8023aa2:	69bb      	ldr	r3, [r7, #24]
 8023aa4:	3301      	adds	r3, #1
 8023aa6:	61bb      	str	r3, [r7, #24]
 8023aa8:	69bb      	ldr	r3, [r7, #24]
 8023aaa:	683a      	ldr	r2, [r7, #0]
 8023aac:	429a      	cmp	r2, r3
 8023aae:	d8c6      	bhi.n	8023a3e <SD_write+0xae>
 8023ab0:	e002      	b.n	8023ab8 <SD_write+0x128>
          }

        }
        else
        {
          break;
 8023ab2:	bf00      	nop
 8023ab4:	e000      	b.n	8023ab8 <SD_write+0x128>
            break;
 8023ab6:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 8023ab8:	69bb      	ldr	r3, [r7, #24]
 8023aba:	683a      	ldr	r2, [r7, #0]
 8023abc:	429a      	cmp	r2, r3
 8023abe:	d104      	bne.n	8023aca <SD_write+0x13a>
 8023ac0:	7fbb      	ldrb	r3, [r7, #30]
 8023ac2:	2b00      	cmp	r3, #0
 8023ac4:	d101      	bne.n	8023aca <SD_write+0x13a>
        res = RES_OK;
 8023ac6:	2300      	movs	r3, #0
 8023ac8:	77fb      	strb	r3, [r7, #31]
    }
#endif
  return res;
 8023aca:	7ffb      	ldrb	r3, [r7, #31]
}
 8023acc:	4618      	mov	r0, r3
 8023ace:	3720      	adds	r7, #32
 8023ad0:	46bd      	mov	sp, r7
 8023ad2:	bd80      	pop	{r7, pc}
 8023ad4:	24000a80 	.word	0x24000a80
 8023ad8:	24000880 	.word	0x24000880

08023adc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8023adc:	b580      	push	{r7, lr}
 8023ade:	b08c      	sub	sp, #48	@ 0x30
 8023ae0:	af00      	add	r7, sp, #0
 8023ae2:	4603      	mov	r3, r0
 8023ae4:	603a      	str	r2, [r7, #0]
 8023ae6:	71fb      	strb	r3, [r7, #7]
 8023ae8:	460b      	mov	r3, r1
 8023aea:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8023aec:	2301      	movs	r3, #1
 8023aee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8023af2:	4b25      	ldr	r3, [pc, #148]	@ (8023b88 <SD_ioctl+0xac>)
 8023af4:	781b      	ldrb	r3, [r3, #0]
 8023af6:	b2db      	uxtb	r3, r3
 8023af8:	f003 0301 	and.w	r3, r3, #1
 8023afc:	2b00      	cmp	r3, #0
 8023afe:	d001      	beq.n	8023b04 <SD_ioctl+0x28>
 8023b00:	2303      	movs	r3, #3
 8023b02:	e03c      	b.n	8023b7e <SD_ioctl+0xa2>

  switch (cmd)
 8023b04:	79bb      	ldrb	r3, [r7, #6]
 8023b06:	2b03      	cmp	r3, #3
 8023b08:	d834      	bhi.n	8023b74 <SD_ioctl+0x98>
 8023b0a:	a201      	add	r2, pc, #4	@ (adr r2, 8023b10 <SD_ioctl+0x34>)
 8023b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023b10:	08023b21 	.word	0x08023b21
 8023b14:	08023b29 	.word	0x08023b29
 8023b18:	08023b41 	.word	0x08023b41
 8023b1c:	08023b5b 	.word	0x08023b5b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8023b20:	2300      	movs	r3, #0
 8023b22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8023b26:	e028      	b.n	8023b7a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8023b28:	f107 0308 	add.w	r3, r7, #8
 8023b2c:	4618      	mov	r0, r3
 8023b2e:	f7ff fe05 	bl	802373c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8023b32:	6a3a      	ldr	r2, [r7, #32]
 8023b34:	683b      	ldr	r3, [r7, #0]
 8023b36:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8023b38:	2300      	movs	r3, #0
 8023b3a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8023b3e:	e01c      	b.n	8023b7a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8023b40:	f107 0308 	add.w	r3, r7, #8
 8023b44:	4618      	mov	r0, r3
 8023b46:	f7ff fdf9 	bl	802373c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8023b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023b4c:	b29a      	uxth	r2, r3
 8023b4e:	683b      	ldr	r3, [r7, #0]
 8023b50:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8023b52:	2300      	movs	r3, #0
 8023b54:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8023b58:	e00f      	b.n	8023b7a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8023b5a:	f107 0308 	add.w	r3, r7, #8
 8023b5e:	4618      	mov	r0, r3
 8023b60:	f7ff fdec 	bl	802373c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8023b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023b66:	0a5a      	lsrs	r2, r3, #9
 8023b68:	683b      	ldr	r3, [r7, #0]
 8023b6a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8023b6c:	2300      	movs	r3, #0
 8023b6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8023b72:	e002      	b.n	8023b7a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8023b74:	2304      	movs	r3, #4
 8023b76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8023b7a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8023b7e:	4618      	mov	r0, r3
 8023b80:	3730      	adds	r7, #48	@ 0x30
 8023b82:	46bd      	mov	sp, r7
 8023b84:	bd80      	pop	{r7, pc}
 8023b86:	bf00      	nop
 8023b88:	24000029 	.word	0x24000029

08023b8c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8023b8c:	b480      	push	{r7}
 8023b8e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8023b90:	4b03      	ldr	r3, [pc, #12]	@ (8023ba0 <BSP_SD_WriteCpltCallback+0x14>)
 8023b92:	2201      	movs	r2, #1
 8023b94:	601a      	str	r2, [r3, #0]
}
 8023b96:	bf00      	nop
 8023b98:	46bd      	mov	sp, r7
 8023b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023b9e:	4770      	bx	lr
 8023ba0:	24000a80 	.word	0x24000a80

08023ba4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8023ba4:	b480      	push	{r7}
 8023ba6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8023ba8:	4b03      	ldr	r3, [pc, #12]	@ (8023bb8 <BSP_SD_ReadCpltCallback+0x14>)
 8023baa:	2201      	movs	r2, #1
 8023bac:	601a      	str	r2, [r3, #0]
}
 8023bae:	bf00      	nop
 8023bb0:	46bd      	mov	sp, r7
 8023bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023bb6:	4770      	bx	lr
 8023bb8:	24000a84 	.word	0x24000a84

08023bbc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8023bbc:	b580      	push	{r7, lr}
 8023bbe:	b084      	sub	sp, #16
 8023bc0:	af00      	add	r7, sp, #0
 8023bc2:	4603      	mov	r3, r0
 8023bc4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8023bc6:	79fb      	ldrb	r3, [r7, #7]
 8023bc8:	4a08      	ldr	r2, [pc, #32]	@ (8023bec <disk_status+0x30>)
 8023bca:	009b      	lsls	r3, r3, #2
 8023bcc:	4413      	add	r3, r2
 8023bce:	685b      	ldr	r3, [r3, #4]
 8023bd0:	685b      	ldr	r3, [r3, #4]
 8023bd2:	79fa      	ldrb	r2, [r7, #7]
 8023bd4:	4905      	ldr	r1, [pc, #20]	@ (8023bec <disk_status+0x30>)
 8023bd6:	440a      	add	r2, r1
 8023bd8:	7a12      	ldrb	r2, [r2, #8]
 8023bda:	4610      	mov	r0, r2
 8023bdc:	4798      	blx	r3
 8023bde:	4603      	mov	r3, r0
 8023be0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8023be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8023be4:	4618      	mov	r0, r3
 8023be6:	3710      	adds	r7, #16
 8023be8:	46bd      	mov	sp, r7
 8023bea:	bd80      	pop	{r7, pc}
 8023bec:	24000ab0 	.word	0x24000ab0

08023bf0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8023bf0:	b580      	push	{r7, lr}
 8023bf2:	b084      	sub	sp, #16
 8023bf4:	af00      	add	r7, sp, #0
 8023bf6:	4603      	mov	r3, r0
 8023bf8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8023bfa:	2300      	movs	r3, #0
 8023bfc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8023bfe:	79fb      	ldrb	r3, [r7, #7]
 8023c00:	4a0e      	ldr	r2, [pc, #56]	@ (8023c3c <disk_initialize+0x4c>)
 8023c02:	5cd3      	ldrb	r3, [r2, r3]
 8023c04:	2b00      	cmp	r3, #0
 8023c06:	d114      	bne.n	8023c32 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8023c08:	79fb      	ldrb	r3, [r7, #7]
 8023c0a:	4a0c      	ldr	r2, [pc, #48]	@ (8023c3c <disk_initialize+0x4c>)
 8023c0c:	009b      	lsls	r3, r3, #2
 8023c0e:	4413      	add	r3, r2
 8023c10:	685b      	ldr	r3, [r3, #4]
 8023c12:	681b      	ldr	r3, [r3, #0]
 8023c14:	79fa      	ldrb	r2, [r7, #7]
 8023c16:	4909      	ldr	r1, [pc, #36]	@ (8023c3c <disk_initialize+0x4c>)
 8023c18:	440a      	add	r2, r1
 8023c1a:	7a12      	ldrb	r2, [r2, #8]
 8023c1c:	4610      	mov	r0, r2
 8023c1e:	4798      	blx	r3
 8023c20:	4603      	mov	r3, r0
 8023c22:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8023c24:	7bfb      	ldrb	r3, [r7, #15]
 8023c26:	2b00      	cmp	r3, #0
 8023c28:	d103      	bne.n	8023c32 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8023c2a:	79fb      	ldrb	r3, [r7, #7]
 8023c2c:	4a03      	ldr	r2, [pc, #12]	@ (8023c3c <disk_initialize+0x4c>)
 8023c2e:	2101      	movs	r1, #1
 8023c30:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8023c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8023c34:	4618      	mov	r0, r3
 8023c36:	3710      	adds	r7, #16
 8023c38:	46bd      	mov	sp, r7
 8023c3a:	bd80      	pop	{r7, pc}
 8023c3c:	24000ab0 	.word	0x24000ab0

08023c40 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8023c40:	b590      	push	{r4, r7, lr}
 8023c42:	b087      	sub	sp, #28
 8023c44:	af00      	add	r7, sp, #0
 8023c46:	60b9      	str	r1, [r7, #8]
 8023c48:	607a      	str	r2, [r7, #4]
 8023c4a:	603b      	str	r3, [r7, #0]
 8023c4c:	4603      	mov	r3, r0
 8023c4e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8023c50:	7bfb      	ldrb	r3, [r7, #15]
 8023c52:	4a0a      	ldr	r2, [pc, #40]	@ (8023c7c <disk_read+0x3c>)
 8023c54:	009b      	lsls	r3, r3, #2
 8023c56:	4413      	add	r3, r2
 8023c58:	685b      	ldr	r3, [r3, #4]
 8023c5a:	689c      	ldr	r4, [r3, #8]
 8023c5c:	7bfb      	ldrb	r3, [r7, #15]
 8023c5e:	4a07      	ldr	r2, [pc, #28]	@ (8023c7c <disk_read+0x3c>)
 8023c60:	4413      	add	r3, r2
 8023c62:	7a18      	ldrb	r0, [r3, #8]
 8023c64:	683b      	ldr	r3, [r7, #0]
 8023c66:	687a      	ldr	r2, [r7, #4]
 8023c68:	68b9      	ldr	r1, [r7, #8]
 8023c6a:	47a0      	blx	r4
 8023c6c:	4603      	mov	r3, r0
 8023c6e:	75fb      	strb	r3, [r7, #23]
  return res;
 8023c70:	7dfb      	ldrb	r3, [r7, #23]
}
 8023c72:	4618      	mov	r0, r3
 8023c74:	371c      	adds	r7, #28
 8023c76:	46bd      	mov	sp, r7
 8023c78:	bd90      	pop	{r4, r7, pc}
 8023c7a:	bf00      	nop
 8023c7c:	24000ab0 	.word	0x24000ab0

08023c80 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8023c80:	b590      	push	{r4, r7, lr}
 8023c82:	b087      	sub	sp, #28
 8023c84:	af00      	add	r7, sp, #0
 8023c86:	60b9      	str	r1, [r7, #8]
 8023c88:	607a      	str	r2, [r7, #4]
 8023c8a:	603b      	str	r3, [r7, #0]
 8023c8c:	4603      	mov	r3, r0
 8023c8e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8023c90:	7bfb      	ldrb	r3, [r7, #15]
 8023c92:	4a0a      	ldr	r2, [pc, #40]	@ (8023cbc <disk_write+0x3c>)
 8023c94:	009b      	lsls	r3, r3, #2
 8023c96:	4413      	add	r3, r2
 8023c98:	685b      	ldr	r3, [r3, #4]
 8023c9a:	68dc      	ldr	r4, [r3, #12]
 8023c9c:	7bfb      	ldrb	r3, [r7, #15]
 8023c9e:	4a07      	ldr	r2, [pc, #28]	@ (8023cbc <disk_write+0x3c>)
 8023ca0:	4413      	add	r3, r2
 8023ca2:	7a18      	ldrb	r0, [r3, #8]
 8023ca4:	683b      	ldr	r3, [r7, #0]
 8023ca6:	687a      	ldr	r2, [r7, #4]
 8023ca8:	68b9      	ldr	r1, [r7, #8]
 8023caa:	47a0      	blx	r4
 8023cac:	4603      	mov	r3, r0
 8023cae:	75fb      	strb	r3, [r7, #23]
  return res;
 8023cb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8023cb2:	4618      	mov	r0, r3
 8023cb4:	371c      	adds	r7, #28
 8023cb6:	46bd      	mov	sp, r7
 8023cb8:	bd90      	pop	{r4, r7, pc}
 8023cba:	bf00      	nop
 8023cbc:	24000ab0 	.word	0x24000ab0

08023cc0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8023cc0:	b580      	push	{r7, lr}
 8023cc2:	b084      	sub	sp, #16
 8023cc4:	af00      	add	r7, sp, #0
 8023cc6:	4603      	mov	r3, r0
 8023cc8:	603a      	str	r2, [r7, #0]
 8023cca:	71fb      	strb	r3, [r7, #7]
 8023ccc:	460b      	mov	r3, r1
 8023cce:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8023cd0:	79fb      	ldrb	r3, [r7, #7]
 8023cd2:	4a09      	ldr	r2, [pc, #36]	@ (8023cf8 <disk_ioctl+0x38>)
 8023cd4:	009b      	lsls	r3, r3, #2
 8023cd6:	4413      	add	r3, r2
 8023cd8:	685b      	ldr	r3, [r3, #4]
 8023cda:	691b      	ldr	r3, [r3, #16]
 8023cdc:	79fa      	ldrb	r2, [r7, #7]
 8023cde:	4906      	ldr	r1, [pc, #24]	@ (8023cf8 <disk_ioctl+0x38>)
 8023ce0:	440a      	add	r2, r1
 8023ce2:	7a10      	ldrb	r0, [r2, #8]
 8023ce4:	79b9      	ldrb	r1, [r7, #6]
 8023ce6:	683a      	ldr	r2, [r7, #0]
 8023ce8:	4798      	blx	r3
 8023cea:	4603      	mov	r3, r0
 8023cec:	73fb      	strb	r3, [r7, #15]
  return res;
 8023cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8023cf0:	4618      	mov	r0, r3
 8023cf2:	3710      	adds	r7, #16
 8023cf4:	46bd      	mov	sp, r7
 8023cf6:	bd80      	pop	{r7, pc}
 8023cf8:	24000ab0 	.word	0x24000ab0

08023cfc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8023cfc:	b480      	push	{r7}
 8023cfe:	b085      	sub	sp, #20
 8023d00:	af00      	add	r7, sp, #0
 8023d02:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8023d04:	687b      	ldr	r3, [r7, #4]
 8023d06:	3301      	adds	r3, #1
 8023d08:	781b      	ldrb	r3, [r3, #0]
 8023d0a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8023d0c:	89fb      	ldrh	r3, [r7, #14]
 8023d0e:	021b      	lsls	r3, r3, #8
 8023d10:	b21a      	sxth	r2, r3
 8023d12:	687b      	ldr	r3, [r7, #4]
 8023d14:	781b      	ldrb	r3, [r3, #0]
 8023d16:	b21b      	sxth	r3, r3
 8023d18:	4313      	orrs	r3, r2
 8023d1a:	b21b      	sxth	r3, r3
 8023d1c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8023d1e:	89fb      	ldrh	r3, [r7, #14]
}
 8023d20:	4618      	mov	r0, r3
 8023d22:	3714      	adds	r7, #20
 8023d24:	46bd      	mov	sp, r7
 8023d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023d2a:	4770      	bx	lr

08023d2c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8023d2c:	b480      	push	{r7}
 8023d2e:	b085      	sub	sp, #20
 8023d30:	af00      	add	r7, sp, #0
 8023d32:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8023d34:	687b      	ldr	r3, [r7, #4]
 8023d36:	3303      	adds	r3, #3
 8023d38:	781b      	ldrb	r3, [r3, #0]
 8023d3a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8023d3c:	68fb      	ldr	r3, [r7, #12]
 8023d3e:	021b      	lsls	r3, r3, #8
 8023d40:	687a      	ldr	r2, [r7, #4]
 8023d42:	3202      	adds	r2, #2
 8023d44:	7812      	ldrb	r2, [r2, #0]
 8023d46:	4313      	orrs	r3, r2
 8023d48:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8023d4a:	68fb      	ldr	r3, [r7, #12]
 8023d4c:	021b      	lsls	r3, r3, #8
 8023d4e:	687a      	ldr	r2, [r7, #4]
 8023d50:	3201      	adds	r2, #1
 8023d52:	7812      	ldrb	r2, [r2, #0]
 8023d54:	4313      	orrs	r3, r2
 8023d56:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8023d58:	68fb      	ldr	r3, [r7, #12]
 8023d5a:	021b      	lsls	r3, r3, #8
 8023d5c:	687a      	ldr	r2, [r7, #4]
 8023d5e:	7812      	ldrb	r2, [r2, #0]
 8023d60:	4313      	orrs	r3, r2
 8023d62:	60fb      	str	r3, [r7, #12]
	return rv;
 8023d64:	68fb      	ldr	r3, [r7, #12]
}
 8023d66:	4618      	mov	r0, r3
 8023d68:	3714      	adds	r7, #20
 8023d6a:	46bd      	mov	sp, r7
 8023d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023d70:	4770      	bx	lr

08023d72 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8023d72:	b480      	push	{r7}
 8023d74:	b083      	sub	sp, #12
 8023d76:	af00      	add	r7, sp, #0
 8023d78:	6078      	str	r0, [r7, #4]
 8023d7a:	460b      	mov	r3, r1
 8023d7c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8023d7e:	687b      	ldr	r3, [r7, #4]
 8023d80:	1c5a      	adds	r2, r3, #1
 8023d82:	607a      	str	r2, [r7, #4]
 8023d84:	887a      	ldrh	r2, [r7, #2]
 8023d86:	b2d2      	uxtb	r2, r2
 8023d88:	701a      	strb	r2, [r3, #0]
 8023d8a:	887b      	ldrh	r3, [r7, #2]
 8023d8c:	0a1b      	lsrs	r3, r3, #8
 8023d8e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8023d90:	687b      	ldr	r3, [r7, #4]
 8023d92:	1c5a      	adds	r2, r3, #1
 8023d94:	607a      	str	r2, [r7, #4]
 8023d96:	887a      	ldrh	r2, [r7, #2]
 8023d98:	b2d2      	uxtb	r2, r2
 8023d9a:	701a      	strb	r2, [r3, #0]
}
 8023d9c:	bf00      	nop
 8023d9e:	370c      	adds	r7, #12
 8023da0:	46bd      	mov	sp, r7
 8023da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023da6:	4770      	bx	lr

08023da8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8023da8:	b480      	push	{r7}
 8023daa:	b083      	sub	sp, #12
 8023dac:	af00      	add	r7, sp, #0
 8023dae:	6078      	str	r0, [r7, #4]
 8023db0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8023db2:	687b      	ldr	r3, [r7, #4]
 8023db4:	1c5a      	adds	r2, r3, #1
 8023db6:	607a      	str	r2, [r7, #4]
 8023db8:	683a      	ldr	r2, [r7, #0]
 8023dba:	b2d2      	uxtb	r2, r2
 8023dbc:	701a      	strb	r2, [r3, #0]
 8023dbe:	683b      	ldr	r3, [r7, #0]
 8023dc0:	0a1b      	lsrs	r3, r3, #8
 8023dc2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8023dc4:	687b      	ldr	r3, [r7, #4]
 8023dc6:	1c5a      	adds	r2, r3, #1
 8023dc8:	607a      	str	r2, [r7, #4]
 8023dca:	683a      	ldr	r2, [r7, #0]
 8023dcc:	b2d2      	uxtb	r2, r2
 8023dce:	701a      	strb	r2, [r3, #0]
 8023dd0:	683b      	ldr	r3, [r7, #0]
 8023dd2:	0a1b      	lsrs	r3, r3, #8
 8023dd4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8023dd6:	687b      	ldr	r3, [r7, #4]
 8023dd8:	1c5a      	adds	r2, r3, #1
 8023dda:	607a      	str	r2, [r7, #4]
 8023ddc:	683a      	ldr	r2, [r7, #0]
 8023dde:	b2d2      	uxtb	r2, r2
 8023de0:	701a      	strb	r2, [r3, #0]
 8023de2:	683b      	ldr	r3, [r7, #0]
 8023de4:	0a1b      	lsrs	r3, r3, #8
 8023de6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8023de8:	687b      	ldr	r3, [r7, #4]
 8023dea:	1c5a      	adds	r2, r3, #1
 8023dec:	607a      	str	r2, [r7, #4]
 8023dee:	683a      	ldr	r2, [r7, #0]
 8023df0:	b2d2      	uxtb	r2, r2
 8023df2:	701a      	strb	r2, [r3, #0]
}
 8023df4:	bf00      	nop
 8023df6:	370c      	adds	r7, #12
 8023df8:	46bd      	mov	sp, r7
 8023dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023dfe:	4770      	bx	lr

08023e00 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8023e00:	b480      	push	{r7}
 8023e02:	b087      	sub	sp, #28
 8023e04:	af00      	add	r7, sp, #0
 8023e06:	60f8      	str	r0, [r7, #12]
 8023e08:	60b9      	str	r1, [r7, #8]
 8023e0a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8023e0c:	68fb      	ldr	r3, [r7, #12]
 8023e0e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8023e10:	68bb      	ldr	r3, [r7, #8]
 8023e12:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8023e14:	687b      	ldr	r3, [r7, #4]
 8023e16:	2b00      	cmp	r3, #0
 8023e18:	d00d      	beq.n	8023e36 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8023e1a:	693a      	ldr	r2, [r7, #16]
 8023e1c:	1c53      	adds	r3, r2, #1
 8023e1e:	613b      	str	r3, [r7, #16]
 8023e20:	697b      	ldr	r3, [r7, #20]
 8023e22:	1c59      	adds	r1, r3, #1
 8023e24:	6179      	str	r1, [r7, #20]
 8023e26:	7812      	ldrb	r2, [r2, #0]
 8023e28:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8023e2a:	687b      	ldr	r3, [r7, #4]
 8023e2c:	3b01      	subs	r3, #1
 8023e2e:	607b      	str	r3, [r7, #4]
 8023e30:	687b      	ldr	r3, [r7, #4]
 8023e32:	2b00      	cmp	r3, #0
 8023e34:	d1f1      	bne.n	8023e1a <mem_cpy+0x1a>
	}
}
 8023e36:	bf00      	nop
 8023e38:	371c      	adds	r7, #28
 8023e3a:	46bd      	mov	sp, r7
 8023e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023e40:	4770      	bx	lr

08023e42 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8023e42:	b480      	push	{r7}
 8023e44:	b087      	sub	sp, #28
 8023e46:	af00      	add	r7, sp, #0
 8023e48:	60f8      	str	r0, [r7, #12]
 8023e4a:	60b9      	str	r1, [r7, #8]
 8023e4c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8023e4e:	68fb      	ldr	r3, [r7, #12]
 8023e50:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8023e52:	697b      	ldr	r3, [r7, #20]
 8023e54:	1c5a      	adds	r2, r3, #1
 8023e56:	617a      	str	r2, [r7, #20]
 8023e58:	68ba      	ldr	r2, [r7, #8]
 8023e5a:	b2d2      	uxtb	r2, r2
 8023e5c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8023e5e:	687b      	ldr	r3, [r7, #4]
 8023e60:	3b01      	subs	r3, #1
 8023e62:	607b      	str	r3, [r7, #4]
 8023e64:	687b      	ldr	r3, [r7, #4]
 8023e66:	2b00      	cmp	r3, #0
 8023e68:	d1f3      	bne.n	8023e52 <mem_set+0x10>
}
 8023e6a:	bf00      	nop
 8023e6c:	bf00      	nop
 8023e6e:	371c      	adds	r7, #28
 8023e70:	46bd      	mov	sp, r7
 8023e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023e76:	4770      	bx	lr

08023e78 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8023e78:	b480      	push	{r7}
 8023e7a:	b089      	sub	sp, #36	@ 0x24
 8023e7c:	af00      	add	r7, sp, #0
 8023e7e:	60f8      	str	r0, [r7, #12]
 8023e80:	60b9      	str	r1, [r7, #8]
 8023e82:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8023e84:	68fb      	ldr	r3, [r7, #12]
 8023e86:	61fb      	str	r3, [r7, #28]
 8023e88:	68bb      	ldr	r3, [r7, #8]
 8023e8a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8023e8c:	2300      	movs	r3, #0
 8023e8e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8023e90:	69fb      	ldr	r3, [r7, #28]
 8023e92:	1c5a      	adds	r2, r3, #1
 8023e94:	61fa      	str	r2, [r7, #28]
 8023e96:	781b      	ldrb	r3, [r3, #0]
 8023e98:	4619      	mov	r1, r3
 8023e9a:	69bb      	ldr	r3, [r7, #24]
 8023e9c:	1c5a      	adds	r2, r3, #1
 8023e9e:	61ba      	str	r2, [r7, #24]
 8023ea0:	781b      	ldrb	r3, [r3, #0]
 8023ea2:	1acb      	subs	r3, r1, r3
 8023ea4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8023ea6:	687b      	ldr	r3, [r7, #4]
 8023ea8:	3b01      	subs	r3, #1
 8023eaa:	607b      	str	r3, [r7, #4]
 8023eac:	687b      	ldr	r3, [r7, #4]
 8023eae:	2b00      	cmp	r3, #0
 8023eb0:	d002      	beq.n	8023eb8 <mem_cmp+0x40>
 8023eb2:	697b      	ldr	r3, [r7, #20]
 8023eb4:	2b00      	cmp	r3, #0
 8023eb6:	d0eb      	beq.n	8023e90 <mem_cmp+0x18>

	return r;
 8023eb8:	697b      	ldr	r3, [r7, #20]
}
 8023eba:	4618      	mov	r0, r3
 8023ebc:	3724      	adds	r7, #36	@ 0x24
 8023ebe:	46bd      	mov	sp, r7
 8023ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023ec4:	4770      	bx	lr

08023ec6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8023ec6:	b480      	push	{r7}
 8023ec8:	b083      	sub	sp, #12
 8023eca:	af00      	add	r7, sp, #0
 8023ecc:	6078      	str	r0, [r7, #4]
 8023ece:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8023ed0:	e002      	b.n	8023ed8 <chk_chr+0x12>
 8023ed2:	687b      	ldr	r3, [r7, #4]
 8023ed4:	3301      	adds	r3, #1
 8023ed6:	607b      	str	r3, [r7, #4]
 8023ed8:	687b      	ldr	r3, [r7, #4]
 8023eda:	781b      	ldrb	r3, [r3, #0]
 8023edc:	2b00      	cmp	r3, #0
 8023ede:	d005      	beq.n	8023eec <chk_chr+0x26>
 8023ee0:	687b      	ldr	r3, [r7, #4]
 8023ee2:	781b      	ldrb	r3, [r3, #0]
 8023ee4:	461a      	mov	r2, r3
 8023ee6:	683b      	ldr	r3, [r7, #0]
 8023ee8:	4293      	cmp	r3, r2
 8023eea:	d1f2      	bne.n	8023ed2 <chk_chr+0xc>
	return *str;
 8023eec:	687b      	ldr	r3, [r7, #4]
 8023eee:	781b      	ldrb	r3, [r3, #0]
}
 8023ef0:	4618      	mov	r0, r3
 8023ef2:	370c      	adds	r7, #12
 8023ef4:	46bd      	mov	sp, r7
 8023ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023efa:	4770      	bx	lr

08023efc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8023efc:	b480      	push	{r7}
 8023efe:	b085      	sub	sp, #20
 8023f00:	af00      	add	r7, sp, #0
 8023f02:	6078      	str	r0, [r7, #4]
 8023f04:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8023f06:	2300      	movs	r3, #0
 8023f08:	60bb      	str	r3, [r7, #8]
 8023f0a:	68bb      	ldr	r3, [r7, #8]
 8023f0c:	60fb      	str	r3, [r7, #12]
 8023f0e:	e029      	b.n	8023f64 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8023f10:	4a27      	ldr	r2, [pc, #156]	@ (8023fb0 <chk_lock+0xb4>)
 8023f12:	68fb      	ldr	r3, [r7, #12]
 8023f14:	011b      	lsls	r3, r3, #4
 8023f16:	4413      	add	r3, r2
 8023f18:	681b      	ldr	r3, [r3, #0]
 8023f1a:	2b00      	cmp	r3, #0
 8023f1c:	d01d      	beq.n	8023f5a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8023f1e:	4a24      	ldr	r2, [pc, #144]	@ (8023fb0 <chk_lock+0xb4>)
 8023f20:	68fb      	ldr	r3, [r7, #12]
 8023f22:	011b      	lsls	r3, r3, #4
 8023f24:	4413      	add	r3, r2
 8023f26:	681a      	ldr	r2, [r3, #0]
 8023f28:	687b      	ldr	r3, [r7, #4]
 8023f2a:	681b      	ldr	r3, [r3, #0]
 8023f2c:	429a      	cmp	r2, r3
 8023f2e:	d116      	bne.n	8023f5e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8023f30:	4a1f      	ldr	r2, [pc, #124]	@ (8023fb0 <chk_lock+0xb4>)
 8023f32:	68fb      	ldr	r3, [r7, #12]
 8023f34:	011b      	lsls	r3, r3, #4
 8023f36:	4413      	add	r3, r2
 8023f38:	3304      	adds	r3, #4
 8023f3a:	681a      	ldr	r2, [r3, #0]
 8023f3c:	687b      	ldr	r3, [r7, #4]
 8023f3e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8023f40:	429a      	cmp	r2, r3
 8023f42:	d10c      	bne.n	8023f5e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8023f44:	4a1a      	ldr	r2, [pc, #104]	@ (8023fb0 <chk_lock+0xb4>)
 8023f46:	68fb      	ldr	r3, [r7, #12]
 8023f48:	011b      	lsls	r3, r3, #4
 8023f4a:	4413      	add	r3, r2
 8023f4c:	3308      	adds	r3, #8
 8023f4e:	681a      	ldr	r2, [r3, #0]
 8023f50:	687b      	ldr	r3, [r7, #4]
 8023f52:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8023f54:	429a      	cmp	r2, r3
 8023f56:	d102      	bne.n	8023f5e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8023f58:	e007      	b.n	8023f6a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8023f5a:	2301      	movs	r3, #1
 8023f5c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8023f5e:	68fb      	ldr	r3, [r7, #12]
 8023f60:	3301      	adds	r3, #1
 8023f62:	60fb      	str	r3, [r7, #12]
 8023f64:	68fb      	ldr	r3, [r7, #12]
 8023f66:	2b01      	cmp	r3, #1
 8023f68:	d9d2      	bls.n	8023f10 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8023f6a:	68fb      	ldr	r3, [r7, #12]
 8023f6c:	2b02      	cmp	r3, #2
 8023f6e:	d109      	bne.n	8023f84 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8023f70:	68bb      	ldr	r3, [r7, #8]
 8023f72:	2b00      	cmp	r3, #0
 8023f74:	d102      	bne.n	8023f7c <chk_lock+0x80>
 8023f76:	683b      	ldr	r3, [r7, #0]
 8023f78:	2b02      	cmp	r3, #2
 8023f7a:	d101      	bne.n	8023f80 <chk_lock+0x84>
 8023f7c:	2300      	movs	r3, #0
 8023f7e:	e010      	b.n	8023fa2 <chk_lock+0xa6>
 8023f80:	2312      	movs	r3, #18
 8023f82:	e00e      	b.n	8023fa2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8023f84:	683b      	ldr	r3, [r7, #0]
 8023f86:	2b00      	cmp	r3, #0
 8023f88:	d108      	bne.n	8023f9c <chk_lock+0xa0>
 8023f8a:	4a09      	ldr	r2, [pc, #36]	@ (8023fb0 <chk_lock+0xb4>)
 8023f8c:	68fb      	ldr	r3, [r7, #12]
 8023f8e:	011b      	lsls	r3, r3, #4
 8023f90:	4413      	add	r3, r2
 8023f92:	330c      	adds	r3, #12
 8023f94:	881b      	ldrh	r3, [r3, #0]
 8023f96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8023f9a:	d101      	bne.n	8023fa0 <chk_lock+0xa4>
 8023f9c:	2310      	movs	r3, #16
 8023f9e:	e000      	b.n	8023fa2 <chk_lock+0xa6>
 8023fa0:	2300      	movs	r3, #0
}
 8023fa2:	4618      	mov	r0, r3
 8023fa4:	3714      	adds	r7, #20
 8023fa6:	46bd      	mov	sp, r7
 8023fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023fac:	4770      	bx	lr
 8023fae:	bf00      	nop
 8023fb0:	24000a90 	.word	0x24000a90

08023fb4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8023fb4:	b480      	push	{r7}
 8023fb6:	b083      	sub	sp, #12
 8023fb8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8023fba:	2300      	movs	r3, #0
 8023fbc:	607b      	str	r3, [r7, #4]
 8023fbe:	e002      	b.n	8023fc6 <enq_lock+0x12>
 8023fc0:	687b      	ldr	r3, [r7, #4]
 8023fc2:	3301      	adds	r3, #1
 8023fc4:	607b      	str	r3, [r7, #4]
 8023fc6:	687b      	ldr	r3, [r7, #4]
 8023fc8:	2b01      	cmp	r3, #1
 8023fca:	d806      	bhi.n	8023fda <enq_lock+0x26>
 8023fcc:	4a09      	ldr	r2, [pc, #36]	@ (8023ff4 <enq_lock+0x40>)
 8023fce:	687b      	ldr	r3, [r7, #4]
 8023fd0:	011b      	lsls	r3, r3, #4
 8023fd2:	4413      	add	r3, r2
 8023fd4:	681b      	ldr	r3, [r3, #0]
 8023fd6:	2b00      	cmp	r3, #0
 8023fd8:	d1f2      	bne.n	8023fc0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8023fda:	687b      	ldr	r3, [r7, #4]
 8023fdc:	2b02      	cmp	r3, #2
 8023fde:	bf14      	ite	ne
 8023fe0:	2301      	movne	r3, #1
 8023fe2:	2300      	moveq	r3, #0
 8023fe4:	b2db      	uxtb	r3, r3
}
 8023fe6:	4618      	mov	r0, r3
 8023fe8:	370c      	adds	r7, #12
 8023fea:	46bd      	mov	sp, r7
 8023fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023ff0:	4770      	bx	lr
 8023ff2:	bf00      	nop
 8023ff4:	24000a90 	.word	0x24000a90

08023ff8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8023ff8:	b480      	push	{r7}
 8023ffa:	b085      	sub	sp, #20
 8023ffc:	af00      	add	r7, sp, #0
 8023ffe:	6078      	str	r0, [r7, #4]
 8024000:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8024002:	2300      	movs	r3, #0
 8024004:	60fb      	str	r3, [r7, #12]
 8024006:	e01f      	b.n	8024048 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8024008:	4a41      	ldr	r2, [pc, #260]	@ (8024110 <inc_lock+0x118>)
 802400a:	68fb      	ldr	r3, [r7, #12]
 802400c:	011b      	lsls	r3, r3, #4
 802400e:	4413      	add	r3, r2
 8024010:	681a      	ldr	r2, [r3, #0]
 8024012:	687b      	ldr	r3, [r7, #4]
 8024014:	681b      	ldr	r3, [r3, #0]
 8024016:	429a      	cmp	r2, r3
 8024018:	d113      	bne.n	8024042 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 802401a:	4a3d      	ldr	r2, [pc, #244]	@ (8024110 <inc_lock+0x118>)
 802401c:	68fb      	ldr	r3, [r7, #12]
 802401e:	011b      	lsls	r3, r3, #4
 8024020:	4413      	add	r3, r2
 8024022:	3304      	adds	r3, #4
 8024024:	681a      	ldr	r2, [r3, #0]
 8024026:	687b      	ldr	r3, [r7, #4]
 8024028:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 802402a:	429a      	cmp	r2, r3
 802402c:	d109      	bne.n	8024042 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 802402e:	4a38      	ldr	r2, [pc, #224]	@ (8024110 <inc_lock+0x118>)
 8024030:	68fb      	ldr	r3, [r7, #12]
 8024032:	011b      	lsls	r3, r3, #4
 8024034:	4413      	add	r3, r2
 8024036:	3308      	adds	r3, #8
 8024038:	681a      	ldr	r2, [r3, #0]
 802403a:	687b      	ldr	r3, [r7, #4]
 802403c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 802403e:	429a      	cmp	r2, r3
 8024040:	d006      	beq.n	8024050 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8024042:	68fb      	ldr	r3, [r7, #12]
 8024044:	3301      	adds	r3, #1
 8024046:	60fb      	str	r3, [r7, #12]
 8024048:	68fb      	ldr	r3, [r7, #12]
 802404a:	2b01      	cmp	r3, #1
 802404c:	d9dc      	bls.n	8024008 <inc_lock+0x10>
 802404e:	e000      	b.n	8024052 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8024050:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8024052:	68fb      	ldr	r3, [r7, #12]
 8024054:	2b02      	cmp	r3, #2
 8024056:	d132      	bne.n	80240be <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8024058:	2300      	movs	r3, #0
 802405a:	60fb      	str	r3, [r7, #12]
 802405c:	e002      	b.n	8024064 <inc_lock+0x6c>
 802405e:	68fb      	ldr	r3, [r7, #12]
 8024060:	3301      	adds	r3, #1
 8024062:	60fb      	str	r3, [r7, #12]
 8024064:	68fb      	ldr	r3, [r7, #12]
 8024066:	2b01      	cmp	r3, #1
 8024068:	d806      	bhi.n	8024078 <inc_lock+0x80>
 802406a:	4a29      	ldr	r2, [pc, #164]	@ (8024110 <inc_lock+0x118>)
 802406c:	68fb      	ldr	r3, [r7, #12]
 802406e:	011b      	lsls	r3, r3, #4
 8024070:	4413      	add	r3, r2
 8024072:	681b      	ldr	r3, [r3, #0]
 8024074:	2b00      	cmp	r3, #0
 8024076:	d1f2      	bne.n	802405e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8024078:	68fb      	ldr	r3, [r7, #12]
 802407a:	2b02      	cmp	r3, #2
 802407c:	d101      	bne.n	8024082 <inc_lock+0x8a>
 802407e:	2300      	movs	r3, #0
 8024080:	e040      	b.n	8024104 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8024082:	687b      	ldr	r3, [r7, #4]
 8024084:	681a      	ldr	r2, [r3, #0]
 8024086:	4922      	ldr	r1, [pc, #136]	@ (8024110 <inc_lock+0x118>)
 8024088:	68fb      	ldr	r3, [r7, #12]
 802408a:	011b      	lsls	r3, r3, #4
 802408c:	440b      	add	r3, r1
 802408e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8024090:	687b      	ldr	r3, [r7, #4]
 8024092:	689a      	ldr	r2, [r3, #8]
 8024094:	491e      	ldr	r1, [pc, #120]	@ (8024110 <inc_lock+0x118>)
 8024096:	68fb      	ldr	r3, [r7, #12]
 8024098:	011b      	lsls	r3, r3, #4
 802409a:	440b      	add	r3, r1
 802409c:	3304      	adds	r3, #4
 802409e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80240a0:	687b      	ldr	r3, [r7, #4]
 80240a2:	695a      	ldr	r2, [r3, #20]
 80240a4:	491a      	ldr	r1, [pc, #104]	@ (8024110 <inc_lock+0x118>)
 80240a6:	68fb      	ldr	r3, [r7, #12]
 80240a8:	011b      	lsls	r3, r3, #4
 80240aa:	440b      	add	r3, r1
 80240ac:	3308      	adds	r3, #8
 80240ae:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80240b0:	4a17      	ldr	r2, [pc, #92]	@ (8024110 <inc_lock+0x118>)
 80240b2:	68fb      	ldr	r3, [r7, #12]
 80240b4:	011b      	lsls	r3, r3, #4
 80240b6:	4413      	add	r3, r2
 80240b8:	330c      	adds	r3, #12
 80240ba:	2200      	movs	r2, #0
 80240bc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80240be:	683b      	ldr	r3, [r7, #0]
 80240c0:	2b00      	cmp	r3, #0
 80240c2:	d009      	beq.n	80240d8 <inc_lock+0xe0>
 80240c4:	4a12      	ldr	r2, [pc, #72]	@ (8024110 <inc_lock+0x118>)
 80240c6:	68fb      	ldr	r3, [r7, #12]
 80240c8:	011b      	lsls	r3, r3, #4
 80240ca:	4413      	add	r3, r2
 80240cc:	330c      	adds	r3, #12
 80240ce:	881b      	ldrh	r3, [r3, #0]
 80240d0:	2b00      	cmp	r3, #0
 80240d2:	d001      	beq.n	80240d8 <inc_lock+0xe0>
 80240d4:	2300      	movs	r3, #0
 80240d6:	e015      	b.n	8024104 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80240d8:	683b      	ldr	r3, [r7, #0]
 80240da:	2b00      	cmp	r3, #0
 80240dc:	d108      	bne.n	80240f0 <inc_lock+0xf8>
 80240de:	4a0c      	ldr	r2, [pc, #48]	@ (8024110 <inc_lock+0x118>)
 80240e0:	68fb      	ldr	r3, [r7, #12]
 80240e2:	011b      	lsls	r3, r3, #4
 80240e4:	4413      	add	r3, r2
 80240e6:	330c      	adds	r3, #12
 80240e8:	881b      	ldrh	r3, [r3, #0]
 80240ea:	3301      	adds	r3, #1
 80240ec:	b29a      	uxth	r2, r3
 80240ee:	e001      	b.n	80240f4 <inc_lock+0xfc>
 80240f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80240f4:	4906      	ldr	r1, [pc, #24]	@ (8024110 <inc_lock+0x118>)
 80240f6:	68fb      	ldr	r3, [r7, #12]
 80240f8:	011b      	lsls	r3, r3, #4
 80240fa:	440b      	add	r3, r1
 80240fc:	330c      	adds	r3, #12
 80240fe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8024100:	68fb      	ldr	r3, [r7, #12]
 8024102:	3301      	adds	r3, #1
}
 8024104:	4618      	mov	r0, r3
 8024106:	3714      	adds	r7, #20
 8024108:	46bd      	mov	sp, r7
 802410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802410e:	4770      	bx	lr
 8024110:	24000a90 	.word	0x24000a90

08024114 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8024114:	b480      	push	{r7}
 8024116:	b085      	sub	sp, #20
 8024118:	af00      	add	r7, sp, #0
 802411a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 802411c:	687b      	ldr	r3, [r7, #4]
 802411e:	3b01      	subs	r3, #1
 8024120:	607b      	str	r3, [r7, #4]
 8024122:	687b      	ldr	r3, [r7, #4]
 8024124:	2b01      	cmp	r3, #1
 8024126:	d825      	bhi.n	8024174 <dec_lock+0x60>
		n = Files[i].ctr;
 8024128:	4a17      	ldr	r2, [pc, #92]	@ (8024188 <dec_lock+0x74>)
 802412a:	687b      	ldr	r3, [r7, #4]
 802412c:	011b      	lsls	r3, r3, #4
 802412e:	4413      	add	r3, r2
 8024130:	330c      	adds	r3, #12
 8024132:	881b      	ldrh	r3, [r3, #0]
 8024134:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8024136:	89fb      	ldrh	r3, [r7, #14]
 8024138:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 802413c:	d101      	bne.n	8024142 <dec_lock+0x2e>
 802413e:	2300      	movs	r3, #0
 8024140:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8024142:	89fb      	ldrh	r3, [r7, #14]
 8024144:	2b00      	cmp	r3, #0
 8024146:	d002      	beq.n	802414e <dec_lock+0x3a>
 8024148:	89fb      	ldrh	r3, [r7, #14]
 802414a:	3b01      	subs	r3, #1
 802414c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 802414e:	4a0e      	ldr	r2, [pc, #56]	@ (8024188 <dec_lock+0x74>)
 8024150:	687b      	ldr	r3, [r7, #4]
 8024152:	011b      	lsls	r3, r3, #4
 8024154:	4413      	add	r3, r2
 8024156:	330c      	adds	r3, #12
 8024158:	89fa      	ldrh	r2, [r7, #14]
 802415a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 802415c:	89fb      	ldrh	r3, [r7, #14]
 802415e:	2b00      	cmp	r3, #0
 8024160:	d105      	bne.n	802416e <dec_lock+0x5a>
 8024162:	4a09      	ldr	r2, [pc, #36]	@ (8024188 <dec_lock+0x74>)
 8024164:	687b      	ldr	r3, [r7, #4]
 8024166:	011b      	lsls	r3, r3, #4
 8024168:	4413      	add	r3, r2
 802416a:	2200      	movs	r2, #0
 802416c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 802416e:	2300      	movs	r3, #0
 8024170:	737b      	strb	r3, [r7, #13]
 8024172:	e001      	b.n	8024178 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8024174:	2302      	movs	r3, #2
 8024176:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8024178:	7b7b      	ldrb	r3, [r7, #13]
}
 802417a:	4618      	mov	r0, r3
 802417c:	3714      	adds	r7, #20
 802417e:	46bd      	mov	sp, r7
 8024180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024184:	4770      	bx	lr
 8024186:	bf00      	nop
 8024188:	24000a90 	.word	0x24000a90

0802418c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 802418c:	b480      	push	{r7}
 802418e:	b085      	sub	sp, #20
 8024190:	af00      	add	r7, sp, #0
 8024192:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8024194:	2300      	movs	r3, #0
 8024196:	60fb      	str	r3, [r7, #12]
 8024198:	e010      	b.n	80241bc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 802419a:	4a0d      	ldr	r2, [pc, #52]	@ (80241d0 <clear_lock+0x44>)
 802419c:	68fb      	ldr	r3, [r7, #12]
 802419e:	011b      	lsls	r3, r3, #4
 80241a0:	4413      	add	r3, r2
 80241a2:	681b      	ldr	r3, [r3, #0]
 80241a4:	687a      	ldr	r2, [r7, #4]
 80241a6:	429a      	cmp	r2, r3
 80241a8:	d105      	bne.n	80241b6 <clear_lock+0x2a>
 80241aa:	4a09      	ldr	r2, [pc, #36]	@ (80241d0 <clear_lock+0x44>)
 80241ac:	68fb      	ldr	r3, [r7, #12]
 80241ae:	011b      	lsls	r3, r3, #4
 80241b0:	4413      	add	r3, r2
 80241b2:	2200      	movs	r2, #0
 80241b4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80241b6:	68fb      	ldr	r3, [r7, #12]
 80241b8:	3301      	adds	r3, #1
 80241ba:	60fb      	str	r3, [r7, #12]
 80241bc:	68fb      	ldr	r3, [r7, #12]
 80241be:	2b01      	cmp	r3, #1
 80241c0:	d9eb      	bls.n	802419a <clear_lock+0xe>
	}
}
 80241c2:	bf00      	nop
 80241c4:	bf00      	nop
 80241c6:	3714      	adds	r7, #20
 80241c8:	46bd      	mov	sp, r7
 80241ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80241ce:	4770      	bx	lr
 80241d0:	24000a90 	.word	0x24000a90

080241d4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80241d4:	b580      	push	{r7, lr}
 80241d6:	b086      	sub	sp, #24
 80241d8:	af00      	add	r7, sp, #0
 80241da:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80241dc:	2300      	movs	r3, #0
 80241de:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80241e0:	687b      	ldr	r3, [r7, #4]
 80241e2:	78db      	ldrb	r3, [r3, #3]
 80241e4:	2b00      	cmp	r3, #0
 80241e6:	d034      	beq.n	8024252 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80241e8:	687b      	ldr	r3, [r7, #4]
 80241ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80241ec:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80241ee:	687b      	ldr	r3, [r7, #4]
 80241f0:	7858      	ldrb	r0, [r3, #1]
 80241f2:	687b      	ldr	r3, [r7, #4]
 80241f4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80241f8:	2301      	movs	r3, #1
 80241fa:	697a      	ldr	r2, [r7, #20]
 80241fc:	f7ff fd40 	bl	8023c80 <disk_write>
 8024200:	4603      	mov	r3, r0
 8024202:	2b00      	cmp	r3, #0
 8024204:	d002      	beq.n	802420c <sync_window+0x38>
			res = FR_DISK_ERR;
 8024206:	2301      	movs	r3, #1
 8024208:	73fb      	strb	r3, [r7, #15]
 802420a:	e022      	b.n	8024252 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 802420c:	687b      	ldr	r3, [r7, #4]
 802420e:	2200      	movs	r2, #0
 8024210:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8024212:	687b      	ldr	r3, [r7, #4]
 8024214:	6a1b      	ldr	r3, [r3, #32]
 8024216:	697a      	ldr	r2, [r7, #20]
 8024218:	1ad2      	subs	r2, r2, r3
 802421a:	687b      	ldr	r3, [r7, #4]
 802421c:	699b      	ldr	r3, [r3, #24]
 802421e:	429a      	cmp	r2, r3
 8024220:	d217      	bcs.n	8024252 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8024222:	687b      	ldr	r3, [r7, #4]
 8024224:	789b      	ldrb	r3, [r3, #2]
 8024226:	613b      	str	r3, [r7, #16]
 8024228:	e010      	b.n	802424c <sync_window+0x78>
					wsect += fs->fsize;
 802422a:	687b      	ldr	r3, [r7, #4]
 802422c:	699b      	ldr	r3, [r3, #24]
 802422e:	697a      	ldr	r2, [r7, #20]
 8024230:	4413      	add	r3, r2
 8024232:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8024234:	687b      	ldr	r3, [r7, #4]
 8024236:	7858      	ldrb	r0, [r3, #1]
 8024238:	687b      	ldr	r3, [r7, #4]
 802423a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 802423e:	2301      	movs	r3, #1
 8024240:	697a      	ldr	r2, [r7, #20]
 8024242:	f7ff fd1d 	bl	8023c80 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8024246:	693b      	ldr	r3, [r7, #16]
 8024248:	3b01      	subs	r3, #1
 802424a:	613b      	str	r3, [r7, #16]
 802424c:	693b      	ldr	r3, [r7, #16]
 802424e:	2b01      	cmp	r3, #1
 8024250:	d8eb      	bhi.n	802422a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8024252:	7bfb      	ldrb	r3, [r7, #15]
}
 8024254:	4618      	mov	r0, r3
 8024256:	3718      	adds	r7, #24
 8024258:	46bd      	mov	sp, r7
 802425a:	bd80      	pop	{r7, pc}

0802425c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 802425c:	b580      	push	{r7, lr}
 802425e:	b084      	sub	sp, #16
 8024260:	af00      	add	r7, sp, #0
 8024262:	6078      	str	r0, [r7, #4]
 8024264:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8024266:	2300      	movs	r3, #0
 8024268:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 802426a:	687b      	ldr	r3, [r7, #4]
 802426c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802426e:	683a      	ldr	r2, [r7, #0]
 8024270:	429a      	cmp	r2, r3
 8024272:	d01b      	beq.n	80242ac <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8024274:	6878      	ldr	r0, [r7, #4]
 8024276:	f7ff ffad 	bl	80241d4 <sync_window>
 802427a:	4603      	mov	r3, r0
 802427c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 802427e:	7bfb      	ldrb	r3, [r7, #15]
 8024280:	2b00      	cmp	r3, #0
 8024282:	d113      	bne.n	80242ac <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8024284:	687b      	ldr	r3, [r7, #4]
 8024286:	7858      	ldrb	r0, [r3, #1]
 8024288:	687b      	ldr	r3, [r7, #4]
 802428a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 802428e:	2301      	movs	r3, #1
 8024290:	683a      	ldr	r2, [r7, #0]
 8024292:	f7ff fcd5 	bl	8023c40 <disk_read>
 8024296:	4603      	mov	r3, r0
 8024298:	2b00      	cmp	r3, #0
 802429a:	d004      	beq.n	80242a6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 802429c:	f04f 33ff 	mov.w	r3, #4294967295
 80242a0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80242a2:	2301      	movs	r3, #1
 80242a4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80242a6:	687b      	ldr	r3, [r7, #4]
 80242a8:	683a      	ldr	r2, [r7, #0]
 80242aa:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 80242ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80242ae:	4618      	mov	r0, r3
 80242b0:	3710      	adds	r7, #16
 80242b2:	46bd      	mov	sp, r7
 80242b4:	bd80      	pop	{r7, pc}
	...

080242b8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80242b8:	b580      	push	{r7, lr}
 80242ba:	b084      	sub	sp, #16
 80242bc:	af00      	add	r7, sp, #0
 80242be:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80242c0:	6878      	ldr	r0, [r7, #4]
 80242c2:	f7ff ff87 	bl	80241d4 <sync_window>
 80242c6:	4603      	mov	r3, r0
 80242c8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80242ca:	7bfb      	ldrb	r3, [r7, #15]
 80242cc:	2b00      	cmp	r3, #0
 80242ce:	d158      	bne.n	8024382 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80242d0:	687b      	ldr	r3, [r7, #4]
 80242d2:	781b      	ldrb	r3, [r3, #0]
 80242d4:	2b03      	cmp	r3, #3
 80242d6:	d148      	bne.n	802436a <sync_fs+0xb2>
 80242d8:	687b      	ldr	r3, [r7, #4]
 80242da:	791b      	ldrb	r3, [r3, #4]
 80242dc:	2b01      	cmp	r3, #1
 80242de:	d144      	bne.n	802436a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80242e0:	687b      	ldr	r3, [r7, #4]
 80242e2:	3330      	adds	r3, #48	@ 0x30
 80242e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80242e8:	2100      	movs	r1, #0
 80242ea:	4618      	mov	r0, r3
 80242ec:	f7ff fda9 	bl	8023e42 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80242f0:	687b      	ldr	r3, [r7, #4]
 80242f2:	3330      	adds	r3, #48	@ 0x30
 80242f4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80242f8:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80242fc:	4618      	mov	r0, r3
 80242fe:	f7ff fd38 	bl	8023d72 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8024302:	687b      	ldr	r3, [r7, #4]
 8024304:	3330      	adds	r3, #48	@ 0x30
 8024306:	4921      	ldr	r1, [pc, #132]	@ (802438c <sync_fs+0xd4>)
 8024308:	4618      	mov	r0, r3
 802430a:	f7ff fd4d 	bl	8023da8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 802430e:	687b      	ldr	r3, [r7, #4]
 8024310:	3330      	adds	r3, #48	@ 0x30
 8024312:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8024316:	491e      	ldr	r1, [pc, #120]	@ (8024390 <sync_fs+0xd8>)
 8024318:	4618      	mov	r0, r3
 802431a:	f7ff fd45 	bl	8023da8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 802431e:	687b      	ldr	r3, [r7, #4]
 8024320:	3330      	adds	r3, #48	@ 0x30
 8024322:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8024326:	687b      	ldr	r3, [r7, #4]
 8024328:	691b      	ldr	r3, [r3, #16]
 802432a:	4619      	mov	r1, r3
 802432c:	4610      	mov	r0, r2
 802432e:	f7ff fd3b 	bl	8023da8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8024332:	687b      	ldr	r3, [r7, #4]
 8024334:	3330      	adds	r3, #48	@ 0x30
 8024336:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 802433a:	687b      	ldr	r3, [r7, #4]
 802433c:	68db      	ldr	r3, [r3, #12]
 802433e:	4619      	mov	r1, r3
 8024340:	4610      	mov	r0, r2
 8024342:	f7ff fd31 	bl	8023da8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8024346:	687b      	ldr	r3, [r7, #4]
 8024348:	69db      	ldr	r3, [r3, #28]
 802434a:	1c5a      	adds	r2, r3, #1
 802434c:	687b      	ldr	r3, [r7, #4]
 802434e:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8024350:	687b      	ldr	r3, [r7, #4]
 8024352:	7858      	ldrb	r0, [r3, #1]
 8024354:	687b      	ldr	r3, [r7, #4]
 8024356:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 802435a:	687b      	ldr	r3, [r7, #4]
 802435c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 802435e:	2301      	movs	r3, #1
 8024360:	f7ff fc8e 	bl	8023c80 <disk_write>
			fs->fsi_flag = 0;
 8024364:	687b      	ldr	r3, [r7, #4]
 8024366:	2200      	movs	r2, #0
 8024368:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 802436a:	687b      	ldr	r3, [r7, #4]
 802436c:	785b      	ldrb	r3, [r3, #1]
 802436e:	2200      	movs	r2, #0
 8024370:	2100      	movs	r1, #0
 8024372:	4618      	mov	r0, r3
 8024374:	f7ff fca4 	bl	8023cc0 <disk_ioctl>
 8024378:	4603      	mov	r3, r0
 802437a:	2b00      	cmp	r3, #0
 802437c:	d001      	beq.n	8024382 <sync_fs+0xca>
 802437e:	2301      	movs	r3, #1
 8024380:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8024382:	7bfb      	ldrb	r3, [r7, #15]
}
 8024384:	4618      	mov	r0, r3
 8024386:	3710      	adds	r7, #16
 8024388:	46bd      	mov	sp, r7
 802438a:	bd80      	pop	{r7, pc}
 802438c:	41615252 	.word	0x41615252
 8024390:	61417272 	.word	0x61417272

08024394 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8024394:	b480      	push	{r7}
 8024396:	b083      	sub	sp, #12
 8024398:	af00      	add	r7, sp, #0
 802439a:	6078      	str	r0, [r7, #4]
 802439c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 802439e:	683b      	ldr	r3, [r7, #0]
 80243a0:	3b02      	subs	r3, #2
 80243a2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80243a4:	687b      	ldr	r3, [r7, #4]
 80243a6:	695b      	ldr	r3, [r3, #20]
 80243a8:	3b02      	subs	r3, #2
 80243aa:	683a      	ldr	r2, [r7, #0]
 80243ac:	429a      	cmp	r2, r3
 80243ae:	d301      	bcc.n	80243b4 <clust2sect+0x20>
 80243b0:	2300      	movs	r3, #0
 80243b2:	e008      	b.n	80243c6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80243b4:	687b      	ldr	r3, [r7, #4]
 80243b6:	895b      	ldrh	r3, [r3, #10]
 80243b8:	461a      	mov	r2, r3
 80243ba:	683b      	ldr	r3, [r7, #0]
 80243bc:	fb03 f202 	mul.w	r2, r3, r2
 80243c0:	687b      	ldr	r3, [r7, #4]
 80243c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80243c4:	4413      	add	r3, r2
}
 80243c6:	4618      	mov	r0, r3
 80243c8:	370c      	adds	r7, #12
 80243ca:	46bd      	mov	sp, r7
 80243cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80243d0:	4770      	bx	lr

080243d2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80243d2:	b580      	push	{r7, lr}
 80243d4:	b086      	sub	sp, #24
 80243d6:	af00      	add	r7, sp, #0
 80243d8:	6078      	str	r0, [r7, #4]
 80243da:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80243dc:	687b      	ldr	r3, [r7, #4]
 80243de:	681b      	ldr	r3, [r3, #0]
 80243e0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80243e2:	683b      	ldr	r3, [r7, #0]
 80243e4:	2b01      	cmp	r3, #1
 80243e6:	d904      	bls.n	80243f2 <get_fat+0x20>
 80243e8:	693b      	ldr	r3, [r7, #16]
 80243ea:	695b      	ldr	r3, [r3, #20]
 80243ec:	683a      	ldr	r2, [r7, #0]
 80243ee:	429a      	cmp	r2, r3
 80243f0:	d302      	bcc.n	80243f8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80243f2:	2301      	movs	r3, #1
 80243f4:	617b      	str	r3, [r7, #20]
 80243f6:	e08e      	b.n	8024516 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80243f8:	f04f 33ff 	mov.w	r3, #4294967295
 80243fc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80243fe:	693b      	ldr	r3, [r7, #16]
 8024400:	781b      	ldrb	r3, [r3, #0]
 8024402:	2b03      	cmp	r3, #3
 8024404:	d061      	beq.n	80244ca <get_fat+0xf8>
 8024406:	2b03      	cmp	r3, #3
 8024408:	dc7b      	bgt.n	8024502 <get_fat+0x130>
 802440a:	2b01      	cmp	r3, #1
 802440c:	d002      	beq.n	8024414 <get_fat+0x42>
 802440e:	2b02      	cmp	r3, #2
 8024410:	d041      	beq.n	8024496 <get_fat+0xc4>
 8024412:	e076      	b.n	8024502 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8024414:	683b      	ldr	r3, [r7, #0]
 8024416:	60fb      	str	r3, [r7, #12]
 8024418:	68fb      	ldr	r3, [r7, #12]
 802441a:	085b      	lsrs	r3, r3, #1
 802441c:	68fa      	ldr	r2, [r7, #12]
 802441e:	4413      	add	r3, r2
 8024420:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8024422:	693b      	ldr	r3, [r7, #16]
 8024424:	6a1a      	ldr	r2, [r3, #32]
 8024426:	68fb      	ldr	r3, [r7, #12]
 8024428:	0a5b      	lsrs	r3, r3, #9
 802442a:	4413      	add	r3, r2
 802442c:	4619      	mov	r1, r3
 802442e:	6938      	ldr	r0, [r7, #16]
 8024430:	f7ff ff14 	bl	802425c <move_window>
 8024434:	4603      	mov	r3, r0
 8024436:	2b00      	cmp	r3, #0
 8024438:	d166      	bne.n	8024508 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 802443a:	68fb      	ldr	r3, [r7, #12]
 802443c:	1c5a      	adds	r2, r3, #1
 802443e:	60fa      	str	r2, [r7, #12]
 8024440:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8024444:	693a      	ldr	r2, [r7, #16]
 8024446:	4413      	add	r3, r2
 8024448:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 802444c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 802444e:	693b      	ldr	r3, [r7, #16]
 8024450:	6a1a      	ldr	r2, [r3, #32]
 8024452:	68fb      	ldr	r3, [r7, #12]
 8024454:	0a5b      	lsrs	r3, r3, #9
 8024456:	4413      	add	r3, r2
 8024458:	4619      	mov	r1, r3
 802445a:	6938      	ldr	r0, [r7, #16]
 802445c:	f7ff fefe 	bl	802425c <move_window>
 8024460:	4603      	mov	r3, r0
 8024462:	2b00      	cmp	r3, #0
 8024464:	d152      	bne.n	802450c <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8024466:	68fb      	ldr	r3, [r7, #12]
 8024468:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802446c:	693a      	ldr	r2, [r7, #16]
 802446e:	4413      	add	r3, r2
 8024470:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8024474:	021b      	lsls	r3, r3, #8
 8024476:	68ba      	ldr	r2, [r7, #8]
 8024478:	4313      	orrs	r3, r2
 802447a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 802447c:	683b      	ldr	r3, [r7, #0]
 802447e:	f003 0301 	and.w	r3, r3, #1
 8024482:	2b00      	cmp	r3, #0
 8024484:	d002      	beq.n	802448c <get_fat+0xba>
 8024486:	68bb      	ldr	r3, [r7, #8]
 8024488:	091b      	lsrs	r3, r3, #4
 802448a:	e002      	b.n	8024492 <get_fat+0xc0>
 802448c:	68bb      	ldr	r3, [r7, #8]
 802448e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8024492:	617b      	str	r3, [r7, #20]
			break;
 8024494:	e03f      	b.n	8024516 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8024496:	693b      	ldr	r3, [r7, #16]
 8024498:	6a1a      	ldr	r2, [r3, #32]
 802449a:	683b      	ldr	r3, [r7, #0]
 802449c:	0a1b      	lsrs	r3, r3, #8
 802449e:	4413      	add	r3, r2
 80244a0:	4619      	mov	r1, r3
 80244a2:	6938      	ldr	r0, [r7, #16]
 80244a4:	f7ff feda 	bl	802425c <move_window>
 80244a8:	4603      	mov	r3, r0
 80244aa:	2b00      	cmp	r3, #0
 80244ac:	d130      	bne.n	8024510 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80244ae:	693b      	ldr	r3, [r7, #16]
 80244b0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80244b4:	683b      	ldr	r3, [r7, #0]
 80244b6:	005b      	lsls	r3, r3, #1
 80244b8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80244bc:	4413      	add	r3, r2
 80244be:	4618      	mov	r0, r3
 80244c0:	f7ff fc1c 	bl	8023cfc <ld_word>
 80244c4:	4603      	mov	r3, r0
 80244c6:	617b      	str	r3, [r7, #20]
			break;
 80244c8:	e025      	b.n	8024516 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80244ca:	693b      	ldr	r3, [r7, #16]
 80244cc:	6a1a      	ldr	r2, [r3, #32]
 80244ce:	683b      	ldr	r3, [r7, #0]
 80244d0:	09db      	lsrs	r3, r3, #7
 80244d2:	4413      	add	r3, r2
 80244d4:	4619      	mov	r1, r3
 80244d6:	6938      	ldr	r0, [r7, #16]
 80244d8:	f7ff fec0 	bl	802425c <move_window>
 80244dc:	4603      	mov	r3, r0
 80244de:	2b00      	cmp	r3, #0
 80244e0:	d118      	bne.n	8024514 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80244e2:	693b      	ldr	r3, [r7, #16]
 80244e4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80244e8:	683b      	ldr	r3, [r7, #0]
 80244ea:	009b      	lsls	r3, r3, #2
 80244ec:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80244f0:	4413      	add	r3, r2
 80244f2:	4618      	mov	r0, r3
 80244f4:	f7ff fc1a 	bl	8023d2c <ld_dword>
 80244f8:	4603      	mov	r3, r0
 80244fa:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80244fe:	617b      	str	r3, [r7, #20]
			break;
 8024500:	e009      	b.n	8024516 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8024502:	2301      	movs	r3, #1
 8024504:	617b      	str	r3, [r7, #20]
 8024506:	e006      	b.n	8024516 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8024508:	bf00      	nop
 802450a:	e004      	b.n	8024516 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 802450c:	bf00      	nop
 802450e:	e002      	b.n	8024516 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8024510:	bf00      	nop
 8024512:	e000      	b.n	8024516 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8024514:	bf00      	nop
		}
	}

	return val;
 8024516:	697b      	ldr	r3, [r7, #20]
}
 8024518:	4618      	mov	r0, r3
 802451a:	3718      	adds	r7, #24
 802451c:	46bd      	mov	sp, r7
 802451e:	bd80      	pop	{r7, pc}

08024520 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8024520:	b590      	push	{r4, r7, lr}
 8024522:	b089      	sub	sp, #36	@ 0x24
 8024524:	af00      	add	r7, sp, #0
 8024526:	60f8      	str	r0, [r7, #12]
 8024528:	60b9      	str	r1, [r7, #8]
 802452a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 802452c:	2302      	movs	r3, #2
 802452e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8024530:	68bb      	ldr	r3, [r7, #8]
 8024532:	2b01      	cmp	r3, #1
 8024534:	f240 80d9 	bls.w	80246ea <put_fat+0x1ca>
 8024538:	68fb      	ldr	r3, [r7, #12]
 802453a:	695b      	ldr	r3, [r3, #20]
 802453c:	68ba      	ldr	r2, [r7, #8]
 802453e:	429a      	cmp	r2, r3
 8024540:	f080 80d3 	bcs.w	80246ea <put_fat+0x1ca>
		switch (fs->fs_type) {
 8024544:	68fb      	ldr	r3, [r7, #12]
 8024546:	781b      	ldrb	r3, [r3, #0]
 8024548:	2b03      	cmp	r3, #3
 802454a:	f000 8096 	beq.w	802467a <put_fat+0x15a>
 802454e:	2b03      	cmp	r3, #3
 8024550:	f300 80cb 	bgt.w	80246ea <put_fat+0x1ca>
 8024554:	2b01      	cmp	r3, #1
 8024556:	d002      	beq.n	802455e <put_fat+0x3e>
 8024558:	2b02      	cmp	r3, #2
 802455a:	d06e      	beq.n	802463a <put_fat+0x11a>
 802455c:	e0c5      	b.n	80246ea <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 802455e:	68bb      	ldr	r3, [r7, #8]
 8024560:	61bb      	str	r3, [r7, #24]
 8024562:	69bb      	ldr	r3, [r7, #24]
 8024564:	085b      	lsrs	r3, r3, #1
 8024566:	69ba      	ldr	r2, [r7, #24]
 8024568:	4413      	add	r3, r2
 802456a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 802456c:	68fb      	ldr	r3, [r7, #12]
 802456e:	6a1a      	ldr	r2, [r3, #32]
 8024570:	69bb      	ldr	r3, [r7, #24]
 8024572:	0a5b      	lsrs	r3, r3, #9
 8024574:	4413      	add	r3, r2
 8024576:	4619      	mov	r1, r3
 8024578:	68f8      	ldr	r0, [r7, #12]
 802457a:	f7ff fe6f 	bl	802425c <move_window>
 802457e:	4603      	mov	r3, r0
 8024580:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8024582:	7ffb      	ldrb	r3, [r7, #31]
 8024584:	2b00      	cmp	r3, #0
 8024586:	f040 80a9 	bne.w	80246dc <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 802458a:	68fb      	ldr	r3, [r7, #12]
 802458c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8024590:	69bb      	ldr	r3, [r7, #24]
 8024592:	1c59      	adds	r1, r3, #1
 8024594:	61b9      	str	r1, [r7, #24]
 8024596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802459a:	4413      	add	r3, r2
 802459c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 802459e:	68bb      	ldr	r3, [r7, #8]
 80245a0:	f003 0301 	and.w	r3, r3, #1
 80245a4:	2b00      	cmp	r3, #0
 80245a6:	d00d      	beq.n	80245c4 <put_fat+0xa4>
 80245a8:	697b      	ldr	r3, [r7, #20]
 80245aa:	781b      	ldrb	r3, [r3, #0]
 80245ac:	b25b      	sxtb	r3, r3
 80245ae:	f003 030f 	and.w	r3, r3, #15
 80245b2:	b25a      	sxtb	r2, r3
 80245b4:	687b      	ldr	r3, [r7, #4]
 80245b6:	b2db      	uxtb	r3, r3
 80245b8:	011b      	lsls	r3, r3, #4
 80245ba:	b25b      	sxtb	r3, r3
 80245bc:	4313      	orrs	r3, r2
 80245be:	b25b      	sxtb	r3, r3
 80245c0:	b2db      	uxtb	r3, r3
 80245c2:	e001      	b.n	80245c8 <put_fat+0xa8>
 80245c4:	687b      	ldr	r3, [r7, #4]
 80245c6:	b2db      	uxtb	r3, r3
 80245c8:	697a      	ldr	r2, [r7, #20]
 80245ca:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80245cc:	68fb      	ldr	r3, [r7, #12]
 80245ce:	2201      	movs	r2, #1
 80245d0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80245d2:	68fb      	ldr	r3, [r7, #12]
 80245d4:	6a1a      	ldr	r2, [r3, #32]
 80245d6:	69bb      	ldr	r3, [r7, #24]
 80245d8:	0a5b      	lsrs	r3, r3, #9
 80245da:	4413      	add	r3, r2
 80245dc:	4619      	mov	r1, r3
 80245de:	68f8      	ldr	r0, [r7, #12]
 80245e0:	f7ff fe3c 	bl	802425c <move_window>
 80245e4:	4603      	mov	r3, r0
 80245e6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80245e8:	7ffb      	ldrb	r3, [r7, #31]
 80245ea:	2b00      	cmp	r3, #0
 80245ec:	d178      	bne.n	80246e0 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80245ee:	68fb      	ldr	r3, [r7, #12]
 80245f0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80245f4:	69bb      	ldr	r3, [r7, #24]
 80245f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80245fa:	4413      	add	r3, r2
 80245fc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80245fe:	68bb      	ldr	r3, [r7, #8]
 8024600:	f003 0301 	and.w	r3, r3, #1
 8024604:	2b00      	cmp	r3, #0
 8024606:	d003      	beq.n	8024610 <put_fat+0xf0>
 8024608:	687b      	ldr	r3, [r7, #4]
 802460a:	091b      	lsrs	r3, r3, #4
 802460c:	b2db      	uxtb	r3, r3
 802460e:	e00e      	b.n	802462e <put_fat+0x10e>
 8024610:	697b      	ldr	r3, [r7, #20]
 8024612:	781b      	ldrb	r3, [r3, #0]
 8024614:	b25b      	sxtb	r3, r3
 8024616:	f023 030f 	bic.w	r3, r3, #15
 802461a:	b25a      	sxtb	r2, r3
 802461c:	687b      	ldr	r3, [r7, #4]
 802461e:	0a1b      	lsrs	r3, r3, #8
 8024620:	b25b      	sxtb	r3, r3
 8024622:	f003 030f 	and.w	r3, r3, #15
 8024626:	b25b      	sxtb	r3, r3
 8024628:	4313      	orrs	r3, r2
 802462a:	b25b      	sxtb	r3, r3
 802462c:	b2db      	uxtb	r3, r3
 802462e:	697a      	ldr	r2, [r7, #20]
 8024630:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8024632:	68fb      	ldr	r3, [r7, #12]
 8024634:	2201      	movs	r2, #1
 8024636:	70da      	strb	r2, [r3, #3]
			break;
 8024638:	e057      	b.n	80246ea <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 802463a:	68fb      	ldr	r3, [r7, #12]
 802463c:	6a1a      	ldr	r2, [r3, #32]
 802463e:	68bb      	ldr	r3, [r7, #8]
 8024640:	0a1b      	lsrs	r3, r3, #8
 8024642:	4413      	add	r3, r2
 8024644:	4619      	mov	r1, r3
 8024646:	68f8      	ldr	r0, [r7, #12]
 8024648:	f7ff fe08 	bl	802425c <move_window>
 802464c:	4603      	mov	r3, r0
 802464e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8024650:	7ffb      	ldrb	r3, [r7, #31]
 8024652:	2b00      	cmp	r3, #0
 8024654:	d146      	bne.n	80246e4 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8024656:	68fb      	ldr	r3, [r7, #12]
 8024658:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 802465c:	68bb      	ldr	r3, [r7, #8]
 802465e:	005b      	lsls	r3, r3, #1
 8024660:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8024664:	4413      	add	r3, r2
 8024666:	687a      	ldr	r2, [r7, #4]
 8024668:	b292      	uxth	r2, r2
 802466a:	4611      	mov	r1, r2
 802466c:	4618      	mov	r0, r3
 802466e:	f7ff fb80 	bl	8023d72 <st_word>
			fs->wflag = 1;
 8024672:	68fb      	ldr	r3, [r7, #12]
 8024674:	2201      	movs	r2, #1
 8024676:	70da      	strb	r2, [r3, #3]
			break;
 8024678:	e037      	b.n	80246ea <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 802467a:	68fb      	ldr	r3, [r7, #12]
 802467c:	6a1a      	ldr	r2, [r3, #32]
 802467e:	68bb      	ldr	r3, [r7, #8]
 8024680:	09db      	lsrs	r3, r3, #7
 8024682:	4413      	add	r3, r2
 8024684:	4619      	mov	r1, r3
 8024686:	68f8      	ldr	r0, [r7, #12]
 8024688:	f7ff fde8 	bl	802425c <move_window>
 802468c:	4603      	mov	r3, r0
 802468e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8024690:	7ffb      	ldrb	r3, [r7, #31]
 8024692:	2b00      	cmp	r3, #0
 8024694:	d128      	bne.n	80246e8 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8024696:	687b      	ldr	r3, [r7, #4]
 8024698:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 802469c:	68fb      	ldr	r3, [r7, #12]
 802469e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80246a2:	68bb      	ldr	r3, [r7, #8]
 80246a4:	009b      	lsls	r3, r3, #2
 80246a6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80246aa:	4413      	add	r3, r2
 80246ac:	4618      	mov	r0, r3
 80246ae:	f7ff fb3d 	bl	8023d2c <ld_dword>
 80246b2:	4603      	mov	r3, r0
 80246b4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80246b8:	4323      	orrs	r3, r4
 80246ba:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80246bc:	68fb      	ldr	r3, [r7, #12]
 80246be:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80246c2:	68bb      	ldr	r3, [r7, #8]
 80246c4:	009b      	lsls	r3, r3, #2
 80246c6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80246ca:	4413      	add	r3, r2
 80246cc:	6879      	ldr	r1, [r7, #4]
 80246ce:	4618      	mov	r0, r3
 80246d0:	f7ff fb6a 	bl	8023da8 <st_dword>
			fs->wflag = 1;
 80246d4:	68fb      	ldr	r3, [r7, #12]
 80246d6:	2201      	movs	r2, #1
 80246d8:	70da      	strb	r2, [r3, #3]
			break;
 80246da:	e006      	b.n	80246ea <put_fat+0x1ca>
			if (res != FR_OK) break;
 80246dc:	bf00      	nop
 80246de:	e004      	b.n	80246ea <put_fat+0x1ca>
			if (res != FR_OK) break;
 80246e0:	bf00      	nop
 80246e2:	e002      	b.n	80246ea <put_fat+0x1ca>
			if (res != FR_OK) break;
 80246e4:	bf00      	nop
 80246e6:	e000      	b.n	80246ea <put_fat+0x1ca>
			if (res != FR_OK) break;
 80246e8:	bf00      	nop
		}
	}
	return res;
 80246ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80246ec:	4618      	mov	r0, r3
 80246ee:	3724      	adds	r7, #36	@ 0x24
 80246f0:	46bd      	mov	sp, r7
 80246f2:	bd90      	pop	{r4, r7, pc}

080246f4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80246f4:	b580      	push	{r7, lr}
 80246f6:	b088      	sub	sp, #32
 80246f8:	af00      	add	r7, sp, #0
 80246fa:	60f8      	str	r0, [r7, #12]
 80246fc:	60b9      	str	r1, [r7, #8]
 80246fe:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8024700:	2300      	movs	r3, #0
 8024702:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8024704:	68fb      	ldr	r3, [r7, #12]
 8024706:	681b      	ldr	r3, [r3, #0]
 8024708:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 802470a:	68bb      	ldr	r3, [r7, #8]
 802470c:	2b01      	cmp	r3, #1
 802470e:	d904      	bls.n	802471a <remove_chain+0x26>
 8024710:	69bb      	ldr	r3, [r7, #24]
 8024712:	695b      	ldr	r3, [r3, #20]
 8024714:	68ba      	ldr	r2, [r7, #8]
 8024716:	429a      	cmp	r2, r3
 8024718:	d301      	bcc.n	802471e <remove_chain+0x2a>
 802471a:	2302      	movs	r3, #2
 802471c:	e04b      	b.n	80247b6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 802471e:	687b      	ldr	r3, [r7, #4]
 8024720:	2b00      	cmp	r3, #0
 8024722:	d00c      	beq.n	802473e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8024724:	f04f 32ff 	mov.w	r2, #4294967295
 8024728:	6879      	ldr	r1, [r7, #4]
 802472a:	69b8      	ldr	r0, [r7, #24]
 802472c:	f7ff fef8 	bl	8024520 <put_fat>
 8024730:	4603      	mov	r3, r0
 8024732:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8024734:	7ffb      	ldrb	r3, [r7, #31]
 8024736:	2b00      	cmp	r3, #0
 8024738:	d001      	beq.n	802473e <remove_chain+0x4a>
 802473a:	7ffb      	ldrb	r3, [r7, #31]
 802473c:	e03b      	b.n	80247b6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 802473e:	68b9      	ldr	r1, [r7, #8]
 8024740:	68f8      	ldr	r0, [r7, #12]
 8024742:	f7ff fe46 	bl	80243d2 <get_fat>
 8024746:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8024748:	697b      	ldr	r3, [r7, #20]
 802474a:	2b00      	cmp	r3, #0
 802474c:	d031      	beq.n	80247b2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 802474e:	697b      	ldr	r3, [r7, #20]
 8024750:	2b01      	cmp	r3, #1
 8024752:	d101      	bne.n	8024758 <remove_chain+0x64>
 8024754:	2302      	movs	r3, #2
 8024756:	e02e      	b.n	80247b6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8024758:	697b      	ldr	r3, [r7, #20]
 802475a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802475e:	d101      	bne.n	8024764 <remove_chain+0x70>
 8024760:	2301      	movs	r3, #1
 8024762:	e028      	b.n	80247b6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8024764:	2200      	movs	r2, #0
 8024766:	68b9      	ldr	r1, [r7, #8]
 8024768:	69b8      	ldr	r0, [r7, #24]
 802476a:	f7ff fed9 	bl	8024520 <put_fat>
 802476e:	4603      	mov	r3, r0
 8024770:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8024772:	7ffb      	ldrb	r3, [r7, #31]
 8024774:	2b00      	cmp	r3, #0
 8024776:	d001      	beq.n	802477c <remove_chain+0x88>
 8024778:	7ffb      	ldrb	r3, [r7, #31]
 802477a:	e01c      	b.n	80247b6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 802477c:	69bb      	ldr	r3, [r7, #24]
 802477e:	691a      	ldr	r2, [r3, #16]
 8024780:	69bb      	ldr	r3, [r7, #24]
 8024782:	695b      	ldr	r3, [r3, #20]
 8024784:	3b02      	subs	r3, #2
 8024786:	429a      	cmp	r2, r3
 8024788:	d20b      	bcs.n	80247a2 <remove_chain+0xae>
			fs->free_clst++;
 802478a:	69bb      	ldr	r3, [r7, #24]
 802478c:	691b      	ldr	r3, [r3, #16]
 802478e:	1c5a      	adds	r2, r3, #1
 8024790:	69bb      	ldr	r3, [r7, #24]
 8024792:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8024794:	69bb      	ldr	r3, [r7, #24]
 8024796:	791b      	ldrb	r3, [r3, #4]
 8024798:	f043 0301 	orr.w	r3, r3, #1
 802479c:	b2da      	uxtb	r2, r3
 802479e:	69bb      	ldr	r3, [r7, #24]
 80247a0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80247a2:	697b      	ldr	r3, [r7, #20]
 80247a4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80247a6:	69bb      	ldr	r3, [r7, #24]
 80247a8:	695b      	ldr	r3, [r3, #20]
 80247aa:	68ba      	ldr	r2, [r7, #8]
 80247ac:	429a      	cmp	r2, r3
 80247ae:	d3c6      	bcc.n	802473e <remove_chain+0x4a>
 80247b0:	e000      	b.n	80247b4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80247b2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80247b4:	2300      	movs	r3, #0
}
 80247b6:	4618      	mov	r0, r3
 80247b8:	3720      	adds	r7, #32
 80247ba:	46bd      	mov	sp, r7
 80247bc:	bd80      	pop	{r7, pc}

080247be <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80247be:	b580      	push	{r7, lr}
 80247c0:	b088      	sub	sp, #32
 80247c2:	af00      	add	r7, sp, #0
 80247c4:	6078      	str	r0, [r7, #4]
 80247c6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80247c8:	687b      	ldr	r3, [r7, #4]
 80247ca:	681b      	ldr	r3, [r3, #0]
 80247cc:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80247ce:	683b      	ldr	r3, [r7, #0]
 80247d0:	2b00      	cmp	r3, #0
 80247d2:	d10d      	bne.n	80247f0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80247d4:	693b      	ldr	r3, [r7, #16]
 80247d6:	68db      	ldr	r3, [r3, #12]
 80247d8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80247da:	69bb      	ldr	r3, [r7, #24]
 80247dc:	2b00      	cmp	r3, #0
 80247de:	d004      	beq.n	80247ea <create_chain+0x2c>
 80247e0:	693b      	ldr	r3, [r7, #16]
 80247e2:	695b      	ldr	r3, [r3, #20]
 80247e4:	69ba      	ldr	r2, [r7, #24]
 80247e6:	429a      	cmp	r2, r3
 80247e8:	d31b      	bcc.n	8024822 <create_chain+0x64>
 80247ea:	2301      	movs	r3, #1
 80247ec:	61bb      	str	r3, [r7, #24]
 80247ee:	e018      	b.n	8024822 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80247f0:	6839      	ldr	r1, [r7, #0]
 80247f2:	6878      	ldr	r0, [r7, #4]
 80247f4:	f7ff fded 	bl	80243d2 <get_fat>
 80247f8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80247fa:	68fb      	ldr	r3, [r7, #12]
 80247fc:	2b01      	cmp	r3, #1
 80247fe:	d801      	bhi.n	8024804 <create_chain+0x46>
 8024800:	2301      	movs	r3, #1
 8024802:	e070      	b.n	80248e6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8024804:	68fb      	ldr	r3, [r7, #12]
 8024806:	f1b3 3fff 	cmp.w	r3, #4294967295
 802480a:	d101      	bne.n	8024810 <create_chain+0x52>
 802480c:	68fb      	ldr	r3, [r7, #12]
 802480e:	e06a      	b.n	80248e6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8024810:	693b      	ldr	r3, [r7, #16]
 8024812:	695b      	ldr	r3, [r3, #20]
 8024814:	68fa      	ldr	r2, [r7, #12]
 8024816:	429a      	cmp	r2, r3
 8024818:	d201      	bcs.n	802481e <create_chain+0x60>
 802481a:	68fb      	ldr	r3, [r7, #12]
 802481c:	e063      	b.n	80248e6 <create_chain+0x128>
		scl = clst;
 802481e:	683b      	ldr	r3, [r7, #0]
 8024820:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8024822:	69bb      	ldr	r3, [r7, #24]
 8024824:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8024826:	69fb      	ldr	r3, [r7, #28]
 8024828:	3301      	adds	r3, #1
 802482a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 802482c:	693b      	ldr	r3, [r7, #16]
 802482e:	695b      	ldr	r3, [r3, #20]
 8024830:	69fa      	ldr	r2, [r7, #28]
 8024832:	429a      	cmp	r2, r3
 8024834:	d307      	bcc.n	8024846 <create_chain+0x88>
				ncl = 2;
 8024836:	2302      	movs	r3, #2
 8024838:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 802483a:	69fa      	ldr	r2, [r7, #28]
 802483c:	69bb      	ldr	r3, [r7, #24]
 802483e:	429a      	cmp	r2, r3
 8024840:	d901      	bls.n	8024846 <create_chain+0x88>
 8024842:	2300      	movs	r3, #0
 8024844:	e04f      	b.n	80248e6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8024846:	69f9      	ldr	r1, [r7, #28]
 8024848:	6878      	ldr	r0, [r7, #4]
 802484a:	f7ff fdc2 	bl	80243d2 <get_fat>
 802484e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8024850:	68fb      	ldr	r3, [r7, #12]
 8024852:	2b00      	cmp	r3, #0
 8024854:	d00e      	beq.n	8024874 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8024856:	68fb      	ldr	r3, [r7, #12]
 8024858:	2b01      	cmp	r3, #1
 802485a:	d003      	beq.n	8024864 <create_chain+0xa6>
 802485c:	68fb      	ldr	r3, [r7, #12]
 802485e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024862:	d101      	bne.n	8024868 <create_chain+0xaa>
 8024864:	68fb      	ldr	r3, [r7, #12]
 8024866:	e03e      	b.n	80248e6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8024868:	69fa      	ldr	r2, [r7, #28]
 802486a:	69bb      	ldr	r3, [r7, #24]
 802486c:	429a      	cmp	r2, r3
 802486e:	d1da      	bne.n	8024826 <create_chain+0x68>
 8024870:	2300      	movs	r3, #0
 8024872:	e038      	b.n	80248e6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8024874:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8024876:	f04f 32ff 	mov.w	r2, #4294967295
 802487a:	69f9      	ldr	r1, [r7, #28]
 802487c:	6938      	ldr	r0, [r7, #16]
 802487e:	f7ff fe4f 	bl	8024520 <put_fat>
 8024882:	4603      	mov	r3, r0
 8024884:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8024886:	7dfb      	ldrb	r3, [r7, #23]
 8024888:	2b00      	cmp	r3, #0
 802488a:	d109      	bne.n	80248a0 <create_chain+0xe2>
 802488c:	683b      	ldr	r3, [r7, #0]
 802488e:	2b00      	cmp	r3, #0
 8024890:	d006      	beq.n	80248a0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8024892:	69fa      	ldr	r2, [r7, #28]
 8024894:	6839      	ldr	r1, [r7, #0]
 8024896:	6938      	ldr	r0, [r7, #16]
 8024898:	f7ff fe42 	bl	8024520 <put_fat>
 802489c:	4603      	mov	r3, r0
 802489e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80248a0:	7dfb      	ldrb	r3, [r7, #23]
 80248a2:	2b00      	cmp	r3, #0
 80248a4:	d116      	bne.n	80248d4 <create_chain+0x116>
		fs->last_clst = ncl;
 80248a6:	693b      	ldr	r3, [r7, #16]
 80248a8:	69fa      	ldr	r2, [r7, #28]
 80248aa:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80248ac:	693b      	ldr	r3, [r7, #16]
 80248ae:	691a      	ldr	r2, [r3, #16]
 80248b0:	693b      	ldr	r3, [r7, #16]
 80248b2:	695b      	ldr	r3, [r3, #20]
 80248b4:	3b02      	subs	r3, #2
 80248b6:	429a      	cmp	r2, r3
 80248b8:	d804      	bhi.n	80248c4 <create_chain+0x106>
 80248ba:	693b      	ldr	r3, [r7, #16]
 80248bc:	691b      	ldr	r3, [r3, #16]
 80248be:	1e5a      	subs	r2, r3, #1
 80248c0:	693b      	ldr	r3, [r7, #16]
 80248c2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80248c4:	693b      	ldr	r3, [r7, #16]
 80248c6:	791b      	ldrb	r3, [r3, #4]
 80248c8:	f043 0301 	orr.w	r3, r3, #1
 80248cc:	b2da      	uxtb	r2, r3
 80248ce:	693b      	ldr	r3, [r7, #16]
 80248d0:	711a      	strb	r2, [r3, #4]
 80248d2:	e007      	b.n	80248e4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80248d4:	7dfb      	ldrb	r3, [r7, #23]
 80248d6:	2b01      	cmp	r3, #1
 80248d8:	d102      	bne.n	80248e0 <create_chain+0x122>
 80248da:	f04f 33ff 	mov.w	r3, #4294967295
 80248de:	e000      	b.n	80248e2 <create_chain+0x124>
 80248e0:	2301      	movs	r3, #1
 80248e2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80248e4:	69fb      	ldr	r3, [r7, #28]
}
 80248e6:	4618      	mov	r0, r3
 80248e8:	3720      	adds	r7, #32
 80248ea:	46bd      	mov	sp, r7
 80248ec:	bd80      	pop	{r7, pc}

080248ee <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80248ee:	b480      	push	{r7}
 80248f0:	b087      	sub	sp, #28
 80248f2:	af00      	add	r7, sp, #0
 80248f4:	6078      	str	r0, [r7, #4]
 80248f6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80248f8:	687b      	ldr	r3, [r7, #4]
 80248fa:	681b      	ldr	r3, [r3, #0]
 80248fc:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80248fe:	687b      	ldr	r3, [r7, #4]
 8024900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024902:	3304      	adds	r3, #4
 8024904:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8024906:	683b      	ldr	r3, [r7, #0]
 8024908:	0a5b      	lsrs	r3, r3, #9
 802490a:	68fa      	ldr	r2, [r7, #12]
 802490c:	8952      	ldrh	r2, [r2, #10]
 802490e:	fbb3 f3f2 	udiv	r3, r3, r2
 8024912:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8024914:	693b      	ldr	r3, [r7, #16]
 8024916:	1d1a      	adds	r2, r3, #4
 8024918:	613a      	str	r2, [r7, #16]
 802491a:	681b      	ldr	r3, [r3, #0]
 802491c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 802491e:	68bb      	ldr	r3, [r7, #8]
 8024920:	2b00      	cmp	r3, #0
 8024922:	d101      	bne.n	8024928 <clmt_clust+0x3a>
 8024924:	2300      	movs	r3, #0
 8024926:	e010      	b.n	802494a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8024928:	697a      	ldr	r2, [r7, #20]
 802492a:	68bb      	ldr	r3, [r7, #8]
 802492c:	429a      	cmp	r2, r3
 802492e:	d307      	bcc.n	8024940 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8024930:	697a      	ldr	r2, [r7, #20]
 8024932:	68bb      	ldr	r3, [r7, #8]
 8024934:	1ad3      	subs	r3, r2, r3
 8024936:	617b      	str	r3, [r7, #20]
 8024938:	693b      	ldr	r3, [r7, #16]
 802493a:	3304      	adds	r3, #4
 802493c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 802493e:	e7e9      	b.n	8024914 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8024940:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8024942:	693b      	ldr	r3, [r7, #16]
 8024944:	681a      	ldr	r2, [r3, #0]
 8024946:	697b      	ldr	r3, [r7, #20]
 8024948:	4413      	add	r3, r2
}
 802494a:	4618      	mov	r0, r3
 802494c:	371c      	adds	r7, #28
 802494e:	46bd      	mov	sp, r7
 8024950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024954:	4770      	bx	lr

08024956 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8024956:	b580      	push	{r7, lr}
 8024958:	b086      	sub	sp, #24
 802495a:	af00      	add	r7, sp, #0
 802495c:	6078      	str	r0, [r7, #4]
 802495e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8024960:	687b      	ldr	r3, [r7, #4]
 8024962:	681b      	ldr	r3, [r3, #0]
 8024964:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8024966:	683b      	ldr	r3, [r7, #0]
 8024968:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 802496c:	d204      	bcs.n	8024978 <dir_sdi+0x22>
 802496e:	683b      	ldr	r3, [r7, #0]
 8024970:	f003 031f 	and.w	r3, r3, #31
 8024974:	2b00      	cmp	r3, #0
 8024976:	d001      	beq.n	802497c <dir_sdi+0x26>
		return FR_INT_ERR;
 8024978:	2302      	movs	r3, #2
 802497a:	e063      	b.n	8024a44 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 802497c:	687b      	ldr	r3, [r7, #4]
 802497e:	683a      	ldr	r2, [r7, #0]
 8024980:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8024982:	687b      	ldr	r3, [r7, #4]
 8024984:	689b      	ldr	r3, [r3, #8]
 8024986:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8024988:	697b      	ldr	r3, [r7, #20]
 802498a:	2b00      	cmp	r3, #0
 802498c:	d106      	bne.n	802499c <dir_sdi+0x46>
 802498e:	693b      	ldr	r3, [r7, #16]
 8024990:	781b      	ldrb	r3, [r3, #0]
 8024992:	2b02      	cmp	r3, #2
 8024994:	d902      	bls.n	802499c <dir_sdi+0x46>
		clst = fs->dirbase;
 8024996:	693b      	ldr	r3, [r7, #16]
 8024998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802499a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 802499c:	697b      	ldr	r3, [r7, #20]
 802499e:	2b00      	cmp	r3, #0
 80249a0:	d10c      	bne.n	80249bc <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80249a2:	683b      	ldr	r3, [r7, #0]
 80249a4:	095b      	lsrs	r3, r3, #5
 80249a6:	693a      	ldr	r2, [r7, #16]
 80249a8:	8912      	ldrh	r2, [r2, #8]
 80249aa:	4293      	cmp	r3, r2
 80249ac:	d301      	bcc.n	80249b2 <dir_sdi+0x5c>
 80249ae:	2302      	movs	r3, #2
 80249b0:	e048      	b.n	8024a44 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80249b2:	693b      	ldr	r3, [r7, #16]
 80249b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80249b6:	687b      	ldr	r3, [r7, #4]
 80249b8:	61da      	str	r2, [r3, #28]
 80249ba:	e029      	b.n	8024a10 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80249bc:	693b      	ldr	r3, [r7, #16]
 80249be:	895b      	ldrh	r3, [r3, #10]
 80249c0:	025b      	lsls	r3, r3, #9
 80249c2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80249c4:	e019      	b.n	80249fa <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80249c6:	687b      	ldr	r3, [r7, #4]
 80249c8:	6979      	ldr	r1, [r7, #20]
 80249ca:	4618      	mov	r0, r3
 80249cc:	f7ff fd01 	bl	80243d2 <get_fat>
 80249d0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80249d2:	697b      	ldr	r3, [r7, #20]
 80249d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80249d8:	d101      	bne.n	80249de <dir_sdi+0x88>
 80249da:	2301      	movs	r3, #1
 80249dc:	e032      	b.n	8024a44 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80249de:	697b      	ldr	r3, [r7, #20]
 80249e0:	2b01      	cmp	r3, #1
 80249e2:	d904      	bls.n	80249ee <dir_sdi+0x98>
 80249e4:	693b      	ldr	r3, [r7, #16]
 80249e6:	695b      	ldr	r3, [r3, #20]
 80249e8:	697a      	ldr	r2, [r7, #20]
 80249ea:	429a      	cmp	r2, r3
 80249ec:	d301      	bcc.n	80249f2 <dir_sdi+0x9c>
 80249ee:	2302      	movs	r3, #2
 80249f0:	e028      	b.n	8024a44 <dir_sdi+0xee>
			ofs -= csz;
 80249f2:	683a      	ldr	r2, [r7, #0]
 80249f4:	68fb      	ldr	r3, [r7, #12]
 80249f6:	1ad3      	subs	r3, r2, r3
 80249f8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80249fa:	683a      	ldr	r2, [r7, #0]
 80249fc:	68fb      	ldr	r3, [r7, #12]
 80249fe:	429a      	cmp	r2, r3
 8024a00:	d2e1      	bcs.n	80249c6 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8024a02:	6979      	ldr	r1, [r7, #20]
 8024a04:	6938      	ldr	r0, [r7, #16]
 8024a06:	f7ff fcc5 	bl	8024394 <clust2sect>
 8024a0a:	4602      	mov	r2, r0
 8024a0c:	687b      	ldr	r3, [r7, #4]
 8024a0e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8024a10:	687b      	ldr	r3, [r7, #4]
 8024a12:	697a      	ldr	r2, [r7, #20]
 8024a14:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8024a16:	687b      	ldr	r3, [r7, #4]
 8024a18:	69db      	ldr	r3, [r3, #28]
 8024a1a:	2b00      	cmp	r3, #0
 8024a1c:	d101      	bne.n	8024a22 <dir_sdi+0xcc>
 8024a1e:	2302      	movs	r3, #2
 8024a20:	e010      	b.n	8024a44 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8024a22:	687b      	ldr	r3, [r7, #4]
 8024a24:	69da      	ldr	r2, [r3, #28]
 8024a26:	683b      	ldr	r3, [r7, #0]
 8024a28:	0a5b      	lsrs	r3, r3, #9
 8024a2a:	441a      	add	r2, r3
 8024a2c:	687b      	ldr	r3, [r7, #4]
 8024a2e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8024a30:	693b      	ldr	r3, [r7, #16]
 8024a32:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8024a36:	683b      	ldr	r3, [r7, #0]
 8024a38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8024a3c:	441a      	add	r2, r3
 8024a3e:	687b      	ldr	r3, [r7, #4]
 8024a40:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8024a42:	2300      	movs	r3, #0
}
 8024a44:	4618      	mov	r0, r3
 8024a46:	3718      	adds	r7, #24
 8024a48:	46bd      	mov	sp, r7
 8024a4a:	bd80      	pop	{r7, pc}

08024a4c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8024a4c:	b580      	push	{r7, lr}
 8024a4e:	b086      	sub	sp, #24
 8024a50:	af00      	add	r7, sp, #0
 8024a52:	6078      	str	r0, [r7, #4]
 8024a54:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8024a56:	687b      	ldr	r3, [r7, #4]
 8024a58:	681b      	ldr	r3, [r3, #0]
 8024a5a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8024a5c:	687b      	ldr	r3, [r7, #4]
 8024a5e:	695b      	ldr	r3, [r3, #20]
 8024a60:	3320      	adds	r3, #32
 8024a62:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8024a64:	687b      	ldr	r3, [r7, #4]
 8024a66:	69db      	ldr	r3, [r3, #28]
 8024a68:	2b00      	cmp	r3, #0
 8024a6a:	d003      	beq.n	8024a74 <dir_next+0x28>
 8024a6c:	68bb      	ldr	r3, [r7, #8]
 8024a6e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8024a72:	d301      	bcc.n	8024a78 <dir_next+0x2c>
 8024a74:	2304      	movs	r3, #4
 8024a76:	e0aa      	b.n	8024bce <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8024a78:	68bb      	ldr	r3, [r7, #8]
 8024a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8024a7e:	2b00      	cmp	r3, #0
 8024a80:	f040 8098 	bne.w	8024bb4 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8024a84:	687b      	ldr	r3, [r7, #4]
 8024a86:	69db      	ldr	r3, [r3, #28]
 8024a88:	1c5a      	adds	r2, r3, #1
 8024a8a:	687b      	ldr	r3, [r7, #4]
 8024a8c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8024a8e:	687b      	ldr	r3, [r7, #4]
 8024a90:	699b      	ldr	r3, [r3, #24]
 8024a92:	2b00      	cmp	r3, #0
 8024a94:	d10b      	bne.n	8024aae <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8024a96:	68bb      	ldr	r3, [r7, #8]
 8024a98:	095b      	lsrs	r3, r3, #5
 8024a9a:	68fa      	ldr	r2, [r7, #12]
 8024a9c:	8912      	ldrh	r2, [r2, #8]
 8024a9e:	4293      	cmp	r3, r2
 8024aa0:	f0c0 8088 	bcc.w	8024bb4 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8024aa4:	687b      	ldr	r3, [r7, #4]
 8024aa6:	2200      	movs	r2, #0
 8024aa8:	61da      	str	r2, [r3, #28]
 8024aaa:	2304      	movs	r3, #4
 8024aac:	e08f      	b.n	8024bce <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8024aae:	68bb      	ldr	r3, [r7, #8]
 8024ab0:	0a5b      	lsrs	r3, r3, #9
 8024ab2:	68fa      	ldr	r2, [r7, #12]
 8024ab4:	8952      	ldrh	r2, [r2, #10]
 8024ab6:	3a01      	subs	r2, #1
 8024ab8:	4013      	ands	r3, r2
 8024aba:	2b00      	cmp	r3, #0
 8024abc:	d17a      	bne.n	8024bb4 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8024abe:	687a      	ldr	r2, [r7, #4]
 8024ac0:	687b      	ldr	r3, [r7, #4]
 8024ac2:	699b      	ldr	r3, [r3, #24]
 8024ac4:	4619      	mov	r1, r3
 8024ac6:	4610      	mov	r0, r2
 8024ac8:	f7ff fc83 	bl	80243d2 <get_fat>
 8024acc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8024ace:	697b      	ldr	r3, [r7, #20]
 8024ad0:	2b01      	cmp	r3, #1
 8024ad2:	d801      	bhi.n	8024ad8 <dir_next+0x8c>
 8024ad4:	2302      	movs	r3, #2
 8024ad6:	e07a      	b.n	8024bce <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8024ad8:	697b      	ldr	r3, [r7, #20]
 8024ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024ade:	d101      	bne.n	8024ae4 <dir_next+0x98>
 8024ae0:	2301      	movs	r3, #1
 8024ae2:	e074      	b.n	8024bce <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8024ae4:	68fb      	ldr	r3, [r7, #12]
 8024ae6:	695b      	ldr	r3, [r3, #20]
 8024ae8:	697a      	ldr	r2, [r7, #20]
 8024aea:	429a      	cmp	r2, r3
 8024aec:	d358      	bcc.n	8024ba0 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8024aee:	683b      	ldr	r3, [r7, #0]
 8024af0:	2b00      	cmp	r3, #0
 8024af2:	d104      	bne.n	8024afe <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8024af4:	687b      	ldr	r3, [r7, #4]
 8024af6:	2200      	movs	r2, #0
 8024af8:	61da      	str	r2, [r3, #28]
 8024afa:	2304      	movs	r3, #4
 8024afc:	e067      	b.n	8024bce <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8024afe:	687a      	ldr	r2, [r7, #4]
 8024b00:	687b      	ldr	r3, [r7, #4]
 8024b02:	699b      	ldr	r3, [r3, #24]
 8024b04:	4619      	mov	r1, r3
 8024b06:	4610      	mov	r0, r2
 8024b08:	f7ff fe59 	bl	80247be <create_chain>
 8024b0c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8024b0e:	697b      	ldr	r3, [r7, #20]
 8024b10:	2b00      	cmp	r3, #0
 8024b12:	d101      	bne.n	8024b18 <dir_next+0xcc>
 8024b14:	2307      	movs	r3, #7
 8024b16:	e05a      	b.n	8024bce <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8024b18:	697b      	ldr	r3, [r7, #20]
 8024b1a:	2b01      	cmp	r3, #1
 8024b1c:	d101      	bne.n	8024b22 <dir_next+0xd6>
 8024b1e:	2302      	movs	r3, #2
 8024b20:	e055      	b.n	8024bce <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8024b22:	697b      	ldr	r3, [r7, #20]
 8024b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024b28:	d101      	bne.n	8024b2e <dir_next+0xe2>
 8024b2a:	2301      	movs	r3, #1
 8024b2c:	e04f      	b.n	8024bce <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8024b2e:	68f8      	ldr	r0, [r7, #12]
 8024b30:	f7ff fb50 	bl	80241d4 <sync_window>
 8024b34:	4603      	mov	r3, r0
 8024b36:	2b00      	cmp	r3, #0
 8024b38:	d001      	beq.n	8024b3e <dir_next+0xf2>
 8024b3a:	2301      	movs	r3, #1
 8024b3c:	e047      	b.n	8024bce <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8024b3e:	68fb      	ldr	r3, [r7, #12]
 8024b40:	3330      	adds	r3, #48	@ 0x30
 8024b42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8024b46:	2100      	movs	r1, #0
 8024b48:	4618      	mov	r0, r3
 8024b4a:	f7ff f97a 	bl	8023e42 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8024b4e:	2300      	movs	r3, #0
 8024b50:	613b      	str	r3, [r7, #16]
 8024b52:	6979      	ldr	r1, [r7, #20]
 8024b54:	68f8      	ldr	r0, [r7, #12]
 8024b56:	f7ff fc1d 	bl	8024394 <clust2sect>
 8024b5a:	4602      	mov	r2, r0
 8024b5c:	68fb      	ldr	r3, [r7, #12]
 8024b5e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8024b60:	e012      	b.n	8024b88 <dir_next+0x13c>
						fs->wflag = 1;
 8024b62:	68fb      	ldr	r3, [r7, #12]
 8024b64:	2201      	movs	r2, #1
 8024b66:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8024b68:	68f8      	ldr	r0, [r7, #12]
 8024b6a:	f7ff fb33 	bl	80241d4 <sync_window>
 8024b6e:	4603      	mov	r3, r0
 8024b70:	2b00      	cmp	r3, #0
 8024b72:	d001      	beq.n	8024b78 <dir_next+0x12c>
 8024b74:	2301      	movs	r3, #1
 8024b76:	e02a      	b.n	8024bce <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8024b78:	693b      	ldr	r3, [r7, #16]
 8024b7a:	3301      	adds	r3, #1
 8024b7c:	613b      	str	r3, [r7, #16]
 8024b7e:	68fb      	ldr	r3, [r7, #12]
 8024b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024b82:	1c5a      	adds	r2, r3, #1
 8024b84:	68fb      	ldr	r3, [r7, #12]
 8024b86:	62da      	str	r2, [r3, #44]	@ 0x2c
 8024b88:	68fb      	ldr	r3, [r7, #12]
 8024b8a:	895b      	ldrh	r3, [r3, #10]
 8024b8c:	461a      	mov	r2, r3
 8024b8e:	693b      	ldr	r3, [r7, #16]
 8024b90:	4293      	cmp	r3, r2
 8024b92:	d3e6      	bcc.n	8024b62 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8024b94:	68fb      	ldr	r3, [r7, #12]
 8024b96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8024b98:	693b      	ldr	r3, [r7, #16]
 8024b9a:	1ad2      	subs	r2, r2, r3
 8024b9c:	68fb      	ldr	r3, [r7, #12]
 8024b9e:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8024ba0:	687b      	ldr	r3, [r7, #4]
 8024ba2:	697a      	ldr	r2, [r7, #20]
 8024ba4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8024ba6:	6979      	ldr	r1, [r7, #20]
 8024ba8:	68f8      	ldr	r0, [r7, #12]
 8024baa:	f7ff fbf3 	bl	8024394 <clust2sect>
 8024bae:	4602      	mov	r2, r0
 8024bb0:	687b      	ldr	r3, [r7, #4]
 8024bb2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8024bb4:	687b      	ldr	r3, [r7, #4]
 8024bb6:	68ba      	ldr	r2, [r7, #8]
 8024bb8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8024bba:	68fb      	ldr	r3, [r7, #12]
 8024bbc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8024bc0:	68bb      	ldr	r3, [r7, #8]
 8024bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8024bc6:	441a      	add	r2, r3
 8024bc8:	687b      	ldr	r3, [r7, #4]
 8024bca:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8024bcc:	2300      	movs	r3, #0
}
 8024bce:	4618      	mov	r0, r3
 8024bd0:	3718      	adds	r7, #24
 8024bd2:	46bd      	mov	sp, r7
 8024bd4:	bd80      	pop	{r7, pc}

08024bd6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8024bd6:	b580      	push	{r7, lr}
 8024bd8:	b086      	sub	sp, #24
 8024bda:	af00      	add	r7, sp, #0
 8024bdc:	6078      	str	r0, [r7, #4]
 8024bde:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8024be0:	687b      	ldr	r3, [r7, #4]
 8024be2:	681b      	ldr	r3, [r3, #0]
 8024be4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8024be6:	2100      	movs	r1, #0
 8024be8:	6878      	ldr	r0, [r7, #4]
 8024bea:	f7ff feb4 	bl	8024956 <dir_sdi>
 8024bee:	4603      	mov	r3, r0
 8024bf0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8024bf2:	7dfb      	ldrb	r3, [r7, #23]
 8024bf4:	2b00      	cmp	r3, #0
 8024bf6:	d12b      	bne.n	8024c50 <dir_alloc+0x7a>
		n = 0;
 8024bf8:	2300      	movs	r3, #0
 8024bfa:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8024bfc:	687b      	ldr	r3, [r7, #4]
 8024bfe:	69db      	ldr	r3, [r3, #28]
 8024c00:	4619      	mov	r1, r3
 8024c02:	68f8      	ldr	r0, [r7, #12]
 8024c04:	f7ff fb2a 	bl	802425c <move_window>
 8024c08:	4603      	mov	r3, r0
 8024c0a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8024c0c:	7dfb      	ldrb	r3, [r7, #23]
 8024c0e:	2b00      	cmp	r3, #0
 8024c10:	d11d      	bne.n	8024c4e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8024c12:	687b      	ldr	r3, [r7, #4]
 8024c14:	6a1b      	ldr	r3, [r3, #32]
 8024c16:	781b      	ldrb	r3, [r3, #0]
 8024c18:	2be5      	cmp	r3, #229	@ 0xe5
 8024c1a:	d004      	beq.n	8024c26 <dir_alloc+0x50>
 8024c1c:	687b      	ldr	r3, [r7, #4]
 8024c1e:	6a1b      	ldr	r3, [r3, #32]
 8024c20:	781b      	ldrb	r3, [r3, #0]
 8024c22:	2b00      	cmp	r3, #0
 8024c24:	d107      	bne.n	8024c36 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8024c26:	693b      	ldr	r3, [r7, #16]
 8024c28:	3301      	adds	r3, #1
 8024c2a:	613b      	str	r3, [r7, #16]
 8024c2c:	693a      	ldr	r2, [r7, #16]
 8024c2e:	683b      	ldr	r3, [r7, #0]
 8024c30:	429a      	cmp	r2, r3
 8024c32:	d102      	bne.n	8024c3a <dir_alloc+0x64>
 8024c34:	e00c      	b.n	8024c50 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8024c36:	2300      	movs	r3, #0
 8024c38:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8024c3a:	2101      	movs	r1, #1
 8024c3c:	6878      	ldr	r0, [r7, #4]
 8024c3e:	f7ff ff05 	bl	8024a4c <dir_next>
 8024c42:	4603      	mov	r3, r0
 8024c44:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8024c46:	7dfb      	ldrb	r3, [r7, #23]
 8024c48:	2b00      	cmp	r3, #0
 8024c4a:	d0d7      	beq.n	8024bfc <dir_alloc+0x26>
 8024c4c:	e000      	b.n	8024c50 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8024c4e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8024c50:	7dfb      	ldrb	r3, [r7, #23]
 8024c52:	2b04      	cmp	r3, #4
 8024c54:	d101      	bne.n	8024c5a <dir_alloc+0x84>
 8024c56:	2307      	movs	r3, #7
 8024c58:	75fb      	strb	r3, [r7, #23]
	return res;
 8024c5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8024c5c:	4618      	mov	r0, r3
 8024c5e:	3718      	adds	r7, #24
 8024c60:	46bd      	mov	sp, r7
 8024c62:	bd80      	pop	{r7, pc}

08024c64 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8024c64:	b580      	push	{r7, lr}
 8024c66:	b084      	sub	sp, #16
 8024c68:	af00      	add	r7, sp, #0
 8024c6a:	6078      	str	r0, [r7, #4]
 8024c6c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8024c6e:	683b      	ldr	r3, [r7, #0]
 8024c70:	331a      	adds	r3, #26
 8024c72:	4618      	mov	r0, r3
 8024c74:	f7ff f842 	bl	8023cfc <ld_word>
 8024c78:	4603      	mov	r3, r0
 8024c7a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8024c7c:	687b      	ldr	r3, [r7, #4]
 8024c7e:	781b      	ldrb	r3, [r3, #0]
 8024c80:	2b03      	cmp	r3, #3
 8024c82:	d109      	bne.n	8024c98 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8024c84:	683b      	ldr	r3, [r7, #0]
 8024c86:	3314      	adds	r3, #20
 8024c88:	4618      	mov	r0, r3
 8024c8a:	f7ff f837 	bl	8023cfc <ld_word>
 8024c8e:	4603      	mov	r3, r0
 8024c90:	041b      	lsls	r3, r3, #16
 8024c92:	68fa      	ldr	r2, [r7, #12]
 8024c94:	4313      	orrs	r3, r2
 8024c96:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8024c98:	68fb      	ldr	r3, [r7, #12]
}
 8024c9a:	4618      	mov	r0, r3
 8024c9c:	3710      	adds	r7, #16
 8024c9e:	46bd      	mov	sp, r7
 8024ca0:	bd80      	pop	{r7, pc}

08024ca2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8024ca2:	b580      	push	{r7, lr}
 8024ca4:	b084      	sub	sp, #16
 8024ca6:	af00      	add	r7, sp, #0
 8024ca8:	60f8      	str	r0, [r7, #12]
 8024caa:	60b9      	str	r1, [r7, #8]
 8024cac:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8024cae:	68bb      	ldr	r3, [r7, #8]
 8024cb0:	331a      	adds	r3, #26
 8024cb2:	687a      	ldr	r2, [r7, #4]
 8024cb4:	b292      	uxth	r2, r2
 8024cb6:	4611      	mov	r1, r2
 8024cb8:	4618      	mov	r0, r3
 8024cba:	f7ff f85a 	bl	8023d72 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8024cbe:	68fb      	ldr	r3, [r7, #12]
 8024cc0:	781b      	ldrb	r3, [r3, #0]
 8024cc2:	2b03      	cmp	r3, #3
 8024cc4:	d109      	bne.n	8024cda <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8024cc6:	68bb      	ldr	r3, [r7, #8]
 8024cc8:	f103 0214 	add.w	r2, r3, #20
 8024ccc:	687b      	ldr	r3, [r7, #4]
 8024cce:	0c1b      	lsrs	r3, r3, #16
 8024cd0:	b29b      	uxth	r3, r3
 8024cd2:	4619      	mov	r1, r3
 8024cd4:	4610      	mov	r0, r2
 8024cd6:	f7ff f84c 	bl	8023d72 <st_word>
	}
}
 8024cda:	bf00      	nop
 8024cdc:	3710      	adds	r7, #16
 8024cde:	46bd      	mov	sp, r7
 8024ce0:	bd80      	pop	{r7, pc}

08024ce2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8024ce2:	b580      	push	{r7, lr}
 8024ce4:	b086      	sub	sp, #24
 8024ce6:	af00      	add	r7, sp, #0
 8024ce8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8024cea:	687b      	ldr	r3, [r7, #4]
 8024cec:	681b      	ldr	r3, [r3, #0]
 8024cee:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8024cf0:	2100      	movs	r1, #0
 8024cf2:	6878      	ldr	r0, [r7, #4]
 8024cf4:	f7ff fe2f 	bl	8024956 <dir_sdi>
 8024cf8:	4603      	mov	r3, r0
 8024cfa:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8024cfc:	7dfb      	ldrb	r3, [r7, #23]
 8024cfe:	2b00      	cmp	r3, #0
 8024d00:	d001      	beq.n	8024d06 <dir_find+0x24>
 8024d02:	7dfb      	ldrb	r3, [r7, #23]
 8024d04:	e03e      	b.n	8024d84 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8024d06:	687b      	ldr	r3, [r7, #4]
 8024d08:	69db      	ldr	r3, [r3, #28]
 8024d0a:	4619      	mov	r1, r3
 8024d0c:	6938      	ldr	r0, [r7, #16]
 8024d0e:	f7ff faa5 	bl	802425c <move_window>
 8024d12:	4603      	mov	r3, r0
 8024d14:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8024d16:	7dfb      	ldrb	r3, [r7, #23]
 8024d18:	2b00      	cmp	r3, #0
 8024d1a:	d12f      	bne.n	8024d7c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8024d1c:	687b      	ldr	r3, [r7, #4]
 8024d1e:	6a1b      	ldr	r3, [r3, #32]
 8024d20:	781b      	ldrb	r3, [r3, #0]
 8024d22:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8024d24:	7bfb      	ldrb	r3, [r7, #15]
 8024d26:	2b00      	cmp	r3, #0
 8024d28:	d102      	bne.n	8024d30 <dir_find+0x4e>
 8024d2a:	2304      	movs	r3, #4
 8024d2c:	75fb      	strb	r3, [r7, #23]
 8024d2e:	e028      	b.n	8024d82 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8024d30:	687b      	ldr	r3, [r7, #4]
 8024d32:	6a1b      	ldr	r3, [r3, #32]
 8024d34:	330b      	adds	r3, #11
 8024d36:	781b      	ldrb	r3, [r3, #0]
 8024d38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8024d3c:	b2da      	uxtb	r2, r3
 8024d3e:	687b      	ldr	r3, [r7, #4]
 8024d40:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8024d42:	687b      	ldr	r3, [r7, #4]
 8024d44:	6a1b      	ldr	r3, [r3, #32]
 8024d46:	330b      	adds	r3, #11
 8024d48:	781b      	ldrb	r3, [r3, #0]
 8024d4a:	f003 0308 	and.w	r3, r3, #8
 8024d4e:	2b00      	cmp	r3, #0
 8024d50:	d10a      	bne.n	8024d68 <dir_find+0x86>
 8024d52:	687b      	ldr	r3, [r7, #4]
 8024d54:	6a18      	ldr	r0, [r3, #32]
 8024d56:	687b      	ldr	r3, [r7, #4]
 8024d58:	3324      	adds	r3, #36	@ 0x24
 8024d5a:	220b      	movs	r2, #11
 8024d5c:	4619      	mov	r1, r3
 8024d5e:	f7ff f88b 	bl	8023e78 <mem_cmp>
 8024d62:	4603      	mov	r3, r0
 8024d64:	2b00      	cmp	r3, #0
 8024d66:	d00b      	beq.n	8024d80 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8024d68:	2100      	movs	r1, #0
 8024d6a:	6878      	ldr	r0, [r7, #4]
 8024d6c:	f7ff fe6e 	bl	8024a4c <dir_next>
 8024d70:	4603      	mov	r3, r0
 8024d72:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8024d74:	7dfb      	ldrb	r3, [r7, #23]
 8024d76:	2b00      	cmp	r3, #0
 8024d78:	d0c5      	beq.n	8024d06 <dir_find+0x24>
 8024d7a:	e002      	b.n	8024d82 <dir_find+0xa0>
		if (res != FR_OK) break;
 8024d7c:	bf00      	nop
 8024d7e:	e000      	b.n	8024d82 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8024d80:	bf00      	nop

	return res;
 8024d82:	7dfb      	ldrb	r3, [r7, #23]
}
 8024d84:	4618      	mov	r0, r3
 8024d86:	3718      	adds	r7, #24
 8024d88:	46bd      	mov	sp, r7
 8024d8a:	bd80      	pop	{r7, pc}

08024d8c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8024d8c:	b580      	push	{r7, lr}
 8024d8e:	b084      	sub	sp, #16
 8024d90:	af00      	add	r7, sp, #0
 8024d92:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8024d94:	687b      	ldr	r3, [r7, #4]
 8024d96:	681b      	ldr	r3, [r3, #0]
 8024d98:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8024d9a:	2101      	movs	r1, #1
 8024d9c:	6878      	ldr	r0, [r7, #4]
 8024d9e:	f7ff ff1a 	bl	8024bd6 <dir_alloc>
 8024da2:	4603      	mov	r3, r0
 8024da4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8024da6:	7bfb      	ldrb	r3, [r7, #15]
 8024da8:	2b00      	cmp	r3, #0
 8024daa:	d11c      	bne.n	8024de6 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8024dac:	687b      	ldr	r3, [r7, #4]
 8024dae:	69db      	ldr	r3, [r3, #28]
 8024db0:	4619      	mov	r1, r3
 8024db2:	68b8      	ldr	r0, [r7, #8]
 8024db4:	f7ff fa52 	bl	802425c <move_window>
 8024db8:	4603      	mov	r3, r0
 8024dba:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8024dbc:	7bfb      	ldrb	r3, [r7, #15]
 8024dbe:	2b00      	cmp	r3, #0
 8024dc0:	d111      	bne.n	8024de6 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8024dc2:	687b      	ldr	r3, [r7, #4]
 8024dc4:	6a1b      	ldr	r3, [r3, #32]
 8024dc6:	2220      	movs	r2, #32
 8024dc8:	2100      	movs	r1, #0
 8024dca:	4618      	mov	r0, r3
 8024dcc:	f7ff f839 	bl	8023e42 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8024dd0:	687b      	ldr	r3, [r7, #4]
 8024dd2:	6a18      	ldr	r0, [r3, #32]
 8024dd4:	687b      	ldr	r3, [r7, #4]
 8024dd6:	3324      	adds	r3, #36	@ 0x24
 8024dd8:	220b      	movs	r2, #11
 8024dda:	4619      	mov	r1, r3
 8024ddc:	f7ff f810 	bl	8023e00 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8024de0:	68bb      	ldr	r3, [r7, #8]
 8024de2:	2201      	movs	r2, #1
 8024de4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8024de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8024de8:	4618      	mov	r0, r3
 8024dea:	3710      	adds	r7, #16
 8024dec:	46bd      	mov	sp, r7
 8024dee:	bd80      	pop	{r7, pc}

08024df0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8024df0:	b580      	push	{r7, lr}
 8024df2:	b088      	sub	sp, #32
 8024df4:	af00      	add	r7, sp, #0
 8024df6:	6078      	str	r0, [r7, #4]
 8024df8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8024dfa:	683b      	ldr	r3, [r7, #0]
 8024dfc:	681b      	ldr	r3, [r3, #0]
 8024dfe:	60fb      	str	r3, [r7, #12]
 8024e00:	687b      	ldr	r3, [r7, #4]
 8024e02:	3324      	adds	r3, #36	@ 0x24
 8024e04:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8024e06:	220b      	movs	r2, #11
 8024e08:	2120      	movs	r1, #32
 8024e0a:	68b8      	ldr	r0, [r7, #8]
 8024e0c:	f7ff f819 	bl	8023e42 <mem_set>
	si = i = 0; ni = 8;
 8024e10:	2300      	movs	r3, #0
 8024e12:	613b      	str	r3, [r7, #16]
 8024e14:	693b      	ldr	r3, [r7, #16]
 8024e16:	61fb      	str	r3, [r7, #28]
 8024e18:	2308      	movs	r3, #8
 8024e1a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8024e1c:	69fb      	ldr	r3, [r7, #28]
 8024e1e:	1c5a      	adds	r2, r3, #1
 8024e20:	61fa      	str	r2, [r7, #28]
 8024e22:	68fa      	ldr	r2, [r7, #12]
 8024e24:	4413      	add	r3, r2
 8024e26:	781b      	ldrb	r3, [r3, #0]
 8024e28:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8024e2a:	7efb      	ldrb	r3, [r7, #27]
 8024e2c:	2b20      	cmp	r3, #32
 8024e2e:	d94e      	bls.n	8024ece <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8024e30:	7efb      	ldrb	r3, [r7, #27]
 8024e32:	2b2f      	cmp	r3, #47	@ 0x2f
 8024e34:	d006      	beq.n	8024e44 <create_name+0x54>
 8024e36:	7efb      	ldrb	r3, [r7, #27]
 8024e38:	2b5c      	cmp	r3, #92	@ 0x5c
 8024e3a:	d110      	bne.n	8024e5e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8024e3c:	e002      	b.n	8024e44 <create_name+0x54>
 8024e3e:	69fb      	ldr	r3, [r7, #28]
 8024e40:	3301      	adds	r3, #1
 8024e42:	61fb      	str	r3, [r7, #28]
 8024e44:	68fa      	ldr	r2, [r7, #12]
 8024e46:	69fb      	ldr	r3, [r7, #28]
 8024e48:	4413      	add	r3, r2
 8024e4a:	781b      	ldrb	r3, [r3, #0]
 8024e4c:	2b2f      	cmp	r3, #47	@ 0x2f
 8024e4e:	d0f6      	beq.n	8024e3e <create_name+0x4e>
 8024e50:	68fa      	ldr	r2, [r7, #12]
 8024e52:	69fb      	ldr	r3, [r7, #28]
 8024e54:	4413      	add	r3, r2
 8024e56:	781b      	ldrb	r3, [r3, #0]
 8024e58:	2b5c      	cmp	r3, #92	@ 0x5c
 8024e5a:	d0f0      	beq.n	8024e3e <create_name+0x4e>
			break;
 8024e5c:	e038      	b.n	8024ed0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8024e5e:	7efb      	ldrb	r3, [r7, #27]
 8024e60:	2b2e      	cmp	r3, #46	@ 0x2e
 8024e62:	d003      	beq.n	8024e6c <create_name+0x7c>
 8024e64:	693a      	ldr	r2, [r7, #16]
 8024e66:	697b      	ldr	r3, [r7, #20]
 8024e68:	429a      	cmp	r2, r3
 8024e6a:	d30c      	bcc.n	8024e86 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8024e6c:	697b      	ldr	r3, [r7, #20]
 8024e6e:	2b0b      	cmp	r3, #11
 8024e70:	d002      	beq.n	8024e78 <create_name+0x88>
 8024e72:	7efb      	ldrb	r3, [r7, #27]
 8024e74:	2b2e      	cmp	r3, #46	@ 0x2e
 8024e76:	d001      	beq.n	8024e7c <create_name+0x8c>
 8024e78:	2306      	movs	r3, #6
 8024e7a:	e044      	b.n	8024f06 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8024e7c:	2308      	movs	r3, #8
 8024e7e:	613b      	str	r3, [r7, #16]
 8024e80:	230b      	movs	r3, #11
 8024e82:	617b      	str	r3, [r7, #20]
			continue;
 8024e84:	e022      	b.n	8024ecc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8024e86:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8024e8a:	2b00      	cmp	r3, #0
 8024e8c:	da04      	bge.n	8024e98 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8024e8e:	7efb      	ldrb	r3, [r7, #27]
 8024e90:	3b80      	subs	r3, #128	@ 0x80
 8024e92:	4a1f      	ldr	r2, [pc, #124]	@ (8024f10 <create_name+0x120>)
 8024e94:	5cd3      	ldrb	r3, [r2, r3]
 8024e96:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8024e98:	7efb      	ldrb	r3, [r7, #27]
 8024e9a:	4619      	mov	r1, r3
 8024e9c:	481d      	ldr	r0, [pc, #116]	@ (8024f14 <create_name+0x124>)
 8024e9e:	f7ff f812 	bl	8023ec6 <chk_chr>
 8024ea2:	4603      	mov	r3, r0
 8024ea4:	2b00      	cmp	r3, #0
 8024ea6:	d001      	beq.n	8024eac <create_name+0xbc>
 8024ea8:	2306      	movs	r3, #6
 8024eaa:	e02c      	b.n	8024f06 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8024eac:	7efb      	ldrb	r3, [r7, #27]
 8024eae:	2b60      	cmp	r3, #96	@ 0x60
 8024eb0:	d905      	bls.n	8024ebe <create_name+0xce>
 8024eb2:	7efb      	ldrb	r3, [r7, #27]
 8024eb4:	2b7a      	cmp	r3, #122	@ 0x7a
 8024eb6:	d802      	bhi.n	8024ebe <create_name+0xce>
 8024eb8:	7efb      	ldrb	r3, [r7, #27]
 8024eba:	3b20      	subs	r3, #32
 8024ebc:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8024ebe:	693b      	ldr	r3, [r7, #16]
 8024ec0:	1c5a      	adds	r2, r3, #1
 8024ec2:	613a      	str	r2, [r7, #16]
 8024ec4:	68ba      	ldr	r2, [r7, #8]
 8024ec6:	4413      	add	r3, r2
 8024ec8:	7efa      	ldrb	r2, [r7, #27]
 8024eca:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8024ecc:	e7a6      	b.n	8024e1c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8024ece:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8024ed0:	68fa      	ldr	r2, [r7, #12]
 8024ed2:	69fb      	ldr	r3, [r7, #28]
 8024ed4:	441a      	add	r2, r3
 8024ed6:	683b      	ldr	r3, [r7, #0]
 8024ed8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8024eda:	693b      	ldr	r3, [r7, #16]
 8024edc:	2b00      	cmp	r3, #0
 8024ede:	d101      	bne.n	8024ee4 <create_name+0xf4>
 8024ee0:	2306      	movs	r3, #6
 8024ee2:	e010      	b.n	8024f06 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8024ee4:	68bb      	ldr	r3, [r7, #8]
 8024ee6:	781b      	ldrb	r3, [r3, #0]
 8024ee8:	2be5      	cmp	r3, #229	@ 0xe5
 8024eea:	d102      	bne.n	8024ef2 <create_name+0x102>
 8024eec:	68bb      	ldr	r3, [r7, #8]
 8024eee:	2205      	movs	r2, #5
 8024ef0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8024ef2:	7efb      	ldrb	r3, [r7, #27]
 8024ef4:	2b20      	cmp	r3, #32
 8024ef6:	d801      	bhi.n	8024efc <create_name+0x10c>
 8024ef8:	2204      	movs	r2, #4
 8024efa:	e000      	b.n	8024efe <create_name+0x10e>
 8024efc:	2200      	movs	r2, #0
 8024efe:	68bb      	ldr	r3, [r7, #8]
 8024f00:	330b      	adds	r3, #11
 8024f02:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8024f04:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8024f06:	4618      	mov	r0, r3
 8024f08:	3720      	adds	r7, #32
 8024f0a:	46bd      	mov	sp, r7
 8024f0c:	bd80      	pop	{r7, pc}
 8024f0e:	bf00      	nop
 8024f10:	08028c9c 	.word	0x08028c9c
 8024f14:	08028778 	.word	0x08028778

08024f18 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8024f18:	b580      	push	{r7, lr}
 8024f1a:	b086      	sub	sp, #24
 8024f1c:	af00      	add	r7, sp, #0
 8024f1e:	6078      	str	r0, [r7, #4]
 8024f20:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8024f22:	687b      	ldr	r3, [r7, #4]
 8024f24:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8024f26:	693b      	ldr	r3, [r7, #16]
 8024f28:	681b      	ldr	r3, [r3, #0]
 8024f2a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8024f2c:	e002      	b.n	8024f34 <follow_path+0x1c>
 8024f2e:	683b      	ldr	r3, [r7, #0]
 8024f30:	3301      	adds	r3, #1
 8024f32:	603b      	str	r3, [r7, #0]
 8024f34:	683b      	ldr	r3, [r7, #0]
 8024f36:	781b      	ldrb	r3, [r3, #0]
 8024f38:	2b2f      	cmp	r3, #47	@ 0x2f
 8024f3a:	d0f8      	beq.n	8024f2e <follow_path+0x16>
 8024f3c:	683b      	ldr	r3, [r7, #0]
 8024f3e:	781b      	ldrb	r3, [r3, #0]
 8024f40:	2b5c      	cmp	r3, #92	@ 0x5c
 8024f42:	d0f4      	beq.n	8024f2e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8024f44:	693b      	ldr	r3, [r7, #16]
 8024f46:	2200      	movs	r2, #0
 8024f48:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8024f4a:	683b      	ldr	r3, [r7, #0]
 8024f4c:	781b      	ldrb	r3, [r3, #0]
 8024f4e:	2b1f      	cmp	r3, #31
 8024f50:	d80a      	bhi.n	8024f68 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8024f52:	687b      	ldr	r3, [r7, #4]
 8024f54:	2280      	movs	r2, #128	@ 0x80
 8024f56:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8024f5a:	2100      	movs	r1, #0
 8024f5c:	6878      	ldr	r0, [r7, #4]
 8024f5e:	f7ff fcfa 	bl	8024956 <dir_sdi>
 8024f62:	4603      	mov	r3, r0
 8024f64:	75fb      	strb	r3, [r7, #23]
 8024f66:	e043      	b.n	8024ff0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8024f68:	463b      	mov	r3, r7
 8024f6a:	4619      	mov	r1, r3
 8024f6c:	6878      	ldr	r0, [r7, #4]
 8024f6e:	f7ff ff3f 	bl	8024df0 <create_name>
 8024f72:	4603      	mov	r3, r0
 8024f74:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8024f76:	7dfb      	ldrb	r3, [r7, #23]
 8024f78:	2b00      	cmp	r3, #0
 8024f7a:	d134      	bne.n	8024fe6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8024f7c:	6878      	ldr	r0, [r7, #4]
 8024f7e:	f7ff feb0 	bl	8024ce2 <dir_find>
 8024f82:	4603      	mov	r3, r0
 8024f84:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8024f86:	687b      	ldr	r3, [r7, #4]
 8024f88:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8024f8c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8024f8e:	7dfb      	ldrb	r3, [r7, #23]
 8024f90:	2b00      	cmp	r3, #0
 8024f92:	d00a      	beq.n	8024faa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8024f94:	7dfb      	ldrb	r3, [r7, #23]
 8024f96:	2b04      	cmp	r3, #4
 8024f98:	d127      	bne.n	8024fea <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8024f9a:	7afb      	ldrb	r3, [r7, #11]
 8024f9c:	f003 0304 	and.w	r3, r3, #4
 8024fa0:	2b00      	cmp	r3, #0
 8024fa2:	d122      	bne.n	8024fea <follow_path+0xd2>
 8024fa4:	2305      	movs	r3, #5
 8024fa6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8024fa8:	e01f      	b.n	8024fea <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8024faa:	7afb      	ldrb	r3, [r7, #11]
 8024fac:	f003 0304 	and.w	r3, r3, #4
 8024fb0:	2b00      	cmp	r3, #0
 8024fb2:	d11c      	bne.n	8024fee <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8024fb4:	693b      	ldr	r3, [r7, #16]
 8024fb6:	799b      	ldrb	r3, [r3, #6]
 8024fb8:	f003 0310 	and.w	r3, r3, #16
 8024fbc:	2b00      	cmp	r3, #0
 8024fbe:	d102      	bne.n	8024fc6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8024fc0:	2305      	movs	r3, #5
 8024fc2:	75fb      	strb	r3, [r7, #23]
 8024fc4:	e014      	b.n	8024ff0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8024fc6:	68fb      	ldr	r3, [r7, #12]
 8024fc8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8024fcc:	687b      	ldr	r3, [r7, #4]
 8024fce:	695b      	ldr	r3, [r3, #20]
 8024fd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8024fd4:	4413      	add	r3, r2
 8024fd6:	4619      	mov	r1, r3
 8024fd8:	68f8      	ldr	r0, [r7, #12]
 8024fda:	f7ff fe43 	bl	8024c64 <ld_clust>
 8024fde:	4602      	mov	r2, r0
 8024fe0:	693b      	ldr	r3, [r7, #16]
 8024fe2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8024fe4:	e7c0      	b.n	8024f68 <follow_path+0x50>
			if (res != FR_OK) break;
 8024fe6:	bf00      	nop
 8024fe8:	e002      	b.n	8024ff0 <follow_path+0xd8>
				break;
 8024fea:	bf00      	nop
 8024fec:	e000      	b.n	8024ff0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8024fee:	bf00      	nop
			}
		}
	}

	return res;
 8024ff0:	7dfb      	ldrb	r3, [r7, #23]
}
 8024ff2:	4618      	mov	r0, r3
 8024ff4:	3718      	adds	r7, #24
 8024ff6:	46bd      	mov	sp, r7
 8024ff8:	bd80      	pop	{r7, pc}

08024ffa <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8024ffa:	b480      	push	{r7}
 8024ffc:	b087      	sub	sp, #28
 8024ffe:	af00      	add	r7, sp, #0
 8025000:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8025002:	f04f 33ff 	mov.w	r3, #4294967295
 8025006:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8025008:	687b      	ldr	r3, [r7, #4]
 802500a:	681b      	ldr	r3, [r3, #0]
 802500c:	2b00      	cmp	r3, #0
 802500e:	d031      	beq.n	8025074 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8025010:	687b      	ldr	r3, [r7, #4]
 8025012:	681b      	ldr	r3, [r3, #0]
 8025014:	617b      	str	r3, [r7, #20]
 8025016:	e002      	b.n	802501e <get_ldnumber+0x24>
 8025018:	697b      	ldr	r3, [r7, #20]
 802501a:	3301      	adds	r3, #1
 802501c:	617b      	str	r3, [r7, #20]
 802501e:	697b      	ldr	r3, [r7, #20]
 8025020:	781b      	ldrb	r3, [r3, #0]
 8025022:	2b20      	cmp	r3, #32
 8025024:	d903      	bls.n	802502e <get_ldnumber+0x34>
 8025026:	697b      	ldr	r3, [r7, #20]
 8025028:	781b      	ldrb	r3, [r3, #0]
 802502a:	2b3a      	cmp	r3, #58	@ 0x3a
 802502c:	d1f4      	bne.n	8025018 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 802502e:	697b      	ldr	r3, [r7, #20]
 8025030:	781b      	ldrb	r3, [r3, #0]
 8025032:	2b3a      	cmp	r3, #58	@ 0x3a
 8025034:	d11c      	bne.n	8025070 <get_ldnumber+0x76>
			tp = *path;
 8025036:	687b      	ldr	r3, [r7, #4]
 8025038:	681b      	ldr	r3, [r3, #0]
 802503a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 802503c:	68fb      	ldr	r3, [r7, #12]
 802503e:	1c5a      	adds	r2, r3, #1
 8025040:	60fa      	str	r2, [r7, #12]
 8025042:	781b      	ldrb	r3, [r3, #0]
 8025044:	3b30      	subs	r3, #48	@ 0x30
 8025046:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8025048:	68bb      	ldr	r3, [r7, #8]
 802504a:	2b09      	cmp	r3, #9
 802504c:	d80e      	bhi.n	802506c <get_ldnumber+0x72>
 802504e:	68fa      	ldr	r2, [r7, #12]
 8025050:	697b      	ldr	r3, [r7, #20]
 8025052:	429a      	cmp	r2, r3
 8025054:	d10a      	bne.n	802506c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8025056:	68bb      	ldr	r3, [r7, #8]
 8025058:	2b00      	cmp	r3, #0
 802505a:	d107      	bne.n	802506c <get_ldnumber+0x72>
					vol = (int)i;
 802505c:	68bb      	ldr	r3, [r7, #8]
 802505e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8025060:	697b      	ldr	r3, [r7, #20]
 8025062:	3301      	adds	r3, #1
 8025064:	617b      	str	r3, [r7, #20]
 8025066:	687b      	ldr	r3, [r7, #4]
 8025068:	697a      	ldr	r2, [r7, #20]
 802506a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 802506c:	693b      	ldr	r3, [r7, #16]
 802506e:	e002      	b.n	8025076 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8025070:	2300      	movs	r3, #0
 8025072:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8025074:	693b      	ldr	r3, [r7, #16]
}
 8025076:	4618      	mov	r0, r3
 8025078:	371c      	adds	r7, #28
 802507a:	46bd      	mov	sp, r7
 802507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025080:	4770      	bx	lr
	...

08025084 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8025084:	b580      	push	{r7, lr}
 8025086:	b082      	sub	sp, #8
 8025088:	af00      	add	r7, sp, #0
 802508a:	6078      	str	r0, [r7, #4]
 802508c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 802508e:	687b      	ldr	r3, [r7, #4]
 8025090:	2200      	movs	r2, #0
 8025092:	70da      	strb	r2, [r3, #3]
 8025094:	687b      	ldr	r3, [r7, #4]
 8025096:	f04f 32ff 	mov.w	r2, #4294967295
 802509a:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 802509c:	6839      	ldr	r1, [r7, #0]
 802509e:	6878      	ldr	r0, [r7, #4]
 80250a0:	f7ff f8dc 	bl	802425c <move_window>
 80250a4:	4603      	mov	r3, r0
 80250a6:	2b00      	cmp	r3, #0
 80250a8:	d001      	beq.n	80250ae <check_fs+0x2a>
 80250aa:	2304      	movs	r3, #4
 80250ac:	e038      	b.n	8025120 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80250ae:	687b      	ldr	r3, [r7, #4]
 80250b0:	3330      	adds	r3, #48	@ 0x30
 80250b2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80250b6:	4618      	mov	r0, r3
 80250b8:	f7fe fe20 	bl	8023cfc <ld_word>
 80250bc:	4603      	mov	r3, r0
 80250be:	461a      	mov	r2, r3
 80250c0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80250c4:	429a      	cmp	r2, r3
 80250c6:	d001      	beq.n	80250cc <check_fs+0x48>
 80250c8:	2303      	movs	r3, #3
 80250ca:	e029      	b.n	8025120 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80250cc:	687b      	ldr	r3, [r7, #4]
 80250ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80250d2:	2be9      	cmp	r3, #233	@ 0xe9
 80250d4:	d009      	beq.n	80250ea <check_fs+0x66>
 80250d6:	687b      	ldr	r3, [r7, #4]
 80250d8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80250dc:	2beb      	cmp	r3, #235	@ 0xeb
 80250de:	d11e      	bne.n	802511e <check_fs+0x9a>
 80250e0:	687b      	ldr	r3, [r7, #4]
 80250e2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80250e6:	2b90      	cmp	r3, #144	@ 0x90
 80250e8:	d119      	bne.n	802511e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80250ea:	687b      	ldr	r3, [r7, #4]
 80250ec:	3330      	adds	r3, #48	@ 0x30
 80250ee:	3336      	adds	r3, #54	@ 0x36
 80250f0:	4618      	mov	r0, r3
 80250f2:	f7fe fe1b 	bl	8023d2c <ld_dword>
 80250f6:	4603      	mov	r3, r0
 80250f8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80250fc:	4a0a      	ldr	r2, [pc, #40]	@ (8025128 <check_fs+0xa4>)
 80250fe:	4293      	cmp	r3, r2
 8025100:	d101      	bne.n	8025106 <check_fs+0x82>
 8025102:	2300      	movs	r3, #0
 8025104:	e00c      	b.n	8025120 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8025106:	687b      	ldr	r3, [r7, #4]
 8025108:	3330      	adds	r3, #48	@ 0x30
 802510a:	3352      	adds	r3, #82	@ 0x52
 802510c:	4618      	mov	r0, r3
 802510e:	f7fe fe0d 	bl	8023d2c <ld_dword>
 8025112:	4603      	mov	r3, r0
 8025114:	4a05      	ldr	r2, [pc, #20]	@ (802512c <check_fs+0xa8>)
 8025116:	4293      	cmp	r3, r2
 8025118:	d101      	bne.n	802511e <check_fs+0x9a>
 802511a:	2300      	movs	r3, #0
 802511c:	e000      	b.n	8025120 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 802511e:	2302      	movs	r3, #2
}
 8025120:	4618      	mov	r0, r3
 8025122:	3708      	adds	r7, #8
 8025124:	46bd      	mov	sp, r7
 8025126:	bd80      	pop	{r7, pc}
 8025128:	00544146 	.word	0x00544146
 802512c:	33544146 	.word	0x33544146

08025130 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8025130:	b580      	push	{r7, lr}
 8025132:	b096      	sub	sp, #88	@ 0x58
 8025134:	af00      	add	r7, sp, #0
 8025136:	60f8      	str	r0, [r7, #12]
 8025138:	60b9      	str	r1, [r7, #8]
 802513a:	4613      	mov	r3, r2
 802513c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 802513e:	68bb      	ldr	r3, [r7, #8]
 8025140:	2200      	movs	r2, #0
 8025142:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8025144:	68f8      	ldr	r0, [r7, #12]
 8025146:	f7ff ff58 	bl	8024ffa <get_ldnumber>
 802514a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 802514c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802514e:	2b00      	cmp	r3, #0
 8025150:	da01      	bge.n	8025156 <find_volume+0x26>
 8025152:	230b      	movs	r3, #11
 8025154:	e22d      	b.n	80255b2 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8025156:	4aa1      	ldr	r2, [pc, #644]	@ (80253dc <find_volume+0x2ac>)
 8025158:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802515a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802515e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8025160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025162:	2b00      	cmp	r3, #0
 8025164:	d101      	bne.n	802516a <find_volume+0x3a>
 8025166:	230c      	movs	r3, #12
 8025168:	e223      	b.n	80255b2 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 802516a:	68bb      	ldr	r3, [r7, #8]
 802516c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 802516e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8025170:	79fb      	ldrb	r3, [r7, #7]
 8025172:	f023 0301 	bic.w	r3, r3, #1
 8025176:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8025178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802517a:	781b      	ldrb	r3, [r3, #0]
 802517c:	2b00      	cmp	r3, #0
 802517e:	d01a      	beq.n	80251b6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8025180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025182:	785b      	ldrb	r3, [r3, #1]
 8025184:	4618      	mov	r0, r3
 8025186:	f7fe fd19 	bl	8023bbc <disk_status>
 802518a:	4603      	mov	r3, r0
 802518c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8025190:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8025194:	f003 0301 	and.w	r3, r3, #1
 8025198:	2b00      	cmp	r3, #0
 802519a:	d10c      	bne.n	80251b6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 802519c:	79fb      	ldrb	r3, [r7, #7]
 802519e:	2b00      	cmp	r3, #0
 80251a0:	d007      	beq.n	80251b2 <find_volume+0x82>
 80251a2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80251a6:	f003 0304 	and.w	r3, r3, #4
 80251aa:	2b00      	cmp	r3, #0
 80251ac:	d001      	beq.n	80251b2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80251ae:	230a      	movs	r3, #10
 80251b0:	e1ff      	b.n	80255b2 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80251b2:	2300      	movs	r3, #0
 80251b4:	e1fd      	b.n	80255b2 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80251b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80251b8:	2200      	movs	r2, #0
 80251ba:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80251bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80251be:	b2da      	uxtb	r2, r3
 80251c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80251c2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80251c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80251c6:	785b      	ldrb	r3, [r3, #1]
 80251c8:	4618      	mov	r0, r3
 80251ca:	f7fe fd11 	bl	8023bf0 <disk_initialize>
 80251ce:	4603      	mov	r3, r0
 80251d0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80251d4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80251d8:	f003 0301 	and.w	r3, r3, #1
 80251dc:	2b00      	cmp	r3, #0
 80251de:	d001      	beq.n	80251e4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80251e0:	2303      	movs	r3, #3
 80251e2:	e1e6      	b.n	80255b2 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80251e4:	79fb      	ldrb	r3, [r7, #7]
 80251e6:	2b00      	cmp	r3, #0
 80251e8:	d007      	beq.n	80251fa <find_volume+0xca>
 80251ea:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80251ee:	f003 0304 	and.w	r3, r3, #4
 80251f2:	2b00      	cmp	r3, #0
 80251f4:	d001      	beq.n	80251fa <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80251f6:	230a      	movs	r3, #10
 80251f8:	e1db      	b.n	80255b2 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80251fa:	2300      	movs	r3, #0
 80251fc:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80251fe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8025200:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8025202:	f7ff ff3f 	bl	8025084 <check_fs>
 8025206:	4603      	mov	r3, r0
 8025208:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 802520c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8025210:	2b02      	cmp	r3, #2
 8025212:	d149      	bne.n	80252a8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8025214:	2300      	movs	r3, #0
 8025216:	643b      	str	r3, [r7, #64]	@ 0x40
 8025218:	e01e      	b.n	8025258 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 802521a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802521c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8025220:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8025222:	011b      	lsls	r3, r3, #4
 8025224:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8025228:	4413      	add	r3, r2
 802522a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 802522c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802522e:	3304      	adds	r3, #4
 8025230:	781b      	ldrb	r3, [r3, #0]
 8025232:	2b00      	cmp	r3, #0
 8025234:	d006      	beq.n	8025244 <find_volume+0x114>
 8025236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8025238:	3308      	adds	r3, #8
 802523a:	4618      	mov	r0, r3
 802523c:	f7fe fd76 	bl	8023d2c <ld_dword>
 8025240:	4602      	mov	r2, r0
 8025242:	e000      	b.n	8025246 <find_volume+0x116>
 8025244:	2200      	movs	r2, #0
 8025246:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8025248:	009b      	lsls	r3, r3, #2
 802524a:	3358      	adds	r3, #88	@ 0x58
 802524c:	443b      	add	r3, r7
 802524e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8025252:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8025254:	3301      	adds	r3, #1
 8025256:	643b      	str	r3, [r7, #64]	@ 0x40
 8025258:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802525a:	2b03      	cmp	r3, #3
 802525c:	d9dd      	bls.n	802521a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 802525e:	2300      	movs	r3, #0
 8025260:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8025262:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8025264:	2b00      	cmp	r3, #0
 8025266:	d002      	beq.n	802526e <find_volume+0x13e>
 8025268:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802526a:	3b01      	subs	r3, #1
 802526c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 802526e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8025270:	009b      	lsls	r3, r3, #2
 8025272:	3358      	adds	r3, #88	@ 0x58
 8025274:	443b      	add	r3, r7
 8025276:	f853 3c44 	ldr.w	r3, [r3, #-68]
 802527a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 802527c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802527e:	2b00      	cmp	r3, #0
 8025280:	d005      	beq.n	802528e <find_volume+0x15e>
 8025282:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8025284:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8025286:	f7ff fefd 	bl	8025084 <check_fs>
 802528a:	4603      	mov	r3, r0
 802528c:	e000      	b.n	8025290 <find_volume+0x160>
 802528e:	2303      	movs	r3, #3
 8025290:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8025294:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8025298:	2b01      	cmp	r3, #1
 802529a:	d905      	bls.n	80252a8 <find_volume+0x178>
 802529c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802529e:	3301      	adds	r3, #1
 80252a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80252a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80252a4:	2b03      	cmp	r3, #3
 80252a6:	d9e2      	bls.n	802526e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80252a8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80252ac:	2b04      	cmp	r3, #4
 80252ae:	d101      	bne.n	80252b4 <find_volume+0x184>
 80252b0:	2301      	movs	r3, #1
 80252b2:	e17e      	b.n	80255b2 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80252b4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80252b8:	2b01      	cmp	r3, #1
 80252ba:	d901      	bls.n	80252c0 <find_volume+0x190>
 80252bc:	230d      	movs	r3, #13
 80252be:	e178      	b.n	80255b2 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80252c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80252c2:	3330      	adds	r3, #48	@ 0x30
 80252c4:	330b      	adds	r3, #11
 80252c6:	4618      	mov	r0, r3
 80252c8:	f7fe fd18 	bl	8023cfc <ld_word>
 80252cc:	4603      	mov	r3, r0
 80252ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80252d2:	d001      	beq.n	80252d8 <find_volume+0x1a8>
 80252d4:	230d      	movs	r3, #13
 80252d6:	e16c      	b.n	80255b2 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80252d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80252da:	3330      	adds	r3, #48	@ 0x30
 80252dc:	3316      	adds	r3, #22
 80252de:	4618      	mov	r0, r3
 80252e0:	f7fe fd0c 	bl	8023cfc <ld_word>
 80252e4:	4603      	mov	r3, r0
 80252e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80252e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80252ea:	2b00      	cmp	r3, #0
 80252ec:	d106      	bne.n	80252fc <find_volume+0x1cc>
 80252ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80252f0:	3330      	adds	r3, #48	@ 0x30
 80252f2:	3324      	adds	r3, #36	@ 0x24
 80252f4:	4618      	mov	r0, r3
 80252f6:	f7fe fd19 	bl	8023d2c <ld_dword>
 80252fa:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80252fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80252fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8025300:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8025302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025304:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8025308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802530a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 802530c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802530e:	789b      	ldrb	r3, [r3, #2]
 8025310:	2b01      	cmp	r3, #1
 8025312:	d005      	beq.n	8025320 <find_volume+0x1f0>
 8025314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025316:	789b      	ldrb	r3, [r3, #2]
 8025318:	2b02      	cmp	r3, #2
 802531a:	d001      	beq.n	8025320 <find_volume+0x1f0>
 802531c:	230d      	movs	r3, #13
 802531e:	e148      	b.n	80255b2 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8025320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025322:	789b      	ldrb	r3, [r3, #2]
 8025324:	461a      	mov	r2, r3
 8025326:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8025328:	fb02 f303 	mul.w	r3, r2, r3
 802532c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 802532e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025330:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8025334:	461a      	mov	r2, r3
 8025336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025338:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 802533a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802533c:	895b      	ldrh	r3, [r3, #10]
 802533e:	2b00      	cmp	r3, #0
 8025340:	d008      	beq.n	8025354 <find_volume+0x224>
 8025342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025344:	895b      	ldrh	r3, [r3, #10]
 8025346:	461a      	mov	r2, r3
 8025348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802534a:	895b      	ldrh	r3, [r3, #10]
 802534c:	3b01      	subs	r3, #1
 802534e:	4013      	ands	r3, r2
 8025350:	2b00      	cmp	r3, #0
 8025352:	d001      	beq.n	8025358 <find_volume+0x228>
 8025354:	230d      	movs	r3, #13
 8025356:	e12c      	b.n	80255b2 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8025358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802535a:	3330      	adds	r3, #48	@ 0x30
 802535c:	3311      	adds	r3, #17
 802535e:	4618      	mov	r0, r3
 8025360:	f7fe fccc 	bl	8023cfc <ld_word>
 8025364:	4603      	mov	r3, r0
 8025366:	461a      	mov	r2, r3
 8025368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802536a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 802536c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802536e:	891b      	ldrh	r3, [r3, #8]
 8025370:	f003 030f 	and.w	r3, r3, #15
 8025374:	b29b      	uxth	r3, r3
 8025376:	2b00      	cmp	r3, #0
 8025378:	d001      	beq.n	802537e <find_volume+0x24e>
 802537a:	230d      	movs	r3, #13
 802537c:	e119      	b.n	80255b2 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 802537e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025380:	3330      	adds	r3, #48	@ 0x30
 8025382:	3313      	adds	r3, #19
 8025384:	4618      	mov	r0, r3
 8025386:	f7fe fcb9 	bl	8023cfc <ld_word>
 802538a:	4603      	mov	r3, r0
 802538c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 802538e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8025390:	2b00      	cmp	r3, #0
 8025392:	d106      	bne.n	80253a2 <find_volume+0x272>
 8025394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025396:	3330      	adds	r3, #48	@ 0x30
 8025398:	3320      	adds	r3, #32
 802539a:	4618      	mov	r0, r3
 802539c:	f7fe fcc6 	bl	8023d2c <ld_dword>
 80253a0:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80253a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80253a4:	3330      	adds	r3, #48	@ 0x30
 80253a6:	330e      	adds	r3, #14
 80253a8:	4618      	mov	r0, r3
 80253aa:	f7fe fca7 	bl	8023cfc <ld_word>
 80253ae:	4603      	mov	r3, r0
 80253b0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80253b2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80253b4:	2b00      	cmp	r3, #0
 80253b6:	d101      	bne.n	80253bc <find_volume+0x28c>
 80253b8:	230d      	movs	r3, #13
 80253ba:	e0fa      	b.n	80255b2 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80253bc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80253be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80253c0:	4413      	add	r3, r2
 80253c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80253c4:	8912      	ldrh	r2, [r2, #8]
 80253c6:	0912      	lsrs	r2, r2, #4
 80253c8:	b292      	uxth	r2, r2
 80253ca:	4413      	add	r3, r2
 80253cc:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80253ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80253d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80253d2:	429a      	cmp	r2, r3
 80253d4:	d204      	bcs.n	80253e0 <find_volume+0x2b0>
 80253d6:	230d      	movs	r3, #13
 80253d8:	e0eb      	b.n	80255b2 <find_volume+0x482>
 80253da:	bf00      	nop
 80253dc:	24000a88 	.word	0x24000a88
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80253e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80253e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80253e4:	1ad3      	subs	r3, r2, r3
 80253e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80253e8:	8952      	ldrh	r2, [r2, #10]
 80253ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80253ee:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80253f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80253f2:	2b00      	cmp	r3, #0
 80253f4:	d101      	bne.n	80253fa <find_volume+0x2ca>
 80253f6:	230d      	movs	r3, #13
 80253f8:	e0db      	b.n	80255b2 <find_volume+0x482>
		fmt = FS_FAT32;
 80253fa:	2303      	movs	r3, #3
 80253fc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8025400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025402:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8025406:	4293      	cmp	r3, r2
 8025408:	d802      	bhi.n	8025410 <find_volume+0x2e0>
 802540a:	2302      	movs	r3, #2
 802540c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8025410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025412:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8025416:	4293      	cmp	r3, r2
 8025418:	d802      	bhi.n	8025420 <find_volume+0x2f0>
 802541a:	2301      	movs	r3, #1
 802541c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8025420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025422:	1c9a      	adds	r2, r3, #2
 8025424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025426:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8025428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802542a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 802542c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 802542e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8025430:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8025432:	441a      	add	r2, r3
 8025434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025436:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8025438:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 802543a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802543c:	441a      	add	r2, r3
 802543e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025440:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8025442:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8025446:	2b03      	cmp	r3, #3
 8025448:	d11e      	bne.n	8025488 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 802544a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802544c:	3330      	adds	r3, #48	@ 0x30
 802544e:	332a      	adds	r3, #42	@ 0x2a
 8025450:	4618      	mov	r0, r3
 8025452:	f7fe fc53 	bl	8023cfc <ld_word>
 8025456:	4603      	mov	r3, r0
 8025458:	2b00      	cmp	r3, #0
 802545a:	d001      	beq.n	8025460 <find_volume+0x330>
 802545c:	230d      	movs	r3, #13
 802545e:	e0a8      	b.n	80255b2 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8025460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025462:	891b      	ldrh	r3, [r3, #8]
 8025464:	2b00      	cmp	r3, #0
 8025466:	d001      	beq.n	802546c <find_volume+0x33c>
 8025468:	230d      	movs	r3, #13
 802546a:	e0a2      	b.n	80255b2 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 802546c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802546e:	3330      	adds	r3, #48	@ 0x30
 8025470:	332c      	adds	r3, #44	@ 0x2c
 8025472:	4618      	mov	r0, r3
 8025474:	f7fe fc5a 	bl	8023d2c <ld_dword>
 8025478:	4602      	mov	r2, r0
 802547a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802547c:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 802547e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025480:	695b      	ldr	r3, [r3, #20]
 8025482:	009b      	lsls	r3, r3, #2
 8025484:	647b      	str	r3, [r7, #68]	@ 0x44
 8025486:	e01f      	b.n	80254c8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8025488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802548a:	891b      	ldrh	r3, [r3, #8]
 802548c:	2b00      	cmp	r3, #0
 802548e:	d101      	bne.n	8025494 <find_volume+0x364>
 8025490:	230d      	movs	r3, #13
 8025492:	e08e      	b.n	80255b2 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8025494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025496:	6a1a      	ldr	r2, [r3, #32]
 8025498:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802549a:	441a      	add	r2, r3
 802549c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802549e:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80254a0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80254a4:	2b02      	cmp	r3, #2
 80254a6:	d103      	bne.n	80254b0 <find_volume+0x380>
 80254a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80254aa:	695b      	ldr	r3, [r3, #20]
 80254ac:	005b      	lsls	r3, r3, #1
 80254ae:	e00a      	b.n	80254c6 <find_volume+0x396>
 80254b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80254b2:	695a      	ldr	r2, [r3, #20]
 80254b4:	4613      	mov	r3, r2
 80254b6:	005b      	lsls	r3, r3, #1
 80254b8:	4413      	add	r3, r2
 80254ba:	085a      	lsrs	r2, r3, #1
 80254bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80254be:	695b      	ldr	r3, [r3, #20]
 80254c0:	f003 0301 	and.w	r3, r3, #1
 80254c4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80254c6:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80254c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80254ca:	699a      	ldr	r2, [r3, #24]
 80254cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80254ce:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80254d2:	0a5b      	lsrs	r3, r3, #9
 80254d4:	429a      	cmp	r2, r3
 80254d6:	d201      	bcs.n	80254dc <find_volume+0x3ac>
 80254d8:	230d      	movs	r3, #13
 80254da:	e06a      	b.n	80255b2 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80254dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80254de:	f04f 32ff 	mov.w	r2, #4294967295
 80254e2:	611a      	str	r2, [r3, #16]
 80254e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80254e6:	691a      	ldr	r2, [r3, #16]
 80254e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80254ea:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80254ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80254ee:	2280      	movs	r2, #128	@ 0x80
 80254f0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80254f2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80254f6:	2b03      	cmp	r3, #3
 80254f8:	d149      	bne.n	802558e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80254fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80254fc:	3330      	adds	r3, #48	@ 0x30
 80254fe:	3330      	adds	r3, #48	@ 0x30
 8025500:	4618      	mov	r0, r3
 8025502:	f7fe fbfb 	bl	8023cfc <ld_word>
 8025506:	4603      	mov	r3, r0
 8025508:	2b01      	cmp	r3, #1
 802550a:	d140      	bne.n	802558e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 802550c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802550e:	3301      	adds	r3, #1
 8025510:	4619      	mov	r1, r3
 8025512:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8025514:	f7fe fea2 	bl	802425c <move_window>
 8025518:	4603      	mov	r3, r0
 802551a:	2b00      	cmp	r3, #0
 802551c:	d137      	bne.n	802558e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 802551e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025520:	2200      	movs	r2, #0
 8025522:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8025524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025526:	3330      	adds	r3, #48	@ 0x30
 8025528:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 802552c:	4618      	mov	r0, r3
 802552e:	f7fe fbe5 	bl	8023cfc <ld_word>
 8025532:	4603      	mov	r3, r0
 8025534:	461a      	mov	r2, r3
 8025536:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 802553a:	429a      	cmp	r2, r3
 802553c:	d127      	bne.n	802558e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 802553e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025540:	3330      	adds	r3, #48	@ 0x30
 8025542:	4618      	mov	r0, r3
 8025544:	f7fe fbf2 	bl	8023d2c <ld_dword>
 8025548:	4603      	mov	r3, r0
 802554a:	4a1c      	ldr	r2, [pc, #112]	@ (80255bc <find_volume+0x48c>)
 802554c:	4293      	cmp	r3, r2
 802554e:	d11e      	bne.n	802558e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8025550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025552:	3330      	adds	r3, #48	@ 0x30
 8025554:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8025558:	4618      	mov	r0, r3
 802555a:	f7fe fbe7 	bl	8023d2c <ld_dword>
 802555e:	4603      	mov	r3, r0
 8025560:	4a17      	ldr	r2, [pc, #92]	@ (80255c0 <find_volume+0x490>)
 8025562:	4293      	cmp	r3, r2
 8025564:	d113      	bne.n	802558e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8025566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025568:	3330      	adds	r3, #48	@ 0x30
 802556a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 802556e:	4618      	mov	r0, r3
 8025570:	f7fe fbdc 	bl	8023d2c <ld_dword>
 8025574:	4602      	mov	r2, r0
 8025576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025578:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 802557a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802557c:	3330      	adds	r3, #48	@ 0x30
 802557e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8025582:	4618      	mov	r0, r3
 8025584:	f7fe fbd2 	bl	8023d2c <ld_dword>
 8025588:	4602      	mov	r2, r0
 802558a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802558c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 802558e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025590:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8025594:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8025596:	4b0b      	ldr	r3, [pc, #44]	@ (80255c4 <find_volume+0x494>)
 8025598:	881b      	ldrh	r3, [r3, #0]
 802559a:	3301      	adds	r3, #1
 802559c:	b29a      	uxth	r2, r3
 802559e:	4b09      	ldr	r3, [pc, #36]	@ (80255c4 <find_volume+0x494>)
 80255a0:	801a      	strh	r2, [r3, #0]
 80255a2:	4b08      	ldr	r3, [pc, #32]	@ (80255c4 <find_volume+0x494>)
 80255a4:	881a      	ldrh	r2, [r3, #0]
 80255a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80255a8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80255aa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80255ac:	f7fe fdee 	bl	802418c <clear_lock>
#endif
	return FR_OK;
 80255b0:	2300      	movs	r3, #0
}
 80255b2:	4618      	mov	r0, r3
 80255b4:	3758      	adds	r7, #88	@ 0x58
 80255b6:	46bd      	mov	sp, r7
 80255b8:	bd80      	pop	{r7, pc}
 80255ba:	bf00      	nop
 80255bc:	41615252 	.word	0x41615252
 80255c0:	61417272 	.word	0x61417272
 80255c4:	24000a8c 	.word	0x24000a8c

080255c8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80255c8:	b580      	push	{r7, lr}
 80255ca:	b084      	sub	sp, #16
 80255cc:	af00      	add	r7, sp, #0
 80255ce:	6078      	str	r0, [r7, #4]
 80255d0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80255d2:	2309      	movs	r3, #9
 80255d4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80255d6:	687b      	ldr	r3, [r7, #4]
 80255d8:	2b00      	cmp	r3, #0
 80255da:	d01c      	beq.n	8025616 <validate+0x4e>
 80255dc:	687b      	ldr	r3, [r7, #4]
 80255de:	681b      	ldr	r3, [r3, #0]
 80255e0:	2b00      	cmp	r3, #0
 80255e2:	d018      	beq.n	8025616 <validate+0x4e>
 80255e4:	687b      	ldr	r3, [r7, #4]
 80255e6:	681b      	ldr	r3, [r3, #0]
 80255e8:	781b      	ldrb	r3, [r3, #0]
 80255ea:	2b00      	cmp	r3, #0
 80255ec:	d013      	beq.n	8025616 <validate+0x4e>
 80255ee:	687b      	ldr	r3, [r7, #4]
 80255f0:	889a      	ldrh	r2, [r3, #4]
 80255f2:	687b      	ldr	r3, [r7, #4]
 80255f4:	681b      	ldr	r3, [r3, #0]
 80255f6:	88db      	ldrh	r3, [r3, #6]
 80255f8:	429a      	cmp	r2, r3
 80255fa:	d10c      	bne.n	8025616 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80255fc:	687b      	ldr	r3, [r7, #4]
 80255fe:	681b      	ldr	r3, [r3, #0]
 8025600:	785b      	ldrb	r3, [r3, #1]
 8025602:	4618      	mov	r0, r3
 8025604:	f7fe fada 	bl	8023bbc <disk_status>
 8025608:	4603      	mov	r3, r0
 802560a:	f003 0301 	and.w	r3, r3, #1
 802560e:	2b00      	cmp	r3, #0
 8025610:	d101      	bne.n	8025616 <validate+0x4e>
			res = FR_OK;
 8025612:	2300      	movs	r3, #0
 8025614:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8025616:	7bfb      	ldrb	r3, [r7, #15]
 8025618:	2b00      	cmp	r3, #0
 802561a:	d102      	bne.n	8025622 <validate+0x5a>
 802561c:	687b      	ldr	r3, [r7, #4]
 802561e:	681b      	ldr	r3, [r3, #0]
 8025620:	e000      	b.n	8025624 <validate+0x5c>
 8025622:	2300      	movs	r3, #0
 8025624:	683a      	ldr	r2, [r7, #0]
 8025626:	6013      	str	r3, [r2, #0]
	return res;
 8025628:	7bfb      	ldrb	r3, [r7, #15]
}
 802562a:	4618      	mov	r0, r3
 802562c:	3710      	adds	r7, #16
 802562e:	46bd      	mov	sp, r7
 8025630:	bd80      	pop	{r7, pc}
	...

08025634 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8025634:	b580      	push	{r7, lr}
 8025636:	b088      	sub	sp, #32
 8025638:	af00      	add	r7, sp, #0
 802563a:	60f8      	str	r0, [r7, #12]
 802563c:	60b9      	str	r1, [r7, #8]
 802563e:	4613      	mov	r3, r2
 8025640:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8025642:	68bb      	ldr	r3, [r7, #8]
 8025644:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8025646:	f107 0310 	add.w	r3, r7, #16
 802564a:	4618      	mov	r0, r3
 802564c:	f7ff fcd5 	bl	8024ffa <get_ldnumber>
 8025650:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8025652:	69fb      	ldr	r3, [r7, #28]
 8025654:	2b00      	cmp	r3, #0
 8025656:	da01      	bge.n	802565c <f_mount+0x28>
 8025658:	230b      	movs	r3, #11
 802565a:	e02b      	b.n	80256b4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 802565c:	4a17      	ldr	r2, [pc, #92]	@ (80256bc <f_mount+0x88>)
 802565e:	69fb      	ldr	r3, [r7, #28]
 8025660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8025664:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8025666:	69bb      	ldr	r3, [r7, #24]
 8025668:	2b00      	cmp	r3, #0
 802566a:	d005      	beq.n	8025678 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 802566c:	69b8      	ldr	r0, [r7, #24]
 802566e:	f7fe fd8d 	bl	802418c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8025672:	69bb      	ldr	r3, [r7, #24]
 8025674:	2200      	movs	r2, #0
 8025676:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8025678:	68fb      	ldr	r3, [r7, #12]
 802567a:	2b00      	cmp	r3, #0
 802567c:	d002      	beq.n	8025684 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 802567e:	68fb      	ldr	r3, [r7, #12]
 8025680:	2200      	movs	r2, #0
 8025682:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8025684:	68fa      	ldr	r2, [r7, #12]
 8025686:	490d      	ldr	r1, [pc, #52]	@ (80256bc <f_mount+0x88>)
 8025688:	69fb      	ldr	r3, [r7, #28]
 802568a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 802568e:	68fb      	ldr	r3, [r7, #12]
 8025690:	2b00      	cmp	r3, #0
 8025692:	d002      	beq.n	802569a <f_mount+0x66>
 8025694:	79fb      	ldrb	r3, [r7, #7]
 8025696:	2b01      	cmp	r3, #1
 8025698:	d001      	beq.n	802569e <f_mount+0x6a>
 802569a:	2300      	movs	r3, #0
 802569c:	e00a      	b.n	80256b4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 802569e:	f107 010c 	add.w	r1, r7, #12
 80256a2:	f107 0308 	add.w	r3, r7, #8
 80256a6:	2200      	movs	r2, #0
 80256a8:	4618      	mov	r0, r3
 80256aa:	f7ff fd41 	bl	8025130 <find_volume>
 80256ae:	4603      	mov	r3, r0
 80256b0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80256b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80256b4:	4618      	mov	r0, r3
 80256b6:	3720      	adds	r7, #32
 80256b8:	46bd      	mov	sp, r7
 80256ba:	bd80      	pop	{r7, pc}
 80256bc:	24000a88 	.word	0x24000a88

080256c0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80256c0:	b580      	push	{r7, lr}
 80256c2:	b098      	sub	sp, #96	@ 0x60
 80256c4:	af00      	add	r7, sp, #0
 80256c6:	60f8      	str	r0, [r7, #12]
 80256c8:	60b9      	str	r1, [r7, #8]
 80256ca:	4613      	mov	r3, r2
 80256cc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80256ce:	68fb      	ldr	r3, [r7, #12]
 80256d0:	2b00      	cmp	r3, #0
 80256d2:	d101      	bne.n	80256d8 <f_open+0x18>
 80256d4:	2309      	movs	r3, #9
 80256d6:	e1a9      	b.n	8025a2c <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80256d8:	79fb      	ldrb	r3, [r7, #7]
 80256da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80256de:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80256e0:	79fa      	ldrb	r2, [r7, #7]
 80256e2:	f107 0110 	add.w	r1, r7, #16
 80256e6:	f107 0308 	add.w	r3, r7, #8
 80256ea:	4618      	mov	r0, r3
 80256ec:	f7ff fd20 	bl	8025130 <find_volume>
 80256f0:	4603      	mov	r3, r0
 80256f2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 80256f6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80256fa:	2b00      	cmp	r3, #0
 80256fc:	f040 818d 	bne.w	8025a1a <f_open+0x35a>
		dj.obj.fs = fs;
 8025700:	693b      	ldr	r3, [r7, #16]
 8025702:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8025704:	68ba      	ldr	r2, [r7, #8]
 8025706:	f107 0314 	add.w	r3, r7, #20
 802570a:	4611      	mov	r1, r2
 802570c:	4618      	mov	r0, r3
 802570e:	f7ff fc03 	bl	8024f18 <follow_path>
 8025712:	4603      	mov	r3, r0
 8025714:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8025718:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 802571c:	2b00      	cmp	r3, #0
 802571e:	d118      	bne.n	8025752 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8025720:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8025724:	b25b      	sxtb	r3, r3
 8025726:	2b00      	cmp	r3, #0
 8025728:	da03      	bge.n	8025732 <f_open+0x72>
				res = FR_INVALID_NAME;
 802572a:	2306      	movs	r3, #6
 802572c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8025730:	e00f      	b.n	8025752 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8025732:	79fb      	ldrb	r3, [r7, #7]
 8025734:	2b01      	cmp	r3, #1
 8025736:	bf8c      	ite	hi
 8025738:	2301      	movhi	r3, #1
 802573a:	2300      	movls	r3, #0
 802573c:	b2db      	uxtb	r3, r3
 802573e:	461a      	mov	r2, r3
 8025740:	f107 0314 	add.w	r3, r7, #20
 8025744:	4611      	mov	r1, r2
 8025746:	4618      	mov	r0, r3
 8025748:	f7fe fbd8 	bl	8023efc <chk_lock>
 802574c:	4603      	mov	r3, r0
 802574e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8025752:	79fb      	ldrb	r3, [r7, #7]
 8025754:	f003 031c 	and.w	r3, r3, #28
 8025758:	2b00      	cmp	r3, #0
 802575a:	d07f      	beq.n	802585c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 802575c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8025760:	2b00      	cmp	r3, #0
 8025762:	d017      	beq.n	8025794 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8025764:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8025768:	2b04      	cmp	r3, #4
 802576a:	d10e      	bne.n	802578a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 802576c:	f7fe fc22 	bl	8023fb4 <enq_lock>
 8025770:	4603      	mov	r3, r0
 8025772:	2b00      	cmp	r3, #0
 8025774:	d006      	beq.n	8025784 <f_open+0xc4>
 8025776:	f107 0314 	add.w	r3, r7, #20
 802577a:	4618      	mov	r0, r3
 802577c:	f7ff fb06 	bl	8024d8c <dir_register>
 8025780:	4603      	mov	r3, r0
 8025782:	e000      	b.n	8025786 <f_open+0xc6>
 8025784:	2312      	movs	r3, #18
 8025786:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 802578a:	79fb      	ldrb	r3, [r7, #7]
 802578c:	f043 0308 	orr.w	r3, r3, #8
 8025790:	71fb      	strb	r3, [r7, #7]
 8025792:	e010      	b.n	80257b6 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8025794:	7ebb      	ldrb	r3, [r7, #26]
 8025796:	f003 0311 	and.w	r3, r3, #17
 802579a:	2b00      	cmp	r3, #0
 802579c:	d003      	beq.n	80257a6 <f_open+0xe6>
					res = FR_DENIED;
 802579e:	2307      	movs	r3, #7
 80257a0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80257a4:	e007      	b.n	80257b6 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80257a6:	79fb      	ldrb	r3, [r7, #7]
 80257a8:	f003 0304 	and.w	r3, r3, #4
 80257ac:	2b00      	cmp	r3, #0
 80257ae:	d002      	beq.n	80257b6 <f_open+0xf6>
 80257b0:	2308      	movs	r3, #8
 80257b2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80257b6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80257ba:	2b00      	cmp	r3, #0
 80257bc:	d168      	bne.n	8025890 <f_open+0x1d0>
 80257be:	79fb      	ldrb	r3, [r7, #7]
 80257c0:	f003 0308 	and.w	r3, r3, #8
 80257c4:	2b00      	cmp	r3, #0
 80257c6:	d063      	beq.n	8025890 <f_open+0x1d0>
				dw = GET_FATTIME();
 80257c8:	f7fd ff6c 	bl	80236a4 <get_fattime>
 80257cc:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80257ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80257d0:	330e      	adds	r3, #14
 80257d2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80257d4:	4618      	mov	r0, r3
 80257d6:	f7fe fae7 	bl	8023da8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80257da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80257dc:	3316      	adds	r3, #22
 80257de:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80257e0:	4618      	mov	r0, r3
 80257e2:	f7fe fae1 	bl	8023da8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80257e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80257e8:	330b      	adds	r3, #11
 80257ea:	2220      	movs	r2, #32
 80257ec:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80257ee:	693b      	ldr	r3, [r7, #16]
 80257f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80257f2:	4611      	mov	r1, r2
 80257f4:	4618      	mov	r0, r3
 80257f6:	f7ff fa35 	bl	8024c64 <ld_clust>
 80257fa:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80257fc:	693b      	ldr	r3, [r7, #16]
 80257fe:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8025800:	2200      	movs	r2, #0
 8025802:	4618      	mov	r0, r3
 8025804:	f7ff fa4d 	bl	8024ca2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8025808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802580a:	331c      	adds	r3, #28
 802580c:	2100      	movs	r1, #0
 802580e:	4618      	mov	r0, r3
 8025810:	f7fe faca 	bl	8023da8 <st_dword>
					fs->wflag = 1;
 8025814:	693b      	ldr	r3, [r7, #16]
 8025816:	2201      	movs	r2, #1
 8025818:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 802581a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802581c:	2b00      	cmp	r3, #0
 802581e:	d037      	beq.n	8025890 <f_open+0x1d0>
						dw = fs->winsect;
 8025820:	693b      	ldr	r3, [r7, #16]
 8025822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8025824:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8025826:	f107 0314 	add.w	r3, r7, #20
 802582a:	2200      	movs	r2, #0
 802582c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 802582e:	4618      	mov	r0, r3
 8025830:	f7fe ff60 	bl	80246f4 <remove_chain>
 8025834:	4603      	mov	r3, r0
 8025836:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 802583a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 802583e:	2b00      	cmp	r3, #0
 8025840:	d126      	bne.n	8025890 <f_open+0x1d0>
							res = move_window(fs, dw);
 8025842:	693b      	ldr	r3, [r7, #16]
 8025844:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8025846:	4618      	mov	r0, r3
 8025848:	f7fe fd08 	bl	802425c <move_window>
 802584c:	4603      	mov	r3, r0
 802584e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8025852:	693b      	ldr	r3, [r7, #16]
 8025854:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8025856:	3a01      	subs	r2, #1
 8025858:	60da      	str	r2, [r3, #12]
 802585a:	e019      	b.n	8025890 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 802585c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8025860:	2b00      	cmp	r3, #0
 8025862:	d115      	bne.n	8025890 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8025864:	7ebb      	ldrb	r3, [r7, #26]
 8025866:	f003 0310 	and.w	r3, r3, #16
 802586a:	2b00      	cmp	r3, #0
 802586c:	d003      	beq.n	8025876 <f_open+0x1b6>
					res = FR_NO_FILE;
 802586e:	2304      	movs	r3, #4
 8025870:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8025874:	e00c      	b.n	8025890 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8025876:	79fb      	ldrb	r3, [r7, #7]
 8025878:	f003 0302 	and.w	r3, r3, #2
 802587c:	2b00      	cmp	r3, #0
 802587e:	d007      	beq.n	8025890 <f_open+0x1d0>
 8025880:	7ebb      	ldrb	r3, [r7, #26]
 8025882:	f003 0301 	and.w	r3, r3, #1
 8025886:	2b00      	cmp	r3, #0
 8025888:	d002      	beq.n	8025890 <f_open+0x1d0>
						res = FR_DENIED;
 802588a:	2307      	movs	r3, #7
 802588c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8025890:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8025894:	2b00      	cmp	r3, #0
 8025896:	d126      	bne.n	80258e6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8025898:	79fb      	ldrb	r3, [r7, #7]
 802589a:	f003 0308 	and.w	r3, r3, #8
 802589e:	2b00      	cmp	r3, #0
 80258a0:	d003      	beq.n	80258aa <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80258a2:	79fb      	ldrb	r3, [r7, #7]
 80258a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80258a8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80258aa:	693b      	ldr	r3, [r7, #16]
 80258ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80258ae:	68fb      	ldr	r3, [r7, #12]
 80258b0:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 80258b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80258b4:	68fb      	ldr	r3, [r7, #12]
 80258b6:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80258b8:	79fb      	ldrb	r3, [r7, #7]
 80258ba:	2b01      	cmp	r3, #1
 80258bc:	bf8c      	ite	hi
 80258be:	2301      	movhi	r3, #1
 80258c0:	2300      	movls	r3, #0
 80258c2:	b2db      	uxtb	r3, r3
 80258c4:	461a      	mov	r2, r3
 80258c6:	f107 0314 	add.w	r3, r7, #20
 80258ca:	4611      	mov	r1, r2
 80258cc:	4618      	mov	r0, r3
 80258ce:	f7fe fb93 	bl	8023ff8 <inc_lock>
 80258d2:	4602      	mov	r2, r0
 80258d4:	68fb      	ldr	r3, [r7, #12]
 80258d6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80258d8:	68fb      	ldr	r3, [r7, #12]
 80258da:	691b      	ldr	r3, [r3, #16]
 80258dc:	2b00      	cmp	r3, #0
 80258de:	d102      	bne.n	80258e6 <f_open+0x226>
 80258e0:	2302      	movs	r3, #2
 80258e2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80258e6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80258ea:	2b00      	cmp	r3, #0
 80258ec:	f040 8095 	bne.w	8025a1a <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80258f0:	693b      	ldr	r3, [r7, #16]
 80258f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80258f4:	4611      	mov	r1, r2
 80258f6:	4618      	mov	r0, r3
 80258f8:	f7ff f9b4 	bl	8024c64 <ld_clust>
 80258fc:	4602      	mov	r2, r0
 80258fe:	68fb      	ldr	r3, [r7, #12]
 8025900:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8025902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8025904:	331c      	adds	r3, #28
 8025906:	4618      	mov	r0, r3
 8025908:	f7fe fa10 	bl	8023d2c <ld_dword>
 802590c:	4602      	mov	r2, r0
 802590e:	68fb      	ldr	r3, [r7, #12]
 8025910:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8025912:	68fb      	ldr	r3, [r7, #12]
 8025914:	2200      	movs	r2, #0
 8025916:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8025918:	693a      	ldr	r2, [r7, #16]
 802591a:	68fb      	ldr	r3, [r7, #12]
 802591c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 802591e:	693b      	ldr	r3, [r7, #16]
 8025920:	88da      	ldrh	r2, [r3, #6]
 8025922:	68fb      	ldr	r3, [r7, #12]
 8025924:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8025926:	68fb      	ldr	r3, [r7, #12]
 8025928:	79fa      	ldrb	r2, [r7, #7]
 802592a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 802592c:	68fb      	ldr	r3, [r7, #12]
 802592e:	2200      	movs	r2, #0
 8025930:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8025932:	68fb      	ldr	r3, [r7, #12]
 8025934:	2200      	movs	r2, #0
 8025936:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8025938:	68fb      	ldr	r3, [r7, #12]
 802593a:	2200      	movs	r2, #0
 802593c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 802593e:	68fb      	ldr	r3, [r7, #12]
 8025940:	3330      	adds	r3, #48	@ 0x30
 8025942:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8025946:	2100      	movs	r1, #0
 8025948:	4618      	mov	r0, r3
 802594a:	f7fe fa7a 	bl	8023e42 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 802594e:	79fb      	ldrb	r3, [r7, #7]
 8025950:	f003 0320 	and.w	r3, r3, #32
 8025954:	2b00      	cmp	r3, #0
 8025956:	d060      	beq.n	8025a1a <f_open+0x35a>
 8025958:	68fb      	ldr	r3, [r7, #12]
 802595a:	68db      	ldr	r3, [r3, #12]
 802595c:	2b00      	cmp	r3, #0
 802595e:	d05c      	beq.n	8025a1a <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8025960:	68fb      	ldr	r3, [r7, #12]
 8025962:	68da      	ldr	r2, [r3, #12]
 8025964:	68fb      	ldr	r3, [r7, #12]
 8025966:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8025968:	693b      	ldr	r3, [r7, #16]
 802596a:	895b      	ldrh	r3, [r3, #10]
 802596c:	025b      	lsls	r3, r3, #9
 802596e:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8025970:	68fb      	ldr	r3, [r7, #12]
 8025972:	689b      	ldr	r3, [r3, #8]
 8025974:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8025976:	68fb      	ldr	r3, [r7, #12]
 8025978:	68db      	ldr	r3, [r3, #12]
 802597a:	657b      	str	r3, [r7, #84]	@ 0x54
 802597c:	e016      	b.n	80259ac <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 802597e:	68fb      	ldr	r3, [r7, #12]
 8025980:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8025982:	4618      	mov	r0, r3
 8025984:	f7fe fd25 	bl	80243d2 <get_fat>
 8025988:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 802598a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 802598c:	2b01      	cmp	r3, #1
 802598e:	d802      	bhi.n	8025996 <f_open+0x2d6>
 8025990:	2302      	movs	r3, #2
 8025992:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8025996:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8025998:	f1b3 3fff 	cmp.w	r3, #4294967295
 802599c:	d102      	bne.n	80259a4 <f_open+0x2e4>
 802599e:	2301      	movs	r3, #1
 80259a0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80259a4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80259a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80259a8:	1ad3      	subs	r3, r2, r3
 80259aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80259ac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80259b0:	2b00      	cmp	r3, #0
 80259b2:	d103      	bne.n	80259bc <f_open+0x2fc>
 80259b4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80259b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80259b8:	429a      	cmp	r2, r3
 80259ba:	d8e0      	bhi.n	802597e <f_open+0x2be>
				}
				fp->clust = clst;
 80259bc:	68fb      	ldr	r3, [r7, #12]
 80259be:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80259c0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80259c2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80259c6:	2b00      	cmp	r3, #0
 80259c8:	d127      	bne.n	8025a1a <f_open+0x35a>
 80259ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80259cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80259d0:	2b00      	cmp	r3, #0
 80259d2:	d022      	beq.n	8025a1a <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80259d4:	693b      	ldr	r3, [r7, #16]
 80259d6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80259d8:	4618      	mov	r0, r3
 80259da:	f7fe fcdb 	bl	8024394 <clust2sect>
 80259de:	6478      	str	r0, [r7, #68]	@ 0x44
 80259e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80259e2:	2b00      	cmp	r3, #0
 80259e4:	d103      	bne.n	80259ee <f_open+0x32e>
						res = FR_INT_ERR;
 80259e6:	2302      	movs	r3, #2
 80259e8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80259ec:	e015      	b.n	8025a1a <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80259ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80259f0:	0a5a      	lsrs	r2, r3, #9
 80259f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80259f4:	441a      	add	r2, r3
 80259f6:	68fb      	ldr	r3, [r7, #12]
 80259f8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80259fa:	693b      	ldr	r3, [r7, #16]
 80259fc:	7858      	ldrb	r0, [r3, #1]
 80259fe:	68fb      	ldr	r3, [r7, #12]
 8025a00:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8025a04:	68fb      	ldr	r3, [r7, #12]
 8025a06:	6a1a      	ldr	r2, [r3, #32]
 8025a08:	2301      	movs	r3, #1
 8025a0a:	f7fe f919 	bl	8023c40 <disk_read>
 8025a0e:	4603      	mov	r3, r0
 8025a10:	2b00      	cmp	r3, #0
 8025a12:	d002      	beq.n	8025a1a <f_open+0x35a>
 8025a14:	2301      	movs	r3, #1
 8025a16:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8025a1a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8025a1e:	2b00      	cmp	r3, #0
 8025a20:	d002      	beq.n	8025a28 <f_open+0x368>
 8025a22:	68fb      	ldr	r3, [r7, #12]
 8025a24:	2200      	movs	r2, #0
 8025a26:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8025a28:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8025a2c:	4618      	mov	r0, r3
 8025a2e:	3760      	adds	r7, #96	@ 0x60
 8025a30:	46bd      	mov	sp, r7
 8025a32:	bd80      	pop	{r7, pc}

08025a34 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8025a34:	b580      	push	{r7, lr}
 8025a36:	b08e      	sub	sp, #56	@ 0x38
 8025a38:	af00      	add	r7, sp, #0
 8025a3a:	60f8      	str	r0, [r7, #12]
 8025a3c:	60b9      	str	r1, [r7, #8]
 8025a3e:	607a      	str	r2, [r7, #4]
 8025a40:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8025a42:	68bb      	ldr	r3, [r7, #8]
 8025a44:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8025a46:	683b      	ldr	r3, [r7, #0]
 8025a48:	2200      	movs	r2, #0
 8025a4a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8025a4c:	68fb      	ldr	r3, [r7, #12]
 8025a4e:	f107 0214 	add.w	r2, r7, #20
 8025a52:	4611      	mov	r1, r2
 8025a54:	4618      	mov	r0, r3
 8025a56:	f7ff fdb7 	bl	80255c8 <validate>
 8025a5a:	4603      	mov	r3, r0
 8025a5c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8025a60:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8025a64:	2b00      	cmp	r3, #0
 8025a66:	d107      	bne.n	8025a78 <f_read+0x44>
 8025a68:	68fb      	ldr	r3, [r7, #12]
 8025a6a:	7d5b      	ldrb	r3, [r3, #21]
 8025a6c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8025a70:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8025a74:	2b00      	cmp	r3, #0
 8025a76:	d002      	beq.n	8025a7e <f_read+0x4a>
 8025a78:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8025a7c:	e115      	b.n	8025caa <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8025a7e:	68fb      	ldr	r3, [r7, #12]
 8025a80:	7d1b      	ldrb	r3, [r3, #20]
 8025a82:	f003 0301 	and.w	r3, r3, #1
 8025a86:	2b00      	cmp	r3, #0
 8025a88:	d101      	bne.n	8025a8e <f_read+0x5a>
 8025a8a:	2307      	movs	r3, #7
 8025a8c:	e10d      	b.n	8025caa <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8025a8e:	68fb      	ldr	r3, [r7, #12]
 8025a90:	68da      	ldr	r2, [r3, #12]
 8025a92:	68fb      	ldr	r3, [r7, #12]
 8025a94:	699b      	ldr	r3, [r3, #24]
 8025a96:	1ad3      	subs	r3, r2, r3
 8025a98:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8025a9a:	687a      	ldr	r2, [r7, #4]
 8025a9c:	6a3b      	ldr	r3, [r7, #32]
 8025a9e:	429a      	cmp	r2, r3
 8025aa0:	f240 80fe 	bls.w	8025ca0 <f_read+0x26c>
 8025aa4:	6a3b      	ldr	r3, [r7, #32]
 8025aa6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8025aa8:	e0fa      	b.n	8025ca0 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8025aaa:	68fb      	ldr	r3, [r7, #12]
 8025aac:	699b      	ldr	r3, [r3, #24]
 8025aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8025ab2:	2b00      	cmp	r3, #0
 8025ab4:	f040 80c6 	bne.w	8025c44 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8025ab8:	68fb      	ldr	r3, [r7, #12]
 8025aba:	699b      	ldr	r3, [r3, #24]
 8025abc:	0a5b      	lsrs	r3, r3, #9
 8025abe:	697a      	ldr	r2, [r7, #20]
 8025ac0:	8952      	ldrh	r2, [r2, #10]
 8025ac2:	3a01      	subs	r2, #1
 8025ac4:	4013      	ands	r3, r2
 8025ac6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8025ac8:	69fb      	ldr	r3, [r7, #28]
 8025aca:	2b00      	cmp	r3, #0
 8025acc:	d12f      	bne.n	8025b2e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8025ace:	68fb      	ldr	r3, [r7, #12]
 8025ad0:	699b      	ldr	r3, [r3, #24]
 8025ad2:	2b00      	cmp	r3, #0
 8025ad4:	d103      	bne.n	8025ade <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8025ad6:	68fb      	ldr	r3, [r7, #12]
 8025ad8:	689b      	ldr	r3, [r3, #8]
 8025ada:	633b      	str	r3, [r7, #48]	@ 0x30
 8025adc:	e013      	b.n	8025b06 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8025ade:	68fb      	ldr	r3, [r7, #12]
 8025ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8025ae2:	2b00      	cmp	r3, #0
 8025ae4:	d007      	beq.n	8025af6 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8025ae6:	68fb      	ldr	r3, [r7, #12]
 8025ae8:	699b      	ldr	r3, [r3, #24]
 8025aea:	4619      	mov	r1, r3
 8025aec:	68f8      	ldr	r0, [r7, #12]
 8025aee:	f7fe fefe 	bl	80248ee <clmt_clust>
 8025af2:	6338      	str	r0, [r7, #48]	@ 0x30
 8025af4:	e007      	b.n	8025b06 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8025af6:	68fa      	ldr	r2, [r7, #12]
 8025af8:	68fb      	ldr	r3, [r7, #12]
 8025afa:	69db      	ldr	r3, [r3, #28]
 8025afc:	4619      	mov	r1, r3
 8025afe:	4610      	mov	r0, r2
 8025b00:	f7fe fc67 	bl	80243d2 <get_fat>
 8025b04:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8025b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8025b08:	2b01      	cmp	r3, #1
 8025b0a:	d804      	bhi.n	8025b16 <f_read+0xe2>
 8025b0c:	68fb      	ldr	r3, [r7, #12]
 8025b0e:	2202      	movs	r2, #2
 8025b10:	755a      	strb	r2, [r3, #21]
 8025b12:	2302      	movs	r3, #2
 8025b14:	e0c9      	b.n	8025caa <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8025b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8025b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8025b1c:	d104      	bne.n	8025b28 <f_read+0xf4>
 8025b1e:	68fb      	ldr	r3, [r7, #12]
 8025b20:	2201      	movs	r2, #1
 8025b22:	755a      	strb	r2, [r3, #21]
 8025b24:	2301      	movs	r3, #1
 8025b26:	e0c0      	b.n	8025caa <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8025b28:	68fb      	ldr	r3, [r7, #12]
 8025b2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8025b2c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8025b2e:	697a      	ldr	r2, [r7, #20]
 8025b30:	68fb      	ldr	r3, [r7, #12]
 8025b32:	69db      	ldr	r3, [r3, #28]
 8025b34:	4619      	mov	r1, r3
 8025b36:	4610      	mov	r0, r2
 8025b38:	f7fe fc2c 	bl	8024394 <clust2sect>
 8025b3c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8025b3e:	69bb      	ldr	r3, [r7, #24]
 8025b40:	2b00      	cmp	r3, #0
 8025b42:	d104      	bne.n	8025b4e <f_read+0x11a>
 8025b44:	68fb      	ldr	r3, [r7, #12]
 8025b46:	2202      	movs	r2, #2
 8025b48:	755a      	strb	r2, [r3, #21]
 8025b4a:	2302      	movs	r3, #2
 8025b4c:	e0ad      	b.n	8025caa <f_read+0x276>
			sect += csect;
 8025b4e:	69ba      	ldr	r2, [r7, #24]
 8025b50:	69fb      	ldr	r3, [r7, #28]
 8025b52:	4413      	add	r3, r2
 8025b54:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8025b56:	687b      	ldr	r3, [r7, #4]
 8025b58:	0a5b      	lsrs	r3, r3, #9
 8025b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8025b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025b5e:	2b00      	cmp	r3, #0
 8025b60:	d039      	beq.n	8025bd6 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8025b62:	69fa      	ldr	r2, [r7, #28]
 8025b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025b66:	4413      	add	r3, r2
 8025b68:	697a      	ldr	r2, [r7, #20]
 8025b6a:	8952      	ldrh	r2, [r2, #10]
 8025b6c:	4293      	cmp	r3, r2
 8025b6e:	d905      	bls.n	8025b7c <f_read+0x148>
					cc = fs->csize - csect;
 8025b70:	697b      	ldr	r3, [r7, #20]
 8025b72:	895b      	ldrh	r3, [r3, #10]
 8025b74:	461a      	mov	r2, r3
 8025b76:	69fb      	ldr	r3, [r7, #28]
 8025b78:	1ad3      	subs	r3, r2, r3
 8025b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8025b7c:	697b      	ldr	r3, [r7, #20]
 8025b7e:	7858      	ldrb	r0, [r3, #1]
 8025b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025b82:	69ba      	ldr	r2, [r7, #24]
 8025b84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8025b86:	f7fe f85b 	bl	8023c40 <disk_read>
 8025b8a:	4603      	mov	r3, r0
 8025b8c:	2b00      	cmp	r3, #0
 8025b8e:	d004      	beq.n	8025b9a <f_read+0x166>
 8025b90:	68fb      	ldr	r3, [r7, #12]
 8025b92:	2201      	movs	r2, #1
 8025b94:	755a      	strb	r2, [r3, #21]
 8025b96:	2301      	movs	r3, #1
 8025b98:	e087      	b.n	8025caa <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8025b9a:	68fb      	ldr	r3, [r7, #12]
 8025b9c:	7d1b      	ldrb	r3, [r3, #20]
 8025b9e:	b25b      	sxtb	r3, r3
 8025ba0:	2b00      	cmp	r3, #0
 8025ba2:	da14      	bge.n	8025bce <f_read+0x19a>
 8025ba4:	68fb      	ldr	r3, [r7, #12]
 8025ba6:	6a1a      	ldr	r2, [r3, #32]
 8025ba8:	69bb      	ldr	r3, [r7, #24]
 8025baa:	1ad3      	subs	r3, r2, r3
 8025bac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8025bae:	429a      	cmp	r2, r3
 8025bb0:	d90d      	bls.n	8025bce <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8025bb2:	68fb      	ldr	r3, [r7, #12]
 8025bb4:	6a1a      	ldr	r2, [r3, #32]
 8025bb6:	69bb      	ldr	r3, [r7, #24]
 8025bb8:	1ad3      	subs	r3, r2, r3
 8025bba:	025b      	lsls	r3, r3, #9
 8025bbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8025bbe:	18d0      	adds	r0, r2, r3
 8025bc0:	68fb      	ldr	r3, [r7, #12]
 8025bc2:	3330      	adds	r3, #48	@ 0x30
 8025bc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8025bc8:	4619      	mov	r1, r3
 8025bca:	f7fe f919 	bl	8023e00 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8025bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025bd0:	025b      	lsls	r3, r3, #9
 8025bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8025bd4:	e050      	b.n	8025c78 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8025bd6:	68fb      	ldr	r3, [r7, #12]
 8025bd8:	6a1b      	ldr	r3, [r3, #32]
 8025bda:	69ba      	ldr	r2, [r7, #24]
 8025bdc:	429a      	cmp	r2, r3
 8025bde:	d02e      	beq.n	8025c3e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8025be0:	68fb      	ldr	r3, [r7, #12]
 8025be2:	7d1b      	ldrb	r3, [r3, #20]
 8025be4:	b25b      	sxtb	r3, r3
 8025be6:	2b00      	cmp	r3, #0
 8025be8:	da18      	bge.n	8025c1c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8025bea:	697b      	ldr	r3, [r7, #20]
 8025bec:	7858      	ldrb	r0, [r3, #1]
 8025bee:	68fb      	ldr	r3, [r7, #12]
 8025bf0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8025bf4:	68fb      	ldr	r3, [r7, #12]
 8025bf6:	6a1a      	ldr	r2, [r3, #32]
 8025bf8:	2301      	movs	r3, #1
 8025bfa:	f7fe f841 	bl	8023c80 <disk_write>
 8025bfe:	4603      	mov	r3, r0
 8025c00:	2b00      	cmp	r3, #0
 8025c02:	d004      	beq.n	8025c0e <f_read+0x1da>
 8025c04:	68fb      	ldr	r3, [r7, #12]
 8025c06:	2201      	movs	r2, #1
 8025c08:	755a      	strb	r2, [r3, #21]
 8025c0a:	2301      	movs	r3, #1
 8025c0c:	e04d      	b.n	8025caa <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8025c0e:	68fb      	ldr	r3, [r7, #12]
 8025c10:	7d1b      	ldrb	r3, [r3, #20]
 8025c12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8025c16:	b2da      	uxtb	r2, r3
 8025c18:	68fb      	ldr	r3, [r7, #12]
 8025c1a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8025c1c:	697b      	ldr	r3, [r7, #20]
 8025c1e:	7858      	ldrb	r0, [r3, #1]
 8025c20:	68fb      	ldr	r3, [r7, #12]
 8025c22:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8025c26:	2301      	movs	r3, #1
 8025c28:	69ba      	ldr	r2, [r7, #24]
 8025c2a:	f7fe f809 	bl	8023c40 <disk_read>
 8025c2e:	4603      	mov	r3, r0
 8025c30:	2b00      	cmp	r3, #0
 8025c32:	d004      	beq.n	8025c3e <f_read+0x20a>
 8025c34:	68fb      	ldr	r3, [r7, #12]
 8025c36:	2201      	movs	r2, #1
 8025c38:	755a      	strb	r2, [r3, #21]
 8025c3a:	2301      	movs	r3, #1
 8025c3c:	e035      	b.n	8025caa <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8025c3e:	68fb      	ldr	r3, [r7, #12]
 8025c40:	69ba      	ldr	r2, [r7, #24]
 8025c42:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8025c44:	68fb      	ldr	r3, [r7, #12]
 8025c46:	699b      	ldr	r3, [r3, #24]
 8025c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8025c4c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8025c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8025c52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8025c54:	687b      	ldr	r3, [r7, #4]
 8025c56:	429a      	cmp	r2, r3
 8025c58:	d901      	bls.n	8025c5e <f_read+0x22a>
 8025c5a:	687b      	ldr	r3, [r7, #4]
 8025c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8025c5e:	68fb      	ldr	r3, [r7, #12]
 8025c60:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8025c64:	68fb      	ldr	r3, [r7, #12]
 8025c66:	699b      	ldr	r3, [r3, #24]
 8025c68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8025c6c:	4413      	add	r3, r2
 8025c6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8025c70:	4619      	mov	r1, r3
 8025c72:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8025c74:	f7fe f8c4 	bl	8023e00 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8025c78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8025c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8025c7c:	4413      	add	r3, r2
 8025c7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8025c80:	68fb      	ldr	r3, [r7, #12]
 8025c82:	699a      	ldr	r2, [r3, #24]
 8025c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8025c86:	441a      	add	r2, r3
 8025c88:	68fb      	ldr	r3, [r7, #12]
 8025c8a:	619a      	str	r2, [r3, #24]
 8025c8c:	683b      	ldr	r3, [r7, #0]
 8025c8e:	681a      	ldr	r2, [r3, #0]
 8025c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8025c92:	441a      	add	r2, r3
 8025c94:	683b      	ldr	r3, [r7, #0]
 8025c96:	601a      	str	r2, [r3, #0]
 8025c98:	687a      	ldr	r2, [r7, #4]
 8025c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8025c9c:	1ad3      	subs	r3, r2, r3
 8025c9e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8025ca0:	687b      	ldr	r3, [r7, #4]
 8025ca2:	2b00      	cmp	r3, #0
 8025ca4:	f47f af01 	bne.w	8025aaa <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8025ca8:	2300      	movs	r3, #0
}
 8025caa:	4618      	mov	r0, r3
 8025cac:	3738      	adds	r7, #56	@ 0x38
 8025cae:	46bd      	mov	sp, r7
 8025cb0:	bd80      	pop	{r7, pc}

08025cb2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8025cb2:	b580      	push	{r7, lr}
 8025cb4:	b086      	sub	sp, #24
 8025cb6:	af00      	add	r7, sp, #0
 8025cb8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8025cba:	687b      	ldr	r3, [r7, #4]
 8025cbc:	f107 0208 	add.w	r2, r7, #8
 8025cc0:	4611      	mov	r1, r2
 8025cc2:	4618      	mov	r0, r3
 8025cc4:	f7ff fc80 	bl	80255c8 <validate>
 8025cc8:	4603      	mov	r3, r0
 8025cca:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8025ccc:	7dfb      	ldrb	r3, [r7, #23]
 8025cce:	2b00      	cmp	r3, #0
 8025cd0:	d168      	bne.n	8025da4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8025cd2:	687b      	ldr	r3, [r7, #4]
 8025cd4:	7d1b      	ldrb	r3, [r3, #20]
 8025cd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8025cda:	2b00      	cmp	r3, #0
 8025cdc:	d062      	beq.n	8025da4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8025cde:	687b      	ldr	r3, [r7, #4]
 8025ce0:	7d1b      	ldrb	r3, [r3, #20]
 8025ce2:	b25b      	sxtb	r3, r3
 8025ce4:	2b00      	cmp	r3, #0
 8025ce6:	da15      	bge.n	8025d14 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8025ce8:	68bb      	ldr	r3, [r7, #8]
 8025cea:	7858      	ldrb	r0, [r3, #1]
 8025cec:	687b      	ldr	r3, [r7, #4]
 8025cee:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8025cf2:	687b      	ldr	r3, [r7, #4]
 8025cf4:	6a1a      	ldr	r2, [r3, #32]
 8025cf6:	2301      	movs	r3, #1
 8025cf8:	f7fd ffc2 	bl	8023c80 <disk_write>
 8025cfc:	4603      	mov	r3, r0
 8025cfe:	2b00      	cmp	r3, #0
 8025d00:	d001      	beq.n	8025d06 <f_sync+0x54>
 8025d02:	2301      	movs	r3, #1
 8025d04:	e04f      	b.n	8025da6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8025d06:	687b      	ldr	r3, [r7, #4]
 8025d08:	7d1b      	ldrb	r3, [r3, #20]
 8025d0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8025d0e:	b2da      	uxtb	r2, r3
 8025d10:	687b      	ldr	r3, [r7, #4]
 8025d12:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8025d14:	f7fd fcc6 	bl	80236a4 <get_fattime>
 8025d18:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8025d1a:	68ba      	ldr	r2, [r7, #8]
 8025d1c:	687b      	ldr	r3, [r7, #4]
 8025d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8025d20:	4619      	mov	r1, r3
 8025d22:	4610      	mov	r0, r2
 8025d24:	f7fe fa9a 	bl	802425c <move_window>
 8025d28:	4603      	mov	r3, r0
 8025d2a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8025d2c:	7dfb      	ldrb	r3, [r7, #23]
 8025d2e:	2b00      	cmp	r3, #0
 8025d30:	d138      	bne.n	8025da4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8025d32:	687b      	ldr	r3, [r7, #4]
 8025d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8025d36:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8025d38:	68fb      	ldr	r3, [r7, #12]
 8025d3a:	330b      	adds	r3, #11
 8025d3c:	781a      	ldrb	r2, [r3, #0]
 8025d3e:	68fb      	ldr	r3, [r7, #12]
 8025d40:	330b      	adds	r3, #11
 8025d42:	f042 0220 	orr.w	r2, r2, #32
 8025d46:	b2d2      	uxtb	r2, r2
 8025d48:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8025d4a:	687b      	ldr	r3, [r7, #4]
 8025d4c:	6818      	ldr	r0, [r3, #0]
 8025d4e:	687b      	ldr	r3, [r7, #4]
 8025d50:	689b      	ldr	r3, [r3, #8]
 8025d52:	461a      	mov	r2, r3
 8025d54:	68f9      	ldr	r1, [r7, #12]
 8025d56:	f7fe ffa4 	bl	8024ca2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8025d5a:	68fb      	ldr	r3, [r7, #12]
 8025d5c:	f103 021c 	add.w	r2, r3, #28
 8025d60:	687b      	ldr	r3, [r7, #4]
 8025d62:	68db      	ldr	r3, [r3, #12]
 8025d64:	4619      	mov	r1, r3
 8025d66:	4610      	mov	r0, r2
 8025d68:	f7fe f81e 	bl	8023da8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8025d6c:	68fb      	ldr	r3, [r7, #12]
 8025d6e:	3316      	adds	r3, #22
 8025d70:	6939      	ldr	r1, [r7, #16]
 8025d72:	4618      	mov	r0, r3
 8025d74:	f7fe f818 	bl	8023da8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8025d78:	68fb      	ldr	r3, [r7, #12]
 8025d7a:	3312      	adds	r3, #18
 8025d7c:	2100      	movs	r1, #0
 8025d7e:	4618      	mov	r0, r3
 8025d80:	f7fd fff7 	bl	8023d72 <st_word>
					fs->wflag = 1;
 8025d84:	68bb      	ldr	r3, [r7, #8]
 8025d86:	2201      	movs	r2, #1
 8025d88:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8025d8a:	68bb      	ldr	r3, [r7, #8]
 8025d8c:	4618      	mov	r0, r3
 8025d8e:	f7fe fa93 	bl	80242b8 <sync_fs>
 8025d92:	4603      	mov	r3, r0
 8025d94:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8025d96:	687b      	ldr	r3, [r7, #4]
 8025d98:	7d1b      	ldrb	r3, [r3, #20]
 8025d9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8025d9e:	b2da      	uxtb	r2, r3
 8025da0:	687b      	ldr	r3, [r7, #4]
 8025da2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8025da4:	7dfb      	ldrb	r3, [r7, #23]
}
 8025da6:	4618      	mov	r0, r3
 8025da8:	3718      	adds	r7, #24
 8025daa:	46bd      	mov	sp, r7
 8025dac:	bd80      	pop	{r7, pc}

08025dae <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8025dae:	b580      	push	{r7, lr}
 8025db0:	b084      	sub	sp, #16
 8025db2:	af00      	add	r7, sp, #0
 8025db4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8025db6:	6878      	ldr	r0, [r7, #4]
 8025db8:	f7ff ff7b 	bl	8025cb2 <f_sync>
 8025dbc:	4603      	mov	r3, r0
 8025dbe:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8025dc0:	7bfb      	ldrb	r3, [r7, #15]
 8025dc2:	2b00      	cmp	r3, #0
 8025dc4:	d118      	bne.n	8025df8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8025dc6:	687b      	ldr	r3, [r7, #4]
 8025dc8:	f107 0208 	add.w	r2, r7, #8
 8025dcc:	4611      	mov	r1, r2
 8025dce:	4618      	mov	r0, r3
 8025dd0:	f7ff fbfa 	bl	80255c8 <validate>
 8025dd4:	4603      	mov	r3, r0
 8025dd6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8025dd8:	7bfb      	ldrb	r3, [r7, #15]
 8025dda:	2b00      	cmp	r3, #0
 8025ddc:	d10c      	bne.n	8025df8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8025dde:	687b      	ldr	r3, [r7, #4]
 8025de0:	691b      	ldr	r3, [r3, #16]
 8025de2:	4618      	mov	r0, r3
 8025de4:	f7fe f996 	bl	8024114 <dec_lock>
 8025de8:	4603      	mov	r3, r0
 8025dea:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8025dec:	7bfb      	ldrb	r3, [r7, #15]
 8025dee:	2b00      	cmp	r3, #0
 8025df0:	d102      	bne.n	8025df8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8025df2:	687b      	ldr	r3, [r7, #4]
 8025df4:	2200      	movs	r2, #0
 8025df6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8025df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8025dfa:	4618      	mov	r0, r3
 8025dfc:	3710      	adds	r7, #16
 8025dfe:	46bd      	mov	sp, r7
 8025e00:	bd80      	pop	{r7, pc}
	...

08025e04 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8025e04:	b480      	push	{r7}
 8025e06:	b087      	sub	sp, #28
 8025e08:	af00      	add	r7, sp, #0
 8025e0a:	60f8      	str	r0, [r7, #12]
 8025e0c:	60b9      	str	r1, [r7, #8]
 8025e0e:	4613      	mov	r3, r2
 8025e10:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8025e12:	2301      	movs	r3, #1
 8025e14:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8025e16:	2300      	movs	r3, #0
 8025e18:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8025e1a:	4b1f      	ldr	r3, [pc, #124]	@ (8025e98 <FATFS_LinkDriverEx+0x94>)
 8025e1c:	7a5b      	ldrb	r3, [r3, #9]
 8025e1e:	b2db      	uxtb	r3, r3
 8025e20:	2b00      	cmp	r3, #0
 8025e22:	d131      	bne.n	8025e88 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8025e24:	4b1c      	ldr	r3, [pc, #112]	@ (8025e98 <FATFS_LinkDriverEx+0x94>)
 8025e26:	7a5b      	ldrb	r3, [r3, #9]
 8025e28:	b2db      	uxtb	r3, r3
 8025e2a:	461a      	mov	r2, r3
 8025e2c:	4b1a      	ldr	r3, [pc, #104]	@ (8025e98 <FATFS_LinkDriverEx+0x94>)
 8025e2e:	2100      	movs	r1, #0
 8025e30:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8025e32:	4b19      	ldr	r3, [pc, #100]	@ (8025e98 <FATFS_LinkDriverEx+0x94>)
 8025e34:	7a5b      	ldrb	r3, [r3, #9]
 8025e36:	b2db      	uxtb	r3, r3
 8025e38:	4a17      	ldr	r2, [pc, #92]	@ (8025e98 <FATFS_LinkDriverEx+0x94>)
 8025e3a:	009b      	lsls	r3, r3, #2
 8025e3c:	4413      	add	r3, r2
 8025e3e:	68fa      	ldr	r2, [r7, #12]
 8025e40:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8025e42:	4b15      	ldr	r3, [pc, #84]	@ (8025e98 <FATFS_LinkDriverEx+0x94>)
 8025e44:	7a5b      	ldrb	r3, [r3, #9]
 8025e46:	b2db      	uxtb	r3, r3
 8025e48:	461a      	mov	r2, r3
 8025e4a:	4b13      	ldr	r3, [pc, #76]	@ (8025e98 <FATFS_LinkDriverEx+0x94>)
 8025e4c:	4413      	add	r3, r2
 8025e4e:	79fa      	ldrb	r2, [r7, #7]
 8025e50:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8025e52:	4b11      	ldr	r3, [pc, #68]	@ (8025e98 <FATFS_LinkDriverEx+0x94>)
 8025e54:	7a5b      	ldrb	r3, [r3, #9]
 8025e56:	b2db      	uxtb	r3, r3
 8025e58:	1c5a      	adds	r2, r3, #1
 8025e5a:	b2d1      	uxtb	r1, r2
 8025e5c:	4a0e      	ldr	r2, [pc, #56]	@ (8025e98 <FATFS_LinkDriverEx+0x94>)
 8025e5e:	7251      	strb	r1, [r2, #9]
 8025e60:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8025e62:	7dbb      	ldrb	r3, [r7, #22]
 8025e64:	3330      	adds	r3, #48	@ 0x30
 8025e66:	b2da      	uxtb	r2, r3
 8025e68:	68bb      	ldr	r3, [r7, #8]
 8025e6a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8025e6c:	68bb      	ldr	r3, [r7, #8]
 8025e6e:	3301      	adds	r3, #1
 8025e70:	223a      	movs	r2, #58	@ 0x3a
 8025e72:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8025e74:	68bb      	ldr	r3, [r7, #8]
 8025e76:	3302      	adds	r3, #2
 8025e78:	222f      	movs	r2, #47	@ 0x2f
 8025e7a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8025e7c:	68bb      	ldr	r3, [r7, #8]
 8025e7e:	3303      	adds	r3, #3
 8025e80:	2200      	movs	r2, #0
 8025e82:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8025e84:	2300      	movs	r3, #0
 8025e86:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8025e88:	7dfb      	ldrb	r3, [r7, #23]
}
 8025e8a:	4618      	mov	r0, r3
 8025e8c:	371c      	adds	r7, #28
 8025e8e:	46bd      	mov	sp, r7
 8025e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025e94:	4770      	bx	lr
 8025e96:	bf00      	nop
 8025e98:	24000ab0 	.word	0x24000ab0

08025e9c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8025e9c:	b580      	push	{r7, lr}
 8025e9e:	b082      	sub	sp, #8
 8025ea0:	af00      	add	r7, sp, #0
 8025ea2:	6078      	str	r0, [r7, #4]
 8025ea4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8025ea6:	2200      	movs	r2, #0
 8025ea8:	6839      	ldr	r1, [r7, #0]
 8025eaa:	6878      	ldr	r0, [r7, #4]
 8025eac:	f7ff ffaa 	bl	8025e04 <FATFS_LinkDriverEx>
 8025eb0:	4603      	mov	r3, r0
}
 8025eb2:	4618      	mov	r0, r3
 8025eb4:	3708      	adds	r7, #8
 8025eb6:	46bd      	mov	sp, r7
 8025eb8:	bd80      	pop	{r7, pc}

08025eba <_ZdlPvj>:
 8025eba:	f000 bbd3 	b.w	8026664 <_ZdlPv>

08025ebe <__cxa_guard_acquire>:
 8025ebe:	6802      	ldr	r2, [r0, #0]
 8025ec0:	07d2      	lsls	r2, r2, #31
 8025ec2:	4603      	mov	r3, r0
 8025ec4:	d405      	bmi.n	8025ed2 <__cxa_guard_acquire+0x14>
 8025ec6:	7842      	ldrb	r2, [r0, #1]
 8025ec8:	b102      	cbz	r2, 8025ecc <__cxa_guard_acquire+0xe>
 8025eca:	deff      	udf	#255	@ 0xff
 8025ecc:	2001      	movs	r0, #1
 8025ece:	7058      	strb	r0, [r3, #1]
 8025ed0:	4770      	bx	lr
 8025ed2:	2000      	movs	r0, #0
 8025ed4:	4770      	bx	lr

08025ed6 <__cxa_guard_release>:
 8025ed6:	2301      	movs	r3, #1
 8025ed8:	6003      	str	r3, [r0, #0]
 8025eda:	4770      	bx	lr

08025edc <_Znwj>:
 8025edc:	2801      	cmp	r0, #1
 8025ede:	bf38      	it	cc
 8025ee0:	2001      	movcc	r0, #1
 8025ee2:	b510      	push	{r4, lr}
 8025ee4:	4604      	mov	r4, r0
 8025ee6:	4620      	mov	r0, r4
 8025ee8:	f000 fc68 	bl	80267bc <malloc>
 8025eec:	b100      	cbz	r0, 8025ef0 <_Znwj+0x14>
 8025eee:	bd10      	pop	{r4, pc}
 8025ef0:	f000 fbba 	bl	8026668 <_ZSt15get_new_handlerv>
 8025ef4:	b908      	cbnz	r0, 8025efa <_Znwj+0x1e>
 8025ef6:	f000 fc59 	bl	80267ac <abort>
 8025efa:	4780      	blx	r0
 8025efc:	e7f3      	b.n	8025ee6 <_Znwj+0xa>

08025efe <_ZNSaIcEC1Ev>:
 8025efe:	4770      	bx	lr

08025f00 <_ZNSaIcED1Ev>:
 8025f00:	4770      	bx	lr

08025f02 <_ZSt17__throw_bad_allocv>:
 8025f02:	b508      	push	{r3, lr}
 8025f04:	f000 fc52 	bl	80267ac <abort>

08025f08 <_ZSt28__throw_bad_array_new_lengthv>:
 8025f08:	b508      	push	{r3, lr}
 8025f0a:	f000 fc4f 	bl	80267ac <abort>

08025f0e <_ZSt19__throw_logic_errorPKc>:
 8025f0e:	b508      	push	{r3, lr}
 8025f10:	f000 fc4c 	bl	80267ac <abort>

08025f14 <_ZSt24__throw_invalid_argumentPKc>:
 8025f14:	b508      	push	{r3, lr}
 8025f16:	f000 fc49 	bl	80267ac <abort>

08025f1a <_ZSt20__throw_length_errorPKc>:
 8025f1a:	b508      	push	{r3, lr}
 8025f1c:	f000 fc46 	bl	80267ac <abort>

08025f20 <_ZSt20__throw_out_of_rangePKc>:
 8025f20:	b508      	push	{r3, lr}
 8025f22:	f000 fc43 	bl	80267ac <abort>

08025f26 <_ZSt24__throw_out_of_range_fmtPKcz>:
 8025f26:	b40f      	push	{r0, r1, r2, r3}
 8025f28:	b508      	push	{r3, lr}
 8025f2a:	f000 fc3f 	bl	80267ac <abort>

08025f2e <_ZSt25__throw_bad_function_callv>:
 8025f2e:	b508      	push	{r3, lr}
 8025f30:	f000 fc3c 	bl	80267ac <abort>

08025f34 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 8025f34:	4901      	ldr	r1, [pc, #4]	@ (8025f3c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 8025f36:	f000 bc23 	b.w	8026780 <_ZNKSt9type_info7__equalERKS_>
 8025f3a:	bf00      	nop
 8025f3c:	08028d34 	.word	0x08028d34

08025f40 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8025f40:	b10a      	cbz	r2, 8025f46 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8025f42:	f001 b8be 	b.w	80270c2 <memcpy>
 8025f46:	4770      	bx	lr

08025f48 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 8025f48:	b10a      	cbz	r2, 8025f4e <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 8025f4a:	f000 bfc1 	b.w	8026ed0 <memcmp>
 8025f4e:	4610      	mov	r0, r2
 8025f50:	4770      	bx	lr

08025f52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 8025f52:	6001      	str	r1, [r0, #0]
 8025f54:	4770      	bx	lr

08025f56 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 8025f56:	6800      	ldr	r0, [r0, #0]
 8025f58:	4770      	bx	lr

08025f5a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 8025f5a:	3008      	adds	r0, #8
 8025f5c:	4770      	bx	lr

08025f5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 8025f5e:	6081      	str	r1, [r0, #8]
 8025f60:	4770      	bx	lr

08025f62 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 8025f62:	6803      	ldr	r3, [r0, #0]
 8025f64:	6041      	str	r1, [r0, #4]
 8025f66:	2200      	movs	r2, #0
 8025f68:	545a      	strb	r2, [r3, r1]
 8025f6a:	4770      	bx	lr

08025f6c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 8025f6c:	f850 3b08 	ldr.w	r3, [r0], #8
 8025f70:	1a1b      	subs	r3, r3, r0
 8025f72:	4258      	negs	r0, r3
 8025f74:	4158      	adcs	r0, r3
 8025f76:	4770      	bx	lr

08025f78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8025f78:	b508      	push	{r3, lr}
 8025f7a:	680b      	ldr	r3, [r1, #0]
 8025f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8025f80:	d302      	bcc.n	8025f88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8025f82:	480d      	ldr	r0, [pc, #52]	@ (8025fb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8025f84:	f7ff ffc9 	bl	8025f1a <_ZSt20__throw_length_errorPKc>
 8025f88:	4293      	cmp	r3, r2
 8025f8a:	d90b      	bls.n	8025fa4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8025f8c:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8025f90:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8025f94:	d206      	bcs.n	8025fa4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8025f96:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8025f9a:	bf2a      	itet	cs
 8025f9c:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 8025fa0:	6008      	strcc	r0, [r1, #0]
 8025fa2:	600b      	strcs	r3, [r1, #0]
 8025fa4:	6808      	ldr	r0, [r1, #0]
 8025fa6:	3001      	adds	r0, #1
 8025fa8:	d501      	bpl.n	8025fae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8025faa:	f7ff ffaa 	bl	8025f02 <_ZSt17__throw_bad_allocv>
 8025fae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8025fb2:	f7ff bf93 	b.w	8025edc <_Znwj>
 8025fb6:	bf00      	nop
 8025fb8:	08028d3c 	.word	0x08028d3c

08025fbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8025fbc:	b510      	push	{r4, lr}
 8025fbe:	4604      	mov	r4, r0
 8025fc0:	f7ff ffd4 	bl	8025f6c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8025fc4:	b920      	cbnz	r0, 8025fd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 8025fc6:	6820      	ldr	r0, [r4, #0]
 8025fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025fcc:	f000 bb4a 	b.w	8026664 <_ZdlPv>
 8025fd0:	bd10      	pop	{r4, pc}
	...

08025fd4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 8025fd4:	b508      	push	{r3, lr}
 8025fd6:	4603      	mov	r3, r0
 8025fd8:	4608      	mov	r0, r1
 8025fda:	685b      	ldr	r3, [r3, #4]
 8025fdc:	4298      	cmp	r0, r3
 8025fde:	4611      	mov	r1, r2
 8025fe0:	d903      	bls.n	8025fea <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x16>
 8025fe2:	4602      	mov	r2, r0
 8025fe4:	4801      	ldr	r0, [pc, #4]	@ (8025fec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 8025fe6:	f7ff ff9e 	bl	8025f26 <_ZSt24__throw_out_of_range_fmtPKcz>
 8025fea:	bd08      	pop	{r3, pc}
 8025fec:	08028d54 	.word	0x08028d54

08025ff0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8025ff0:	6840      	ldr	r0, [r0, #4]
 8025ff2:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8025ff6:	3901      	subs	r1, #1
 8025ff8:	1a09      	subs	r1, r1, r0
 8025ffa:	4291      	cmp	r1, r2
 8025ffc:	b508      	push	{r3, lr}
 8025ffe:	d202      	bcs.n	8026006 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8026000:	4618      	mov	r0, r3
 8026002:	f7ff ff8a 	bl	8025f1a <_ZSt20__throw_length_errorPKc>
 8026006:	bd08      	pop	{r3, pc}

08026008 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 8026008:	6803      	ldr	r3, [r0, #0]
 802600a:	428b      	cmp	r3, r1
 802600c:	d806      	bhi.n	802601c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 802600e:	6842      	ldr	r2, [r0, #4]
 8026010:	4413      	add	r3, r2
 8026012:	4299      	cmp	r1, r3
 8026014:	bf94      	ite	ls
 8026016:	2000      	movls	r0, #0
 8026018:	2001      	movhi	r0, #1
 802601a:	4770      	bx	lr
 802601c:	2001      	movs	r0, #1
 802601e:	4770      	bx	lr

08026020 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8026020:	2a01      	cmp	r2, #1
 8026022:	b410      	push	{r4}
 8026024:	d104      	bne.n	8026030 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 8026026:	780a      	ldrb	r2, [r1, #0]
 8026028:	f85d 4b04 	ldr.w	r4, [sp], #4
 802602c:	7002      	strb	r2, [r0, #0]
 802602e:	4770      	bx	lr
 8026030:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026034:	f7ff bf84 	b.w	8025f40 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

08026038 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 8026038:	2a01      	cmp	r2, #1
 802603a:	b430      	push	{r4, r5}
 802603c:	d103      	bne.n	8026046 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 802603e:	780b      	ldrb	r3, [r1, #0]
 8026040:	7003      	strb	r3, [r0, #0]
 8026042:	bc30      	pop	{r4, r5}
 8026044:	4770      	bx	lr
 8026046:	2a00      	cmp	r2, #0
 8026048:	d0fb      	beq.n	8026042 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 802604a:	bc30      	pop	{r4, r5}
 802604c:	f000 bf50 	b.w	8026ef0 <memmove>

08026050 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 8026050:	460b      	mov	r3, r1
 8026052:	2b01      	cmp	r3, #1
 8026054:	b410      	push	{r4}
 8026056:	4611      	mov	r1, r2
 8026058:	4604      	mov	r4, r0
 802605a:	d103      	bne.n	8026064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 802605c:	7022      	strb	r2, [r4, #0]
 802605e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026062:	4770      	bx	lr
 8026064:	2b00      	cmp	r3, #0
 8026066:	d0fa      	beq.n	802605e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 8026068:	f85d 4b04 	ldr.w	r4, [sp], #4
 802606c:	461a      	mov	r2, r3
 802606e:	f000 bf59 	b.w	8026f24 <memset>

08026072 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8026072:	b508      	push	{r3, lr}
 8026074:	1a52      	subs	r2, r2, r1
 8026076:	f7ff ffd3 	bl	8026020 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 802607a:	bd08      	pop	{r3, pc}

0802607c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 802607c:	b508      	push	{r3, lr}
 802607e:	1a52      	subs	r2, r2, r1
 8026080:	f7ff ffce 	bl	8026020 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8026084:	bd08      	pop	{r3, pc}

08026086 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8026086:	f100 0208 	add.w	r2, r0, #8
 802608a:	6002      	str	r2, [r0, #0]
 802608c:	2200      	movs	r2, #0
 802608e:	6042      	str	r2, [r0, #4]
 8026090:	7202      	strb	r2, [r0, #8]
 8026092:	4770      	bx	lr

08026094 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 8026094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026096:	f100 0708 	add.w	r7, r0, #8
 802609a:	6007      	str	r7, [r0, #0]
 802609c:	4605      	mov	r5, r0
 802609e:	4608      	mov	r0, r1
 80260a0:	460c      	mov	r4, r1
 80260a2:	f7ff ff63 	bl	8025f6c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 80260a6:	f104 0608 	add.w	r6, r4, #8
 80260aa:	6862      	ldr	r2, [r4, #4]
 80260ac:	b160      	cbz	r0, 80260c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x34>
 80260ae:	3201      	adds	r2, #1
 80260b0:	4631      	mov	r1, r6
 80260b2:	4638      	mov	r0, r7
 80260b4:	f7ff ff44 	bl	8025f40 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>
 80260b8:	6863      	ldr	r3, [r4, #4]
 80260ba:	606b      	str	r3, [r5, #4]
 80260bc:	2300      	movs	r3, #0
 80260be:	7223      	strb	r3, [r4, #8]
 80260c0:	6026      	str	r6, [r4, #0]
 80260c2:	6063      	str	r3, [r4, #4]
 80260c4:	4628      	mov	r0, r5
 80260c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80260c8:	6823      	ldr	r3, [r4, #0]
 80260ca:	602b      	str	r3, [r5, #0]
 80260cc:	68a3      	ldr	r3, [r4, #8]
 80260ce:	60ab      	str	r3, [r5, #8]
 80260d0:	e7f2      	b.n	80260b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x24>

080260d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 80260d2:	b510      	push	{r4, lr}
 80260d4:	4604      	mov	r4, r0
 80260d6:	f7ff ff71 	bl	8025fbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80260da:	4620      	mov	r0, r4
 80260dc:	bd10      	pop	{r4, pc}

080260de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 80260de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80260e0:	460c      	mov	r4, r1
 80260e2:	4605      	mov	r5, r0
 80260e4:	f7ff ff42 	bl	8025f6c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 80260e8:	4606      	mov	r6, r0
 80260ea:	4620      	mov	r0, r4
 80260ec:	f7ff ff3e 	bl	8025f6c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 80260f0:	b190      	cbz	r0, 8026118 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x3a>
 80260f2:	42a5      	cmp	r5, r4
 80260f4:	d00a      	beq.n	802610c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 80260f6:	6862      	ldr	r2, [r4, #4]
 80260f8:	b11a      	cbz	r2, 8026102 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x24>
 80260fa:	6821      	ldr	r1, [r4, #0]
 80260fc:	6828      	ldr	r0, [r5, #0]
 80260fe:	f7ff ff8f 	bl	8026020 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8026102:	6863      	ldr	r3, [r4, #4]
 8026104:	682a      	ldr	r2, [r5, #0]
 8026106:	606b      	str	r3, [r5, #4]
 8026108:	2100      	movs	r1, #0
 802610a:	54d1      	strb	r1, [r2, r3]
 802610c:	6822      	ldr	r2, [r4, #0]
 802610e:	2300      	movs	r3, #0
 8026110:	6063      	str	r3, [r4, #4]
 8026112:	7013      	strb	r3, [r2, #0]
 8026114:	4628      	mov	r0, r5
 8026116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026118:	b90e      	cbnz	r6, 802611e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 802611a:	6828      	ldr	r0, [r5, #0]
 802611c:	68af      	ldr	r7, [r5, #8]
 802611e:	6823      	ldr	r3, [r4, #0]
 8026120:	602b      	str	r3, [r5, #0]
 8026122:	6863      	ldr	r3, [r4, #4]
 8026124:	606b      	str	r3, [r5, #4]
 8026126:	68a3      	ldr	r3, [r4, #8]
 8026128:	60ab      	str	r3, [r5, #8]
 802612a:	b110      	cbz	r0, 8026132 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x54>
 802612c:	6020      	str	r0, [r4, #0]
 802612e:	60a7      	str	r7, [r4, #8]
 8026130:	e7ec      	b.n	802610c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 8026132:	f104 0308 	add.w	r3, r4, #8
 8026136:	6023      	str	r3, [r4, #0]
 8026138:	e7e8      	b.n	802610c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>

0802613a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 802613a:	b510      	push	{r4, lr}
 802613c:	4604      	mov	r4, r0
 802613e:	f7ff ff15 	bl	8025f6c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8026142:	b908      	cbnz	r0, 8026148 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xe>
 8026144:	68a0      	ldr	r0, [r4, #8]
 8026146:	bd10      	pop	{r4, pc}
 8026148:	200f      	movs	r0, #15
 802614a:	e7fc      	b.n	8026146 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xc>

0802614c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 802614c:	4288      	cmp	r0, r1
 802614e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8026150:	4604      	mov	r4, r0
 8026152:	460e      	mov	r6, r1
 8026154:	d01d      	beq.n	8026192 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x46>
 8026156:	684d      	ldr	r5, [r1, #4]
 8026158:	f7ff ffef 	bl	802613a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 802615c:	42a8      	cmp	r0, r5
 802615e:	4602      	mov	r2, r0
 8026160:	d211      	bcs.n	8026186 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x3a>
 8026162:	a901      	add	r1, sp, #4
 8026164:	4620      	mov	r0, r4
 8026166:	9501      	str	r5, [sp, #4]
 8026168:	f7ff ff06 	bl	8025f78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 802616c:	4607      	mov	r7, r0
 802616e:	4620      	mov	r0, r4
 8026170:	f7ff ff24 	bl	8025fbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8026174:	9b01      	ldr	r3, [sp, #4]
 8026176:	6027      	str	r7, [r4, #0]
 8026178:	60a3      	str	r3, [r4, #8]
 802617a:	6831      	ldr	r1, [r6, #0]
 802617c:	6820      	ldr	r0, [r4, #0]
 802617e:	462a      	mov	r2, r5
 8026180:	f7ff ff4e 	bl	8026020 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8026184:	e001      	b.n	802618a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x3e>
 8026186:	2d00      	cmp	r5, #0
 8026188:	d1f7      	bne.n	802617a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x2e>
 802618a:	6823      	ldr	r3, [r4, #0]
 802618c:	6065      	str	r5, [r4, #4]
 802618e:	2200      	movs	r2, #0
 8026190:	555a      	strb	r2, [r3, r5]
 8026192:	b003      	add	sp, #12
 8026194:	bdf0      	pop	{r4, r5, r6, r7, pc}

08026196 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 8026196:	b510      	push	{r4, lr}
 8026198:	4604      	mov	r4, r0
 802619a:	f7ff ffd7 	bl	802614c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 802619e:	4620      	mov	r0, r4
 80261a0:	bd10      	pop	{r4, pc}

080261a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 80261a2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80261a6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80261a8:	461f      	mov	r7, r3
 80261aa:	6843      	ldr	r3, [r0, #4]
 80261ac:	eb01 0802 	add.w	r8, r1, r2
 80261b0:	1ab2      	subs	r2, r6, r2
 80261b2:	441a      	add	r2, r3
 80261b4:	4604      	mov	r4, r0
 80261b6:	460d      	mov	r5, r1
 80261b8:	eba3 0908 	sub.w	r9, r3, r8
 80261bc:	9201      	str	r2, [sp, #4]
 80261be:	f7ff ffbc 	bl	802613a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 80261c2:	a901      	add	r1, sp, #4
 80261c4:	4602      	mov	r2, r0
 80261c6:	4620      	mov	r0, r4
 80261c8:	f7ff fed6 	bl	8025f78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80261cc:	4682      	mov	sl, r0
 80261ce:	b11d      	cbz	r5, 80261d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x36>
 80261d0:	6821      	ldr	r1, [r4, #0]
 80261d2:	462a      	mov	r2, r5
 80261d4:	f7ff ff24 	bl	8026020 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80261d8:	b137      	cbz	r7, 80261e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 80261da:	b12e      	cbz	r6, 80261e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 80261dc:	4632      	mov	r2, r6
 80261de:	4639      	mov	r1, r7
 80261e0:	eb0a 0005 	add.w	r0, sl, r5
 80261e4:	f7ff ff1c 	bl	8026020 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80261e8:	f1b9 0f00 	cmp.w	r9, #0
 80261ec:	d007      	beq.n	80261fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x5c>
 80261ee:	6821      	ldr	r1, [r4, #0]
 80261f0:	4435      	add	r5, r6
 80261f2:	464a      	mov	r2, r9
 80261f4:	4441      	add	r1, r8
 80261f6:	eb0a 0005 	add.w	r0, sl, r5
 80261fa:	f7ff ff11 	bl	8026020 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80261fe:	4620      	mov	r0, r4
 8026200:	f7ff fedc 	bl	8025fbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8026204:	9b01      	ldr	r3, [sp, #4]
 8026206:	f8c4 a000 	str.w	sl, [r4]
 802620a:	60a3      	str	r3, [r4, #8]
 802620c:	b002      	add	sp, #8
 802620e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08026212 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>:
 8026212:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8026214:	4604      	mov	r4, r0
 8026216:	9101      	str	r1, [sp, #4]
 8026218:	f7ff ff8f 	bl	802613a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 802621c:	9b01      	ldr	r3, [sp, #4]
 802621e:	4283      	cmp	r3, r0
 8026220:	4602      	mov	r2, r0
 8026222:	d90f      	bls.n	8026244 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x32>
 8026224:	a901      	add	r1, sp, #4
 8026226:	4620      	mov	r0, r4
 8026228:	f7ff fea6 	bl	8025f78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 802622c:	6862      	ldr	r2, [r4, #4]
 802622e:	6821      	ldr	r1, [r4, #0]
 8026230:	3201      	adds	r2, #1
 8026232:	4605      	mov	r5, r0
 8026234:	f7ff fef4 	bl	8026020 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8026238:	4620      	mov	r0, r4
 802623a:	f7ff febf 	bl	8025fbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 802623e:	9b01      	ldr	r3, [sp, #4]
 8026240:	6025      	str	r5, [r4, #0]
 8026242:	60a3      	str	r3, [r4, #8]
 8026244:	b003      	add	sp, #12
 8026246:	bd30      	pop	{r4, r5, pc}

08026248 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>:
 8026248:	6802      	ldr	r2, [r0, #0]
 802624a:	2300      	movs	r3, #0
 802624c:	6043      	str	r3, [r0, #4]
 802624e:	7013      	strb	r3, [r2, #0]
 8026250:	4770      	bx	lr

08026252 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>:
 8026252:	6840      	ldr	r0, [r0, #4]
 8026254:	fab0 f080 	clz	r0, r0
 8026258:	0940      	lsrs	r0, r0, #5
 802625a:	4770      	bx	lr

0802625c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 802625c:	6800      	ldr	r0, [r0, #0]
 802625e:	4408      	add	r0, r1
 8026260:	4770      	bx	lr

08026262 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
 8026262:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8026264:	6846      	ldr	r6, [r0, #4]
 8026266:	4604      	mov	r4, r0
 8026268:	460f      	mov	r7, r1
 802626a:	f7ff ff66 	bl	802613a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 802626e:	1c75      	adds	r5, r6, #1
 8026270:	4285      	cmp	r5, r0
 8026272:	d907      	bls.n	8026284 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x22>
 8026274:	2301      	movs	r3, #1
 8026276:	9300      	str	r3, [sp, #0]
 8026278:	2300      	movs	r3, #0
 802627a:	461a      	mov	r2, r3
 802627c:	4631      	mov	r1, r6
 802627e:	4620      	mov	r0, r4
 8026280:	f7ff ff8f 	bl	80261a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8026284:	6823      	ldr	r3, [r4, #0]
 8026286:	559f      	strb	r7, [r3, r6]
 8026288:	6823      	ldr	r3, [r4, #0]
 802628a:	6065      	str	r5, [r4, #4]
 802628c:	2200      	movs	r2, #0
 802628e:	555a      	strb	r2, [r3, r5]
 8026290:	b003      	add	sp, #12
 8026292:	bdf0      	pop	{r4, r5, r6, r7, pc}

08026294 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>:
 8026294:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8026298:	4616      	mov	r6, r2
 802629a:	461d      	mov	r5, r3
 802629c:	4604      	mov	r4, r0
 802629e:	4b1b      	ldr	r3, [pc, #108]	@ (802630c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x78>)
 80262a0:	462a      	mov	r2, r5
 80262a2:	460f      	mov	r7, r1
 80262a4:	4631      	mov	r1, r6
 80262a6:	f7ff fea3 	bl	8025ff0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80262aa:	4620      	mov	r0, r4
 80262ac:	f7ff ff45 	bl	802613a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 80262b0:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80262b4:	eba5 0806 	sub.w	r8, r5, r6
 80262b8:	44c8      	add	r8, r9
 80262ba:	4540      	cmp	r0, r8
 80262bc:	d31d      	bcc.n	80262fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x66>
 80262be:	19f3      	adds	r3, r6, r7
 80262c0:	ebb9 0203 	subs.w	r2, r9, r3
 80262c4:	d007      	beq.n	80262d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 80262c6:	42ae      	cmp	r6, r5
 80262c8:	d005      	beq.n	80262d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 80262ca:	6820      	ldr	r0, [r4, #0]
 80262cc:	4438      	add	r0, r7
 80262ce:	1981      	adds	r1, r0, r6
 80262d0:	4428      	add	r0, r5
 80262d2:	f7ff feb1 	bl	8026038 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80262d6:	b135      	cbz	r5, 80262e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x52>
 80262d8:	6820      	ldr	r0, [r4, #0]
 80262da:	f89d 2028 	ldrb.w	r2, [sp, #40]	@ 0x28
 80262de:	4629      	mov	r1, r5
 80262e0:	4438      	add	r0, r7
 80262e2:	f7ff feb5 	bl	8026050 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 80262e6:	6823      	ldr	r3, [r4, #0]
 80262e8:	f8c4 8004 	str.w	r8, [r4, #4]
 80262ec:	2200      	movs	r2, #0
 80262ee:	4620      	mov	r0, r4
 80262f0:	f803 2008 	strb.w	r2, [r3, r8]
 80262f4:	b003      	add	sp, #12
 80262f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80262fa:	9500      	str	r5, [sp, #0]
 80262fc:	2300      	movs	r3, #0
 80262fe:	4632      	mov	r2, r6
 8026300:	4639      	mov	r1, r7
 8026302:	4620      	mov	r0, r4
 8026304:	f7ff ff4d 	bl	80261a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8026308:	e7e5      	b.n	80262d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 802630a:	bf00      	nop
 802630c:	08028d8b 	.word	0x08028d8b

08026310 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>:
 8026310:	b507      	push	{r0, r1, r2, lr}
 8026312:	9200      	str	r2, [sp, #0]
 8026314:	460b      	mov	r3, r1
 8026316:	2200      	movs	r2, #0
 8026318:	6841      	ldr	r1, [r0, #4]
 802631a:	f7ff ffbb 	bl	8026294 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>
 802631e:	b003      	add	sp, #12
 8026320:	f85d fb04 	ldr.w	pc, [sp], #4

08026324 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 8026324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026328:	b085      	sub	sp, #20
 802632a:	4680      	mov	r8, r0
 802632c:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802632e:	4614      	mov	r4, r2
 8026330:	4689      	mov	r9, r1
 8026332:	462a      	mov	r2, r5
 8026334:	4621      	mov	r1, r4
 8026336:	461f      	mov	r7, r3
 8026338:	4b37      	ldr	r3, [pc, #220]	@ (8026418 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf4>)
 802633a:	f7ff fe59 	bl	8025ff0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 802633e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8026342:	9303      	str	r3, [sp, #12]
 8026344:	eba5 0b04 	sub.w	fp, r5, r4
 8026348:	4640      	mov	r0, r8
 802634a:	eb03 0a0b 	add.w	sl, r3, fp
 802634e:	f7ff fef4 	bl	802613a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8026352:	4550      	cmp	r0, sl
 8026354:	d354      	bcc.n	8026400 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xdc>
 8026356:	f8d8 6000 	ldr.w	r6, [r8]
 802635a:	9b03      	ldr	r3, [sp, #12]
 802635c:	444e      	add	r6, r9
 802635e:	4639      	mov	r1, r7
 8026360:	44a1      	add	r9, r4
 8026362:	4640      	mov	r0, r8
 8026364:	eba3 0909 	sub.w	r9, r3, r9
 8026368:	f7ff fe4e 	bl	8026008 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 802636c:	b180      	cbz	r0, 8026390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6c>
 802636e:	f1b9 0f00 	cmp.w	r9, #0
 8026372:	d006      	beq.n	8026382 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5e>
 8026374:	42ac      	cmp	r4, r5
 8026376:	d004      	beq.n	8026382 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5e>
 8026378:	464a      	mov	r2, r9
 802637a:	1931      	adds	r1, r6, r4
 802637c:	1970      	adds	r0, r6, r5
 802637e:	f7ff fe5b 	bl	8026038 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8026382:	b315      	cbz	r5, 80263ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8026384:	462a      	mov	r2, r5
 8026386:	4639      	mov	r1, r7
 8026388:	4630      	mov	r0, r6
 802638a:	f7ff fe49 	bl	8026020 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 802638e:	e01c      	b.n	80263ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8026390:	b135      	cbz	r5, 80263a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7c>
 8026392:	42ac      	cmp	r4, r5
 8026394:	d33c      	bcc.n	8026410 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xec>
 8026396:	462a      	mov	r2, r5
 8026398:	4639      	mov	r1, r7
 802639a:	4630      	mov	r0, r6
 802639c:	f7ff fe4c 	bl	8026038 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80263a0:	f1b9 0f00 	cmp.w	r9, #0
 80263a4:	d011      	beq.n	80263ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 80263a6:	42ac      	cmp	r4, r5
 80263a8:	d00f      	beq.n	80263ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 80263aa:	464a      	mov	r2, r9
 80263ac:	1931      	adds	r1, r6, r4
 80263ae:	1970      	adds	r0, r6, r5
 80263b0:	f7ff fe42 	bl	8026038 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80263b4:	42ac      	cmp	r4, r5
 80263b6:	d208      	bcs.n	80263ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 80263b8:	4434      	add	r4, r6
 80263ba:	197b      	adds	r3, r7, r5
 80263bc:	429c      	cmp	r4, r3
 80263be:	d30f      	bcc.n	80263e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbc>
 80263c0:	462a      	mov	r2, r5
 80263c2:	4639      	mov	r1, r7
 80263c4:	4630      	mov	r0, r6
 80263c6:	f7ff fe37 	bl	8026038 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80263ca:	f8d8 3000 	ldr.w	r3, [r8]
 80263ce:	f8c8 a004 	str.w	sl, [r8, #4]
 80263d2:	2200      	movs	r2, #0
 80263d4:	4640      	mov	r0, r8
 80263d6:	f803 200a 	strb.w	r2, [r3, sl]
 80263da:	b005      	add	sp, #20
 80263dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80263e0:	42bc      	cmp	r4, r7
 80263e2:	d803      	bhi.n	80263ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xc8>
 80263e4:	462a      	mov	r2, r5
 80263e6:	eb07 010b 	add.w	r1, r7, fp
 80263ea:	e7cd      	b.n	8026388 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x64>
 80263ec:	1be4      	subs	r4, r4, r7
 80263ee:	4622      	mov	r2, r4
 80263f0:	4639      	mov	r1, r7
 80263f2:	4630      	mov	r0, r6
 80263f4:	f7ff fe20 	bl	8026038 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80263f8:	1b2a      	subs	r2, r5, r4
 80263fa:	1971      	adds	r1, r6, r5
 80263fc:	1930      	adds	r0, r6, r4
 80263fe:	e7c4      	b.n	802638a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 8026400:	9500      	str	r5, [sp, #0]
 8026402:	463b      	mov	r3, r7
 8026404:	4622      	mov	r2, r4
 8026406:	4649      	mov	r1, r9
 8026408:	4640      	mov	r0, r8
 802640a:	f7ff feca 	bl	80261a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 802640e:	e7dc      	b.n	80263ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8026410:	f1b9 0f00 	cmp.w	r9, #0
 8026414:	d0d0      	beq.n	80263b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x94>
 8026416:	e7c8      	b.n	80263aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x86>
 8026418:	08028da8 	.word	0x08028da8

0802641c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKcj>:
 802641c:	b507      	push	{r0, r1, r2, lr}
 802641e:	9200      	str	r2, [sp, #0]
 8026420:	460b      	mov	r3, r1
 8026422:	6842      	ldr	r2, [r0, #4]
 8026424:	2100      	movs	r1, #0
 8026426:	f7ff ff7d 	bl	8026324 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 802642a:	b003      	add	sp, #12
 802642c:	f85d fb04 	ldr.w	pc, [sp], #4

08026430 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 8026430:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8026434:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8026438:	4604      	mov	r4, r0
 802643a:	eb02 0708 	add.w	r7, r2, r8
 802643e:	460e      	mov	r6, r1
 8026440:	4615      	mov	r5, r2
 8026442:	f7ff fe7a 	bl	802613a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8026446:	42b8      	cmp	r0, r7
 8026448:	d30e      	bcc.n	8026468 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x38>
 802644a:	b12d      	cbz	r5, 8026458 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x28>
 802644c:	6820      	ldr	r0, [r4, #0]
 802644e:	462a      	mov	r2, r5
 8026450:	4631      	mov	r1, r6
 8026452:	4440      	add	r0, r8
 8026454:	f7ff fde4 	bl	8026020 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8026458:	6823      	ldr	r3, [r4, #0]
 802645a:	6067      	str	r7, [r4, #4]
 802645c:	2200      	movs	r2, #0
 802645e:	4620      	mov	r0, r4
 8026460:	55da      	strb	r2, [r3, r7]
 8026462:	b002      	add	sp, #8
 8026464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026468:	9500      	str	r5, [sp, #0]
 802646a:	4633      	mov	r3, r6
 802646c:	2200      	movs	r2, #0
 802646e:	4641      	mov	r1, r8
 8026470:	4620      	mov	r0, r4
 8026472:	f7ff fe96 	bl	80261a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8026476:	e7ef      	b.n	8026458 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x28>

08026478 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>:
 8026478:	b570      	push	{r4, r5, r6, lr}
 802647a:	4b06      	ldr	r3, [pc, #24]	@ (8026494 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj+0x1c>)
 802647c:	4604      	mov	r4, r0
 802647e:	460d      	mov	r5, r1
 8026480:	4616      	mov	r6, r2
 8026482:	2100      	movs	r1, #0
 8026484:	f7ff fdb4 	bl	8025ff0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8026488:	4632      	mov	r2, r6
 802648a:	4629      	mov	r1, r5
 802648c:	4620      	mov	r0, r4
 802648e:	f7ff ffcf 	bl	8026430 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8026492:	bd70      	pop	{r4, r5, r6, pc}
 8026494:	08028dc1 	.word	0x08028dc1

08026498 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8026498:	6800      	ldr	r0, [r0, #0]
 802649a:	4770      	bx	lr

0802649c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>:
 802649c:	b538      	push	{r3, r4, r5, lr}
 802649e:	6845      	ldr	r5, [r0, #4]
 80264a0:	684c      	ldr	r4, [r1, #4]
 80264a2:	6800      	ldr	r0, [r0, #0]
 80264a4:	6809      	ldr	r1, [r1, #0]
 80264a6:	42a5      	cmp	r5, r4
 80264a8:	462a      	mov	r2, r5
 80264aa:	bf28      	it	cs
 80264ac:	4622      	movcs	r2, r4
 80264ae:	f7ff fd4b 	bl	8025f48 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 80264b2:	b900      	cbnz	r0, 80264b6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_+0x1a>
 80264b4:	1b28      	subs	r0, r5, r4
 80264b6:	bd38      	pop	{r3, r4, r5, pc}

080264b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 80264b8:	6001      	str	r1, [r0, #0]
 80264ba:	4770      	bx	lr

080264bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 80264bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80264be:	1a53      	subs	r3, r2, r1
 80264c0:	2b0f      	cmp	r3, #15
 80264c2:	4604      	mov	r4, r0
 80264c4:	460d      	mov	r5, r1
 80264c6:	4616      	mov	r6, r2
 80264c8:	9301      	str	r3, [sp, #4]
 80264ca:	d906      	bls.n	80264da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x1e>
 80264cc:	2200      	movs	r2, #0
 80264ce:	a901      	add	r1, sp, #4
 80264d0:	f7ff fd52 	bl	8025f78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80264d4:	9b01      	ldr	r3, [sp, #4]
 80264d6:	6020      	str	r0, [r4, #0]
 80264d8:	60a3      	str	r3, [r4, #8]
 80264da:	4632      	mov	r2, r6
 80264dc:	4629      	mov	r1, r5
 80264de:	6820      	ldr	r0, [r4, #0]
 80264e0:	f7ff fdc7 	bl	8026072 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 80264e4:	9b01      	ldr	r3, [sp, #4]
 80264e6:	6822      	ldr	r2, [r4, #0]
 80264e8:	6063      	str	r3, [r4, #4]
 80264ea:	2100      	movs	r1, #0
 80264ec:	54d1      	strb	r1, [r2, r3]
 80264ee:	b002      	add	sp, #8
 80264f0:	bd70      	pop	{r4, r5, r6, pc}

080264f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 80264f2:	f100 0208 	add.w	r2, r0, #8
 80264f6:	b510      	push	{r4, lr}
 80264f8:	6002      	str	r2, [r0, #0]
 80264fa:	e9d1 1200 	ldrd	r1, r2, [r1]
 80264fe:	4604      	mov	r4, r0
 8026500:	f04f 0300 	mov.w	r3, #0
 8026504:	440a      	add	r2, r1
 8026506:	f7ff ffd9 	bl	80264bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 802650a:	4620      	mov	r0, r4
 802650c:	bd10      	pop	{r4, pc}
	...

08026510 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>:
 8026510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026514:	4698      	mov	r8, r3
 8026516:	f100 0308 	add.w	r3, r0, #8
 802651a:	460d      	mov	r5, r1
 802651c:	4617      	mov	r7, r2
 802651e:	6003      	str	r3, [r0, #0]
 8026520:	680e      	ldr	r6, [r1, #0]
 8026522:	4a0b      	ldr	r2, [pc, #44]	@ (8026550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj+0x40>)
 8026524:	4604      	mov	r4, r0
 8026526:	4639      	mov	r1, r7
 8026528:	4628      	mov	r0, r5
 802652a:	f7ff fd53 	bl	8025fd4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 802652e:	686a      	ldr	r2, [r5, #4]
 8026530:	1831      	adds	r1, r6, r0
 8026532:	1bd2      	subs	r2, r2, r7
 8026534:	4620      	mov	r0, r4
 8026536:	f04f 0300 	mov.w	r3, #0
 802653a:	4542      	cmp	r2, r8
 802653c:	bf94      	ite	ls
 802653e:	188a      	addls	r2, r1, r2
 8026540:	eb01 0208 	addhi.w	r2, r1, r8
 8026544:	f7e0 f9df 	bl	8006906 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8026548:	4620      	mov	r0, r4
 802654a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802654e:	bf00      	nop
 8026550:	08028dd6 	.word	0x08028dd6

08026554 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>:
 8026554:	b570      	push	{r4, r5, r6, lr}
 8026556:	460d      	mov	r5, r1
 8026558:	4604      	mov	r4, r0
 802655a:	4611      	mov	r1, r2
 802655c:	4628      	mov	r0, r5
 802655e:	4a06      	ldr	r2, [pc, #24]	@ (8026578 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x24>)
 8026560:	461e      	mov	r6, r3
 8026562:	f7ff fd37 	bl	8025fd4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8026566:	4633      	mov	r3, r6
 8026568:	4602      	mov	r2, r0
 802656a:	4629      	mov	r1, r5
 802656c:	4620      	mov	r0, r4
 802656e:	f7ff ffcf 	bl	8026510 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>
 8026572:	4620      	mov	r0, r4
 8026574:	bd70      	pop	{r4, r5, r6, pc}
 8026576:	bf00      	nop
 8026578:	08028df1 	.word	0x08028df1

0802657c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 802657c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 802657e:	2400      	movs	r4, #0
 8026580:	2310      	movs	r3, #16
 8026582:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8026586:	6803      	ldr	r3, [r0, #0]
 8026588:	4615      	mov	r5, r2
 802658a:	699e      	ldr	r6, [r3, #24]
 802658c:	6812      	ldr	r2, [r2, #0]
 802658e:	466b      	mov	r3, sp
 8026590:	e9cd 4400 	strd	r4, r4, [sp]
 8026594:	47b0      	blx	r6
 8026596:	f89d 3004 	ldrb.w	r3, [sp, #4]
 802659a:	f003 0306 	and.w	r3, r3, #6
 802659e:	2b06      	cmp	r3, #6
 80265a0:	bf03      	ittte	eq
 80265a2:	9b00      	ldreq	r3, [sp, #0]
 80265a4:	602b      	streq	r3, [r5, #0]
 80265a6:	2001      	moveq	r0, #1
 80265a8:	4620      	movne	r0, r4
 80265aa:	b004      	add	sp, #16
 80265ac:	bd70      	pop	{r4, r5, r6, pc}

080265ae <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 80265ae:	9800      	ldr	r0, [sp, #0]
 80265b0:	4290      	cmp	r0, r2
 80265b2:	bf0c      	ite	eq
 80265b4:	2006      	moveq	r0, #6
 80265b6:	2001      	movne	r0, #1
 80265b8:	4770      	bx	lr
	...

080265bc <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 80265bc:	b510      	push	{r4, lr}
 80265be:	4b03      	ldr	r3, [pc, #12]	@ (80265cc <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 80265c0:	6003      	str	r3, [r0, #0]
 80265c2:	4604      	mov	r4, r0
 80265c4:	f000 f8d9 	bl	802677a <_ZNSt9type_infoD1Ev>
 80265c8:	4620      	mov	r0, r4
 80265ca:	bd10      	pop	{r4, pc}
 80265cc:	08028e3c 	.word	0x08028e3c

080265d0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 80265d0:	b510      	push	{r4, lr}
 80265d2:	4604      	mov	r4, r0
 80265d4:	f7ff fff2 	bl	80265bc <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80265d8:	4620      	mov	r0, r4
 80265da:	2108      	movs	r1, #8
 80265dc:	f7ff fc6d 	bl	8025eba <_ZdlPvj>
 80265e0:	4620      	mov	r0, r4
 80265e2:	bd10      	pop	{r4, pc}

080265e4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 80265e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80265e8:	461f      	mov	r7, r3
 80265ea:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 80265ee:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80265f2:	4598      	cmp	r8, r3
 80265f4:	4606      	mov	r6, r0
 80265f6:	4615      	mov	r5, r2
 80265f8:	d107      	bne.n	802660a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80265fa:	9907      	ldr	r1, [sp, #28]
 80265fc:	f000 f8c0 	bl	8026780 <_ZNKSt9type_info7__equalERKS_>
 8026600:	b118      	cbz	r0, 802660a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8026602:	7165      	strb	r5, [r4, #5]
 8026604:	2000      	movs	r0, #0
 8026606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802660a:	4639      	mov	r1, r7
 802660c:	4630      	mov	r0, r6
 802660e:	f000 f8b7 	bl	8026780 <_ZNKSt9type_info7__equalERKS_>
 8026612:	2800      	cmp	r0, #0
 8026614:	d0f6      	beq.n	8026604 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 8026616:	2301      	movs	r3, #1
 8026618:	f8c4 8000 	str.w	r8, [r4]
 802661c:	7125      	strb	r5, [r4, #4]
 802661e:	71a3      	strb	r3, [r4, #6]
 8026620:	e7f0      	b.n	8026604 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

08026622 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8026622:	b538      	push	{r3, r4, r5, lr}
 8026624:	4615      	mov	r5, r2
 8026626:	461c      	mov	r4, r3
 8026628:	f000 f8aa 	bl	8026780 <_ZNKSt9type_info7__equalERKS_>
 802662c:	b120      	cbz	r0, 8026638 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 802662e:	2308      	movs	r3, #8
 8026630:	60e3      	str	r3, [r4, #12]
 8026632:	2306      	movs	r3, #6
 8026634:	6025      	str	r5, [r4, #0]
 8026636:	7123      	strb	r3, [r4, #4]
 8026638:	bd38      	pop	{r3, r4, r5, pc}

0802663a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 802663a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802663e:	4605      	mov	r5, r0
 8026640:	460c      	mov	r4, r1
 8026642:	4616      	mov	r6, r2
 8026644:	461f      	mov	r7, r3
 8026646:	f000 f89b 	bl	8026780 <_ZNKSt9type_info7__equalERKS_>
 802664a:	b948      	cbnz	r0, 8026660 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 802664c:	2f03      	cmp	r7, #3
 802664e:	d807      	bhi.n	8026660 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8026650:	6823      	ldr	r3, [r4, #0]
 8026652:	4632      	mov	r2, r6
 8026654:	4629      	mov	r1, r5
 8026656:	4620      	mov	r0, r4
 8026658:	695b      	ldr	r3, [r3, #20]
 802665a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802665e:	4718      	bx	r3
 8026660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08026664 <_ZdlPv>:
 8026664:	f000 b8b2 	b.w	80267cc <free>

08026668 <_ZSt15get_new_handlerv>:
 8026668:	4b02      	ldr	r3, [pc, #8]	@ (8026674 <_ZSt15get_new_handlerv+0xc>)
 802666a:	6818      	ldr	r0, [r3, #0]
 802666c:	f3bf 8f5b 	dmb	ish
 8026670:	4770      	bx	lr
 8026672:	bf00      	nop
 8026674:	24000abc 	.word	0x24000abc

08026678 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8026678:	b510      	push	{r4, lr}
 802667a:	4b03      	ldr	r3, [pc, #12]	@ (8026688 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 802667c:	6003      	str	r3, [r0, #0]
 802667e:	4604      	mov	r4, r0
 8026680:	f7ff ff9c 	bl	80265bc <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8026684:	4620      	mov	r0, r4
 8026686:	bd10      	pop	{r4, pc}
 8026688:	08028e9c 	.word	0x08028e9c

0802668c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 802668c:	b510      	push	{r4, lr}
 802668e:	4604      	mov	r4, r0
 8026690:	f7ff fff2 	bl	8026678 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8026694:	4620      	mov	r0, r4
 8026696:	210c      	movs	r1, #12
 8026698:	f7ff fc0f 	bl	8025eba <_ZdlPvj>
 802669c:	4620      	mov	r0, r4
 802669e:	bd10      	pop	{r4, pc}

080266a0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80266a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80266a4:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80266a8:	4590      	cmp	r8, r2
 80266aa:	4606      	mov	r6, r0
 80266ac:	460f      	mov	r7, r1
 80266ae:	4615      	mov	r5, r2
 80266b0:	461c      	mov	r4, r3
 80266b2:	d00b      	beq.n	80266cc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 80266b4:	68b0      	ldr	r0, [r6, #8]
 80266b6:	6803      	ldr	r3, [r0, #0]
 80266b8:	f8cd 8018 	str.w	r8, [sp, #24]
 80266bc:	6a1e      	ldr	r6, [r3, #32]
 80266be:	462a      	mov	r2, r5
 80266c0:	4623      	mov	r3, r4
 80266c2:	4639      	mov	r1, r7
 80266c4:	46b4      	mov	ip, r6
 80266c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80266ca:	4760      	bx	ip
 80266cc:	4619      	mov	r1, r3
 80266ce:	f000 f857 	bl	8026780 <_ZNKSt9type_info7__equalERKS_>
 80266d2:	2800      	cmp	r0, #0
 80266d4:	d0ee      	beq.n	80266b4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 80266d6:	2006      	movs	r0, #6
 80266d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080266dc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 80266dc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80266e0:	460d      	mov	r5, r1
 80266e2:	4619      	mov	r1, r3
 80266e4:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	@ 0x28
 80266e8:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	@ 0x30
 80266ec:	4681      	mov	r9, r0
 80266ee:	4617      	mov	r7, r2
 80266f0:	4698      	mov	r8, r3
 80266f2:	f000 f845 	bl	8026780 <_ZNKSt9type_info7__equalERKS_>
 80266f6:	b190      	cbz	r0, 802671e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 80266f8:	2d00      	cmp	r5, #0
 80266fa:	6034      	str	r4, [r6, #0]
 80266fc:	7137      	strb	r7, [r6, #4]
 80266fe:	db09      	blt.n	8026714 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 8026700:	442c      	add	r4, r5
 8026702:	45a2      	cmp	sl, r4
 8026704:	bf14      	ite	ne
 8026706:	2401      	movne	r4, #1
 8026708:	2406      	moveq	r4, #6
 802670a:	71b4      	strb	r4, [r6, #6]
 802670c:	2000      	movs	r0, #0
 802670e:	b001      	add	sp, #4
 8026710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026714:	3502      	adds	r5, #2
 8026716:	d1f9      	bne.n	802670c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8026718:	2301      	movs	r3, #1
 802671a:	71b3      	strb	r3, [r6, #6]
 802671c:	e7f6      	b.n	802670c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 802671e:	4554      	cmp	r4, sl
 8026720:	d106      	bne.n	8026730 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8026722:	4659      	mov	r1, fp
 8026724:	4648      	mov	r0, r9
 8026726:	f000 f82b 	bl	8026780 <_ZNKSt9type_info7__equalERKS_>
 802672a:	b108      	cbz	r0, 8026730 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 802672c:	7177      	strb	r7, [r6, #5]
 802672e:	e7ed      	b.n	802670c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8026730:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8026734:	6803      	ldr	r3, [r0, #0]
 8026736:	e9cd a60c 	strd	sl, r6, [sp, #48]	@ 0x30
 802673a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	@ 0x28
 802673e:	69dc      	ldr	r4, [r3, #28]
 8026740:	463a      	mov	r2, r7
 8026742:	4643      	mov	r3, r8
 8026744:	4629      	mov	r1, r5
 8026746:	46a4      	mov	ip, r4
 8026748:	b001      	add	sp, #4
 802674a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802674e:	4760      	bx	ip

08026750 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8026750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026754:	4607      	mov	r7, r0
 8026756:	460c      	mov	r4, r1
 8026758:	4615      	mov	r5, r2
 802675a:	461e      	mov	r6, r3
 802675c:	f7ff ff61 	bl	8026622 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8026760:	b948      	cbnz	r0, 8026776 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8026762:	68b8      	ldr	r0, [r7, #8]
 8026764:	6803      	ldr	r3, [r0, #0]
 8026766:	699f      	ldr	r7, [r3, #24]
 8026768:	462a      	mov	r2, r5
 802676a:	4633      	mov	r3, r6
 802676c:	4621      	mov	r1, r4
 802676e:	46bc      	mov	ip, r7
 8026770:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8026774:	4760      	bx	ip
 8026776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0802677a <_ZNSt9type_infoD1Ev>:
 802677a:	4770      	bx	lr

0802677c <_ZNKSt9type_info14__is_pointer_pEv>:
 802677c:	2000      	movs	r0, #0
 802677e:	4770      	bx	lr

08026780 <_ZNKSt9type_info7__equalERKS_>:
 8026780:	4281      	cmp	r1, r0
 8026782:	b508      	push	{r3, lr}
 8026784:	d00e      	beq.n	80267a4 <_ZNKSt9type_info7__equalERKS_+0x24>
 8026786:	6840      	ldr	r0, [r0, #4]
 8026788:	7803      	ldrb	r3, [r0, #0]
 802678a:	2b2a      	cmp	r3, #42	@ 0x2a
 802678c:	d00c      	beq.n	80267a8 <_ZNKSt9type_info7__equalERKS_+0x28>
 802678e:	6849      	ldr	r1, [r1, #4]
 8026790:	780b      	ldrb	r3, [r1, #0]
 8026792:	2b2a      	cmp	r3, #42	@ 0x2a
 8026794:	bf08      	it	eq
 8026796:	3101      	addeq	r1, #1
 8026798:	f7d9 fda2 	bl	80002e0 <strcmp>
 802679c:	fab0 f080 	clz	r0, r0
 80267a0:	0940      	lsrs	r0, r0, #5
 80267a2:	bd08      	pop	{r3, pc}
 80267a4:	2001      	movs	r0, #1
 80267a6:	e7fc      	b.n	80267a2 <_ZNKSt9type_info7__equalERKS_+0x22>
 80267a8:	2000      	movs	r0, #0
 80267aa:	e7fa      	b.n	80267a2 <_ZNKSt9type_info7__equalERKS_+0x22>

080267ac <abort>:
 80267ac:	b508      	push	{r3, lr}
 80267ae:	2006      	movs	r0, #6
 80267b0:	f000 fbe8 	bl	8026f84 <raise>
 80267b4:	2001      	movs	r0, #1
 80267b6:	f7e7 fa57 	bl	800dc68 <_exit>
	...

080267bc <malloc>:
 80267bc:	4b02      	ldr	r3, [pc, #8]	@ (80267c8 <malloc+0xc>)
 80267be:	4601      	mov	r1, r0
 80267c0:	6818      	ldr	r0, [r3, #0]
 80267c2:	f000 b82d 	b.w	8026820 <_malloc_r>
 80267c6:	bf00      	nop
 80267c8:	24000038 	.word	0x24000038

080267cc <free>:
 80267cc:	4b02      	ldr	r3, [pc, #8]	@ (80267d8 <free+0xc>)
 80267ce:	4601      	mov	r1, r0
 80267d0:	6818      	ldr	r0, [r3, #0]
 80267d2:	f000 bc85 	b.w	80270e0 <_free_r>
 80267d6:	bf00      	nop
 80267d8:	24000038 	.word	0x24000038

080267dc <sbrk_aligned>:
 80267dc:	b570      	push	{r4, r5, r6, lr}
 80267de:	4e0f      	ldr	r6, [pc, #60]	@ (802681c <sbrk_aligned+0x40>)
 80267e0:	460c      	mov	r4, r1
 80267e2:	6831      	ldr	r1, [r6, #0]
 80267e4:	4605      	mov	r5, r0
 80267e6:	b911      	cbnz	r1, 80267ee <sbrk_aligned+0x12>
 80267e8:	f000 fc1c 	bl	8027024 <_sbrk_r>
 80267ec:	6030      	str	r0, [r6, #0]
 80267ee:	4621      	mov	r1, r4
 80267f0:	4628      	mov	r0, r5
 80267f2:	f000 fc17 	bl	8027024 <_sbrk_r>
 80267f6:	1c43      	adds	r3, r0, #1
 80267f8:	d103      	bne.n	8026802 <sbrk_aligned+0x26>
 80267fa:	f04f 34ff 	mov.w	r4, #4294967295
 80267fe:	4620      	mov	r0, r4
 8026800:	bd70      	pop	{r4, r5, r6, pc}
 8026802:	1cc4      	adds	r4, r0, #3
 8026804:	f024 0403 	bic.w	r4, r4, #3
 8026808:	42a0      	cmp	r0, r4
 802680a:	d0f8      	beq.n	80267fe <sbrk_aligned+0x22>
 802680c:	1a21      	subs	r1, r4, r0
 802680e:	4628      	mov	r0, r5
 8026810:	f000 fc08 	bl	8027024 <_sbrk_r>
 8026814:	3001      	adds	r0, #1
 8026816:	d1f2      	bne.n	80267fe <sbrk_aligned+0x22>
 8026818:	e7ef      	b.n	80267fa <sbrk_aligned+0x1e>
 802681a:	bf00      	nop
 802681c:	24000ac0 	.word	0x24000ac0

08026820 <_malloc_r>:
 8026820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026824:	1ccd      	adds	r5, r1, #3
 8026826:	f025 0503 	bic.w	r5, r5, #3
 802682a:	3508      	adds	r5, #8
 802682c:	2d0c      	cmp	r5, #12
 802682e:	bf38      	it	cc
 8026830:	250c      	movcc	r5, #12
 8026832:	2d00      	cmp	r5, #0
 8026834:	4606      	mov	r6, r0
 8026836:	db01      	blt.n	802683c <_malloc_r+0x1c>
 8026838:	42a9      	cmp	r1, r5
 802683a:	d904      	bls.n	8026846 <_malloc_r+0x26>
 802683c:	230c      	movs	r3, #12
 802683e:	6033      	str	r3, [r6, #0]
 8026840:	2000      	movs	r0, #0
 8026842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026846:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 802691c <_malloc_r+0xfc>
 802684a:	f000 f869 	bl	8026920 <__malloc_lock>
 802684e:	f8d8 3000 	ldr.w	r3, [r8]
 8026852:	461c      	mov	r4, r3
 8026854:	bb44      	cbnz	r4, 80268a8 <_malloc_r+0x88>
 8026856:	4629      	mov	r1, r5
 8026858:	4630      	mov	r0, r6
 802685a:	f7ff ffbf 	bl	80267dc <sbrk_aligned>
 802685e:	1c43      	adds	r3, r0, #1
 8026860:	4604      	mov	r4, r0
 8026862:	d158      	bne.n	8026916 <_malloc_r+0xf6>
 8026864:	f8d8 4000 	ldr.w	r4, [r8]
 8026868:	4627      	mov	r7, r4
 802686a:	2f00      	cmp	r7, #0
 802686c:	d143      	bne.n	80268f6 <_malloc_r+0xd6>
 802686e:	2c00      	cmp	r4, #0
 8026870:	d04b      	beq.n	802690a <_malloc_r+0xea>
 8026872:	6823      	ldr	r3, [r4, #0]
 8026874:	4639      	mov	r1, r7
 8026876:	4630      	mov	r0, r6
 8026878:	eb04 0903 	add.w	r9, r4, r3
 802687c:	f000 fbd2 	bl	8027024 <_sbrk_r>
 8026880:	4581      	cmp	r9, r0
 8026882:	d142      	bne.n	802690a <_malloc_r+0xea>
 8026884:	6821      	ldr	r1, [r4, #0]
 8026886:	1a6d      	subs	r5, r5, r1
 8026888:	4629      	mov	r1, r5
 802688a:	4630      	mov	r0, r6
 802688c:	f7ff ffa6 	bl	80267dc <sbrk_aligned>
 8026890:	3001      	adds	r0, #1
 8026892:	d03a      	beq.n	802690a <_malloc_r+0xea>
 8026894:	6823      	ldr	r3, [r4, #0]
 8026896:	442b      	add	r3, r5
 8026898:	6023      	str	r3, [r4, #0]
 802689a:	f8d8 3000 	ldr.w	r3, [r8]
 802689e:	685a      	ldr	r2, [r3, #4]
 80268a0:	bb62      	cbnz	r2, 80268fc <_malloc_r+0xdc>
 80268a2:	f8c8 7000 	str.w	r7, [r8]
 80268a6:	e00f      	b.n	80268c8 <_malloc_r+0xa8>
 80268a8:	6822      	ldr	r2, [r4, #0]
 80268aa:	1b52      	subs	r2, r2, r5
 80268ac:	d420      	bmi.n	80268f0 <_malloc_r+0xd0>
 80268ae:	2a0b      	cmp	r2, #11
 80268b0:	d917      	bls.n	80268e2 <_malloc_r+0xc2>
 80268b2:	1961      	adds	r1, r4, r5
 80268b4:	42a3      	cmp	r3, r4
 80268b6:	6025      	str	r5, [r4, #0]
 80268b8:	bf18      	it	ne
 80268ba:	6059      	strne	r1, [r3, #4]
 80268bc:	6863      	ldr	r3, [r4, #4]
 80268be:	bf08      	it	eq
 80268c0:	f8c8 1000 	streq.w	r1, [r8]
 80268c4:	5162      	str	r2, [r4, r5]
 80268c6:	604b      	str	r3, [r1, #4]
 80268c8:	4630      	mov	r0, r6
 80268ca:	f000 f82f 	bl	802692c <__malloc_unlock>
 80268ce:	f104 000b 	add.w	r0, r4, #11
 80268d2:	1d23      	adds	r3, r4, #4
 80268d4:	f020 0007 	bic.w	r0, r0, #7
 80268d8:	1ac2      	subs	r2, r0, r3
 80268da:	bf1c      	itt	ne
 80268dc:	1a1b      	subne	r3, r3, r0
 80268de:	50a3      	strne	r3, [r4, r2]
 80268e0:	e7af      	b.n	8026842 <_malloc_r+0x22>
 80268e2:	6862      	ldr	r2, [r4, #4]
 80268e4:	42a3      	cmp	r3, r4
 80268e6:	bf0c      	ite	eq
 80268e8:	f8c8 2000 	streq.w	r2, [r8]
 80268ec:	605a      	strne	r2, [r3, #4]
 80268ee:	e7eb      	b.n	80268c8 <_malloc_r+0xa8>
 80268f0:	4623      	mov	r3, r4
 80268f2:	6864      	ldr	r4, [r4, #4]
 80268f4:	e7ae      	b.n	8026854 <_malloc_r+0x34>
 80268f6:	463c      	mov	r4, r7
 80268f8:	687f      	ldr	r7, [r7, #4]
 80268fa:	e7b6      	b.n	802686a <_malloc_r+0x4a>
 80268fc:	461a      	mov	r2, r3
 80268fe:	685b      	ldr	r3, [r3, #4]
 8026900:	42a3      	cmp	r3, r4
 8026902:	d1fb      	bne.n	80268fc <_malloc_r+0xdc>
 8026904:	2300      	movs	r3, #0
 8026906:	6053      	str	r3, [r2, #4]
 8026908:	e7de      	b.n	80268c8 <_malloc_r+0xa8>
 802690a:	230c      	movs	r3, #12
 802690c:	6033      	str	r3, [r6, #0]
 802690e:	4630      	mov	r0, r6
 8026910:	f000 f80c 	bl	802692c <__malloc_unlock>
 8026914:	e794      	b.n	8026840 <_malloc_r+0x20>
 8026916:	6005      	str	r5, [r0, #0]
 8026918:	e7d6      	b.n	80268c8 <_malloc_r+0xa8>
 802691a:	bf00      	nop
 802691c:	24000ac4 	.word	0x24000ac4

08026920 <__malloc_lock>:
 8026920:	4801      	ldr	r0, [pc, #4]	@ (8026928 <__malloc_lock+0x8>)
 8026922:	f000 bbcc 	b.w	80270be <__retarget_lock_acquire_recursive>
 8026926:	bf00      	nop
 8026928:	24000c08 	.word	0x24000c08

0802692c <__malloc_unlock>:
 802692c:	4801      	ldr	r0, [pc, #4]	@ (8026934 <__malloc_unlock+0x8>)
 802692e:	f000 bbc7 	b.w	80270c0 <__retarget_lock_release_recursive>
 8026932:	bf00      	nop
 8026934:	24000c08 	.word	0x24000c08

08026938 <realloc>:
 8026938:	4b02      	ldr	r3, [pc, #8]	@ (8026944 <realloc+0xc>)
 802693a:	460a      	mov	r2, r1
 802693c:	4601      	mov	r1, r0
 802693e:	6818      	ldr	r0, [r3, #0]
 8026940:	f000 b802 	b.w	8026948 <_realloc_r>
 8026944:	24000038 	.word	0x24000038

08026948 <_realloc_r>:
 8026948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802694c:	4680      	mov	r8, r0
 802694e:	4615      	mov	r5, r2
 8026950:	460c      	mov	r4, r1
 8026952:	b921      	cbnz	r1, 802695e <_realloc_r+0x16>
 8026954:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8026958:	4611      	mov	r1, r2
 802695a:	f7ff bf61 	b.w	8026820 <_malloc_r>
 802695e:	b92a      	cbnz	r2, 802696c <_realloc_r+0x24>
 8026960:	f000 fbbe 	bl	80270e0 <_free_r>
 8026964:	2400      	movs	r4, #0
 8026966:	4620      	mov	r0, r4
 8026968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802696c:	f000 fc02 	bl	8027174 <_malloc_usable_size_r>
 8026970:	4285      	cmp	r5, r0
 8026972:	4606      	mov	r6, r0
 8026974:	d802      	bhi.n	802697c <_realloc_r+0x34>
 8026976:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 802697a:	d8f4      	bhi.n	8026966 <_realloc_r+0x1e>
 802697c:	4629      	mov	r1, r5
 802697e:	4640      	mov	r0, r8
 8026980:	f7ff ff4e 	bl	8026820 <_malloc_r>
 8026984:	4607      	mov	r7, r0
 8026986:	2800      	cmp	r0, #0
 8026988:	d0ec      	beq.n	8026964 <_realloc_r+0x1c>
 802698a:	42b5      	cmp	r5, r6
 802698c:	462a      	mov	r2, r5
 802698e:	4621      	mov	r1, r4
 8026990:	bf28      	it	cs
 8026992:	4632      	movcs	r2, r6
 8026994:	f000 fb95 	bl	80270c2 <memcpy>
 8026998:	4621      	mov	r1, r4
 802699a:	4640      	mov	r0, r8
 802699c:	f000 fba0 	bl	80270e0 <_free_r>
 80269a0:	463c      	mov	r4, r7
 80269a2:	e7e0      	b.n	8026966 <_realloc_r+0x1e>

080269a4 <_strtol_l.constprop.0>:
 80269a4:	2b24      	cmp	r3, #36	@ 0x24
 80269a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80269aa:	4686      	mov	lr, r0
 80269ac:	4690      	mov	r8, r2
 80269ae:	d801      	bhi.n	80269b4 <_strtol_l.constprop.0+0x10>
 80269b0:	2b01      	cmp	r3, #1
 80269b2:	d106      	bne.n	80269c2 <_strtol_l.constprop.0+0x1e>
 80269b4:	f000 fb58 	bl	8027068 <__errno>
 80269b8:	2316      	movs	r3, #22
 80269ba:	6003      	str	r3, [r0, #0]
 80269bc:	2000      	movs	r0, #0
 80269be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80269c2:	4834      	ldr	r0, [pc, #208]	@ (8026a94 <_strtol_l.constprop.0+0xf0>)
 80269c4:	460d      	mov	r5, r1
 80269c6:	462a      	mov	r2, r5
 80269c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80269cc:	5d06      	ldrb	r6, [r0, r4]
 80269ce:	f016 0608 	ands.w	r6, r6, #8
 80269d2:	d1f8      	bne.n	80269c6 <_strtol_l.constprop.0+0x22>
 80269d4:	2c2d      	cmp	r4, #45	@ 0x2d
 80269d6:	d12d      	bne.n	8026a34 <_strtol_l.constprop.0+0x90>
 80269d8:	782c      	ldrb	r4, [r5, #0]
 80269da:	2601      	movs	r6, #1
 80269dc:	1c95      	adds	r5, r2, #2
 80269de:	f033 0210 	bics.w	r2, r3, #16
 80269e2:	d109      	bne.n	80269f8 <_strtol_l.constprop.0+0x54>
 80269e4:	2c30      	cmp	r4, #48	@ 0x30
 80269e6:	d12a      	bne.n	8026a3e <_strtol_l.constprop.0+0x9a>
 80269e8:	782a      	ldrb	r2, [r5, #0]
 80269ea:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80269ee:	2a58      	cmp	r2, #88	@ 0x58
 80269f0:	d125      	bne.n	8026a3e <_strtol_l.constprop.0+0x9a>
 80269f2:	786c      	ldrb	r4, [r5, #1]
 80269f4:	2310      	movs	r3, #16
 80269f6:	3502      	adds	r5, #2
 80269f8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80269fc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8026a00:	2200      	movs	r2, #0
 8026a02:	fbbc f9f3 	udiv	r9, ip, r3
 8026a06:	4610      	mov	r0, r2
 8026a08:	fb03 ca19 	mls	sl, r3, r9, ip
 8026a0c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8026a10:	2f09      	cmp	r7, #9
 8026a12:	d81b      	bhi.n	8026a4c <_strtol_l.constprop.0+0xa8>
 8026a14:	463c      	mov	r4, r7
 8026a16:	42a3      	cmp	r3, r4
 8026a18:	dd27      	ble.n	8026a6a <_strtol_l.constprop.0+0xc6>
 8026a1a:	1c57      	adds	r7, r2, #1
 8026a1c:	d007      	beq.n	8026a2e <_strtol_l.constprop.0+0x8a>
 8026a1e:	4581      	cmp	r9, r0
 8026a20:	d320      	bcc.n	8026a64 <_strtol_l.constprop.0+0xc0>
 8026a22:	d101      	bne.n	8026a28 <_strtol_l.constprop.0+0x84>
 8026a24:	45a2      	cmp	sl, r4
 8026a26:	db1d      	blt.n	8026a64 <_strtol_l.constprop.0+0xc0>
 8026a28:	fb00 4003 	mla	r0, r0, r3, r4
 8026a2c:	2201      	movs	r2, #1
 8026a2e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8026a32:	e7eb      	b.n	8026a0c <_strtol_l.constprop.0+0x68>
 8026a34:	2c2b      	cmp	r4, #43	@ 0x2b
 8026a36:	bf04      	itt	eq
 8026a38:	782c      	ldrbeq	r4, [r5, #0]
 8026a3a:	1c95      	addeq	r5, r2, #2
 8026a3c:	e7cf      	b.n	80269de <_strtol_l.constprop.0+0x3a>
 8026a3e:	2b00      	cmp	r3, #0
 8026a40:	d1da      	bne.n	80269f8 <_strtol_l.constprop.0+0x54>
 8026a42:	2c30      	cmp	r4, #48	@ 0x30
 8026a44:	bf0c      	ite	eq
 8026a46:	2308      	moveq	r3, #8
 8026a48:	230a      	movne	r3, #10
 8026a4a:	e7d5      	b.n	80269f8 <_strtol_l.constprop.0+0x54>
 8026a4c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8026a50:	2f19      	cmp	r7, #25
 8026a52:	d801      	bhi.n	8026a58 <_strtol_l.constprop.0+0xb4>
 8026a54:	3c37      	subs	r4, #55	@ 0x37
 8026a56:	e7de      	b.n	8026a16 <_strtol_l.constprop.0+0x72>
 8026a58:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8026a5c:	2f19      	cmp	r7, #25
 8026a5e:	d804      	bhi.n	8026a6a <_strtol_l.constprop.0+0xc6>
 8026a60:	3c57      	subs	r4, #87	@ 0x57
 8026a62:	e7d8      	b.n	8026a16 <_strtol_l.constprop.0+0x72>
 8026a64:	f04f 32ff 	mov.w	r2, #4294967295
 8026a68:	e7e1      	b.n	8026a2e <_strtol_l.constprop.0+0x8a>
 8026a6a:	1c53      	adds	r3, r2, #1
 8026a6c:	d108      	bne.n	8026a80 <_strtol_l.constprop.0+0xdc>
 8026a6e:	2322      	movs	r3, #34	@ 0x22
 8026a70:	f8ce 3000 	str.w	r3, [lr]
 8026a74:	4660      	mov	r0, ip
 8026a76:	f1b8 0f00 	cmp.w	r8, #0
 8026a7a:	d0a0      	beq.n	80269be <_strtol_l.constprop.0+0x1a>
 8026a7c:	1e69      	subs	r1, r5, #1
 8026a7e:	e006      	b.n	8026a8e <_strtol_l.constprop.0+0xea>
 8026a80:	b106      	cbz	r6, 8026a84 <_strtol_l.constprop.0+0xe0>
 8026a82:	4240      	negs	r0, r0
 8026a84:	f1b8 0f00 	cmp.w	r8, #0
 8026a88:	d099      	beq.n	80269be <_strtol_l.constprop.0+0x1a>
 8026a8a:	2a00      	cmp	r2, #0
 8026a8c:	d1f6      	bne.n	8026a7c <_strtol_l.constprop.0+0xd8>
 8026a8e:	f8c8 1000 	str.w	r1, [r8]
 8026a92:	e794      	b.n	80269be <_strtol_l.constprop.0+0x1a>
 8026a94:	08028ed9 	.word	0x08028ed9

08026a98 <strtol>:
 8026a98:	4613      	mov	r3, r2
 8026a9a:	460a      	mov	r2, r1
 8026a9c:	4601      	mov	r1, r0
 8026a9e:	4802      	ldr	r0, [pc, #8]	@ (8026aa8 <strtol+0x10>)
 8026aa0:	6800      	ldr	r0, [r0, #0]
 8026aa2:	f7ff bf7f 	b.w	80269a4 <_strtol_l.constprop.0>
 8026aa6:	bf00      	nop
 8026aa8:	24000038 	.word	0x24000038

08026aac <std>:
 8026aac:	2300      	movs	r3, #0
 8026aae:	b510      	push	{r4, lr}
 8026ab0:	4604      	mov	r4, r0
 8026ab2:	e9c0 3300 	strd	r3, r3, [r0]
 8026ab6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8026aba:	6083      	str	r3, [r0, #8]
 8026abc:	8181      	strh	r1, [r0, #12]
 8026abe:	6643      	str	r3, [r0, #100]	@ 0x64
 8026ac0:	81c2      	strh	r2, [r0, #14]
 8026ac2:	6183      	str	r3, [r0, #24]
 8026ac4:	4619      	mov	r1, r3
 8026ac6:	2208      	movs	r2, #8
 8026ac8:	305c      	adds	r0, #92	@ 0x5c
 8026aca:	f000 fa2b 	bl	8026f24 <memset>
 8026ace:	4b0d      	ldr	r3, [pc, #52]	@ (8026b04 <std+0x58>)
 8026ad0:	6263      	str	r3, [r4, #36]	@ 0x24
 8026ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8026b08 <std+0x5c>)
 8026ad4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8026ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8026b0c <std+0x60>)
 8026ad8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8026ada:	4b0d      	ldr	r3, [pc, #52]	@ (8026b10 <std+0x64>)
 8026adc:	6323      	str	r3, [r4, #48]	@ 0x30
 8026ade:	4b0d      	ldr	r3, [pc, #52]	@ (8026b14 <std+0x68>)
 8026ae0:	6224      	str	r4, [r4, #32]
 8026ae2:	429c      	cmp	r4, r3
 8026ae4:	d006      	beq.n	8026af4 <std+0x48>
 8026ae6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8026aea:	4294      	cmp	r4, r2
 8026aec:	d002      	beq.n	8026af4 <std+0x48>
 8026aee:	33d0      	adds	r3, #208	@ 0xd0
 8026af0:	429c      	cmp	r4, r3
 8026af2:	d105      	bne.n	8026b00 <std+0x54>
 8026af4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8026af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026afc:	f000 bade 	b.w	80270bc <__retarget_lock_init_recursive>
 8026b00:	bd10      	pop	{r4, pc}
 8026b02:	bf00      	nop
 8026b04:	08026d21 	.word	0x08026d21
 8026b08:	08026d43 	.word	0x08026d43
 8026b0c:	08026d7b 	.word	0x08026d7b
 8026b10:	08026d9f 	.word	0x08026d9f
 8026b14:	24000ac8 	.word	0x24000ac8

08026b18 <stdio_exit_handler>:
 8026b18:	4a02      	ldr	r2, [pc, #8]	@ (8026b24 <stdio_exit_handler+0xc>)
 8026b1a:	4903      	ldr	r1, [pc, #12]	@ (8026b28 <stdio_exit_handler+0x10>)
 8026b1c:	4803      	ldr	r0, [pc, #12]	@ (8026b2c <stdio_exit_handler+0x14>)
 8026b1e:	f000 b869 	b.w	8026bf4 <_fwalk_sglue>
 8026b22:	bf00      	nop
 8026b24:	2400002c 	.word	0x2400002c
 8026b28:	0802782d 	.word	0x0802782d
 8026b2c:	2400003c 	.word	0x2400003c

08026b30 <cleanup_stdio>:
 8026b30:	6841      	ldr	r1, [r0, #4]
 8026b32:	4b0c      	ldr	r3, [pc, #48]	@ (8026b64 <cleanup_stdio+0x34>)
 8026b34:	4299      	cmp	r1, r3
 8026b36:	b510      	push	{r4, lr}
 8026b38:	4604      	mov	r4, r0
 8026b3a:	d001      	beq.n	8026b40 <cleanup_stdio+0x10>
 8026b3c:	f000 fe76 	bl	802782c <_fflush_r>
 8026b40:	68a1      	ldr	r1, [r4, #8]
 8026b42:	4b09      	ldr	r3, [pc, #36]	@ (8026b68 <cleanup_stdio+0x38>)
 8026b44:	4299      	cmp	r1, r3
 8026b46:	d002      	beq.n	8026b4e <cleanup_stdio+0x1e>
 8026b48:	4620      	mov	r0, r4
 8026b4a:	f000 fe6f 	bl	802782c <_fflush_r>
 8026b4e:	68e1      	ldr	r1, [r4, #12]
 8026b50:	4b06      	ldr	r3, [pc, #24]	@ (8026b6c <cleanup_stdio+0x3c>)
 8026b52:	4299      	cmp	r1, r3
 8026b54:	d004      	beq.n	8026b60 <cleanup_stdio+0x30>
 8026b56:	4620      	mov	r0, r4
 8026b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026b5c:	f000 be66 	b.w	802782c <_fflush_r>
 8026b60:	bd10      	pop	{r4, pc}
 8026b62:	bf00      	nop
 8026b64:	24000ac8 	.word	0x24000ac8
 8026b68:	24000b30 	.word	0x24000b30
 8026b6c:	24000b98 	.word	0x24000b98

08026b70 <global_stdio_init.part.0>:
 8026b70:	b510      	push	{r4, lr}
 8026b72:	4b0b      	ldr	r3, [pc, #44]	@ (8026ba0 <global_stdio_init.part.0+0x30>)
 8026b74:	4c0b      	ldr	r4, [pc, #44]	@ (8026ba4 <global_stdio_init.part.0+0x34>)
 8026b76:	4a0c      	ldr	r2, [pc, #48]	@ (8026ba8 <global_stdio_init.part.0+0x38>)
 8026b78:	601a      	str	r2, [r3, #0]
 8026b7a:	4620      	mov	r0, r4
 8026b7c:	2200      	movs	r2, #0
 8026b7e:	2104      	movs	r1, #4
 8026b80:	f7ff ff94 	bl	8026aac <std>
 8026b84:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8026b88:	2201      	movs	r2, #1
 8026b8a:	2109      	movs	r1, #9
 8026b8c:	f7ff ff8e 	bl	8026aac <std>
 8026b90:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8026b94:	2202      	movs	r2, #2
 8026b96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026b9a:	2112      	movs	r1, #18
 8026b9c:	f7ff bf86 	b.w	8026aac <std>
 8026ba0:	24000c00 	.word	0x24000c00
 8026ba4:	24000ac8 	.word	0x24000ac8
 8026ba8:	08026b19 	.word	0x08026b19

08026bac <__sfp_lock_acquire>:
 8026bac:	4801      	ldr	r0, [pc, #4]	@ (8026bb4 <__sfp_lock_acquire+0x8>)
 8026bae:	f000 ba86 	b.w	80270be <__retarget_lock_acquire_recursive>
 8026bb2:	bf00      	nop
 8026bb4:	24000c09 	.word	0x24000c09

08026bb8 <__sfp_lock_release>:
 8026bb8:	4801      	ldr	r0, [pc, #4]	@ (8026bc0 <__sfp_lock_release+0x8>)
 8026bba:	f000 ba81 	b.w	80270c0 <__retarget_lock_release_recursive>
 8026bbe:	bf00      	nop
 8026bc0:	24000c09 	.word	0x24000c09

08026bc4 <__sinit>:
 8026bc4:	b510      	push	{r4, lr}
 8026bc6:	4604      	mov	r4, r0
 8026bc8:	f7ff fff0 	bl	8026bac <__sfp_lock_acquire>
 8026bcc:	6a23      	ldr	r3, [r4, #32]
 8026bce:	b11b      	cbz	r3, 8026bd8 <__sinit+0x14>
 8026bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026bd4:	f7ff bff0 	b.w	8026bb8 <__sfp_lock_release>
 8026bd8:	4b04      	ldr	r3, [pc, #16]	@ (8026bec <__sinit+0x28>)
 8026bda:	6223      	str	r3, [r4, #32]
 8026bdc:	4b04      	ldr	r3, [pc, #16]	@ (8026bf0 <__sinit+0x2c>)
 8026bde:	681b      	ldr	r3, [r3, #0]
 8026be0:	2b00      	cmp	r3, #0
 8026be2:	d1f5      	bne.n	8026bd0 <__sinit+0xc>
 8026be4:	f7ff ffc4 	bl	8026b70 <global_stdio_init.part.0>
 8026be8:	e7f2      	b.n	8026bd0 <__sinit+0xc>
 8026bea:	bf00      	nop
 8026bec:	08026b31 	.word	0x08026b31
 8026bf0:	24000c00 	.word	0x24000c00

08026bf4 <_fwalk_sglue>:
 8026bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026bf8:	4607      	mov	r7, r0
 8026bfa:	4688      	mov	r8, r1
 8026bfc:	4614      	mov	r4, r2
 8026bfe:	2600      	movs	r6, #0
 8026c00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8026c04:	f1b9 0901 	subs.w	r9, r9, #1
 8026c08:	d505      	bpl.n	8026c16 <_fwalk_sglue+0x22>
 8026c0a:	6824      	ldr	r4, [r4, #0]
 8026c0c:	2c00      	cmp	r4, #0
 8026c0e:	d1f7      	bne.n	8026c00 <_fwalk_sglue+0xc>
 8026c10:	4630      	mov	r0, r6
 8026c12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026c16:	89ab      	ldrh	r3, [r5, #12]
 8026c18:	2b01      	cmp	r3, #1
 8026c1a:	d907      	bls.n	8026c2c <_fwalk_sglue+0x38>
 8026c1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8026c20:	3301      	adds	r3, #1
 8026c22:	d003      	beq.n	8026c2c <_fwalk_sglue+0x38>
 8026c24:	4629      	mov	r1, r5
 8026c26:	4638      	mov	r0, r7
 8026c28:	47c0      	blx	r8
 8026c2a:	4306      	orrs	r6, r0
 8026c2c:	3568      	adds	r5, #104	@ 0x68
 8026c2e:	e7e9      	b.n	8026c04 <_fwalk_sglue+0x10>

08026c30 <iprintf>:
 8026c30:	b40f      	push	{r0, r1, r2, r3}
 8026c32:	b507      	push	{r0, r1, r2, lr}
 8026c34:	4906      	ldr	r1, [pc, #24]	@ (8026c50 <iprintf+0x20>)
 8026c36:	ab04      	add	r3, sp, #16
 8026c38:	6808      	ldr	r0, [r1, #0]
 8026c3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8026c3e:	6881      	ldr	r1, [r0, #8]
 8026c40:	9301      	str	r3, [sp, #4]
 8026c42:	f000 fac9 	bl	80271d8 <_vfiprintf_r>
 8026c46:	b003      	add	sp, #12
 8026c48:	f85d eb04 	ldr.w	lr, [sp], #4
 8026c4c:	b004      	add	sp, #16
 8026c4e:	4770      	bx	lr
 8026c50:	24000038 	.word	0x24000038

08026c54 <putchar>:
 8026c54:	4b02      	ldr	r3, [pc, #8]	@ (8026c60 <putchar+0xc>)
 8026c56:	4601      	mov	r1, r0
 8026c58:	6818      	ldr	r0, [r3, #0]
 8026c5a:	6882      	ldr	r2, [r0, #8]
 8026c5c:	f000 be70 	b.w	8027940 <_putc_r>
 8026c60:	24000038 	.word	0x24000038

08026c64 <_puts_r>:
 8026c64:	6a03      	ldr	r3, [r0, #32]
 8026c66:	b570      	push	{r4, r5, r6, lr}
 8026c68:	6884      	ldr	r4, [r0, #8]
 8026c6a:	4605      	mov	r5, r0
 8026c6c:	460e      	mov	r6, r1
 8026c6e:	b90b      	cbnz	r3, 8026c74 <_puts_r+0x10>
 8026c70:	f7ff ffa8 	bl	8026bc4 <__sinit>
 8026c74:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8026c76:	07db      	lsls	r3, r3, #31
 8026c78:	d405      	bmi.n	8026c86 <_puts_r+0x22>
 8026c7a:	89a3      	ldrh	r3, [r4, #12]
 8026c7c:	0598      	lsls	r0, r3, #22
 8026c7e:	d402      	bmi.n	8026c86 <_puts_r+0x22>
 8026c80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8026c82:	f000 fa1c 	bl	80270be <__retarget_lock_acquire_recursive>
 8026c86:	89a3      	ldrh	r3, [r4, #12]
 8026c88:	0719      	lsls	r1, r3, #28
 8026c8a:	d502      	bpl.n	8026c92 <_puts_r+0x2e>
 8026c8c:	6923      	ldr	r3, [r4, #16]
 8026c8e:	2b00      	cmp	r3, #0
 8026c90:	d135      	bne.n	8026cfe <_puts_r+0x9a>
 8026c92:	4621      	mov	r1, r4
 8026c94:	4628      	mov	r0, r5
 8026c96:	f000 f8c5 	bl	8026e24 <__swsetup_r>
 8026c9a:	b380      	cbz	r0, 8026cfe <_puts_r+0x9a>
 8026c9c:	f04f 35ff 	mov.w	r5, #4294967295
 8026ca0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8026ca2:	07da      	lsls	r2, r3, #31
 8026ca4:	d405      	bmi.n	8026cb2 <_puts_r+0x4e>
 8026ca6:	89a3      	ldrh	r3, [r4, #12]
 8026ca8:	059b      	lsls	r3, r3, #22
 8026caa:	d402      	bmi.n	8026cb2 <_puts_r+0x4e>
 8026cac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8026cae:	f000 fa07 	bl	80270c0 <__retarget_lock_release_recursive>
 8026cb2:	4628      	mov	r0, r5
 8026cb4:	bd70      	pop	{r4, r5, r6, pc}
 8026cb6:	2b00      	cmp	r3, #0
 8026cb8:	da04      	bge.n	8026cc4 <_puts_r+0x60>
 8026cba:	69a2      	ldr	r2, [r4, #24]
 8026cbc:	429a      	cmp	r2, r3
 8026cbe:	dc17      	bgt.n	8026cf0 <_puts_r+0x8c>
 8026cc0:	290a      	cmp	r1, #10
 8026cc2:	d015      	beq.n	8026cf0 <_puts_r+0x8c>
 8026cc4:	6823      	ldr	r3, [r4, #0]
 8026cc6:	1c5a      	adds	r2, r3, #1
 8026cc8:	6022      	str	r2, [r4, #0]
 8026cca:	7019      	strb	r1, [r3, #0]
 8026ccc:	68a3      	ldr	r3, [r4, #8]
 8026cce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8026cd2:	3b01      	subs	r3, #1
 8026cd4:	60a3      	str	r3, [r4, #8]
 8026cd6:	2900      	cmp	r1, #0
 8026cd8:	d1ed      	bne.n	8026cb6 <_puts_r+0x52>
 8026cda:	2b00      	cmp	r3, #0
 8026cdc:	da11      	bge.n	8026d02 <_puts_r+0x9e>
 8026cde:	4622      	mov	r2, r4
 8026ce0:	210a      	movs	r1, #10
 8026ce2:	4628      	mov	r0, r5
 8026ce4:	f000 f85f 	bl	8026da6 <__swbuf_r>
 8026ce8:	3001      	adds	r0, #1
 8026cea:	d0d7      	beq.n	8026c9c <_puts_r+0x38>
 8026cec:	250a      	movs	r5, #10
 8026cee:	e7d7      	b.n	8026ca0 <_puts_r+0x3c>
 8026cf0:	4622      	mov	r2, r4
 8026cf2:	4628      	mov	r0, r5
 8026cf4:	f000 f857 	bl	8026da6 <__swbuf_r>
 8026cf8:	3001      	adds	r0, #1
 8026cfa:	d1e7      	bne.n	8026ccc <_puts_r+0x68>
 8026cfc:	e7ce      	b.n	8026c9c <_puts_r+0x38>
 8026cfe:	3e01      	subs	r6, #1
 8026d00:	e7e4      	b.n	8026ccc <_puts_r+0x68>
 8026d02:	6823      	ldr	r3, [r4, #0]
 8026d04:	1c5a      	adds	r2, r3, #1
 8026d06:	6022      	str	r2, [r4, #0]
 8026d08:	220a      	movs	r2, #10
 8026d0a:	701a      	strb	r2, [r3, #0]
 8026d0c:	e7ee      	b.n	8026cec <_puts_r+0x88>
	...

08026d10 <puts>:
 8026d10:	4b02      	ldr	r3, [pc, #8]	@ (8026d1c <puts+0xc>)
 8026d12:	4601      	mov	r1, r0
 8026d14:	6818      	ldr	r0, [r3, #0]
 8026d16:	f7ff bfa5 	b.w	8026c64 <_puts_r>
 8026d1a:	bf00      	nop
 8026d1c:	24000038 	.word	0x24000038

08026d20 <__sread>:
 8026d20:	b510      	push	{r4, lr}
 8026d22:	460c      	mov	r4, r1
 8026d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026d28:	f000 f956 	bl	8026fd8 <_read_r>
 8026d2c:	2800      	cmp	r0, #0
 8026d2e:	bfab      	itete	ge
 8026d30:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8026d32:	89a3      	ldrhlt	r3, [r4, #12]
 8026d34:	181b      	addge	r3, r3, r0
 8026d36:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8026d3a:	bfac      	ite	ge
 8026d3c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8026d3e:	81a3      	strhlt	r3, [r4, #12]
 8026d40:	bd10      	pop	{r4, pc}

08026d42 <__swrite>:
 8026d42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026d46:	461f      	mov	r7, r3
 8026d48:	898b      	ldrh	r3, [r1, #12]
 8026d4a:	05db      	lsls	r3, r3, #23
 8026d4c:	4605      	mov	r5, r0
 8026d4e:	460c      	mov	r4, r1
 8026d50:	4616      	mov	r6, r2
 8026d52:	d505      	bpl.n	8026d60 <__swrite+0x1e>
 8026d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026d58:	2302      	movs	r3, #2
 8026d5a:	2200      	movs	r2, #0
 8026d5c:	f000 f92a 	bl	8026fb4 <_lseek_r>
 8026d60:	89a3      	ldrh	r3, [r4, #12]
 8026d62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026d66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8026d6a:	81a3      	strh	r3, [r4, #12]
 8026d6c:	4632      	mov	r2, r6
 8026d6e:	463b      	mov	r3, r7
 8026d70:	4628      	mov	r0, r5
 8026d72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8026d76:	f000 b965 	b.w	8027044 <_write_r>

08026d7a <__sseek>:
 8026d7a:	b510      	push	{r4, lr}
 8026d7c:	460c      	mov	r4, r1
 8026d7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026d82:	f000 f917 	bl	8026fb4 <_lseek_r>
 8026d86:	1c43      	adds	r3, r0, #1
 8026d88:	89a3      	ldrh	r3, [r4, #12]
 8026d8a:	bf15      	itete	ne
 8026d8c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8026d8e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8026d92:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8026d96:	81a3      	strheq	r3, [r4, #12]
 8026d98:	bf18      	it	ne
 8026d9a:	81a3      	strhne	r3, [r4, #12]
 8026d9c:	bd10      	pop	{r4, pc}

08026d9e <__sclose>:
 8026d9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026da2:	f000 b8f7 	b.w	8026f94 <_close_r>

08026da6 <__swbuf_r>:
 8026da6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026da8:	460e      	mov	r6, r1
 8026daa:	4614      	mov	r4, r2
 8026dac:	4605      	mov	r5, r0
 8026dae:	b118      	cbz	r0, 8026db8 <__swbuf_r+0x12>
 8026db0:	6a03      	ldr	r3, [r0, #32]
 8026db2:	b90b      	cbnz	r3, 8026db8 <__swbuf_r+0x12>
 8026db4:	f7ff ff06 	bl	8026bc4 <__sinit>
 8026db8:	69a3      	ldr	r3, [r4, #24]
 8026dba:	60a3      	str	r3, [r4, #8]
 8026dbc:	89a3      	ldrh	r3, [r4, #12]
 8026dbe:	071a      	lsls	r2, r3, #28
 8026dc0:	d501      	bpl.n	8026dc6 <__swbuf_r+0x20>
 8026dc2:	6923      	ldr	r3, [r4, #16]
 8026dc4:	b943      	cbnz	r3, 8026dd8 <__swbuf_r+0x32>
 8026dc6:	4621      	mov	r1, r4
 8026dc8:	4628      	mov	r0, r5
 8026dca:	f000 f82b 	bl	8026e24 <__swsetup_r>
 8026dce:	b118      	cbz	r0, 8026dd8 <__swbuf_r+0x32>
 8026dd0:	f04f 37ff 	mov.w	r7, #4294967295
 8026dd4:	4638      	mov	r0, r7
 8026dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026dd8:	6823      	ldr	r3, [r4, #0]
 8026dda:	6922      	ldr	r2, [r4, #16]
 8026ddc:	1a98      	subs	r0, r3, r2
 8026dde:	6963      	ldr	r3, [r4, #20]
 8026de0:	b2f6      	uxtb	r6, r6
 8026de2:	4283      	cmp	r3, r0
 8026de4:	4637      	mov	r7, r6
 8026de6:	dc05      	bgt.n	8026df4 <__swbuf_r+0x4e>
 8026de8:	4621      	mov	r1, r4
 8026dea:	4628      	mov	r0, r5
 8026dec:	f000 fd1e 	bl	802782c <_fflush_r>
 8026df0:	2800      	cmp	r0, #0
 8026df2:	d1ed      	bne.n	8026dd0 <__swbuf_r+0x2a>
 8026df4:	68a3      	ldr	r3, [r4, #8]
 8026df6:	3b01      	subs	r3, #1
 8026df8:	60a3      	str	r3, [r4, #8]
 8026dfa:	6823      	ldr	r3, [r4, #0]
 8026dfc:	1c5a      	adds	r2, r3, #1
 8026dfe:	6022      	str	r2, [r4, #0]
 8026e00:	701e      	strb	r6, [r3, #0]
 8026e02:	6962      	ldr	r2, [r4, #20]
 8026e04:	1c43      	adds	r3, r0, #1
 8026e06:	429a      	cmp	r2, r3
 8026e08:	d004      	beq.n	8026e14 <__swbuf_r+0x6e>
 8026e0a:	89a3      	ldrh	r3, [r4, #12]
 8026e0c:	07db      	lsls	r3, r3, #31
 8026e0e:	d5e1      	bpl.n	8026dd4 <__swbuf_r+0x2e>
 8026e10:	2e0a      	cmp	r6, #10
 8026e12:	d1df      	bne.n	8026dd4 <__swbuf_r+0x2e>
 8026e14:	4621      	mov	r1, r4
 8026e16:	4628      	mov	r0, r5
 8026e18:	f000 fd08 	bl	802782c <_fflush_r>
 8026e1c:	2800      	cmp	r0, #0
 8026e1e:	d0d9      	beq.n	8026dd4 <__swbuf_r+0x2e>
 8026e20:	e7d6      	b.n	8026dd0 <__swbuf_r+0x2a>
	...

08026e24 <__swsetup_r>:
 8026e24:	b538      	push	{r3, r4, r5, lr}
 8026e26:	4b29      	ldr	r3, [pc, #164]	@ (8026ecc <__swsetup_r+0xa8>)
 8026e28:	4605      	mov	r5, r0
 8026e2a:	6818      	ldr	r0, [r3, #0]
 8026e2c:	460c      	mov	r4, r1
 8026e2e:	b118      	cbz	r0, 8026e38 <__swsetup_r+0x14>
 8026e30:	6a03      	ldr	r3, [r0, #32]
 8026e32:	b90b      	cbnz	r3, 8026e38 <__swsetup_r+0x14>
 8026e34:	f7ff fec6 	bl	8026bc4 <__sinit>
 8026e38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026e3c:	0719      	lsls	r1, r3, #28
 8026e3e:	d422      	bmi.n	8026e86 <__swsetup_r+0x62>
 8026e40:	06da      	lsls	r2, r3, #27
 8026e42:	d407      	bmi.n	8026e54 <__swsetup_r+0x30>
 8026e44:	2209      	movs	r2, #9
 8026e46:	602a      	str	r2, [r5, #0]
 8026e48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8026e4c:	81a3      	strh	r3, [r4, #12]
 8026e4e:	f04f 30ff 	mov.w	r0, #4294967295
 8026e52:	e033      	b.n	8026ebc <__swsetup_r+0x98>
 8026e54:	0758      	lsls	r0, r3, #29
 8026e56:	d512      	bpl.n	8026e7e <__swsetup_r+0x5a>
 8026e58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8026e5a:	b141      	cbz	r1, 8026e6e <__swsetup_r+0x4a>
 8026e5c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8026e60:	4299      	cmp	r1, r3
 8026e62:	d002      	beq.n	8026e6a <__swsetup_r+0x46>
 8026e64:	4628      	mov	r0, r5
 8026e66:	f000 f93b 	bl	80270e0 <_free_r>
 8026e6a:	2300      	movs	r3, #0
 8026e6c:	6363      	str	r3, [r4, #52]	@ 0x34
 8026e6e:	89a3      	ldrh	r3, [r4, #12]
 8026e70:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8026e74:	81a3      	strh	r3, [r4, #12]
 8026e76:	2300      	movs	r3, #0
 8026e78:	6063      	str	r3, [r4, #4]
 8026e7a:	6923      	ldr	r3, [r4, #16]
 8026e7c:	6023      	str	r3, [r4, #0]
 8026e7e:	89a3      	ldrh	r3, [r4, #12]
 8026e80:	f043 0308 	orr.w	r3, r3, #8
 8026e84:	81a3      	strh	r3, [r4, #12]
 8026e86:	6923      	ldr	r3, [r4, #16]
 8026e88:	b94b      	cbnz	r3, 8026e9e <__swsetup_r+0x7a>
 8026e8a:	89a3      	ldrh	r3, [r4, #12]
 8026e8c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8026e90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8026e94:	d003      	beq.n	8026e9e <__swsetup_r+0x7a>
 8026e96:	4621      	mov	r1, r4
 8026e98:	4628      	mov	r0, r5
 8026e9a:	f000 fd15 	bl	80278c8 <__smakebuf_r>
 8026e9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026ea2:	f013 0201 	ands.w	r2, r3, #1
 8026ea6:	d00a      	beq.n	8026ebe <__swsetup_r+0x9a>
 8026ea8:	2200      	movs	r2, #0
 8026eaa:	60a2      	str	r2, [r4, #8]
 8026eac:	6962      	ldr	r2, [r4, #20]
 8026eae:	4252      	negs	r2, r2
 8026eb0:	61a2      	str	r2, [r4, #24]
 8026eb2:	6922      	ldr	r2, [r4, #16]
 8026eb4:	b942      	cbnz	r2, 8026ec8 <__swsetup_r+0xa4>
 8026eb6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8026eba:	d1c5      	bne.n	8026e48 <__swsetup_r+0x24>
 8026ebc:	bd38      	pop	{r3, r4, r5, pc}
 8026ebe:	0799      	lsls	r1, r3, #30
 8026ec0:	bf58      	it	pl
 8026ec2:	6962      	ldrpl	r2, [r4, #20]
 8026ec4:	60a2      	str	r2, [r4, #8]
 8026ec6:	e7f4      	b.n	8026eb2 <__swsetup_r+0x8e>
 8026ec8:	2000      	movs	r0, #0
 8026eca:	e7f7      	b.n	8026ebc <__swsetup_r+0x98>
 8026ecc:	24000038 	.word	0x24000038

08026ed0 <memcmp>:
 8026ed0:	b510      	push	{r4, lr}
 8026ed2:	3901      	subs	r1, #1
 8026ed4:	4402      	add	r2, r0
 8026ed6:	4290      	cmp	r0, r2
 8026ed8:	d101      	bne.n	8026ede <memcmp+0xe>
 8026eda:	2000      	movs	r0, #0
 8026edc:	e005      	b.n	8026eea <memcmp+0x1a>
 8026ede:	7803      	ldrb	r3, [r0, #0]
 8026ee0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8026ee4:	42a3      	cmp	r3, r4
 8026ee6:	d001      	beq.n	8026eec <memcmp+0x1c>
 8026ee8:	1b18      	subs	r0, r3, r4
 8026eea:	bd10      	pop	{r4, pc}
 8026eec:	3001      	adds	r0, #1
 8026eee:	e7f2      	b.n	8026ed6 <memcmp+0x6>

08026ef0 <memmove>:
 8026ef0:	4288      	cmp	r0, r1
 8026ef2:	b510      	push	{r4, lr}
 8026ef4:	eb01 0402 	add.w	r4, r1, r2
 8026ef8:	d902      	bls.n	8026f00 <memmove+0x10>
 8026efa:	4284      	cmp	r4, r0
 8026efc:	4623      	mov	r3, r4
 8026efe:	d807      	bhi.n	8026f10 <memmove+0x20>
 8026f00:	1e43      	subs	r3, r0, #1
 8026f02:	42a1      	cmp	r1, r4
 8026f04:	d008      	beq.n	8026f18 <memmove+0x28>
 8026f06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8026f0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8026f0e:	e7f8      	b.n	8026f02 <memmove+0x12>
 8026f10:	4402      	add	r2, r0
 8026f12:	4601      	mov	r1, r0
 8026f14:	428a      	cmp	r2, r1
 8026f16:	d100      	bne.n	8026f1a <memmove+0x2a>
 8026f18:	bd10      	pop	{r4, pc}
 8026f1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8026f1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8026f22:	e7f7      	b.n	8026f14 <memmove+0x24>

08026f24 <memset>:
 8026f24:	4402      	add	r2, r0
 8026f26:	4603      	mov	r3, r0
 8026f28:	4293      	cmp	r3, r2
 8026f2a:	d100      	bne.n	8026f2e <memset+0xa>
 8026f2c:	4770      	bx	lr
 8026f2e:	f803 1b01 	strb.w	r1, [r3], #1
 8026f32:	e7f9      	b.n	8026f28 <memset+0x4>

08026f34 <_raise_r>:
 8026f34:	291f      	cmp	r1, #31
 8026f36:	b538      	push	{r3, r4, r5, lr}
 8026f38:	4605      	mov	r5, r0
 8026f3a:	460c      	mov	r4, r1
 8026f3c:	d904      	bls.n	8026f48 <_raise_r+0x14>
 8026f3e:	2316      	movs	r3, #22
 8026f40:	6003      	str	r3, [r0, #0]
 8026f42:	f04f 30ff 	mov.w	r0, #4294967295
 8026f46:	bd38      	pop	{r3, r4, r5, pc}
 8026f48:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8026f4a:	b112      	cbz	r2, 8026f52 <_raise_r+0x1e>
 8026f4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8026f50:	b94b      	cbnz	r3, 8026f66 <_raise_r+0x32>
 8026f52:	4628      	mov	r0, r5
 8026f54:	f000 f864 	bl	8027020 <_getpid_r>
 8026f58:	4622      	mov	r2, r4
 8026f5a:	4601      	mov	r1, r0
 8026f5c:	4628      	mov	r0, r5
 8026f5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8026f62:	f000 b84b 	b.w	8026ffc <_kill_r>
 8026f66:	2b01      	cmp	r3, #1
 8026f68:	d00a      	beq.n	8026f80 <_raise_r+0x4c>
 8026f6a:	1c59      	adds	r1, r3, #1
 8026f6c:	d103      	bne.n	8026f76 <_raise_r+0x42>
 8026f6e:	2316      	movs	r3, #22
 8026f70:	6003      	str	r3, [r0, #0]
 8026f72:	2001      	movs	r0, #1
 8026f74:	e7e7      	b.n	8026f46 <_raise_r+0x12>
 8026f76:	2100      	movs	r1, #0
 8026f78:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8026f7c:	4620      	mov	r0, r4
 8026f7e:	4798      	blx	r3
 8026f80:	2000      	movs	r0, #0
 8026f82:	e7e0      	b.n	8026f46 <_raise_r+0x12>

08026f84 <raise>:
 8026f84:	4b02      	ldr	r3, [pc, #8]	@ (8026f90 <raise+0xc>)
 8026f86:	4601      	mov	r1, r0
 8026f88:	6818      	ldr	r0, [r3, #0]
 8026f8a:	f7ff bfd3 	b.w	8026f34 <_raise_r>
 8026f8e:	bf00      	nop
 8026f90:	24000038 	.word	0x24000038

08026f94 <_close_r>:
 8026f94:	b538      	push	{r3, r4, r5, lr}
 8026f96:	4d06      	ldr	r5, [pc, #24]	@ (8026fb0 <_close_r+0x1c>)
 8026f98:	2300      	movs	r3, #0
 8026f9a:	4604      	mov	r4, r0
 8026f9c:	4608      	mov	r0, r1
 8026f9e:	602b      	str	r3, [r5, #0]
 8026fa0:	f7e6 fea6 	bl	800dcf0 <_close>
 8026fa4:	1c43      	adds	r3, r0, #1
 8026fa6:	d102      	bne.n	8026fae <_close_r+0x1a>
 8026fa8:	682b      	ldr	r3, [r5, #0]
 8026faa:	b103      	cbz	r3, 8026fae <_close_r+0x1a>
 8026fac:	6023      	str	r3, [r4, #0]
 8026fae:	bd38      	pop	{r3, r4, r5, pc}
 8026fb0:	24000c04 	.word	0x24000c04

08026fb4 <_lseek_r>:
 8026fb4:	b538      	push	{r3, r4, r5, lr}
 8026fb6:	4d07      	ldr	r5, [pc, #28]	@ (8026fd4 <_lseek_r+0x20>)
 8026fb8:	4604      	mov	r4, r0
 8026fba:	4608      	mov	r0, r1
 8026fbc:	4611      	mov	r1, r2
 8026fbe:	2200      	movs	r2, #0
 8026fc0:	602a      	str	r2, [r5, #0]
 8026fc2:	461a      	mov	r2, r3
 8026fc4:	f7e6 febb 	bl	800dd3e <_lseek>
 8026fc8:	1c43      	adds	r3, r0, #1
 8026fca:	d102      	bne.n	8026fd2 <_lseek_r+0x1e>
 8026fcc:	682b      	ldr	r3, [r5, #0]
 8026fce:	b103      	cbz	r3, 8026fd2 <_lseek_r+0x1e>
 8026fd0:	6023      	str	r3, [r4, #0]
 8026fd2:	bd38      	pop	{r3, r4, r5, pc}
 8026fd4:	24000c04 	.word	0x24000c04

08026fd8 <_read_r>:
 8026fd8:	b538      	push	{r3, r4, r5, lr}
 8026fda:	4d07      	ldr	r5, [pc, #28]	@ (8026ff8 <_read_r+0x20>)
 8026fdc:	4604      	mov	r4, r0
 8026fde:	4608      	mov	r0, r1
 8026fe0:	4611      	mov	r1, r2
 8026fe2:	2200      	movs	r2, #0
 8026fe4:	602a      	str	r2, [r5, #0]
 8026fe6:	461a      	mov	r2, r3
 8026fe8:	f7e6 fe49 	bl	800dc7e <_read>
 8026fec:	1c43      	adds	r3, r0, #1
 8026fee:	d102      	bne.n	8026ff6 <_read_r+0x1e>
 8026ff0:	682b      	ldr	r3, [r5, #0]
 8026ff2:	b103      	cbz	r3, 8026ff6 <_read_r+0x1e>
 8026ff4:	6023      	str	r3, [r4, #0]
 8026ff6:	bd38      	pop	{r3, r4, r5, pc}
 8026ff8:	24000c04 	.word	0x24000c04

08026ffc <_kill_r>:
 8026ffc:	b538      	push	{r3, r4, r5, lr}
 8026ffe:	4d07      	ldr	r5, [pc, #28]	@ (802701c <_kill_r+0x20>)
 8027000:	2300      	movs	r3, #0
 8027002:	4604      	mov	r4, r0
 8027004:	4608      	mov	r0, r1
 8027006:	4611      	mov	r1, r2
 8027008:	602b      	str	r3, [r5, #0]
 802700a:	f7e6 fe1d 	bl	800dc48 <_kill>
 802700e:	1c43      	adds	r3, r0, #1
 8027010:	d102      	bne.n	8027018 <_kill_r+0x1c>
 8027012:	682b      	ldr	r3, [r5, #0]
 8027014:	b103      	cbz	r3, 8027018 <_kill_r+0x1c>
 8027016:	6023      	str	r3, [r4, #0]
 8027018:	bd38      	pop	{r3, r4, r5, pc}
 802701a:	bf00      	nop
 802701c:	24000c04 	.word	0x24000c04

08027020 <_getpid_r>:
 8027020:	f7e6 be0a 	b.w	800dc38 <_getpid>

08027024 <_sbrk_r>:
 8027024:	b538      	push	{r3, r4, r5, lr}
 8027026:	4d06      	ldr	r5, [pc, #24]	@ (8027040 <_sbrk_r+0x1c>)
 8027028:	2300      	movs	r3, #0
 802702a:	4604      	mov	r4, r0
 802702c:	4608      	mov	r0, r1
 802702e:	602b      	str	r3, [r5, #0]
 8027030:	f7e6 fe92 	bl	800dd58 <_sbrk>
 8027034:	1c43      	adds	r3, r0, #1
 8027036:	d102      	bne.n	802703e <_sbrk_r+0x1a>
 8027038:	682b      	ldr	r3, [r5, #0]
 802703a:	b103      	cbz	r3, 802703e <_sbrk_r+0x1a>
 802703c:	6023      	str	r3, [r4, #0]
 802703e:	bd38      	pop	{r3, r4, r5, pc}
 8027040:	24000c04 	.word	0x24000c04

08027044 <_write_r>:
 8027044:	b538      	push	{r3, r4, r5, lr}
 8027046:	4d07      	ldr	r5, [pc, #28]	@ (8027064 <_write_r+0x20>)
 8027048:	4604      	mov	r4, r0
 802704a:	4608      	mov	r0, r1
 802704c:	4611      	mov	r1, r2
 802704e:	2200      	movs	r2, #0
 8027050:	602a      	str	r2, [r5, #0]
 8027052:	461a      	mov	r2, r3
 8027054:	f7e6 fe30 	bl	800dcb8 <_write>
 8027058:	1c43      	adds	r3, r0, #1
 802705a:	d102      	bne.n	8027062 <_write_r+0x1e>
 802705c:	682b      	ldr	r3, [r5, #0]
 802705e:	b103      	cbz	r3, 8027062 <_write_r+0x1e>
 8027060:	6023      	str	r3, [r4, #0]
 8027062:	bd38      	pop	{r3, r4, r5, pc}
 8027064:	24000c04 	.word	0x24000c04

08027068 <__errno>:
 8027068:	4b01      	ldr	r3, [pc, #4]	@ (8027070 <__errno+0x8>)
 802706a:	6818      	ldr	r0, [r3, #0]
 802706c:	4770      	bx	lr
 802706e:	bf00      	nop
 8027070:	24000038 	.word	0x24000038

08027074 <__libc_init_array>:
 8027074:	b570      	push	{r4, r5, r6, lr}
 8027076:	4d0d      	ldr	r5, [pc, #52]	@ (80270ac <__libc_init_array+0x38>)
 8027078:	4c0d      	ldr	r4, [pc, #52]	@ (80270b0 <__libc_init_array+0x3c>)
 802707a:	1b64      	subs	r4, r4, r5
 802707c:	10a4      	asrs	r4, r4, #2
 802707e:	2600      	movs	r6, #0
 8027080:	42a6      	cmp	r6, r4
 8027082:	d109      	bne.n	8027098 <__libc_init_array+0x24>
 8027084:	4d0b      	ldr	r5, [pc, #44]	@ (80270b4 <__libc_init_array+0x40>)
 8027086:	4c0c      	ldr	r4, [pc, #48]	@ (80270b8 <__libc_init_array+0x44>)
 8027088:	f000 fcb0 	bl	80279ec <_init>
 802708c:	1b64      	subs	r4, r4, r5
 802708e:	10a4      	asrs	r4, r4, #2
 8027090:	2600      	movs	r6, #0
 8027092:	42a6      	cmp	r6, r4
 8027094:	d105      	bne.n	80270a2 <__libc_init_array+0x2e>
 8027096:	bd70      	pop	{r4, r5, r6, pc}
 8027098:	f855 3b04 	ldr.w	r3, [r5], #4
 802709c:	4798      	blx	r3
 802709e:	3601      	adds	r6, #1
 80270a0:	e7ee      	b.n	8027080 <__libc_init_array+0xc>
 80270a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80270a6:	4798      	blx	r3
 80270a8:	3601      	adds	r6, #1
 80270aa:	e7f2      	b.n	8027092 <__libc_init_array+0x1e>
 80270ac:	08029014 	.word	0x08029014
 80270b0:	08029014 	.word	0x08029014
 80270b4:	08029014 	.word	0x08029014
 80270b8:	08029020 	.word	0x08029020

080270bc <__retarget_lock_init_recursive>:
 80270bc:	4770      	bx	lr

080270be <__retarget_lock_acquire_recursive>:
 80270be:	4770      	bx	lr

080270c0 <__retarget_lock_release_recursive>:
 80270c0:	4770      	bx	lr

080270c2 <memcpy>:
 80270c2:	440a      	add	r2, r1
 80270c4:	4291      	cmp	r1, r2
 80270c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80270ca:	d100      	bne.n	80270ce <memcpy+0xc>
 80270cc:	4770      	bx	lr
 80270ce:	b510      	push	{r4, lr}
 80270d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80270d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80270d8:	4291      	cmp	r1, r2
 80270da:	d1f9      	bne.n	80270d0 <memcpy+0xe>
 80270dc:	bd10      	pop	{r4, pc}
	...

080270e0 <_free_r>:
 80270e0:	b538      	push	{r3, r4, r5, lr}
 80270e2:	4605      	mov	r5, r0
 80270e4:	2900      	cmp	r1, #0
 80270e6:	d041      	beq.n	802716c <_free_r+0x8c>
 80270e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80270ec:	1f0c      	subs	r4, r1, #4
 80270ee:	2b00      	cmp	r3, #0
 80270f0:	bfb8      	it	lt
 80270f2:	18e4      	addlt	r4, r4, r3
 80270f4:	f7ff fc14 	bl	8026920 <__malloc_lock>
 80270f8:	4a1d      	ldr	r2, [pc, #116]	@ (8027170 <_free_r+0x90>)
 80270fa:	6813      	ldr	r3, [r2, #0]
 80270fc:	b933      	cbnz	r3, 802710c <_free_r+0x2c>
 80270fe:	6063      	str	r3, [r4, #4]
 8027100:	6014      	str	r4, [r2, #0]
 8027102:	4628      	mov	r0, r5
 8027104:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8027108:	f7ff bc10 	b.w	802692c <__malloc_unlock>
 802710c:	42a3      	cmp	r3, r4
 802710e:	d908      	bls.n	8027122 <_free_r+0x42>
 8027110:	6820      	ldr	r0, [r4, #0]
 8027112:	1821      	adds	r1, r4, r0
 8027114:	428b      	cmp	r3, r1
 8027116:	bf01      	itttt	eq
 8027118:	6819      	ldreq	r1, [r3, #0]
 802711a:	685b      	ldreq	r3, [r3, #4]
 802711c:	1809      	addeq	r1, r1, r0
 802711e:	6021      	streq	r1, [r4, #0]
 8027120:	e7ed      	b.n	80270fe <_free_r+0x1e>
 8027122:	461a      	mov	r2, r3
 8027124:	685b      	ldr	r3, [r3, #4]
 8027126:	b10b      	cbz	r3, 802712c <_free_r+0x4c>
 8027128:	42a3      	cmp	r3, r4
 802712a:	d9fa      	bls.n	8027122 <_free_r+0x42>
 802712c:	6811      	ldr	r1, [r2, #0]
 802712e:	1850      	adds	r0, r2, r1
 8027130:	42a0      	cmp	r0, r4
 8027132:	d10b      	bne.n	802714c <_free_r+0x6c>
 8027134:	6820      	ldr	r0, [r4, #0]
 8027136:	4401      	add	r1, r0
 8027138:	1850      	adds	r0, r2, r1
 802713a:	4283      	cmp	r3, r0
 802713c:	6011      	str	r1, [r2, #0]
 802713e:	d1e0      	bne.n	8027102 <_free_r+0x22>
 8027140:	6818      	ldr	r0, [r3, #0]
 8027142:	685b      	ldr	r3, [r3, #4]
 8027144:	6053      	str	r3, [r2, #4]
 8027146:	4408      	add	r0, r1
 8027148:	6010      	str	r0, [r2, #0]
 802714a:	e7da      	b.n	8027102 <_free_r+0x22>
 802714c:	d902      	bls.n	8027154 <_free_r+0x74>
 802714e:	230c      	movs	r3, #12
 8027150:	602b      	str	r3, [r5, #0]
 8027152:	e7d6      	b.n	8027102 <_free_r+0x22>
 8027154:	6820      	ldr	r0, [r4, #0]
 8027156:	1821      	adds	r1, r4, r0
 8027158:	428b      	cmp	r3, r1
 802715a:	bf04      	itt	eq
 802715c:	6819      	ldreq	r1, [r3, #0]
 802715e:	685b      	ldreq	r3, [r3, #4]
 8027160:	6063      	str	r3, [r4, #4]
 8027162:	bf04      	itt	eq
 8027164:	1809      	addeq	r1, r1, r0
 8027166:	6021      	streq	r1, [r4, #0]
 8027168:	6054      	str	r4, [r2, #4]
 802716a:	e7ca      	b.n	8027102 <_free_r+0x22>
 802716c:	bd38      	pop	{r3, r4, r5, pc}
 802716e:	bf00      	nop
 8027170:	24000ac4 	.word	0x24000ac4

08027174 <_malloc_usable_size_r>:
 8027174:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8027178:	1f18      	subs	r0, r3, #4
 802717a:	2b00      	cmp	r3, #0
 802717c:	bfbc      	itt	lt
 802717e:	580b      	ldrlt	r3, [r1, r0]
 8027180:	18c0      	addlt	r0, r0, r3
 8027182:	4770      	bx	lr

08027184 <__sfputc_r>:
 8027184:	6893      	ldr	r3, [r2, #8]
 8027186:	3b01      	subs	r3, #1
 8027188:	2b00      	cmp	r3, #0
 802718a:	b410      	push	{r4}
 802718c:	6093      	str	r3, [r2, #8]
 802718e:	da08      	bge.n	80271a2 <__sfputc_r+0x1e>
 8027190:	6994      	ldr	r4, [r2, #24]
 8027192:	42a3      	cmp	r3, r4
 8027194:	db01      	blt.n	802719a <__sfputc_r+0x16>
 8027196:	290a      	cmp	r1, #10
 8027198:	d103      	bne.n	80271a2 <__sfputc_r+0x1e>
 802719a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802719e:	f7ff be02 	b.w	8026da6 <__swbuf_r>
 80271a2:	6813      	ldr	r3, [r2, #0]
 80271a4:	1c58      	adds	r0, r3, #1
 80271a6:	6010      	str	r0, [r2, #0]
 80271a8:	7019      	strb	r1, [r3, #0]
 80271aa:	4608      	mov	r0, r1
 80271ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80271b0:	4770      	bx	lr

080271b2 <__sfputs_r>:
 80271b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80271b4:	4606      	mov	r6, r0
 80271b6:	460f      	mov	r7, r1
 80271b8:	4614      	mov	r4, r2
 80271ba:	18d5      	adds	r5, r2, r3
 80271bc:	42ac      	cmp	r4, r5
 80271be:	d101      	bne.n	80271c4 <__sfputs_r+0x12>
 80271c0:	2000      	movs	r0, #0
 80271c2:	e007      	b.n	80271d4 <__sfputs_r+0x22>
 80271c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80271c8:	463a      	mov	r2, r7
 80271ca:	4630      	mov	r0, r6
 80271cc:	f7ff ffda 	bl	8027184 <__sfputc_r>
 80271d0:	1c43      	adds	r3, r0, #1
 80271d2:	d1f3      	bne.n	80271bc <__sfputs_r+0xa>
 80271d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080271d8 <_vfiprintf_r>:
 80271d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80271dc:	460d      	mov	r5, r1
 80271de:	b09d      	sub	sp, #116	@ 0x74
 80271e0:	4614      	mov	r4, r2
 80271e2:	4698      	mov	r8, r3
 80271e4:	4606      	mov	r6, r0
 80271e6:	b118      	cbz	r0, 80271f0 <_vfiprintf_r+0x18>
 80271e8:	6a03      	ldr	r3, [r0, #32]
 80271ea:	b90b      	cbnz	r3, 80271f0 <_vfiprintf_r+0x18>
 80271ec:	f7ff fcea 	bl	8026bc4 <__sinit>
 80271f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80271f2:	07d9      	lsls	r1, r3, #31
 80271f4:	d405      	bmi.n	8027202 <_vfiprintf_r+0x2a>
 80271f6:	89ab      	ldrh	r3, [r5, #12]
 80271f8:	059a      	lsls	r2, r3, #22
 80271fa:	d402      	bmi.n	8027202 <_vfiprintf_r+0x2a>
 80271fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80271fe:	f7ff ff5e 	bl	80270be <__retarget_lock_acquire_recursive>
 8027202:	89ab      	ldrh	r3, [r5, #12]
 8027204:	071b      	lsls	r3, r3, #28
 8027206:	d501      	bpl.n	802720c <_vfiprintf_r+0x34>
 8027208:	692b      	ldr	r3, [r5, #16]
 802720a:	b99b      	cbnz	r3, 8027234 <_vfiprintf_r+0x5c>
 802720c:	4629      	mov	r1, r5
 802720e:	4630      	mov	r0, r6
 8027210:	f7ff fe08 	bl	8026e24 <__swsetup_r>
 8027214:	b170      	cbz	r0, 8027234 <_vfiprintf_r+0x5c>
 8027216:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8027218:	07dc      	lsls	r4, r3, #31
 802721a:	d504      	bpl.n	8027226 <_vfiprintf_r+0x4e>
 802721c:	f04f 30ff 	mov.w	r0, #4294967295
 8027220:	b01d      	add	sp, #116	@ 0x74
 8027222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027226:	89ab      	ldrh	r3, [r5, #12]
 8027228:	0598      	lsls	r0, r3, #22
 802722a:	d4f7      	bmi.n	802721c <_vfiprintf_r+0x44>
 802722c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802722e:	f7ff ff47 	bl	80270c0 <__retarget_lock_release_recursive>
 8027232:	e7f3      	b.n	802721c <_vfiprintf_r+0x44>
 8027234:	2300      	movs	r3, #0
 8027236:	9309      	str	r3, [sp, #36]	@ 0x24
 8027238:	2320      	movs	r3, #32
 802723a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802723e:	f8cd 800c 	str.w	r8, [sp, #12]
 8027242:	2330      	movs	r3, #48	@ 0x30
 8027244:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80273f4 <_vfiprintf_r+0x21c>
 8027248:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802724c:	f04f 0901 	mov.w	r9, #1
 8027250:	4623      	mov	r3, r4
 8027252:	469a      	mov	sl, r3
 8027254:	f813 2b01 	ldrb.w	r2, [r3], #1
 8027258:	b10a      	cbz	r2, 802725e <_vfiprintf_r+0x86>
 802725a:	2a25      	cmp	r2, #37	@ 0x25
 802725c:	d1f9      	bne.n	8027252 <_vfiprintf_r+0x7a>
 802725e:	ebba 0b04 	subs.w	fp, sl, r4
 8027262:	d00b      	beq.n	802727c <_vfiprintf_r+0xa4>
 8027264:	465b      	mov	r3, fp
 8027266:	4622      	mov	r2, r4
 8027268:	4629      	mov	r1, r5
 802726a:	4630      	mov	r0, r6
 802726c:	f7ff ffa1 	bl	80271b2 <__sfputs_r>
 8027270:	3001      	adds	r0, #1
 8027272:	f000 80a7 	beq.w	80273c4 <_vfiprintf_r+0x1ec>
 8027276:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8027278:	445a      	add	r2, fp
 802727a:	9209      	str	r2, [sp, #36]	@ 0x24
 802727c:	f89a 3000 	ldrb.w	r3, [sl]
 8027280:	2b00      	cmp	r3, #0
 8027282:	f000 809f 	beq.w	80273c4 <_vfiprintf_r+0x1ec>
 8027286:	2300      	movs	r3, #0
 8027288:	f04f 32ff 	mov.w	r2, #4294967295
 802728c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8027290:	f10a 0a01 	add.w	sl, sl, #1
 8027294:	9304      	str	r3, [sp, #16]
 8027296:	9307      	str	r3, [sp, #28]
 8027298:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802729c:	931a      	str	r3, [sp, #104]	@ 0x68
 802729e:	4654      	mov	r4, sl
 80272a0:	2205      	movs	r2, #5
 80272a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80272a6:	4853      	ldr	r0, [pc, #332]	@ (80273f4 <_vfiprintf_r+0x21c>)
 80272a8:	f7d9 f82a 	bl	8000300 <memchr>
 80272ac:	9a04      	ldr	r2, [sp, #16]
 80272ae:	b9d8      	cbnz	r0, 80272e8 <_vfiprintf_r+0x110>
 80272b0:	06d1      	lsls	r1, r2, #27
 80272b2:	bf44      	itt	mi
 80272b4:	2320      	movmi	r3, #32
 80272b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80272ba:	0713      	lsls	r3, r2, #28
 80272bc:	bf44      	itt	mi
 80272be:	232b      	movmi	r3, #43	@ 0x2b
 80272c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80272c4:	f89a 3000 	ldrb.w	r3, [sl]
 80272c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80272ca:	d015      	beq.n	80272f8 <_vfiprintf_r+0x120>
 80272cc:	9a07      	ldr	r2, [sp, #28]
 80272ce:	4654      	mov	r4, sl
 80272d0:	2000      	movs	r0, #0
 80272d2:	f04f 0c0a 	mov.w	ip, #10
 80272d6:	4621      	mov	r1, r4
 80272d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80272dc:	3b30      	subs	r3, #48	@ 0x30
 80272de:	2b09      	cmp	r3, #9
 80272e0:	d94b      	bls.n	802737a <_vfiprintf_r+0x1a2>
 80272e2:	b1b0      	cbz	r0, 8027312 <_vfiprintf_r+0x13a>
 80272e4:	9207      	str	r2, [sp, #28]
 80272e6:	e014      	b.n	8027312 <_vfiprintf_r+0x13a>
 80272e8:	eba0 0308 	sub.w	r3, r0, r8
 80272ec:	fa09 f303 	lsl.w	r3, r9, r3
 80272f0:	4313      	orrs	r3, r2
 80272f2:	9304      	str	r3, [sp, #16]
 80272f4:	46a2      	mov	sl, r4
 80272f6:	e7d2      	b.n	802729e <_vfiprintf_r+0xc6>
 80272f8:	9b03      	ldr	r3, [sp, #12]
 80272fa:	1d19      	adds	r1, r3, #4
 80272fc:	681b      	ldr	r3, [r3, #0]
 80272fe:	9103      	str	r1, [sp, #12]
 8027300:	2b00      	cmp	r3, #0
 8027302:	bfbb      	ittet	lt
 8027304:	425b      	neglt	r3, r3
 8027306:	f042 0202 	orrlt.w	r2, r2, #2
 802730a:	9307      	strge	r3, [sp, #28]
 802730c:	9307      	strlt	r3, [sp, #28]
 802730e:	bfb8      	it	lt
 8027310:	9204      	strlt	r2, [sp, #16]
 8027312:	7823      	ldrb	r3, [r4, #0]
 8027314:	2b2e      	cmp	r3, #46	@ 0x2e
 8027316:	d10a      	bne.n	802732e <_vfiprintf_r+0x156>
 8027318:	7863      	ldrb	r3, [r4, #1]
 802731a:	2b2a      	cmp	r3, #42	@ 0x2a
 802731c:	d132      	bne.n	8027384 <_vfiprintf_r+0x1ac>
 802731e:	9b03      	ldr	r3, [sp, #12]
 8027320:	1d1a      	adds	r2, r3, #4
 8027322:	681b      	ldr	r3, [r3, #0]
 8027324:	9203      	str	r2, [sp, #12]
 8027326:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802732a:	3402      	adds	r4, #2
 802732c:	9305      	str	r3, [sp, #20]
 802732e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8027404 <_vfiprintf_r+0x22c>
 8027332:	7821      	ldrb	r1, [r4, #0]
 8027334:	2203      	movs	r2, #3
 8027336:	4650      	mov	r0, sl
 8027338:	f7d8 ffe2 	bl	8000300 <memchr>
 802733c:	b138      	cbz	r0, 802734e <_vfiprintf_r+0x176>
 802733e:	9b04      	ldr	r3, [sp, #16]
 8027340:	eba0 000a 	sub.w	r0, r0, sl
 8027344:	2240      	movs	r2, #64	@ 0x40
 8027346:	4082      	lsls	r2, r0
 8027348:	4313      	orrs	r3, r2
 802734a:	3401      	adds	r4, #1
 802734c:	9304      	str	r3, [sp, #16]
 802734e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027352:	4829      	ldr	r0, [pc, #164]	@ (80273f8 <_vfiprintf_r+0x220>)
 8027354:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8027358:	2206      	movs	r2, #6
 802735a:	f7d8 ffd1 	bl	8000300 <memchr>
 802735e:	2800      	cmp	r0, #0
 8027360:	d03f      	beq.n	80273e2 <_vfiprintf_r+0x20a>
 8027362:	4b26      	ldr	r3, [pc, #152]	@ (80273fc <_vfiprintf_r+0x224>)
 8027364:	bb1b      	cbnz	r3, 80273ae <_vfiprintf_r+0x1d6>
 8027366:	9b03      	ldr	r3, [sp, #12]
 8027368:	3307      	adds	r3, #7
 802736a:	f023 0307 	bic.w	r3, r3, #7
 802736e:	3308      	adds	r3, #8
 8027370:	9303      	str	r3, [sp, #12]
 8027372:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027374:	443b      	add	r3, r7
 8027376:	9309      	str	r3, [sp, #36]	@ 0x24
 8027378:	e76a      	b.n	8027250 <_vfiprintf_r+0x78>
 802737a:	fb0c 3202 	mla	r2, ip, r2, r3
 802737e:	460c      	mov	r4, r1
 8027380:	2001      	movs	r0, #1
 8027382:	e7a8      	b.n	80272d6 <_vfiprintf_r+0xfe>
 8027384:	2300      	movs	r3, #0
 8027386:	3401      	adds	r4, #1
 8027388:	9305      	str	r3, [sp, #20]
 802738a:	4619      	mov	r1, r3
 802738c:	f04f 0c0a 	mov.w	ip, #10
 8027390:	4620      	mov	r0, r4
 8027392:	f810 2b01 	ldrb.w	r2, [r0], #1
 8027396:	3a30      	subs	r2, #48	@ 0x30
 8027398:	2a09      	cmp	r2, #9
 802739a:	d903      	bls.n	80273a4 <_vfiprintf_r+0x1cc>
 802739c:	2b00      	cmp	r3, #0
 802739e:	d0c6      	beq.n	802732e <_vfiprintf_r+0x156>
 80273a0:	9105      	str	r1, [sp, #20]
 80273a2:	e7c4      	b.n	802732e <_vfiprintf_r+0x156>
 80273a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80273a8:	4604      	mov	r4, r0
 80273aa:	2301      	movs	r3, #1
 80273ac:	e7f0      	b.n	8027390 <_vfiprintf_r+0x1b8>
 80273ae:	ab03      	add	r3, sp, #12
 80273b0:	9300      	str	r3, [sp, #0]
 80273b2:	462a      	mov	r2, r5
 80273b4:	4b12      	ldr	r3, [pc, #72]	@ (8027400 <_vfiprintf_r+0x228>)
 80273b6:	a904      	add	r1, sp, #16
 80273b8:	4630      	mov	r0, r6
 80273ba:	f3af 8000 	nop.w
 80273be:	4607      	mov	r7, r0
 80273c0:	1c78      	adds	r0, r7, #1
 80273c2:	d1d6      	bne.n	8027372 <_vfiprintf_r+0x19a>
 80273c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80273c6:	07d9      	lsls	r1, r3, #31
 80273c8:	d405      	bmi.n	80273d6 <_vfiprintf_r+0x1fe>
 80273ca:	89ab      	ldrh	r3, [r5, #12]
 80273cc:	059a      	lsls	r2, r3, #22
 80273ce:	d402      	bmi.n	80273d6 <_vfiprintf_r+0x1fe>
 80273d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80273d2:	f7ff fe75 	bl	80270c0 <__retarget_lock_release_recursive>
 80273d6:	89ab      	ldrh	r3, [r5, #12]
 80273d8:	065b      	lsls	r3, r3, #25
 80273da:	f53f af1f 	bmi.w	802721c <_vfiprintf_r+0x44>
 80273de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80273e0:	e71e      	b.n	8027220 <_vfiprintf_r+0x48>
 80273e2:	ab03      	add	r3, sp, #12
 80273e4:	9300      	str	r3, [sp, #0]
 80273e6:	462a      	mov	r2, r5
 80273e8:	4b05      	ldr	r3, [pc, #20]	@ (8027400 <_vfiprintf_r+0x228>)
 80273ea:	a904      	add	r1, sp, #16
 80273ec:	4630      	mov	r0, r6
 80273ee:	f000 f879 	bl	80274e4 <_printf_i>
 80273f2:	e7e4      	b.n	80273be <_vfiprintf_r+0x1e6>
 80273f4:	08028fd9 	.word	0x08028fd9
 80273f8:	08028fe3 	.word	0x08028fe3
 80273fc:	00000000 	.word	0x00000000
 8027400:	080271b3 	.word	0x080271b3
 8027404:	08028fdf 	.word	0x08028fdf

08027408 <_printf_common>:
 8027408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802740c:	4616      	mov	r6, r2
 802740e:	4698      	mov	r8, r3
 8027410:	688a      	ldr	r2, [r1, #8]
 8027412:	690b      	ldr	r3, [r1, #16]
 8027414:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8027418:	4293      	cmp	r3, r2
 802741a:	bfb8      	it	lt
 802741c:	4613      	movlt	r3, r2
 802741e:	6033      	str	r3, [r6, #0]
 8027420:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8027424:	4607      	mov	r7, r0
 8027426:	460c      	mov	r4, r1
 8027428:	b10a      	cbz	r2, 802742e <_printf_common+0x26>
 802742a:	3301      	adds	r3, #1
 802742c:	6033      	str	r3, [r6, #0]
 802742e:	6823      	ldr	r3, [r4, #0]
 8027430:	0699      	lsls	r1, r3, #26
 8027432:	bf42      	ittt	mi
 8027434:	6833      	ldrmi	r3, [r6, #0]
 8027436:	3302      	addmi	r3, #2
 8027438:	6033      	strmi	r3, [r6, #0]
 802743a:	6825      	ldr	r5, [r4, #0]
 802743c:	f015 0506 	ands.w	r5, r5, #6
 8027440:	d106      	bne.n	8027450 <_printf_common+0x48>
 8027442:	f104 0a19 	add.w	sl, r4, #25
 8027446:	68e3      	ldr	r3, [r4, #12]
 8027448:	6832      	ldr	r2, [r6, #0]
 802744a:	1a9b      	subs	r3, r3, r2
 802744c:	42ab      	cmp	r3, r5
 802744e:	dc26      	bgt.n	802749e <_printf_common+0x96>
 8027450:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8027454:	6822      	ldr	r2, [r4, #0]
 8027456:	3b00      	subs	r3, #0
 8027458:	bf18      	it	ne
 802745a:	2301      	movne	r3, #1
 802745c:	0692      	lsls	r2, r2, #26
 802745e:	d42b      	bmi.n	80274b8 <_printf_common+0xb0>
 8027460:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8027464:	4641      	mov	r1, r8
 8027466:	4638      	mov	r0, r7
 8027468:	47c8      	blx	r9
 802746a:	3001      	adds	r0, #1
 802746c:	d01e      	beq.n	80274ac <_printf_common+0xa4>
 802746e:	6823      	ldr	r3, [r4, #0]
 8027470:	6922      	ldr	r2, [r4, #16]
 8027472:	f003 0306 	and.w	r3, r3, #6
 8027476:	2b04      	cmp	r3, #4
 8027478:	bf02      	ittt	eq
 802747a:	68e5      	ldreq	r5, [r4, #12]
 802747c:	6833      	ldreq	r3, [r6, #0]
 802747e:	1aed      	subeq	r5, r5, r3
 8027480:	68a3      	ldr	r3, [r4, #8]
 8027482:	bf0c      	ite	eq
 8027484:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8027488:	2500      	movne	r5, #0
 802748a:	4293      	cmp	r3, r2
 802748c:	bfc4      	itt	gt
 802748e:	1a9b      	subgt	r3, r3, r2
 8027490:	18ed      	addgt	r5, r5, r3
 8027492:	2600      	movs	r6, #0
 8027494:	341a      	adds	r4, #26
 8027496:	42b5      	cmp	r5, r6
 8027498:	d11a      	bne.n	80274d0 <_printf_common+0xc8>
 802749a:	2000      	movs	r0, #0
 802749c:	e008      	b.n	80274b0 <_printf_common+0xa8>
 802749e:	2301      	movs	r3, #1
 80274a0:	4652      	mov	r2, sl
 80274a2:	4641      	mov	r1, r8
 80274a4:	4638      	mov	r0, r7
 80274a6:	47c8      	blx	r9
 80274a8:	3001      	adds	r0, #1
 80274aa:	d103      	bne.n	80274b4 <_printf_common+0xac>
 80274ac:	f04f 30ff 	mov.w	r0, #4294967295
 80274b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80274b4:	3501      	adds	r5, #1
 80274b6:	e7c6      	b.n	8027446 <_printf_common+0x3e>
 80274b8:	18e1      	adds	r1, r4, r3
 80274ba:	1c5a      	adds	r2, r3, #1
 80274bc:	2030      	movs	r0, #48	@ 0x30
 80274be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80274c2:	4422      	add	r2, r4
 80274c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80274c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80274cc:	3302      	adds	r3, #2
 80274ce:	e7c7      	b.n	8027460 <_printf_common+0x58>
 80274d0:	2301      	movs	r3, #1
 80274d2:	4622      	mov	r2, r4
 80274d4:	4641      	mov	r1, r8
 80274d6:	4638      	mov	r0, r7
 80274d8:	47c8      	blx	r9
 80274da:	3001      	adds	r0, #1
 80274dc:	d0e6      	beq.n	80274ac <_printf_common+0xa4>
 80274de:	3601      	adds	r6, #1
 80274e0:	e7d9      	b.n	8027496 <_printf_common+0x8e>
	...

080274e4 <_printf_i>:
 80274e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80274e8:	7e0f      	ldrb	r7, [r1, #24]
 80274ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80274ec:	2f78      	cmp	r7, #120	@ 0x78
 80274ee:	4691      	mov	r9, r2
 80274f0:	4680      	mov	r8, r0
 80274f2:	460c      	mov	r4, r1
 80274f4:	469a      	mov	sl, r3
 80274f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80274fa:	d807      	bhi.n	802750c <_printf_i+0x28>
 80274fc:	2f62      	cmp	r7, #98	@ 0x62
 80274fe:	d80a      	bhi.n	8027516 <_printf_i+0x32>
 8027500:	2f00      	cmp	r7, #0
 8027502:	f000 80d2 	beq.w	80276aa <_printf_i+0x1c6>
 8027506:	2f58      	cmp	r7, #88	@ 0x58
 8027508:	f000 80b9 	beq.w	802767e <_printf_i+0x19a>
 802750c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8027510:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8027514:	e03a      	b.n	802758c <_printf_i+0xa8>
 8027516:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802751a:	2b15      	cmp	r3, #21
 802751c:	d8f6      	bhi.n	802750c <_printf_i+0x28>
 802751e:	a101      	add	r1, pc, #4	@ (adr r1, 8027524 <_printf_i+0x40>)
 8027520:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8027524:	0802757d 	.word	0x0802757d
 8027528:	08027591 	.word	0x08027591
 802752c:	0802750d 	.word	0x0802750d
 8027530:	0802750d 	.word	0x0802750d
 8027534:	0802750d 	.word	0x0802750d
 8027538:	0802750d 	.word	0x0802750d
 802753c:	08027591 	.word	0x08027591
 8027540:	0802750d 	.word	0x0802750d
 8027544:	0802750d 	.word	0x0802750d
 8027548:	0802750d 	.word	0x0802750d
 802754c:	0802750d 	.word	0x0802750d
 8027550:	08027691 	.word	0x08027691
 8027554:	080275bb 	.word	0x080275bb
 8027558:	0802764b 	.word	0x0802764b
 802755c:	0802750d 	.word	0x0802750d
 8027560:	0802750d 	.word	0x0802750d
 8027564:	080276b3 	.word	0x080276b3
 8027568:	0802750d 	.word	0x0802750d
 802756c:	080275bb 	.word	0x080275bb
 8027570:	0802750d 	.word	0x0802750d
 8027574:	0802750d 	.word	0x0802750d
 8027578:	08027653 	.word	0x08027653
 802757c:	6833      	ldr	r3, [r6, #0]
 802757e:	1d1a      	adds	r2, r3, #4
 8027580:	681b      	ldr	r3, [r3, #0]
 8027582:	6032      	str	r2, [r6, #0]
 8027584:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8027588:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 802758c:	2301      	movs	r3, #1
 802758e:	e09d      	b.n	80276cc <_printf_i+0x1e8>
 8027590:	6833      	ldr	r3, [r6, #0]
 8027592:	6820      	ldr	r0, [r4, #0]
 8027594:	1d19      	adds	r1, r3, #4
 8027596:	6031      	str	r1, [r6, #0]
 8027598:	0606      	lsls	r6, r0, #24
 802759a:	d501      	bpl.n	80275a0 <_printf_i+0xbc>
 802759c:	681d      	ldr	r5, [r3, #0]
 802759e:	e003      	b.n	80275a8 <_printf_i+0xc4>
 80275a0:	0645      	lsls	r5, r0, #25
 80275a2:	d5fb      	bpl.n	802759c <_printf_i+0xb8>
 80275a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80275a8:	2d00      	cmp	r5, #0
 80275aa:	da03      	bge.n	80275b4 <_printf_i+0xd0>
 80275ac:	232d      	movs	r3, #45	@ 0x2d
 80275ae:	426d      	negs	r5, r5
 80275b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80275b4:	4859      	ldr	r0, [pc, #356]	@ (802771c <_printf_i+0x238>)
 80275b6:	230a      	movs	r3, #10
 80275b8:	e011      	b.n	80275de <_printf_i+0xfa>
 80275ba:	6821      	ldr	r1, [r4, #0]
 80275bc:	6833      	ldr	r3, [r6, #0]
 80275be:	0608      	lsls	r0, r1, #24
 80275c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80275c4:	d402      	bmi.n	80275cc <_printf_i+0xe8>
 80275c6:	0649      	lsls	r1, r1, #25
 80275c8:	bf48      	it	mi
 80275ca:	b2ad      	uxthmi	r5, r5
 80275cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80275ce:	4853      	ldr	r0, [pc, #332]	@ (802771c <_printf_i+0x238>)
 80275d0:	6033      	str	r3, [r6, #0]
 80275d2:	bf14      	ite	ne
 80275d4:	230a      	movne	r3, #10
 80275d6:	2308      	moveq	r3, #8
 80275d8:	2100      	movs	r1, #0
 80275da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80275de:	6866      	ldr	r6, [r4, #4]
 80275e0:	60a6      	str	r6, [r4, #8]
 80275e2:	2e00      	cmp	r6, #0
 80275e4:	bfa2      	ittt	ge
 80275e6:	6821      	ldrge	r1, [r4, #0]
 80275e8:	f021 0104 	bicge.w	r1, r1, #4
 80275ec:	6021      	strge	r1, [r4, #0]
 80275ee:	b90d      	cbnz	r5, 80275f4 <_printf_i+0x110>
 80275f0:	2e00      	cmp	r6, #0
 80275f2:	d04b      	beq.n	802768c <_printf_i+0x1a8>
 80275f4:	4616      	mov	r6, r2
 80275f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80275fa:	fb03 5711 	mls	r7, r3, r1, r5
 80275fe:	5dc7      	ldrb	r7, [r0, r7]
 8027600:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8027604:	462f      	mov	r7, r5
 8027606:	42bb      	cmp	r3, r7
 8027608:	460d      	mov	r5, r1
 802760a:	d9f4      	bls.n	80275f6 <_printf_i+0x112>
 802760c:	2b08      	cmp	r3, #8
 802760e:	d10b      	bne.n	8027628 <_printf_i+0x144>
 8027610:	6823      	ldr	r3, [r4, #0]
 8027612:	07df      	lsls	r7, r3, #31
 8027614:	d508      	bpl.n	8027628 <_printf_i+0x144>
 8027616:	6923      	ldr	r3, [r4, #16]
 8027618:	6861      	ldr	r1, [r4, #4]
 802761a:	4299      	cmp	r1, r3
 802761c:	bfde      	ittt	le
 802761e:	2330      	movle	r3, #48	@ 0x30
 8027620:	f806 3c01 	strble.w	r3, [r6, #-1]
 8027624:	f106 36ff 	addle.w	r6, r6, #4294967295
 8027628:	1b92      	subs	r2, r2, r6
 802762a:	6122      	str	r2, [r4, #16]
 802762c:	f8cd a000 	str.w	sl, [sp]
 8027630:	464b      	mov	r3, r9
 8027632:	aa03      	add	r2, sp, #12
 8027634:	4621      	mov	r1, r4
 8027636:	4640      	mov	r0, r8
 8027638:	f7ff fee6 	bl	8027408 <_printf_common>
 802763c:	3001      	adds	r0, #1
 802763e:	d14a      	bne.n	80276d6 <_printf_i+0x1f2>
 8027640:	f04f 30ff 	mov.w	r0, #4294967295
 8027644:	b004      	add	sp, #16
 8027646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802764a:	6823      	ldr	r3, [r4, #0]
 802764c:	f043 0320 	orr.w	r3, r3, #32
 8027650:	6023      	str	r3, [r4, #0]
 8027652:	4833      	ldr	r0, [pc, #204]	@ (8027720 <_printf_i+0x23c>)
 8027654:	2778      	movs	r7, #120	@ 0x78
 8027656:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802765a:	6823      	ldr	r3, [r4, #0]
 802765c:	6831      	ldr	r1, [r6, #0]
 802765e:	061f      	lsls	r7, r3, #24
 8027660:	f851 5b04 	ldr.w	r5, [r1], #4
 8027664:	d402      	bmi.n	802766c <_printf_i+0x188>
 8027666:	065f      	lsls	r7, r3, #25
 8027668:	bf48      	it	mi
 802766a:	b2ad      	uxthmi	r5, r5
 802766c:	6031      	str	r1, [r6, #0]
 802766e:	07d9      	lsls	r1, r3, #31
 8027670:	bf44      	itt	mi
 8027672:	f043 0320 	orrmi.w	r3, r3, #32
 8027676:	6023      	strmi	r3, [r4, #0]
 8027678:	b11d      	cbz	r5, 8027682 <_printf_i+0x19e>
 802767a:	2310      	movs	r3, #16
 802767c:	e7ac      	b.n	80275d8 <_printf_i+0xf4>
 802767e:	4827      	ldr	r0, [pc, #156]	@ (802771c <_printf_i+0x238>)
 8027680:	e7e9      	b.n	8027656 <_printf_i+0x172>
 8027682:	6823      	ldr	r3, [r4, #0]
 8027684:	f023 0320 	bic.w	r3, r3, #32
 8027688:	6023      	str	r3, [r4, #0]
 802768a:	e7f6      	b.n	802767a <_printf_i+0x196>
 802768c:	4616      	mov	r6, r2
 802768e:	e7bd      	b.n	802760c <_printf_i+0x128>
 8027690:	6833      	ldr	r3, [r6, #0]
 8027692:	6825      	ldr	r5, [r4, #0]
 8027694:	6961      	ldr	r1, [r4, #20]
 8027696:	1d18      	adds	r0, r3, #4
 8027698:	6030      	str	r0, [r6, #0]
 802769a:	062e      	lsls	r6, r5, #24
 802769c:	681b      	ldr	r3, [r3, #0]
 802769e:	d501      	bpl.n	80276a4 <_printf_i+0x1c0>
 80276a0:	6019      	str	r1, [r3, #0]
 80276a2:	e002      	b.n	80276aa <_printf_i+0x1c6>
 80276a4:	0668      	lsls	r0, r5, #25
 80276a6:	d5fb      	bpl.n	80276a0 <_printf_i+0x1bc>
 80276a8:	8019      	strh	r1, [r3, #0]
 80276aa:	2300      	movs	r3, #0
 80276ac:	6123      	str	r3, [r4, #16]
 80276ae:	4616      	mov	r6, r2
 80276b0:	e7bc      	b.n	802762c <_printf_i+0x148>
 80276b2:	6833      	ldr	r3, [r6, #0]
 80276b4:	1d1a      	adds	r2, r3, #4
 80276b6:	6032      	str	r2, [r6, #0]
 80276b8:	681e      	ldr	r6, [r3, #0]
 80276ba:	6862      	ldr	r2, [r4, #4]
 80276bc:	2100      	movs	r1, #0
 80276be:	4630      	mov	r0, r6
 80276c0:	f7d8 fe1e 	bl	8000300 <memchr>
 80276c4:	b108      	cbz	r0, 80276ca <_printf_i+0x1e6>
 80276c6:	1b80      	subs	r0, r0, r6
 80276c8:	6060      	str	r0, [r4, #4]
 80276ca:	6863      	ldr	r3, [r4, #4]
 80276cc:	6123      	str	r3, [r4, #16]
 80276ce:	2300      	movs	r3, #0
 80276d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80276d4:	e7aa      	b.n	802762c <_printf_i+0x148>
 80276d6:	6923      	ldr	r3, [r4, #16]
 80276d8:	4632      	mov	r2, r6
 80276da:	4649      	mov	r1, r9
 80276dc:	4640      	mov	r0, r8
 80276de:	47d0      	blx	sl
 80276e0:	3001      	adds	r0, #1
 80276e2:	d0ad      	beq.n	8027640 <_printf_i+0x15c>
 80276e4:	6823      	ldr	r3, [r4, #0]
 80276e6:	079b      	lsls	r3, r3, #30
 80276e8:	d413      	bmi.n	8027712 <_printf_i+0x22e>
 80276ea:	68e0      	ldr	r0, [r4, #12]
 80276ec:	9b03      	ldr	r3, [sp, #12]
 80276ee:	4298      	cmp	r0, r3
 80276f0:	bfb8      	it	lt
 80276f2:	4618      	movlt	r0, r3
 80276f4:	e7a6      	b.n	8027644 <_printf_i+0x160>
 80276f6:	2301      	movs	r3, #1
 80276f8:	4632      	mov	r2, r6
 80276fa:	4649      	mov	r1, r9
 80276fc:	4640      	mov	r0, r8
 80276fe:	47d0      	blx	sl
 8027700:	3001      	adds	r0, #1
 8027702:	d09d      	beq.n	8027640 <_printf_i+0x15c>
 8027704:	3501      	adds	r5, #1
 8027706:	68e3      	ldr	r3, [r4, #12]
 8027708:	9903      	ldr	r1, [sp, #12]
 802770a:	1a5b      	subs	r3, r3, r1
 802770c:	42ab      	cmp	r3, r5
 802770e:	dcf2      	bgt.n	80276f6 <_printf_i+0x212>
 8027710:	e7eb      	b.n	80276ea <_printf_i+0x206>
 8027712:	2500      	movs	r5, #0
 8027714:	f104 0619 	add.w	r6, r4, #25
 8027718:	e7f5      	b.n	8027706 <_printf_i+0x222>
 802771a:	bf00      	nop
 802771c:	08028fea 	.word	0x08028fea
 8027720:	08028ffb 	.word	0x08028ffb

08027724 <__sflush_r>:
 8027724:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8027728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802772c:	0716      	lsls	r6, r2, #28
 802772e:	4605      	mov	r5, r0
 8027730:	460c      	mov	r4, r1
 8027732:	d454      	bmi.n	80277de <__sflush_r+0xba>
 8027734:	684b      	ldr	r3, [r1, #4]
 8027736:	2b00      	cmp	r3, #0
 8027738:	dc02      	bgt.n	8027740 <__sflush_r+0x1c>
 802773a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 802773c:	2b00      	cmp	r3, #0
 802773e:	dd48      	ble.n	80277d2 <__sflush_r+0xae>
 8027740:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8027742:	2e00      	cmp	r6, #0
 8027744:	d045      	beq.n	80277d2 <__sflush_r+0xae>
 8027746:	2300      	movs	r3, #0
 8027748:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 802774c:	682f      	ldr	r7, [r5, #0]
 802774e:	6a21      	ldr	r1, [r4, #32]
 8027750:	602b      	str	r3, [r5, #0]
 8027752:	d030      	beq.n	80277b6 <__sflush_r+0x92>
 8027754:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8027756:	89a3      	ldrh	r3, [r4, #12]
 8027758:	0759      	lsls	r1, r3, #29
 802775a:	d505      	bpl.n	8027768 <__sflush_r+0x44>
 802775c:	6863      	ldr	r3, [r4, #4]
 802775e:	1ad2      	subs	r2, r2, r3
 8027760:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8027762:	b10b      	cbz	r3, 8027768 <__sflush_r+0x44>
 8027764:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8027766:	1ad2      	subs	r2, r2, r3
 8027768:	2300      	movs	r3, #0
 802776a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802776c:	6a21      	ldr	r1, [r4, #32]
 802776e:	4628      	mov	r0, r5
 8027770:	47b0      	blx	r6
 8027772:	1c43      	adds	r3, r0, #1
 8027774:	89a3      	ldrh	r3, [r4, #12]
 8027776:	d106      	bne.n	8027786 <__sflush_r+0x62>
 8027778:	6829      	ldr	r1, [r5, #0]
 802777a:	291d      	cmp	r1, #29
 802777c:	d82b      	bhi.n	80277d6 <__sflush_r+0xb2>
 802777e:	4a2a      	ldr	r2, [pc, #168]	@ (8027828 <__sflush_r+0x104>)
 8027780:	410a      	asrs	r2, r1
 8027782:	07d6      	lsls	r6, r2, #31
 8027784:	d427      	bmi.n	80277d6 <__sflush_r+0xb2>
 8027786:	2200      	movs	r2, #0
 8027788:	6062      	str	r2, [r4, #4]
 802778a:	04d9      	lsls	r1, r3, #19
 802778c:	6922      	ldr	r2, [r4, #16]
 802778e:	6022      	str	r2, [r4, #0]
 8027790:	d504      	bpl.n	802779c <__sflush_r+0x78>
 8027792:	1c42      	adds	r2, r0, #1
 8027794:	d101      	bne.n	802779a <__sflush_r+0x76>
 8027796:	682b      	ldr	r3, [r5, #0]
 8027798:	b903      	cbnz	r3, 802779c <__sflush_r+0x78>
 802779a:	6560      	str	r0, [r4, #84]	@ 0x54
 802779c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802779e:	602f      	str	r7, [r5, #0]
 80277a0:	b1b9      	cbz	r1, 80277d2 <__sflush_r+0xae>
 80277a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80277a6:	4299      	cmp	r1, r3
 80277a8:	d002      	beq.n	80277b0 <__sflush_r+0x8c>
 80277aa:	4628      	mov	r0, r5
 80277ac:	f7ff fc98 	bl	80270e0 <_free_r>
 80277b0:	2300      	movs	r3, #0
 80277b2:	6363      	str	r3, [r4, #52]	@ 0x34
 80277b4:	e00d      	b.n	80277d2 <__sflush_r+0xae>
 80277b6:	2301      	movs	r3, #1
 80277b8:	4628      	mov	r0, r5
 80277ba:	47b0      	blx	r6
 80277bc:	4602      	mov	r2, r0
 80277be:	1c50      	adds	r0, r2, #1
 80277c0:	d1c9      	bne.n	8027756 <__sflush_r+0x32>
 80277c2:	682b      	ldr	r3, [r5, #0]
 80277c4:	2b00      	cmp	r3, #0
 80277c6:	d0c6      	beq.n	8027756 <__sflush_r+0x32>
 80277c8:	2b1d      	cmp	r3, #29
 80277ca:	d001      	beq.n	80277d0 <__sflush_r+0xac>
 80277cc:	2b16      	cmp	r3, #22
 80277ce:	d11e      	bne.n	802780e <__sflush_r+0xea>
 80277d0:	602f      	str	r7, [r5, #0]
 80277d2:	2000      	movs	r0, #0
 80277d4:	e022      	b.n	802781c <__sflush_r+0xf8>
 80277d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80277da:	b21b      	sxth	r3, r3
 80277dc:	e01b      	b.n	8027816 <__sflush_r+0xf2>
 80277de:	690f      	ldr	r7, [r1, #16]
 80277e0:	2f00      	cmp	r7, #0
 80277e2:	d0f6      	beq.n	80277d2 <__sflush_r+0xae>
 80277e4:	0793      	lsls	r3, r2, #30
 80277e6:	680e      	ldr	r6, [r1, #0]
 80277e8:	bf08      	it	eq
 80277ea:	694b      	ldreq	r3, [r1, #20]
 80277ec:	600f      	str	r7, [r1, #0]
 80277ee:	bf18      	it	ne
 80277f0:	2300      	movne	r3, #0
 80277f2:	eba6 0807 	sub.w	r8, r6, r7
 80277f6:	608b      	str	r3, [r1, #8]
 80277f8:	f1b8 0f00 	cmp.w	r8, #0
 80277fc:	dde9      	ble.n	80277d2 <__sflush_r+0xae>
 80277fe:	6a21      	ldr	r1, [r4, #32]
 8027800:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8027802:	4643      	mov	r3, r8
 8027804:	463a      	mov	r2, r7
 8027806:	4628      	mov	r0, r5
 8027808:	47b0      	blx	r6
 802780a:	2800      	cmp	r0, #0
 802780c:	dc08      	bgt.n	8027820 <__sflush_r+0xfc>
 802780e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8027812:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8027816:	81a3      	strh	r3, [r4, #12]
 8027818:	f04f 30ff 	mov.w	r0, #4294967295
 802781c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027820:	4407      	add	r7, r0
 8027822:	eba8 0800 	sub.w	r8, r8, r0
 8027826:	e7e7      	b.n	80277f8 <__sflush_r+0xd4>
 8027828:	dfbffffe 	.word	0xdfbffffe

0802782c <_fflush_r>:
 802782c:	b538      	push	{r3, r4, r5, lr}
 802782e:	690b      	ldr	r3, [r1, #16]
 8027830:	4605      	mov	r5, r0
 8027832:	460c      	mov	r4, r1
 8027834:	b913      	cbnz	r3, 802783c <_fflush_r+0x10>
 8027836:	2500      	movs	r5, #0
 8027838:	4628      	mov	r0, r5
 802783a:	bd38      	pop	{r3, r4, r5, pc}
 802783c:	b118      	cbz	r0, 8027846 <_fflush_r+0x1a>
 802783e:	6a03      	ldr	r3, [r0, #32]
 8027840:	b90b      	cbnz	r3, 8027846 <_fflush_r+0x1a>
 8027842:	f7ff f9bf 	bl	8026bc4 <__sinit>
 8027846:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802784a:	2b00      	cmp	r3, #0
 802784c:	d0f3      	beq.n	8027836 <_fflush_r+0xa>
 802784e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8027850:	07d0      	lsls	r0, r2, #31
 8027852:	d404      	bmi.n	802785e <_fflush_r+0x32>
 8027854:	0599      	lsls	r1, r3, #22
 8027856:	d402      	bmi.n	802785e <_fflush_r+0x32>
 8027858:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802785a:	f7ff fc30 	bl	80270be <__retarget_lock_acquire_recursive>
 802785e:	4628      	mov	r0, r5
 8027860:	4621      	mov	r1, r4
 8027862:	f7ff ff5f 	bl	8027724 <__sflush_r>
 8027866:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8027868:	07da      	lsls	r2, r3, #31
 802786a:	4605      	mov	r5, r0
 802786c:	d4e4      	bmi.n	8027838 <_fflush_r+0xc>
 802786e:	89a3      	ldrh	r3, [r4, #12]
 8027870:	059b      	lsls	r3, r3, #22
 8027872:	d4e1      	bmi.n	8027838 <_fflush_r+0xc>
 8027874:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8027876:	f7ff fc23 	bl	80270c0 <__retarget_lock_release_recursive>
 802787a:	e7dd      	b.n	8027838 <_fflush_r+0xc>

0802787c <__swhatbuf_r>:
 802787c:	b570      	push	{r4, r5, r6, lr}
 802787e:	460c      	mov	r4, r1
 8027880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027884:	2900      	cmp	r1, #0
 8027886:	b096      	sub	sp, #88	@ 0x58
 8027888:	4615      	mov	r5, r2
 802788a:	461e      	mov	r6, r3
 802788c:	da0d      	bge.n	80278aa <__swhatbuf_r+0x2e>
 802788e:	89a3      	ldrh	r3, [r4, #12]
 8027890:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8027894:	f04f 0100 	mov.w	r1, #0
 8027898:	bf14      	ite	ne
 802789a:	2340      	movne	r3, #64	@ 0x40
 802789c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80278a0:	2000      	movs	r0, #0
 80278a2:	6031      	str	r1, [r6, #0]
 80278a4:	602b      	str	r3, [r5, #0]
 80278a6:	b016      	add	sp, #88	@ 0x58
 80278a8:	bd70      	pop	{r4, r5, r6, pc}
 80278aa:	466a      	mov	r2, sp
 80278ac:	f000 f87c 	bl	80279a8 <_fstat_r>
 80278b0:	2800      	cmp	r0, #0
 80278b2:	dbec      	blt.n	802788e <__swhatbuf_r+0x12>
 80278b4:	9901      	ldr	r1, [sp, #4]
 80278b6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80278ba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80278be:	4259      	negs	r1, r3
 80278c0:	4159      	adcs	r1, r3
 80278c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80278c6:	e7eb      	b.n	80278a0 <__swhatbuf_r+0x24>

080278c8 <__smakebuf_r>:
 80278c8:	898b      	ldrh	r3, [r1, #12]
 80278ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80278cc:	079d      	lsls	r5, r3, #30
 80278ce:	4606      	mov	r6, r0
 80278d0:	460c      	mov	r4, r1
 80278d2:	d507      	bpl.n	80278e4 <__smakebuf_r+0x1c>
 80278d4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80278d8:	6023      	str	r3, [r4, #0]
 80278da:	6123      	str	r3, [r4, #16]
 80278dc:	2301      	movs	r3, #1
 80278de:	6163      	str	r3, [r4, #20]
 80278e0:	b003      	add	sp, #12
 80278e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80278e4:	ab01      	add	r3, sp, #4
 80278e6:	466a      	mov	r2, sp
 80278e8:	f7ff ffc8 	bl	802787c <__swhatbuf_r>
 80278ec:	9f00      	ldr	r7, [sp, #0]
 80278ee:	4605      	mov	r5, r0
 80278f0:	4639      	mov	r1, r7
 80278f2:	4630      	mov	r0, r6
 80278f4:	f7fe ff94 	bl	8026820 <_malloc_r>
 80278f8:	b948      	cbnz	r0, 802790e <__smakebuf_r+0x46>
 80278fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80278fe:	059a      	lsls	r2, r3, #22
 8027900:	d4ee      	bmi.n	80278e0 <__smakebuf_r+0x18>
 8027902:	f023 0303 	bic.w	r3, r3, #3
 8027906:	f043 0302 	orr.w	r3, r3, #2
 802790a:	81a3      	strh	r3, [r4, #12]
 802790c:	e7e2      	b.n	80278d4 <__smakebuf_r+0xc>
 802790e:	89a3      	ldrh	r3, [r4, #12]
 8027910:	6020      	str	r0, [r4, #0]
 8027912:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8027916:	81a3      	strh	r3, [r4, #12]
 8027918:	9b01      	ldr	r3, [sp, #4]
 802791a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802791e:	b15b      	cbz	r3, 8027938 <__smakebuf_r+0x70>
 8027920:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8027924:	4630      	mov	r0, r6
 8027926:	f000 f851 	bl	80279cc <_isatty_r>
 802792a:	b128      	cbz	r0, 8027938 <__smakebuf_r+0x70>
 802792c:	89a3      	ldrh	r3, [r4, #12]
 802792e:	f023 0303 	bic.w	r3, r3, #3
 8027932:	f043 0301 	orr.w	r3, r3, #1
 8027936:	81a3      	strh	r3, [r4, #12]
 8027938:	89a3      	ldrh	r3, [r4, #12]
 802793a:	431d      	orrs	r5, r3
 802793c:	81a5      	strh	r5, [r4, #12]
 802793e:	e7cf      	b.n	80278e0 <__smakebuf_r+0x18>

08027940 <_putc_r>:
 8027940:	b570      	push	{r4, r5, r6, lr}
 8027942:	460d      	mov	r5, r1
 8027944:	4614      	mov	r4, r2
 8027946:	4606      	mov	r6, r0
 8027948:	b118      	cbz	r0, 8027952 <_putc_r+0x12>
 802794a:	6a03      	ldr	r3, [r0, #32]
 802794c:	b90b      	cbnz	r3, 8027952 <_putc_r+0x12>
 802794e:	f7ff f939 	bl	8026bc4 <__sinit>
 8027952:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8027954:	07d8      	lsls	r0, r3, #31
 8027956:	d405      	bmi.n	8027964 <_putc_r+0x24>
 8027958:	89a3      	ldrh	r3, [r4, #12]
 802795a:	0599      	lsls	r1, r3, #22
 802795c:	d402      	bmi.n	8027964 <_putc_r+0x24>
 802795e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8027960:	f7ff fbad 	bl	80270be <__retarget_lock_acquire_recursive>
 8027964:	68a3      	ldr	r3, [r4, #8]
 8027966:	3b01      	subs	r3, #1
 8027968:	2b00      	cmp	r3, #0
 802796a:	60a3      	str	r3, [r4, #8]
 802796c:	da05      	bge.n	802797a <_putc_r+0x3a>
 802796e:	69a2      	ldr	r2, [r4, #24]
 8027970:	4293      	cmp	r3, r2
 8027972:	db12      	blt.n	802799a <_putc_r+0x5a>
 8027974:	b2eb      	uxtb	r3, r5
 8027976:	2b0a      	cmp	r3, #10
 8027978:	d00f      	beq.n	802799a <_putc_r+0x5a>
 802797a:	6823      	ldr	r3, [r4, #0]
 802797c:	1c5a      	adds	r2, r3, #1
 802797e:	6022      	str	r2, [r4, #0]
 8027980:	701d      	strb	r5, [r3, #0]
 8027982:	b2ed      	uxtb	r5, r5
 8027984:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8027986:	07da      	lsls	r2, r3, #31
 8027988:	d405      	bmi.n	8027996 <_putc_r+0x56>
 802798a:	89a3      	ldrh	r3, [r4, #12]
 802798c:	059b      	lsls	r3, r3, #22
 802798e:	d402      	bmi.n	8027996 <_putc_r+0x56>
 8027990:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8027992:	f7ff fb95 	bl	80270c0 <__retarget_lock_release_recursive>
 8027996:	4628      	mov	r0, r5
 8027998:	bd70      	pop	{r4, r5, r6, pc}
 802799a:	4629      	mov	r1, r5
 802799c:	4622      	mov	r2, r4
 802799e:	4630      	mov	r0, r6
 80279a0:	f7ff fa01 	bl	8026da6 <__swbuf_r>
 80279a4:	4605      	mov	r5, r0
 80279a6:	e7ed      	b.n	8027984 <_putc_r+0x44>

080279a8 <_fstat_r>:
 80279a8:	b538      	push	{r3, r4, r5, lr}
 80279aa:	4d07      	ldr	r5, [pc, #28]	@ (80279c8 <_fstat_r+0x20>)
 80279ac:	2300      	movs	r3, #0
 80279ae:	4604      	mov	r4, r0
 80279b0:	4608      	mov	r0, r1
 80279b2:	4611      	mov	r1, r2
 80279b4:	602b      	str	r3, [r5, #0]
 80279b6:	f7e6 f9a7 	bl	800dd08 <_fstat>
 80279ba:	1c43      	adds	r3, r0, #1
 80279bc:	d102      	bne.n	80279c4 <_fstat_r+0x1c>
 80279be:	682b      	ldr	r3, [r5, #0]
 80279c0:	b103      	cbz	r3, 80279c4 <_fstat_r+0x1c>
 80279c2:	6023      	str	r3, [r4, #0]
 80279c4:	bd38      	pop	{r3, r4, r5, pc}
 80279c6:	bf00      	nop
 80279c8:	24000c04 	.word	0x24000c04

080279cc <_isatty_r>:
 80279cc:	b538      	push	{r3, r4, r5, lr}
 80279ce:	4d06      	ldr	r5, [pc, #24]	@ (80279e8 <_isatty_r+0x1c>)
 80279d0:	2300      	movs	r3, #0
 80279d2:	4604      	mov	r4, r0
 80279d4:	4608      	mov	r0, r1
 80279d6:	602b      	str	r3, [r5, #0]
 80279d8:	f7e6 f9a6 	bl	800dd28 <_isatty>
 80279dc:	1c43      	adds	r3, r0, #1
 80279de:	d102      	bne.n	80279e6 <_isatty_r+0x1a>
 80279e0:	682b      	ldr	r3, [r5, #0]
 80279e2:	b103      	cbz	r3, 80279e6 <_isatty_r+0x1a>
 80279e4:	6023      	str	r3, [r4, #0]
 80279e6:	bd38      	pop	{r3, r4, r5, pc}
 80279e8:	24000c04 	.word	0x24000c04

080279ec <_init>:
 80279ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80279ee:	bf00      	nop
 80279f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80279f2:	bc08      	pop	{r3}
 80279f4:	469e      	mov	lr, r3
 80279f6:	4770      	bx	lr

080279f8 <_fini>:
 80279f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80279fa:	bf00      	nop
 80279fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80279fe:	bc08      	pop	{r3}
 8027a00:	469e      	mov	lr, r3
 8027a02:	4770      	bx	lr
